#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[19];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Cutscene_VA_Frame_Flipbook_Ice_worm_Hole_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Cutscene_VA_Frame_Flipbook_Ice_worm_Hole_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Cutscene_VA_Frame_Flipbook_Ice_worm_Hole_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D M_Cutscene_VA_Frame_Flipbook_Ice_worm_Hole_snp_0_Texture2D_5;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_VA_Frame_Flipbook_Ice_worm_Hole_snp_0_Texture2D_6;
layout(set = 0, binding = 7) uniform texture2D M_Cutscene_VA_Frame_Flipbook_Ice_worm_Hole_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D M_Cutscene_VA_Frame_Flipbook_Ice_worm_Hole_snp_0_Texture2D_8;
layout(set = 0, binding = 9) uniform texture2D M_Cutscene_VA_Frame_Flipbook_Ice_worm_Hole_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in float TEXCOORD_6;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1314;
float _3735;
float _3736;
float _3737;
float _3738;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _207 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _208 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _209 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _215 = inversesqrt(dot(vec3(_207, _208, _209), vec3(_207, _208, _209)));
    float _222 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _229 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _248 = cbMtdParam._m0[15u].y + TEXCOORD.x;
    float _249 = cbMtdParam._m0[15u].z + TEXCOORD.y;
    vec4 _262 = texture(sampler2D(M_Cutscene_VA_Frame_Flipbook_Ice_worm_Hole_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * _248) + cbTextureTilingScale._m0[0u].z, (_249 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _268 = _262.x * cbMtdParam._m0[9u].w;
    float _269 = _262.y * cbMtdParam._m0[10u].x;
    float _270 = _262.z * cbMtdParam._m0[10u].y;
    float _284 = cbMtdParam._m0[17u].y + TEXCOORD.x;
    float _285 = cbMtdParam._m0[17u].z + TEXCOORD.y;
    vec4 _298 = texture(sampler2D(M_Cutscene_VA_Frame_Flipbook_Ice_worm_Hole_snp_0_Texture2D_5, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _284) + cbTextureTilingScale._m0[5u].z, (_285 * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    uvec4 _315 = floatBitsToUint(cbMtdParam._m0[9u]);
    vec4 _329 = texture(sampler2D(M_Cutscene_VA_Frame_Flipbook_Ice_worm_Hole_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _331 = _329.x;
    float _342 = exp2(log2(((_315.z != 0u) ? (1.0 - _331) : _331) * cbMtdParam._m0[14u].w) * cbMtdParam._m0[15u].x);
    float _3747 = isnan(0.0) ? _342 : (isnan(_342) ? 0.0 : max(_342, 0.0));
    float _350 = cbMtdParam._m0[16u].x * cbMtdParam._m0[15u].w;
    float _353 = (_350 + (-1.0)) * cbMtdParam._m0[14u].x;
    bool _355 = _315.y != 0u;
    float _367 = (cbMtdParam._m0[16u].w + cbMtdParam._m0[14u].y) + ((TEXCOORD.z - cbMtdParam._m0[16u].w) * cbMtdParam._m0[16u].y);
    float _369 = (cbMtdParam._m0[17u].x + cbMtdParam._m0[13u].w) + ((TEXCOORD.w - cbMtdParam._m0[17u].x) * cbMtdParam._m0[16u].z);
    float _3758 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _3769 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    uint _375 = uint(int(floor(_353)));
    uint _377 = _375 + 1u;
    uint _378 = uint(int(_350));
    uint _379 = _378 * 3u;
    uint _380 = _375 - _379 * (_375 / _379);
    uint _381 = _377 - _379 * (_377 / _379);
    float _384 = float(int(_380 - _378 * (_380 / _378)));
    float _388 = float(int(_381 - _378 * (_381 / _378)));
    float _392 = 1.0 / cbMtdParam._m0[15u].w;
    float _393 = 1.0 / cbMtdParam._m0[16u].x;
    float _394 = fract(_355 ? _367 : (isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0))));
    float _395 = fract(_355 ? _369 : (isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0))));
    vec4 _423 = texture(sampler2D(M_Cutscene_VA_Frame_Flipbook_Ice_worm_Hole_snp_0_Texture2D_8, SS_WrapLinear), vec2((((_394 + (_384 - cbMtdParam._m0[15u].w * trunc(_384 / cbMtdParam._m0[15u].w))) * _392) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((_395 + floor(_384 / cbMtdParam._m0[15u].w)) * _393) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    float _425 = _423.x;
    float _428 = ((texture(sampler2D(M_Cutscene_VA_Frame_Flipbook_Ice_worm_Hole_snp_0_Texture2D_8, SS_WrapLinear), vec2((((_394 + (_388 - cbMtdParam._m0[15u].w * trunc(_388 / cbMtdParam._m0[15u].w))) * _392) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((_395 + floor(_388 / cbMtdParam._m0[15u].w)) * _393) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w)).x - _425) * fract(_353)) + _425;
    float _434 = exp2(log2(((_428 * (isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0)))) + _428) * cbMtdParam._m0[13u].x) * cbMtdParam._m0[13u].y);
    float _3780 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _435 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
    float _442 = (_435 * ((_298.x * cbMtdParam._m0[11u].w) - _268)) + _268;
    float _443 = (_435 * ((_298.y * cbMtdParam._m0[12u].x) - _269)) + _269;
    float _444 = (_435 * ((_298.z * cbMtdParam._m0[12u].y) - _270)) + _270;
    vec4 _454 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _456 = _454.x;
    bool _462 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _479 = ((_462 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _456)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _456))) - POSITION_1.w) / cbMtdParam._m0[13u].z;
    float _3791 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _480 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
    float _3802 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _481 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
    float _499 = texture(sampler2D(M_Cutscene_VA_Frame_Flipbook_Ice_worm_Hole_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * _248) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _249) + cbTextureTilingScale._m0[2u].w)).x + cbMtdParam._m0[12u].w;
    float _521 = (((cbMtdParam._m0[14u].z - _499) + texture(sampler2D(M_Cutscene_VA_Frame_Flipbook_Ice_worm_Hole_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * _284) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _285) + cbTextureTilingScale._m0[6u].w)).x) * _435) + _499;
    vec4 _533 = texture(sampler2D(M_Cutscene_VA_Frame_Flipbook_Ice_worm_Hole_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _248) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _249) + cbTextureTilingScale._m0[1u].w));
    float _535 = _533.x;
    float _536 = _533.y;
    float _537 = _533.z;
    vec4 _550 = texture(sampler2D(M_Cutscene_VA_Frame_Flipbook_Ice_worm_Hole_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * _284) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * _285) + cbTextureTilingScale._m0[7u].w));
    float _563 = ((_550.z - _537) * _435) + _537;
    float _567 = ((((_550.x - _535) * _435) + _535) * 2.0) + (-1.0);
    float _568 = ((((_550.y - _536) * _435) + _536) * 2.0) + (-1.0);
    float _569 = dot(vec2(_567, _568), vec2(_567, _568));
    float _3813 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _574 = sqrt(1.0 - (isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0))));
    bool _579 = floatBitsToUint(cbMtdParam._m0[9u]).x != 0u;
    float _600 = fma(_574, _222 * NORMAL.x, fma(_568, _229 * TANGENT.x, (_215 * _207) * _567));
    float _603 = fma(_574, _222 * NORMAL.y, fma(_568, _229 * TANGENT.y, (_215 * _208) * _567));
    float _606 = fma(_574, _222 * NORMAL.z, fma(_568, _229 * TANGENT.z, (_215 * _209) * _567));
    float _610 = inversesqrt(dot(vec3(_600, _603, _606), vec3(_600, _603, _606)));
    float _611 = _610 * _600;
    float _612 = _610 * _603;
    float _613 = _610 * _606;
    float _3824 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _614 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
    float _3835 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _615 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
    float _3846 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _616 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
    float _3857 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _617 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
    float _3868 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _618 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
    float _3879 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _619 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
    float _624 = _462 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _664 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _674 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _664);
    float _675 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _664);
    float _676 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _664);
    float _680 = inversesqrt(dot(vec3(_674, _675, _676), vec3(_674, _675, _676)));
    float _681 = _674 * _680;
    float _682 = _675 * _680;
    float _683 = _676 * _680;
    vec4 _688 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _690 = _688.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _993 = sqrt(((_674 * _674) + (_675 * _675)) + (_676 * _676));
        float _999 = (cbMatDynParam._m0[5u].x * _993) + cbMatDynParam._m0[5u].y;
        float _3890 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1000 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
        float _1004 = (cbMatDynParam._m0[5u].z * _993) + cbMatDynParam._m0[5u].w;
        float _3901 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0))) - _1000)) + _1000) < ((_690 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _700 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _701 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _703 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD_4.x, TEXCOORD_4.y));
    float _705 = _703.w;
    float _723 = fma(_613, cbSceneParam._m0[5u].z, fma(_612, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _611));
    float _726 = fma(_613, cbSceneParam._m0[6u].z, fma(_612, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _611));
    float _729 = fma(_613, cbSceneParam._m0[7u].z, fma(_612, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _611));
    vec4 _731 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD_4.x, TEXCOORD_4.y));
    float _733 = _731.x;
    float _745 = (((_731.y - _615) + (_731.w * _615)) * cbMtdParam._m0[3u].x) + _615;
    vec4 _746 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD_4.x, TEXCOORD_4.y));
    float _762 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_733 * _733)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _746.z;
    float _770 = (((cbMatDynParam._m0[15u].x - _619) * cbMatDynParam._m0[15u].w) * _762) + _619;
    float _778 = ((_762 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _745)) + _745;
    uint _802 = uint(roundEven(NORMAL.w)) * 13u;
    uint _803 = _802 + 9u;
    uint _804 = _803 + uint(cbMatDynParam._m0[0u].w);
    float _810 = (cbMtdParam._m0[0u].x * _616) * cbInstanceData._m0[_804].x;
    float _811 = (cbMtdParam._m0[0u].y * _617) * cbInstanceData._m0[_804].y;
    float _812 = (cbMtdParam._m0[0u].z * _618) * cbInstanceData._m0[_804].z;
    float _3912 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
    float _813 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
    float _3923 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
    float _814 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
    float _3934 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    float _815 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
    vec4 _816 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD_4.x, TEXCOORD_4.y));
    vec4 _821 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD_4.x, TEXCOORD_4.y));
    float _832 = (((_821.x - _770) + (_821.w * _770)) * cbMtdParam._m0[3u].x) + _770;
    float _845 = (cbMtdParam._m0[3u].x * (((_813 * _705) - _813) + _816.x)) + _813;
    float _846 = (cbMtdParam._m0[3u].x * (((_814 * _705) - _814) + _816.y)) + _814;
    float _847 = (cbMtdParam._m0[3u].x * (((_815 * _705) - _815) + _816.z)) + _815;
    float _861 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_770 * (_616 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_770 * (_617 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_770 * (_618 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD_4.x, TEXCOORD_4.y)).z;
    float _865 = _861 * cbMatDynParam._m0[13u].w;
    float _875 = (_865 * (cbMatDynParam._m0[13u].x - _845)) + _845;
    float _876 = (_865 * (cbMatDynParam._m0[13u].y - _846)) + _846;
    float _877 = (_865 * (cbMatDynParam._m0[13u].z - _847)) + _847;
    float _885 = ((_861 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _832)) + _832;
    float _886 = 1.0 - _885;
    float _887 = _886 * _875;
    float _888 = _886 * _876;
    float _889 = _886 * _877;
    float _893 = (_875 + (-0.039999999105930328369140625)) * _885;
    float _894 = (_876 + (-0.039999999105930328369140625)) * _885;
    float _895 = (_877 + (-0.039999999105930328369140625)) * _885;
    float _896 = _893 + 0.039999999105930328369140625;
    float _897 = _894 + 0.039999999105930328369140625;
    float _898 = _895 + 0.039999999105930328369140625;
    vec4 _907 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _700, cbSceneParam._m0[86u].y * _701));
    float _910 = _907.x * TEXCOORD_6;
    float _911 = dot(vec3(_611, _612, _613), vec3(_681, _682, _683));
    float _914 = _911 * 2.0;
    float _918 = (_914 * _611) - _681;
    float _919 = (_914 * _612) - _682;
    float _920 = (_914 * _613) - _683;
    float _924 = abs(dot(vec3(_681, _682, _683), vec3(_611, _612, _613)));
    float _3945 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
    float _926 = sqrt(_778);
    float _939 = exp2((_926 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_926 * 3.0));
    float _945 = (1.0 - _939) * ((_926 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _946 = _939 * _926;
    float _974 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _978 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _982 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1313;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1038 = fma(_982, cbModelParam._m0[26u].z, fma(_978, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _974));
        float _1042 = fma(_982, cbModelParam._m0[27u].z, fma(_978, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _974));
        float _1046 = fma(_982, cbModelParam._m0[28u].z, fma(_978, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _974));
        float _1071 = _974 + _611;
        float _1072 = _978 + _612;
        float _1073 = _982 + _613;
        float _1083 = fma(_1073, cbModelParam._m0[26u].z, fma(_1072, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1071)) - _1038;
        float _1084 = fma(_1073, cbModelParam._m0[27u].z, fma(_1072, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1071)) - _1042;
        float _1085 = fma(_1073, cbModelParam._m0[28u].z, fma(_1072, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1071)) - _1046;
        float _1089 = inversesqrt(dot(vec3(_1083, _1084, _1085), vec3(_1083, _1084, _1085)));
        float _1102 = ((_1089 * _1083) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1038 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1103 = ((_1089 * _1084) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1042 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1104 = ((_1089 * _1085) / cbModelParam._m0[34u].z) + ((((((_1046 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1107 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1102, _1103, _1104), 0.0);
        vec4 _1114 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1102, _1103, _1104), 0.0);
        vec4 _1121 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1102, _1103, _1104), 0.0);
        vec4 _1128 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1102, _1103, _1104), 0.0);
        float _1141 = exp2((_1107.w + (-0.5)) * 20.0) * 2.0;
        float _1142 = _1141 * (_1107.x + (-0.5));
        float _1143 = _1141 * (_1107.y + (-0.5));
        float _1144 = _1141 * (_1107.z + (-0.5));
        float _1151 = exp2((_1114.w + (-0.5)) * 20.0) * 2.0;
        float _1152 = _1151 * (_1114.x + (-0.5));
        float _1153 = _1151 * (_1114.y + (-0.5));
        float _1154 = _1151 * (_1114.z + (-0.5));
        float _1161 = exp2((_1121.w + (-0.5)) * 20.0) * 2.0;
        float _1162 = _1161 * (_1121.x + (-0.5));
        float _1163 = _1161 * (_1121.y + (-0.5));
        float _1164 = _1161 * (_1121.z + (-0.5));
        float _1171 = exp2((_1128.w + (-0.5)) * 20.0) * 2.0;
        float _1172 = _1171 * (_1128.x + (-0.5));
        float _1173 = _1171 * (_1128.y + (-0.5));
        float _1174 = _1171 * (_1128.z + (-0.5));
        float _1175 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1176 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1177 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1178 = _1142 * 0.5;
        float _1179 = _1152 * 0.5;
        float _1180 = _1162 * 0.5;
        float _1181 = dot(vec3(_1178, _1179, _1180), vec3(_1178, _1179, _1180));
        float _1186 = (_1181 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1181);
        float _1195 = (dot(vec3(_611, _612, _613), vec3(_1186 * _1178, _1186 * _1179, _1186 * _1180)) + 1.0) * 0.5;
        float _3971 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1205 = sqrt(((_1179 * _1179) + (_1178 * _1178)) + (_1180 * _1180)) / (_1175 + 9.9999997473787516355514526367188e-06);
        float _3982 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1206 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
        float _1207 = _1206 * 2.0;
        float _1211 = (1.0 - _1206) / (_1206 + 1.0);
        float _3993 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1212 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
        float _1221 = ((((1.0 - _1212) * (_1207 + 2.0)) * exp2(log2(isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0))) * (_1207 + 1.0))) + _1212) * _1175;
        float _1222 = _1143 * 0.5;
        float _1223 = _1153 * 0.5;
        float _1224 = _1163 * 0.5;
        float _1225 = dot(vec3(_1222, _1223, _1224), vec3(_1222, _1223, _1224));
        float _1230 = (_1225 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1225);
        float _1238 = (dot(vec3(_611, _612, _613), vec3(_1230 * _1222, _1230 * _1223, _1230 * _1224)) + 1.0) * 0.5;
        float _4004 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1247 = sqrt(((_1223 * _1223) + (_1222 * _1222)) + (_1224 * _1224)) / (_1176 + 9.9999997473787516355514526367188e-06);
        float _4015 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1248 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
        float _1249 = _1248 * 2.0;
        float _1253 = (1.0 - _1248) / (_1248 + 1.0);
        float _4026 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1254 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
        float _1263 = ((((1.0 - _1254) * (_1249 + 2.0)) * exp2(log2(isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0))) * (_1249 + 1.0))) + _1254) * _1176;
        float _1264 = _1144 * 0.5;
        float _1265 = _1154 * 0.5;
        float _1266 = _1164 * 0.5;
        float _1267 = dot(vec3(_1264, _1265, _1266), vec3(_1264, _1265, _1266));
        float _1272 = (_1267 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1267);
        float _1280 = (dot(vec3(_611, _612, _613), vec3(_1272 * _1264, _1272 * _1265, _1272 * _1266)) + 1.0) * 0.5;
        float _4037 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1289 = sqrt(((_1265 * _1265) + (_1264 * _1264)) + (_1266 * _1266)) / (_1177 + 9.9999997473787516355514526367188e-06);
        float _4048 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1290 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
        float _1291 = _1290 * 2.0;
        float _1295 = (1.0 - _1290) / (_1290 + 1.0);
        float _4059 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1296 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
        float _1305 = ((((1.0 - _1296) * (_1291 + 2.0)) * exp2(log2(isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0))) * (_1291 + 1.0))) + _1296) * _1177;
        _1313 = _1144;
        _1315 = _1143;
        _1316 = _1142;
        _1317 = _1154;
        _1318 = _1153;
        _1319 = _1152;
        _1320 = _1164;
        _1321 = _1163;
        _1322 = _1162;
        _1323 = _1177;
        _1324 = _1176;
        _1325 = _1175;
        _1326 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0)));
        _1327 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0)));
        _1328 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0)));
    }
    else
    {
        _1313 = _1314;
        _1315 = _1314;
        _1316 = _1314;
        _1317 = _1314;
        _1318 = _1314;
        _1319 = _1314;
        _1320 = _1314;
        _1321 = _1314;
        _1322 = _1314;
        _1323 = _1314;
        _1324 = _1314;
        _1325 = _1314;
        _1326 = 0.0;
        _1327 = 0.0;
        _1328 = 0.0;
    }
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1357 = fma(_982, cbModelParam._m0[30u].z, fma(_978, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _974));
        float _1361 = fma(_982, cbModelParam._m0[31u].z, fma(_978, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _974));
        float _1365 = fma(_982, cbModelParam._m0[32u].z, fma(_978, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _974));
        float _1388 = _974 + _611;
        float _1389 = _978 + _612;
        float _1390 = _982 + _613;
        float _1400 = fma(_1390, cbModelParam._m0[30u].z, fma(_1389, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1388)) - _1357;
        float _1401 = fma(_1390, cbModelParam._m0[31u].z, fma(_1389, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1388)) - _1361;
        float _1402 = fma(_1390, cbModelParam._m0[32u].z, fma(_1389, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1388)) - _1365;
        float _1406 = inversesqrt(dot(vec3(_1400, _1401, _1402), vec3(_1400, _1401, _1402)));
        float _1419 = ((_1406 * _1400) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1357 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1420 = ((_1406 * _1401) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1361 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1421 = ((_1406 * _1402) / cbModelParam._m0[35u].z) + ((((((_1365 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1423 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1419, _1420, _1421), 0.0);
        vec4 _1430 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1419, _1420, _1421), 0.0);
        vec4 _1437 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1419, _1420, _1421), 0.0);
        vec4 _1444 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1419, _1420, _1421), 0.0);
        float _1456 = exp2((_1423.w + (-0.5)) * 20.0) * 2.0;
        float _1457 = _1456 * (_1423.x + (-0.5));
        float _1458 = _1456 * (_1423.y + (-0.5));
        float _1459 = _1456 * (_1423.z + (-0.5));
        float _1466 = exp2((_1430.w + (-0.5)) * 20.0) * 2.0;
        float _1467 = _1466 * (_1430.x + (-0.5));
        float _1468 = _1466 * (_1430.y + (-0.5));
        float _1469 = _1466 * (_1430.z + (-0.5));
        float _1476 = exp2((_1437.w + (-0.5)) * 20.0) * 2.0;
        float _1477 = _1476 * (_1437.x + (-0.5));
        float _1478 = _1476 * (_1437.y + (-0.5));
        float _1479 = _1476 * (_1437.z + (-0.5));
        float _1486 = exp2((_1444.w + (-0.5)) * 20.0) * 2.0;
        float _1487 = _1486 * (_1444.x + (-0.5));
        float _1488 = _1486 * (_1444.y + (-0.5));
        float _1489 = _1486 * (_1444.z + (-0.5));
        float _1490 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1491 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1492 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1493 = _1457 * 0.5;
        float _1494 = _1467 * 0.5;
        float _1495 = _1477 * 0.5;
        float _1496 = dot(vec3(_1493, _1494, _1495), vec3(_1493, _1494, _1495));
        float _1501 = (_1496 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1496);
        float _1509 = (dot(vec3(_611, _612, _613), vec3(_1501 * _1493, _1501 * _1494, _1501 * _1495)) + 1.0) * 0.5;
        float _4100 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1518 = sqrt(((_1494 * _1494) + (_1493 * _1493)) + (_1495 * _1495)) / (_1490 + 9.9999997473787516355514526367188e-06);
        float _4111 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1519 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
        float _1520 = _1519 * 2.0;
        float _1524 = (1.0 - _1519) / (_1519 + 1.0);
        float _4122 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1525 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
        float _1534 = ((((1.0 - _1525) * (_1520 + 2.0)) * exp2(log2(isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0))) * (_1520 + 1.0))) + _1525) * _1490;
        float _1535 = _1458 * 0.5;
        float _1536 = _1468 * 0.5;
        float _1537 = _1478 * 0.5;
        float _1538 = dot(vec3(_1535, _1536, _1537), vec3(_1535, _1536, _1537));
        float _1543 = (_1538 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1538);
        float _1551 = (dot(vec3(_611, _612, _613), vec3(_1543 * _1535, _1543 * _1536, _1543 * _1537)) + 1.0) * 0.5;
        float _4133 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1560 = sqrt(((_1536 * _1536) + (_1535 * _1535)) + (_1537 * _1537)) / (_1491 + 9.9999997473787516355514526367188e-06);
        float _4144 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
        float _1561 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
        float _1562 = _1561 * 2.0;
        float _1566 = (1.0 - _1561) / (_1561 + 1.0);
        float _4155 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1567 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _1576 = ((((1.0 - _1567) * (_1562 + 2.0)) * exp2(log2(isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0))) * (_1562 + 1.0))) + _1567) * _1491;
        float _1577 = _1459 * 0.5;
        float _1578 = _1469 * 0.5;
        float _1579 = _1479 * 0.5;
        float _1580 = dot(vec3(_1577, _1578, _1579), vec3(_1577, _1578, _1579));
        float _1585 = (_1580 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1580);
        float _1593 = (dot(vec3(_611, _612, _613), vec3(_1585 * _1577, _1585 * _1578, _1585 * _1579)) + 1.0) * 0.5;
        float _4166 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
        float _1602 = sqrt(((_1578 * _1578) + (_1577 * _1577)) + (_1579 * _1579)) / (_1492 + 9.9999997473787516355514526367188e-06);
        float _4177 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
        float _1603 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
        float _1604 = _1603 * 2.0;
        float _1608 = (1.0 - _1603) / (_1603 + 1.0);
        float _4188 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
        float _1609 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _1618 = ((((1.0 - _1609) * (_1604 + 2.0)) * exp2(log2(isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0))) * (_1604 + 1.0))) + _1609) * _1492;
        _1626 = _1459;
        _1627 = _1458;
        _1628 = _1457;
        _1629 = _1469;
        _1630 = _1468;
        _1631 = _1467;
        _1632 = _1479;
        _1633 = _1478;
        _1634 = _1477;
        _1635 = _1492;
        _1636 = _1491;
        _1637 = _1490;
        _1638 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0)));
        _1639 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0)));
        _1640 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0)));
    }
    else
    {
        _1626 = _1314;
        _1627 = _1314;
        _1628 = _1314;
        _1629 = _1314;
        _1630 = _1314;
        _1631 = _1314;
        _1632 = _1314;
        _1633 = _1314;
        _1634 = _1314;
        _1635 = _1314;
        _1636 = _1314;
        _1637 = _1314;
        _1638 = 0.0;
        _1639 = 0.0;
        _1640 = 0.0;
    }
    float _1650 = (cbModelParam._m0[1u].x * (_1638 - _1326)) + _1326;
    float _1651 = (cbModelParam._m0[1u].x * (_1639 - _1327)) + _1327;
    float _1652 = (cbModelParam._m0[1u].x * (_1640 - _1328)) + _1328;
    float _1673 = fma(_1652, cbSceneParam._m0[89u].z, fma(_1651, cbSceneParam._m0[89u].y, _1650 * cbSceneParam._m0[89u].x));
    float _1676 = fma(_1652, cbSceneParam._m0[90u].z, fma(_1651, cbSceneParam._m0[90u].y, _1650 * cbSceneParam._m0[90u].x));
    float _1679 = fma(_1652, cbSceneParam._m0[91u].z, fma(_1651, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1650));
    float _1694 = _918 * 0.5;
    float _1695 = _919 * 0.5;
    float _1696 = _920 * 0.5;
    float _1697 = dot(vec4(_1694, _1695, _1696, 1.0), vec4(_1628, _1631, _1634, _1637));
    float _1700 = dot(vec4(_1694, _1695, _1696, 1.0), vec4(_1627, _1630, _1633, _1636));
    float _1703 = dot(vec4(_1694, _1695, _1696, 1.0), vec4(_1626, _1629, _1632, _1635));
    float _1734;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1710 = dot(vec4(_1694, _1695, _1696, 1.0), vec4(_1313, _1317, _1320, _1323));
        float _1714 = dot(vec4(_1694, _1695, _1696, 1.0), vec4(_1315, _1318, _1321, _1324));
        float _1718 = dot(vec4(_1694, _1695, _1696, 1.0), vec4(_1316, _1319, _1322, _1325));
        float _1725 = dot(vec4(cbModelParam._m0[39u]), vec4(_1694, _1695, _1696, 1.0));
        _1734 = dot(vec3(isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0)), isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0)), isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1725) ? 0.0 : (isnan(0.0) ? _1725 : max(0.0, _1725))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1734 = 1.0;
    }
    float _1745;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1736 = dot(vec4(cbModelParam._m0[40u]), vec4(_1694, _1695, _1696, 1.0));
        _1745 = dot(vec3(isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0)), isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0)), isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1736) ? 0.0 : (isnan(0.0) ? _1736 : max(0.0, _1736))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1745 = 1.0;
    }
    float _1749 = (_1745 * cbModelParam._m0[1u].x) + (_1734 * (1.0 - cbModelParam._m0[1u].x));
    float _1759 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _778);
    float _1760 = isnan(_1759) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1759 : min(cbModelParam._m0[25u].z, _1759));
    float _1840;
    float _1842;
    float _1844;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1807 = fma(_982, cbModelParam._m0[13u].z, fma(_978, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _974)) + cbModelParam._m0[13u].w;
        float _1811 = fma(_982, cbModelParam._m0[14u].z, fma(_978, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _974)) + cbModelParam._m0[14u].w;
        float _1815 = fma(_982, cbModelParam._m0[15u].z, fma(_978, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _974)) + cbModelParam._m0[15u].w;
        float _1818 = fma(_920, cbModelParam._m0[13u].z, fma(_919, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _918));
        float _1821 = fma(_920, cbModelParam._m0[14u].z, fma(_919, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _918));
        float _1824 = fma(_920, cbModelParam._m0[15u].z, fma(_919, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _918));
        float _1852;
        if (_1818 > 0.0)
        {
            _1852 = abs((1.0 - _1807) / _1818);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1818 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1807 + 1.0) / _1818);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1852 = frontier_phi_17_15_ladder;
        }
        float _2057;
        if (_1821 > 0.0)
        {
            _2057 = abs((1.0 - _1811) / _1821);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1821 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1811 + 1.0) / _1821);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2057 = frontier_phi_26_22_ladder;
        }
        float _2311;
        if (_1824 > 0.0)
        {
            _2311 = abs((1.0 - _1815) / _1824);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1824 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1815 + 1.0) / _1824);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2311 = frontier_phi_38_33_ladder;
        }
        float _2313 = isnan(_2057) ? _1852 : (isnan(_1852) ? _2057 : min(_1852, _2057));
        float _2314 = isnan(_2311) ? _2313 : (isnan(_2313) ? _2311 : min(_2313, _2311));
        float _2318 = (_2314 * _1818) + _1807;
        float _2319 = (_2314 * _1821) + _1811;
        float _2320 = (_2314 * _1824) + _1815;
        float _2321 = _2314 * 9.9999997473787516355514526367188e-05;
        float _2323 = (-1.0) - _2321;
        float _2325 = _2321 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2320 > _2325) || ((_2320 < _2323) || ((_2319 > _2325) || ((_2319 < _2323) || ((_2318 < _2323) || (_2318 > _2325))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2448 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2320, cbModelParam._m0[9u].z, fma(_2319, cbModelParam._m0[9u].y, _2318 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2320, cbModelParam._m0[10u].z, fma(_2319, cbModelParam._m0[10u].y, _2318 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2320, cbModelParam._m0[11u].z, fma(_2319, cbModelParam._m0[11u].y, _2318 * cbModelParam._m0[11u].x))), _1760);
            frontier_phi_16_38_ladder = _2448.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2448.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2448.x * cbModelParam._m0[1u].y;
        }
        _1840 = frontier_phi_16_38_ladder_2;
        _1842 = frontier_phi_16_38_ladder_1;
        _1844 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1828 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_918, _919, _920), _1760);
        _1840 = _1828.x * cbModelParam._m0[1u].y;
        _1842 = _1828.y * cbModelParam._m0[1u].y;
        _1844 = _1828.z * cbModelParam._m0[1u].y;
    }
    float _1848 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _778);
    float _1849 = isnan(_1848) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1848 : min(cbModelParam._m0[25u].w, _1848));
    float _1940;
    float _1942;
    float _1944;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1904 = fma(_982, cbModelParam._m0[21u].z, fma(_978, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _974)) + cbModelParam._m0[21u].w;
        float _1908 = fma(_982, cbModelParam._m0[22u].z, fma(_978, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _974)) + cbModelParam._m0[22u].w;
        float _1912 = fma(_982, cbModelParam._m0[23u].z, fma(_978, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _974)) + cbModelParam._m0[23u].w;
        float _1915 = fma(_920, cbModelParam._m0[21u].z, fma(_919, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _918));
        float _1918 = fma(_920, cbModelParam._m0[22u].z, fma(_919, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _918));
        float _1921 = fma(_920, cbModelParam._m0[23u].z, fma(_919, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _918));
        float _2062;
        if (_1915 > 0.0)
        {
            _2062 = abs((1.0 - _1904) / _1915);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1915 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1904 + 1.0) / _1915);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2062 = frontier_phi_28_24_ladder;
        }
        float _2338;
        if (_1918 > 0.0)
        {
            _2338 = abs((1.0 - _1908) / _1918);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1918 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1908 + 1.0) / _1918);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2338 = frontier_phi_40_35_ladder;
        }
        float _2551;
        if (_1921 > 0.0)
        {
            _2551 = abs((1.0 - _1912) / _1921);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1921 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1912 + 1.0) / _1921);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2551 = frontier_phi_49_46_ladder;
        }
        float _2553 = isnan(_2338) ? _2062 : (isnan(_2062) ? _2338 : min(_2062, _2338));
        float _2554 = isnan(_2551) ? _2553 : (isnan(_2553) ? _2551 : min(_2553, _2551));
        float _2558 = (_2554 * _1915) + _1904;
        float _2559 = (_2554 * _1918) + _1908;
        float _2560 = (_2554 * _1921) + _1912;
        float _2561 = _2554 * 9.9999997473787516355514526367188e-05;
        float _2562 = (-1.0) - _2561;
        float _2564 = _2561 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2560 > _2564) || ((_2560 < _2562) || ((_2559 > _2564) || ((_2559 < _2562) || ((_2558 < _2562) || (_2558 > _2564))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2790 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2560, cbModelParam._m0[17u].z, fma(_2559, cbModelParam._m0[17u].y, _2558 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2560, cbModelParam._m0[18u].z, fma(_2559, cbModelParam._m0[18u].y, _2558 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2560, cbModelParam._m0[19u].z, fma(_2559, cbModelParam._m0[19u].y, _2558 * cbModelParam._m0[19u].x))), _1849);
            frontier_phi_25_49_ladder = _2790.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2790.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2790.x * cbModelParam._m0[1u].z;
        }
        _1940 = frontier_phi_25_49_ladder_2;
        _1942 = frontier_phi_25_49_ladder_1;
        _1944 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1924 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_918, _919, _920), _1849);
        _1940 = _1924.x * cbModelParam._m0[1u].z;
        _1942 = _1924.y * cbModelParam._m0[1u].z;
        _1944 = _1924.z * cbModelParam._m0[1u].z;
    }
    float _1957 = (((_945 * _896) + _946) * _910) * ((cbModelParam._m0[1u].w * (_1940 - _1840)) + _1840);
    float _1959 = (((_945 * _897) + _946) * _910) * ((cbModelParam._m0[1u].w * (_1942 - _1842)) + _1842);
    float _1961 = (((_945 * _898) + _946) * _910) * ((cbModelParam._m0[1u].w * (_1944 - _1844)) + _1844);
    float _1964 = fma(_1961, cbSceneParam._m0[89u].z, fma(_1959, cbSceneParam._m0[89u].y, _1957 * cbSceneParam._m0[89u].x));
    float _1967 = fma(_1961, cbSceneParam._m0[90u].z, fma(_1959, cbSceneParam._m0[90u].y, _1957 * cbSceneParam._m0[90u].x));
    float _1970 = fma(_1961, cbSceneParam._m0[91u].z, fma(_1959, cbSceneParam._m0[91u].y, _1957 * cbSceneParam._m0[91u].x));
    uvec4 _1980 = floatBitsToUint(cbInstanceData._m0[_802 + 5u]);
    uint _1982 = _1980.x * 14u;
    uint _1983 = _1982 + 13u;
    float _1990 = _910 + (-1.0);
    float _1995 = (cbLight._m0[_1983].x * _1990) + 1.0;
    float _1996 = (cbLight._m0[_1983].y * _1990) + 1.0;
    float _1997 = (cbLight._m0[_1983].z * _1990) + 1.0;
    float _1998 = (cbLight._m0[_1983].w * _1990) + 1.0;
    uint _1999 = _1982 + 5u;
    float _2005 = isnan(1.0) ? _1996 : (isnan(_1996) ? 1.0 : min(_1996, 1.0));
    uint _2009 = _1982 + 4u;
    float _2016 = isnan(1.0) ? _1995 : (isnan(_1995) ? 1.0 : min(_1995, 1.0));
    uint _2020 = _1982 | 1u;
    float _2031 = dot(vec3(cbLight._m0[_1982].xyz), vec3(_611, _612, _613));
    float _2034 = dot(vec3(cbLight._m0[_2020].xyz), vec3(_611, _612, _613));
    float _4324 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
    float _4335 = isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0));
    float _2039 = (isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0))) * 0.3183098733425140380859375;
    float _2041 = (isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0))) * 0.3183098733425140380859375;
    float _2048 = ((cbLight._m0[_1999].x * _2005) * _2041) + ((cbLight._m0[_2009].x * _2016) * _2039);
    float _2049 = ((_2005 * cbLight._m0[_1999].y) * _2041) + ((_2016 * cbLight._m0[_2009].y) * _2039);
    float _2050 = ((_2005 * cbLight._m0[_1999].z) * _2041) + ((_2016 * cbLight._m0[_2009].z) * _2039);
    uvec4 _2054 = floatBitsToUint(cbLight._m0[_1982 + 12u]);
    bool _2056 = _2054.x == 0u;
    float _2067;
    float _2069;
    float _2071;
    if (_2056)
    {
        _2067 = _2048;
        _2069 = _2049;
        _2071 = _2050;
    }
    else
    {
        uint _2075 = _1982 + 6u;
        float _2091 = (dot(vec3(cbLight._m0[_1982 + 2u].xyz), vec3(_611, _612, _613)) * 0.5) + 0.5;
        float _2092 = _2091 * _2091;
        float _4346 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
        float _2093 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
        float _2094 = isnan(1.0) ? _1997 : (isnan(_1997) ? 1.0 : min(_1997, 1.0));
        _2067 = (((cbLight._m0[_2075].x * 0.3183098733425140380859375) * _2093) * _2094) + _2048;
        _2069 = (((cbLight._m0[_2075].y * 0.3183098733425140380859375) * _2093) * _2094) + _2049;
        _2071 = (((cbLight._m0[_2075].z * 0.3183098733425140380859375) * _2093) * _2094) + _2050;
    }
    bool _2074 = _2054.y == 0u;
    float _2112;
    float _2114;
    float _2116;
    if (_2074)
    {
        _2112 = _2067;
        _2114 = _2069;
        _2116 = _2071;
    }
    else
    {
        uint _2282 = _1982 + 7u;
        float _2298 = (dot(vec3(cbLight._m0[_1982 + 3u].xyz), vec3(_611, _612, _613)) * 0.5) + 0.5;
        float _2299 = _2298 * _2298;
        float _4362 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
        float _2300 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
        float _2301 = isnan(1.0) ? _1998 : (isnan(_1998) ? 1.0 : min(_1998, 1.0));
        _2112 = (((cbLight._m0[_2282].x * 0.3183098733425140380859375) * _2300) * _2301) + _2067;
        _2114 = (((cbLight._m0[_2282].y * 0.3183098733425140380859375) * _2300) * _2301) + _2069;
        _2116 = (((cbLight._m0[_2282].z * 0.3183098733425140380859375) * _2300) * _2301) + _2071;
    }
    uint _2119 = _1982 + 8u;
    float _2132 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1982].w)) * _778) * 0.949999988079071044921875);
    float _2133 = _2132 * _2132;
    float _2134 = cbLight._m0[_1982].x + _681;
    float _2135 = cbLight._m0[_1982].y + _682;
    float _2136 = cbLight._m0[_1982].z + _683;
    float _2140 = inversesqrt(dot(vec3(_2134, _2135, _2136), vec3(_2134, _2135, _2136)));
    float _2141 = _2140 * _2134;
    float _2142 = _2140 * _2135;
    float _2143 = _2140 * _2136;
    float _2144 = dot(vec3(_611, _612, _613), vec3(cbLight._m0[_1982].xyz));
    float _4378 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
    float _2147 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
    float _4389 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
    float _2148 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
    float _2149 = dot(vec3(_611, _612, _613), vec3(_2141, _2142, _2143));
    float _4400 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
    float _2152 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
    float _2153 = dot(vec3(cbLight._m0[_1982].xyz), vec3(_2141, _2142, _2143));
    float _4411 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
    float _2157 = _2133 * _2133;
    float _2161 = ((_2152 * _2152) * (_2157 + (-1.0))) + 1.0;
    float _2169 = exp2(log2(1.0 - (isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0)))) * 5.0);
    float _2170 = 0.959999978542327880859375 - _893;
    float _2172 = 0.959999978542327880859375 - _894;
    float _2173 = 0.959999978542327880859375 - _895;
    float _2180 = 1.0 - _2133;
    float _2191 = (0.5 / (((_2148 * ((_2147 * _2180) + _2133)) + 9.9999999392252902907785028219223e-09) + (((_2148 * _2180) + _2133) * _2147))) * _2147;
    float _4422 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
    float _2193 = (isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0))) * (_2157 / ((_2161 * _2161) * 3.141590118408203125));
    uint _2204 = _1982 + 9u;
    float _2215 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2020].w)) * _778) * 0.949999988079071044921875);
    float _2216 = _2215 * _2215;
    float _2217 = cbLight._m0[_2020].x + _681;
    float _2218 = cbLight._m0[_2020].y + _682;
    float _2219 = cbLight._m0[_2020].z + _683;
    float _2223 = inversesqrt(dot(vec3(_2217, _2218, _2219), vec3(_2217, _2218, _2219)));
    float _2224 = _2223 * _2217;
    float _2225 = _2223 * _2218;
    float _2226 = _2223 * _2219;
    float _2227 = dot(vec3(_611, _612, _613), vec3(cbLight._m0[_2020].xyz));
    float _4433 = isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0));
    float _2230 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
    float _2231 = dot(vec3(_611, _612, _613), vec3(_2224, _2225, _2226));
    float _4444 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
    float _2234 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
    float _2235 = dot(vec3(cbLight._m0[_2020].xyz), vec3(_2224, _2225, _2226));
    float _4455 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
    float _2239 = _2216 * _2216;
    float _2243 = ((_2234 * _2234) * (_2239 + (-1.0))) + 1.0;
    float _2250 = exp2(log2(1.0 - (isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0)))) * 5.0);
    float _2257 = 1.0 - _2216;
    float _2267 = (0.5 / (((_2148 * ((_2230 * _2257) + _2216)) + 9.9999999392252902907785028219223e-09) + (((_2148 * _2257) + _2216) * _2230))) * _2230;
    float _4466 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
    float _2269 = (isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0))) * (_2239 / ((_2243 * _2243) * 3.141590118408203125));
    float _2279 = (((((_2250 * _2170) + _896) * cbLight._m0[_2204].x) * _2269) * _2005) + (((((_2169 * _2170) + _896) * cbLight._m0[_2119].x) * _2193) * _2016);
    float _2280 = (((((_2250 * _2172) + _897) * cbLight._m0[_2204].y) * _2269) * _2005) + (((((_2169 * _2172) + _897) * cbLight._m0[_2119].y) * _2193) * _2016);
    float _2281 = (((((_2250 * _2173) + _898) * cbLight._m0[_2204].z) * _2269) * _2005) + (((((_2169 * _2173) + _898) * cbLight._m0[_2119].z) * _2193) * _2016);
    float _2343;
    float _2345;
    float _2347;
    if (_2056)
    {
        _2343 = _2279;
        _2345 = _2280;
        _2347 = _2281;
    }
    else
    {
        uint _2349 = _1982 + 2u;
        uint _2353 = _1982 + 10u;
        float _2367 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2349].w)) * _778) * 0.949999988079071044921875);
        float _2368 = _2367 * _2367;
        float _2369 = cbLight._m0[_2349].x + _681;
        float _2370 = cbLight._m0[_2349].y + _682;
        float _2371 = cbLight._m0[_2349].z + _683;
        float _2375 = inversesqrt(dot(vec3(_2369, _2370, _2371), vec3(_2369, _2370, _2371)));
        float _2376 = _2375 * _2369;
        float _2377 = _2375 * _2370;
        float _2378 = _2375 * _2371;
        float _2379 = dot(vec3(_611, _612, _613), vec3(cbLight._m0[_2349].xyz));
        float _4477 = isnan(0.0) ? _2379 : (isnan(_2379) ? 0.0 : max(_2379, 0.0));
        float _2382 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
        float _2383 = dot(vec3(_611, _612, _613), vec3(_2376, _2377, _2378));
        float _4488 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
        float _2386 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
        float _2387 = dot(vec3(cbLight._m0[_2349].xyz), vec3(_2376, _2377, _2378));
        float _4499 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
        float _2391 = _2368 * _2368;
        float _2395 = ((_2386 * _2386) * (_2391 + (-1.0))) + 1.0;
        float _2402 = exp2(log2(1.0 - (isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0)))) * 5.0);
        float _2409 = 1.0 - _2368;
        float _2419 = (0.5 / (((_2148 * ((_2382 * _2409) + _2368)) + 9.9999999392252902907785028219223e-09) + (((_2148 * _2409) + _2368) * _2382))) * _2382;
        float _4510 = isnan(0.0) ? _2419 : (isnan(_2419) ? 0.0 : max(_2419, 0.0));
        float _2421 = (isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0))) * (_2391 / ((_2395 * _2395) * 3.141590118408203125));
        float _2422 = isnan(1.0) ? _1997 : (isnan(_1997) ? 1.0 : min(_1997, 1.0));
        _2343 = (((((_2402 * _2170) + _896) * cbLight._m0[_2353].x) * _2421) * _2422) + _2279;
        _2345 = (((((_2402 * _2172) + _897) * cbLight._m0[_2353].y) * _2421) * _2422) + _2280;
        _2347 = (((((_2402 * _2173) + _898) * cbLight._m0[_2353].z) * _2421) * _2422) + _2281;
    }
    float _2457;
    float _2459;
    float _2461;
    if (_2074)
    {
        _2457 = _2343;
        _2459 = _2345;
        _2461 = _2347;
    }
    else
    {
        uint _2468 = _1982 + 3u;
        uint _2472 = _1982 + 11u;
        float _2486 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2468].w)) * _778) * 0.949999988079071044921875);
        float _2487 = _2486 * _2486;
        float _2488 = cbLight._m0[_2468].x + _681;
        float _2489 = cbLight._m0[_2468].y + _682;
        float _2490 = cbLight._m0[_2468].z + _683;
        float _2494 = inversesqrt(dot(vec3(_2488, _2489, _2490), vec3(_2488, _2489, _2490)));
        float _2495 = _2494 * _2488;
        float _2496 = _2494 * _2489;
        float _2497 = _2494 * _2490;
        float _2498 = dot(vec3(_611, _612, _613), vec3(cbLight._m0[_2468].xyz));
        float _4526 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0));
        float _2501 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
        float _2502 = dot(vec3(_611, _612, _613), vec3(_2495, _2496, _2497));
        float _4537 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
        float _2505 = isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0));
        float _2506 = dot(vec3(cbLight._m0[_2468].xyz), vec3(_2495, _2496, _2497));
        float _4548 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
        float _2510 = _2487 * _2487;
        float _2514 = ((_2505 * _2505) * (_2510 + (-1.0))) + 1.0;
        float _2521 = exp2(log2(1.0 - (isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0)))) * 5.0);
        float _2528 = 1.0 - _2487;
        float _2538 = (0.5 / (((_2148 * ((_2501 * _2528) + _2487)) + 9.9999999392252902907785028219223e-09) + (((_2148 * _2528) + _2487) * _2501))) * _2501;
        float _4559 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
        float _2540 = (isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0))) * (_2510 / ((_2514 * _2514) * 3.141590118408203125));
        float _2541 = isnan(1.0) ? _1998 : (isnan(_1998) ? 1.0 : min(_1998, 1.0));
        _2457 = (((((_2521 * _2170) + _896) * cbLight._m0[_2472].x) * _2540) * _2541) + _2343;
        _2459 = (((((_2521 * _2172) + _897) * cbLight._m0[_2472].y) * _2540) * _2541) + _2345;
        _2461 = (((((_2521 * _2173) + _898) * cbLight._m0[_2472].z) * _2540) * _2541) + _2347;
    }
    float _2676;
    float _2678;
    float _2680;
    float _2682;
    float _2684;
    float _2686;
    if (_1980.y == 0u)
    {
        float _2616 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2617 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2616;
        float _2618 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2616;
        float _2619 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2616;
        uvec4 _2631 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2632 = _2631.x;
        uint _2643 = uint((float(_2631.y) * floor(float(uint(cbSceneParam._m0[85u].y * _701) / _2632))) + floor(float(uint(cbSceneParam._m0[85u].x * _700) / _2632)));
        float _2653 = (log2(_2619 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2654 = isnan(0.0) ? _2653 : (isnan(_2653) ? 0.0 : max(_2653, 0.0));
        uint _2657 = uint(isnan(14.0) ? _2654 : (isnan(_2654) ? 14.0 : min(_2654, 14.0)));
        uvec4 _2662 = texelFetch(g_lightClusterGridBuffer, int(((_2657 << 2u) + (_2643 << 6u)) >> 2u));
        uint _2663 = _2662.x;
        uint _2664 = _2631.z;
        float _2795;
        float _2797;
        float _2799;
        float _2801;
        float _2803;
        float _2805;
        if (((((1u << ((_2664 >> 4u) & 15u)) + 4294967295u) & _2663) == 0u) || ((_2664 & 240u) == 0u))
        {
            _2795 = 0.0;
            _2797 = 0.0;
            _2799 = 0.0;
            _2801 = 0.0;
            _2803 = 0.0;
            _2805 = 0.0;
        }
        else
        {
            float _2796;
            float _2798;
            float _2800;
            float _2802;
            float _2804;
            float _2806;
            float _2956 = 0.0;
            float _2957 = 0.0;
            float _2958 = 0.0;
            float _2959 = 0.0;
            float _2960 = 0.0;
            float _2961 = 0.0;
            uint _2962 = 0u;
            uint _2971;
            bool _2972;
            for (;;)
            {
                _2971 = texelFetch(g_lightClassification, int((((_2657 << 5u) + (_2643 << 9u)) + (_2962 << 2u)) >> 2u)).x;
                _2972 = _2971 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2972)
                {
                    frontier_phi_66_pred = _2956;
                    frontier_phi_66_pred_1 = _2961;
                    frontier_phi_66_pred_2 = _2960;
                    frontier_phi_66_pred_3 = _2959;
                    frontier_phi_66_pred_4 = _2958;
                    frontier_phi_66_pred_5 = _2957;
                }
                else
                {
                    float _3101;
                    float _3102;
                    float _3103;
                    float _3104;
                    float _3105;
                    float _3106;
                    uint _3107;
                    _3101 = _2956;
                    _3102 = _2957;
                    _3103 = _2958;
                    _3104 = _2959;
                    _3105 = _2960;
                    _3106 = _2961;
                    _3107 = _2971;
                    float _3028;
                    float _3029;
                    float _3030;
                    float _3031;
                    float _3032;
                    float _3033;
                    for (;;)
                    {
                        uint _3111 = uint(findLSB(_3107)) + (_2962 << 5u);
                        uint _3108 = (_3107 + 4294967295u) & _3107;
                        uint _3113 = _3111 * 48u;
                        vec4 _3127 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3113)).x, texelFetch(g_PointLightRenderingBuffer, int(_3113 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3113 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3113 + 3u)).x));
                        uint _3133 = (_3111 * 48u) + 4u;
                        vec4 _3146 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3133)).x, texelFetch(g_PointLightRenderingBuffer, int(_3133 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3133 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3133 + 3u)).x));
                        uint _3152 = (_3111 * 48u) + 8u;
                        vec3 _3163 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3152)).x, texelFetch(g_PointLightRenderingBuffer, int(_3152 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3152 + 2u)).x));
                        float _3167 = _3127.x - _2617;
                        float _3168 = _3127.y - _2618;
                        float _3169 = _3127.z - _2619;
                        float _3170 = dot(vec3(_3167, _3168, _3169), vec3(_3167, _3168, _3169));
                        float _3173 = inversesqrt(_3170);
                        float _3174 = _3173 * _3167;
                        float _3175 = _3173 * _3168;
                        float _3176 = _3173 * _3169;
                        float _3177 = dot(vec3(_723, _726, _729), vec3(_3174, _3175, _3176));
                        float _3182 = 1.0 - (_3170 * _3127.w);
                        float _4585 = isnan(0.0) ? _3182 : (isnan(_3182) ? 0.0 : max(_3182, 0.0));
                        float _3183 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
                        float _3184 = sqrt(_3170) * _3146.w;
                        float _3187 = 1.39999997615814208984375 / (_3184 + 1.39999997615814208984375);
                        float _3188 = _3187 * _3187;
                        float _3191 = ((1.0 - _3188) * _3177) + _3188;
                        float _3194 = _3184 * _3184;
                        float _3198 = ((isnan(0.0) ? _3191 : (isnan(_3191) ? 0.0 : max(_3191, 0.0))) * _3183) / ((_3194 * 0.699999988079071044921875) + 1.0);
                        float _3202 = (-0.0) - _2617;
                        float _3203 = (-0.0) - _2618;
                        float _3204 = (-0.0) - _2619;
                        float _3208 = inversesqrt(dot(vec3(_3202, _3203, _3204), vec3(_3202, _3203, _3204)));
                        float _3209 = _3208 * _3202;
                        float _3210 = _3208 * _3203;
                        float _3211 = _3208 * _3204;
                        float _3219 = exp2(log2(1.0 / ((_3194 * 3.5) + 5.0)) * 0.25);
                        float _3220 = 1.0 - _926;
                        float _3227 = sqrt(1.0 - ((1.0 - (_3220 * _3220)) * (1.0 - (_3219 * _3219))));
                        float _3228 = _3227 * _3227;
                        float _3229 = _3228 * _3228;
                        float _3230 = _3209 + _3174;
                        float _3231 = _3210 + _3175;
                        float _3232 = _3211 + _3176;
                        float _3236 = inversesqrt(dot(vec3(_3230, _3231, _3232), vec3(_3230, _3231, _3232)));
                        float _3240 = dot(vec3(_723, _726, _729), vec3(_3209, _3210, _3211));
                        float _4601 = isnan(0.0) ? _3240 : (isnan(_3240) ? 0.0 : max(_3240, 0.0));
                        float _3243 = isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0));
                        float _3244 = dot(vec3(_723, _726, _729), vec3(_3236 * _3230, _3236 * _3231, _3236 * _3232));
                        float _4612 = isnan(0.0) ? _3244 : (isnan(_3244) ? 0.0 : max(_3244, 0.0));
                        float _3247 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
                        float _3251 = ((_3247 * _3247) * (_3229 + (-1.0))) + 1.0;
                        float _3252 = _3187 * _3228;
                        float _3253 = _3252 * _3252;
                        float _3256 = ((1.0 - _3253) * _3177) + _3253;
                        float _4623 = isnan(0.0) ? _3256 : (isnan(_3256) ? 0.0 : max(_3256, 0.0));
                        float _3257 = isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0));
                        float _3258 = 1.0 - _3228;
                        float _3268 = (0.5 / (((_3257 * ((_3243 * _3258) + _3228)) + 9.9999999392252902907785028219223e-09) + (((_3257 * _3258) + _3228) * _3243))) * _3257;
                        float _4634 = isnan(0.0) ? _3268 : (isnan(_3268) ? 0.0 : max(_3268, 0.0));
                        float _3279 = (((_3229 * 3.1415927410125732421875) * (isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0)))) / ((_3251 * _3251) * ((_3194 * 2.1991131305694580078125) + 3.141590118408203125))) * _3183;
                        _3031 = (_3198 * _3146.x) + _3104;
                        _3032 = (_3198 * _3146.y) + _3105;
                        _3033 = (_3198 * _3146.z) + _3106;
                        _3028 = (_3279 * _3163.x) + _3101;
                        _3029 = (_3279 * _3163.y) + _3102;
                        _3030 = (_3279 * _3163.z) + _3103;
                        if (_3108 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3101 = _3028;
                            _3102 = _3029;
                            _3103 = _3030;
                            _3104 = _3031;
                            _3105 = _3032;
                            _3106 = _3033;
                            _3107 = _3108;
                        }
                    }
                    frontier_phi_66_pred = _3028;
                    frontier_phi_66_pred_1 = _3033;
                    frontier_phi_66_pred_2 = _3032;
                    frontier_phi_66_pred_3 = _3031;
                    frontier_phi_66_pred_4 = _3030;
                    frontier_phi_66_pred_5 = _3029;
                }
                _2796 = frontier_phi_66_pred;
                _2806 = frontier_phi_66_pred_1;
                _2804 = frontier_phi_66_pred_2;
                _2802 = frontier_phi_66_pred_3;
                _2800 = frontier_phi_66_pred_4;
                _2798 = frontier_phi_66_pred_5;
                uint _2963 = _2962 + 1u;
                if (_2963 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2956 = _2796;
                    _2957 = _2798;
                    _2958 = _2800;
                    _2959 = _2802;
                    _2960 = _2804;
                    _2961 = _2806;
                    _2962 = _2963;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2795 = _2796;
            _2797 = _2798;
            _2799 = _2800;
            _2801 = _2802;
            _2803 = _2804;
            _2805 = _2806;
        }
        uvec4 _2809 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2810 = _2809.z;
        uint _2812 = (_2810 >> 8u) & 15u;
        float _2924;
        float _2926;
        float _2928;
        float _2930;
        float _2932;
        float _2934;
        if (((4294967295u << _2812) & _2663) == 0u)
        {
            _2924 = _2795;
            _2926 = _2797;
            _2928 = _2799;
            _2930 = _2801;
            _2932 = _2803;
            _2934 = _2805;
        }
        else
        {
            float _2949 = inversesqrt(dot(vec3(_2617, _2618, _2619), vec3(_2617, _2618, _2619)));
            float _2950 = _2949 * _2617;
            float _2951 = _2949 * _2618;
            float _2952 = _2949 * _2619;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2812 < ((_2810 >> 12u) & 15u))
            {
                float _2925;
                float _2927;
                float _2929;
                float _2931;
                float _2933;
                float _2935;
                float _3084 = _2795;
                float _3085 = _2797;
                float _3086 = _2799;
                float _3087 = _2801;
                float _3088 = _2803;
                float _3089 = _2805;
                uint _3090 = _2812;
                uint _3099;
                bool _3100;
                for (;;)
                {
                    _3099 = texelFetch(g_lightClassification, int((((_2657 << 5u) + (_2643 << 9u)) + (_3090 << 2u)) >> 2u)).x;
                    _3100 = _3099 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3100)
                    {
                        frontier_phi_77_pred = _3089;
                        frontier_phi_77_pred_1 = _3088;
                        frontier_phi_77_pred_2 = _3087;
                        frontier_phi_77_pred_3 = _3086;
                        frontier_phi_77_pred_4 = _3085;
                        frontier_phi_77_pred_5 = _3084;
                    }
                    else
                    {
                        float _3293;
                        float _3294;
                        float _3295;
                        float _3296;
                        float _3297;
                        float _3298;
                        float _3588;
                        float _3589;
                        float _3590;
                        float _3591;
                        float _3592;
                        float _3593;
                        float _3306 = _3084;
                        float _3307 = _3085;
                        float _3308 = _3086;
                        float _3309 = _3087;
                        float _3310 = _3088;
                        float _3311 = _3089;
                        uint _3312 = _3099;
                        uint _3313;
                        vec4 _3338;
                        float _3339;
                        vec4 _3354;
                        vec3 _3366;
                        vec4 _3381;
                        vec4 _3397;
                        float _3444;
                        bool _3445;
                        for (;;)
                        {
                            uint _3323 = ((_3090 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3312));
                            _3313 = (_3312 + 4294967295u) & _3312;
                            uint _3325 = _3323 * 40u;
                            _3338 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3325)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 3u)).x));
                            _3339 = _3338.w;
                            uint _3341 = (_3323 * 40u) + 4u;
                            _3354 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3341)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3341 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3341 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3341 + 3u)).x));
                            uint _3356 = (_3323 * 40u) + 8u;
                            _3366 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3356)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 2u)).x));
                            uint _3368 = (_3323 * 40u) + 16u;
                            _3381 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3368)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 3u)).x));
                            uint _3384 = (_3323 * 40u) + 20u;
                            _3397 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3384)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 3u)).x));
                            uint _3400 = (_3323 * 40u) + 24u;
                            vec4 _3413 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3400)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 3u)).x));
                            uint _3419 = (_3323 * 40u) + 28u;
                            vec4 _3432 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3419)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 3u)).x));
                            _3444 = fma(_2619, _3432.z, fma(_2618, _3432.y, _3432.x * _2617)) + _3432.w;
                            _3445 = !((fma(_2619, _3413.z, fma(_2618, _3413.y, _3413.x * _2617)) + _3413.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3445)
                            {
                                float _3472 = _3338.x - _2617;
                                float _3473 = _3338.y - _2618;
                                float _3474 = _3338.z - _2619;
                                float _3475 = dot(vec3(_3472, _3473, _3474), vec3(_3472, _3473, _3474));
                                float _3478 = inversesqrt(_3475);
                                float _3479 = _3478 * _3472;
                                float _3480 = _3478 * _3473;
                                float _3481 = _3478 * _3474;
                                float _3485 = 1.0 - (_3475 / (_3339 * _3339));
                                float _4645 = isnan(0.0) ? _3485 : (isnan(_3485) ? 0.0 : max(_3485, 0.0));
                                float _3486 = isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0));
                                float _3490 = sqrt(_3475) * _3354.w;
                                float _3492 = 1.39999997615814208984375 / (_3490 + 1.39999997615814208984375);
                                float _3493 = _3492 * _3492;
                                float _3496 = ((1.0 - _3493) * dot(vec3(_3479, _3480, _3481), vec3(_723, _726, _729))) + _3493;
                                float _3499 = _3490 * _3490;
                                float _3503 = (fma(_2619, _3381.z, fma(_2618, _3381.y, _3381.x * _2617)) + _3381.w) / _3444;
                                float _3504 = (fma(_2619, _3397.z, fma(_2618, _3397.y, _3397.x * _2617)) + _3397.w) / _3444;
                                float _3508 = 1.0 - dot(vec2(_3503, _3504), vec2(_3503, _3504));
                                float _4661 = isnan(0.0) ? _3508 : (isnan(_3508) ? 0.0 : max(_3508, 0.0));
                                float _3509 = isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0));
                                float _3510 = _3509 * (((isnan(0.0) ? _3496 : (isnan(_3496) ? 0.0 : max(_3496, 0.0))) * _3486) / ((_3499 * 0.699999988079071044921875) + 1.0));
                                float _3522 = exp2(log2(1.0 / ((_3499 * 3.5) + 5.0)) * 0.25);
                                float _3523 = 1.0 - _926;
                                float _3530 = sqrt(1.0 - ((1.0 - (_3523 * _3523)) * (1.0 - (_3522 * _3522))));
                                float _3531 = _3530 * _3530;
                                float _3532 = _3531 * _3531;
                                float _3533 = _3479 - _2950;
                                float _3534 = _3480 - _2951;
                                float _3535 = _3481 - _2952;
                                float _3539 = inversesqrt(dot(vec3(_3533, _3534, _3535), vec3(_3533, _3534, _3535)));
                                float _3543 = dot(vec3(_723, _726, _729), vec3((-0.0) - _2950, (-0.0) - _2951, (-0.0) - _2952));
                                float _4672 = isnan(0.0) ? _3543 : (isnan(_3543) ? 0.0 : max(_3543, 0.0));
                                float _3546 = isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0));
                                float _3547 = dot(vec3(_723, _726, _729), vec3(_3539 * _3533, _3539 * _3534, _3539 * _3535));
                                float _4683 = isnan(0.0) ? _3547 : (isnan(_3547) ? 0.0 : max(_3547, 0.0));
                                float _3550 = isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0));
                                float _3554 = ((_3550 * _3550) * (_3532 + (-1.0))) + 1.0;
                                float _3555 = _3492 * _3531;
                                float _3556 = _3555 * _3555;
                                float _3562 = ((1.0 - _3556) * dot(vec3(_723, _726, _729), vec3(_3479, _3480, _3481))) + _3556;
                                float _4694 = isnan(0.0) ? _3562 : (isnan(_3562) ? 0.0 : max(_3562, 0.0));
                                float _3563 = isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0));
                                float _3564 = 1.0 - _3531;
                                float _3574 = (0.5 / (((_3563 * ((_3546 * _3564) + _3531)) + 9.9999999392252902907785028219223e-09) + (((_3563 * _3564) + _3531) * _3546))) * _3563;
                                float _4705 = isnan(0.0) ? _3574 : (isnan(_3574) ? 0.0 : max(_3574, 0.0));
                                float _3584 = (_3509 * _3486) * (((_3532 * 3.1415927410125732421875) * (isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0)))) / ((_3554 * _3554) * ((_3499 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3510 * _3354.y;
                                frontier_phi_83_pred_1 = _3510 * _3354.x;
                                frontier_phi_83_pred_2 = _3584 * _3366.z;
                                frontier_phi_83_pred_3 = _3584 * _3366.y;
                                frontier_phi_83_pred_4 = _3584 * _3366.x;
                                frontier_phi_83_pred_5 = _3510 * _3354.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3592 = frontier_phi_83_pred;
                            _3591 = frontier_phi_83_pred_1;
                            _3590 = frontier_phi_83_pred_2;
                            _3589 = frontier_phi_83_pred_3;
                            _3588 = frontier_phi_83_pred_4;
                            _3593 = frontier_phi_83_pred_5;
                            _3296 = _3591 + _3309;
                            _3297 = _3592 + _3310;
                            _3298 = _3593 + _3311;
                            _3293 = _3588 + _3306;
                            _3294 = _3589 + _3307;
                            _3295 = _3590 + _3308;
                            if (_3313 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3306 = _3293;
                                _3307 = _3294;
                                _3308 = _3295;
                                _3309 = _3296;
                                _3310 = _3297;
                                _3311 = _3298;
                                _3312 = _3313;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3298;
                        frontier_phi_77_pred_1 = _3297;
                        frontier_phi_77_pred_2 = _3296;
                        frontier_phi_77_pred_3 = _3295;
                        frontier_phi_77_pred_4 = _3294;
                        frontier_phi_77_pred_5 = _3293;
                    }
                    _2935 = frontier_phi_77_pred;
                    _2933 = frontier_phi_77_pred_1;
                    _2931 = frontier_phi_77_pred_2;
                    _2929 = frontier_phi_77_pred_3;
                    _2927 = frontier_phi_77_pred_4;
                    _2925 = frontier_phi_77_pred_5;
                    uint _3091 = _3090 + 1u;
                    if (_3091 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3084 = _2925;
                        _3085 = _2927;
                        _3086 = _2929;
                        _3087 = _2931;
                        _3088 = _2933;
                        _3089 = _2935;
                        _3090 = _3091;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2929;
                frontier_phi_58_59_ladder_1 = _2935;
                frontier_phi_58_59_ladder_2 = _2933;
                frontier_phi_58_59_ladder_3 = _2931;
                frontier_phi_58_59_ladder_4 = _2927;
                frontier_phi_58_59_ladder_5 = _2925;
            }
            else
            {
                frontier_phi_58_59_ladder = _2799;
                frontier_phi_58_59_ladder_1 = _2805;
                frontier_phi_58_59_ladder_2 = _2803;
                frontier_phi_58_59_ladder_3 = _2801;
                frontier_phi_58_59_ladder_4 = _2797;
                frontier_phi_58_59_ladder_5 = _2795;
            }
            _2924 = frontier_phi_58_59_ladder_5;
            _2926 = frontier_phi_58_59_ladder_4;
            _2928 = frontier_phi_58_59_ladder;
            _2930 = frontier_phi_58_59_ladder_3;
            _2932 = frontier_phi_58_59_ladder_2;
            _2934 = frontier_phi_58_59_ladder_1;
        }
        float _2939 = isnan(1.0) ? _910 : (isnan(_910) ? 1.0 : min(_910, 1.0));
        _2676 = (_2939 * _2930) + _2112;
        _2678 = (_2939 * _2932) + _2114;
        _2680 = (_2939 * _2934) + _2116;
        _2682 = ((_2924 * _896) * _2939) + _2457;
        _2684 = ((_2926 * _897) * _2939) + _2459;
        _2686 = ((_2928 * _898) * _2939) + _2461;
    }
    else
    {
        _2676 = _2112;
        _2678 = _2114;
        _2680 = _2116;
        _2682 = _2457;
        _2684 = _2459;
        _2686 = _2461;
    }
    uint _2692 = _803 + uint(cbMatDynParam._m0[0u].w);
    float _2698 = cbInstanceData._m0[_2692].x * (_579 ? cbMtdParam._m0[17u].w : cbMtdParam._m0[10u].w);
    float _2699 = cbInstanceData._m0[_2692].y * (_579 ? cbMtdParam._m0[18u].x : cbMtdParam._m0[11u].x);
    float _2700 = cbInstanceData._m0[_2692].z * (_579 ? cbMtdParam._m0[18u].y : cbMtdParam._m0[11u].y);
    float _4721 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
    float _4732 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
    float _4743 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
    float _4754 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _2718 = (((isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0))) * (_2676 + ((isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0))) * _910))) + ((_2682 + ((isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0))) * _1749)) * cbPerFrame._m0[3u].x)) + _2698;
    float _2720 = (_2699 + ((_2684 + ((isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0))) * _1749)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0))) * (_2678 + ((isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0))) * _910)));
    float _2722 = (_2700 + ((_2686 + ((isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0))) * _1749)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0))) * (_2680 + ((isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0))) * _910)));
    float _2723 = isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0));
    float _2724 = isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : max(_2720, 0.0));
    float _2725 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0));
    float _2731 = cbMtdParam._m0[2u].x * _2698;
    float _2732 = cbMtdParam._m0[2u].y * _2699;
    float _2733 = cbMtdParam._m0[2u].z * _2700;
    float _4780 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2735 = isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0));
    float _2740 = cbInstanceData._m0[_802 + 6u].w * (isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0)));
    float _2745 = _700 / cbSceneParam._m0[86u].x;
    float _2746 = _701 / cbSceneParam._m0[86u].y;
    vec4 _2760 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2745, _2746, (log2((isnan(cbSceneParam._m0[77u].w) ? _624 : (isnan(_624) ? cbSceneParam._m0[77u].w : min(_624, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2762 = _2760.x;
    float _2763 = _2760.y;
    float _2764 = _2760.z;
    float _2765 = _2760.w;
    float _2857;
    float _2859;
    float _2861;
    float _2863;
    if (_624 > cbSceneParam._m0[78u].w)
    {
        float _2820 = isnan(_624) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _624 : min(cbSceneParam._m0[80u].w, _624));
        float _2821 = _2820 / _624;
        float _2832 = _2821 * _674;
        float _2833 = _675 * _2821;
        float _2834 = (-0.0) - _2833;
        float _2835 = _2821 * _676;
        float _2837 = (cbSceneParam._m0[77u].w * _2834) / _2820;
        float _2838 = _2837 + cbSceneParam._m0[79u].w;
        float _2839 = cbSceneParam._m0[79u].w - _2833;
        float _2845 = sqrt(((_2832 * _2832) + (_2833 * _2833)) + (_2835 * _2835));
        float _2848 = (1.0 - (cbSceneParam._m0[77u].w / _2820)) * _2845;
        float _2853 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2855 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3041;
        if (abs((_2834 - _2837) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3041 = ((((_2838 > 0.0) ? exp2(_2853 * _2838) : (2.0 - exp2(_2855 * _2838))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2848;
        }
        else
        {
            float _2985 = 1.0 / cbSceneParam._m0[80u].x;
            float _2986 = isnan(_2839) ? _2838 : (isnan(_2838) ? _2839 : max(_2838, _2839));
            float _2987 = isnan(_2839) ? _2838 : (isnan(_2838) ? _2839 : min(_2838, _2839));
            float _2996 = isnan(0.0) ? _2986 : (isnan(_2986) ? 0.0 : min(_2986, 0.0));
            float _2997 = isnan(0.0) ? _2987 : (isnan(_2987) ? 0.0 : min(_2987, 0.0));
            _3041 = ((abs(_2845 / _2834) * cbSceneParam._m0[80u].y) * ((((_2996 - _2997) * 2.0) - ((exp2(_2853 * (isnan(0.0) ? _2986 : (isnan(_2986) ? 0.0 : max(_2986, 0.0)))) - exp2(_2853 * (isnan(0.0) ? _2987 : (isnan(_2987) ? 0.0 : max(_2987, 0.0))))) * _2985)) - ((exp2(_2855 * _2996) - exp2(_2855 * _2997)) * _2985))) + (_2848 * cbSceneParam._m0[80u].z);
        }
        vec4 _3043 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2745, _2746, 1.0), 0.0);
        float _3052 = exp2((_3041 * (-1.44269502162933349609375)) * (1.0 - _3043.w));
        float _3053 = log2(_3052);
        float _3069 = log2(_2765);
        _2857 = (exp2(_3069 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3053 * cbSceneParam._m0[78u].x)) * _3043.x) / cbSceneParam._m0[78u].x)) + _2762;
        _2859 = (exp2(_3069 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3053 * cbSceneParam._m0[78u].y)) * _3043.y) / cbSceneParam._m0[78u].y)) + _2763;
        _2861 = (exp2(_3069 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3053 * cbSceneParam._m0[78u].z)) * _3043.z) / cbSceneParam._m0[78u].z)) + _2764;
        _2863 = _3052 * _2765;
    }
    else
    {
        _2857 = _2762;
        _2859 = _2763;
        _2861 = _2764;
        _2863 = _2765;
    }
    bool _3079;
    vec4 _2873;
    vec4 _2895;
    float _2897;
    float _2901;
    float _2902;
    float _2903;
    float _2906;
    float _2909;
    float _2912;
    float _2913;
    bool _2923;
    for (;;)
    {
        _2873 = cbMatDynParam._m0[0u];
        float _2875 = roundEven(_2873.y);
        bool _2876 = _2875 == 3.0;
        float _2877 = log2(_2863);
        float _2881 = exp2(_2877 * cbSceneParam._m0[78u].x);
        float _2882 = exp2(_2877 * cbSceneParam._m0[78u].y);
        float _2883 = exp2(_2877 * cbSceneParam._m0[78u].z);
        float _2884 = _2881 * _2723;
        float _2885 = _2882 * _2724;
        float _2886 = _2883 * _2725;
        float _2893 = _690 + (-0.5);
        _2895 = cbMtdParam._m0[1u];
        _2897 = _2895.y * _2893;
        float _2900 = (_2875 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2901 = _2900 * (_2876 ? _2884 : (_2884 + (cbSceneParam._m0[72u].w * _2857)));
        _2902 = _2900 * (_2876 ? _2885 : (_2885 + (cbSceneParam._m0[72u].w * _2859)));
        _2903 = _2900 * (_2876 ? _2886 : (_2886 + (cbSceneParam._m0[72u].w * _2861)));
        _2906 = ((_2731 * _2735) * _2881) * _2900;
        _2909 = ((_2732 * _2735) * _2882) * _2900;
        _2912 = ((_2733 * _2735) * _2883) * _2900;
        _2913 = _2893 * 0.999000012874603271484375;
        _2923 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2923)
        {
            if ((cbInstanceData._m0[_802 + 7u].x + _2913) < 0.5)
            {
                _3079 = true;
                break;
            }
        }
        uint _3020 = _803 + uint(_2873.w);
        if ((cbInstanceData._m0[_3020].w < 1.0) && ((cbInstanceData._m0[_3020].w + _2913) < 0.5))
        {
            _3079 = true;
            break;
        }
        if ((_2897 + 1.0) < _2895.x)
        {
            _3079 = true;
            break;
        }
        _3079 = false;
        break;
    }
    float _3284;
    if (_3079)
    {
        discard_state = true;
        _3284 = 0.0;
    }
    else
    {
        _3284 = _2740;
    }
    SV_Target.x = _2901;
    SV_Target.y = _2902;
    SV_Target.z = _2903;
    SV_Target.w = _3284;
    SV_Target_1.x = _2906;
    SV_Target_1.y = _2909;
    SV_Target_1.z = _2912;
    SV_Target_1.w = _2740;
    discard_exit();
}


