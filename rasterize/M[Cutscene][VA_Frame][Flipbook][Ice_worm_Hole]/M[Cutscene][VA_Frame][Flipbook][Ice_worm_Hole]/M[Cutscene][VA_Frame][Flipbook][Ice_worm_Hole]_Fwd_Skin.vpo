#version 460
#extension GL_EXT_samplerless_texture_functions : require

out float gl_ClipDistance[2];

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[19];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 11, std140) uniform cbTexScrollUBO
{
    vec4 _m0[4];
} cbTexScroll;

layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;
layout(set = 0, binding = 3) uniform texture2D M_Cutscene_VA_Frame_Flipbook_Ice_worm_Hole_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Cutscene_VA_Frame_Flipbook_Ice_worm_Hole_snp_0_Texture2D_4;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in uvec4 BLENDINDICES;
layout(location = 4) in vec4 BLENDWEIGHT;
layout(location = 5) in vec4 COLOR_1;
layout(location = 6) in ivec4 TEXCOORD;
layout(location = 7) in ivec2 TEXCOORD_1;
layout(location = 8) in vec4 TEXCOORD_4;
layout(location = 9) in vec4 TEXCOORD_5;
layout(location = 10) in vec4 TEXCOORD_2;
layout(location = 1) out vec4 POSITION_1;
layout(location = 2) out vec4 NORMAL_1;
layout(location = 3) out vec4 TANGENT_1;
layout(location = 4) out vec4 TEXCOORD_3;
layout(location = 5) out vec4 TEXCOORD_4_1;
layout(location = 6) out float TEXCOORD_6;

void main()
{
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    POSITION_1.x = 0.0;
    POSITION_1.y = 0.0;
    POSITION_1.z = 0.0;
    POSITION_1.w = 0.0;
    NORMAL_1.x = 0.0;
    NORMAL_1.y = 0.0;
    NORMAL_1.z = 0.0;
    NORMAL_1.w = 0.0;
    TANGENT_1.x = 0.0;
    TANGENT_1.y = 0.0;
    TANGENT_1.z = 0.0;
    TANGENT_1.w = 0.0;
    TEXCOORD_3.x = 0.0;
    TEXCOORD_3.y = 0.0;
    TEXCOORD_3.z = 0.0;
    TEXCOORD_3.w = 0.0;
    TEXCOORD_4_1.x = 0.0;
    TEXCOORD_4_1.y = 0.0;
    TEXCOORD_4_1.z = 0.0;
    TEXCOORD_4_1.w = 0.0;
    TEXCOORD_6 = 0.0;
    gl_ClipDistance[0u] = 0.0;
    gl_ClipDistance[1u] = 0.0;
    float _226 = (float(TANGENT.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _228 = (float(TANGENT.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _229 = (float(TANGENT.z) + (-127.0)) * 0.0078740157186985015869140625;
    precise float _239 = float(int(uvec2(textureSize(M_Cutscene_VA_Frame_Flipbook_Ice_worm_Hole_snp_0_Texture2D_4, int(0u))).y)) + (-1.0);
    float _655 = isnan(0.0) ? cbMtdParam._m0[3u].z : (isnan(cbMtdParam._m0[3u].z) ? 0.0 : max(cbMtdParam._m0[3u].z, 0.0));
    precise float _247 = (isnan(1.0) ? _655 : (isnan(_655) ? 1.0 : min(_655, 1.0))) * _239;
    precise float _248 = TEXCOORD_2.x * 255.0;
    precise float _250 = TEXCOORD_2.y * 255.0;
    precise float _251 = _250 * 256.0;
    precise float _253 = _248 + _251;
    precise float _254 = _253 + 0.5;
    float _256 = floor(_247);
    uint _257 = uint(int(_254));
    uint _258 = uint(int(_256));
    vec4 _259 = texelFetch(M_Cutscene_VA_Frame_Flipbook_Ice_worm_Hole_snp_0_Texture2D_3, ivec2(uvec2(_257, _258)), int(0u));
    float _261 = _259.x;
    float _262 = _259.y;
    float _263 = _259.z;
    precise float _271 = _256 + 1.0;
    uint _273 = uint(int(isnan(_239) ? _271 : (isnan(_271) ? _239 : min(_271, _239))));
    vec4 _274 = texelFetch(M_Cutscene_VA_Frame_Flipbook_Ice_worm_Hole_snp_0_Texture2D_3, ivec2(uvec2(_257, _273)), int(0u));
    float _279 = fract(_247);
    vec4 _292 = texelFetch(M_Cutscene_VA_Frame_Flipbook_Ice_worm_Hole_snp_0_Texture2D_4, ivec2(uvec2(_257, _258)), int(0u));
    float _294 = _292.x;
    float _295 = _292.y;
    float _296 = _292.z;
    vec4 _297 = texelFetch(M_Cutscene_VA_Frame_Flipbook_Ice_worm_Hole_snp_0_Texture2D_4, ivec2(uvec2(_257, _273)), int(0u));
    precise float _302 = _297.x - _294;
    precise float _303 = _297.y - _295;
    precise float _304 = _297.z - _296;
    precise float _305 = _279 * _302;
    precise float _306 = _279 * _303;
    precise float _307 = _279 * _304;
    precise float _308 = _294 + _305;
    precise float _309 = _295 + _306;
    precise float _310 = _296 + _307;
    uint _315 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + (uint(gl_InstanceIndex) - uint(gl_BaseInstance));
    uvec4 _317 = texelFetch(g_InstanceIndexBuffer, int(_315));
    uint _318 = _317.x;
    precise float _319 = dot(vec4(1.0), vec4(BLENDWEIGHT.x, BLENDWEIGHT.y, BLENDWEIGHT.z, BLENDWEIGHT.w));
    float _322 = isnan(_319) ? 0.001000000047497451305389404296875 : (isnan(0.001000000047497451305389404296875) ? _319 : max(0.001000000047497451305389404296875, _319));
    precise float _324 = BLENDWEIGHT.x / _322;
    precise float _325 = BLENDWEIGHT.y / _322;
    precise float _326 = BLENDWEIGHT.z / _322;
    precise float _327 = BLENDWEIGHT.w / _322;
    uint _329 = _318 * 13u;
    uvec4 _334 = floatBitsToUint(cbInstanceData._m0[_329 + 4u]);
    uint _335 = _334.x;
    uint _337 = (_335 + uint(float(BLENDINDICES.x))) * 3u;
    uint _344 = _337 + 1u;
    uint _351 = _337 + 2u;
    precise float _358 = _324 * cbObjMatrix._m0[_337].x;
    precise float _359 = _324 * cbObjMatrix._m0[_344].x;
    precise float _360 = _324 * cbObjMatrix._m0[_351].x;
    precise float _361 = _324 * cbObjMatrix._m0[_337].y;
    precise float _362 = _324 * cbObjMatrix._m0[_344].y;
    precise float _363 = _324 * cbObjMatrix._m0[_351].y;
    precise float _364 = _324 * cbObjMatrix._m0[_337].z;
    precise float _365 = _324 * cbObjMatrix._m0[_344].z;
    precise float _366 = _324 * cbObjMatrix._m0[_351].z;
    precise float _367 = _324 * cbObjMatrix._m0[_337].w;
    precise float _368 = _324 * cbObjMatrix._m0[_344].w;
    precise float _369 = _324 * cbObjMatrix._m0[_351].w;
    uint _372 = (_335 + uint(float(BLENDINDICES.y))) * 3u;
    uint _379 = _372 + 1u;
    uint _386 = _372 + 2u;
    precise float _393 = _325 * cbObjMatrix._m0[_372].x;
    precise float _394 = _325 * cbObjMatrix._m0[_379].x;
    precise float _395 = _325 * cbObjMatrix._m0[_386].x;
    precise float _396 = _325 * cbObjMatrix._m0[_372].y;
    precise float _397 = _325 * cbObjMatrix._m0[_379].y;
    precise float _398 = _325 * cbObjMatrix._m0[_386].y;
    precise float _399 = _325 * cbObjMatrix._m0[_372].z;
    precise float _400 = _325 * cbObjMatrix._m0[_379].z;
    precise float _401 = _325 * cbObjMatrix._m0[_386].z;
    precise float _402 = _325 * cbObjMatrix._m0[_372].w;
    precise float _403 = _325 * cbObjMatrix._m0[_379].w;
    precise float _404 = _325 * cbObjMatrix._m0[_386].w;
    precise float _405 = _358 + _393;
    precise float _406 = _359 + _394;
    precise float _407 = _360 + _395;
    precise float _408 = _361 + _396;
    precise float _409 = _362 + _397;
    precise float _410 = _363 + _398;
    precise float _411 = _364 + _399;
    precise float _412 = _365 + _400;
    precise float _413 = _366 + _401;
    precise float _414 = _367 + _402;
    precise float _415 = _368 + _403;
    precise float _416 = _369 + _404;
    uint _419 = (_335 + uint(float(BLENDINDICES.z))) * 3u;
    uint _426 = _419 + 1u;
    uint _433 = _419 + 2u;
    precise float _440 = _326 * cbObjMatrix._m0[_419].x;
    precise float _441 = _326 * cbObjMatrix._m0[_426].x;
    precise float _442 = _326 * cbObjMatrix._m0[_433].x;
    precise float _443 = _326 * cbObjMatrix._m0[_419].y;
    precise float _444 = _326 * cbObjMatrix._m0[_426].y;
    precise float _445 = _326 * cbObjMatrix._m0[_433].y;
    precise float _446 = _326 * cbObjMatrix._m0[_419].z;
    precise float _447 = _326 * cbObjMatrix._m0[_426].z;
    precise float _448 = _326 * cbObjMatrix._m0[_433].z;
    precise float _449 = _326 * cbObjMatrix._m0[_419].w;
    precise float _450 = _326 * cbObjMatrix._m0[_426].w;
    precise float _451 = _326 * cbObjMatrix._m0[_433].w;
    precise float _452 = _405 + _440;
    precise float _453 = _406 + _441;
    precise float _454 = _407 + _442;
    precise float _455 = _408 + _443;
    precise float _456 = _409 + _444;
    precise float _457 = _410 + _445;
    precise float _458 = _411 + _446;
    precise float _459 = _412 + _447;
    precise float _460 = _413 + _448;
    precise float _461 = _414 + _449;
    precise float _462 = _415 + _450;
    precise float _463 = _416 + _451;
    uint _466 = (_335 + uint(float(BLENDINDICES.w))) * 3u;
    uint _473 = _466 + 1u;
    uint _480 = _466 + 2u;
    precise float _487 = _327 * cbObjMatrix._m0[_466].x;
    precise float _488 = _327 * cbObjMatrix._m0[_473].x;
    precise float _489 = _327 * cbObjMatrix._m0[_480].x;
    precise float _490 = _327 * cbObjMatrix._m0[_466].y;
    precise float _491 = _327 * cbObjMatrix._m0[_473].y;
    precise float _492 = _327 * cbObjMatrix._m0[_480].y;
    precise float _493 = _327 * cbObjMatrix._m0[_466].z;
    precise float _494 = _327 * cbObjMatrix._m0[_473].z;
    precise float _495 = _327 * cbObjMatrix._m0[_480].z;
    precise float _496 = _327 * cbObjMatrix._m0[_466].w;
    precise float _497 = _327 * cbObjMatrix._m0[_473].w;
    precise float _498 = _327 * cbObjMatrix._m0[_480].w;
    precise float _499 = _452 + _487;
    precise float _500 = _453 + _488;
    precise float _501 = _454 + _489;
    precise float _502 = _455 + _490;
    precise float _503 = _456 + _491;
    precise float _504 = _457 + _492;
    precise float _505 = _458 + _493;
    precise float _506 = _459 + _494;
    precise float _507 = _460 + _495;
    precise float _508 = _461 + _496;
    precise float _509 = _462 + _497;
    precise float _510 = _463 + _498;
    precise float _511 = POSITION.x * _499;
    precise float _512 = POSITION.y * _502;
    precise float _513 = _512 + _511;
    precise float _514 = POSITION.z * _505;
    precise float _515 = _514 + _513;
    precise float _516 = 1.0 * _508;
    precise float _517 = _516 + _515;
    precise float _518 = POSITION.x * _500;
    precise float _519 = POSITION.y * _503;
    precise float _520 = _519 + _518;
    precise float _521 = POSITION.z * _506;
    precise float _522 = _521 + _520;
    precise float _523 = 1.0 * _509;
    precise float _524 = _523 + _522;
    precise float _525 = POSITION.x * _501;
    precise float _526 = POSITION.y * _504;
    precise float _527 = _526 + _525;
    precise float _528 = POSITION.z * _507;
    precise float _529 = _528 + _527;
    precise float _530 = 1.0 * _510;
    precise float _531 = _530 + _529;
    precise float _532 = _308 + _517;
    precise float _533 = _309 + _524;
    precise float _534 = _310 + _531;
    precise float _550 = _532 - cbSceneParam._m0[3u].x;
    precise float _551 = _533 - cbSceneParam._m0[3u].y;
    precise float _552 = _534 - cbSceneParam._m0[3u].z;
    precise float _580 = _550 * cbSceneParam._m0[24u].x;
    precise float _581 = _551 * cbSceneParam._m0[24u].y;
    precise float _582 = _581 + _580;
    precise float _583 = _552 * cbSceneParam._m0[24u].z;
    precise float _584 = _583 + _582;
    precise float _585 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _586 = _585 + _584;
    precise float _587 = _550 * cbSceneParam._m0[25u].x;
    precise float _588 = _551 * cbSceneParam._m0[25u].y;
    precise float _589 = _588 + _587;
    precise float _590 = _552 * cbSceneParam._m0[25u].z;
    precise float _591 = _590 + _589;
    precise float _592 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _593 = _592 + _591;
    precise float _594 = _550 * cbSceneParam._m0[26u].x;
    precise float _595 = _551 * cbSceneParam._m0[26u].y;
    precise float _596 = _595 + _594;
    precise float _597 = _552 * cbSceneParam._m0[26u].z;
    precise float _598 = _597 + _596;
    precise float _599 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _600 = _599 + _598;
    precise float _601 = _550 * cbSceneParam._m0[27u].x;
    precise float _602 = _551 * cbSceneParam._m0[27u].y;
    precise float _603 = _602 + _601;
    precise float _604 = _552 * cbSceneParam._m0[27u].z;
    precise float _605 = _604 + _603;
    precise float _606 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _607 = _606 + _605;
    gl_Position.x = _586;
    gl_Position.y = _593;
    gl_Position.z = _600;
    gl_Position.w = _607;
    POSITION_1.x = _586;
    POSITION_1.y = _593;
    POSITION_1.z = _600;
    POSITION_1.w = _607;
    NORMAL_1.x = (((_274.x - _261) * 2.0) * _279) + ((_261 * 2.0) + (-1.0));
    NORMAL_1.y = (((_274.y - _262) * 2.0) * _279) + ((_262 * 2.0) + (-1.0));
    NORMAL_1.z = (_279 * ((_274.z - _263) * 2.0)) + ((_263 * 2.0) + (-1.0));
    NORMAL_1.w = float(_318);
    TANGENT_1.x = fma(_229, _505, fma(_228, _502, _499 * _226));
    TANGENT_1.y = fma(_229, _506, fma(_228, _503, _500 * _226));
    TANGENT_1.z = fma(_229, _507, fma(_228, _504, _501 * _226));
    TANGENT_1.w = (float(TANGENT.w) + (-127.0)) * 0.0078740157186985015869140625;
    TEXCOORD_3.x = ((float(int(uint(TEXCOORD.x))) * 0.00048828125) * cbTexScroll._m0[0u].x) + cbTexScroll._m0[0u].z;
    TEXCOORD_3.y = ((float(int(uint(TEXCOORD.y))) * 0.00048828125) * cbTexScroll._m0[0u].y) + cbTexScroll._m0[0u].w;
    TEXCOORD_3.z = ((float(int(uint(TEXCOORD.z))) * 0.00048828125) * cbTexScroll._m0[1u].x) + cbTexScroll._m0[1u].z;
    TEXCOORD_3.w = ((float(int(uint(TEXCOORD.w))) * 0.00048828125) * cbTexScroll._m0[1u].y) + cbTexScroll._m0[1u].w;
    TEXCOORD_4_1.x = ((float(int(uint(TEXCOORD_1.x))) * 0.00048828125) * cbTexScroll._m0[2u].x) + cbTexScroll._m0[2u].z;
    TEXCOORD_4_1.y = ((float(int(uint(TEXCOORD_1.y))) * 0.00048828125) * cbTexScroll._m0[2u].y) + cbTexScroll._m0[2u].w;
    TEXCOORD_4_1.z = TEXCOORD_2.x;
    TEXCOORD_4_1.w = TEXCOORD_2.y;
    TEXCOORD_6 = COLOR_1.x;
    gl_ClipDistance[0u] = dot(vec4(_586, _593, _600, _607), vec4(cbSceneParam._m0[4u]));
    gl_ClipDistance[1u] = dot(vec4(_586, _593, _600, _607), vec4(cbInstanceData._m0[_329 + 3u]));
}


