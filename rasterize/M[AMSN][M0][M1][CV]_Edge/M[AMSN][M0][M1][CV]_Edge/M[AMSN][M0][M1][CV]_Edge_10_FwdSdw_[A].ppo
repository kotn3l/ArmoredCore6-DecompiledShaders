#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _968;
float _3640;
float _3641;
float _3642;
float _3643;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _190 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _191 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _192 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _198 = inversesqrt(dot(vec3(_190, _191, _192), vec3(_190, _191, _192)));
    float _205 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _206 = _205 * NORMAL.x;
    float _207 = _205 * NORMAL.y;
    float _208 = _205 * NORMAL.z;
    float _212 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _220;
    float _221;
    float _222;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _220 = (-0.0) - _206;
        _221 = (-0.0) - _207;
        _222 = (-0.0) - _208;
    }
    else
    {
        _220 = _206;
        _221 = _207;
        _222 = _208;
    }
    vec4 _248 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _254 = _248.w;
    float _255 = _248.x * cbMtdParam._m0[9u].x;
    float _256 = _248.y * cbMtdParam._m0[9u].y;
    float _257 = _248.z * cbMtdParam._m0[9u].z;
    vec4 _269 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _273 = _269.z;
    float _277 = (_269.x * 2.0) + (-1.0);
    float _279 = (_269.y * 2.0) + (-1.0);
    float _280 = dot(vec2(_277, _279), vec2(_277, _279));
    float _3652 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _286 = sqrt(1.0 - (isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0))));
    float _298 = (TEXCOORD_3.x - (((1.0 - TEXCOORD_3.x) * 0.00999999977648258209228515625) * cbMtdParam._m0[12u].y)) * (cbMtdParam._m0[12u].z + 1.0);
    float _3663 = isnan(0.0) ? _298 : (isnan(_298) ? 0.0 : max(_298, 0.0));
    float _299 = isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0));
    float _306 = (_299 * (cbMtdParam._m0[10u].x - _255)) + _255;
    float _307 = (_299 * (cbMtdParam._m0[10u].y - _256)) + _256;
    float _308 = (_299 * (cbMtdParam._m0[10u].z - _257)) + _257;
    vec4 _320 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _322 = _320.x;
    float _324 = _322 - (_322 * _299);
    vec4 _336 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _343 = (_336.x * 2.0) + (-1.0);
    float _344 = (_336.y * 2.0) + (-1.0);
    float _345 = dot(vec2(_343, _344), vec2(_343, _344));
    float _3674 = isnan(0.0) ? _345 : (isnan(_345) ? 0.0 : max(_345, 0.0));
    float _353 = (_299 * (_336.z - _273)) + _273;
    float _365 = (((_343 - _277) + (cbMtdParam._m0[12u].w * _277)) * _299) + _277;
    float _366 = (((_344 - _279) + (cbMtdParam._m0[12u].w * _279)) * _299) + _279;
    float _367 = (_299 * (sqrt(1.0 - (isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0)))) - _286)) + _286;
    float _370 = fma(_367, _220, fma(_366, _212 * TANGENT.x, (_198 * _190) * _365));
    float _373 = fma(_367, _221, fma(_366, _212 * TANGENT.y, (_198 * _191) * _365));
    float _376 = fma(_367, _222, fma(_366, _212 * TANGENT.z, (_198 * _192) * _365));
    float _380 = inversesqrt(dot(vec3(_370, _373, _376), vec3(_370, _373, _376)));
    float _381 = _380 * _370;
    float _382 = _380 * _373;
    float _383 = _380 * _376;
    float _3685 = isnan(0.0) ? _353 : (isnan(_353) ? 0.0 : max(_353, 0.0));
    float _384 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
    float _3696 = isnan(0.0) ? _306 : (isnan(_306) ? 0.0 : max(_306, 0.0));
    float _3707 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _3718 = isnan(0.0) ? _308 : (isnan(_308) ? 0.0 : max(_308, 0.0));
    float _3729 = isnan(0.0) ? _324 : (isnan(_324) ? 0.0 : max(_324, 0.0));
    float _388 = isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0));
    float _404 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _446 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _456 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _446);
    float _457 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _446);
    float _458 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _446);
    float _462 = inversesqrt(dot(vec3(_456, _457, _458), vec3(_456, _457, _458)));
    float _463 = _456 * _462;
    float _464 = _457 * _462;
    float _465 = _458 * _462;
    vec4 _470 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _472 = _470.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _648 = sqrt(((_456 * _456) + (_457 * _457)) + (_458 * _458));
        float _654 = (cbMatDynParam._m0[5u].x * _648) + cbMatDynParam._m0[5u].y;
        float _3740 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
        float _655 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
        float _659 = (cbMatDynParam._m0[5u].z * _648) + cbMatDynParam._m0[5u].w;
        float _3751 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0))) - _655)) + _655) < ((_472 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _484 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _485 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _505 = fma(_383, cbSceneParam._m0[5u].z, fma(_382, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _381));
    float _508 = fma(_383, cbSceneParam._m0[6u].z, fma(_382, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _381));
    float _511 = fma(_383, cbSceneParam._m0[7u].z, fma(_382, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _381));
    uint _524 = uint(roundEven(NORMAL.w)) * 13u;
    uint _526 = _524 + 9u;
    uint _527 = _526 + uint(cbMatDynParam._m0[0u].w);
    float _533 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0)))) * cbInstanceData._m0[_527].x;
    float _534 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0)))) * cbInstanceData._m0[_527].y;
    float _535 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0)))) * cbInstanceData._m0[_527].z;
    float _3762 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _536 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
    float _3773 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _537 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
    float _3784 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _538 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
    float _539 = 1.0 - _388;
    float _540 = _536 * _539;
    float _541 = _537 * _539;
    float _542 = _538 * _539;
    float _547 = (_536 + (-0.039999999105930328369140625)) * _388;
    float _548 = (_537 + (-0.039999999105930328369140625)) * _388;
    float _549 = (_538 + (-0.039999999105930328369140625)) * _388;
    float _550 = _547 + 0.039999999105930328369140625;
    float _552 = _548 + 0.039999999105930328369140625;
    float _553 = _549 + 0.039999999105930328369140625;
    vec4 _562 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _484, cbSceneParam._m0[86u].y * _485));
    float _565 = _562.x * TEXCOORD_3.w;
    float _566 = dot(vec3(_381, _382, _383), vec3(_463, _464, _465));
    float _569 = _566 * 2.0;
    float _573 = (_569 * _381) - _463;
    float _574 = (_569 * _382) - _464;
    float _575 = (_569 * _383) - _465;
    float _579 = abs(dot(vec3(_463, _464, _465), vec3(_381, _382, _383)));
    float _3795 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _581 = sqrt(_384);
    float _594 = exp2((_581 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_581 * 3.0));
    float _600 = (1.0 - _594) * ((_581 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _601 = _594 * _581;
    float _629 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _633 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _637 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _967;
    float _969;
    float _970;
    float _971;
    float _972;
    float _973;
    float _974;
    float _975;
    float _976;
    float _977;
    float _978;
    float _979;
    float _980;
    float _981;
    float _982;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _692 = fma(_637, cbModelParam._m0[26u].z, fma(_633, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _629));
        float _696 = fma(_637, cbModelParam._m0[27u].z, fma(_633, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _629));
        float _700 = fma(_637, cbModelParam._m0[28u].z, fma(_633, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _629));
        float _725 = _629 + _381;
        float _726 = _633 + _382;
        float _727 = _637 + _383;
        float _737 = fma(_727, cbModelParam._m0[26u].z, fma(_726, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _725)) - _692;
        float _738 = fma(_727, cbModelParam._m0[27u].z, fma(_726, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _725)) - _696;
        float _739 = fma(_727, cbModelParam._m0[28u].z, fma(_726, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _725)) - _700;
        float _743 = inversesqrt(dot(vec3(_737, _738, _739), vec3(_737, _738, _739)));
        float _756 = ((_743 * _737) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_692 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _757 = ((_743 * _738) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_696 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _758 = ((_743 * _739) / cbModelParam._m0[34u].z) + ((((((_700 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _761 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_756, _757, _758), 0.0);
        vec4 _768 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_756, _757, _758), 0.0);
        vec4 _775 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_756, _757, _758), 0.0);
        vec4 _782 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_756, _757, _758), 0.0);
        float _795 = exp2((_761.w + (-0.5)) * 20.0) * 2.0;
        float _796 = _795 * (_761.x + (-0.5));
        float _797 = _795 * (_761.y + (-0.5));
        float _798 = _795 * (_761.z + (-0.5));
        float _805 = exp2((_768.w + (-0.5)) * 20.0) * 2.0;
        float _806 = _805 * (_768.x + (-0.5));
        float _807 = _805 * (_768.y + (-0.5));
        float _808 = _805 * (_768.z + (-0.5));
        float _815 = exp2((_775.w + (-0.5)) * 20.0) * 2.0;
        float _816 = _815 * (_775.x + (-0.5));
        float _817 = _815 * (_775.y + (-0.5));
        float _818 = _815 * (_775.z + (-0.5));
        float _825 = exp2((_782.w + (-0.5)) * 20.0) * 2.0;
        float _826 = _825 * (_782.x + (-0.5));
        float _827 = _825 * (_782.y + (-0.5));
        float _828 = _825 * (_782.z + (-0.5));
        float _829 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
        float _830 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
        float _831 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
        float _832 = _796 * 0.5;
        float _833 = _806 * 0.5;
        float _834 = _816 * 0.5;
        float _835 = dot(vec3(_832, _833, _834), vec3(_832, _833, _834));
        float _840 = (_835 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_835);
        float _849 = (dot(vec3(_381, _382, _383), vec3(_840 * _832, _840 * _833, _840 * _834)) + 1.0) * 0.5;
        float _3821 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
        float _859 = sqrt(((_833 * _833) + (_832 * _832)) + (_834 * _834)) / (_829 + 9.9999997473787516355514526367188e-06);
        float _3832 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
        float _860 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
        float _861 = _860 * 2.0;
        float _865 = (1.0 - _860) / (_860 + 1.0);
        float _3843 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
        float _866 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
        float _875 = ((((1.0 - _866) * (_861 + 2.0)) * exp2(log2(isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0))) * (_861 + 1.0))) + _866) * _829;
        float _876 = _797 * 0.5;
        float _877 = _807 * 0.5;
        float _878 = _817 * 0.5;
        float _879 = dot(vec3(_876, _877, _878), vec3(_876, _877, _878));
        float _884 = (_879 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_879);
        float _892 = (dot(vec3(_381, _382, _383), vec3(_884 * _876, _884 * _877, _884 * _878)) + 1.0) * 0.5;
        float _3854 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
        float _901 = sqrt(((_877 * _877) + (_876 * _876)) + (_878 * _878)) / (_830 + 9.9999997473787516355514526367188e-06);
        float _3865 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
        float _902 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
        float _903 = _902 * 2.0;
        float _907 = (1.0 - _902) / (_902 + 1.0);
        float _3876 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        float _908 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
        float _917 = ((((1.0 - _908) * (_903 + 2.0)) * exp2(log2(isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0))) * (_903 + 1.0))) + _908) * _830;
        float _918 = _798 * 0.5;
        float _919 = _808 * 0.5;
        float _920 = _818 * 0.5;
        float _921 = dot(vec3(_918, _919, _920), vec3(_918, _919, _920));
        float _926 = (_921 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_921);
        float _934 = (dot(vec3(_381, _382, _383), vec3(_926 * _918, _926 * _919, _926 * _920)) + 1.0) * 0.5;
        float _3887 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
        float _943 = sqrt(((_919 * _919) + (_918 * _918)) + (_920 * _920)) / (_831 + 9.9999997473787516355514526367188e-06);
        float _3898 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
        float _944 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
        float _945 = _944 * 2.0;
        float _949 = (1.0 - _944) / (_944 + 1.0);
        float _3909 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
        float _950 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
        float _959 = ((((1.0 - _950) * (_945 + 2.0)) * exp2(log2(isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0))) * (_945 + 1.0))) + _950) * _831;
        _967 = _798;
        _969 = _797;
        _970 = _796;
        _971 = _808;
        _972 = _807;
        _973 = _806;
        _974 = _818;
        _975 = _817;
        _976 = _816;
        _977 = _831;
        _978 = _830;
        _979 = _829;
        _980 = cbModelParam._m0[36u].z * (isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0)));
        _981 = cbModelParam._m0[36u].z * (isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0)));
        _982 = cbModelParam._m0[36u].z * (isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0)));
    }
    else
    {
        _967 = _968;
        _969 = _968;
        _970 = _968;
        _971 = _968;
        _972 = _968;
        _973 = _968;
        _974 = _968;
        _975 = _968;
        _976 = _968;
        _977 = _968;
        _978 = _968;
        _979 = _968;
        _980 = 0.0;
        _981 = 0.0;
        _982 = 0.0;
    }
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1011 = fma(_637, cbModelParam._m0[30u].z, fma(_633, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _629));
        float _1015 = fma(_637, cbModelParam._m0[31u].z, fma(_633, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _629));
        float _1019 = fma(_637, cbModelParam._m0[32u].z, fma(_633, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _629));
        float _1042 = _629 + _381;
        float _1043 = _633 + _382;
        float _1044 = _637 + _383;
        float _1054 = fma(_1044, cbModelParam._m0[30u].z, fma(_1043, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1042)) - _1011;
        float _1055 = fma(_1044, cbModelParam._m0[31u].z, fma(_1043, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1042)) - _1015;
        float _1056 = fma(_1044, cbModelParam._m0[32u].z, fma(_1043, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1042)) - _1019;
        float _1060 = inversesqrt(dot(vec3(_1054, _1055, _1056), vec3(_1054, _1055, _1056)));
        float _1073 = ((_1060 * _1054) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1011 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1074 = ((_1060 * _1055) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1015 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1075 = ((_1060 * _1056) / cbModelParam._m0[35u].z) + ((((((_1019 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1077 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1073, _1074, _1075), 0.0);
        vec4 _1084 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1073, _1074, _1075), 0.0);
        vec4 _1091 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1073, _1074, _1075), 0.0);
        vec4 _1098 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1073, _1074, _1075), 0.0);
        float _1110 = exp2((_1077.w + (-0.5)) * 20.0) * 2.0;
        float _1111 = _1110 * (_1077.x + (-0.5));
        float _1112 = _1110 * (_1077.y + (-0.5));
        float _1113 = _1110 * (_1077.z + (-0.5));
        float _1120 = exp2((_1084.w + (-0.5)) * 20.0) * 2.0;
        float _1121 = _1120 * (_1084.x + (-0.5));
        float _1122 = _1120 * (_1084.y + (-0.5));
        float _1123 = _1120 * (_1084.z + (-0.5));
        float _1130 = exp2((_1091.w + (-0.5)) * 20.0) * 2.0;
        float _1131 = _1130 * (_1091.x + (-0.5));
        float _1132 = _1130 * (_1091.y + (-0.5));
        float _1133 = _1130 * (_1091.z + (-0.5));
        float _1140 = exp2((_1098.w + (-0.5)) * 20.0) * 2.0;
        float _1141 = _1140 * (_1098.x + (-0.5));
        float _1142 = _1140 * (_1098.y + (-0.5));
        float _1143 = _1140 * (_1098.z + (-0.5));
        float _1144 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1145 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1146 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1147 = _1111 * 0.5;
        float _1148 = _1121 * 0.5;
        float _1149 = _1131 * 0.5;
        float _1150 = dot(vec3(_1147, _1148, _1149), vec3(_1147, _1148, _1149));
        float _1155 = (_1150 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1150);
        float _1163 = (dot(vec3(_381, _382, _383), vec3(_1155 * _1147, _1155 * _1148, _1155 * _1149)) + 1.0) * 0.5;
        float _3950 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1172 = sqrt(((_1148 * _1148) + (_1147 * _1147)) + (_1149 * _1149)) / (_1144 + 9.9999997473787516355514526367188e-06);
        float _3961 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1173 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
        float _1174 = _1173 * 2.0;
        float _1178 = (1.0 - _1173) / (_1173 + 1.0);
        float _3972 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1179 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
        float _1188 = ((((1.0 - _1179) * (_1174 + 2.0)) * exp2(log2(isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0))) * (_1174 + 1.0))) + _1179) * _1144;
        float _1189 = _1112 * 0.5;
        float _1190 = _1122 * 0.5;
        float _1191 = _1132 * 0.5;
        float _1192 = dot(vec3(_1189, _1190, _1191), vec3(_1189, _1190, _1191));
        float _1197 = (_1192 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1192);
        float _1205 = (dot(vec3(_381, _382, _383), vec3(_1197 * _1189, _1197 * _1190, _1197 * _1191)) + 1.0) * 0.5;
        float _3983 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1214 = sqrt(((_1190 * _1190) + (_1189 * _1189)) + (_1191 * _1191)) / (_1145 + 9.9999997473787516355514526367188e-06);
        float _3994 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1215 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
        float _1216 = _1215 * 2.0;
        float _1220 = (1.0 - _1215) / (_1215 + 1.0);
        float _4005 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1221 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
        float _1230 = ((((1.0 - _1221) * (_1216 + 2.0)) * exp2(log2(isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0))) * (_1216 + 1.0))) + _1221) * _1145;
        float _1231 = _1113 * 0.5;
        float _1232 = _1123 * 0.5;
        float _1233 = _1133 * 0.5;
        float _1234 = dot(vec3(_1231, _1232, _1233), vec3(_1231, _1232, _1233));
        float _1239 = (_1234 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1234);
        float _1247 = (dot(vec3(_381, _382, _383), vec3(_1239 * _1231, _1239 * _1232, _1239 * _1233)) + 1.0) * 0.5;
        float _4016 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1256 = sqrt(((_1232 * _1232) + (_1231 * _1231)) + (_1233 * _1233)) / (_1146 + 9.9999997473787516355514526367188e-06);
        float _4027 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1257 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
        float _1258 = _1257 * 2.0;
        float _1262 = (1.0 - _1257) / (_1257 + 1.0);
        float _4038 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1263 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _1272 = ((((1.0 - _1263) * (_1258 + 2.0)) * exp2(log2(isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0))) * (_1258 + 1.0))) + _1263) * _1146;
        _1280 = _1113;
        _1281 = _1112;
        _1282 = _1111;
        _1283 = _1123;
        _1284 = _1122;
        _1285 = _1121;
        _1286 = _1133;
        _1287 = _1132;
        _1288 = _1131;
        _1289 = _1146;
        _1290 = _1145;
        _1291 = _1144;
        _1292 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0)));
        _1293 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0)));
        _1294 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0)));
    }
    else
    {
        _1280 = _968;
        _1281 = _968;
        _1282 = _968;
        _1283 = _968;
        _1284 = _968;
        _1285 = _968;
        _1286 = _968;
        _1287 = _968;
        _1288 = _968;
        _1289 = _968;
        _1290 = _968;
        _1291 = _968;
        _1292 = 0.0;
        _1293 = 0.0;
        _1294 = 0.0;
    }
    float _1304 = (cbModelParam._m0[1u].x * (_1292 - _980)) + _980;
    float _1305 = (cbModelParam._m0[1u].x * (_1293 - _981)) + _981;
    float _1306 = (cbModelParam._m0[1u].x * (_1294 - _982)) + _982;
    float _1327 = fma(_1306, cbSceneParam._m0[89u].z, fma(_1305, cbSceneParam._m0[89u].y, _1304 * cbSceneParam._m0[89u].x));
    float _1330 = fma(_1306, cbSceneParam._m0[90u].z, fma(_1305, cbSceneParam._m0[90u].y, _1304 * cbSceneParam._m0[90u].x));
    float _1333 = fma(_1306, cbSceneParam._m0[91u].z, fma(_1305, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1304));
    float _1348 = _573 * 0.5;
    float _1349 = _574 * 0.5;
    float _1350 = _575 * 0.5;
    float _1351 = dot(vec4(_1348, _1349, _1350, 1.0), vec4(_1282, _1285, _1288, _1291));
    float _1354 = dot(vec4(_1348, _1349, _1350, 1.0), vec4(_1281, _1284, _1287, _1290));
    float _1357 = dot(vec4(_1348, _1349, _1350, 1.0), vec4(_1280, _1283, _1286, _1289));
    float _1391;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1364 = dot(vec4(_1348, _1349, _1350, 1.0), vec4(_967, _971, _974, _977));
        float _1368 = dot(vec4(_1348, _1349, _1350, 1.0), vec4(_969, _972, _975, _978));
        float _1372 = dot(vec4(_1348, _1349, _1350, 1.0), vec4(_970, _973, _976, _979));
        float _1379 = dot(vec4(cbModelParam._m0[39u]), vec4(_1348, _1349, _1350, 1.0));
        _1391 = dot(vec3(isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0)), isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0)), isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1379) ? 0.0 : (isnan(0.0) ? _1379 : max(0.0, _1379))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1391 = 1.0;
    }
    float _1402;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1393 = dot(vec4(cbModelParam._m0[40u]), vec4(_1348, _1349, _1350, 1.0));
        _1402 = dot(vec3(isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0)), isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0)), isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1393) ? 0.0 : (isnan(0.0) ? _1393 : max(0.0, _1393))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1402 = 1.0;
    }
    float _1406 = (_1402 * cbModelParam._m0[1u].x) + (_1391 * (1.0 - cbModelParam._m0[1u].x));
    float _1416 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _384);
    float _1417 = isnan(_1416) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1416 : min(cbModelParam._m0[25u].z, _1416));
    float _1498;
    float _1500;
    float _1502;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1465 = fma(_637, cbModelParam._m0[13u].z, fma(_633, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _629)) + cbModelParam._m0[13u].w;
        float _1469 = fma(_637, cbModelParam._m0[14u].z, fma(_633, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _629)) + cbModelParam._m0[14u].w;
        float _1473 = fma(_637, cbModelParam._m0[15u].z, fma(_633, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _629)) + cbModelParam._m0[15u].w;
        float _1476 = fma(_575, cbModelParam._m0[13u].z, fma(_574, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _573));
        float _1479 = fma(_575, cbModelParam._m0[14u].z, fma(_574, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _573));
        float _1482 = fma(_575, cbModelParam._m0[15u].z, fma(_574, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _573));
        float _1510;
        if (_1476 > 0.0)
        {
            _1510 = abs((1.0 - _1465) / _1476);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1476 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1465 + 1.0) / _1476);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1510 = frontier_phi_19_17_ladder;
        }
        float _1685;
        if (_1479 > 0.0)
        {
            _1685 = abs((1.0 - _1469) / _1479);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1479 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1469 + 1.0) / _1479);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1685 = frontier_phi_28_24_ladder;
        }
        float _1981;
        if (_1482 > 0.0)
        {
            _1981 = abs((1.0 - _1473) / _1482);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1482 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1473 + 1.0) / _1482);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1981 = frontier_phi_40_35_ladder;
        }
        float _1983 = isnan(_1685) ? _1510 : (isnan(_1510) ? _1685 : min(_1510, _1685));
        float _1984 = isnan(_1981) ? _1983 : (isnan(_1983) ? _1981 : min(_1983, _1981));
        float _1988 = (_1984 * _1476) + _1465;
        float _1989 = (_1984 * _1479) + _1469;
        float _1990 = (_1984 * _1482) + _1473;
        float _1991 = _1984 * 9.9999997473787516355514526367188e-05;
        float _1993 = (-1.0) - _1991;
        float _1995 = _1991 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1990 > _1995) || ((_1990 < _1993) || ((_1989 > _1995) || ((_1989 < _1993) || ((_1988 < _1993) || (_1988 > _1995))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2135 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1990, cbModelParam._m0[9u].z, fma(_1989, cbModelParam._m0[9u].y, _1988 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1990, cbModelParam._m0[10u].z, fma(_1989, cbModelParam._m0[10u].y, _1988 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1990, cbModelParam._m0[11u].z, fma(_1989, cbModelParam._m0[11u].y, _1988 * cbModelParam._m0[11u].x))), _1417);
            frontier_phi_18_40_ladder = _2135.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2135.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2135.x * cbModelParam._m0[1u].y;
        }
        _1498 = frontier_phi_18_40_ladder_2;
        _1500 = frontier_phi_18_40_ladder_1;
        _1502 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1486 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_573, _574, _575), _1417);
        _1498 = _1486.x * cbModelParam._m0[1u].y;
        _1500 = _1486.y * cbModelParam._m0[1u].y;
        _1502 = _1486.z * cbModelParam._m0[1u].y;
    }
    float _1506 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _384);
    float _1507 = isnan(_1506) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1506 : min(cbModelParam._m0[25u].w, _1506));
    float _1600;
    float _1602;
    float _1604;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1564 = fma(_637, cbModelParam._m0[21u].z, fma(_633, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _629)) + cbModelParam._m0[21u].w;
        float _1568 = fma(_637, cbModelParam._m0[22u].z, fma(_633, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _629)) + cbModelParam._m0[22u].w;
        float _1572 = fma(_637, cbModelParam._m0[23u].z, fma(_633, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _629)) + cbModelParam._m0[23u].w;
        float _1575 = fma(_575, cbModelParam._m0[21u].z, fma(_574, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _573));
        float _1578 = fma(_575, cbModelParam._m0[22u].z, fma(_574, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _573));
        float _1581 = fma(_575, cbModelParam._m0[23u].z, fma(_574, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _573));
        float _1690;
        if (_1575 > 0.0)
        {
            _1690 = abs((1.0 - _1564) / _1575);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1575 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1564 + 1.0) / _1575);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1690 = frontier_phi_30_26_ladder;
        }
        float _2008;
        if (_1578 > 0.0)
        {
            _2008 = abs((1.0 - _1568) / _1578);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1578 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1568 + 1.0) / _1578);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2008 = frontier_phi_42_37_ladder;
        }
        float _2346;
        if (_1581 > 0.0)
        {
            _2346 = abs((1.0 - _1572) / _1581);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1581 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1572 + 1.0) / _1581);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2346 = frontier_phi_52_49_ladder;
        }
        float _2348 = isnan(_2008) ? _1690 : (isnan(_1690) ? _2008 : min(_1690, _2008));
        float _2349 = isnan(_2346) ? _2348 : (isnan(_2348) ? _2346 : min(_2348, _2346));
        float _2353 = (_2349 * _1575) + _1564;
        float _2354 = (_2349 * _1578) + _1568;
        float _2355 = (_2349 * _1581) + _1572;
        float _2356 = _2349 * 9.9999997473787516355514526367188e-05;
        float _2357 = (-1.0) - _2356;
        float _2359 = _2356 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2355 > _2359) || ((_2355 < _2357) || ((_2354 > _2359) || ((_2354 < _2357) || ((_2353 < _2357) || (_2353 > _2359))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2477 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2355, cbModelParam._m0[17u].z, fma(_2354, cbModelParam._m0[17u].y, _2353 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2355, cbModelParam._m0[18u].z, fma(_2354, cbModelParam._m0[18u].y, _2353 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2355, cbModelParam._m0[19u].z, fma(_2354, cbModelParam._m0[19u].y, _2353 * cbModelParam._m0[19u].x))), _1507);
            frontier_phi_27_52_ladder = _2477.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2477.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2477.x * cbModelParam._m0[1u].z;
        }
        _1600 = frontier_phi_27_52_ladder_2;
        _1602 = frontier_phi_27_52_ladder_1;
        _1604 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1584 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_573, _574, _575), _1507);
        _1600 = _1584.x * cbModelParam._m0[1u].z;
        _1602 = _1584.y * cbModelParam._m0[1u].z;
        _1604 = _1584.z * cbModelParam._m0[1u].z;
    }
    float _1617 = (((_600 * _550) + _601) * _565) * ((cbModelParam._m0[1u].w * (_1600 - _1498)) + _1498);
    float _1619 = (((_600 * _552) + _601) * _565) * ((cbModelParam._m0[1u].w * (_1602 - _1500)) + _1500);
    float _1621 = (((_600 * _553) + _601) * _565) * ((cbModelParam._m0[1u].w * (_1604 - _1502)) + _1502);
    float _1624 = fma(_1621, cbSceneParam._m0[89u].z, fma(_1619, cbSceneParam._m0[89u].y, _1617 * cbSceneParam._m0[89u].x));
    float _1627 = fma(_1621, cbSceneParam._m0[90u].z, fma(_1619, cbSceneParam._m0[90u].y, _1617 * cbSceneParam._m0[90u].x));
    float _1630 = fma(_1621, cbSceneParam._m0[91u].z, fma(_1619, cbSceneParam._m0[91u].y, _1617 * cbSceneParam._m0[91u].x));
    float _1664 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1668 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1672 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1676 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1677 = _1664 / _1676;
    float _1678 = _1668 / _1676;
    float _1679 = _1672 / _1676;
    float _1826;
    float _1827;
    float _1828;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1706 = ((uint(_1679 > cbSceneParam._m0[59u].y) + uint(_1679 > cbSceneParam._m0[59u].x)) + uint(_1679 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1707 = _1706 + 43u;
        uint _1715 = _1706 + 44u;
        uint _1723 = _1706 + 45u;
        uint _1731 = _1706 + 46u;
        float _1742 = fma(_1676, cbSceneParam._m0[_1707].w, fma(_1672, cbSceneParam._m0[_1707].z, fma(_1668, cbSceneParam._m0[_1707].y, _1664 * cbSceneParam._m0[_1707].x)));
        float _1746 = fma(_1676, cbSceneParam._m0[_1715].w, fma(_1672, cbSceneParam._m0[_1715].z, fma(_1668, cbSceneParam._m0[_1715].y, _1664 * cbSceneParam._m0[_1715].x)));
        float _1754 = fma(_1676, cbSceneParam._m0[_1731].w, fma(_1672, cbSceneParam._m0[_1731].z, fma(_1668, cbSceneParam._m0[_1731].y, _1664 * cbSceneParam._m0[_1731].x)));
        float _1759 = cbSceneParam._m0[33u].z * _1754;
        float _1761 = cbSceneParam._m0[33u].w * _1754;
        float _1764 = fma(_1676, cbSceneParam._m0[_1723].w, fma(_1672, cbSceneParam._m0[_1723].z, fma(_1668, cbSceneParam._m0[_1723].y, _1664 * cbSceneParam._m0[_1723].x))) / _1754;
        float _1812 = (cbSceneParam._m0[33u].x - sqrt(((_1678 * _1678) + (_1677 * _1677)) + (_1679 * _1679))) * cbSceneParam._m0[33u].y;
        float _4164 = isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0));
        float _1819 = (isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1759 + _1742) / _1754, (_1761 + _1746) / _1754), _1764), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1761 + _1742) / _1754, (_1746 - _1759) / _1754), _1764), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1742 - _1759) / _1754, (_1746 - _1761) / _1754), _1764), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1742 - _1761) / _1754, (_1759 + _1746) / _1754), _1764), 0.0)).x), vec4(0.25)));
        _1826 = 1.0 - (_1819 * cbSceneParam._m0[34u].x);
        _1827 = 1.0 - (_1819 * cbSceneParam._m0[34u].y);
        _1828 = 1.0 - (_1819 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1826 = 1.0;
        _1827 = 1.0;
        _1828 = 1.0;
    }
    float _1892;
    float _1894;
    float _1896;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1880 = fma(_1676, cbSceneParam._m0[63u].w, fma(_1672, cbSceneParam._m0[63u].z, fma(_1668, cbSceneParam._m0[63u].y, _1664 * cbSceneParam._m0[63u].x)));
        float _1881 = fma(_1676, cbSceneParam._m0[60u].w, fma(_1672, cbSceneParam._m0[60u].z, fma(_1668, cbSceneParam._m0[60u].y, _1664 * cbSceneParam._m0[60u].x))) / _1880;
        float _1882 = fma(_1676, cbSceneParam._m0[61u].w, fma(_1672, cbSceneParam._m0[61u].z, fma(_1668, cbSceneParam._m0[61u].y, _1664 * cbSceneParam._m0[61u].x))) / _1880;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1881 >= cbSceneParam._m0[64u].x) && (_1882 >= cbSceneParam._m0[64u].y)) && (_1881 <= cbSceneParam._m0[64u].z)) && (_1882 <= cbSceneParam._m0[64u].w))
        {
            float _2021 = fma(_1676, cbSceneParam._m0[62u].w, fma(_1672, cbSceneParam._m0[62u].z, fma(_1668, cbSceneParam._m0[62u].y, _1664 * cbSceneParam._m0[62u].x))) / _1880;
            float _2025 = isnan(cbSceneParam._m0[41u].w) ? _2021 : (isnan(_2021) ? cbSceneParam._m0[41u].w : max(_2021, cbSceneParam._m0[41u].w));
            float _2068 = (cbSceneParam._m0[33u].x - sqrt(((_1678 * _1678) + (_1677 * _1677)) + (_1679 * _1679))) * cbSceneParam._m0[33u].y;
            float _4180 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
            float _2075 = (isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1881, cbSceneParam._m0[33u].w + _1882), _2025), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1881, _1882 - cbSceneParam._m0[33u].z), _2025), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1881 - cbSceneParam._m0[33u].z, _1882 - cbSceneParam._m0[33u].w), _2025), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1881 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1882), _2025), 0.0)).x), vec4(0.25)));
            float _2079 = 1.0 - (_2075 * cbSceneParam._m0[34u].x);
            float _2080 = 1.0 - (_2075 * cbSceneParam._m0[34u].y);
            float _2081 = 1.0 - (_2075 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2080) ? _1827 : (isnan(_1827) ? _2080 : min(_1827, _2080));
            frontier_phi_39_38_ladder_1 = isnan(_2079) ? _1826 : (isnan(_1826) ? _2079 : min(_1826, _2079));
            frontier_phi_39_38_ladder_2 = isnan(_2081) ? _1828 : (isnan(_1828) ? _2081 : min(_1828, _2081));
        }
        else
        {
            frontier_phi_39_38_ladder = _1827;
            frontier_phi_39_38_ladder_1 = _1826;
            frontier_phi_39_38_ladder_2 = _1828;
        }
        _1892 = frontier_phi_39_38_ladder_1;
        _1894 = frontier_phi_39_38_ladder;
        _1896 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _1892 = _1826;
        _1894 = _1827;
        _1896 = _1828;
    }
    uvec4 _1901 = floatBitsToUint(cbInstanceData._m0[_524 + 5u]);
    uint _1903 = _1901.x * 14u;
    uint _1904 = _1903 + 13u;
    float _1911 = _565 + (-1.0);
    float _1916 = (cbLight._m0[_1904].x * _1911) + 1.0;
    float _1917 = (cbLight._m0[_1904].y * _1911) + 1.0;
    float _1918 = (cbLight._m0[_1904].z * _1911) + 1.0;
    float _1919 = (cbLight._m0[_1904].w * _1911) + 1.0;
    uint _1920 = _1903 + 5u;
    float _1926 = isnan(1.0) ? _1917 : (isnan(_1917) ? 1.0 : min(_1917, 1.0));
    uint _1930 = _1903 + 4u;
    float _1940 = isnan(1.0) ? _1916 : (isnan(_1916) ? 1.0 : min(_1916, 1.0));
    uint _1944 = _1903 | 1u;
    float _1955 = dot(vec3(cbLight._m0[_1903].xyz), vec3(_381, _382, _383));
    float _1958 = dot(vec3(cbLight._m0[_1944].xyz), vec3(_381, _382, _383));
    float _4216 = isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0));
    float _4227 = isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0));
    float _1963 = (isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0))) * 0.3183098733425140380859375;
    float _1965 = (isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0))) * 0.3183098733425140380859375;
    float _1972 = ((cbLight._m0[_1920].x * _1926) * _1965) + (((cbLight._m0[_1930].x * _1892) * _1940) * _1963);
    float _1973 = ((_1926 * cbLight._m0[_1920].y) * _1965) + (((cbLight._m0[_1930].y * _1894) * _1940) * _1963);
    float _1974 = ((_1926 * cbLight._m0[_1920].z) * _1965) + (((cbLight._m0[_1930].z * _1896) * _1940) * _1963);
    uvec4 _1978 = floatBitsToUint(cbLight._m0[_1903 + 12u]);
    bool _1980 = _1978.x == 0u;
    float _2082;
    float _2084;
    float _2086;
    if (_1980)
    {
        _2082 = _1972;
        _2084 = _1973;
        _2086 = _1974;
    }
    else
    {
        uint _2090 = _1903 + 6u;
        float _2106 = (dot(vec3(cbLight._m0[_1903 + 2u].xyz), vec3(_381, _382, _383)) * 0.5) + 0.5;
        float _2107 = _2106 * _2106;
        float _4238 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
        float _2108 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
        float _2109 = isnan(1.0) ? _1918 : (isnan(_1918) ? 1.0 : min(_1918, 1.0));
        _2082 = (((cbLight._m0[_2090].x * 0.3183098733425140380859375) * _2108) * _2109) + _1972;
        _2084 = (((cbLight._m0[_2090].y * 0.3183098733425140380859375) * _2108) * _2109) + _1973;
        _2086 = (((cbLight._m0[_2090].z * 0.3183098733425140380859375) * _2108) * _2109) + _1974;
    }
    bool _2089 = _1978.y == 0u;
    float _2144;
    float _2146;
    float _2148;
    if (_2089)
    {
        _2144 = _2082;
        _2146 = _2084;
        _2148 = _2086;
    }
    else
    {
        uint _2317 = _1903 + 7u;
        float _2333 = (dot(vec3(cbLight._m0[_1903 + 3u].xyz), vec3(_381, _382, _383)) * 0.5) + 0.5;
        float _2334 = _2333 * _2333;
        float _4254 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
        float _2335 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
        float _2336 = isnan(1.0) ? _1919 : (isnan(_1919) ? 1.0 : min(_1919, 1.0));
        _2144 = (((cbLight._m0[_2317].x * 0.3183098733425140380859375) * _2335) * _2336) + _2082;
        _2146 = (((cbLight._m0[_2317].y * 0.3183098733425140380859375) * _2335) * _2336) + _2084;
        _2148 = (((cbLight._m0[_2317].z * 0.3183098733425140380859375) * _2335) * _2336) + _2086;
    }
    uint _2151 = _1903 + 8u;
    float _2164 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1903].w)) * _384) * 0.949999988079071044921875);
    float _2165 = _2164 * _2164;
    float _2166 = cbLight._m0[_1903].x + _463;
    float _2167 = cbLight._m0[_1903].y + _464;
    float _2168 = cbLight._m0[_1903].z + _465;
    float _2172 = inversesqrt(dot(vec3(_2166, _2167, _2168), vec3(_2166, _2167, _2168)));
    float _2173 = _2172 * _2166;
    float _2174 = _2172 * _2167;
    float _2175 = _2172 * _2168;
    float _2176 = dot(vec3(_381, _382, _383), vec3(cbLight._m0[_1903].xyz));
    float _4270 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
    float _2179 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
    float _4281 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _2180 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
    float _2181 = dot(vec3(_381, _382, _383), vec3(_2173, _2174, _2175));
    float _4292 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
    float _2184 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
    float _2185 = dot(vec3(cbLight._m0[_1903].xyz), vec3(_2173, _2174, _2175));
    float _4303 = isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0));
    float _2189 = _2165 * _2165;
    float _2193 = ((_2184 * _2184) * (_2189 + (-1.0))) + 1.0;
    float _2201 = exp2(log2(1.0 - (isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0)))) * 5.0);
    float _2202 = 0.959999978542327880859375 - _547;
    float _2204 = 0.959999978542327880859375 - _548;
    float _2205 = 0.959999978542327880859375 - _549;
    float _2212 = 1.0 - _2165;
    float _2223 = (0.5 / (((_2180 * ((_2179 * _2212) + _2165)) + 9.9999999392252902907785028219223e-09) + (((_2180 * _2212) + _2165) * _2179))) * _2179;
    float _4314 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
    float _2225 = (isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0))) * (_2189 / ((_2193 * _2193) * 3.141590118408203125));
    uint _2239 = _1903 + 9u;
    float _2250 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1944].w)) * _384) * 0.949999988079071044921875);
    float _2251 = _2250 * _2250;
    float _2252 = cbLight._m0[_1944].x + _463;
    float _2253 = cbLight._m0[_1944].y + _464;
    float _2254 = cbLight._m0[_1944].z + _465;
    float _2258 = inversesqrt(dot(vec3(_2252, _2253, _2254), vec3(_2252, _2253, _2254)));
    float _2259 = _2258 * _2252;
    float _2260 = _2258 * _2253;
    float _2261 = _2258 * _2254;
    float _2262 = dot(vec3(_381, _382, _383), vec3(cbLight._m0[_1944].xyz));
    float _4325 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
    float _2265 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
    float _2266 = dot(vec3(_381, _382, _383), vec3(_2259, _2260, _2261));
    float _4336 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
    float _2269 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
    float _2270 = dot(vec3(cbLight._m0[_1944].xyz), vec3(_2259, _2260, _2261));
    float _4347 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
    float _2274 = _2251 * _2251;
    float _2278 = ((_2269 * _2269) * (_2274 + (-1.0))) + 1.0;
    float _2285 = exp2(log2(1.0 - (isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0)))) * 5.0);
    float _2292 = 1.0 - _2251;
    float _2302 = (0.5 / (((_2180 * ((_2265 * _2292) + _2251)) + 9.9999999392252902907785028219223e-09) + (((_2180 * _2292) + _2251) * _2265))) * _2265;
    float _4358 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
    float _2304 = (isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0))) * (_2274 / ((_2278 * _2278) * 3.141590118408203125));
    float _2314 = (((((_2285 * _2202) + _550) * cbLight._m0[_2239].x) * _2304) * _1926) + ((((cbLight._m0[_2151].x * _1892) * ((_2201 * _2202) + _550)) * _2225) * _1940);
    float _2315 = (((((_2285 * _2204) + _552) * cbLight._m0[_2239].y) * _2304) * _1926) + ((((cbLight._m0[_2151].y * _1894) * ((_2201 * _2204) + _552)) * _2225) * _1940);
    float _2316 = (((((_2285 * _2205) + _553) * cbLight._m0[_2239].z) * _2304) * _1926) + ((((cbLight._m0[_2151].z * _1896) * ((_2201 * _2205) + _553)) * _2225) * _1940);
    float _2372;
    float _2374;
    float _2376;
    if (_1980)
    {
        _2372 = _2314;
        _2374 = _2315;
        _2376 = _2316;
    }
    else
    {
        uint _2378 = _1903 + 2u;
        uint _2382 = _1903 + 10u;
        float _2396 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2378].w)) * _384) * 0.949999988079071044921875);
        float _2397 = _2396 * _2396;
        float _2398 = cbLight._m0[_2378].x + _463;
        float _2399 = cbLight._m0[_2378].y + _464;
        float _2400 = cbLight._m0[_2378].z + _465;
        float _2404 = inversesqrt(dot(vec3(_2398, _2399, _2400), vec3(_2398, _2399, _2400)));
        float _2405 = _2404 * _2398;
        float _2406 = _2404 * _2399;
        float _2407 = _2404 * _2400;
        float _2408 = dot(vec3(_381, _382, _383), vec3(cbLight._m0[_2378].xyz));
        float _4369 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
        float _2411 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
        float _2412 = dot(vec3(_381, _382, _383), vec3(_2405, _2406, _2407));
        float _4380 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
        float _2415 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
        float _2416 = dot(vec3(cbLight._m0[_2378].xyz), vec3(_2405, _2406, _2407));
        float _4391 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
        float _2420 = _2397 * _2397;
        float _2424 = ((_2415 * _2415) * (_2420 + (-1.0))) + 1.0;
        float _2431 = exp2(log2(1.0 - (isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0)))) * 5.0);
        float _2438 = 1.0 - _2397;
        float _2448 = (0.5 / (((_2180 * ((_2411 * _2438) + _2397)) + 9.9999999392252902907785028219223e-09) + (((_2180 * _2438) + _2397) * _2411))) * _2411;
        float _4402 = isnan(0.0) ? _2448 : (isnan(_2448) ? 0.0 : max(_2448, 0.0));
        float _2450 = (isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0))) * (_2420 / ((_2424 * _2424) * 3.141590118408203125));
        float _2451 = isnan(1.0) ? _1918 : (isnan(_1918) ? 1.0 : min(_1918, 1.0));
        _2372 = (((((_2431 * _2202) + _550) * cbLight._m0[_2382].x) * _2450) * _2451) + _2314;
        _2374 = (((((_2431 * _2204) + _552) * cbLight._m0[_2382].y) * _2450) * _2451) + _2315;
        _2376 = (((((_2431 * _2205) + _553) * cbLight._m0[_2382].z) * _2450) * _2451) + _2316;
    }
    float _2482;
    float _2484;
    float _2486;
    if (_2089)
    {
        _2482 = _2372;
        _2484 = _2374;
        _2486 = _2376;
    }
    else
    {
        uint _2493 = _1903 + 3u;
        uint _2497 = _1903 + 11u;
        float _2511 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2493].w)) * _384) * 0.949999988079071044921875);
        float _2512 = _2511 * _2511;
        float _2513 = cbLight._m0[_2493].x + _463;
        float _2514 = cbLight._m0[_2493].y + _464;
        float _2515 = cbLight._m0[_2493].z + _465;
        float _2519 = inversesqrt(dot(vec3(_2513, _2514, _2515), vec3(_2513, _2514, _2515)));
        float _2520 = _2519 * _2513;
        float _2521 = _2519 * _2514;
        float _2522 = _2519 * _2515;
        float _2523 = dot(vec3(_381, _382, _383), vec3(cbLight._m0[_2493].xyz));
        float _4418 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
        float _2526 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
        float _2527 = dot(vec3(_381, _382, _383), vec3(_2520, _2521, _2522));
        float _4429 = isnan(0.0) ? _2527 : (isnan(_2527) ? 0.0 : max(_2527, 0.0));
        float _2530 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
        float _2531 = dot(vec3(cbLight._m0[_2493].xyz), vec3(_2520, _2521, _2522));
        float _4440 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0));
        float _2535 = _2512 * _2512;
        float _2539 = ((_2530 * _2530) * (_2535 + (-1.0))) + 1.0;
        float _2546 = exp2(log2(1.0 - (isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0)))) * 5.0);
        float _2553 = 1.0 - _2512;
        float _2563 = (0.5 / (((_2180 * ((_2526 * _2553) + _2512)) + 9.9999999392252902907785028219223e-09) + (((_2180 * _2553) + _2512) * _2526))) * _2526;
        float _4451 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0));
        float _2565 = (isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0))) * (_2535 / ((_2539 * _2539) * 3.141590118408203125));
        float _2566 = isnan(1.0) ? _1919 : (isnan(_1919) ? 1.0 : min(_1919, 1.0));
        _2482 = (((((_2546 * _2202) + _550) * cbLight._m0[_2497].x) * _2565) * _2566) + _2372;
        _2484 = (((((_2546 * _2204) + _552) * cbLight._m0[_2497].y) * _2565) * _2566) + _2374;
        _2486 = (((((_2546 * _2205) + _553) * cbLight._m0[_2497].z) * _2565) * _2566) + _2376;
    }
    float _2631;
    float _2633;
    float _2635;
    float _2637;
    float _2639;
    float _2641;
    if (_1901.y == 0u)
    {
        uvec4 _2587 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2588 = _2587.x;
        uint _2599 = uint((float(_2587.y) * floor(float(uint(cbSceneParam._m0[85u].y * _485) / _2588))) + floor(float(uint(cbSceneParam._m0[85u].x * _484) / _2588)));
        float _2609 = (log2(_1679 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2610 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0));
        uint _2613 = uint(isnan(14.0) ? _2610 : (isnan(_2610) ? 14.0 : min(_2610, 14.0)));
        uvec4 _2618 = texelFetch(g_lightClusterGridBuffer, int(((_2613 << 2u) + (_2599 << 6u)) >> 2u));
        uint _2619 = _2618.x;
        uint _2620 = _2587.z;
        float _2698;
        float _2700;
        float _2702;
        float _2704;
        float _2706;
        float _2708;
        if (((((1u << ((_2620 >> 4u) & 15u)) + 4294967295u) & _2619) == 0u) || ((_2620 & 240u) == 0u))
        {
            _2698 = 0.0;
            _2700 = 0.0;
            _2702 = 0.0;
            _2704 = 0.0;
            _2706 = 0.0;
            _2708 = 0.0;
        }
        else
        {
            float _2699;
            float _2701;
            float _2703;
            float _2705;
            float _2707;
            float _2709;
            float _2850 = 0.0;
            float _2851 = 0.0;
            float _2852 = 0.0;
            float _2853 = 0.0;
            float _2854 = 0.0;
            float _2855 = 0.0;
            uint _2856 = 0u;
            uint _2865;
            bool _2866;
            for (;;)
            {
                _2865 = texelFetch(g_lightClassification, int((((_2613 << 5u) + (_2599 << 9u)) + (_2856 << 2u)) >> 2u)).x;
                _2866 = _2865 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_2866)
                {
                    frontier_phi_73_pred = _2855;
                    frontier_phi_73_pred_1 = _2854;
                    frontier_phi_73_pred_2 = _2853;
                    frontier_phi_73_pred_3 = _2852;
                    frontier_phi_73_pred_4 = _2851;
                    frontier_phi_73_pred_5 = _2850;
                }
                else
                {
                    float _2995;
                    float _2996;
                    float _2997;
                    float _2998;
                    float _2999;
                    float _3000;
                    uint _3001;
                    _2995 = _2850;
                    _2996 = _2851;
                    _2997 = _2852;
                    _2998 = _2853;
                    _2999 = _2854;
                    _3000 = _2855;
                    _3001 = _2865;
                    float _2922;
                    float _2923;
                    float _2924;
                    float _2925;
                    float _2926;
                    float _2927;
                    for (;;)
                    {
                        uint _3005 = uint(findLSB(_3001)) + (_2856 << 5u);
                        uint _3002 = (_3001 + 4294967295u) & _3001;
                        uint _3007 = _3005 * 48u;
                        vec4 _3021 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3007)).x, texelFetch(g_PointLightRenderingBuffer, int(_3007 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3007 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3007 + 3u)).x));
                        uint _3027 = (_3005 * 48u) + 4u;
                        vec4 _3040 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3027)).x, texelFetch(g_PointLightRenderingBuffer, int(_3027 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3027 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3027 + 3u)).x));
                        uint _3046 = (_3005 * 48u) + 8u;
                        vec3 _3057 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3046)).x, texelFetch(g_PointLightRenderingBuffer, int(_3046 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3046 + 2u)).x));
                        float _3061 = _3021.x - _1677;
                        float _3062 = _3021.y - _1678;
                        float _3063 = _3021.z - _1679;
                        float _3064 = dot(vec3(_3061, _3062, _3063), vec3(_3061, _3062, _3063));
                        float _3067 = inversesqrt(_3064);
                        float _3068 = _3067 * _3061;
                        float _3069 = _3067 * _3062;
                        float _3070 = _3067 * _3063;
                        float _3071 = dot(vec3(_505, _508, _511), vec3(_3068, _3069, _3070));
                        float _3076 = 1.0 - (_3064 * _3021.w);
                        float _4477 = isnan(0.0) ? _3076 : (isnan(_3076) ? 0.0 : max(_3076, 0.0));
                        float _3077 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
                        float _3078 = sqrt(_3064) * _3040.w;
                        float _3081 = 1.39999997615814208984375 / (_3078 + 1.39999997615814208984375);
                        float _3082 = _3081 * _3081;
                        float _3085 = ((1.0 - _3082) * _3071) + _3082;
                        float _3088 = _3078 * _3078;
                        float _3092 = ((isnan(0.0) ? _3085 : (isnan(_3085) ? 0.0 : max(_3085, 0.0))) * _3077) / ((_3088 * 0.699999988079071044921875) + 1.0);
                        float _3096 = (-0.0) - _1677;
                        float _3097 = (-0.0) - _1678;
                        float _3098 = (-0.0) - _1679;
                        float _3102 = inversesqrt(dot(vec3(_3096, _3097, _3098), vec3(_3096, _3097, _3098)));
                        float _3103 = _3102 * _3096;
                        float _3104 = _3102 * _3097;
                        float _3105 = _3102 * _3098;
                        float _3112 = exp2(log2(1.0 / ((_3088 * 3.5) + 5.0)) * 0.25);
                        float _3113 = 1.0 - _581;
                        float _3120 = sqrt(1.0 - ((1.0 - (_3113 * _3113)) * (1.0 - (_3112 * _3112))));
                        float _3121 = _3120 * _3120;
                        float _3122 = _3121 * _3121;
                        float _3123 = _3103 + _3068;
                        float _3124 = _3104 + _3069;
                        float _3125 = _3105 + _3070;
                        float _3129 = inversesqrt(dot(vec3(_3123, _3124, _3125), vec3(_3123, _3124, _3125)));
                        float _3133 = dot(vec3(_505, _508, _511), vec3(_3103, _3104, _3105));
                        float _4493 = isnan(0.0) ? _3133 : (isnan(_3133) ? 0.0 : max(_3133, 0.0));
                        float _3136 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
                        float _3137 = dot(vec3(_505, _508, _511), vec3(_3129 * _3123, _3129 * _3124, _3129 * _3125));
                        float _4504 = isnan(0.0) ? _3137 : (isnan(_3137) ? 0.0 : max(_3137, 0.0));
                        float _3140 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
                        float _3144 = ((_3140 * _3140) * (_3122 + (-1.0))) + 1.0;
                        float _3145 = _3081 * _3121;
                        float _3146 = _3145 * _3145;
                        float _3149 = ((1.0 - _3146) * _3071) + _3146;
                        float _4515 = isnan(0.0) ? _3149 : (isnan(_3149) ? 0.0 : max(_3149, 0.0));
                        float _3150 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
                        float _3151 = 1.0 - _3121;
                        float _3161 = (0.5 / (((_3150 * ((_3136 * _3151) + _3121)) + 9.9999999392252902907785028219223e-09) + (((_3150 * _3151) + _3121) * _3136))) * _3150;
                        float _4526 = isnan(0.0) ? _3161 : (isnan(_3161) ? 0.0 : max(_3161, 0.0));
                        float _3172 = (((_3122 * 3.1415927410125732421875) * (isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0)))) / ((_3144 * _3144) * ((_3088 * 2.1991131305694580078125) + 3.141590118408203125))) * _3077;
                        _2925 = (_3092 * _3040.x) + _2998;
                        _2926 = (_3092 * _3040.y) + _2999;
                        _2927 = (_3092 * _3040.z) + _3000;
                        _2922 = (_3172 * _3057.x) + _2995;
                        _2923 = (_3172 * _3057.y) + _2996;
                        _2924 = (_3172 * _3057.z) + _2997;
                        if (_3002 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2995 = _2922;
                            _2996 = _2923;
                            _2997 = _2924;
                            _2998 = _2925;
                            _2999 = _2926;
                            _3000 = _2927;
                            _3001 = _3002;
                        }
                    }
                    frontier_phi_73_pred = _2927;
                    frontier_phi_73_pred_1 = _2926;
                    frontier_phi_73_pred_2 = _2925;
                    frontier_phi_73_pred_3 = _2924;
                    frontier_phi_73_pred_4 = _2923;
                    frontier_phi_73_pred_5 = _2922;
                }
                _2709 = frontier_phi_73_pred;
                _2707 = frontier_phi_73_pred_1;
                _2705 = frontier_phi_73_pred_2;
                _2703 = frontier_phi_73_pred_3;
                _2701 = frontier_phi_73_pred_4;
                _2699 = frontier_phi_73_pred_5;
                uint _2857 = _2856 + 1u;
                if (_2857 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2850 = _2699;
                    _2851 = _2701;
                    _2852 = _2703;
                    _2853 = _2705;
                    _2854 = _2707;
                    _2855 = _2709;
                    _2856 = _2857;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2698 = _2699;
            _2700 = _2701;
            _2702 = _2703;
            _2704 = _2705;
            _2706 = _2707;
            _2708 = _2709;
        }
        uvec4 _2712 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2713 = _2712.z;
        uint _2715 = (_2713 >> 8u) & 15u;
        float _2818;
        float _2820;
        float _2822;
        float _2824;
        float _2826;
        float _2828;
        if (((4294967295u << _2715) & _2619) == 0u)
        {
            _2818 = _2698;
            _2820 = _2700;
            _2822 = _2702;
            _2824 = _2704;
            _2826 = _2706;
            _2828 = _2708;
        }
        else
        {
            float _2843 = inversesqrt(dot(vec3(_1677, _1678, _1679), vec3(_1677, _1678, _1679)));
            float _2844 = _2843 * _1677;
            float _2845 = _2843 * _1678;
            float _2846 = _2843 * _1679;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2715 < ((_2713 >> 12u) & 15u))
            {
                float _2819;
                float _2821;
                float _2823;
                float _2825;
                float _2827;
                float _2829;
                float _2978 = _2698;
                float _2979 = _2700;
                float _2980 = _2702;
                float _2981 = _2704;
                float _2982 = _2706;
                float _2983 = _2708;
                uint _2984 = _2715;
                uint _2993;
                bool _2994;
                for (;;)
                {
                    _2993 = texelFetch(g_lightClassification, int((((_2613 << 5u) + (_2599 << 9u)) + (_2984 << 2u)) >> 2u)).x;
                    _2994 = _2993 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_2994)
                    {
                        frontier_phi_84_pred = _2982;
                        frontier_phi_84_pred_1 = _2981;
                        frontier_phi_84_pred_2 = _2980;
                        frontier_phi_84_pred_3 = _2979;
                        frontier_phi_84_pred_4 = _2978;
                        frontier_phi_84_pred_5 = _2983;
                    }
                    else
                    {
                        float _3186;
                        float _3187;
                        float _3188;
                        float _3189;
                        float _3190;
                        float _3191;
                        float _3482;
                        float _3483;
                        float _3484;
                        float _3485;
                        float _3486;
                        float _3487;
                        float _3199 = _2978;
                        float _3200 = _2979;
                        float _3201 = _2980;
                        float _3202 = _2981;
                        float _3203 = _2982;
                        float _3204 = _2983;
                        uint _3205 = _2993;
                        uint _3206;
                        vec4 _3231;
                        float _3232;
                        vec4 _3247;
                        vec3 _3259;
                        vec4 _3275;
                        vec4 _3291;
                        float _3338;
                        bool _3339;
                        for (;;)
                        {
                            uint _3216 = ((_2984 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3205));
                            _3206 = (_3205 + 4294967295u) & _3205;
                            uint _3218 = _3216 * 40u;
                            _3231 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3218)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3218 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3218 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3218 + 3u)).x));
                            _3232 = _3231.w;
                            uint _3234 = (_3216 * 40u) + 4u;
                            _3247 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3234)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 3u)).x));
                            uint _3249 = (_3216 * 40u) + 8u;
                            _3259 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3249)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 2u)).x));
                            uint _3262 = (_3216 * 40u) + 16u;
                            _3275 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3262)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3262 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3262 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3262 + 3u)).x));
                            uint _3278 = (_3216 * 40u) + 20u;
                            _3291 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3278)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 3u)).x));
                            uint _3294 = (_3216 * 40u) + 24u;
                            vec4 _3307 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3294)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 3u)).x));
                            uint _3313 = (_3216 * 40u) + 28u;
                            vec4 _3326 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3313)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 3u)).x));
                            _3338 = fma(_1679, _3326.z, fma(_1678, _3326.y, _3326.x * _1677)) + _3326.w;
                            _3339 = !((fma(_1679, _3307.z, fma(_1678, _3307.y, _3307.x * _1677)) + _3307.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3339)
                            {
                                float _3366 = _3231.x - _1677;
                                float _3367 = _3231.y - _1678;
                                float _3368 = _3231.z - _1679;
                                float _3369 = dot(vec3(_3366, _3367, _3368), vec3(_3366, _3367, _3368));
                                float _3372 = inversesqrt(_3369);
                                float _3373 = _3372 * _3366;
                                float _3374 = _3372 * _3367;
                                float _3375 = _3372 * _3368;
                                float _3379 = 1.0 - (_3369 / (_3232 * _3232));
                                float _4537 = isnan(0.0) ? _3379 : (isnan(_3379) ? 0.0 : max(_3379, 0.0));
                                float _3380 = isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0));
                                float _3384 = sqrt(_3369) * _3247.w;
                                float _3386 = 1.39999997615814208984375 / (_3384 + 1.39999997615814208984375);
                                float _3387 = _3386 * _3386;
                                float _3390 = ((1.0 - _3387) * dot(vec3(_3373, _3374, _3375), vec3(_505, _508, _511))) + _3387;
                                float _3393 = _3384 * _3384;
                                float _3397 = (fma(_1679, _3275.z, fma(_1678, _3275.y, _3275.x * _1677)) + _3275.w) / _3338;
                                float _3398 = (fma(_1679, _3291.z, fma(_1678, _3291.y, _3291.x * _1677)) + _3291.w) / _3338;
                                float _3402 = 1.0 - dot(vec2(_3397, _3398), vec2(_3397, _3398));
                                float _4553 = isnan(0.0) ? _3402 : (isnan(_3402) ? 0.0 : max(_3402, 0.0));
                                float _3403 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
                                float _3404 = _3403 * (((isnan(0.0) ? _3390 : (isnan(_3390) ? 0.0 : max(_3390, 0.0))) * _3380) / ((_3393 * 0.699999988079071044921875) + 1.0));
                                float _3416 = exp2(log2(1.0 / ((_3393 * 3.5) + 5.0)) * 0.25);
                                float _3417 = 1.0 - _581;
                                float _3424 = sqrt(1.0 - ((1.0 - (_3417 * _3417)) * (1.0 - (_3416 * _3416))));
                                float _3425 = _3424 * _3424;
                                float _3426 = _3425 * _3425;
                                float _3427 = _3373 - _2844;
                                float _3428 = _3374 - _2845;
                                float _3429 = _3375 - _2846;
                                float _3433 = inversesqrt(dot(vec3(_3427, _3428, _3429), vec3(_3427, _3428, _3429)));
                                float _3437 = dot(vec3(_505, _508, _511), vec3((-0.0) - _2844, (-0.0) - _2845, (-0.0) - _2846));
                                float _4564 = isnan(0.0) ? _3437 : (isnan(_3437) ? 0.0 : max(_3437, 0.0));
                                float _3440 = isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0));
                                float _3441 = dot(vec3(_505, _508, _511), vec3(_3433 * _3427, _3433 * _3428, _3433 * _3429));
                                float _4575 = isnan(0.0) ? _3441 : (isnan(_3441) ? 0.0 : max(_3441, 0.0));
                                float _3444 = isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0));
                                float _3448 = ((_3444 * _3444) * (_3426 + (-1.0))) + 1.0;
                                float _3449 = _3386 * _3425;
                                float _3450 = _3449 * _3449;
                                float _3456 = ((1.0 - _3450) * dot(vec3(_505, _508, _511), vec3(_3373, _3374, _3375))) + _3450;
                                float _4586 = isnan(0.0) ? _3456 : (isnan(_3456) ? 0.0 : max(_3456, 0.0));
                                float _3457 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
                                float _3458 = 1.0 - _3425;
                                float _3468 = (0.5 / (((_3457 * ((_3440 * _3458) + _3425)) + 9.9999999392252902907785028219223e-09) + (((_3457 * _3458) + _3425) * _3440))) * _3457;
                                float _4597 = isnan(0.0) ? _3468 : (isnan(_3468) ? 0.0 : max(_3468, 0.0));
                                float _3478 = (_3403 * _3380) * (((_3426 * 3.1415927410125732421875) * (isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0)))) / ((_3448 * _3448) * ((_3393 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3404 * _3247.y;
                                frontier_phi_90_pred_1 = _3404 * _3247.x;
                                frontier_phi_90_pred_2 = _3478 * _3259.z;
                                frontier_phi_90_pred_3 = _3478 * _3259.y;
                                frontier_phi_90_pred_4 = _3478 * _3259.x;
                                frontier_phi_90_pred_5 = _3404 * _3247.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3486 = frontier_phi_90_pred;
                            _3485 = frontier_phi_90_pred_1;
                            _3484 = frontier_phi_90_pred_2;
                            _3483 = frontier_phi_90_pred_3;
                            _3482 = frontier_phi_90_pred_4;
                            _3487 = frontier_phi_90_pred_5;
                            _3189 = _3485 + _3202;
                            _3190 = _3486 + _3203;
                            _3191 = _3487 + _3204;
                            _3186 = _3482 + _3199;
                            _3187 = _3483 + _3200;
                            _3188 = _3484 + _3201;
                            if (_3206 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3199 = _3186;
                                _3200 = _3187;
                                _3201 = _3188;
                                _3202 = _3189;
                                _3203 = _3190;
                                _3204 = _3191;
                                _3205 = _3206;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3190;
                        frontier_phi_84_pred_1 = _3189;
                        frontier_phi_84_pred_2 = _3188;
                        frontier_phi_84_pred_3 = _3187;
                        frontier_phi_84_pred_4 = _3186;
                        frontier_phi_84_pred_5 = _3191;
                    }
                    _2827 = frontier_phi_84_pred;
                    _2825 = frontier_phi_84_pred_1;
                    _2823 = frontier_phi_84_pred_2;
                    _2821 = frontier_phi_84_pred_3;
                    _2819 = frontier_phi_84_pred_4;
                    _2829 = frontier_phi_84_pred_5;
                    uint _2985 = _2984 + 1u;
                    if (_2985 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2978 = _2819;
                        _2979 = _2821;
                        _2980 = _2823;
                        _2981 = _2825;
                        _2982 = _2827;
                        _2983 = _2829;
                        _2984 = _2985;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2829;
                frontier_phi_65_66_ladder_1 = _2825;
                frontier_phi_65_66_ladder_2 = _2827;
                frontier_phi_65_66_ladder_3 = _2821;
                frontier_phi_65_66_ladder_4 = _2819;
                frontier_phi_65_66_ladder_5 = _2823;
            }
            else
            {
                frontier_phi_65_66_ladder = _2708;
                frontier_phi_65_66_ladder_1 = _2704;
                frontier_phi_65_66_ladder_2 = _2706;
                frontier_phi_65_66_ladder_3 = _2700;
                frontier_phi_65_66_ladder_4 = _2698;
                frontier_phi_65_66_ladder_5 = _2702;
            }
            _2818 = frontier_phi_65_66_ladder_4;
            _2820 = frontier_phi_65_66_ladder_3;
            _2822 = frontier_phi_65_66_ladder_5;
            _2824 = frontier_phi_65_66_ladder_1;
            _2826 = frontier_phi_65_66_ladder_2;
            _2828 = frontier_phi_65_66_ladder;
        }
        float _2833 = isnan(1.0) ? _565 : (isnan(_565) ? 1.0 : min(_565, 1.0));
        _2631 = (_2833 * _2824) + _2144;
        _2633 = (_2833 * _2826) + _2146;
        _2635 = (_2833 * _2828) + _2148;
        _2637 = ((_2818 * _550) * _2833) + _2482;
        _2639 = ((_2820 * _552) * _2833) + _2484;
        _2641 = ((_2822 * _553) * _2833) + _2486;
    }
    else
    {
        _2631 = _2144;
        _2633 = _2146;
        _2635 = _2148;
        _2637 = _2482;
        _2639 = _2484;
        _2641 = _2486;
    }
    float _4613 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _4624 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _4635 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _2658 = ((isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0))) * (_2631 + ((isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0))) * _565))) + ((_2637 + ((isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0))) * _1406)) * cbPerFrame._m0[3u].x);
    float _2659 = ((isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0))) * (_2633 + ((isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0))) * _565))) + ((_2639 + ((isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0))) * _1406)) * cbPerFrame._m0[3u].x);
    float _2660 = ((isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0))) * (_2635 + ((isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0))) * _565))) + ((_2641 + ((isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0))) * _1406)) * cbPerFrame._m0[3u].x);
    uint _2661 = _524 + 6u;
    float _2669 = _484 / cbSceneParam._m0[86u].x;
    float _2670 = _485 / cbSceneParam._m0[86u].y;
    vec4 _2684 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2669, _2670, (log2((isnan(cbSceneParam._m0[77u].w) ? _404 : (isnan(_404) ? cbSceneParam._m0[77u].w : min(_404, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2686 = _2684.x;
    float _2687 = _2684.y;
    float _2688 = _2684.z;
    float _2689 = _2684.w;
    float _2760;
    float _2762;
    float _2764;
    float _2766;
    if (_404 > cbSceneParam._m0[78u].w)
    {
        float _2723 = isnan(_404) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _404 : min(cbSceneParam._m0[80u].w, _404));
        float _2724 = _2723 / _404;
        float _2735 = _2724 * _456;
        float _2736 = _457 * _2724;
        float _2737 = (-0.0) - _2736;
        float _2738 = _2724 * _458;
        float _2740 = (cbSceneParam._m0[77u].w * _2737) / _2723;
        float _2741 = _2740 + cbSceneParam._m0[79u].w;
        float _2742 = cbSceneParam._m0[79u].w - _2736;
        float _2748 = sqrt(((_2735 * _2735) + (_2736 * _2736)) + (_2738 * _2738));
        float _2751 = (1.0 - (cbSceneParam._m0[77u].w / _2723)) * _2748;
        float _2756 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2758 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2935;
        if (abs((_2737 - _2740) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2935 = ((((_2741 > 0.0) ? exp2(_2756 * _2741) : (2.0 - exp2(_2758 * _2741))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2751;
        }
        else
        {
            float _2879 = 1.0 / cbSceneParam._m0[80u].x;
            float _2880 = isnan(_2742) ? _2741 : (isnan(_2741) ? _2742 : max(_2741, _2742));
            float _2881 = isnan(_2742) ? _2741 : (isnan(_2741) ? _2742 : min(_2741, _2742));
            float _2890 = isnan(0.0) ? _2880 : (isnan(_2880) ? 0.0 : min(_2880, 0.0));
            float _2891 = isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : min(_2881, 0.0));
            _2935 = ((abs(_2748 / _2737) * cbSceneParam._m0[80u].y) * ((((_2890 - _2891) * 2.0) - ((exp2(_2756 * (isnan(0.0) ? _2880 : (isnan(_2880) ? 0.0 : max(_2880, 0.0)))) - exp2(_2756 * (isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : max(_2881, 0.0))))) * _2879)) - ((exp2(_2758 * _2890) - exp2(_2758 * _2891)) * _2879))) + (_2751 * cbSceneParam._m0[80u].z);
        }
        vec4 _2937 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2669, _2670, 1.0), 0.0);
        float _2946 = exp2((_2935 * (-1.44269502162933349609375)) * (1.0 - _2937.w));
        float _2947 = log2(_2946);
        float _2963 = log2(_2689);
        _2760 = (exp2(_2963 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2947 * cbSceneParam._m0[78u].x)) * _2937.x) / cbSceneParam._m0[78u].x)) + _2686;
        _2762 = (exp2(_2963 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2947 * cbSceneParam._m0[78u].y)) * _2937.y) / cbSceneParam._m0[78u].y)) + _2687;
        _2764 = (exp2(_2963 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2947 * cbSceneParam._m0[78u].z)) * _2937.z) / cbSceneParam._m0[78u].z)) + _2688;
        _2766 = _2946 * _2689;
    }
    else
    {
        _2760 = _2686;
        _2762 = _2687;
        _2764 = _2688;
        _2766 = _2689;
    }
    bool _2973;
    vec4 _2776;
    vec4 _2798;
    float _2800;
    float _2804;
    float _2805;
    float _2806;
    float _2807;
    bool _2817;
    for (;;)
    {
        _2776 = cbMatDynParam._m0[0u];
        float _2778 = roundEven(_2776.y);
        bool _2779 = _2778 == 3.0;
        float _2780 = log2(_2766);
        float _2787 = exp2(_2780 * cbSceneParam._m0[78u].x) * _2658;
        float _2788 = exp2(_2780 * cbSceneParam._m0[78u].y) * _2659;
        float _2789 = exp2(_2780 * cbSceneParam._m0[78u].z) * _2660;
        float _2796 = _472 + (-0.5);
        _2798 = cbMtdParam._m0[1u];
        _2800 = _2798.y * _2796;
        float _2803 = (_2778 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2804 = _2803 * (_2779 ? _2787 : (_2787 + (cbSceneParam._m0[72u].w * _2760)));
        _2805 = _2803 * (_2779 ? _2788 : (_2788 + (cbSceneParam._m0[72u].w * _2762)));
        _2806 = _2803 * (_2779 ? _2789 : (_2789 + (cbSceneParam._m0[72u].w * _2764)));
        _2807 = _2796 * 0.999000012874603271484375;
        _2817 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2817)
        {
            if ((cbInstanceData._m0[_524 + 7u].x + _2807) < 0.5)
            {
                _2973 = true;
                break;
            }
        }
        uint _2914 = _526 + uint(_2776.w);
        if ((cbInstanceData._m0[_2914].w < 1.0) && ((cbInstanceData._m0[_2914].w + _2807) < 0.5))
        {
            _2973 = true;
            break;
        }
        if ((_2800 + _254) < _2798.x)
        {
            _2973 = true;
            break;
        }
        _2973 = false;
        break;
    }
    float _3177;
    if (_2973)
    {
        discard_state = true;
        _3177 = 0.0;
    }
    else
    {
        _3177 = cbInstanceData._m0[_2661].w;
    }
    SV_Target.x = _2804;
    SV_Target.y = _2805;
    SV_Target.z = _2806;
    SV_Target.w = _3177;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2661].w;
    discard_exit();
}


