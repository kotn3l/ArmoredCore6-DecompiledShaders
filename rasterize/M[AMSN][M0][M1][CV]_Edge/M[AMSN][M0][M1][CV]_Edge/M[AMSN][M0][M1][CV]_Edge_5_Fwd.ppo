#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _901;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _190 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _197 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _198 = _197 * NORMAL.x;
    float _199 = _197 * NORMAL.y;
    float _200 = _197 * NORMAL.z;
    float _204 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _212;
    float _213;
    float _214;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _212 = (-0.0) - _198;
        _213 = (-0.0) - _199;
        _214 = (-0.0) - _200;
    }
    else
    {
        _212 = _198;
        _213 = _199;
        _214 = _200;
    }
    vec4 _240 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _246 = _240.x * cbMtdParam._m0[9u].x;
    float _247 = _240.y * cbMtdParam._m0[9u].y;
    float _248 = _240.z * cbMtdParam._m0[9u].z;
    vec4 _260 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _264 = _260.z;
    float _268 = (_260.x * 2.0) + (-1.0);
    float _270 = (_260.y * 2.0) + (-1.0);
    float _271 = dot(vec2(_268, _270), vec2(_268, _270));
    float _3214 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    float _277 = sqrt(1.0 - (isnan(1.0) ? _3214 : (isnan(_3214) ? 1.0 : min(_3214, 1.0))));
    float _306 = (TEXCOORD_3.x - ((cbMtdParam._m0[12u].y * (1.0 - TEXCOORD_3.x)) * ((texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w)).x * cbMtdParam._m0[12u].y) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[12u].z + 1.0);
    float _3225 = isnan(0.0) ? _306 : (isnan(_306) ? 0.0 : max(_306, 0.0));
    float _307 = isnan(1.0) ? _3225 : (isnan(_3225) ? 1.0 : min(_3225, 1.0));
    float _314 = (_307 * (cbMtdParam._m0[10u].x - _246)) + _246;
    float _315 = (_307 * (cbMtdParam._m0[10u].y - _247)) + _247;
    float _316 = (_307 * (cbMtdParam._m0[10u].z - _248)) + _248;
    vec4 _328 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _335 = (_328.x * 2.0) + (-1.0);
    float _336 = (_328.y * 2.0) + (-1.0);
    float _337 = dot(vec2(_335, _336), vec2(_335, _336));
    float _3236 = isnan(0.0) ? _337 : (isnan(_337) ? 0.0 : max(_337, 0.0));
    float _345 = (_307 * (_328.z - _264)) + _264;
    float _357 = (((_335 - _268) + (cbMtdParam._m0[12u].w * _268)) * _307) + _268;
    float _358 = (((_336 - _270) + (cbMtdParam._m0[12u].w * _270)) * _307) + _270;
    float _359 = (_307 * (sqrt(1.0 - (isnan(1.0) ? _3236 : (isnan(_3236) ? 1.0 : min(_3236, 1.0)))) - _277)) + _277;
    float _362 = fma(_359, _212, fma(_358, _204 * TANGENT.x, (_190 * _182) * _357));
    float _365 = fma(_359, _213, fma(_358, _204 * TANGENT.y, (_190 * _183) * _357));
    float _368 = fma(_359, _214, fma(_358, _204 * TANGENT.z, (_190 * _184) * _357));
    float _372 = inversesqrt(dot(vec3(_362, _365, _368), vec3(_362, _365, _368)));
    float _373 = _372 * _362;
    float _374 = _372 * _365;
    float _375 = _372 * _368;
    float _3247 = isnan(0.0) ? _345 : (isnan(_345) ? 0.0 : max(_345, 0.0));
    float _376 = isnan(1.0) ? _3247 : (isnan(_3247) ? 1.0 : min(_3247, 1.0));
    float _3258 = isnan(0.0) ? _314 : (isnan(_314) ? 0.0 : max(_314, 0.0));
    float _3269 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _3280 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    float _395 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _437 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _447 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _437);
    float _448 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _437);
    float _449 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _437);
    float _453 = inversesqrt(dot(vec3(_447, _448, _449), vec3(_447, _448, _449)));
    float _454 = _447 * _453;
    float _455 = _448 * _453;
    float _456 = _449 * _453;
    float _462 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _463 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _484 = fma(_375, cbSceneParam._m0[5u].z, fma(_374, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _373));
    float _487 = fma(_375, cbSceneParam._m0[6u].z, fma(_374, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _373));
    float _490 = fma(_375, cbSceneParam._m0[7u].z, fma(_374, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _373));
    uint _503 = uint(roundEven(NORMAL.w)) * 13u;
    uint _506 = (_503 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _512 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3258 : (isnan(_3258) ? 1.0 : min(_3258, 1.0)))) * cbInstanceData._m0[_506].x;
    float _513 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3269 : (isnan(_3269) ? 1.0 : min(_3269, 1.0)))) * cbInstanceData._m0[_506].y;
    float _514 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3280 : (isnan(_3280) ? 1.0 : min(_3280, 1.0)))) * cbInstanceData._m0[_506].z;
    float _3291 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _515 = isnan(1.0) ? _3291 : (isnan(_3291) ? 1.0 : min(_3291, 1.0));
    float _3302 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _516 = isnan(1.0) ? _3302 : (isnan(_3302) ? 1.0 : min(_3302, 1.0));
    float _3313 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _517 = isnan(1.0) ? _3313 : (isnan(_3313) ? 1.0 : min(_3313, 1.0));
    vec4 _526 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _462, cbSceneParam._m0[86u].y * _463));
    float _529 = _526.x * TEXCOORD_3.w;
    float _530 = dot(vec3(_373, _374, _375), vec3(_454, _455, _456));
    float _533 = _530 * 2.0;
    float _537 = (_533 * _373) - _454;
    float _538 = (_533 * _374) - _455;
    float _539 = (_533 * _375) - _456;
    float _543 = abs(dot(vec3(_454, _455, _456), vec3(_373, _374, _375)));
    float _3324 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _545 = sqrt(_376);
    float _558 = exp2((_545 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3324 : (isnan(_3324) ? 1.0 : min(_3324, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_545 * 3.0));
    float _590 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _594 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _598 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _900;
    float _902;
    float _903;
    float _904;
    float _905;
    float _906;
    float _907;
    float _908;
    float _909;
    float _910;
    float _911;
    float _912;
    float _913;
    float _914;
    float _915;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _625 = fma(_598, cbModelParam._m0[26u].z, fma(_594, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _590));
        float _629 = fma(_598, cbModelParam._m0[27u].z, fma(_594, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _590));
        float _633 = fma(_598, cbModelParam._m0[28u].z, fma(_594, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _590));
        float _658 = _590 + _373;
        float _659 = _594 + _374;
        float _660 = _598 + _375;
        float _670 = fma(_660, cbModelParam._m0[26u].z, fma(_659, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _658)) - _625;
        float _671 = fma(_660, cbModelParam._m0[27u].z, fma(_659, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _658)) - _629;
        float _672 = fma(_660, cbModelParam._m0[28u].z, fma(_659, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _658)) - _633;
        float _676 = inversesqrt(dot(vec3(_670, _671, _672), vec3(_670, _671, _672)));
        float _689 = ((_676 * _670) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_625 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _690 = ((_676 * _671) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_629 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _691 = ((_676 * _672) / cbModelParam._m0[34u].z) + ((((((_633 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _694 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_689, _690, _691), 0.0);
        vec4 _701 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_689, _690, _691), 0.0);
        vec4 _708 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_689, _690, _691), 0.0);
        vec4 _715 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_689, _690, _691), 0.0);
        float _728 = exp2((_694.w + (-0.5)) * 20.0) * 2.0;
        float _729 = _728 * (_694.x + (-0.5));
        float _730 = _728 * (_694.y + (-0.5));
        float _731 = _728 * (_694.z + (-0.5));
        float _738 = exp2((_701.w + (-0.5)) * 20.0) * 2.0;
        float _739 = _738 * (_701.x + (-0.5));
        float _740 = _738 * (_701.y + (-0.5));
        float _741 = _738 * (_701.z + (-0.5));
        float _748 = exp2((_708.w + (-0.5)) * 20.0) * 2.0;
        float _749 = _748 * (_708.x + (-0.5));
        float _750 = _748 * (_708.y + (-0.5));
        float _751 = _748 * (_708.z + (-0.5));
        float _758 = exp2((_715.w + (-0.5)) * 20.0) * 2.0;
        float _759 = _758 * (_715.x + (-0.5));
        float _760 = _758 * (_715.y + (-0.5));
        float _761 = _758 * (_715.z + (-0.5));
        float _762 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
        float _763 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
        float _764 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
        float _765 = _729 * 0.5;
        float _766 = _739 * 0.5;
        float _767 = _749 * 0.5;
        float _768 = dot(vec3(_765, _766, _767), vec3(_765, _766, _767));
        float _773 = (_768 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_768);
        float _782 = (dot(vec3(_373, _374, _375), vec3(_773 * _765, _773 * _766, _773 * _767)) + 1.0) * 0.5;
        float _3350 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
        float _792 = sqrt(((_766 * _766) + (_765 * _765)) + (_767 * _767)) / (_762 + 9.9999997473787516355514526367188e-06);
        float _3361 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
        float _793 = isnan(1.0) ? _3361 : (isnan(_3361) ? 1.0 : min(_3361, 1.0));
        float _794 = _793 * 2.0;
        float _798 = (1.0 - _793) / (_793 + 1.0);
        float _3372 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
        float _799 = isnan(1.0) ? _3372 : (isnan(_3372) ? 1.0 : min(_3372, 1.0));
        float _808 = ((((1.0 - _799) * (_794 + 2.0)) * exp2(log2(isnan(1.0) ? _3350 : (isnan(_3350) ? 1.0 : min(_3350, 1.0))) * (_794 + 1.0))) + _799) * _762;
        float _809 = _730 * 0.5;
        float _810 = _740 * 0.5;
        float _811 = _750 * 0.5;
        float _812 = dot(vec3(_809, _810, _811), vec3(_809, _810, _811));
        float _817 = (_812 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_812);
        float _825 = (dot(vec3(_373, _374, _375), vec3(_817 * _809, _817 * _810, _817 * _811)) + 1.0) * 0.5;
        float _3383 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
        float _834 = sqrt(((_810 * _810) + (_809 * _809)) + (_811 * _811)) / (_763 + 9.9999997473787516355514526367188e-06);
        float _3394 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
        float _835 = isnan(1.0) ? _3394 : (isnan(_3394) ? 1.0 : min(_3394, 1.0));
        float _836 = _835 * 2.0;
        float _840 = (1.0 - _835) / (_835 + 1.0);
        float _3405 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
        float _841 = isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0));
        float _850 = ((((1.0 - _841) * (_836 + 2.0)) * exp2(log2(isnan(1.0) ? _3383 : (isnan(_3383) ? 1.0 : min(_3383, 1.0))) * (_836 + 1.0))) + _841) * _763;
        float _851 = _731 * 0.5;
        float _852 = _741 * 0.5;
        float _853 = _751 * 0.5;
        float _854 = dot(vec3(_851, _852, _853), vec3(_851, _852, _853));
        float _859 = (_854 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_854);
        float _867 = (dot(vec3(_373, _374, _375), vec3(_859 * _851, _859 * _852, _859 * _853)) + 1.0) * 0.5;
        float _3416 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
        float _876 = sqrt(((_852 * _852) + (_851 * _851)) + (_853 * _853)) / (_764 + 9.9999997473787516355514526367188e-06);
        float _3427 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
        float _877 = isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0));
        float _878 = _877 * 2.0;
        float _882 = (1.0 - _877) / (_877 + 1.0);
        float _3438 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
        float _883 = isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0));
        float _892 = ((((1.0 - _883) * (_878 + 2.0)) * exp2(log2(isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0))) * (_878 + 1.0))) + _883) * _764;
        _900 = _731;
        _902 = _730;
        _903 = _729;
        _904 = _741;
        _905 = _740;
        _906 = _739;
        _907 = _751;
        _908 = _750;
        _909 = _749;
        _910 = _764;
        _911 = _763;
        _912 = _762;
        _913 = cbModelParam._m0[36u].z * (isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0)));
        _914 = cbModelParam._m0[36u].z * (isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0)));
        _915 = cbModelParam._m0[36u].z * (isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0)));
    }
    else
    {
        _900 = _901;
        _902 = _901;
        _903 = _901;
        _904 = _901;
        _905 = _901;
        _906 = _901;
        _907 = _901;
        _908 = _901;
        _909 = _901;
        _910 = _901;
        _911 = _901;
        _912 = _901;
        _913 = 0.0;
        _914 = 0.0;
        _915 = 0.0;
    }
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _941 = fma(_598, cbModelParam._m0[30u].z, fma(_594, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _590));
        float _945 = fma(_598, cbModelParam._m0[31u].z, fma(_594, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _590));
        float _949 = fma(_598, cbModelParam._m0[32u].z, fma(_594, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _590));
        float _972 = _590 + _373;
        float _973 = _594 + _374;
        float _974 = _598 + _375;
        float _984 = fma(_974, cbModelParam._m0[30u].z, fma(_973, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _972)) - _941;
        float _985 = fma(_974, cbModelParam._m0[31u].z, fma(_973, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _972)) - _945;
        float _986 = fma(_974, cbModelParam._m0[32u].z, fma(_973, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _972)) - _949;
        float _990 = inversesqrt(dot(vec3(_984, _985, _986), vec3(_984, _985, _986)));
        float _1003 = ((_990 * _984) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_941 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1004 = ((_990 * _985) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_945 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1005 = ((_990 * _986) / cbModelParam._m0[35u].z) + ((((((_949 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1007 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1003, _1004, _1005), 0.0);
        vec4 _1014 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1003, _1004, _1005), 0.0);
        vec4 _1021 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1003, _1004, _1005), 0.0);
        vec4 _1028 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1003, _1004, _1005), 0.0);
        float _1040 = exp2((_1007.w + (-0.5)) * 20.0) * 2.0;
        float _1041 = _1040 * (_1007.x + (-0.5));
        float _1042 = _1040 * (_1007.y + (-0.5));
        float _1043 = _1040 * (_1007.z + (-0.5));
        float _1050 = exp2((_1014.w + (-0.5)) * 20.0) * 2.0;
        float _1051 = _1050 * (_1014.x + (-0.5));
        float _1052 = _1050 * (_1014.y + (-0.5));
        float _1053 = _1050 * (_1014.z + (-0.5));
        float _1060 = exp2((_1021.w + (-0.5)) * 20.0) * 2.0;
        float _1061 = _1060 * (_1021.x + (-0.5));
        float _1062 = _1060 * (_1021.y + (-0.5));
        float _1063 = _1060 * (_1021.z + (-0.5));
        float _1070 = exp2((_1028.w + (-0.5)) * 20.0) * 2.0;
        float _1071 = _1070 * (_1028.x + (-0.5));
        float _1072 = _1070 * (_1028.y + (-0.5));
        float _1073 = _1070 * (_1028.z + (-0.5));
        float _1074 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1075 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1076 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1077 = _1041 * 0.5;
        float _1078 = _1051 * 0.5;
        float _1079 = _1061 * 0.5;
        float _1080 = dot(vec3(_1077, _1078, _1079), vec3(_1077, _1078, _1079));
        float _1085 = (_1080 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1080);
        float _1093 = (dot(vec3(_373, _374, _375), vec3(_1085 * _1077, _1085 * _1078, _1085 * _1079)) + 1.0) * 0.5;
        float _3479 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1102 = sqrt(((_1078 * _1078) + (_1077 * _1077)) + (_1079 * _1079)) / (_1074 + 9.9999997473787516355514526367188e-06);
        float _3490 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1103 = isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0));
        float _1104 = _1103 * 2.0;
        float _1108 = (1.0 - _1103) / (_1103 + 1.0);
        float _3501 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1109 = isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0));
        float _1118 = ((((1.0 - _1109) * (_1104 + 2.0)) * exp2(log2(isnan(1.0) ? _3479 : (isnan(_3479) ? 1.0 : min(_3479, 1.0))) * (_1104 + 1.0))) + _1109) * _1074;
        float _1119 = _1042 * 0.5;
        float _1120 = _1052 * 0.5;
        float _1121 = _1062 * 0.5;
        float _1122 = dot(vec3(_1119, _1120, _1121), vec3(_1119, _1120, _1121));
        float _1127 = (_1122 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1122);
        float _1135 = (dot(vec3(_373, _374, _375), vec3(_1127 * _1119, _1127 * _1120, _1127 * _1121)) + 1.0) * 0.5;
        float _3512 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1144 = sqrt(((_1120 * _1120) + (_1119 * _1119)) + (_1121 * _1121)) / (_1075 + 9.9999997473787516355514526367188e-06);
        float _3523 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1145 = isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0));
        float _1146 = _1145 * 2.0;
        float _1150 = (1.0 - _1145) / (_1145 + 1.0);
        float _3534 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1151 = isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0));
        float _1160 = ((((1.0 - _1151) * (_1146 + 2.0)) * exp2(log2(isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0))) * (_1146 + 1.0))) + _1151) * _1075;
        float _1161 = _1043 * 0.5;
        float _1162 = _1053 * 0.5;
        float _1163 = _1063 * 0.5;
        float _1164 = dot(vec3(_1161, _1162, _1163), vec3(_1161, _1162, _1163));
        float _1169 = (_1164 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1164);
        float _1177 = (dot(vec3(_373, _374, _375), vec3(_1169 * _1161, _1169 * _1162, _1169 * _1163)) + 1.0) * 0.5;
        float _3545 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1186 = sqrt(((_1162 * _1162) + (_1161 * _1161)) + (_1163 * _1163)) / (_1076 + 9.9999997473787516355514526367188e-06);
        float _3556 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1187 = isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0));
        float _1188 = _1187 * 2.0;
        float _1192 = (1.0 - _1187) / (_1187 + 1.0);
        float _3567 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1193 = isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0));
        float _1202 = ((((1.0 - _1193) * (_1188 + 2.0)) * exp2(log2(isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0))) * (_1188 + 1.0))) + _1193) * _1076;
        _1210 = _1043;
        _1211 = _1042;
        _1212 = _1041;
        _1213 = _1053;
        _1214 = _1052;
        _1215 = _1051;
        _1216 = _1063;
        _1217 = _1062;
        _1218 = _1061;
        _1219 = _1076;
        _1220 = _1075;
        _1221 = _1074;
        _1222 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0)));
        _1223 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0)));
        _1224 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0)));
    }
    else
    {
        _1210 = _901;
        _1211 = _901;
        _1212 = _901;
        _1213 = _901;
        _1214 = _901;
        _1215 = _901;
        _1216 = _901;
        _1217 = _901;
        _1218 = _901;
        _1219 = _901;
        _1220 = _901;
        _1221 = _901;
        _1222 = 0.0;
        _1223 = 0.0;
        _1224 = 0.0;
    }
    float _1234 = (cbModelParam._m0[1u].x * (_1222 - _913)) + _913;
    float _1235 = (cbModelParam._m0[1u].x * (_1223 - _914)) + _914;
    float _1236 = (cbModelParam._m0[1u].x * (_1224 - _915)) + _915;
    float _1257 = fma(_1236, cbSceneParam._m0[89u].z, fma(_1235, cbSceneParam._m0[89u].y, _1234 * cbSceneParam._m0[89u].x));
    float _1260 = fma(_1236, cbSceneParam._m0[90u].z, fma(_1235, cbSceneParam._m0[90u].y, _1234 * cbSceneParam._m0[90u].x));
    float _1263 = fma(_1236, cbSceneParam._m0[91u].z, fma(_1235, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1234));
    float _1278 = _537 * 0.5;
    float _1279 = _538 * 0.5;
    float _1280 = _539 * 0.5;
    float _1281 = dot(vec4(_1278, _1279, _1280, 1.0), vec4(_1212, _1215, _1218, _1221));
    float _1284 = dot(vec4(_1278, _1279, _1280, 1.0), vec4(_1211, _1214, _1217, _1220));
    float _1287 = dot(vec4(_1278, _1279, _1280, 1.0), vec4(_1210, _1213, _1216, _1219));
    float _1321;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1294 = dot(vec4(_1278, _1279, _1280, 1.0), vec4(_900, _904, _907, _910));
        float _1298 = dot(vec4(_1278, _1279, _1280, 1.0), vec4(_902, _905, _908, _911));
        float _1302 = dot(vec4(_1278, _1279, _1280, 1.0), vec4(_903, _906, _909, _912));
        float _1309 = dot(vec4(cbModelParam._m0[39u]), vec4(_1278, _1279, _1280, 1.0));
        _1321 = dot(vec3(isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0)), isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0)), isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1309) ? 0.0 : (isnan(0.0) ? _1309 : max(0.0, _1309))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1321 = 1.0;
    }
    float _1332;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1323 = dot(vec4(cbModelParam._m0[40u]), vec4(_1278, _1279, _1280, 1.0));
        _1332 = dot(vec3(isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0)), isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0)), isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1323) ? 0.0 : (isnan(0.0) ? _1323 : max(0.0, _1323))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1332 = 1.0;
    }
    float _1336 = (_1332 * cbModelParam._m0[1u].x) + (_1321 * (1.0 - cbModelParam._m0[1u].x));
    float _1346 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _376);
    float _1347 = isnan(_1346) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1346 : min(cbModelParam._m0[25u].z, _1346));
    float _1428;
    float _1430;
    float _1432;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1395 = fma(_598, cbModelParam._m0[13u].z, fma(_594, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _590)) + cbModelParam._m0[13u].w;
        float _1399 = fma(_598, cbModelParam._m0[14u].z, fma(_594, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _590)) + cbModelParam._m0[14u].w;
        float _1403 = fma(_598, cbModelParam._m0[15u].z, fma(_594, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _590)) + cbModelParam._m0[15u].w;
        float _1406 = fma(_539, cbModelParam._m0[13u].z, fma(_538, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _537));
        float _1409 = fma(_539, cbModelParam._m0[14u].z, fma(_538, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _537));
        float _1412 = fma(_539, cbModelParam._m0[15u].z, fma(_538, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _537));
        float _1440;
        if (_1406 > 0.0)
        {
            _1440 = abs((1.0 - _1395) / _1406);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1406 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1395 + 1.0) / _1406);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1440 = frontier_phi_16_14_ladder;
        }
        float _1644;
        if (_1409 > 0.0)
        {
            _1644 = abs((1.0 - _1399) / _1409);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1409 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1399 + 1.0) / _1409);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1644 = frontier_phi_25_21_ladder;
        }
        float _1887;
        if (_1412 > 0.0)
        {
            _1887 = abs((1.0 - _1403) / _1412);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1412 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1403 + 1.0) / _1412);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1887 = frontier_phi_37_32_ladder;
        }
        float _1889 = isnan(_1644) ? _1440 : (isnan(_1440) ? _1644 : min(_1440, _1644));
        float _1890 = isnan(_1887) ? _1889 : (isnan(_1889) ? _1887 : min(_1889, _1887));
        float _1894 = (_1890 * _1406) + _1395;
        float _1895 = (_1890 * _1409) + _1399;
        float _1896 = (_1890 * _1412) + _1403;
        float _1897 = _1890 * 9.9999997473787516355514526367188e-05;
        float _1899 = (-1.0) - _1897;
        float _1901 = _1897 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1896 > _1901) || ((_1896 < _1899) || ((_1895 > _1901) || ((_1895 < _1899) || ((_1894 < _1899) || (_1894 > _1901))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2020 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1896, cbModelParam._m0[9u].z, fma(_1895, cbModelParam._m0[9u].y, _1894 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1896, cbModelParam._m0[10u].z, fma(_1895, cbModelParam._m0[10u].y, _1894 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1896, cbModelParam._m0[11u].z, fma(_1895, cbModelParam._m0[11u].y, _1894 * cbModelParam._m0[11u].x))), _1347);
            frontier_phi_15_37_ladder = _2020.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2020.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2020.x * cbModelParam._m0[1u].y;
        }
        _1428 = frontier_phi_15_37_ladder_2;
        _1430 = frontier_phi_15_37_ladder_1;
        _1432 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1416 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_537, _538, _539), _1347);
        _1428 = _1416.x * cbModelParam._m0[1u].y;
        _1430 = _1416.y * cbModelParam._m0[1u].y;
        _1432 = _1416.z * cbModelParam._m0[1u].y;
    }
    float _1436 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _376);
    float _1437 = isnan(_1436) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1436 : min(cbModelParam._m0[25u].w, _1436));
    float _1530;
    float _1532;
    float _1534;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1494 = fma(_598, cbModelParam._m0[21u].z, fma(_594, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _590)) + cbModelParam._m0[21u].w;
        float _1498 = fma(_598, cbModelParam._m0[22u].z, fma(_594, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _590)) + cbModelParam._m0[22u].w;
        float _1502 = fma(_598, cbModelParam._m0[23u].z, fma(_594, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _590)) + cbModelParam._m0[23u].w;
        float _1505 = fma(_539, cbModelParam._m0[21u].z, fma(_538, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _537));
        float _1508 = fma(_539, cbModelParam._m0[22u].z, fma(_538, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _537));
        float _1511 = fma(_539, cbModelParam._m0[23u].z, fma(_538, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _537));
        float _1649;
        if (_1505 > 0.0)
        {
            _1649 = abs((1.0 - _1494) / _1505);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1505 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1494 + 1.0) / _1505);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1649 = frontier_phi_27_23_ladder;
        }
        float _1914;
        if (_1508 > 0.0)
        {
            _1914 = abs((1.0 - _1498) / _1508);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1508 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1498 + 1.0) / _1508);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1914 = frontier_phi_39_34_ladder;
        }
        float _2119;
        if (_1511 > 0.0)
        {
            _2119 = abs((1.0 - _1502) / _1511);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1511 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1502 + 1.0) / _1511);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2119 = frontier_phi_48_45_ladder;
        }
        float _2121 = isnan(_1914) ? _1649 : (isnan(_1649) ? _1914 : min(_1649, _1914));
        float _2122 = isnan(_2119) ? _2121 : (isnan(_2121) ? _2119 : min(_2121, _2119));
        float _2126 = (_2122 * _1505) + _1494;
        float _2127 = (_2122 * _1508) + _1498;
        float _2128 = (_2122 * _1511) + _1502;
        float _2129 = _2122 * 9.9999997473787516355514526367188e-05;
        float _2130 = (-1.0) - _2129;
        float _2132 = _2129 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2128 > _2132) || ((_2128 < _2130) || ((_2127 > _2132) || ((_2127 < _2130) || ((_2126 < _2130) || (_2126 > _2132))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2326 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2128, cbModelParam._m0[17u].z, fma(_2127, cbModelParam._m0[17u].y, _2126 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2128, cbModelParam._m0[18u].z, fma(_2127, cbModelParam._m0[18u].y, _2126 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2128, cbModelParam._m0[19u].z, fma(_2127, cbModelParam._m0[19u].y, _2126 * cbModelParam._m0[19u].x))), _1437);
            frontier_phi_24_48_ladder = _2326.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2326.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2326.x * cbModelParam._m0[1u].z;
        }
        _1530 = frontier_phi_24_48_ladder_2;
        _1532 = frontier_phi_24_48_ladder_1;
        _1534 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1514 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_537, _538, _539), _1437);
        _1530 = _1514.x * cbModelParam._m0[1u].z;
        _1532 = _1514.y * cbModelParam._m0[1u].z;
        _1534 = _1514.z * cbModelParam._m0[1u].z;
    }
    float _1546 = ((((1.0 - _558) * ((_545 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_558 * _545)) * _529;
    float _1547 = _1546 * ((cbModelParam._m0[1u].w * (_1530 - _1428)) + _1428);
    float _1548 = _1546 * ((cbModelParam._m0[1u].w * (_1532 - _1430)) + _1430);
    float _1549 = _1546 * ((cbModelParam._m0[1u].w * (_1534 - _1432)) + _1432);
    float _1552 = fma(_1549, cbSceneParam._m0[89u].z, fma(_1548, cbSceneParam._m0[89u].y, _1547 * cbSceneParam._m0[89u].x));
    float _1555 = fma(_1549, cbSceneParam._m0[90u].z, fma(_1548, cbSceneParam._m0[90u].y, _1547 * cbSceneParam._m0[90u].x));
    float _1558 = fma(_1549, cbSceneParam._m0[91u].z, fma(_1548, cbSceneParam._m0[91u].y, _1547 * cbSceneParam._m0[91u].x));
    uvec4 _1568 = floatBitsToUint(cbInstanceData._m0[_503 + 5u]);
    uint _1570 = _1568.x * 14u;
    uint _1571 = _1570 + 13u;
    float _1578 = _529 + (-1.0);
    float _1583 = (cbLight._m0[_1571].x * _1578) + 1.0;
    float _1584 = (cbLight._m0[_1571].y * _1578) + 1.0;
    float _1585 = (cbLight._m0[_1571].z * _1578) + 1.0;
    float _1586 = (cbLight._m0[_1571].w * _1578) + 1.0;
    uint _1587 = _1570 + 5u;
    float _1593 = isnan(1.0) ? _1584 : (isnan(_1584) ? 1.0 : min(_1584, 1.0));
    uint _1597 = _1570 + 4u;
    float _1603 = isnan(1.0) ? _1583 : (isnan(_1583) ? 1.0 : min(_1583, 1.0));
    uint _1607 = _1570 | 1u;
    float _1618 = dot(vec3(cbLight._m0[_1570].xyz), vec3(_373, _374, _375));
    float _1621 = dot(vec3(cbLight._m0[_1607].xyz), vec3(_373, _374, _375));
    float _3703 = isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0));
    float _3714 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
    float _1626 = (isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0))) * 0.3183098733425140380859375;
    float _1628 = (isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0))) * 0.3183098733425140380859375;
    float _1635 = ((cbLight._m0[_1587].x * _1593) * _1628) + ((cbLight._m0[_1597].x * _1603) * _1626);
    float _1636 = ((_1593 * cbLight._m0[_1587].y) * _1628) + ((_1603 * cbLight._m0[_1597].y) * _1626);
    float _1637 = ((_1593 * cbLight._m0[_1587].z) * _1628) + ((_1603 * cbLight._m0[_1597].z) * _1626);
    uvec4 _1641 = floatBitsToUint(cbLight._m0[_1570 + 12u]);
    bool _1643 = _1641.x == 0u;
    float _1654;
    float _1656;
    float _1658;
    if (_1643)
    {
        _1654 = _1635;
        _1656 = _1636;
        _1658 = _1637;
    }
    else
    {
        uint _1662 = _1570 + 6u;
        float _1678 = (dot(vec3(cbLight._m0[_1570 + 2u].xyz), vec3(_373, _374, _375)) * 0.5) + 0.5;
        float _1679 = _1678 * _1678;
        float _3725 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
        float _1680 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
        float _1681 = isnan(1.0) ? _1585 : (isnan(_1585) ? 1.0 : min(_1585, 1.0));
        _1654 = (((cbLight._m0[_1662].x * 0.3183098733425140380859375) * _1680) * _1681) + _1635;
        _1656 = (((cbLight._m0[_1662].y * 0.3183098733425140380859375) * _1680) * _1681) + _1636;
        _1658 = (((cbLight._m0[_1662].z * 0.3183098733425140380859375) * _1680) * _1681) + _1637;
    }
    bool _1661 = _1641.y == 0u;
    float _1699;
    float _1701;
    float _1703;
    if (_1661)
    {
        _1699 = _1654;
        _1701 = _1656;
        _1703 = _1658;
    }
    else
    {
        uint _1858 = _1570 + 7u;
        float _1874 = (dot(vec3(cbLight._m0[_1570 + 3u].xyz), vec3(_373, _374, _375)) * 0.5) + 0.5;
        float _1875 = _1874 * _1874;
        float _3741 = isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0));
        float _1876 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
        float _1877 = isnan(1.0) ? _1586 : (isnan(_1586) ? 1.0 : min(_1586, 1.0));
        _1699 = (((cbLight._m0[_1858].x * 0.3183098733425140380859375) * _1876) * _1877) + _1654;
        _1701 = (((cbLight._m0[_1858].y * 0.3183098733425140380859375) * _1876) * _1877) + _1656;
        _1703 = (((cbLight._m0[_1858].z * 0.3183098733425140380859375) * _1876) * _1877) + _1658;
    }
    uint _1706 = _1570 + 8u;
    float _1719 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1570].w)) * _376) * 0.949999988079071044921875);
    float _1720 = _1719 * _1719;
    float _1721 = cbLight._m0[_1570].x + _454;
    float _1722 = cbLight._m0[_1570].y + _455;
    float _1723 = cbLight._m0[_1570].z + _456;
    float _1727 = inversesqrt(dot(vec3(_1721, _1722, _1723), vec3(_1721, _1722, _1723)));
    float _1728 = _1727 * _1721;
    float _1729 = _1727 * _1722;
    float _1730 = _1727 * _1723;
    float _1731 = dot(vec3(_373, _374, _375), vec3(cbLight._m0[_1570].xyz));
    float _3757 = isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0));
    float _1734 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
    float _3768 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _1735 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
    float _1736 = dot(vec3(_373, _374, _375), vec3(_1728, _1729, _1730));
    float _3779 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
    float _1739 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
    float _1740 = dot(vec3(cbLight._m0[_1570].xyz), vec3(_1728, _1729, _1730));
    float _3790 = isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0));
    float _1744 = _1720 * _1720;
    float _1748 = ((_1739 * _1739) * (_1744 + (-1.0))) + 1.0;
    float _1759 = (exp2(log2(1.0 - (isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1760 = 1.0 - _1720;
    float _1771 = (0.5 / (((_1735 * ((_1734 * _1760) + _1720)) + 9.9999999392252902907785028219223e-09) + (((_1735 * _1760) + _1720) * _1734))) * _1734;
    float _3801 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
    float _1773 = (isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0))) * (_1744 / ((_1748 * _1748) * 3.141590118408203125));
    uint _1784 = _1570 + 9u;
    float _1795 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1607].w)) * _376) * 0.949999988079071044921875);
    float _1796 = _1795 * _1795;
    float _1797 = cbLight._m0[_1607].x + _454;
    float _1798 = cbLight._m0[_1607].y + _455;
    float _1799 = cbLight._m0[_1607].z + _456;
    float _1803 = inversesqrt(dot(vec3(_1797, _1798, _1799), vec3(_1797, _1798, _1799)));
    float _1804 = _1803 * _1797;
    float _1805 = _1803 * _1798;
    float _1806 = _1803 * _1799;
    float _1807 = dot(vec3(_373, _374, _375), vec3(cbLight._m0[_1607].xyz));
    float _3812 = isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0));
    float _1810 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
    float _1811 = dot(vec3(_373, _374, _375), vec3(_1804, _1805, _1806));
    float _3823 = isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0));
    float _1814 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
    float _1815 = dot(vec3(cbLight._m0[_1607].xyz), vec3(_1804, _1805, _1806));
    float _3834 = isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0));
    float _1819 = _1796 * _1796;
    float _1823 = ((_1814 * _1814) * (_1819 + (-1.0))) + 1.0;
    float _1832 = (exp2(log2(1.0 - (isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1833 = 1.0 - _1796;
    float _1843 = (0.5 / (((_1735 * ((_1810 * _1833) + _1796)) + 9.9999999392252902907785028219223e-09) + (((_1735 * _1833) + _1796) * _1810))) * _1810;
    float _3845 = isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0));
    float _1845 = (isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0))) * (_1819 / ((_1823 * _1823) * 3.141590118408203125));
    float _1855 = (((_1832 * cbLight._m0[_1784].x) * _1845) * _1593) + (((_1759 * cbLight._m0[_1706].x) * _1773) * _1603);
    float _1856 = (((_1832 * cbLight._m0[_1784].y) * _1845) * _1593) + (((_1759 * cbLight._m0[_1706].y) * _1773) * _1603);
    float _1857 = (((_1832 * cbLight._m0[_1784].z) * _1845) * _1593) + (((_1759 * cbLight._m0[_1706].z) * _1773) * _1603);
    float _1919;
    float _1921;
    float _1923;
    if (_1643)
    {
        _1919 = _1855;
        _1921 = _1856;
        _1923 = _1857;
    }
    else
    {
        uint _1925 = _1570 + 2u;
        uint _1929 = _1570 + 10u;
        float _1943 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1925].w)) * _376) * 0.949999988079071044921875);
        float _1944 = _1943 * _1943;
        float _1945 = cbLight._m0[_1925].x + _454;
        float _1946 = cbLight._m0[_1925].y + _455;
        float _1947 = cbLight._m0[_1925].z + _456;
        float _1951 = inversesqrt(dot(vec3(_1945, _1946, _1947), vec3(_1945, _1946, _1947)));
        float _1952 = _1951 * _1945;
        float _1953 = _1951 * _1946;
        float _1954 = _1951 * _1947;
        float _1955 = dot(vec3(_373, _374, _375), vec3(cbLight._m0[_1925].xyz));
        float _3856 = isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0));
        float _1958 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
        float _1959 = dot(vec3(_373, _374, _375), vec3(_1952, _1953, _1954));
        float _3867 = isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0));
        float _1962 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
        float _1963 = dot(vec3(cbLight._m0[_1925].xyz), vec3(_1952, _1953, _1954));
        float _3878 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
        float _1967 = _1944 * _1944;
        float _1971 = ((_1962 * _1962) * (_1967 + (-1.0))) + 1.0;
        float _1980 = (exp2(log2(1.0 - (isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1981 = 1.0 - _1944;
        float _1991 = (0.5 / (((_1735 * ((_1958 * _1981) + _1944)) + 9.9999999392252902907785028219223e-09) + (((_1735 * _1981) + _1944) * _1958))) * _1958;
        float _3889 = isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0));
        float _1993 = (isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0))) * (_1967 / ((_1971 * _1971) * 3.141590118408203125));
        float _1994 = isnan(1.0) ? _1585 : (isnan(_1585) ? 1.0 : min(_1585, 1.0));
        _1919 = (((_1980 * cbLight._m0[_1929].x) * _1993) * _1994) + _1855;
        _1921 = (((_1980 * cbLight._m0[_1929].y) * _1993) * _1994) + _1856;
        _1923 = (((_1980 * cbLight._m0[_1929].z) * _1993) * _1994) + _1857;
    }
    float _2029;
    float _2031;
    float _2033;
    if (_1661)
    {
        _2029 = _1919;
        _2031 = _1921;
        _2033 = _1923;
    }
    else
    {
        uint _2040 = _1570 + 3u;
        uint _2044 = _1570 + 11u;
        float _2058 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2040].w)) * _376) * 0.949999988079071044921875);
        float _2059 = _2058 * _2058;
        float _2060 = cbLight._m0[_2040].x + _454;
        float _2061 = cbLight._m0[_2040].y + _455;
        float _2062 = cbLight._m0[_2040].z + _456;
        float _2066 = inversesqrt(dot(vec3(_2060, _2061, _2062), vec3(_2060, _2061, _2062)));
        float _2067 = _2066 * _2060;
        float _2068 = _2066 * _2061;
        float _2069 = _2066 * _2062;
        float _2070 = dot(vec3(_373, _374, _375), vec3(cbLight._m0[_2040].xyz));
        float _3905 = isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0));
        float _2073 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _2074 = dot(vec3(_373, _374, _375), vec3(_2067, _2068, _2069));
        float _3916 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
        float _2077 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
        float _2078 = dot(vec3(cbLight._m0[_2040].xyz), vec3(_2067, _2068, _2069));
        float _3927 = isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0));
        float _2082 = _2059 * _2059;
        float _2086 = ((_2077 * _2077) * (_2082 + (-1.0))) + 1.0;
        float _2095 = (exp2(log2(1.0 - (isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2096 = 1.0 - _2059;
        float _2106 = (0.5 / (((_1735 * ((_2073 * _2096) + _2059)) + 9.9999999392252902907785028219223e-09) + (((_1735 * _2096) + _2059) * _2073))) * _2073;
        float _3938 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
        float _2108 = (isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0))) * (_2082 / ((_2086 * _2086) * 3.141590118408203125));
        float _2109 = isnan(1.0) ? _1586 : (isnan(_1586) ? 1.0 : min(_1586, 1.0));
        _2029 = (((_2095 * cbLight._m0[_2044].x) * _2108) * _2109) + _1919;
        _2031 = (((_2095 * cbLight._m0[_2044].y) * _2108) * _2109) + _1921;
        _2033 = (((_2095 * cbLight._m0[_2044].z) * _2108) * _2109) + _1923;
    }
    float _2243;
    float _2245;
    float _2247;
    float _2249;
    float _2251;
    float _2253;
    if (_1568.y == 0u)
    {
        float _2184 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2185 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2184;
        float _2186 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2184;
        float _2187 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2184;
        uvec4 _2199 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2200 = _2199.x;
        uint _2211 = uint((float(_2199.y) * floor(float(uint(cbSceneParam._m0[85u].y * _463) / _2200))) + floor(float(uint(cbSceneParam._m0[85u].x * _462) / _2200)));
        float _2221 = (log2(_2187 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2222 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
        uint _2225 = uint(isnan(14.0) ? _2222 : (isnan(_2222) ? 14.0 : min(_2222, 14.0)));
        uvec4 _2230 = texelFetch(g_lightClusterGridBuffer, int(((_2225 << 2u) + (_2211 << 6u)) >> 2u));
        uint _2231 = _2230.x;
        uint _2232 = _2199.z;
        float _2331;
        float _2333;
        float _2335;
        float _2337;
        float _2339;
        float _2341;
        if (((((1u << ((_2232 >> 4u) & 15u)) + 4294967295u) & _2231) == 0u) || ((_2232 & 240u) == 0u))
        {
            _2331 = 0.0;
            _2333 = 0.0;
            _2335 = 0.0;
            _2337 = 0.0;
            _2339 = 0.0;
            _2341 = 0.0;
        }
        else
        {
            float _2332;
            float _2334;
            float _2336;
            float _2338;
            float _2340;
            float _2342;
            float _2475 = 0.0;
            float _2476 = 0.0;
            float _2477 = 0.0;
            float _2478 = 0.0;
            float _2479 = 0.0;
            float _2480 = 0.0;
            uint _2481 = 0u;
            uint _2490;
            bool _2491;
            for (;;)
            {
                _2490 = texelFetch(g_lightClassification, int((((_2225 << 5u) + (_2211 << 9u)) + (_2481 << 2u)) >> 2u)).x;
                _2491 = _2490 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2491)
                {
                    frontier_phi_63_pred = _2480;
                    frontier_phi_63_pred_1 = _2479;
                    frontier_phi_63_pred_2 = _2478;
                    frontier_phi_63_pred_3 = _2477;
                    frontier_phi_63_pred_4 = _2476;
                    frontier_phi_63_pred_5 = _2475;
                }
                else
                {
                    float _2599;
                    float _2600;
                    float _2601;
                    float _2602;
                    float _2603;
                    float _2604;
                    uint _2605;
                    _2599 = _2475;
                    _2600 = _2476;
                    _2601 = _2477;
                    _2602 = _2478;
                    _2603 = _2479;
                    _2604 = _2480;
                    _2605 = _2490;
                    float _2531;
                    float _2532;
                    float _2533;
                    float _2534;
                    float _2535;
                    float _2536;
                    for (;;)
                    {
                        uint _2609 = uint(findLSB(_2605)) + (_2481 << 5u);
                        uint _2606 = (_2605 + 4294967295u) & _2605;
                        uint _2611 = _2609 * 48u;
                        vec4 _2625 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2611)).x, texelFetch(g_PointLightRenderingBuffer, int(_2611 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2611 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2611 + 3u)).x));
                        uint _2631 = (_2609 * 48u) + 4u;
                        vec4 _2644 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2631)).x, texelFetch(g_PointLightRenderingBuffer, int(_2631 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2631 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2631 + 3u)).x));
                        uint _2650 = (_2609 * 48u) + 8u;
                        vec3 _2661 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2650)).x, texelFetch(g_PointLightRenderingBuffer, int(_2650 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2650 + 2u)).x));
                        float _2665 = _2625.x - _2185;
                        float _2666 = _2625.y - _2186;
                        float _2667 = _2625.z - _2187;
                        float _2668 = dot(vec3(_2665, _2666, _2667), vec3(_2665, _2666, _2667));
                        float _2671 = inversesqrt(_2668);
                        float _2672 = _2671 * _2665;
                        float _2673 = _2671 * _2666;
                        float _2674 = _2671 * _2667;
                        float _2675 = dot(vec3(_484, _487, _490), vec3(_2672, _2673, _2674));
                        float _2680 = 1.0 - (_2668 * _2625.w);
                        float _3964 = isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : max(_2680, 0.0));
                        float _2681 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
                        float _2682 = sqrt(_2668) * _2644.w;
                        float _2685 = 1.39999997615814208984375 / (_2682 + 1.39999997615814208984375);
                        float _2686 = _2685 * _2685;
                        float _2689 = ((1.0 - _2686) * _2675) + _2686;
                        float _2692 = _2682 * _2682;
                        float _2696 = ((isnan(0.0) ? _2689 : (isnan(_2689) ? 0.0 : max(_2689, 0.0))) * _2681) / ((_2692 * 0.699999988079071044921875) + 1.0);
                        float _2700 = (-0.0) - _2185;
                        float _2701 = (-0.0) - _2186;
                        float _2702 = (-0.0) - _2187;
                        float _2706 = inversesqrt(dot(vec3(_2700, _2701, _2702), vec3(_2700, _2701, _2702)));
                        float _2707 = _2706 * _2700;
                        float _2708 = _2706 * _2701;
                        float _2709 = _2706 * _2702;
                        float _2717 = exp2(log2(1.0 / ((_2692 * 3.5) + 5.0)) * 0.25);
                        float _2718 = 1.0 - _545;
                        float _2725 = sqrt(1.0 - ((1.0 - (_2718 * _2718)) * (1.0 - (_2717 * _2717))));
                        float _2726 = _2725 * _2725;
                        float _2727 = _2726 * _2726;
                        float _2728 = _2707 + _2672;
                        float _2729 = _2708 + _2673;
                        float _2730 = _2709 + _2674;
                        float _2734 = inversesqrt(dot(vec3(_2728, _2729, _2730), vec3(_2728, _2729, _2730)));
                        float _2738 = dot(vec3(_484, _487, _490), vec3(_2707, _2708, _2709));
                        float _3980 = isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0));
                        float _2741 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
                        float _2742 = dot(vec3(_484, _487, _490), vec3(_2734 * _2728, _2734 * _2729, _2734 * _2730));
                        float _3991 = isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : max(_2742, 0.0));
                        float _2745 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
                        float _2749 = ((_2745 * _2745) * (_2727 + (-1.0))) + 1.0;
                        float _2750 = _2685 * _2726;
                        float _2751 = _2750 * _2750;
                        float _2754 = ((1.0 - _2751) * _2675) + _2751;
                        float _4002 = isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0));
                        float _2755 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
                        float _2756 = 1.0 - _2726;
                        float _2766 = (0.5 / (((_2755 * ((_2741 * _2756) + _2726)) + 9.9999999392252902907785028219223e-09) + (((_2755 * _2756) + _2726) * _2741))) * _2755;
                        float _4013 = isnan(0.0) ? _2766 : (isnan(_2766) ? 0.0 : max(_2766, 0.0));
                        float _2777 = (((_2727 * 3.1415927410125732421875) * (isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0)))) / ((_2749 * _2749) * ((_2692 * 2.1991131305694580078125) + 3.141590118408203125))) * _2681;
                        _2534 = (_2696 * _2644.x) + _2602;
                        _2535 = (_2696 * _2644.y) + _2603;
                        _2536 = (_2696 * _2644.z) + _2604;
                        _2531 = (_2777 * _2661.x) + _2599;
                        _2532 = (_2777 * _2661.y) + _2600;
                        _2533 = (_2777 * _2661.z) + _2601;
                        if (_2606 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2599 = _2531;
                            _2600 = _2532;
                            _2601 = _2533;
                            _2602 = _2534;
                            _2603 = _2535;
                            _2604 = _2536;
                            _2605 = _2606;
                        }
                    }
                    frontier_phi_63_pred = _2536;
                    frontier_phi_63_pred_1 = _2535;
                    frontier_phi_63_pred_2 = _2534;
                    frontier_phi_63_pred_3 = _2533;
                    frontier_phi_63_pred_4 = _2532;
                    frontier_phi_63_pred_5 = _2531;
                }
                _2342 = frontier_phi_63_pred;
                _2340 = frontier_phi_63_pred_1;
                _2338 = frontier_phi_63_pred_2;
                _2336 = frontier_phi_63_pred_3;
                _2334 = frontier_phi_63_pred_4;
                _2332 = frontier_phi_63_pred_5;
                uint _2482 = _2481 + 1u;
                if (_2482 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2475 = _2332;
                    _2476 = _2334;
                    _2477 = _2336;
                    _2478 = _2338;
                    _2479 = _2340;
                    _2480 = _2342;
                    _2481 = _2482;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2331 = _2332;
            _2333 = _2334;
            _2335 = _2336;
            _2337 = _2338;
            _2339 = _2340;
            _2341 = _2342;
        }
        uvec4 _2345 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2346 = _2345.z;
        uint _2348 = (_2346 >> 8u) & 15u;
        float _2443;
        float _2445;
        float _2447;
        float _2449;
        float _2451;
        float _2453;
        if (((4294967295u << _2348) & _2231) == 0u)
        {
            _2443 = _2331;
            _2445 = _2333;
            _2447 = _2335;
            _2449 = _2337;
            _2451 = _2339;
            _2453 = _2341;
        }
        else
        {
            float _2468 = inversesqrt(dot(vec3(_2185, _2186, _2187), vec3(_2185, _2186, _2187)));
            float _2469 = _2468 * _2185;
            float _2470 = _2468 * _2186;
            float _2471 = _2468 * _2187;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2348 < ((_2346 >> 12u) & 15u))
            {
                float _2444;
                float _2446;
                float _2448;
                float _2450;
                float _2452;
                float _2454;
                float _2582 = _2331;
                float _2583 = _2333;
                float _2584 = _2335;
                float _2585 = _2337;
                float _2586 = _2339;
                float _2587 = _2341;
                uint _2588 = _2348;
                uint _2597;
                bool _2598;
                for (;;)
                {
                    _2597 = texelFetch(g_lightClassification, int((((_2225 << 5u) + (_2211 << 9u)) + (_2588 << 2u)) >> 2u)).x;
                    _2598 = _2597 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2598)
                    {
                        frontier_phi_69_pred = _2587;
                        frontier_phi_69_pred_1 = _2586;
                        frontier_phi_69_pred_2 = _2585;
                        frontier_phi_69_pred_3 = _2584;
                        frontier_phi_69_pred_4 = _2583;
                        frontier_phi_69_pred_5 = _2582;
                    }
                    else
                    {
                        float _2782;
                        float _2783;
                        float _2784;
                        float _2785;
                        float _2786;
                        float _2787;
                        float _3078;
                        float _3079;
                        float _3080;
                        float _3081;
                        float _3082;
                        float _3083;
                        float _2795 = _2582;
                        float _2796 = _2583;
                        float _2797 = _2584;
                        float _2798 = _2585;
                        float _2799 = _2586;
                        float _2800 = _2587;
                        uint _2801 = _2597;
                        uint _2802;
                        vec4 _2827;
                        float _2828;
                        vec4 _2843;
                        vec3 _2855;
                        vec4 _2871;
                        vec4 _2887;
                        float _2934;
                        bool _2935;
                        for (;;)
                        {
                            uint _2812 = ((_2588 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2801));
                            _2802 = (_2801 + 4294967295u) & _2801;
                            uint _2814 = _2812 * 40u;
                            _2827 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2814)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2814 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2814 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2814 + 3u)).x));
                            _2828 = _2827.w;
                            uint _2830 = (_2812 * 40u) + 4u;
                            _2843 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2830)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2830 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2830 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2830 + 3u)).x));
                            uint _2845 = (_2812 * 40u) + 8u;
                            _2855 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2845)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2845 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2845 + 2u)).x));
                            uint _2858 = (_2812 * 40u) + 16u;
                            _2871 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2858)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2858 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2858 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2858 + 3u)).x));
                            uint _2874 = (_2812 * 40u) + 20u;
                            _2887 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2874)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2874 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2874 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2874 + 3u)).x));
                            uint _2890 = (_2812 * 40u) + 24u;
                            vec4 _2903 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2890)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2890 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2890 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2890 + 3u)).x));
                            uint _2909 = (_2812 * 40u) + 28u;
                            vec4 _2922 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2909)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2909 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2909 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2909 + 3u)).x));
                            _2934 = fma(_2187, _2922.z, fma(_2186, _2922.y, _2922.x * _2185)) + _2922.w;
                            _2935 = !((fma(_2187, _2903.z, fma(_2186, _2903.y, _2903.x * _2185)) + _2903.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2935)
                            {
                                float _2962 = _2827.x - _2185;
                                float _2963 = _2827.y - _2186;
                                float _2964 = _2827.z - _2187;
                                float _2965 = dot(vec3(_2962, _2963, _2964), vec3(_2962, _2963, _2964));
                                float _2968 = inversesqrt(_2965);
                                float _2969 = _2968 * _2962;
                                float _2970 = _2968 * _2963;
                                float _2971 = _2968 * _2964;
                                float _2975 = 1.0 - (_2965 / (_2828 * _2828));
                                float _4024 = isnan(0.0) ? _2975 : (isnan(_2975) ? 0.0 : max(_2975, 0.0));
                                float _2976 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
                                float _2980 = sqrt(_2965) * _2843.w;
                                float _2982 = 1.39999997615814208984375 / (_2980 + 1.39999997615814208984375);
                                float _2983 = _2982 * _2982;
                                float _2986 = ((1.0 - _2983) * dot(vec3(_2969, _2970, _2971), vec3(_484, _487, _490))) + _2983;
                                float _2989 = _2980 * _2980;
                                float _2993 = (fma(_2187, _2871.z, fma(_2186, _2871.y, _2871.x * _2185)) + _2871.w) / _2934;
                                float _2994 = (fma(_2187, _2887.z, fma(_2186, _2887.y, _2887.x * _2185)) + _2887.w) / _2934;
                                float _2998 = 1.0 - dot(vec2(_2993, _2994), vec2(_2993, _2994));
                                float _4040 = isnan(0.0) ? _2998 : (isnan(_2998) ? 0.0 : max(_2998, 0.0));
                                float _2999 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
                                float _3000 = _2999 * (((isnan(0.0) ? _2986 : (isnan(_2986) ? 0.0 : max(_2986, 0.0))) * _2976) / ((_2989 * 0.699999988079071044921875) + 1.0));
                                float _3012 = exp2(log2(1.0 / ((_2989 * 3.5) + 5.0)) * 0.25);
                                float _3013 = 1.0 - _545;
                                float _3020 = sqrt(1.0 - ((1.0 - (_3013 * _3013)) * (1.0 - (_3012 * _3012))));
                                float _3021 = _3020 * _3020;
                                float _3022 = _3021 * _3021;
                                float _3023 = _2969 - _2469;
                                float _3024 = _2970 - _2470;
                                float _3025 = _2971 - _2471;
                                float _3029 = inversesqrt(dot(vec3(_3023, _3024, _3025), vec3(_3023, _3024, _3025)));
                                float _3033 = dot(vec3(_484, _487, _490), vec3((-0.0) - _2469, (-0.0) - _2470, (-0.0) - _2471));
                                float _4051 = isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : max(_3033, 0.0));
                                float _3036 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
                                float _3037 = dot(vec3(_484, _487, _490), vec3(_3029 * _3023, _3029 * _3024, _3029 * _3025));
                                float _4062 = isnan(0.0) ? _3037 : (isnan(_3037) ? 0.0 : max(_3037, 0.0));
                                float _3040 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
                                float _3044 = ((_3040 * _3040) * (_3022 + (-1.0))) + 1.0;
                                float _3045 = _2982 * _3021;
                                float _3046 = _3045 * _3045;
                                float _3052 = ((1.0 - _3046) * dot(vec3(_484, _487, _490), vec3(_2969, _2970, _2971))) + _3046;
                                float _4073 = isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : max(_3052, 0.0));
                                float _3053 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
                                float _3054 = 1.0 - _3021;
                                float _3064 = (0.5 / (((_3053 * ((_3036 * _3054) + _3021)) + 9.9999999392252902907785028219223e-09) + (((_3053 * _3054) + _3021) * _3036))) * _3053;
                                float _4084 = isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : max(_3064, 0.0));
                                float _3074 = (_2999 * _2976) * (((_3022 * 3.1415927410125732421875) * (isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0)))) / ((_3044 * _3044) * ((_2989 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3000 * _2843.z;
                                frontier_phi_75_pred_1 = _3000 * _2843.y;
                                frontier_phi_75_pred_2 = _3000 * _2843.x;
                                frontier_phi_75_pred_3 = _3074 * _2855.z;
                                frontier_phi_75_pred_4 = _3074 * _2855.y;
                                frontier_phi_75_pred_5 = _3074 * _2855.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3083 = frontier_phi_75_pred;
                            _3082 = frontier_phi_75_pred_1;
                            _3081 = frontier_phi_75_pred_2;
                            _3080 = frontier_phi_75_pred_3;
                            _3079 = frontier_phi_75_pred_4;
                            _3078 = frontier_phi_75_pred_5;
                            _2785 = _3081 + _2798;
                            _2786 = _3082 + _2799;
                            _2787 = _3083 + _2800;
                            _2782 = _3078 + _2795;
                            _2783 = _3079 + _2796;
                            _2784 = _3080 + _2797;
                            if (_2802 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2795 = _2782;
                                _2796 = _2783;
                                _2797 = _2784;
                                _2798 = _2785;
                                _2799 = _2786;
                                _2800 = _2787;
                                _2801 = _2802;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2787;
                        frontier_phi_69_pred_1 = _2786;
                        frontier_phi_69_pred_2 = _2785;
                        frontier_phi_69_pred_3 = _2784;
                        frontier_phi_69_pred_4 = _2783;
                        frontier_phi_69_pred_5 = _2782;
                    }
                    _2454 = frontier_phi_69_pred;
                    _2452 = frontier_phi_69_pred_1;
                    _2450 = frontier_phi_69_pred_2;
                    _2448 = frontier_phi_69_pred_3;
                    _2446 = frontier_phi_69_pred_4;
                    _2444 = frontier_phi_69_pred_5;
                    uint _2589 = _2588 + 1u;
                    if (_2589 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2582 = _2444;
                        _2583 = _2446;
                        _2584 = _2448;
                        _2585 = _2450;
                        _2586 = _2452;
                        _2587 = _2454;
                        _2588 = _2589;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2454;
                frontier_phi_57_58_ladder_1 = _2452;
                frontier_phi_57_58_ladder_2 = _2450;
                frontier_phi_57_58_ladder_3 = _2448;
                frontier_phi_57_58_ladder_4 = _2446;
                frontier_phi_57_58_ladder_5 = _2444;
            }
            else
            {
                frontier_phi_57_58_ladder = _2341;
                frontier_phi_57_58_ladder_1 = _2339;
                frontier_phi_57_58_ladder_2 = _2337;
                frontier_phi_57_58_ladder_3 = _2335;
                frontier_phi_57_58_ladder_4 = _2333;
                frontier_phi_57_58_ladder_5 = _2331;
            }
            _2443 = frontier_phi_57_58_ladder_5;
            _2445 = frontier_phi_57_58_ladder_4;
            _2447 = frontier_phi_57_58_ladder_3;
            _2449 = frontier_phi_57_58_ladder_2;
            _2451 = frontier_phi_57_58_ladder_1;
            _2453 = frontier_phi_57_58_ladder;
        }
        float _2458 = isnan(1.0) ? _529 : (isnan(_529) ? 1.0 : min(_529, 1.0));
        _2243 = (_2458 * _2449) + _1699;
        _2245 = (_2458 * _2451) + _1701;
        _2247 = (_2458 * _2453) + _1703;
        _2249 = ((_2443 * 0.039999999105930328369140625) * _2458) + _2029;
        _2251 = ((_2445 * 0.039999999105930328369140625) * _2458) + _2031;
        _2253 = ((_2447 * 0.039999999105930328369140625) * _2458) + _2033;
    }
    else
    {
        _2243 = _1699;
        _2245 = _1701;
        _2247 = _1703;
        _2249 = _2029;
        _2251 = _2031;
        _2253 = _2033;
    }
    float _4100 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _4111 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _4122 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    uint _2273 = _503 + 6u;
    float _2281 = _462 / cbSceneParam._m0[86u].x;
    float _2282 = _463 / cbSceneParam._m0[86u].y;
    vec4 _2296 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2281, _2282, (log2((isnan(cbSceneParam._m0[77u].w) ? _395 : (isnan(_395) ? cbSceneParam._m0[77u].w : min(_395, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2298 = _2296.x;
    float _2299 = _2296.y;
    float _2300 = _2296.z;
    float _2301 = _2296.w;
    float _2393;
    float _2395;
    float _2397;
    float _2399;
    if (_395 > cbSceneParam._m0[78u].w)
    {
        float _2356 = isnan(_395) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _395 : min(cbSceneParam._m0[80u].w, _395));
        float _2357 = _2356 / _395;
        float _2368 = _2357 * _447;
        float _2369 = _448 * _2357;
        float _2370 = (-0.0) - _2369;
        float _2371 = _2357 * _449;
        float _2373 = (cbSceneParam._m0[77u].w * _2370) / _2356;
        float _2374 = _2373 + cbSceneParam._m0[79u].w;
        float _2375 = cbSceneParam._m0[79u].w - _2369;
        float _2381 = sqrt(((_2368 * _2368) + (_2369 * _2369)) + (_2371 * _2371));
        float _2384 = (1.0 - (cbSceneParam._m0[77u].w / _2356)) * _2381;
        float _2389 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2391 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2544;
        if (abs((_2370 - _2373) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2544 = ((((_2374 > 0.0) ? exp2(_2389 * _2374) : (2.0 - exp2(_2391 * _2374))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2384;
        }
        else
        {
            float _2504 = 1.0 / cbSceneParam._m0[80u].x;
            float _2505 = isnan(_2375) ? _2374 : (isnan(_2374) ? _2375 : max(_2374, _2375));
            float _2506 = isnan(_2375) ? _2374 : (isnan(_2374) ? _2375 : min(_2374, _2375));
            float _2515 = isnan(0.0) ? _2505 : (isnan(_2505) ? 0.0 : min(_2505, 0.0));
            float _2516 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : min(_2506, 0.0));
            _2544 = ((abs(_2381 / _2370) * cbSceneParam._m0[80u].y) * ((((_2515 - _2516) * 2.0) - ((exp2(_2389 * (isnan(0.0) ? _2505 : (isnan(_2505) ? 0.0 : max(_2505, 0.0)))) - exp2(_2389 * (isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0))))) * _2504)) - ((exp2(_2391 * _2515) - exp2(_2391 * _2516)) * _2504))) + (_2384 * cbSceneParam._m0[80u].z);
        }
        vec4 _2546 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2281, _2282, 1.0), 0.0);
        float _2555 = exp2((_2544 * (-1.44269502162933349609375)) * (1.0 - _2546.w));
        float _2556 = log2(_2555);
        float _2572 = log2(_2301);
        _2393 = (exp2(_2572 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2556 * cbSceneParam._m0[78u].x)) * _2546.x) / cbSceneParam._m0[78u].x)) + _2298;
        _2395 = (exp2(_2572 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2556 * cbSceneParam._m0[78u].y)) * _2546.y) / cbSceneParam._m0[78u].y)) + _2299;
        _2397 = (exp2(_2572 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2556 * cbSceneParam._m0[78u].z)) * _2546.z) / cbSceneParam._m0[78u].z)) + _2300;
        _2399 = _2555 * _2301;
    }
    else
    {
        _2393 = _2298;
        _2395 = _2299;
        _2397 = _2300;
        _2399 = _2301;
    }
    float _2411 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2412 = _2411 == 3.0;
    float _2413 = log2(_2399);
    float _2420 = exp2(_2413 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0))) * (_2243 + ((isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0))) * _529))) + ((_2249 + ((isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0))) * _1336)) * cbPerFrame._m0[3u].x));
    float _2421 = exp2(_2413 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0))) * (_2245 + ((isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0))) * _529))) + ((_2251 + ((isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0))) * _1336)) * cbPerFrame._m0[3u].x));
    float _2422 = exp2(_2413 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0))) * (_2247 + ((isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0))) * _529))) + ((_2253 + ((isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0))) * _1336)) * cbPerFrame._m0[3u].x));
    float _2431 = (_2411 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2431 * (_2412 ? _2420 : (_2420 + (cbSceneParam._m0[72u].w * _2393)));
    SV_Target.y = _2431 * (_2412 ? _2421 : (_2421 + (cbSceneParam._m0[72u].w * _2395)));
    SV_Target.z = _2431 * (_2412 ? _2422 : (_2422 + (cbSceneParam._m0[72u].w * _2397)));
    SV_Target.w = cbInstanceData._m0[_2273].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2273].w;
}


