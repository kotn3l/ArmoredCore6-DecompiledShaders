#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _956;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _192 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _193 = _192 * _184;
    float _194 = _192 * _185;
    float _195 = _192 * _186;
    float _199 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _200 = _199 * NORMAL.x;
    float _201 = _199 * NORMAL.y;
    float _202 = _199 * NORMAL.z;
    float _206 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _207 = _206 * TANGENT.x;
    float _208 = _206 * TANGENT.y;
    float _209 = _206 * TANGENT.z;
    float _214;
    float _215;
    float _216;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _214 = (-0.0) - _200;
        _215 = (-0.0) - _201;
        _216 = (-0.0) - _202;
    }
    else
    {
        _214 = _200;
        _215 = _201;
        _216 = _202;
    }
    vec4 _242 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _248 = _242.x * cbMtdParam._m0[9u].x;
    float _249 = _242.y * cbMtdParam._m0[9u].y;
    float _250 = _242.z * cbMtdParam._m0[9u].z;
    vec4 _268 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _272 = _268.z;
    float _276 = (_268.x * 2.0) + (-1.0);
    float _278 = (_268.y * 2.0) + (-1.0);
    float _279 = dot(vec2(_276, _278), vec2(_276, _278));
    float _3314 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    float _285 = sqrt(1.0 - (isnan(1.0) ? _3314 : (isnan(_3314) ? 1.0 : min(_3314, 1.0))));
    float _288 = fma(_285, _214, fma(_278, _207, _276 * _193));
    float _291 = fma(_285, _215, fma(_278, _208, _276 * _194));
    float _294 = fma(_285, _216, fma(_278, _209, _276 * _195));
    float _298 = inversesqrt(dot(vec3(_288, _291, _294), vec3(_288, _291, _294)));
    float _327 = (cbMtdParam._m0[12u].x + dot(vec4(_298 * _288, _298 * _291, _298 * _294, 0.0), vec4(cbMtdParam._m0[13u].xyz, 0.0))) - (texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w)).x * cbMtdParam._m0[12u].y);
    float _3325 = isnan(0.0) ? _327 : (isnan(_327) ? 0.0 : max(_327, 0.0));
    float _328 = isnan(1.0) ? _3325 : (isnan(_3325) ? 1.0 : min(_3325, 1.0));
    float _335 = (_328 * (cbMtdParam._m0[10u].x - _248)) + _248;
    float _336 = (_328 * (cbMtdParam._m0[10u].y - _249)) + _249;
    float _337 = (_328 * (cbMtdParam._m0[10u].z - _250)) + _250;
    vec4 _349 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _351 = _349.x;
    float _353 = _351 - (_351 * _328);
    vec4 _365 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _372 = (_365.x * 2.0) + (-1.0);
    float _373 = (_365.y * 2.0) + (-1.0);
    float _374 = dot(vec2(_372, _373), vec2(_372, _373));
    float _3336 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    float _382 = ((_365.z - _272) * _328) + _272;
    float _394 = (((_372 - _276) + (cbMtdParam._m0[12u].w * _276)) * _328) + _276;
    float _395 = (((_373 - _278) + (cbMtdParam._m0[12u].w * _278)) * _328) + _278;
    float _396 = ((sqrt(1.0 - (isnan(1.0) ? _3336 : (isnan(_3336) ? 1.0 : min(_3336, 1.0)))) - _285) * _328) + _285;
    float _399 = fma(_396, _214, fma(_395, _207, _394 * _193));
    float _402 = fma(_396, _215, fma(_395, _208, _394 * _194));
    float _405 = fma(_396, _216, fma(_395, _209, _394 * _195));
    float _409 = inversesqrt(dot(vec3(_399, _402, _405), vec3(_399, _402, _405)));
    float _410 = _409 * _399;
    float _411 = _409 * _402;
    float _412 = _409 * _405;
    float _3347 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    float _413 = isnan(1.0) ? _3347 : (isnan(_3347) ? 1.0 : min(_3347, 1.0));
    float _3358 = isnan(0.0) ? _335 : (isnan(_335) ? 0.0 : max(_335, 0.0));
    float _3369 = isnan(0.0) ? _336 : (isnan(_336) ? 0.0 : max(_336, 0.0));
    float _3380 = isnan(0.0) ? _337 : (isnan(_337) ? 0.0 : max(_337, 0.0));
    float _3391 = isnan(0.0) ? _353 : (isnan(_353) ? 0.0 : max(_353, 0.0));
    float _417 = isnan(1.0) ? _3391 : (isnan(_3391) ? 1.0 : min(_3391, 1.0));
    float _433 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _475 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _485 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _475);
    float _486 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _475);
    float _487 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _475);
    float _491 = inversesqrt(dot(vec3(_485, _486, _487), vec3(_485, _486, _487)));
    float _492 = _485 * _491;
    float _493 = _486 * _491;
    float _494 = _487 * _491;
    float _500 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _501 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _522 = fma(_412, cbSceneParam._m0[5u].z, fma(_411, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _410));
    float _525 = fma(_412, cbSceneParam._m0[6u].z, fma(_411, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _410));
    float _528 = fma(_412, cbSceneParam._m0[7u].z, fma(_411, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _410));
    uint _541 = uint(roundEven(NORMAL.w)) * 13u;
    uint _543 = (_541 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _549 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3358 : (isnan(_3358) ? 1.0 : min(_3358, 1.0)))) * cbInstanceData._m0[_543].x;
    float _550 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3369 : (isnan(_3369) ? 1.0 : min(_3369, 1.0)))) * cbInstanceData._m0[_543].y;
    float _551 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3380 : (isnan(_3380) ? 1.0 : min(_3380, 1.0)))) * cbInstanceData._m0[_543].z;
    float _3402 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _552 = isnan(1.0) ? _3402 : (isnan(_3402) ? 1.0 : min(_3402, 1.0));
    float _3413 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _553 = isnan(1.0) ? _3413 : (isnan(_3413) ? 1.0 : min(_3413, 1.0));
    float _3424 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
    float _554 = isnan(1.0) ? _3424 : (isnan(_3424) ? 1.0 : min(_3424, 1.0));
    float _555 = 1.0 - _417;
    float _556 = _552 * _555;
    float _557 = _553 * _555;
    float _558 = _554 * _555;
    float _563 = (_552 + (-0.039999999105930328369140625)) * _417;
    float _564 = (_553 + (-0.039999999105930328369140625)) * _417;
    float _565 = (_554 + (-0.039999999105930328369140625)) * _417;
    float _566 = _563 + 0.039999999105930328369140625;
    float _568 = _564 + 0.039999999105930328369140625;
    float _569 = _565 + 0.039999999105930328369140625;
    vec4 _578 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _500, cbSceneParam._m0[86u].y * _501));
    float _581 = _578.x * TEXCOORD_3.w;
    float _582 = dot(vec3(_410, _411, _412), vec3(_492, _493, _494));
    float _585 = _582 * 2.0;
    float _589 = (_585 * _410) - _492;
    float _590 = (_585 * _411) - _493;
    float _591 = (_585 * _412) - _494;
    float _595 = abs(dot(vec3(_492, _493, _494), vec3(_410, _411, _412)));
    float _3435 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _597 = sqrt(_413);
    float _610 = exp2((_597 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3435 : (isnan(_3435) ? 1.0 : min(_3435, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_597 * 3.0));
    float _616 = (1.0 - _610) * ((_597 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _617 = _610 * _597;
    float _645 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _649 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _653 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _955;
    float _957;
    float _958;
    float _959;
    float _960;
    float _961;
    float _962;
    float _963;
    float _964;
    float _965;
    float _966;
    float _967;
    float _968;
    float _969;
    float _970;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _680 = fma(_653, cbModelParam._m0[26u].z, fma(_649, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _645));
        float _684 = fma(_653, cbModelParam._m0[27u].z, fma(_649, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _645));
        float _688 = fma(_653, cbModelParam._m0[28u].z, fma(_649, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _645));
        float _713 = _645 + _410;
        float _714 = _649 + _411;
        float _715 = _653 + _412;
        float _725 = fma(_715, cbModelParam._m0[26u].z, fma(_714, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _713)) - _680;
        float _726 = fma(_715, cbModelParam._m0[27u].z, fma(_714, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _713)) - _684;
        float _727 = fma(_715, cbModelParam._m0[28u].z, fma(_714, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _713)) - _688;
        float _731 = inversesqrt(dot(vec3(_725, _726, _727), vec3(_725, _726, _727)));
        float _744 = ((_731 * _725) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_680 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _745 = ((_731 * _726) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_684 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _746 = ((_731 * _727) / cbModelParam._m0[34u].z) + ((((((_688 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _749 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_744, _745, _746), 0.0);
        vec4 _756 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_744, _745, _746), 0.0);
        vec4 _763 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_744, _745, _746), 0.0);
        vec4 _770 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_744, _745, _746), 0.0);
        float _783 = exp2((_749.w + (-0.5)) * 20.0) * 2.0;
        float _784 = _783 * (_749.x + (-0.5));
        float _785 = _783 * (_749.y + (-0.5));
        float _786 = _783 * (_749.z + (-0.5));
        float _793 = exp2((_756.w + (-0.5)) * 20.0) * 2.0;
        float _794 = _793 * (_756.x + (-0.5));
        float _795 = _793 * (_756.y + (-0.5));
        float _796 = _793 * (_756.z + (-0.5));
        float _803 = exp2((_763.w + (-0.5)) * 20.0) * 2.0;
        float _804 = _803 * (_763.x + (-0.5));
        float _805 = _803 * (_763.y + (-0.5));
        float _806 = _803 * (_763.z + (-0.5));
        float _813 = exp2((_770.w + (-0.5)) * 20.0) * 2.0;
        float _814 = _813 * (_770.x + (-0.5));
        float _815 = _813 * (_770.y + (-0.5));
        float _816 = _813 * (_770.z + (-0.5));
        float _817 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
        float _818 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
        float _819 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
        float _820 = _784 * 0.5;
        float _821 = _794 * 0.5;
        float _822 = _804 * 0.5;
        float _823 = dot(vec3(_820, _821, _822), vec3(_820, _821, _822));
        float _828 = (_823 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_823);
        float _837 = (dot(vec3(_410, _411, _412), vec3(_828 * _820, _828 * _821, _828 * _822)) + 1.0) * 0.5;
        float _3461 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
        float _847 = sqrt(((_821 * _821) + (_820 * _820)) + (_822 * _822)) / (_817 + 9.9999997473787516355514526367188e-06);
        float _3472 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
        float _848 = isnan(1.0) ? _3472 : (isnan(_3472) ? 1.0 : min(_3472, 1.0));
        float _849 = _848 * 2.0;
        float _853 = (1.0 - _848) / (_848 + 1.0);
        float _3483 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
        float _854 = isnan(1.0) ? _3483 : (isnan(_3483) ? 1.0 : min(_3483, 1.0));
        float _863 = ((((1.0 - _854) * (_849 + 2.0)) * exp2(log2(isnan(1.0) ? _3461 : (isnan(_3461) ? 1.0 : min(_3461, 1.0))) * (_849 + 1.0))) + _854) * _817;
        float _864 = _785 * 0.5;
        float _865 = _795 * 0.5;
        float _866 = _805 * 0.5;
        float _867 = dot(vec3(_864, _865, _866), vec3(_864, _865, _866));
        float _872 = (_867 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_867);
        float _880 = (dot(vec3(_410, _411, _412), vec3(_872 * _864, _872 * _865, _872 * _866)) + 1.0) * 0.5;
        float _3494 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
        float _889 = sqrt(((_865 * _865) + (_864 * _864)) + (_866 * _866)) / (_818 + 9.9999997473787516355514526367188e-06);
        float _3505 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
        float _890 = isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0));
        float _891 = _890 * 2.0;
        float _895 = (1.0 - _890) / (_890 + 1.0);
        float _3516 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
        float _896 = isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0));
        float _905 = ((((1.0 - _896) * (_891 + 2.0)) * exp2(log2(isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0))) * (_891 + 1.0))) + _896) * _818;
        float _906 = _786 * 0.5;
        float _907 = _796 * 0.5;
        float _908 = _806 * 0.5;
        float _909 = dot(vec3(_906, _907, _908), vec3(_906, _907, _908));
        float _914 = (_909 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_909);
        float _922 = (dot(vec3(_410, _411, _412), vec3(_914 * _906, _914 * _907, _914 * _908)) + 1.0) * 0.5;
        float _3527 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
        float _931 = sqrt(((_907 * _907) + (_906 * _906)) + (_908 * _908)) / (_819 + 9.9999997473787516355514526367188e-06);
        float _3538 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        float _932 = isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0));
        float _933 = _932 * 2.0;
        float _937 = (1.0 - _932) / (_932 + 1.0);
        float _3549 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
        float _938 = isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0));
        float _947 = ((((1.0 - _938) * (_933 + 2.0)) * exp2(log2(isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0))) * (_933 + 1.0))) + _938) * _819;
        _955 = _786;
        _957 = _785;
        _958 = _784;
        _959 = _796;
        _960 = _795;
        _961 = _794;
        _962 = _806;
        _963 = _805;
        _964 = _804;
        _965 = _819;
        _966 = _818;
        _967 = _817;
        _968 = cbModelParam._m0[36u].z * (isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0)));
        _969 = cbModelParam._m0[36u].z * (isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0)));
        _970 = cbModelParam._m0[36u].z * (isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0)));
    }
    else
    {
        _955 = _956;
        _957 = _956;
        _958 = _956;
        _959 = _956;
        _960 = _956;
        _961 = _956;
        _962 = _956;
        _963 = _956;
        _964 = _956;
        _965 = _956;
        _966 = _956;
        _967 = _956;
        _968 = 0.0;
        _969 = 0.0;
        _970 = 0.0;
    }
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _996 = fma(_653, cbModelParam._m0[30u].z, fma(_649, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _645));
        float _1000 = fma(_653, cbModelParam._m0[31u].z, fma(_649, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _645));
        float _1004 = fma(_653, cbModelParam._m0[32u].z, fma(_649, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _645));
        float _1027 = _645 + _410;
        float _1028 = _649 + _411;
        float _1029 = _653 + _412;
        float _1039 = fma(_1029, cbModelParam._m0[30u].z, fma(_1028, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1027)) - _996;
        float _1040 = fma(_1029, cbModelParam._m0[31u].z, fma(_1028, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1027)) - _1000;
        float _1041 = fma(_1029, cbModelParam._m0[32u].z, fma(_1028, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1027)) - _1004;
        float _1045 = inversesqrt(dot(vec3(_1039, _1040, _1041), vec3(_1039, _1040, _1041)));
        float _1058 = ((_1045 * _1039) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_996 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1059 = ((_1045 * _1040) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1000 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1060 = ((_1045 * _1041) / cbModelParam._m0[35u].z) + ((((((_1004 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1062 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1058, _1059, _1060), 0.0);
        vec4 _1069 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1058, _1059, _1060), 0.0);
        vec4 _1076 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1058, _1059, _1060), 0.0);
        vec4 _1083 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1058, _1059, _1060), 0.0);
        float _1095 = exp2((_1062.w + (-0.5)) * 20.0) * 2.0;
        float _1096 = _1095 * (_1062.x + (-0.5));
        float _1097 = _1095 * (_1062.y + (-0.5));
        float _1098 = _1095 * (_1062.z + (-0.5));
        float _1105 = exp2((_1069.w + (-0.5)) * 20.0) * 2.0;
        float _1106 = _1105 * (_1069.x + (-0.5));
        float _1107 = _1105 * (_1069.y + (-0.5));
        float _1108 = _1105 * (_1069.z + (-0.5));
        float _1115 = exp2((_1076.w + (-0.5)) * 20.0) * 2.0;
        float _1116 = _1115 * (_1076.x + (-0.5));
        float _1117 = _1115 * (_1076.y + (-0.5));
        float _1118 = _1115 * (_1076.z + (-0.5));
        float _1125 = exp2((_1083.w + (-0.5)) * 20.0) * 2.0;
        float _1126 = _1125 * (_1083.x + (-0.5));
        float _1127 = _1125 * (_1083.y + (-0.5));
        float _1128 = _1125 * (_1083.z + (-0.5));
        float _1129 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1130 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1131 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1132 = _1096 * 0.5;
        float _1133 = _1106 * 0.5;
        float _1134 = _1116 * 0.5;
        float _1135 = dot(vec3(_1132, _1133, _1134), vec3(_1132, _1133, _1134));
        float _1140 = (_1135 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1135);
        float _1148 = (dot(vec3(_410, _411, _412), vec3(_1140 * _1132, _1140 * _1133, _1140 * _1134)) + 1.0) * 0.5;
        float _3590 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1157 = sqrt(((_1133 * _1133) + (_1132 * _1132)) + (_1134 * _1134)) / (_1129 + 9.9999997473787516355514526367188e-06);
        float _3601 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1158 = isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0));
        float _1159 = _1158 * 2.0;
        float _1163 = (1.0 - _1158) / (_1158 + 1.0);
        float _3612 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1164 = isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0));
        float _1173 = ((((1.0 - _1164) * (_1159 + 2.0)) * exp2(log2(isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0))) * (_1159 + 1.0))) + _1164) * _1129;
        float _1174 = _1097 * 0.5;
        float _1175 = _1107 * 0.5;
        float _1176 = _1117 * 0.5;
        float _1177 = dot(vec3(_1174, _1175, _1176), vec3(_1174, _1175, _1176));
        float _1182 = (_1177 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1177);
        float _1190 = (dot(vec3(_410, _411, _412), vec3(_1182 * _1174, _1182 * _1175, _1182 * _1176)) + 1.0) * 0.5;
        float _3623 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1199 = sqrt(((_1175 * _1175) + (_1174 * _1174)) + (_1176 * _1176)) / (_1130 + 9.9999997473787516355514526367188e-06);
        float _3634 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1200 = isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0));
        float _1201 = _1200 * 2.0;
        float _1205 = (1.0 - _1200) / (_1200 + 1.0);
        float _3645 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1206 = isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0));
        float _1215 = ((((1.0 - _1206) * (_1201 + 2.0)) * exp2(log2(isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0))) * (_1201 + 1.0))) + _1206) * _1130;
        float _1216 = _1098 * 0.5;
        float _1217 = _1108 * 0.5;
        float _1218 = _1118 * 0.5;
        float _1219 = dot(vec3(_1216, _1217, _1218), vec3(_1216, _1217, _1218));
        float _1224 = (_1219 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1219);
        float _1232 = (dot(vec3(_410, _411, _412), vec3(_1224 * _1216, _1224 * _1217, _1224 * _1218)) + 1.0) * 0.5;
        float _3656 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1241 = sqrt(((_1217 * _1217) + (_1216 * _1216)) + (_1218 * _1218)) / (_1131 + 9.9999997473787516355514526367188e-06);
        float _3667 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1242 = isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0));
        float _1243 = _1242 * 2.0;
        float _1247 = (1.0 - _1242) / (_1242 + 1.0);
        float _3678 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1248 = isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0));
        float _1257 = ((((1.0 - _1248) * (_1243 + 2.0)) * exp2(log2(isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0))) * (_1243 + 1.0))) + _1248) * _1131;
        _1265 = _1098;
        _1266 = _1097;
        _1267 = _1096;
        _1268 = _1108;
        _1269 = _1107;
        _1270 = _1106;
        _1271 = _1118;
        _1272 = _1117;
        _1273 = _1116;
        _1274 = _1131;
        _1275 = _1130;
        _1276 = _1129;
        _1277 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0)));
        _1278 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0)));
        _1279 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0)));
    }
    else
    {
        _1265 = _956;
        _1266 = _956;
        _1267 = _956;
        _1268 = _956;
        _1269 = _956;
        _1270 = _956;
        _1271 = _956;
        _1272 = _956;
        _1273 = _956;
        _1274 = _956;
        _1275 = _956;
        _1276 = _956;
        _1277 = 0.0;
        _1278 = 0.0;
        _1279 = 0.0;
    }
    float _1289 = (cbModelParam._m0[1u].x * (_1277 - _968)) + _968;
    float _1290 = (cbModelParam._m0[1u].x * (_1278 - _969)) + _969;
    float _1291 = (cbModelParam._m0[1u].x * (_1279 - _970)) + _970;
    float _1312 = fma(_1291, cbSceneParam._m0[89u].z, fma(_1290, cbSceneParam._m0[89u].y, _1289 * cbSceneParam._m0[89u].x));
    float _1315 = fma(_1291, cbSceneParam._m0[90u].z, fma(_1290, cbSceneParam._m0[90u].y, _1289 * cbSceneParam._m0[90u].x));
    float _1318 = fma(_1291, cbSceneParam._m0[91u].z, fma(_1290, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1289));
    float _1333 = _589 * 0.5;
    float _1334 = _590 * 0.5;
    float _1335 = _591 * 0.5;
    float _1336 = dot(vec4(_1333, _1334, _1335, 1.0), vec4(_1267, _1270, _1273, _1276));
    float _1339 = dot(vec4(_1333, _1334, _1335, 1.0), vec4(_1266, _1269, _1272, _1275));
    float _1342 = dot(vec4(_1333, _1334, _1335, 1.0), vec4(_1265, _1268, _1271, _1274));
    float _1376;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1349 = dot(vec4(_1333, _1334, _1335, 1.0), vec4(_955, _959, _962, _965));
        float _1353 = dot(vec4(_1333, _1334, _1335, 1.0), vec4(_957, _960, _963, _966));
        float _1357 = dot(vec4(_1333, _1334, _1335, 1.0), vec4(_958, _961, _964, _967));
        float _1364 = dot(vec4(cbModelParam._m0[39u]), vec4(_1333, _1334, _1335, 1.0));
        _1376 = dot(vec3(isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0)), isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0)), isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1364) ? 0.0 : (isnan(0.0) ? _1364 : max(0.0, _1364))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1376 = 1.0;
    }
    float _1387;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1378 = dot(vec4(cbModelParam._m0[40u]), vec4(_1333, _1334, _1335, 1.0));
        _1387 = dot(vec3(isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0)), isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0)), isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1378) ? 0.0 : (isnan(0.0) ? _1378 : max(0.0, _1378))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1387 = 1.0;
    }
    float _1391 = (_1387 * cbModelParam._m0[1u].x) + (_1376 * (1.0 - cbModelParam._m0[1u].x));
    float _1401 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _413);
    float _1402 = isnan(_1401) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1401 : min(cbModelParam._m0[25u].z, _1401));
    float _1483;
    float _1485;
    float _1487;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1450 = fma(_653, cbModelParam._m0[13u].z, fma(_649, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _645)) + cbModelParam._m0[13u].w;
        float _1454 = fma(_653, cbModelParam._m0[14u].z, fma(_649, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _645)) + cbModelParam._m0[14u].w;
        float _1458 = fma(_653, cbModelParam._m0[15u].z, fma(_649, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _645)) + cbModelParam._m0[15u].w;
        float _1461 = fma(_591, cbModelParam._m0[13u].z, fma(_590, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _589));
        float _1464 = fma(_591, cbModelParam._m0[14u].z, fma(_590, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _589));
        float _1467 = fma(_591, cbModelParam._m0[15u].z, fma(_590, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _589));
        float _1495;
        if (_1461 > 0.0)
        {
            _1495 = abs((1.0 - _1450) / _1461);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1461 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1450 + 1.0) / _1461);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1495 = frontier_phi_16_14_ladder;
        }
        float _1722;
        if (_1464 > 0.0)
        {
            _1722 = abs((1.0 - _1454) / _1464);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1464 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1454 + 1.0) / _1464);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1722 = frontier_phi_25_21_ladder;
        }
        float _1979;
        if (_1467 > 0.0)
        {
            _1979 = abs((1.0 - _1458) / _1467);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1467 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1458 + 1.0) / _1467);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1979 = frontier_phi_37_32_ladder;
        }
        float _1981 = isnan(_1722) ? _1495 : (isnan(_1495) ? _1722 : min(_1495, _1722));
        float _1982 = isnan(_1979) ? _1981 : (isnan(_1981) ? _1979 : min(_1981, _1979));
        float _1986 = (_1982 * _1461) + _1450;
        float _1987 = (_1982 * _1464) + _1454;
        float _1988 = (_1982 * _1467) + _1458;
        float _1989 = _1982 * 9.9999997473787516355514526367188e-05;
        float _1991 = (-1.0) - _1989;
        float _1993 = _1989 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1988 > _1993) || ((_1988 < _1991) || ((_1987 > _1993) || ((_1987 < _1991) || ((_1986 < _1991) || (_1986 > _1993))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2116 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1988, cbModelParam._m0[9u].z, fma(_1987, cbModelParam._m0[9u].y, _1986 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1988, cbModelParam._m0[10u].z, fma(_1987, cbModelParam._m0[10u].y, _1986 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1988, cbModelParam._m0[11u].z, fma(_1987, cbModelParam._m0[11u].y, _1986 * cbModelParam._m0[11u].x))), _1402);
            frontier_phi_15_37_ladder = _2116.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2116.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2116.x * cbModelParam._m0[1u].y;
        }
        _1483 = frontier_phi_15_37_ladder_2;
        _1485 = frontier_phi_15_37_ladder_1;
        _1487 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1471 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_589, _590, _591), _1402);
        _1483 = _1471.x * cbModelParam._m0[1u].y;
        _1485 = _1471.y * cbModelParam._m0[1u].y;
        _1487 = _1471.z * cbModelParam._m0[1u].y;
    }
    float _1491 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _413);
    float _1492 = isnan(_1491) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1491 : min(cbModelParam._m0[25u].w, _1491));
    float _1585;
    float _1587;
    float _1589;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1549 = fma(_653, cbModelParam._m0[21u].z, fma(_649, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _645)) + cbModelParam._m0[21u].w;
        float _1553 = fma(_653, cbModelParam._m0[22u].z, fma(_649, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _645)) + cbModelParam._m0[22u].w;
        float _1557 = fma(_653, cbModelParam._m0[23u].z, fma(_649, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _645)) + cbModelParam._m0[23u].w;
        float _1560 = fma(_591, cbModelParam._m0[21u].z, fma(_590, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _589));
        float _1563 = fma(_591, cbModelParam._m0[22u].z, fma(_590, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _589));
        float _1566 = fma(_591, cbModelParam._m0[23u].z, fma(_590, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _589));
        float _1727;
        if (_1560 > 0.0)
        {
            _1727 = abs((1.0 - _1549) / _1560);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1560 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1549 + 1.0) / _1560);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1727 = frontier_phi_27_23_ladder;
        }
        float _2006;
        if (_1563 > 0.0)
        {
            _2006 = abs((1.0 - _1553) / _1563);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1563 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1553 + 1.0) / _1563);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2006 = frontier_phi_39_34_ladder;
        }
        float _2219;
        if (_1566 > 0.0)
        {
            _2219 = abs((1.0 - _1557) / _1566);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1566 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1557 + 1.0) / _1566);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2219 = frontier_phi_48_45_ladder;
        }
        float _2221 = isnan(_2006) ? _1727 : (isnan(_1727) ? _2006 : min(_1727, _2006));
        float _2222 = isnan(_2219) ? _2221 : (isnan(_2221) ? _2219 : min(_2221, _2219));
        float _2226 = (_2222 * _1560) + _1549;
        float _2227 = (_2222 * _1563) + _1553;
        float _2228 = (_2222 * _1566) + _1557;
        float _2229 = _2222 * 9.9999997473787516355514526367188e-05;
        float _2230 = (-1.0) - _2229;
        float _2232 = _2229 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2228 > _2232) || ((_2228 < _2230) || ((_2227 > _2232) || ((_2227 < _2230) || ((_2226 < _2230) || (_2226 > _2232))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2426 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2228, cbModelParam._m0[17u].z, fma(_2227, cbModelParam._m0[17u].y, _2226 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2228, cbModelParam._m0[18u].z, fma(_2227, cbModelParam._m0[18u].y, _2226 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2228, cbModelParam._m0[19u].z, fma(_2227, cbModelParam._m0[19u].y, _2226 * cbModelParam._m0[19u].x))), _1492);
            frontier_phi_24_48_ladder = _2426.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2426.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2426.x * cbModelParam._m0[1u].z;
        }
        _1585 = frontier_phi_24_48_ladder_2;
        _1587 = frontier_phi_24_48_ladder_1;
        _1589 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1569 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_589, _590, _591), _1492);
        _1585 = _1569.x * cbModelParam._m0[1u].z;
        _1587 = _1569.y * cbModelParam._m0[1u].z;
        _1589 = _1569.z * cbModelParam._m0[1u].z;
    }
    float _1602 = (((_616 * _566) + _617) * _581) * ((cbModelParam._m0[1u].w * (_1585 - _1483)) + _1483);
    float _1604 = (((_616 * _568) + _617) * _581) * ((cbModelParam._m0[1u].w * (_1587 - _1485)) + _1485);
    float _1606 = (((_616 * _569) + _617) * _581) * ((cbModelParam._m0[1u].w * (_1589 - _1487)) + _1487);
    float _1609 = fma(_1606, cbSceneParam._m0[89u].z, fma(_1604, cbSceneParam._m0[89u].y, _1602 * cbSceneParam._m0[89u].x));
    float _1612 = fma(_1606, cbSceneParam._m0[90u].z, fma(_1604, cbSceneParam._m0[90u].y, _1602 * cbSceneParam._m0[90u].x));
    float _1615 = fma(_1606, cbSceneParam._m0[91u].z, fma(_1604, cbSceneParam._m0[91u].y, _1602 * cbSceneParam._m0[91u].x));
    vec4 _1623 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_500, _501));
    float _1625 = _1623.w;
    float _1637 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1625);
    float _1638 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1625);
    float _1639 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1625);
    uvec4 _1643 = floatBitsToUint(cbInstanceData._m0[_541 + 5u]);
    uint _1645 = _1643.x * 14u;
    uint _1646 = _1645 + 13u;
    float _1653 = _581 + (-1.0);
    float _1658 = (cbLight._m0[_1646].x * _1653) + 1.0;
    float _1659 = (cbLight._m0[_1646].y * _1653) + 1.0;
    float _1660 = (cbLight._m0[_1646].z * _1653) + 1.0;
    float _1661 = (cbLight._m0[_1646].w * _1653) + 1.0;
    uint _1662 = _1645 + 5u;
    float _1668 = isnan(1.0) ? _1659 : (isnan(_1659) ? 1.0 : min(_1659, 1.0));
    uint _1672 = _1645 + 4u;
    float _1681 = isnan(1.0) ? _1658 : (isnan(_1658) ? 1.0 : min(_1658, 1.0));
    uint _1685 = _1645 | 1u;
    float _1696 = dot(vec3(cbLight._m0[_1645].xyz), vec3(_410, _411, _412));
    float _1699 = dot(vec3(cbLight._m0[_1685].xyz), vec3(_410, _411, _412));
    float _3814 = isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0));
    float _3825 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
    float _1704 = (isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0))) * 0.3183098733425140380859375;
    float _1706 = (isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0))) * 0.3183098733425140380859375;
    float _1713 = ((cbLight._m0[_1662].x * _1668) * _1706) + (((cbLight._m0[_1672].x * _1637) * _1681) * _1704);
    float _1714 = ((_1668 * cbLight._m0[_1662].y) * _1706) + (((cbLight._m0[_1672].y * _1638) * _1681) * _1704);
    float _1715 = ((_1668 * cbLight._m0[_1662].z) * _1706) + (((cbLight._m0[_1672].z * _1639) * _1681) * _1704);
    uvec4 _1719 = floatBitsToUint(cbLight._m0[_1645 + 12u]);
    bool _1721 = _1719.x == 0u;
    float _1732;
    float _1734;
    float _1736;
    if (_1721)
    {
        _1732 = _1713;
        _1734 = _1714;
        _1736 = _1715;
    }
    else
    {
        uint _1740 = _1645 + 6u;
        float _1756 = (dot(vec3(cbLight._m0[_1645 + 2u].xyz), vec3(_410, _411, _412)) * 0.5) + 0.5;
        float _1757 = _1756 * _1756;
        float _3836 = isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0));
        float _1758 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
        float _1759 = isnan(1.0) ? _1660 : (isnan(_1660) ? 1.0 : min(_1660, 1.0));
        _1732 = (((cbLight._m0[_1740].x * 0.3183098733425140380859375) * _1758) * _1759) + _1713;
        _1734 = (((cbLight._m0[_1740].y * 0.3183098733425140380859375) * _1758) * _1759) + _1714;
        _1736 = (((cbLight._m0[_1740].z * 0.3183098733425140380859375) * _1758) * _1759) + _1715;
    }
    bool _1739 = _1719.y == 0u;
    float _1777;
    float _1779;
    float _1781;
    if (_1739)
    {
        _1777 = _1732;
        _1779 = _1734;
        _1781 = _1736;
    }
    else
    {
        uint _1950 = _1645 + 7u;
        float _1966 = (dot(vec3(cbLight._m0[_1645 + 3u].xyz), vec3(_410, _411, _412)) * 0.5) + 0.5;
        float _1967 = _1966 * _1966;
        float _3852 = isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0));
        float _1968 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
        float _1969 = isnan(1.0) ? _1661 : (isnan(_1661) ? 1.0 : min(_1661, 1.0));
        _1777 = (((cbLight._m0[_1950].x * 0.3183098733425140380859375) * _1968) * _1969) + _1732;
        _1779 = (((cbLight._m0[_1950].y * 0.3183098733425140380859375) * _1968) * _1969) + _1734;
        _1781 = (((cbLight._m0[_1950].z * 0.3183098733425140380859375) * _1968) * _1969) + _1736;
    }
    uint _1784 = _1645 + 8u;
    float _1797 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1645].w)) * _413) * 0.949999988079071044921875);
    float _1798 = _1797 * _1797;
    float _1799 = cbLight._m0[_1645].x + _492;
    float _1800 = cbLight._m0[_1645].y + _493;
    float _1801 = cbLight._m0[_1645].z + _494;
    float _1805 = inversesqrt(dot(vec3(_1799, _1800, _1801), vec3(_1799, _1800, _1801)));
    float _1806 = _1805 * _1799;
    float _1807 = _1805 * _1800;
    float _1808 = _1805 * _1801;
    float _1809 = dot(vec3(_410, _411, _412), vec3(cbLight._m0[_1645].xyz));
    float _3868 = isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0));
    float _1812 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
    float _3879 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _1813 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
    float _1814 = dot(vec3(_410, _411, _412), vec3(_1806, _1807, _1808));
    float _3890 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
    float _1817 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
    float _1818 = dot(vec3(cbLight._m0[_1645].xyz), vec3(_1806, _1807, _1808));
    float _3901 = isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0));
    float _1822 = _1798 * _1798;
    float _1826 = ((_1817 * _1817) * (_1822 + (-1.0))) + 1.0;
    float _1834 = exp2(log2(1.0 - (isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0)))) * 5.0);
    float _1835 = 0.959999978542327880859375 - _563;
    float _1837 = 0.959999978542327880859375 - _564;
    float _1838 = 0.959999978542327880859375 - _565;
    float _1845 = 1.0 - _1798;
    float _1856 = (0.5 / (((_1813 * ((_1812 * _1845) + _1798)) + 9.9999999392252902907785028219223e-09) + (((_1813 * _1845) + _1798) * _1812))) * _1812;
    float _3912 = isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0));
    float _1858 = (isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0))) * (_1822 / ((_1826 * _1826) * 3.141590118408203125));
    uint _1872 = _1645 + 9u;
    float _1883 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1685].w)) * _413) * 0.949999988079071044921875);
    float _1884 = _1883 * _1883;
    float _1885 = cbLight._m0[_1685].x + _492;
    float _1886 = cbLight._m0[_1685].y + _493;
    float _1887 = cbLight._m0[_1685].z + _494;
    float _1891 = inversesqrt(dot(vec3(_1885, _1886, _1887), vec3(_1885, _1886, _1887)));
    float _1892 = _1891 * _1885;
    float _1893 = _1891 * _1886;
    float _1894 = _1891 * _1887;
    float _1895 = dot(vec3(_410, _411, _412), vec3(cbLight._m0[_1685].xyz));
    float _3923 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
    float _1898 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
    float _1899 = dot(vec3(_410, _411, _412), vec3(_1892, _1893, _1894));
    float _3934 = isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0));
    float _1902 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
    float _1903 = dot(vec3(cbLight._m0[_1685].xyz), vec3(_1892, _1893, _1894));
    float _3945 = isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0));
    float _1907 = _1884 * _1884;
    float _1911 = ((_1902 * _1902) * (_1907 + (-1.0))) + 1.0;
    float _1918 = exp2(log2(1.0 - (isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0)))) * 5.0);
    float _1925 = 1.0 - _1884;
    float _1935 = (0.5 / (((_1813 * ((_1898 * _1925) + _1884)) + 9.9999999392252902907785028219223e-09) + (((_1813 * _1925) + _1884) * _1898))) * _1898;
    float _3956 = isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0));
    float _1937 = (isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0))) * (_1907 / ((_1911 * _1911) * 3.141590118408203125));
    float _1947 = (((((_1918 * _1835) + _566) * cbLight._m0[_1872].x) * _1937) * _1668) + ((((cbLight._m0[_1784].x * _1637) * ((_1834 * _1835) + _566)) * _1858) * _1681);
    float _1948 = (((((_1918 * _1837) + _568) * cbLight._m0[_1872].y) * _1937) * _1668) + ((((cbLight._m0[_1784].y * _1638) * ((_1834 * _1837) + _568)) * _1858) * _1681);
    float _1949 = (((((_1918 * _1838) + _569) * cbLight._m0[_1872].z) * _1937) * _1668) + ((((cbLight._m0[_1784].z * _1639) * ((_1834 * _1838) + _569)) * _1858) * _1681);
    float _2011;
    float _2013;
    float _2015;
    if (_1721)
    {
        _2011 = _1947;
        _2013 = _1948;
        _2015 = _1949;
    }
    else
    {
        uint _2017 = _1645 + 2u;
        uint _2021 = _1645 + 10u;
        float _2035 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2017].w)) * _413) * 0.949999988079071044921875);
        float _2036 = _2035 * _2035;
        float _2037 = cbLight._m0[_2017].x + _492;
        float _2038 = cbLight._m0[_2017].y + _493;
        float _2039 = cbLight._m0[_2017].z + _494;
        float _2043 = inversesqrt(dot(vec3(_2037, _2038, _2039), vec3(_2037, _2038, _2039)));
        float _2044 = _2043 * _2037;
        float _2045 = _2043 * _2038;
        float _2046 = _2043 * _2039;
        float _2047 = dot(vec3(_410, _411, _412), vec3(cbLight._m0[_2017].xyz));
        float _3967 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
        float _2050 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
        float _2051 = dot(vec3(_410, _411, _412), vec3(_2044, _2045, _2046));
        float _3978 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
        float _2054 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
        float _2055 = dot(vec3(cbLight._m0[_2017].xyz), vec3(_2044, _2045, _2046));
        float _3989 = isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0));
        float _2059 = _2036 * _2036;
        float _2063 = ((_2054 * _2054) * (_2059 + (-1.0))) + 1.0;
        float _2070 = exp2(log2(1.0 - (isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0)))) * 5.0);
        float _2077 = 1.0 - _2036;
        float _2087 = (0.5 / (((_1813 * ((_2050 * _2077) + _2036)) + 9.9999999392252902907785028219223e-09) + (((_1813 * _2077) + _2036) * _2050))) * _2050;
        float _4000 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
        float _2089 = (isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0))) * (_2059 / ((_2063 * _2063) * 3.141590118408203125));
        float _2090 = isnan(1.0) ? _1660 : (isnan(_1660) ? 1.0 : min(_1660, 1.0));
        _2011 = (((((_2070 * _1835) + _566) * cbLight._m0[_2021].x) * _2089) * _2090) + _1947;
        _2013 = (((((_2070 * _1837) + _568) * cbLight._m0[_2021].y) * _2089) * _2090) + _1948;
        _2015 = (((((_2070 * _1838) + _569) * cbLight._m0[_2021].z) * _2089) * _2090) + _1949;
    }
    float _2125;
    float _2127;
    float _2129;
    if (_1739)
    {
        _2125 = _2011;
        _2127 = _2013;
        _2129 = _2015;
    }
    else
    {
        uint _2136 = _1645 + 3u;
        uint _2140 = _1645 + 11u;
        float _2154 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2136].w)) * _413) * 0.949999988079071044921875);
        float _2155 = _2154 * _2154;
        float _2156 = cbLight._m0[_2136].x + _492;
        float _2157 = cbLight._m0[_2136].y + _493;
        float _2158 = cbLight._m0[_2136].z + _494;
        float _2162 = inversesqrt(dot(vec3(_2156, _2157, _2158), vec3(_2156, _2157, _2158)));
        float _2163 = _2162 * _2156;
        float _2164 = _2162 * _2157;
        float _2165 = _2162 * _2158;
        float _2166 = dot(vec3(_410, _411, _412), vec3(cbLight._m0[_2136].xyz));
        float _4016 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
        float _2169 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
        float _2170 = dot(vec3(_410, _411, _412), vec3(_2163, _2164, _2165));
        float _4027 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
        float _2173 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
        float _2174 = dot(vec3(cbLight._m0[_2136].xyz), vec3(_2163, _2164, _2165));
        float _4038 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
        float _2178 = _2155 * _2155;
        float _2182 = ((_2173 * _2173) * (_2178 + (-1.0))) + 1.0;
        float _2189 = exp2(log2(1.0 - (isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0)))) * 5.0);
        float _2196 = 1.0 - _2155;
        float _2206 = (0.5 / (((_1813 * ((_2169 * _2196) + _2155)) + 9.9999999392252902907785028219223e-09) + (((_1813 * _2196) + _2155) * _2169))) * _2169;
        float _4049 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
        float _2208 = (isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0))) * (_2178 / ((_2182 * _2182) * 3.141590118408203125));
        float _2209 = isnan(1.0) ? _1661 : (isnan(_1661) ? 1.0 : min(_1661, 1.0));
        _2125 = (((((_2189 * _1835) + _566) * cbLight._m0[_2140].x) * _2208) * _2209) + _2011;
        _2127 = (((((_2189 * _1837) + _568) * cbLight._m0[_2140].y) * _2208) * _2209) + _2013;
        _2129 = (((((_2189 * _1838) + _569) * cbLight._m0[_2140].z) * _2208) * _2209) + _2015;
    }
    float _2343;
    float _2345;
    float _2347;
    float _2349;
    float _2351;
    float _2353;
    if (_1643.y == 0u)
    {
        float _2284 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2285 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2284;
        float _2286 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2284;
        float _2287 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2284;
        uvec4 _2299 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2300 = _2299.x;
        uint _2311 = uint((float(_2299.y) * floor(float(uint(cbSceneParam._m0[85u].y * _501) / _2300))) + floor(float(uint(cbSceneParam._m0[85u].x * _500) / _2300)));
        float _2321 = (log2(_2287 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2322 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
        uint _2325 = uint(isnan(14.0) ? _2322 : (isnan(_2322) ? 14.0 : min(_2322, 14.0)));
        uvec4 _2330 = texelFetch(g_lightClusterGridBuffer, int(((_2325 << 2u) + (_2311 << 6u)) >> 2u));
        uint _2331 = _2330.x;
        uint _2332 = _2299.z;
        float _2431;
        float _2433;
        float _2435;
        float _2437;
        float _2439;
        float _2441;
        if (((((1u << ((_2332 >> 4u) & 15u)) + 4294967295u) & _2331) == 0u) || ((_2332 & 240u) == 0u))
        {
            _2431 = 0.0;
            _2433 = 0.0;
            _2435 = 0.0;
            _2437 = 0.0;
            _2439 = 0.0;
            _2441 = 0.0;
        }
        else
        {
            float _2432;
            float _2434;
            float _2436;
            float _2438;
            float _2440;
            float _2442;
            float _2575 = 0.0;
            float _2576 = 0.0;
            float _2577 = 0.0;
            float _2578 = 0.0;
            float _2579 = 0.0;
            float _2580 = 0.0;
            uint _2581 = 0u;
            uint _2590;
            bool _2591;
            for (;;)
            {
                _2590 = texelFetch(g_lightClassification, int((((_2325 << 5u) + (_2311 << 9u)) + (_2581 << 2u)) >> 2u)).x;
                _2591 = _2590 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2591)
                {
                    frontier_phi_63_pred = _2580;
                    frontier_phi_63_pred_1 = _2579;
                    frontier_phi_63_pred_2 = _2578;
                    frontier_phi_63_pred_3 = _2577;
                    frontier_phi_63_pred_4 = _2576;
                    frontier_phi_63_pred_5 = _2575;
                }
                else
                {
                    float _2699;
                    float _2700;
                    float _2701;
                    float _2702;
                    float _2703;
                    float _2704;
                    uint _2705;
                    _2699 = _2575;
                    _2700 = _2576;
                    _2701 = _2577;
                    _2702 = _2578;
                    _2703 = _2579;
                    _2704 = _2580;
                    _2705 = _2590;
                    float _2631;
                    float _2632;
                    float _2633;
                    float _2634;
                    float _2635;
                    float _2636;
                    for (;;)
                    {
                        uint _2709 = uint(findLSB(_2705)) + (_2581 << 5u);
                        uint _2706 = (_2705 + 4294967295u) & _2705;
                        uint _2711 = _2709 * 48u;
                        vec4 _2725 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2711)).x, texelFetch(g_PointLightRenderingBuffer, int(_2711 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2711 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2711 + 3u)).x));
                        uint _2731 = (_2709 * 48u) + 4u;
                        vec4 _2744 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2731)).x, texelFetch(g_PointLightRenderingBuffer, int(_2731 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2731 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2731 + 3u)).x));
                        uint _2750 = (_2709 * 48u) + 8u;
                        vec3 _2761 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2750)).x, texelFetch(g_PointLightRenderingBuffer, int(_2750 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2750 + 2u)).x));
                        float _2765 = _2725.x - _2285;
                        float _2766 = _2725.y - _2286;
                        float _2767 = _2725.z - _2287;
                        float _2768 = dot(vec3(_2765, _2766, _2767), vec3(_2765, _2766, _2767));
                        float _2771 = inversesqrt(_2768);
                        float _2772 = _2771 * _2765;
                        float _2773 = _2771 * _2766;
                        float _2774 = _2771 * _2767;
                        float _2775 = dot(vec3(_522, _525, _528), vec3(_2772, _2773, _2774));
                        float _2780 = 1.0 - (_2768 * _2725.w);
                        float _4075 = isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : max(_2780, 0.0));
                        float _2781 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
                        float _2782 = sqrt(_2768) * _2744.w;
                        float _2785 = 1.39999997615814208984375 / (_2782 + 1.39999997615814208984375);
                        float _2786 = _2785 * _2785;
                        float _2789 = ((1.0 - _2786) * _2775) + _2786;
                        float _2792 = _2782 * _2782;
                        float _2796 = ((isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : max(_2789, 0.0))) * _2781) / ((_2792 * 0.699999988079071044921875) + 1.0);
                        float _2800 = (-0.0) - _2285;
                        float _2801 = (-0.0) - _2286;
                        float _2802 = (-0.0) - _2287;
                        float _2806 = inversesqrt(dot(vec3(_2800, _2801, _2802), vec3(_2800, _2801, _2802)));
                        float _2807 = _2806 * _2800;
                        float _2808 = _2806 * _2801;
                        float _2809 = _2806 * _2802;
                        float _2817 = exp2(log2(1.0 / ((_2792 * 3.5) + 5.0)) * 0.25);
                        float _2818 = 1.0 - _597;
                        float _2825 = sqrt(1.0 - ((1.0 - (_2818 * _2818)) * (1.0 - (_2817 * _2817))));
                        float _2826 = _2825 * _2825;
                        float _2827 = _2826 * _2826;
                        float _2828 = _2807 + _2772;
                        float _2829 = _2808 + _2773;
                        float _2830 = _2809 + _2774;
                        float _2834 = inversesqrt(dot(vec3(_2828, _2829, _2830), vec3(_2828, _2829, _2830)));
                        float _2838 = dot(vec3(_522, _525, _528), vec3(_2807, _2808, _2809));
                        float _4091 = isnan(0.0) ? _2838 : (isnan(_2838) ? 0.0 : max(_2838, 0.0));
                        float _2841 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
                        float _2842 = dot(vec3(_522, _525, _528), vec3(_2834 * _2828, _2834 * _2829, _2834 * _2830));
                        float _4102 = isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : max(_2842, 0.0));
                        float _2845 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
                        float _2849 = ((_2845 * _2845) * (_2827 + (-1.0))) + 1.0;
                        float _2850 = _2785 * _2826;
                        float _2851 = _2850 * _2850;
                        float _2854 = ((1.0 - _2851) * _2775) + _2851;
                        float _4113 = isnan(0.0) ? _2854 : (isnan(_2854) ? 0.0 : max(_2854, 0.0));
                        float _2855 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
                        float _2856 = 1.0 - _2826;
                        float _2866 = (0.5 / (((_2855 * ((_2841 * _2856) + _2826)) + 9.9999999392252902907785028219223e-09) + (((_2855 * _2856) + _2826) * _2841))) * _2855;
                        float _4124 = isnan(0.0) ? _2866 : (isnan(_2866) ? 0.0 : max(_2866, 0.0));
                        float _2877 = (((_2827 * 3.1415927410125732421875) * (isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0)))) / ((_2849 * _2849) * ((_2792 * 2.1991131305694580078125) + 3.141590118408203125))) * _2781;
                        _2634 = (_2796 * _2744.x) + _2702;
                        _2635 = (_2796 * _2744.y) + _2703;
                        _2636 = (_2796 * _2744.z) + _2704;
                        _2631 = (_2877 * _2761.x) + _2699;
                        _2632 = (_2877 * _2761.y) + _2700;
                        _2633 = (_2877 * _2761.z) + _2701;
                        if (_2706 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2699 = _2631;
                            _2700 = _2632;
                            _2701 = _2633;
                            _2702 = _2634;
                            _2703 = _2635;
                            _2704 = _2636;
                            _2705 = _2706;
                        }
                    }
                    frontier_phi_63_pred = _2636;
                    frontier_phi_63_pred_1 = _2635;
                    frontier_phi_63_pred_2 = _2634;
                    frontier_phi_63_pred_3 = _2633;
                    frontier_phi_63_pred_4 = _2632;
                    frontier_phi_63_pred_5 = _2631;
                }
                _2442 = frontier_phi_63_pred;
                _2440 = frontier_phi_63_pred_1;
                _2438 = frontier_phi_63_pred_2;
                _2436 = frontier_phi_63_pred_3;
                _2434 = frontier_phi_63_pred_4;
                _2432 = frontier_phi_63_pred_5;
                uint _2582 = _2581 + 1u;
                if (_2582 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2575 = _2432;
                    _2576 = _2434;
                    _2577 = _2436;
                    _2578 = _2438;
                    _2579 = _2440;
                    _2580 = _2442;
                    _2581 = _2582;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2431 = _2432;
            _2433 = _2434;
            _2435 = _2436;
            _2437 = _2438;
            _2439 = _2440;
            _2441 = _2442;
        }
        uvec4 _2445 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2446 = _2445.z;
        uint _2448 = (_2446 >> 8u) & 15u;
        float _2543;
        float _2545;
        float _2547;
        float _2549;
        float _2551;
        float _2553;
        if (((4294967295u << _2448) & _2331) == 0u)
        {
            _2543 = _2431;
            _2545 = _2433;
            _2547 = _2435;
            _2549 = _2437;
            _2551 = _2439;
            _2553 = _2441;
        }
        else
        {
            float _2568 = inversesqrt(dot(vec3(_2285, _2286, _2287), vec3(_2285, _2286, _2287)));
            float _2569 = _2568 * _2285;
            float _2570 = _2568 * _2286;
            float _2571 = _2568 * _2287;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2448 < ((_2446 >> 12u) & 15u))
            {
                float _2544;
                float _2546;
                float _2548;
                float _2550;
                float _2552;
                float _2554;
                float _2682 = _2431;
                float _2683 = _2433;
                float _2684 = _2435;
                float _2685 = _2437;
                float _2686 = _2439;
                float _2687 = _2441;
                uint _2688 = _2448;
                uint _2697;
                bool _2698;
                for (;;)
                {
                    _2697 = texelFetch(g_lightClassification, int((((_2325 << 5u) + (_2311 << 9u)) + (_2688 << 2u)) >> 2u)).x;
                    _2698 = _2697 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2698)
                    {
                        frontier_phi_69_pred = _2687;
                        frontier_phi_69_pred_1 = _2686;
                        frontier_phi_69_pred_2 = _2685;
                        frontier_phi_69_pred_3 = _2684;
                        frontier_phi_69_pred_4 = _2683;
                        frontier_phi_69_pred_5 = _2682;
                    }
                    else
                    {
                        float _2882;
                        float _2883;
                        float _2884;
                        float _2885;
                        float _2886;
                        float _2887;
                        float _3178;
                        float _3179;
                        float _3180;
                        float _3181;
                        float _3182;
                        float _3183;
                        float _2895 = _2682;
                        float _2896 = _2683;
                        float _2897 = _2684;
                        float _2898 = _2685;
                        float _2899 = _2686;
                        float _2900 = _2687;
                        uint _2901 = _2697;
                        uint _2902;
                        vec4 _2927;
                        float _2928;
                        vec4 _2943;
                        vec3 _2955;
                        vec4 _2971;
                        vec4 _2987;
                        float _3034;
                        bool _3035;
                        for (;;)
                        {
                            uint _2912 = ((_2688 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2901));
                            _2902 = (_2901 + 4294967295u) & _2901;
                            uint _2914 = _2912 * 40u;
                            _2927 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2914)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2914 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2914 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2914 + 3u)).x));
                            _2928 = _2927.w;
                            uint _2930 = (_2912 * 40u) + 4u;
                            _2943 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2930)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2930 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2930 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2930 + 3u)).x));
                            uint _2945 = (_2912 * 40u) + 8u;
                            _2955 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2945)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2945 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2945 + 2u)).x));
                            uint _2958 = (_2912 * 40u) + 16u;
                            _2971 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2958)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2958 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2958 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2958 + 3u)).x));
                            uint _2974 = (_2912 * 40u) + 20u;
                            _2987 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2974)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2974 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2974 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2974 + 3u)).x));
                            uint _2990 = (_2912 * 40u) + 24u;
                            vec4 _3003 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2990)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2990 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2990 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2990 + 3u)).x));
                            uint _3009 = (_2912 * 40u) + 28u;
                            vec4 _3022 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3009)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 3u)).x));
                            _3034 = fma(_2287, _3022.z, fma(_2286, _3022.y, _3022.x * _2285)) + _3022.w;
                            _3035 = !((fma(_2287, _3003.z, fma(_2286, _3003.y, _3003.x * _2285)) + _3003.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3035)
                            {
                                float _3062 = _2927.x - _2285;
                                float _3063 = _2927.y - _2286;
                                float _3064 = _2927.z - _2287;
                                float _3065 = dot(vec3(_3062, _3063, _3064), vec3(_3062, _3063, _3064));
                                float _3068 = inversesqrt(_3065);
                                float _3069 = _3068 * _3062;
                                float _3070 = _3068 * _3063;
                                float _3071 = _3068 * _3064;
                                float _3075 = 1.0 - (_3065 / (_2928 * _2928));
                                float _4135 = isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : max(_3075, 0.0));
                                float _3076 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
                                float _3080 = sqrt(_3065) * _2943.w;
                                float _3082 = 1.39999997615814208984375 / (_3080 + 1.39999997615814208984375);
                                float _3083 = _3082 * _3082;
                                float _3086 = ((1.0 - _3083) * dot(vec3(_3069, _3070, _3071), vec3(_522, _525, _528))) + _3083;
                                float _3089 = _3080 * _3080;
                                float _3093 = (fma(_2287, _2971.z, fma(_2286, _2971.y, _2971.x * _2285)) + _2971.w) / _3034;
                                float _3094 = (fma(_2287, _2987.z, fma(_2286, _2987.y, _2987.x * _2285)) + _2987.w) / _3034;
                                float _3098 = 1.0 - dot(vec2(_3093, _3094), vec2(_3093, _3094));
                                float _4151 = isnan(0.0) ? _3098 : (isnan(_3098) ? 0.0 : max(_3098, 0.0));
                                float _3099 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
                                float _3100 = _3099 * (((isnan(0.0) ? _3086 : (isnan(_3086) ? 0.0 : max(_3086, 0.0))) * _3076) / ((_3089 * 0.699999988079071044921875) + 1.0));
                                float _3112 = exp2(log2(1.0 / ((_3089 * 3.5) + 5.0)) * 0.25);
                                float _3113 = 1.0 - _597;
                                float _3120 = sqrt(1.0 - ((1.0 - (_3113 * _3113)) * (1.0 - (_3112 * _3112))));
                                float _3121 = _3120 * _3120;
                                float _3122 = _3121 * _3121;
                                float _3123 = _3069 - _2569;
                                float _3124 = _3070 - _2570;
                                float _3125 = _3071 - _2571;
                                float _3129 = inversesqrt(dot(vec3(_3123, _3124, _3125), vec3(_3123, _3124, _3125)));
                                float _3133 = dot(vec3(_522, _525, _528), vec3((-0.0) - _2569, (-0.0) - _2570, (-0.0) - _2571));
                                float _4162 = isnan(0.0) ? _3133 : (isnan(_3133) ? 0.0 : max(_3133, 0.0));
                                float _3136 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
                                float _3137 = dot(vec3(_522, _525, _528), vec3(_3129 * _3123, _3129 * _3124, _3129 * _3125));
                                float _4173 = isnan(0.0) ? _3137 : (isnan(_3137) ? 0.0 : max(_3137, 0.0));
                                float _3140 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
                                float _3144 = ((_3140 * _3140) * (_3122 + (-1.0))) + 1.0;
                                float _3145 = _3082 * _3121;
                                float _3146 = _3145 * _3145;
                                float _3152 = ((1.0 - _3146) * dot(vec3(_522, _525, _528), vec3(_3069, _3070, _3071))) + _3146;
                                float _4184 = isnan(0.0) ? _3152 : (isnan(_3152) ? 0.0 : max(_3152, 0.0));
                                float _3153 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
                                float _3154 = 1.0 - _3121;
                                float _3164 = (0.5 / (((_3153 * ((_3136 * _3154) + _3121)) + 9.9999999392252902907785028219223e-09) + (((_3153 * _3154) + _3121) * _3136))) * _3153;
                                float _4195 = isnan(0.0) ? _3164 : (isnan(_3164) ? 0.0 : max(_3164, 0.0));
                                float _3174 = (_3099 * _3076) * (((_3122 * 3.1415927410125732421875) * (isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0)))) / ((_3144 * _3144) * ((_3089 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3100 * _2943.z;
                                frontier_phi_75_pred_1 = _3100 * _2943.y;
                                frontier_phi_75_pred_2 = _3100 * _2943.x;
                                frontier_phi_75_pred_3 = _3174 * _2955.z;
                                frontier_phi_75_pred_4 = _3174 * _2955.y;
                                frontier_phi_75_pred_5 = _3174 * _2955.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3183 = frontier_phi_75_pred;
                            _3182 = frontier_phi_75_pred_1;
                            _3181 = frontier_phi_75_pred_2;
                            _3180 = frontier_phi_75_pred_3;
                            _3179 = frontier_phi_75_pred_4;
                            _3178 = frontier_phi_75_pred_5;
                            _2885 = _3181 + _2898;
                            _2886 = _3182 + _2899;
                            _2887 = _3183 + _2900;
                            _2882 = _3178 + _2895;
                            _2883 = _3179 + _2896;
                            _2884 = _3180 + _2897;
                            if (_2902 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2895 = _2882;
                                _2896 = _2883;
                                _2897 = _2884;
                                _2898 = _2885;
                                _2899 = _2886;
                                _2900 = _2887;
                                _2901 = _2902;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2887;
                        frontier_phi_69_pred_1 = _2886;
                        frontier_phi_69_pred_2 = _2885;
                        frontier_phi_69_pred_3 = _2884;
                        frontier_phi_69_pred_4 = _2883;
                        frontier_phi_69_pred_5 = _2882;
                    }
                    _2554 = frontier_phi_69_pred;
                    _2552 = frontier_phi_69_pred_1;
                    _2550 = frontier_phi_69_pred_2;
                    _2548 = frontier_phi_69_pred_3;
                    _2546 = frontier_phi_69_pred_4;
                    _2544 = frontier_phi_69_pred_5;
                    uint _2689 = _2688 + 1u;
                    if (_2689 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2682 = _2544;
                        _2683 = _2546;
                        _2684 = _2548;
                        _2685 = _2550;
                        _2686 = _2552;
                        _2687 = _2554;
                        _2688 = _2689;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2554;
                frontier_phi_57_58_ladder_1 = _2552;
                frontier_phi_57_58_ladder_2 = _2550;
                frontier_phi_57_58_ladder_3 = _2548;
                frontier_phi_57_58_ladder_4 = _2546;
                frontier_phi_57_58_ladder_5 = _2544;
            }
            else
            {
                frontier_phi_57_58_ladder = _2441;
                frontier_phi_57_58_ladder_1 = _2439;
                frontier_phi_57_58_ladder_2 = _2437;
                frontier_phi_57_58_ladder_3 = _2435;
                frontier_phi_57_58_ladder_4 = _2433;
                frontier_phi_57_58_ladder_5 = _2431;
            }
            _2543 = frontier_phi_57_58_ladder_5;
            _2545 = frontier_phi_57_58_ladder_4;
            _2547 = frontier_phi_57_58_ladder_3;
            _2549 = frontier_phi_57_58_ladder_2;
            _2551 = frontier_phi_57_58_ladder_1;
            _2553 = frontier_phi_57_58_ladder;
        }
        float _2558 = isnan(1.0) ? _581 : (isnan(_581) ? 1.0 : min(_581, 1.0));
        _2343 = (_2558 * _2549) + _1777;
        _2345 = (_2558 * _2551) + _1779;
        _2347 = (_2558 * _2553) + _1781;
        _2349 = ((_2543 * _566) * _2558) + _2125;
        _2351 = ((_2545 * _568) * _2558) + _2127;
        _2353 = ((_2547 * _569) * _2558) + _2129;
    }
    else
    {
        _2343 = _1777;
        _2345 = _1779;
        _2347 = _1781;
        _2349 = _2125;
        _2351 = _2127;
        _2353 = _2129;
    }
    float _4211 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _4222 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _4233 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    uint _2373 = _541 + 6u;
    float _2381 = _500 / cbSceneParam._m0[86u].x;
    float _2382 = _501 / cbSceneParam._m0[86u].y;
    vec4 _2396 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2381, _2382, (log2((isnan(cbSceneParam._m0[77u].w) ? _433 : (isnan(_433) ? cbSceneParam._m0[77u].w : min(_433, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2398 = _2396.x;
    float _2399 = _2396.y;
    float _2400 = _2396.z;
    float _2401 = _2396.w;
    float _2493;
    float _2495;
    float _2497;
    float _2499;
    if (_433 > cbSceneParam._m0[78u].w)
    {
        float _2456 = isnan(_433) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _433 : min(cbSceneParam._m0[80u].w, _433));
        float _2457 = _2456 / _433;
        float _2468 = _2457 * _485;
        float _2469 = _486 * _2457;
        float _2470 = (-0.0) - _2469;
        float _2471 = _2457 * _487;
        float _2473 = (cbSceneParam._m0[77u].w * _2470) / _2456;
        float _2474 = _2473 + cbSceneParam._m0[79u].w;
        float _2475 = cbSceneParam._m0[79u].w - _2469;
        float _2481 = sqrt(((_2468 * _2468) + (_2469 * _2469)) + (_2471 * _2471));
        float _2484 = (1.0 - (cbSceneParam._m0[77u].w / _2456)) * _2481;
        float _2489 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2491 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2644;
        if (abs((_2470 - _2473) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2644 = ((((_2474 > 0.0) ? exp2(_2489 * _2474) : (2.0 - exp2(_2491 * _2474))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2484;
        }
        else
        {
            float _2604 = 1.0 / cbSceneParam._m0[80u].x;
            float _2605 = isnan(_2475) ? _2474 : (isnan(_2474) ? _2475 : max(_2474, _2475));
            float _2606 = isnan(_2475) ? _2474 : (isnan(_2474) ? _2475 : min(_2474, _2475));
            float _2615 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : min(_2605, 0.0));
            float _2616 = isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : min(_2606, 0.0));
            _2644 = ((abs(_2481 / _2470) * cbSceneParam._m0[80u].y) * ((((_2615 - _2616) * 2.0) - ((exp2(_2489 * (isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0)))) - exp2(_2489 * (isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : max(_2606, 0.0))))) * _2604)) - ((exp2(_2491 * _2615) - exp2(_2491 * _2616)) * _2604))) + (_2484 * cbSceneParam._m0[80u].z);
        }
        vec4 _2646 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2381, _2382, 1.0), 0.0);
        float _2655 = exp2((_2644 * (-1.44269502162933349609375)) * (1.0 - _2646.w));
        float _2656 = log2(_2655);
        float _2672 = log2(_2401);
        _2493 = (exp2(_2672 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2656 * cbSceneParam._m0[78u].x)) * _2646.x) / cbSceneParam._m0[78u].x)) + _2398;
        _2495 = (exp2(_2672 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2656 * cbSceneParam._m0[78u].y)) * _2646.y) / cbSceneParam._m0[78u].y)) + _2399;
        _2497 = (exp2(_2672 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2656 * cbSceneParam._m0[78u].z)) * _2646.z) / cbSceneParam._m0[78u].z)) + _2400;
        _2499 = _2655 * _2401;
    }
    else
    {
        _2493 = _2398;
        _2495 = _2399;
        _2497 = _2400;
        _2499 = _2401;
    }
    float _2511 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2512 = _2511 == 3.0;
    float _2513 = log2(_2499);
    float _2520 = exp2(_2513 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0))) * (_2343 + ((isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0))) * _581))) + ((_2349 + ((isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0))) * _1391)) * cbPerFrame._m0[3u].x));
    float _2521 = exp2(_2513 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0))) * (_2345 + ((isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0))) * _581))) + ((_2351 + ((isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0))) * _1391)) * cbPerFrame._m0[3u].x));
    float _2522 = exp2(_2513 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0))) * (_2347 + ((isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0))) * _581))) + ((_2353 + ((isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0))) * _1391)) * cbPerFrame._m0[3u].x));
    float _2531 = (_2511 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2531 * (_2512 ? _2520 : (_2520 + (cbSceneParam._m0[72u].w * _2493)));
    SV_Target.y = _2531 * (_2512 ? _2521 : (_2521 + (cbSceneParam._m0[72u].w * _2495)));
    SV_Target.z = _2531 * (_2512 ? _2522 : (_2522 + (cbSceneParam._m0[72u].w * _2497)));
    SV_Target.w = cbInstanceData._m0[_2373].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2373].w;
}


