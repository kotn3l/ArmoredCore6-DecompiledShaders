#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _940;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _194 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _201 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _202 = _201 * NORMAL.x;
    float _203 = _201 * NORMAL.y;
    float _204 = _201 * NORMAL.z;
    float _208 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _216;
    float _217;
    float _218;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _216 = (-0.0) - _202;
        _217 = (-0.0) - _203;
        _218 = (-0.0) - _204;
    }
    else
    {
        _216 = _202;
        _217 = _203;
        _218 = _204;
    }
    vec4 _244 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _250 = _244.x * cbMtdParam._m0[9u].x;
    float _251 = _244.y * cbMtdParam._m0[9u].y;
    float _252 = _244.z * cbMtdParam._m0[9u].z;
    vec4 _264 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _268 = _264.z;
    float _272 = (_264.x * 2.0) + (-1.0);
    float _274 = (_264.y * 2.0) + (-1.0);
    float _275 = dot(vec2(_272, _274), vec2(_272, _274));
    float _3298 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    float _281 = sqrt(1.0 - (isnan(1.0) ? _3298 : (isnan(_3298) ? 1.0 : min(_3298, 1.0))));
    vec4 _298 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w));
    float _310 = (TEXCOORD_3.x - ((cbMtdParam._m0[12u].y * (1.0 - TEXCOORD_3.x)) * ((_298.x * cbMtdParam._m0[12u].y) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[12u].z + 1.0);
    float _3309 = isnan(0.0) ? _310 : (isnan(_310) ? 0.0 : max(_310, 0.0));
    float _311 = isnan(1.0) ? _3309 : (isnan(_3309) ? 1.0 : min(_3309, 1.0));
    float _318 = (_311 * (cbMtdParam._m0[10u].x - _250)) + _250;
    float _319 = (_311 * (cbMtdParam._m0[10u].y - _251)) + _251;
    float _320 = (_311 * (cbMtdParam._m0[10u].z - _252)) + _252;
    vec4 _332 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _334 = _332.x;
    float _336 = _334 - (_334 * _311);
    vec4 _348 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _355 = (_348.x * 2.0) + (-1.0);
    float _356 = (_348.y * 2.0) + (-1.0);
    float _357 = dot(vec2(_355, _356), vec2(_355, _356));
    float _3320 = isnan(0.0) ? _357 : (isnan(_357) ? 0.0 : max(_357, 0.0));
    float _365 = (_311 * (_348.z - _268)) + _268;
    float _377 = (((_355 - _272) + (cbMtdParam._m0[12u].w * _272)) * _311) + _272;
    float _378 = (((_356 - _274) + (cbMtdParam._m0[12u].w * _274)) * _311) + _274;
    float _379 = (_311 * (sqrt(1.0 - (isnan(1.0) ? _3320 : (isnan(_3320) ? 1.0 : min(_3320, 1.0)))) - _281)) + _281;
    float _382 = fma(_379, _216, fma(_378, _208 * TANGENT.x, (_194 * _186) * _377));
    float _385 = fma(_379, _217, fma(_378, _208 * TANGENT.y, (_194 * _187) * _377));
    float _388 = fma(_379, _218, fma(_378, _208 * TANGENT.z, (_194 * _188) * _377));
    float _392 = inversesqrt(dot(vec3(_382, _385, _388), vec3(_382, _385, _388)));
    float _393 = _392 * _382;
    float _394 = _392 * _385;
    float _395 = _392 * _388;
    float _3331 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    float _396 = isnan(1.0) ? _3331 : (isnan(_3331) ? 1.0 : min(_3331, 1.0));
    float _3342 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    float _3353 = isnan(0.0) ? _319 : (isnan(_319) ? 0.0 : max(_319, 0.0));
    float _3364 = isnan(0.0) ? _320 : (isnan(_320) ? 0.0 : max(_320, 0.0));
    float _3375 = isnan(0.0) ? _336 : (isnan(_336) ? 0.0 : max(_336, 0.0));
    float _400 = isnan(1.0) ? _3375 : (isnan(_3375) ? 1.0 : min(_3375, 1.0));
    float _416 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _458 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _468 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _458);
    float _469 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _458);
    float _470 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _458);
    float _474 = inversesqrt(dot(vec3(_468, _469, _470), vec3(_468, _469, _470)));
    float _475 = _468 * _474;
    float _476 = _469 * _474;
    float _477 = _470 * _474;
    float _483 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _484 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _505 = fma(_395, cbSceneParam._m0[5u].z, fma(_394, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _393));
    float _508 = fma(_395, cbSceneParam._m0[6u].z, fma(_394, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _393));
    float _511 = fma(_395, cbSceneParam._m0[7u].z, fma(_394, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _393));
    uint _524 = uint(roundEven(NORMAL.w)) * 13u;
    uint _527 = (_524 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _533 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3342 : (isnan(_3342) ? 1.0 : min(_3342, 1.0)))) * cbInstanceData._m0[_527].x;
    float _534 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3353 : (isnan(_3353) ? 1.0 : min(_3353, 1.0)))) * cbInstanceData._m0[_527].y;
    float _535 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3364 : (isnan(_3364) ? 1.0 : min(_3364, 1.0)))) * cbInstanceData._m0[_527].z;
    float _3386 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _536 = isnan(1.0) ? _3386 : (isnan(_3386) ? 1.0 : min(_3386, 1.0));
    float _3397 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _537 = isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0));
    float _3408 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _538 = isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0));
    float _539 = 1.0 - _400;
    float _540 = _536 * _539;
    float _541 = _537 * _539;
    float _542 = _538 * _539;
    float _547 = (_536 + (-0.039999999105930328369140625)) * _400;
    float _548 = (_537 + (-0.039999999105930328369140625)) * _400;
    float _549 = (_538 + (-0.039999999105930328369140625)) * _400;
    float _550 = _547 + 0.039999999105930328369140625;
    float _552 = _548 + 0.039999999105930328369140625;
    float _553 = _549 + 0.039999999105930328369140625;
    vec4 _562 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _483, cbSceneParam._m0[86u].y * _484));
    float _565 = _562.x * TEXCOORD_3.w;
    float _566 = dot(vec3(_393, _394, _395), vec3(_475, _476, _477));
    float _569 = _566 * 2.0;
    float _573 = (_569 * _393) - _475;
    float _574 = (_569 * _394) - _476;
    float _575 = (_569 * _395) - _477;
    float _579 = abs(dot(vec3(_475, _476, _477), vec3(_393, _394, _395)));
    float _3419 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _581 = sqrt(_396);
    float _594 = exp2((_581 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_581 * 3.0));
    float _600 = (1.0 - _594) * ((_581 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _601 = _594 * _581;
    float _629 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _633 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _637 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _939;
    float _941;
    float _942;
    float _943;
    float _944;
    float _945;
    float _946;
    float _947;
    float _948;
    float _949;
    float _950;
    float _951;
    float _952;
    float _953;
    float _954;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _664 = fma(_637, cbModelParam._m0[26u].z, fma(_633, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _629));
        float _668 = fma(_637, cbModelParam._m0[27u].z, fma(_633, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _629));
        float _672 = fma(_637, cbModelParam._m0[28u].z, fma(_633, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _629));
        float _697 = _629 + _393;
        float _698 = _633 + _394;
        float _699 = _637 + _395;
        float _709 = fma(_699, cbModelParam._m0[26u].z, fma(_698, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _697)) - _664;
        float _710 = fma(_699, cbModelParam._m0[27u].z, fma(_698, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _697)) - _668;
        float _711 = fma(_699, cbModelParam._m0[28u].z, fma(_698, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _697)) - _672;
        float _715 = inversesqrt(dot(vec3(_709, _710, _711), vec3(_709, _710, _711)));
        float _728 = ((_715 * _709) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_664 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _729 = ((_715 * _710) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_668 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _730 = ((_715 * _711) / cbModelParam._m0[34u].z) + ((((((_672 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _733 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_728, _729, _730), 0.0);
        vec4 _740 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_728, _729, _730), 0.0);
        vec4 _747 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_728, _729, _730), 0.0);
        vec4 _754 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_728, _729, _730), 0.0);
        float _767 = exp2((_733.w + (-0.5)) * 20.0) * 2.0;
        float _768 = _767 * (_733.x + (-0.5));
        float _769 = _767 * (_733.y + (-0.5));
        float _770 = _767 * (_733.z + (-0.5));
        float _777 = exp2((_740.w + (-0.5)) * 20.0) * 2.0;
        float _778 = _777 * (_740.x + (-0.5));
        float _779 = _777 * (_740.y + (-0.5));
        float _780 = _777 * (_740.z + (-0.5));
        float _787 = exp2((_747.w + (-0.5)) * 20.0) * 2.0;
        float _788 = _787 * (_747.x + (-0.5));
        float _789 = _787 * (_747.y + (-0.5));
        float _790 = _787 * (_747.z + (-0.5));
        float _797 = exp2((_754.w + (-0.5)) * 20.0) * 2.0;
        float _798 = _797 * (_754.x + (-0.5));
        float _799 = _797 * (_754.y + (-0.5));
        float _800 = _797 * (_754.z + (-0.5));
        float _801 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
        float _802 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
        float _803 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
        float _804 = _768 * 0.5;
        float _805 = _778 * 0.5;
        float _806 = _788 * 0.5;
        float _807 = dot(vec3(_804, _805, _806), vec3(_804, _805, _806));
        float _812 = (_807 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_807);
        float _821 = (dot(vec3(_393, _394, _395), vec3(_812 * _804, _812 * _805, _812 * _806)) + 1.0) * 0.5;
        float _3445 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
        float _831 = sqrt(((_805 * _805) + (_804 * _804)) + (_806 * _806)) / (_801 + 9.9999997473787516355514526367188e-06);
        float _3456 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
        float _832 = isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0));
        float _833 = _832 * 2.0;
        float _837 = (1.0 - _832) / (_832 + 1.0);
        float _3467 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
        float _838 = isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0));
        float _847 = ((((1.0 - _838) * (_833 + 2.0)) * exp2(log2(isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0))) * (_833 + 1.0))) + _838) * _801;
        float _848 = _769 * 0.5;
        float _849 = _779 * 0.5;
        float _850 = _789 * 0.5;
        float _851 = dot(vec3(_848, _849, _850), vec3(_848, _849, _850));
        float _856 = (_851 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_851);
        float _864 = (dot(vec3(_393, _394, _395), vec3(_856 * _848, _856 * _849, _856 * _850)) + 1.0) * 0.5;
        float _3478 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
        float _873 = sqrt(((_849 * _849) + (_848 * _848)) + (_850 * _850)) / (_802 + 9.9999997473787516355514526367188e-06);
        float _3489 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
        float _874 = isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0));
        float _875 = _874 * 2.0;
        float _879 = (1.0 - _874) / (_874 + 1.0);
        float _3500 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
        float _880 = isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0));
        float _889 = ((((1.0 - _880) * (_875 + 2.0)) * exp2(log2(isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0))) * (_875 + 1.0))) + _880) * _802;
        float _890 = _770 * 0.5;
        float _891 = _780 * 0.5;
        float _892 = _790 * 0.5;
        float _893 = dot(vec3(_890, _891, _892), vec3(_890, _891, _892));
        float _898 = (_893 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_893);
        float _906 = (dot(vec3(_393, _394, _395), vec3(_898 * _890, _898 * _891, _898 * _892)) + 1.0) * 0.5;
        float _3511 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
        float _915 = sqrt(((_891 * _891) + (_890 * _890)) + (_892 * _892)) / (_803 + 9.9999997473787516355514526367188e-06);
        float _3522 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
        float _916 = isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0));
        float _917 = _916 * 2.0;
        float _921 = (1.0 - _916) / (_916 + 1.0);
        float _3533 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
        float _922 = isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0));
        float _931 = ((((1.0 - _922) * (_917 + 2.0)) * exp2(log2(isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0))) * (_917 + 1.0))) + _922) * _803;
        _939 = _770;
        _941 = _769;
        _942 = _768;
        _943 = _780;
        _944 = _779;
        _945 = _778;
        _946 = _790;
        _947 = _789;
        _948 = _788;
        _949 = _803;
        _950 = _802;
        _951 = _801;
        _952 = cbModelParam._m0[36u].z * (isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0)));
        _953 = cbModelParam._m0[36u].z * (isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0)));
        _954 = cbModelParam._m0[36u].z * (isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0)));
    }
    else
    {
        _939 = _940;
        _941 = _940;
        _942 = _940;
        _943 = _940;
        _944 = _940;
        _945 = _940;
        _946 = _940;
        _947 = _940;
        _948 = _940;
        _949 = _940;
        _950 = _940;
        _951 = _940;
        _952 = 0.0;
        _953 = 0.0;
        _954 = 0.0;
    }
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _980 = fma(_637, cbModelParam._m0[30u].z, fma(_633, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _629));
        float _984 = fma(_637, cbModelParam._m0[31u].z, fma(_633, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _629));
        float _988 = fma(_637, cbModelParam._m0[32u].z, fma(_633, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _629));
        float _1011 = _629 + _393;
        float _1012 = _633 + _394;
        float _1013 = _637 + _395;
        float _1023 = fma(_1013, cbModelParam._m0[30u].z, fma(_1012, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1011)) - _980;
        float _1024 = fma(_1013, cbModelParam._m0[31u].z, fma(_1012, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1011)) - _984;
        float _1025 = fma(_1013, cbModelParam._m0[32u].z, fma(_1012, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1011)) - _988;
        float _1029 = inversesqrt(dot(vec3(_1023, _1024, _1025), vec3(_1023, _1024, _1025)));
        float _1042 = ((_1029 * _1023) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_980 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1043 = ((_1029 * _1024) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_984 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1044 = ((_1029 * _1025) / cbModelParam._m0[35u].z) + ((((((_988 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1046 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1042, _1043, _1044), 0.0);
        vec4 _1053 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1042, _1043, _1044), 0.0);
        vec4 _1060 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1042, _1043, _1044), 0.0);
        vec4 _1067 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1042, _1043, _1044), 0.0);
        float _1079 = exp2((_1046.w + (-0.5)) * 20.0) * 2.0;
        float _1080 = _1079 * (_1046.x + (-0.5));
        float _1081 = _1079 * (_1046.y + (-0.5));
        float _1082 = _1079 * (_1046.z + (-0.5));
        float _1089 = exp2((_1053.w + (-0.5)) * 20.0) * 2.0;
        float _1090 = _1089 * (_1053.x + (-0.5));
        float _1091 = _1089 * (_1053.y + (-0.5));
        float _1092 = _1089 * (_1053.z + (-0.5));
        float _1099 = exp2((_1060.w + (-0.5)) * 20.0) * 2.0;
        float _1100 = _1099 * (_1060.x + (-0.5));
        float _1101 = _1099 * (_1060.y + (-0.5));
        float _1102 = _1099 * (_1060.z + (-0.5));
        float _1109 = exp2((_1067.w + (-0.5)) * 20.0) * 2.0;
        float _1110 = _1109 * (_1067.x + (-0.5));
        float _1111 = _1109 * (_1067.y + (-0.5));
        float _1112 = _1109 * (_1067.z + (-0.5));
        float _1113 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1114 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1115 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1116 = _1080 * 0.5;
        float _1117 = _1090 * 0.5;
        float _1118 = _1100 * 0.5;
        float _1119 = dot(vec3(_1116, _1117, _1118), vec3(_1116, _1117, _1118));
        float _1124 = (_1119 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1119);
        float _1132 = (dot(vec3(_393, _394, _395), vec3(_1124 * _1116, _1124 * _1117, _1124 * _1118)) + 1.0) * 0.5;
        float _3574 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1141 = sqrt(((_1117 * _1117) + (_1116 * _1116)) + (_1118 * _1118)) / (_1113 + 9.9999997473787516355514526367188e-06);
        float _3585 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1142 = isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0));
        float _1143 = _1142 * 2.0;
        float _1147 = (1.0 - _1142) / (_1142 + 1.0);
        float _3596 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1148 = isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0));
        float _1157 = ((((1.0 - _1148) * (_1143 + 2.0)) * exp2(log2(isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0))) * (_1143 + 1.0))) + _1148) * _1113;
        float _1158 = _1081 * 0.5;
        float _1159 = _1091 * 0.5;
        float _1160 = _1101 * 0.5;
        float _1161 = dot(vec3(_1158, _1159, _1160), vec3(_1158, _1159, _1160));
        float _1166 = (_1161 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1161);
        float _1174 = (dot(vec3(_393, _394, _395), vec3(_1166 * _1158, _1166 * _1159, _1166 * _1160)) + 1.0) * 0.5;
        float _3607 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1183 = sqrt(((_1159 * _1159) + (_1158 * _1158)) + (_1160 * _1160)) / (_1114 + 9.9999997473787516355514526367188e-06);
        float _3618 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1184 = isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0));
        float _1185 = _1184 * 2.0;
        float _1189 = (1.0 - _1184) / (_1184 + 1.0);
        float _3629 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1190 = isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0));
        float _1199 = ((((1.0 - _1190) * (_1185 + 2.0)) * exp2(log2(isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0))) * (_1185 + 1.0))) + _1190) * _1114;
        float _1200 = _1082 * 0.5;
        float _1201 = _1092 * 0.5;
        float _1202 = _1102 * 0.5;
        float _1203 = dot(vec3(_1200, _1201, _1202), vec3(_1200, _1201, _1202));
        float _1208 = (_1203 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1203);
        float _1216 = (dot(vec3(_393, _394, _395), vec3(_1208 * _1200, _1208 * _1201, _1208 * _1202)) + 1.0) * 0.5;
        float _3640 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1225 = sqrt(((_1201 * _1201) + (_1200 * _1200)) + (_1202 * _1202)) / (_1115 + 9.9999997473787516355514526367188e-06);
        float _3651 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1226 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
        float _1227 = _1226 * 2.0;
        float _1231 = (1.0 - _1226) / (_1226 + 1.0);
        float _3662 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1232 = isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0));
        float _1241 = ((((1.0 - _1232) * (_1227 + 2.0)) * exp2(log2(isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0))) * (_1227 + 1.0))) + _1232) * _1115;
        _1249 = _1082;
        _1250 = _1081;
        _1251 = _1080;
        _1252 = _1092;
        _1253 = _1091;
        _1254 = _1090;
        _1255 = _1102;
        _1256 = _1101;
        _1257 = _1100;
        _1258 = _1115;
        _1259 = _1114;
        _1260 = _1113;
        _1261 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0)));
        _1262 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0)));
        _1263 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0)));
    }
    else
    {
        _1249 = _940;
        _1250 = _940;
        _1251 = _940;
        _1252 = _940;
        _1253 = _940;
        _1254 = _940;
        _1255 = _940;
        _1256 = _940;
        _1257 = _940;
        _1258 = _940;
        _1259 = _940;
        _1260 = _940;
        _1261 = 0.0;
        _1262 = 0.0;
        _1263 = 0.0;
    }
    float _1273 = (cbModelParam._m0[1u].x * (_1261 - _952)) + _952;
    float _1274 = (cbModelParam._m0[1u].x * (_1262 - _953)) + _953;
    float _1275 = (cbModelParam._m0[1u].x * (_1263 - _954)) + _954;
    float _1296 = fma(_1275, cbSceneParam._m0[89u].z, fma(_1274, cbSceneParam._m0[89u].y, _1273 * cbSceneParam._m0[89u].x));
    float _1299 = fma(_1275, cbSceneParam._m0[90u].z, fma(_1274, cbSceneParam._m0[90u].y, _1273 * cbSceneParam._m0[90u].x));
    float _1302 = fma(_1275, cbSceneParam._m0[91u].z, fma(_1274, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1273));
    float _1317 = _573 * 0.5;
    float _1318 = _574 * 0.5;
    float _1319 = _575 * 0.5;
    float _1320 = dot(vec4(_1317, _1318, _1319, 1.0), vec4(_1251, _1254, _1257, _1260));
    float _1323 = dot(vec4(_1317, _1318, _1319, 1.0), vec4(_1250, _1253, _1256, _1259));
    float _1326 = dot(vec4(_1317, _1318, _1319, 1.0), vec4(_1249, _1252, _1255, _1258));
    float _1360;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1333 = dot(vec4(_1317, _1318, _1319, 1.0), vec4(_939, _943, _946, _949));
        float _1337 = dot(vec4(_1317, _1318, _1319, 1.0), vec4(_941, _944, _947, _950));
        float _1341 = dot(vec4(_1317, _1318, _1319, 1.0), vec4(_942, _945, _948, _951));
        float _1348 = dot(vec4(cbModelParam._m0[39u]), vec4(_1317, _1318, _1319, 1.0));
        _1360 = dot(vec3(isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0)), isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0)), isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1348) ? 0.0 : (isnan(0.0) ? _1348 : max(0.0, _1348))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1360 = 1.0;
    }
    float _1371;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1362 = dot(vec4(cbModelParam._m0[40u]), vec4(_1317, _1318, _1319, 1.0));
        _1371 = dot(vec3(isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0)), isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0)), isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1362) ? 0.0 : (isnan(0.0) ? _1362 : max(0.0, _1362))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1371 = 1.0;
    }
    float _1375 = (_1371 * cbModelParam._m0[1u].x) + (_1360 * (1.0 - cbModelParam._m0[1u].x));
    float _1385 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _396);
    float _1386 = isnan(_1385) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1385 : min(cbModelParam._m0[25u].z, _1385));
    float _1467;
    float _1469;
    float _1471;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1434 = fma(_637, cbModelParam._m0[13u].z, fma(_633, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _629)) + cbModelParam._m0[13u].w;
        float _1438 = fma(_637, cbModelParam._m0[14u].z, fma(_633, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _629)) + cbModelParam._m0[14u].w;
        float _1442 = fma(_637, cbModelParam._m0[15u].z, fma(_633, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _629)) + cbModelParam._m0[15u].w;
        float _1445 = fma(_575, cbModelParam._m0[13u].z, fma(_574, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _573));
        float _1448 = fma(_575, cbModelParam._m0[14u].z, fma(_574, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _573));
        float _1451 = fma(_575, cbModelParam._m0[15u].z, fma(_574, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _573));
        float _1479;
        if (_1445 > 0.0)
        {
            _1479 = abs((1.0 - _1434) / _1445);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1445 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1434 + 1.0) / _1445);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1479 = frontier_phi_16_14_ladder;
        }
        float _1706;
        if (_1448 > 0.0)
        {
            _1706 = abs((1.0 - _1438) / _1448);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1448 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1438 + 1.0) / _1448);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1706 = frontier_phi_25_21_ladder;
        }
        float _1963;
        if (_1451 > 0.0)
        {
            _1963 = abs((1.0 - _1442) / _1451);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1451 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1442 + 1.0) / _1451);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1963 = frontier_phi_37_32_ladder;
        }
        float _1965 = isnan(_1706) ? _1479 : (isnan(_1479) ? _1706 : min(_1479, _1706));
        float _1966 = isnan(_1963) ? _1965 : (isnan(_1965) ? _1963 : min(_1965, _1963));
        float _1970 = (_1966 * _1445) + _1434;
        float _1971 = (_1966 * _1448) + _1438;
        float _1972 = (_1966 * _1451) + _1442;
        float _1973 = _1966 * 9.9999997473787516355514526367188e-05;
        float _1975 = (-1.0) - _1973;
        float _1977 = _1973 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1972 > _1977) || ((_1972 < _1975) || ((_1971 > _1977) || ((_1971 < _1975) || ((_1970 < _1975) || (_1970 > _1977))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2100 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1972, cbModelParam._m0[9u].z, fma(_1971, cbModelParam._m0[9u].y, _1970 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1972, cbModelParam._m0[10u].z, fma(_1971, cbModelParam._m0[10u].y, _1970 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1972, cbModelParam._m0[11u].z, fma(_1971, cbModelParam._m0[11u].y, _1970 * cbModelParam._m0[11u].x))), _1386);
            frontier_phi_15_37_ladder = _2100.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2100.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2100.x * cbModelParam._m0[1u].y;
        }
        _1467 = frontier_phi_15_37_ladder_2;
        _1469 = frontier_phi_15_37_ladder_1;
        _1471 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1455 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_573, _574, _575), _1386);
        _1467 = _1455.x * cbModelParam._m0[1u].y;
        _1469 = _1455.y * cbModelParam._m0[1u].y;
        _1471 = _1455.z * cbModelParam._m0[1u].y;
    }
    float _1475 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _396);
    float _1476 = isnan(_1475) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1475 : min(cbModelParam._m0[25u].w, _1475));
    float _1569;
    float _1571;
    float _1573;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1533 = fma(_637, cbModelParam._m0[21u].z, fma(_633, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _629)) + cbModelParam._m0[21u].w;
        float _1537 = fma(_637, cbModelParam._m0[22u].z, fma(_633, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _629)) + cbModelParam._m0[22u].w;
        float _1541 = fma(_637, cbModelParam._m0[23u].z, fma(_633, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _629)) + cbModelParam._m0[23u].w;
        float _1544 = fma(_575, cbModelParam._m0[21u].z, fma(_574, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _573));
        float _1547 = fma(_575, cbModelParam._m0[22u].z, fma(_574, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _573));
        float _1550 = fma(_575, cbModelParam._m0[23u].z, fma(_574, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _573));
        float _1711;
        if (_1544 > 0.0)
        {
            _1711 = abs((1.0 - _1533) / _1544);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1544 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1533 + 1.0) / _1544);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1711 = frontier_phi_27_23_ladder;
        }
        float _1990;
        if (_1547 > 0.0)
        {
            _1990 = abs((1.0 - _1537) / _1547);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1547 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1537 + 1.0) / _1547);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1990 = frontier_phi_39_34_ladder;
        }
        float _2203;
        if (_1550 > 0.0)
        {
            _2203 = abs((1.0 - _1541) / _1550);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1550 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1541 + 1.0) / _1550);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2203 = frontier_phi_48_45_ladder;
        }
        float _2205 = isnan(_1990) ? _1711 : (isnan(_1711) ? _1990 : min(_1711, _1990));
        float _2206 = isnan(_2203) ? _2205 : (isnan(_2205) ? _2203 : min(_2205, _2203));
        float _2210 = (_2206 * _1544) + _1533;
        float _2211 = (_2206 * _1547) + _1537;
        float _2212 = (_2206 * _1550) + _1541;
        float _2213 = _2206 * 9.9999997473787516355514526367188e-05;
        float _2214 = (-1.0) - _2213;
        float _2216 = _2213 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2212 > _2216) || ((_2212 < _2214) || ((_2211 > _2216) || ((_2211 < _2214) || ((_2210 < _2214) || (_2210 > _2216))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2410 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2212, cbModelParam._m0[17u].z, fma(_2211, cbModelParam._m0[17u].y, _2210 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2212, cbModelParam._m0[18u].z, fma(_2211, cbModelParam._m0[18u].y, _2210 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2212, cbModelParam._m0[19u].z, fma(_2211, cbModelParam._m0[19u].y, _2210 * cbModelParam._m0[19u].x))), _1476);
            frontier_phi_24_48_ladder = _2410.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2410.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2410.x * cbModelParam._m0[1u].z;
        }
        _1569 = frontier_phi_24_48_ladder_2;
        _1571 = frontier_phi_24_48_ladder_1;
        _1573 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1553 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_573, _574, _575), _1476);
        _1569 = _1553.x * cbModelParam._m0[1u].z;
        _1571 = _1553.y * cbModelParam._m0[1u].z;
        _1573 = _1553.z * cbModelParam._m0[1u].z;
    }
    float _1586 = (((_600 * _550) + _601) * _565) * ((cbModelParam._m0[1u].w * (_1569 - _1467)) + _1467);
    float _1588 = (((_600 * _552) + _601) * _565) * ((cbModelParam._m0[1u].w * (_1571 - _1469)) + _1469);
    float _1590 = (((_600 * _553) + _601) * _565) * ((cbModelParam._m0[1u].w * (_1573 - _1471)) + _1471);
    float _1593 = fma(_1590, cbSceneParam._m0[89u].z, fma(_1588, cbSceneParam._m0[89u].y, _1586 * cbSceneParam._m0[89u].x));
    float _1596 = fma(_1590, cbSceneParam._m0[90u].z, fma(_1588, cbSceneParam._m0[90u].y, _1586 * cbSceneParam._m0[90u].x));
    float _1599 = fma(_1590, cbSceneParam._m0[91u].z, fma(_1588, cbSceneParam._m0[91u].y, _1586 * cbSceneParam._m0[91u].x));
    vec4 _1607 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_483, _484));
    float _1609 = _1607.w;
    float _1621 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1609);
    float _1622 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1609);
    float _1623 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1609);
    uvec4 _1627 = floatBitsToUint(cbInstanceData._m0[_524 + 5u]);
    uint _1629 = _1627.x * 14u;
    uint _1630 = _1629 + 13u;
    float _1637 = _565 + (-1.0);
    float _1642 = (cbLight._m0[_1630].x * _1637) + 1.0;
    float _1643 = (cbLight._m0[_1630].y * _1637) + 1.0;
    float _1644 = (cbLight._m0[_1630].z * _1637) + 1.0;
    float _1645 = (cbLight._m0[_1630].w * _1637) + 1.0;
    uint _1646 = _1629 + 5u;
    float _1652 = isnan(1.0) ? _1643 : (isnan(_1643) ? 1.0 : min(_1643, 1.0));
    uint _1656 = _1629 + 4u;
    float _1665 = isnan(1.0) ? _1642 : (isnan(_1642) ? 1.0 : min(_1642, 1.0));
    uint _1669 = _1629 | 1u;
    float _1680 = dot(vec3(cbLight._m0[_1629].xyz), vec3(_393, _394, _395));
    float _1683 = dot(vec3(cbLight._m0[_1669].xyz), vec3(_393, _394, _395));
    float _3798 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
    float _3809 = isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0));
    float _1688 = (isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0))) * 0.3183098733425140380859375;
    float _1690 = (isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0))) * 0.3183098733425140380859375;
    float _1697 = ((cbLight._m0[_1646].x * _1652) * _1690) + (((cbLight._m0[_1656].x * _1621) * _1665) * _1688);
    float _1698 = ((_1652 * cbLight._m0[_1646].y) * _1690) + (((cbLight._m0[_1656].y * _1622) * _1665) * _1688);
    float _1699 = ((_1652 * cbLight._m0[_1646].z) * _1690) + (((cbLight._m0[_1656].z * _1623) * _1665) * _1688);
    uvec4 _1703 = floatBitsToUint(cbLight._m0[_1629 + 12u]);
    bool _1705 = _1703.x == 0u;
    float _1716;
    float _1718;
    float _1720;
    if (_1705)
    {
        _1716 = _1697;
        _1718 = _1698;
        _1720 = _1699;
    }
    else
    {
        uint _1724 = _1629 + 6u;
        float _1740 = (dot(vec3(cbLight._m0[_1629 + 2u].xyz), vec3(_393, _394, _395)) * 0.5) + 0.5;
        float _1741 = _1740 * _1740;
        float _3820 = isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0));
        float _1742 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
        float _1743 = isnan(1.0) ? _1644 : (isnan(_1644) ? 1.0 : min(_1644, 1.0));
        _1716 = (((cbLight._m0[_1724].x * 0.3183098733425140380859375) * _1742) * _1743) + _1697;
        _1718 = (((cbLight._m0[_1724].y * 0.3183098733425140380859375) * _1742) * _1743) + _1698;
        _1720 = (((cbLight._m0[_1724].z * 0.3183098733425140380859375) * _1742) * _1743) + _1699;
    }
    bool _1723 = _1703.y == 0u;
    float _1761;
    float _1763;
    float _1765;
    if (_1723)
    {
        _1761 = _1716;
        _1763 = _1718;
        _1765 = _1720;
    }
    else
    {
        uint _1934 = _1629 + 7u;
        float _1950 = (dot(vec3(cbLight._m0[_1629 + 3u].xyz), vec3(_393, _394, _395)) * 0.5) + 0.5;
        float _1951 = _1950 * _1950;
        float _3836 = isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0));
        float _1952 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
        float _1953 = isnan(1.0) ? _1645 : (isnan(_1645) ? 1.0 : min(_1645, 1.0));
        _1761 = (((cbLight._m0[_1934].x * 0.3183098733425140380859375) * _1952) * _1953) + _1716;
        _1763 = (((cbLight._m0[_1934].y * 0.3183098733425140380859375) * _1952) * _1953) + _1718;
        _1765 = (((cbLight._m0[_1934].z * 0.3183098733425140380859375) * _1952) * _1953) + _1720;
    }
    uint _1768 = _1629 + 8u;
    float _1781 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1629].w)) * _396) * 0.949999988079071044921875);
    float _1782 = _1781 * _1781;
    float _1783 = cbLight._m0[_1629].x + _475;
    float _1784 = cbLight._m0[_1629].y + _476;
    float _1785 = cbLight._m0[_1629].z + _477;
    float _1789 = inversesqrt(dot(vec3(_1783, _1784, _1785), vec3(_1783, _1784, _1785)));
    float _1790 = _1789 * _1783;
    float _1791 = _1789 * _1784;
    float _1792 = _1789 * _1785;
    float _1793 = dot(vec3(_393, _394, _395), vec3(cbLight._m0[_1629].xyz));
    float _3852 = isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0));
    float _1796 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
    float _3863 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _1797 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
    float _1798 = dot(vec3(_393, _394, _395), vec3(_1790, _1791, _1792));
    float _3874 = isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0));
    float _1801 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
    float _1802 = dot(vec3(cbLight._m0[_1629].xyz), vec3(_1790, _1791, _1792));
    float _3885 = isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0));
    float _1806 = _1782 * _1782;
    float _1810 = ((_1801 * _1801) * (_1806 + (-1.0))) + 1.0;
    float _1818 = exp2(log2(1.0 - (isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0)))) * 5.0);
    float _1819 = 0.959999978542327880859375 - _547;
    float _1821 = 0.959999978542327880859375 - _548;
    float _1822 = 0.959999978542327880859375 - _549;
    float _1829 = 1.0 - _1782;
    float _1840 = (0.5 / (((_1797 * ((_1796 * _1829) + _1782)) + 9.9999999392252902907785028219223e-09) + (((_1797 * _1829) + _1782) * _1796))) * _1796;
    float _3896 = isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0));
    float _1842 = (isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0))) * (_1806 / ((_1810 * _1810) * 3.141590118408203125));
    uint _1856 = _1629 + 9u;
    float _1867 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1669].w)) * _396) * 0.949999988079071044921875);
    float _1868 = _1867 * _1867;
    float _1869 = cbLight._m0[_1669].x + _475;
    float _1870 = cbLight._m0[_1669].y + _476;
    float _1871 = cbLight._m0[_1669].z + _477;
    float _1875 = inversesqrt(dot(vec3(_1869, _1870, _1871), vec3(_1869, _1870, _1871)));
    float _1876 = _1875 * _1869;
    float _1877 = _1875 * _1870;
    float _1878 = _1875 * _1871;
    float _1879 = dot(vec3(_393, _394, _395), vec3(cbLight._m0[_1669].xyz));
    float _3907 = isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0));
    float _1882 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
    float _1883 = dot(vec3(_393, _394, _395), vec3(_1876, _1877, _1878));
    float _3918 = isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0));
    float _1886 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
    float _1887 = dot(vec3(cbLight._m0[_1669].xyz), vec3(_1876, _1877, _1878));
    float _3929 = isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0));
    float _1891 = _1868 * _1868;
    float _1895 = ((_1886 * _1886) * (_1891 + (-1.0))) + 1.0;
    float _1902 = exp2(log2(1.0 - (isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0)))) * 5.0);
    float _1909 = 1.0 - _1868;
    float _1919 = (0.5 / (((_1797 * ((_1882 * _1909) + _1868)) + 9.9999999392252902907785028219223e-09) + (((_1797 * _1909) + _1868) * _1882))) * _1882;
    float _3940 = isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0));
    float _1921 = (isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0))) * (_1891 / ((_1895 * _1895) * 3.141590118408203125));
    float _1931 = (((((_1902 * _1819) + _550) * cbLight._m0[_1856].x) * _1921) * _1652) + ((((cbLight._m0[_1768].x * _1621) * ((_1818 * _1819) + _550)) * _1842) * _1665);
    float _1932 = (((((_1902 * _1821) + _552) * cbLight._m0[_1856].y) * _1921) * _1652) + ((((cbLight._m0[_1768].y * _1622) * ((_1818 * _1821) + _552)) * _1842) * _1665);
    float _1933 = (((((_1902 * _1822) + _553) * cbLight._m0[_1856].z) * _1921) * _1652) + ((((cbLight._m0[_1768].z * _1623) * ((_1818 * _1822) + _553)) * _1842) * _1665);
    float _1995;
    float _1997;
    float _1999;
    if (_1705)
    {
        _1995 = _1931;
        _1997 = _1932;
        _1999 = _1933;
    }
    else
    {
        uint _2001 = _1629 + 2u;
        uint _2005 = _1629 + 10u;
        float _2019 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2001].w)) * _396) * 0.949999988079071044921875);
        float _2020 = _2019 * _2019;
        float _2021 = cbLight._m0[_2001].x + _475;
        float _2022 = cbLight._m0[_2001].y + _476;
        float _2023 = cbLight._m0[_2001].z + _477;
        float _2027 = inversesqrt(dot(vec3(_2021, _2022, _2023), vec3(_2021, _2022, _2023)));
        float _2028 = _2027 * _2021;
        float _2029 = _2027 * _2022;
        float _2030 = _2027 * _2023;
        float _2031 = dot(vec3(_393, _394, _395), vec3(cbLight._m0[_2001].xyz));
        float _3951 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
        float _2034 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
        float _2035 = dot(vec3(_393, _394, _395), vec3(_2028, _2029, _2030));
        float _3962 = isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0));
        float _2038 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
        float _2039 = dot(vec3(cbLight._m0[_2001].xyz), vec3(_2028, _2029, _2030));
        float _3973 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
        float _2043 = _2020 * _2020;
        float _2047 = ((_2038 * _2038) * (_2043 + (-1.0))) + 1.0;
        float _2054 = exp2(log2(1.0 - (isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0)))) * 5.0);
        float _2061 = 1.0 - _2020;
        float _2071 = (0.5 / (((_1797 * ((_2034 * _2061) + _2020)) + 9.9999999392252902907785028219223e-09) + (((_1797 * _2061) + _2020) * _2034))) * _2034;
        float _3984 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
        float _2073 = (isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0))) * (_2043 / ((_2047 * _2047) * 3.141590118408203125));
        float _2074 = isnan(1.0) ? _1644 : (isnan(_1644) ? 1.0 : min(_1644, 1.0));
        _1995 = (((((_2054 * _1819) + _550) * cbLight._m0[_2005].x) * _2073) * _2074) + _1931;
        _1997 = (((((_2054 * _1821) + _552) * cbLight._m0[_2005].y) * _2073) * _2074) + _1932;
        _1999 = (((((_2054 * _1822) + _553) * cbLight._m0[_2005].z) * _2073) * _2074) + _1933;
    }
    float _2109;
    float _2111;
    float _2113;
    if (_1723)
    {
        _2109 = _1995;
        _2111 = _1997;
        _2113 = _1999;
    }
    else
    {
        uint _2120 = _1629 + 3u;
        uint _2124 = _1629 + 11u;
        float _2138 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2120].w)) * _396) * 0.949999988079071044921875);
        float _2139 = _2138 * _2138;
        float _2140 = cbLight._m0[_2120].x + _475;
        float _2141 = cbLight._m0[_2120].y + _476;
        float _2142 = cbLight._m0[_2120].z + _477;
        float _2146 = inversesqrt(dot(vec3(_2140, _2141, _2142), vec3(_2140, _2141, _2142)));
        float _2147 = _2146 * _2140;
        float _2148 = _2146 * _2141;
        float _2149 = _2146 * _2142;
        float _2150 = dot(vec3(_393, _394, _395), vec3(cbLight._m0[_2120].xyz));
        float _4000 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
        float _2153 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
        float _2154 = dot(vec3(_393, _394, _395), vec3(_2147, _2148, _2149));
        float _4011 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0));
        float _2157 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
        float _2158 = dot(vec3(cbLight._m0[_2120].xyz), vec3(_2147, _2148, _2149));
        float _4022 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0));
        float _2162 = _2139 * _2139;
        float _2166 = ((_2157 * _2157) * (_2162 + (-1.0))) + 1.0;
        float _2173 = exp2(log2(1.0 - (isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0)))) * 5.0);
        float _2180 = 1.0 - _2139;
        float _2190 = (0.5 / (((_1797 * ((_2153 * _2180) + _2139)) + 9.9999999392252902907785028219223e-09) + (((_1797 * _2180) + _2139) * _2153))) * _2153;
        float _4033 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
        float _2192 = (isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0))) * (_2162 / ((_2166 * _2166) * 3.141590118408203125));
        float _2193 = isnan(1.0) ? _1645 : (isnan(_1645) ? 1.0 : min(_1645, 1.0));
        _2109 = (((((_2173 * _1819) + _550) * cbLight._m0[_2124].x) * _2192) * _2193) + _1995;
        _2111 = (((((_2173 * _1821) + _552) * cbLight._m0[_2124].y) * _2192) * _2193) + _1997;
        _2113 = (((((_2173 * _1822) + _553) * cbLight._m0[_2124].z) * _2192) * _2193) + _1999;
    }
    float _2327;
    float _2329;
    float _2331;
    float _2333;
    float _2335;
    float _2337;
    if (_1627.y == 0u)
    {
        float _2268 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2269 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2268;
        float _2270 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2268;
        float _2271 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2268;
        uvec4 _2283 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2284 = _2283.x;
        uint _2295 = uint((float(_2283.y) * floor(float(uint(cbSceneParam._m0[85u].y * _484) / _2284))) + floor(float(uint(cbSceneParam._m0[85u].x * _483) / _2284)));
        float _2305 = (log2(_2271 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2306 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
        uint _2309 = uint(isnan(14.0) ? _2306 : (isnan(_2306) ? 14.0 : min(_2306, 14.0)));
        uvec4 _2314 = texelFetch(g_lightClusterGridBuffer, int(((_2309 << 2u) + (_2295 << 6u)) >> 2u));
        uint _2315 = _2314.x;
        uint _2316 = _2283.z;
        float _2415;
        float _2417;
        float _2419;
        float _2421;
        float _2423;
        float _2425;
        if (((((1u << ((_2316 >> 4u) & 15u)) + 4294967295u) & _2315) == 0u) || ((_2316 & 240u) == 0u))
        {
            _2415 = 0.0;
            _2417 = 0.0;
            _2419 = 0.0;
            _2421 = 0.0;
            _2423 = 0.0;
            _2425 = 0.0;
        }
        else
        {
            float _2416;
            float _2418;
            float _2420;
            float _2422;
            float _2424;
            float _2426;
            float _2559 = 0.0;
            float _2560 = 0.0;
            float _2561 = 0.0;
            float _2562 = 0.0;
            float _2563 = 0.0;
            float _2564 = 0.0;
            uint _2565 = 0u;
            uint _2574;
            bool _2575;
            for (;;)
            {
                _2574 = texelFetch(g_lightClassification, int((((_2309 << 5u) + (_2295 << 9u)) + (_2565 << 2u)) >> 2u)).x;
                _2575 = _2574 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2575)
                {
                    frontier_phi_63_pred = _2564;
                    frontier_phi_63_pred_1 = _2563;
                    frontier_phi_63_pred_2 = _2562;
                    frontier_phi_63_pred_3 = _2561;
                    frontier_phi_63_pred_4 = _2560;
                    frontier_phi_63_pred_5 = _2559;
                }
                else
                {
                    float _2683;
                    float _2684;
                    float _2685;
                    float _2686;
                    float _2687;
                    float _2688;
                    uint _2689;
                    _2683 = _2559;
                    _2684 = _2560;
                    _2685 = _2561;
                    _2686 = _2562;
                    _2687 = _2563;
                    _2688 = _2564;
                    _2689 = _2574;
                    float _2615;
                    float _2616;
                    float _2617;
                    float _2618;
                    float _2619;
                    float _2620;
                    for (;;)
                    {
                        uint _2693 = uint(findLSB(_2689)) + (_2565 << 5u);
                        uint _2690 = (_2689 + 4294967295u) & _2689;
                        uint _2695 = _2693 * 48u;
                        vec4 _2709 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2695)).x, texelFetch(g_PointLightRenderingBuffer, int(_2695 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2695 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2695 + 3u)).x));
                        uint _2715 = (_2693 * 48u) + 4u;
                        vec4 _2728 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2715)).x, texelFetch(g_PointLightRenderingBuffer, int(_2715 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2715 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2715 + 3u)).x));
                        uint _2734 = (_2693 * 48u) + 8u;
                        vec3 _2745 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2734)).x, texelFetch(g_PointLightRenderingBuffer, int(_2734 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2734 + 2u)).x));
                        float _2749 = _2709.x - _2269;
                        float _2750 = _2709.y - _2270;
                        float _2751 = _2709.z - _2271;
                        float _2752 = dot(vec3(_2749, _2750, _2751), vec3(_2749, _2750, _2751));
                        float _2755 = inversesqrt(_2752);
                        float _2756 = _2755 * _2749;
                        float _2757 = _2755 * _2750;
                        float _2758 = _2755 * _2751;
                        float _2759 = dot(vec3(_505, _508, _511), vec3(_2756, _2757, _2758));
                        float _2764 = 1.0 - (_2752 * _2709.w);
                        float _4059 = isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0));
                        float _2765 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
                        float _2766 = sqrt(_2752) * _2728.w;
                        float _2769 = 1.39999997615814208984375 / (_2766 + 1.39999997615814208984375);
                        float _2770 = _2769 * _2769;
                        float _2773 = ((1.0 - _2770) * _2759) + _2770;
                        float _2776 = _2766 * _2766;
                        float _2780 = ((isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : max(_2773, 0.0))) * _2765) / ((_2776 * 0.699999988079071044921875) + 1.0);
                        float _2784 = (-0.0) - _2269;
                        float _2785 = (-0.0) - _2270;
                        float _2786 = (-0.0) - _2271;
                        float _2790 = inversesqrt(dot(vec3(_2784, _2785, _2786), vec3(_2784, _2785, _2786)));
                        float _2791 = _2790 * _2784;
                        float _2792 = _2790 * _2785;
                        float _2793 = _2790 * _2786;
                        float _2801 = exp2(log2(1.0 / ((_2776 * 3.5) + 5.0)) * 0.25);
                        float _2802 = 1.0 - _581;
                        float _2809 = sqrt(1.0 - ((1.0 - (_2802 * _2802)) * (1.0 - (_2801 * _2801))));
                        float _2810 = _2809 * _2809;
                        float _2811 = _2810 * _2810;
                        float _2812 = _2791 + _2756;
                        float _2813 = _2792 + _2757;
                        float _2814 = _2793 + _2758;
                        float _2818 = inversesqrt(dot(vec3(_2812, _2813, _2814), vec3(_2812, _2813, _2814)));
                        float _2822 = dot(vec3(_505, _508, _511), vec3(_2791, _2792, _2793));
                        float _4075 = isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0));
                        float _2825 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
                        float _2826 = dot(vec3(_505, _508, _511), vec3(_2818 * _2812, _2818 * _2813, _2818 * _2814));
                        float _4086 = isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : max(_2826, 0.0));
                        float _2829 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
                        float _2833 = ((_2829 * _2829) * (_2811 + (-1.0))) + 1.0;
                        float _2834 = _2769 * _2810;
                        float _2835 = _2834 * _2834;
                        float _2838 = ((1.0 - _2835) * _2759) + _2835;
                        float _4097 = isnan(0.0) ? _2838 : (isnan(_2838) ? 0.0 : max(_2838, 0.0));
                        float _2839 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
                        float _2840 = 1.0 - _2810;
                        float _2850 = (0.5 / (((_2839 * ((_2825 * _2840) + _2810)) + 9.9999999392252902907785028219223e-09) + (((_2839 * _2840) + _2810) * _2825))) * _2839;
                        float _4108 = isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : max(_2850, 0.0));
                        float _2861 = (((_2811 * 3.1415927410125732421875) * (isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0)))) / ((_2833 * _2833) * ((_2776 * 2.1991131305694580078125) + 3.141590118408203125))) * _2765;
                        _2618 = (_2780 * _2728.x) + _2686;
                        _2619 = (_2780 * _2728.y) + _2687;
                        _2620 = (_2780 * _2728.z) + _2688;
                        _2615 = (_2861 * _2745.x) + _2683;
                        _2616 = (_2861 * _2745.y) + _2684;
                        _2617 = (_2861 * _2745.z) + _2685;
                        if (_2690 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2683 = _2615;
                            _2684 = _2616;
                            _2685 = _2617;
                            _2686 = _2618;
                            _2687 = _2619;
                            _2688 = _2620;
                            _2689 = _2690;
                        }
                    }
                    frontier_phi_63_pred = _2620;
                    frontier_phi_63_pred_1 = _2619;
                    frontier_phi_63_pred_2 = _2618;
                    frontier_phi_63_pred_3 = _2617;
                    frontier_phi_63_pred_4 = _2616;
                    frontier_phi_63_pred_5 = _2615;
                }
                _2426 = frontier_phi_63_pred;
                _2424 = frontier_phi_63_pred_1;
                _2422 = frontier_phi_63_pred_2;
                _2420 = frontier_phi_63_pred_3;
                _2418 = frontier_phi_63_pred_4;
                _2416 = frontier_phi_63_pred_5;
                uint _2566 = _2565 + 1u;
                if (_2566 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2559 = _2416;
                    _2560 = _2418;
                    _2561 = _2420;
                    _2562 = _2422;
                    _2563 = _2424;
                    _2564 = _2426;
                    _2565 = _2566;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2415 = _2416;
            _2417 = _2418;
            _2419 = _2420;
            _2421 = _2422;
            _2423 = _2424;
            _2425 = _2426;
        }
        uvec4 _2429 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2430 = _2429.z;
        uint _2432 = (_2430 >> 8u) & 15u;
        float _2527;
        float _2529;
        float _2531;
        float _2533;
        float _2535;
        float _2537;
        if (((4294967295u << _2432) & _2315) == 0u)
        {
            _2527 = _2415;
            _2529 = _2417;
            _2531 = _2419;
            _2533 = _2421;
            _2535 = _2423;
            _2537 = _2425;
        }
        else
        {
            float _2552 = inversesqrt(dot(vec3(_2269, _2270, _2271), vec3(_2269, _2270, _2271)));
            float _2553 = _2552 * _2269;
            float _2554 = _2552 * _2270;
            float _2555 = _2552 * _2271;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2432 < ((_2430 >> 12u) & 15u))
            {
                float _2528;
                float _2530;
                float _2532;
                float _2534;
                float _2536;
                float _2538;
                float _2666 = _2415;
                float _2667 = _2417;
                float _2668 = _2419;
                float _2669 = _2421;
                float _2670 = _2423;
                float _2671 = _2425;
                uint _2672 = _2432;
                uint _2681;
                bool _2682;
                for (;;)
                {
                    _2681 = texelFetch(g_lightClassification, int((((_2309 << 5u) + (_2295 << 9u)) + (_2672 << 2u)) >> 2u)).x;
                    _2682 = _2681 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2682)
                    {
                        frontier_phi_69_pred = _2671;
                        frontier_phi_69_pred_1 = _2670;
                        frontier_phi_69_pred_2 = _2669;
                        frontier_phi_69_pred_3 = _2668;
                        frontier_phi_69_pred_4 = _2667;
                        frontier_phi_69_pred_5 = _2666;
                    }
                    else
                    {
                        float _2866;
                        float _2867;
                        float _2868;
                        float _2869;
                        float _2870;
                        float _2871;
                        float _3162;
                        float _3163;
                        float _3164;
                        float _3165;
                        float _3166;
                        float _3167;
                        float _2879 = _2666;
                        float _2880 = _2667;
                        float _2881 = _2668;
                        float _2882 = _2669;
                        float _2883 = _2670;
                        float _2884 = _2671;
                        uint _2885 = _2681;
                        uint _2886;
                        vec4 _2911;
                        float _2912;
                        vec4 _2927;
                        vec3 _2939;
                        vec4 _2955;
                        vec4 _2971;
                        float _3018;
                        bool _3019;
                        for (;;)
                        {
                            uint _2896 = ((_2672 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2885));
                            _2886 = (_2885 + 4294967295u) & _2885;
                            uint _2898 = _2896 * 40u;
                            _2911 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2898)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2898 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2898 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2898 + 3u)).x));
                            _2912 = _2911.w;
                            uint _2914 = (_2896 * 40u) + 4u;
                            _2927 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2914)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2914 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2914 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2914 + 3u)).x));
                            uint _2929 = (_2896 * 40u) + 8u;
                            _2939 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2929)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2929 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2929 + 2u)).x));
                            uint _2942 = (_2896 * 40u) + 16u;
                            _2955 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2942)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2942 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2942 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2942 + 3u)).x));
                            uint _2958 = (_2896 * 40u) + 20u;
                            _2971 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2958)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2958 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2958 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2958 + 3u)).x));
                            uint _2974 = (_2896 * 40u) + 24u;
                            vec4 _2987 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2974)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2974 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2974 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2974 + 3u)).x));
                            uint _2993 = (_2896 * 40u) + 28u;
                            vec4 _3006 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2993)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2993 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2993 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2993 + 3u)).x));
                            _3018 = fma(_2271, _3006.z, fma(_2270, _3006.y, _3006.x * _2269)) + _3006.w;
                            _3019 = !((fma(_2271, _2987.z, fma(_2270, _2987.y, _2987.x * _2269)) + _2987.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3019)
                            {
                                float _3046 = _2911.x - _2269;
                                float _3047 = _2911.y - _2270;
                                float _3048 = _2911.z - _2271;
                                float _3049 = dot(vec3(_3046, _3047, _3048), vec3(_3046, _3047, _3048));
                                float _3052 = inversesqrt(_3049);
                                float _3053 = _3052 * _3046;
                                float _3054 = _3052 * _3047;
                                float _3055 = _3052 * _3048;
                                float _3059 = 1.0 - (_3049 / (_2912 * _2912));
                                float _4119 = isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : max(_3059, 0.0));
                                float _3060 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
                                float _3064 = sqrt(_3049) * _2927.w;
                                float _3066 = 1.39999997615814208984375 / (_3064 + 1.39999997615814208984375);
                                float _3067 = _3066 * _3066;
                                float _3070 = ((1.0 - _3067) * dot(vec3(_3053, _3054, _3055), vec3(_505, _508, _511))) + _3067;
                                float _3073 = _3064 * _3064;
                                float _3077 = (fma(_2271, _2955.z, fma(_2270, _2955.y, _2955.x * _2269)) + _2955.w) / _3018;
                                float _3078 = (fma(_2271, _2971.z, fma(_2270, _2971.y, _2971.x * _2269)) + _2971.w) / _3018;
                                float _3082 = 1.0 - dot(vec2(_3077, _3078), vec2(_3077, _3078));
                                float _4135 = isnan(0.0) ? _3082 : (isnan(_3082) ? 0.0 : max(_3082, 0.0));
                                float _3083 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
                                float _3084 = _3083 * (((isnan(0.0) ? _3070 : (isnan(_3070) ? 0.0 : max(_3070, 0.0))) * _3060) / ((_3073 * 0.699999988079071044921875) + 1.0));
                                float _3096 = exp2(log2(1.0 / ((_3073 * 3.5) + 5.0)) * 0.25);
                                float _3097 = 1.0 - _581;
                                float _3104 = sqrt(1.0 - ((1.0 - (_3097 * _3097)) * (1.0 - (_3096 * _3096))));
                                float _3105 = _3104 * _3104;
                                float _3106 = _3105 * _3105;
                                float _3107 = _3053 - _2553;
                                float _3108 = _3054 - _2554;
                                float _3109 = _3055 - _2555;
                                float _3113 = inversesqrt(dot(vec3(_3107, _3108, _3109), vec3(_3107, _3108, _3109)));
                                float _3117 = dot(vec3(_505, _508, _511), vec3((-0.0) - _2553, (-0.0) - _2554, (-0.0) - _2555));
                                float _4146 = isnan(0.0) ? _3117 : (isnan(_3117) ? 0.0 : max(_3117, 0.0));
                                float _3120 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
                                float _3121 = dot(vec3(_505, _508, _511), vec3(_3113 * _3107, _3113 * _3108, _3113 * _3109));
                                float _4157 = isnan(0.0) ? _3121 : (isnan(_3121) ? 0.0 : max(_3121, 0.0));
                                float _3124 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
                                float _3128 = ((_3124 * _3124) * (_3106 + (-1.0))) + 1.0;
                                float _3129 = _3066 * _3105;
                                float _3130 = _3129 * _3129;
                                float _3136 = ((1.0 - _3130) * dot(vec3(_505, _508, _511), vec3(_3053, _3054, _3055))) + _3130;
                                float _4168 = isnan(0.0) ? _3136 : (isnan(_3136) ? 0.0 : max(_3136, 0.0));
                                float _3137 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
                                float _3138 = 1.0 - _3105;
                                float _3148 = (0.5 / (((_3137 * ((_3120 * _3138) + _3105)) + 9.9999999392252902907785028219223e-09) + (((_3137 * _3138) + _3105) * _3120))) * _3137;
                                float _4179 = isnan(0.0) ? _3148 : (isnan(_3148) ? 0.0 : max(_3148, 0.0));
                                float _3158 = (_3083 * _3060) * (((_3106 * 3.1415927410125732421875) * (isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0)))) / ((_3128 * _3128) * ((_3073 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3084 * _2927.z;
                                frontier_phi_75_pred_1 = _3084 * _2927.y;
                                frontier_phi_75_pred_2 = _3084 * _2927.x;
                                frontier_phi_75_pred_3 = _3158 * _2939.z;
                                frontier_phi_75_pred_4 = _3158 * _2939.y;
                                frontier_phi_75_pred_5 = _3158 * _2939.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3167 = frontier_phi_75_pred;
                            _3166 = frontier_phi_75_pred_1;
                            _3165 = frontier_phi_75_pred_2;
                            _3164 = frontier_phi_75_pred_3;
                            _3163 = frontier_phi_75_pred_4;
                            _3162 = frontier_phi_75_pred_5;
                            _2869 = _3165 + _2882;
                            _2870 = _3166 + _2883;
                            _2871 = _3167 + _2884;
                            _2866 = _3162 + _2879;
                            _2867 = _3163 + _2880;
                            _2868 = _3164 + _2881;
                            if (_2886 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2879 = _2866;
                                _2880 = _2867;
                                _2881 = _2868;
                                _2882 = _2869;
                                _2883 = _2870;
                                _2884 = _2871;
                                _2885 = _2886;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2871;
                        frontier_phi_69_pred_1 = _2870;
                        frontier_phi_69_pred_2 = _2869;
                        frontier_phi_69_pred_3 = _2868;
                        frontier_phi_69_pred_4 = _2867;
                        frontier_phi_69_pred_5 = _2866;
                    }
                    _2538 = frontier_phi_69_pred;
                    _2536 = frontier_phi_69_pred_1;
                    _2534 = frontier_phi_69_pred_2;
                    _2532 = frontier_phi_69_pred_3;
                    _2530 = frontier_phi_69_pred_4;
                    _2528 = frontier_phi_69_pred_5;
                    uint _2673 = _2672 + 1u;
                    if (_2673 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2666 = _2528;
                        _2667 = _2530;
                        _2668 = _2532;
                        _2669 = _2534;
                        _2670 = _2536;
                        _2671 = _2538;
                        _2672 = _2673;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2538;
                frontier_phi_57_58_ladder_1 = _2536;
                frontier_phi_57_58_ladder_2 = _2534;
                frontier_phi_57_58_ladder_3 = _2532;
                frontier_phi_57_58_ladder_4 = _2530;
                frontier_phi_57_58_ladder_5 = _2528;
            }
            else
            {
                frontier_phi_57_58_ladder = _2425;
                frontier_phi_57_58_ladder_1 = _2423;
                frontier_phi_57_58_ladder_2 = _2421;
                frontier_phi_57_58_ladder_3 = _2419;
                frontier_phi_57_58_ladder_4 = _2417;
                frontier_phi_57_58_ladder_5 = _2415;
            }
            _2527 = frontier_phi_57_58_ladder_5;
            _2529 = frontier_phi_57_58_ladder_4;
            _2531 = frontier_phi_57_58_ladder_3;
            _2533 = frontier_phi_57_58_ladder_2;
            _2535 = frontier_phi_57_58_ladder_1;
            _2537 = frontier_phi_57_58_ladder;
        }
        float _2542 = isnan(1.0) ? _565 : (isnan(_565) ? 1.0 : min(_565, 1.0));
        _2327 = (_2542 * _2533) + _1761;
        _2329 = (_2542 * _2535) + _1763;
        _2331 = (_2542 * _2537) + _1765;
        _2333 = ((_2527 * _550) * _2542) + _2109;
        _2335 = ((_2529 * _552) * _2542) + _2111;
        _2337 = ((_2531 * _553) * _2542) + _2113;
    }
    else
    {
        _2327 = _1761;
        _2329 = _1763;
        _2331 = _1765;
        _2333 = _2109;
        _2335 = _2111;
        _2337 = _2113;
    }
    float _4195 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _4206 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _4217 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    uint _2357 = _524 + 6u;
    float _2365 = _483 / cbSceneParam._m0[86u].x;
    float _2366 = _484 / cbSceneParam._m0[86u].y;
    vec4 _2380 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2365, _2366, (log2((isnan(cbSceneParam._m0[77u].w) ? _416 : (isnan(_416) ? cbSceneParam._m0[77u].w : min(_416, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2382 = _2380.x;
    float _2383 = _2380.y;
    float _2384 = _2380.z;
    float _2385 = _2380.w;
    float _2477;
    float _2479;
    float _2481;
    float _2483;
    if (_416 > cbSceneParam._m0[78u].w)
    {
        float _2440 = isnan(_416) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _416 : min(cbSceneParam._m0[80u].w, _416));
        float _2441 = _2440 / _416;
        float _2452 = _2441 * _468;
        float _2453 = _469 * _2441;
        float _2454 = (-0.0) - _2453;
        float _2455 = _2441 * _470;
        float _2457 = (cbSceneParam._m0[77u].w * _2454) / _2440;
        float _2458 = _2457 + cbSceneParam._m0[79u].w;
        float _2459 = cbSceneParam._m0[79u].w - _2453;
        float _2465 = sqrt(((_2452 * _2452) + (_2453 * _2453)) + (_2455 * _2455));
        float _2468 = (1.0 - (cbSceneParam._m0[77u].w / _2440)) * _2465;
        float _2473 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2475 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2628;
        if (abs((_2454 - _2457) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2628 = ((((_2458 > 0.0) ? exp2(_2473 * _2458) : (2.0 - exp2(_2475 * _2458))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2468;
        }
        else
        {
            float _2588 = 1.0 / cbSceneParam._m0[80u].x;
            float _2589 = isnan(_2459) ? _2458 : (isnan(_2458) ? _2459 : max(_2458, _2459));
            float _2590 = isnan(_2459) ? _2458 : (isnan(_2458) ? _2459 : min(_2458, _2459));
            float _2599 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : min(_2589, 0.0));
            float _2600 = isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : min(_2590, 0.0));
            _2628 = ((abs(_2465 / _2454) * cbSceneParam._m0[80u].y) * ((((_2599 - _2600) * 2.0) - ((exp2(_2473 * (isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0)))) - exp2(_2473 * (isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0))))) * _2588)) - ((exp2(_2475 * _2599) - exp2(_2475 * _2600)) * _2588))) + (_2468 * cbSceneParam._m0[80u].z);
        }
        vec4 _2630 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2365, _2366, 1.0), 0.0);
        float _2639 = exp2((_2628 * (-1.44269502162933349609375)) * (1.0 - _2630.w));
        float _2640 = log2(_2639);
        float _2656 = log2(_2385);
        _2477 = (exp2(_2656 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2640 * cbSceneParam._m0[78u].x)) * _2630.x) / cbSceneParam._m0[78u].x)) + _2382;
        _2479 = (exp2(_2656 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2640 * cbSceneParam._m0[78u].y)) * _2630.y) / cbSceneParam._m0[78u].y)) + _2383;
        _2481 = (exp2(_2656 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2640 * cbSceneParam._m0[78u].z)) * _2630.z) / cbSceneParam._m0[78u].z)) + _2384;
        _2483 = _2639 * _2385;
    }
    else
    {
        _2477 = _2382;
        _2479 = _2383;
        _2481 = _2384;
        _2483 = _2385;
    }
    float _2495 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2496 = _2495 == 3.0;
    float _2497 = log2(_2483);
    float _2504 = exp2(_2497 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0))) * (_2327 + ((isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0))) * _565))) + ((_2333 + ((isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0))) * _1375)) * cbPerFrame._m0[3u].x));
    float _2505 = exp2(_2497 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0))) * (_2329 + ((isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0))) * _565))) + ((_2335 + ((isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0))) * _1375)) * cbPerFrame._m0[3u].x));
    float _2506 = exp2(_2497 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0))) * (_2331 + ((isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0))) * _565))) + ((_2337 + ((isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0))) * _1375)) * cbPerFrame._m0[3u].x));
    float _2515 = (_2495 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2515 * (_2496 ? _2504 : (_2504 + (cbSceneParam._m0[72u].w * _2477)));
    SV_Target.y = _2515 * (_2496 ? _2505 : (_2505 + (cbSceneParam._m0[72u].w * _2479)));
    SV_Target.z = _2515 * (_2496 ? _2506 : (_2506 + (cbSceneParam._m0[72u].w * _2481)));
    SV_Target.w = cbInstanceData._m0[_2357].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2357].w;
}


