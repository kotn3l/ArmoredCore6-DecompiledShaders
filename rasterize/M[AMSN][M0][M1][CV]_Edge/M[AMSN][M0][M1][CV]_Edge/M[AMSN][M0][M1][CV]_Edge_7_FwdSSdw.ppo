#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _936;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _190 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _191 = _190 * _182;
    float _192 = _190 * _183;
    float _193 = _190 * _184;
    float _197 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _198 = _197 * NORMAL.x;
    float _199 = _197 * NORMAL.y;
    float _200 = _197 * NORMAL.z;
    float _204 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _205 = _204 * TANGENT.x;
    float _206 = _204 * TANGENT.y;
    float _207 = _204 * TANGENT.z;
    float _212;
    float _213;
    float _214;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _212 = (-0.0) - _198;
        _213 = (-0.0) - _199;
        _214 = (-0.0) - _200;
    }
    else
    {
        _212 = _198;
        _213 = _199;
        _214 = _200;
    }
    vec4 _240 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _246 = _240.x * cbMtdParam._m0[9u].x;
    float _247 = _240.y * cbMtdParam._m0[9u].y;
    float _248 = _240.z * cbMtdParam._m0[9u].z;
    vec4 _266 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _270 = _266.z;
    float _274 = (_266.x * 2.0) + (-1.0);
    float _276 = (_266.y * 2.0) + (-1.0);
    float _277 = dot(vec2(_274, _276), vec2(_274, _276));
    float _3295 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    float _283 = sqrt(1.0 - (isnan(1.0) ? _3295 : (isnan(_3295) ? 1.0 : min(_3295, 1.0))));
    float _286 = fma(_283, _212, fma(_276, _205, _274 * _191));
    float _289 = fma(_283, _213, fma(_276, _206, _274 * _192));
    float _292 = fma(_283, _214, fma(_276, _207, _274 * _193));
    float _296 = inversesqrt(dot(vec3(_286, _289, _292), vec3(_286, _289, _292)));
    float _307 = cbMtdParam._m0[12u].x + dot(vec4(_296 * _286, _296 * _289, _296 * _292, 0.0), vec4(cbMtdParam._m0[13u].xyz, 0.0));
    float _3306 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _308 = isnan(1.0) ? _3306 : (isnan(_3306) ? 1.0 : min(_3306, 1.0));
    float _315 = (_308 * (cbMtdParam._m0[10u].x - _246)) + _246;
    float _316 = (_308 * (cbMtdParam._m0[10u].y - _247)) + _247;
    float _317 = (_308 * (cbMtdParam._m0[10u].z - _248)) + _248;
    vec4 _329 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _331 = _329.x;
    float _333 = _331 - (_331 * _308);
    vec4 _345 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _352 = (_345.x * 2.0) + (-1.0);
    float _353 = (_345.y * 2.0) + (-1.0);
    float _354 = dot(vec2(_352, _353), vec2(_352, _353));
    float _3317 = isnan(0.0) ? _354 : (isnan(_354) ? 0.0 : max(_354, 0.0));
    float _362 = ((_345.z - _270) * _308) + _270;
    float _374 = (((_352 - _274) + (cbMtdParam._m0[12u].w * _274)) * _308) + _274;
    float _375 = (((_353 - _276) + (cbMtdParam._m0[12u].w * _276)) * _308) + _276;
    float _376 = ((sqrt(1.0 - (isnan(1.0) ? _3317 : (isnan(_3317) ? 1.0 : min(_3317, 1.0)))) - _283) * _308) + _283;
    float _379 = fma(_376, _212, fma(_375, _205, _374 * _191));
    float _382 = fma(_376, _213, fma(_375, _206, _374 * _192));
    float _385 = fma(_376, _214, fma(_375, _207, _374 * _193));
    float _389 = inversesqrt(dot(vec3(_379, _382, _385), vec3(_379, _382, _385)));
    float _390 = _389 * _379;
    float _391 = _389 * _382;
    float _392 = _389 * _385;
    float _3328 = isnan(0.0) ? _362 : (isnan(_362) ? 0.0 : max(_362, 0.0));
    float _393 = isnan(1.0) ? _3328 : (isnan(_3328) ? 1.0 : min(_3328, 1.0));
    float _3339 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _3350 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    float _3361 = isnan(0.0) ? _317 : (isnan(_317) ? 0.0 : max(_317, 0.0));
    float _3372 = isnan(0.0) ? _333 : (isnan(_333) ? 0.0 : max(_333, 0.0));
    float _397 = isnan(1.0) ? _3372 : (isnan(_3372) ? 1.0 : min(_3372, 1.0));
    float _413 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _455 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _465 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _455);
    float _466 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _455);
    float _467 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _455);
    float _471 = inversesqrt(dot(vec3(_465, _466, _467), vec3(_465, _466, _467)));
    float _472 = _465 * _471;
    float _473 = _466 * _471;
    float _474 = _467 * _471;
    float _480 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _481 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _502 = fma(_392, cbSceneParam._m0[5u].z, fma(_391, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _390));
    float _505 = fma(_392, cbSceneParam._m0[6u].z, fma(_391, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _390));
    float _508 = fma(_392, cbSceneParam._m0[7u].z, fma(_391, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _390));
    uint _521 = uint(roundEven(NORMAL.w)) * 13u;
    uint _523 = (_521 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _529 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3339 : (isnan(_3339) ? 1.0 : min(_3339, 1.0)))) * cbInstanceData._m0[_523].x;
    float _530 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3350 : (isnan(_3350) ? 1.0 : min(_3350, 1.0)))) * cbInstanceData._m0[_523].y;
    float _531 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3361 : (isnan(_3361) ? 1.0 : min(_3361, 1.0)))) * cbInstanceData._m0[_523].z;
    float _3383 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _532 = isnan(1.0) ? _3383 : (isnan(_3383) ? 1.0 : min(_3383, 1.0));
    float _3394 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _533 = isnan(1.0) ? _3394 : (isnan(_3394) ? 1.0 : min(_3394, 1.0));
    float _3405 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _534 = isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0));
    float _535 = 1.0 - _397;
    float _536 = _532 * _535;
    float _537 = _533 * _535;
    float _538 = _534 * _535;
    float _543 = (_532 + (-0.039999999105930328369140625)) * _397;
    float _544 = (_533 + (-0.039999999105930328369140625)) * _397;
    float _545 = (_534 + (-0.039999999105930328369140625)) * _397;
    float _546 = _543 + 0.039999999105930328369140625;
    float _548 = _544 + 0.039999999105930328369140625;
    float _549 = _545 + 0.039999999105930328369140625;
    vec4 _558 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _480, cbSceneParam._m0[86u].y * _481));
    float _561 = _558.x * TEXCOORD_3.w;
    float _562 = dot(vec3(_390, _391, _392), vec3(_472, _473, _474));
    float _565 = _562 * 2.0;
    float _569 = (_565 * _390) - _472;
    float _570 = (_565 * _391) - _473;
    float _571 = (_565 * _392) - _474;
    float _575 = abs(dot(vec3(_472, _473, _474), vec3(_390, _391, _392)));
    float _3416 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _577 = sqrt(_393);
    float _590 = exp2((_577 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_577 * 3.0));
    float _596 = (1.0 - _590) * ((_577 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _597 = _590 * _577;
    float _625 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _629 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _633 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _935;
    float _937;
    float _938;
    float _939;
    float _940;
    float _941;
    float _942;
    float _943;
    float _944;
    float _945;
    float _946;
    float _947;
    float _948;
    float _949;
    float _950;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _660 = fma(_633, cbModelParam._m0[26u].z, fma(_629, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _625));
        float _664 = fma(_633, cbModelParam._m0[27u].z, fma(_629, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _625));
        float _668 = fma(_633, cbModelParam._m0[28u].z, fma(_629, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _625));
        float _693 = _625 + _390;
        float _694 = _629 + _391;
        float _695 = _633 + _392;
        float _705 = fma(_695, cbModelParam._m0[26u].z, fma(_694, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _693)) - _660;
        float _706 = fma(_695, cbModelParam._m0[27u].z, fma(_694, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _693)) - _664;
        float _707 = fma(_695, cbModelParam._m0[28u].z, fma(_694, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _693)) - _668;
        float _711 = inversesqrt(dot(vec3(_705, _706, _707), vec3(_705, _706, _707)));
        float _724 = ((_711 * _705) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_660 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _725 = ((_711 * _706) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_664 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _726 = ((_711 * _707) / cbModelParam._m0[34u].z) + ((((((_668 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _729 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_724, _725, _726), 0.0);
        vec4 _736 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_724, _725, _726), 0.0);
        vec4 _743 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_724, _725, _726), 0.0);
        vec4 _750 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_724, _725, _726), 0.0);
        float _763 = exp2((_729.w + (-0.5)) * 20.0) * 2.0;
        float _764 = _763 * (_729.x + (-0.5));
        float _765 = _763 * (_729.y + (-0.5));
        float _766 = _763 * (_729.z + (-0.5));
        float _773 = exp2((_736.w + (-0.5)) * 20.0) * 2.0;
        float _774 = _773 * (_736.x + (-0.5));
        float _775 = _773 * (_736.y + (-0.5));
        float _776 = _773 * (_736.z + (-0.5));
        float _783 = exp2((_743.w + (-0.5)) * 20.0) * 2.0;
        float _784 = _783 * (_743.x + (-0.5));
        float _785 = _783 * (_743.y + (-0.5));
        float _786 = _783 * (_743.z + (-0.5));
        float _793 = exp2((_750.w + (-0.5)) * 20.0) * 2.0;
        float _794 = _793 * (_750.x + (-0.5));
        float _795 = _793 * (_750.y + (-0.5));
        float _796 = _793 * (_750.z + (-0.5));
        float _797 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
        float _798 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
        float _799 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
        float _800 = _764 * 0.5;
        float _801 = _774 * 0.5;
        float _802 = _784 * 0.5;
        float _803 = dot(vec3(_800, _801, _802), vec3(_800, _801, _802));
        float _808 = (_803 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_803);
        float _817 = (dot(vec3(_390, _391, _392), vec3(_808 * _800, _808 * _801, _808 * _802)) + 1.0) * 0.5;
        float _3442 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
        float _827 = sqrt(((_801 * _801) + (_800 * _800)) + (_802 * _802)) / (_797 + 9.9999997473787516355514526367188e-06);
        float _3453 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
        float _828 = isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0));
        float _829 = _828 * 2.0;
        float _833 = (1.0 - _828) / (_828 + 1.0);
        float _3464 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
        float _834 = isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0));
        float _843 = ((((1.0 - _834) * (_829 + 2.0)) * exp2(log2(isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0))) * (_829 + 1.0))) + _834) * _797;
        float _844 = _765 * 0.5;
        float _845 = _775 * 0.5;
        float _846 = _785 * 0.5;
        float _847 = dot(vec3(_844, _845, _846), vec3(_844, _845, _846));
        float _852 = (_847 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_847);
        float _860 = (dot(vec3(_390, _391, _392), vec3(_852 * _844, _852 * _845, _852 * _846)) + 1.0) * 0.5;
        float _3475 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
        float _869 = sqrt(((_845 * _845) + (_844 * _844)) + (_846 * _846)) / (_798 + 9.9999997473787516355514526367188e-06);
        float _3486 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
        float _870 = isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0));
        float _871 = _870 * 2.0;
        float _875 = (1.0 - _870) / (_870 + 1.0);
        float _3497 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
        float _876 = isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0));
        float _885 = ((((1.0 - _876) * (_871 + 2.0)) * exp2(log2(isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0))) * (_871 + 1.0))) + _876) * _798;
        float _886 = _766 * 0.5;
        float _887 = _776 * 0.5;
        float _888 = _786 * 0.5;
        float _889 = dot(vec3(_886, _887, _888), vec3(_886, _887, _888));
        float _894 = (_889 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_889);
        float _902 = (dot(vec3(_390, _391, _392), vec3(_894 * _886, _894 * _887, _894 * _888)) + 1.0) * 0.5;
        float _3508 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
        float _911 = sqrt(((_887 * _887) + (_886 * _886)) + (_888 * _888)) / (_799 + 9.9999997473787516355514526367188e-06);
        float _3519 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
        float _912 = isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0));
        float _913 = _912 * 2.0;
        float _917 = (1.0 - _912) / (_912 + 1.0);
        float _3530 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
        float _918 = isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0));
        float _927 = ((((1.0 - _918) * (_913 + 2.0)) * exp2(log2(isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0))) * (_913 + 1.0))) + _918) * _799;
        _935 = _766;
        _937 = _765;
        _938 = _764;
        _939 = _776;
        _940 = _775;
        _941 = _774;
        _942 = _786;
        _943 = _785;
        _944 = _784;
        _945 = _799;
        _946 = _798;
        _947 = _797;
        _948 = cbModelParam._m0[36u].z * (isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0)));
        _949 = cbModelParam._m0[36u].z * (isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0)));
        _950 = cbModelParam._m0[36u].z * (isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0)));
    }
    else
    {
        _935 = _936;
        _937 = _936;
        _938 = _936;
        _939 = _936;
        _940 = _936;
        _941 = _936;
        _942 = _936;
        _943 = _936;
        _944 = _936;
        _945 = _936;
        _946 = _936;
        _947 = _936;
        _948 = 0.0;
        _949 = 0.0;
        _950 = 0.0;
    }
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _976 = fma(_633, cbModelParam._m0[30u].z, fma(_629, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _625));
        float _980 = fma(_633, cbModelParam._m0[31u].z, fma(_629, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _625));
        float _984 = fma(_633, cbModelParam._m0[32u].z, fma(_629, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _625));
        float _1007 = _625 + _390;
        float _1008 = _629 + _391;
        float _1009 = _633 + _392;
        float _1019 = fma(_1009, cbModelParam._m0[30u].z, fma(_1008, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1007)) - _976;
        float _1020 = fma(_1009, cbModelParam._m0[31u].z, fma(_1008, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1007)) - _980;
        float _1021 = fma(_1009, cbModelParam._m0[32u].z, fma(_1008, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1007)) - _984;
        float _1025 = inversesqrt(dot(vec3(_1019, _1020, _1021), vec3(_1019, _1020, _1021)));
        float _1038 = ((_1025 * _1019) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_976 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1039 = ((_1025 * _1020) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_980 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1040 = ((_1025 * _1021) / cbModelParam._m0[35u].z) + ((((((_984 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1042 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1038, _1039, _1040), 0.0);
        vec4 _1049 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1038, _1039, _1040), 0.0);
        vec4 _1056 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1038, _1039, _1040), 0.0);
        vec4 _1063 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1038, _1039, _1040), 0.0);
        float _1075 = exp2((_1042.w + (-0.5)) * 20.0) * 2.0;
        float _1076 = _1075 * (_1042.x + (-0.5));
        float _1077 = _1075 * (_1042.y + (-0.5));
        float _1078 = _1075 * (_1042.z + (-0.5));
        float _1085 = exp2((_1049.w + (-0.5)) * 20.0) * 2.0;
        float _1086 = _1085 * (_1049.x + (-0.5));
        float _1087 = _1085 * (_1049.y + (-0.5));
        float _1088 = _1085 * (_1049.z + (-0.5));
        float _1095 = exp2((_1056.w + (-0.5)) * 20.0) * 2.0;
        float _1096 = _1095 * (_1056.x + (-0.5));
        float _1097 = _1095 * (_1056.y + (-0.5));
        float _1098 = _1095 * (_1056.z + (-0.5));
        float _1105 = exp2((_1063.w + (-0.5)) * 20.0) * 2.0;
        float _1106 = _1105 * (_1063.x + (-0.5));
        float _1107 = _1105 * (_1063.y + (-0.5));
        float _1108 = _1105 * (_1063.z + (-0.5));
        float _1109 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1110 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1111 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1112 = _1076 * 0.5;
        float _1113 = _1086 * 0.5;
        float _1114 = _1096 * 0.5;
        float _1115 = dot(vec3(_1112, _1113, _1114), vec3(_1112, _1113, _1114));
        float _1120 = (_1115 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1115);
        float _1128 = (dot(vec3(_390, _391, _392), vec3(_1120 * _1112, _1120 * _1113, _1120 * _1114)) + 1.0) * 0.5;
        float _3571 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1137 = sqrt(((_1113 * _1113) + (_1112 * _1112)) + (_1114 * _1114)) / (_1109 + 9.9999997473787516355514526367188e-06);
        float _3582 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1138 = isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0));
        float _1139 = _1138 * 2.0;
        float _1143 = (1.0 - _1138) / (_1138 + 1.0);
        float _3593 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1144 = isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0));
        float _1153 = ((((1.0 - _1144) * (_1139 + 2.0)) * exp2(log2(isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0))) * (_1139 + 1.0))) + _1144) * _1109;
        float _1154 = _1077 * 0.5;
        float _1155 = _1087 * 0.5;
        float _1156 = _1097 * 0.5;
        float _1157 = dot(vec3(_1154, _1155, _1156), vec3(_1154, _1155, _1156));
        float _1162 = (_1157 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1157);
        float _1170 = (dot(vec3(_390, _391, _392), vec3(_1162 * _1154, _1162 * _1155, _1162 * _1156)) + 1.0) * 0.5;
        float _3604 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1179 = sqrt(((_1155 * _1155) + (_1154 * _1154)) + (_1156 * _1156)) / (_1110 + 9.9999997473787516355514526367188e-06);
        float _3615 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1180 = isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0));
        float _1181 = _1180 * 2.0;
        float _1185 = (1.0 - _1180) / (_1180 + 1.0);
        float _3626 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1186 = isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0));
        float _1195 = ((((1.0 - _1186) * (_1181 + 2.0)) * exp2(log2(isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0))) * (_1181 + 1.0))) + _1186) * _1110;
        float _1196 = _1078 * 0.5;
        float _1197 = _1088 * 0.5;
        float _1198 = _1098 * 0.5;
        float _1199 = dot(vec3(_1196, _1197, _1198), vec3(_1196, _1197, _1198));
        float _1204 = (_1199 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1199);
        float _1212 = (dot(vec3(_390, _391, _392), vec3(_1204 * _1196, _1204 * _1197, _1204 * _1198)) + 1.0) * 0.5;
        float _3637 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1221 = sqrt(((_1197 * _1197) + (_1196 * _1196)) + (_1198 * _1198)) / (_1111 + 9.9999997473787516355514526367188e-06);
        float _3648 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1222 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
        float _1223 = _1222 * 2.0;
        float _1227 = (1.0 - _1222) / (_1222 + 1.0);
        float _3659 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1228 = isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0));
        float _1237 = ((((1.0 - _1228) * (_1223 + 2.0)) * exp2(log2(isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0))) * (_1223 + 1.0))) + _1228) * _1111;
        _1245 = _1078;
        _1246 = _1077;
        _1247 = _1076;
        _1248 = _1088;
        _1249 = _1087;
        _1250 = _1086;
        _1251 = _1098;
        _1252 = _1097;
        _1253 = _1096;
        _1254 = _1111;
        _1255 = _1110;
        _1256 = _1109;
        _1257 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0)));
        _1258 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0)));
        _1259 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0)));
    }
    else
    {
        _1245 = _936;
        _1246 = _936;
        _1247 = _936;
        _1248 = _936;
        _1249 = _936;
        _1250 = _936;
        _1251 = _936;
        _1252 = _936;
        _1253 = _936;
        _1254 = _936;
        _1255 = _936;
        _1256 = _936;
        _1257 = 0.0;
        _1258 = 0.0;
        _1259 = 0.0;
    }
    float _1269 = (cbModelParam._m0[1u].x * (_1257 - _948)) + _948;
    float _1270 = (cbModelParam._m0[1u].x * (_1258 - _949)) + _949;
    float _1271 = (cbModelParam._m0[1u].x * (_1259 - _950)) + _950;
    float _1292 = fma(_1271, cbSceneParam._m0[89u].z, fma(_1270, cbSceneParam._m0[89u].y, _1269 * cbSceneParam._m0[89u].x));
    float _1295 = fma(_1271, cbSceneParam._m0[90u].z, fma(_1270, cbSceneParam._m0[90u].y, _1269 * cbSceneParam._m0[90u].x));
    float _1298 = fma(_1271, cbSceneParam._m0[91u].z, fma(_1270, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1269));
    float _1313 = _569 * 0.5;
    float _1314 = _570 * 0.5;
    float _1315 = _571 * 0.5;
    float _1316 = dot(vec4(_1313, _1314, _1315, 1.0), vec4(_1247, _1250, _1253, _1256));
    float _1319 = dot(vec4(_1313, _1314, _1315, 1.0), vec4(_1246, _1249, _1252, _1255));
    float _1322 = dot(vec4(_1313, _1314, _1315, 1.0), vec4(_1245, _1248, _1251, _1254));
    float _1356;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1329 = dot(vec4(_1313, _1314, _1315, 1.0), vec4(_935, _939, _942, _945));
        float _1333 = dot(vec4(_1313, _1314, _1315, 1.0), vec4(_937, _940, _943, _946));
        float _1337 = dot(vec4(_1313, _1314, _1315, 1.0), vec4(_938, _941, _944, _947));
        float _1344 = dot(vec4(cbModelParam._m0[39u]), vec4(_1313, _1314, _1315, 1.0));
        _1356 = dot(vec3(isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0)), isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0)), isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1344) ? 0.0 : (isnan(0.0) ? _1344 : max(0.0, _1344))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1356 = 1.0;
    }
    float _1367;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1358 = dot(vec4(cbModelParam._m0[40u]), vec4(_1313, _1314, _1315, 1.0));
        _1367 = dot(vec3(isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0)), isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0)), isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1358) ? 0.0 : (isnan(0.0) ? _1358 : max(0.0, _1358))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1367 = 1.0;
    }
    float _1371 = (_1367 * cbModelParam._m0[1u].x) + (_1356 * (1.0 - cbModelParam._m0[1u].x));
    float _1381 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _393);
    float _1382 = isnan(_1381) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1381 : min(cbModelParam._m0[25u].z, _1381));
    float _1463;
    float _1465;
    float _1467;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1430 = fma(_633, cbModelParam._m0[13u].z, fma(_629, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _625)) + cbModelParam._m0[13u].w;
        float _1434 = fma(_633, cbModelParam._m0[14u].z, fma(_629, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _625)) + cbModelParam._m0[14u].w;
        float _1438 = fma(_633, cbModelParam._m0[15u].z, fma(_629, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _625)) + cbModelParam._m0[15u].w;
        float _1441 = fma(_571, cbModelParam._m0[13u].z, fma(_570, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _569));
        float _1444 = fma(_571, cbModelParam._m0[14u].z, fma(_570, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _569));
        float _1447 = fma(_571, cbModelParam._m0[15u].z, fma(_570, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _569));
        float _1475;
        if (_1441 > 0.0)
        {
            _1475 = abs((1.0 - _1430) / _1441);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1441 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1430 + 1.0) / _1441);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1475 = frontier_phi_16_14_ladder;
        }
        float _1703;
        if (_1444 > 0.0)
        {
            _1703 = abs((1.0 - _1434) / _1444);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1444 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1434 + 1.0) / _1444);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1703 = frontier_phi_25_21_ladder;
        }
        float _1960;
        if (_1447 > 0.0)
        {
            _1960 = abs((1.0 - _1438) / _1447);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1447 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1438 + 1.0) / _1447);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1960 = frontier_phi_37_32_ladder;
        }
        float _1962 = isnan(_1703) ? _1475 : (isnan(_1475) ? _1703 : min(_1475, _1703));
        float _1963 = isnan(_1960) ? _1962 : (isnan(_1962) ? _1960 : min(_1962, _1960));
        float _1967 = (_1963 * _1441) + _1430;
        float _1968 = (_1963 * _1444) + _1434;
        float _1969 = (_1963 * _1447) + _1438;
        float _1970 = _1963 * 9.9999997473787516355514526367188e-05;
        float _1972 = (-1.0) - _1970;
        float _1974 = _1970 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1969 > _1974) || ((_1969 < _1972) || ((_1968 > _1974) || ((_1968 < _1972) || ((_1967 < _1972) || (_1967 > _1974))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2097 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1969, cbModelParam._m0[9u].z, fma(_1968, cbModelParam._m0[9u].y, _1967 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1969, cbModelParam._m0[10u].z, fma(_1968, cbModelParam._m0[10u].y, _1967 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1969, cbModelParam._m0[11u].z, fma(_1968, cbModelParam._m0[11u].y, _1967 * cbModelParam._m0[11u].x))), _1382);
            frontier_phi_15_37_ladder = _2097.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2097.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2097.x * cbModelParam._m0[1u].y;
        }
        _1463 = frontier_phi_15_37_ladder_2;
        _1465 = frontier_phi_15_37_ladder_1;
        _1467 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1451 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_569, _570, _571), _1382);
        _1463 = _1451.x * cbModelParam._m0[1u].y;
        _1465 = _1451.y * cbModelParam._m0[1u].y;
        _1467 = _1451.z * cbModelParam._m0[1u].y;
    }
    float _1471 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _393);
    float _1472 = isnan(_1471) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1471 : min(cbModelParam._m0[25u].w, _1471));
    float _1565;
    float _1567;
    float _1569;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1529 = fma(_633, cbModelParam._m0[21u].z, fma(_629, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _625)) + cbModelParam._m0[21u].w;
        float _1533 = fma(_633, cbModelParam._m0[22u].z, fma(_629, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _625)) + cbModelParam._m0[22u].w;
        float _1537 = fma(_633, cbModelParam._m0[23u].z, fma(_629, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _625)) + cbModelParam._m0[23u].w;
        float _1540 = fma(_571, cbModelParam._m0[21u].z, fma(_570, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _569));
        float _1543 = fma(_571, cbModelParam._m0[22u].z, fma(_570, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _569));
        float _1546 = fma(_571, cbModelParam._m0[23u].z, fma(_570, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _569));
        float _1708;
        if (_1540 > 0.0)
        {
            _1708 = abs((1.0 - _1529) / _1540);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1540 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1529 + 1.0) / _1540);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1708 = frontier_phi_27_23_ladder;
        }
        float _1987;
        if (_1543 > 0.0)
        {
            _1987 = abs((1.0 - _1533) / _1543);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1543 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1533 + 1.0) / _1543);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1987 = frontier_phi_39_34_ladder;
        }
        float _2200;
        if (_1546 > 0.0)
        {
            _2200 = abs((1.0 - _1537) / _1546);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1546 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1537 + 1.0) / _1546);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2200 = frontier_phi_48_45_ladder;
        }
        float _2202 = isnan(_1987) ? _1708 : (isnan(_1708) ? _1987 : min(_1708, _1987));
        float _2203 = isnan(_2200) ? _2202 : (isnan(_2202) ? _2200 : min(_2202, _2200));
        float _2207 = (_2203 * _1540) + _1529;
        float _2208 = (_2203 * _1543) + _1533;
        float _2209 = (_2203 * _1546) + _1537;
        float _2210 = _2203 * 9.9999997473787516355514526367188e-05;
        float _2211 = (-1.0) - _2210;
        float _2213 = _2210 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2209 > _2213) || ((_2209 < _2211) || ((_2208 > _2213) || ((_2208 < _2211) || ((_2207 < _2211) || (_2207 > _2213))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2407 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2209, cbModelParam._m0[17u].z, fma(_2208, cbModelParam._m0[17u].y, _2207 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2209, cbModelParam._m0[18u].z, fma(_2208, cbModelParam._m0[18u].y, _2207 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2209, cbModelParam._m0[19u].z, fma(_2208, cbModelParam._m0[19u].y, _2207 * cbModelParam._m0[19u].x))), _1472);
            frontier_phi_24_48_ladder = _2407.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2407.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2407.x * cbModelParam._m0[1u].z;
        }
        _1565 = frontier_phi_24_48_ladder_2;
        _1567 = frontier_phi_24_48_ladder_1;
        _1569 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1549 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_569, _570, _571), _1472);
        _1565 = _1549.x * cbModelParam._m0[1u].z;
        _1567 = _1549.y * cbModelParam._m0[1u].z;
        _1569 = _1549.z * cbModelParam._m0[1u].z;
    }
    float _1582 = (((_596 * _546) + _597) * _561) * ((cbModelParam._m0[1u].w * (_1565 - _1463)) + _1463);
    float _1584 = (((_596 * _548) + _597) * _561) * ((cbModelParam._m0[1u].w * (_1567 - _1465)) + _1465);
    float _1586 = (((_596 * _549) + _597) * _561) * ((cbModelParam._m0[1u].w * (_1569 - _1467)) + _1467);
    float _1589 = fma(_1586, cbSceneParam._m0[89u].z, fma(_1584, cbSceneParam._m0[89u].y, _1582 * cbSceneParam._m0[89u].x));
    float _1592 = fma(_1586, cbSceneParam._m0[90u].z, fma(_1584, cbSceneParam._m0[90u].y, _1582 * cbSceneParam._m0[90u].x));
    float _1595 = fma(_1586, cbSceneParam._m0[91u].z, fma(_1584, cbSceneParam._m0[91u].y, _1582 * cbSceneParam._m0[91u].x));
    vec4 _1603 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_480, _481));
    float _1605 = _1603.w;
    float _1617 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1605);
    float _1618 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1605);
    float _1619 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1605);
    uvec4 _1623 = floatBitsToUint(cbInstanceData._m0[_521 + 5u]);
    uint _1625 = _1623.x * 14u;
    uint _1626 = _1625 + 13u;
    float _1633 = _561 + (-1.0);
    float _1638 = (cbLight._m0[_1626].x * _1633) + 1.0;
    float _1639 = (cbLight._m0[_1626].y * _1633) + 1.0;
    float _1640 = (cbLight._m0[_1626].z * _1633) + 1.0;
    float _1641 = (cbLight._m0[_1626].w * _1633) + 1.0;
    uint _1642 = _1625 + 5u;
    float _1648 = isnan(1.0) ? _1639 : (isnan(_1639) ? 1.0 : min(_1639, 1.0));
    uint _1652 = _1625 + 4u;
    float _1662 = isnan(1.0) ? _1638 : (isnan(_1638) ? 1.0 : min(_1638, 1.0));
    uint _1666 = _1625 | 1u;
    float _1677 = dot(vec3(cbLight._m0[_1625].xyz), vec3(_390, _391, _392));
    float _1680 = dot(vec3(cbLight._m0[_1666].xyz), vec3(_390, _391, _392));
    float _3795 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
    float _3806 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
    float _1685 = (isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0))) * 0.3183098733425140380859375;
    float _1687 = (isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0))) * 0.3183098733425140380859375;
    float _1694 = ((cbLight._m0[_1642].x * _1648) * _1687) + (((cbLight._m0[_1652].x * _1617) * _1662) * _1685);
    float _1695 = ((_1648 * cbLight._m0[_1642].y) * _1687) + (((cbLight._m0[_1652].y * _1618) * _1662) * _1685);
    float _1696 = ((_1648 * cbLight._m0[_1642].z) * _1687) + (((cbLight._m0[_1652].z * _1619) * _1662) * _1685);
    uvec4 _1700 = floatBitsToUint(cbLight._m0[_1625 + 12u]);
    bool _1702 = _1700.x == 0u;
    float _1713;
    float _1715;
    float _1717;
    if (_1702)
    {
        _1713 = _1694;
        _1715 = _1695;
        _1717 = _1696;
    }
    else
    {
        uint _1721 = _1625 + 6u;
        float _1737 = (dot(vec3(cbLight._m0[_1625 + 2u].xyz), vec3(_390, _391, _392)) * 0.5) + 0.5;
        float _1738 = _1737 * _1737;
        float _3817 = isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0));
        float _1739 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
        float _1740 = isnan(1.0) ? _1640 : (isnan(_1640) ? 1.0 : min(_1640, 1.0));
        _1713 = (((cbLight._m0[_1721].x * 0.3183098733425140380859375) * _1739) * _1740) + _1694;
        _1715 = (((cbLight._m0[_1721].y * 0.3183098733425140380859375) * _1739) * _1740) + _1695;
        _1717 = (((cbLight._m0[_1721].z * 0.3183098733425140380859375) * _1739) * _1740) + _1696;
    }
    bool _1720 = _1700.y == 0u;
    float _1758;
    float _1760;
    float _1762;
    if (_1720)
    {
        _1758 = _1713;
        _1760 = _1715;
        _1762 = _1717;
    }
    else
    {
        uint _1931 = _1625 + 7u;
        float _1947 = (dot(vec3(cbLight._m0[_1625 + 3u].xyz), vec3(_390, _391, _392)) * 0.5) + 0.5;
        float _1948 = _1947 * _1947;
        float _3833 = isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0));
        float _1949 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
        float _1950 = isnan(1.0) ? _1641 : (isnan(_1641) ? 1.0 : min(_1641, 1.0));
        _1758 = (((cbLight._m0[_1931].x * 0.3183098733425140380859375) * _1949) * _1950) + _1713;
        _1760 = (((cbLight._m0[_1931].y * 0.3183098733425140380859375) * _1949) * _1950) + _1715;
        _1762 = (((cbLight._m0[_1931].z * 0.3183098733425140380859375) * _1949) * _1950) + _1717;
    }
    uint _1765 = _1625 + 8u;
    float _1778 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1625].w)) * _393) * 0.949999988079071044921875);
    float _1779 = _1778 * _1778;
    float _1780 = cbLight._m0[_1625].x + _472;
    float _1781 = cbLight._m0[_1625].y + _473;
    float _1782 = cbLight._m0[_1625].z + _474;
    float _1786 = inversesqrt(dot(vec3(_1780, _1781, _1782), vec3(_1780, _1781, _1782)));
    float _1787 = _1786 * _1780;
    float _1788 = _1786 * _1781;
    float _1789 = _1786 * _1782;
    float _1790 = dot(vec3(_390, _391, _392), vec3(cbLight._m0[_1625].xyz));
    float _3849 = isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0));
    float _1793 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
    float _3860 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _1794 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
    float _1795 = dot(vec3(_390, _391, _392), vec3(_1787, _1788, _1789));
    float _3871 = isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0));
    float _1798 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
    float _1799 = dot(vec3(cbLight._m0[_1625].xyz), vec3(_1787, _1788, _1789));
    float _3882 = isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0));
    float _1803 = _1779 * _1779;
    float _1807 = ((_1798 * _1798) * (_1803 + (-1.0))) + 1.0;
    float _1815 = exp2(log2(1.0 - (isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0)))) * 5.0);
    float _1816 = 0.959999978542327880859375 - _543;
    float _1818 = 0.959999978542327880859375 - _544;
    float _1819 = 0.959999978542327880859375 - _545;
    float _1826 = 1.0 - _1779;
    float _1837 = (0.5 / (((_1794 * ((_1793 * _1826) + _1779)) + 9.9999999392252902907785028219223e-09) + (((_1794 * _1826) + _1779) * _1793))) * _1793;
    float _3893 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
    float _1839 = (isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0))) * (_1803 / ((_1807 * _1807) * 3.141590118408203125));
    uint _1853 = _1625 + 9u;
    float _1864 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1666].w)) * _393) * 0.949999988079071044921875);
    float _1865 = _1864 * _1864;
    float _1866 = cbLight._m0[_1666].x + _472;
    float _1867 = cbLight._m0[_1666].y + _473;
    float _1868 = cbLight._m0[_1666].z + _474;
    float _1872 = inversesqrt(dot(vec3(_1866, _1867, _1868), vec3(_1866, _1867, _1868)));
    float _1873 = _1872 * _1866;
    float _1874 = _1872 * _1867;
    float _1875 = _1872 * _1868;
    float _1876 = dot(vec3(_390, _391, _392), vec3(cbLight._m0[_1666].xyz));
    float _3904 = isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0));
    float _1879 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
    float _1880 = dot(vec3(_390, _391, _392), vec3(_1873, _1874, _1875));
    float _3915 = isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0));
    float _1883 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
    float _1884 = dot(vec3(cbLight._m0[_1666].xyz), vec3(_1873, _1874, _1875));
    float _3926 = isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0));
    float _1888 = _1865 * _1865;
    float _1892 = ((_1883 * _1883) * (_1888 + (-1.0))) + 1.0;
    float _1899 = exp2(log2(1.0 - (isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0)))) * 5.0);
    float _1906 = 1.0 - _1865;
    float _1916 = (0.5 / (((_1794 * ((_1879 * _1906) + _1865)) + 9.9999999392252902907785028219223e-09) + (((_1794 * _1906) + _1865) * _1879))) * _1879;
    float _3937 = isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0));
    float _1918 = (isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0))) * (_1888 / ((_1892 * _1892) * 3.141590118408203125));
    float _1928 = (((((_1899 * _1816) + _546) * cbLight._m0[_1853].x) * _1918) * _1648) + ((((cbLight._m0[_1765].x * _1617) * ((_1815 * _1816) + _546)) * _1839) * _1662);
    float _1929 = (((((_1899 * _1818) + _548) * cbLight._m0[_1853].y) * _1918) * _1648) + ((((cbLight._m0[_1765].y * _1618) * ((_1815 * _1818) + _548)) * _1839) * _1662);
    float _1930 = (((((_1899 * _1819) + _549) * cbLight._m0[_1853].z) * _1918) * _1648) + ((((cbLight._m0[_1765].z * _1619) * ((_1815 * _1819) + _549)) * _1839) * _1662);
    float _1992;
    float _1994;
    float _1996;
    if (_1702)
    {
        _1992 = _1928;
        _1994 = _1929;
        _1996 = _1930;
    }
    else
    {
        uint _1998 = _1625 + 2u;
        uint _2002 = _1625 + 10u;
        float _2016 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1998].w)) * _393) * 0.949999988079071044921875);
        float _2017 = _2016 * _2016;
        float _2018 = cbLight._m0[_1998].x + _472;
        float _2019 = cbLight._m0[_1998].y + _473;
        float _2020 = cbLight._m0[_1998].z + _474;
        float _2024 = inversesqrt(dot(vec3(_2018, _2019, _2020), vec3(_2018, _2019, _2020)));
        float _2025 = _2024 * _2018;
        float _2026 = _2024 * _2019;
        float _2027 = _2024 * _2020;
        float _2028 = dot(vec3(_390, _391, _392), vec3(cbLight._m0[_1998].xyz));
        float _3948 = isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0));
        float _2031 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
        float _2032 = dot(vec3(_390, _391, _392), vec3(_2025, _2026, _2027));
        float _3959 = isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0));
        float _2035 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
        float _2036 = dot(vec3(cbLight._m0[_1998].xyz), vec3(_2025, _2026, _2027));
        float _3970 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
        float _2040 = _2017 * _2017;
        float _2044 = ((_2035 * _2035) * (_2040 + (-1.0))) + 1.0;
        float _2051 = exp2(log2(1.0 - (isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0)))) * 5.0);
        float _2058 = 1.0 - _2017;
        float _2068 = (0.5 / (((_1794 * ((_2031 * _2058) + _2017)) + 9.9999999392252902907785028219223e-09) + (((_1794 * _2058) + _2017) * _2031))) * _2031;
        float _3981 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
        float _2070 = (isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0))) * (_2040 / ((_2044 * _2044) * 3.141590118408203125));
        float _2071 = isnan(1.0) ? _1640 : (isnan(_1640) ? 1.0 : min(_1640, 1.0));
        _1992 = (((((_2051 * _1816) + _546) * cbLight._m0[_2002].x) * _2070) * _2071) + _1928;
        _1994 = (((((_2051 * _1818) + _548) * cbLight._m0[_2002].y) * _2070) * _2071) + _1929;
        _1996 = (((((_2051 * _1819) + _549) * cbLight._m0[_2002].z) * _2070) * _2071) + _1930;
    }
    float _2106;
    float _2108;
    float _2110;
    if (_1720)
    {
        _2106 = _1992;
        _2108 = _1994;
        _2110 = _1996;
    }
    else
    {
        uint _2117 = _1625 + 3u;
        uint _2121 = _1625 + 11u;
        float _2135 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2117].w)) * _393) * 0.949999988079071044921875);
        float _2136 = _2135 * _2135;
        float _2137 = cbLight._m0[_2117].x + _472;
        float _2138 = cbLight._m0[_2117].y + _473;
        float _2139 = cbLight._m0[_2117].z + _474;
        float _2143 = inversesqrt(dot(vec3(_2137, _2138, _2139), vec3(_2137, _2138, _2139)));
        float _2144 = _2143 * _2137;
        float _2145 = _2143 * _2138;
        float _2146 = _2143 * _2139;
        float _2147 = dot(vec3(_390, _391, _392), vec3(cbLight._m0[_2117].xyz));
        float _3997 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
        float _2150 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
        float _2151 = dot(vec3(_390, _391, _392), vec3(_2144, _2145, _2146));
        float _4008 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
        float _2154 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
        float _2155 = dot(vec3(cbLight._m0[_2117].xyz), vec3(_2144, _2145, _2146));
        float _4019 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
        float _2159 = _2136 * _2136;
        float _2163 = ((_2154 * _2154) * (_2159 + (-1.0))) + 1.0;
        float _2170 = exp2(log2(1.0 - (isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0)))) * 5.0);
        float _2177 = 1.0 - _2136;
        float _2187 = (0.5 / (((_1794 * ((_2150 * _2177) + _2136)) + 9.9999999392252902907785028219223e-09) + (((_1794 * _2177) + _2136) * _2150))) * _2150;
        float _4030 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
        float _2189 = (isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0))) * (_2159 / ((_2163 * _2163) * 3.141590118408203125));
        float _2190 = isnan(1.0) ? _1641 : (isnan(_1641) ? 1.0 : min(_1641, 1.0));
        _2106 = (((((_2170 * _1816) + _546) * cbLight._m0[_2121].x) * _2189) * _2190) + _1992;
        _2108 = (((((_2170 * _1818) + _548) * cbLight._m0[_2121].y) * _2189) * _2190) + _1994;
        _2110 = (((((_2170 * _1819) + _549) * cbLight._m0[_2121].z) * _2189) * _2190) + _1996;
    }
    float _2324;
    float _2326;
    float _2328;
    float _2330;
    float _2332;
    float _2334;
    if (_1623.y == 0u)
    {
        float _2265 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2266 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2265;
        float _2267 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2265;
        float _2268 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2265;
        uvec4 _2280 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2281 = _2280.x;
        uint _2292 = uint((float(_2280.y) * floor(float(uint(cbSceneParam._m0[85u].y * _481) / _2281))) + floor(float(uint(cbSceneParam._m0[85u].x * _480) / _2281)));
        float _2302 = (log2(_2268 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2303 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
        uint _2306 = uint(isnan(14.0) ? _2303 : (isnan(_2303) ? 14.0 : min(_2303, 14.0)));
        uvec4 _2311 = texelFetch(g_lightClusterGridBuffer, int(((_2306 << 2u) + (_2292 << 6u)) >> 2u));
        uint _2312 = _2311.x;
        uint _2313 = _2280.z;
        float _2412;
        float _2414;
        float _2416;
        float _2418;
        float _2420;
        float _2422;
        if (((((1u << ((_2313 >> 4u) & 15u)) + 4294967295u) & _2312) == 0u) || ((_2313 & 240u) == 0u))
        {
            _2412 = 0.0;
            _2414 = 0.0;
            _2416 = 0.0;
            _2418 = 0.0;
            _2420 = 0.0;
            _2422 = 0.0;
        }
        else
        {
            float _2413;
            float _2415;
            float _2417;
            float _2419;
            float _2421;
            float _2423;
            float _2556 = 0.0;
            float _2557 = 0.0;
            float _2558 = 0.0;
            float _2559 = 0.0;
            float _2560 = 0.0;
            float _2561 = 0.0;
            uint _2562 = 0u;
            uint _2571;
            bool _2572;
            for (;;)
            {
                _2571 = texelFetch(g_lightClassification, int((((_2306 << 5u) + (_2292 << 9u)) + (_2562 << 2u)) >> 2u)).x;
                _2572 = _2571 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2572)
                {
                    frontier_phi_63_pred = _2561;
                    frontier_phi_63_pred_1 = _2560;
                    frontier_phi_63_pred_2 = _2559;
                    frontier_phi_63_pred_3 = _2558;
                    frontier_phi_63_pred_4 = _2557;
                    frontier_phi_63_pred_5 = _2556;
                }
                else
                {
                    float _2680;
                    float _2681;
                    float _2682;
                    float _2683;
                    float _2684;
                    float _2685;
                    uint _2686;
                    _2680 = _2556;
                    _2681 = _2557;
                    _2682 = _2558;
                    _2683 = _2559;
                    _2684 = _2560;
                    _2685 = _2561;
                    _2686 = _2571;
                    float _2612;
                    float _2613;
                    float _2614;
                    float _2615;
                    float _2616;
                    float _2617;
                    for (;;)
                    {
                        uint _2690 = uint(findLSB(_2686)) + (_2562 << 5u);
                        uint _2687 = (_2686 + 4294967295u) & _2686;
                        uint _2692 = _2690 * 48u;
                        vec4 _2706 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2692)).x, texelFetch(g_PointLightRenderingBuffer, int(_2692 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2692 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2692 + 3u)).x));
                        uint _2712 = (_2690 * 48u) + 4u;
                        vec4 _2725 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2712)).x, texelFetch(g_PointLightRenderingBuffer, int(_2712 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2712 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2712 + 3u)).x));
                        uint _2731 = (_2690 * 48u) + 8u;
                        vec3 _2742 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2731)).x, texelFetch(g_PointLightRenderingBuffer, int(_2731 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2731 + 2u)).x));
                        float _2746 = _2706.x - _2266;
                        float _2747 = _2706.y - _2267;
                        float _2748 = _2706.z - _2268;
                        float _2749 = dot(vec3(_2746, _2747, _2748), vec3(_2746, _2747, _2748));
                        float _2752 = inversesqrt(_2749);
                        float _2753 = _2752 * _2746;
                        float _2754 = _2752 * _2747;
                        float _2755 = _2752 * _2748;
                        float _2756 = dot(vec3(_502, _505, _508), vec3(_2753, _2754, _2755));
                        float _2761 = 1.0 - (_2749 * _2706.w);
                        float _4056 = isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : max(_2761, 0.0));
                        float _2762 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
                        float _2763 = sqrt(_2749) * _2725.w;
                        float _2766 = 1.39999997615814208984375 / (_2763 + 1.39999997615814208984375);
                        float _2767 = _2766 * _2766;
                        float _2770 = ((1.0 - _2767) * _2756) + _2767;
                        float _2773 = _2763 * _2763;
                        float _2777 = ((isnan(0.0) ? _2770 : (isnan(_2770) ? 0.0 : max(_2770, 0.0))) * _2762) / ((_2773 * 0.699999988079071044921875) + 1.0);
                        float _2781 = (-0.0) - _2266;
                        float _2782 = (-0.0) - _2267;
                        float _2783 = (-0.0) - _2268;
                        float _2787 = inversesqrt(dot(vec3(_2781, _2782, _2783), vec3(_2781, _2782, _2783)));
                        float _2788 = _2787 * _2781;
                        float _2789 = _2787 * _2782;
                        float _2790 = _2787 * _2783;
                        float _2798 = exp2(log2(1.0 / ((_2773 * 3.5) + 5.0)) * 0.25);
                        float _2799 = 1.0 - _577;
                        float _2806 = sqrt(1.0 - ((1.0 - (_2799 * _2799)) * (1.0 - (_2798 * _2798))));
                        float _2807 = _2806 * _2806;
                        float _2808 = _2807 * _2807;
                        float _2809 = _2788 + _2753;
                        float _2810 = _2789 + _2754;
                        float _2811 = _2790 + _2755;
                        float _2815 = inversesqrt(dot(vec3(_2809, _2810, _2811), vec3(_2809, _2810, _2811)));
                        float _2819 = dot(vec3(_502, _505, _508), vec3(_2788, _2789, _2790));
                        float _4072 = isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0));
                        float _2822 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
                        float _2823 = dot(vec3(_502, _505, _508), vec3(_2815 * _2809, _2815 * _2810, _2815 * _2811));
                        float _4083 = isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : max(_2823, 0.0));
                        float _2826 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
                        float _2830 = ((_2826 * _2826) * (_2808 + (-1.0))) + 1.0;
                        float _2831 = _2766 * _2807;
                        float _2832 = _2831 * _2831;
                        float _2835 = ((1.0 - _2832) * _2756) + _2832;
                        float _4094 = isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : max(_2835, 0.0));
                        float _2836 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
                        float _2837 = 1.0 - _2807;
                        float _2847 = (0.5 / (((_2836 * ((_2822 * _2837) + _2807)) + 9.9999999392252902907785028219223e-09) + (((_2836 * _2837) + _2807) * _2822))) * _2836;
                        float _4105 = isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : max(_2847, 0.0));
                        float _2858 = (((_2808 * 3.1415927410125732421875) * (isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0)))) / ((_2830 * _2830) * ((_2773 * 2.1991131305694580078125) + 3.141590118408203125))) * _2762;
                        _2615 = (_2777 * _2725.x) + _2683;
                        _2616 = (_2777 * _2725.y) + _2684;
                        _2617 = (_2777 * _2725.z) + _2685;
                        _2612 = (_2858 * _2742.x) + _2680;
                        _2613 = (_2858 * _2742.y) + _2681;
                        _2614 = (_2858 * _2742.z) + _2682;
                        if (_2687 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2680 = _2612;
                            _2681 = _2613;
                            _2682 = _2614;
                            _2683 = _2615;
                            _2684 = _2616;
                            _2685 = _2617;
                            _2686 = _2687;
                        }
                    }
                    frontier_phi_63_pred = _2617;
                    frontier_phi_63_pred_1 = _2616;
                    frontier_phi_63_pred_2 = _2615;
                    frontier_phi_63_pred_3 = _2614;
                    frontier_phi_63_pred_4 = _2613;
                    frontier_phi_63_pred_5 = _2612;
                }
                _2423 = frontier_phi_63_pred;
                _2421 = frontier_phi_63_pred_1;
                _2419 = frontier_phi_63_pred_2;
                _2417 = frontier_phi_63_pred_3;
                _2415 = frontier_phi_63_pred_4;
                _2413 = frontier_phi_63_pred_5;
                uint _2563 = _2562 + 1u;
                if (_2563 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2556 = _2413;
                    _2557 = _2415;
                    _2558 = _2417;
                    _2559 = _2419;
                    _2560 = _2421;
                    _2561 = _2423;
                    _2562 = _2563;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2412 = _2413;
            _2414 = _2415;
            _2416 = _2417;
            _2418 = _2419;
            _2420 = _2421;
            _2422 = _2423;
        }
        uvec4 _2426 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2427 = _2426.z;
        uint _2429 = (_2427 >> 8u) & 15u;
        float _2524;
        float _2526;
        float _2528;
        float _2530;
        float _2532;
        float _2534;
        if (((4294967295u << _2429) & _2312) == 0u)
        {
            _2524 = _2412;
            _2526 = _2414;
            _2528 = _2416;
            _2530 = _2418;
            _2532 = _2420;
            _2534 = _2422;
        }
        else
        {
            float _2549 = inversesqrt(dot(vec3(_2266, _2267, _2268), vec3(_2266, _2267, _2268)));
            float _2550 = _2549 * _2266;
            float _2551 = _2549 * _2267;
            float _2552 = _2549 * _2268;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2429 < ((_2427 >> 12u) & 15u))
            {
                float _2525;
                float _2527;
                float _2529;
                float _2531;
                float _2533;
                float _2535;
                float _2663 = _2412;
                float _2664 = _2414;
                float _2665 = _2416;
                float _2666 = _2418;
                float _2667 = _2420;
                float _2668 = _2422;
                uint _2669 = _2429;
                uint _2678;
                bool _2679;
                for (;;)
                {
                    _2678 = texelFetch(g_lightClassification, int((((_2306 << 5u) + (_2292 << 9u)) + (_2669 << 2u)) >> 2u)).x;
                    _2679 = _2678 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2679)
                    {
                        frontier_phi_69_pred = _2668;
                        frontier_phi_69_pred_1 = _2667;
                        frontier_phi_69_pred_2 = _2666;
                        frontier_phi_69_pred_3 = _2665;
                        frontier_phi_69_pred_4 = _2664;
                        frontier_phi_69_pred_5 = _2663;
                    }
                    else
                    {
                        float _2863;
                        float _2864;
                        float _2865;
                        float _2866;
                        float _2867;
                        float _2868;
                        float _3159;
                        float _3160;
                        float _3161;
                        float _3162;
                        float _3163;
                        float _3164;
                        float _2876 = _2663;
                        float _2877 = _2664;
                        float _2878 = _2665;
                        float _2879 = _2666;
                        float _2880 = _2667;
                        float _2881 = _2668;
                        uint _2882 = _2678;
                        uint _2883;
                        vec4 _2908;
                        float _2909;
                        vec4 _2924;
                        vec3 _2936;
                        vec4 _2952;
                        vec4 _2968;
                        float _3015;
                        bool _3016;
                        for (;;)
                        {
                            uint _2893 = ((_2669 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2882));
                            _2883 = (_2882 + 4294967295u) & _2882;
                            uint _2895 = _2893 * 40u;
                            _2908 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2895)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2895 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2895 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2895 + 3u)).x));
                            _2909 = _2908.w;
                            uint _2911 = (_2893 * 40u) + 4u;
                            _2924 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2911)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 3u)).x));
                            uint _2926 = (_2893 * 40u) + 8u;
                            _2936 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2926)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2926 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2926 + 2u)).x));
                            uint _2939 = (_2893 * 40u) + 16u;
                            _2952 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2939)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2939 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2939 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2939 + 3u)).x));
                            uint _2955 = (_2893 * 40u) + 20u;
                            _2968 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2955)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2955 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2955 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2955 + 3u)).x));
                            uint _2971 = (_2893 * 40u) + 24u;
                            vec4 _2984 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2971)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2971 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2971 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2971 + 3u)).x));
                            uint _2990 = (_2893 * 40u) + 28u;
                            vec4 _3003 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2990)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2990 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2990 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2990 + 3u)).x));
                            _3015 = fma(_2268, _3003.z, fma(_2267, _3003.y, _3003.x * _2266)) + _3003.w;
                            _3016 = !((fma(_2268, _2984.z, fma(_2267, _2984.y, _2984.x * _2266)) + _2984.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3016)
                            {
                                float _3043 = _2908.x - _2266;
                                float _3044 = _2908.y - _2267;
                                float _3045 = _2908.z - _2268;
                                float _3046 = dot(vec3(_3043, _3044, _3045), vec3(_3043, _3044, _3045));
                                float _3049 = inversesqrt(_3046);
                                float _3050 = _3049 * _3043;
                                float _3051 = _3049 * _3044;
                                float _3052 = _3049 * _3045;
                                float _3056 = 1.0 - (_3046 / (_2909 * _2909));
                                float _4116 = isnan(0.0) ? _3056 : (isnan(_3056) ? 0.0 : max(_3056, 0.0));
                                float _3057 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
                                float _3061 = sqrt(_3046) * _2924.w;
                                float _3063 = 1.39999997615814208984375 / (_3061 + 1.39999997615814208984375);
                                float _3064 = _3063 * _3063;
                                float _3067 = ((1.0 - _3064) * dot(vec3(_3050, _3051, _3052), vec3(_502, _505, _508))) + _3064;
                                float _3070 = _3061 * _3061;
                                float _3074 = (fma(_2268, _2952.z, fma(_2267, _2952.y, _2952.x * _2266)) + _2952.w) / _3015;
                                float _3075 = (fma(_2268, _2968.z, fma(_2267, _2968.y, _2968.x * _2266)) + _2968.w) / _3015;
                                float _3079 = 1.0 - dot(vec2(_3074, _3075), vec2(_3074, _3075));
                                float _4132 = isnan(0.0) ? _3079 : (isnan(_3079) ? 0.0 : max(_3079, 0.0));
                                float _3080 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
                                float _3081 = _3080 * (((isnan(0.0) ? _3067 : (isnan(_3067) ? 0.0 : max(_3067, 0.0))) * _3057) / ((_3070 * 0.699999988079071044921875) + 1.0));
                                float _3093 = exp2(log2(1.0 / ((_3070 * 3.5) + 5.0)) * 0.25);
                                float _3094 = 1.0 - _577;
                                float _3101 = sqrt(1.0 - ((1.0 - (_3094 * _3094)) * (1.0 - (_3093 * _3093))));
                                float _3102 = _3101 * _3101;
                                float _3103 = _3102 * _3102;
                                float _3104 = _3050 - _2550;
                                float _3105 = _3051 - _2551;
                                float _3106 = _3052 - _2552;
                                float _3110 = inversesqrt(dot(vec3(_3104, _3105, _3106), vec3(_3104, _3105, _3106)));
                                float _3114 = dot(vec3(_502, _505, _508), vec3((-0.0) - _2550, (-0.0) - _2551, (-0.0) - _2552));
                                float _4143 = isnan(0.0) ? _3114 : (isnan(_3114) ? 0.0 : max(_3114, 0.0));
                                float _3117 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
                                float _3118 = dot(vec3(_502, _505, _508), vec3(_3110 * _3104, _3110 * _3105, _3110 * _3106));
                                float _4154 = isnan(0.0) ? _3118 : (isnan(_3118) ? 0.0 : max(_3118, 0.0));
                                float _3121 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
                                float _3125 = ((_3121 * _3121) * (_3103 + (-1.0))) + 1.0;
                                float _3126 = _3063 * _3102;
                                float _3127 = _3126 * _3126;
                                float _3133 = ((1.0 - _3127) * dot(vec3(_502, _505, _508), vec3(_3050, _3051, _3052))) + _3127;
                                float _4165 = isnan(0.0) ? _3133 : (isnan(_3133) ? 0.0 : max(_3133, 0.0));
                                float _3134 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
                                float _3135 = 1.0 - _3102;
                                float _3145 = (0.5 / (((_3134 * ((_3117 * _3135) + _3102)) + 9.9999999392252902907785028219223e-09) + (((_3134 * _3135) + _3102) * _3117))) * _3134;
                                float _4176 = isnan(0.0) ? _3145 : (isnan(_3145) ? 0.0 : max(_3145, 0.0));
                                float _3155 = (_3080 * _3057) * (((_3103 * 3.1415927410125732421875) * (isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0)))) / ((_3125 * _3125) * ((_3070 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3081 * _2924.z;
                                frontier_phi_75_pred_1 = _3081 * _2924.y;
                                frontier_phi_75_pred_2 = _3081 * _2924.x;
                                frontier_phi_75_pred_3 = _3155 * _2936.z;
                                frontier_phi_75_pred_4 = _3155 * _2936.y;
                                frontier_phi_75_pred_5 = _3155 * _2936.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3164 = frontier_phi_75_pred;
                            _3163 = frontier_phi_75_pred_1;
                            _3162 = frontier_phi_75_pred_2;
                            _3161 = frontier_phi_75_pred_3;
                            _3160 = frontier_phi_75_pred_4;
                            _3159 = frontier_phi_75_pred_5;
                            _2866 = _3162 + _2879;
                            _2867 = _3163 + _2880;
                            _2868 = _3164 + _2881;
                            _2863 = _3159 + _2876;
                            _2864 = _3160 + _2877;
                            _2865 = _3161 + _2878;
                            if (_2883 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2876 = _2863;
                                _2877 = _2864;
                                _2878 = _2865;
                                _2879 = _2866;
                                _2880 = _2867;
                                _2881 = _2868;
                                _2882 = _2883;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2868;
                        frontier_phi_69_pred_1 = _2867;
                        frontier_phi_69_pred_2 = _2866;
                        frontier_phi_69_pred_3 = _2865;
                        frontier_phi_69_pred_4 = _2864;
                        frontier_phi_69_pred_5 = _2863;
                    }
                    _2535 = frontier_phi_69_pred;
                    _2533 = frontier_phi_69_pred_1;
                    _2531 = frontier_phi_69_pred_2;
                    _2529 = frontier_phi_69_pred_3;
                    _2527 = frontier_phi_69_pred_4;
                    _2525 = frontier_phi_69_pred_5;
                    uint _2670 = _2669 + 1u;
                    if (_2670 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2663 = _2525;
                        _2664 = _2527;
                        _2665 = _2529;
                        _2666 = _2531;
                        _2667 = _2533;
                        _2668 = _2535;
                        _2669 = _2670;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2535;
                frontier_phi_57_58_ladder_1 = _2533;
                frontier_phi_57_58_ladder_2 = _2531;
                frontier_phi_57_58_ladder_3 = _2529;
                frontier_phi_57_58_ladder_4 = _2527;
                frontier_phi_57_58_ladder_5 = _2525;
            }
            else
            {
                frontier_phi_57_58_ladder = _2422;
                frontier_phi_57_58_ladder_1 = _2420;
                frontier_phi_57_58_ladder_2 = _2418;
                frontier_phi_57_58_ladder_3 = _2416;
                frontier_phi_57_58_ladder_4 = _2414;
                frontier_phi_57_58_ladder_5 = _2412;
            }
            _2524 = frontier_phi_57_58_ladder_5;
            _2526 = frontier_phi_57_58_ladder_4;
            _2528 = frontier_phi_57_58_ladder_3;
            _2530 = frontier_phi_57_58_ladder_2;
            _2532 = frontier_phi_57_58_ladder_1;
            _2534 = frontier_phi_57_58_ladder;
        }
        float _2539 = isnan(1.0) ? _561 : (isnan(_561) ? 1.0 : min(_561, 1.0));
        _2324 = (_2539 * _2530) + _1758;
        _2326 = (_2539 * _2532) + _1760;
        _2328 = (_2539 * _2534) + _1762;
        _2330 = ((_2524 * _546) * _2539) + _2106;
        _2332 = ((_2526 * _548) * _2539) + _2108;
        _2334 = ((_2528 * _549) * _2539) + _2110;
    }
    else
    {
        _2324 = _1758;
        _2326 = _1760;
        _2328 = _1762;
        _2330 = _2106;
        _2332 = _2108;
        _2334 = _2110;
    }
    float _4192 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    float _4203 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _4214 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    uint _2354 = _521 + 6u;
    float _2362 = _480 / cbSceneParam._m0[86u].x;
    float _2363 = _481 / cbSceneParam._m0[86u].y;
    vec4 _2377 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2362, _2363, (log2((isnan(cbSceneParam._m0[77u].w) ? _413 : (isnan(_413) ? cbSceneParam._m0[77u].w : min(_413, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2379 = _2377.x;
    float _2380 = _2377.y;
    float _2381 = _2377.z;
    float _2382 = _2377.w;
    float _2474;
    float _2476;
    float _2478;
    float _2480;
    if (_413 > cbSceneParam._m0[78u].w)
    {
        float _2437 = isnan(_413) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _413 : min(cbSceneParam._m0[80u].w, _413));
        float _2438 = _2437 / _413;
        float _2449 = _2438 * _465;
        float _2450 = _466 * _2438;
        float _2451 = (-0.0) - _2450;
        float _2452 = _2438 * _467;
        float _2454 = (cbSceneParam._m0[77u].w * _2451) / _2437;
        float _2455 = _2454 + cbSceneParam._m0[79u].w;
        float _2456 = cbSceneParam._m0[79u].w - _2450;
        float _2462 = sqrt(((_2449 * _2449) + (_2450 * _2450)) + (_2452 * _2452));
        float _2465 = (1.0 - (cbSceneParam._m0[77u].w / _2437)) * _2462;
        float _2470 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2472 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2625;
        if (abs((_2451 - _2454) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2625 = ((((_2455 > 0.0) ? exp2(_2470 * _2455) : (2.0 - exp2(_2472 * _2455))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2465;
        }
        else
        {
            float _2585 = 1.0 / cbSceneParam._m0[80u].x;
            float _2586 = isnan(_2456) ? _2455 : (isnan(_2455) ? _2456 : max(_2455, _2456));
            float _2587 = isnan(_2456) ? _2455 : (isnan(_2455) ? _2456 : min(_2455, _2456));
            float _2596 = isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : min(_2586, 0.0));
            float _2597 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : min(_2587, 0.0));
            _2625 = ((abs(_2462 / _2451) * cbSceneParam._m0[80u].y) * ((((_2596 - _2597) * 2.0) - ((exp2(_2470 * (isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0)))) - exp2(_2470 * (isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0))))) * _2585)) - ((exp2(_2472 * _2596) - exp2(_2472 * _2597)) * _2585))) + (_2465 * cbSceneParam._m0[80u].z);
        }
        vec4 _2627 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2362, _2363, 1.0), 0.0);
        float _2636 = exp2((_2625 * (-1.44269502162933349609375)) * (1.0 - _2627.w));
        float _2637 = log2(_2636);
        float _2653 = log2(_2382);
        _2474 = (exp2(_2653 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2637 * cbSceneParam._m0[78u].x)) * _2627.x) / cbSceneParam._m0[78u].x)) + _2379;
        _2476 = (exp2(_2653 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2637 * cbSceneParam._m0[78u].y)) * _2627.y) / cbSceneParam._m0[78u].y)) + _2380;
        _2478 = (exp2(_2653 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2637 * cbSceneParam._m0[78u].z)) * _2627.z) / cbSceneParam._m0[78u].z)) + _2381;
        _2480 = _2636 * _2382;
    }
    else
    {
        _2474 = _2379;
        _2476 = _2380;
        _2478 = _2381;
        _2480 = _2382;
    }
    float _2492 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2493 = _2492 == 3.0;
    float _2494 = log2(_2480);
    float _2501 = exp2(_2494 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0))) * (_2324 + ((isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0))) * _561))) + ((_2330 + ((isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0))) * _1371)) * cbPerFrame._m0[3u].x));
    float _2502 = exp2(_2494 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0))) * (_2326 + ((isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0))) * _561))) + ((_2332 + ((isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0))) * _1371)) * cbPerFrame._m0[3u].x));
    float _2503 = exp2(_2494 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0))) * (_2328 + ((isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0))) * _561))) + ((_2334 + ((isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0))) * _1371)) * cbPerFrame._m0[3u].x));
    float _2512 = (_2492 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2512 * (_2493 ? _2501 : (_2501 + (cbSceneParam._m0[72u].w * _2474)));
    SV_Target.y = _2512 * (_2493 ? _2502 : (_2502 + (cbSceneParam._m0[72u].w * _2476)));
    SV_Target.z = _2512 * (_2493 ? _2503 : (_2503 + (cbSceneParam._m0[72u].w * _2478)));
    SV_Target.w = cbInstanceData._m0[_2354].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2354].w;
}


