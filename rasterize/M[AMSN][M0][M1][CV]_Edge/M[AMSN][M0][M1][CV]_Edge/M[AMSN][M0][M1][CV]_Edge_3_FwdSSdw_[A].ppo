#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _945;
float _3337;
float _3338;
float _3339;
float _3340;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _192 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _193 = _192 * _184;
    float _194 = _192 * _185;
    float _195 = _192 * _186;
    float _199 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _200 = _199 * NORMAL.x;
    float _201 = _199 * NORMAL.y;
    float _202 = _199 * NORMAL.z;
    float _206 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _207 = _206 * TANGENT.x;
    float _208 = _206 * TANGENT.y;
    float _209 = _206 * TANGENT.z;
    float _214;
    float _215;
    float _216;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _214 = (-0.0) - _200;
        _215 = (-0.0) - _201;
        _216 = (-0.0) - _202;
    }
    else
    {
        _214 = _200;
        _215 = _201;
        _216 = _202;
    }
    vec4 _242 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _248 = _242.w;
    float _249 = _242.x * cbMtdParam._m0[9u].x;
    float _250 = _242.y * cbMtdParam._m0[9u].y;
    float _251 = _242.z * cbMtdParam._m0[9u].z;
    vec4 _269 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _273 = _269.z;
    float _277 = (_269.x * 2.0) + (-1.0);
    float _279 = (_269.y * 2.0) + (-1.0);
    float _280 = dot(vec2(_277, _279), vec2(_277, _279));
    float _3349 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _286 = sqrt(1.0 - (isnan(1.0) ? _3349 : (isnan(_3349) ? 1.0 : min(_3349, 1.0))));
    float _289 = fma(_286, _214, fma(_279, _207, _277 * _193));
    float _292 = fma(_286, _215, fma(_279, _208, _277 * _194));
    float _295 = fma(_286, _216, fma(_279, _209, _277 * _195));
    float _299 = inversesqrt(dot(vec3(_289, _292, _295), vec3(_289, _292, _295)));
    float _310 = cbMtdParam._m0[12u].x + dot(vec4(_299 * _289, _299 * _292, _299 * _295, 0.0), vec4(cbMtdParam._m0[13u].xyz, 0.0));
    float _3360 = isnan(0.0) ? _310 : (isnan(_310) ? 0.0 : max(_310, 0.0));
    float _311 = isnan(1.0) ? _3360 : (isnan(_3360) ? 1.0 : min(_3360, 1.0));
    float _318 = (_311 * (cbMtdParam._m0[10u].x - _249)) + _249;
    float _319 = (_311 * (cbMtdParam._m0[10u].y - _250)) + _250;
    float _320 = (_311 * (cbMtdParam._m0[10u].z - _251)) + _251;
    vec4 _332 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _339 = (_332.x * 2.0) + (-1.0);
    float _340 = (_332.y * 2.0) + (-1.0);
    float _341 = dot(vec2(_339, _340), vec2(_339, _340));
    float _3371 = isnan(0.0) ? _341 : (isnan(_341) ? 0.0 : max(_341, 0.0));
    float _349 = ((_332.z - _273) * _311) + _273;
    float _361 = (((_339 - _277) + (cbMtdParam._m0[12u].w * _277)) * _311) + _277;
    float _362 = (((_340 - _279) + (cbMtdParam._m0[12u].w * _279)) * _311) + _279;
    float _363 = ((sqrt(1.0 - (isnan(1.0) ? _3371 : (isnan(_3371) ? 1.0 : min(_3371, 1.0)))) - _286) * _311) + _286;
    float _366 = fma(_363, _214, fma(_362, _207, _361 * _193));
    float _369 = fma(_363, _215, fma(_362, _208, _361 * _194));
    float _372 = fma(_363, _216, fma(_362, _209, _361 * _195));
    float _376 = inversesqrt(dot(vec3(_366, _369, _372), vec3(_366, _369, _372)));
    float _377 = _376 * _366;
    float _378 = _376 * _369;
    float _379 = _376 * _372;
    float _3382 = isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : max(_349, 0.0));
    float _380 = isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0));
    float _3393 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    float _3404 = isnan(0.0) ? _319 : (isnan(_319) ? 0.0 : max(_319, 0.0));
    float _3415 = isnan(0.0) ? _320 : (isnan(_320) ? 0.0 : max(_320, 0.0));
    float _399 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _441 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _451 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _441);
    float _452 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _441);
    float _453 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _441);
    float _457 = inversesqrt(dot(vec3(_451, _452, _453), vec3(_451, _452, _453)));
    float _458 = _451 * _457;
    float _459 = _452 * _457;
    float _460 = _453 * _457;
    vec4 _465 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _467 = _465.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _624 = sqrt(((_451 * _451) + (_452 * _452)) + (_453 * _453));
        float _630 = (cbMatDynParam._m0[5u].x * _624) + cbMatDynParam._m0[5u].y;
        float _3426 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
        float _631 = isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0));
        float _635 = (cbMatDynParam._m0[5u].z * _624) + cbMatDynParam._m0[5u].w;
        float _3437 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0))) - _631)) + _631) < ((_467 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _479 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _480 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _500 = fma(_379, cbSceneParam._m0[5u].z, fma(_378, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _377));
    float _503 = fma(_379, cbSceneParam._m0[6u].z, fma(_378, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _377));
    float _506 = fma(_379, cbSceneParam._m0[7u].z, fma(_378, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _377));
    uint _519 = uint(roundEven(NORMAL.w)) * 13u;
    uint _520 = _519 + 9u;
    uint _521 = _520 + uint(cbMatDynParam._m0[0u].w);
    float _527 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0)))) * cbInstanceData._m0[_521].x;
    float _528 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0)))) * cbInstanceData._m0[_521].y;
    float _529 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0)))) * cbInstanceData._m0[_521].z;
    float _3448 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _530 = isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0));
    float _3459 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _531 = isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0));
    float _3470 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _532 = isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0));
    vec4 _541 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _479, cbSceneParam._m0[86u].y * _480));
    float _544 = _541.x * TEXCOORD_3.w;
    float _545 = dot(vec3(_377, _378, _379), vec3(_458, _459, _460));
    float _548 = _545 * 2.0;
    float _552 = (_548 * _377) - _458;
    float _553 = (_548 * _378) - _459;
    float _554 = (_548 * _379) - _460;
    float _558 = abs(dot(vec3(_458, _459, _460), vec3(_377, _378, _379)));
    float _3481 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _560 = sqrt(_380);
    float _573 = exp2((_560 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_560 * 3.0));
    float _605 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _609 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _613 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _944;
    float _946;
    float _947;
    float _948;
    float _949;
    float _950;
    float _951;
    float _952;
    float _953;
    float _954;
    float _955;
    float _956;
    float _957;
    float _958;
    float _959;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _669 = fma(_613, cbModelParam._m0[26u].z, fma(_609, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _605));
        float _673 = fma(_613, cbModelParam._m0[27u].z, fma(_609, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _605));
        float _677 = fma(_613, cbModelParam._m0[28u].z, fma(_609, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _605));
        float _702 = _605 + _377;
        float _703 = _609 + _378;
        float _704 = _613 + _379;
        float _714 = fma(_704, cbModelParam._m0[26u].z, fma(_703, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _702)) - _669;
        float _715 = fma(_704, cbModelParam._m0[27u].z, fma(_703, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _702)) - _673;
        float _716 = fma(_704, cbModelParam._m0[28u].z, fma(_703, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _702)) - _677;
        float _720 = inversesqrt(dot(vec3(_714, _715, _716), vec3(_714, _715, _716)));
        float _733 = ((_720 * _714) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_669 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _734 = ((_720 * _715) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_673 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _735 = ((_720 * _716) / cbModelParam._m0[34u].z) + ((((((_677 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _738 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_733, _734, _735), 0.0);
        vec4 _745 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_733, _734, _735), 0.0);
        vec4 _752 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_733, _734, _735), 0.0);
        vec4 _759 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_733, _734, _735), 0.0);
        float _772 = exp2((_738.w + (-0.5)) * 20.0) * 2.0;
        float _773 = _772 * (_738.x + (-0.5));
        float _774 = _772 * (_738.y + (-0.5));
        float _775 = _772 * (_738.z + (-0.5));
        float _782 = exp2((_745.w + (-0.5)) * 20.0) * 2.0;
        float _783 = _782 * (_745.x + (-0.5));
        float _784 = _782 * (_745.y + (-0.5));
        float _785 = _782 * (_745.z + (-0.5));
        float _792 = exp2((_752.w + (-0.5)) * 20.0) * 2.0;
        float _793 = _792 * (_752.x + (-0.5));
        float _794 = _792 * (_752.y + (-0.5));
        float _795 = _792 * (_752.z + (-0.5));
        float _802 = exp2((_759.w + (-0.5)) * 20.0) * 2.0;
        float _803 = _802 * (_759.x + (-0.5));
        float _804 = _802 * (_759.y + (-0.5));
        float _805 = _802 * (_759.z + (-0.5));
        float _806 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
        float _807 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
        float _808 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
        float _809 = _773 * 0.5;
        float _810 = _783 * 0.5;
        float _811 = _793 * 0.5;
        float _812 = dot(vec3(_809, _810, _811), vec3(_809, _810, _811));
        float _817 = (_812 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_812);
        float _826 = (dot(vec3(_377, _378, _379), vec3(_817 * _809, _817 * _810, _817 * _811)) + 1.0) * 0.5;
        float _3507 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
        float _836 = sqrt(((_810 * _810) + (_809 * _809)) + (_811 * _811)) / (_806 + 9.9999997473787516355514526367188e-06);
        float _3518 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
        float _837 = isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0));
        float _838 = _837 * 2.0;
        float _842 = (1.0 - _837) / (_837 + 1.0);
        float _3529 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
        float _843 = isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0));
        float _852 = ((((1.0 - _843) * (_838 + 2.0)) * exp2(log2(isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0))) * (_838 + 1.0))) + _843) * _806;
        float _853 = _774 * 0.5;
        float _854 = _784 * 0.5;
        float _855 = _794 * 0.5;
        float _856 = dot(vec3(_853, _854, _855), vec3(_853, _854, _855));
        float _861 = (_856 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_856);
        float _869 = (dot(vec3(_377, _378, _379), vec3(_861 * _853, _861 * _854, _861 * _855)) + 1.0) * 0.5;
        float _3540 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
        float _878 = sqrt(((_854 * _854) + (_853 * _853)) + (_855 * _855)) / (_807 + 9.9999997473787516355514526367188e-06);
        float _3551 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
        float _879 = isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0));
        float _880 = _879 * 2.0;
        float _884 = (1.0 - _879) / (_879 + 1.0);
        float _3562 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
        float _885 = isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0));
        float _894 = ((((1.0 - _885) * (_880 + 2.0)) * exp2(log2(isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0))) * (_880 + 1.0))) + _885) * _807;
        float _895 = _775 * 0.5;
        float _896 = _785 * 0.5;
        float _897 = _795 * 0.5;
        float _898 = dot(vec3(_895, _896, _897), vec3(_895, _896, _897));
        float _903 = (_898 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_898);
        float _911 = (dot(vec3(_377, _378, _379), vec3(_903 * _895, _903 * _896, _903 * _897)) + 1.0) * 0.5;
        float _3573 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
        float _920 = sqrt(((_896 * _896) + (_895 * _895)) + (_897 * _897)) / (_808 + 9.9999997473787516355514526367188e-06);
        float _3584 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
        float _921 = isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0));
        float _922 = _921 * 2.0;
        float _926 = (1.0 - _921) / (_921 + 1.0);
        float _3595 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
        float _927 = isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0));
        float _936 = ((((1.0 - _927) * (_922 + 2.0)) * exp2(log2(isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0))) * (_922 + 1.0))) + _927) * _808;
        _944 = _775;
        _946 = _774;
        _947 = _773;
        _948 = _785;
        _949 = _784;
        _950 = _783;
        _951 = _795;
        _952 = _794;
        _953 = _793;
        _954 = _808;
        _955 = _807;
        _956 = _806;
        _957 = cbModelParam._m0[36u].z * (isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0)));
        _958 = cbModelParam._m0[36u].z * (isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0)));
        _959 = cbModelParam._m0[36u].z * (isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0)));
    }
    else
    {
        _944 = _945;
        _946 = _945;
        _947 = _945;
        _948 = _945;
        _949 = _945;
        _950 = _945;
        _951 = _945;
        _952 = _945;
        _953 = _945;
        _954 = _945;
        _955 = _945;
        _956 = _945;
        _957 = 0.0;
        _958 = 0.0;
        _959 = 0.0;
    }
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _988 = fma(_613, cbModelParam._m0[30u].z, fma(_609, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _605));
        float _992 = fma(_613, cbModelParam._m0[31u].z, fma(_609, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _605));
        float _996 = fma(_613, cbModelParam._m0[32u].z, fma(_609, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _605));
        float _1019 = _605 + _377;
        float _1020 = _609 + _378;
        float _1021 = _613 + _379;
        float _1031 = fma(_1021, cbModelParam._m0[30u].z, fma(_1020, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1019)) - _988;
        float _1032 = fma(_1021, cbModelParam._m0[31u].z, fma(_1020, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1019)) - _992;
        float _1033 = fma(_1021, cbModelParam._m0[32u].z, fma(_1020, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1019)) - _996;
        float _1037 = inversesqrt(dot(vec3(_1031, _1032, _1033), vec3(_1031, _1032, _1033)));
        float _1050 = ((_1037 * _1031) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_988 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1051 = ((_1037 * _1032) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_992 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1052 = ((_1037 * _1033) / cbModelParam._m0[35u].z) + ((((((_996 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1054 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1050, _1051, _1052), 0.0);
        vec4 _1061 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1050, _1051, _1052), 0.0);
        vec4 _1068 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1050, _1051, _1052), 0.0);
        vec4 _1075 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1050, _1051, _1052), 0.0);
        float _1087 = exp2((_1054.w + (-0.5)) * 20.0) * 2.0;
        float _1088 = _1087 * (_1054.x + (-0.5));
        float _1089 = _1087 * (_1054.y + (-0.5));
        float _1090 = _1087 * (_1054.z + (-0.5));
        float _1097 = exp2((_1061.w + (-0.5)) * 20.0) * 2.0;
        float _1098 = _1097 * (_1061.x + (-0.5));
        float _1099 = _1097 * (_1061.y + (-0.5));
        float _1100 = _1097 * (_1061.z + (-0.5));
        float _1107 = exp2((_1068.w + (-0.5)) * 20.0) * 2.0;
        float _1108 = _1107 * (_1068.x + (-0.5));
        float _1109 = _1107 * (_1068.y + (-0.5));
        float _1110 = _1107 * (_1068.z + (-0.5));
        float _1117 = exp2((_1075.w + (-0.5)) * 20.0) * 2.0;
        float _1118 = _1117 * (_1075.x + (-0.5));
        float _1119 = _1117 * (_1075.y + (-0.5));
        float _1120 = _1117 * (_1075.z + (-0.5));
        float _1121 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1122 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1123 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1124 = _1088 * 0.5;
        float _1125 = _1098 * 0.5;
        float _1126 = _1108 * 0.5;
        float _1127 = dot(vec3(_1124, _1125, _1126), vec3(_1124, _1125, _1126));
        float _1132 = (_1127 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1127);
        float _1140 = (dot(vec3(_377, _378, _379), vec3(_1132 * _1124, _1132 * _1125, _1132 * _1126)) + 1.0) * 0.5;
        float _3636 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1149 = sqrt(((_1125 * _1125) + (_1124 * _1124)) + (_1126 * _1126)) / (_1121 + 9.9999997473787516355514526367188e-06);
        float _3647 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1150 = isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0));
        float _1151 = _1150 * 2.0;
        float _1155 = (1.0 - _1150) / (_1150 + 1.0);
        float _3658 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1156 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
        float _1165 = ((((1.0 - _1156) * (_1151 + 2.0)) * exp2(log2(isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0))) * (_1151 + 1.0))) + _1156) * _1121;
        float _1166 = _1089 * 0.5;
        float _1167 = _1099 * 0.5;
        float _1168 = _1109 * 0.5;
        float _1169 = dot(vec3(_1166, _1167, _1168), vec3(_1166, _1167, _1168));
        float _1174 = (_1169 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1169);
        float _1182 = (dot(vec3(_377, _378, _379), vec3(_1174 * _1166, _1174 * _1167, _1174 * _1168)) + 1.0) * 0.5;
        float _3669 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1191 = sqrt(((_1167 * _1167) + (_1166 * _1166)) + (_1168 * _1168)) / (_1122 + 9.9999997473787516355514526367188e-06);
        float _3680 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1192 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
        float _1193 = _1192 * 2.0;
        float _1197 = (1.0 - _1192) / (_1192 + 1.0);
        float _3691 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1198 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
        float _1207 = ((((1.0 - _1198) * (_1193 + 2.0)) * exp2(log2(isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0))) * (_1193 + 1.0))) + _1198) * _1122;
        float _1208 = _1090 * 0.5;
        float _1209 = _1100 * 0.5;
        float _1210 = _1110 * 0.5;
        float _1211 = dot(vec3(_1208, _1209, _1210), vec3(_1208, _1209, _1210));
        float _1216 = (_1211 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1211);
        float _1224 = (dot(vec3(_377, _378, _379), vec3(_1216 * _1208, _1216 * _1209, _1216 * _1210)) + 1.0) * 0.5;
        float _3702 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1233 = sqrt(((_1209 * _1209) + (_1208 * _1208)) + (_1210 * _1210)) / (_1123 + 9.9999997473787516355514526367188e-06);
        float _3713 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1234 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
        float _1235 = _1234 * 2.0;
        float _1239 = (1.0 - _1234) / (_1234 + 1.0);
        float _3724 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1240 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
        float _1249 = ((((1.0 - _1240) * (_1235 + 2.0)) * exp2(log2(isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0))) * (_1235 + 1.0))) + _1240) * _1123;
        _1257 = _1090;
        _1258 = _1089;
        _1259 = _1088;
        _1260 = _1100;
        _1261 = _1099;
        _1262 = _1098;
        _1263 = _1110;
        _1264 = _1109;
        _1265 = _1108;
        _1266 = _1123;
        _1267 = _1122;
        _1268 = _1121;
        _1269 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0)));
        _1270 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0)));
        _1271 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0)));
    }
    else
    {
        _1257 = _945;
        _1258 = _945;
        _1259 = _945;
        _1260 = _945;
        _1261 = _945;
        _1262 = _945;
        _1263 = _945;
        _1264 = _945;
        _1265 = _945;
        _1266 = _945;
        _1267 = _945;
        _1268 = _945;
        _1269 = 0.0;
        _1270 = 0.0;
        _1271 = 0.0;
    }
    float _1281 = (cbModelParam._m0[1u].x * (_1269 - _957)) + _957;
    float _1282 = (cbModelParam._m0[1u].x * (_1270 - _958)) + _958;
    float _1283 = (cbModelParam._m0[1u].x * (_1271 - _959)) + _959;
    float _1304 = fma(_1283, cbSceneParam._m0[89u].z, fma(_1282, cbSceneParam._m0[89u].y, _1281 * cbSceneParam._m0[89u].x));
    float _1307 = fma(_1283, cbSceneParam._m0[90u].z, fma(_1282, cbSceneParam._m0[90u].y, _1281 * cbSceneParam._m0[90u].x));
    float _1310 = fma(_1283, cbSceneParam._m0[91u].z, fma(_1282, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1281));
    float _1325 = _552 * 0.5;
    float _1326 = _553 * 0.5;
    float _1327 = _554 * 0.5;
    float _1328 = dot(vec4(_1325, _1326, _1327, 1.0), vec4(_1259, _1262, _1265, _1268));
    float _1331 = dot(vec4(_1325, _1326, _1327, 1.0), vec4(_1258, _1261, _1264, _1267));
    float _1334 = dot(vec4(_1325, _1326, _1327, 1.0), vec4(_1257, _1260, _1263, _1266));
    float _1368;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1341 = dot(vec4(_1325, _1326, _1327, 1.0), vec4(_944, _948, _951, _954));
        float _1345 = dot(vec4(_1325, _1326, _1327, 1.0), vec4(_946, _949, _952, _955));
        float _1349 = dot(vec4(_1325, _1326, _1327, 1.0), vec4(_947, _950, _953, _956));
        float _1356 = dot(vec4(cbModelParam._m0[39u]), vec4(_1325, _1326, _1327, 1.0));
        _1368 = dot(vec3(isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0)), isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0)), isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1356) ? 0.0 : (isnan(0.0) ? _1356 : max(0.0, _1356))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1368 = 1.0;
    }
    float _1379;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1370 = dot(vec4(cbModelParam._m0[40u]), vec4(_1325, _1326, _1327, 1.0));
        _1379 = dot(vec3(isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0)), isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0)), isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1370) ? 0.0 : (isnan(0.0) ? _1370 : max(0.0, _1370))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1379 = 1.0;
    }
    float _1383 = (_1379 * cbModelParam._m0[1u].x) + (_1368 * (1.0 - cbModelParam._m0[1u].x));
    float _1393 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _380);
    float _1394 = isnan(_1393) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1393 : min(cbModelParam._m0[25u].z, _1393));
    float _1475;
    float _1477;
    float _1479;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1442 = fma(_613, cbModelParam._m0[13u].z, fma(_609, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _605)) + cbModelParam._m0[13u].w;
        float _1446 = fma(_613, cbModelParam._m0[14u].z, fma(_609, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _605)) + cbModelParam._m0[14u].w;
        float _1450 = fma(_613, cbModelParam._m0[15u].z, fma(_609, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _605)) + cbModelParam._m0[15u].w;
        float _1453 = fma(_554, cbModelParam._m0[13u].z, fma(_553, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _552));
        float _1456 = fma(_554, cbModelParam._m0[14u].z, fma(_553, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _552));
        float _1459 = fma(_554, cbModelParam._m0[15u].z, fma(_553, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _552));
        float _1487;
        if (_1453 > 0.0)
        {
            _1487 = abs((1.0 - _1442) / _1453);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1453 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1442 + 1.0) / _1453);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1487 = frontier_phi_19_17_ladder;
        }
        float _1713;
        if (_1456 > 0.0)
        {
            _1713 = abs((1.0 - _1446) / _1456);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1456 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1446 + 1.0) / _1456);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1713 = frontier_phi_28_24_ladder;
        }
        float _1959;
        if (_1459 > 0.0)
        {
            _1959 = abs((1.0 - _1450) / _1459);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1459 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1450 + 1.0) / _1459);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1959 = frontier_phi_40_35_ladder;
        }
        float _1961 = isnan(_1713) ? _1487 : (isnan(_1487) ? _1713 : min(_1487, _1713));
        float _1962 = isnan(_1959) ? _1961 : (isnan(_1961) ? _1959 : min(_1961, _1959));
        float _1966 = (_1962 * _1453) + _1442;
        float _1967 = (_1962 * _1456) + _1446;
        float _1968 = (_1962 * _1459) + _1450;
        float _1969 = _1962 * 9.9999997473787516355514526367188e-05;
        float _1971 = (-1.0) - _1969;
        float _1973 = _1969 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1968 > _1973) || ((_1968 < _1971) || ((_1967 > _1973) || ((_1967 < _1971) || ((_1966 < _1971) || (_1966 > _1973))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2092 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1968, cbModelParam._m0[9u].z, fma(_1967, cbModelParam._m0[9u].y, _1966 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1968, cbModelParam._m0[10u].z, fma(_1967, cbModelParam._m0[10u].y, _1966 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1968, cbModelParam._m0[11u].z, fma(_1967, cbModelParam._m0[11u].y, _1966 * cbModelParam._m0[11u].x))), _1394);
            frontier_phi_18_40_ladder = _2092.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2092.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2092.x * cbModelParam._m0[1u].y;
        }
        _1475 = frontier_phi_18_40_ladder_2;
        _1477 = frontier_phi_18_40_ladder_1;
        _1479 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1463 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_552, _553, _554), _1394);
        _1475 = _1463.x * cbModelParam._m0[1u].y;
        _1477 = _1463.y * cbModelParam._m0[1u].y;
        _1479 = _1463.z * cbModelParam._m0[1u].y;
    }
    float _1483 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _380);
    float _1484 = isnan(_1483) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1483 : min(cbModelParam._m0[25u].w, _1483));
    float _1577;
    float _1579;
    float _1581;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1541 = fma(_613, cbModelParam._m0[21u].z, fma(_609, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _605)) + cbModelParam._m0[21u].w;
        float _1545 = fma(_613, cbModelParam._m0[22u].z, fma(_609, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _605)) + cbModelParam._m0[22u].w;
        float _1549 = fma(_613, cbModelParam._m0[23u].z, fma(_609, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _605)) + cbModelParam._m0[23u].w;
        float _1552 = fma(_554, cbModelParam._m0[21u].z, fma(_553, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _552));
        float _1555 = fma(_554, cbModelParam._m0[22u].z, fma(_553, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _552));
        float _1558 = fma(_554, cbModelParam._m0[23u].z, fma(_553, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _552));
        float _1718;
        if (_1552 > 0.0)
        {
            _1718 = abs((1.0 - _1541) / _1552);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1552 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1541 + 1.0) / _1552);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1718 = frontier_phi_30_26_ladder;
        }
        float _1986;
        if (_1555 > 0.0)
        {
            _1986 = abs((1.0 - _1545) / _1555);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1555 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1545 + 1.0) / _1555);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1986 = frontier_phi_42_37_ladder;
        }
        float _2191;
        if (_1558 > 0.0)
        {
            _2191 = abs((1.0 - _1549) / _1558);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1558 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1549 + 1.0) / _1558);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2191 = frontier_phi_51_48_ladder;
        }
        float _2193 = isnan(_1986) ? _1718 : (isnan(_1718) ? _1986 : min(_1718, _1986));
        float _2194 = isnan(_2191) ? _2193 : (isnan(_2193) ? _2191 : min(_2193, _2191));
        float _2198 = (_2194 * _1552) + _1541;
        float _2199 = (_2194 * _1555) + _1545;
        float _2200 = (_2194 * _1558) + _1549;
        float _2201 = _2194 * 9.9999997473787516355514526367188e-05;
        float _2202 = (-1.0) - _2201;
        float _2204 = _2201 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2200 > _2204) || ((_2200 < _2202) || ((_2199 > _2204) || ((_2199 < _2202) || ((_2198 < _2202) || (_2198 > _2204))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2398 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2200, cbModelParam._m0[17u].z, fma(_2199, cbModelParam._m0[17u].y, _2198 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2200, cbModelParam._m0[18u].z, fma(_2199, cbModelParam._m0[18u].y, _2198 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2200, cbModelParam._m0[19u].z, fma(_2199, cbModelParam._m0[19u].y, _2198 * cbModelParam._m0[19u].x))), _1484);
            frontier_phi_27_51_ladder = _2398.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2398.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2398.x * cbModelParam._m0[1u].z;
        }
        _1577 = frontier_phi_27_51_ladder_2;
        _1579 = frontier_phi_27_51_ladder_1;
        _1581 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1561 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_552, _553, _554), _1484);
        _1577 = _1561.x * cbModelParam._m0[1u].z;
        _1579 = _1561.y * cbModelParam._m0[1u].z;
        _1581 = _1561.z * cbModelParam._m0[1u].z;
    }
    float _1593 = ((((1.0 - _573) * ((_560 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_573 * _560)) * _544;
    float _1594 = _1593 * ((cbModelParam._m0[1u].w * (_1577 - _1475)) + _1475);
    float _1595 = _1593 * ((cbModelParam._m0[1u].w * (_1579 - _1477)) + _1477);
    float _1596 = _1593 * ((cbModelParam._m0[1u].w * (_1581 - _1479)) + _1479);
    float _1599 = fma(_1596, cbSceneParam._m0[89u].z, fma(_1595, cbSceneParam._m0[89u].y, _1594 * cbSceneParam._m0[89u].x));
    float _1602 = fma(_1596, cbSceneParam._m0[90u].z, fma(_1595, cbSceneParam._m0[90u].y, _1594 * cbSceneParam._m0[90u].x));
    float _1605 = fma(_1596, cbSceneParam._m0[91u].z, fma(_1595, cbSceneParam._m0[91u].y, _1594 * cbSceneParam._m0[91u].x));
    vec4 _1613 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_479, _480));
    float _1615 = _1613.w;
    float _1627 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1615);
    float _1628 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1615);
    float _1629 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1615);
    uvec4 _1633 = floatBitsToUint(cbInstanceData._m0[_519 + 5u]);
    uint _1635 = _1633.x * 14u;
    uint _1636 = _1635 + 13u;
    float _1643 = _544 + (-1.0);
    float _1648 = (cbLight._m0[_1636].x * _1643) + 1.0;
    float _1649 = (cbLight._m0[_1636].y * _1643) + 1.0;
    float _1650 = (cbLight._m0[_1636].z * _1643) + 1.0;
    float _1651 = (cbLight._m0[_1636].w * _1643) + 1.0;
    uint _1652 = _1635 + 5u;
    float _1658 = isnan(1.0) ? _1649 : (isnan(_1649) ? 1.0 : min(_1649, 1.0));
    uint _1662 = _1635 + 4u;
    float _1672 = isnan(1.0) ? _1648 : (isnan(_1648) ? 1.0 : min(_1648, 1.0));
    uint _1676 = _1635 | 1u;
    float _1687 = dot(vec3(cbLight._m0[_1635].xyz), vec3(_377, _378, _379));
    float _1690 = dot(vec3(cbLight._m0[_1676].xyz), vec3(_377, _378, _379));
    float _3860 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
    float _3871 = isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0));
    float _1695 = (isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0))) * 0.3183098733425140380859375;
    float _1697 = (isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0))) * 0.3183098733425140380859375;
    float _1704 = ((cbLight._m0[_1652].x * _1658) * _1697) + (((cbLight._m0[_1662].x * _1627) * _1672) * _1695);
    float _1705 = ((_1658 * cbLight._m0[_1652].y) * _1697) + (((cbLight._m0[_1662].y * _1628) * _1672) * _1695);
    float _1706 = ((_1658 * cbLight._m0[_1652].z) * _1697) + (((cbLight._m0[_1662].z * _1629) * _1672) * _1695);
    uvec4 _1710 = floatBitsToUint(cbLight._m0[_1635 + 12u]);
    bool _1712 = _1710.x == 0u;
    float _1723;
    float _1725;
    float _1727;
    if (_1712)
    {
        _1723 = _1704;
        _1725 = _1705;
        _1727 = _1706;
    }
    else
    {
        uint _1731 = _1635 + 6u;
        float _1747 = (dot(vec3(cbLight._m0[_1635 + 2u].xyz), vec3(_377, _378, _379)) * 0.5) + 0.5;
        float _1748 = _1747 * _1747;
        float _3882 = isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0));
        float _1749 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
        float _1750 = isnan(1.0) ? _1650 : (isnan(_1650) ? 1.0 : min(_1650, 1.0));
        _1723 = (((cbLight._m0[_1731].x * 0.3183098733425140380859375) * _1749) * _1750) + _1704;
        _1725 = (((cbLight._m0[_1731].y * 0.3183098733425140380859375) * _1749) * _1750) + _1705;
        _1727 = (((cbLight._m0[_1731].z * 0.3183098733425140380859375) * _1749) * _1750) + _1706;
    }
    bool _1730 = _1710.y == 0u;
    float _1768;
    float _1770;
    float _1772;
    if (_1730)
    {
        _1768 = _1723;
        _1770 = _1725;
        _1772 = _1727;
    }
    else
    {
        uint _1930 = _1635 + 7u;
        float _1946 = (dot(vec3(cbLight._m0[_1635 + 3u].xyz), vec3(_377, _378, _379)) * 0.5) + 0.5;
        float _1947 = _1946 * _1946;
        float _3898 = isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0));
        float _1948 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
        float _1949 = isnan(1.0) ? _1651 : (isnan(_1651) ? 1.0 : min(_1651, 1.0));
        _1768 = (((cbLight._m0[_1930].x * 0.3183098733425140380859375) * _1948) * _1949) + _1723;
        _1770 = (((cbLight._m0[_1930].y * 0.3183098733425140380859375) * _1948) * _1949) + _1725;
        _1772 = (((cbLight._m0[_1930].z * 0.3183098733425140380859375) * _1948) * _1949) + _1727;
    }
    uint _1775 = _1635 + 8u;
    float _1788 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1635].w)) * _380) * 0.949999988079071044921875);
    float _1789 = _1788 * _1788;
    float _1790 = cbLight._m0[_1635].x + _458;
    float _1791 = cbLight._m0[_1635].y + _459;
    float _1792 = cbLight._m0[_1635].z + _460;
    float _1796 = inversesqrt(dot(vec3(_1790, _1791, _1792), vec3(_1790, _1791, _1792)));
    float _1797 = _1796 * _1790;
    float _1798 = _1796 * _1791;
    float _1799 = _1796 * _1792;
    float _1800 = dot(vec3(_377, _378, _379), vec3(cbLight._m0[_1635].xyz));
    float _3914 = isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0));
    float _1803 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
    float _3925 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _1804 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
    float _1805 = dot(vec3(_377, _378, _379), vec3(_1797, _1798, _1799));
    float _3936 = isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0));
    float _1808 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
    float _1809 = dot(vec3(cbLight._m0[_1635].xyz), vec3(_1797, _1798, _1799));
    float _3947 = isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0));
    float _1813 = _1789 * _1789;
    float _1817 = ((_1808 * _1808) * (_1813 + (-1.0))) + 1.0;
    float _1828 = (exp2(log2(1.0 - (isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1829 = 1.0 - _1789;
    float _1840 = (0.5 / (((_1804 * ((_1803 * _1829) + _1789)) + 9.9999999392252902907785028219223e-09) + (((_1804 * _1829) + _1789) * _1803))) * _1803;
    float _3958 = isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0));
    float _1842 = (isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0))) * (_1813 / ((_1817 * _1817) * 3.141590118408203125));
    uint _1856 = _1635 + 9u;
    float _1867 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1676].w)) * _380) * 0.949999988079071044921875);
    float _1868 = _1867 * _1867;
    float _1869 = cbLight._m0[_1676].x + _458;
    float _1870 = cbLight._m0[_1676].y + _459;
    float _1871 = cbLight._m0[_1676].z + _460;
    float _1875 = inversesqrt(dot(vec3(_1869, _1870, _1871), vec3(_1869, _1870, _1871)));
    float _1876 = _1875 * _1869;
    float _1877 = _1875 * _1870;
    float _1878 = _1875 * _1871;
    float _1879 = dot(vec3(_377, _378, _379), vec3(cbLight._m0[_1676].xyz));
    float _3969 = isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0));
    float _1882 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
    float _1883 = dot(vec3(_377, _378, _379), vec3(_1876, _1877, _1878));
    float _3980 = isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0));
    float _1886 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
    float _1887 = dot(vec3(cbLight._m0[_1676].xyz), vec3(_1876, _1877, _1878));
    float _3991 = isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0));
    float _1891 = _1868 * _1868;
    float _1895 = ((_1886 * _1886) * (_1891 + (-1.0))) + 1.0;
    float _1904 = (exp2(log2(1.0 - (isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1905 = 1.0 - _1868;
    float _1915 = (0.5 / (((_1804 * ((_1882 * _1905) + _1868)) + 9.9999999392252902907785028219223e-09) + (((_1804 * _1905) + _1868) * _1882))) * _1882;
    float _4002 = isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0));
    float _1917 = (isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0))) * (_1891 / ((_1895 * _1895) * 3.141590118408203125));
    float _1927 = (((_1904 * cbLight._m0[_1856].x) * _1917) * _1658) + ((((cbLight._m0[_1775].x * _1627) * _1828) * _1842) * _1672);
    float _1928 = (((_1904 * cbLight._m0[_1856].y) * _1917) * _1658) + ((((cbLight._m0[_1775].y * _1628) * _1828) * _1842) * _1672);
    float _1929 = (((_1904 * cbLight._m0[_1856].z) * _1917) * _1658) + ((((cbLight._m0[_1775].z * _1629) * _1828) * _1842) * _1672);
    float _1991;
    float _1993;
    float _1995;
    if (_1712)
    {
        _1991 = _1927;
        _1993 = _1928;
        _1995 = _1929;
    }
    else
    {
        uint _1997 = _1635 + 2u;
        uint _2001 = _1635 + 10u;
        float _2015 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1997].w)) * _380) * 0.949999988079071044921875);
        float _2016 = _2015 * _2015;
        float _2017 = cbLight._m0[_1997].x + _458;
        float _2018 = cbLight._m0[_1997].y + _459;
        float _2019 = cbLight._m0[_1997].z + _460;
        float _2023 = inversesqrt(dot(vec3(_2017, _2018, _2019), vec3(_2017, _2018, _2019)));
        float _2024 = _2023 * _2017;
        float _2025 = _2023 * _2018;
        float _2026 = _2023 * _2019;
        float _2027 = dot(vec3(_377, _378, _379), vec3(cbLight._m0[_1997].xyz));
        float _4013 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
        float _2030 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
        float _2031 = dot(vec3(_377, _378, _379), vec3(_2024, _2025, _2026));
        float _4024 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
        float _2034 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
        float _2035 = dot(vec3(cbLight._m0[_1997].xyz), vec3(_2024, _2025, _2026));
        float _4035 = isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0));
        float _2039 = _2016 * _2016;
        float _2043 = ((_2034 * _2034) * (_2039 + (-1.0))) + 1.0;
        float _2052 = (exp2(log2(1.0 - (isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2053 = 1.0 - _2016;
        float _2063 = (0.5 / (((_1804 * ((_2030 * _2053) + _2016)) + 9.9999999392252902907785028219223e-09) + (((_1804 * _2053) + _2016) * _2030))) * _2030;
        float _4046 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
        float _2065 = (isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0))) * (_2039 / ((_2043 * _2043) * 3.141590118408203125));
        float _2066 = isnan(1.0) ? _1650 : (isnan(_1650) ? 1.0 : min(_1650, 1.0));
        _1991 = (((_2052 * cbLight._m0[_2001].x) * _2065) * _2066) + _1927;
        _1993 = (((_2052 * cbLight._m0[_2001].y) * _2065) * _2066) + _1928;
        _1995 = (((_2052 * cbLight._m0[_2001].z) * _2065) * _2066) + _1929;
    }
    float _2101;
    float _2103;
    float _2105;
    if (_1730)
    {
        _2101 = _1991;
        _2103 = _1993;
        _2105 = _1995;
    }
    else
    {
        uint _2112 = _1635 + 3u;
        uint _2116 = _1635 + 11u;
        float _2130 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2112].w)) * _380) * 0.949999988079071044921875);
        float _2131 = _2130 * _2130;
        float _2132 = cbLight._m0[_2112].x + _458;
        float _2133 = cbLight._m0[_2112].y + _459;
        float _2134 = cbLight._m0[_2112].z + _460;
        float _2138 = inversesqrt(dot(vec3(_2132, _2133, _2134), vec3(_2132, _2133, _2134)));
        float _2139 = _2138 * _2132;
        float _2140 = _2138 * _2133;
        float _2141 = _2138 * _2134;
        float _2142 = dot(vec3(_377, _378, _379), vec3(cbLight._m0[_2112].xyz));
        float _4062 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
        float _2145 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
        float _2146 = dot(vec3(_377, _378, _379), vec3(_2139, _2140, _2141));
        float _4073 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
        float _2149 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
        float _2150 = dot(vec3(cbLight._m0[_2112].xyz), vec3(_2139, _2140, _2141));
        float _4084 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
        float _2154 = _2131 * _2131;
        float _2158 = ((_2149 * _2149) * (_2154 + (-1.0))) + 1.0;
        float _2167 = (exp2(log2(1.0 - (isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2168 = 1.0 - _2131;
        float _2178 = (0.5 / (((_1804 * ((_2145 * _2168) + _2131)) + 9.9999999392252902907785028219223e-09) + (((_1804 * _2168) + _2131) * _2145))) * _2145;
        float _4095 = isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0));
        float _2180 = (isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0))) * (_2154 / ((_2158 * _2158) * 3.141590118408203125));
        float _2181 = isnan(1.0) ? _1651 : (isnan(_1651) ? 1.0 : min(_1651, 1.0));
        _2101 = (((_2167 * cbLight._m0[_2116].x) * _2180) * _2181) + _1991;
        _2103 = (((_2167 * cbLight._m0[_2116].y) * _2180) * _2181) + _1993;
        _2105 = (((_2167 * cbLight._m0[_2116].z) * _2180) * _2181) + _1995;
    }
    float _2315;
    float _2317;
    float _2319;
    float _2321;
    float _2323;
    float _2325;
    if (_1633.y == 0u)
    {
        float _2256 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2257 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2256;
        float _2258 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2256;
        float _2259 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2256;
        uvec4 _2271 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2272 = _2271.x;
        uint _2283 = uint((float(_2271.y) * floor(float(uint(cbSceneParam._m0[85u].y * _480) / _2272))) + floor(float(uint(cbSceneParam._m0[85u].x * _479) / _2272)));
        float _2293 = (log2(_2259 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2294 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
        uint _2297 = uint(isnan(14.0) ? _2294 : (isnan(_2294) ? 14.0 : min(_2294, 14.0)));
        uvec4 _2302 = texelFetch(g_lightClusterGridBuffer, int(((_2297 << 2u) + (_2283 << 6u)) >> 2u));
        uint _2303 = _2302.x;
        uint _2304 = _2271.z;
        float _2403;
        float _2405;
        float _2407;
        float _2409;
        float _2411;
        float _2413;
        if (((((1u << ((_2304 >> 4u) & 15u)) + 4294967295u) & _2303) == 0u) || ((_2304 & 240u) == 0u))
        {
            _2403 = 0.0;
            _2405 = 0.0;
            _2407 = 0.0;
            _2409 = 0.0;
            _2411 = 0.0;
            _2413 = 0.0;
        }
        else
        {
            float _2404;
            float _2406;
            float _2408;
            float _2410;
            float _2412;
            float _2414;
            float _2555 = 0.0;
            float _2556 = 0.0;
            float _2557 = 0.0;
            float _2558 = 0.0;
            float _2559 = 0.0;
            float _2560 = 0.0;
            uint _2561 = 0u;
            uint _2570;
            bool _2571;
            for (;;)
            {
                _2570 = texelFetch(g_lightClassification, int((((_2297 << 5u) + (_2283 << 9u)) + (_2561 << 2u)) >> 2u)).x;
                _2571 = _2570 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2571)
                {
                    frontier_phi_68_pred = _2557;
                    frontier_phi_68_pred_1 = _2560;
                    frontier_phi_68_pred_2 = _2559;
                    frontier_phi_68_pred_3 = _2558;
                    frontier_phi_68_pred_4 = _2556;
                    frontier_phi_68_pred_5 = _2555;
                }
                else
                {
                    float _2700;
                    float _2701;
                    float _2702;
                    float _2703;
                    float _2704;
                    float _2705;
                    uint _2706;
                    _2700 = _2555;
                    _2701 = _2556;
                    _2702 = _2557;
                    _2703 = _2558;
                    _2704 = _2559;
                    _2705 = _2560;
                    _2706 = _2570;
                    float _2627;
                    float _2628;
                    float _2629;
                    float _2630;
                    float _2631;
                    float _2632;
                    for (;;)
                    {
                        uint _2710 = uint(findLSB(_2706)) + (_2561 << 5u);
                        uint _2707 = (_2706 + 4294967295u) & _2706;
                        uint _2712 = _2710 * 48u;
                        vec4 _2726 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2712)).x, texelFetch(g_PointLightRenderingBuffer, int(_2712 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2712 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2712 + 3u)).x));
                        uint _2732 = (_2710 * 48u) + 4u;
                        vec4 _2745 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2732)).x, texelFetch(g_PointLightRenderingBuffer, int(_2732 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2732 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2732 + 3u)).x));
                        uint _2751 = (_2710 * 48u) + 8u;
                        vec3 _2762 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2751)).x, texelFetch(g_PointLightRenderingBuffer, int(_2751 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2751 + 2u)).x));
                        float _2766 = _2726.x - _2257;
                        float _2767 = _2726.y - _2258;
                        float _2768 = _2726.z - _2259;
                        float _2769 = dot(vec3(_2766, _2767, _2768), vec3(_2766, _2767, _2768));
                        float _2772 = inversesqrt(_2769);
                        float _2773 = _2772 * _2766;
                        float _2774 = _2772 * _2767;
                        float _2775 = _2772 * _2768;
                        float _2776 = dot(vec3(_500, _503, _506), vec3(_2773, _2774, _2775));
                        float _2781 = 1.0 - (_2769 * _2726.w);
                        float _4121 = isnan(0.0) ? _2781 : (isnan(_2781) ? 0.0 : max(_2781, 0.0));
                        float _2782 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
                        float _2783 = sqrt(_2769) * _2745.w;
                        float _2786 = 1.39999997615814208984375 / (_2783 + 1.39999997615814208984375);
                        float _2787 = _2786 * _2786;
                        float _2790 = ((1.0 - _2787) * _2776) + _2787;
                        float _2793 = _2783 * _2783;
                        float _2797 = ((isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0))) * _2782) / ((_2793 * 0.699999988079071044921875) + 1.0);
                        float _2801 = (-0.0) - _2257;
                        float _2802 = (-0.0) - _2258;
                        float _2803 = (-0.0) - _2259;
                        float _2807 = inversesqrt(dot(vec3(_2801, _2802, _2803), vec3(_2801, _2802, _2803)));
                        float _2808 = _2807 * _2801;
                        float _2809 = _2807 * _2802;
                        float _2810 = _2807 * _2803;
                        float _2818 = exp2(log2(1.0 / ((_2793 * 3.5) + 5.0)) * 0.25);
                        float _2819 = 1.0 - _560;
                        float _2826 = sqrt(1.0 - ((1.0 - (_2819 * _2819)) * (1.0 - (_2818 * _2818))));
                        float _2827 = _2826 * _2826;
                        float _2828 = _2827 * _2827;
                        float _2829 = _2808 + _2773;
                        float _2830 = _2809 + _2774;
                        float _2831 = _2810 + _2775;
                        float _2835 = inversesqrt(dot(vec3(_2829, _2830, _2831), vec3(_2829, _2830, _2831)));
                        float _2839 = dot(vec3(_500, _503, _506), vec3(_2808, _2809, _2810));
                        float _4137 = isnan(0.0) ? _2839 : (isnan(_2839) ? 0.0 : max(_2839, 0.0));
                        float _2842 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
                        float _2843 = dot(vec3(_500, _503, _506), vec3(_2835 * _2829, _2835 * _2830, _2835 * _2831));
                        float _4148 = isnan(0.0) ? _2843 : (isnan(_2843) ? 0.0 : max(_2843, 0.0));
                        float _2846 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
                        float _2850 = ((_2846 * _2846) * (_2828 + (-1.0))) + 1.0;
                        float _2851 = _2786 * _2827;
                        float _2852 = _2851 * _2851;
                        float _2855 = ((1.0 - _2852) * _2776) + _2852;
                        float _4159 = isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0));
                        float _2856 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
                        float _2857 = 1.0 - _2827;
                        float _2867 = (0.5 / (((_2856 * ((_2842 * _2857) + _2827)) + 9.9999999392252902907785028219223e-09) + (((_2856 * _2857) + _2827) * _2842))) * _2856;
                        float _4170 = isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : max(_2867, 0.0));
                        float _2878 = (((_2828 * 3.1415927410125732421875) * (isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0)))) / ((_2850 * _2850) * ((_2793 * 2.1991131305694580078125) + 3.141590118408203125))) * _2782;
                        _2630 = (_2797 * _2745.x) + _2703;
                        _2631 = (_2797 * _2745.y) + _2704;
                        _2632 = (_2797 * _2745.z) + _2705;
                        _2627 = (_2878 * _2762.x) + _2700;
                        _2628 = (_2878 * _2762.y) + _2701;
                        _2629 = (_2878 * _2762.z) + _2702;
                        if (_2707 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2700 = _2627;
                            _2701 = _2628;
                            _2702 = _2629;
                            _2703 = _2630;
                            _2704 = _2631;
                            _2705 = _2632;
                            _2706 = _2707;
                        }
                    }
                    frontier_phi_68_pred = _2629;
                    frontier_phi_68_pred_1 = _2632;
                    frontier_phi_68_pred_2 = _2631;
                    frontier_phi_68_pred_3 = _2630;
                    frontier_phi_68_pred_4 = _2628;
                    frontier_phi_68_pred_5 = _2627;
                }
                _2408 = frontier_phi_68_pred;
                _2414 = frontier_phi_68_pred_1;
                _2412 = frontier_phi_68_pred_2;
                _2410 = frontier_phi_68_pred_3;
                _2406 = frontier_phi_68_pred_4;
                _2404 = frontier_phi_68_pred_5;
                uint _2562 = _2561 + 1u;
                if (_2562 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2555 = _2404;
                    _2556 = _2406;
                    _2557 = _2408;
                    _2558 = _2410;
                    _2559 = _2412;
                    _2560 = _2414;
                    _2561 = _2562;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2403 = _2404;
            _2405 = _2406;
            _2407 = _2408;
            _2409 = _2410;
            _2411 = _2412;
            _2413 = _2414;
        }
        uvec4 _2417 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2418 = _2417.z;
        uint _2420 = (_2418 >> 8u) & 15u;
        float _2523;
        float _2525;
        float _2527;
        float _2529;
        float _2531;
        float _2533;
        if (((4294967295u << _2420) & _2303) == 0u)
        {
            _2523 = _2403;
            _2525 = _2405;
            _2527 = _2407;
            _2529 = _2409;
            _2531 = _2411;
            _2533 = _2413;
        }
        else
        {
            float _2548 = inversesqrt(dot(vec3(_2257, _2258, _2259), vec3(_2257, _2258, _2259)));
            float _2549 = _2548 * _2257;
            float _2550 = _2548 * _2258;
            float _2551 = _2548 * _2259;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2420 < ((_2418 >> 12u) & 15u))
            {
                float _2524;
                float _2526;
                float _2528;
                float _2530;
                float _2532;
                float _2534;
                float _2683 = _2403;
                float _2684 = _2405;
                float _2685 = _2407;
                float _2686 = _2409;
                float _2687 = _2411;
                float _2688 = _2413;
                uint _2689 = _2420;
                uint _2698;
                bool _2699;
                for (;;)
                {
                    _2698 = texelFetch(g_lightClassification, int((((_2297 << 5u) + (_2283 << 9u)) + (_2689 << 2u)) >> 2u)).x;
                    _2699 = _2698 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2699)
                    {
                        frontier_phi_79_pred = _2688;
                        frontier_phi_79_pred_1 = _2687;
                        frontier_phi_79_pred_2 = _2686;
                        frontier_phi_79_pred_3 = _2685;
                        frontier_phi_79_pred_4 = _2684;
                        frontier_phi_79_pred_5 = _2683;
                    }
                    else
                    {
                        float _2892;
                        float _2893;
                        float _2894;
                        float _2895;
                        float _2896;
                        float _2897;
                        float _3188;
                        float _3189;
                        float _3190;
                        float _3191;
                        float _3192;
                        float _3193;
                        float _2905 = _2683;
                        float _2906 = _2684;
                        float _2907 = _2685;
                        float _2908 = _2686;
                        float _2909 = _2687;
                        float _2910 = _2688;
                        uint _2911 = _2698;
                        uint _2912;
                        vec4 _2937;
                        float _2938;
                        vec4 _2953;
                        vec3 _2965;
                        vec4 _2981;
                        vec4 _2997;
                        float _3044;
                        bool _3045;
                        for (;;)
                        {
                            uint _2922 = ((_2689 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2911));
                            _2912 = (_2911 + 4294967295u) & _2911;
                            uint _2924 = _2922 * 40u;
                            _2937 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2924)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2924 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2924 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2924 + 3u)).x));
                            _2938 = _2937.w;
                            uint _2940 = (_2922 * 40u) + 4u;
                            _2953 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2940)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2940 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2940 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2940 + 3u)).x));
                            uint _2955 = (_2922 * 40u) + 8u;
                            _2965 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2955)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2955 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2955 + 2u)).x));
                            uint _2968 = (_2922 * 40u) + 16u;
                            _2981 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2968)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2968 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2968 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2968 + 3u)).x));
                            uint _2984 = (_2922 * 40u) + 20u;
                            _2997 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2984)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2984 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2984 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2984 + 3u)).x));
                            uint _3000 = (_2922 * 40u) + 24u;
                            vec4 _3013 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3000)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3000 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3000 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3000 + 3u)).x));
                            uint _3019 = (_2922 * 40u) + 28u;
                            vec4 _3032 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3019)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3019 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3019 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3019 + 3u)).x));
                            _3044 = fma(_2259, _3032.z, fma(_2258, _3032.y, _3032.x * _2257)) + _3032.w;
                            _3045 = !((fma(_2259, _3013.z, fma(_2258, _3013.y, _3013.x * _2257)) + _3013.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3045)
                            {
                                float _3072 = _2937.x - _2257;
                                float _3073 = _2937.y - _2258;
                                float _3074 = _2937.z - _2259;
                                float _3075 = dot(vec3(_3072, _3073, _3074), vec3(_3072, _3073, _3074));
                                float _3078 = inversesqrt(_3075);
                                float _3079 = _3078 * _3072;
                                float _3080 = _3078 * _3073;
                                float _3081 = _3078 * _3074;
                                float _3085 = 1.0 - (_3075 / (_2938 * _2938));
                                float _4181 = isnan(0.0) ? _3085 : (isnan(_3085) ? 0.0 : max(_3085, 0.0));
                                float _3086 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
                                float _3090 = sqrt(_3075) * _2953.w;
                                float _3092 = 1.39999997615814208984375 / (_3090 + 1.39999997615814208984375);
                                float _3093 = _3092 * _3092;
                                float _3096 = ((1.0 - _3093) * dot(vec3(_3079, _3080, _3081), vec3(_500, _503, _506))) + _3093;
                                float _3099 = _3090 * _3090;
                                float _3103 = (fma(_2259, _2981.z, fma(_2258, _2981.y, _2981.x * _2257)) + _2981.w) / _3044;
                                float _3104 = (fma(_2259, _2997.z, fma(_2258, _2997.y, _2997.x * _2257)) + _2997.w) / _3044;
                                float _3108 = 1.0 - dot(vec2(_3103, _3104), vec2(_3103, _3104));
                                float _4197 = isnan(0.0) ? _3108 : (isnan(_3108) ? 0.0 : max(_3108, 0.0));
                                float _3109 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
                                float _3110 = _3109 * (((isnan(0.0) ? _3096 : (isnan(_3096) ? 0.0 : max(_3096, 0.0))) * _3086) / ((_3099 * 0.699999988079071044921875) + 1.0));
                                float _3122 = exp2(log2(1.0 / ((_3099 * 3.5) + 5.0)) * 0.25);
                                float _3123 = 1.0 - _560;
                                float _3130 = sqrt(1.0 - ((1.0 - (_3123 * _3123)) * (1.0 - (_3122 * _3122))));
                                float _3131 = _3130 * _3130;
                                float _3132 = _3131 * _3131;
                                float _3133 = _3079 - _2549;
                                float _3134 = _3080 - _2550;
                                float _3135 = _3081 - _2551;
                                float _3139 = inversesqrt(dot(vec3(_3133, _3134, _3135), vec3(_3133, _3134, _3135)));
                                float _3143 = dot(vec3(_500, _503, _506), vec3((-0.0) - _2549, (-0.0) - _2550, (-0.0) - _2551));
                                float _4208 = isnan(0.0) ? _3143 : (isnan(_3143) ? 0.0 : max(_3143, 0.0));
                                float _3146 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
                                float _3147 = dot(vec3(_500, _503, _506), vec3(_3139 * _3133, _3139 * _3134, _3139 * _3135));
                                float _4219 = isnan(0.0) ? _3147 : (isnan(_3147) ? 0.0 : max(_3147, 0.0));
                                float _3150 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
                                float _3154 = ((_3150 * _3150) * (_3132 + (-1.0))) + 1.0;
                                float _3155 = _3092 * _3131;
                                float _3156 = _3155 * _3155;
                                float _3162 = ((1.0 - _3156) * dot(vec3(_500, _503, _506), vec3(_3079, _3080, _3081))) + _3156;
                                float _4230 = isnan(0.0) ? _3162 : (isnan(_3162) ? 0.0 : max(_3162, 0.0));
                                float _3163 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
                                float _3164 = 1.0 - _3131;
                                float _3174 = (0.5 / (((_3163 * ((_3146 * _3164) + _3131)) + 9.9999999392252902907785028219223e-09) + (((_3163 * _3164) + _3131) * _3146))) * _3163;
                                float _4241 = isnan(0.0) ? _3174 : (isnan(_3174) ? 0.0 : max(_3174, 0.0));
                                float _3184 = (_3109 * _3086) * (((_3132 * 3.1415927410125732421875) * (isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0)))) / ((_3154 * _3154) * ((_3099 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3110 * _2953.z;
                                frontier_phi_85_pred_1 = _3110 * _2953.y;
                                frontier_phi_85_pred_2 = _3110 * _2953.x;
                                frontier_phi_85_pred_3 = _3184 * _2965.z;
                                frontier_phi_85_pred_4 = _3184 * _2965.y;
                                frontier_phi_85_pred_5 = _3184 * _2965.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3193 = frontier_phi_85_pred;
                            _3192 = frontier_phi_85_pred_1;
                            _3191 = frontier_phi_85_pred_2;
                            _3190 = frontier_phi_85_pred_3;
                            _3189 = frontier_phi_85_pred_4;
                            _3188 = frontier_phi_85_pred_5;
                            _2895 = _3191 + _2908;
                            _2896 = _3192 + _2909;
                            _2897 = _3193 + _2910;
                            _2892 = _3188 + _2905;
                            _2893 = _3189 + _2906;
                            _2894 = _3190 + _2907;
                            if (_2912 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2905 = _2892;
                                _2906 = _2893;
                                _2907 = _2894;
                                _2908 = _2895;
                                _2909 = _2896;
                                _2910 = _2897;
                                _2911 = _2912;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2897;
                        frontier_phi_79_pred_1 = _2896;
                        frontier_phi_79_pred_2 = _2895;
                        frontier_phi_79_pred_3 = _2894;
                        frontier_phi_79_pred_4 = _2893;
                        frontier_phi_79_pred_5 = _2892;
                    }
                    _2534 = frontier_phi_79_pred;
                    _2532 = frontier_phi_79_pred_1;
                    _2530 = frontier_phi_79_pred_2;
                    _2528 = frontier_phi_79_pred_3;
                    _2526 = frontier_phi_79_pred_4;
                    _2524 = frontier_phi_79_pred_5;
                    uint _2690 = _2689 + 1u;
                    if (_2690 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2683 = _2524;
                        _2684 = _2526;
                        _2685 = _2528;
                        _2686 = _2530;
                        _2687 = _2532;
                        _2688 = _2534;
                        _2689 = _2690;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2530;
                frontier_phi_60_61_ladder_1 = _2534;
                frontier_phi_60_61_ladder_2 = _2532;
                frontier_phi_60_61_ladder_3 = _2528;
                frontier_phi_60_61_ladder_4 = _2526;
                frontier_phi_60_61_ladder_5 = _2524;
            }
            else
            {
                frontier_phi_60_61_ladder = _2409;
                frontier_phi_60_61_ladder_1 = _2413;
                frontier_phi_60_61_ladder_2 = _2411;
                frontier_phi_60_61_ladder_3 = _2407;
                frontier_phi_60_61_ladder_4 = _2405;
                frontier_phi_60_61_ladder_5 = _2403;
            }
            _2523 = frontier_phi_60_61_ladder_5;
            _2525 = frontier_phi_60_61_ladder_4;
            _2527 = frontier_phi_60_61_ladder_3;
            _2529 = frontier_phi_60_61_ladder;
            _2531 = frontier_phi_60_61_ladder_2;
            _2533 = frontier_phi_60_61_ladder_1;
        }
        float _2538 = isnan(1.0) ? _544 : (isnan(_544) ? 1.0 : min(_544, 1.0));
        _2315 = (_2538 * _2529) + _1768;
        _2317 = (_2538 * _2531) + _1770;
        _2319 = (_2538 * _2533) + _1772;
        _2321 = ((_2523 * 0.039999999105930328369140625) * _2538) + _2101;
        _2323 = ((_2525 * 0.039999999105930328369140625) * _2538) + _2103;
        _2325 = ((_2527 * 0.039999999105930328369140625) * _2538) + _2105;
    }
    else
    {
        _2315 = _1768;
        _2317 = _1770;
        _2319 = _1772;
        _2321 = _2101;
        _2323 = _2103;
        _2325 = _2105;
    }
    float _4257 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _4268 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _4279 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _2342 = ((isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0))) * (_2315 + ((isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0))) * _544))) + ((_2321 + ((isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0))) * _1383)) * cbPerFrame._m0[3u].x);
    float _2343 = ((isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0))) * (_2317 + ((isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0))) * _544))) + ((_2323 + ((isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0))) * _1383)) * cbPerFrame._m0[3u].x);
    float _2344 = ((isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0))) * (_2319 + ((isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0))) * _544))) + ((_2325 + ((isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0))) * _1383)) * cbPerFrame._m0[3u].x);
    uint _2345 = _519 + 6u;
    float _2353 = _479 / cbSceneParam._m0[86u].x;
    float _2354 = _480 / cbSceneParam._m0[86u].y;
    vec4 _2368 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2353, _2354, (log2((isnan(cbSceneParam._m0[77u].w) ? _399 : (isnan(_399) ? cbSceneParam._m0[77u].w : min(_399, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2370 = _2368.x;
    float _2371 = _2368.y;
    float _2372 = _2368.z;
    float _2373 = _2368.w;
    float _2465;
    float _2467;
    float _2469;
    float _2471;
    if (_399 > cbSceneParam._m0[78u].w)
    {
        float _2428 = isnan(_399) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _399 : min(cbSceneParam._m0[80u].w, _399));
        float _2429 = _2428 / _399;
        float _2440 = _2429 * _451;
        float _2441 = _452 * _2429;
        float _2442 = (-0.0) - _2441;
        float _2443 = _2429 * _453;
        float _2445 = (cbSceneParam._m0[77u].w * _2442) / _2428;
        float _2446 = _2445 + cbSceneParam._m0[79u].w;
        float _2447 = cbSceneParam._m0[79u].w - _2441;
        float _2453 = sqrt(((_2440 * _2440) + (_2441 * _2441)) + (_2443 * _2443));
        float _2456 = (1.0 - (cbSceneParam._m0[77u].w / _2428)) * _2453;
        float _2461 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2463 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2640;
        if (abs((_2442 - _2445) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2640 = ((((_2446 > 0.0) ? exp2(_2461 * _2446) : (2.0 - exp2(_2463 * _2446))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2456;
        }
        else
        {
            float _2584 = 1.0 / cbSceneParam._m0[80u].x;
            float _2585 = isnan(_2447) ? _2446 : (isnan(_2446) ? _2447 : max(_2446, _2447));
            float _2586 = isnan(_2447) ? _2446 : (isnan(_2446) ? _2447 : min(_2446, _2447));
            float _2595 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : min(_2585, 0.0));
            float _2596 = isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : min(_2586, 0.0));
            _2640 = ((abs(_2453 / _2442) * cbSceneParam._m0[80u].y) * ((((_2595 - _2596) * 2.0) - ((exp2(_2461 * (isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0)))) - exp2(_2461 * (isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0))))) * _2584)) - ((exp2(_2463 * _2595) - exp2(_2463 * _2596)) * _2584))) + (_2456 * cbSceneParam._m0[80u].z);
        }
        vec4 _2642 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2353, _2354, 1.0), 0.0);
        float _2651 = exp2((_2640 * (-1.44269502162933349609375)) * (1.0 - _2642.w));
        float _2652 = log2(_2651);
        float _2668 = log2(_2373);
        _2465 = (exp2(_2668 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2652 * cbSceneParam._m0[78u].x)) * _2642.x) / cbSceneParam._m0[78u].x)) + _2370;
        _2467 = (exp2(_2668 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2652 * cbSceneParam._m0[78u].y)) * _2642.y) / cbSceneParam._m0[78u].y)) + _2371;
        _2469 = (exp2(_2668 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2652 * cbSceneParam._m0[78u].z)) * _2642.z) / cbSceneParam._m0[78u].z)) + _2372;
        _2471 = _2651 * _2373;
    }
    else
    {
        _2465 = _2370;
        _2467 = _2371;
        _2469 = _2372;
        _2471 = _2373;
    }
    bool _2678;
    vec4 _2481;
    vec4 _2503;
    float _2505;
    float _2509;
    float _2510;
    float _2511;
    float _2512;
    bool _2522;
    for (;;)
    {
        _2481 = cbMatDynParam._m0[0u];
        float _2483 = roundEven(_2481.y);
        bool _2484 = _2483 == 3.0;
        float _2485 = log2(_2471);
        float _2492 = exp2(_2485 * cbSceneParam._m0[78u].x) * _2342;
        float _2493 = exp2(_2485 * cbSceneParam._m0[78u].y) * _2343;
        float _2494 = exp2(_2485 * cbSceneParam._m0[78u].z) * _2344;
        float _2501 = _467 + (-0.5);
        _2503 = cbMtdParam._m0[1u];
        _2505 = _2503.y * _2501;
        float _2508 = (_2483 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2509 = _2508 * (_2484 ? _2492 : (_2492 + (cbSceneParam._m0[72u].w * _2465)));
        _2510 = _2508 * (_2484 ? _2493 : (_2493 + (cbSceneParam._m0[72u].w * _2467)));
        _2511 = _2508 * (_2484 ? _2494 : (_2494 + (cbSceneParam._m0[72u].w * _2469)));
        _2512 = _2501 * 0.999000012874603271484375;
        _2522 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2522)
        {
            if ((cbInstanceData._m0[_519 + 7u].x + _2512) < 0.5)
            {
                _2678 = true;
                break;
            }
        }
        uint _2619 = _520 + uint(_2481.w);
        if ((cbInstanceData._m0[_2619].w < 1.0) && ((cbInstanceData._m0[_2619].w + _2512) < 0.5))
        {
            _2678 = true;
            break;
        }
        if ((_2505 + _248) < _2503.x)
        {
            _2678 = true;
            break;
        }
        _2678 = false;
        break;
    }
    float _2883;
    if (_2678)
    {
        discard_state = true;
        _2883 = 0.0;
    }
    else
    {
        _2883 = cbInstanceData._m0[_2345].w;
    }
    SV_Target.x = _2509;
    SV_Target.y = _2510;
    SV_Target.z = _2511;
    SV_Target.w = _2883;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2345].w;
    discard_exit();
}


