#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _943;
float _3311;
float _3312;
float _3313;
float _3314;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _190 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _191 = _190 * _182;
    float _192 = _190 * _183;
    float _193 = _190 * _184;
    float _197 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _198 = _197 * NORMAL.x;
    float _199 = _197 * NORMAL.y;
    float _200 = _197 * NORMAL.z;
    float _204 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _205 = _204 * TANGENT.x;
    float _206 = _204 * TANGENT.y;
    float _207 = _204 * TANGENT.z;
    float _212;
    float _213;
    float _214;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _212 = (-0.0) - _198;
        _213 = (-0.0) - _199;
        _214 = (-0.0) - _200;
    }
    else
    {
        _212 = _198;
        _213 = _199;
        _214 = _200;
    }
    vec4 _240 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _246 = _240.w;
    float _247 = _240.x * cbMtdParam._m0[9u].x;
    float _248 = _240.y * cbMtdParam._m0[9u].y;
    float _249 = _240.z * cbMtdParam._m0[9u].z;
    vec4 _267 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _271 = _267.z;
    float _275 = (_267.x * 2.0) + (-1.0);
    float _277 = (_267.y * 2.0) + (-1.0);
    float _278 = dot(vec2(_275, _277), vec2(_275, _277));
    float _3323 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _284 = sqrt(1.0 - (isnan(1.0) ? _3323 : (isnan(_3323) ? 1.0 : min(_3323, 1.0))));
    float _287 = fma(_284, _212, fma(_277, _205, _275 * _191));
    float _290 = fma(_284, _213, fma(_277, _206, _275 * _192));
    float _293 = fma(_284, _214, fma(_277, _207, _275 * _193));
    float _297 = inversesqrt(dot(vec3(_287, _290, _293), vec3(_287, _290, _293)));
    float _308 = cbMtdParam._m0[12u].x + dot(vec4(_297 * _287, _297 * _290, _297 * _293, 0.0), vec4(cbMtdParam._m0[13u].xyz, 0.0));
    float _3334 = isnan(0.0) ? _308 : (isnan(_308) ? 0.0 : max(_308, 0.0));
    float _309 = isnan(1.0) ? _3334 : (isnan(_3334) ? 1.0 : min(_3334, 1.0));
    float _316 = (_309 * (cbMtdParam._m0[10u].x - _247)) + _247;
    float _317 = (_309 * (cbMtdParam._m0[10u].y - _248)) + _248;
    float _318 = (_309 * (cbMtdParam._m0[10u].z - _249)) + _249;
    vec4 _330 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _337 = (_330.x * 2.0) + (-1.0);
    float _338 = (_330.y * 2.0) + (-1.0);
    float _339 = dot(vec2(_337, _338), vec2(_337, _338));
    float _3345 = isnan(0.0) ? _339 : (isnan(_339) ? 0.0 : max(_339, 0.0));
    float _347 = ((_330.z - _271) * _309) + _271;
    float _359 = (((_337 - _275) + (cbMtdParam._m0[12u].w * _275)) * _309) + _275;
    float _360 = (((_338 - _277) + (cbMtdParam._m0[12u].w * _277)) * _309) + _277;
    float _361 = ((sqrt(1.0 - (isnan(1.0) ? _3345 : (isnan(_3345) ? 1.0 : min(_3345, 1.0)))) - _284) * _309) + _284;
    float _364 = fma(_361, _212, fma(_360, _205, _359 * _191));
    float _367 = fma(_361, _213, fma(_360, _206, _359 * _192));
    float _370 = fma(_361, _214, fma(_360, _207, _359 * _193));
    float _374 = inversesqrt(dot(vec3(_364, _367, _370), vec3(_364, _367, _370)));
    float _375 = _374 * _364;
    float _376 = _374 * _367;
    float _377 = _374 * _370;
    float _3356 = isnan(0.0) ? _347 : (isnan(_347) ? 0.0 : max(_347, 0.0));
    float _378 = isnan(1.0) ? _3356 : (isnan(_3356) ? 1.0 : min(_3356, 1.0));
    float _3367 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    float _3378 = isnan(0.0) ? _317 : (isnan(_317) ? 0.0 : max(_317, 0.0));
    float _3389 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    float _397 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _439 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _449 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _439);
    float _450 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _439);
    float _451 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _439);
    float _455 = inversesqrt(dot(vec3(_449, _450, _451), vec3(_449, _450, _451)));
    float _456 = _449 * _455;
    float _457 = _450 * _455;
    float _458 = _451 * _455;
    vec4 _463 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _465 = _463.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _622 = sqrt(((_449 * _449) + (_450 * _450)) + (_451 * _451));
        float _628 = (cbMatDynParam._m0[5u].x * _622) + cbMatDynParam._m0[5u].y;
        float _3400 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
        float _629 = isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0));
        float _633 = (cbMatDynParam._m0[5u].z * _622) + cbMatDynParam._m0[5u].w;
        float _3411 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0))) - _629)) + _629) < ((_465 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _477 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _478 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _498 = fma(_377, cbSceneParam._m0[5u].z, fma(_376, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _375));
    float _501 = fma(_377, cbSceneParam._m0[6u].z, fma(_376, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _375));
    float _504 = fma(_377, cbSceneParam._m0[7u].z, fma(_376, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _375));
    uint _517 = uint(roundEven(NORMAL.w)) * 13u;
    uint _518 = _517 + 9u;
    uint _519 = _518 + uint(cbMatDynParam._m0[0u].w);
    float _525 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3367 : (isnan(_3367) ? 1.0 : min(_3367, 1.0)))) * cbInstanceData._m0[_519].x;
    float _526 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3378 : (isnan(_3378) ? 1.0 : min(_3378, 1.0)))) * cbInstanceData._m0[_519].y;
    float _527 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0)))) * cbInstanceData._m0[_519].z;
    float _3422 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _528 = isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0));
    float _3433 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _529 = isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0));
    float _3444 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _530 = isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0));
    vec4 _539 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _477, cbSceneParam._m0[86u].y * _478));
    float _542 = _539.x * TEXCOORD_3.w;
    float _543 = dot(vec3(_375, _376, _377), vec3(_456, _457, _458));
    float _546 = _543 * 2.0;
    float _550 = (_546 * _375) - _456;
    float _551 = (_546 * _376) - _457;
    float _552 = (_546 * _377) - _458;
    float _556 = abs(dot(vec3(_456, _457, _458), vec3(_375, _376, _377)));
    float _3455 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _558 = sqrt(_378);
    float _571 = exp2((_558 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_558 * 3.0));
    float _603 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _607 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _611 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _942;
    float _944;
    float _945;
    float _946;
    float _947;
    float _948;
    float _949;
    float _950;
    float _951;
    float _952;
    float _953;
    float _954;
    float _955;
    float _956;
    float _957;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _667 = fma(_611, cbModelParam._m0[26u].z, fma(_607, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _603));
        float _671 = fma(_611, cbModelParam._m0[27u].z, fma(_607, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _603));
        float _675 = fma(_611, cbModelParam._m0[28u].z, fma(_607, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _603));
        float _700 = _603 + _375;
        float _701 = _607 + _376;
        float _702 = _611 + _377;
        float _712 = fma(_702, cbModelParam._m0[26u].z, fma(_701, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _700)) - _667;
        float _713 = fma(_702, cbModelParam._m0[27u].z, fma(_701, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _700)) - _671;
        float _714 = fma(_702, cbModelParam._m0[28u].z, fma(_701, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _700)) - _675;
        float _718 = inversesqrt(dot(vec3(_712, _713, _714), vec3(_712, _713, _714)));
        float _731 = ((_718 * _712) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_667 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _732 = ((_718 * _713) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_671 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _733 = ((_718 * _714) / cbModelParam._m0[34u].z) + ((((((_675 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _736 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_731, _732, _733), 0.0);
        vec4 _743 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_731, _732, _733), 0.0);
        vec4 _750 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_731, _732, _733), 0.0);
        vec4 _757 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_731, _732, _733), 0.0);
        float _770 = exp2((_736.w + (-0.5)) * 20.0) * 2.0;
        float _771 = _770 * (_736.x + (-0.5));
        float _772 = _770 * (_736.y + (-0.5));
        float _773 = _770 * (_736.z + (-0.5));
        float _780 = exp2((_743.w + (-0.5)) * 20.0) * 2.0;
        float _781 = _780 * (_743.x + (-0.5));
        float _782 = _780 * (_743.y + (-0.5));
        float _783 = _780 * (_743.z + (-0.5));
        float _790 = exp2((_750.w + (-0.5)) * 20.0) * 2.0;
        float _791 = _790 * (_750.x + (-0.5));
        float _792 = _790 * (_750.y + (-0.5));
        float _793 = _790 * (_750.z + (-0.5));
        float _800 = exp2((_757.w + (-0.5)) * 20.0) * 2.0;
        float _801 = _800 * (_757.x + (-0.5));
        float _802 = _800 * (_757.y + (-0.5));
        float _803 = _800 * (_757.z + (-0.5));
        float _804 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
        float _805 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
        float _806 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
        float _807 = _771 * 0.5;
        float _808 = _781 * 0.5;
        float _809 = _791 * 0.5;
        float _810 = dot(vec3(_807, _808, _809), vec3(_807, _808, _809));
        float _815 = (_810 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_810);
        float _824 = (dot(vec3(_375, _376, _377), vec3(_815 * _807, _815 * _808, _815 * _809)) + 1.0) * 0.5;
        float _3481 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
        float _834 = sqrt(((_808 * _808) + (_807 * _807)) + (_809 * _809)) / (_804 + 9.9999997473787516355514526367188e-06);
        float _3492 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
        float _835 = isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0));
        float _836 = _835 * 2.0;
        float _840 = (1.0 - _835) / (_835 + 1.0);
        float _3503 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
        float _841 = isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0));
        float _850 = ((((1.0 - _841) * (_836 + 2.0)) * exp2(log2(isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0))) * (_836 + 1.0))) + _841) * _804;
        float _851 = _772 * 0.5;
        float _852 = _782 * 0.5;
        float _853 = _792 * 0.5;
        float _854 = dot(vec3(_851, _852, _853), vec3(_851, _852, _853));
        float _859 = (_854 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_854);
        float _867 = (dot(vec3(_375, _376, _377), vec3(_859 * _851, _859 * _852, _859 * _853)) + 1.0) * 0.5;
        float _3514 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
        float _876 = sqrt(((_852 * _852) + (_851 * _851)) + (_853 * _853)) / (_805 + 9.9999997473787516355514526367188e-06);
        float _3525 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
        float _877 = isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0));
        float _878 = _877 * 2.0;
        float _882 = (1.0 - _877) / (_877 + 1.0);
        float _3536 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
        float _883 = isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0));
        float _892 = ((((1.0 - _883) * (_878 + 2.0)) * exp2(log2(isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0))) * (_878 + 1.0))) + _883) * _805;
        float _893 = _773 * 0.5;
        float _894 = _783 * 0.5;
        float _895 = _793 * 0.5;
        float _896 = dot(vec3(_893, _894, _895), vec3(_893, _894, _895));
        float _901 = (_896 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_896);
        float _909 = (dot(vec3(_375, _376, _377), vec3(_901 * _893, _901 * _894, _901 * _895)) + 1.0) * 0.5;
        float _3547 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
        float _918 = sqrt(((_894 * _894) + (_893 * _893)) + (_895 * _895)) / (_806 + 9.9999997473787516355514526367188e-06);
        float _3558 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
        float _919 = isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0));
        float _920 = _919 * 2.0;
        float _924 = (1.0 - _919) / (_919 + 1.0);
        float _3569 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        float _925 = isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0));
        float _934 = ((((1.0 - _925) * (_920 + 2.0)) * exp2(log2(isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0))) * (_920 + 1.0))) + _925) * _806;
        _942 = _773;
        _944 = _772;
        _945 = _771;
        _946 = _783;
        _947 = _782;
        _948 = _781;
        _949 = _793;
        _950 = _792;
        _951 = _791;
        _952 = _806;
        _953 = _805;
        _954 = _804;
        _955 = cbModelParam._m0[36u].z * (isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0)));
        _956 = cbModelParam._m0[36u].z * (isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0)));
        _957 = cbModelParam._m0[36u].z * (isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0)));
    }
    else
    {
        _942 = _943;
        _944 = _943;
        _945 = _943;
        _946 = _943;
        _947 = _943;
        _948 = _943;
        _949 = _943;
        _950 = _943;
        _951 = _943;
        _952 = _943;
        _953 = _943;
        _954 = _943;
        _955 = 0.0;
        _956 = 0.0;
        _957 = 0.0;
    }
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _986 = fma(_611, cbModelParam._m0[30u].z, fma(_607, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _603));
        float _990 = fma(_611, cbModelParam._m0[31u].z, fma(_607, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _603));
        float _994 = fma(_611, cbModelParam._m0[32u].z, fma(_607, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _603));
        float _1017 = _603 + _375;
        float _1018 = _607 + _376;
        float _1019 = _611 + _377;
        float _1029 = fma(_1019, cbModelParam._m0[30u].z, fma(_1018, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1017)) - _986;
        float _1030 = fma(_1019, cbModelParam._m0[31u].z, fma(_1018, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1017)) - _990;
        float _1031 = fma(_1019, cbModelParam._m0[32u].z, fma(_1018, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1017)) - _994;
        float _1035 = inversesqrt(dot(vec3(_1029, _1030, _1031), vec3(_1029, _1030, _1031)));
        float _1048 = ((_1035 * _1029) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_986 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1049 = ((_1035 * _1030) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_990 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1050 = ((_1035 * _1031) / cbModelParam._m0[35u].z) + ((((((_994 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1052 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1048, _1049, _1050), 0.0);
        vec4 _1059 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1048, _1049, _1050), 0.0);
        vec4 _1066 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1048, _1049, _1050), 0.0);
        vec4 _1073 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1048, _1049, _1050), 0.0);
        float _1085 = exp2((_1052.w + (-0.5)) * 20.0) * 2.0;
        float _1086 = _1085 * (_1052.x + (-0.5));
        float _1087 = _1085 * (_1052.y + (-0.5));
        float _1088 = _1085 * (_1052.z + (-0.5));
        float _1095 = exp2((_1059.w + (-0.5)) * 20.0) * 2.0;
        float _1096 = _1095 * (_1059.x + (-0.5));
        float _1097 = _1095 * (_1059.y + (-0.5));
        float _1098 = _1095 * (_1059.z + (-0.5));
        float _1105 = exp2((_1066.w + (-0.5)) * 20.0) * 2.0;
        float _1106 = _1105 * (_1066.x + (-0.5));
        float _1107 = _1105 * (_1066.y + (-0.5));
        float _1108 = _1105 * (_1066.z + (-0.5));
        float _1115 = exp2((_1073.w + (-0.5)) * 20.0) * 2.0;
        float _1116 = _1115 * (_1073.x + (-0.5));
        float _1117 = _1115 * (_1073.y + (-0.5));
        float _1118 = _1115 * (_1073.z + (-0.5));
        float _1119 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1120 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1121 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1122 = _1086 * 0.5;
        float _1123 = _1096 * 0.5;
        float _1124 = _1106 * 0.5;
        float _1125 = dot(vec3(_1122, _1123, _1124), vec3(_1122, _1123, _1124));
        float _1130 = (_1125 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1125);
        float _1138 = (dot(vec3(_375, _376, _377), vec3(_1130 * _1122, _1130 * _1123, _1130 * _1124)) + 1.0) * 0.5;
        float _3610 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1147 = sqrt(((_1123 * _1123) + (_1122 * _1122)) + (_1124 * _1124)) / (_1119 + 9.9999997473787516355514526367188e-06);
        float _3621 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1148 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
        float _1149 = _1148 * 2.0;
        float _1153 = (1.0 - _1148) / (_1148 + 1.0);
        float _3632 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1154 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
        float _1163 = ((((1.0 - _1154) * (_1149 + 2.0)) * exp2(log2(isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0))) * (_1149 + 1.0))) + _1154) * _1119;
        float _1164 = _1087 * 0.5;
        float _1165 = _1097 * 0.5;
        float _1166 = _1107 * 0.5;
        float _1167 = dot(vec3(_1164, _1165, _1166), vec3(_1164, _1165, _1166));
        float _1172 = (_1167 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1167);
        float _1180 = (dot(vec3(_375, _376, _377), vec3(_1172 * _1164, _1172 * _1165, _1172 * _1166)) + 1.0) * 0.5;
        float _3643 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1189 = sqrt(((_1165 * _1165) + (_1164 * _1164)) + (_1166 * _1166)) / (_1120 + 9.9999997473787516355514526367188e-06);
        float _3654 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1190 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
        float _1191 = _1190 * 2.0;
        float _1195 = (1.0 - _1190) / (_1190 + 1.0);
        float _3665 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1196 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
        float _1205 = ((((1.0 - _1196) * (_1191 + 2.0)) * exp2(log2(isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0))) * (_1191 + 1.0))) + _1196) * _1120;
        float _1206 = _1088 * 0.5;
        float _1207 = _1098 * 0.5;
        float _1208 = _1108 * 0.5;
        float _1209 = dot(vec3(_1206, _1207, _1208), vec3(_1206, _1207, _1208));
        float _1214 = (_1209 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1209);
        float _1222 = (dot(vec3(_375, _376, _377), vec3(_1214 * _1206, _1214 * _1207, _1214 * _1208)) + 1.0) * 0.5;
        float _3676 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1231 = sqrt(((_1207 * _1207) + (_1206 * _1206)) + (_1208 * _1208)) / (_1121 + 9.9999997473787516355514526367188e-06);
        float _3687 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1232 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
        float _1233 = _1232 * 2.0;
        float _1237 = (1.0 - _1232) / (_1232 + 1.0);
        float _3698 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1238 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
        float _1247 = ((((1.0 - _1238) * (_1233 + 2.0)) * exp2(log2(isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0))) * (_1233 + 1.0))) + _1238) * _1121;
        _1255 = _1088;
        _1256 = _1087;
        _1257 = _1086;
        _1258 = _1098;
        _1259 = _1097;
        _1260 = _1096;
        _1261 = _1108;
        _1262 = _1107;
        _1263 = _1106;
        _1264 = _1121;
        _1265 = _1120;
        _1266 = _1119;
        _1267 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0)));
        _1268 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0)));
        _1269 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0)));
    }
    else
    {
        _1255 = _943;
        _1256 = _943;
        _1257 = _943;
        _1258 = _943;
        _1259 = _943;
        _1260 = _943;
        _1261 = _943;
        _1262 = _943;
        _1263 = _943;
        _1264 = _943;
        _1265 = _943;
        _1266 = _943;
        _1267 = 0.0;
        _1268 = 0.0;
        _1269 = 0.0;
    }
    float _1279 = (cbModelParam._m0[1u].x * (_1267 - _955)) + _955;
    float _1280 = (cbModelParam._m0[1u].x * (_1268 - _956)) + _956;
    float _1281 = (cbModelParam._m0[1u].x * (_1269 - _957)) + _957;
    float _1302 = fma(_1281, cbSceneParam._m0[89u].z, fma(_1280, cbSceneParam._m0[89u].y, _1279 * cbSceneParam._m0[89u].x));
    float _1305 = fma(_1281, cbSceneParam._m0[90u].z, fma(_1280, cbSceneParam._m0[90u].y, _1279 * cbSceneParam._m0[90u].x));
    float _1308 = fma(_1281, cbSceneParam._m0[91u].z, fma(_1280, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1279));
    float _1323 = _550 * 0.5;
    float _1324 = _551 * 0.5;
    float _1325 = _552 * 0.5;
    float _1326 = dot(vec4(_1323, _1324, _1325, 1.0), vec4(_1257, _1260, _1263, _1266));
    float _1329 = dot(vec4(_1323, _1324, _1325, 1.0), vec4(_1256, _1259, _1262, _1265));
    float _1332 = dot(vec4(_1323, _1324, _1325, 1.0), vec4(_1255, _1258, _1261, _1264));
    float _1366;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1339 = dot(vec4(_1323, _1324, _1325, 1.0), vec4(_942, _946, _949, _952));
        float _1343 = dot(vec4(_1323, _1324, _1325, 1.0), vec4(_944, _947, _950, _953));
        float _1347 = dot(vec4(_1323, _1324, _1325, 1.0), vec4(_945, _948, _951, _954));
        float _1354 = dot(vec4(cbModelParam._m0[39u]), vec4(_1323, _1324, _1325, 1.0));
        _1366 = dot(vec3(isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0)), isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0)), isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1354) ? 0.0 : (isnan(0.0) ? _1354 : max(0.0, _1354))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1366 = 1.0;
    }
    float _1377;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1368 = dot(vec4(cbModelParam._m0[40u]), vec4(_1323, _1324, _1325, 1.0));
        _1377 = dot(vec3(isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0)), isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0)), isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1368) ? 0.0 : (isnan(0.0) ? _1368 : max(0.0, _1368))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1377 = 1.0;
    }
    float _1381 = (_1377 * cbModelParam._m0[1u].x) + (_1366 * (1.0 - cbModelParam._m0[1u].x));
    float _1391 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _378);
    float _1392 = isnan(_1391) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1391 : min(cbModelParam._m0[25u].z, _1391));
    float _1473;
    float _1475;
    float _1477;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1440 = fma(_611, cbModelParam._m0[13u].z, fma(_607, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _603)) + cbModelParam._m0[13u].w;
        float _1444 = fma(_611, cbModelParam._m0[14u].z, fma(_607, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _603)) + cbModelParam._m0[14u].w;
        float _1448 = fma(_611, cbModelParam._m0[15u].z, fma(_607, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _603)) + cbModelParam._m0[15u].w;
        float _1451 = fma(_552, cbModelParam._m0[13u].z, fma(_551, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _550));
        float _1454 = fma(_552, cbModelParam._m0[14u].z, fma(_551, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _550));
        float _1457 = fma(_552, cbModelParam._m0[15u].z, fma(_551, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _550));
        float _1485;
        if (_1451 > 0.0)
        {
            _1485 = abs((1.0 - _1440) / _1451);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1451 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1440 + 1.0) / _1451);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1485 = frontier_phi_19_17_ladder;
        }
        float _1690;
        if (_1454 > 0.0)
        {
            _1690 = abs((1.0 - _1444) / _1454);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1454 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1444 + 1.0) / _1454);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1690 = frontier_phi_28_24_ladder;
        }
        float _1933;
        if (_1457 > 0.0)
        {
            _1933 = abs((1.0 - _1448) / _1457);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1457 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1448 + 1.0) / _1457);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1933 = frontier_phi_40_35_ladder;
        }
        float _1935 = isnan(_1690) ? _1485 : (isnan(_1485) ? _1690 : min(_1485, _1690));
        float _1936 = isnan(_1933) ? _1935 : (isnan(_1935) ? _1933 : min(_1935, _1933));
        float _1940 = (_1936 * _1451) + _1440;
        float _1941 = (_1936 * _1454) + _1444;
        float _1942 = (_1936 * _1457) + _1448;
        float _1943 = _1936 * 9.9999997473787516355514526367188e-05;
        float _1945 = (-1.0) - _1943;
        float _1947 = _1943 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1942 > _1947) || ((_1942 < _1945) || ((_1941 > _1947) || ((_1941 < _1945) || ((_1940 < _1945) || (_1940 > _1947))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2066 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1942, cbModelParam._m0[9u].z, fma(_1941, cbModelParam._m0[9u].y, _1940 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1942, cbModelParam._m0[10u].z, fma(_1941, cbModelParam._m0[10u].y, _1940 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1942, cbModelParam._m0[11u].z, fma(_1941, cbModelParam._m0[11u].y, _1940 * cbModelParam._m0[11u].x))), _1392);
            frontier_phi_18_40_ladder = _2066.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2066.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2066.x * cbModelParam._m0[1u].y;
        }
        _1473 = frontier_phi_18_40_ladder_2;
        _1475 = frontier_phi_18_40_ladder_1;
        _1477 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1461 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_550, _551, _552), _1392);
        _1473 = _1461.x * cbModelParam._m0[1u].y;
        _1475 = _1461.y * cbModelParam._m0[1u].y;
        _1477 = _1461.z * cbModelParam._m0[1u].y;
    }
    float _1481 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _378);
    float _1482 = isnan(_1481) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1481 : min(cbModelParam._m0[25u].w, _1481));
    float _1575;
    float _1577;
    float _1579;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1539 = fma(_611, cbModelParam._m0[21u].z, fma(_607, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _603)) + cbModelParam._m0[21u].w;
        float _1543 = fma(_611, cbModelParam._m0[22u].z, fma(_607, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _603)) + cbModelParam._m0[22u].w;
        float _1547 = fma(_611, cbModelParam._m0[23u].z, fma(_607, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _603)) + cbModelParam._m0[23u].w;
        float _1550 = fma(_552, cbModelParam._m0[21u].z, fma(_551, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _550));
        float _1553 = fma(_552, cbModelParam._m0[22u].z, fma(_551, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _550));
        float _1556 = fma(_552, cbModelParam._m0[23u].z, fma(_551, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _550));
        float _1695;
        if (_1550 > 0.0)
        {
            _1695 = abs((1.0 - _1539) / _1550);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1550 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1539 + 1.0) / _1550);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1695 = frontier_phi_30_26_ladder;
        }
        float _1960;
        if (_1553 > 0.0)
        {
            _1960 = abs((1.0 - _1543) / _1553);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1553 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1543 + 1.0) / _1553);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1960 = frontier_phi_42_37_ladder;
        }
        float _2165;
        if (_1556 > 0.0)
        {
            _2165 = abs((1.0 - _1547) / _1556);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1556 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1547 + 1.0) / _1556);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2165 = frontier_phi_51_48_ladder;
        }
        float _2167 = isnan(_1960) ? _1695 : (isnan(_1695) ? _1960 : min(_1695, _1960));
        float _2168 = isnan(_2165) ? _2167 : (isnan(_2167) ? _2165 : min(_2167, _2165));
        float _2172 = (_2168 * _1550) + _1539;
        float _2173 = (_2168 * _1553) + _1543;
        float _2174 = (_2168 * _1556) + _1547;
        float _2175 = _2168 * 9.9999997473787516355514526367188e-05;
        float _2176 = (-1.0) - _2175;
        float _2178 = _2175 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2174 > _2178) || ((_2174 < _2176) || ((_2173 > _2178) || ((_2173 < _2176) || ((_2172 < _2176) || (_2172 > _2178))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2372 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2174, cbModelParam._m0[17u].z, fma(_2173, cbModelParam._m0[17u].y, _2172 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2174, cbModelParam._m0[18u].z, fma(_2173, cbModelParam._m0[18u].y, _2172 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2174, cbModelParam._m0[19u].z, fma(_2173, cbModelParam._m0[19u].y, _2172 * cbModelParam._m0[19u].x))), _1482);
            frontier_phi_27_51_ladder = _2372.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2372.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2372.x * cbModelParam._m0[1u].z;
        }
        _1575 = frontier_phi_27_51_ladder_2;
        _1577 = frontier_phi_27_51_ladder_1;
        _1579 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1559 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_550, _551, _552), _1482);
        _1575 = _1559.x * cbModelParam._m0[1u].z;
        _1577 = _1559.y * cbModelParam._m0[1u].z;
        _1579 = _1559.z * cbModelParam._m0[1u].z;
    }
    float _1591 = ((((1.0 - _571) * ((_558 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_571 * _558)) * _542;
    float _1592 = _1591 * ((cbModelParam._m0[1u].w * (_1575 - _1473)) + _1473);
    float _1593 = _1591 * ((cbModelParam._m0[1u].w * (_1577 - _1475)) + _1475);
    float _1594 = _1591 * ((cbModelParam._m0[1u].w * (_1579 - _1477)) + _1477);
    float _1597 = fma(_1594, cbSceneParam._m0[89u].z, fma(_1593, cbSceneParam._m0[89u].y, _1592 * cbSceneParam._m0[89u].x));
    float _1600 = fma(_1594, cbSceneParam._m0[90u].z, fma(_1593, cbSceneParam._m0[90u].y, _1592 * cbSceneParam._m0[90u].x));
    float _1603 = fma(_1594, cbSceneParam._m0[91u].z, fma(_1593, cbSceneParam._m0[91u].y, _1592 * cbSceneParam._m0[91u].x));
    uvec4 _1613 = floatBitsToUint(cbInstanceData._m0[_517 + 5u]);
    uint _1615 = _1613.x * 14u;
    uint _1616 = _1615 + 13u;
    float _1623 = _542 + (-1.0);
    float _1628 = (cbLight._m0[_1616].x * _1623) + 1.0;
    float _1629 = (cbLight._m0[_1616].y * _1623) + 1.0;
    float _1630 = (cbLight._m0[_1616].z * _1623) + 1.0;
    float _1631 = (cbLight._m0[_1616].w * _1623) + 1.0;
    uint _1632 = _1615 + 5u;
    float _1638 = isnan(1.0) ? _1629 : (isnan(_1629) ? 1.0 : min(_1629, 1.0));
    uint _1642 = _1615 + 4u;
    float _1649 = isnan(1.0) ? _1628 : (isnan(_1628) ? 1.0 : min(_1628, 1.0));
    uint _1653 = _1615 | 1u;
    float _1664 = dot(vec3(cbLight._m0[_1615].xyz), vec3(_375, _376, _377));
    float _1667 = dot(vec3(cbLight._m0[_1653].xyz), vec3(_375, _376, _377));
    float _3834 = isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0));
    float _3845 = isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0));
    float _1672 = (isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0))) * 0.3183098733425140380859375;
    float _1674 = (isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0))) * 0.3183098733425140380859375;
    float _1681 = ((cbLight._m0[_1632].x * _1638) * _1674) + ((cbLight._m0[_1642].x * _1649) * _1672);
    float _1682 = ((_1638 * cbLight._m0[_1632].y) * _1674) + ((_1649 * cbLight._m0[_1642].y) * _1672);
    float _1683 = ((_1638 * cbLight._m0[_1632].z) * _1674) + ((_1649 * cbLight._m0[_1642].z) * _1672);
    uvec4 _1687 = floatBitsToUint(cbLight._m0[_1615 + 12u]);
    bool _1689 = _1687.x == 0u;
    float _1700;
    float _1702;
    float _1704;
    if (_1689)
    {
        _1700 = _1681;
        _1702 = _1682;
        _1704 = _1683;
    }
    else
    {
        uint _1708 = _1615 + 6u;
        float _1724 = (dot(vec3(cbLight._m0[_1615 + 2u].xyz), vec3(_375, _376, _377)) * 0.5) + 0.5;
        float _1725 = _1724 * _1724;
        float _3856 = isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0));
        float _1726 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
        float _1727 = isnan(1.0) ? _1630 : (isnan(_1630) ? 1.0 : min(_1630, 1.0));
        _1700 = (((cbLight._m0[_1708].x * 0.3183098733425140380859375) * _1726) * _1727) + _1681;
        _1702 = (((cbLight._m0[_1708].y * 0.3183098733425140380859375) * _1726) * _1727) + _1682;
        _1704 = (((cbLight._m0[_1708].z * 0.3183098733425140380859375) * _1726) * _1727) + _1683;
    }
    bool _1707 = _1687.y == 0u;
    float _1745;
    float _1747;
    float _1749;
    if (_1707)
    {
        _1745 = _1700;
        _1747 = _1702;
        _1749 = _1704;
    }
    else
    {
        uint _1904 = _1615 + 7u;
        float _1920 = (dot(vec3(cbLight._m0[_1615 + 3u].xyz), vec3(_375, _376, _377)) * 0.5) + 0.5;
        float _1921 = _1920 * _1920;
        float _3872 = isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0));
        float _1922 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
        float _1923 = isnan(1.0) ? _1631 : (isnan(_1631) ? 1.0 : min(_1631, 1.0));
        _1745 = (((cbLight._m0[_1904].x * 0.3183098733425140380859375) * _1922) * _1923) + _1700;
        _1747 = (((cbLight._m0[_1904].y * 0.3183098733425140380859375) * _1922) * _1923) + _1702;
        _1749 = (((cbLight._m0[_1904].z * 0.3183098733425140380859375) * _1922) * _1923) + _1704;
    }
    uint _1752 = _1615 + 8u;
    float _1765 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1615].w)) * _378) * 0.949999988079071044921875);
    float _1766 = _1765 * _1765;
    float _1767 = cbLight._m0[_1615].x + _456;
    float _1768 = cbLight._m0[_1615].y + _457;
    float _1769 = cbLight._m0[_1615].z + _458;
    float _1773 = inversesqrt(dot(vec3(_1767, _1768, _1769), vec3(_1767, _1768, _1769)));
    float _1774 = _1773 * _1767;
    float _1775 = _1773 * _1768;
    float _1776 = _1773 * _1769;
    float _1777 = dot(vec3(_375, _376, _377), vec3(cbLight._m0[_1615].xyz));
    float _3888 = isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0));
    float _1780 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
    float _3899 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _1781 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
    float _1782 = dot(vec3(_375, _376, _377), vec3(_1774, _1775, _1776));
    float _3910 = isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0));
    float _1785 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
    float _1786 = dot(vec3(cbLight._m0[_1615].xyz), vec3(_1774, _1775, _1776));
    float _3921 = isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0));
    float _1790 = _1766 * _1766;
    float _1794 = ((_1785 * _1785) * (_1790 + (-1.0))) + 1.0;
    float _1805 = (exp2(log2(1.0 - (isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1806 = 1.0 - _1766;
    float _1817 = (0.5 / (((_1781 * ((_1780 * _1806) + _1766)) + 9.9999999392252902907785028219223e-09) + (((_1781 * _1806) + _1766) * _1780))) * _1780;
    float _3932 = isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0));
    float _1819 = (isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0))) * (_1790 / ((_1794 * _1794) * 3.141590118408203125));
    uint _1830 = _1615 + 9u;
    float _1841 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1653].w)) * _378) * 0.949999988079071044921875);
    float _1842 = _1841 * _1841;
    float _1843 = cbLight._m0[_1653].x + _456;
    float _1844 = cbLight._m0[_1653].y + _457;
    float _1845 = cbLight._m0[_1653].z + _458;
    float _1849 = inversesqrt(dot(vec3(_1843, _1844, _1845), vec3(_1843, _1844, _1845)));
    float _1850 = _1849 * _1843;
    float _1851 = _1849 * _1844;
    float _1852 = _1849 * _1845;
    float _1853 = dot(vec3(_375, _376, _377), vec3(cbLight._m0[_1653].xyz));
    float _3943 = isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0));
    float _1856 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
    float _1857 = dot(vec3(_375, _376, _377), vec3(_1850, _1851, _1852));
    float _3954 = isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0));
    float _1860 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
    float _1861 = dot(vec3(cbLight._m0[_1653].xyz), vec3(_1850, _1851, _1852));
    float _3965 = isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0));
    float _1865 = _1842 * _1842;
    float _1869 = ((_1860 * _1860) * (_1865 + (-1.0))) + 1.0;
    float _1878 = (exp2(log2(1.0 - (isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1879 = 1.0 - _1842;
    float _1889 = (0.5 / (((_1781 * ((_1856 * _1879) + _1842)) + 9.9999999392252902907785028219223e-09) + (((_1781 * _1879) + _1842) * _1856))) * _1856;
    float _3976 = isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0));
    float _1891 = (isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0))) * (_1865 / ((_1869 * _1869) * 3.141590118408203125));
    float _1901 = (((_1878 * cbLight._m0[_1830].x) * _1891) * _1638) + (((_1805 * cbLight._m0[_1752].x) * _1819) * _1649);
    float _1902 = (((_1878 * cbLight._m0[_1830].y) * _1891) * _1638) + (((_1805 * cbLight._m0[_1752].y) * _1819) * _1649);
    float _1903 = (((_1878 * cbLight._m0[_1830].z) * _1891) * _1638) + (((_1805 * cbLight._m0[_1752].z) * _1819) * _1649);
    float _1965;
    float _1967;
    float _1969;
    if (_1689)
    {
        _1965 = _1901;
        _1967 = _1902;
        _1969 = _1903;
    }
    else
    {
        uint _1971 = _1615 + 2u;
        uint _1975 = _1615 + 10u;
        float _1989 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1971].w)) * _378) * 0.949999988079071044921875);
        float _1990 = _1989 * _1989;
        float _1991 = cbLight._m0[_1971].x + _456;
        float _1992 = cbLight._m0[_1971].y + _457;
        float _1993 = cbLight._m0[_1971].z + _458;
        float _1997 = inversesqrt(dot(vec3(_1991, _1992, _1993), vec3(_1991, _1992, _1993)));
        float _1998 = _1997 * _1991;
        float _1999 = _1997 * _1992;
        float _2000 = _1997 * _1993;
        float _2001 = dot(vec3(_375, _376, _377), vec3(cbLight._m0[_1971].xyz));
        float _3987 = isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0));
        float _2004 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
        float _2005 = dot(vec3(_375, _376, _377), vec3(_1998, _1999, _2000));
        float _3998 = isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0));
        float _2008 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
        float _2009 = dot(vec3(cbLight._m0[_1971].xyz), vec3(_1998, _1999, _2000));
        float _4009 = isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0));
        float _2013 = _1990 * _1990;
        float _2017 = ((_2008 * _2008) * (_2013 + (-1.0))) + 1.0;
        float _2026 = (exp2(log2(1.0 - (isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2027 = 1.0 - _1990;
        float _2037 = (0.5 / (((_1781 * ((_2004 * _2027) + _1990)) + 9.9999999392252902907785028219223e-09) + (((_1781 * _2027) + _1990) * _2004))) * _2004;
        float _4020 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
        float _2039 = (isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0))) * (_2013 / ((_2017 * _2017) * 3.141590118408203125));
        float _2040 = isnan(1.0) ? _1630 : (isnan(_1630) ? 1.0 : min(_1630, 1.0));
        _1965 = (((_2026 * cbLight._m0[_1975].x) * _2039) * _2040) + _1901;
        _1967 = (((_2026 * cbLight._m0[_1975].y) * _2039) * _2040) + _1902;
        _1969 = (((_2026 * cbLight._m0[_1975].z) * _2039) * _2040) + _1903;
    }
    float _2075;
    float _2077;
    float _2079;
    if (_1707)
    {
        _2075 = _1965;
        _2077 = _1967;
        _2079 = _1969;
    }
    else
    {
        uint _2086 = _1615 + 3u;
        uint _2090 = _1615 + 11u;
        float _2104 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2086].w)) * _378) * 0.949999988079071044921875);
        float _2105 = _2104 * _2104;
        float _2106 = cbLight._m0[_2086].x + _456;
        float _2107 = cbLight._m0[_2086].y + _457;
        float _2108 = cbLight._m0[_2086].z + _458;
        float _2112 = inversesqrt(dot(vec3(_2106, _2107, _2108), vec3(_2106, _2107, _2108)));
        float _2113 = _2112 * _2106;
        float _2114 = _2112 * _2107;
        float _2115 = _2112 * _2108;
        float _2116 = dot(vec3(_375, _376, _377), vec3(cbLight._m0[_2086].xyz));
        float _4036 = isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0));
        float _2119 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
        float _2120 = dot(vec3(_375, _376, _377), vec3(_2113, _2114, _2115));
        float _4047 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
        float _2123 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
        float _2124 = dot(vec3(cbLight._m0[_2086].xyz), vec3(_2113, _2114, _2115));
        float _4058 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
        float _2128 = _2105 * _2105;
        float _2132 = ((_2123 * _2123) * (_2128 + (-1.0))) + 1.0;
        float _2141 = (exp2(log2(1.0 - (isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2142 = 1.0 - _2105;
        float _2152 = (0.5 / (((_1781 * ((_2119 * _2142) + _2105)) + 9.9999999392252902907785028219223e-09) + (((_1781 * _2142) + _2105) * _2119))) * _2119;
        float _4069 = isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0));
        float _2154 = (isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0))) * (_2128 / ((_2132 * _2132) * 3.141590118408203125));
        float _2155 = isnan(1.0) ? _1631 : (isnan(_1631) ? 1.0 : min(_1631, 1.0));
        _2075 = (((_2141 * cbLight._m0[_2090].x) * _2154) * _2155) + _1965;
        _2077 = (((_2141 * cbLight._m0[_2090].y) * _2154) * _2155) + _1967;
        _2079 = (((_2141 * cbLight._m0[_2090].z) * _2154) * _2155) + _1969;
    }
    float _2289;
    float _2291;
    float _2293;
    float _2295;
    float _2297;
    float _2299;
    if (_1613.y == 0u)
    {
        float _2230 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2231 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2230;
        float _2232 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2230;
        float _2233 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2230;
        uvec4 _2245 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2246 = _2245.x;
        uint _2257 = uint((float(_2245.y) * floor(float(uint(cbSceneParam._m0[85u].y * _478) / _2246))) + floor(float(uint(cbSceneParam._m0[85u].x * _477) / _2246)));
        float _2267 = (log2(_2233 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2268 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
        uint _2271 = uint(isnan(14.0) ? _2268 : (isnan(_2268) ? 14.0 : min(_2268, 14.0)));
        uvec4 _2276 = texelFetch(g_lightClusterGridBuffer, int(((_2271 << 2u) + (_2257 << 6u)) >> 2u));
        uint _2277 = _2276.x;
        uint _2278 = _2245.z;
        float _2377;
        float _2379;
        float _2381;
        float _2383;
        float _2385;
        float _2387;
        if (((((1u << ((_2278 >> 4u) & 15u)) + 4294967295u) & _2277) == 0u) || ((_2278 & 240u) == 0u))
        {
            _2377 = 0.0;
            _2379 = 0.0;
            _2381 = 0.0;
            _2383 = 0.0;
            _2385 = 0.0;
            _2387 = 0.0;
        }
        else
        {
            float _2378;
            float _2380;
            float _2382;
            float _2384;
            float _2386;
            float _2388;
            float _2529 = 0.0;
            float _2530 = 0.0;
            float _2531 = 0.0;
            float _2532 = 0.0;
            float _2533 = 0.0;
            float _2534 = 0.0;
            uint _2535 = 0u;
            uint _2544;
            bool _2545;
            for (;;)
            {
                _2544 = texelFetch(g_lightClassification, int((((_2271 << 5u) + (_2257 << 9u)) + (_2535 << 2u)) >> 2u)).x;
                _2545 = _2544 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2545)
                {
                    frontier_phi_68_pred = _2531;
                    frontier_phi_68_pred_1 = _2534;
                    frontier_phi_68_pred_2 = _2533;
                    frontier_phi_68_pred_3 = _2532;
                    frontier_phi_68_pred_4 = _2530;
                    frontier_phi_68_pred_5 = _2529;
                }
                else
                {
                    float _2674;
                    float _2675;
                    float _2676;
                    float _2677;
                    float _2678;
                    float _2679;
                    uint _2680;
                    _2674 = _2529;
                    _2675 = _2530;
                    _2676 = _2531;
                    _2677 = _2532;
                    _2678 = _2533;
                    _2679 = _2534;
                    _2680 = _2544;
                    float _2601;
                    float _2602;
                    float _2603;
                    float _2604;
                    float _2605;
                    float _2606;
                    for (;;)
                    {
                        uint _2684 = uint(findLSB(_2680)) + (_2535 << 5u);
                        uint _2681 = (_2680 + 4294967295u) & _2680;
                        uint _2686 = _2684 * 48u;
                        vec4 _2700 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2686)).x, texelFetch(g_PointLightRenderingBuffer, int(_2686 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2686 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2686 + 3u)).x));
                        uint _2706 = (_2684 * 48u) + 4u;
                        vec4 _2719 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2706)).x, texelFetch(g_PointLightRenderingBuffer, int(_2706 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2706 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2706 + 3u)).x));
                        uint _2725 = (_2684 * 48u) + 8u;
                        vec3 _2736 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2725)).x, texelFetch(g_PointLightRenderingBuffer, int(_2725 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2725 + 2u)).x));
                        float _2740 = _2700.x - _2231;
                        float _2741 = _2700.y - _2232;
                        float _2742 = _2700.z - _2233;
                        float _2743 = dot(vec3(_2740, _2741, _2742), vec3(_2740, _2741, _2742));
                        float _2746 = inversesqrt(_2743);
                        float _2747 = _2746 * _2740;
                        float _2748 = _2746 * _2741;
                        float _2749 = _2746 * _2742;
                        float _2750 = dot(vec3(_498, _501, _504), vec3(_2747, _2748, _2749));
                        float _2755 = 1.0 - (_2743 * _2700.w);
                        float _4095 = isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0));
                        float _2756 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
                        float _2757 = sqrt(_2743) * _2719.w;
                        float _2760 = 1.39999997615814208984375 / (_2757 + 1.39999997615814208984375);
                        float _2761 = _2760 * _2760;
                        float _2764 = ((1.0 - _2761) * _2750) + _2761;
                        float _2767 = _2757 * _2757;
                        float _2771 = ((isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0))) * _2756) / ((_2767 * 0.699999988079071044921875) + 1.0);
                        float _2775 = (-0.0) - _2231;
                        float _2776 = (-0.0) - _2232;
                        float _2777 = (-0.0) - _2233;
                        float _2781 = inversesqrt(dot(vec3(_2775, _2776, _2777), vec3(_2775, _2776, _2777)));
                        float _2782 = _2781 * _2775;
                        float _2783 = _2781 * _2776;
                        float _2784 = _2781 * _2777;
                        float _2792 = exp2(log2(1.0 / ((_2767 * 3.5) + 5.0)) * 0.25);
                        float _2793 = 1.0 - _558;
                        float _2800 = sqrt(1.0 - ((1.0 - (_2793 * _2793)) * (1.0 - (_2792 * _2792))));
                        float _2801 = _2800 * _2800;
                        float _2802 = _2801 * _2801;
                        float _2803 = _2782 + _2747;
                        float _2804 = _2783 + _2748;
                        float _2805 = _2784 + _2749;
                        float _2809 = inversesqrt(dot(vec3(_2803, _2804, _2805), vec3(_2803, _2804, _2805)));
                        float _2813 = dot(vec3(_498, _501, _504), vec3(_2782, _2783, _2784));
                        float _4111 = isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : max(_2813, 0.0));
                        float _2816 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
                        float _2817 = dot(vec3(_498, _501, _504), vec3(_2809 * _2803, _2809 * _2804, _2809 * _2805));
                        float _4122 = isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0));
                        float _2820 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
                        float _2824 = ((_2820 * _2820) * (_2802 + (-1.0))) + 1.0;
                        float _2825 = _2760 * _2801;
                        float _2826 = _2825 * _2825;
                        float _2829 = ((1.0 - _2826) * _2750) + _2826;
                        float _4133 = isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : max(_2829, 0.0));
                        float _2830 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
                        float _2831 = 1.0 - _2801;
                        float _2841 = (0.5 / (((_2830 * ((_2816 * _2831) + _2801)) + 9.9999999392252902907785028219223e-09) + (((_2830 * _2831) + _2801) * _2816))) * _2830;
                        float _4144 = isnan(0.0) ? _2841 : (isnan(_2841) ? 0.0 : max(_2841, 0.0));
                        float _2852 = (((_2802 * 3.1415927410125732421875) * (isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0)))) / ((_2824 * _2824) * ((_2767 * 2.1991131305694580078125) + 3.141590118408203125))) * _2756;
                        _2604 = (_2771 * _2719.x) + _2677;
                        _2605 = (_2771 * _2719.y) + _2678;
                        _2606 = (_2771 * _2719.z) + _2679;
                        _2601 = (_2852 * _2736.x) + _2674;
                        _2602 = (_2852 * _2736.y) + _2675;
                        _2603 = (_2852 * _2736.z) + _2676;
                        if (_2681 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2674 = _2601;
                            _2675 = _2602;
                            _2676 = _2603;
                            _2677 = _2604;
                            _2678 = _2605;
                            _2679 = _2606;
                            _2680 = _2681;
                        }
                    }
                    frontier_phi_68_pred = _2603;
                    frontier_phi_68_pred_1 = _2606;
                    frontier_phi_68_pred_2 = _2605;
                    frontier_phi_68_pred_3 = _2604;
                    frontier_phi_68_pred_4 = _2602;
                    frontier_phi_68_pred_5 = _2601;
                }
                _2382 = frontier_phi_68_pred;
                _2388 = frontier_phi_68_pred_1;
                _2386 = frontier_phi_68_pred_2;
                _2384 = frontier_phi_68_pred_3;
                _2380 = frontier_phi_68_pred_4;
                _2378 = frontier_phi_68_pred_5;
                uint _2536 = _2535 + 1u;
                if (_2536 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2529 = _2378;
                    _2530 = _2380;
                    _2531 = _2382;
                    _2532 = _2384;
                    _2533 = _2386;
                    _2534 = _2388;
                    _2535 = _2536;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2377 = _2378;
            _2379 = _2380;
            _2381 = _2382;
            _2383 = _2384;
            _2385 = _2386;
            _2387 = _2388;
        }
        uvec4 _2391 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2392 = _2391.z;
        uint _2394 = (_2392 >> 8u) & 15u;
        float _2497;
        float _2499;
        float _2501;
        float _2503;
        float _2505;
        float _2507;
        if (((4294967295u << _2394) & _2277) == 0u)
        {
            _2497 = _2377;
            _2499 = _2379;
            _2501 = _2381;
            _2503 = _2383;
            _2505 = _2385;
            _2507 = _2387;
        }
        else
        {
            float _2522 = inversesqrt(dot(vec3(_2231, _2232, _2233), vec3(_2231, _2232, _2233)));
            float _2523 = _2522 * _2231;
            float _2524 = _2522 * _2232;
            float _2525 = _2522 * _2233;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2394 < ((_2392 >> 12u) & 15u))
            {
                float _2498;
                float _2500;
                float _2502;
                float _2504;
                float _2506;
                float _2508;
                float _2657 = _2377;
                float _2658 = _2379;
                float _2659 = _2381;
                float _2660 = _2383;
                float _2661 = _2385;
                float _2662 = _2387;
                uint _2663 = _2394;
                uint _2672;
                bool _2673;
                for (;;)
                {
                    _2672 = texelFetch(g_lightClassification, int((((_2271 << 5u) + (_2257 << 9u)) + (_2663 << 2u)) >> 2u)).x;
                    _2673 = _2672 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2673)
                    {
                        frontier_phi_79_pred = _2662;
                        frontier_phi_79_pred_1 = _2661;
                        frontier_phi_79_pred_2 = _2660;
                        frontier_phi_79_pred_3 = _2659;
                        frontier_phi_79_pred_4 = _2658;
                        frontier_phi_79_pred_5 = _2657;
                    }
                    else
                    {
                        float _2866;
                        float _2867;
                        float _2868;
                        float _2869;
                        float _2870;
                        float _2871;
                        float _3162;
                        float _3163;
                        float _3164;
                        float _3165;
                        float _3166;
                        float _3167;
                        float _2879 = _2657;
                        float _2880 = _2658;
                        float _2881 = _2659;
                        float _2882 = _2660;
                        float _2883 = _2661;
                        float _2884 = _2662;
                        uint _2885 = _2672;
                        uint _2886;
                        vec4 _2911;
                        float _2912;
                        vec4 _2927;
                        vec3 _2939;
                        vec4 _2955;
                        vec4 _2971;
                        float _3018;
                        bool _3019;
                        for (;;)
                        {
                            uint _2896 = ((_2663 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2885));
                            _2886 = (_2885 + 4294967295u) & _2885;
                            uint _2898 = _2896 * 40u;
                            _2911 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2898)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2898 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2898 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2898 + 3u)).x));
                            _2912 = _2911.w;
                            uint _2914 = (_2896 * 40u) + 4u;
                            _2927 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2914)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2914 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2914 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2914 + 3u)).x));
                            uint _2929 = (_2896 * 40u) + 8u;
                            _2939 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2929)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2929 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2929 + 2u)).x));
                            uint _2942 = (_2896 * 40u) + 16u;
                            _2955 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2942)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2942 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2942 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2942 + 3u)).x));
                            uint _2958 = (_2896 * 40u) + 20u;
                            _2971 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2958)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2958 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2958 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2958 + 3u)).x));
                            uint _2974 = (_2896 * 40u) + 24u;
                            vec4 _2987 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2974)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2974 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2974 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2974 + 3u)).x));
                            uint _2993 = (_2896 * 40u) + 28u;
                            vec4 _3006 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2993)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2993 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2993 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2993 + 3u)).x));
                            _3018 = fma(_2233, _3006.z, fma(_2232, _3006.y, _3006.x * _2231)) + _3006.w;
                            _3019 = !((fma(_2233, _2987.z, fma(_2232, _2987.y, _2987.x * _2231)) + _2987.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3019)
                            {
                                float _3046 = _2911.x - _2231;
                                float _3047 = _2911.y - _2232;
                                float _3048 = _2911.z - _2233;
                                float _3049 = dot(vec3(_3046, _3047, _3048), vec3(_3046, _3047, _3048));
                                float _3052 = inversesqrt(_3049);
                                float _3053 = _3052 * _3046;
                                float _3054 = _3052 * _3047;
                                float _3055 = _3052 * _3048;
                                float _3059 = 1.0 - (_3049 / (_2912 * _2912));
                                float _4155 = isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : max(_3059, 0.0));
                                float _3060 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
                                float _3064 = sqrt(_3049) * _2927.w;
                                float _3066 = 1.39999997615814208984375 / (_3064 + 1.39999997615814208984375);
                                float _3067 = _3066 * _3066;
                                float _3070 = ((1.0 - _3067) * dot(vec3(_3053, _3054, _3055), vec3(_498, _501, _504))) + _3067;
                                float _3073 = _3064 * _3064;
                                float _3077 = (fma(_2233, _2955.z, fma(_2232, _2955.y, _2955.x * _2231)) + _2955.w) / _3018;
                                float _3078 = (fma(_2233, _2971.z, fma(_2232, _2971.y, _2971.x * _2231)) + _2971.w) / _3018;
                                float _3082 = 1.0 - dot(vec2(_3077, _3078), vec2(_3077, _3078));
                                float _4171 = isnan(0.0) ? _3082 : (isnan(_3082) ? 0.0 : max(_3082, 0.0));
                                float _3083 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
                                float _3084 = _3083 * (((isnan(0.0) ? _3070 : (isnan(_3070) ? 0.0 : max(_3070, 0.0))) * _3060) / ((_3073 * 0.699999988079071044921875) + 1.0));
                                float _3096 = exp2(log2(1.0 / ((_3073 * 3.5) + 5.0)) * 0.25);
                                float _3097 = 1.0 - _558;
                                float _3104 = sqrt(1.0 - ((1.0 - (_3097 * _3097)) * (1.0 - (_3096 * _3096))));
                                float _3105 = _3104 * _3104;
                                float _3106 = _3105 * _3105;
                                float _3107 = _3053 - _2523;
                                float _3108 = _3054 - _2524;
                                float _3109 = _3055 - _2525;
                                float _3113 = inversesqrt(dot(vec3(_3107, _3108, _3109), vec3(_3107, _3108, _3109)));
                                float _3117 = dot(vec3(_498, _501, _504), vec3((-0.0) - _2523, (-0.0) - _2524, (-0.0) - _2525));
                                float _4182 = isnan(0.0) ? _3117 : (isnan(_3117) ? 0.0 : max(_3117, 0.0));
                                float _3120 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
                                float _3121 = dot(vec3(_498, _501, _504), vec3(_3113 * _3107, _3113 * _3108, _3113 * _3109));
                                float _4193 = isnan(0.0) ? _3121 : (isnan(_3121) ? 0.0 : max(_3121, 0.0));
                                float _3124 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
                                float _3128 = ((_3124 * _3124) * (_3106 + (-1.0))) + 1.0;
                                float _3129 = _3066 * _3105;
                                float _3130 = _3129 * _3129;
                                float _3136 = ((1.0 - _3130) * dot(vec3(_498, _501, _504), vec3(_3053, _3054, _3055))) + _3130;
                                float _4204 = isnan(0.0) ? _3136 : (isnan(_3136) ? 0.0 : max(_3136, 0.0));
                                float _3137 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
                                float _3138 = 1.0 - _3105;
                                float _3148 = (0.5 / (((_3137 * ((_3120 * _3138) + _3105)) + 9.9999999392252902907785028219223e-09) + (((_3137 * _3138) + _3105) * _3120))) * _3137;
                                float _4215 = isnan(0.0) ? _3148 : (isnan(_3148) ? 0.0 : max(_3148, 0.0));
                                float _3158 = (_3083 * _3060) * (((_3106 * 3.1415927410125732421875) * (isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0)))) / ((_3128 * _3128) * ((_3073 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3084 * _2927.z;
                                frontier_phi_85_pred_1 = _3084 * _2927.y;
                                frontier_phi_85_pred_2 = _3084 * _2927.x;
                                frontier_phi_85_pred_3 = _3158 * _2939.z;
                                frontier_phi_85_pred_4 = _3158 * _2939.y;
                                frontier_phi_85_pred_5 = _3158 * _2939.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3167 = frontier_phi_85_pred;
                            _3166 = frontier_phi_85_pred_1;
                            _3165 = frontier_phi_85_pred_2;
                            _3164 = frontier_phi_85_pred_3;
                            _3163 = frontier_phi_85_pred_4;
                            _3162 = frontier_phi_85_pred_5;
                            _2869 = _3165 + _2882;
                            _2870 = _3166 + _2883;
                            _2871 = _3167 + _2884;
                            _2866 = _3162 + _2879;
                            _2867 = _3163 + _2880;
                            _2868 = _3164 + _2881;
                            if (_2886 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2879 = _2866;
                                _2880 = _2867;
                                _2881 = _2868;
                                _2882 = _2869;
                                _2883 = _2870;
                                _2884 = _2871;
                                _2885 = _2886;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2871;
                        frontier_phi_79_pred_1 = _2870;
                        frontier_phi_79_pred_2 = _2869;
                        frontier_phi_79_pred_3 = _2868;
                        frontier_phi_79_pred_4 = _2867;
                        frontier_phi_79_pred_5 = _2866;
                    }
                    _2508 = frontier_phi_79_pred;
                    _2506 = frontier_phi_79_pred_1;
                    _2504 = frontier_phi_79_pred_2;
                    _2502 = frontier_phi_79_pred_3;
                    _2500 = frontier_phi_79_pred_4;
                    _2498 = frontier_phi_79_pred_5;
                    uint _2664 = _2663 + 1u;
                    if (_2664 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2657 = _2498;
                        _2658 = _2500;
                        _2659 = _2502;
                        _2660 = _2504;
                        _2661 = _2506;
                        _2662 = _2508;
                        _2663 = _2664;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2504;
                frontier_phi_60_61_ladder_1 = _2508;
                frontier_phi_60_61_ladder_2 = _2506;
                frontier_phi_60_61_ladder_3 = _2502;
                frontier_phi_60_61_ladder_4 = _2500;
                frontier_phi_60_61_ladder_5 = _2498;
            }
            else
            {
                frontier_phi_60_61_ladder = _2383;
                frontier_phi_60_61_ladder_1 = _2387;
                frontier_phi_60_61_ladder_2 = _2385;
                frontier_phi_60_61_ladder_3 = _2381;
                frontier_phi_60_61_ladder_4 = _2379;
                frontier_phi_60_61_ladder_5 = _2377;
            }
            _2497 = frontier_phi_60_61_ladder_5;
            _2499 = frontier_phi_60_61_ladder_4;
            _2501 = frontier_phi_60_61_ladder_3;
            _2503 = frontier_phi_60_61_ladder;
            _2505 = frontier_phi_60_61_ladder_2;
            _2507 = frontier_phi_60_61_ladder_1;
        }
        float _2512 = isnan(1.0) ? _542 : (isnan(_542) ? 1.0 : min(_542, 1.0));
        _2289 = (_2512 * _2503) + _1745;
        _2291 = (_2512 * _2505) + _1747;
        _2293 = (_2512 * _2507) + _1749;
        _2295 = ((_2497 * 0.039999999105930328369140625) * _2512) + _2075;
        _2297 = ((_2499 * 0.039999999105930328369140625) * _2512) + _2077;
        _2299 = ((_2501 * 0.039999999105930328369140625) * _2512) + _2079;
    }
    else
    {
        _2289 = _1745;
        _2291 = _1747;
        _2293 = _1749;
        _2295 = _2075;
        _2297 = _2077;
        _2299 = _2079;
    }
    float _4231 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _4242 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _4253 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _2316 = ((isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0))) * (_2289 + ((isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0))) * _542))) + ((_2295 + ((isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0))) * _1381)) * cbPerFrame._m0[3u].x);
    float _2317 = ((isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0))) * (_2291 + ((isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0))) * _542))) + ((_2297 + ((isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0))) * _1381)) * cbPerFrame._m0[3u].x);
    float _2318 = ((isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0))) * (_2293 + ((isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0))) * _542))) + ((_2299 + ((isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0))) * _1381)) * cbPerFrame._m0[3u].x);
    uint _2319 = _517 + 6u;
    float _2327 = _477 / cbSceneParam._m0[86u].x;
    float _2328 = _478 / cbSceneParam._m0[86u].y;
    vec4 _2342 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2327, _2328, (log2((isnan(cbSceneParam._m0[77u].w) ? _397 : (isnan(_397) ? cbSceneParam._m0[77u].w : min(_397, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2344 = _2342.x;
    float _2345 = _2342.y;
    float _2346 = _2342.z;
    float _2347 = _2342.w;
    float _2439;
    float _2441;
    float _2443;
    float _2445;
    if (_397 > cbSceneParam._m0[78u].w)
    {
        float _2402 = isnan(_397) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _397 : min(cbSceneParam._m0[80u].w, _397));
        float _2403 = _2402 / _397;
        float _2414 = _2403 * _449;
        float _2415 = _450 * _2403;
        float _2416 = (-0.0) - _2415;
        float _2417 = _2403 * _451;
        float _2419 = (cbSceneParam._m0[77u].w * _2416) / _2402;
        float _2420 = _2419 + cbSceneParam._m0[79u].w;
        float _2421 = cbSceneParam._m0[79u].w - _2415;
        float _2427 = sqrt(((_2414 * _2414) + (_2415 * _2415)) + (_2417 * _2417));
        float _2430 = (1.0 - (cbSceneParam._m0[77u].w / _2402)) * _2427;
        float _2435 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2437 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2614;
        if (abs((_2416 - _2419) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2614 = ((((_2420 > 0.0) ? exp2(_2435 * _2420) : (2.0 - exp2(_2437 * _2420))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2430;
        }
        else
        {
            float _2558 = 1.0 / cbSceneParam._m0[80u].x;
            float _2559 = isnan(_2421) ? _2420 : (isnan(_2420) ? _2421 : max(_2420, _2421));
            float _2560 = isnan(_2421) ? _2420 : (isnan(_2420) ? _2421 : min(_2420, _2421));
            float _2569 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : min(_2559, 0.0));
            float _2570 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : min(_2560, 0.0));
            _2614 = ((abs(_2427 / _2416) * cbSceneParam._m0[80u].y) * ((((_2569 - _2570) * 2.0) - ((exp2(_2435 * (isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0)))) - exp2(_2435 * (isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0))))) * _2558)) - ((exp2(_2437 * _2569) - exp2(_2437 * _2570)) * _2558))) + (_2430 * cbSceneParam._m0[80u].z);
        }
        vec4 _2616 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2327, _2328, 1.0), 0.0);
        float _2625 = exp2((_2614 * (-1.44269502162933349609375)) * (1.0 - _2616.w));
        float _2626 = log2(_2625);
        float _2642 = log2(_2347);
        _2439 = (exp2(_2642 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2626 * cbSceneParam._m0[78u].x)) * _2616.x) / cbSceneParam._m0[78u].x)) + _2344;
        _2441 = (exp2(_2642 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2626 * cbSceneParam._m0[78u].y)) * _2616.y) / cbSceneParam._m0[78u].y)) + _2345;
        _2443 = (exp2(_2642 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2626 * cbSceneParam._m0[78u].z)) * _2616.z) / cbSceneParam._m0[78u].z)) + _2346;
        _2445 = _2625 * _2347;
    }
    else
    {
        _2439 = _2344;
        _2441 = _2345;
        _2443 = _2346;
        _2445 = _2347;
    }
    bool _2652;
    vec4 _2455;
    vec4 _2477;
    float _2479;
    float _2483;
    float _2484;
    float _2485;
    float _2486;
    bool _2496;
    for (;;)
    {
        _2455 = cbMatDynParam._m0[0u];
        float _2457 = roundEven(_2455.y);
        bool _2458 = _2457 == 3.0;
        float _2459 = log2(_2445);
        float _2466 = exp2(_2459 * cbSceneParam._m0[78u].x) * _2316;
        float _2467 = exp2(_2459 * cbSceneParam._m0[78u].y) * _2317;
        float _2468 = exp2(_2459 * cbSceneParam._m0[78u].z) * _2318;
        float _2475 = _465 + (-0.5);
        _2477 = cbMtdParam._m0[1u];
        _2479 = _2477.y * _2475;
        float _2482 = (_2457 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2483 = _2482 * (_2458 ? _2466 : (_2466 + (cbSceneParam._m0[72u].w * _2439)));
        _2484 = _2482 * (_2458 ? _2467 : (_2467 + (cbSceneParam._m0[72u].w * _2441)));
        _2485 = _2482 * (_2458 ? _2468 : (_2468 + (cbSceneParam._m0[72u].w * _2443)));
        _2486 = _2475 * 0.999000012874603271484375;
        _2496 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2496)
        {
            if ((cbInstanceData._m0[_517 + 7u].x + _2486) < 0.5)
            {
                _2652 = true;
                break;
            }
        }
        uint _2593 = _518 + uint(_2455.w);
        if ((cbInstanceData._m0[_2593].w < 1.0) && ((cbInstanceData._m0[_2593].w + _2486) < 0.5))
        {
            _2652 = true;
            break;
        }
        if ((_2479 + _246) < _2477.x)
        {
            _2652 = true;
            break;
        }
        _2652 = false;
        break;
    }
    float _2857;
    if (_2652)
    {
        discard_state = true;
        _2857 = 0.0;
    }
    else
    {
        _2857 = cbInstanceData._m0[_2319].w;
    }
    SV_Target.x = _2483;
    SV_Target.y = _2484;
    SV_Target.z = _2485;
    SV_Target.w = _2857;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2319].w;
    discard_exit();
}


