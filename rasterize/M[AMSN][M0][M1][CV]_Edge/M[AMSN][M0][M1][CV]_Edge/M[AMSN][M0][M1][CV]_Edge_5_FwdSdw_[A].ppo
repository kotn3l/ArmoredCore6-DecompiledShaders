#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _950;
float _3600;
float _3601;
float _3602;
float _3603;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _190 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _191 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _192 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _198 = inversesqrt(dot(vec3(_190, _191, _192), vec3(_190, _191, _192)));
    float _205 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _206 = _205 * NORMAL.x;
    float _207 = _205 * NORMAL.y;
    float _208 = _205 * NORMAL.z;
    float _212 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _220;
    float _221;
    float _222;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _220 = (-0.0) - _206;
        _221 = (-0.0) - _207;
        _222 = (-0.0) - _208;
    }
    else
    {
        _220 = _206;
        _221 = _207;
        _222 = _208;
    }
    vec4 _248 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _254 = _248.w;
    float _255 = _248.x * cbMtdParam._m0[9u].x;
    float _256 = _248.y * cbMtdParam._m0[9u].y;
    float _257 = _248.z * cbMtdParam._m0[9u].z;
    vec4 _269 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _273 = _269.z;
    float _277 = (_269.x * 2.0) + (-1.0);
    float _279 = (_269.y * 2.0) + (-1.0);
    float _280 = dot(vec2(_277, _279), vec2(_277, _279));
    float _3612 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _286 = sqrt(1.0 - (isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0))));
    float _315 = (TEXCOORD_3.x - ((cbMtdParam._m0[12u].y * (1.0 - TEXCOORD_3.x)) * ((texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w)).x * cbMtdParam._m0[12u].y) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[12u].z + 1.0);
    float _3623 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _316 = isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0));
    float _323 = (_316 * (cbMtdParam._m0[10u].x - _255)) + _255;
    float _324 = (_316 * (cbMtdParam._m0[10u].y - _256)) + _256;
    float _325 = (_316 * (cbMtdParam._m0[10u].z - _257)) + _257;
    vec4 _337 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _344 = (_337.x * 2.0) + (-1.0);
    float _345 = (_337.y * 2.0) + (-1.0);
    float _346 = dot(vec2(_344, _345), vec2(_344, _345));
    float _3634 = isnan(0.0) ? _346 : (isnan(_346) ? 0.0 : max(_346, 0.0));
    float _354 = (_316 * (_337.z - _273)) + _273;
    float _366 = (((_344 - _277) + (cbMtdParam._m0[12u].w * _277)) * _316) + _277;
    float _367 = (((_345 - _279) + (cbMtdParam._m0[12u].w * _279)) * _316) + _279;
    float _368 = (_316 * (sqrt(1.0 - (isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0)))) - _286)) + _286;
    float _371 = fma(_368, _220, fma(_367, _212 * TANGENT.x, (_198 * _190) * _366));
    float _374 = fma(_368, _221, fma(_367, _212 * TANGENT.y, (_198 * _191) * _366));
    float _377 = fma(_368, _222, fma(_367, _212 * TANGENT.z, (_198 * _192) * _366));
    float _381 = inversesqrt(dot(vec3(_371, _374, _377), vec3(_371, _374, _377)));
    float _382 = _381 * _371;
    float _383 = _381 * _374;
    float _384 = _381 * _377;
    float _3645 = isnan(0.0) ? _354 : (isnan(_354) ? 0.0 : max(_354, 0.0));
    float _385 = isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0));
    float _3656 = isnan(0.0) ? _323 : (isnan(_323) ? 0.0 : max(_323, 0.0));
    float _3667 = isnan(0.0) ? _324 : (isnan(_324) ? 0.0 : max(_324, 0.0));
    float _3678 = isnan(0.0) ? _325 : (isnan(_325) ? 0.0 : max(_325, 0.0));
    float _404 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _446 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _456 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _446);
    float _457 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _446);
    float _458 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _446);
    float _462 = inversesqrt(dot(vec3(_456, _457, _458), vec3(_456, _457, _458)));
    float _463 = _456 * _462;
    float _464 = _457 * _462;
    float _465 = _458 * _462;
    vec4 _470 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _472 = _470.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _630 = sqrt(((_456 * _456) + (_457 * _457)) + (_458 * _458));
        float _636 = (cbMatDynParam._m0[5u].x * _630) + cbMatDynParam._m0[5u].y;
        float _3689 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
        float _637 = isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0));
        float _641 = (cbMatDynParam._m0[5u].z * _630) + cbMatDynParam._m0[5u].w;
        float _3700 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0))) - _637)) + _637) < ((_472 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _484 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _485 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _505 = fma(_384, cbSceneParam._m0[5u].z, fma(_383, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _382));
    float _508 = fma(_384, cbSceneParam._m0[6u].z, fma(_383, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _382));
    float _511 = fma(_384, cbSceneParam._m0[7u].z, fma(_383, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _382));
    uint _524 = uint(roundEven(NORMAL.w)) * 13u;
    uint _526 = _524 + 9u;
    uint _527 = _526 + uint(cbMatDynParam._m0[0u].w);
    float _533 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0)))) * cbInstanceData._m0[_527].x;
    float _534 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0)))) * cbInstanceData._m0[_527].y;
    float _535 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0)))) * cbInstanceData._m0[_527].z;
    float _3711 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _536 = isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0));
    float _3722 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _537 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
    float _3733 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _538 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
    vec4 _547 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _484, cbSceneParam._m0[86u].y * _485));
    float _550 = _547.x * TEXCOORD_3.w;
    float _551 = dot(vec3(_382, _383, _384), vec3(_463, _464, _465));
    float _554 = _551 * 2.0;
    float _558 = (_554 * _382) - _463;
    float _559 = (_554 * _383) - _464;
    float _560 = (_554 * _384) - _465;
    float _564 = abs(dot(vec3(_463, _464, _465), vec3(_382, _383, _384)));
    float _3744 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _566 = sqrt(_385);
    float _579 = exp2((_566 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_566 * 3.0));
    float _611 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _615 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _619 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _949;
    float _951;
    float _952;
    float _953;
    float _954;
    float _955;
    float _956;
    float _957;
    float _958;
    float _959;
    float _960;
    float _961;
    float _962;
    float _963;
    float _964;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _674 = fma(_619, cbModelParam._m0[26u].z, fma(_615, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _611));
        float _678 = fma(_619, cbModelParam._m0[27u].z, fma(_615, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _611));
        float _682 = fma(_619, cbModelParam._m0[28u].z, fma(_615, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _611));
        float _707 = _611 + _382;
        float _708 = _615 + _383;
        float _709 = _619 + _384;
        float _719 = fma(_709, cbModelParam._m0[26u].z, fma(_708, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _707)) - _674;
        float _720 = fma(_709, cbModelParam._m0[27u].z, fma(_708, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _707)) - _678;
        float _721 = fma(_709, cbModelParam._m0[28u].z, fma(_708, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _707)) - _682;
        float _725 = inversesqrt(dot(vec3(_719, _720, _721), vec3(_719, _720, _721)));
        float _738 = ((_725 * _719) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_674 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _739 = ((_725 * _720) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_678 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _740 = ((_725 * _721) / cbModelParam._m0[34u].z) + ((((((_682 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _743 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_738, _739, _740), 0.0);
        vec4 _750 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_738, _739, _740), 0.0);
        vec4 _757 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_738, _739, _740), 0.0);
        vec4 _764 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_738, _739, _740), 0.0);
        float _777 = exp2((_743.w + (-0.5)) * 20.0) * 2.0;
        float _778 = _777 * (_743.x + (-0.5));
        float _779 = _777 * (_743.y + (-0.5));
        float _780 = _777 * (_743.z + (-0.5));
        float _787 = exp2((_750.w + (-0.5)) * 20.0) * 2.0;
        float _788 = _787 * (_750.x + (-0.5));
        float _789 = _787 * (_750.y + (-0.5));
        float _790 = _787 * (_750.z + (-0.5));
        float _797 = exp2((_757.w + (-0.5)) * 20.0) * 2.0;
        float _798 = _797 * (_757.x + (-0.5));
        float _799 = _797 * (_757.y + (-0.5));
        float _800 = _797 * (_757.z + (-0.5));
        float _807 = exp2((_764.w + (-0.5)) * 20.0) * 2.0;
        float _808 = _807 * (_764.x + (-0.5));
        float _809 = _807 * (_764.y + (-0.5));
        float _810 = _807 * (_764.z + (-0.5));
        float _811 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
        float _812 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
        float _813 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
        float _814 = _778 * 0.5;
        float _815 = _788 * 0.5;
        float _816 = _798 * 0.5;
        float _817 = dot(vec3(_814, _815, _816), vec3(_814, _815, _816));
        float _822 = (_817 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_817);
        float _831 = (dot(vec3(_382, _383, _384), vec3(_822 * _814, _822 * _815, _822 * _816)) + 1.0) * 0.5;
        float _3770 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
        float _841 = sqrt(((_815 * _815) + (_814 * _814)) + (_816 * _816)) / (_811 + 9.9999997473787516355514526367188e-06);
        float _3781 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
        float _842 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
        float _843 = _842 * 2.0;
        float _847 = (1.0 - _842) / (_842 + 1.0);
        float _3792 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
        float _848 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
        float _857 = ((((1.0 - _848) * (_843 + 2.0)) * exp2(log2(isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0))) * (_843 + 1.0))) + _848) * _811;
        float _858 = _779 * 0.5;
        float _859 = _789 * 0.5;
        float _860 = _799 * 0.5;
        float _861 = dot(vec3(_858, _859, _860), vec3(_858, _859, _860));
        float _866 = (_861 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_861);
        float _874 = (dot(vec3(_382, _383, _384), vec3(_866 * _858, _866 * _859, _866 * _860)) + 1.0) * 0.5;
        float _3803 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
        float _883 = sqrt(((_859 * _859) + (_858 * _858)) + (_860 * _860)) / (_812 + 9.9999997473787516355514526367188e-06);
        float _3814 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
        float _884 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
        float _885 = _884 * 2.0;
        float _889 = (1.0 - _884) / (_884 + 1.0);
        float _3825 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
        float _890 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
        float _899 = ((((1.0 - _890) * (_885 + 2.0)) * exp2(log2(isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0))) * (_885 + 1.0))) + _890) * _812;
        float _900 = _780 * 0.5;
        float _901 = _790 * 0.5;
        float _902 = _800 * 0.5;
        float _903 = dot(vec3(_900, _901, _902), vec3(_900, _901, _902));
        float _908 = (_903 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_903);
        float _916 = (dot(vec3(_382, _383, _384), vec3(_908 * _900, _908 * _901, _908 * _902)) + 1.0) * 0.5;
        float _3836 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
        float _925 = sqrt(((_901 * _901) + (_900 * _900)) + (_902 * _902)) / (_813 + 9.9999997473787516355514526367188e-06);
        float _3847 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
        float _926 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
        float _927 = _926 * 2.0;
        float _931 = (1.0 - _926) / (_926 + 1.0);
        float _3858 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        float _932 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
        float _941 = ((((1.0 - _932) * (_927 + 2.0)) * exp2(log2(isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0))) * (_927 + 1.0))) + _932) * _813;
        _949 = _780;
        _951 = _779;
        _952 = _778;
        _953 = _790;
        _954 = _789;
        _955 = _788;
        _956 = _800;
        _957 = _799;
        _958 = _798;
        _959 = _813;
        _960 = _812;
        _961 = _811;
        _962 = cbModelParam._m0[36u].z * (isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0)));
        _963 = cbModelParam._m0[36u].z * (isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0)));
        _964 = cbModelParam._m0[36u].z * (isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0)));
    }
    else
    {
        _949 = _950;
        _951 = _950;
        _952 = _950;
        _953 = _950;
        _954 = _950;
        _955 = _950;
        _956 = _950;
        _957 = _950;
        _958 = _950;
        _959 = _950;
        _960 = _950;
        _961 = _950;
        _962 = 0.0;
        _963 = 0.0;
        _964 = 0.0;
    }
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _993 = fma(_619, cbModelParam._m0[30u].z, fma(_615, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _611));
        float _997 = fma(_619, cbModelParam._m0[31u].z, fma(_615, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _611));
        float _1001 = fma(_619, cbModelParam._m0[32u].z, fma(_615, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _611));
        float _1024 = _611 + _382;
        float _1025 = _615 + _383;
        float _1026 = _619 + _384;
        float _1036 = fma(_1026, cbModelParam._m0[30u].z, fma(_1025, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1024)) - _993;
        float _1037 = fma(_1026, cbModelParam._m0[31u].z, fma(_1025, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1024)) - _997;
        float _1038 = fma(_1026, cbModelParam._m0[32u].z, fma(_1025, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1024)) - _1001;
        float _1042 = inversesqrt(dot(vec3(_1036, _1037, _1038), vec3(_1036, _1037, _1038)));
        float _1055 = ((_1042 * _1036) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_993 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1056 = ((_1042 * _1037) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_997 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1057 = ((_1042 * _1038) / cbModelParam._m0[35u].z) + ((((((_1001 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1059 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1055, _1056, _1057), 0.0);
        vec4 _1066 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1055, _1056, _1057), 0.0);
        vec4 _1073 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1055, _1056, _1057), 0.0);
        vec4 _1080 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1055, _1056, _1057), 0.0);
        float _1092 = exp2((_1059.w + (-0.5)) * 20.0) * 2.0;
        float _1093 = _1092 * (_1059.x + (-0.5));
        float _1094 = _1092 * (_1059.y + (-0.5));
        float _1095 = _1092 * (_1059.z + (-0.5));
        float _1102 = exp2((_1066.w + (-0.5)) * 20.0) * 2.0;
        float _1103 = _1102 * (_1066.x + (-0.5));
        float _1104 = _1102 * (_1066.y + (-0.5));
        float _1105 = _1102 * (_1066.z + (-0.5));
        float _1112 = exp2((_1073.w + (-0.5)) * 20.0) * 2.0;
        float _1113 = _1112 * (_1073.x + (-0.5));
        float _1114 = _1112 * (_1073.y + (-0.5));
        float _1115 = _1112 * (_1073.z + (-0.5));
        float _1122 = exp2((_1080.w + (-0.5)) * 20.0) * 2.0;
        float _1123 = _1122 * (_1080.x + (-0.5));
        float _1124 = _1122 * (_1080.y + (-0.5));
        float _1125 = _1122 * (_1080.z + (-0.5));
        float _1126 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1127 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1128 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1129 = _1093 * 0.5;
        float _1130 = _1103 * 0.5;
        float _1131 = _1113 * 0.5;
        float _1132 = dot(vec3(_1129, _1130, _1131), vec3(_1129, _1130, _1131));
        float _1137 = (_1132 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1132);
        float _1145 = (dot(vec3(_382, _383, _384), vec3(_1137 * _1129, _1137 * _1130, _1137 * _1131)) + 1.0) * 0.5;
        float _3899 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1154 = sqrt(((_1130 * _1130) + (_1129 * _1129)) + (_1131 * _1131)) / (_1126 + 9.9999997473787516355514526367188e-06);
        float _3910 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1155 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
        float _1156 = _1155 * 2.0;
        float _1160 = (1.0 - _1155) / (_1155 + 1.0);
        float _3921 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1161 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
        float _1170 = ((((1.0 - _1161) * (_1156 + 2.0)) * exp2(log2(isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0))) * (_1156 + 1.0))) + _1161) * _1126;
        float _1171 = _1094 * 0.5;
        float _1172 = _1104 * 0.5;
        float _1173 = _1114 * 0.5;
        float _1174 = dot(vec3(_1171, _1172, _1173), vec3(_1171, _1172, _1173));
        float _1179 = (_1174 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1174);
        float _1187 = (dot(vec3(_382, _383, _384), vec3(_1179 * _1171, _1179 * _1172, _1179 * _1173)) + 1.0) * 0.5;
        float _3932 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1196 = sqrt(((_1172 * _1172) + (_1171 * _1171)) + (_1173 * _1173)) / (_1127 + 9.9999997473787516355514526367188e-06);
        float _3943 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1197 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
        float _1198 = _1197 * 2.0;
        float _1202 = (1.0 - _1197) / (_1197 + 1.0);
        float _3954 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1203 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
        float _1212 = ((((1.0 - _1203) * (_1198 + 2.0)) * exp2(log2(isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0))) * (_1198 + 1.0))) + _1203) * _1127;
        float _1213 = _1095 * 0.5;
        float _1214 = _1105 * 0.5;
        float _1215 = _1115 * 0.5;
        float _1216 = dot(vec3(_1213, _1214, _1215), vec3(_1213, _1214, _1215));
        float _1221 = (_1216 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1216);
        float _1229 = (dot(vec3(_382, _383, _384), vec3(_1221 * _1213, _1221 * _1214, _1221 * _1215)) + 1.0) * 0.5;
        float _3965 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1238 = sqrt(((_1214 * _1214) + (_1213 * _1213)) + (_1215 * _1215)) / (_1128 + 9.9999997473787516355514526367188e-06);
        float _3976 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1239 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
        float _1240 = _1239 * 2.0;
        float _1244 = (1.0 - _1239) / (_1239 + 1.0);
        float _3987 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1245 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
        float _1254 = ((((1.0 - _1245) * (_1240 + 2.0)) * exp2(log2(isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0))) * (_1240 + 1.0))) + _1245) * _1128;
        _1262 = _1095;
        _1263 = _1094;
        _1264 = _1093;
        _1265 = _1105;
        _1266 = _1104;
        _1267 = _1103;
        _1268 = _1115;
        _1269 = _1114;
        _1270 = _1113;
        _1271 = _1128;
        _1272 = _1127;
        _1273 = _1126;
        _1274 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0)));
        _1275 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0)));
        _1276 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0)));
    }
    else
    {
        _1262 = _950;
        _1263 = _950;
        _1264 = _950;
        _1265 = _950;
        _1266 = _950;
        _1267 = _950;
        _1268 = _950;
        _1269 = _950;
        _1270 = _950;
        _1271 = _950;
        _1272 = _950;
        _1273 = _950;
        _1274 = 0.0;
        _1275 = 0.0;
        _1276 = 0.0;
    }
    float _1286 = (cbModelParam._m0[1u].x * (_1274 - _962)) + _962;
    float _1287 = (cbModelParam._m0[1u].x * (_1275 - _963)) + _963;
    float _1288 = (cbModelParam._m0[1u].x * (_1276 - _964)) + _964;
    float _1309 = fma(_1288, cbSceneParam._m0[89u].z, fma(_1287, cbSceneParam._m0[89u].y, _1286 * cbSceneParam._m0[89u].x));
    float _1312 = fma(_1288, cbSceneParam._m0[90u].z, fma(_1287, cbSceneParam._m0[90u].y, _1286 * cbSceneParam._m0[90u].x));
    float _1315 = fma(_1288, cbSceneParam._m0[91u].z, fma(_1287, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1286));
    float _1330 = _558 * 0.5;
    float _1331 = _559 * 0.5;
    float _1332 = _560 * 0.5;
    float _1333 = dot(vec4(_1330, _1331, _1332, 1.0), vec4(_1264, _1267, _1270, _1273));
    float _1336 = dot(vec4(_1330, _1331, _1332, 1.0), vec4(_1263, _1266, _1269, _1272));
    float _1339 = dot(vec4(_1330, _1331, _1332, 1.0), vec4(_1262, _1265, _1268, _1271));
    float _1373;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1346 = dot(vec4(_1330, _1331, _1332, 1.0), vec4(_949, _953, _956, _959));
        float _1350 = dot(vec4(_1330, _1331, _1332, 1.0), vec4(_951, _954, _957, _960));
        float _1354 = dot(vec4(_1330, _1331, _1332, 1.0), vec4(_952, _955, _958, _961));
        float _1361 = dot(vec4(cbModelParam._m0[39u]), vec4(_1330, _1331, _1332, 1.0));
        _1373 = dot(vec3(isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0)), isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0)), isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1361) ? 0.0 : (isnan(0.0) ? _1361 : max(0.0, _1361))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1373 = 1.0;
    }
    float _1384;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1375 = dot(vec4(cbModelParam._m0[40u]), vec4(_1330, _1331, _1332, 1.0));
        _1384 = dot(vec3(isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0)), isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0)), isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1375) ? 0.0 : (isnan(0.0) ? _1375 : max(0.0, _1375))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1384 = 1.0;
    }
    float _1388 = (_1384 * cbModelParam._m0[1u].x) + (_1373 * (1.0 - cbModelParam._m0[1u].x));
    float _1398 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _385);
    float _1399 = isnan(_1398) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1398 : min(cbModelParam._m0[25u].z, _1398));
    float _1480;
    float _1482;
    float _1484;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1447 = fma(_619, cbModelParam._m0[13u].z, fma(_615, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _611)) + cbModelParam._m0[13u].w;
        float _1451 = fma(_619, cbModelParam._m0[14u].z, fma(_615, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _611)) + cbModelParam._m0[14u].w;
        float _1455 = fma(_619, cbModelParam._m0[15u].z, fma(_615, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _611)) + cbModelParam._m0[15u].w;
        float _1458 = fma(_560, cbModelParam._m0[13u].z, fma(_559, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _558));
        float _1461 = fma(_560, cbModelParam._m0[14u].z, fma(_559, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _558));
        float _1464 = fma(_560, cbModelParam._m0[15u].z, fma(_559, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _558));
        float _1492;
        if (_1458 > 0.0)
        {
            _1492 = abs((1.0 - _1447) / _1458);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1458 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1447 + 1.0) / _1458);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1492 = frontier_phi_19_17_ladder;
        }
        float _1665;
        if (_1461 > 0.0)
        {
            _1665 = abs((1.0 - _1451) / _1461);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1461 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1451 + 1.0) / _1461);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1665 = frontier_phi_28_24_ladder;
        }
        float _1960;
        if (_1464 > 0.0)
        {
            _1960 = abs((1.0 - _1455) / _1464);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1464 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1455 + 1.0) / _1464);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1960 = frontier_phi_40_35_ladder;
        }
        float _1962 = isnan(_1665) ? _1492 : (isnan(_1492) ? _1665 : min(_1492, _1665));
        float _1963 = isnan(_1960) ? _1962 : (isnan(_1962) ? _1960 : min(_1962, _1960));
        float _1967 = (_1963 * _1458) + _1447;
        float _1968 = (_1963 * _1461) + _1451;
        float _1969 = (_1963 * _1464) + _1455;
        float _1970 = _1963 * 9.9999997473787516355514526367188e-05;
        float _1972 = (-1.0) - _1970;
        float _1974 = _1970 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1969 > _1974) || ((_1969 < _1972) || ((_1968 > _1974) || ((_1968 < _1972) || ((_1967 < _1972) || (_1967 > _1974))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2114 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1969, cbModelParam._m0[9u].z, fma(_1968, cbModelParam._m0[9u].y, _1967 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1969, cbModelParam._m0[10u].z, fma(_1968, cbModelParam._m0[10u].y, _1967 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1969, cbModelParam._m0[11u].z, fma(_1968, cbModelParam._m0[11u].y, _1967 * cbModelParam._m0[11u].x))), _1399);
            frontier_phi_18_40_ladder = _2114.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2114.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2114.x * cbModelParam._m0[1u].y;
        }
        _1480 = frontier_phi_18_40_ladder_2;
        _1482 = frontier_phi_18_40_ladder_1;
        _1484 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1468 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_558, _559, _560), _1399);
        _1480 = _1468.x * cbModelParam._m0[1u].y;
        _1482 = _1468.y * cbModelParam._m0[1u].y;
        _1484 = _1468.z * cbModelParam._m0[1u].y;
    }
    float _1488 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _385);
    float _1489 = isnan(_1488) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1488 : min(cbModelParam._m0[25u].w, _1488));
    float _1582;
    float _1584;
    float _1586;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1546 = fma(_619, cbModelParam._m0[21u].z, fma(_615, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _611)) + cbModelParam._m0[21u].w;
        float _1550 = fma(_619, cbModelParam._m0[22u].z, fma(_615, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _611)) + cbModelParam._m0[22u].w;
        float _1554 = fma(_619, cbModelParam._m0[23u].z, fma(_615, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _611)) + cbModelParam._m0[23u].w;
        float _1557 = fma(_560, cbModelParam._m0[21u].z, fma(_559, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _558));
        float _1560 = fma(_560, cbModelParam._m0[22u].z, fma(_559, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _558));
        float _1563 = fma(_560, cbModelParam._m0[23u].z, fma(_559, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _558));
        float _1670;
        if (_1557 > 0.0)
        {
            _1670 = abs((1.0 - _1546) / _1557);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1557 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1546 + 1.0) / _1557);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1670 = frontier_phi_30_26_ladder;
        }
        float _1987;
        if (_1560 > 0.0)
        {
            _1987 = abs((1.0 - _1550) / _1560);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1560 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1550 + 1.0) / _1560);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1987 = frontier_phi_42_37_ladder;
        }
        float _2314;
        if (_1563 > 0.0)
        {
            _2314 = abs((1.0 - _1554) / _1563);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1563 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1554 + 1.0) / _1563);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2314 = frontier_phi_52_49_ladder;
        }
        float _2316 = isnan(_1987) ? _1670 : (isnan(_1670) ? _1987 : min(_1670, _1987));
        float _2317 = isnan(_2314) ? _2316 : (isnan(_2316) ? _2314 : min(_2316, _2314));
        float _2321 = (_2317 * _1557) + _1546;
        float _2322 = (_2317 * _1560) + _1550;
        float _2323 = (_2317 * _1563) + _1554;
        float _2324 = _2317 * 9.9999997473787516355514526367188e-05;
        float _2325 = (-1.0) - _2324;
        float _2327 = _2324 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2323 > _2327) || ((_2323 < _2325) || ((_2322 > _2327) || ((_2322 < _2325) || ((_2321 < _2325) || (_2321 > _2327))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2441 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2323, cbModelParam._m0[17u].z, fma(_2322, cbModelParam._m0[17u].y, _2321 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2323, cbModelParam._m0[18u].z, fma(_2322, cbModelParam._m0[18u].y, _2321 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2323, cbModelParam._m0[19u].z, fma(_2322, cbModelParam._m0[19u].y, _2321 * cbModelParam._m0[19u].x))), _1489);
            frontier_phi_27_52_ladder = _2441.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2441.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2441.x * cbModelParam._m0[1u].z;
        }
        _1582 = frontier_phi_27_52_ladder_2;
        _1584 = frontier_phi_27_52_ladder_1;
        _1586 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1566 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_558, _559, _560), _1489);
        _1582 = _1566.x * cbModelParam._m0[1u].z;
        _1584 = _1566.y * cbModelParam._m0[1u].z;
        _1586 = _1566.z * cbModelParam._m0[1u].z;
    }
    float _1598 = ((((1.0 - _579) * ((_566 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_579 * _566)) * _550;
    float _1599 = _1598 * ((cbModelParam._m0[1u].w * (_1582 - _1480)) + _1480);
    float _1600 = _1598 * ((cbModelParam._m0[1u].w * (_1584 - _1482)) + _1482);
    float _1601 = _1598 * ((cbModelParam._m0[1u].w * (_1586 - _1484)) + _1484);
    float _1604 = fma(_1601, cbSceneParam._m0[89u].z, fma(_1600, cbSceneParam._m0[89u].y, _1599 * cbSceneParam._m0[89u].x));
    float _1607 = fma(_1601, cbSceneParam._m0[90u].z, fma(_1600, cbSceneParam._m0[90u].y, _1599 * cbSceneParam._m0[90u].x));
    float _1610 = fma(_1601, cbSceneParam._m0[91u].z, fma(_1600, cbSceneParam._m0[91u].y, _1599 * cbSceneParam._m0[91u].x));
    float _1644 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1648 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1652 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1656 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1657 = _1644 / _1656;
    float _1658 = _1648 / _1656;
    float _1659 = _1652 / _1656;
    float _1806;
    float _1807;
    float _1808;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1686 = ((uint(_1659 > cbSceneParam._m0[59u].y) + uint(_1659 > cbSceneParam._m0[59u].x)) + uint(_1659 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1687 = _1686 + 43u;
        uint _1695 = _1686 + 44u;
        uint _1703 = _1686 + 45u;
        uint _1711 = _1686 + 46u;
        float _1722 = fma(_1656, cbSceneParam._m0[_1687].w, fma(_1652, cbSceneParam._m0[_1687].z, fma(_1648, cbSceneParam._m0[_1687].y, _1644 * cbSceneParam._m0[_1687].x)));
        float _1726 = fma(_1656, cbSceneParam._m0[_1695].w, fma(_1652, cbSceneParam._m0[_1695].z, fma(_1648, cbSceneParam._m0[_1695].y, _1644 * cbSceneParam._m0[_1695].x)));
        float _1734 = fma(_1656, cbSceneParam._m0[_1711].w, fma(_1652, cbSceneParam._m0[_1711].z, fma(_1648, cbSceneParam._m0[_1711].y, _1644 * cbSceneParam._m0[_1711].x)));
        float _1739 = cbSceneParam._m0[33u].z * _1734;
        float _1741 = cbSceneParam._m0[33u].w * _1734;
        float _1744 = fma(_1656, cbSceneParam._m0[_1703].w, fma(_1652, cbSceneParam._m0[_1703].z, fma(_1648, cbSceneParam._m0[_1703].y, _1644 * cbSceneParam._m0[_1703].x))) / _1734;
        float _1792 = (cbSceneParam._m0[33u].x - sqrt(((_1658 * _1658) + (_1657 * _1657)) + (_1659 * _1659))) * cbSceneParam._m0[33u].y;
        float _4113 = isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0));
        float _1799 = (isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1739 + _1722) / _1734, (_1741 + _1726) / _1734), _1744), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1741 + _1722) / _1734, (_1726 - _1739) / _1734), _1744), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1722 - _1739) / _1734, (_1726 - _1741) / _1734), _1744), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1722 - _1741) / _1734, (_1739 + _1726) / _1734), _1744), 0.0)).x), vec4(0.25)));
        _1806 = 1.0 - (_1799 * cbSceneParam._m0[34u].x);
        _1807 = 1.0 - (_1799 * cbSceneParam._m0[34u].y);
        _1808 = 1.0 - (_1799 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1806 = 1.0;
        _1807 = 1.0;
        _1808 = 1.0;
    }
    float _1872;
    float _1874;
    float _1876;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1860 = fma(_1656, cbSceneParam._m0[63u].w, fma(_1652, cbSceneParam._m0[63u].z, fma(_1648, cbSceneParam._m0[63u].y, _1644 * cbSceneParam._m0[63u].x)));
        float _1861 = fma(_1656, cbSceneParam._m0[60u].w, fma(_1652, cbSceneParam._m0[60u].z, fma(_1648, cbSceneParam._m0[60u].y, _1644 * cbSceneParam._m0[60u].x))) / _1860;
        float _1862 = fma(_1656, cbSceneParam._m0[61u].w, fma(_1652, cbSceneParam._m0[61u].z, fma(_1648, cbSceneParam._m0[61u].y, _1644 * cbSceneParam._m0[61u].x))) / _1860;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1861 >= cbSceneParam._m0[64u].x) && (_1862 >= cbSceneParam._m0[64u].y)) && (_1861 <= cbSceneParam._m0[64u].z)) && (_1862 <= cbSceneParam._m0[64u].w))
        {
            float _2000 = fma(_1656, cbSceneParam._m0[62u].w, fma(_1652, cbSceneParam._m0[62u].z, fma(_1648, cbSceneParam._m0[62u].y, _1644 * cbSceneParam._m0[62u].x))) / _1860;
            float _2004 = isnan(cbSceneParam._m0[41u].w) ? _2000 : (isnan(_2000) ? cbSceneParam._m0[41u].w : max(_2000, cbSceneParam._m0[41u].w));
            float _2047 = (cbSceneParam._m0[33u].x - sqrt(((_1658 * _1658) + (_1657 * _1657)) + (_1659 * _1659))) * cbSceneParam._m0[33u].y;
            float _4129 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
            float _2054 = (isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1861, cbSceneParam._m0[33u].w + _1862), _2004), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1861, _1862 - cbSceneParam._m0[33u].z), _2004), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1861 - cbSceneParam._m0[33u].z, _1862 - cbSceneParam._m0[33u].w), _2004), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1861 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1862), _2004), 0.0)).x), vec4(0.25)));
            float _2058 = 1.0 - (_2054 * cbSceneParam._m0[34u].x);
            float _2059 = 1.0 - (_2054 * cbSceneParam._m0[34u].y);
            float _2060 = 1.0 - (_2054 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2059) ? _1807 : (isnan(_1807) ? _2059 : min(_1807, _2059));
            frontier_phi_39_38_ladder_1 = isnan(_2058) ? _1806 : (isnan(_1806) ? _2058 : min(_1806, _2058));
            frontier_phi_39_38_ladder_2 = isnan(_2060) ? _1808 : (isnan(_1808) ? _2060 : min(_1808, _2060));
        }
        else
        {
            frontier_phi_39_38_ladder = _1807;
            frontier_phi_39_38_ladder_1 = _1806;
            frontier_phi_39_38_ladder_2 = _1808;
        }
        _1872 = frontier_phi_39_38_ladder_1;
        _1874 = frontier_phi_39_38_ladder;
        _1876 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _1872 = _1806;
        _1874 = _1807;
        _1876 = _1808;
    }
    uvec4 _1881 = floatBitsToUint(cbInstanceData._m0[_524 + 5u]);
    uint _1883 = _1881.x * 14u;
    uint _1884 = _1883 + 13u;
    float _1891 = _550 + (-1.0);
    float _1896 = (cbLight._m0[_1884].x * _1891) + 1.0;
    float _1897 = (cbLight._m0[_1884].y * _1891) + 1.0;
    float _1898 = (cbLight._m0[_1884].z * _1891) + 1.0;
    float _1899 = (cbLight._m0[_1884].w * _1891) + 1.0;
    uint _1900 = _1883 + 5u;
    float _1906 = isnan(1.0) ? _1897 : (isnan(_1897) ? 1.0 : min(_1897, 1.0));
    uint _1910 = _1883 + 4u;
    float _1919 = isnan(1.0) ? _1896 : (isnan(_1896) ? 1.0 : min(_1896, 1.0));
    uint _1923 = _1883 | 1u;
    float _1934 = dot(vec3(cbLight._m0[_1883].xyz), vec3(_382, _383, _384));
    float _1937 = dot(vec3(cbLight._m0[_1923].xyz), vec3(_382, _383, _384));
    float _4165 = isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0));
    float _4176 = isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0));
    float _1942 = (isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0))) * 0.3183098733425140380859375;
    float _1944 = (isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0))) * 0.3183098733425140380859375;
    float _1951 = ((cbLight._m0[_1900].x * _1906) * _1944) + (((cbLight._m0[_1910].x * _1872) * _1919) * _1942);
    float _1952 = ((_1906 * cbLight._m0[_1900].y) * _1944) + (((cbLight._m0[_1910].y * _1874) * _1919) * _1942);
    float _1953 = ((_1906 * cbLight._m0[_1900].z) * _1944) + (((cbLight._m0[_1910].z * _1876) * _1919) * _1942);
    uvec4 _1957 = floatBitsToUint(cbLight._m0[_1883 + 12u]);
    bool _1959 = _1957.x == 0u;
    float _2061;
    float _2063;
    float _2065;
    if (_1959)
    {
        _2061 = _1951;
        _2063 = _1952;
        _2065 = _1953;
    }
    else
    {
        uint _2069 = _1883 + 6u;
        float _2085 = (dot(vec3(cbLight._m0[_1883 + 2u].xyz), vec3(_382, _383, _384)) * 0.5) + 0.5;
        float _2086 = _2085 * _2085;
        float _4187 = isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0));
        float _2087 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
        float _2088 = isnan(1.0) ? _1898 : (isnan(_1898) ? 1.0 : min(_1898, 1.0));
        _2061 = (((cbLight._m0[_2069].x * 0.3183098733425140380859375) * _2087) * _2088) + _1951;
        _2063 = (((cbLight._m0[_2069].y * 0.3183098733425140380859375) * _2087) * _2088) + _1952;
        _2065 = (((cbLight._m0[_2069].z * 0.3183098733425140380859375) * _2087) * _2088) + _1953;
    }
    bool _2068 = _1957.y == 0u;
    float _2123;
    float _2125;
    float _2127;
    if (_2068)
    {
        _2123 = _2061;
        _2125 = _2063;
        _2127 = _2065;
    }
    else
    {
        uint _2285 = _1883 + 7u;
        float _2301 = (dot(vec3(cbLight._m0[_1883 + 3u].xyz), vec3(_382, _383, _384)) * 0.5) + 0.5;
        float _2302 = _2301 * _2301;
        float _4203 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
        float _2303 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
        float _2304 = isnan(1.0) ? _1899 : (isnan(_1899) ? 1.0 : min(_1899, 1.0));
        _2123 = (((cbLight._m0[_2285].x * 0.3183098733425140380859375) * _2303) * _2304) + _2061;
        _2125 = (((cbLight._m0[_2285].y * 0.3183098733425140380859375) * _2303) * _2304) + _2063;
        _2127 = (((cbLight._m0[_2285].z * 0.3183098733425140380859375) * _2303) * _2304) + _2065;
    }
    uint _2130 = _1883 + 8u;
    float _2143 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1883].w)) * _385) * 0.949999988079071044921875);
    float _2144 = _2143 * _2143;
    float _2145 = cbLight._m0[_1883].x + _463;
    float _2146 = cbLight._m0[_1883].y + _464;
    float _2147 = cbLight._m0[_1883].z + _465;
    float _2151 = inversesqrt(dot(vec3(_2145, _2146, _2147), vec3(_2145, _2146, _2147)));
    float _2152 = _2151 * _2145;
    float _2153 = _2151 * _2146;
    float _2154 = _2151 * _2147;
    float _2155 = dot(vec3(_382, _383, _384), vec3(cbLight._m0[_1883].xyz));
    float _4219 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
    float _2158 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
    float _4230 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
    float _2159 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
    float _2160 = dot(vec3(_382, _383, _384), vec3(_2152, _2153, _2154));
    float _4241 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
    float _2163 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
    float _2164 = dot(vec3(cbLight._m0[_1883].xyz), vec3(_2152, _2153, _2154));
    float _4252 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
    float _2168 = _2144 * _2144;
    float _2172 = ((_2163 * _2163) * (_2168 + (-1.0))) + 1.0;
    float _2183 = (exp2(log2(1.0 - (isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2184 = 1.0 - _2144;
    float _2195 = (0.5 / (((_2159 * ((_2158 * _2184) + _2144)) + 9.9999999392252902907785028219223e-09) + (((_2159 * _2184) + _2144) * _2158))) * _2158;
    float _4263 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
    float _2197 = (isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0))) * (_2168 / ((_2172 * _2172) * 3.141590118408203125));
    uint _2211 = _1883 + 9u;
    float _2222 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1923].w)) * _385) * 0.949999988079071044921875);
    float _2223 = _2222 * _2222;
    float _2224 = cbLight._m0[_1923].x + _463;
    float _2225 = cbLight._m0[_1923].y + _464;
    float _2226 = cbLight._m0[_1923].z + _465;
    float _2230 = inversesqrt(dot(vec3(_2224, _2225, _2226), vec3(_2224, _2225, _2226)));
    float _2231 = _2230 * _2224;
    float _2232 = _2230 * _2225;
    float _2233 = _2230 * _2226;
    float _2234 = dot(vec3(_382, _383, _384), vec3(cbLight._m0[_1923].xyz));
    float _4274 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
    float _2237 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
    float _2238 = dot(vec3(_382, _383, _384), vec3(_2231, _2232, _2233));
    float _4285 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
    float _2241 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
    float _2242 = dot(vec3(cbLight._m0[_1923].xyz), vec3(_2231, _2232, _2233));
    float _4296 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
    float _2246 = _2223 * _2223;
    float _2250 = ((_2241 * _2241) * (_2246 + (-1.0))) + 1.0;
    float _2259 = (exp2(log2(1.0 - (isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2260 = 1.0 - _2223;
    float _2270 = (0.5 / (((_2159 * ((_2237 * _2260) + _2223)) + 9.9999999392252902907785028219223e-09) + (((_2159 * _2260) + _2223) * _2237))) * _2237;
    float _4307 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
    float _2272 = (isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0))) * (_2246 / ((_2250 * _2250) * 3.141590118408203125));
    float _2282 = (((_2259 * cbLight._m0[_2211].x) * _2272) * _1906) + ((((cbLight._m0[_2130].x * _1872) * _2183) * _2197) * _1919);
    float _2283 = (((_2259 * cbLight._m0[_2211].y) * _2272) * _1906) + ((((cbLight._m0[_2130].y * _1874) * _2183) * _2197) * _1919);
    float _2284 = (((_2259 * cbLight._m0[_2211].z) * _2272) * _1906) + ((((cbLight._m0[_2130].z * _1876) * _2183) * _2197) * _1919);
    float _2340;
    float _2342;
    float _2344;
    if (_1959)
    {
        _2340 = _2282;
        _2342 = _2283;
        _2344 = _2284;
    }
    else
    {
        uint _2346 = _1883 + 2u;
        uint _2350 = _1883 + 10u;
        float _2364 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2346].w)) * _385) * 0.949999988079071044921875);
        float _2365 = _2364 * _2364;
        float _2366 = cbLight._m0[_2346].x + _463;
        float _2367 = cbLight._m0[_2346].y + _464;
        float _2368 = cbLight._m0[_2346].z + _465;
        float _2372 = inversesqrt(dot(vec3(_2366, _2367, _2368), vec3(_2366, _2367, _2368)));
        float _2373 = _2372 * _2366;
        float _2374 = _2372 * _2367;
        float _2375 = _2372 * _2368;
        float _2376 = dot(vec3(_382, _383, _384), vec3(cbLight._m0[_2346].xyz));
        float _4318 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
        float _2379 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
        float _2380 = dot(vec3(_382, _383, _384), vec3(_2373, _2374, _2375));
        float _4329 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
        float _2383 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
        float _2384 = dot(vec3(cbLight._m0[_2346].xyz), vec3(_2373, _2374, _2375));
        float _4340 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
        float _2388 = _2365 * _2365;
        float _2392 = ((_2383 * _2383) * (_2388 + (-1.0))) + 1.0;
        float _2401 = (exp2(log2(1.0 - (isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2402 = 1.0 - _2365;
        float _2412 = (0.5 / (((_2159 * ((_2379 * _2402) + _2365)) + 9.9999999392252902907785028219223e-09) + (((_2159 * _2402) + _2365) * _2379))) * _2379;
        float _4351 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
        float _2414 = (isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0))) * (_2388 / ((_2392 * _2392) * 3.141590118408203125));
        float _2415 = isnan(1.0) ? _1898 : (isnan(_1898) ? 1.0 : min(_1898, 1.0));
        _2340 = (((_2401 * cbLight._m0[_2350].x) * _2414) * _2415) + _2282;
        _2342 = (((_2401 * cbLight._m0[_2350].y) * _2414) * _2415) + _2283;
        _2344 = (((_2401 * cbLight._m0[_2350].z) * _2414) * _2415) + _2284;
    }
    float _2446;
    float _2448;
    float _2450;
    if (_2068)
    {
        _2446 = _2340;
        _2448 = _2342;
        _2450 = _2344;
    }
    else
    {
        uint _2457 = _1883 + 3u;
        uint _2461 = _1883 + 11u;
        float _2475 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2457].w)) * _385) * 0.949999988079071044921875);
        float _2476 = _2475 * _2475;
        float _2477 = cbLight._m0[_2457].x + _463;
        float _2478 = cbLight._m0[_2457].y + _464;
        float _2479 = cbLight._m0[_2457].z + _465;
        float _2483 = inversesqrt(dot(vec3(_2477, _2478, _2479), vec3(_2477, _2478, _2479)));
        float _2484 = _2483 * _2477;
        float _2485 = _2483 * _2478;
        float _2486 = _2483 * _2479;
        float _2487 = dot(vec3(_382, _383, _384), vec3(cbLight._m0[_2457].xyz));
        float _4367 = isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0));
        float _2490 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
        float _2491 = dot(vec3(_382, _383, _384), vec3(_2484, _2485, _2486));
        float _4378 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0));
        float _2494 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
        float _2495 = dot(vec3(cbLight._m0[_2457].xyz), vec3(_2484, _2485, _2486));
        float _4389 = isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : max(_2495, 0.0));
        float _2499 = _2476 * _2476;
        float _2503 = ((_2494 * _2494) * (_2499 + (-1.0))) + 1.0;
        float _2512 = (exp2(log2(1.0 - (isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2513 = 1.0 - _2476;
        float _2523 = (0.5 / (((_2159 * ((_2490 * _2513) + _2476)) + 9.9999999392252902907785028219223e-09) + (((_2159 * _2513) + _2476) * _2490))) * _2490;
        float _4400 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
        float _2525 = (isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0))) * (_2499 / ((_2503 * _2503) * 3.141590118408203125));
        float _2526 = isnan(1.0) ? _1899 : (isnan(_1899) ? 1.0 : min(_1899, 1.0));
        _2446 = (((_2512 * cbLight._m0[_2461].x) * _2525) * _2526) + _2340;
        _2448 = (((_2512 * cbLight._m0[_2461].y) * _2525) * _2526) + _2342;
        _2450 = (((_2512 * cbLight._m0[_2461].z) * _2525) * _2526) + _2344;
    }
    float _2591;
    float _2593;
    float _2595;
    float _2597;
    float _2599;
    float _2601;
    if (_1881.y == 0u)
    {
        uvec4 _2547 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2548 = _2547.x;
        uint _2559 = uint((float(_2547.y) * floor(float(uint(cbSceneParam._m0[85u].y * _485) / _2548))) + floor(float(uint(cbSceneParam._m0[85u].x * _484) / _2548)));
        float _2569 = (log2(_1659 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2570 = isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0));
        uint _2573 = uint(isnan(14.0) ? _2570 : (isnan(_2570) ? 14.0 : min(_2570, 14.0)));
        uvec4 _2578 = texelFetch(g_lightClusterGridBuffer, int(((_2573 << 2u) + (_2559 << 6u)) >> 2u));
        uint _2579 = _2578.x;
        uint _2580 = _2547.z;
        float _2658;
        float _2660;
        float _2662;
        float _2664;
        float _2666;
        float _2668;
        if (((((1u << ((_2580 >> 4u) & 15u)) + 4294967295u) & _2579) == 0u) || ((_2580 & 240u) == 0u))
        {
            _2658 = 0.0;
            _2660 = 0.0;
            _2662 = 0.0;
            _2664 = 0.0;
            _2666 = 0.0;
            _2668 = 0.0;
        }
        else
        {
            float _2659;
            float _2661;
            float _2663;
            float _2665;
            float _2667;
            float _2669;
            float _2810 = 0.0;
            float _2811 = 0.0;
            float _2812 = 0.0;
            float _2813 = 0.0;
            float _2814 = 0.0;
            float _2815 = 0.0;
            uint _2816 = 0u;
            uint _2825;
            bool _2826;
            for (;;)
            {
                _2825 = texelFetch(g_lightClassification, int((((_2573 << 5u) + (_2559 << 9u)) + (_2816 << 2u)) >> 2u)).x;
                _2826 = _2825 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_2826)
                {
                    frontier_phi_73_pred = _2815;
                    frontier_phi_73_pred_1 = _2814;
                    frontier_phi_73_pred_2 = _2813;
                    frontier_phi_73_pred_3 = _2812;
                    frontier_phi_73_pred_4 = _2811;
                    frontier_phi_73_pred_5 = _2810;
                }
                else
                {
                    float _2955;
                    float _2956;
                    float _2957;
                    float _2958;
                    float _2959;
                    float _2960;
                    uint _2961;
                    _2955 = _2810;
                    _2956 = _2811;
                    _2957 = _2812;
                    _2958 = _2813;
                    _2959 = _2814;
                    _2960 = _2815;
                    _2961 = _2825;
                    float _2882;
                    float _2883;
                    float _2884;
                    float _2885;
                    float _2886;
                    float _2887;
                    for (;;)
                    {
                        uint _2965 = uint(findLSB(_2961)) + (_2816 << 5u);
                        uint _2962 = (_2961 + 4294967295u) & _2961;
                        uint _2967 = _2965 * 48u;
                        vec4 _2981 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2967)).x, texelFetch(g_PointLightRenderingBuffer, int(_2967 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2967 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2967 + 3u)).x));
                        uint _2987 = (_2965 * 48u) + 4u;
                        vec4 _3000 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2987)).x, texelFetch(g_PointLightRenderingBuffer, int(_2987 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2987 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2987 + 3u)).x));
                        uint _3006 = (_2965 * 48u) + 8u;
                        vec3 _3017 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3006)).x, texelFetch(g_PointLightRenderingBuffer, int(_3006 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3006 + 2u)).x));
                        float _3021 = _2981.x - _1657;
                        float _3022 = _2981.y - _1658;
                        float _3023 = _2981.z - _1659;
                        float _3024 = dot(vec3(_3021, _3022, _3023), vec3(_3021, _3022, _3023));
                        float _3027 = inversesqrt(_3024);
                        float _3028 = _3027 * _3021;
                        float _3029 = _3027 * _3022;
                        float _3030 = _3027 * _3023;
                        float _3031 = dot(vec3(_505, _508, _511), vec3(_3028, _3029, _3030));
                        float _3036 = 1.0 - (_3024 * _2981.w);
                        float _4426 = isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : max(_3036, 0.0));
                        float _3037 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
                        float _3038 = sqrt(_3024) * _3000.w;
                        float _3041 = 1.39999997615814208984375 / (_3038 + 1.39999997615814208984375);
                        float _3042 = _3041 * _3041;
                        float _3045 = ((1.0 - _3042) * _3031) + _3042;
                        float _3048 = _3038 * _3038;
                        float _3052 = ((isnan(0.0) ? _3045 : (isnan(_3045) ? 0.0 : max(_3045, 0.0))) * _3037) / ((_3048 * 0.699999988079071044921875) + 1.0);
                        float _3056 = (-0.0) - _1657;
                        float _3057 = (-0.0) - _1658;
                        float _3058 = (-0.0) - _1659;
                        float _3062 = inversesqrt(dot(vec3(_3056, _3057, _3058), vec3(_3056, _3057, _3058)));
                        float _3063 = _3062 * _3056;
                        float _3064 = _3062 * _3057;
                        float _3065 = _3062 * _3058;
                        float _3072 = exp2(log2(1.0 / ((_3048 * 3.5) + 5.0)) * 0.25);
                        float _3073 = 1.0 - _566;
                        float _3080 = sqrt(1.0 - ((1.0 - (_3073 * _3073)) * (1.0 - (_3072 * _3072))));
                        float _3081 = _3080 * _3080;
                        float _3082 = _3081 * _3081;
                        float _3083 = _3063 + _3028;
                        float _3084 = _3064 + _3029;
                        float _3085 = _3065 + _3030;
                        float _3089 = inversesqrt(dot(vec3(_3083, _3084, _3085), vec3(_3083, _3084, _3085)));
                        float _3093 = dot(vec3(_505, _508, _511), vec3(_3063, _3064, _3065));
                        float _4442 = isnan(0.0) ? _3093 : (isnan(_3093) ? 0.0 : max(_3093, 0.0));
                        float _3096 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
                        float _3097 = dot(vec3(_505, _508, _511), vec3(_3089 * _3083, _3089 * _3084, _3089 * _3085));
                        float _4453 = isnan(0.0) ? _3097 : (isnan(_3097) ? 0.0 : max(_3097, 0.0));
                        float _3100 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
                        float _3104 = ((_3100 * _3100) * (_3082 + (-1.0))) + 1.0;
                        float _3105 = _3041 * _3081;
                        float _3106 = _3105 * _3105;
                        float _3109 = ((1.0 - _3106) * _3031) + _3106;
                        float _4464 = isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : max(_3109, 0.0));
                        float _3110 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
                        float _3111 = 1.0 - _3081;
                        float _3121 = (0.5 / (((_3110 * ((_3096 * _3111) + _3081)) + 9.9999999392252902907785028219223e-09) + (((_3110 * _3111) + _3081) * _3096))) * _3110;
                        float _4475 = isnan(0.0) ? _3121 : (isnan(_3121) ? 0.0 : max(_3121, 0.0));
                        float _3132 = (((_3082 * 3.1415927410125732421875) * (isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0)))) / ((_3104 * _3104) * ((_3048 * 2.1991131305694580078125) + 3.141590118408203125))) * _3037;
                        _2885 = (_3052 * _3000.x) + _2958;
                        _2886 = (_3052 * _3000.y) + _2959;
                        _2887 = (_3052 * _3000.z) + _2960;
                        _2882 = (_3132 * _3017.x) + _2955;
                        _2883 = (_3132 * _3017.y) + _2956;
                        _2884 = (_3132 * _3017.z) + _2957;
                        if (_2962 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2955 = _2882;
                            _2956 = _2883;
                            _2957 = _2884;
                            _2958 = _2885;
                            _2959 = _2886;
                            _2960 = _2887;
                            _2961 = _2962;
                        }
                    }
                    frontier_phi_73_pred = _2887;
                    frontier_phi_73_pred_1 = _2886;
                    frontier_phi_73_pred_2 = _2885;
                    frontier_phi_73_pred_3 = _2884;
                    frontier_phi_73_pred_4 = _2883;
                    frontier_phi_73_pred_5 = _2882;
                }
                _2669 = frontier_phi_73_pred;
                _2667 = frontier_phi_73_pred_1;
                _2665 = frontier_phi_73_pred_2;
                _2663 = frontier_phi_73_pred_3;
                _2661 = frontier_phi_73_pred_4;
                _2659 = frontier_phi_73_pred_5;
                uint _2817 = _2816 + 1u;
                if (_2817 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2810 = _2659;
                    _2811 = _2661;
                    _2812 = _2663;
                    _2813 = _2665;
                    _2814 = _2667;
                    _2815 = _2669;
                    _2816 = _2817;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2658 = _2659;
            _2660 = _2661;
            _2662 = _2663;
            _2664 = _2665;
            _2666 = _2667;
            _2668 = _2669;
        }
        uvec4 _2672 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2673 = _2672.z;
        uint _2675 = (_2673 >> 8u) & 15u;
        float _2778;
        float _2780;
        float _2782;
        float _2784;
        float _2786;
        float _2788;
        if (((4294967295u << _2675) & _2579) == 0u)
        {
            _2778 = _2658;
            _2780 = _2660;
            _2782 = _2662;
            _2784 = _2664;
            _2786 = _2666;
            _2788 = _2668;
        }
        else
        {
            float _2803 = inversesqrt(dot(vec3(_1657, _1658, _1659), vec3(_1657, _1658, _1659)));
            float _2804 = _2803 * _1657;
            float _2805 = _2803 * _1658;
            float _2806 = _2803 * _1659;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2675 < ((_2673 >> 12u) & 15u))
            {
                float _2779;
                float _2781;
                float _2783;
                float _2785;
                float _2787;
                float _2789;
                float _2938 = _2658;
                float _2939 = _2660;
                float _2940 = _2662;
                float _2941 = _2664;
                float _2942 = _2666;
                float _2943 = _2668;
                uint _2944 = _2675;
                uint _2953;
                bool _2954;
                for (;;)
                {
                    _2953 = texelFetch(g_lightClassification, int((((_2573 << 5u) + (_2559 << 9u)) + (_2944 << 2u)) >> 2u)).x;
                    _2954 = _2953 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_2954)
                    {
                        frontier_phi_84_pred = _2942;
                        frontier_phi_84_pred_1 = _2941;
                        frontier_phi_84_pred_2 = _2940;
                        frontier_phi_84_pred_3 = _2939;
                        frontier_phi_84_pred_4 = _2938;
                        frontier_phi_84_pred_5 = _2943;
                    }
                    else
                    {
                        float _3146;
                        float _3147;
                        float _3148;
                        float _3149;
                        float _3150;
                        float _3151;
                        float _3442;
                        float _3443;
                        float _3444;
                        float _3445;
                        float _3446;
                        float _3447;
                        float _3159 = _2938;
                        float _3160 = _2939;
                        float _3161 = _2940;
                        float _3162 = _2941;
                        float _3163 = _2942;
                        float _3164 = _2943;
                        uint _3165 = _2953;
                        uint _3166;
                        vec4 _3191;
                        float _3192;
                        vec4 _3207;
                        vec3 _3219;
                        vec4 _3235;
                        vec4 _3251;
                        float _3298;
                        bool _3299;
                        for (;;)
                        {
                            uint _3176 = ((_2944 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3165));
                            _3166 = (_3165 + 4294967295u) & _3165;
                            uint _3178 = _3176 * 40u;
                            _3191 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3178)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 3u)).x));
                            _3192 = _3191.w;
                            uint _3194 = (_3176 * 40u) + 4u;
                            _3207 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3194)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 3u)).x));
                            uint _3209 = (_3176 * 40u) + 8u;
                            _3219 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3209)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 2u)).x));
                            uint _3222 = (_3176 * 40u) + 16u;
                            _3235 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3222)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3222 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3222 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3222 + 3u)).x));
                            uint _3238 = (_3176 * 40u) + 20u;
                            _3251 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3238)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 3u)).x));
                            uint _3254 = (_3176 * 40u) + 24u;
                            vec4 _3267 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3254)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3254 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3254 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3254 + 3u)).x));
                            uint _3273 = (_3176 * 40u) + 28u;
                            vec4 _3286 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3273)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 3u)).x));
                            _3298 = fma(_1659, _3286.z, fma(_1658, _3286.y, _3286.x * _1657)) + _3286.w;
                            _3299 = !((fma(_1659, _3267.z, fma(_1658, _3267.y, _3267.x * _1657)) + _3267.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3299)
                            {
                                float _3326 = _3191.x - _1657;
                                float _3327 = _3191.y - _1658;
                                float _3328 = _3191.z - _1659;
                                float _3329 = dot(vec3(_3326, _3327, _3328), vec3(_3326, _3327, _3328));
                                float _3332 = inversesqrt(_3329);
                                float _3333 = _3332 * _3326;
                                float _3334 = _3332 * _3327;
                                float _3335 = _3332 * _3328;
                                float _3339 = 1.0 - (_3329 / (_3192 * _3192));
                                float _4486 = isnan(0.0) ? _3339 : (isnan(_3339) ? 0.0 : max(_3339, 0.0));
                                float _3340 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
                                float _3344 = sqrt(_3329) * _3207.w;
                                float _3346 = 1.39999997615814208984375 / (_3344 + 1.39999997615814208984375);
                                float _3347 = _3346 * _3346;
                                float _3350 = ((1.0 - _3347) * dot(vec3(_3333, _3334, _3335), vec3(_505, _508, _511))) + _3347;
                                float _3353 = _3344 * _3344;
                                float _3357 = (fma(_1659, _3235.z, fma(_1658, _3235.y, _3235.x * _1657)) + _3235.w) / _3298;
                                float _3358 = (fma(_1659, _3251.z, fma(_1658, _3251.y, _3251.x * _1657)) + _3251.w) / _3298;
                                float _3362 = 1.0 - dot(vec2(_3357, _3358), vec2(_3357, _3358));
                                float _4502 = isnan(0.0) ? _3362 : (isnan(_3362) ? 0.0 : max(_3362, 0.0));
                                float _3363 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
                                float _3364 = _3363 * (((isnan(0.0) ? _3350 : (isnan(_3350) ? 0.0 : max(_3350, 0.0))) * _3340) / ((_3353 * 0.699999988079071044921875) + 1.0));
                                float _3376 = exp2(log2(1.0 / ((_3353 * 3.5) + 5.0)) * 0.25);
                                float _3377 = 1.0 - _566;
                                float _3384 = sqrt(1.0 - ((1.0 - (_3377 * _3377)) * (1.0 - (_3376 * _3376))));
                                float _3385 = _3384 * _3384;
                                float _3386 = _3385 * _3385;
                                float _3387 = _3333 - _2804;
                                float _3388 = _3334 - _2805;
                                float _3389 = _3335 - _2806;
                                float _3393 = inversesqrt(dot(vec3(_3387, _3388, _3389), vec3(_3387, _3388, _3389)));
                                float _3397 = dot(vec3(_505, _508, _511), vec3((-0.0) - _2804, (-0.0) - _2805, (-0.0) - _2806));
                                float _4513 = isnan(0.0) ? _3397 : (isnan(_3397) ? 0.0 : max(_3397, 0.0));
                                float _3400 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
                                float _3401 = dot(vec3(_505, _508, _511), vec3(_3393 * _3387, _3393 * _3388, _3393 * _3389));
                                float _4524 = isnan(0.0) ? _3401 : (isnan(_3401) ? 0.0 : max(_3401, 0.0));
                                float _3404 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
                                float _3408 = ((_3404 * _3404) * (_3386 + (-1.0))) + 1.0;
                                float _3409 = _3346 * _3385;
                                float _3410 = _3409 * _3409;
                                float _3416 = ((1.0 - _3410) * dot(vec3(_505, _508, _511), vec3(_3333, _3334, _3335))) + _3410;
                                float _4535 = isnan(0.0) ? _3416 : (isnan(_3416) ? 0.0 : max(_3416, 0.0));
                                float _3417 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
                                float _3418 = 1.0 - _3385;
                                float _3428 = (0.5 / (((_3417 * ((_3400 * _3418) + _3385)) + 9.9999999392252902907785028219223e-09) + (((_3417 * _3418) + _3385) * _3400))) * _3417;
                                float _4546 = isnan(0.0) ? _3428 : (isnan(_3428) ? 0.0 : max(_3428, 0.0));
                                float _3438 = (_3363 * _3340) * (((_3386 * 3.1415927410125732421875) * (isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0)))) / ((_3408 * _3408) * ((_3353 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3364 * _3207.y;
                                frontier_phi_90_pred_1 = _3364 * _3207.x;
                                frontier_phi_90_pred_2 = _3438 * _3219.z;
                                frontier_phi_90_pred_3 = _3438 * _3219.y;
                                frontier_phi_90_pred_4 = _3438 * _3219.x;
                                frontier_phi_90_pred_5 = _3364 * _3207.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3446 = frontier_phi_90_pred;
                            _3445 = frontier_phi_90_pred_1;
                            _3444 = frontier_phi_90_pred_2;
                            _3443 = frontier_phi_90_pred_3;
                            _3442 = frontier_phi_90_pred_4;
                            _3447 = frontier_phi_90_pred_5;
                            _3149 = _3445 + _3162;
                            _3150 = _3446 + _3163;
                            _3151 = _3447 + _3164;
                            _3146 = _3442 + _3159;
                            _3147 = _3443 + _3160;
                            _3148 = _3444 + _3161;
                            if (_3166 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3159 = _3146;
                                _3160 = _3147;
                                _3161 = _3148;
                                _3162 = _3149;
                                _3163 = _3150;
                                _3164 = _3151;
                                _3165 = _3166;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3150;
                        frontier_phi_84_pred_1 = _3149;
                        frontier_phi_84_pred_2 = _3148;
                        frontier_phi_84_pred_3 = _3147;
                        frontier_phi_84_pred_4 = _3146;
                        frontier_phi_84_pred_5 = _3151;
                    }
                    _2787 = frontier_phi_84_pred;
                    _2785 = frontier_phi_84_pred_1;
                    _2783 = frontier_phi_84_pred_2;
                    _2781 = frontier_phi_84_pred_3;
                    _2779 = frontier_phi_84_pred_4;
                    _2789 = frontier_phi_84_pred_5;
                    uint _2945 = _2944 + 1u;
                    if (_2945 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2938 = _2779;
                        _2939 = _2781;
                        _2940 = _2783;
                        _2941 = _2785;
                        _2942 = _2787;
                        _2943 = _2789;
                        _2944 = _2945;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2789;
                frontier_phi_65_66_ladder_1 = _2785;
                frontier_phi_65_66_ladder_2 = _2787;
                frontier_phi_65_66_ladder_3 = _2781;
                frontier_phi_65_66_ladder_4 = _2779;
                frontier_phi_65_66_ladder_5 = _2783;
            }
            else
            {
                frontier_phi_65_66_ladder = _2668;
                frontier_phi_65_66_ladder_1 = _2664;
                frontier_phi_65_66_ladder_2 = _2666;
                frontier_phi_65_66_ladder_3 = _2660;
                frontier_phi_65_66_ladder_4 = _2658;
                frontier_phi_65_66_ladder_5 = _2662;
            }
            _2778 = frontier_phi_65_66_ladder_4;
            _2780 = frontier_phi_65_66_ladder_3;
            _2782 = frontier_phi_65_66_ladder_5;
            _2784 = frontier_phi_65_66_ladder_1;
            _2786 = frontier_phi_65_66_ladder_2;
            _2788 = frontier_phi_65_66_ladder;
        }
        float _2793 = isnan(1.0) ? _550 : (isnan(_550) ? 1.0 : min(_550, 1.0));
        _2591 = (_2793 * _2784) + _2123;
        _2593 = (_2793 * _2786) + _2125;
        _2595 = (_2793 * _2788) + _2127;
        _2597 = ((_2778 * 0.039999999105930328369140625) * _2793) + _2446;
        _2599 = ((_2780 * 0.039999999105930328369140625) * _2793) + _2448;
        _2601 = ((_2782 * 0.039999999105930328369140625) * _2793) + _2450;
    }
    else
    {
        _2591 = _2123;
        _2593 = _2125;
        _2595 = _2127;
        _2597 = _2446;
        _2599 = _2448;
        _2601 = _2450;
    }
    float _4562 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    float _4573 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _4584 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _2618 = ((isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0))) * (_2591 + ((isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0))) * _550))) + ((_2597 + ((isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0))) * _1388)) * cbPerFrame._m0[3u].x);
    float _2619 = ((isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0))) * (_2593 + ((isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0))) * _550))) + ((_2599 + ((isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0))) * _1388)) * cbPerFrame._m0[3u].x);
    float _2620 = ((isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0))) * (_2595 + ((isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0))) * _550))) + ((_2601 + ((isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0))) * _1388)) * cbPerFrame._m0[3u].x);
    uint _2621 = _524 + 6u;
    float _2629 = _484 / cbSceneParam._m0[86u].x;
    float _2630 = _485 / cbSceneParam._m0[86u].y;
    vec4 _2644 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2629, _2630, (log2((isnan(cbSceneParam._m0[77u].w) ? _404 : (isnan(_404) ? cbSceneParam._m0[77u].w : min(_404, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2646 = _2644.x;
    float _2647 = _2644.y;
    float _2648 = _2644.z;
    float _2649 = _2644.w;
    float _2720;
    float _2722;
    float _2724;
    float _2726;
    if (_404 > cbSceneParam._m0[78u].w)
    {
        float _2683 = isnan(_404) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _404 : min(cbSceneParam._m0[80u].w, _404));
        float _2684 = _2683 / _404;
        float _2695 = _2684 * _456;
        float _2696 = _457 * _2684;
        float _2697 = (-0.0) - _2696;
        float _2698 = _2684 * _458;
        float _2700 = (cbSceneParam._m0[77u].w * _2697) / _2683;
        float _2701 = _2700 + cbSceneParam._m0[79u].w;
        float _2702 = cbSceneParam._m0[79u].w - _2696;
        float _2708 = sqrt(((_2695 * _2695) + (_2696 * _2696)) + (_2698 * _2698));
        float _2711 = (1.0 - (cbSceneParam._m0[77u].w / _2683)) * _2708;
        float _2716 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2718 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2895;
        if (abs((_2697 - _2700) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2895 = ((((_2701 > 0.0) ? exp2(_2716 * _2701) : (2.0 - exp2(_2718 * _2701))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2711;
        }
        else
        {
            float _2839 = 1.0 / cbSceneParam._m0[80u].x;
            float _2840 = isnan(_2702) ? _2701 : (isnan(_2701) ? _2702 : max(_2701, _2702));
            float _2841 = isnan(_2702) ? _2701 : (isnan(_2701) ? _2702 : min(_2701, _2702));
            float _2850 = isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : min(_2840, 0.0));
            float _2851 = isnan(0.0) ? _2841 : (isnan(_2841) ? 0.0 : min(_2841, 0.0));
            _2895 = ((abs(_2708 / _2697) * cbSceneParam._m0[80u].y) * ((((_2850 - _2851) * 2.0) - ((exp2(_2716 * (isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : max(_2840, 0.0)))) - exp2(_2716 * (isnan(0.0) ? _2841 : (isnan(_2841) ? 0.0 : max(_2841, 0.0))))) * _2839)) - ((exp2(_2718 * _2850) - exp2(_2718 * _2851)) * _2839))) + (_2711 * cbSceneParam._m0[80u].z);
        }
        vec4 _2897 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2629, _2630, 1.0), 0.0);
        float _2906 = exp2((_2895 * (-1.44269502162933349609375)) * (1.0 - _2897.w));
        float _2907 = log2(_2906);
        float _2923 = log2(_2649);
        _2720 = (exp2(_2923 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2907 * cbSceneParam._m0[78u].x)) * _2897.x) / cbSceneParam._m0[78u].x)) + _2646;
        _2722 = (exp2(_2923 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2907 * cbSceneParam._m0[78u].y)) * _2897.y) / cbSceneParam._m0[78u].y)) + _2647;
        _2724 = (exp2(_2923 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2907 * cbSceneParam._m0[78u].z)) * _2897.z) / cbSceneParam._m0[78u].z)) + _2648;
        _2726 = _2906 * _2649;
    }
    else
    {
        _2720 = _2646;
        _2722 = _2647;
        _2724 = _2648;
        _2726 = _2649;
    }
    bool _2933;
    vec4 _2736;
    vec4 _2758;
    float _2760;
    float _2764;
    float _2765;
    float _2766;
    float _2767;
    bool _2777;
    for (;;)
    {
        _2736 = cbMatDynParam._m0[0u];
        float _2738 = roundEven(_2736.y);
        bool _2739 = _2738 == 3.0;
        float _2740 = log2(_2726);
        float _2747 = exp2(_2740 * cbSceneParam._m0[78u].x) * _2618;
        float _2748 = exp2(_2740 * cbSceneParam._m0[78u].y) * _2619;
        float _2749 = exp2(_2740 * cbSceneParam._m0[78u].z) * _2620;
        float _2756 = _472 + (-0.5);
        _2758 = cbMtdParam._m0[1u];
        _2760 = _2758.y * _2756;
        float _2763 = (_2738 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2764 = _2763 * (_2739 ? _2747 : (_2747 + (cbSceneParam._m0[72u].w * _2720)));
        _2765 = _2763 * (_2739 ? _2748 : (_2748 + (cbSceneParam._m0[72u].w * _2722)));
        _2766 = _2763 * (_2739 ? _2749 : (_2749 + (cbSceneParam._m0[72u].w * _2724)));
        _2767 = _2756 * 0.999000012874603271484375;
        _2777 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2777)
        {
            if ((cbInstanceData._m0[_524 + 7u].x + _2767) < 0.5)
            {
                _2933 = true;
                break;
            }
        }
        uint _2874 = _526 + uint(_2736.w);
        if ((cbInstanceData._m0[_2874].w < 1.0) && ((cbInstanceData._m0[_2874].w + _2767) < 0.5))
        {
            _2933 = true;
            break;
        }
        if ((_2760 + _254) < _2758.x)
        {
            _2933 = true;
            break;
        }
        _2933 = false;
        break;
    }
    float _3137;
    if (_2933)
    {
        discard_state = true;
        _3137 = 0.0;
    }
    else
    {
        _3137 = cbInstanceData._m0[_2621].w;
    }
    SV_Target.x = _2764;
    SV_Target.y = _2765;
    SV_Target.z = _2766;
    SV_Target.w = _3137;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2621].w;
    discard_exit();
}


