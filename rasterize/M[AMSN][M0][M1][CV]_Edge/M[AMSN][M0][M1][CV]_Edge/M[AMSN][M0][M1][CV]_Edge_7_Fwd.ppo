#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _934;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _188 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _189 = _188 * _180;
    float _190 = _188 * _181;
    float _191 = _188 * _182;
    float _195 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _196 = _195 * NORMAL.x;
    float _197 = _195 * NORMAL.y;
    float _198 = _195 * NORMAL.z;
    float _202 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _203 = _202 * TANGENT.x;
    float _204 = _202 * TANGENT.y;
    float _205 = _202 * TANGENT.z;
    float _210;
    float _211;
    float _212;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _210 = (-0.0) - _196;
        _211 = (-0.0) - _197;
        _212 = (-0.0) - _198;
    }
    else
    {
        _210 = _196;
        _211 = _197;
        _212 = _198;
    }
    vec4 _238 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _244 = _238.x * cbMtdParam._m0[9u].x;
    float _245 = _238.y * cbMtdParam._m0[9u].y;
    float _246 = _238.z * cbMtdParam._m0[9u].z;
    vec4 _264 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _268 = _264.z;
    float _272 = (_264.x * 2.0) + (-1.0);
    float _274 = (_264.y * 2.0) + (-1.0);
    float _275 = dot(vec2(_272, _274), vec2(_272, _274));
    float _3269 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    float _281 = sqrt(1.0 - (isnan(1.0) ? _3269 : (isnan(_3269) ? 1.0 : min(_3269, 1.0))));
    float _284 = fma(_281, _210, fma(_274, _203, _272 * _189));
    float _287 = fma(_281, _211, fma(_274, _204, _272 * _190));
    float _290 = fma(_281, _212, fma(_274, _205, _272 * _191));
    float _294 = inversesqrt(dot(vec3(_284, _287, _290), vec3(_284, _287, _290)));
    float _305 = cbMtdParam._m0[12u].x + dot(vec4(_294 * _284, _294 * _287, _294 * _290, 0.0), vec4(cbMtdParam._m0[13u].xyz, 0.0));
    float _3280 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _306 = isnan(1.0) ? _3280 : (isnan(_3280) ? 1.0 : min(_3280, 1.0));
    float _313 = (_306 * (cbMtdParam._m0[10u].x - _244)) + _244;
    float _314 = (_306 * (cbMtdParam._m0[10u].y - _245)) + _245;
    float _315 = (_306 * (cbMtdParam._m0[10u].z - _246)) + _246;
    vec4 _327 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _329 = _327.x;
    float _331 = _329 - (_329 * _306);
    vec4 _343 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _350 = (_343.x * 2.0) + (-1.0);
    float _351 = (_343.y * 2.0) + (-1.0);
    float _352 = dot(vec2(_350, _351), vec2(_350, _351));
    float _3291 = isnan(0.0) ? _352 : (isnan(_352) ? 0.0 : max(_352, 0.0));
    float _360 = ((_343.z - _268) * _306) + _268;
    float _372 = (((_350 - _272) + (cbMtdParam._m0[12u].w * _272)) * _306) + _272;
    float _373 = (((_351 - _274) + (cbMtdParam._m0[12u].w * _274)) * _306) + _274;
    float _374 = ((sqrt(1.0 - (isnan(1.0) ? _3291 : (isnan(_3291) ? 1.0 : min(_3291, 1.0)))) - _281) * _306) + _281;
    float _377 = fma(_374, _210, fma(_373, _203, _372 * _189));
    float _380 = fma(_374, _211, fma(_373, _204, _372 * _190));
    float _383 = fma(_374, _212, fma(_373, _205, _372 * _191));
    float _387 = inversesqrt(dot(vec3(_377, _380, _383), vec3(_377, _380, _383)));
    float _388 = _387 * _377;
    float _389 = _387 * _380;
    float _390 = _387 * _383;
    float _3302 = isnan(0.0) ? _360 : (isnan(_360) ? 0.0 : max(_360, 0.0));
    float _391 = isnan(1.0) ? _3302 : (isnan(_3302) ? 1.0 : min(_3302, 1.0));
    float _3313 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _3324 = isnan(0.0) ? _314 : (isnan(_314) ? 0.0 : max(_314, 0.0));
    float _3335 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _3346 = isnan(0.0) ? _331 : (isnan(_331) ? 0.0 : max(_331, 0.0));
    float _395 = isnan(1.0) ? _3346 : (isnan(_3346) ? 1.0 : min(_3346, 1.0));
    float _411 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _453 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _463 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _453);
    float _464 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _453);
    float _465 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _453);
    float _469 = inversesqrt(dot(vec3(_463, _464, _465), vec3(_463, _464, _465)));
    float _470 = _463 * _469;
    float _471 = _464 * _469;
    float _472 = _465 * _469;
    float _478 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _479 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _500 = fma(_390, cbSceneParam._m0[5u].z, fma(_389, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _388));
    float _503 = fma(_390, cbSceneParam._m0[6u].z, fma(_389, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _388));
    float _506 = fma(_390, cbSceneParam._m0[7u].z, fma(_389, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _388));
    uint _519 = uint(roundEven(NORMAL.w)) * 13u;
    uint _521 = (_519 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _527 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3313 : (isnan(_3313) ? 1.0 : min(_3313, 1.0)))) * cbInstanceData._m0[_521].x;
    float _528 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3324 : (isnan(_3324) ? 1.0 : min(_3324, 1.0)))) * cbInstanceData._m0[_521].y;
    float _529 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3335 : (isnan(_3335) ? 1.0 : min(_3335, 1.0)))) * cbInstanceData._m0[_521].z;
    float _3357 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _530 = isnan(1.0) ? _3357 : (isnan(_3357) ? 1.0 : min(_3357, 1.0));
    float _3368 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _531 = isnan(1.0) ? _3368 : (isnan(_3368) ? 1.0 : min(_3368, 1.0));
    float _3379 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _532 = isnan(1.0) ? _3379 : (isnan(_3379) ? 1.0 : min(_3379, 1.0));
    float _533 = 1.0 - _395;
    float _534 = _530 * _533;
    float _535 = _531 * _533;
    float _536 = _532 * _533;
    float _541 = (_530 + (-0.039999999105930328369140625)) * _395;
    float _542 = (_531 + (-0.039999999105930328369140625)) * _395;
    float _543 = (_532 + (-0.039999999105930328369140625)) * _395;
    float _544 = _541 + 0.039999999105930328369140625;
    float _546 = _542 + 0.039999999105930328369140625;
    float _547 = _543 + 0.039999999105930328369140625;
    vec4 _556 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _478, cbSceneParam._m0[86u].y * _479));
    float _559 = _556.x * TEXCOORD_3.w;
    float _560 = dot(vec3(_388, _389, _390), vec3(_470, _471, _472));
    float _563 = _560 * 2.0;
    float _567 = (_563 * _388) - _470;
    float _568 = (_563 * _389) - _471;
    float _569 = (_563 * _390) - _472;
    float _573 = abs(dot(vec3(_470, _471, _472), vec3(_388, _389, _390)));
    float _3390 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _575 = sqrt(_391);
    float _588 = exp2((_575 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_575 * 3.0));
    float _594 = (1.0 - _588) * ((_575 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _595 = _588 * _575;
    float _623 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _627 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _631 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _933;
    float _935;
    float _936;
    float _937;
    float _938;
    float _939;
    float _940;
    float _941;
    float _942;
    float _943;
    float _944;
    float _945;
    float _946;
    float _947;
    float _948;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _658 = fma(_631, cbModelParam._m0[26u].z, fma(_627, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _623));
        float _662 = fma(_631, cbModelParam._m0[27u].z, fma(_627, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _623));
        float _666 = fma(_631, cbModelParam._m0[28u].z, fma(_627, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _623));
        float _691 = _623 + _388;
        float _692 = _627 + _389;
        float _693 = _631 + _390;
        float _703 = fma(_693, cbModelParam._m0[26u].z, fma(_692, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _691)) - _658;
        float _704 = fma(_693, cbModelParam._m0[27u].z, fma(_692, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _691)) - _662;
        float _705 = fma(_693, cbModelParam._m0[28u].z, fma(_692, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _691)) - _666;
        float _709 = inversesqrt(dot(vec3(_703, _704, _705), vec3(_703, _704, _705)));
        float _722 = ((_709 * _703) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_658 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _723 = ((_709 * _704) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_662 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _724 = ((_709 * _705) / cbModelParam._m0[34u].z) + ((((((_666 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _727 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_722, _723, _724), 0.0);
        vec4 _734 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_722, _723, _724), 0.0);
        vec4 _741 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_722, _723, _724), 0.0);
        vec4 _748 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_722, _723, _724), 0.0);
        float _761 = exp2((_727.w + (-0.5)) * 20.0) * 2.0;
        float _762 = _761 * (_727.x + (-0.5));
        float _763 = _761 * (_727.y + (-0.5));
        float _764 = _761 * (_727.z + (-0.5));
        float _771 = exp2((_734.w + (-0.5)) * 20.0) * 2.0;
        float _772 = _771 * (_734.x + (-0.5));
        float _773 = _771 * (_734.y + (-0.5));
        float _774 = _771 * (_734.z + (-0.5));
        float _781 = exp2((_741.w + (-0.5)) * 20.0) * 2.0;
        float _782 = _781 * (_741.x + (-0.5));
        float _783 = _781 * (_741.y + (-0.5));
        float _784 = _781 * (_741.z + (-0.5));
        float _791 = exp2((_748.w + (-0.5)) * 20.0) * 2.0;
        float _792 = _791 * (_748.x + (-0.5));
        float _793 = _791 * (_748.y + (-0.5));
        float _794 = _791 * (_748.z + (-0.5));
        float _795 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
        float _796 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
        float _797 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
        float _798 = _762 * 0.5;
        float _799 = _772 * 0.5;
        float _800 = _782 * 0.5;
        float _801 = dot(vec3(_798, _799, _800), vec3(_798, _799, _800));
        float _806 = (_801 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_801);
        float _815 = (dot(vec3(_388, _389, _390), vec3(_806 * _798, _806 * _799, _806 * _800)) + 1.0) * 0.5;
        float _3416 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
        float _825 = sqrt(((_799 * _799) + (_798 * _798)) + (_800 * _800)) / (_795 + 9.9999997473787516355514526367188e-06);
        float _3427 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
        float _826 = isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0));
        float _827 = _826 * 2.0;
        float _831 = (1.0 - _826) / (_826 + 1.0);
        float _3438 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
        float _832 = isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0));
        float _841 = ((((1.0 - _832) * (_827 + 2.0)) * exp2(log2(isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0))) * (_827 + 1.0))) + _832) * _795;
        float _842 = _763 * 0.5;
        float _843 = _773 * 0.5;
        float _844 = _783 * 0.5;
        float _845 = dot(vec3(_842, _843, _844), vec3(_842, _843, _844));
        float _850 = (_845 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_845);
        float _858 = (dot(vec3(_388, _389, _390), vec3(_850 * _842, _850 * _843, _850 * _844)) + 1.0) * 0.5;
        float _3449 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
        float _867 = sqrt(((_843 * _843) + (_842 * _842)) + (_844 * _844)) / (_796 + 9.9999997473787516355514526367188e-06);
        float _3460 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
        float _868 = isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0));
        float _869 = _868 * 2.0;
        float _873 = (1.0 - _868) / (_868 + 1.0);
        float _3471 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
        float _874 = isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0));
        float _883 = ((((1.0 - _874) * (_869 + 2.0)) * exp2(log2(isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0))) * (_869 + 1.0))) + _874) * _796;
        float _884 = _764 * 0.5;
        float _885 = _774 * 0.5;
        float _886 = _784 * 0.5;
        float _887 = dot(vec3(_884, _885, _886), vec3(_884, _885, _886));
        float _892 = (_887 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_887);
        float _900 = (dot(vec3(_388, _389, _390), vec3(_892 * _884, _892 * _885, _892 * _886)) + 1.0) * 0.5;
        float _3482 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
        float _909 = sqrt(((_885 * _885) + (_884 * _884)) + (_886 * _886)) / (_797 + 9.9999997473787516355514526367188e-06);
        float _3493 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
        float _910 = isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0));
        float _911 = _910 * 2.0;
        float _915 = (1.0 - _910) / (_910 + 1.0);
        float _3504 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
        float _916 = isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0));
        float _925 = ((((1.0 - _916) * (_911 + 2.0)) * exp2(log2(isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0))) * (_911 + 1.0))) + _916) * _797;
        _933 = _764;
        _935 = _763;
        _936 = _762;
        _937 = _774;
        _938 = _773;
        _939 = _772;
        _940 = _784;
        _941 = _783;
        _942 = _782;
        _943 = _797;
        _944 = _796;
        _945 = _795;
        _946 = cbModelParam._m0[36u].z * (isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0)));
        _947 = cbModelParam._m0[36u].z * (isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0)));
        _948 = cbModelParam._m0[36u].z * (isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0)));
    }
    else
    {
        _933 = _934;
        _935 = _934;
        _936 = _934;
        _937 = _934;
        _938 = _934;
        _939 = _934;
        _940 = _934;
        _941 = _934;
        _942 = _934;
        _943 = _934;
        _944 = _934;
        _945 = _934;
        _946 = 0.0;
        _947 = 0.0;
        _948 = 0.0;
    }
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _974 = fma(_631, cbModelParam._m0[30u].z, fma(_627, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _623));
        float _978 = fma(_631, cbModelParam._m0[31u].z, fma(_627, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _623));
        float _982 = fma(_631, cbModelParam._m0[32u].z, fma(_627, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _623));
        float _1005 = _623 + _388;
        float _1006 = _627 + _389;
        float _1007 = _631 + _390;
        float _1017 = fma(_1007, cbModelParam._m0[30u].z, fma(_1006, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1005)) - _974;
        float _1018 = fma(_1007, cbModelParam._m0[31u].z, fma(_1006, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1005)) - _978;
        float _1019 = fma(_1007, cbModelParam._m0[32u].z, fma(_1006, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1005)) - _982;
        float _1023 = inversesqrt(dot(vec3(_1017, _1018, _1019), vec3(_1017, _1018, _1019)));
        float _1036 = ((_1023 * _1017) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_974 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1037 = ((_1023 * _1018) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_978 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1038 = ((_1023 * _1019) / cbModelParam._m0[35u].z) + ((((((_982 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1040 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1036, _1037, _1038), 0.0);
        vec4 _1047 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1036, _1037, _1038), 0.0);
        vec4 _1054 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1036, _1037, _1038), 0.0);
        vec4 _1061 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1036, _1037, _1038), 0.0);
        float _1073 = exp2((_1040.w + (-0.5)) * 20.0) * 2.0;
        float _1074 = _1073 * (_1040.x + (-0.5));
        float _1075 = _1073 * (_1040.y + (-0.5));
        float _1076 = _1073 * (_1040.z + (-0.5));
        float _1083 = exp2((_1047.w + (-0.5)) * 20.0) * 2.0;
        float _1084 = _1083 * (_1047.x + (-0.5));
        float _1085 = _1083 * (_1047.y + (-0.5));
        float _1086 = _1083 * (_1047.z + (-0.5));
        float _1093 = exp2((_1054.w + (-0.5)) * 20.0) * 2.0;
        float _1094 = _1093 * (_1054.x + (-0.5));
        float _1095 = _1093 * (_1054.y + (-0.5));
        float _1096 = _1093 * (_1054.z + (-0.5));
        float _1103 = exp2((_1061.w + (-0.5)) * 20.0) * 2.0;
        float _1104 = _1103 * (_1061.x + (-0.5));
        float _1105 = _1103 * (_1061.y + (-0.5));
        float _1106 = _1103 * (_1061.z + (-0.5));
        float _1107 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1108 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1109 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1110 = _1074 * 0.5;
        float _1111 = _1084 * 0.5;
        float _1112 = _1094 * 0.5;
        float _1113 = dot(vec3(_1110, _1111, _1112), vec3(_1110, _1111, _1112));
        float _1118 = (_1113 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1113);
        float _1126 = (dot(vec3(_388, _389, _390), vec3(_1118 * _1110, _1118 * _1111, _1118 * _1112)) + 1.0) * 0.5;
        float _3545 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1135 = sqrt(((_1111 * _1111) + (_1110 * _1110)) + (_1112 * _1112)) / (_1107 + 9.9999997473787516355514526367188e-06);
        float _3556 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1136 = isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0));
        float _1137 = _1136 * 2.0;
        float _1141 = (1.0 - _1136) / (_1136 + 1.0);
        float _3567 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1142 = isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0));
        float _1151 = ((((1.0 - _1142) * (_1137 + 2.0)) * exp2(log2(isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0))) * (_1137 + 1.0))) + _1142) * _1107;
        float _1152 = _1075 * 0.5;
        float _1153 = _1085 * 0.5;
        float _1154 = _1095 * 0.5;
        float _1155 = dot(vec3(_1152, _1153, _1154), vec3(_1152, _1153, _1154));
        float _1160 = (_1155 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1155);
        float _1168 = (dot(vec3(_388, _389, _390), vec3(_1160 * _1152, _1160 * _1153, _1160 * _1154)) + 1.0) * 0.5;
        float _3578 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1177 = sqrt(((_1153 * _1153) + (_1152 * _1152)) + (_1154 * _1154)) / (_1108 + 9.9999997473787516355514526367188e-06);
        float _3589 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1178 = isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0));
        float _1179 = _1178 * 2.0;
        float _1183 = (1.0 - _1178) / (_1178 + 1.0);
        float _3600 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1184 = isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0));
        float _1193 = ((((1.0 - _1184) * (_1179 + 2.0)) * exp2(log2(isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0))) * (_1179 + 1.0))) + _1184) * _1108;
        float _1194 = _1076 * 0.5;
        float _1195 = _1086 * 0.5;
        float _1196 = _1096 * 0.5;
        float _1197 = dot(vec3(_1194, _1195, _1196), vec3(_1194, _1195, _1196));
        float _1202 = (_1197 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1197);
        float _1210 = (dot(vec3(_388, _389, _390), vec3(_1202 * _1194, _1202 * _1195, _1202 * _1196)) + 1.0) * 0.5;
        float _3611 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1219 = sqrt(((_1195 * _1195) + (_1194 * _1194)) + (_1196 * _1196)) / (_1109 + 9.9999997473787516355514526367188e-06);
        float _3622 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1220 = isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0));
        float _1221 = _1220 * 2.0;
        float _1225 = (1.0 - _1220) / (_1220 + 1.0);
        float _3633 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1226 = isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0));
        float _1235 = ((((1.0 - _1226) * (_1221 + 2.0)) * exp2(log2(isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0))) * (_1221 + 1.0))) + _1226) * _1109;
        _1243 = _1076;
        _1244 = _1075;
        _1245 = _1074;
        _1246 = _1086;
        _1247 = _1085;
        _1248 = _1084;
        _1249 = _1096;
        _1250 = _1095;
        _1251 = _1094;
        _1252 = _1109;
        _1253 = _1108;
        _1254 = _1107;
        _1255 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0)));
        _1256 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0)));
        _1257 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0)));
    }
    else
    {
        _1243 = _934;
        _1244 = _934;
        _1245 = _934;
        _1246 = _934;
        _1247 = _934;
        _1248 = _934;
        _1249 = _934;
        _1250 = _934;
        _1251 = _934;
        _1252 = _934;
        _1253 = _934;
        _1254 = _934;
        _1255 = 0.0;
        _1256 = 0.0;
        _1257 = 0.0;
    }
    float _1267 = (cbModelParam._m0[1u].x * (_1255 - _946)) + _946;
    float _1268 = (cbModelParam._m0[1u].x * (_1256 - _947)) + _947;
    float _1269 = (cbModelParam._m0[1u].x * (_1257 - _948)) + _948;
    float _1290 = fma(_1269, cbSceneParam._m0[89u].z, fma(_1268, cbSceneParam._m0[89u].y, _1267 * cbSceneParam._m0[89u].x));
    float _1293 = fma(_1269, cbSceneParam._m0[90u].z, fma(_1268, cbSceneParam._m0[90u].y, _1267 * cbSceneParam._m0[90u].x));
    float _1296 = fma(_1269, cbSceneParam._m0[91u].z, fma(_1268, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1267));
    float _1311 = _567 * 0.5;
    float _1312 = _568 * 0.5;
    float _1313 = _569 * 0.5;
    float _1314 = dot(vec4(_1311, _1312, _1313, 1.0), vec4(_1245, _1248, _1251, _1254));
    float _1317 = dot(vec4(_1311, _1312, _1313, 1.0), vec4(_1244, _1247, _1250, _1253));
    float _1320 = dot(vec4(_1311, _1312, _1313, 1.0), vec4(_1243, _1246, _1249, _1252));
    float _1354;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1327 = dot(vec4(_1311, _1312, _1313, 1.0), vec4(_933, _937, _940, _943));
        float _1331 = dot(vec4(_1311, _1312, _1313, 1.0), vec4(_935, _938, _941, _944));
        float _1335 = dot(vec4(_1311, _1312, _1313, 1.0), vec4(_936, _939, _942, _945));
        float _1342 = dot(vec4(cbModelParam._m0[39u]), vec4(_1311, _1312, _1313, 1.0));
        _1354 = dot(vec3(isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0)), isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0)), isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1342) ? 0.0 : (isnan(0.0) ? _1342 : max(0.0, _1342))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1354 = 1.0;
    }
    float _1365;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1356 = dot(vec4(cbModelParam._m0[40u]), vec4(_1311, _1312, _1313, 1.0));
        _1365 = dot(vec3(isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0)), isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0)), isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1356) ? 0.0 : (isnan(0.0) ? _1356 : max(0.0, _1356))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1365 = 1.0;
    }
    float _1369 = (_1365 * cbModelParam._m0[1u].x) + (_1354 * (1.0 - cbModelParam._m0[1u].x));
    float _1379 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _391);
    float _1380 = isnan(_1379) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1379 : min(cbModelParam._m0[25u].z, _1379));
    float _1461;
    float _1463;
    float _1465;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1428 = fma(_631, cbModelParam._m0[13u].z, fma(_627, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _623)) + cbModelParam._m0[13u].w;
        float _1432 = fma(_631, cbModelParam._m0[14u].z, fma(_627, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _623)) + cbModelParam._m0[14u].w;
        float _1436 = fma(_631, cbModelParam._m0[15u].z, fma(_627, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _623)) + cbModelParam._m0[15u].w;
        float _1439 = fma(_569, cbModelParam._m0[13u].z, fma(_568, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _567));
        float _1442 = fma(_569, cbModelParam._m0[14u].z, fma(_568, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _567));
        float _1445 = fma(_569, cbModelParam._m0[15u].z, fma(_568, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _567));
        float _1473;
        if (_1439 > 0.0)
        {
            _1473 = abs((1.0 - _1428) / _1439);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1439 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1428 + 1.0) / _1439);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1473 = frontier_phi_16_14_ladder;
        }
        float _1680;
        if (_1442 > 0.0)
        {
            _1680 = abs((1.0 - _1432) / _1442);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1442 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1432 + 1.0) / _1442);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1680 = frontier_phi_25_21_ladder;
        }
        float _1934;
        if (_1445 > 0.0)
        {
            _1934 = abs((1.0 - _1436) / _1445);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1445 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1436 + 1.0) / _1445);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1934 = frontier_phi_37_32_ladder;
        }
        float _1936 = isnan(_1680) ? _1473 : (isnan(_1473) ? _1680 : min(_1473, _1680));
        float _1937 = isnan(_1934) ? _1936 : (isnan(_1936) ? _1934 : min(_1936, _1934));
        float _1941 = (_1937 * _1439) + _1428;
        float _1942 = (_1937 * _1442) + _1432;
        float _1943 = (_1937 * _1445) + _1436;
        float _1944 = _1937 * 9.9999997473787516355514526367188e-05;
        float _1946 = (-1.0) - _1944;
        float _1948 = _1944 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1943 > _1948) || ((_1943 < _1946) || ((_1942 > _1948) || ((_1942 < _1946) || ((_1941 < _1946) || (_1941 > _1948))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2071 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1943, cbModelParam._m0[9u].z, fma(_1942, cbModelParam._m0[9u].y, _1941 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1943, cbModelParam._m0[10u].z, fma(_1942, cbModelParam._m0[10u].y, _1941 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1943, cbModelParam._m0[11u].z, fma(_1942, cbModelParam._m0[11u].y, _1941 * cbModelParam._m0[11u].x))), _1380);
            frontier_phi_15_37_ladder = _2071.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2071.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2071.x * cbModelParam._m0[1u].y;
        }
        _1461 = frontier_phi_15_37_ladder_2;
        _1463 = frontier_phi_15_37_ladder_1;
        _1465 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1449 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_567, _568, _569), _1380);
        _1461 = _1449.x * cbModelParam._m0[1u].y;
        _1463 = _1449.y * cbModelParam._m0[1u].y;
        _1465 = _1449.z * cbModelParam._m0[1u].y;
    }
    float _1469 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _391);
    float _1470 = isnan(_1469) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1469 : min(cbModelParam._m0[25u].w, _1469));
    float _1563;
    float _1565;
    float _1567;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1527 = fma(_631, cbModelParam._m0[21u].z, fma(_627, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _623)) + cbModelParam._m0[21u].w;
        float _1531 = fma(_631, cbModelParam._m0[22u].z, fma(_627, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _623)) + cbModelParam._m0[22u].w;
        float _1535 = fma(_631, cbModelParam._m0[23u].z, fma(_627, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _623)) + cbModelParam._m0[23u].w;
        float _1538 = fma(_569, cbModelParam._m0[21u].z, fma(_568, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _567));
        float _1541 = fma(_569, cbModelParam._m0[22u].z, fma(_568, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _567));
        float _1544 = fma(_569, cbModelParam._m0[23u].z, fma(_568, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _567));
        float _1685;
        if (_1538 > 0.0)
        {
            _1685 = abs((1.0 - _1527) / _1538);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1538 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1527 + 1.0) / _1538);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1685 = frontier_phi_27_23_ladder;
        }
        float _1961;
        if (_1541 > 0.0)
        {
            _1961 = abs((1.0 - _1531) / _1541);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1541 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1531 + 1.0) / _1541);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1961 = frontier_phi_39_34_ladder;
        }
        float _2174;
        if (_1544 > 0.0)
        {
            _2174 = abs((1.0 - _1535) / _1544);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1544 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1535 + 1.0) / _1544);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2174 = frontier_phi_48_45_ladder;
        }
        float _2176 = isnan(_1961) ? _1685 : (isnan(_1685) ? _1961 : min(_1685, _1961));
        float _2177 = isnan(_2174) ? _2176 : (isnan(_2176) ? _2174 : min(_2176, _2174));
        float _2181 = (_2177 * _1538) + _1527;
        float _2182 = (_2177 * _1541) + _1531;
        float _2183 = (_2177 * _1544) + _1535;
        float _2184 = _2177 * 9.9999997473787516355514526367188e-05;
        float _2185 = (-1.0) - _2184;
        float _2187 = _2184 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2183 > _2187) || ((_2183 < _2185) || ((_2182 > _2187) || ((_2182 < _2185) || ((_2181 < _2185) || (_2181 > _2187))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2381 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2183, cbModelParam._m0[17u].z, fma(_2182, cbModelParam._m0[17u].y, _2181 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2183, cbModelParam._m0[18u].z, fma(_2182, cbModelParam._m0[18u].y, _2181 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2183, cbModelParam._m0[19u].z, fma(_2182, cbModelParam._m0[19u].y, _2181 * cbModelParam._m0[19u].x))), _1470);
            frontier_phi_24_48_ladder = _2381.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2381.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2381.x * cbModelParam._m0[1u].z;
        }
        _1563 = frontier_phi_24_48_ladder_2;
        _1565 = frontier_phi_24_48_ladder_1;
        _1567 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1547 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_567, _568, _569), _1470);
        _1563 = _1547.x * cbModelParam._m0[1u].z;
        _1565 = _1547.y * cbModelParam._m0[1u].z;
        _1567 = _1547.z * cbModelParam._m0[1u].z;
    }
    float _1580 = (((_594 * _544) + _595) * _559) * ((cbModelParam._m0[1u].w * (_1563 - _1461)) + _1461);
    float _1582 = (((_594 * _546) + _595) * _559) * ((cbModelParam._m0[1u].w * (_1565 - _1463)) + _1463);
    float _1584 = (((_594 * _547) + _595) * _559) * ((cbModelParam._m0[1u].w * (_1567 - _1465)) + _1465);
    float _1587 = fma(_1584, cbSceneParam._m0[89u].z, fma(_1582, cbSceneParam._m0[89u].y, _1580 * cbSceneParam._m0[89u].x));
    float _1590 = fma(_1584, cbSceneParam._m0[90u].z, fma(_1582, cbSceneParam._m0[90u].y, _1580 * cbSceneParam._m0[90u].x));
    float _1593 = fma(_1584, cbSceneParam._m0[91u].z, fma(_1582, cbSceneParam._m0[91u].y, _1580 * cbSceneParam._m0[91u].x));
    uvec4 _1603 = floatBitsToUint(cbInstanceData._m0[_519 + 5u]);
    uint _1605 = _1603.x * 14u;
    uint _1606 = _1605 + 13u;
    float _1613 = _559 + (-1.0);
    float _1618 = (cbLight._m0[_1606].x * _1613) + 1.0;
    float _1619 = (cbLight._m0[_1606].y * _1613) + 1.0;
    float _1620 = (cbLight._m0[_1606].z * _1613) + 1.0;
    float _1621 = (cbLight._m0[_1606].w * _1613) + 1.0;
    uint _1622 = _1605 + 5u;
    float _1628 = isnan(1.0) ? _1619 : (isnan(_1619) ? 1.0 : min(_1619, 1.0));
    uint _1632 = _1605 + 4u;
    float _1639 = isnan(1.0) ? _1618 : (isnan(_1618) ? 1.0 : min(_1618, 1.0));
    uint _1643 = _1605 | 1u;
    float _1654 = dot(vec3(cbLight._m0[_1605].xyz), vec3(_388, _389, _390));
    float _1657 = dot(vec3(cbLight._m0[_1643].xyz), vec3(_388, _389, _390));
    float _3769 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
    float _3780 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
    float _1662 = (isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0))) * 0.3183098733425140380859375;
    float _1664 = (isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0))) * 0.3183098733425140380859375;
    float _1671 = ((cbLight._m0[_1622].x * _1628) * _1664) + ((cbLight._m0[_1632].x * _1639) * _1662);
    float _1672 = ((_1628 * cbLight._m0[_1622].y) * _1664) + ((_1639 * cbLight._m0[_1632].y) * _1662);
    float _1673 = ((_1628 * cbLight._m0[_1622].z) * _1664) + ((_1639 * cbLight._m0[_1632].z) * _1662);
    uvec4 _1677 = floatBitsToUint(cbLight._m0[_1605 + 12u]);
    bool _1679 = _1677.x == 0u;
    float _1690;
    float _1692;
    float _1694;
    if (_1679)
    {
        _1690 = _1671;
        _1692 = _1672;
        _1694 = _1673;
    }
    else
    {
        uint _1698 = _1605 + 6u;
        float _1714 = (dot(vec3(cbLight._m0[_1605 + 2u].xyz), vec3(_388, _389, _390)) * 0.5) + 0.5;
        float _1715 = _1714 * _1714;
        float _3791 = isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0));
        float _1716 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
        float _1717 = isnan(1.0) ? _1620 : (isnan(_1620) ? 1.0 : min(_1620, 1.0));
        _1690 = (((cbLight._m0[_1698].x * 0.3183098733425140380859375) * _1716) * _1717) + _1671;
        _1692 = (((cbLight._m0[_1698].y * 0.3183098733425140380859375) * _1716) * _1717) + _1672;
        _1694 = (((cbLight._m0[_1698].z * 0.3183098733425140380859375) * _1716) * _1717) + _1673;
    }
    bool _1697 = _1677.y == 0u;
    float _1735;
    float _1737;
    float _1739;
    if (_1697)
    {
        _1735 = _1690;
        _1737 = _1692;
        _1739 = _1694;
    }
    else
    {
        uint _1905 = _1605 + 7u;
        float _1921 = (dot(vec3(cbLight._m0[_1605 + 3u].xyz), vec3(_388, _389, _390)) * 0.5) + 0.5;
        float _1922 = _1921 * _1921;
        float _3807 = isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0));
        float _1923 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
        float _1924 = isnan(1.0) ? _1621 : (isnan(_1621) ? 1.0 : min(_1621, 1.0));
        _1735 = (((cbLight._m0[_1905].x * 0.3183098733425140380859375) * _1923) * _1924) + _1690;
        _1737 = (((cbLight._m0[_1905].y * 0.3183098733425140380859375) * _1923) * _1924) + _1692;
        _1739 = (((cbLight._m0[_1905].z * 0.3183098733425140380859375) * _1923) * _1924) + _1694;
    }
    uint _1742 = _1605 + 8u;
    float _1755 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1605].w)) * _391) * 0.949999988079071044921875);
    float _1756 = _1755 * _1755;
    float _1757 = cbLight._m0[_1605].x + _470;
    float _1758 = cbLight._m0[_1605].y + _471;
    float _1759 = cbLight._m0[_1605].z + _472;
    float _1763 = inversesqrt(dot(vec3(_1757, _1758, _1759), vec3(_1757, _1758, _1759)));
    float _1764 = _1763 * _1757;
    float _1765 = _1763 * _1758;
    float _1766 = _1763 * _1759;
    float _1767 = dot(vec3(_388, _389, _390), vec3(cbLight._m0[_1605].xyz));
    float _3823 = isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0));
    float _1770 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
    float _3834 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _1771 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
    float _1772 = dot(vec3(_388, _389, _390), vec3(_1764, _1765, _1766));
    float _3845 = isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0));
    float _1775 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
    float _1776 = dot(vec3(cbLight._m0[_1605].xyz), vec3(_1764, _1765, _1766));
    float _3856 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
    float _1780 = _1756 * _1756;
    float _1784 = ((_1775 * _1775) * (_1780 + (-1.0))) + 1.0;
    float _1792 = exp2(log2(1.0 - (isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0)))) * 5.0);
    float _1793 = 0.959999978542327880859375 - _541;
    float _1795 = 0.959999978542327880859375 - _542;
    float _1796 = 0.959999978542327880859375 - _543;
    float _1803 = 1.0 - _1756;
    float _1814 = (0.5 / (((_1771 * ((_1770 * _1803) + _1756)) + 9.9999999392252902907785028219223e-09) + (((_1771 * _1803) + _1756) * _1770))) * _1770;
    float _3867 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
    float _1816 = (isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0))) * (_1780 / ((_1784 * _1784) * 3.141590118408203125));
    uint _1827 = _1605 + 9u;
    float _1838 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1643].w)) * _391) * 0.949999988079071044921875);
    float _1839 = _1838 * _1838;
    float _1840 = cbLight._m0[_1643].x + _470;
    float _1841 = cbLight._m0[_1643].y + _471;
    float _1842 = cbLight._m0[_1643].z + _472;
    float _1846 = inversesqrt(dot(vec3(_1840, _1841, _1842), vec3(_1840, _1841, _1842)));
    float _1847 = _1846 * _1840;
    float _1848 = _1846 * _1841;
    float _1849 = _1846 * _1842;
    float _1850 = dot(vec3(_388, _389, _390), vec3(cbLight._m0[_1643].xyz));
    float _3878 = isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0));
    float _1853 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
    float _1854 = dot(vec3(_388, _389, _390), vec3(_1847, _1848, _1849));
    float _3889 = isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0));
    float _1857 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
    float _1858 = dot(vec3(cbLight._m0[_1643].xyz), vec3(_1847, _1848, _1849));
    float _3900 = isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0));
    float _1862 = _1839 * _1839;
    float _1866 = ((_1857 * _1857) * (_1862 + (-1.0))) + 1.0;
    float _1873 = exp2(log2(1.0 - (isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0)))) * 5.0);
    float _1880 = 1.0 - _1839;
    float _1890 = (0.5 / (((_1771 * ((_1853 * _1880) + _1839)) + 9.9999999392252902907785028219223e-09) + (((_1771 * _1880) + _1839) * _1853))) * _1853;
    float _3911 = isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0));
    float _1892 = (isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0))) * (_1862 / ((_1866 * _1866) * 3.141590118408203125));
    float _1902 = (((((_1873 * _1793) + _544) * cbLight._m0[_1827].x) * _1892) * _1628) + (((((_1792 * _1793) + _544) * cbLight._m0[_1742].x) * _1816) * _1639);
    float _1903 = (((((_1873 * _1795) + _546) * cbLight._m0[_1827].y) * _1892) * _1628) + (((((_1792 * _1795) + _546) * cbLight._m0[_1742].y) * _1816) * _1639);
    float _1904 = (((((_1873 * _1796) + _547) * cbLight._m0[_1827].z) * _1892) * _1628) + (((((_1792 * _1796) + _547) * cbLight._m0[_1742].z) * _1816) * _1639);
    float _1966;
    float _1968;
    float _1970;
    if (_1679)
    {
        _1966 = _1902;
        _1968 = _1903;
        _1970 = _1904;
    }
    else
    {
        uint _1972 = _1605 + 2u;
        uint _1976 = _1605 + 10u;
        float _1990 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1972].w)) * _391) * 0.949999988079071044921875);
        float _1991 = _1990 * _1990;
        float _1992 = cbLight._m0[_1972].x + _470;
        float _1993 = cbLight._m0[_1972].y + _471;
        float _1994 = cbLight._m0[_1972].z + _472;
        float _1998 = inversesqrt(dot(vec3(_1992, _1993, _1994), vec3(_1992, _1993, _1994)));
        float _1999 = _1998 * _1992;
        float _2000 = _1998 * _1993;
        float _2001 = _1998 * _1994;
        float _2002 = dot(vec3(_388, _389, _390), vec3(cbLight._m0[_1972].xyz));
        float _3922 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
        float _2005 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
        float _2006 = dot(vec3(_388, _389, _390), vec3(_1999, _2000, _2001));
        float _3933 = isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0));
        float _2009 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
        float _2010 = dot(vec3(cbLight._m0[_1972].xyz), vec3(_1999, _2000, _2001));
        float _3944 = isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0));
        float _2014 = _1991 * _1991;
        float _2018 = ((_2009 * _2009) * (_2014 + (-1.0))) + 1.0;
        float _2025 = exp2(log2(1.0 - (isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0)))) * 5.0);
        float _2032 = 1.0 - _1991;
        float _2042 = (0.5 / (((_1771 * ((_2005 * _2032) + _1991)) + 9.9999999392252902907785028219223e-09) + (((_1771 * _2032) + _1991) * _2005))) * _2005;
        float _3955 = isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0));
        float _2044 = (isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0))) * (_2014 / ((_2018 * _2018) * 3.141590118408203125));
        float _2045 = isnan(1.0) ? _1620 : (isnan(_1620) ? 1.0 : min(_1620, 1.0));
        _1966 = (((((_2025 * _1793) + _544) * cbLight._m0[_1976].x) * _2044) * _2045) + _1902;
        _1968 = (((((_2025 * _1795) + _546) * cbLight._m0[_1976].y) * _2044) * _2045) + _1903;
        _1970 = (((((_2025 * _1796) + _547) * cbLight._m0[_1976].z) * _2044) * _2045) + _1904;
    }
    float _2080;
    float _2082;
    float _2084;
    if (_1697)
    {
        _2080 = _1966;
        _2082 = _1968;
        _2084 = _1970;
    }
    else
    {
        uint _2091 = _1605 + 3u;
        uint _2095 = _1605 + 11u;
        float _2109 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2091].w)) * _391) * 0.949999988079071044921875);
        float _2110 = _2109 * _2109;
        float _2111 = cbLight._m0[_2091].x + _470;
        float _2112 = cbLight._m0[_2091].y + _471;
        float _2113 = cbLight._m0[_2091].z + _472;
        float _2117 = inversesqrt(dot(vec3(_2111, _2112, _2113), vec3(_2111, _2112, _2113)));
        float _2118 = _2117 * _2111;
        float _2119 = _2117 * _2112;
        float _2120 = _2117 * _2113;
        float _2121 = dot(vec3(_388, _389, _390), vec3(cbLight._m0[_2091].xyz));
        float _3971 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
        float _2124 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
        float _2125 = dot(vec3(_388, _389, _390), vec3(_2118, _2119, _2120));
        float _3982 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
        float _2128 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
        float _2129 = dot(vec3(cbLight._m0[_2091].xyz), vec3(_2118, _2119, _2120));
        float _3993 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
        float _2133 = _2110 * _2110;
        float _2137 = ((_2128 * _2128) * (_2133 + (-1.0))) + 1.0;
        float _2144 = exp2(log2(1.0 - (isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0)))) * 5.0);
        float _2151 = 1.0 - _2110;
        float _2161 = (0.5 / (((_1771 * ((_2124 * _2151) + _2110)) + 9.9999999392252902907785028219223e-09) + (((_1771 * _2151) + _2110) * _2124))) * _2124;
        float _4004 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
        float _2163 = (isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0))) * (_2133 / ((_2137 * _2137) * 3.141590118408203125));
        float _2164 = isnan(1.0) ? _1621 : (isnan(_1621) ? 1.0 : min(_1621, 1.0));
        _2080 = (((((_2144 * _1793) + _544) * cbLight._m0[_2095].x) * _2163) * _2164) + _1966;
        _2082 = (((((_2144 * _1795) + _546) * cbLight._m0[_2095].y) * _2163) * _2164) + _1968;
        _2084 = (((((_2144 * _1796) + _547) * cbLight._m0[_2095].z) * _2163) * _2164) + _1970;
    }
    float _2298;
    float _2300;
    float _2302;
    float _2304;
    float _2306;
    float _2308;
    if (_1603.y == 0u)
    {
        float _2239 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2240 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2239;
        float _2241 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2239;
        float _2242 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2239;
        uvec4 _2254 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2255 = _2254.x;
        uint _2266 = uint((float(_2254.y) * floor(float(uint(cbSceneParam._m0[85u].y * _479) / _2255))) + floor(float(uint(cbSceneParam._m0[85u].x * _478) / _2255)));
        float _2276 = (log2(_2242 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2277 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
        uint _2280 = uint(isnan(14.0) ? _2277 : (isnan(_2277) ? 14.0 : min(_2277, 14.0)));
        uvec4 _2285 = texelFetch(g_lightClusterGridBuffer, int(((_2280 << 2u) + (_2266 << 6u)) >> 2u));
        uint _2286 = _2285.x;
        uint _2287 = _2254.z;
        float _2386;
        float _2388;
        float _2390;
        float _2392;
        float _2394;
        float _2396;
        if (((((1u << ((_2287 >> 4u) & 15u)) + 4294967295u) & _2286) == 0u) || ((_2287 & 240u) == 0u))
        {
            _2386 = 0.0;
            _2388 = 0.0;
            _2390 = 0.0;
            _2392 = 0.0;
            _2394 = 0.0;
            _2396 = 0.0;
        }
        else
        {
            float _2387;
            float _2389;
            float _2391;
            float _2393;
            float _2395;
            float _2397;
            float _2530 = 0.0;
            float _2531 = 0.0;
            float _2532 = 0.0;
            float _2533 = 0.0;
            float _2534 = 0.0;
            float _2535 = 0.0;
            uint _2536 = 0u;
            uint _2545;
            bool _2546;
            for (;;)
            {
                _2545 = texelFetch(g_lightClassification, int((((_2280 << 5u) + (_2266 << 9u)) + (_2536 << 2u)) >> 2u)).x;
                _2546 = _2545 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2546)
                {
                    frontier_phi_63_pred = _2535;
                    frontier_phi_63_pred_1 = _2534;
                    frontier_phi_63_pred_2 = _2533;
                    frontier_phi_63_pred_3 = _2532;
                    frontier_phi_63_pred_4 = _2531;
                    frontier_phi_63_pred_5 = _2530;
                }
                else
                {
                    float _2654;
                    float _2655;
                    float _2656;
                    float _2657;
                    float _2658;
                    float _2659;
                    uint _2660;
                    _2654 = _2530;
                    _2655 = _2531;
                    _2656 = _2532;
                    _2657 = _2533;
                    _2658 = _2534;
                    _2659 = _2535;
                    _2660 = _2545;
                    float _2586;
                    float _2587;
                    float _2588;
                    float _2589;
                    float _2590;
                    float _2591;
                    for (;;)
                    {
                        uint _2664 = uint(findLSB(_2660)) + (_2536 << 5u);
                        uint _2661 = (_2660 + 4294967295u) & _2660;
                        uint _2666 = _2664 * 48u;
                        vec4 _2680 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2666)).x, texelFetch(g_PointLightRenderingBuffer, int(_2666 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2666 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2666 + 3u)).x));
                        uint _2686 = (_2664 * 48u) + 4u;
                        vec4 _2699 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2686)).x, texelFetch(g_PointLightRenderingBuffer, int(_2686 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2686 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2686 + 3u)).x));
                        uint _2705 = (_2664 * 48u) + 8u;
                        vec3 _2716 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2705)).x, texelFetch(g_PointLightRenderingBuffer, int(_2705 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2705 + 2u)).x));
                        float _2720 = _2680.x - _2240;
                        float _2721 = _2680.y - _2241;
                        float _2722 = _2680.z - _2242;
                        float _2723 = dot(vec3(_2720, _2721, _2722), vec3(_2720, _2721, _2722));
                        float _2726 = inversesqrt(_2723);
                        float _2727 = _2726 * _2720;
                        float _2728 = _2726 * _2721;
                        float _2729 = _2726 * _2722;
                        float _2730 = dot(vec3(_500, _503, _506), vec3(_2727, _2728, _2729));
                        float _2735 = 1.0 - (_2723 * _2680.w);
                        float _4030 = isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : max(_2735, 0.0));
                        float _2736 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
                        float _2737 = sqrt(_2723) * _2699.w;
                        float _2740 = 1.39999997615814208984375 / (_2737 + 1.39999997615814208984375);
                        float _2741 = _2740 * _2740;
                        float _2744 = ((1.0 - _2741) * _2730) + _2741;
                        float _2747 = _2737 * _2737;
                        float _2751 = ((isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : max(_2744, 0.0))) * _2736) / ((_2747 * 0.699999988079071044921875) + 1.0);
                        float _2755 = (-0.0) - _2240;
                        float _2756 = (-0.0) - _2241;
                        float _2757 = (-0.0) - _2242;
                        float _2761 = inversesqrt(dot(vec3(_2755, _2756, _2757), vec3(_2755, _2756, _2757)));
                        float _2762 = _2761 * _2755;
                        float _2763 = _2761 * _2756;
                        float _2764 = _2761 * _2757;
                        float _2772 = exp2(log2(1.0 / ((_2747 * 3.5) + 5.0)) * 0.25);
                        float _2773 = 1.0 - _575;
                        float _2780 = sqrt(1.0 - ((1.0 - (_2773 * _2773)) * (1.0 - (_2772 * _2772))));
                        float _2781 = _2780 * _2780;
                        float _2782 = _2781 * _2781;
                        float _2783 = _2762 + _2727;
                        float _2784 = _2763 + _2728;
                        float _2785 = _2764 + _2729;
                        float _2789 = inversesqrt(dot(vec3(_2783, _2784, _2785), vec3(_2783, _2784, _2785)));
                        float _2793 = dot(vec3(_500, _503, _506), vec3(_2762, _2763, _2764));
                        float _4046 = isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : max(_2793, 0.0));
                        float _2796 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
                        float _2797 = dot(vec3(_500, _503, _506), vec3(_2789 * _2783, _2789 * _2784, _2789 * _2785));
                        float _4057 = isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : max(_2797, 0.0));
                        float _2800 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
                        float _2804 = ((_2800 * _2800) * (_2782 + (-1.0))) + 1.0;
                        float _2805 = _2740 * _2781;
                        float _2806 = _2805 * _2805;
                        float _2809 = ((1.0 - _2806) * _2730) + _2806;
                        float _4068 = isnan(0.0) ? _2809 : (isnan(_2809) ? 0.0 : max(_2809, 0.0));
                        float _2810 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
                        float _2811 = 1.0 - _2781;
                        float _2821 = (0.5 / (((_2810 * ((_2796 * _2811) + _2781)) + 9.9999999392252902907785028219223e-09) + (((_2810 * _2811) + _2781) * _2796))) * _2810;
                        float _4079 = isnan(0.0) ? _2821 : (isnan(_2821) ? 0.0 : max(_2821, 0.0));
                        float _2832 = (((_2782 * 3.1415927410125732421875) * (isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0)))) / ((_2804 * _2804) * ((_2747 * 2.1991131305694580078125) + 3.141590118408203125))) * _2736;
                        _2589 = (_2751 * _2699.x) + _2657;
                        _2590 = (_2751 * _2699.y) + _2658;
                        _2591 = (_2751 * _2699.z) + _2659;
                        _2586 = (_2832 * _2716.x) + _2654;
                        _2587 = (_2832 * _2716.y) + _2655;
                        _2588 = (_2832 * _2716.z) + _2656;
                        if (_2661 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2654 = _2586;
                            _2655 = _2587;
                            _2656 = _2588;
                            _2657 = _2589;
                            _2658 = _2590;
                            _2659 = _2591;
                            _2660 = _2661;
                        }
                    }
                    frontier_phi_63_pred = _2591;
                    frontier_phi_63_pred_1 = _2590;
                    frontier_phi_63_pred_2 = _2589;
                    frontier_phi_63_pred_3 = _2588;
                    frontier_phi_63_pred_4 = _2587;
                    frontier_phi_63_pred_5 = _2586;
                }
                _2397 = frontier_phi_63_pred;
                _2395 = frontier_phi_63_pred_1;
                _2393 = frontier_phi_63_pred_2;
                _2391 = frontier_phi_63_pred_3;
                _2389 = frontier_phi_63_pred_4;
                _2387 = frontier_phi_63_pred_5;
                uint _2537 = _2536 + 1u;
                if (_2537 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2530 = _2387;
                    _2531 = _2389;
                    _2532 = _2391;
                    _2533 = _2393;
                    _2534 = _2395;
                    _2535 = _2397;
                    _2536 = _2537;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2386 = _2387;
            _2388 = _2389;
            _2390 = _2391;
            _2392 = _2393;
            _2394 = _2395;
            _2396 = _2397;
        }
        uvec4 _2400 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2401 = _2400.z;
        uint _2403 = (_2401 >> 8u) & 15u;
        float _2498;
        float _2500;
        float _2502;
        float _2504;
        float _2506;
        float _2508;
        if (((4294967295u << _2403) & _2286) == 0u)
        {
            _2498 = _2386;
            _2500 = _2388;
            _2502 = _2390;
            _2504 = _2392;
            _2506 = _2394;
            _2508 = _2396;
        }
        else
        {
            float _2523 = inversesqrt(dot(vec3(_2240, _2241, _2242), vec3(_2240, _2241, _2242)));
            float _2524 = _2523 * _2240;
            float _2525 = _2523 * _2241;
            float _2526 = _2523 * _2242;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2403 < ((_2401 >> 12u) & 15u))
            {
                float _2499;
                float _2501;
                float _2503;
                float _2505;
                float _2507;
                float _2509;
                float _2637 = _2386;
                float _2638 = _2388;
                float _2639 = _2390;
                float _2640 = _2392;
                float _2641 = _2394;
                float _2642 = _2396;
                uint _2643 = _2403;
                uint _2652;
                bool _2653;
                for (;;)
                {
                    _2652 = texelFetch(g_lightClassification, int((((_2280 << 5u) + (_2266 << 9u)) + (_2643 << 2u)) >> 2u)).x;
                    _2653 = _2652 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2653)
                    {
                        frontier_phi_69_pred = _2642;
                        frontier_phi_69_pred_1 = _2641;
                        frontier_phi_69_pred_2 = _2640;
                        frontier_phi_69_pred_3 = _2639;
                        frontier_phi_69_pred_4 = _2638;
                        frontier_phi_69_pred_5 = _2637;
                    }
                    else
                    {
                        float _2837;
                        float _2838;
                        float _2839;
                        float _2840;
                        float _2841;
                        float _2842;
                        float _3133;
                        float _3134;
                        float _3135;
                        float _3136;
                        float _3137;
                        float _3138;
                        float _2850 = _2637;
                        float _2851 = _2638;
                        float _2852 = _2639;
                        float _2853 = _2640;
                        float _2854 = _2641;
                        float _2855 = _2642;
                        uint _2856 = _2652;
                        uint _2857;
                        vec4 _2882;
                        float _2883;
                        vec4 _2898;
                        vec3 _2910;
                        vec4 _2926;
                        vec4 _2942;
                        float _2989;
                        bool _2990;
                        for (;;)
                        {
                            uint _2867 = ((_2643 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2856));
                            _2857 = (_2856 + 4294967295u) & _2856;
                            uint _2869 = _2867 * 40u;
                            _2882 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2869)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2869 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2869 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2869 + 3u)).x));
                            _2883 = _2882.w;
                            uint _2885 = (_2867 * 40u) + 4u;
                            _2898 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2885)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2885 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2885 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2885 + 3u)).x));
                            uint _2900 = (_2867 * 40u) + 8u;
                            _2910 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2900)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2900 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2900 + 2u)).x));
                            uint _2913 = (_2867 * 40u) + 16u;
                            _2926 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2913)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2913 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2913 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2913 + 3u)).x));
                            uint _2929 = (_2867 * 40u) + 20u;
                            _2942 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2929)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2929 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2929 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2929 + 3u)).x));
                            uint _2945 = (_2867 * 40u) + 24u;
                            vec4 _2958 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2945)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2945 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2945 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2945 + 3u)).x));
                            uint _2964 = (_2867 * 40u) + 28u;
                            vec4 _2977 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2964)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2964 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2964 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2964 + 3u)).x));
                            _2989 = fma(_2242, _2977.z, fma(_2241, _2977.y, _2977.x * _2240)) + _2977.w;
                            _2990 = !((fma(_2242, _2958.z, fma(_2241, _2958.y, _2958.x * _2240)) + _2958.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2990)
                            {
                                float _3017 = _2882.x - _2240;
                                float _3018 = _2882.y - _2241;
                                float _3019 = _2882.z - _2242;
                                float _3020 = dot(vec3(_3017, _3018, _3019), vec3(_3017, _3018, _3019));
                                float _3023 = inversesqrt(_3020);
                                float _3024 = _3023 * _3017;
                                float _3025 = _3023 * _3018;
                                float _3026 = _3023 * _3019;
                                float _3030 = 1.0 - (_3020 / (_2883 * _2883));
                                float _4090 = isnan(0.0) ? _3030 : (isnan(_3030) ? 0.0 : max(_3030, 0.0));
                                float _3031 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
                                float _3035 = sqrt(_3020) * _2898.w;
                                float _3037 = 1.39999997615814208984375 / (_3035 + 1.39999997615814208984375);
                                float _3038 = _3037 * _3037;
                                float _3041 = ((1.0 - _3038) * dot(vec3(_3024, _3025, _3026), vec3(_500, _503, _506))) + _3038;
                                float _3044 = _3035 * _3035;
                                float _3048 = (fma(_2242, _2926.z, fma(_2241, _2926.y, _2926.x * _2240)) + _2926.w) / _2989;
                                float _3049 = (fma(_2242, _2942.z, fma(_2241, _2942.y, _2942.x * _2240)) + _2942.w) / _2989;
                                float _3053 = 1.0 - dot(vec2(_3048, _3049), vec2(_3048, _3049));
                                float _4106 = isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : max(_3053, 0.0));
                                float _3054 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
                                float _3055 = _3054 * (((isnan(0.0) ? _3041 : (isnan(_3041) ? 0.0 : max(_3041, 0.0))) * _3031) / ((_3044 * 0.699999988079071044921875) + 1.0));
                                float _3067 = exp2(log2(1.0 / ((_3044 * 3.5) + 5.0)) * 0.25);
                                float _3068 = 1.0 - _575;
                                float _3075 = sqrt(1.0 - ((1.0 - (_3068 * _3068)) * (1.0 - (_3067 * _3067))));
                                float _3076 = _3075 * _3075;
                                float _3077 = _3076 * _3076;
                                float _3078 = _3024 - _2524;
                                float _3079 = _3025 - _2525;
                                float _3080 = _3026 - _2526;
                                float _3084 = inversesqrt(dot(vec3(_3078, _3079, _3080), vec3(_3078, _3079, _3080)));
                                float _3088 = dot(vec3(_500, _503, _506), vec3((-0.0) - _2524, (-0.0) - _2525, (-0.0) - _2526));
                                float _4117 = isnan(0.0) ? _3088 : (isnan(_3088) ? 0.0 : max(_3088, 0.0));
                                float _3091 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
                                float _3092 = dot(vec3(_500, _503, _506), vec3(_3084 * _3078, _3084 * _3079, _3084 * _3080));
                                float _4128 = isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : max(_3092, 0.0));
                                float _3095 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
                                float _3099 = ((_3095 * _3095) * (_3077 + (-1.0))) + 1.0;
                                float _3100 = _3037 * _3076;
                                float _3101 = _3100 * _3100;
                                float _3107 = ((1.0 - _3101) * dot(vec3(_500, _503, _506), vec3(_3024, _3025, _3026))) + _3101;
                                float _4139 = isnan(0.0) ? _3107 : (isnan(_3107) ? 0.0 : max(_3107, 0.0));
                                float _3108 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
                                float _3109 = 1.0 - _3076;
                                float _3119 = (0.5 / (((_3108 * ((_3091 * _3109) + _3076)) + 9.9999999392252902907785028219223e-09) + (((_3108 * _3109) + _3076) * _3091))) * _3108;
                                float _4150 = isnan(0.0) ? _3119 : (isnan(_3119) ? 0.0 : max(_3119, 0.0));
                                float _3129 = (_3054 * _3031) * (((_3077 * 3.1415927410125732421875) * (isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0)))) / ((_3099 * _3099) * ((_3044 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3055 * _2898.z;
                                frontier_phi_75_pred_1 = _3055 * _2898.y;
                                frontier_phi_75_pred_2 = _3055 * _2898.x;
                                frontier_phi_75_pred_3 = _3129 * _2910.z;
                                frontier_phi_75_pred_4 = _3129 * _2910.y;
                                frontier_phi_75_pred_5 = _3129 * _2910.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3138 = frontier_phi_75_pred;
                            _3137 = frontier_phi_75_pred_1;
                            _3136 = frontier_phi_75_pred_2;
                            _3135 = frontier_phi_75_pred_3;
                            _3134 = frontier_phi_75_pred_4;
                            _3133 = frontier_phi_75_pred_5;
                            _2840 = _3136 + _2853;
                            _2841 = _3137 + _2854;
                            _2842 = _3138 + _2855;
                            _2837 = _3133 + _2850;
                            _2838 = _3134 + _2851;
                            _2839 = _3135 + _2852;
                            if (_2857 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2850 = _2837;
                                _2851 = _2838;
                                _2852 = _2839;
                                _2853 = _2840;
                                _2854 = _2841;
                                _2855 = _2842;
                                _2856 = _2857;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2842;
                        frontier_phi_69_pred_1 = _2841;
                        frontier_phi_69_pred_2 = _2840;
                        frontier_phi_69_pred_3 = _2839;
                        frontier_phi_69_pred_4 = _2838;
                        frontier_phi_69_pred_5 = _2837;
                    }
                    _2509 = frontier_phi_69_pred;
                    _2507 = frontier_phi_69_pred_1;
                    _2505 = frontier_phi_69_pred_2;
                    _2503 = frontier_phi_69_pred_3;
                    _2501 = frontier_phi_69_pred_4;
                    _2499 = frontier_phi_69_pred_5;
                    uint _2644 = _2643 + 1u;
                    if (_2644 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2637 = _2499;
                        _2638 = _2501;
                        _2639 = _2503;
                        _2640 = _2505;
                        _2641 = _2507;
                        _2642 = _2509;
                        _2643 = _2644;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2509;
                frontier_phi_57_58_ladder_1 = _2507;
                frontier_phi_57_58_ladder_2 = _2505;
                frontier_phi_57_58_ladder_3 = _2503;
                frontier_phi_57_58_ladder_4 = _2501;
                frontier_phi_57_58_ladder_5 = _2499;
            }
            else
            {
                frontier_phi_57_58_ladder = _2396;
                frontier_phi_57_58_ladder_1 = _2394;
                frontier_phi_57_58_ladder_2 = _2392;
                frontier_phi_57_58_ladder_3 = _2390;
                frontier_phi_57_58_ladder_4 = _2388;
                frontier_phi_57_58_ladder_5 = _2386;
            }
            _2498 = frontier_phi_57_58_ladder_5;
            _2500 = frontier_phi_57_58_ladder_4;
            _2502 = frontier_phi_57_58_ladder_3;
            _2504 = frontier_phi_57_58_ladder_2;
            _2506 = frontier_phi_57_58_ladder_1;
            _2508 = frontier_phi_57_58_ladder;
        }
        float _2513 = isnan(1.0) ? _559 : (isnan(_559) ? 1.0 : min(_559, 1.0));
        _2298 = (_2513 * _2504) + _1735;
        _2300 = (_2513 * _2506) + _1737;
        _2302 = (_2513 * _2508) + _1739;
        _2304 = ((_2498 * _544) * _2513) + _2080;
        _2306 = ((_2500 * _546) * _2513) + _2082;
        _2308 = ((_2502 * _547) * _2513) + _2084;
    }
    else
    {
        _2298 = _1735;
        _2300 = _1737;
        _2302 = _1739;
        _2304 = _2080;
        _2306 = _2082;
        _2308 = _2084;
    }
    float _4166 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _4177 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _4188 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    uint _2328 = _519 + 6u;
    float _2336 = _478 / cbSceneParam._m0[86u].x;
    float _2337 = _479 / cbSceneParam._m0[86u].y;
    vec4 _2351 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2336, _2337, (log2((isnan(cbSceneParam._m0[77u].w) ? _411 : (isnan(_411) ? cbSceneParam._m0[77u].w : min(_411, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2353 = _2351.x;
    float _2354 = _2351.y;
    float _2355 = _2351.z;
    float _2356 = _2351.w;
    float _2448;
    float _2450;
    float _2452;
    float _2454;
    if (_411 > cbSceneParam._m0[78u].w)
    {
        float _2411 = isnan(_411) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _411 : min(cbSceneParam._m0[80u].w, _411));
        float _2412 = _2411 / _411;
        float _2423 = _2412 * _463;
        float _2424 = _464 * _2412;
        float _2425 = (-0.0) - _2424;
        float _2426 = _2412 * _465;
        float _2428 = (cbSceneParam._m0[77u].w * _2425) / _2411;
        float _2429 = _2428 + cbSceneParam._m0[79u].w;
        float _2430 = cbSceneParam._m0[79u].w - _2424;
        float _2436 = sqrt(((_2423 * _2423) + (_2424 * _2424)) + (_2426 * _2426));
        float _2439 = (1.0 - (cbSceneParam._m0[77u].w / _2411)) * _2436;
        float _2444 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2446 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2599;
        if (abs((_2425 - _2428) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2599 = ((((_2429 > 0.0) ? exp2(_2444 * _2429) : (2.0 - exp2(_2446 * _2429))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2439;
        }
        else
        {
            float _2559 = 1.0 / cbSceneParam._m0[80u].x;
            float _2560 = isnan(_2430) ? _2429 : (isnan(_2429) ? _2430 : max(_2429, _2430));
            float _2561 = isnan(_2430) ? _2429 : (isnan(_2429) ? _2430 : min(_2429, _2430));
            float _2570 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : min(_2560, 0.0));
            float _2571 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : min(_2561, 0.0));
            _2599 = ((abs(_2436 / _2425) * cbSceneParam._m0[80u].y) * ((((_2570 - _2571) * 2.0) - ((exp2(_2444 * (isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0)))) - exp2(_2444 * (isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0))))) * _2559)) - ((exp2(_2446 * _2570) - exp2(_2446 * _2571)) * _2559))) + (_2439 * cbSceneParam._m0[80u].z);
        }
        vec4 _2601 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2336, _2337, 1.0), 0.0);
        float _2610 = exp2((_2599 * (-1.44269502162933349609375)) * (1.0 - _2601.w));
        float _2611 = log2(_2610);
        float _2627 = log2(_2356);
        _2448 = (exp2(_2627 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2611 * cbSceneParam._m0[78u].x)) * _2601.x) / cbSceneParam._m0[78u].x)) + _2353;
        _2450 = (exp2(_2627 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2611 * cbSceneParam._m0[78u].y)) * _2601.y) / cbSceneParam._m0[78u].y)) + _2354;
        _2452 = (exp2(_2627 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2611 * cbSceneParam._m0[78u].z)) * _2601.z) / cbSceneParam._m0[78u].z)) + _2355;
        _2454 = _2610 * _2356;
    }
    else
    {
        _2448 = _2353;
        _2450 = _2354;
        _2452 = _2355;
        _2454 = _2356;
    }
    float _2466 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2467 = _2466 == 3.0;
    float _2468 = log2(_2454);
    float _2475 = exp2(_2468 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0))) * (_2298 + ((isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0))) * _559))) + ((_2304 + ((isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0))) * _1369)) * cbPerFrame._m0[3u].x));
    float _2476 = exp2(_2468 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0))) * (_2300 + ((isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0))) * _559))) + ((_2306 + ((isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0))) * _1369)) * cbPerFrame._m0[3u].x));
    float _2477 = exp2(_2468 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0))) * (_2302 + ((isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0))) * _559))) + ((_2308 + ((isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0))) * _1369)) * cbPerFrame._m0[3u].x));
    float _2486 = (_2466 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2486 * (_2467 ? _2475 : (_2475 + (cbSceneParam._m0[72u].w * _2448)));
    SV_Target.y = _2486 * (_2467 ? _2476 : (_2476 + (cbSceneParam._m0[72u].w * _2450)));
    SV_Target.z = _2486 * (_2467 ? _2477 : (_2477 + (cbSceneParam._m0[72u].w * _2452)));
    SV_Target.w = cbInstanceData._m0[_2328].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2328].w;
}


