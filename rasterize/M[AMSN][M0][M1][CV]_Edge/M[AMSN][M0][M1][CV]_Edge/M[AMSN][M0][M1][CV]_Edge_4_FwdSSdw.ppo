#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _884;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _190 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _197 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _198 = _197 * NORMAL.x;
    float _199 = _197 * NORMAL.y;
    float _200 = _197 * NORMAL.z;
    float _204 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _212;
    float _213;
    float _214;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _212 = (-0.0) - _198;
        _213 = (-0.0) - _199;
        _214 = (-0.0) - _200;
    }
    else
    {
        _212 = _198;
        _213 = _199;
        _214 = _200;
    }
    vec4 _240 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _246 = _240.x * cbMtdParam._m0[9u].x;
    float _247 = _240.y * cbMtdParam._m0[9u].y;
    float _248 = _240.z * cbMtdParam._m0[9u].z;
    vec4 _260 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _264 = _260.z;
    float _268 = (_260.x * 2.0) + (-1.0);
    float _270 = (_260.y * 2.0) + (-1.0);
    float _271 = dot(vec2(_268, _270), vec2(_268, _270));
    float _3222 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    float _277 = sqrt(1.0 - (isnan(1.0) ? _3222 : (isnan(_3222) ? 1.0 : min(_3222, 1.0))));
    float _289 = (TEXCOORD_3.x - (((1.0 - TEXCOORD_3.x) * 0.00999999977648258209228515625) * cbMtdParam._m0[12u].y)) * (cbMtdParam._m0[12u].z + 1.0);
    float _3233 = isnan(0.0) ? _289 : (isnan(_289) ? 0.0 : max(_289, 0.0));
    float _290 = isnan(1.0) ? _3233 : (isnan(_3233) ? 1.0 : min(_3233, 1.0));
    float _297 = (_290 * (cbMtdParam._m0[10u].x - _246)) + _246;
    float _298 = (_290 * (cbMtdParam._m0[10u].y - _247)) + _247;
    float _299 = (_290 * (cbMtdParam._m0[10u].z - _248)) + _248;
    vec4 _311 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _318 = (_311.x * 2.0) + (-1.0);
    float _319 = (_311.y * 2.0) + (-1.0);
    float _320 = dot(vec2(_318, _319), vec2(_318, _319));
    float _3244 = isnan(0.0) ? _320 : (isnan(_320) ? 0.0 : max(_320, 0.0));
    float _328 = (_290 * (_311.z - _264)) + _264;
    float _340 = (((_318 - _268) + (cbMtdParam._m0[12u].w * _268)) * _290) + _268;
    float _341 = (((_319 - _270) + (cbMtdParam._m0[12u].w * _270)) * _290) + _270;
    float _342 = (_290 * (sqrt(1.0 - (isnan(1.0) ? _3244 : (isnan(_3244) ? 1.0 : min(_3244, 1.0)))) - _277)) + _277;
    float _345 = fma(_342, _212, fma(_341, _204 * TANGENT.x, (_190 * _182) * _340));
    float _348 = fma(_342, _213, fma(_341, _204 * TANGENT.y, (_190 * _183) * _340));
    float _351 = fma(_342, _214, fma(_341, _204 * TANGENT.z, (_190 * _184) * _340));
    float _355 = inversesqrt(dot(vec3(_345, _348, _351), vec3(_345, _348, _351)));
    float _356 = _355 * _345;
    float _357 = _355 * _348;
    float _358 = _355 * _351;
    float _3255 = isnan(0.0) ? _328 : (isnan(_328) ? 0.0 : max(_328, 0.0));
    float _359 = isnan(1.0) ? _3255 : (isnan(_3255) ? 1.0 : min(_3255, 1.0));
    float _3266 = isnan(0.0) ? _297 : (isnan(_297) ? 0.0 : max(_297, 0.0));
    float _3277 = isnan(0.0) ? _298 : (isnan(_298) ? 0.0 : max(_298, 0.0));
    float _3288 = isnan(0.0) ? _299 : (isnan(_299) ? 0.0 : max(_299, 0.0));
    float _378 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _420 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _430 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _420);
    float _431 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _420);
    float _432 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _420);
    float _436 = inversesqrt(dot(vec3(_430, _431, _432), vec3(_430, _431, _432)));
    float _437 = _430 * _436;
    float _438 = _431 * _436;
    float _439 = _432 * _436;
    float _445 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _446 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _467 = fma(_358, cbSceneParam._m0[5u].z, fma(_357, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _356));
    float _470 = fma(_358, cbSceneParam._m0[6u].z, fma(_357, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _356));
    float _473 = fma(_358, cbSceneParam._m0[7u].z, fma(_357, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _356));
    uint _486 = uint(roundEven(NORMAL.w)) * 13u;
    uint _489 = (_486 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _495 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3266 : (isnan(_3266) ? 1.0 : min(_3266, 1.0)))) * cbInstanceData._m0[_489].x;
    float _496 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3277 : (isnan(_3277) ? 1.0 : min(_3277, 1.0)))) * cbInstanceData._m0[_489].y;
    float _497 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3288 : (isnan(_3288) ? 1.0 : min(_3288, 1.0)))) * cbInstanceData._m0[_489].z;
    float _3299 = isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0));
    float _498 = isnan(1.0) ? _3299 : (isnan(_3299) ? 1.0 : min(_3299, 1.0));
    float _3310 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _499 = isnan(1.0) ? _3310 : (isnan(_3310) ? 1.0 : min(_3310, 1.0));
    float _3321 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _500 = isnan(1.0) ? _3321 : (isnan(_3321) ? 1.0 : min(_3321, 1.0));
    vec4 _509 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _445, cbSceneParam._m0[86u].y * _446));
    float _512 = _509.x * TEXCOORD_3.w;
    float _513 = dot(vec3(_356, _357, _358), vec3(_437, _438, _439));
    float _516 = _513 * 2.0;
    float _520 = (_516 * _356) - _437;
    float _521 = (_516 * _357) - _438;
    float _522 = (_516 * _358) - _439;
    float _526 = abs(dot(vec3(_437, _438, _439), vec3(_356, _357, _358)));
    float _3332 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _528 = sqrt(_359);
    float _541 = exp2((_528 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3332 : (isnan(_3332) ? 1.0 : min(_3332, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_528 * 3.0));
    float _573 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _577 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _581 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _883;
    float _885;
    float _886;
    float _887;
    float _888;
    float _889;
    float _890;
    float _891;
    float _892;
    float _893;
    float _894;
    float _895;
    float _896;
    float _897;
    float _898;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _608 = fma(_581, cbModelParam._m0[26u].z, fma(_577, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _573));
        float _612 = fma(_581, cbModelParam._m0[27u].z, fma(_577, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _573));
        float _616 = fma(_581, cbModelParam._m0[28u].z, fma(_577, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _573));
        float _641 = _573 + _356;
        float _642 = _577 + _357;
        float _643 = _581 + _358;
        float _653 = fma(_643, cbModelParam._m0[26u].z, fma(_642, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _641)) - _608;
        float _654 = fma(_643, cbModelParam._m0[27u].z, fma(_642, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _641)) - _612;
        float _655 = fma(_643, cbModelParam._m0[28u].z, fma(_642, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _641)) - _616;
        float _659 = inversesqrt(dot(vec3(_653, _654, _655), vec3(_653, _654, _655)));
        float _672 = ((_659 * _653) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_608 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _673 = ((_659 * _654) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_612 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _674 = ((_659 * _655) / cbModelParam._m0[34u].z) + ((((((_616 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _677 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_672, _673, _674), 0.0);
        vec4 _684 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_672, _673, _674), 0.0);
        vec4 _691 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_672, _673, _674), 0.0);
        vec4 _698 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_672, _673, _674), 0.0);
        float _711 = exp2((_677.w + (-0.5)) * 20.0) * 2.0;
        float _712 = _711 * (_677.x + (-0.5));
        float _713 = _711 * (_677.y + (-0.5));
        float _714 = _711 * (_677.z + (-0.5));
        float _721 = exp2((_684.w + (-0.5)) * 20.0) * 2.0;
        float _722 = _721 * (_684.x + (-0.5));
        float _723 = _721 * (_684.y + (-0.5));
        float _724 = _721 * (_684.z + (-0.5));
        float _731 = exp2((_691.w + (-0.5)) * 20.0) * 2.0;
        float _732 = _731 * (_691.x + (-0.5));
        float _733 = _731 * (_691.y + (-0.5));
        float _734 = _731 * (_691.z + (-0.5));
        float _741 = exp2((_698.w + (-0.5)) * 20.0) * 2.0;
        float _742 = _741 * (_698.x + (-0.5));
        float _743 = _741 * (_698.y + (-0.5));
        float _744 = _741 * (_698.z + (-0.5));
        float _745 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
        float _746 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
        float _747 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
        float _748 = _712 * 0.5;
        float _749 = _722 * 0.5;
        float _750 = _732 * 0.5;
        float _751 = dot(vec3(_748, _749, _750), vec3(_748, _749, _750));
        float _756 = (_751 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_751);
        float _765 = (dot(vec3(_356, _357, _358), vec3(_756 * _748, _756 * _749, _756 * _750)) + 1.0) * 0.5;
        float _3358 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
        float _775 = sqrt(((_749 * _749) + (_748 * _748)) + (_750 * _750)) / (_745 + 9.9999997473787516355514526367188e-06);
        float _3369 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
        float _776 = isnan(1.0) ? _3369 : (isnan(_3369) ? 1.0 : min(_3369, 1.0));
        float _777 = _776 * 2.0;
        float _781 = (1.0 - _776) / (_776 + 1.0);
        float _3380 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
        float _782 = isnan(1.0) ? _3380 : (isnan(_3380) ? 1.0 : min(_3380, 1.0));
        float _791 = ((((1.0 - _782) * (_777 + 2.0)) * exp2(log2(isnan(1.0) ? _3358 : (isnan(_3358) ? 1.0 : min(_3358, 1.0))) * (_777 + 1.0))) + _782) * _745;
        float _792 = _713 * 0.5;
        float _793 = _723 * 0.5;
        float _794 = _733 * 0.5;
        float _795 = dot(vec3(_792, _793, _794), vec3(_792, _793, _794));
        float _800 = (_795 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_795);
        float _808 = (dot(vec3(_356, _357, _358), vec3(_800 * _792, _800 * _793, _800 * _794)) + 1.0) * 0.5;
        float _3391 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
        float _817 = sqrt(((_793 * _793) + (_792 * _792)) + (_794 * _794)) / (_746 + 9.9999997473787516355514526367188e-06);
        float _3402 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
        float _818 = isnan(1.0) ? _3402 : (isnan(_3402) ? 1.0 : min(_3402, 1.0));
        float _819 = _818 * 2.0;
        float _823 = (1.0 - _818) / (_818 + 1.0);
        float _3413 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
        float _824 = isnan(1.0) ? _3413 : (isnan(_3413) ? 1.0 : min(_3413, 1.0));
        float _833 = ((((1.0 - _824) * (_819 + 2.0)) * exp2(log2(isnan(1.0) ? _3391 : (isnan(_3391) ? 1.0 : min(_3391, 1.0))) * (_819 + 1.0))) + _824) * _746;
        float _834 = _714 * 0.5;
        float _835 = _724 * 0.5;
        float _836 = _734 * 0.5;
        float _837 = dot(vec3(_834, _835, _836), vec3(_834, _835, _836));
        float _842 = (_837 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_837);
        float _850 = (dot(vec3(_356, _357, _358), vec3(_842 * _834, _842 * _835, _842 * _836)) + 1.0) * 0.5;
        float _3424 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
        float _859 = sqrt(((_835 * _835) + (_834 * _834)) + (_836 * _836)) / (_747 + 9.9999997473787516355514526367188e-06);
        float _3435 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
        float _860 = isnan(1.0) ? _3435 : (isnan(_3435) ? 1.0 : min(_3435, 1.0));
        float _861 = _860 * 2.0;
        float _865 = (1.0 - _860) / (_860 + 1.0);
        float _3446 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
        float _866 = isnan(1.0) ? _3446 : (isnan(_3446) ? 1.0 : min(_3446, 1.0));
        float _875 = ((((1.0 - _866) * (_861 + 2.0)) * exp2(log2(isnan(1.0) ? _3424 : (isnan(_3424) ? 1.0 : min(_3424, 1.0))) * (_861 + 1.0))) + _866) * _747;
        _883 = _714;
        _885 = _713;
        _886 = _712;
        _887 = _724;
        _888 = _723;
        _889 = _722;
        _890 = _734;
        _891 = _733;
        _892 = _732;
        _893 = _747;
        _894 = _746;
        _895 = _745;
        _896 = cbModelParam._m0[36u].z * (isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0)));
        _897 = cbModelParam._m0[36u].z * (isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0)));
        _898 = cbModelParam._m0[36u].z * (isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0)));
    }
    else
    {
        _883 = _884;
        _885 = _884;
        _886 = _884;
        _887 = _884;
        _888 = _884;
        _889 = _884;
        _890 = _884;
        _891 = _884;
        _892 = _884;
        _893 = _884;
        _894 = _884;
        _895 = _884;
        _896 = 0.0;
        _897 = 0.0;
        _898 = 0.0;
    }
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _924 = fma(_581, cbModelParam._m0[30u].z, fma(_577, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _573));
        float _928 = fma(_581, cbModelParam._m0[31u].z, fma(_577, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _573));
        float _932 = fma(_581, cbModelParam._m0[32u].z, fma(_577, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _573));
        float _955 = _573 + _356;
        float _956 = _577 + _357;
        float _957 = _581 + _358;
        float _967 = fma(_957, cbModelParam._m0[30u].z, fma(_956, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _955)) - _924;
        float _968 = fma(_957, cbModelParam._m0[31u].z, fma(_956, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _955)) - _928;
        float _969 = fma(_957, cbModelParam._m0[32u].z, fma(_956, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _955)) - _932;
        float _973 = inversesqrt(dot(vec3(_967, _968, _969), vec3(_967, _968, _969)));
        float _986 = ((_973 * _967) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_924 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _987 = ((_973 * _968) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_928 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _988 = ((_973 * _969) / cbModelParam._m0[35u].z) + ((((((_932 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _990 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_986, _987, _988), 0.0);
        vec4 _997 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_986, _987, _988), 0.0);
        vec4 _1004 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_986, _987, _988), 0.0);
        vec4 _1011 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_986, _987, _988), 0.0);
        float _1023 = exp2((_990.w + (-0.5)) * 20.0) * 2.0;
        float _1024 = _1023 * (_990.x + (-0.5));
        float _1025 = _1023 * (_990.y + (-0.5));
        float _1026 = _1023 * (_990.z + (-0.5));
        float _1033 = exp2((_997.w + (-0.5)) * 20.0) * 2.0;
        float _1034 = _1033 * (_997.x + (-0.5));
        float _1035 = _1033 * (_997.y + (-0.5));
        float _1036 = _1033 * (_997.z + (-0.5));
        float _1043 = exp2((_1004.w + (-0.5)) * 20.0) * 2.0;
        float _1044 = _1043 * (_1004.x + (-0.5));
        float _1045 = _1043 * (_1004.y + (-0.5));
        float _1046 = _1043 * (_1004.z + (-0.5));
        float _1053 = exp2((_1011.w + (-0.5)) * 20.0) * 2.0;
        float _1054 = _1053 * (_1011.x + (-0.5));
        float _1055 = _1053 * (_1011.y + (-0.5));
        float _1056 = _1053 * (_1011.z + (-0.5));
        float _1057 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1058 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1059 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1060 = _1024 * 0.5;
        float _1061 = _1034 * 0.5;
        float _1062 = _1044 * 0.5;
        float _1063 = dot(vec3(_1060, _1061, _1062), vec3(_1060, _1061, _1062));
        float _1068 = (_1063 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1063);
        float _1076 = (dot(vec3(_356, _357, _358), vec3(_1068 * _1060, _1068 * _1061, _1068 * _1062)) + 1.0) * 0.5;
        float _3487 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1085 = sqrt(((_1061 * _1061) + (_1060 * _1060)) + (_1062 * _1062)) / (_1057 + 9.9999997473787516355514526367188e-06);
        float _3498 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1086 = isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0));
        float _1087 = _1086 * 2.0;
        float _1091 = (1.0 - _1086) / (_1086 + 1.0);
        float _3509 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1092 = isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0));
        float _1101 = ((((1.0 - _1092) * (_1087 + 2.0)) * exp2(log2(isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0))) * (_1087 + 1.0))) + _1092) * _1057;
        float _1102 = _1025 * 0.5;
        float _1103 = _1035 * 0.5;
        float _1104 = _1045 * 0.5;
        float _1105 = dot(vec3(_1102, _1103, _1104), vec3(_1102, _1103, _1104));
        float _1110 = (_1105 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1105);
        float _1118 = (dot(vec3(_356, _357, _358), vec3(_1110 * _1102, _1110 * _1103, _1110 * _1104)) + 1.0) * 0.5;
        float _3520 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1127 = sqrt(((_1103 * _1103) + (_1102 * _1102)) + (_1104 * _1104)) / (_1058 + 9.9999997473787516355514526367188e-06);
        float _3531 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1128 = isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0));
        float _1129 = _1128 * 2.0;
        float _1133 = (1.0 - _1128) / (_1128 + 1.0);
        float _3542 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1134 = isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0));
        float _1143 = ((((1.0 - _1134) * (_1129 + 2.0)) * exp2(log2(isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0))) * (_1129 + 1.0))) + _1134) * _1058;
        float _1144 = _1026 * 0.5;
        float _1145 = _1036 * 0.5;
        float _1146 = _1046 * 0.5;
        float _1147 = dot(vec3(_1144, _1145, _1146), vec3(_1144, _1145, _1146));
        float _1152 = (_1147 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1147);
        float _1160 = (dot(vec3(_356, _357, _358), vec3(_1152 * _1144, _1152 * _1145, _1152 * _1146)) + 1.0) * 0.5;
        float _3553 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1169 = sqrt(((_1145 * _1145) + (_1144 * _1144)) + (_1146 * _1146)) / (_1059 + 9.9999997473787516355514526367188e-06);
        float _3564 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1170 = isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0));
        float _1171 = _1170 * 2.0;
        float _1175 = (1.0 - _1170) / (_1170 + 1.0);
        float _3575 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1176 = isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0));
        float _1185 = ((((1.0 - _1176) * (_1171 + 2.0)) * exp2(log2(isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0))) * (_1171 + 1.0))) + _1176) * _1059;
        _1193 = _1026;
        _1194 = _1025;
        _1195 = _1024;
        _1196 = _1036;
        _1197 = _1035;
        _1198 = _1034;
        _1199 = _1046;
        _1200 = _1045;
        _1201 = _1044;
        _1202 = _1059;
        _1203 = _1058;
        _1204 = _1057;
        _1205 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0)));
        _1206 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0)));
        _1207 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0)));
    }
    else
    {
        _1193 = _884;
        _1194 = _884;
        _1195 = _884;
        _1196 = _884;
        _1197 = _884;
        _1198 = _884;
        _1199 = _884;
        _1200 = _884;
        _1201 = _884;
        _1202 = _884;
        _1203 = _884;
        _1204 = _884;
        _1205 = 0.0;
        _1206 = 0.0;
        _1207 = 0.0;
    }
    float _1217 = (cbModelParam._m0[1u].x * (_1205 - _896)) + _896;
    float _1218 = (cbModelParam._m0[1u].x * (_1206 - _897)) + _897;
    float _1219 = (cbModelParam._m0[1u].x * (_1207 - _898)) + _898;
    float _1240 = fma(_1219, cbSceneParam._m0[89u].z, fma(_1218, cbSceneParam._m0[89u].y, _1217 * cbSceneParam._m0[89u].x));
    float _1243 = fma(_1219, cbSceneParam._m0[90u].z, fma(_1218, cbSceneParam._m0[90u].y, _1217 * cbSceneParam._m0[90u].x));
    float _1246 = fma(_1219, cbSceneParam._m0[91u].z, fma(_1218, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1217));
    float _1261 = _520 * 0.5;
    float _1262 = _521 * 0.5;
    float _1263 = _522 * 0.5;
    float _1264 = dot(vec4(_1261, _1262, _1263, 1.0), vec4(_1195, _1198, _1201, _1204));
    float _1267 = dot(vec4(_1261, _1262, _1263, 1.0), vec4(_1194, _1197, _1200, _1203));
    float _1270 = dot(vec4(_1261, _1262, _1263, 1.0), vec4(_1193, _1196, _1199, _1202));
    float _1304;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1277 = dot(vec4(_1261, _1262, _1263, 1.0), vec4(_883, _887, _890, _893));
        float _1281 = dot(vec4(_1261, _1262, _1263, 1.0), vec4(_885, _888, _891, _894));
        float _1285 = dot(vec4(_1261, _1262, _1263, 1.0), vec4(_886, _889, _892, _895));
        float _1292 = dot(vec4(cbModelParam._m0[39u]), vec4(_1261, _1262, _1263, 1.0));
        _1304 = dot(vec3(isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0)), isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0)), isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1292) ? 0.0 : (isnan(0.0) ? _1292 : max(0.0, _1292))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1304 = 1.0;
    }
    float _1315;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1306 = dot(vec4(cbModelParam._m0[40u]), vec4(_1261, _1262, _1263, 1.0));
        _1315 = dot(vec3(isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0)), isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0)), isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1306) ? 0.0 : (isnan(0.0) ? _1306 : max(0.0, _1306))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1315 = 1.0;
    }
    float _1319 = (_1315 * cbModelParam._m0[1u].x) + (_1304 * (1.0 - cbModelParam._m0[1u].x));
    float _1329 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _359);
    float _1330 = isnan(_1329) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1329 : min(cbModelParam._m0[25u].z, _1329));
    float _1411;
    float _1413;
    float _1415;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1378 = fma(_581, cbModelParam._m0[13u].z, fma(_577, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _573)) + cbModelParam._m0[13u].w;
        float _1382 = fma(_581, cbModelParam._m0[14u].z, fma(_577, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _573)) + cbModelParam._m0[14u].w;
        float _1386 = fma(_581, cbModelParam._m0[15u].z, fma(_577, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _573)) + cbModelParam._m0[15u].w;
        float _1389 = fma(_522, cbModelParam._m0[13u].z, fma(_521, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _520));
        float _1392 = fma(_522, cbModelParam._m0[14u].z, fma(_521, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _520));
        float _1395 = fma(_522, cbModelParam._m0[15u].z, fma(_521, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _520));
        float _1423;
        if (_1389 > 0.0)
        {
            _1423 = abs((1.0 - _1378) / _1389);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1389 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1378 + 1.0) / _1389);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1423 = frontier_phi_16_14_ladder;
        }
        float _1649;
        if (_1392 > 0.0)
        {
            _1649 = abs((1.0 - _1382) / _1392);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1392 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1382 + 1.0) / _1392);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1649 = frontier_phi_25_21_ladder;
        }
        float _1895;
        if (_1395 > 0.0)
        {
            _1895 = abs((1.0 - _1386) / _1395);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1395 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1386 + 1.0) / _1395);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1895 = frontier_phi_37_32_ladder;
        }
        float _1897 = isnan(_1649) ? _1423 : (isnan(_1423) ? _1649 : min(_1423, _1649));
        float _1898 = isnan(_1895) ? _1897 : (isnan(_1897) ? _1895 : min(_1897, _1895));
        float _1902 = (_1898 * _1389) + _1378;
        float _1903 = (_1898 * _1392) + _1382;
        float _1904 = (_1898 * _1395) + _1386;
        float _1905 = _1898 * 9.9999997473787516355514526367188e-05;
        float _1907 = (-1.0) - _1905;
        float _1909 = _1905 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1904 > _1909) || ((_1904 < _1907) || ((_1903 > _1909) || ((_1903 < _1907) || ((_1902 < _1907) || (_1902 > _1909))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2028 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1904, cbModelParam._m0[9u].z, fma(_1903, cbModelParam._m0[9u].y, _1902 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1904, cbModelParam._m0[10u].z, fma(_1903, cbModelParam._m0[10u].y, _1902 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1904, cbModelParam._m0[11u].z, fma(_1903, cbModelParam._m0[11u].y, _1902 * cbModelParam._m0[11u].x))), _1330);
            frontier_phi_15_37_ladder = _2028.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2028.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2028.x * cbModelParam._m0[1u].y;
        }
        _1411 = frontier_phi_15_37_ladder_2;
        _1413 = frontier_phi_15_37_ladder_1;
        _1415 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1399 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_520, _521, _522), _1330);
        _1411 = _1399.x * cbModelParam._m0[1u].y;
        _1413 = _1399.y * cbModelParam._m0[1u].y;
        _1415 = _1399.z * cbModelParam._m0[1u].y;
    }
    float _1419 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _359);
    float _1420 = isnan(_1419) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1419 : min(cbModelParam._m0[25u].w, _1419));
    float _1513;
    float _1515;
    float _1517;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1477 = fma(_581, cbModelParam._m0[21u].z, fma(_577, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _573)) + cbModelParam._m0[21u].w;
        float _1481 = fma(_581, cbModelParam._m0[22u].z, fma(_577, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _573)) + cbModelParam._m0[22u].w;
        float _1485 = fma(_581, cbModelParam._m0[23u].z, fma(_577, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _573)) + cbModelParam._m0[23u].w;
        float _1488 = fma(_522, cbModelParam._m0[21u].z, fma(_521, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _520));
        float _1491 = fma(_522, cbModelParam._m0[22u].z, fma(_521, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _520));
        float _1494 = fma(_522, cbModelParam._m0[23u].z, fma(_521, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _520));
        float _1654;
        if (_1488 > 0.0)
        {
            _1654 = abs((1.0 - _1477) / _1488);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1488 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1477 + 1.0) / _1488);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1654 = frontier_phi_27_23_ladder;
        }
        float _1922;
        if (_1491 > 0.0)
        {
            _1922 = abs((1.0 - _1481) / _1491);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1491 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1481 + 1.0) / _1491);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1922 = frontier_phi_39_34_ladder;
        }
        float _2127;
        if (_1494 > 0.0)
        {
            _2127 = abs((1.0 - _1485) / _1494);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1494 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1485 + 1.0) / _1494);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2127 = frontier_phi_48_45_ladder;
        }
        float _2129 = isnan(_1922) ? _1654 : (isnan(_1654) ? _1922 : min(_1654, _1922));
        float _2130 = isnan(_2127) ? _2129 : (isnan(_2129) ? _2127 : min(_2129, _2127));
        float _2134 = (_2130 * _1488) + _1477;
        float _2135 = (_2130 * _1491) + _1481;
        float _2136 = (_2130 * _1494) + _1485;
        float _2137 = _2130 * 9.9999997473787516355514526367188e-05;
        float _2138 = (-1.0) - _2137;
        float _2140 = _2137 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2136 > _2140) || ((_2136 < _2138) || ((_2135 > _2140) || ((_2135 < _2138) || ((_2134 < _2138) || (_2134 > _2140))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2334 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2136, cbModelParam._m0[17u].z, fma(_2135, cbModelParam._m0[17u].y, _2134 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2136, cbModelParam._m0[18u].z, fma(_2135, cbModelParam._m0[18u].y, _2134 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2136, cbModelParam._m0[19u].z, fma(_2135, cbModelParam._m0[19u].y, _2134 * cbModelParam._m0[19u].x))), _1420);
            frontier_phi_24_48_ladder = _2334.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2334.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2334.x * cbModelParam._m0[1u].z;
        }
        _1513 = frontier_phi_24_48_ladder_2;
        _1515 = frontier_phi_24_48_ladder_1;
        _1517 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1497 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_520, _521, _522), _1420);
        _1513 = _1497.x * cbModelParam._m0[1u].z;
        _1515 = _1497.y * cbModelParam._m0[1u].z;
        _1517 = _1497.z * cbModelParam._m0[1u].z;
    }
    float _1529 = ((((1.0 - _541) * ((_528 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_541 * _528)) * _512;
    float _1530 = _1529 * ((cbModelParam._m0[1u].w * (_1513 - _1411)) + _1411);
    float _1531 = _1529 * ((cbModelParam._m0[1u].w * (_1515 - _1413)) + _1413);
    float _1532 = _1529 * ((cbModelParam._m0[1u].w * (_1517 - _1415)) + _1415);
    float _1535 = fma(_1532, cbSceneParam._m0[89u].z, fma(_1531, cbSceneParam._m0[89u].y, _1530 * cbSceneParam._m0[89u].x));
    float _1538 = fma(_1532, cbSceneParam._m0[90u].z, fma(_1531, cbSceneParam._m0[90u].y, _1530 * cbSceneParam._m0[90u].x));
    float _1541 = fma(_1532, cbSceneParam._m0[91u].z, fma(_1531, cbSceneParam._m0[91u].y, _1530 * cbSceneParam._m0[91u].x));
    vec4 _1549 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_445, _446));
    float _1551 = _1549.w;
    float _1563 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1551);
    float _1564 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1551);
    float _1565 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1551);
    uvec4 _1569 = floatBitsToUint(cbInstanceData._m0[_486 + 5u]);
    uint _1571 = _1569.x * 14u;
    uint _1572 = _1571 + 13u;
    float _1579 = _512 + (-1.0);
    float _1584 = (cbLight._m0[_1572].x * _1579) + 1.0;
    float _1585 = (cbLight._m0[_1572].y * _1579) + 1.0;
    float _1586 = (cbLight._m0[_1572].z * _1579) + 1.0;
    float _1587 = (cbLight._m0[_1572].w * _1579) + 1.0;
    uint _1588 = _1571 + 5u;
    float _1594 = isnan(1.0) ? _1585 : (isnan(_1585) ? 1.0 : min(_1585, 1.0));
    uint _1598 = _1571 + 4u;
    float _1608 = isnan(1.0) ? _1584 : (isnan(_1584) ? 1.0 : min(_1584, 1.0));
    uint _1612 = _1571 | 1u;
    float _1623 = dot(vec3(cbLight._m0[_1571].xyz), vec3(_356, _357, _358));
    float _1626 = dot(vec3(cbLight._m0[_1612].xyz), vec3(_356, _357, _358));
    float _3711 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
    float _3722 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
    float _1631 = (isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0))) * 0.3183098733425140380859375;
    float _1633 = (isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0))) * 0.3183098733425140380859375;
    float _1640 = ((cbLight._m0[_1588].x * _1594) * _1633) + (((cbLight._m0[_1598].x * _1563) * _1608) * _1631);
    float _1641 = ((_1594 * cbLight._m0[_1588].y) * _1633) + (((cbLight._m0[_1598].y * _1564) * _1608) * _1631);
    float _1642 = ((_1594 * cbLight._m0[_1588].z) * _1633) + (((cbLight._m0[_1598].z * _1565) * _1608) * _1631);
    uvec4 _1646 = floatBitsToUint(cbLight._m0[_1571 + 12u]);
    bool _1648 = _1646.x == 0u;
    float _1659;
    float _1661;
    float _1663;
    if (_1648)
    {
        _1659 = _1640;
        _1661 = _1641;
        _1663 = _1642;
    }
    else
    {
        uint _1667 = _1571 + 6u;
        float _1683 = (dot(vec3(cbLight._m0[_1571 + 2u].xyz), vec3(_356, _357, _358)) * 0.5) + 0.5;
        float _1684 = _1683 * _1683;
        float _3733 = isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0));
        float _1685 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
        float _1686 = isnan(1.0) ? _1586 : (isnan(_1586) ? 1.0 : min(_1586, 1.0));
        _1659 = (((cbLight._m0[_1667].x * 0.3183098733425140380859375) * _1685) * _1686) + _1640;
        _1661 = (((cbLight._m0[_1667].y * 0.3183098733425140380859375) * _1685) * _1686) + _1641;
        _1663 = (((cbLight._m0[_1667].z * 0.3183098733425140380859375) * _1685) * _1686) + _1642;
    }
    bool _1666 = _1646.y == 0u;
    float _1704;
    float _1706;
    float _1708;
    if (_1666)
    {
        _1704 = _1659;
        _1706 = _1661;
        _1708 = _1663;
    }
    else
    {
        uint _1866 = _1571 + 7u;
        float _1882 = (dot(vec3(cbLight._m0[_1571 + 3u].xyz), vec3(_356, _357, _358)) * 0.5) + 0.5;
        float _1883 = _1882 * _1882;
        float _3749 = isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0));
        float _1884 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
        float _1885 = isnan(1.0) ? _1587 : (isnan(_1587) ? 1.0 : min(_1587, 1.0));
        _1704 = (((cbLight._m0[_1866].x * 0.3183098733425140380859375) * _1884) * _1885) + _1659;
        _1706 = (((cbLight._m0[_1866].y * 0.3183098733425140380859375) * _1884) * _1885) + _1661;
        _1708 = (((cbLight._m0[_1866].z * 0.3183098733425140380859375) * _1884) * _1885) + _1663;
    }
    uint _1711 = _1571 + 8u;
    float _1724 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1571].w)) * _359) * 0.949999988079071044921875);
    float _1725 = _1724 * _1724;
    float _1726 = cbLight._m0[_1571].x + _437;
    float _1727 = cbLight._m0[_1571].y + _438;
    float _1728 = cbLight._m0[_1571].z + _439;
    float _1732 = inversesqrt(dot(vec3(_1726, _1727, _1728), vec3(_1726, _1727, _1728)));
    float _1733 = _1732 * _1726;
    float _1734 = _1732 * _1727;
    float _1735 = _1732 * _1728;
    float _1736 = dot(vec3(_356, _357, _358), vec3(cbLight._m0[_1571].xyz));
    float _3765 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
    float _1739 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
    float _3776 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _1740 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
    float _1741 = dot(vec3(_356, _357, _358), vec3(_1733, _1734, _1735));
    float _3787 = isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0));
    float _1744 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
    float _1745 = dot(vec3(cbLight._m0[_1571].xyz), vec3(_1733, _1734, _1735));
    float _3798 = isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0));
    float _1749 = _1725 * _1725;
    float _1753 = ((_1744 * _1744) * (_1749 + (-1.0))) + 1.0;
    float _1764 = (exp2(log2(1.0 - (isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1765 = 1.0 - _1725;
    float _1776 = (0.5 / (((_1740 * ((_1739 * _1765) + _1725)) + 9.9999999392252902907785028219223e-09) + (((_1740 * _1765) + _1725) * _1739))) * _1739;
    float _3809 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
    float _1778 = (isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0))) * (_1749 / ((_1753 * _1753) * 3.141590118408203125));
    uint _1792 = _1571 + 9u;
    float _1803 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1612].w)) * _359) * 0.949999988079071044921875);
    float _1804 = _1803 * _1803;
    float _1805 = cbLight._m0[_1612].x + _437;
    float _1806 = cbLight._m0[_1612].y + _438;
    float _1807 = cbLight._m0[_1612].z + _439;
    float _1811 = inversesqrt(dot(vec3(_1805, _1806, _1807), vec3(_1805, _1806, _1807)));
    float _1812 = _1811 * _1805;
    float _1813 = _1811 * _1806;
    float _1814 = _1811 * _1807;
    float _1815 = dot(vec3(_356, _357, _358), vec3(cbLight._m0[_1612].xyz));
    float _3820 = isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0));
    float _1818 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
    float _1819 = dot(vec3(_356, _357, _358), vec3(_1812, _1813, _1814));
    float _3831 = isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0));
    float _1822 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
    float _1823 = dot(vec3(cbLight._m0[_1612].xyz), vec3(_1812, _1813, _1814));
    float _3842 = isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0));
    float _1827 = _1804 * _1804;
    float _1831 = ((_1822 * _1822) * (_1827 + (-1.0))) + 1.0;
    float _1840 = (exp2(log2(1.0 - (isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1841 = 1.0 - _1804;
    float _1851 = (0.5 / (((_1740 * ((_1818 * _1841) + _1804)) + 9.9999999392252902907785028219223e-09) + (((_1740 * _1841) + _1804) * _1818))) * _1818;
    float _3853 = isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0));
    float _1853 = (isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0))) * (_1827 / ((_1831 * _1831) * 3.141590118408203125));
    float _1863 = (((_1840 * cbLight._m0[_1792].x) * _1853) * _1594) + ((((cbLight._m0[_1711].x * _1563) * _1764) * _1778) * _1608);
    float _1864 = (((_1840 * cbLight._m0[_1792].y) * _1853) * _1594) + ((((cbLight._m0[_1711].y * _1564) * _1764) * _1778) * _1608);
    float _1865 = (((_1840 * cbLight._m0[_1792].z) * _1853) * _1594) + ((((cbLight._m0[_1711].z * _1565) * _1764) * _1778) * _1608);
    float _1927;
    float _1929;
    float _1931;
    if (_1648)
    {
        _1927 = _1863;
        _1929 = _1864;
        _1931 = _1865;
    }
    else
    {
        uint _1933 = _1571 + 2u;
        uint _1937 = _1571 + 10u;
        float _1951 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1933].w)) * _359) * 0.949999988079071044921875);
        float _1952 = _1951 * _1951;
        float _1953 = cbLight._m0[_1933].x + _437;
        float _1954 = cbLight._m0[_1933].y + _438;
        float _1955 = cbLight._m0[_1933].z + _439;
        float _1959 = inversesqrt(dot(vec3(_1953, _1954, _1955), vec3(_1953, _1954, _1955)));
        float _1960 = _1959 * _1953;
        float _1961 = _1959 * _1954;
        float _1962 = _1959 * _1955;
        float _1963 = dot(vec3(_356, _357, _358), vec3(cbLight._m0[_1933].xyz));
        float _3864 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
        float _1966 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
        float _1967 = dot(vec3(_356, _357, _358), vec3(_1960, _1961, _1962));
        float _3875 = isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0));
        float _1970 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
        float _1971 = dot(vec3(cbLight._m0[_1933].xyz), vec3(_1960, _1961, _1962));
        float _3886 = isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0));
        float _1975 = _1952 * _1952;
        float _1979 = ((_1970 * _1970) * (_1975 + (-1.0))) + 1.0;
        float _1988 = (exp2(log2(1.0 - (isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1989 = 1.0 - _1952;
        float _1999 = (0.5 / (((_1740 * ((_1966 * _1989) + _1952)) + 9.9999999392252902907785028219223e-09) + (((_1740 * _1989) + _1952) * _1966))) * _1966;
        float _3897 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
        float _2001 = (isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0))) * (_1975 / ((_1979 * _1979) * 3.141590118408203125));
        float _2002 = isnan(1.0) ? _1586 : (isnan(_1586) ? 1.0 : min(_1586, 1.0));
        _1927 = (((_1988 * cbLight._m0[_1937].x) * _2001) * _2002) + _1863;
        _1929 = (((_1988 * cbLight._m0[_1937].y) * _2001) * _2002) + _1864;
        _1931 = (((_1988 * cbLight._m0[_1937].z) * _2001) * _2002) + _1865;
    }
    float _2037;
    float _2039;
    float _2041;
    if (_1666)
    {
        _2037 = _1927;
        _2039 = _1929;
        _2041 = _1931;
    }
    else
    {
        uint _2048 = _1571 + 3u;
        uint _2052 = _1571 + 11u;
        float _2066 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2048].w)) * _359) * 0.949999988079071044921875);
        float _2067 = _2066 * _2066;
        float _2068 = cbLight._m0[_2048].x + _437;
        float _2069 = cbLight._m0[_2048].y + _438;
        float _2070 = cbLight._m0[_2048].z + _439;
        float _2074 = inversesqrt(dot(vec3(_2068, _2069, _2070), vec3(_2068, _2069, _2070)));
        float _2075 = _2074 * _2068;
        float _2076 = _2074 * _2069;
        float _2077 = _2074 * _2070;
        float _2078 = dot(vec3(_356, _357, _358), vec3(cbLight._m0[_2048].xyz));
        float _3913 = isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0));
        float _2081 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
        float _2082 = dot(vec3(_356, _357, _358), vec3(_2075, _2076, _2077));
        float _3924 = isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0));
        float _2085 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
        float _2086 = dot(vec3(cbLight._m0[_2048].xyz), vec3(_2075, _2076, _2077));
        float _3935 = isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0));
        float _2090 = _2067 * _2067;
        float _2094 = ((_2085 * _2085) * (_2090 + (-1.0))) + 1.0;
        float _2103 = (exp2(log2(1.0 - (isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2104 = 1.0 - _2067;
        float _2114 = (0.5 / (((_1740 * ((_2081 * _2104) + _2067)) + 9.9999999392252902907785028219223e-09) + (((_1740 * _2104) + _2067) * _2081))) * _2081;
        float _3946 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
        float _2116 = (isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0))) * (_2090 / ((_2094 * _2094) * 3.141590118408203125));
        float _2117 = isnan(1.0) ? _1587 : (isnan(_1587) ? 1.0 : min(_1587, 1.0));
        _2037 = (((_2103 * cbLight._m0[_2052].x) * _2116) * _2117) + _1927;
        _2039 = (((_2103 * cbLight._m0[_2052].y) * _2116) * _2117) + _1929;
        _2041 = (((_2103 * cbLight._m0[_2052].z) * _2116) * _2117) + _1931;
    }
    float _2251;
    float _2253;
    float _2255;
    float _2257;
    float _2259;
    float _2261;
    if (_1569.y == 0u)
    {
        float _2192 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2193 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2192;
        float _2194 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2192;
        float _2195 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2192;
        uvec4 _2207 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2208 = _2207.x;
        uint _2219 = uint((float(_2207.y) * floor(float(uint(cbSceneParam._m0[85u].y * _446) / _2208))) + floor(float(uint(cbSceneParam._m0[85u].x * _445) / _2208)));
        float _2229 = (log2(_2195 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2230 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
        uint _2233 = uint(isnan(14.0) ? _2230 : (isnan(_2230) ? 14.0 : min(_2230, 14.0)));
        uvec4 _2238 = texelFetch(g_lightClusterGridBuffer, int(((_2233 << 2u) + (_2219 << 6u)) >> 2u));
        uint _2239 = _2238.x;
        uint _2240 = _2207.z;
        float _2339;
        float _2341;
        float _2343;
        float _2345;
        float _2347;
        float _2349;
        if (((((1u << ((_2240 >> 4u) & 15u)) + 4294967295u) & _2239) == 0u) || ((_2240 & 240u) == 0u))
        {
            _2339 = 0.0;
            _2341 = 0.0;
            _2343 = 0.0;
            _2345 = 0.0;
            _2347 = 0.0;
            _2349 = 0.0;
        }
        else
        {
            float _2340;
            float _2342;
            float _2344;
            float _2346;
            float _2348;
            float _2350;
            float _2483 = 0.0;
            float _2484 = 0.0;
            float _2485 = 0.0;
            float _2486 = 0.0;
            float _2487 = 0.0;
            float _2488 = 0.0;
            uint _2489 = 0u;
            uint _2498;
            bool _2499;
            for (;;)
            {
                _2498 = texelFetch(g_lightClassification, int((((_2233 << 5u) + (_2219 << 9u)) + (_2489 << 2u)) >> 2u)).x;
                _2499 = _2498 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2499)
                {
                    frontier_phi_63_pred = _2488;
                    frontier_phi_63_pred_1 = _2487;
                    frontier_phi_63_pred_2 = _2486;
                    frontier_phi_63_pred_3 = _2485;
                    frontier_phi_63_pred_4 = _2484;
                    frontier_phi_63_pred_5 = _2483;
                }
                else
                {
                    float _2607;
                    float _2608;
                    float _2609;
                    float _2610;
                    float _2611;
                    float _2612;
                    uint _2613;
                    _2607 = _2483;
                    _2608 = _2484;
                    _2609 = _2485;
                    _2610 = _2486;
                    _2611 = _2487;
                    _2612 = _2488;
                    _2613 = _2498;
                    float _2539;
                    float _2540;
                    float _2541;
                    float _2542;
                    float _2543;
                    float _2544;
                    for (;;)
                    {
                        uint _2617 = uint(findLSB(_2613)) + (_2489 << 5u);
                        uint _2614 = (_2613 + 4294967295u) & _2613;
                        uint _2619 = _2617 * 48u;
                        vec4 _2633 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2619)).x, texelFetch(g_PointLightRenderingBuffer, int(_2619 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2619 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2619 + 3u)).x));
                        uint _2639 = (_2617 * 48u) + 4u;
                        vec4 _2652 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2639)).x, texelFetch(g_PointLightRenderingBuffer, int(_2639 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2639 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2639 + 3u)).x));
                        uint _2658 = (_2617 * 48u) + 8u;
                        vec3 _2669 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2658)).x, texelFetch(g_PointLightRenderingBuffer, int(_2658 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2658 + 2u)).x));
                        float _2673 = _2633.x - _2193;
                        float _2674 = _2633.y - _2194;
                        float _2675 = _2633.z - _2195;
                        float _2676 = dot(vec3(_2673, _2674, _2675), vec3(_2673, _2674, _2675));
                        float _2679 = inversesqrt(_2676);
                        float _2680 = _2679 * _2673;
                        float _2681 = _2679 * _2674;
                        float _2682 = _2679 * _2675;
                        float _2683 = dot(vec3(_467, _470, _473), vec3(_2680, _2681, _2682));
                        float _2688 = 1.0 - (_2676 * _2633.w);
                        float _3972 = isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : max(_2688, 0.0));
                        float _2689 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
                        float _2690 = sqrt(_2676) * _2652.w;
                        float _2693 = 1.39999997615814208984375 / (_2690 + 1.39999997615814208984375);
                        float _2694 = _2693 * _2693;
                        float _2697 = ((1.0 - _2694) * _2683) + _2694;
                        float _2700 = _2690 * _2690;
                        float _2704 = ((isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0))) * _2689) / ((_2700 * 0.699999988079071044921875) + 1.0);
                        float _2708 = (-0.0) - _2193;
                        float _2709 = (-0.0) - _2194;
                        float _2710 = (-0.0) - _2195;
                        float _2714 = inversesqrt(dot(vec3(_2708, _2709, _2710), vec3(_2708, _2709, _2710)));
                        float _2715 = _2714 * _2708;
                        float _2716 = _2714 * _2709;
                        float _2717 = _2714 * _2710;
                        float _2725 = exp2(log2(1.0 / ((_2700 * 3.5) + 5.0)) * 0.25);
                        float _2726 = 1.0 - _528;
                        float _2733 = sqrt(1.0 - ((1.0 - (_2726 * _2726)) * (1.0 - (_2725 * _2725))));
                        float _2734 = _2733 * _2733;
                        float _2735 = _2734 * _2734;
                        float _2736 = _2715 + _2680;
                        float _2737 = _2716 + _2681;
                        float _2738 = _2717 + _2682;
                        float _2742 = inversesqrt(dot(vec3(_2736, _2737, _2738), vec3(_2736, _2737, _2738)));
                        float _2746 = dot(vec3(_467, _470, _473), vec3(_2715, _2716, _2717));
                        float _3988 = isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : max(_2746, 0.0));
                        float _2749 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
                        float _2750 = dot(vec3(_467, _470, _473), vec3(_2742 * _2736, _2742 * _2737, _2742 * _2738));
                        float _3999 = isnan(0.0) ? _2750 : (isnan(_2750) ? 0.0 : max(_2750, 0.0));
                        float _2753 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
                        float _2757 = ((_2753 * _2753) * (_2735 + (-1.0))) + 1.0;
                        float _2758 = _2693 * _2734;
                        float _2759 = _2758 * _2758;
                        float _2762 = ((1.0 - _2759) * _2683) + _2759;
                        float _4010 = isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0));
                        float _2763 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
                        float _2764 = 1.0 - _2734;
                        float _2774 = (0.5 / (((_2763 * ((_2749 * _2764) + _2734)) + 9.9999999392252902907785028219223e-09) + (((_2763 * _2764) + _2734) * _2749))) * _2763;
                        float _4021 = isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : max(_2774, 0.0));
                        float _2785 = (((_2735 * 3.1415927410125732421875) * (isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0)))) / ((_2757 * _2757) * ((_2700 * 2.1991131305694580078125) + 3.141590118408203125))) * _2689;
                        _2542 = (_2704 * _2652.x) + _2610;
                        _2543 = (_2704 * _2652.y) + _2611;
                        _2544 = (_2704 * _2652.z) + _2612;
                        _2539 = (_2785 * _2669.x) + _2607;
                        _2540 = (_2785 * _2669.y) + _2608;
                        _2541 = (_2785 * _2669.z) + _2609;
                        if (_2614 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2607 = _2539;
                            _2608 = _2540;
                            _2609 = _2541;
                            _2610 = _2542;
                            _2611 = _2543;
                            _2612 = _2544;
                            _2613 = _2614;
                        }
                    }
                    frontier_phi_63_pred = _2544;
                    frontier_phi_63_pred_1 = _2543;
                    frontier_phi_63_pred_2 = _2542;
                    frontier_phi_63_pred_3 = _2541;
                    frontier_phi_63_pred_4 = _2540;
                    frontier_phi_63_pred_5 = _2539;
                }
                _2350 = frontier_phi_63_pred;
                _2348 = frontier_phi_63_pred_1;
                _2346 = frontier_phi_63_pred_2;
                _2344 = frontier_phi_63_pred_3;
                _2342 = frontier_phi_63_pred_4;
                _2340 = frontier_phi_63_pred_5;
                uint _2490 = _2489 + 1u;
                if (_2490 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2483 = _2340;
                    _2484 = _2342;
                    _2485 = _2344;
                    _2486 = _2346;
                    _2487 = _2348;
                    _2488 = _2350;
                    _2489 = _2490;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2339 = _2340;
            _2341 = _2342;
            _2343 = _2344;
            _2345 = _2346;
            _2347 = _2348;
            _2349 = _2350;
        }
        uvec4 _2353 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2354 = _2353.z;
        uint _2356 = (_2354 >> 8u) & 15u;
        float _2451;
        float _2453;
        float _2455;
        float _2457;
        float _2459;
        float _2461;
        if (((4294967295u << _2356) & _2239) == 0u)
        {
            _2451 = _2339;
            _2453 = _2341;
            _2455 = _2343;
            _2457 = _2345;
            _2459 = _2347;
            _2461 = _2349;
        }
        else
        {
            float _2476 = inversesqrt(dot(vec3(_2193, _2194, _2195), vec3(_2193, _2194, _2195)));
            float _2477 = _2476 * _2193;
            float _2478 = _2476 * _2194;
            float _2479 = _2476 * _2195;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2356 < ((_2354 >> 12u) & 15u))
            {
                float _2452;
                float _2454;
                float _2456;
                float _2458;
                float _2460;
                float _2462;
                float _2590 = _2339;
                float _2591 = _2341;
                float _2592 = _2343;
                float _2593 = _2345;
                float _2594 = _2347;
                float _2595 = _2349;
                uint _2596 = _2356;
                uint _2605;
                bool _2606;
                for (;;)
                {
                    _2605 = texelFetch(g_lightClassification, int((((_2233 << 5u) + (_2219 << 9u)) + (_2596 << 2u)) >> 2u)).x;
                    _2606 = _2605 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2606)
                    {
                        frontier_phi_69_pred = _2595;
                        frontier_phi_69_pred_1 = _2594;
                        frontier_phi_69_pred_2 = _2593;
                        frontier_phi_69_pred_3 = _2592;
                        frontier_phi_69_pred_4 = _2591;
                        frontier_phi_69_pred_5 = _2590;
                    }
                    else
                    {
                        float _2790;
                        float _2791;
                        float _2792;
                        float _2793;
                        float _2794;
                        float _2795;
                        float _3086;
                        float _3087;
                        float _3088;
                        float _3089;
                        float _3090;
                        float _3091;
                        float _2803 = _2590;
                        float _2804 = _2591;
                        float _2805 = _2592;
                        float _2806 = _2593;
                        float _2807 = _2594;
                        float _2808 = _2595;
                        uint _2809 = _2605;
                        uint _2810;
                        vec4 _2835;
                        float _2836;
                        vec4 _2851;
                        vec3 _2863;
                        vec4 _2879;
                        vec4 _2895;
                        float _2942;
                        bool _2943;
                        for (;;)
                        {
                            uint _2820 = ((_2596 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2809));
                            _2810 = (_2809 + 4294967295u) & _2809;
                            uint _2822 = _2820 * 40u;
                            _2835 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2822)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2822 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2822 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2822 + 3u)).x));
                            _2836 = _2835.w;
                            uint _2838 = (_2820 * 40u) + 4u;
                            _2851 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2838)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2838 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2838 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2838 + 3u)).x));
                            uint _2853 = (_2820 * 40u) + 8u;
                            _2863 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2853)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2853 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2853 + 2u)).x));
                            uint _2866 = (_2820 * 40u) + 16u;
                            _2879 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2866)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2866 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2866 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2866 + 3u)).x));
                            uint _2882 = (_2820 * 40u) + 20u;
                            _2895 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2882)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 3u)).x));
                            uint _2898 = (_2820 * 40u) + 24u;
                            vec4 _2911 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2898)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2898 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2898 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2898 + 3u)).x));
                            uint _2917 = (_2820 * 40u) + 28u;
                            vec4 _2930 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2917)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2917 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2917 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2917 + 3u)).x));
                            _2942 = fma(_2195, _2930.z, fma(_2194, _2930.y, _2930.x * _2193)) + _2930.w;
                            _2943 = !((fma(_2195, _2911.z, fma(_2194, _2911.y, _2911.x * _2193)) + _2911.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2943)
                            {
                                float _2970 = _2835.x - _2193;
                                float _2971 = _2835.y - _2194;
                                float _2972 = _2835.z - _2195;
                                float _2973 = dot(vec3(_2970, _2971, _2972), vec3(_2970, _2971, _2972));
                                float _2976 = inversesqrt(_2973);
                                float _2977 = _2976 * _2970;
                                float _2978 = _2976 * _2971;
                                float _2979 = _2976 * _2972;
                                float _2983 = 1.0 - (_2973 / (_2836 * _2836));
                                float _4032 = isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : max(_2983, 0.0));
                                float _2984 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
                                float _2988 = sqrt(_2973) * _2851.w;
                                float _2990 = 1.39999997615814208984375 / (_2988 + 1.39999997615814208984375);
                                float _2991 = _2990 * _2990;
                                float _2994 = ((1.0 - _2991) * dot(vec3(_2977, _2978, _2979), vec3(_467, _470, _473))) + _2991;
                                float _2997 = _2988 * _2988;
                                float _3001 = (fma(_2195, _2879.z, fma(_2194, _2879.y, _2879.x * _2193)) + _2879.w) / _2942;
                                float _3002 = (fma(_2195, _2895.z, fma(_2194, _2895.y, _2895.x * _2193)) + _2895.w) / _2942;
                                float _3006 = 1.0 - dot(vec2(_3001, _3002), vec2(_3001, _3002));
                                float _4048 = isnan(0.0) ? _3006 : (isnan(_3006) ? 0.0 : max(_3006, 0.0));
                                float _3007 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
                                float _3008 = _3007 * (((isnan(0.0) ? _2994 : (isnan(_2994) ? 0.0 : max(_2994, 0.0))) * _2984) / ((_2997 * 0.699999988079071044921875) + 1.0));
                                float _3020 = exp2(log2(1.0 / ((_2997 * 3.5) + 5.0)) * 0.25);
                                float _3021 = 1.0 - _528;
                                float _3028 = sqrt(1.0 - ((1.0 - (_3021 * _3021)) * (1.0 - (_3020 * _3020))));
                                float _3029 = _3028 * _3028;
                                float _3030 = _3029 * _3029;
                                float _3031 = _2977 - _2477;
                                float _3032 = _2978 - _2478;
                                float _3033 = _2979 - _2479;
                                float _3037 = inversesqrt(dot(vec3(_3031, _3032, _3033), vec3(_3031, _3032, _3033)));
                                float _3041 = dot(vec3(_467, _470, _473), vec3((-0.0) - _2477, (-0.0) - _2478, (-0.0) - _2479));
                                float _4059 = isnan(0.0) ? _3041 : (isnan(_3041) ? 0.0 : max(_3041, 0.0));
                                float _3044 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
                                float _3045 = dot(vec3(_467, _470, _473), vec3(_3037 * _3031, _3037 * _3032, _3037 * _3033));
                                float _4070 = isnan(0.0) ? _3045 : (isnan(_3045) ? 0.0 : max(_3045, 0.0));
                                float _3048 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
                                float _3052 = ((_3048 * _3048) * (_3030 + (-1.0))) + 1.0;
                                float _3053 = _2990 * _3029;
                                float _3054 = _3053 * _3053;
                                float _3060 = ((1.0 - _3054) * dot(vec3(_467, _470, _473), vec3(_2977, _2978, _2979))) + _3054;
                                float _4081 = isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : max(_3060, 0.0));
                                float _3061 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
                                float _3062 = 1.0 - _3029;
                                float _3072 = (0.5 / (((_3061 * ((_3044 * _3062) + _3029)) + 9.9999999392252902907785028219223e-09) + (((_3061 * _3062) + _3029) * _3044))) * _3061;
                                float _4092 = isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0));
                                float _3082 = (_3007 * _2984) * (((_3030 * 3.1415927410125732421875) * (isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0)))) / ((_3052 * _3052) * ((_2997 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3008 * _2851.z;
                                frontier_phi_75_pred_1 = _3008 * _2851.y;
                                frontier_phi_75_pred_2 = _3008 * _2851.x;
                                frontier_phi_75_pred_3 = _3082 * _2863.z;
                                frontier_phi_75_pred_4 = _3082 * _2863.y;
                                frontier_phi_75_pred_5 = _3082 * _2863.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3091 = frontier_phi_75_pred;
                            _3090 = frontier_phi_75_pred_1;
                            _3089 = frontier_phi_75_pred_2;
                            _3088 = frontier_phi_75_pred_3;
                            _3087 = frontier_phi_75_pred_4;
                            _3086 = frontier_phi_75_pred_5;
                            _2793 = _3089 + _2806;
                            _2794 = _3090 + _2807;
                            _2795 = _3091 + _2808;
                            _2790 = _3086 + _2803;
                            _2791 = _3087 + _2804;
                            _2792 = _3088 + _2805;
                            if (_2810 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2803 = _2790;
                                _2804 = _2791;
                                _2805 = _2792;
                                _2806 = _2793;
                                _2807 = _2794;
                                _2808 = _2795;
                                _2809 = _2810;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2795;
                        frontier_phi_69_pred_1 = _2794;
                        frontier_phi_69_pred_2 = _2793;
                        frontier_phi_69_pred_3 = _2792;
                        frontier_phi_69_pred_4 = _2791;
                        frontier_phi_69_pred_5 = _2790;
                    }
                    _2462 = frontier_phi_69_pred;
                    _2460 = frontier_phi_69_pred_1;
                    _2458 = frontier_phi_69_pred_2;
                    _2456 = frontier_phi_69_pred_3;
                    _2454 = frontier_phi_69_pred_4;
                    _2452 = frontier_phi_69_pred_5;
                    uint _2597 = _2596 + 1u;
                    if (_2597 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2590 = _2452;
                        _2591 = _2454;
                        _2592 = _2456;
                        _2593 = _2458;
                        _2594 = _2460;
                        _2595 = _2462;
                        _2596 = _2597;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2462;
                frontier_phi_57_58_ladder_1 = _2460;
                frontier_phi_57_58_ladder_2 = _2458;
                frontier_phi_57_58_ladder_3 = _2456;
                frontier_phi_57_58_ladder_4 = _2454;
                frontier_phi_57_58_ladder_5 = _2452;
            }
            else
            {
                frontier_phi_57_58_ladder = _2349;
                frontier_phi_57_58_ladder_1 = _2347;
                frontier_phi_57_58_ladder_2 = _2345;
                frontier_phi_57_58_ladder_3 = _2343;
                frontier_phi_57_58_ladder_4 = _2341;
                frontier_phi_57_58_ladder_5 = _2339;
            }
            _2451 = frontier_phi_57_58_ladder_5;
            _2453 = frontier_phi_57_58_ladder_4;
            _2455 = frontier_phi_57_58_ladder_3;
            _2457 = frontier_phi_57_58_ladder_2;
            _2459 = frontier_phi_57_58_ladder_1;
            _2461 = frontier_phi_57_58_ladder;
        }
        float _2466 = isnan(1.0) ? _512 : (isnan(_512) ? 1.0 : min(_512, 1.0));
        _2251 = (_2466 * _2457) + _1704;
        _2253 = (_2466 * _2459) + _1706;
        _2255 = (_2466 * _2461) + _1708;
        _2257 = ((_2451 * 0.039999999105930328369140625) * _2466) + _2037;
        _2259 = ((_2453 * 0.039999999105930328369140625) * _2466) + _2039;
        _2261 = ((_2455 * 0.039999999105930328369140625) * _2466) + _2041;
    }
    else
    {
        _2251 = _1704;
        _2253 = _1706;
        _2255 = _1708;
        _2257 = _2037;
        _2259 = _2039;
        _2261 = _2041;
    }
    float _4108 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _4119 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _4130 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    uint _2281 = _486 + 6u;
    float _2289 = _445 / cbSceneParam._m0[86u].x;
    float _2290 = _446 / cbSceneParam._m0[86u].y;
    vec4 _2304 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2289, _2290, (log2((isnan(cbSceneParam._m0[77u].w) ? _378 : (isnan(_378) ? cbSceneParam._m0[77u].w : min(_378, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2306 = _2304.x;
    float _2307 = _2304.y;
    float _2308 = _2304.z;
    float _2309 = _2304.w;
    float _2401;
    float _2403;
    float _2405;
    float _2407;
    if (_378 > cbSceneParam._m0[78u].w)
    {
        float _2364 = isnan(_378) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _378 : min(cbSceneParam._m0[80u].w, _378));
        float _2365 = _2364 / _378;
        float _2376 = _2365 * _430;
        float _2377 = _431 * _2365;
        float _2378 = (-0.0) - _2377;
        float _2379 = _2365 * _432;
        float _2381 = (cbSceneParam._m0[77u].w * _2378) / _2364;
        float _2382 = _2381 + cbSceneParam._m0[79u].w;
        float _2383 = cbSceneParam._m0[79u].w - _2377;
        float _2389 = sqrt(((_2376 * _2376) + (_2377 * _2377)) + (_2379 * _2379));
        float _2392 = (1.0 - (cbSceneParam._m0[77u].w / _2364)) * _2389;
        float _2397 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2399 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2552;
        if (abs((_2378 - _2381) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2552 = ((((_2382 > 0.0) ? exp2(_2397 * _2382) : (2.0 - exp2(_2399 * _2382))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2392;
        }
        else
        {
            float _2512 = 1.0 / cbSceneParam._m0[80u].x;
            float _2513 = isnan(_2383) ? _2382 : (isnan(_2382) ? _2383 : max(_2382, _2383));
            float _2514 = isnan(_2383) ? _2382 : (isnan(_2382) ? _2383 : min(_2382, _2383));
            float _2523 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : min(_2513, 0.0));
            float _2524 = isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : min(_2514, 0.0));
            _2552 = ((abs(_2389 / _2378) * cbSceneParam._m0[80u].y) * ((((_2523 - _2524) * 2.0) - ((exp2(_2397 * (isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0)))) - exp2(_2397 * (isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : max(_2514, 0.0))))) * _2512)) - ((exp2(_2399 * _2523) - exp2(_2399 * _2524)) * _2512))) + (_2392 * cbSceneParam._m0[80u].z);
        }
        vec4 _2554 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2289, _2290, 1.0), 0.0);
        float _2563 = exp2((_2552 * (-1.44269502162933349609375)) * (1.0 - _2554.w));
        float _2564 = log2(_2563);
        float _2580 = log2(_2309);
        _2401 = (exp2(_2580 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2564 * cbSceneParam._m0[78u].x)) * _2554.x) / cbSceneParam._m0[78u].x)) + _2306;
        _2403 = (exp2(_2580 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2564 * cbSceneParam._m0[78u].y)) * _2554.y) / cbSceneParam._m0[78u].y)) + _2307;
        _2405 = (exp2(_2580 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2564 * cbSceneParam._m0[78u].z)) * _2554.z) / cbSceneParam._m0[78u].z)) + _2308;
        _2407 = _2563 * _2309;
    }
    else
    {
        _2401 = _2306;
        _2403 = _2307;
        _2405 = _2308;
        _2407 = _2309;
    }
    float _2419 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2420 = _2419 == 3.0;
    float _2421 = log2(_2407);
    float _2428 = exp2(_2421 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0))) * (_2251 + ((isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0))) * _512))) + ((_2257 + ((isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0))) * _1319)) * cbPerFrame._m0[3u].x));
    float _2429 = exp2(_2421 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0))) * (_2253 + ((isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0))) * _512))) + ((_2259 + ((isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0))) * _1319)) * cbPerFrame._m0[3u].x));
    float _2430 = exp2(_2421 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0))) * (_2255 + ((isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0))) * _512))) + ((_2261 + ((isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0))) * _1319)) * cbPerFrame._m0[3u].x));
    float _2439 = (_2419 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2439 * (_2420 ? _2428 : (_2428 + (cbSceneParam._m0[72u].w * _2401)));
    SV_Target.y = _2439 * (_2420 ? _2429 : (_2429 + (cbSceneParam._m0[72u].w * _2403)));
    SV_Target.z = _2439 * (_2420 ? _2430 : (_2430 + (cbSceneParam._m0[72u].w * _2405)));
    SV_Target.w = cbInstanceData._m0[_2281].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2281].w;
}


