#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _886;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _192 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _199 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _200 = _199 * NORMAL.x;
    float _201 = _199 * NORMAL.y;
    float _202 = _199 * NORMAL.z;
    float _206 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _214;
    float _215;
    float _216;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _214 = (-0.0) - _200;
        _215 = (-0.0) - _201;
        _216 = (-0.0) - _202;
    }
    else
    {
        _214 = _200;
        _215 = _201;
        _216 = _202;
    }
    vec4 _242 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _248 = _242.x * cbMtdParam._m0[9u].x;
    float _249 = _242.y * cbMtdParam._m0[9u].y;
    float _250 = _242.z * cbMtdParam._m0[9u].z;
    vec4 _262 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _266 = _262.z;
    float _270 = (_262.x * 2.0) + (-1.0);
    float _272 = (_262.y * 2.0) + (-1.0);
    float _273 = dot(vec2(_270, _272), vec2(_270, _272));
    float _3483 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    float _279 = sqrt(1.0 - (isnan(1.0) ? _3483 : (isnan(_3483) ? 1.0 : min(_3483, 1.0))));
    float _291 = (TEXCOORD_3.x - (((1.0 - TEXCOORD_3.x) * 0.00999999977648258209228515625) * cbMtdParam._m0[12u].y)) * (cbMtdParam._m0[12u].z + 1.0);
    float _3494 = isnan(0.0) ? _291 : (isnan(_291) ? 0.0 : max(_291, 0.0));
    float _292 = isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0));
    float _299 = (_292 * (cbMtdParam._m0[10u].x - _248)) + _248;
    float _300 = (_292 * (cbMtdParam._m0[10u].y - _249)) + _249;
    float _301 = (_292 * (cbMtdParam._m0[10u].z - _250)) + _250;
    vec4 _313 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _320 = (_313.x * 2.0) + (-1.0);
    float _321 = (_313.y * 2.0) + (-1.0);
    float _322 = dot(vec2(_320, _321), vec2(_320, _321));
    float _3505 = isnan(0.0) ? _322 : (isnan(_322) ? 0.0 : max(_322, 0.0));
    float _330 = (_292 * (_313.z - _266)) + _266;
    float _342 = (((_320 - _270) + (cbMtdParam._m0[12u].w * _270)) * _292) + _270;
    float _343 = (((_321 - _272) + (cbMtdParam._m0[12u].w * _272)) * _292) + _272;
    float _344 = (_292 * (sqrt(1.0 - (isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0)))) - _279)) + _279;
    float _347 = fma(_344, _214, fma(_343, _206 * TANGENT.x, (_192 * _184) * _342));
    float _350 = fma(_344, _215, fma(_343, _206 * TANGENT.y, (_192 * _185) * _342));
    float _353 = fma(_344, _216, fma(_343, _206 * TANGENT.z, (_192 * _186) * _342));
    float _357 = inversesqrt(dot(vec3(_347, _350, _353), vec3(_347, _350, _353)));
    float _358 = _357 * _347;
    float _359 = _357 * _350;
    float _360 = _357 * _353;
    float _3516 = isnan(0.0) ? _330 : (isnan(_330) ? 0.0 : max(_330, 0.0));
    float _361 = isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0));
    float _3527 = isnan(0.0) ? _299 : (isnan(_299) ? 0.0 : max(_299, 0.0));
    float _3538 = isnan(0.0) ? _300 : (isnan(_300) ? 0.0 : max(_300, 0.0));
    float _3549 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _380 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _422 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _432 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _422);
    float _433 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _422);
    float _434 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _422);
    float _438 = inversesqrt(dot(vec3(_432, _433, _434), vec3(_432, _433, _434)));
    float _439 = _432 * _438;
    float _440 = _433 * _438;
    float _441 = _434 * _438;
    float _447 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _448 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _469 = fma(_360, cbSceneParam._m0[5u].z, fma(_359, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _358));
    float _472 = fma(_360, cbSceneParam._m0[6u].z, fma(_359, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _358));
    float _475 = fma(_360, cbSceneParam._m0[7u].z, fma(_359, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _358));
    uint _488 = uint(roundEven(NORMAL.w)) * 13u;
    uint _491 = (_488 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _497 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0)))) * cbInstanceData._m0[_491].x;
    float _498 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0)))) * cbInstanceData._m0[_491].y;
    float _499 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0)))) * cbInstanceData._m0[_491].z;
    float _3560 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _500 = isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0));
    float _3571 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _501 = isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0));
    float _3582 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _502 = isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0));
    vec4 _511 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _447, cbSceneParam._m0[86u].y * _448));
    float _514 = _511.x * TEXCOORD_3.w;
    float _515 = dot(vec3(_358, _359, _360), vec3(_439, _440, _441));
    float _518 = _515 * 2.0;
    float _522 = (_518 * _358) - _439;
    float _523 = (_518 * _359) - _440;
    float _524 = (_518 * _360) - _441;
    float _528 = abs(dot(vec3(_439, _440, _441), vec3(_358, _359, _360)));
    float _3593 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _530 = sqrt(_361);
    float _543 = exp2((_530 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_530 * 3.0));
    float _575 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _579 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _583 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _885;
    float _887;
    float _888;
    float _889;
    float _890;
    float _891;
    float _892;
    float _893;
    float _894;
    float _895;
    float _896;
    float _897;
    float _898;
    float _899;
    float _900;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _610 = fma(_583, cbModelParam._m0[26u].z, fma(_579, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _575));
        float _614 = fma(_583, cbModelParam._m0[27u].z, fma(_579, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _575));
        float _618 = fma(_583, cbModelParam._m0[28u].z, fma(_579, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _575));
        float _643 = _575 + _358;
        float _644 = _579 + _359;
        float _645 = _583 + _360;
        float _655 = fma(_645, cbModelParam._m0[26u].z, fma(_644, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _643)) - _610;
        float _656 = fma(_645, cbModelParam._m0[27u].z, fma(_644, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _643)) - _614;
        float _657 = fma(_645, cbModelParam._m0[28u].z, fma(_644, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _643)) - _618;
        float _661 = inversesqrt(dot(vec3(_655, _656, _657), vec3(_655, _656, _657)));
        float _674 = ((_661 * _655) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_610 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _675 = ((_661 * _656) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_614 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _676 = ((_661 * _657) / cbModelParam._m0[34u].z) + ((((((_618 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _679 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_674, _675, _676), 0.0);
        vec4 _686 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_674, _675, _676), 0.0);
        vec4 _693 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_674, _675, _676), 0.0);
        vec4 _700 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_674, _675, _676), 0.0);
        float _713 = exp2((_679.w + (-0.5)) * 20.0) * 2.0;
        float _714 = _713 * (_679.x + (-0.5));
        float _715 = _713 * (_679.y + (-0.5));
        float _716 = _713 * (_679.z + (-0.5));
        float _723 = exp2((_686.w + (-0.5)) * 20.0) * 2.0;
        float _724 = _723 * (_686.x + (-0.5));
        float _725 = _723 * (_686.y + (-0.5));
        float _726 = _723 * (_686.z + (-0.5));
        float _733 = exp2((_693.w + (-0.5)) * 20.0) * 2.0;
        float _734 = _733 * (_693.x + (-0.5));
        float _735 = _733 * (_693.y + (-0.5));
        float _736 = _733 * (_693.z + (-0.5));
        float _743 = exp2((_700.w + (-0.5)) * 20.0) * 2.0;
        float _744 = _743 * (_700.x + (-0.5));
        float _745 = _743 * (_700.y + (-0.5));
        float _746 = _743 * (_700.z + (-0.5));
        float _747 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
        float _748 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
        float _749 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
        float _750 = _714 * 0.5;
        float _751 = _724 * 0.5;
        float _752 = _734 * 0.5;
        float _753 = dot(vec3(_750, _751, _752), vec3(_750, _751, _752));
        float _758 = (_753 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_753);
        float _767 = (dot(vec3(_358, _359, _360), vec3(_758 * _750, _758 * _751, _758 * _752)) + 1.0) * 0.5;
        float _3619 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
        float _777 = sqrt(((_751 * _751) + (_750 * _750)) + (_752 * _752)) / (_747 + 9.9999997473787516355514526367188e-06);
        float _3630 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
        float _778 = isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0));
        float _779 = _778 * 2.0;
        float _783 = (1.0 - _778) / (_778 + 1.0);
        float _3641 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
        float _784 = isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0));
        float _793 = ((((1.0 - _784) * (_779 + 2.0)) * exp2(log2(isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0))) * (_779 + 1.0))) + _784) * _747;
        float _794 = _715 * 0.5;
        float _795 = _725 * 0.5;
        float _796 = _735 * 0.5;
        float _797 = dot(vec3(_794, _795, _796), vec3(_794, _795, _796));
        float _802 = (_797 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_797);
        float _810 = (dot(vec3(_358, _359, _360), vec3(_802 * _794, _802 * _795, _802 * _796)) + 1.0) * 0.5;
        float _3652 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
        float _819 = sqrt(((_795 * _795) + (_794 * _794)) + (_796 * _796)) / (_748 + 9.9999997473787516355514526367188e-06);
        float _3663 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
        float _820 = isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0));
        float _821 = _820 * 2.0;
        float _825 = (1.0 - _820) / (_820 + 1.0);
        float _3674 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
        float _826 = isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0));
        float _835 = ((((1.0 - _826) * (_821 + 2.0)) * exp2(log2(isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0))) * (_821 + 1.0))) + _826) * _748;
        float _836 = _716 * 0.5;
        float _837 = _726 * 0.5;
        float _838 = _736 * 0.5;
        float _839 = dot(vec3(_836, _837, _838), vec3(_836, _837, _838));
        float _844 = (_839 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_839);
        float _852 = (dot(vec3(_358, _359, _360), vec3(_844 * _836, _844 * _837, _844 * _838)) + 1.0) * 0.5;
        float _3685 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
        float _861 = sqrt(((_837 * _837) + (_836 * _836)) + (_838 * _838)) / (_749 + 9.9999997473787516355514526367188e-06);
        float _3696 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
        float _862 = isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0));
        float _863 = _862 * 2.0;
        float _867 = (1.0 - _862) / (_862 + 1.0);
        float _3707 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
        float _868 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
        float _877 = ((((1.0 - _868) * (_863 + 2.0)) * exp2(log2(isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0))) * (_863 + 1.0))) + _868) * _749;
        _885 = _716;
        _887 = _715;
        _888 = _714;
        _889 = _726;
        _890 = _725;
        _891 = _724;
        _892 = _736;
        _893 = _735;
        _894 = _734;
        _895 = _749;
        _896 = _748;
        _897 = _747;
        _898 = cbModelParam._m0[36u].z * (isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0)));
        _899 = cbModelParam._m0[36u].z * (isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0)));
        _900 = cbModelParam._m0[36u].z * (isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0)));
    }
    else
    {
        _885 = _886;
        _887 = _886;
        _888 = _886;
        _889 = _886;
        _890 = _886;
        _891 = _886;
        _892 = _886;
        _893 = _886;
        _894 = _886;
        _895 = _886;
        _896 = _886;
        _897 = _886;
        _898 = 0.0;
        _899 = 0.0;
        _900 = 0.0;
    }
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _926 = fma(_583, cbModelParam._m0[30u].z, fma(_579, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _575));
        float _930 = fma(_583, cbModelParam._m0[31u].z, fma(_579, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _575));
        float _934 = fma(_583, cbModelParam._m0[32u].z, fma(_579, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _575));
        float _957 = _575 + _358;
        float _958 = _579 + _359;
        float _959 = _583 + _360;
        float _969 = fma(_959, cbModelParam._m0[30u].z, fma(_958, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _957)) - _926;
        float _970 = fma(_959, cbModelParam._m0[31u].z, fma(_958, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _957)) - _930;
        float _971 = fma(_959, cbModelParam._m0[32u].z, fma(_958, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _957)) - _934;
        float _975 = inversesqrt(dot(vec3(_969, _970, _971), vec3(_969, _970, _971)));
        float _988 = ((_975 * _969) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_926 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _989 = ((_975 * _970) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_930 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _990 = ((_975 * _971) / cbModelParam._m0[35u].z) + ((((((_934 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _992 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_988, _989, _990), 0.0);
        vec4 _999 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_988, _989, _990), 0.0);
        vec4 _1006 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_988, _989, _990), 0.0);
        vec4 _1013 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_988, _989, _990), 0.0);
        float _1025 = exp2((_992.w + (-0.5)) * 20.0) * 2.0;
        float _1026 = _1025 * (_992.x + (-0.5));
        float _1027 = _1025 * (_992.y + (-0.5));
        float _1028 = _1025 * (_992.z + (-0.5));
        float _1035 = exp2((_999.w + (-0.5)) * 20.0) * 2.0;
        float _1036 = _1035 * (_999.x + (-0.5));
        float _1037 = _1035 * (_999.y + (-0.5));
        float _1038 = _1035 * (_999.z + (-0.5));
        float _1045 = exp2((_1006.w + (-0.5)) * 20.0) * 2.0;
        float _1046 = _1045 * (_1006.x + (-0.5));
        float _1047 = _1045 * (_1006.y + (-0.5));
        float _1048 = _1045 * (_1006.z + (-0.5));
        float _1055 = exp2((_1013.w + (-0.5)) * 20.0) * 2.0;
        float _1056 = _1055 * (_1013.x + (-0.5));
        float _1057 = _1055 * (_1013.y + (-0.5));
        float _1058 = _1055 * (_1013.z + (-0.5));
        float _1059 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1060 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1061 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1062 = _1026 * 0.5;
        float _1063 = _1036 * 0.5;
        float _1064 = _1046 * 0.5;
        float _1065 = dot(vec3(_1062, _1063, _1064), vec3(_1062, _1063, _1064));
        float _1070 = (_1065 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1065);
        float _1078 = (dot(vec3(_358, _359, _360), vec3(_1070 * _1062, _1070 * _1063, _1070 * _1064)) + 1.0) * 0.5;
        float _3748 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1087 = sqrt(((_1063 * _1063) + (_1062 * _1062)) + (_1064 * _1064)) / (_1059 + 9.9999997473787516355514526367188e-06);
        float _3759 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1088 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
        float _1089 = _1088 * 2.0;
        float _1093 = (1.0 - _1088) / (_1088 + 1.0);
        float _3770 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1094 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
        float _1103 = ((((1.0 - _1094) * (_1089 + 2.0)) * exp2(log2(isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0))) * (_1089 + 1.0))) + _1094) * _1059;
        float _1104 = _1027 * 0.5;
        float _1105 = _1037 * 0.5;
        float _1106 = _1047 * 0.5;
        float _1107 = dot(vec3(_1104, _1105, _1106), vec3(_1104, _1105, _1106));
        float _1112 = (_1107 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1107);
        float _1120 = (dot(vec3(_358, _359, _360), vec3(_1112 * _1104, _1112 * _1105, _1112 * _1106)) + 1.0) * 0.5;
        float _3781 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1129 = sqrt(((_1105 * _1105) + (_1104 * _1104)) + (_1106 * _1106)) / (_1060 + 9.9999997473787516355514526367188e-06);
        float _3792 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1130 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
        float _1131 = _1130 * 2.0;
        float _1135 = (1.0 - _1130) / (_1130 + 1.0);
        float _3803 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1136 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
        float _1145 = ((((1.0 - _1136) * (_1131 + 2.0)) * exp2(log2(isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0))) * (_1131 + 1.0))) + _1136) * _1060;
        float _1146 = _1028 * 0.5;
        float _1147 = _1038 * 0.5;
        float _1148 = _1048 * 0.5;
        float _1149 = dot(vec3(_1146, _1147, _1148), vec3(_1146, _1147, _1148));
        float _1154 = (_1149 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1149);
        float _1162 = (dot(vec3(_358, _359, _360), vec3(_1154 * _1146, _1154 * _1147, _1154 * _1148)) + 1.0) * 0.5;
        float _3814 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1171 = sqrt(((_1147 * _1147) + (_1146 * _1146)) + (_1148 * _1148)) / (_1061 + 9.9999997473787516355514526367188e-06);
        float _3825 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1172 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
        float _1173 = _1172 * 2.0;
        float _1177 = (1.0 - _1172) / (_1172 + 1.0);
        float _3836 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1178 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
        float _1187 = ((((1.0 - _1178) * (_1173 + 2.0)) * exp2(log2(isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0))) * (_1173 + 1.0))) + _1178) * _1061;
        _1195 = _1028;
        _1196 = _1027;
        _1197 = _1026;
        _1198 = _1038;
        _1199 = _1037;
        _1200 = _1036;
        _1201 = _1048;
        _1202 = _1047;
        _1203 = _1046;
        _1204 = _1061;
        _1205 = _1060;
        _1206 = _1059;
        _1207 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0)));
        _1208 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0)));
        _1209 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0)));
    }
    else
    {
        _1195 = _886;
        _1196 = _886;
        _1197 = _886;
        _1198 = _886;
        _1199 = _886;
        _1200 = _886;
        _1201 = _886;
        _1202 = _886;
        _1203 = _886;
        _1204 = _886;
        _1205 = _886;
        _1206 = _886;
        _1207 = 0.0;
        _1208 = 0.0;
        _1209 = 0.0;
    }
    float _1219 = (cbModelParam._m0[1u].x * (_1207 - _898)) + _898;
    float _1220 = (cbModelParam._m0[1u].x * (_1208 - _899)) + _899;
    float _1221 = (cbModelParam._m0[1u].x * (_1209 - _900)) + _900;
    float _1242 = fma(_1221, cbSceneParam._m0[89u].z, fma(_1220, cbSceneParam._m0[89u].y, _1219 * cbSceneParam._m0[89u].x));
    float _1245 = fma(_1221, cbSceneParam._m0[90u].z, fma(_1220, cbSceneParam._m0[90u].y, _1219 * cbSceneParam._m0[90u].x));
    float _1248 = fma(_1221, cbSceneParam._m0[91u].z, fma(_1220, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1219));
    float _1263 = _522 * 0.5;
    float _1264 = _523 * 0.5;
    float _1265 = _524 * 0.5;
    float _1266 = dot(vec4(_1263, _1264, _1265, 1.0), vec4(_1197, _1200, _1203, _1206));
    float _1269 = dot(vec4(_1263, _1264, _1265, 1.0), vec4(_1196, _1199, _1202, _1205));
    float _1272 = dot(vec4(_1263, _1264, _1265, 1.0), vec4(_1195, _1198, _1201, _1204));
    float _1306;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1279 = dot(vec4(_1263, _1264, _1265, 1.0), vec4(_885, _889, _892, _895));
        float _1283 = dot(vec4(_1263, _1264, _1265, 1.0), vec4(_887, _890, _893, _896));
        float _1287 = dot(vec4(_1263, _1264, _1265, 1.0), vec4(_888, _891, _894, _897));
        float _1294 = dot(vec4(cbModelParam._m0[39u]), vec4(_1263, _1264, _1265, 1.0));
        _1306 = dot(vec3(isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0)), isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0)), isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1294) ? 0.0 : (isnan(0.0) ? _1294 : max(0.0, _1294))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1306 = 1.0;
    }
    float _1317;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1308 = dot(vec4(cbModelParam._m0[40u]), vec4(_1263, _1264, _1265, 1.0));
        _1317 = dot(vec3(isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0)), isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0)), isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1308) ? 0.0 : (isnan(0.0) ? _1308 : max(0.0, _1308))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1317 = 1.0;
    }
    float _1321 = (_1317 * cbModelParam._m0[1u].x) + (_1306 * (1.0 - cbModelParam._m0[1u].x));
    float _1331 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _361);
    float _1332 = isnan(_1331) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1331 : min(cbModelParam._m0[25u].z, _1331));
    float _1413;
    float _1415;
    float _1417;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1380 = fma(_583, cbModelParam._m0[13u].z, fma(_579, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _575)) + cbModelParam._m0[13u].w;
        float _1384 = fma(_583, cbModelParam._m0[14u].z, fma(_579, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _575)) + cbModelParam._m0[14u].w;
        float _1388 = fma(_583, cbModelParam._m0[15u].z, fma(_579, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _575)) + cbModelParam._m0[15u].w;
        float _1391 = fma(_524, cbModelParam._m0[13u].z, fma(_523, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _522));
        float _1394 = fma(_524, cbModelParam._m0[14u].z, fma(_523, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _522));
        float _1397 = fma(_524, cbModelParam._m0[15u].z, fma(_523, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _522));
        float _1425;
        if (_1391 > 0.0)
        {
            _1425 = abs((1.0 - _1380) / _1391);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1391 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1380 + 1.0) / _1391);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1425 = frontier_phi_16_14_ladder;
        }
        float _1598;
        if (_1394 > 0.0)
        {
            _1598 = abs((1.0 - _1384) / _1394);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1394 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1384 + 1.0) / _1394);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1598 = frontier_phi_25_21_ladder;
        }
        float _1894;
        if (_1397 > 0.0)
        {
            _1894 = abs((1.0 - _1388) / _1397);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1397 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1388 + 1.0) / _1397);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1894 = frontier_phi_37_32_ladder;
        }
        float _1896 = isnan(_1598) ? _1425 : (isnan(_1425) ? _1598 : min(_1425, _1598));
        float _1897 = isnan(_1894) ? _1896 : (isnan(_1896) ? _1894 : min(_1896, _1894));
        float _1901 = (_1897 * _1391) + _1380;
        float _1902 = (_1897 * _1394) + _1384;
        float _1903 = (_1897 * _1397) + _1388;
        float _1904 = _1897 * 9.9999997473787516355514526367188e-05;
        float _1906 = (-1.0) - _1904;
        float _1908 = _1904 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1903 > _1908) || ((_1903 < _1906) || ((_1902 > _1908) || ((_1902 < _1906) || ((_1901 < _1906) || (_1901 > _1908))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2048 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1903, cbModelParam._m0[9u].z, fma(_1902, cbModelParam._m0[9u].y, _1901 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1903, cbModelParam._m0[10u].z, fma(_1902, cbModelParam._m0[10u].y, _1901 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1903, cbModelParam._m0[11u].z, fma(_1902, cbModelParam._m0[11u].y, _1901 * cbModelParam._m0[11u].x))), _1332);
            frontier_phi_15_37_ladder = _2048.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2048.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2048.z * cbModelParam._m0[1u].y;
        }
        _1413 = frontier_phi_15_37_ladder_1;
        _1415 = frontier_phi_15_37_ladder;
        _1417 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1401 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_522, _523, _524), _1332);
        _1413 = _1401.x * cbModelParam._m0[1u].y;
        _1415 = _1401.y * cbModelParam._m0[1u].y;
        _1417 = _1401.z * cbModelParam._m0[1u].y;
    }
    float _1421 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _361);
    float _1422 = isnan(_1421) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1421 : min(cbModelParam._m0[25u].w, _1421));
    float _1515;
    float _1517;
    float _1519;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1479 = fma(_583, cbModelParam._m0[21u].z, fma(_579, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _575)) + cbModelParam._m0[21u].w;
        float _1483 = fma(_583, cbModelParam._m0[22u].z, fma(_579, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _575)) + cbModelParam._m0[22u].w;
        float _1487 = fma(_583, cbModelParam._m0[23u].z, fma(_579, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _575)) + cbModelParam._m0[23u].w;
        float _1490 = fma(_524, cbModelParam._m0[21u].z, fma(_523, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _522));
        float _1493 = fma(_524, cbModelParam._m0[22u].z, fma(_523, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _522));
        float _1496 = fma(_524, cbModelParam._m0[23u].z, fma(_523, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _522));
        float _1603;
        if (_1490 > 0.0)
        {
            _1603 = abs((1.0 - _1479) / _1490);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1490 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1479 + 1.0) / _1490);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1603 = frontier_phi_27_23_ladder;
        }
        float _1921;
        if (_1493 > 0.0)
        {
            _1921 = abs((1.0 - _1483) / _1493);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1493 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1483 + 1.0) / _1493);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1921 = frontier_phi_39_34_ladder;
        }
        float _2248;
        if (_1496 > 0.0)
        {
            _2248 = abs((1.0 - _1487) / _1496);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1496 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1487 + 1.0) / _1496);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2248 = frontier_phi_49_46_ladder;
        }
        float _2250 = isnan(_1921) ? _1603 : (isnan(_1603) ? _1921 : min(_1603, _1921));
        float _2251 = isnan(_2248) ? _2250 : (isnan(_2250) ? _2248 : min(_2250, _2248));
        float _2255 = (_2251 * _1490) + _1479;
        float _2256 = (_2251 * _1493) + _1483;
        float _2257 = (_2251 * _1496) + _1487;
        float _2258 = _2251 * 9.9999997473787516355514526367188e-05;
        float _2259 = (-1.0) - _2258;
        float _2261 = _2258 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2257 > _2261) || ((_2257 < _2259) || ((_2256 > _2261) || ((_2256 < _2259) || ((_2255 < _2259) || (_2255 > _2261))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2375 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2257, cbModelParam._m0[17u].z, fma(_2256, cbModelParam._m0[17u].y, _2255 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2257, cbModelParam._m0[18u].z, fma(_2256, cbModelParam._m0[18u].y, _2255 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2257, cbModelParam._m0[19u].z, fma(_2256, cbModelParam._m0[19u].y, _2255 * cbModelParam._m0[19u].x))), _1422);
            frontier_phi_24_49_ladder = _2375.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2375.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2375.x * cbModelParam._m0[1u].z;
        }
        _1515 = frontier_phi_24_49_ladder_2;
        _1517 = frontier_phi_24_49_ladder_1;
        _1519 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1499 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_522, _523, _524), _1422);
        _1515 = _1499.x * cbModelParam._m0[1u].z;
        _1517 = _1499.y * cbModelParam._m0[1u].z;
        _1519 = _1499.z * cbModelParam._m0[1u].z;
    }
    float _1531 = ((((1.0 - _543) * ((_530 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_543 * _530)) * _514;
    float _1532 = _1531 * ((cbModelParam._m0[1u].w * (_1515 - _1413)) + _1413);
    float _1533 = _1531 * ((cbModelParam._m0[1u].w * (_1517 - _1415)) + _1415);
    float _1534 = _1531 * ((cbModelParam._m0[1u].w * (_1519 - _1417)) + _1417);
    float _1537 = fma(_1534, cbSceneParam._m0[89u].z, fma(_1533, cbSceneParam._m0[89u].y, _1532 * cbSceneParam._m0[89u].x));
    float _1540 = fma(_1534, cbSceneParam._m0[90u].z, fma(_1533, cbSceneParam._m0[90u].y, _1532 * cbSceneParam._m0[90u].x));
    float _1543 = fma(_1534, cbSceneParam._m0[91u].z, fma(_1533, cbSceneParam._m0[91u].y, _1532 * cbSceneParam._m0[91u].x));
    float _1577 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1581 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1585 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1589 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1590 = _1577 / _1589;
    float _1591 = _1581 / _1589;
    float _1592 = _1585 / _1589;
    float _1739;
    float _1740;
    float _1741;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1619 = ((uint(_1592 > cbSceneParam._m0[59u].y) + uint(_1592 > cbSceneParam._m0[59u].x)) + uint(_1592 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1620 = _1619 + 43u;
        uint _1628 = _1619 + 44u;
        uint _1636 = _1619 + 45u;
        uint _1644 = _1619 + 46u;
        float _1655 = fma(_1589, cbSceneParam._m0[_1620].w, fma(_1585, cbSceneParam._m0[_1620].z, fma(_1581, cbSceneParam._m0[_1620].y, _1577 * cbSceneParam._m0[_1620].x)));
        float _1659 = fma(_1589, cbSceneParam._m0[_1628].w, fma(_1585, cbSceneParam._m0[_1628].z, fma(_1581, cbSceneParam._m0[_1628].y, _1577 * cbSceneParam._m0[_1628].x)));
        float _1667 = fma(_1589, cbSceneParam._m0[_1644].w, fma(_1585, cbSceneParam._m0[_1644].z, fma(_1581, cbSceneParam._m0[_1644].y, _1577 * cbSceneParam._m0[_1644].x)));
        float _1672 = cbSceneParam._m0[33u].z * _1667;
        float _1674 = cbSceneParam._m0[33u].w * _1667;
        float _1677 = fma(_1589, cbSceneParam._m0[_1636].w, fma(_1585, cbSceneParam._m0[_1636].z, fma(_1581, cbSceneParam._m0[_1636].y, _1577 * cbSceneParam._m0[_1636].x))) / _1667;
        float _1725 = (cbSceneParam._m0[33u].x - sqrt(((_1591 * _1591) + (_1590 * _1590)) + (_1592 * _1592))) * cbSceneParam._m0[33u].y;
        float _3962 = isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0));
        float _1732 = (isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1672 + _1655) / _1667, (_1674 + _1659) / _1667), _1677), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1674 + _1655) / _1667, (_1659 - _1672) / _1667), _1677), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1655 - _1672) / _1667, (_1659 - _1674) / _1667), _1677), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1655 - _1674) / _1667, (_1672 + _1659) / _1667), _1677), 0.0)).x), vec4(0.25)));
        _1739 = 1.0 - (_1732 * cbSceneParam._m0[34u].x);
        _1740 = 1.0 - (_1732 * cbSceneParam._m0[34u].y);
        _1741 = 1.0 - (_1732 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1739 = 1.0;
        _1740 = 1.0;
        _1741 = 1.0;
    }
    float _1805;
    float _1807;
    float _1809;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1793 = fma(_1589, cbSceneParam._m0[63u].w, fma(_1585, cbSceneParam._m0[63u].z, fma(_1581, cbSceneParam._m0[63u].y, _1577 * cbSceneParam._m0[63u].x)));
        float _1794 = fma(_1589, cbSceneParam._m0[60u].w, fma(_1585, cbSceneParam._m0[60u].z, fma(_1581, cbSceneParam._m0[60u].y, _1577 * cbSceneParam._m0[60u].x))) / _1793;
        float _1795 = fma(_1589, cbSceneParam._m0[61u].w, fma(_1585, cbSceneParam._m0[61u].z, fma(_1581, cbSceneParam._m0[61u].y, _1577 * cbSceneParam._m0[61u].x))) / _1793;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1794 >= cbSceneParam._m0[64u].x) && (_1795 >= cbSceneParam._m0[64u].y)) && (_1794 <= cbSceneParam._m0[64u].z)) && (_1795 <= cbSceneParam._m0[64u].w))
        {
            float _1934 = fma(_1589, cbSceneParam._m0[62u].w, fma(_1585, cbSceneParam._m0[62u].z, fma(_1581, cbSceneParam._m0[62u].y, _1577 * cbSceneParam._m0[62u].x))) / _1793;
            float _1938 = isnan(cbSceneParam._m0[41u].w) ? _1934 : (isnan(_1934) ? cbSceneParam._m0[41u].w : max(_1934, cbSceneParam._m0[41u].w));
            float _1981 = (cbSceneParam._m0[33u].x - sqrt(((_1591 * _1591) + (_1590 * _1590)) + (_1592 * _1592))) * cbSceneParam._m0[33u].y;
            float _3978 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
            float _1988 = (isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1794, cbSceneParam._m0[33u].w + _1795), _1938), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1794, _1795 - cbSceneParam._m0[33u].z), _1938), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1794 - cbSceneParam._m0[33u].z, _1795 - cbSceneParam._m0[33u].w), _1938), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1794 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1795), _1938), 0.0)).x), vec4(0.25)));
            float _1992 = 1.0 - (_1988 * cbSceneParam._m0[34u].x);
            float _1993 = 1.0 - (_1988 * cbSceneParam._m0[34u].y);
            float _1994 = 1.0 - (_1988 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_1993) ? _1740 : (isnan(_1740) ? _1993 : min(_1740, _1993));
            frontier_phi_36_35_ladder_1 = isnan(_1994) ? _1741 : (isnan(_1741) ? _1994 : min(_1741, _1994));
            frontier_phi_36_35_ladder_2 = isnan(_1992) ? _1739 : (isnan(_1739) ? _1992 : min(_1739, _1992));
        }
        else
        {
            frontier_phi_36_35_ladder = _1740;
            frontier_phi_36_35_ladder_1 = _1741;
            frontier_phi_36_35_ladder_2 = _1739;
        }
        _1805 = frontier_phi_36_35_ladder_2;
        _1807 = frontier_phi_36_35_ladder;
        _1809 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _1805 = _1739;
        _1807 = _1740;
        _1809 = _1741;
    }
    uvec4 _1814 = floatBitsToUint(cbInstanceData._m0[_488 + 5u]);
    uint _1816 = _1814.x * 14u;
    uint _1817 = _1816 + 13u;
    float _1824 = _514 + (-1.0);
    float _1829 = (cbLight._m0[_1817].x * _1824) + 1.0;
    float _1830 = (cbLight._m0[_1817].y * _1824) + 1.0;
    float _1831 = (cbLight._m0[_1817].z * _1824) + 1.0;
    float _1832 = (cbLight._m0[_1817].w * _1824) + 1.0;
    uint _1833 = _1816 + 5u;
    float _1839 = isnan(1.0) ? _1830 : (isnan(_1830) ? 1.0 : min(_1830, 1.0));
    uint _1843 = _1816 + 4u;
    float _1853 = isnan(1.0) ? _1829 : (isnan(_1829) ? 1.0 : min(_1829, 1.0));
    uint _1857 = _1816 | 1u;
    float _1868 = dot(vec3(cbLight._m0[_1816].xyz), vec3(_358, _359, _360));
    float _1871 = dot(vec3(cbLight._m0[_1857].xyz), vec3(_358, _359, _360));
    float _4014 = isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0));
    float _4025 = isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0));
    float _1876 = (isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0))) * 0.3183098733425140380859375;
    float _1878 = (isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0))) * 0.3183098733425140380859375;
    float _1885 = ((cbLight._m0[_1833].x * _1839) * _1878) + (((cbLight._m0[_1843].x * _1805) * _1853) * _1876);
    float _1886 = ((_1839 * cbLight._m0[_1833].y) * _1878) + (((cbLight._m0[_1843].y * _1807) * _1853) * _1876);
    float _1887 = ((_1839 * cbLight._m0[_1833].z) * _1878) + (((cbLight._m0[_1843].z * _1809) * _1853) * _1876);
    uvec4 _1891 = floatBitsToUint(cbLight._m0[_1816 + 12u]);
    bool _1893 = _1891.x == 0u;
    float _1995;
    float _1997;
    float _1999;
    if (_1893)
    {
        _1995 = _1885;
        _1997 = _1886;
        _1999 = _1887;
    }
    else
    {
        uint _2003 = _1816 + 6u;
        float _2019 = (dot(vec3(cbLight._m0[_1816 + 2u].xyz), vec3(_358, _359, _360)) * 0.5) + 0.5;
        float _2020 = _2019 * _2019;
        float _4036 = isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0));
        float _2021 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
        float _2022 = isnan(1.0) ? _1831 : (isnan(_1831) ? 1.0 : min(_1831, 1.0));
        _1995 = (((cbLight._m0[_2003].x * 0.3183098733425140380859375) * _2021) * _2022) + _1885;
        _1997 = (((cbLight._m0[_2003].y * 0.3183098733425140380859375) * _2021) * _2022) + _1886;
        _1999 = (((cbLight._m0[_2003].z * 0.3183098733425140380859375) * _2021) * _2022) + _1887;
    }
    bool _2002 = _1891.y == 0u;
    float _2057;
    float _2059;
    float _2061;
    if (_2002)
    {
        _2057 = _1995;
        _2059 = _1997;
        _2061 = _1999;
    }
    else
    {
        uint _2219 = _1816 + 7u;
        float _2235 = (dot(vec3(cbLight._m0[_1816 + 3u].xyz), vec3(_358, _359, _360)) * 0.5) + 0.5;
        float _2236 = _2235 * _2235;
        float _4052 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
        float _2237 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
        float _2238 = isnan(1.0) ? _1832 : (isnan(_1832) ? 1.0 : min(_1832, 1.0));
        _2057 = (((cbLight._m0[_2219].x * 0.3183098733425140380859375) * _2237) * _2238) + _1995;
        _2059 = (((cbLight._m0[_2219].y * 0.3183098733425140380859375) * _2237) * _2238) + _1997;
        _2061 = (((cbLight._m0[_2219].z * 0.3183098733425140380859375) * _2237) * _2238) + _1999;
    }
    uint _2064 = _1816 + 8u;
    float _2077 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1816].w)) * _361) * 0.949999988079071044921875);
    float _2078 = _2077 * _2077;
    float _2079 = cbLight._m0[_1816].x + _439;
    float _2080 = cbLight._m0[_1816].y + _440;
    float _2081 = cbLight._m0[_1816].z + _441;
    float _2085 = inversesqrt(dot(vec3(_2079, _2080, _2081), vec3(_2079, _2080, _2081)));
    float _2086 = _2085 * _2079;
    float _2087 = _2085 * _2080;
    float _2088 = _2085 * _2081;
    float _2089 = dot(vec3(_358, _359, _360), vec3(cbLight._m0[_1816].xyz));
    float _4068 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
    float _2092 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
    float _4079 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _2093 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
    float _2094 = dot(vec3(_358, _359, _360), vec3(_2086, _2087, _2088));
    float _4090 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
    float _2097 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
    float _2098 = dot(vec3(cbLight._m0[_1816].xyz), vec3(_2086, _2087, _2088));
    float _4101 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
    float _2102 = _2078 * _2078;
    float _2106 = ((_2097 * _2097) * (_2102 + (-1.0))) + 1.0;
    float _2117 = (exp2(log2(1.0 - (isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2118 = 1.0 - _2078;
    float _2129 = (0.5 / (((_2093 * ((_2092 * _2118) + _2078)) + 9.9999999392252902907785028219223e-09) + (((_2093 * _2118) + _2078) * _2092))) * _2092;
    float _4112 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
    float _2131 = (isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0))) * (_2102 / ((_2106 * _2106) * 3.141590118408203125));
    uint _2145 = _1816 + 9u;
    float _2156 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1857].w)) * _361) * 0.949999988079071044921875);
    float _2157 = _2156 * _2156;
    float _2158 = cbLight._m0[_1857].x + _439;
    float _2159 = cbLight._m0[_1857].y + _440;
    float _2160 = cbLight._m0[_1857].z + _441;
    float _2164 = inversesqrt(dot(vec3(_2158, _2159, _2160), vec3(_2158, _2159, _2160)));
    float _2165 = _2164 * _2158;
    float _2166 = _2164 * _2159;
    float _2167 = _2164 * _2160;
    float _2168 = dot(vec3(_358, _359, _360), vec3(cbLight._m0[_1857].xyz));
    float _4123 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
    float _2171 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
    float _2172 = dot(vec3(_358, _359, _360), vec3(_2165, _2166, _2167));
    float _4134 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
    float _2175 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
    float _2176 = dot(vec3(cbLight._m0[_1857].xyz), vec3(_2165, _2166, _2167));
    float _4145 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
    float _2180 = _2157 * _2157;
    float _2184 = ((_2175 * _2175) * (_2180 + (-1.0))) + 1.0;
    float _2193 = (exp2(log2(1.0 - (isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2194 = 1.0 - _2157;
    float _2204 = (0.5 / (((_2093 * ((_2171 * _2194) + _2157)) + 9.9999999392252902907785028219223e-09) + (((_2093 * _2194) + _2157) * _2171))) * _2171;
    float _4156 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
    float _2206 = (isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0))) * (_2180 / ((_2184 * _2184) * 3.141590118408203125));
    float _2216 = (((_2193 * cbLight._m0[_2145].x) * _2206) * _1839) + ((((cbLight._m0[_2064].x * _1805) * _2117) * _2131) * _1853);
    float _2217 = (((_2193 * cbLight._m0[_2145].y) * _2206) * _1839) + ((((cbLight._m0[_2064].y * _1807) * _2117) * _2131) * _1853);
    float _2218 = (((_2193 * cbLight._m0[_2145].z) * _2206) * _1839) + ((((cbLight._m0[_2064].z * _1809) * _2117) * _2131) * _1853);
    float _2274;
    float _2276;
    float _2278;
    if (_1893)
    {
        _2274 = _2216;
        _2276 = _2217;
        _2278 = _2218;
    }
    else
    {
        uint _2280 = _1816 + 2u;
        uint _2284 = _1816 + 10u;
        float _2298 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2280].w)) * _361) * 0.949999988079071044921875);
        float _2299 = _2298 * _2298;
        float _2300 = cbLight._m0[_2280].x + _439;
        float _2301 = cbLight._m0[_2280].y + _440;
        float _2302 = cbLight._m0[_2280].z + _441;
        float _2306 = inversesqrt(dot(vec3(_2300, _2301, _2302), vec3(_2300, _2301, _2302)));
        float _2307 = _2306 * _2300;
        float _2308 = _2306 * _2301;
        float _2309 = _2306 * _2302;
        float _2310 = dot(vec3(_358, _359, _360), vec3(cbLight._m0[_2280].xyz));
        float _4167 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
        float _2313 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
        float _2314 = dot(vec3(_358, _359, _360), vec3(_2307, _2308, _2309));
        float _4178 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
        float _2317 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
        float _2318 = dot(vec3(cbLight._m0[_2280].xyz), vec3(_2307, _2308, _2309));
        float _4189 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
        float _2322 = _2299 * _2299;
        float _2326 = ((_2317 * _2317) * (_2322 + (-1.0))) + 1.0;
        float _2335 = (exp2(log2(1.0 - (isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2336 = 1.0 - _2299;
        float _2346 = (0.5 / (((_2093 * ((_2313 * _2336) + _2299)) + 9.9999999392252902907785028219223e-09) + (((_2093 * _2336) + _2299) * _2313))) * _2313;
        float _4200 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
        float _2348 = (isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0))) * (_2322 / ((_2326 * _2326) * 3.141590118408203125));
        float _2349 = isnan(1.0) ? _1831 : (isnan(_1831) ? 1.0 : min(_1831, 1.0));
        _2274 = (((_2335 * cbLight._m0[_2284].x) * _2348) * _2349) + _2216;
        _2276 = (((_2335 * cbLight._m0[_2284].y) * _2348) * _2349) + _2217;
        _2278 = (((_2335 * cbLight._m0[_2284].z) * _2348) * _2349) + _2218;
    }
    float _2380;
    float _2382;
    float _2384;
    if (_2002)
    {
        _2380 = _2274;
        _2382 = _2276;
        _2384 = _2278;
    }
    else
    {
        uint _2391 = _1816 + 3u;
        uint _2395 = _1816 + 11u;
        float _2409 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2391].w)) * _361) * 0.949999988079071044921875);
        float _2410 = _2409 * _2409;
        float _2411 = cbLight._m0[_2391].x + _439;
        float _2412 = cbLight._m0[_2391].y + _440;
        float _2413 = cbLight._m0[_2391].z + _441;
        float _2417 = inversesqrt(dot(vec3(_2411, _2412, _2413), vec3(_2411, _2412, _2413)));
        float _2418 = _2417 * _2411;
        float _2419 = _2417 * _2412;
        float _2420 = _2417 * _2413;
        float _2421 = dot(vec3(_358, _359, _360), vec3(cbLight._m0[_2391].xyz));
        float _4216 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
        float _2424 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
        float _2425 = dot(vec3(_358, _359, _360), vec3(_2418, _2419, _2420));
        float _4227 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
        float _2428 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
        float _2429 = dot(vec3(cbLight._m0[_2391].xyz), vec3(_2418, _2419, _2420));
        float _4238 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
        float _2433 = _2410 * _2410;
        float _2437 = ((_2428 * _2428) * (_2433 + (-1.0))) + 1.0;
        float _2446 = (exp2(log2(1.0 - (isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2447 = 1.0 - _2410;
        float _2457 = (0.5 / (((_2093 * ((_2424 * _2447) + _2410)) + 9.9999999392252902907785028219223e-09) + (((_2093 * _2447) + _2410) * _2424))) * _2424;
        float _4249 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
        float _2459 = (isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0))) * (_2433 / ((_2437 * _2437) * 3.141590118408203125));
        float _2460 = isnan(1.0) ? _1832 : (isnan(_1832) ? 1.0 : min(_1832, 1.0));
        _2380 = (((_2446 * cbLight._m0[_2395].x) * _2459) * _2460) + _2274;
        _2382 = (((_2446 * cbLight._m0[_2395].y) * _2459) * _2460) + _2276;
        _2384 = (((_2446 * cbLight._m0[_2395].z) * _2459) * _2460) + _2278;
    }
    float _2525;
    float _2527;
    float _2529;
    float _2531;
    float _2533;
    float _2535;
    if (_1814.y == 0u)
    {
        uvec4 _2481 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2482 = _2481.x;
        uint _2493 = uint((float(_2481.y) * floor(float(uint(cbSceneParam._m0[85u].y * _448) / _2482))) + floor(float(uint(cbSceneParam._m0[85u].x * _447) / _2482)));
        float _2503 = (log2(_1592 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2504 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0));
        uint _2507 = uint(isnan(14.0) ? _2504 : (isnan(_2504) ? 14.0 : min(_2504, 14.0)));
        uvec4 _2512 = texelFetch(g_lightClusterGridBuffer, int(((_2507 << 2u) + (_2493 << 6u)) >> 2u));
        uint _2513 = _2512.x;
        uint _2514 = _2481.z;
        float _2592;
        float _2594;
        float _2596;
        float _2598;
        float _2600;
        float _2602;
        if (((((1u << ((_2514 >> 4u) & 15u)) + 4294967295u) & _2513) == 0u) || ((_2514 & 240u) == 0u))
        {
            _2592 = 0.0;
            _2594 = 0.0;
            _2596 = 0.0;
            _2598 = 0.0;
            _2600 = 0.0;
            _2602 = 0.0;
        }
        else
        {
            float _2593;
            float _2595;
            float _2597;
            float _2599;
            float _2601;
            float _2603;
            float _2736 = 0.0;
            float _2737 = 0.0;
            float _2738 = 0.0;
            float _2739 = 0.0;
            float _2740 = 0.0;
            float _2741 = 0.0;
            uint _2742 = 0u;
            uint _2751;
            bool _2752;
            for (;;)
            {
                _2751 = texelFetch(g_lightClassification, int((((_2507 << 5u) + (_2493 << 9u)) + (_2742 << 2u)) >> 2u)).x;
                _2752 = _2751 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2752)
                {
                    frontier_phi_68_pred = _2741;
                    frontier_phi_68_pred_1 = _2740;
                    frontier_phi_68_pred_2 = _2739;
                    frontier_phi_68_pred_3 = _2737;
                    frontier_phi_68_pred_4 = _2736;
                    frontier_phi_68_pred_5 = _2738;
                }
                else
                {
                    float _2860;
                    float _2861;
                    float _2862;
                    float _2863;
                    float _2864;
                    float _2865;
                    uint _2866;
                    _2860 = _2736;
                    _2861 = _2737;
                    _2862 = _2738;
                    _2863 = _2739;
                    _2864 = _2740;
                    _2865 = _2741;
                    _2866 = _2751;
                    float _2792;
                    float _2793;
                    float _2794;
                    float _2795;
                    float _2796;
                    float _2797;
                    for (;;)
                    {
                        uint _2870 = uint(findLSB(_2866)) + (_2742 << 5u);
                        uint _2867 = (_2866 + 4294967295u) & _2866;
                        uint _2872 = _2870 * 48u;
                        vec4 _2886 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2872)).x, texelFetch(g_PointLightRenderingBuffer, int(_2872 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2872 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2872 + 3u)).x));
                        uint _2892 = (_2870 * 48u) + 4u;
                        vec4 _2905 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2892)).x, texelFetch(g_PointLightRenderingBuffer, int(_2892 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2892 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2892 + 3u)).x));
                        uint _2911 = (_2870 * 48u) + 8u;
                        vec3 _2922 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2911)).x, texelFetch(g_PointLightRenderingBuffer, int(_2911 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2911 + 2u)).x));
                        float _2926 = _2886.x - _1590;
                        float _2927 = _2886.y - _1591;
                        float _2928 = _2886.z - _1592;
                        float _2929 = dot(vec3(_2926, _2927, _2928), vec3(_2926, _2927, _2928));
                        float _2932 = inversesqrt(_2929);
                        float _2933 = _2932 * _2926;
                        float _2934 = _2932 * _2927;
                        float _2935 = _2932 * _2928;
                        float _2936 = dot(vec3(_469, _472, _475), vec3(_2933, _2934, _2935));
                        float _2941 = 1.0 - (_2929 * _2886.w);
                        float _4275 = isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : max(_2941, 0.0));
                        float _2942 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
                        float _2943 = sqrt(_2929) * _2905.w;
                        float _2946 = 1.39999997615814208984375 / (_2943 + 1.39999997615814208984375);
                        float _2947 = _2946 * _2946;
                        float _2950 = ((1.0 - _2947) * _2936) + _2947;
                        float _2953 = _2943 * _2943;
                        float _2957 = ((isnan(0.0) ? _2950 : (isnan(_2950) ? 0.0 : max(_2950, 0.0))) * _2942) / ((_2953 * 0.699999988079071044921875) + 1.0);
                        float _2961 = (-0.0) - _1590;
                        float _2962 = (-0.0) - _1591;
                        float _2963 = (-0.0) - _1592;
                        float _2967 = inversesqrt(dot(vec3(_2961, _2962, _2963), vec3(_2961, _2962, _2963)));
                        float _2968 = _2967 * _2961;
                        float _2969 = _2967 * _2962;
                        float _2970 = _2967 * _2963;
                        float _2977 = exp2(log2(1.0 / ((_2953 * 3.5) + 5.0)) * 0.25);
                        float _2978 = 1.0 - _530;
                        float _2985 = sqrt(1.0 - ((1.0 - (_2978 * _2978)) * (1.0 - (_2977 * _2977))));
                        float _2986 = _2985 * _2985;
                        float _2987 = _2986 * _2986;
                        float _2988 = _2968 + _2933;
                        float _2989 = _2969 + _2934;
                        float _2990 = _2970 + _2935;
                        float _2994 = inversesqrt(dot(vec3(_2988, _2989, _2990), vec3(_2988, _2989, _2990)));
                        float _2998 = dot(vec3(_469, _472, _475), vec3(_2968, _2969, _2970));
                        float _4291 = isnan(0.0) ? _2998 : (isnan(_2998) ? 0.0 : max(_2998, 0.0));
                        float _3001 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
                        float _3002 = dot(vec3(_469, _472, _475), vec3(_2994 * _2988, _2994 * _2989, _2994 * _2990));
                        float _4302 = isnan(0.0) ? _3002 : (isnan(_3002) ? 0.0 : max(_3002, 0.0));
                        float _3005 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
                        float _3009 = ((_3005 * _3005) * (_2987 + (-1.0))) + 1.0;
                        float _3010 = _2946 * _2986;
                        float _3011 = _3010 * _3010;
                        float _3014 = ((1.0 - _3011) * _2936) + _3011;
                        float _4313 = isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : max(_3014, 0.0));
                        float _3015 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
                        float _3016 = 1.0 - _2986;
                        float _3026 = (0.5 / (((_3015 * ((_3001 * _3016) + _2986)) + 9.9999999392252902907785028219223e-09) + (((_3015 * _3016) + _2986) * _3001))) * _3015;
                        float _4324 = isnan(0.0) ? _3026 : (isnan(_3026) ? 0.0 : max(_3026, 0.0));
                        float _3037 = (((_2987 * 3.1415927410125732421875) * (isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0)))) / ((_3009 * _3009) * ((_2953 * 2.1991131305694580078125) + 3.141590118408203125))) * _2942;
                        _2795 = (_2957 * _2905.x) + _2863;
                        _2796 = (_2957 * _2905.y) + _2864;
                        _2797 = (_2957 * _2905.z) + _2865;
                        _2792 = (_3037 * _2922.x) + _2860;
                        _2793 = (_3037 * _2922.y) + _2861;
                        _2794 = (_3037 * _2922.z) + _2862;
                        if (_2867 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2860 = _2792;
                            _2861 = _2793;
                            _2862 = _2794;
                            _2863 = _2795;
                            _2864 = _2796;
                            _2865 = _2797;
                            _2866 = _2867;
                        }
                    }
                    frontier_phi_68_pred = _2797;
                    frontier_phi_68_pred_1 = _2796;
                    frontier_phi_68_pred_2 = _2795;
                    frontier_phi_68_pred_3 = _2793;
                    frontier_phi_68_pred_4 = _2792;
                    frontier_phi_68_pred_5 = _2794;
                }
                _2603 = frontier_phi_68_pred;
                _2601 = frontier_phi_68_pred_1;
                _2599 = frontier_phi_68_pred_2;
                _2595 = frontier_phi_68_pred_3;
                _2593 = frontier_phi_68_pred_4;
                _2597 = frontier_phi_68_pred_5;
                uint _2743 = _2742 + 1u;
                if (_2743 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2736 = _2593;
                    _2737 = _2595;
                    _2738 = _2597;
                    _2739 = _2599;
                    _2740 = _2601;
                    _2741 = _2603;
                    _2742 = _2743;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2592 = _2593;
            _2594 = _2595;
            _2596 = _2597;
            _2598 = _2599;
            _2600 = _2601;
            _2602 = _2603;
        }
        uvec4 _2606 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2607 = _2606.z;
        uint _2609 = (_2607 >> 8u) & 15u;
        float _2704;
        float _2706;
        float _2708;
        float _2710;
        float _2712;
        float _2714;
        if (((4294967295u << _2609) & _2513) == 0u)
        {
            _2704 = _2592;
            _2706 = _2594;
            _2708 = _2596;
            _2710 = _2598;
            _2712 = _2600;
            _2714 = _2602;
        }
        else
        {
            float _2729 = inversesqrt(dot(vec3(_1590, _1591, _1592), vec3(_1590, _1591, _1592)));
            float _2730 = _2729 * _1590;
            float _2731 = _2729 * _1591;
            float _2732 = _2729 * _1592;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2609 < ((_2607 >> 12u) & 15u))
            {
                float _2705;
                float _2707;
                float _2709;
                float _2711;
                float _2713;
                float _2715;
                float _2843 = _2592;
                float _2844 = _2594;
                float _2845 = _2596;
                float _2846 = _2598;
                float _2847 = _2600;
                float _2848 = _2602;
                uint _2849 = _2609;
                uint _2858;
                bool _2859;
                for (;;)
                {
                    _2858 = texelFetch(g_lightClassification, int((((_2507 << 5u) + (_2493 << 9u)) + (_2849 << 2u)) >> 2u)).x;
                    _2859 = _2858 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_2859)
                    {
                        frontier_phi_74_pred = _2845;
                        frontier_phi_74_pred_1 = _2844;
                        frontier_phi_74_pred_2 = _2843;
                        frontier_phi_74_pred_3 = _2848;
                        frontier_phi_74_pred_4 = _2847;
                        frontier_phi_74_pred_5 = _2846;
                    }
                    else
                    {
                        float _3042;
                        float _3043;
                        float _3044;
                        float _3045;
                        float _3046;
                        float _3047;
                        float _3338;
                        float _3339;
                        float _3340;
                        float _3341;
                        float _3342;
                        float _3343;
                        float _3055 = _2843;
                        float _3056 = _2844;
                        float _3057 = _2845;
                        float _3058 = _2846;
                        float _3059 = _2847;
                        float _3060 = _2848;
                        uint _3061 = _2858;
                        uint _3062;
                        vec4 _3087;
                        float _3088;
                        vec4 _3103;
                        vec3 _3115;
                        vec4 _3131;
                        vec4 _3147;
                        float _3194;
                        bool _3195;
                        for (;;)
                        {
                            uint _3072 = ((_2849 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3061));
                            _3062 = (_3061 + 4294967295u) & _3061;
                            uint _3074 = _3072 * 40u;
                            _3087 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3074)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 3u)).x));
                            _3088 = _3087.w;
                            uint _3090 = (_3072 * 40u) + 4u;
                            _3103 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3090)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 3u)).x));
                            uint _3105 = (_3072 * 40u) + 8u;
                            _3115 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3105)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 2u)).x));
                            uint _3118 = (_3072 * 40u) + 16u;
                            _3131 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3118)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 3u)).x));
                            uint _3134 = (_3072 * 40u) + 20u;
                            _3147 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3134)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 3u)).x));
                            uint _3150 = (_3072 * 40u) + 24u;
                            vec4 _3163 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3150)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 3u)).x));
                            uint _3169 = (_3072 * 40u) + 28u;
                            vec4 _3182 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3169)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 3u)).x));
                            _3194 = fma(_1592, _3182.z, fma(_1591, _3182.y, _3182.x * _1590)) + _3182.w;
                            _3195 = !((fma(_1592, _3163.z, fma(_1591, _3163.y, _3163.x * _1590)) + _3163.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3195)
                            {
                                float _3222 = _3087.x - _1590;
                                float _3223 = _3087.y - _1591;
                                float _3224 = _3087.z - _1592;
                                float _3225 = dot(vec3(_3222, _3223, _3224), vec3(_3222, _3223, _3224));
                                float _3228 = inversesqrt(_3225);
                                float _3229 = _3228 * _3222;
                                float _3230 = _3228 * _3223;
                                float _3231 = _3228 * _3224;
                                float _3235 = 1.0 - (_3225 / (_3088 * _3088));
                                float _4335 = isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : max(_3235, 0.0));
                                float _3236 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
                                float _3240 = sqrt(_3225) * _3103.w;
                                float _3242 = 1.39999997615814208984375 / (_3240 + 1.39999997615814208984375);
                                float _3243 = _3242 * _3242;
                                float _3246 = ((1.0 - _3243) * dot(vec3(_3229, _3230, _3231), vec3(_469, _472, _475))) + _3243;
                                float _3249 = _3240 * _3240;
                                float _3253 = (fma(_1592, _3131.z, fma(_1591, _3131.y, _3131.x * _1590)) + _3131.w) / _3194;
                                float _3254 = (fma(_1592, _3147.z, fma(_1591, _3147.y, _3147.x * _1590)) + _3147.w) / _3194;
                                float _3258 = 1.0 - dot(vec2(_3253, _3254), vec2(_3253, _3254));
                                float _4351 = isnan(0.0) ? _3258 : (isnan(_3258) ? 0.0 : max(_3258, 0.0));
                                float _3259 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
                                float _3260 = _3259 * (((isnan(0.0) ? _3246 : (isnan(_3246) ? 0.0 : max(_3246, 0.0))) * _3236) / ((_3249 * 0.699999988079071044921875) + 1.0));
                                float _3272 = exp2(log2(1.0 / ((_3249 * 3.5) + 5.0)) * 0.25);
                                float _3273 = 1.0 - _530;
                                float _3280 = sqrt(1.0 - ((1.0 - (_3273 * _3273)) * (1.0 - (_3272 * _3272))));
                                float _3281 = _3280 * _3280;
                                float _3282 = _3281 * _3281;
                                float _3283 = _3229 - _2730;
                                float _3284 = _3230 - _2731;
                                float _3285 = _3231 - _2732;
                                float _3289 = inversesqrt(dot(vec3(_3283, _3284, _3285), vec3(_3283, _3284, _3285)));
                                float _3293 = dot(vec3(_469, _472, _475), vec3((-0.0) - _2730, (-0.0) - _2731, (-0.0) - _2732));
                                float _4362 = isnan(0.0) ? _3293 : (isnan(_3293) ? 0.0 : max(_3293, 0.0));
                                float _3296 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
                                float _3297 = dot(vec3(_469, _472, _475), vec3(_3289 * _3283, _3289 * _3284, _3289 * _3285));
                                float _4373 = isnan(0.0) ? _3297 : (isnan(_3297) ? 0.0 : max(_3297, 0.0));
                                float _3300 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
                                float _3304 = ((_3300 * _3300) * (_3282 + (-1.0))) + 1.0;
                                float _3305 = _3242 * _3281;
                                float _3306 = _3305 * _3305;
                                float _3312 = ((1.0 - _3306) * dot(vec3(_469, _472, _475), vec3(_3229, _3230, _3231))) + _3306;
                                float _4384 = isnan(0.0) ? _3312 : (isnan(_3312) ? 0.0 : max(_3312, 0.0));
                                float _3313 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
                                float _3314 = 1.0 - _3281;
                                float _3324 = (0.5 / (((_3313 * ((_3296 * _3314) + _3281)) + 9.9999999392252902907785028219223e-09) + (((_3313 * _3314) + _3281) * _3296))) * _3313;
                                float _4395 = isnan(0.0) ? _3324 : (isnan(_3324) ? 0.0 : max(_3324, 0.0));
                                float _3334 = (_3259 * _3236) * (((_3282 * 3.1415927410125732421875) * (isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0)))) / ((_3304 * _3304) * ((_3249 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3334 * _3115.z;
                                frontier_phi_80_pred_1 = _3334 * _3115.y;
                                frontier_phi_80_pred_2 = _3334 * _3115.x;
                                frontier_phi_80_pred_3 = _3260 * _3103.z;
                                frontier_phi_80_pred_4 = _3260 * _3103.y;
                                frontier_phi_80_pred_5 = _3260 * _3103.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3340 = frontier_phi_80_pred;
                            _3339 = frontier_phi_80_pred_1;
                            _3338 = frontier_phi_80_pred_2;
                            _3343 = frontier_phi_80_pred_3;
                            _3342 = frontier_phi_80_pred_4;
                            _3341 = frontier_phi_80_pred_5;
                            _3045 = _3341 + _3058;
                            _3046 = _3342 + _3059;
                            _3047 = _3343 + _3060;
                            _3042 = _3338 + _3055;
                            _3043 = _3339 + _3056;
                            _3044 = _3340 + _3057;
                            if (_3062 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3055 = _3042;
                                _3056 = _3043;
                                _3057 = _3044;
                                _3058 = _3045;
                                _3059 = _3046;
                                _3060 = _3047;
                                _3061 = _3062;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3044;
                        frontier_phi_74_pred_1 = _3043;
                        frontier_phi_74_pred_2 = _3042;
                        frontier_phi_74_pred_3 = _3047;
                        frontier_phi_74_pred_4 = _3046;
                        frontier_phi_74_pred_5 = _3045;
                    }
                    _2709 = frontier_phi_74_pred;
                    _2707 = frontier_phi_74_pred_1;
                    _2705 = frontier_phi_74_pred_2;
                    _2715 = frontier_phi_74_pred_3;
                    _2713 = frontier_phi_74_pred_4;
                    _2711 = frontier_phi_74_pred_5;
                    uint _2850 = _2849 + 1u;
                    if (_2850 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2843 = _2705;
                        _2844 = _2707;
                        _2845 = _2709;
                        _2846 = _2711;
                        _2847 = _2713;
                        _2848 = _2715;
                        _2849 = _2850;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2713;
                frontier_phi_62_63_ladder_1 = _2711;
                frontier_phi_62_63_ladder_2 = _2709;
                frontier_phi_62_63_ladder_3 = _2715;
                frontier_phi_62_63_ladder_4 = _2707;
                frontier_phi_62_63_ladder_5 = _2705;
            }
            else
            {
                frontier_phi_62_63_ladder = _2600;
                frontier_phi_62_63_ladder_1 = _2598;
                frontier_phi_62_63_ladder_2 = _2596;
                frontier_phi_62_63_ladder_3 = _2602;
                frontier_phi_62_63_ladder_4 = _2594;
                frontier_phi_62_63_ladder_5 = _2592;
            }
            _2704 = frontier_phi_62_63_ladder_5;
            _2706 = frontier_phi_62_63_ladder_4;
            _2708 = frontier_phi_62_63_ladder_2;
            _2710 = frontier_phi_62_63_ladder_1;
            _2712 = frontier_phi_62_63_ladder;
            _2714 = frontier_phi_62_63_ladder_3;
        }
        float _2719 = isnan(1.0) ? _514 : (isnan(_514) ? 1.0 : min(_514, 1.0));
        _2525 = (_2719 * _2710) + _2057;
        _2527 = (_2719 * _2712) + _2059;
        _2529 = (_2719 * _2714) + _2061;
        _2531 = ((_2704 * 0.039999999105930328369140625) * _2719) + _2380;
        _2533 = ((_2706 * 0.039999999105930328369140625) * _2719) + _2382;
        _2535 = ((_2708 * 0.039999999105930328369140625) * _2719) + _2384;
    }
    else
    {
        _2525 = _2057;
        _2527 = _2059;
        _2529 = _2061;
        _2531 = _2380;
        _2533 = _2382;
        _2535 = _2384;
    }
    float _4411 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _4422 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _4433 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    uint _2555 = _488 + 6u;
    float _2563 = _447 / cbSceneParam._m0[86u].x;
    float _2564 = _448 / cbSceneParam._m0[86u].y;
    vec4 _2578 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2563, _2564, (log2((isnan(cbSceneParam._m0[77u].w) ? _380 : (isnan(_380) ? cbSceneParam._m0[77u].w : min(_380, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2580 = _2578.x;
    float _2581 = _2578.y;
    float _2582 = _2578.z;
    float _2583 = _2578.w;
    float _2654;
    float _2656;
    float _2658;
    float _2660;
    if (_380 > cbSceneParam._m0[78u].w)
    {
        float _2617 = isnan(_380) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _380 : min(cbSceneParam._m0[80u].w, _380));
        float _2618 = _2617 / _380;
        float _2629 = _2618 * _432;
        float _2630 = _433 * _2618;
        float _2631 = (-0.0) - _2630;
        float _2632 = _2618 * _434;
        float _2634 = (cbSceneParam._m0[77u].w * _2631) / _2617;
        float _2635 = _2634 + cbSceneParam._m0[79u].w;
        float _2636 = cbSceneParam._m0[79u].w - _2630;
        float _2642 = sqrt(((_2629 * _2629) + (_2630 * _2630)) + (_2632 * _2632));
        float _2645 = (1.0 - (cbSceneParam._m0[77u].w / _2617)) * _2642;
        float _2650 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2652 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2805;
        if (abs((_2631 - _2634) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2805 = ((((_2635 > 0.0) ? exp2(_2650 * _2635) : (2.0 - exp2(_2652 * _2635))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2645;
        }
        else
        {
            float _2765 = 1.0 / cbSceneParam._m0[80u].x;
            float _2766 = isnan(_2636) ? _2635 : (isnan(_2635) ? _2636 : max(_2635, _2636));
            float _2767 = isnan(_2636) ? _2635 : (isnan(_2635) ? _2636 : min(_2635, _2636));
            float _2776 = isnan(0.0) ? _2766 : (isnan(_2766) ? 0.0 : min(_2766, 0.0));
            float _2777 = isnan(0.0) ? _2767 : (isnan(_2767) ? 0.0 : min(_2767, 0.0));
            _2805 = ((abs(_2642 / _2631) * cbSceneParam._m0[80u].y) * ((((_2776 - _2777) * 2.0) - ((exp2(_2650 * (isnan(0.0) ? _2766 : (isnan(_2766) ? 0.0 : max(_2766, 0.0)))) - exp2(_2650 * (isnan(0.0) ? _2767 : (isnan(_2767) ? 0.0 : max(_2767, 0.0))))) * _2765)) - ((exp2(_2652 * _2776) - exp2(_2652 * _2777)) * _2765))) + (_2645 * cbSceneParam._m0[80u].z);
        }
        vec4 _2807 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2563, _2564, 1.0), 0.0);
        float _2816 = exp2((_2805 * (-1.44269502162933349609375)) * (1.0 - _2807.w));
        float _2817 = log2(_2816);
        float _2833 = log2(_2583);
        _2654 = (exp2(_2833 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2817 * cbSceneParam._m0[78u].x)) * _2807.x) / cbSceneParam._m0[78u].x)) + _2580;
        _2656 = (exp2(_2833 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2817 * cbSceneParam._m0[78u].y)) * _2807.y) / cbSceneParam._m0[78u].y)) + _2581;
        _2658 = (exp2(_2833 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2817 * cbSceneParam._m0[78u].z)) * _2807.z) / cbSceneParam._m0[78u].z)) + _2582;
        _2660 = _2816 * _2583;
    }
    else
    {
        _2654 = _2580;
        _2656 = _2581;
        _2658 = _2582;
        _2660 = _2583;
    }
    float _2672 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2673 = _2672 == 3.0;
    float _2674 = log2(_2660);
    float _2681 = exp2(_2674 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0))) * (_2525 + ((isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0))) * _514))) + ((_2531 + ((isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0))) * _1321)) * cbPerFrame._m0[3u].x));
    float _2682 = exp2(_2674 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0))) * (_2527 + ((isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0))) * _514))) + ((_2533 + ((isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0))) * _1321)) * cbPerFrame._m0[3u].x));
    float _2683 = exp2(_2674 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0))) * (_2529 + ((isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0))) * _514))) + ((_2535 + ((isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0))) * _1321)) * cbPerFrame._m0[3u].x));
    float _2692 = (_2672 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2692 * (_2673 ? _2681 : (_2681 + (cbSceneParam._m0[72u].w * _2654)));
    SV_Target.y = _2692 * (_2673 ? _2682 : (_2682 + (cbSceneParam._m0[72u].w * _2656)));
    SV_Target.z = _2692 * (_2673 ? _2683 : (_2683 + (cbSceneParam._m0[72u].w * _2658)));
    SV_Target.w = cbInstanceData._m0[_2555].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2555].w;
}


