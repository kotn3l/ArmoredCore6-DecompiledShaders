#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _982;
float _3395;
float _3396;
float _3397;
float _3398;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _194 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _195 = _194 * _186;
    float _196 = _194 * _187;
    float _197 = _194 * _188;
    float _201 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _202 = _201 * NORMAL.x;
    float _203 = _201 * NORMAL.y;
    float _204 = _201 * NORMAL.z;
    float _208 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _209 = _208 * TANGENT.x;
    float _210 = _208 * TANGENT.y;
    float _211 = _208 * TANGENT.z;
    float _216;
    float _217;
    float _218;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _216 = (-0.0) - _202;
        _217 = (-0.0) - _203;
        _218 = (-0.0) - _204;
    }
    else
    {
        _216 = _202;
        _217 = _203;
        _218 = _204;
    }
    vec4 _244 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _250 = _244.w;
    float _251 = _244.x * cbMtdParam._m0[9u].x;
    float _252 = _244.y * cbMtdParam._m0[9u].y;
    float _253 = _244.z * cbMtdParam._m0[9u].z;
    vec4 _271 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _275 = _271.z;
    float _279 = (_271.x * 2.0) + (-1.0);
    float _281 = (_271.y * 2.0) + (-1.0);
    float _282 = dot(vec2(_279, _281), vec2(_279, _281));
    float _3407 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    float _288 = sqrt(1.0 - (isnan(1.0) ? _3407 : (isnan(_3407) ? 1.0 : min(_3407, 1.0))));
    float _291 = fma(_288, _216, fma(_281, _209, _279 * _195));
    float _294 = fma(_288, _217, fma(_281, _210, _279 * _196));
    float _297 = fma(_288, _218, fma(_281, _211, _279 * _197));
    float _301 = inversesqrt(dot(vec3(_291, _294, _297), vec3(_291, _294, _297)));
    float _312 = cbMtdParam._m0[12u].x + dot(vec4(_301 * _291, _301 * _294, _301 * _297, 0.0), vec4(cbMtdParam._m0[13u].xyz, 0.0));
    float _3418 = isnan(0.0) ? _312 : (isnan(_312) ? 0.0 : max(_312, 0.0));
    float _313 = isnan(1.0) ? _3418 : (isnan(_3418) ? 1.0 : min(_3418, 1.0));
    float _320 = (_313 * (cbMtdParam._m0[10u].x - _251)) + _251;
    float _321 = (_313 * (cbMtdParam._m0[10u].y - _252)) + _252;
    float _322 = (_313 * (cbMtdParam._m0[10u].z - _253)) + _253;
    vec4 _334 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _336 = _334.x;
    float _338 = _336 - (_336 * _313);
    vec4 _350 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _357 = (_350.x * 2.0) + (-1.0);
    float _358 = (_350.y * 2.0) + (-1.0);
    float _359 = dot(vec2(_357, _358), vec2(_357, _358));
    float _3429 = isnan(0.0) ? _359 : (isnan(_359) ? 0.0 : max(_359, 0.0));
    float _367 = ((_350.z - _275) * _313) + _275;
    float _379 = (((_357 - _279) + (cbMtdParam._m0[12u].w * _279)) * _313) + _279;
    float _380 = (((_358 - _281) + (cbMtdParam._m0[12u].w * _281)) * _313) + _281;
    float _381 = ((sqrt(1.0 - (isnan(1.0) ? _3429 : (isnan(_3429) ? 1.0 : min(_3429, 1.0)))) - _288) * _313) + _288;
    float _384 = fma(_381, _216, fma(_380, _209, _379 * _195));
    float _387 = fma(_381, _217, fma(_380, _210, _379 * _196));
    float _390 = fma(_381, _218, fma(_380, _211, _379 * _197));
    float _394 = inversesqrt(dot(vec3(_384, _387, _390), vec3(_384, _387, _390)));
    float _395 = _394 * _384;
    float _396 = _394 * _387;
    float _397 = _394 * _390;
    float _3440 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _398 = isnan(1.0) ? _3440 : (isnan(_3440) ? 1.0 : min(_3440, 1.0));
    float _3451 = isnan(0.0) ? _320 : (isnan(_320) ? 0.0 : max(_320, 0.0));
    float _3462 = isnan(0.0) ? _321 : (isnan(_321) ? 0.0 : max(_321, 0.0));
    float _3473 = isnan(0.0) ? _322 : (isnan(_322) ? 0.0 : max(_322, 0.0));
    float _3484 = isnan(0.0) ? _338 : (isnan(_338) ? 0.0 : max(_338, 0.0));
    float _402 = isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0));
    float _418 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _460 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _470 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _460);
    float _471 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _460);
    float _472 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _460);
    float _476 = inversesqrt(dot(vec3(_470, _471, _472), vec3(_470, _471, _472)));
    float _477 = _470 * _476;
    float _478 = _471 * _476;
    float _479 = _472 * _476;
    vec4 _484 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _486 = _484.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _661 = sqrt(((_470 * _470) + (_471 * _471)) + (_472 * _472));
        float _667 = (cbMatDynParam._m0[5u].x * _661) + cbMatDynParam._m0[5u].y;
        float _3495 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
        float _668 = isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0));
        float _672 = (cbMatDynParam._m0[5u].z * _661) + cbMatDynParam._m0[5u].w;
        float _3506 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0))) - _668)) + _668) < ((_486 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _498 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _499 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _519 = fma(_397, cbSceneParam._m0[5u].z, fma(_396, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _395));
    float _522 = fma(_397, cbSceneParam._m0[6u].z, fma(_396, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _395));
    float _525 = fma(_397, cbSceneParam._m0[7u].z, fma(_396, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _395));
    uint _538 = uint(roundEven(NORMAL.w)) * 13u;
    uint _539 = _538 + 9u;
    uint _540 = _539 + uint(cbMatDynParam._m0[0u].w);
    float _546 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3451 : (isnan(_3451) ? 1.0 : min(_3451, 1.0)))) * cbInstanceData._m0[_540].x;
    float _547 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0)))) * cbInstanceData._m0[_540].y;
    float _548 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0)))) * cbInstanceData._m0[_540].z;
    float _3517 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _549 = isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0));
    float _3528 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _550 = isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0));
    float _3539 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _551 = isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0));
    float _552 = 1.0 - _402;
    float _553 = _549 * _552;
    float _554 = _550 * _552;
    float _555 = _551 * _552;
    float _560 = (_549 + (-0.039999999105930328369140625)) * _402;
    float _561 = (_550 + (-0.039999999105930328369140625)) * _402;
    float _562 = (_551 + (-0.039999999105930328369140625)) * _402;
    float _563 = _560 + 0.039999999105930328369140625;
    float _565 = _561 + 0.039999999105930328369140625;
    float _566 = _562 + 0.039999999105930328369140625;
    vec4 _575 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _498, cbSceneParam._m0[86u].y * _499));
    float _578 = _575.x * TEXCOORD_3.w;
    float _579 = dot(vec3(_395, _396, _397), vec3(_477, _478, _479));
    float _582 = _579 * 2.0;
    float _586 = (_582 * _395) - _477;
    float _587 = (_582 * _396) - _478;
    float _588 = (_582 * _397) - _479;
    float _592 = abs(dot(vec3(_477, _478, _479), vec3(_395, _396, _397)));
    float _3550 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _594 = sqrt(_398);
    float _607 = exp2((_594 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_594 * 3.0));
    float _613 = (1.0 - _607) * ((_594 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _614 = _607 * _594;
    float _642 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _646 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _650 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _981;
    float _983;
    float _984;
    float _985;
    float _986;
    float _987;
    float _988;
    float _989;
    float _990;
    float _991;
    float _992;
    float _993;
    float _994;
    float _995;
    float _996;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _706 = fma(_650, cbModelParam._m0[26u].z, fma(_646, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _642));
        float _710 = fma(_650, cbModelParam._m0[27u].z, fma(_646, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _642));
        float _714 = fma(_650, cbModelParam._m0[28u].z, fma(_646, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _642));
        float _739 = _642 + _395;
        float _740 = _646 + _396;
        float _741 = _650 + _397;
        float _751 = fma(_741, cbModelParam._m0[26u].z, fma(_740, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _739)) - _706;
        float _752 = fma(_741, cbModelParam._m0[27u].z, fma(_740, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _739)) - _710;
        float _753 = fma(_741, cbModelParam._m0[28u].z, fma(_740, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _739)) - _714;
        float _757 = inversesqrt(dot(vec3(_751, _752, _753), vec3(_751, _752, _753)));
        float _770 = ((_757 * _751) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_706 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _771 = ((_757 * _752) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_710 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _772 = ((_757 * _753) / cbModelParam._m0[34u].z) + ((((((_714 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _775 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_770, _771, _772), 0.0);
        vec4 _782 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_770, _771, _772), 0.0);
        vec4 _789 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_770, _771, _772), 0.0);
        vec4 _796 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_770, _771, _772), 0.0);
        float _809 = exp2((_775.w + (-0.5)) * 20.0) * 2.0;
        float _810 = _809 * (_775.x + (-0.5));
        float _811 = _809 * (_775.y + (-0.5));
        float _812 = _809 * (_775.z + (-0.5));
        float _819 = exp2((_782.w + (-0.5)) * 20.0) * 2.0;
        float _820 = _819 * (_782.x + (-0.5));
        float _821 = _819 * (_782.y + (-0.5));
        float _822 = _819 * (_782.z + (-0.5));
        float _829 = exp2((_789.w + (-0.5)) * 20.0) * 2.0;
        float _830 = _829 * (_789.x + (-0.5));
        float _831 = _829 * (_789.y + (-0.5));
        float _832 = _829 * (_789.z + (-0.5));
        float _839 = exp2((_796.w + (-0.5)) * 20.0) * 2.0;
        float _840 = _839 * (_796.x + (-0.5));
        float _841 = _839 * (_796.y + (-0.5));
        float _842 = _839 * (_796.z + (-0.5));
        float _843 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
        float _844 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
        float _845 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
        float _846 = _810 * 0.5;
        float _847 = _820 * 0.5;
        float _848 = _830 * 0.5;
        float _849 = dot(vec3(_846, _847, _848), vec3(_846, _847, _848));
        float _854 = (_849 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_849);
        float _863 = (dot(vec3(_395, _396, _397), vec3(_854 * _846, _854 * _847, _854 * _848)) + 1.0) * 0.5;
        float _3576 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
        float _873 = sqrt(((_847 * _847) + (_846 * _846)) + (_848 * _848)) / (_843 + 9.9999997473787516355514526367188e-06);
        float _3587 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
        float _874 = isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0));
        float _875 = _874 * 2.0;
        float _879 = (1.0 - _874) / (_874 + 1.0);
        float _3598 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
        float _880 = isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0));
        float _889 = ((((1.0 - _880) * (_875 + 2.0)) * exp2(log2(isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0))) * (_875 + 1.0))) + _880) * _843;
        float _890 = _811 * 0.5;
        float _891 = _821 * 0.5;
        float _892 = _831 * 0.5;
        float _893 = dot(vec3(_890, _891, _892), vec3(_890, _891, _892));
        float _898 = (_893 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_893);
        float _906 = (dot(vec3(_395, _396, _397), vec3(_898 * _890, _898 * _891, _898 * _892)) + 1.0) * 0.5;
        float _3609 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
        float _915 = sqrt(((_891 * _891) + (_890 * _890)) + (_892 * _892)) / (_844 + 9.9999997473787516355514526367188e-06);
        float _3620 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
        float _916 = isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0));
        float _917 = _916 * 2.0;
        float _921 = (1.0 - _916) / (_916 + 1.0);
        float _3631 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
        float _922 = isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0));
        float _931 = ((((1.0 - _922) * (_917 + 2.0)) * exp2(log2(isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0))) * (_917 + 1.0))) + _922) * _844;
        float _932 = _812 * 0.5;
        float _933 = _822 * 0.5;
        float _934 = _832 * 0.5;
        float _935 = dot(vec3(_932, _933, _934), vec3(_932, _933, _934));
        float _940 = (_935 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_935);
        float _948 = (dot(vec3(_395, _396, _397), vec3(_940 * _932, _940 * _933, _940 * _934)) + 1.0) * 0.5;
        float _3642 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _957 = sqrt(((_933 * _933) + (_932 * _932)) + (_934 * _934)) / (_845 + 9.9999997473787516355514526367188e-06);
        float _3653 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
        float _958 = isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0));
        float _959 = _958 * 2.0;
        float _963 = (1.0 - _958) / (_958 + 1.0);
        float _3664 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
        float _964 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
        float _973 = ((((1.0 - _964) * (_959 + 2.0)) * exp2(log2(isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0))) * (_959 + 1.0))) + _964) * _845;
        _981 = _812;
        _983 = _811;
        _984 = _810;
        _985 = _822;
        _986 = _821;
        _987 = _820;
        _988 = _832;
        _989 = _831;
        _990 = _830;
        _991 = _845;
        _992 = _844;
        _993 = _843;
        _994 = cbModelParam._m0[36u].z * (isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0)));
        _995 = cbModelParam._m0[36u].z * (isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0)));
        _996 = cbModelParam._m0[36u].z * (isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0)));
    }
    else
    {
        _981 = _982;
        _983 = _982;
        _984 = _982;
        _985 = _982;
        _986 = _982;
        _987 = _982;
        _988 = _982;
        _989 = _982;
        _990 = _982;
        _991 = _982;
        _992 = _982;
        _993 = _982;
        _994 = 0.0;
        _995 = 0.0;
        _996 = 0.0;
    }
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1025 = fma(_650, cbModelParam._m0[30u].z, fma(_646, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _642));
        float _1029 = fma(_650, cbModelParam._m0[31u].z, fma(_646, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _642));
        float _1033 = fma(_650, cbModelParam._m0[32u].z, fma(_646, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _642));
        float _1056 = _642 + _395;
        float _1057 = _646 + _396;
        float _1058 = _650 + _397;
        float _1068 = fma(_1058, cbModelParam._m0[30u].z, fma(_1057, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1056)) - _1025;
        float _1069 = fma(_1058, cbModelParam._m0[31u].z, fma(_1057, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1056)) - _1029;
        float _1070 = fma(_1058, cbModelParam._m0[32u].z, fma(_1057, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1056)) - _1033;
        float _1074 = inversesqrt(dot(vec3(_1068, _1069, _1070), vec3(_1068, _1069, _1070)));
        float _1087 = ((_1074 * _1068) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1025 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1088 = ((_1074 * _1069) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1029 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1089 = ((_1074 * _1070) / cbModelParam._m0[35u].z) + ((((((_1033 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1091 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1087, _1088, _1089), 0.0);
        vec4 _1098 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1087, _1088, _1089), 0.0);
        vec4 _1105 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1087, _1088, _1089), 0.0);
        vec4 _1112 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1087, _1088, _1089), 0.0);
        float _1124 = exp2((_1091.w + (-0.5)) * 20.0) * 2.0;
        float _1125 = _1124 * (_1091.x + (-0.5));
        float _1126 = _1124 * (_1091.y + (-0.5));
        float _1127 = _1124 * (_1091.z + (-0.5));
        float _1134 = exp2((_1098.w + (-0.5)) * 20.0) * 2.0;
        float _1135 = _1134 * (_1098.x + (-0.5));
        float _1136 = _1134 * (_1098.y + (-0.5));
        float _1137 = _1134 * (_1098.z + (-0.5));
        float _1144 = exp2((_1105.w + (-0.5)) * 20.0) * 2.0;
        float _1145 = _1144 * (_1105.x + (-0.5));
        float _1146 = _1144 * (_1105.y + (-0.5));
        float _1147 = _1144 * (_1105.z + (-0.5));
        float _1154 = exp2((_1112.w + (-0.5)) * 20.0) * 2.0;
        float _1155 = _1154 * (_1112.x + (-0.5));
        float _1156 = _1154 * (_1112.y + (-0.5));
        float _1157 = _1154 * (_1112.z + (-0.5));
        float _1158 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1159 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1160 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1161 = _1125 * 0.5;
        float _1162 = _1135 * 0.5;
        float _1163 = _1145 * 0.5;
        float _1164 = dot(vec3(_1161, _1162, _1163), vec3(_1161, _1162, _1163));
        float _1169 = (_1164 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1164);
        float _1177 = (dot(vec3(_395, _396, _397), vec3(_1169 * _1161, _1169 * _1162, _1169 * _1163)) + 1.0) * 0.5;
        float _3705 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1186 = sqrt(((_1162 * _1162) + (_1161 * _1161)) + (_1163 * _1163)) / (_1158 + 9.9999997473787516355514526367188e-06);
        float _3716 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1187 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
        float _1188 = _1187 * 2.0;
        float _1192 = (1.0 - _1187) / (_1187 + 1.0);
        float _3727 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1193 = isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0));
        float _1202 = ((((1.0 - _1193) * (_1188 + 2.0)) * exp2(log2(isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0))) * (_1188 + 1.0))) + _1193) * _1158;
        float _1203 = _1126 * 0.5;
        float _1204 = _1136 * 0.5;
        float _1205 = _1146 * 0.5;
        float _1206 = dot(vec3(_1203, _1204, _1205), vec3(_1203, _1204, _1205));
        float _1211 = (_1206 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1206);
        float _1219 = (dot(vec3(_395, _396, _397), vec3(_1211 * _1203, _1211 * _1204, _1211 * _1205)) + 1.0) * 0.5;
        float _3738 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1228 = sqrt(((_1204 * _1204) + (_1203 * _1203)) + (_1205 * _1205)) / (_1159 + 9.9999997473787516355514526367188e-06);
        float _3749 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1229 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
        float _1230 = _1229 * 2.0;
        float _1234 = (1.0 - _1229) / (_1229 + 1.0);
        float _3760 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1235 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
        float _1244 = ((((1.0 - _1235) * (_1230 + 2.0)) * exp2(log2(isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0))) * (_1230 + 1.0))) + _1235) * _1159;
        float _1245 = _1127 * 0.5;
        float _1246 = _1137 * 0.5;
        float _1247 = _1147 * 0.5;
        float _1248 = dot(vec3(_1245, _1246, _1247), vec3(_1245, _1246, _1247));
        float _1253 = (_1248 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1248);
        float _1261 = (dot(vec3(_395, _396, _397), vec3(_1253 * _1245, _1253 * _1246, _1253 * _1247)) + 1.0) * 0.5;
        float _3771 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1270 = sqrt(((_1246 * _1246) + (_1245 * _1245)) + (_1247 * _1247)) / (_1160 + 9.9999997473787516355514526367188e-06);
        float _3782 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1271 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
        float _1272 = _1271 * 2.0;
        float _1276 = (1.0 - _1271) / (_1271 + 1.0);
        float _3793 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1277 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
        float _1286 = ((((1.0 - _1277) * (_1272 + 2.0)) * exp2(log2(isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0))) * (_1272 + 1.0))) + _1277) * _1160;
        _1294 = _1127;
        _1295 = _1126;
        _1296 = _1125;
        _1297 = _1137;
        _1298 = _1136;
        _1299 = _1135;
        _1300 = _1147;
        _1301 = _1146;
        _1302 = _1145;
        _1303 = _1160;
        _1304 = _1159;
        _1305 = _1158;
        _1306 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0)));
        _1307 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0)));
        _1308 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0)));
    }
    else
    {
        _1294 = _982;
        _1295 = _982;
        _1296 = _982;
        _1297 = _982;
        _1298 = _982;
        _1299 = _982;
        _1300 = _982;
        _1301 = _982;
        _1302 = _982;
        _1303 = _982;
        _1304 = _982;
        _1305 = _982;
        _1306 = 0.0;
        _1307 = 0.0;
        _1308 = 0.0;
    }
    float _1318 = (cbModelParam._m0[1u].x * (_1306 - _994)) + _994;
    float _1319 = (cbModelParam._m0[1u].x * (_1307 - _995)) + _995;
    float _1320 = (cbModelParam._m0[1u].x * (_1308 - _996)) + _996;
    float _1341 = fma(_1320, cbSceneParam._m0[89u].z, fma(_1319, cbSceneParam._m0[89u].y, _1318 * cbSceneParam._m0[89u].x));
    float _1344 = fma(_1320, cbSceneParam._m0[90u].z, fma(_1319, cbSceneParam._m0[90u].y, _1318 * cbSceneParam._m0[90u].x));
    float _1347 = fma(_1320, cbSceneParam._m0[91u].z, fma(_1319, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1318));
    float _1362 = _586 * 0.5;
    float _1363 = _587 * 0.5;
    float _1364 = _588 * 0.5;
    float _1365 = dot(vec4(_1362, _1363, _1364, 1.0), vec4(_1296, _1299, _1302, _1305));
    float _1368 = dot(vec4(_1362, _1363, _1364, 1.0), vec4(_1295, _1298, _1301, _1304));
    float _1371 = dot(vec4(_1362, _1363, _1364, 1.0), vec4(_1294, _1297, _1300, _1303));
    float _1405;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1378 = dot(vec4(_1362, _1363, _1364, 1.0), vec4(_981, _985, _988, _991));
        float _1382 = dot(vec4(_1362, _1363, _1364, 1.0), vec4(_983, _986, _989, _992));
        float _1386 = dot(vec4(_1362, _1363, _1364, 1.0), vec4(_984, _987, _990, _993));
        float _1393 = dot(vec4(cbModelParam._m0[39u]), vec4(_1362, _1363, _1364, 1.0));
        _1405 = dot(vec3(isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0)), isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0)), isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1393) ? 0.0 : (isnan(0.0) ? _1393 : max(0.0, _1393))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1405 = 1.0;
    }
    float _1416;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1407 = dot(vec4(cbModelParam._m0[40u]), vec4(_1362, _1363, _1364, 1.0));
        _1416 = dot(vec3(isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0)), isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0)), isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1407) ? 0.0 : (isnan(0.0) ? _1407 : max(0.0, _1407))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1416 = 1.0;
    }
    float _1420 = (_1416 * cbModelParam._m0[1u].x) + (_1405 * (1.0 - cbModelParam._m0[1u].x));
    float _1430 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _398);
    float _1431 = isnan(_1430) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1430 : min(cbModelParam._m0[25u].z, _1430));
    float _1512;
    float _1514;
    float _1516;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1479 = fma(_650, cbModelParam._m0[13u].z, fma(_646, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _642)) + cbModelParam._m0[13u].w;
        float _1483 = fma(_650, cbModelParam._m0[14u].z, fma(_646, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _642)) + cbModelParam._m0[14u].w;
        float _1487 = fma(_650, cbModelParam._m0[15u].z, fma(_646, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _642)) + cbModelParam._m0[15u].w;
        float _1490 = fma(_588, cbModelParam._m0[13u].z, fma(_587, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _586));
        float _1493 = fma(_588, cbModelParam._m0[14u].z, fma(_587, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _586));
        float _1496 = fma(_588, cbModelParam._m0[15u].z, fma(_587, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _586));
        float _1524;
        if (_1490 > 0.0)
        {
            _1524 = abs((1.0 - _1479) / _1490);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1490 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1479 + 1.0) / _1490);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1524 = frontier_phi_19_17_ladder;
        }
        float _1752;
        if (_1493 > 0.0)
        {
            _1752 = abs((1.0 - _1483) / _1493);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1493 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1483 + 1.0) / _1493);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1752 = frontier_phi_28_24_ladder;
        }
        float _2009;
        if (_1496 > 0.0)
        {
            _2009 = abs((1.0 - _1487) / _1496);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1496 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1487 + 1.0) / _1496);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2009 = frontier_phi_40_35_ladder;
        }
        float _2011 = isnan(_1752) ? _1524 : (isnan(_1524) ? _1752 : min(_1524, _1752));
        float _2012 = isnan(_2009) ? _2011 : (isnan(_2011) ? _2009 : min(_2011, _2009));
        float _2016 = (_2012 * _1490) + _1479;
        float _2017 = (_2012 * _1493) + _1483;
        float _2018 = (_2012 * _1496) + _1487;
        float _2019 = _2012 * 9.9999997473787516355514526367188e-05;
        float _2021 = (-1.0) - _2019;
        float _2023 = _2019 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2018 > _2023) || ((_2018 < _2021) || ((_2017 > _2023) || ((_2017 < _2021) || ((_2016 < _2021) || (_2016 > _2023))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2146 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2018, cbModelParam._m0[9u].z, fma(_2017, cbModelParam._m0[9u].y, _2016 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2018, cbModelParam._m0[10u].z, fma(_2017, cbModelParam._m0[10u].y, _2016 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2018, cbModelParam._m0[11u].z, fma(_2017, cbModelParam._m0[11u].y, _2016 * cbModelParam._m0[11u].x))), _1431);
            frontier_phi_18_40_ladder = _2146.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2146.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2146.x * cbModelParam._m0[1u].y;
        }
        _1512 = frontier_phi_18_40_ladder_2;
        _1514 = frontier_phi_18_40_ladder_1;
        _1516 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1500 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_586, _587, _588), _1431);
        _1512 = _1500.x * cbModelParam._m0[1u].y;
        _1514 = _1500.y * cbModelParam._m0[1u].y;
        _1516 = _1500.z * cbModelParam._m0[1u].y;
    }
    float _1520 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _398);
    float _1521 = isnan(_1520) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1520 : min(cbModelParam._m0[25u].w, _1520));
    float _1614;
    float _1616;
    float _1618;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1578 = fma(_650, cbModelParam._m0[21u].z, fma(_646, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _642)) + cbModelParam._m0[21u].w;
        float _1582 = fma(_650, cbModelParam._m0[22u].z, fma(_646, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _642)) + cbModelParam._m0[22u].w;
        float _1586 = fma(_650, cbModelParam._m0[23u].z, fma(_646, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _642)) + cbModelParam._m0[23u].w;
        float _1589 = fma(_588, cbModelParam._m0[21u].z, fma(_587, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _586));
        float _1592 = fma(_588, cbModelParam._m0[22u].z, fma(_587, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _586));
        float _1595 = fma(_588, cbModelParam._m0[23u].z, fma(_587, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _586));
        float _1757;
        if (_1589 > 0.0)
        {
            _1757 = abs((1.0 - _1578) / _1589);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1589 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1578 + 1.0) / _1589);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1757 = frontier_phi_30_26_ladder;
        }
        float _2036;
        if (_1592 > 0.0)
        {
            _2036 = abs((1.0 - _1582) / _1592);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1592 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1582 + 1.0) / _1592);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2036 = frontier_phi_42_37_ladder;
        }
        float _2249;
        if (_1595 > 0.0)
        {
            _2249 = abs((1.0 - _1586) / _1595);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1595 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1586 + 1.0) / _1595);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2249 = frontier_phi_51_48_ladder;
        }
        float _2251 = isnan(_2036) ? _1757 : (isnan(_1757) ? _2036 : min(_1757, _2036));
        float _2252 = isnan(_2249) ? _2251 : (isnan(_2251) ? _2249 : min(_2251, _2249));
        float _2256 = (_2252 * _1589) + _1578;
        float _2257 = (_2252 * _1592) + _1582;
        float _2258 = (_2252 * _1595) + _1586;
        float _2259 = _2252 * 9.9999997473787516355514526367188e-05;
        float _2260 = (-1.0) - _2259;
        float _2262 = _2259 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2258 > _2262) || ((_2258 < _2260) || ((_2257 > _2262) || ((_2257 < _2260) || ((_2256 < _2260) || (_2256 > _2262))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2456 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2258, cbModelParam._m0[17u].z, fma(_2257, cbModelParam._m0[17u].y, _2256 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2258, cbModelParam._m0[18u].z, fma(_2257, cbModelParam._m0[18u].y, _2256 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2258, cbModelParam._m0[19u].z, fma(_2257, cbModelParam._m0[19u].y, _2256 * cbModelParam._m0[19u].x))), _1521);
            frontier_phi_27_51_ladder = _2456.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2456.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2456.x * cbModelParam._m0[1u].z;
        }
        _1614 = frontier_phi_27_51_ladder_2;
        _1616 = frontier_phi_27_51_ladder_1;
        _1618 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1598 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_586, _587, _588), _1521);
        _1614 = _1598.x * cbModelParam._m0[1u].z;
        _1616 = _1598.y * cbModelParam._m0[1u].z;
        _1618 = _1598.z * cbModelParam._m0[1u].z;
    }
    float _1631 = (((_613 * _563) + _614) * _578) * ((cbModelParam._m0[1u].w * (_1614 - _1512)) + _1512);
    float _1633 = (((_613 * _565) + _614) * _578) * ((cbModelParam._m0[1u].w * (_1616 - _1514)) + _1514);
    float _1635 = (((_613 * _566) + _614) * _578) * ((cbModelParam._m0[1u].w * (_1618 - _1516)) + _1516);
    float _1638 = fma(_1635, cbSceneParam._m0[89u].z, fma(_1633, cbSceneParam._m0[89u].y, _1631 * cbSceneParam._m0[89u].x));
    float _1641 = fma(_1635, cbSceneParam._m0[90u].z, fma(_1633, cbSceneParam._m0[90u].y, _1631 * cbSceneParam._m0[90u].x));
    float _1644 = fma(_1635, cbSceneParam._m0[91u].z, fma(_1633, cbSceneParam._m0[91u].y, _1631 * cbSceneParam._m0[91u].x));
    vec4 _1652 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_498, _499));
    float _1654 = _1652.w;
    float _1666 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1654);
    float _1667 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1654);
    float _1668 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1654);
    uvec4 _1672 = floatBitsToUint(cbInstanceData._m0[_538 + 5u]);
    uint _1674 = _1672.x * 14u;
    uint _1675 = _1674 + 13u;
    float _1682 = _578 + (-1.0);
    float _1687 = (cbLight._m0[_1675].x * _1682) + 1.0;
    float _1688 = (cbLight._m0[_1675].y * _1682) + 1.0;
    float _1689 = (cbLight._m0[_1675].z * _1682) + 1.0;
    float _1690 = (cbLight._m0[_1675].w * _1682) + 1.0;
    uint _1691 = _1674 + 5u;
    float _1697 = isnan(1.0) ? _1688 : (isnan(_1688) ? 1.0 : min(_1688, 1.0));
    uint _1701 = _1674 + 4u;
    float _1711 = isnan(1.0) ? _1687 : (isnan(_1687) ? 1.0 : min(_1687, 1.0));
    uint _1715 = _1674 | 1u;
    float _1726 = dot(vec3(cbLight._m0[_1674].xyz), vec3(_395, _396, _397));
    float _1729 = dot(vec3(cbLight._m0[_1715].xyz), vec3(_395, _396, _397));
    float _3929 = isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0));
    float _3940 = isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0));
    float _1734 = (isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0))) * 0.3183098733425140380859375;
    float _1736 = (isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0))) * 0.3183098733425140380859375;
    float _1743 = ((cbLight._m0[_1691].x * _1697) * _1736) + (((cbLight._m0[_1701].x * _1666) * _1711) * _1734);
    float _1744 = ((_1697 * cbLight._m0[_1691].y) * _1736) + (((cbLight._m0[_1701].y * _1667) * _1711) * _1734);
    float _1745 = ((_1697 * cbLight._m0[_1691].z) * _1736) + (((cbLight._m0[_1701].z * _1668) * _1711) * _1734);
    uvec4 _1749 = floatBitsToUint(cbLight._m0[_1674 + 12u]);
    bool _1751 = _1749.x == 0u;
    float _1762;
    float _1764;
    float _1766;
    if (_1751)
    {
        _1762 = _1743;
        _1764 = _1744;
        _1766 = _1745;
    }
    else
    {
        uint _1770 = _1674 + 6u;
        float _1786 = (dot(vec3(cbLight._m0[_1674 + 2u].xyz), vec3(_395, _396, _397)) * 0.5) + 0.5;
        float _1787 = _1786 * _1786;
        float _3951 = isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0));
        float _1788 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
        float _1789 = isnan(1.0) ? _1689 : (isnan(_1689) ? 1.0 : min(_1689, 1.0));
        _1762 = (((cbLight._m0[_1770].x * 0.3183098733425140380859375) * _1788) * _1789) + _1743;
        _1764 = (((cbLight._m0[_1770].y * 0.3183098733425140380859375) * _1788) * _1789) + _1744;
        _1766 = (((cbLight._m0[_1770].z * 0.3183098733425140380859375) * _1788) * _1789) + _1745;
    }
    bool _1769 = _1749.y == 0u;
    float _1807;
    float _1809;
    float _1811;
    if (_1769)
    {
        _1807 = _1762;
        _1809 = _1764;
        _1811 = _1766;
    }
    else
    {
        uint _1980 = _1674 + 7u;
        float _1996 = (dot(vec3(cbLight._m0[_1674 + 3u].xyz), vec3(_395, _396, _397)) * 0.5) + 0.5;
        float _1997 = _1996 * _1996;
        float _3967 = isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0));
        float _1998 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
        float _1999 = isnan(1.0) ? _1690 : (isnan(_1690) ? 1.0 : min(_1690, 1.0));
        _1807 = (((cbLight._m0[_1980].x * 0.3183098733425140380859375) * _1998) * _1999) + _1762;
        _1809 = (((cbLight._m0[_1980].y * 0.3183098733425140380859375) * _1998) * _1999) + _1764;
        _1811 = (((cbLight._m0[_1980].z * 0.3183098733425140380859375) * _1998) * _1999) + _1766;
    }
    uint _1814 = _1674 + 8u;
    float _1827 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1674].w)) * _398) * 0.949999988079071044921875);
    float _1828 = _1827 * _1827;
    float _1829 = cbLight._m0[_1674].x + _477;
    float _1830 = cbLight._m0[_1674].y + _478;
    float _1831 = cbLight._m0[_1674].z + _479;
    float _1835 = inversesqrt(dot(vec3(_1829, _1830, _1831), vec3(_1829, _1830, _1831)));
    float _1836 = _1835 * _1829;
    float _1837 = _1835 * _1830;
    float _1838 = _1835 * _1831;
    float _1839 = dot(vec3(_395, _396, _397), vec3(cbLight._m0[_1674].xyz));
    float _3983 = isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0));
    float _1842 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
    float _3994 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _1843 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
    float _1844 = dot(vec3(_395, _396, _397), vec3(_1836, _1837, _1838));
    float _4005 = isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0));
    float _1847 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
    float _1848 = dot(vec3(cbLight._m0[_1674].xyz), vec3(_1836, _1837, _1838));
    float _4016 = isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0));
    float _1852 = _1828 * _1828;
    float _1856 = ((_1847 * _1847) * (_1852 + (-1.0))) + 1.0;
    float _1864 = exp2(log2(1.0 - (isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0)))) * 5.0);
    float _1865 = 0.959999978542327880859375 - _560;
    float _1867 = 0.959999978542327880859375 - _561;
    float _1868 = 0.959999978542327880859375 - _562;
    float _1875 = 1.0 - _1828;
    float _1886 = (0.5 / (((_1843 * ((_1842 * _1875) + _1828)) + 9.9999999392252902907785028219223e-09) + (((_1843 * _1875) + _1828) * _1842))) * _1842;
    float _4027 = isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0));
    float _1888 = (isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0))) * (_1852 / ((_1856 * _1856) * 3.141590118408203125));
    uint _1902 = _1674 + 9u;
    float _1913 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1715].w)) * _398) * 0.949999988079071044921875);
    float _1914 = _1913 * _1913;
    float _1915 = cbLight._m0[_1715].x + _477;
    float _1916 = cbLight._m0[_1715].y + _478;
    float _1917 = cbLight._m0[_1715].z + _479;
    float _1921 = inversesqrt(dot(vec3(_1915, _1916, _1917), vec3(_1915, _1916, _1917)));
    float _1922 = _1921 * _1915;
    float _1923 = _1921 * _1916;
    float _1924 = _1921 * _1917;
    float _1925 = dot(vec3(_395, _396, _397), vec3(cbLight._m0[_1715].xyz));
    float _4038 = isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0));
    float _1928 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
    float _1929 = dot(vec3(_395, _396, _397), vec3(_1922, _1923, _1924));
    float _4049 = isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0));
    float _1932 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
    float _1933 = dot(vec3(cbLight._m0[_1715].xyz), vec3(_1922, _1923, _1924));
    float _4060 = isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0));
    float _1937 = _1914 * _1914;
    float _1941 = ((_1932 * _1932) * (_1937 + (-1.0))) + 1.0;
    float _1948 = exp2(log2(1.0 - (isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0)))) * 5.0);
    float _1955 = 1.0 - _1914;
    float _1965 = (0.5 / (((_1843 * ((_1928 * _1955) + _1914)) + 9.9999999392252902907785028219223e-09) + (((_1843 * _1955) + _1914) * _1928))) * _1928;
    float _4071 = isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0));
    float _1967 = (isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0))) * (_1937 / ((_1941 * _1941) * 3.141590118408203125));
    float _1977 = (((((_1948 * _1865) + _563) * cbLight._m0[_1902].x) * _1967) * _1697) + ((((cbLight._m0[_1814].x * _1666) * ((_1864 * _1865) + _563)) * _1888) * _1711);
    float _1978 = (((((_1948 * _1867) + _565) * cbLight._m0[_1902].y) * _1967) * _1697) + ((((cbLight._m0[_1814].y * _1667) * ((_1864 * _1867) + _565)) * _1888) * _1711);
    float _1979 = (((((_1948 * _1868) + _566) * cbLight._m0[_1902].z) * _1967) * _1697) + ((((cbLight._m0[_1814].z * _1668) * ((_1864 * _1868) + _566)) * _1888) * _1711);
    float _2041;
    float _2043;
    float _2045;
    if (_1751)
    {
        _2041 = _1977;
        _2043 = _1978;
        _2045 = _1979;
    }
    else
    {
        uint _2047 = _1674 + 2u;
        uint _2051 = _1674 + 10u;
        float _2065 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2047].w)) * _398) * 0.949999988079071044921875);
        float _2066 = _2065 * _2065;
        float _2067 = cbLight._m0[_2047].x + _477;
        float _2068 = cbLight._m0[_2047].y + _478;
        float _2069 = cbLight._m0[_2047].z + _479;
        float _2073 = inversesqrt(dot(vec3(_2067, _2068, _2069), vec3(_2067, _2068, _2069)));
        float _2074 = _2073 * _2067;
        float _2075 = _2073 * _2068;
        float _2076 = _2073 * _2069;
        float _2077 = dot(vec3(_395, _396, _397), vec3(cbLight._m0[_2047].xyz));
        float _4082 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
        float _2080 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
        float _2081 = dot(vec3(_395, _396, _397), vec3(_2074, _2075, _2076));
        float _4093 = isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0));
        float _2084 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
        float _2085 = dot(vec3(cbLight._m0[_2047].xyz), vec3(_2074, _2075, _2076));
        float _4104 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
        float _2089 = _2066 * _2066;
        float _2093 = ((_2084 * _2084) * (_2089 + (-1.0))) + 1.0;
        float _2100 = exp2(log2(1.0 - (isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0)))) * 5.0);
        float _2107 = 1.0 - _2066;
        float _2117 = (0.5 / (((_1843 * ((_2080 * _2107) + _2066)) + 9.9999999392252902907785028219223e-09) + (((_1843 * _2107) + _2066) * _2080))) * _2080;
        float _4115 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
        float _2119 = (isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0))) * (_2089 / ((_2093 * _2093) * 3.141590118408203125));
        float _2120 = isnan(1.0) ? _1689 : (isnan(_1689) ? 1.0 : min(_1689, 1.0));
        _2041 = (((((_2100 * _1865) + _563) * cbLight._m0[_2051].x) * _2119) * _2120) + _1977;
        _2043 = (((((_2100 * _1867) + _565) * cbLight._m0[_2051].y) * _2119) * _2120) + _1978;
        _2045 = (((((_2100 * _1868) + _566) * cbLight._m0[_2051].z) * _2119) * _2120) + _1979;
    }
    float _2155;
    float _2157;
    float _2159;
    if (_1769)
    {
        _2155 = _2041;
        _2157 = _2043;
        _2159 = _2045;
    }
    else
    {
        uint _2166 = _1674 + 3u;
        uint _2170 = _1674 + 11u;
        float _2184 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2166].w)) * _398) * 0.949999988079071044921875);
        float _2185 = _2184 * _2184;
        float _2186 = cbLight._m0[_2166].x + _477;
        float _2187 = cbLight._m0[_2166].y + _478;
        float _2188 = cbLight._m0[_2166].z + _479;
        float _2192 = inversesqrt(dot(vec3(_2186, _2187, _2188), vec3(_2186, _2187, _2188)));
        float _2193 = _2192 * _2186;
        float _2194 = _2192 * _2187;
        float _2195 = _2192 * _2188;
        float _2196 = dot(vec3(_395, _396, _397), vec3(cbLight._m0[_2166].xyz));
        float _4131 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
        float _2199 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
        float _2200 = dot(vec3(_395, _396, _397), vec3(_2193, _2194, _2195));
        float _4142 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
        float _2203 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
        float _2204 = dot(vec3(cbLight._m0[_2166].xyz), vec3(_2193, _2194, _2195));
        float _4153 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
        float _2208 = _2185 * _2185;
        float _2212 = ((_2203 * _2203) * (_2208 + (-1.0))) + 1.0;
        float _2219 = exp2(log2(1.0 - (isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0)))) * 5.0);
        float _2226 = 1.0 - _2185;
        float _2236 = (0.5 / (((_1843 * ((_2199 * _2226) + _2185)) + 9.9999999392252902907785028219223e-09) + (((_1843 * _2226) + _2185) * _2199))) * _2199;
        float _4164 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
        float _2238 = (isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0))) * (_2208 / ((_2212 * _2212) * 3.141590118408203125));
        float _2239 = isnan(1.0) ? _1690 : (isnan(_1690) ? 1.0 : min(_1690, 1.0));
        _2155 = (((((_2219 * _1865) + _563) * cbLight._m0[_2170].x) * _2238) * _2239) + _2041;
        _2157 = (((((_2219 * _1867) + _565) * cbLight._m0[_2170].y) * _2238) * _2239) + _2043;
        _2159 = (((((_2219 * _1868) + _566) * cbLight._m0[_2170].z) * _2238) * _2239) + _2045;
    }
    float _2373;
    float _2375;
    float _2377;
    float _2379;
    float _2381;
    float _2383;
    if (_1672.y == 0u)
    {
        float _2314 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2315 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2314;
        float _2316 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2314;
        float _2317 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2314;
        uvec4 _2329 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2330 = _2329.x;
        uint _2341 = uint((float(_2329.y) * floor(float(uint(cbSceneParam._m0[85u].y * _499) / _2330))) + floor(float(uint(cbSceneParam._m0[85u].x * _498) / _2330)));
        float _2351 = (log2(_2317 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2352 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
        uint _2355 = uint(isnan(14.0) ? _2352 : (isnan(_2352) ? 14.0 : min(_2352, 14.0)));
        uvec4 _2360 = texelFetch(g_lightClusterGridBuffer, int(((_2355 << 2u) + (_2341 << 6u)) >> 2u));
        uint _2361 = _2360.x;
        uint _2362 = _2329.z;
        float _2461;
        float _2463;
        float _2465;
        float _2467;
        float _2469;
        float _2471;
        if (((((1u << ((_2362 >> 4u) & 15u)) + 4294967295u) & _2361) == 0u) || ((_2362 & 240u) == 0u))
        {
            _2461 = 0.0;
            _2463 = 0.0;
            _2465 = 0.0;
            _2467 = 0.0;
            _2469 = 0.0;
            _2471 = 0.0;
        }
        else
        {
            float _2462;
            float _2464;
            float _2466;
            float _2468;
            float _2470;
            float _2472;
            float _2613 = 0.0;
            float _2614 = 0.0;
            float _2615 = 0.0;
            float _2616 = 0.0;
            float _2617 = 0.0;
            float _2618 = 0.0;
            uint _2619 = 0u;
            uint _2628;
            bool _2629;
            for (;;)
            {
                _2628 = texelFetch(g_lightClassification, int((((_2355 << 5u) + (_2341 << 9u)) + (_2619 << 2u)) >> 2u)).x;
                _2629 = _2628 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2629)
                {
                    frontier_phi_68_pred = _2615;
                    frontier_phi_68_pred_1 = _2618;
                    frontier_phi_68_pred_2 = _2617;
                    frontier_phi_68_pred_3 = _2616;
                    frontier_phi_68_pred_4 = _2614;
                    frontier_phi_68_pred_5 = _2613;
                }
                else
                {
                    float _2758;
                    float _2759;
                    float _2760;
                    float _2761;
                    float _2762;
                    float _2763;
                    uint _2764;
                    _2758 = _2613;
                    _2759 = _2614;
                    _2760 = _2615;
                    _2761 = _2616;
                    _2762 = _2617;
                    _2763 = _2618;
                    _2764 = _2628;
                    float _2685;
                    float _2686;
                    float _2687;
                    float _2688;
                    float _2689;
                    float _2690;
                    for (;;)
                    {
                        uint _2768 = uint(findLSB(_2764)) + (_2619 << 5u);
                        uint _2765 = (_2764 + 4294967295u) & _2764;
                        uint _2770 = _2768 * 48u;
                        vec4 _2784 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2770)).x, texelFetch(g_PointLightRenderingBuffer, int(_2770 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2770 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2770 + 3u)).x));
                        uint _2790 = (_2768 * 48u) + 4u;
                        vec4 _2803 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2790)).x, texelFetch(g_PointLightRenderingBuffer, int(_2790 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2790 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2790 + 3u)).x));
                        uint _2809 = (_2768 * 48u) + 8u;
                        vec3 _2820 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2809)).x, texelFetch(g_PointLightRenderingBuffer, int(_2809 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2809 + 2u)).x));
                        float _2824 = _2784.x - _2315;
                        float _2825 = _2784.y - _2316;
                        float _2826 = _2784.z - _2317;
                        float _2827 = dot(vec3(_2824, _2825, _2826), vec3(_2824, _2825, _2826));
                        float _2830 = inversesqrt(_2827);
                        float _2831 = _2830 * _2824;
                        float _2832 = _2830 * _2825;
                        float _2833 = _2830 * _2826;
                        float _2834 = dot(vec3(_519, _522, _525), vec3(_2831, _2832, _2833));
                        float _2839 = 1.0 - (_2827 * _2784.w);
                        float _4190 = isnan(0.0) ? _2839 : (isnan(_2839) ? 0.0 : max(_2839, 0.0));
                        float _2840 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
                        float _2841 = sqrt(_2827) * _2803.w;
                        float _2844 = 1.39999997615814208984375 / (_2841 + 1.39999997615814208984375);
                        float _2845 = _2844 * _2844;
                        float _2848 = ((1.0 - _2845) * _2834) + _2845;
                        float _2851 = _2841 * _2841;
                        float _2855 = ((isnan(0.0) ? _2848 : (isnan(_2848) ? 0.0 : max(_2848, 0.0))) * _2840) / ((_2851 * 0.699999988079071044921875) + 1.0);
                        float _2859 = (-0.0) - _2315;
                        float _2860 = (-0.0) - _2316;
                        float _2861 = (-0.0) - _2317;
                        float _2865 = inversesqrt(dot(vec3(_2859, _2860, _2861), vec3(_2859, _2860, _2861)));
                        float _2866 = _2865 * _2859;
                        float _2867 = _2865 * _2860;
                        float _2868 = _2865 * _2861;
                        float _2876 = exp2(log2(1.0 / ((_2851 * 3.5) + 5.0)) * 0.25);
                        float _2877 = 1.0 - _594;
                        float _2884 = sqrt(1.0 - ((1.0 - (_2877 * _2877)) * (1.0 - (_2876 * _2876))));
                        float _2885 = _2884 * _2884;
                        float _2886 = _2885 * _2885;
                        float _2887 = _2866 + _2831;
                        float _2888 = _2867 + _2832;
                        float _2889 = _2868 + _2833;
                        float _2893 = inversesqrt(dot(vec3(_2887, _2888, _2889), vec3(_2887, _2888, _2889)));
                        float _2897 = dot(vec3(_519, _522, _525), vec3(_2866, _2867, _2868));
                        float _4206 = isnan(0.0) ? _2897 : (isnan(_2897) ? 0.0 : max(_2897, 0.0));
                        float _2900 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
                        float _2901 = dot(vec3(_519, _522, _525), vec3(_2893 * _2887, _2893 * _2888, _2893 * _2889));
                        float _4217 = isnan(0.0) ? _2901 : (isnan(_2901) ? 0.0 : max(_2901, 0.0));
                        float _2904 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
                        float _2908 = ((_2904 * _2904) * (_2886 + (-1.0))) + 1.0;
                        float _2909 = _2844 * _2885;
                        float _2910 = _2909 * _2909;
                        float _2913 = ((1.0 - _2910) * _2834) + _2910;
                        float _4228 = isnan(0.0) ? _2913 : (isnan(_2913) ? 0.0 : max(_2913, 0.0));
                        float _2914 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
                        float _2915 = 1.0 - _2885;
                        float _2925 = (0.5 / (((_2914 * ((_2900 * _2915) + _2885)) + 9.9999999392252902907785028219223e-09) + (((_2914 * _2915) + _2885) * _2900))) * _2914;
                        float _4239 = isnan(0.0) ? _2925 : (isnan(_2925) ? 0.0 : max(_2925, 0.0));
                        float _2936 = (((_2886 * 3.1415927410125732421875) * (isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0)))) / ((_2908 * _2908) * ((_2851 * 2.1991131305694580078125) + 3.141590118408203125))) * _2840;
                        _2688 = (_2855 * _2803.x) + _2761;
                        _2689 = (_2855 * _2803.y) + _2762;
                        _2690 = (_2855 * _2803.z) + _2763;
                        _2685 = (_2936 * _2820.x) + _2758;
                        _2686 = (_2936 * _2820.y) + _2759;
                        _2687 = (_2936 * _2820.z) + _2760;
                        if (_2765 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2758 = _2685;
                            _2759 = _2686;
                            _2760 = _2687;
                            _2761 = _2688;
                            _2762 = _2689;
                            _2763 = _2690;
                            _2764 = _2765;
                        }
                    }
                    frontier_phi_68_pred = _2687;
                    frontier_phi_68_pred_1 = _2690;
                    frontier_phi_68_pred_2 = _2689;
                    frontier_phi_68_pred_3 = _2688;
                    frontier_phi_68_pred_4 = _2686;
                    frontier_phi_68_pred_5 = _2685;
                }
                _2466 = frontier_phi_68_pred;
                _2472 = frontier_phi_68_pred_1;
                _2470 = frontier_phi_68_pred_2;
                _2468 = frontier_phi_68_pred_3;
                _2464 = frontier_phi_68_pred_4;
                _2462 = frontier_phi_68_pred_5;
                uint _2620 = _2619 + 1u;
                if (_2620 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2613 = _2462;
                    _2614 = _2464;
                    _2615 = _2466;
                    _2616 = _2468;
                    _2617 = _2470;
                    _2618 = _2472;
                    _2619 = _2620;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2461 = _2462;
            _2463 = _2464;
            _2465 = _2466;
            _2467 = _2468;
            _2469 = _2470;
            _2471 = _2472;
        }
        uvec4 _2475 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2476 = _2475.z;
        uint _2478 = (_2476 >> 8u) & 15u;
        float _2581;
        float _2583;
        float _2585;
        float _2587;
        float _2589;
        float _2591;
        if (((4294967295u << _2478) & _2361) == 0u)
        {
            _2581 = _2461;
            _2583 = _2463;
            _2585 = _2465;
            _2587 = _2467;
            _2589 = _2469;
            _2591 = _2471;
        }
        else
        {
            float _2606 = inversesqrt(dot(vec3(_2315, _2316, _2317), vec3(_2315, _2316, _2317)));
            float _2607 = _2606 * _2315;
            float _2608 = _2606 * _2316;
            float _2609 = _2606 * _2317;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2478 < ((_2476 >> 12u) & 15u))
            {
                float _2582;
                float _2584;
                float _2586;
                float _2588;
                float _2590;
                float _2592;
                float _2741 = _2461;
                float _2742 = _2463;
                float _2743 = _2465;
                float _2744 = _2467;
                float _2745 = _2469;
                float _2746 = _2471;
                uint _2747 = _2478;
                uint _2756;
                bool _2757;
                for (;;)
                {
                    _2756 = texelFetch(g_lightClassification, int((((_2355 << 5u) + (_2341 << 9u)) + (_2747 << 2u)) >> 2u)).x;
                    _2757 = _2756 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2757)
                    {
                        frontier_phi_79_pred = _2746;
                        frontier_phi_79_pred_1 = _2745;
                        frontier_phi_79_pred_2 = _2744;
                        frontier_phi_79_pred_3 = _2743;
                        frontier_phi_79_pred_4 = _2742;
                        frontier_phi_79_pred_5 = _2741;
                    }
                    else
                    {
                        float _2950;
                        float _2951;
                        float _2952;
                        float _2953;
                        float _2954;
                        float _2955;
                        float _3246;
                        float _3247;
                        float _3248;
                        float _3249;
                        float _3250;
                        float _3251;
                        float _2963 = _2741;
                        float _2964 = _2742;
                        float _2965 = _2743;
                        float _2966 = _2744;
                        float _2967 = _2745;
                        float _2968 = _2746;
                        uint _2969 = _2756;
                        uint _2970;
                        vec4 _2995;
                        float _2996;
                        vec4 _3011;
                        vec3 _3023;
                        vec4 _3039;
                        vec4 _3055;
                        float _3102;
                        bool _3103;
                        for (;;)
                        {
                            uint _2980 = ((_2747 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2969));
                            _2970 = (_2969 + 4294967295u) & _2969;
                            uint _2982 = _2980 * 40u;
                            _2995 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2982)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2982 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2982 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2982 + 3u)).x));
                            _2996 = _2995.w;
                            uint _2998 = (_2980 * 40u) + 4u;
                            _3011 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2998)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2998 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2998 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2998 + 3u)).x));
                            uint _3013 = (_2980 * 40u) + 8u;
                            _3023 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3013)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3013 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3013 + 2u)).x));
                            uint _3026 = (_2980 * 40u) + 16u;
                            _3039 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3026)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 3u)).x));
                            uint _3042 = (_2980 * 40u) + 20u;
                            _3055 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3042)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 3u)).x));
                            uint _3058 = (_2980 * 40u) + 24u;
                            vec4 _3071 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3058)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3058 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3058 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3058 + 3u)).x));
                            uint _3077 = (_2980 * 40u) + 28u;
                            vec4 _3090 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3077)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3077 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3077 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3077 + 3u)).x));
                            _3102 = fma(_2317, _3090.z, fma(_2316, _3090.y, _3090.x * _2315)) + _3090.w;
                            _3103 = !((fma(_2317, _3071.z, fma(_2316, _3071.y, _3071.x * _2315)) + _3071.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3103)
                            {
                                float _3130 = _2995.x - _2315;
                                float _3131 = _2995.y - _2316;
                                float _3132 = _2995.z - _2317;
                                float _3133 = dot(vec3(_3130, _3131, _3132), vec3(_3130, _3131, _3132));
                                float _3136 = inversesqrt(_3133);
                                float _3137 = _3136 * _3130;
                                float _3138 = _3136 * _3131;
                                float _3139 = _3136 * _3132;
                                float _3143 = 1.0 - (_3133 / (_2996 * _2996));
                                float _4250 = isnan(0.0) ? _3143 : (isnan(_3143) ? 0.0 : max(_3143, 0.0));
                                float _3144 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
                                float _3148 = sqrt(_3133) * _3011.w;
                                float _3150 = 1.39999997615814208984375 / (_3148 + 1.39999997615814208984375);
                                float _3151 = _3150 * _3150;
                                float _3154 = ((1.0 - _3151) * dot(vec3(_3137, _3138, _3139), vec3(_519, _522, _525))) + _3151;
                                float _3157 = _3148 * _3148;
                                float _3161 = (fma(_2317, _3039.z, fma(_2316, _3039.y, _3039.x * _2315)) + _3039.w) / _3102;
                                float _3162 = (fma(_2317, _3055.z, fma(_2316, _3055.y, _3055.x * _2315)) + _3055.w) / _3102;
                                float _3166 = 1.0 - dot(vec2(_3161, _3162), vec2(_3161, _3162));
                                float _4266 = isnan(0.0) ? _3166 : (isnan(_3166) ? 0.0 : max(_3166, 0.0));
                                float _3167 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
                                float _3168 = _3167 * (((isnan(0.0) ? _3154 : (isnan(_3154) ? 0.0 : max(_3154, 0.0))) * _3144) / ((_3157 * 0.699999988079071044921875) + 1.0));
                                float _3180 = exp2(log2(1.0 / ((_3157 * 3.5) + 5.0)) * 0.25);
                                float _3181 = 1.0 - _594;
                                float _3188 = sqrt(1.0 - ((1.0 - (_3181 * _3181)) * (1.0 - (_3180 * _3180))));
                                float _3189 = _3188 * _3188;
                                float _3190 = _3189 * _3189;
                                float _3191 = _3137 - _2607;
                                float _3192 = _3138 - _2608;
                                float _3193 = _3139 - _2609;
                                float _3197 = inversesqrt(dot(vec3(_3191, _3192, _3193), vec3(_3191, _3192, _3193)));
                                float _3201 = dot(vec3(_519, _522, _525), vec3((-0.0) - _2607, (-0.0) - _2608, (-0.0) - _2609));
                                float _4277 = isnan(0.0) ? _3201 : (isnan(_3201) ? 0.0 : max(_3201, 0.0));
                                float _3204 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
                                float _3205 = dot(vec3(_519, _522, _525), vec3(_3197 * _3191, _3197 * _3192, _3197 * _3193));
                                float _4288 = isnan(0.0) ? _3205 : (isnan(_3205) ? 0.0 : max(_3205, 0.0));
                                float _3208 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
                                float _3212 = ((_3208 * _3208) * (_3190 + (-1.0))) + 1.0;
                                float _3213 = _3150 * _3189;
                                float _3214 = _3213 * _3213;
                                float _3220 = ((1.0 - _3214) * dot(vec3(_519, _522, _525), vec3(_3137, _3138, _3139))) + _3214;
                                float _4299 = isnan(0.0) ? _3220 : (isnan(_3220) ? 0.0 : max(_3220, 0.0));
                                float _3221 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
                                float _3222 = 1.0 - _3189;
                                float _3232 = (0.5 / (((_3221 * ((_3204 * _3222) + _3189)) + 9.9999999392252902907785028219223e-09) + (((_3221 * _3222) + _3189) * _3204))) * _3221;
                                float _4310 = isnan(0.0) ? _3232 : (isnan(_3232) ? 0.0 : max(_3232, 0.0));
                                float _3242 = (_3167 * _3144) * (((_3190 * 3.1415927410125732421875) * (isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0)))) / ((_3212 * _3212) * ((_3157 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3168 * _3011.z;
                                frontier_phi_85_pred_1 = _3168 * _3011.y;
                                frontier_phi_85_pred_2 = _3168 * _3011.x;
                                frontier_phi_85_pred_3 = _3242 * _3023.z;
                                frontier_phi_85_pred_4 = _3242 * _3023.y;
                                frontier_phi_85_pred_5 = _3242 * _3023.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3251 = frontier_phi_85_pred;
                            _3250 = frontier_phi_85_pred_1;
                            _3249 = frontier_phi_85_pred_2;
                            _3248 = frontier_phi_85_pred_3;
                            _3247 = frontier_phi_85_pred_4;
                            _3246 = frontier_phi_85_pred_5;
                            _2953 = _3249 + _2966;
                            _2954 = _3250 + _2967;
                            _2955 = _3251 + _2968;
                            _2950 = _3246 + _2963;
                            _2951 = _3247 + _2964;
                            _2952 = _3248 + _2965;
                            if (_2970 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2963 = _2950;
                                _2964 = _2951;
                                _2965 = _2952;
                                _2966 = _2953;
                                _2967 = _2954;
                                _2968 = _2955;
                                _2969 = _2970;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2955;
                        frontier_phi_79_pred_1 = _2954;
                        frontier_phi_79_pred_2 = _2953;
                        frontier_phi_79_pred_3 = _2952;
                        frontier_phi_79_pred_4 = _2951;
                        frontier_phi_79_pred_5 = _2950;
                    }
                    _2592 = frontier_phi_79_pred;
                    _2590 = frontier_phi_79_pred_1;
                    _2588 = frontier_phi_79_pred_2;
                    _2586 = frontier_phi_79_pred_3;
                    _2584 = frontier_phi_79_pred_4;
                    _2582 = frontier_phi_79_pred_5;
                    uint _2748 = _2747 + 1u;
                    if (_2748 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2741 = _2582;
                        _2742 = _2584;
                        _2743 = _2586;
                        _2744 = _2588;
                        _2745 = _2590;
                        _2746 = _2592;
                        _2747 = _2748;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2588;
                frontier_phi_60_61_ladder_1 = _2592;
                frontier_phi_60_61_ladder_2 = _2590;
                frontier_phi_60_61_ladder_3 = _2586;
                frontier_phi_60_61_ladder_4 = _2584;
                frontier_phi_60_61_ladder_5 = _2582;
            }
            else
            {
                frontier_phi_60_61_ladder = _2467;
                frontier_phi_60_61_ladder_1 = _2471;
                frontier_phi_60_61_ladder_2 = _2469;
                frontier_phi_60_61_ladder_3 = _2465;
                frontier_phi_60_61_ladder_4 = _2463;
                frontier_phi_60_61_ladder_5 = _2461;
            }
            _2581 = frontier_phi_60_61_ladder_5;
            _2583 = frontier_phi_60_61_ladder_4;
            _2585 = frontier_phi_60_61_ladder_3;
            _2587 = frontier_phi_60_61_ladder;
            _2589 = frontier_phi_60_61_ladder_2;
            _2591 = frontier_phi_60_61_ladder_1;
        }
        float _2596 = isnan(1.0) ? _578 : (isnan(_578) ? 1.0 : min(_578, 1.0));
        _2373 = (_2596 * _2587) + _1807;
        _2375 = (_2596 * _2589) + _1809;
        _2377 = (_2596 * _2591) + _1811;
        _2379 = ((_2581 * _563) * _2596) + _2155;
        _2381 = ((_2583 * _565) * _2596) + _2157;
        _2383 = ((_2585 * _566) * _2596) + _2159;
    }
    else
    {
        _2373 = _1807;
        _2375 = _1809;
        _2377 = _1811;
        _2379 = _2155;
        _2381 = _2157;
        _2383 = _2159;
    }
    float _4326 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
    float _4337 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _4348 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
    float _2400 = ((isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0))) * (_2373 + ((isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0))) * _578))) + ((_2379 + ((isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0))) * _1420)) * cbPerFrame._m0[3u].x);
    float _2401 = ((isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0))) * (_2375 + ((isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0))) * _578))) + ((_2381 + ((isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0))) * _1420)) * cbPerFrame._m0[3u].x);
    float _2402 = ((isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0))) * (_2377 + ((isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0))) * _578))) + ((_2383 + ((isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0))) * _1420)) * cbPerFrame._m0[3u].x);
    uint _2403 = _538 + 6u;
    float _2411 = _498 / cbSceneParam._m0[86u].x;
    float _2412 = _499 / cbSceneParam._m0[86u].y;
    vec4 _2426 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2411, _2412, (log2((isnan(cbSceneParam._m0[77u].w) ? _418 : (isnan(_418) ? cbSceneParam._m0[77u].w : min(_418, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2428 = _2426.x;
    float _2429 = _2426.y;
    float _2430 = _2426.z;
    float _2431 = _2426.w;
    float _2523;
    float _2525;
    float _2527;
    float _2529;
    if (_418 > cbSceneParam._m0[78u].w)
    {
        float _2486 = isnan(_418) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _418 : min(cbSceneParam._m0[80u].w, _418));
        float _2487 = _2486 / _418;
        float _2498 = _2487 * _470;
        float _2499 = _471 * _2487;
        float _2500 = (-0.0) - _2499;
        float _2501 = _2487 * _472;
        float _2503 = (cbSceneParam._m0[77u].w * _2500) / _2486;
        float _2504 = _2503 + cbSceneParam._m0[79u].w;
        float _2505 = cbSceneParam._m0[79u].w - _2499;
        float _2511 = sqrt(((_2498 * _2498) + (_2499 * _2499)) + (_2501 * _2501));
        float _2514 = (1.0 - (cbSceneParam._m0[77u].w / _2486)) * _2511;
        float _2519 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2521 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2698;
        if (abs((_2500 - _2503) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2698 = ((((_2504 > 0.0) ? exp2(_2519 * _2504) : (2.0 - exp2(_2521 * _2504))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2514;
        }
        else
        {
            float _2642 = 1.0 / cbSceneParam._m0[80u].x;
            float _2643 = isnan(_2505) ? _2504 : (isnan(_2504) ? _2505 : max(_2504, _2505));
            float _2644 = isnan(_2505) ? _2504 : (isnan(_2504) ? _2505 : min(_2504, _2505));
            float _2653 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : min(_2643, 0.0));
            float _2654 = isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : min(_2644, 0.0));
            _2698 = ((abs(_2511 / _2500) * cbSceneParam._m0[80u].y) * ((((_2653 - _2654) * 2.0) - ((exp2(_2519 * (isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0)))) - exp2(_2519 * (isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : max(_2644, 0.0))))) * _2642)) - ((exp2(_2521 * _2653) - exp2(_2521 * _2654)) * _2642))) + (_2514 * cbSceneParam._m0[80u].z);
        }
        vec4 _2700 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2411, _2412, 1.0), 0.0);
        float _2709 = exp2((_2698 * (-1.44269502162933349609375)) * (1.0 - _2700.w));
        float _2710 = log2(_2709);
        float _2726 = log2(_2431);
        _2523 = (exp2(_2726 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2710 * cbSceneParam._m0[78u].x)) * _2700.x) / cbSceneParam._m0[78u].x)) + _2428;
        _2525 = (exp2(_2726 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2710 * cbSceneParam._m0[78u].y)) * _2700.y) / cbSceneParam._m0[78u].y)) + _2429;
        _2527 = (exp2(_2726 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2710 * cbSceneParam._m0[78u].z)) * _2700.z) / cbSceneParam._m0[78u].z)) + _2430;
        _2529 = _2709 * _2431;
    }
    else
    {
        _2523 = _2428;
        _2525 = _2429;
        _2527 = _2430;
        _2529 = _2431;
    }
    bool _2736;
    vec4 _2539;
    vec4 _2561;
    float _2563;
    float _2567;
    float _2568;
    float _2569;
    float _2570;
    bool _2580;
    for (;;)
    {
        _2539 = cbMatDynParam._m0[0u];
        float _2541 = roundEven(_2539.y);
        bool _2542 = _2541 == 3.0;
        float _2543 = log2(_2529);
        float _2550 = exp2(_2543 * cbSceneParam._m0[78u].x) * _2400;
        float _2551 = exp2(_2543 * cbSceneParam._m0[78u].y) * _2401;
        float _2552 = exp2(_2543 * cbSceneParam._m0[78u].z) * _2402;
        float _2559 = _486 + (-0.5);
        _2561 = cbMtdParam._m0[1u];
        _2563 = _2561.y * _2559;
        float _2566 = (_2541 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2567 = _2566 * (_2542 ? _2550 : (_2550 + (cbSceneParam._m0[72u].w * _2523)));
        _2568 = _2566 * (_2542 ? _2551 : (_2551 + (cbSceneParam._m0[72u].w * _2525)));
        _2569 = _2566 * (_2542 ? _2552 : (_2552 + (cbSceneParam._m0[72u].w * _2527)));
        _2570 = _2559 * 0.999000012874603271484375;
        _2580 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2580)
        {
            if ((cbInstanceData._m0[_538 + 7u].x + _2570) < 0.5)
            {
                _2736 = true;
                break;
            }
        }
        uint _2677 = _539 + uint(_2539.w);
        if ((cbInstanceData._m0[_2677].w < 1.0) && ((cbInstanceData._m0[_2677].w + _2570) < 0.5))
        {
            _2736 = true;
            break;
        }
        if ((_2563 + _250) < _2561.x)
        {
            _2736 = true;
            break;
        }
        _2736 = false;
        break;
    }
    float _2941;
    if (_2736)
    {
        discard_state = true;
        _2941 = 0.0;
    }
    else
    {
        _2941 = cbInstanceData._m0[_2403].w;
    }
    SV_Target.x = _2567;
    SV_Target.y = _2568;
    SV_Target.z = _2569;
    SV_Target.w = _2941;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2403].w;
    discard_exit();
}


