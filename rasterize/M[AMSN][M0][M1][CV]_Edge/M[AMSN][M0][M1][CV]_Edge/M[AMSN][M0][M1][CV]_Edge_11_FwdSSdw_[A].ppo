#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _985;
float _3397;
float _3398;
float _3399;
float _3400;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _190 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _191 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _192 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _198 = inversesqrt(dot(vec3(_190, _191, _192), vec3(_190, _191, _192)));
    float _205 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _206 = _205 * NORMAL.x;
    float _207 = _205 * NORMAL.y;
    float _208 = _205 * NORMAL.z;
    float _212 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _220;
    float _221;
    float _222;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _220 = (-0.0) - _206;
        _221 = (-0.0) - _207;
        _222 = (-0.0) - _208;
    }
    else
    {
        _220 = _206;
        _221 = _207;
        _222 = _208;
    }
    vec4 _248 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _254 = _248.w;
    float _255 = _248.x * cbMtdParam._m0[9u].x;
    float _256 = _248.y * cbMtdParam._m0[9u].y;
    float _257 = _248.z * cbMtdParam._m0[9u].z;
    vec4 _269 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _273 = _269.z;
    float _277 = (_269.x * 2.0) + (-1.0);
    float _279 = (_269.y * 2.0) + (-1.0);
    float _280 = dot(vec2(_277, _279), vec2(_277, _279));
    float _3409 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _286 = sqrt(1.0 - (isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0))));
    vec4 _303 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w));
    float _315 = (TEXCOORD_3.x - ((cbMtdParam._m0[12u].y * (1.0 - TEXCOORD_3.x)) * ((_303.x * cbMtdParam._m0[12u].y) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[12u].z + 1.0);
    float _3420 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _316 = isnan(1.0) ? _3420 : (isnan(_3420) ? 1.0 : min(_3420, 1.0));
    float _323 = (_316 * (cbMtdParam._m0[10u].x - _255)) + _255;
    float _324 = (_316 * (cbMtdParam._m0[10u].y - _256)) + _256;
    float _325 = (_316 * (cbMtdParam._m0[10u].z - _257)) + _257;
    vec4 _337 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _339 = _337.x;
    float _341 = _339 - (_339 * _316);
    vec4 _353 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _360 = (_353.x * 2.0) + (-1.0);
    float _361 = (_353.y * 2.0) + (-1.0);
    float _362 = dot(vec2(_360, _361), vec2(_360, _361));
    float _3431 = isnan(0.0) ? _362 : (isnan(_362) ? 0.0 : max(_362, 0.0));
    float _370 = (_316 * (_353.z - _273)) + _273;
    float _382 = (((_360 - _277) + (cbMtdParam._m0[12u].w * _277)) * _316) + _277;
    float _383 = (((_361 - _279) + (cbMtdParam._m0[12u].w * _279)) * _316) + _279;
    float _384 = (_316 * (sqrt(1.0 - (isnan(1.0) ? _3431 : (isnan(_3431) ? 1.0 : min(_3431, 1.0)))) - _286)) + _286;
    float _387 = fma(_384, _220, fma(_383, _212 * TANGENT.x, (_198 * _190) * _382));
    float _390 = fma(_384, _221, fma(_383, _212 * TANGENT.y, (_198 * _191) * _382));
    float _393 = fma(_384, _222, fma(_383, _212 * TANGENT.z, (_198 * _192) * _382));
    float _397 = inversesqrt(dot(vec3(_387, _390, _393), vec3(_387, _390, _393)));
    float _398 = _397 * _387;
    float _399 = _397 * _390;
    float _400 = _397 * _393;
    float _3442 = isnan(0.0) ? _370 : (isnan(_370) ? 0.0 : max(_370, 0.0));
    float _401 = isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0));
    float _3453 = isnan(0.0) ? _323 : (isnan(_323) ? 0.0 : max(_323, 0.0));
    float _3464 = isnan(0.0) ? _324 : (isnan(_324) ? 0.0 : max(_324, 0.0));
    float _3475 = isnan(0.0) ? _325 : (isnan(_325) ? 0.0 : max(_325, 0.0));
    float _3486 = isnan(0.0) ? _341 : (isnan(_341) ? 0.0 : max(_341, 0.0));
    float _405 = isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0));
    float _421 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _463 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _473 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _463);
    float _474 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _463);
    float _475 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _463);
    float _479 = inversesqrt(dot(vec3(_473, _474, _475), vec3(_473, _474, _475)));
    float _480 = _473 * _479;
    float _481 = _474 * _479;
    float _482 = _475 * _479;
    vec4 _487 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _489 = _487.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _665 = sqrt(((_473 * _473) + (_474 * _474)) + (_475 * _475));
        float _671 = (cbMatDynParam._m0[5u].x * _665) + cbMatDynParam._m0[5u].y;
        float _3497 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
        float _672 = isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0));
        float _676 = (cbMatDynParam._m0[5u].z * _665) + cbMatDynParam._m0[5u].w;
        float _3508 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0))) - _672)) + _672) < ((_489 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _501 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _502 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _522 = fma(_400, cbSceneParam._m0[5u].z, fma(_399, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _398));
    float _525 = fma(_400, cbSceneParam._m0[6u].z, fma(_399, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _398));
    float _528 = fma(_400, cbSceneParam._m0[7u].z, fma(_399, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _398));
    uint _541 = uint(roundEven(NORMAL.w)) * 13u;
    uint _543 = _541 + 9u;
    uint _544 = _543 + uint(cbMatDynParam._m0[0u].w);
    float _550 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0)))) * cbInstanceData._m0[_544].x;
    float _551 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0)))) * cbInstanceData._m0[_544].y;
    float _552 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0)))) * cbInstanceData._m0[_544].z;
    float _3519 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _553 = isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0));
    float _3530 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
    float _554 = isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0));
    float _3541 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    float _555 = isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0));
    float _556 = 1.0 - _405;
    float _557 = _553 * _556;
    float _558 = _554 * _556;
    float _559 = _555 * _556;
    float _564 = (_553 + (-0.039999999105930328369140625)) * _405;
    float _565 = (_554 + (-0.039999999105930328369140625)) * _405;
    float _566 = (_555 + (-0.039999999105930328369140625)) * _405;
    float _567 = _564 + 0.039999999105930328369140625;
    float _569 = _565 + 0.039999999105930328369140625;
    float _570 = _566 + 0.039999999105930328369140625;
    vec4 _579 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _501, cbSceneParam._m0[86u].y * _502));
    float _582 = _579.x * TEXCOORD_3.w;
    float _583 = dot(vec3(_398, _399, _400), vec3(_480, _481, _482));
    float _586 = _583 * 2.0;
    float _590 = (_586 * _398) - _480;
    float _591 = (_586 * _399) - _481;
    float _592 = (_586 * _400) - _482;
    float _596 = abs(dot(vec3(_480, _481, _482), vec3(_398, _399, _400)));
    float _3552 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _598 = sqrt(_401);
    float _611 = exp2((_598 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_598 * 3.0));
    float _617 = (1.0 - _611) * ((_598 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _618 = _611 * _598;
    float _646 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _650 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _654 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _984;
    float _986;
    float _987;
    float _988;
    float _989;
    float _990;
    float _991;
    float _992;
    float _993;
    float _994;
    float _995;
    float _996;
    float _997;
    float _998;
    float _999;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _709 = fma(_654, cbModelParam._m0[26u].z, fma(_650, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _646));
        float _713 = fma(_654, cbModelParam._m0[27u].z, fma(_650, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _646));
        float _717 = fma(_654, cbModelParam._m0[28u].z, fma(_650, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _646));
        float _742 = _646 + _398;
        float _743 = _650 + _399;
        float _744 = _654 + _400;
        float _754 = fma(_744, cbModelParam._m0[26u].z, fma(_743, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _742)) - _709;
        float _755 = fma(_744, cbModelParam._m0[27u].z, fma(_743, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _742)) - _713;
        float _756 = fma(_744, cbModelParam._m0[28u].z, fma(_743, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _742)) - _717;
        float _760 = inversesqrt(dot(vec3(_754, _755, _756), vec3(_754, _755, _756)));
        float _773 = ((_760 * _754) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_709 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _774 = ((_760 * _755) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_713 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _775 = ((_760 * _756) / cbModelParam._m0[34u].z) + ((((((_717 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _778 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_773, _774, _775), 0.0);
        vec4 _785 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_773, _774, _775), 0.0);
        vec4 _792 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_773, _774, _775), 0.0);
        vec4 _799 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_773, _774, _775), 0.0);
        float _812 = exp2((_778.w + (-0.5)) * 20.0) * 2.0;
        float _813 = _812 * (_778.x + (-0.5));
        float _814 = _812 * (_778.y + (-0.5));
        float _815 = _812 * (_778.z + (-0.5));
        float _822 = exp2((_785.w + (-0.5)) * 20.0) * 2.0;
        float _823 = _822 * (_785.x + (-0.5));
        float _824 = _822 * (_785.y + (-0.5));
        float _825 = _822 * (_785.z + (-0.5));
        float _832 = exp2((_792.w + (-0.5)) * 20.0) * 2.0;
        float _833 = _832 * (_792.x + (-0.5));
        float _834 = _832 * (_792.y + (-0.5));
        float _835 = _832 * (_792.z + (-0.5));
        float _842 = exp2((_799.w + (-0.5)) * 20.0) * 2.0;
        float _843 = _842 * (_799.x + (-0.5));
        float _844 = _842 * (_799.y + (-0.5));
        float _845 = _842 * (_799.z + (-0.5));
        float _846 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
        float _847 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
        float _848 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
        float _849 = _813 * 0.5;
        float _850 = _823 * 0.5;
        float _851 = _833 * 0.5;
        float _852 = dot(vec3(_849, _850, _851), vec3(_849, _850, _851));
        float _857 = (_852 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_852);
        float _866 = (dot(vec3(_398, _399, _400), vec3(_857 * _849, _857 * _850, _857 * _851)) + 1.0) * 0.5;
        float _3578 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
        float _876 = sqrt(((_850 * _850) + (_849 * _849)) + (_851 * _851)) / (_846 + 9.9999997473787516355514526367188e-06);
        float _3589 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
        float _877 = isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0));
        float _878 = _877 * 2.0;
        float _882 = (1.0 - _877) / (_877 + 1.0);
        float _3600 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
        float _883 = isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0));
        float _892 = ((((1.0 - _883) * (_878 + 2.0)) * exp2(log2(isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0))) * (_878 + 1.0))) + _883) * _846;
        float _893 = _814 * 0.5;
        float _894 = _824 * 0.5;
        float _895 = _834 * 0.5;
        float _896 = dot(vec3(_893, _894, _895), vec3(_893, _894, _895));
        float _901 = (_896 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_896);
        float _909 = (dot(vec3(_398, _399, _400), vec3(_901 * _893, _901 * _894, _901 * _895)) + 1.0) * 0.5;
        float _3611 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
        float _918 = sqrt(((_894 * _894) + (_893 * _893)) + (_895 * _895)) / (_847 + 9.9999997473787516355514526367188e-06);
        float _3622 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
        float _919 = isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0));
        float _920 = _919 * 2.0;
        float _924 = (1.0 - _919) / (_919 + 1.0);
        float _3633 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        float _925 = isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0));
        float _934 = ((((1.0 - _925) * (_920 + 2.0)) * exp2(log2(isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0))) * (_920 + 1.0))) + _925) * _847;
        float _935 = _815 * 0.5;
        float _936 = _825 * 0.5;
        float _937 = _835 * 0.5;
        float _938 = dot(vec3(_935, _936, _937), vec3(_935, _936, _937));
        float _943 = (_938 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_938);
        float _951 = (dot(vec3(_398, _399, _400), vec3(_943 * _935, _943 * _936, _943 * _937)) + 1.0) * 0.5;
        float _3644 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        float _960 = sqrt(((_936 * _936) + (_935 * _935)) + (_937 * _937)) / (_848 + 9.9999997473787516355514526367188e-06);
        float _3655 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        float _961 = isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0));
        float _962 = _961 * 2.0;
        float _966 = (1.0 - _961) / (_961 + 1.0);
        float _3666 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
        float _967 = isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0));
        float _976 = ((((1.0 - _967) * (_962 + 2.0)) * exp2(log2(isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0))) * (_962 + 1.0))) + _967) * _848;
        _984 = _815;
        _986 = _814;
        _987 = _813;
        _988 = _825;
        _989 = _824;
        _990 = _823;
        _991 = _835;
        _992 = _834;
        _993 = _833;
        _994 = _848;
        _995 = _847;
        _996 = _846;
        _997 = cbModelParam._m0[36u].z * (isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0)));
        _998 = cbModelParam._m0[36u].z * (isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0)));
        _999 = cbModelParam._m0[36u].z * (isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0)));
    }
    else
    {
        _984 = _985;
        _986 = _985;
        _987 = _985;
        _988 = _985;
        _989 = _985;
        _990 = _985;
        _991 = _985;
        _992 = _985;
        _993 = _985;
        _994 = _985;
        _995 = _985;
        _996 = _985;
        _997 = 0.0;
        _998 = 0.0;
        _999 = 0.0;
    }
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1028 = fma(_654, cbModelParam._m0[30u].z, fma(_650, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _646));
        float _1032 = fma(_654, cbModelParam._m0[31u].z, fma(_650, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _646));
        float _1036 = fma(_654, cbModelParam._m0[32u].z, fma(_650, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _646));
        float _1059 = _646 + _398;
        float _1060 = _650 + _399;
        float _1061 = _654 + _400;
        float _1071 = fma(_1061, cbModelParam._m0[30u].z, fma(_1060, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1059)) - _1028;
        float _1072 = fma(_1061, cbModelParam._m0[31u].z, fma(_1060, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1059)) - _1032;
        float _1073 = fma(_1061, cbModelParam._m0[32u].z, fma(_1060, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1059)) - _1036;
        float _1077 = inversesqrt(dot(vec3(_1071, _1072, _1073), vec3(_1071, _1072, _1073)));
        float _1090 = ((_1077 * _1071) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1028 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1091 = ((_1077 * _1072) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1032 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1092 = ((_1077 * _1073) / cbModelParam._m0[35u].z) + ((((((_1036 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1094 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1090, _1091, _1092), 0.0);
        vec4 _1101 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1090, _1091, _1092), 0.0);
        vec4 _1108 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1090, _1091, _1092), 0.0);
        vec4 _1115 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1090, _1091, _1092), 0.0);
        float _1127 = exp2((_1094.w + (-0.5)) * 20.0) * 2.0;
        float _1128 = _1127 * (_1094.x + (-0.5));
        float _1129 = _1127 * (_1094.y + (-0.5));
        float _1130 = _1127 * (_1094.z + (-0.5));
        float _1137 = exp2((_1101.w + (-0.5)) * 20.0) * 2.0;
        float _1138 = _1137 * (_1101.x + (-0.5));
        float _1139 = _1137 * (_1101.y + (-0.5));
        float _1140 = _1137 * (_1101.z + (-0.5));
        float _1147 = exp2((_1108.w + (-0.5)) * 20.0) * 2.0;
        float _1148 = _1147 * (_1108.x + (-0.5));
        float _1149 = _1147 * (_1108.y + (-0.5));
        float _1150 = _1147 * (_1108.z + (-0.5));
        float _1157 = exp2((_1115.w + (-0.5)) * 20.0) * 2.0;
        float _1158 = _1157 * (_1115.x + (-0.5));
        float _1159 = _1157 * (_1115.y + (-0.5));
        float _1160 = _1157 * (_1115.z + (-0.5));
        float _1161 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1162 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1163 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1164 = _1128 * 0.5;
        float _1165 = _1138 * 0.5;
        float _1166 = _1148 * 0.5;
        float _1167 = dot(vec3(_1164, _1165, _1166), vec3(_1164, _1165, _1166));
        float _1172 = (_1167 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1167);
        float _1180 = (dot(vec3(_398, _399, _400), vec3(_1172 * _1164, _1172 * _1165, _1172 * _1166)) + 1.0) * 0.5;
        float _3707 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1189 = sqrt(((_1165 * _1165) + (_1164 * _1164)) + (_1166 * _1166)) / (_1161 + 9.9999997473787516355514526367188e-06);
        float _3718 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1190 = isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0));
        float _1191 = _1190 * 2.0;
        float _1195 = (1.0 - _1190) / (_1190 + 1.0);
        float _3729 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1196 = isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0));
        float _1205 = ((((1.0 - _1196) * (_1191 + 2.0)) * exp2(log2(isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0))) * (_1191 + 1.0))) + _1196) * _1161;
        float _1206 = _1129 * 0.5;
        float _1207 = _1139 * 0.5;
        float _1208 = _1149 * 0.5;
        float _1209 = dot(vec3(_1206, _1207, _1208), vec3(_1206, _1207, _1208));
        float _1214 = (_1209 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1209);
        float _1222 = (dot(vec3(_398, _399, _400), vec3(_1214 * _1206, _1214 * _1207, _1214 * _1208)) + 1.0) * 0.5;
        float _3740 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1231 = sqrt(((_1207 * _1207) + (_1206 * _1206)) + (_1208 * _1208)) / (_1162 + 9.9999997473787516355514526367188e-06);
        float _3751 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1232 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
        float _1233 = _1232 * 2.0;
        float _1237 = (1.0 - _1232) / (_1232 + 1.0);
        float _3762 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1238 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
        float _1247 = ((((1.0 - _1238) * (_1233 + 2.0)) * exp2(log2(isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0))) * (_1233 + 1.0))) + _1238) * _1162;
        float _1248 = _1130 * 0.5;
        float _1249 = _1140 * 0.5;
        float _1250 = _1150 * 0.5;
        float _1251 = dot(vec3(_1248, _1249, _1250), vec3(_1248, _1249, _1250));
        float _1256 = (_1251 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1251);
        float _1264 = (dot(vec3(_398, _399, _400), vec3(_1256 * _1248, _1256 * _1249, _1256 * _1250)) + 1.0) * 0.5;
        float _3773 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1273 = sqrt(((_1249 * _1249) + (_1248 * _1248)) + (_1250 * _1250)) / (_1163 + 9.9999997473787516355514526367188e-06);
        float _3784 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1274 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
        float _1275 = _1274 * 2.0;
        float _1279 = (1.0 - _1274) / (_1274 + 1.0);
        float _3795 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1280 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
        float _1289 = ((((1.0 - _1280) * (_1275 + 2.0)) * exp2(log2(isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0))) * (_1275 + 1.0))) + _1280) * _1163;
        _1297 = _1130;
        _1298 = _1129;
        _1299 = _1128;
        _1300 = _1140;
        _1301 = _1139;
        _1302 = _1138;
        _1303 = _1150;
        _1304 = _1149;
        _1305 = _1148;
        _1306 = _1163;
        _1307 = _1162;
        _1308 = _1161;
        _1309 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0)));
        _1310 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0)));
        _1311 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0)));
    }
    else
    {
        _1297 = _985;
        _1298 = _985;
        _1299 = _985;
        _1300 = _985;
        _1301 = _985;
        _1302 = _985;
        _1303 = _985;
        _1304 = _985;
        _1305 = _985;
        _1306 = _985;
        _1307 = _985;
        _1308 = _985;
        _1309 = 0.0;
        _1310 = 0.0;
        _1311 = 0.0;
    }
    float _1321 = (cbModelParam._m0[1u].x * (_1309 - _997)) + _997;
    float _1322 = (cbModelParam._m0[1u].x * (_1310 - _998)) + _998;
    float _1323 = (cbModelParam._m0[1u].x * (_1311 - _999)) + _999;
    float _1344 = fma(_1323, cbSceneParam._m0[89u].z, fma(_1322, cbSceneParam._m0[89u].y, _1321 * cbSceneParam._m0[89u].x));
    float _1347 = fma(_1323, cbSceneParam._m0[90u].z, fma(_1322, cbSceneParam._m0[90u].y, _1321 * cbSceneParam._m0[90u].x));
    float _1350 = fma(_1323, cbSceneParam._m0[91u].z, fma(_1322, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1321));
    float _1365 = _590 * 0.5;
    float _1366 = _591 * 0.5;
    float _1367 = _592 * 0.5;
    float _1368 = dot(vec4(_1365, _1366, _1367, 1.0), vec4(_1299, _1302, _1305, _1308));
    float _1371 = dot(vec4(_1365, _1366, _1367, 1.0), vec4(_1298, _1301, _1304, _1307));
    float _1374 = dot(vec4(_1365, _1366, _1367, 1.0), vec4(_1297, _1300, _1303, _1306));
    float _1408;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1381 = dot(vec4(_1365, _1366, _1367, 1.0), vec4(_984, _988, _991, _994));
        float _1385 = dot(vec4(_1365, _1366, _1367, 1.0), vec4(_986, _989, _992, _995));
        float _1389 = dot(vec4(_1365, _1366, _1367, 1.0), vec4(_987, _990, _993, _996));
        float _1396 = dot(vec4(cbModelParam._m0[39u]), vec4(_1365, _1366, _1367, 1.0));
        _1408 = dot(vec3(isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0)), isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0)), isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1396) ? 0.0 : (isnan(0.0) ? _1396 : max(0.0, _1396))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1408 = 1.0;
    }
    float _1419;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1410 = dot(vec4(cbModelParam._m0[40u]), vec4(_1365, _1366, _1367, 1.0));
        _1419 = dot(vec3(isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0)), isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0)), isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1410) ? 0.0 : (isnan(0.0) ? _1410 : max(0.0, _1410))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1419 = 1.0;
    }
    float _1423 = (_1419 * cbModelParam._m0[1u].x) + (_1408 * (1.0 - cbModelParam._m0[1u].x));
    float _1433 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _401);
    float _1434 = isnan(_1433) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1433 : min(cbModelParam._m0[25u].z, _1433));
    float _1515;
    float _1517;
    float _1519;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1482 = fma(_654, cbModelParam._m0[13u].z, fma(_650, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _646)) + cbModelParam._m0[13u].w;
        float _1486 = fma(_654, cbModelParam._m0[14u].z, fma(_650, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _646)) + cbModelParam._m0[14u].w;
        float _1490 = fma(_654, cbModelParam._m0[15u].z, fma(_650, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _646)) + cbModelParam._m0[15u].w;
        float _1493 = fma(_592, cbModelParam._m0[13u].z, fma(_591, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _590));
        float _1496 = fma(_592, cbModelParam._m0[14u].z, fma(_591, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _590));
        float _1499 = fma(_592, cbModelParam._m0[15u].z, fma(_591, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _590));
        float _1527;
        if (_1493 > 0.0)
        {
            _1527 = abs((1.0 - _1482) / _1493);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1493 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1482 + 1.0) / _1493);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1527 = frontier_phi_19_17_ladder;
        }
        float _1754;
        if (_1496 > 0.0)
        {
            _1754 = abs((1.0 - _1486) / _1496);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1496 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1486 + 1.0) / _1496);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1754 = frontier_phi_28_24_ladder;
        }
        float _2011;
        if (_1499 > 0.0)
        {
            _2011 = abs((1.0 - _1490) / _1499);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1499 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1490 + 1.0) / _1499);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2011 = frontier_phi_40_35_ladder;
        }
        float _2013 = isnan(_1754) ? _1527 : (isnan(_1527) ? _1754 : min(_1527, _1754));
        float _2014 = isnan(_2011) ? _2013 : (isnan(_2013) ? _2011 : min(_2013, _2011));
        float _2018 = (_2014 * _1493) + _1482;
        float _2019 = (_2014 * _1496) + _1486;
        float _2020 = (_2014 * _1499) + _1490;
        float _2021 = _2014 * 9.9999997473787516355514526367188e-05;
        float _2023 = (-1.0) - _2021;
        float _2025 = _2021 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2020 > _2025) || ((_2020 < _2023) || ((_2019 > _2025) || ((_2019 < _2023) || ((_2018 < _2023) || (_2018 > _2025))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2148 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2020, cbModelParam._m0[9u].z, fma(_2019, cbModelParam._m0[9u].y, _2018 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2020, cbModelParam._m0[10u].z, fma(_2019, cbModelParam._m0[10u].y, _2018 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2020, cbModelParam._m0[11u].z, fma(_2019, cbModelParam._m0[11u].y, _2018 * cbModelParam._m0[11u].x))), _1434);
            frontier_phi_18_40_ladder = _2148.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2148.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2148.x * cbModelParam._m0[1u].y;
        }
        _1515 = frontier_phi_18_40_ladder_2;
        _1517 = frontier_phi_18_40_ladder_1;
        _1519 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1503 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_590, _591, _592), _1434);
        _1515 = _1503.x * cbModelParam._m0[1u].y;
        _1517 = _1503.y * cbModelParam._m0[1u].y;
        _1519 = _1503.z * cbModelParam._m0[1u].y;
    }
    float _1523 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _401);
    float _1524 = isnan(_1523) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1523 : min(cbModelParam._m0[25u].w, _1523));
    float _1617;
    float _1619;
    float _1621;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1581 = fma(_654, cbModelParam._m0[21u].z, fma(_650, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _646)) + cbModelParam._m0[21u].w;
        float _1585 = fma(_654, cbModelParam._m0[22u].z, fma(_650, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _646)) + cbModelParam._m0[22u].w;
        float _1589 = fma(_654, cbModelParam._m0[23u].z, fma(_650, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _646)) + cbModelParam._m0[23u].w;
        float _1592 = fma(_592, cbModelParam._m0[21u].z, fma(_591, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _590));
        float _1595 = fma(_592, cbModelParam._m0[22u].z, fma(_591, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _590));
        float _1598 = fma(_592, cbModelParam._m0[23u].z, fma(_591, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _590));
        float _1759;
        if (_1592 > 0.0)
        {
            _1759 = abs((1.0 - _1581) / _1592);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1592 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1581 + 1.0) / _1592);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1759 = frontier_phi_30_26_ladder;
        }
        float _2038;
        if (_1595 > 0.0)
        {
            _2038 = abs((1.0 - _1585) / _1595);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1595 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1585 + 1.0) / _1595);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2038 = frontier_phi_42_37_ladder;
        }
        float _2251;
        if (_1598 > 0.0)
        {
            _2251 = abs((1.0 - _1589) / _1598);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1598 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1589 + 1.0) / _1598);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2251 = frontier_phi_51_48_ladder;
        }
        float _2253 = isnan(_2038) ? _1759 : (isnan(_1759) ? _2038 : min(_1759, _2038));
        float _2254 = isnan(_2251) ? _2253 : (isnan(_2253) ? _2251 : min(_2253, _2251));
        float _2258 = (_2254 * _1592) + _1581;
        float _2259 = (_2254 * _1595) + _1585;
        float _2260 = (_2254 * _1598) + _1589;
        float _2261 = _2254 * 9.9999997473787516355514526367188e-05;
        float _2262 = (-1.0) - _2261;
        float _2264 = _2261 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2260 > _2264) || ((_2260 < _2262) || ((_2259 > _2264) || ((_2259 < _2262) || ((_2258 < _2262) || (_2258 > _2264))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2458 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2260, cbModelParam._m0[17u].z, fma(_2259, cbModelParam._m0[17u].y, _2258 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2260, cbModelParam._m0[18u].z, fma(_2259, cbModelParam._m0[18u].y, _2258 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2260, cbModelParam._m0[19u].z, fma(_2259, cbModelParam._m0[19u].y, _2258 * cbModelParam._m0[19u].x))), _1524);
            frontier_phi_27_51_ladder = _2458.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2458.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2458.x * cbModelParam._m0[1u].z;
        }
        _1617 = frontier_phi_27_51_ladder_2;
        _1619 = frontier_phi_27_51_ladder_1;
        _1621 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1601 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_590, _591, _592), _1524);
        _1617 = _1601.x * cbModelParam._m0[1u].z;
        _1619 = _1601.y * cbModelParam._m0[1u].z;
        _1621 = _1601.z * cbModelParam._m0[1u].z;
    }
    float _1634 = (((_617 * _567) + _618) * _582) * ((cbModelParam._m0[1u].w * (_1617 - _1515)) + _1515);
    float _1636 = (((_617 * _569) + _618) * _582) * ((cbModelParam._m0[1u].w * (_1619 - _1517)) + _1517);
    float _1638 = (((_617 * _570) + _618) * _582) * ((cbModelParam._m0[1u].w * (_1621 - _1519)) + _1519);
    float _1641 = fma(_1638, cbSceneParam._m0[89u].z, fma(_1636, cbSceneParam._m0[89u].y, _1634 * cbSceneParam._m0[89u].x));
    float _1644 = fma(_1638, cbSceneParam._m0[90u].z, fma(_1636, cbSceneParam._m0[90u].y, _1634 * cbSceneParam._m0[90u].x));
    float _1647 = fma(_1638, cbSceneParam._m0[91u].z, fma(_1636, cbSceneParam._m0[91u].y, _1634 * cbSceneParam._m0[91u].x));
    vec4 _1655 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_501, _502));
    float _1657 = _1655.w;
    float _1669 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1657);
    float _1670 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1657);
    float _1671 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1657);
    uvec4 _1675 = floatBitsToUint(cbInstanceData._m0[_541 + 5u]);
    uint _1677 = _1675.x * 14u;
    uint _1678 = _1677 + 13u;
    float _1685 = _582 + (-1.0);
    float _1690 = (cbLight._m0[_1678].x * _1685) + 1.0;
    float _1691 = (cbLight._m0[_1678].y * _1685) + 1.0;
    float _1692 = (cbLight._m0[_1678].z * _1685) + 1.0;
    float _1693 = (cbLight._m0[_1678].w * _1685) + 1.0;
    uint _1694 = _1677 + 5u;
    float _1700 = isnan(1.0) ? _1691 : (isnan(_1691) ? 1.0 : min(_1691, 1.0));
    uint _1704 = _1677 + 4u;
    float _1713 = isnan(1.0) ? _1690 : (isnan(_1690) ? 1.0 : min(_1690, 1.0));
    uint _1717 = _1677 | 1u;
    float _1728 = dot(vec3(cbLight._m0[_1677].xyz), vec3(_398, _399, _400));
    float _1731 = dot(vec3(cbLight._m0[_1717].xyz), vec3(_398, _399, _400));
    float _3931 = isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0));
    float _3942 = isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0));
    float _1736 = (isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0))) * 0.3183098733425140380859375;
    float _1738 = (isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0))) * 0.3183098733425140380859375;
    float _1745 = ((cbLight._m0[_1694].x * _1700) * _1738) + (((cbLight._m0[_1704].x * _1669) * _1713) * _1736);
    float _1746 = ((_1700 * cbLight._m0[_1694].y) * _1738) + (((cbLight._m0[_1704].y * _1670) * _1713) * _1736);
    float _1747 = ((_1700 * cbLight._m0[_1694].z) * _1738) + (((cbLight._m0[_1704].z * _1671) * _1713) * _1736);
    uvec4 _1751 = floatBitsToUint(cbLight._m0[_1677 + 12u]);
    bool _1753 = _1751.x == 0u;
    float _1764;
    float _1766;
    float _1768;
    if (_1753)
    {
        _1764 = _1745;
        _1766 = _1746;
        _1768 = _1747;
    }
    else
    {
        uint _1772 = _1677 + 6u;
        float _1788 = (dot(vec3(cbLight._m0[_1677 + 2u].xyz), vec3(_398, _399, _400)) * 0.5) + 0.5;
        float _1789 = _1788 * _1788;
        float _3953 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
        float _1790 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
        float _1791 = isnan(1.0) ? _1692 : (isnan(_1692) ? 1.0 : min(_1692, 1.0));
        _1764 = (((cbLight._m0[_1772].x * 0.3183098733425140380859375) * _1790) * _1791) + _1745;
        _1766 = (((cbLight._m0[_1772].y * 0.3183098733425140380859375) * _1790) * _1791) + _1746;
        _1768 = (((cbLight._m0[_1772].z * 0.3183098733425140380859375) * _1790) * _1791) + _1747;
    }
    bool _1771 = _1751.y == 0u;
    float _1809;
    float _1811;
    float _1813;
    if (_1771)
    {
        _1809 = _1764;
        _1811 = _1766;
        _1813 = _1768;
    }
    else
    {
        uint _1982 = _1677 + 7u;
        float _1998 = (dot(vec3(cbLight._m0[_1677 + 3u].xyz), vec3(_398, _399, _400)) * 0.5) + 0.5;
        float _1999 = _1998 * _1998;
        float _3969 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
        float _2000 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
        float _2001 = isnan(1.0) ? _1693 : (isnan(_1693) ? 1.0 : min(_1693, 1.0));
        _1809 = (((cbLight._m0[_1982].x * 0.3183098733425140380859375) * _2000) * _2001) + _1764;
        _1811 = (((cbLight._m0[_1982].y * 0.3183098733425140380859375) * _2000) * _2001) + _1766;
        _1813 = (((cbLight._m0[_1982].z * 0.3183098733425140380859375) * _2000) * _2001) + _1768;
    }
    uint _1816 = _1677 + 8u;
    float _1829 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1677].w)) * _401) * 0.949999988079071044921875);
    float _1830 = _1829 * _1829;
    float _1831 = cbLight._m0[_1677].x + _480;
    float _1832 = cbLight._m0[_1677].y + _481;
    float _1833 = cbLight._m0[_1677].z + _482;
    float _1837 = inversesqrt(dot(vec3(_1831, _1832, _1833), vec3(_1831, _1832, _1833)));
    float _1838 = _1837 * _1831;
    float _1839 = _1837 * _1832;
    float _1840 = _1837 * _1833;
    float _1841 = dot(vec3(_398, _399, _400), vec3(cbLight._m0[_1677].xyz));
    float _3985 = isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0));
    float _1844 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
    float _3996 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _1845 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
    float _1846 = dot(vec3(_398, _399, _400), vec3(_1838, _1839, _1840));
    float _4007 = isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0));
    float _1849 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
    float _1850 = dot(vec3(cbLight._m0[_1677].xyz), vec3(_1838, _1839, _1840));
    float _4018 = isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0));
    float _1854 = _1830 * _1830;
    float _1858 = ((_1849 * _1849) * (_1854 + (-1.0))) + 1.0;
    float _1866 = exp2(log2(1.0 - (isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0)))) * 5.0);
    float _1867 = 0.959999978542327880859375 - _564;
    float _1869 = 0.959999978542327880859375 - _565;
    float _1870 = 0.959999978542327880859375 - _566;
    float _1877 = 1.0 - _1830;
    float _1888 = (0.5 / (((_1845 * ((_1844 * _1877) + _1830)) + 9.9999999392252902907785028219223e-09) + (((_1845 * _1877) + _1830) * _1844))) * _1844;
    float _4029 = isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0));
    float _1890 = (isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0))) * (_1854 / ((_1858 * _1858) * 3.141590118408203125));
    uint _1904 = _1677 + 9u;
    float _1915 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1717].w)) * _401) * 0.949999988079071044921875);
    float _1916 = _1915 * _1915;
    float _1917 = cbLight._m0[_1717].x + _480;
    float _1918 = cbLight._m0[_1717].y + _481;
    float _1919 = cbLight._m0[_1717].z + _482;
    float _1923 = inversesqrt(dot(vec3(_1917, _1918, _1919), vec3(_1917, _1918, _1919)));
    float _1924 = _1923 * _1917;
    float _1925 = _1923 * _1918;
    float _1926 = _1923 * _1919;
    float _1927 = dot(vec3(_398, _399, _400), vec3(cbLight._m0[_1717].xyz));
    float _4040 = isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0));
    float _1930 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
    float _1931 = dot(vec3(_398, _399, _400), vec3(_1924, _1925, _1926));
    float _4051 = isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0));
    float _1934 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
    float _1935 = dot(vec3(cbLight._m0[_1717].xyz), vec3(_1924, _1925, _1926));
    float _4062 = isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0));
    float _1939 = _1916 * _1916;
    float _1943 = ((_1934 * _1934) * (_1939 + (-1.0))) + 1.0;
    float _1950 = exp2(log2(1.0 - (isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0)))) * 5.0);
    float _1957 = 1.0 - _1916;
    float _1967 = (0.5 / (((_1845 * ((_1930 * _1957) + _1916)) + 9.9999999392252902907785028219223e-09) + (((_1845 * _1957) + _1916) * _1930))) * _1930;
    float _4073 = isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0));
    float _1969 = (isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0))) * (_1939 / ((_1943 * _1943) * 3.141590118408203125));
    float _1979 = (((((_1950 * _1867) + _567) * cbLight._m0[_1904].x) * _1969) * _1700) + ((((cbLight._m0[_1816].x * _1669) * ((_1866 * _1867) + _567)) * _1890) * _1713);
    float _1980 = (((((_1950 * _1869) + _569) * cbLight._m0[_1904].y) * _1969) * _1700) + ((((cbLight._m0[_1816].y * _1670) * ((_1866 * _1869) + _569)) * _1890) * _1713);
    float _1981 = (((((_1950 * _1870) + _570) * cbLight._m0[_1904].z) * _1969) * _1700) + ((((cbLight._m0[_1816].z * _1671) * ((_1866 * _1870) + _570)) * _1890) * _1713);
    float _2043;
    float _2045;
    float _2047;
    if (_1753)
    {
        _2043 = _1979;
        _2045 = _1980;
        _2047 = _1981;
    }
    else
    {
        uint _2049 = _1677 + 2u;
        uint _2053 = _1677 + 10u;
        float _2067 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2049].w)) * _401) * 0.949999988079071044921875);
        float _2068 = _2067 * _2067;
        float _2069 = cbLight._m0[_2049].x + _480;
        float _2070 = cbLight._m0[_2049].y + _481;
        float _2071 = cbLight._m0[_2049].z + _482;
        float _2075 = inversesqrt(dot(vec3(_2069, _2070, _2071), vec3(_2069, _2070, _2071)));
        float _2076 = _2075 * _2069;
        float _2077 = _2075 * _2070;
        float _2078 = _2075 * _2071;
        float _2079 = dot(vec3(_398, _399, _400), vec3(cbLight._m0[_2049].xyz));
        float _4084 = isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0));
        float _2082 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
        float _2083 = dot(vec3(_398, _399, _400), vec3(_2076, _2077, _2078));
        float _4095 = isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0));
        float _2086 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
        float _2087 = dot(vec3(cbLight._m0[_2049].xyz), vec3(_2076, _2077, _2078));
        float _4106 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
        float _2091 = _2068 * _2068;
        float _2095 = ((_2086 * _2086) * (_2091 + (-1.0))) + 1.0;
        float _2102 = exp2(log2(1.0 - (isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0)))) * 5.0);
        float _2109 = 1.0 - _2068;
        float _2119 = (0.5 / (((_1845 * ((_2082 * _2109) + _2068)) + 9.9999999392252902907785028219223e-09) + (((_1845 * _2109) + _2068) * _2082))) * _2082;
        float _4117 = isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0));
        float _2121 = (isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0))) * (_2091 / ((_2095 * _2095) * 3.141590118408203125));
        float _2122 = isnan(1.0) ? _1692 : (isnan(_1692) ? 1.0 : min(_1692, 1.0));
        _2043 = (((((_2102 * _1867) + _567) * cbLight._m0[_2053].x) * _2121) * _2122) + _1979;
        _2045 = (((((_2102 * _1869) + _569) * cbLight._m0[_2053].y) * _2121) * _2122) + _1980;
        _2047 = (((((_2102 * _1870) + _570) * cbLight._m0[_2053].z) * _2121) * _2122) + _1981;
    }
    float _2157;
    float _2159;
    float _2161;
    if (_1771)
    {
        _2157 = _2043;
        _2159 = _2045;
        _2161 = _2047;
    }
    else
    {
        uint _2168 = _1677 + 3u;
        uint _2172 = _1677 + 11u;
        float _2186 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2168].w)) * _401) * 0.949999988079071044921875);
        float _2187 = _2186 * _2186;
        float _2188 = cbLight._m0[_2168].x + _480;
        float _2189 = cbLight._m0[_2168].y + _481;
        float _2190 = cbLight._m0[_2168].z + _482;
        float _2194 = inversesqrt(dot(vec3(_2188, _2189, _2190), vec3(_2188, _2189, _2190)));
        float _2195 = _2194 * _2188;
        float _2196 = _2194 * _2189;
        float _2197 = _2194 * _2190;
        float _2198 = dot(vec3(_398, _399, _400), vec3(cbLight._m0[_2168].xyz));
        float _4133 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0));
        float _2201 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
        float _2202 = dot(vec3(_398, _399, _400), vec3(_2195, _2196, _2197));
        float _4144 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
        float _2205 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
        float _2206 = dot(vec3(cbLight._m0[_2168].xyz), vec3(_2195, _2196, _2197));
        float _4155 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
        float _2210 = _2187 * _2187;
        float _2214 = ((_2205 * _2205) * (_2210 + (-1.0))) + 1.0;
        float _2221 = exp2(log2(1.0 - (isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0)))) * 5.0);
        float _2228 = 1.0 - _2187;
        float _2238 = (0.5 / (((_1845 * ((_2201 * _2228) + _2187)) + 9.9999999392252902907785028219223e-09) + (((_1845 * _2228) + _2187) * _2201))) * _2201;
        float _4166 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
        float _2240 = (isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0))) * (_2210 / ((_2214 * _2214) * 3.141590118408203125));
        float _2241 = isnan(1.0) ? _1693 : (isnan(_1693) ? 1.0 : min(_1693, 1.0));
        _2157 = (((((_2221 * _1867) + _567) * cbLight._m0[_2172].x) * _2240) * _2241) + _2043;
        _2159 = (((((_2221 * _1869) + _569) * cbLight._m0[_2172].y) * _2240) * _2241) + _2045;
        _2161 = (((((_2221 * _1870) + _570) * cbLight._m0[_2172].z) * _2240) * _2241) + _2047;
    }
    float _2375;
    float _2377;
    float _2379;
    float _2381;
    float _2383;
    float _2385;
    if (_1675.y == 0u)
    {
        float _2316 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2317 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2316;
        float _2318 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2316;
        float _2319 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2316;
        uvec4 _2331 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2332 = _2331.x;
        uint _2343 = uint((float(_2331.y) * floor(float(uint(cbSceneParam._m0[85u].y * _502) / _2332))) + floor(float(uint(cbSceneParam._m0[85u].x * _501) / _2332)));
        float _2353 = (log2(_2319 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2354 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
        uint _2357 = uint(isnan(14.0) ? _2354 : (isnan(_2354) ? 14.0 : min(_2354, 14.0)));
        uvec4 _2362 = texelFetch(g_lightClusterGridBuffer, int(((_2357 << 2u) + (_2343 << 6u)) >> 2u));
        uint _2363 = _2362.x;
        uint _2364 = _2331.z;
        float _2463;
        float _2465;
        float _2467;
        float _2469;
        float _2471;
        float _2473;
        if (((((1u << ((_2364 >> 4u) & 15u)) + 4294967295u) & _2363) == 0u) || ((_2364 & 240u) == 0u))
        {
            _2463 = 0.0;
            _2465 = 0.0;
            _2467 = 0.0;
            _2469 = 0.0;
            _2471 = 0.0;
            _2473 = 0.0;
        }
        else
        {
            float _2464;
            float _2466;
            float _2468;
            float _2470;
            float _2472;
            float _2474;
            float _2615 = 0.0;
            float _2616 = 0.0;
            float _2617 = 0.0;
            float _2618 = 0.0;
            float _2619 = 0.0;
            float _2620 = 0.0;
            uint _2621 = 0u;
            uint _2630;
            bool _2631;
            for (;;)
            {
                _2630 = texelFetch(g_lightClassification, int((((_2357 << 5u) + (_2343 << 9u)) + (_2621 << 2u)) >> 2u)).x;
                _2631 = _2630 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2631)
                {
                    frontier_phi_68_pred = _2617;
                    frontier_phi_68_pred_1 = _2620;
                    frontier_phi_68_pred_2 = _2619;
                    frontier_phi_68_pred_3 = _2618;
                    frontier_phi_68_pred_4 = _2616;
                    frontier_phi_68_pred_5 = _2615;
                }
                else
                {
                    float _2760;
                    float _2761;
                    float _2762;
                    float _2763;
                    float _2764;
                    float _2765;
                    uint _2766;
                    _2760 = _2615;
                    _2761 = _2616;
                    _2762 = _2617;
                    _2763 = _2618;
                    _2764 = _2619;
                    _2765 = _2620;
                    _2766 = _2630;
                    float _2687;
                    float _2688;
                    float _2689;
                    float _2690;
                    float _2691;
                    float _2692;
                    for (;;)
                    {
                        uint _2770 = uint(findLSB(_2766)) + (_2621 << 5u);
                        uint _2767 = (_2766 + 4294967295u) & _2766;
                        uint _2772 = _2770 * 48u;
                        vec4 _2786 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2772)).x, texelFetch(g_PointLightRenderingBuffer, int(_2772 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2772 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2772 + 3u)).x));
                        uint _2792 = (_2770 * 48u) + 4u;
                        vec4 _2805 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2792)).x, texelFetch(g_PointLightRenderingBuffer, int(_2792 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2792 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2792 + 3u)).x));
                        uint _2811 = (_2770 * 48u) + 8u;
                        vec3 _2822 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2811)).x, texelFetch(g_PointLightRenderingBuffer, int(_2811 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2811 + 2u)).x));
                        float _2826 = _2786.x - _2317;
                        float _2827 = _2786.y - _2318;
                        float _2828 = _2786.z - _2319;
                        float _2829 = dot(vec3(_2826, _2827, _2828), vec3(_2826, _2827, _2828));
                        float _2832 = inversesqrt(_2829);
                        float _2833 = _2832 * _2826;
                        float _2834 = _2832 * _2827;
                        float _2835 = _2832 * _2828;
                        float _2836 = dot(vec3(_522, _525, _528), vec3(_2833, _2834, _2835));
                        float _2841 = 1.0 - (_2829 * _2786.w);
                        float _4192 = isnan(0.0) ? _2841 : (isnan(_2841) ? 0.0 : max(_2841, 0.0));
                        float _2842 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
                        float _2843 = sqrt(_2829) * _2805.w;
                        float _2846 = 1.39999997615814208984375 / (_2843 + 1.39999997615814208984375);
                        float _2847 = _2846 * _2846;
                        float _2850 = ((1.0 - _2847) * _2836) + _2847;
                        float _2853 = _2843 * _2843;
                        float _2857 = ((isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : max(_2850, 0.0))) * _2842) / ((_2853 * 0.699999988079071044921875) + 1.0);
                        float _2861 = (-0.0) - _2317;
                        float _2862 = (-0.0) - _2318;
                        float _2863 = (-0.0) - _2319;
                        float _2867 = inversesqrt(dot(vec3(_2861, _2862, _2863), vec3(_2861, _2862, _2863)));
                        float _2868 = _2867 * _2861;
                        float _2869 = _2867 * _2862;
                        float _2870 = _2867 * _2863;
                        float _2878 = exp2(log2(1.0 / ((_2853 * 3.5) + 5.0)) * 0.25);
                        float _2879 = 1.0 - _598;
                        float _2886 = sqrt(1.0 - ((1.0 - (_2879 * _2879)) * (1.0 - (_2878 * _2878))));
                        float _2887 = _2886 * _2886;
                        float _2888 = _2887 * _2887;
                        float _2889 = _2868 + _2833;
                        float _2890 = _2869 + _2834;
                        float _2891 = _2870 + _2835;
                        float _2895 = inversesqrt(dot(vec3(_2889, _2890, _2891), vec3(_2889, _2890, _2891)));
                        float _2899 = dot(vec3(_522, _525, _528), vec3(_2868, _2869, _2870));
                        float _4208 = isnan(0.0) ? _2899 : (isnan(_2899) ? 0.0 : max(_2899, 0.0));
                        float _2902 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
                        float _2903 = dot(vec3(_522, _525, _528), vec3(_2895 * _2889, _2895 * _2890, _2895 * _2891));
                        float _4219 = isnan(0.0) ? _2903 : (isnan(_2903) ? 0.0 : max(_2903, 0.0));
                        float _2906 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
                        float _2910 = ((_2906 * _2906) * (_2888 + (-1.0))) + 1.0;
                        float _2911 = _2846 * _2887;
                        float _2912 = _2911 * _2911;
                        float _2915 = ((1.0 - _2912) * _2836) + _2912;
                        float _4230 = isnan(0.0) ? _2915 : (isnan(_2915) ? 0.0 : max(_2915, 0.0));
                        float _2916 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
                        float _2917 = 1.0 - _2887;
                        float _2927 = (0.5 / (((_2916 * ((_2902 * _2917) + _2887)) + 9.9999999392252902907785028219223e-09) + (((_2916 * _2917) + _2887) * _2902))) * _2916;
                        float _4241 = isnan(0.0) ? _2927 : (isnan(_2927) ? 0.0 : max(_2927, 0.0));
                        float _2938 = (((_2888 * 3.1415927410125732421875) * (isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0)))) / ((_2910 * _2910) * ((_2853 * 2.1991131305694580078125) + 3.141590118408203125))) * _2842;
                        _2690 = (_2857 * _2805.x) + _2763;
                        _2691 = (_2857 * _2805.y) + _2764;
                        _2692 = (_2857 * _2805.z) + _2765;
                        _2687 = (_2938 * _2822.x) + _2760;
                        _2688 = (_2938 * _2822.y) + _2761;
                        _2689 = (_2938 * _2822.z) + _2762;
                        if (_2767 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2760 = _2687;
                            _2761 = _2688;
                            _2762 = _2689;
                            _2763 = _2690;
                            _2764 = _2691;
                            _2765 = _2692;
                            _2766 = _2767;
                        }
                    }
                    frontier_phi_68_pred = _2689;
                    frontier_phi_68_pred_1 = _2692;
                    frontier_phi_68_pred_2 = _2691;
                    frontier_phi_68_pred_3 = _2690;
                    frontier_phi_68_pred_4 = _2688;
                    frontier_phi_68_pred_5 = _2687;
                }
                _2468 = frontier_phi_68_pred;
                _2474 = frontier_phi_68_pred_1;
                _2472 = frontier_phi_68_pred_2;
                _2470 = frontier_phi_68_pred_3;
                _2466 = frontier_phi_68_pred_4;
                _2464 = frontier_phi_68_pred_5;
                uint _2622 = _2621 + 1u;
                if (_2622 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2615 = _2464;
                    _2616 = _2466;
                    _2617 = _2468;
                    _2618 = _2470;
                    _2619 = _2472;
                    _2620 = _2474;
                    _2621 = _2622;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2463 = _2464;
            _2465 = _2466;
            _2467 = _2468;
            _2469 = _2470;
            _2471 = _2472;
            _2473 = _2474;
        }
        uvec4 _2477 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2478 = _2477.z;
        uint _2480 = (_2478 >> 8u) & 15u;
        float _2583;
        float _2585;
        float _2587;
        float _2589;
        float _2591;
        float _2593;
        if (((4294967295u << _2480) & _2363) == 0u)
        {
            _2583 = _2463;
            _2585 = _2465;
            _2587 = _2467;
            _2589 = _2469;
            _2591 = _2471;
            _2593 = _2473;
        }
        else
        {
            float _2608 = inversesqrt(dot(vec3(_2317, _2318, _2319), vec3(_2317, _2318, _2319)));
            float _2609 = _2608 * _2317;
            float _2610 = _2608 * _2318;
            float _2611 = _2608 * _2319;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2480 < ((_2478 >> 12u) & 15u))
            {
                float _2584;
                float _2586;
                float _2588;
                float _2590;
                float _2592;
                float _2594;
                float _2743 = _2463;
                float _2744 = _2465;
                float _2745 = _2467;
                float _2746 = _2469;
                float _2747 = _2471;
                float _2748 = _2473;
                uint _2749 = _2480;
                uint _2758;
                bool _2759;
                for (;;)
                {
                    _2758 = texelFetch(g_lightClassification, int((((_2357 << 5u) + (_2343 << 9u)) + (_2749 << 2u)) >> 2u)).x;
                    _2759 = _2758 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2759)
                    {
                        frontier_phi_79_pred = _2748;
                        frontier_phi_79_pred_1 = _2747;
                        frontier_phi_79_pred_2 = _2746;
                        frontier_phi_79_pred_3 = _2745;
                        frontier_phi_79_pred_4 = _2744;
                        frontier_phi_79_pred_5 = _2743;
                    }
                    else
                    {
                        float _2952;
                        float _2953;
                        float _2954;
                        float _2955;
                        float _2956;
                        float _2957;
                        float _3248;
                        float _3249;
                        float _3250;
                        float _3251;
                        float _3252;
                        float _3253;
                        float _2965 = _2743;
                        float _2966 = _2744;
                        float _2967 = _2745;
                        float _2968 = _2746;
                        float _2969 = _2747;
                        float _2970 = _2748;
                        uint _2971 = _2758;
                        uint _2972;
                        vec4 _2997;
                        float _2998;
                        vec4 _3013;
                        vec3 _3025;
                        vec4 _3041;
                        vec4 _3057;
                        float _3104;
                        bool _3105;
                        for (;;)
                        {
                            uint _2982 = ((_2749 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2971));
                            _2972 = (_2971 + 4294967295u) & _2971;
                            uint _2984 = _2982 * 40u;
                            _2997 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2984)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2984 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2984 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2984 + 3u)).x));
                            _2998 = _2997.w;
                            uint _3000 = (_2982 * 40u) + 4u;
                            _3013 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3000)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3000 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3000 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3000 + 3u)).x));
                            uint _3015 = (_2982 * 40u) + 8u;
                            _3025 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3015)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3015 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3015 + 2u)).x));
                            uint _3028 = (_2982 * 40u) + 16u;
                            _3041 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3028)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 3u)).x));
                            uint _3044 = (_2982 * 40u) + 20u;
                            _3057 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3044)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3044 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3044 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3044 + 3u)).x));
                            uint _3060 = (_2982 * 40u) + 24u;
                            vec4 _3073 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3060)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3060 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3060 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3060 + 3u)).x));
                            uint _3079 = (_2982 * 40u) + 28u;
                            vec4 _3092 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3079)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 3u)).x));
                            _3104 = fma(_2319, _3092.z, fma(_2318, _3092.y, _3092.x * _2317)) + _3092.w;
                            _3105 = !((fma(_2319, _3073.z, fma(_2318, _3073.y, _3073.x * _2317)) + _3073.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3105)
                            {
                                float _3132 = _2997.x - _2317;
                                float _3133 = _2997.y - _2318;
                                float _3134 = _2997.z - _2319;
                                float _3135 = dot(vec3(_3132, _3133, _3134), vec3(_3132, _3133, _3134));
                                float _3138 = inversesqrt(_3135);
                                float _3139 = _3138 * _3132;
                                float _3140 = _3138 * _3133;
                                float _3141 = _3138 * _3134;
                                float _3145 = 1.0 - (_3135 / (_2998 * _2998));
                                float _4252 = isnan(0.0) ? _3145 : (isnan(_3145) ? 0.0 : max(_3145, 0.0));
                                float _3146 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
                                float _3150 = sqrt(_3135) * _3013.w;
                                float _3152 = 1.39999997615814208984375 / (_3150 + 1.39999997615814208984375);
                                float _3153 = _3152 * _3152;
                                float _3156 = ((1.0 - _3153) * dot(vec3(_3139, _3140, _3141), vec3(_522, _525, _528))) + _3153;
                                float _3159 = _3150 * _3150;
                                float _3163 = (fma(_2319, _3041.z, fma(_2318, _3041.y, _3041.x * _2317)) + _3041.w) / _3104;
                                float _3164 = (fma(_2319, _3057.z, fma(_2318, _3057.y, _3057.x * _2317)) + _3057.w) / _3104;
                                float _3168 = 1.0 - dot(vec2(_3163, _3164), vec2(_3163, _3164));
                                float _4268 = isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : max(_3168, 0.0));
                                float _3169 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
                                float _3170 = _3169 * (((isnan(0.0) ? _3156 : (isnan(_3156) ? 0.0 : max(_3156, 0.0))) * _3146) / ((_3159 * 0.699999988079071044921875) + 1.0));
                                float _3182 = exp2(log2(1.0 / ((_3159 * 3.5) + 5.0)) * 0.25);
                                float _3183 = 1.0 - _598;
                                float _3190 = sqrt(1.0 - ((1.0 - (_3183 * _3183)) * (1.0 - (_3182 * _3182))));
                                float _3191 = _3190 * _3190;
                                float _3192 = _3191 * _3191;
                                float _3193 = _3139 - _2609;
                                float _3194 = _3140 - _2610;
                                float _3195 = _3141 - _2611;
                                float _3199 = inversesqrt(dot(vec3(_3193, _3194, _3195), vec3(_3193, _3194, _3195)));
                                float _3203 = dot(vec3(_522, _525, _528), vec3((-0.0) - _2609, (-0.0) - _2610, (-0.0) - _2611));
                                float _4279 = isnan(0.0) ? _3203 : (isnan(_3203) ? 0.0 : max(_3203, 0.0));
                                float _3206 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
                                float _3207 = dot(vec3(_522, _525, _528), vec3(_3199 * _3193, _3199 * _3194, _3199 * _3195));
                                float _4290 = isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : max(_3207, 0.0));
                                float _3210 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
                                float _3214 = ((_3210 * _3210) * (_3192 + (-1.0))) + 1.0;
                                float _3215 = _3152 * _3191;
                                float _3216 = _3215 * _3215;
                                float _3222 = ((1.0 - _3216) * dot(vec3(_522, _525, _528), vec3(_3139, _3140, _3141))) + _3216;
                                float _4301 = isnan(0.0) ? _3222 : (isnan(_3222) ? 0.0 : max(_3222, 0.0));
                                float _3223 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
                                float _3224 = 1.0 - _3191;
                                float _3234 = (0.5 / (((_3223 * ((_3206 * _3224) + _3191)) + 9.9999999392252902907785028219223e-09) + (((_3223 * _3224) + _3191) * _3206))) * _3223;
                                float _4312 = isnan(0.0) ? _3234 : (isnan(_3234) ? 0.0 : max(_3234, 0.0));
                                float _3244 = (_3169 * _3146) * (((_3192 * 3.1415927410125732421875) * (isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0)))) / ((_3214 * _3214) * ((_3159 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3170 * _3013.z;
                                frontier_phi_85_pred_1 = _3170 * _3013.y;
                                frontier_phi_85_pred_2 = _3170 * _3013.x;
                                frontier_phi_85_pred_3 = _3244 * _3025.z;
                                frontier_phi_85_pred_4 = _3244 * _3025.y;
                                frontier_phi_85_pred_5 = _3244 * _3025.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3253 = frontier_phi_85_pred;
                            _3252 = frontier_phi_85_pred_1;
                            _3251 = frontier_phi_85_pred_2;
                            _3250 = frontier_phi_85_pred_3;
                            _3249 = frontier_phi_85_pred_4;
                            _3248 = frontier_phi_85_pred_5;
                            _2955 = _3251 + _2968;
                            _2956 = _3252 + _2969;
                            _2957 = _3253 + _2970;
                            _2952 = _3248 + _2965;
                            _2953 = _3249 + _2966;
                            _2954 = _3250 + _2967;
                            if (_2972 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2965 = _2952;
                                _2966 = _2953;
                                _2967 = _2954;
                                _2968 = _2955;
                                _2969 = _2956;
                                _2970 = _2957;
                                _2971 = _2972;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2957;
                        frontier_phi_79_pred_1 = _2956;
                        frontier_phi_79_pred_2 = _2955;
                        frontier_phi_79_pred_3 = _2954;
                        frontier_phi_79_pred_4 = _2953;
                        frontier_phi_79_pred_5 = _2952;
                    }
                    _2594 = frontier_phi_79_pred;
                    _2592 = frontier_phi_79_pred_1;
                    _2590 = frontier_phi_79_pred_2;
                    _2588 = frontier_phi_79_pred_3;
                    _2586 = frontier_phi_79_pred_4;
                    _2584 = frontier_phi_79_pred_5;
                    uint _2750 = _2749 + 1u;
                    if (_2750 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2743 = _2584;
                        _2744 = _2586;
                        _2745 = _2588;
                        _2746 = _2590;
                        _2747 = _2592;
                        _2748 = _2594;
                        _2749 = _2750;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2590;
                frontier_phi_60_61_ladder_1 = _2594;
                frontier_phi_60_61_ladder_2 = _2592;
                frontier_phi_60_61_ladder_3 = _2588;
                frontier_phi_60_61_ladder_4 = _2586;
                frontier_phi_60_61_ladder_5 = _2584;
            }
            else
            {
                frontier_phi_60_61_ladder = _2469;
                frontier_phi_60_61_ladder_1 = _2473;
                frontier_phi_60_61_ladder_2 = _2471;
                frontier_phi_60_61_ladder_3 = _2467;
                frontier_phi_60_61_ladder_4 = _2465;
                frontier_phi_60_61_ladder_5 = _2463;
            }
            _2583 = frontier_phi_60_61_ladder_5;
            _2585 = frontier_phi_60_61_ladder_4;
            _2587 = frontier_phi_60_61_ladder_3;
            _2589 = frontier_phi_60_61_ladder;
            _2591 = frontier_phi_60_61_ladder_2;
            _2593 = frontier_phi_60_61_ladder_1;
        }
        float _2598 = isnan(1.0) ? _582 : (isnan(_582) ? 1.0 : min(_582, 1.0));
        _2375 = (_2598 * _2589) + _1809;
        _2377 = (_2598 * _2591) + _1811;
        _2379 = (_2598 * _2593) + _1813;
        _2381 = ((_2583 * _567) * _2598) + _2157;
        _2383 = ((_2585 * _569) * _2598) + _2159;
        _2385 = ((_2587 * _570) * _2598) + _2161;
    }
    else
    {
        _2375 = _1809;
        _2377 = _1811;
        _2379 = _1813;
        _2381 = _2157;
        _2383 = _2159;
        _2385 = _2161;
    }
    float _4328 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _4339 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _4350 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _2402 = ((isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0))) * (_2375 + ((isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0))) * _582))) + ((_2381 + ((isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0))) * _1423)) * cbPerFrame._m0[3u].x);
    float _2403 = ((isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0))) * (_2377 + ((isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0))) * _582))) + ((_2383 + ((isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0))) * _1423)) * cbPerFrame._m0[3u].x);
    float _2404 = ((isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0))) * (_2379 + ((isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0))) * _582))) + ((_2385 + ((isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0))) * _1423)) * cbPerFrame._m0[3u].x);
    uint _2405 = _541 + 6u;
    float _2413 = _501 / cbSceneParam._m0[86u].x;
    float _2414 = _502 / cbSceneParam._m0[86u].y;
    vec4 _2428 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2413, _2414, (log2((isnan(cbSceneParam._m0[77u].w) ? _421 : (isnan(_421) ? cbSceneParam._m0[77u].w : min(_421, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2430 = _2428.x;
    float _2431 = _2428.y;
    float _2432 = _2428.z;
    float _2433 = _2428.w;
    float _2525;
    float _2527;
    float _2529;
    float _2531;
    if (_421 > cbSceneParam._m0[78u].w)
    {
        float _2488 = isnan(_421) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _421 : min(cbSceneParam._m0[80u].w, _421));
        float _2489 = _2488 / _421;
        float _2500 = _2489 * _473;
        float _2501 = _474 * _2489;
        float _2502 = (-0.0) - _2501;
        float _2503 = _2489 * _475;
        float _2505 = (cbSceneParam._m0[77u].w * _2502) / _2488;
        float _2506 = _2505 + cbSceneParam._m0[79u].w;
        float _2507 = cbSceneParam._m0[79u].w - _2501;
        float _2513 = sqrt(((_2500 * _2500) + (_2501 * _2501)) + (_2503 * _2503));
        float _2516 = (1.0 - (cbSceneParam._m0[77u].w / _2488)) * _2513;
        float _2521 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2523 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2700;
        if (abs((_2502 - _2505) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2700 = ((((_2506 > 0.0) ? exp2(_2521 * _2506) : (2.0 - exp2(_2523 * _2506))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2516;
        }
        else
        {
            float _2644 = 1.0 / cbSceneParam._m0[80u].x;
            float _2645 = isnan(_2507) ? _2506 : (isnan(_2506) ? _2507 : max(_2506, _2507));
            float _2646 = isnan(_2507) ? _2506 : (isnan(_2506) ? _2507 : min(_2506, _2507));
            float _2655 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : min(_2645, 0.0));
            float _2656 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : min(_2646, 0.0));
            _2700 = ((abs(_2513 / _2502) * cbSceneParam._m0[80u].y) * ((((_2655 - _2656) * 2.0) - ((exp2(_2521 * (isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0)))) - exp2(_2521 * (isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0))))) * _2644)) - ((exp2(_2523 * _2655) - exp2(_2523 * _2656)) * _2644))) + (_2516 * cbSceneParam._m0[80u].z);
        }
        vec4 _2702 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2413, _2414, 1.0), 0.0);
        float _2711 = exp2((_2700 * (-1.44269502162933349609375)) * (1.0 - _2702.w));
        float _2712 = log2(_2711);
        float _2728 = log2(_2433);
        _2525 = (exp2(_2728 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2712 * cbSceneParam._m0[78u].x)) * _2702.x) / cbSceneParam._m0[78u].x)) + _2430;
        _2527 = (exp2(_2728 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2712 * cbSceneParam._m0[78u].y)) * _2702.y) / cbSceneParam._m0[78u].y)) + _2431;
        _2529 = (exp2(_2728 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2712 * cbSceneParam._m0[78u].z)) * _2702.z) / cbSceneParam._m0[78u].z)) + _2432;
        _2531 = _2711 * _2433;
    }
    else
    {
        _2525 = _2430;
        _2527 = _2431;
        _2529 = _2432;
        _2531 = _2433;
    }
    bool _2738;
    vec4 _2541;
    vec4 _2563;
    float _2565;
    float _2569;
    float _2570;
    float _2571;
    float _2572;
    bool _2582;
    for (;;)
    {
        _2541 = cbMatDynParam._m0[0u];
        float _2543 = roundEven(_2541.y);
        bool _2544 = _2543 == 3.0;
        float _2545 = log2(_2531);
        float _2552 = exp2(_2545 * cbSceneParam._m0[78u].x) * _2402;
        float _2553 = exp2(_2545 * cbSceneParam._m0[78u].y) * _2403;
        float _2554 = exp2(_2545 * cbSceneParam._m0[78u].z) * _2404;
        float _2561 = _489 + (-0.5);
        _2563 = cbMtdParam._m0[1u];
        _2565 = _2563.y * _2561;
        float _2568 = (_2543 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2569 = _2568 * (_2544 ? _2552 : (_2552 + (cbSceneParam._m0[72u].w * _2525)));
        _2570 = _2568 * (_2544 ? _2553 : (_2553 + (cbSceneParam._m0[72u].w * _2527)));
        _2571 = _2568 * (_2544 ? _2554 : (_2554 + (cbSceneParam._m0[72u].w * _2529)));
        _2572 = _2561 * 0.999000012874603271484375;
        _2582 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2582)
        {
            if ((cbInstanceData._m0[_541 + 7u].x + _2572) < 0.5)
            {
                _2738 = true;
                break;
            }
        }
        uint _2679 = _543 + uint(_2541.w);
        if ((cbInstanceData._m0[_2679].w < 1.0) && ((cbInstanceData._m0[_2679].w + _2572) < 0.5))
        {
            _2738 = true;
            break;
        }
        if ((_2565 + _254) < _2563.x)
        {
            _2738 = true;
            break;
        }
        _2738 = false;
        break;
    }
    float _2943;
    if (_2738)
    {
        discard_state = true;
        _2943 = 0.0;
    }
    else
    {
        _2943 = cbInstanceData._m0[_2405].w;
    }
    SV_Target.x = _2569;
    SV_Target.y = _2570;
    SV_Target.z = _2571;
    SV_Target.w = _2943;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2405].w;
    discard_exit();
}


