#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _984;
float _3656;
float _3657;
float _3658;
float _3659;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _196 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _197 = _196 * _188;
    float _198 = _196 * _189;
    float _199 = _196 * _190;
    float _203 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _204 = _203 * NORMAL.x;
    float _205 = _203 * NORMAL.y;
    float _206 = _203 * NORMAL.z;
    float _210 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _211 = _210 * TANGENT.x;
    float _212 = _210 * TANGENT.y;
    float _213 = _210 * TANGENT.z;
    float _218;
    float _219;
    float _220;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _218 = (-0.0) - _204;
        _219 = (-0.0) - _205;
        _220 = (-0.0) - _206;
    }
    else
    {
        _218 = _204;
        _219 = _205;
        _220 = _206;
    }
    vec4 _246 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _252 = _246.w;
    float _253 = _246.x * cbMtdParam._m0[9u].x;
    float _254 = _246.y * cbMtdParam._m0[9u].y;
    float _255 = _246.z * cbMtdParam._m0[9u].z;
    vec4 _273 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _277 = _273.z;
    float _281 = (_273.x * 2.0) + (-1.0);
    float _283 = (_273.y * 2.0) + (-1.0);
    float _284 = dot(vec2(_281, _283), vec2(_281, _283));
    float _3668 = isnan(0.0) ? _284 : (isnan(_284) ? 0.0 : max(_284, 0.0));
    float _290 = sqrt(1.0 - (isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0))));
    float _293 = fma(_290, _218, fma(_283, _211, _281 * _197));
    float _296 = fma(_290, _219, fma(_283, _212, _281 * _198));
    float _299 = fma(_290, _220, fma(_283, _213, _281 * _199));
    float _303 = inversesqrt(dot(vec3(_293, _296, _299), vec3(_293, _296, _299)));
    float _314 = cbMtdParam._m0[12u].x + dot(vec4(_303 * _293, _303 * _296, _303 * _299, 0.0), vec4(cbMtdParam._m0[13u].xyz, 0.0));
    float _3679 = isnan(0.0) ? _314 : (isnan(_314) ? 0.0 : max(_314, 0.0));
    float _315 = isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0));
    float _322 = (_315 * (cbMtdParam._m0[10u].x - _253)) + _253;
    float _323 = (_315 * (cbMtdParam._m0[10u].y - _254)) + _254;
    float _324 = (_315 * (cbMtdParam._m0[10u].z - _255)) + _255;
    vec4 _336 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _338 = _336.x;
    float _340 = _338 - (_338 * _315);
    vec4 _352 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _359 = (_352.x * 2.0) + (-1.0);
    float _360 = (_352.y * 2.0) + (-1.0);
    float _361 = dot(vec2(_359, _360), vec2(_359, _360));
    float _3690 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
    float _369 = ((_352.z - _277) * _315) + _277;
    float _381 = (((_359 - _281) + (cbMtdParam._m0[12u].w * _281)) * _315) + _281;
    float _382 = (((_360 - _283) + (cbMtdParam._m0[12u].w * _283)) * _315) + _283;
    float _383 = ((sqrt(1.0 - (isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0)))) - _290) * _315) + _290;
    float _386 = fma(_383, _218, fma(_382, _211, _381 * _197));
    float _389 = fma(_383, _219, fma(_382, _212, _381 * _198));
    float _392 = fma(_383, _220, fma(_382, _213, _381 * _199));
    float _396 = inversesqrt(dot(vec3(_386, _389, _392), vec3(_386, _389, _392)));
    float _397 = _396 * _386;
    float _398 = _396 * _389;
    float _399 = _396 * _392;
    float _3701 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _400 = isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0));
    float _3712 = isnan(0.0) ? _322 : (isnan(_322) ? 0.0 : max(_322, 0.0));
    float _3723 = isnan(0.0) ? _323 : (isnan(_323) ? 0.0 : max(_323, 0.0));
    float _3734 = isnan(0.0) ? _324 : (isnan(_324) ? 0.0 : max(_324, 0.0));
    float _3745 = isnan(0.0) ? _340 : (isnan(_340) ? 0.0 : max(_340, 0.0));
    float _404 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
    float _420 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _462 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _472 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _462);
    float _473 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _462);
    float _474 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _462);
    float _478 = inversesqrt(dot(vec3(_472, _473, _474), vec3(_472, _473, _474)));
    float _479 = _472 * _478;
    float _480 = _473 * _478;
    float _481 = _474 * _478;
    vec4 _486 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _488 = _486.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _663 = sqrt(((_472 * _472) + (_473 * _473)) + (_474 * _474));
        float _669 = (cbMatDynParam._m0[5u].x * _663) + cbMatDynParam._m0[5u].y;
        float _3756 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
        float _670 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
        float _674 = (cbMatDynParam._m0[5u].z * _663) + cbMatDynParam._m0[5u].w;
        float _3767 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0))) - _670)) + _670) < ((_488 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _500 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _501 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _521 = fma(_399, cbSceneParam._m0[5u].z, fma(_398, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _397));
    float _524 = fma(_399, cbSceneParam._m0[6u].z, fma(_398, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _397));
    float _527 = fma(_399, cbSceneParam._m0[7u].z, fma(_398, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _397));
    uint _540 = uint(roundEven(NORMAL.w)) * 13u;
    uint _541 = _540 + 9u;
    uint _542 = _541 + uint(cbMatDynParam._m0[0u].w);
    float _548 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0)))) * cbInstanceData._m0[_542].x;
    float _549 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0)))) * cbInstanceData._m0[_542].y;
    float _550 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0)))) * cbInstanceData._m0[_542].z;
    float _3778 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _551 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
    float _3789 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _552 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
    float _3800 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _553 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
    float _554 = 1.0 - _404;
    float _555 = _551 * _554;
    float _556 = _552 * _554;
    float _557 = _553 * _554;
    float _562 = (_551 + (-0.039999999105930328369140625)) * _404;
    float _563 = (_552 + (-0.039999999105930328369140625)) * _404;
    float _564 = (_553 + (-0.039999999105930328369140625)) * _404;
    float _565 = _562 + 0.039999999105930328369140625;
    float _567 = _563 + 0.039999999105930328369140625;
    float _568 = _564 + 0.039999999105930328369140625;
    vec4 _577 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _500, cbSceneParam._m0[86u].y * _501));
    float _580 = _577.x * TEXCOORD_3.w;
    float _581 = dot(vec3(_397, _398, _399), vec3(_479, _480, _481));
    float _584 = _581 * 2.0;
    float _588 = (_584 * _397) - _479;
    float _589 = (_584 * _398) - _480;
    float _590 = (_584 * _399) - _481;
    float _594 = abs(dot(vec3(_479, _480, _481), vec3(_397, _398, _399)));
    float _3811 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _596 = sqrt(_400);
    float _609 = exp2((_596 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_596 * 3.0));
    float _615 = (1.0 - _609) * ((_596 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _616 = _609 * _596;
    float _644 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _648 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _652 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _983;
    float _985;
    float _986;
    float _987;
    float _988;
    float _989;
    float _990;
    float _991;
    float _992;
    float _993;
    float _994;
    float _995;
    float _996;
    float _997;
    float _998;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _708 = fma(_652, cbModelParam._m0[26u].z, fma(_648, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _644));
        float _712 = fma(_652, cbModelParam._m0[27u].z, fma(_648, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _644));
        float _716 = fma(_652, cbModelParam._m0[28u].z, fma(_648, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _644));
        float _741 = _644 + _397;
        float _742 = _648 + _398;
        float _743 = _652 + _399;
        float _753 = fma(_743, cbModelParam._m0[26u].z, fma(_742, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _741)) - _708;
        float _754 = fma(_743, cbModelParam._m0[27u].z, fma(_742, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _741)) - _712;
        float _755 = fma(_743, cbModelParam._m0[28u].z, fma(_742, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _741)) - _716;
        float _759 = inversesqrt(dot(vec3(_753, _754, _755), vec3(_753, _754, _755)));
        float _772 = ((_759 * _753) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_708 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _773 = ((_759 * _754) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_712 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _774 = ((_759 * _755) / cbModelParam._m0[34u].z) + ((((((_716 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _777 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_772, _773, _774), 0.0);
        vec4 _784 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_772, _773, _774), 0.0);
        vec4 _791 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_772, _773, _774), 0.0);
        vec4 _798 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_772, _773, _774), 0.0);
        float _811 = exp2((_777.w + (-0.5)) * 20.0) * 2.0;
        float _812 = _811 * (_777.x + (-0.5));
        float _813 = _811 * (_777.y + (-0.5));
        float _814 = _811 * (_777.z + (-0.5));
        float _821 = exp2((_784.w + (-0.5)) * 20.0) * 2.0;
        float _822 = _821 * (_784.x + (-0.5));
        float _823 = _821 * (_784.y + (-0.5));
        float _824 = _821 * (_784.z + (-0.5));
        float _831 = exp2((_791.w + (-0.5)) * 20.0) * 2.0;
        float _832 = _831 * (_791.x + (-0.5));
        float _833 = _831 * (_791.y + (-0.5));
        float _834 = _831 * (_791.z + (-0.5));
        float _841 = exp2((_798.w + (-0.5)) * 20.0) * 2.0;
        float _842 = _841 * (_798.x + (-0.5));
        float _843 = _841 * (_798.y + (-0.5));
        float _844 = _841 * (_798.z + (-0.5));
        float _845 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
        float _846 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
        float _847 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
        float _848 = _812 * 0.5;
        float _849 = _822 * 0.5;
        float _850 = _832 * 0.5;
        float _851 = dot(vec3(_848, _849, _850), vec3(_848, _849, _850));
        float _856 = (_851 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_851);
        float _865 = (dot(vec3(_397, _398, _399), vec3(_856 * _848, _856 * _849, _856 * _850)) + 1.0) * 0.5;
        float _3837 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
        float _875 = sqrt(((_849 * _849) + (_848 * _848)) + (_850 * _850)) / (_845 + 9.9999997473787516355514526367188e-06);
        float _3848 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
        float _876 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
        float _877 = _876 * 2.0;
        float _881 = (1.0 - _876) / (_876 + 1.0);
        float _3859 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
        float _882 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
        float _891 = ((((1.0 - _882) * (_877 + 2.0)) * exp2(log2(isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0))) * (_877 + 1.0))) + _882) * _845;
        float _892 = _813 * 0.5;
        float _893 = _823 * 0.5;
        float _894 = _833 * 0.5;
        float _895 = dot(vec3(_892, _893, _894), vec3(_892, _893, _894));
        float _900 = (_895 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_895);
        float _908 = (dot(vec3(_397, _398, _399), vec3(_900 * _892, _900 * _893, _900 * _894)) + 1.0) * 0.5;
        float _3870 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
        float _917 = sqrt(((_893 * _893) + (_892 * _892)) + (_894 * _894)) / (_846 + 9.9999997473787516355514526367188e-06);
        float _3881 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
        float _918 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
        float _919 = _918 * 2.0;
        float _923 = (1.0 - _918) / (_918 + 1.0);
        float _3892 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
        float _924 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
        float _933 = ((((1.0 - _924) * (_919 + 2.0)) * exp2(log2(isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0))) * (_919 + 1.0))) + _924) * _846;
        float _934 = _814 * 0.5;
        float _935 = _824 * 0.5;
        float _936 = _834 * 0.5;
        float _937 = dot(vec3(_934, _935, _936), vec3(_934, _935, _936));
        float _942 = (_937 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_937);
        float _950 = (dot(vec3(_397, _398, _399), vec3(_942 * _934, _942 * _935, _942 * _936)) + 1.0) * 0.5;
        float _3903 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        float _959 = sqrt(((_935 * _935) + (_934 * _934)) + (_936 * _936)) / (_847 + 9.9999997473787516355514526367188e-06);
        float _3914 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
        float _960 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
        float _961 = _960 * 2.0;
        float _965 = (1.0 - _960) / (_960 + 1.0);
        float _3925 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
        float _966 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
        float _975 = ((((1.0 - _966) * (_961 + 2.0)) * exp2(log2(isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0))) * (_961 + 1.0))) + _966) * _847;
        _983 = _814;
        _985 = _813;
        _986 = _812;
        _987 = _824;
        _988 = _823;
        _989 = _822;
        _990 = _834;
        _991 = _833;
        _992 = _832;
        _993 = _847;
        _994 = _846;
        _995 = _845;
        _996 = cbModelParam._m0[36u].z * (isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0)));
        _997 = cbModelParam._m0[36u].z * (isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0)));
        _998 = cbModelParam._m0[36u].z * (isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0)));
    }
    else
    {
        _983 = _984;
        _985 = _984;
        _986 = _984;
        _987 = _984;
        _988 = _984;
        _989 = _984;
        _990 = _984;
        _991 = _984;
        _992 = _984;
        _993 = _984;
        _994 = _984;
        _995 = _984;
        _996 = 0.0;
        _997 = 0.0;
        _998 = 0.0;
    }
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1027 = fma(_652, cbModelParam._m0[30u].z, fma(_648, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _644));
        float _1031 = fma(_652, cbModelParam._m0[31u].z, fma(_648, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _644));
        float _1035 = fma(_652, cbModelParam._m0[32u].z, fma(_648, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _644));
        float _1058 = _644 + _397;
        float _1059 = _648 + _398;
        float _1060 = _652 + _399;
        float _1070 = fma(_1060, cbModelParam._m0[30u].z, fma(_1059, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1058)) - _1027;
        float _1071 = fma(_1060, cbModelParam._m0[31u].z, fma(_1059, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1058)) - _1031;
        float _1072 = fma(_1060, cbModelParam._m0[32u].z, fma(_1059, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1058)) - _1035;
        float _1076 = inversesqrt(dot(vec3(_1070, _1071, _1072), vec3(_1070, _1071, _1072)));
        float _1089 = ((_1076 * _1070) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1027 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1090 = ((_1076 * _1071) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1031 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1091 = ((_1076 * _1072) / cbModelParam._m0[35u].z) + ((((((_1035 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1093 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1089, _1090, _1091), 0.0);
        vec4 _1100 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1089, _1090, _1091), 0.0);
        vec4 _1107 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1089, _1090, _1091), 0.0);
        vec4 _1114 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1089, _1090, _1091), 0.0);
        float _1126 = exp2((_1093.w + (-0.5)) * 20.0) * 2.0;
        float _1127 = _1126 * (_1093.x + (-0.5));
        float _1128 = _1126 * (_1093.y + (-0.5));
        float _1129 = _1126 * (_1093.z + (-0.5));
        float _1136 = exp2((_1100.w + (-0.5)) * 20.0) * 2.0;
        float _1137 = _1136 * (_1100.x + (-0.5));
        float _1138 = _1136 * (_1100.y + (-0.5));
        float _1139 = _1136 * (_1100.z + (-0.5));
        float _1146 = exp2((_1107.w + (-0.5)) * 20.0) * 2.0;
        float _1147 = _1146 * (_1107.x + (-0.5));
        float _1148 = _1146 * (_1107.y + (-0.5));
        float _1149 = _1146 * (_1107.z + (-0.5));
        float _1156 = exp2((_1114.w + (-0.5)) * 20.0) * 2.0;
        float _1157 = _1156 * (_1114.x + (-0.5));
        float _1158 = _1156 * (_1114.y + (-0.5));
        float _1159 = _1156 * (_1114.z + (-0.5));
        float _1160 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1161 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1162 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1163 = _1127 * 0.5;
        float _1164 = _1137 * 0.5;
        float _1165 = _1147 * 0.5;
        float _1166 = dot(vec3(_1163, _1164, _1165), vec3(_1163, _1164, _1165));
        float _1171 = (_1166 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1166);
        float _1179 = (dot(vec3(_397, _398, _399), vec3(_1171 * _1163, _1171 * _1164, _1171 * _1165)) + 1.0) * 0.5;
        float _3966 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1188 = sqrt(((_1164 * _1164) + (_1163 * _1163)) + (_1165 * _1165)) / (_1160 + 9.9999997473787516355514526367188e-06);
        float _3977 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1189 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
        float _1190 = _1189 * 2.0;
        float _1194 = (1.0 - _1189) / (_1189 + 1.0);
        float _3988 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1195 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
        float _1204 = ((((1.0 - _1195) * (_1190 + 2.0)) * exp2(log2(isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0))) * (_1190 + 1.0))) + _1195) * _1160;
        float _1205 = _1128 * 0.5;
        float _1206 = _1138 * 0.5;
        float _1207 = _1148 * 0.5;
        float _1208 = dot(vec3(_1205, _1206, _1207), vec3(_1205, _1206, _1207));
        float _1213 = (_1208 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1208);
        float _1221 = (dot(vec3(_397, _398, _399), vec3(_1213 * _1205, _1213 * _1206, _1213 * _1207)) + 1.0) * 0.5;
        float _3999 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1230 = sqrt(((_1206 * _1206) + (_1205 * _1205)) + (_1207 * _1207)) / (_1161 + 9.9999997473787516355514526367188e-06);
        float _4010 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1231 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
        float _1232 = _1231 * 2.0;
        float _1236 = (1.0 - _1231) / (_1231 + 1.0);
        float _4021 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1237 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
        float _1246 = ((((1.0 - _1237) * (_1232 + 2.0)) * exp2(log2(isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0))) * (_1232 + 1.0))) + _1237) * _1161;
        float _1247 = _1129 * 0.5;
        float _1248 = _1139 * 0.5;
        float _1249 = _1149 * 0.5;
        float _1250 = dot(vec3(_1247, _1248, _1249), vec3(_1247, _1248, _1249));
        float _1255 = (_1250 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1250);
        float _1263 = (dot(vec3(_397, _398, _399), vec3(_1255 * _1247, _1255 * _1248, _1255 * _1249)) + 1.0) * 0.5;
        float _4032 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1272 = sqrt(((_1248 * _1248) + (_1247 * _1247)) + (_1249 * _1249)) / (_1162 + 9.9999997473787516355514526367188e-06);
        float _4043 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1273 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
        float _1274 = _1273 * 2.0;
        float _1278 = (1.0 - _1273) / (_1273 + 1.0);
        float _4054 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1279 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _1288 = ((((1.0 - _1279) * (_1274 + 2.0)) * exp2(log2(isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0))) * (_1274 + 1.0))) + _1279) * _1162;
        _1296 = _1129;
        _1297 = _1128;
        _1298 = _1127;
        _1299 = _1139;
        _1300 = _1138;
        _1301 = _1137;
        _1302 = _1149;
        _1303 = _1148;
        _1304 = _1147;
        _1305 = _1162;
        _1306 = _1161;
        _1307 = _1160;
        _1308 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0)));
        _1309 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0)));
        _1310 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0)));
    }
    else
    {
        _1296 = _984;
        _1297 = _984;
        _1298 = _984;
        _1299 = _984;
        _1300 = _984;
        _1301 = _984;
        _1302 = _984;
        _1303 = _984;
        _1304 = _984;
        _1305 = _984;
        _1306 = _984;
        _1307 = _984;
        _1308 = 0.0;
        _1309 = 0.0;
        _1310 = 0.0;
    }
    float _1320 = (cbModelParam._m0[1u].x * (_1308 - _996)) + _996;
    float _1321 = (cbModelParam._m0[1u].x * (_1309 - _997)) + _997;
    float _1322 = (cbModelParam._m0[1u].x * (_1310 - _998)) + _998;
    float _1343 = fma(_1322, cbSceneParam._m0[89u].z, fma(_1321, cbSceneParam._m0[89u].y, _1320 * cbSceneParam._m0[89u].x));
    float _1346 = fma(_1322, cbSceneParam._m0[90u].z, fma(_1321, cbSceneParam._m0[90u].y, _1320 * cbSceneParam._m0[90u].x));
    float _1349 = fma(_1322, cbSceneParam._m0[91u].z, fma(_1321, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1320));
    float _1364 = _588 * 0.5;
    float _1365 = _589 * 0.5;
    float _1366 = _590 * 0.5;
    float _1367 = dot(vec4(_1364, _1365, _1366, 1.0), vec4(_1298, _1301, _1304, _1307));
    float _1370 = dot(vec4(_1364, _1365, _1366, 1.0), vec4(_1297, _1300, _1303, _1306));
    float _1373 = dot(vec4(_1364, _1365, _1366, 1.0), vec4(_1296, _1299, _1302, _1305));
    float _1407;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1380 = dot(vec4(_1364, _1365, _1366, 1.0), vec4(_983, _987, _990, _993));
        float _1384 = dot(vec4(_1364, _1365, _1366, 1.0), vec4(_985, _988, _991, _994));
        float _1388 = dot(vec4(_1364, _1365, _1366, 1.0), vec4(_986, _989, _992, _995));
        float _1395 = dot(vec4(cbModelParam._m0[39u]), vec4(_1364, _1365, _1366, 1.0));
        _1407 = dot(vec3(isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0)), isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0)), isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1395) ? 0.0 : (isnan(0.0) ? _1395 : max(0.0, _1395))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1407 = 1.0;
    }
    float _1418;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1409 = dot(vec4(cbModelParam._m0[40u]), vec4(_1364, _1365, _1366, 1.0));
        _1418 = dot(vec3(isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0)), isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0)), isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1409) ? 0.0 : (isnan(0.0) ? _1409 : max(0.0, _1409))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1418 = 1.0;
    }
    float _1422 = (_1418 * cbModelParam._m0[1u].x) + (_1407 * (1.0 - cbModelParam._m0[1u].x));
    float _1432 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _400);
    float _1433 = isnan(_1432) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1432 : min(cbModelParam._m0[25u].z, _1432));
    float _1514;
    float _1516;
    float _1518;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1481 = fma(_652, cbModelParam._m0[13u].z, fma(_648, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _644)) + cbModelParam._m0[13u].w;
        float _1485 = fma(_652, cbModelParam._m0[14u].z, fma(_648, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _644)) + cbModelParam._m0[14u].w;
        float _1489 = fma(_652, cbModelParam._m0[15u].z, fma(_648, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _644)) + cbModelParam._m0[15u].w;
        float _1492 = fma(_590, cbModelParam._m0[13u].z, fma(_589, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _588));
        float _1495 = fma(_590, cbModelParam._m0[14u].z, fma(_589, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _588));
        float _1498 = fma(_590, cbModelParam._m0[15u].z, fma(_589, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _588));
        float _1526;
        if (_1492 > 0.0)
        {
            _1526 = abs((1.0 - _1481) / _1492);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1492 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1481 + 1.0) / _1492);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1526 = frontier_phi_19_17_ladder;
        }
        float _1701;
        if (_1495 > 0.0)
        {
            _1701 = abs((1.0 - _1485) / _1495);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1495 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1485 + 1.0) / _1495);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1701 = frontier_phi_28_24_ladder;
        }
        float _1997;
        if (_1498 > 0.0)
        {
            _1997 = abs((1.0 - _1489) / _1498);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1498 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1489 + 1.0) / _1498);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1997 = frontier_phi_40_35_ladder;
        }
        float _1999 = isnan(_1701) ? _1526 : (isnan(_1526) ? _1701 : min(_1526, _1701));
        float _2000 = isnan(_1997) ? _1999 : (isnan(_1999) ? _1997 : min(_1999, _1997));
        float _2004 = (_2000 * _1492) + _1481;
        float _2005 = (_2000 * _1495) + _1485;
        float _2006 = (_2000 * _1498) + _1489;
        float _2007 = _2000 * 9.9999997473787516355514526367188e-05;
        float _2009 = (-1.0) - _2007;
        float _2011 = _2007 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2006 > _2011) || ((_2006 < _2009) || ((_2005 > _2011) || ((_2005 < _2009) || ((_2004 < _2009) || (_2004 > _2011))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2151 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2006, cbModelParam._m0[9u].z, fma(_2005, cbModelParam._m0[9u].y, _2004 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2006, cbModelParam._m0[10u].z, fma(_2005, cbModelParam._m0[10u].y, _2004 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2006, cbModelParam._m0[11u].z, fma(_2005, cbModelParam._m0[11u].y, _2004 * cbModelParam._m0[11u].x))), _1433);
            frontier_phi_18_40_ladder = _2151.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2151.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2151.x * cbModelParam._m0[1u].y;
        }
        _1514 = frontier_phi_18_40_ladder_2;
        _1516 = frontier_phi_18_40_ladder_1;
        _1518 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1502 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_588, _589, _590), _1433);
        _1514 = _1502.x * cbModelParam._m0[1u].y;
        _1516 = _1502.y * cbModelParam._m0[1u].y;
        _1518 = _1502.z * cbModelParam._m0[1u].y;
    }
    float _1522 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _400);
    float _1523 = isnan(_1522) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1522 : min(cbModelParam._m0[25u].w, _1522));
    float _1616;
    float _1618;
    float _1620;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1580 = fma(_652, cbModelParam._m0[21u].z, fma(_648, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _644)) + cbModelParam._m0[21u].w;
        float _1584 = fma(_652, cbModelParam._m0[22u].z, fma(_648, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _644)) + cbModelParam._m0[22u].w;
        float _1588 = fma(_652, cbModelParam._m0[23u].z, fma(_648, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _644)) + cbModelParam._m0[23u].w;
        float _1591 = fma(_590, cbModelParam._m0[21u].z, fma(_589, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _588));
        float _1594 = fma(_590, cbModelParam._m0[22u].z, fma(_589, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _588));
        float _1597 = fma(_590, cbModelParam._m0[23u].z, fma(_589, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _588));
        float _1706;
        if (_1591 > 0.0)
        {
            _1706 = abs((1.0 - _1580) / _1591);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1591 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1580 + 1.0) / _1591);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1706 = frontier_phi_30_26_ladder;
        }
        float _2024;
        if (_1594 > 0.0)
        {
            _2024 = abs((1.0 - _1584) / _1594);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1594 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1584 + 1.0) / _1594);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2024 = frontier_phi_42_37_ladder;
        }
        float _2362;
        if (_1597 > 0.0)
        {
            _2362 = abs((1.0 - _1588) / _1597);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1597 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1588 + 1.0) / _1597);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2362 = frontier_phi_52_49_ladder;
        }
        float _2364 = isnan(_2024) ? _1706 : (isnan(_1706) ? _2024 : min(_1706, _2024));
        float _2365 = isnan(_2362) ? _2364 : (isnan(_2364) ? _2362 : min(_2364, _2362));
        float _2369 = (_2365 * _1591) + _1580;
        float _2370 = (_2365 * _1594) + _1584;
        float _2371 = (_2365 * _1597) + _1588;
        float _2372 = _2365 * 9.9999997473787516355514526367188e-05;
        float _2373 = (-1.0) - _2372;
        float _2375 = _2372 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2371 > _2375) || ((_2371 < _2373) || ((_2370 > _2375) || ((_2370 < _2373) || ((_2369 < _2373) || (_2369 > _2375))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2493 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2371, cbModelParam._m0[17u].z, fma(_2370, cbModelParam._m0[17u].y, _2369 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2371, cbModelParam._m0[18u].z, fma(_2370, cbModelParam._m0[18u].y, _2369 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2371, cbModelParam._m0[19u].z, fma(_2370, cbModelParam._m0[19u].y, _2369 * cbModelParam._m0[19u].x))), _1523);
            frontier_phi_27_52_ladder = _2493.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2493.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2493.x * cbModelParam._m0[1u].z;
        }
        _1616 = frontier_phi_27_52_ladder_2;
        _1618 = frontier_phi_27_52_ladder_1;
        _1620 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1600 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_588, _589, _590), _1523);
        _1616 = _1600.x * cbModelParam._m0[1u].z;
        _1618 = _1600.y * cbModelParam._m0[1u].z;
        _1620 = _1600.z * cbModelParam._m0[1u].z;
    }
    float _1633 = (((_615 * _565) + _616) * _580) * ((cbModelParam._m0[1u].w * (_1616 - _1514)) + _1514);
    float _1635 = (((_615 * _567) + _616) * _580) * ((cbModelParam._m0[1u].w * (_1618 - _1516)) + _1516);
    float _1637 = (((_615 * _568) + _616) * _580) * ((cbModelParam._m0[1u].w * (_1620 - _1518)) + _1518);
    float _1640 = fma(_1637, cbSceneParam._m0[89u].z, fma(_1635, cbSceneParam._m0[89u].y, _1633 * cbSceneParam._m0[89u].x));
    float _1643 = fma(_1637, cbSceneParam._m0[90u].z, fma(_1635, cbSceneParam._m0[90u].y, _1633 * cbSceneParam._m0[90u].x));
    float _1646 = fma(_1637, cbSceneParam._m0[91u].z, fma(_1635, cbSceneParam._m0[91u].y, _1633 * cbSceneParam._m0[91u].x));
    float _1680 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1684 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1688 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1692 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1693 = _1680 / _1692;
    float _1694 = _1684 / _1692;
    float _1695 = _1688 / _1692;
    float _1842;
    float _1843;
    float _1844;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1722 = ((uint(_1695 > cbSceneParam._m0[59u].y) + uint(_1695 > cbSceneParam._m0[59u].x)) + uint(_1695 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1723 = _1722 + 43u;
        uint _1731 = _1722 + 44u;
        uint _1739 = _1722 + 45u;
        uint _1747 = _1722 + 46u;
        float _1758 = fma(_1692, cbSceneParam._m0[_1723].w, fma(_1688, cbSceneParam._m0[_1723].z, fma(_1684, cbSceneParam._m0[_1723].y, _1680 * cbSceneParam._m0[_1723].x)));
        float _1762 = fma(_1692, cbSceneParam._m0[_1731].w, fma(_1688, cbSceneParam._m0[_1731].z, fma(_1684, cbSceneParam._m0[_1731].y, _1680 * cbSceneParam._m0[_1731].x)));
        float _1770 = fma(_1692, cbSceneParam._m0[_1747].w, fma(_1688, cbSceneParam._m0[_1747].z, fma(_1684, cbSceneParam._m0[_1747].y, _1680 * cbSceneParam._m0[_1747].x)));
        float _1775 = cbSceneParam._m0[33u].z * _1770;
        float _1777 = cbSceneParam._m0[33u].w * _1770;
        float _1780 = fma(_1692, cbSceneParam._m0[_1739].w, fma(_1688, cbSceneParam._m0[_1739].z, fma(_1684, cbSceneParam._m0[_1739].y, _1680 * cbSceneParam._m0[_1739].x))) / _1770;
        float _1828 = (cbSceneParam._m0[33u].x - sqrt(((_1694 * _1694) + (_1693 * _1693)) + (_1695 * _1695))) * cbSceneParam._m0[33u].y;
        float _4180 = isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0));
        float _1835 = (isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1775 + _1758) / _1770, (_1777 + _1762) / _1770), _1780), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1777 + _1758) / _1770, (_1762 - _1775) / _1770), _1780), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1758 - _1775) / _1770, (_1762 - _1777) / _1770), _1780), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1758 - _1777) / _1770, (_1775 + _1762) / _1770), _1780), 0.0)).x), vec4(0.25)));
        _1842 = 1.0 - (_1835 * cbSceneParam._m0[34u].x);
        _1843 = 1.0 - (_1835 * cbSceneParam._m0[34u].y);
        _1844 = 1.0 - (_1835 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1842 = 1.0;
        _1843 = 1.0;
        _1844 = 1.0;
    }
    float _1908;
    float _1910;
    float _1912;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1896 = fma(_1692, cbSceneParam._m0[63u].w, fma(_1688, cbSceneParam._m0[63u].z, fma(_1684, cbSceneParam._m0[63u].y, _1680 * cbSceneParam._m0[63u].x)));
        float _1897 = fma(_1692, cbSceneParam._m0[60u].w, fma(_1688, cbSceneParam._m0[60u].z, fma(_1684, cbSceneParam._m0[60u].y, _1680 * cbSceneParam._m0[60u].x))) / _1896;
        float _1898 = fma(_1692, cbSceneParam._m0[61u].w, fma(_1688, cbSceneParam._m0[61u].z, fma(_1684, cbSceneParam._m0[61u].y, _1680 * cbSceneParam._m0[61u].x))) / _1896;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1897 >= cbSceneParam._m0[64u].x) && (_1898 >= cbSceneParam._m0[64u].y)) && (_1897 <= cbSceneParam._m0[64u].z)) && (_1898 <= cbSceneParam._m0[64u].w))
        {
            float _2037 = fma(_1692, cbSceneParam._m0[62u].w, fma(_1688, cbSceneParam._m0[62u].z, fma(_1684, cbSceneParam._m0[62u].y, _1680 * cbSceneParam._m0[62u].x))) / _1896;
            float _2041 = isnan(cbSceneParam._m0[41u].w) ? _2037 : (isnan(_2037) ? cbSceneParam._m0[41u].w : max(_2037, cbSceneParam._m0[41u].w));
            float _2084 = (cbSceneParam._m0[33u].x - sqrt(((_1694 * _1694) + (_1693 * _1693)) + (_1695 * _1695))) * cbSceneParam._m0[33u].y;
            float _4196 = isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0));
            float _2091 = (isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1897, cbSceneParam._m0[33u].w + _1898), _2041), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1897, _1898 - cbSceneParam._m0[33u].z), _2041), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1897 - cbSceneParam._m0[33u].z, _1898 - cbSceneParam._m0[33u].w), _2041), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1897 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1898), _2041), 0.0)).x), vec4(0.25)));
            float _2095 = 1.0 - (_2091 * cbSceneParam._m0[34u].x);
            float _2096 = 1.0 - (_2091 * cbSceneParam._m0[34u].y);
            float _2097 = 1.0 - (_2091 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2096) ? _1843 : (isnan(_1843) ? _2096 : min(_1843, _2096));
            frontier_phi_39_38_ladder_1 = isnan(_2095) ? _1842 : (isnan(_1842) ? _2095 : min(_1842, _2095));
            frontier_phi_39_38_ladder_2 = isnan(_2097) ? _1844 : (isnan(_1844) ? _2097 : min(_1844, _2097));
        }
        else
        {
            frontier_phi_39_38_ladder = _1843;
            frontier_phi_39_38_ladder_1 = _1842;
            frontier_phi_39_38_ladder_2 = _1844;
        }
        _1908 = frontier_phi_39_38_ladder_1;
        _1910 = frontier_phi_39_38_ladder;
        _1912 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _1908 = _1842;
        _1910 = _1843;
        _1912 = _1844;
    }
    uvec4 _1917 = floatBitsToUint(cbInstanceData._m0[_540 + 5u]);
    uint _1919 = _1917.x * 14u;
    uint _1920 = _1919 + 13u;
    float _1927 = _580 + (-1.0);
    float _1932 = (cbLight._m0[_1920].x * _1927) + 1.0;
    float _1933 = (cbLight._m0[_1920].y * _1927) + 1.0;
    float _1934 = (cbLight._m0[_1920].z * _1927) + 1.0;
    float _1935 = (cbLight._m0[_1920].w * _1927) + 1.0;
    uint _1936 = _1919 + 5u;
    float _1942 = isnan(1.0) ? _1933 : (isnan(_1933) ? 1.0 : min(_1933, 1.0));
    uint _1946 = _1919 + 4u;
    float _1956 = isnan(1.0) ? _1932 : (isnan(_1932) ? 1.0 : min(_1932, 1.0));
    uint _1960 = _1919 | 1u;
    float _1971 = dot(vec3(cbLight._m0[_1919].xyz), vec3(_397, _398, _399));
    float _1974 = dot(vec3(cbLight._m0[_1960].xyz), vec3(_397, _398, _399));
    float _4232 = isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0));
    float _4243 = isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0));
    float _1979 = (isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0))) * 0.3183098733425140380859375;
    float _1981 = (isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0))) * 0.3183098733425140380859375;
    float _1988 = ((cbLight._m0[_1936].x * _1942) * _1981) + (((cbLight._m0[_1946].x * _1908) * _1956) * _1979);
    float _1989 = ((_1942 * cbLight._m0[_1936].y) * _1981) + (((cbLight._m0[_1946].y * _1910) * _1956) * _1979);
    float _1990 = ((_1942 * cbLight._m0[_1936].z) * _1981) + (((cbLight._m0[_1946].z * _1912) * _1956) * _1979);
    uvec4 _1994 = floatBitsToUint(cbLight._m0[_1919 + 12u]);
    bool _1996 = _1994.x == 0u;
    float _2098;
    float _2100;
    float _2102;
    if (_1996)
    {
        _2098 = _1988;
        _2100 = _1989;
        _2102 = _1990;
    }
    else
    {
        uint _2106 = _1919 + 6u;
        float _2122 = (dot(vec3(cbLight._m0[_1919 + 2u].xyz), vec3(_397, _398, _399)) * 0.5) + 0.5;
        float _2123 = _2122 * _2122;
        float _4254 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
        float _2124 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
        float _2125 = isnan(1.0) ? _1934 : (isnan(_1934) ? 1.0 : min(_1934, 1.0));
        _2098 = (((cbLight._m0[_2106].x * 0.3183098733425140380859375) * _2124) * _2125) + _1988;
        _2100 = (((cbLight._m0[_2106].y * 0.3183098733425140380859375) * _2124) * _2125) + _1989;
        _2102 = (((cbLight._m0[_2106].z * 0.3183098733425140380859375) * _2124) * _2125) + _1990;
    }
    bool _2105 = _1994.y == 0u;
    float _2160;
    float _2162;
    float _2164;
    if (_2105)
    {
        _2160 = _2098;
        _2162 = _2100;
        _2164 = _2102;
    }
    else
    {
        uint _2333 = _1919 + 7u;
        float _2349 = (dot(vec3(cbLight._m0[_1919 + 3u].xyz), vec3(_397, _398, _399)) * 0.5) + 0.5;
        float _2350 = _2349 * _2349;
        float _4270 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
        float _2351 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
        float _2352 = isnan(1.0) ? _1935 : (isnan(_1935) ? 1.0 : min(_1935, 1.0));
        _2160 = (((cbLight._m0[_2333].x * 0.3183098733425140380859375) * _2351) * _2352) + _2098;
        _2162 = (((cbLight._m0[_2333].y * 0.3183098733425140380859375) * _2351) * _2352) + _2100;
        _2164 = (((cbLight._m0[_2333].z * 0.3183098733425140380859375) * _2351) * _2352) + _2102;
    }
    uint _2167 = _1919 + 8u;
    float _2180 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1919].w)) * _400) * 0.949999988079071044921875);
    float _2181 = _2180 * _2180;
    float _2182 = cbLight._m0[_1919].x + _479;
    float _2183 = cbLight._m0[_1919].y + _480;
    float _2184 = cbLight._m0[_1919].z + _481;
    float _2188 = inversesqrt(dot(vec3(_2182, _2183, _2184), vec3(_2182, _2183, _2184)));
    float _2189 = _2188 * _2182;
    float _2190 = _2188 * _2183;
    float _2191 = _2188 * _2184;
    float _2192 = dot(vec3(_397, _398, _399), vec3(cbLight._m0[_1919].xyz));
    float _4286 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
    float _2195 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
    float _4297 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _2196 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
    float _2197 = dot(vec3(_397, _398, _399), vec3(_2189, _2190, _2191));
    float _4308 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
    float _2200 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
    float _2201 = dot(vec3(cbLight._m0[_1919].xyz), vec3(_2189, _2190, _2191));
    float _4319 = isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0));
    float _2205 = _2181 * _2181;
    float _2209 = ((_2200 * _2200) * (_2205 + (-1.0))) + 1.0;
    float _2217 = exp2(log2(1.0 - (isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0)))) * 5.0);
    float _2218 = 0.959999978542327880859375 - _562;
    float _2220 = 0.959999978542327880859375 - _563;
    float _2221 = 0.959999978542327880859375 - _564;
    float _2228 = 1.0 - _2181;
    float _2239 = (0.5 / (((_2196 * ((_2195 * _2228) + _2181)) + 9.9999999392252902907785028219223e-09) + (((_2196 * _2228) + _2181) * _2195))) * _2195;
    float _4330 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
    float _2241 = (isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0))) * (_2205 / ((_2209 * _2209) * 3.141590118408203125));
    uint _2255 = _1919 + 9u;
    float _2266 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1960].w)) * _400) * 0.949999988079071044921875);
    float _2267 = _2266 * _2266;
    float _2268 = cbLight._m0[_1960].x + _479;
    float _2269 = cbLight._m0[_1960].y + _480;
    float _2270 = cbLight._m0[_1960].z + _481;
    float _2274 = inversesqrt(dot(vec3(_2268, _2269, _2270), vec3(_2268, _2269, _2270)));
    float _2275 = _2274 * _2268;
    float _2276 = _2274 * _2269;
    float _2277 = _2274 * _2270;
    float _2278 = dot(vec3(_397, _398, _399), vec3(cbLight._m0[_1960].xyz));
    float _4341 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
    float _2281 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
    float _2282 = dot(vec3(_397, _398, _399), vec3(_2275, _2276, _2277));
    float _4352 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
    float _2285 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
    float _2286 = dot(vec3(cbLight._m0[_1960].xyz), vec3(_2275, _2276, _2277));
    float _4363 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
    float _2290 = _2267 * _2267;
    float _2294 = ((_2285 * _2285) * (_2290 + (-1.0))) + 1.0;
    float _2301 = exp2(log2(1.0 - (isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0)))) * 5.0);
    float _2308 = 1.0 - _2267;
    float _2318 = (0.5 / (((_2196 * ((_2281 * _2308) + _2267)) + 9.9999999392252902907785028219223e-09) + (((_2196 * _2308) + _2267) * _2281))) * _2281;
    float _4374 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
    float _2320 = (isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0))) * (_2290 / ((_2294 * _2294) * 3.141590118408203125));
    float _2330 = (((((_2301 * _2218) + _565) * cbLight._m0[_2255].x) * _2320) * _1942) + ((((cbLight._m0[_2167].x * _1908) * ((_2217 * _2218) + _565)) * _2241) * _1956);
    float _2331 = (((((_2301 * _2220) + _567) * cbLight._m0[_2255].y) * _2320) * _1942) + ((((cbLight._m0[_2167].y * _1910) * ((_2217 * _2220) + _567)) * _2241) * _1956);
    float _2332 = (((((_2301 * _2221) + _568) * cbLight._m0[_2255].z) * _2320) * _1942) + ((((cbLight._m0[_2167].z * _1912) * ((_2217 * _2221) + _568)) * _2241) * _1956);
    float _2388;
    float _2390;
    float _2392;
    if (_1996)
    {
        _2388 = _2330;
        _2390 = _2331;
        _2392 = _2332;
    }
    else
    {
        uint _2394 = _1919 + 2u;
        uint _2398 = _1919 + 10u;
        float _2412 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2394].w)) * _400) * 0.949999988079071044921875);
        float _2413 = _2412 * _2412;
        float _2414 = cbLight._m0[_2394].x + _479;
        float _2415 = cbLight._m0[_2394].y + _480;
        float _2416 = cbLight._m0[_2394].z + _481;
        float _2420 = inversesqrt(dot(vec3(_2414, _2415, _2416), vec3(_2414, _2415, _2416)));
        float _2421 = _2420 * _2414;
        float _2422 = _2420 * _2415;
        float _2423 = _2420 * _2416;
        float _2424 = dot(vec3(_397, _398, _399), vec3(cbLight._m0[_2394].xyz));
        float _4385 = isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0));
        float _2427 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
        float _2428 = dot(vec3(_397, _398, _399), vec3(_2421, _2422, _2423));
        float _4396 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
        float _2431 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
        float _2432 = dot(vec3(cbLight._m0[_2394].xyz), vec3(_2421, _2422, _2423));
        float _4407 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
        float _2436 = _2413 * _2413;
        float _2440 = ((_2431 * _2431) * (_2436 + (-1.0))) + 1.0;
        float _2447 = exp2(log2(1.0 - (isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0)))) * 5.0);
        float _2454 = 1.0 - _2413;
        float _2464 = (0.5 / (((_2196 * ((_2427 * _2454) + _2413)) + 9.9999999392252902907785028219223e-09) + (((_2196 * _2454) + _2413) * _2427))) * _2427;
        float _4418 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
        float _2466 = (isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0))) * (_2436 / ((_2440 * _2440) * 3.141590118408203125));
        float _2467 = isnan(1.0) ? _1934 : (isnan(_1934) ? 1.0 : min(_1934, 1.0));
        _2388 = (((((_2447 * _2218) + _565) * cbLight._m0[_2398].x) * _2466) * _2467) + _2330;
        _2390 = (((((_2447 * _2220) + _567) * cbLight._m0[_2398].y) * _2466) * _2467) + _2331;
        _2392 = (((((_2447 * _2221) + _568) * cbLight._m0[_2398].z) * _2466) * _2467) + _2332;
    }
    float _2498;
    float _2500;
    float _2502;
    if (_2105)
    {
        _2498 = _2388;
        _2500 = _2390;
        _2502 = _2392;
    }
    else
    {
        uint _2509 = _1919 + 3u;
        uint _2513 = _1919 + 11u;
        float _2527 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2509].w)) * _400) * 0.949999988079071044921875);
        float _2528 = _2527 * _2527;
        float _2529 = cbLight._m0[_2509].x + _479;
        float _2530 = cbLight._m0[_2509].y + _480;
        float _2531 = cbLight._m0[_2509].z + _481;
        float _2535 = inversesqrt(dot(vec3(_2529, _2530, _2531), vec3(_2529, _2530, _2531)));
        float _2536 = _2535 * _2529;
        float _2537 = _2535 * _2530;
        float _2538 = _2535 * _2531;
        float _2539 = dot(vec3(_397, _398, _399), vec3(cbLight._m0[_2509].xyz));
        float _4434 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0));
        float _2542 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
        float _2543 = dot(vec3(_397, _398, _399), vec3(_2536, _2537, _2538));
        float _4445 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
        float _2546 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
        float _2547 = dot(vec3(cbLight._m0[_2509].xyz), vec3(_2536, _2537, _2538));
        float _4456 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
        float _2551 = _2528 * _2528;
        float _2555 = ((_2546 * _2546) * (_2551 + (-1.0))) + 1.0;
        float _2562 = exp2(log2(1.0 - (isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0)))) * 5.0);
        float _2569 = 1.0 - _2528;
        float _2579 = (0.5 / (((_2196 * ((_2542 * _2569) + _2528)) + 9.9999999392252902907785028219223e-09) + (((_2196 * _2569) + _2528) * _2542))) * _2542;
        float _4467 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
        float _2581 = (isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0))) * (_2551 / ((_2555 * _2555) * 3.141590118408203125));
        float _2582 = isnan(1.0) ? _1935 : (isnan(_1935) ? 1.0 : min(_1935, 1.0));
        _2498 = (((((_2562 * _2218) + _565) * cbLight._m0[_2513].x) * _2581) * _2582) + _2388;
        _2500 = (((((_2562 * _2220) + _567) * cbLight._m0[_2513].y) * _2581) * _2582) + _2390;
        _2502 = (((((_2562 * _2221) + _568) * cbLight._m0[_2513].z) * _2581) * _2582) + _2392;
    }
    float _2647;
    float _2649;
    float _2651;
    float _2653;
    float _2655;
    float _2657;
    if (_1917.y == 0u)
    {
        uvec4 _2603 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2604 = _2603.x;
        uint _2615 = uint((float(_2603.y) * floor(float(uint(cbSceneParam._m0[85u].y * _501) / _2604))) + floor(float(uint(cbSceneParam._m0[85u].x * _500) / _2604)));
        float _2625 = (log2(_1695 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2626 = isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : max(_2625, 0.0));
        uint _2629 = uint(isnan(14.0) ? _2626 : (isnan(_2626) ? 14.0 : min(_2626, 14.0)));
        uvec4 _2634 = texelFetch(g_lightClusterGridBuffer, int(((_2629 << 2u) + (_2615 << 6u)) >> 2u));
        uint _2635 = _2634.x;
        uint _2636 = _2603.z;
        float _2714;
        float _2716;
        float _2718;
        float _2720;
        float _2722;
        float _2724;
        if (((((1u << ((_2636 >> 4u) & 15u)) + 4294967295u) & _2635) == 0u) || ((_2636 & 240u) == 0u))
        {
            _2714 = 0.0;
            _2716 = 0.0;
            _2718 = 0.0;
            _2720 = 0.0;
            _2722 = 0.0;
            _2724 = 0.0;
        }
        else
        {
            float _2715;
            float _2717;
            float _2719;
            float _2721;
            float _2723;
            float _2725;
            float _2866 = 0.0;
            float _2867 = 0.0;
            float _2868 = 0.0;
            float _2869 = 0.0;
            float _2870 = 0.0;
            float _2871 = 0.0;
            uint _2872 = 0u;
            uint _2881;
            bool _2882;
            for (;;)
            {
                _2881 = texelFetch(g_lightClassification, int((((_2629 << 5u) + (_2615 << 9u)) + (_2872 << 2u)) >> 2u)).x;
                _2882 = _2881 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_2882)
                {
                    frontier_phi_73_pred = _2871;
                    frontier_phi_73_pred_1 = _2870;
                    frontier_phi_73_pred_2 = _2869;
                    frontier_phi_73_pred_3 = _2868;
                    frontier_phi_73_pred_4 = _2867;
                    frontier_phi_73_pred_5 = _2866;
                }
                else
                {
                    float _3011;
                    float _3012;
                    float _3013;
                    float _3014;
                    float _3015;
                    float _3016;
                    uint _3017;
                    _3011 = _2866;
                    _3012 = _2867;
                    _3013 = _2868;
                    _3014 = _2869;
                    _3015 = _2870;
                    _3016 = _2871;
                    _3017 = _2881;
                    float _2938;
                    float _2939;
                    float _2940;
                    float _2941;
                    float _2942;
                    float _2943;
                    for (;;)
                    {
                        uint _3021 = uint(findLSB(_3017)) + (_2872 << 5u);
                        uint _3018 = (_3017 + 4294967295u) & _3017;
                        uint _3023 = _3021 * 48u;
                        vec4 _3037 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3023)).x, texelFetch(g_PointLightRenderingBuffer, int(_3023 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3023 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3023 + 3u)).x));
                        uint _3043 = (_3021 * 48u) + 4u;
                        vec4 _3056 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3043)).x, texelFetch(g_PointLightRenderingBuffer, int(_3043 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3043 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3043 + 3u)).x));
                        uint _3062 = (_3021 * 48u) + 8u;
                        vec3 _3073 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3062)).x, texelFetch(g_PointLightRenderingBuffer, int(_3062 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3062 + 2u)).x));
                        float _3077 = _3037.x - _1693;
                        float _3078 = _3037.y - _1694;
                        float _3079 = _3037.z - _1695;
                        float _3080 = dot(vec3(_3077, _3078, _3079), vec3(_3077, _3078, _3079));
                        float _3083 = inversesqrt(_3080);
                        float _3084 = _3083 * _3077;
                        float _3085 = _3083 * _3078;
                        float _3086 = _3083 * _3079;
                        float _3087 = dot(vec3(_521, _524, _527), vec3(_3084, _3085, _3086));
                        float _3092 = 1.0 - (_3080 * _3037.w);
                        float _4493 = isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : max(_3092, 0.0));
                        float _3093 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
                        float _3094 = sqrt(_3080) * _3056.w;
                        float _3097 = 1.39999997615814208984375 / (_3094 + 1.39999997615814208984375);
                        float _3098 = _3097 * _3097;
                        float _3101 = ((1.0 - _3098) * _3087) + _3098;
                        float _3104 = _3094 * _3094;
                        float _3108 = ((isnan(0.0) ? _3101 : (isnan(_3101) ? 0.0 : max(_3101, 0.0))) * _3093) / ((_3104 * 0.699999988079071044921875) + 1.0);
                        float _3112 = (-0.0) - _1693;
                        float _3113 = (-0.0) - _1694;
                        float _3114 = (-0.0) - _1695;
                        float _3118 = inversesqrt(dot(vec3(_3112, _3113, _3114), vec3(_3112, _3113, _3114)));
                        float _3119 = _3118 * _3112;
                        float _3120 = _3118 * _3113;
                        float _3121 = _3118 * _3114;
                        float _3128 = exp2(log2(1.0 / ((_3104 * 3.5) + 5.0)) * 0.25);
                        float _3129 = 1.0 - _596;
                        float _3136 = sqrt(1.0 - ((1.0 - (_3129 * _3129)) * (1.0 - (_3128 * _3128))));
                        float _3137 = _3136 * _3136;
                        float _3138 = _3137 * _3137;
                        float _3139 = _3119 + _3084;
                        float _3140 = _3120 + _3085;
                        float _3141 = _3121 + _3086;
                        float _3145 = inversesqrt(dot(vec3(_3139, _3140, _3141), vec3(_3139, _3140, _3141)));
                        float _3149 = dot(vec3(_521, _524, _527), vec3(_3119, _3120, _3121));
                        float _4509 = isnan(0.0) ? _3149 : (isnan(_3149) ? 0.0 : max(_3149, 0.0));
                        float _3152 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
                        float _3153 = dot(vec3(_521, _524, _527), vec3(_3145 * _3139, _3145 * _3140, _3145 * _3141));
                        float _4520 = isnan(0.0) ? _3153 : (isnan(_3153) ? 0.0 : max(_3153, 0.0));
                        float _3156 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
                        float _3160 = ((_3156 * _3156) * (_3138 + (-1.0))) + 1.0;
                        float _3161 = _3097 * _3137;
                        float _3162 = _3161 * _3161;
                        float _3165 = ((1.0 - _3162) * _3087) + _3162;
                        float _4531 = isnan(0.0) ? _3165 : (isnan(_3165) ? 0.0 : max(_3165, 0.0));
                        float _3166 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
                        float _3167 = 1.0 - _3137;
                        float _3177 = (0.5 / (((_3166 * ((_3152 * _3167) + _3137)) + 9.9999999392252902907785028219223e-09) + (((_3166 * _3167) + _3137) * _3152))) * _3166;
                        float _4542 = isnan(0.0) ? _3177 : (isnan(_3177) ? 0.0 : max(_3177, 0.0));
                        float _3188 = (((_3138 * 3.1415927410125732421875) * (isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0)))) / ((_3160 * _3160) * ((_3104 * 2.1991131305694580078125) + 3.141590118408203125))) * _3093;
                        _2941 = (_3108 * _3056.x) + _3014;
                        _2942 = (_3108 * _3056.y) + _3015;
                        _2943 = (_3108 * _3056.z) + _3016;
                        _2938 = (_3188 * _3073.x) + _3011;
                        _2939 = (_3188 * _3073.y) + _3012;
                        _2940 = (_3188 * _3073.z) + _3013;
                        if (_3018 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3011 = _2938;
                            _3012 = _2939;
                            _3013 = _2940;
                            _3014 = _2941;
                            _3015 = _2942;
                            _3016 = _2943;
                            _3017 = _3018;
                        }
                    }
                    frontier_phi_73_pred = _2943;
                    frontier_phi_73_pred_1 = _2942;
                    frontier_phi_73_pred_2 = _2941;
                    frontier_phi_73_pred_3 = _2940;
                    frontier_phi_73_pred_4 = _2939;
                    frontier_phi_73_pred_5 = _2938;
                }
                _2725 = frontier_phi_73_pred;
                _2723 = frontier_phi_73_pred_1;
                _2721 = frontier_phi_73_pred_2;
                _2719 = frontier_phi_73_pred_3;
                _2717 = frontier_phi_73_pred_4;
                _2715 = frontier_phi_73_pred_5;
                uint _2873 = _2872 + 1u;
                if (_2873 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2866 = _2715;
                    _2867 = _2717;
                    _2868 = _2719;
                    _2869 = _2721;
                    _2870 = _2723;
                    _2871 = _2725;
                    _2872 = _2873;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2714 = _2715;
            _2716 = _2717;
            _2718 = _2719;
            _2720 = _2721;
            _2722 = _2723;
            _2724 = _2725;
        }
        uvec4 _2728 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2729 = _2728.z;
        uint _2731 = (_2729 >> 8u) & 15u;
        float _2834;
        float _2836;
        float _2838;
        float _2840;
        float _2842;
        float _2844;
        if (((4294967295u << _2731) & _2635) == 0u)
        {
            _2834 = _2714;
            _2836 = _2716;
            _2838 = _2718;
            _2840 = _2720;
            _2842 = _2722;
            _2844 = _2724;
        }
        else
        {
            float _2859 = inversesqrt(dot(vec3(_1693, _1694, _1695), vec3(_1693, _1694, _1695)));
            float _2860 = _2859 * _1693;
            float _2861 = _2859 * _1694;
            float _2862 = _2859 * _1695;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2731 < ((_2729 >> 12u) & 15u))
            {
                float _2835;
                float _2837;
                float _2839;
                float _2841;
                float _2843;
                float _2845;
                float _2994 = _2714;
                float _2995 = _2716;
                float _2996 = _2718;
                float _2997 = _2720;
                float _2998 = _2722;
                float _2999 = _2724;
                uint _3000 = _2731;
                uint _3009;
                bool _3010;
                for (;;)
                {
                    _3009 = texelFetch(g_lightClassification, int((((_2629 << 5u) + (_2615 << 9u)) + (_3000 << 2u)) >> 2u)).x;
                    _3010 = _3009 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3010)
                    {
                        frontier_phi_84_pred = _2998;
                        frontier_phi_84_pred_1 = _2997;
                        frontier_phi_84_pred_2 = _2996;
                        frontier_phi_84_pred_3 = _2995;
                        frontier_phi_84_pred_4 = _2994;
                        frontier_phi_84_pred_5 = _2999;
                    }
                    else
                    {
                        float _3202;
                        float _3203;
                        float _3204;
                        float _3205;
                        float _3206;
                        float _3207;
                        float _3498;
                        float _3499;
                        float _3500;
                        float _3501;
                        float _3502;
                        float _3503;
                        float _3215 = _2994;
                        float _3216 = _2995;
                        float _3217 = _2996;
                        float _3218 = _2997;
                        float _3219 = _2998;
                        float _3220 = _2999;
                        uint _3221 = _3009;
                        uint _3222;
                        vec4 _3247;
                        float _3248;
                        vec4 _3263;
                        vec3 _3275;
                        vec4 _3291;
                        vec4 _3307;
                        float _3354;
                        bool _3355;
                        for (;;)
                        {
                            uint _3232 = ((_3000 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3221));
                            _3222 = (_3221 + 4294967295u) & _3221;
                            uint _3234 = _3232 * 40u;
                            _3247 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3234)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 3u)).x));
                            _3248 = _3247.w;
                            uint _3250 = (_3232 * 40u) + 4u;
                            _3263 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3250)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 3u)).x));
                            uint _3265 = (_3232 * 40u) + 8u;
                            _3275 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3265)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 2u)).x));
                            uint _3278 = (_3232 * 40u) + 16u;
                            _3291 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3278)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 3u)).x));
                            uint _3294 = (_3232 * 40u) + 20u;
                            _3307 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3294)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 3u)).x));
                            uint _3310 = (_3232 * 40u) + 24u;
                            vec4 _3323 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3310)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 3u)).x));
                            uint _3329 = (_3232 * 40u) + 28u;
                            vec4 _3342 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3329)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3329 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3329 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3329 + 3u)).x));
                            _3354 = fma(_1695, _3342.z, fma(_1694, _3342.y, _3342.x * _1693)) + _3342.w;
                            _3355 = !((fma(_1695, _3323.z, fma(_1694, _3323.y, _3323.x * _1693)) + _3323.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3355)
                            {
                                float _3382 = _3247.x - _1693;
                                float _3383 = _3247.y - _1694;
                                float _3384 = _3247.z - _1695;
                                float _3385 = dot(vec3(_3382, _3383, _3384), vec3(_3382, _3383, _3384));
                                float _3388 = inversesqrt(_3385);
                                float _3389 = _3388 * _3382;
                                float _3390 = _3388 * _3383;
                                float _3391 = _3388 * _3384;
                                float _3395 = 1.0 - (_3385 / (_3248 * _3248));
                                float _4553 = isnan(0.0) ? _3395 : (isnan(_3395) ? 0.0 : max(_3395, 0.0));
                                float _3396 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
                                float _3400 = sqrt(_3385) * _3263.w;
                                float _3402 = 1.39999997615814208984375 / (_3400 + 1.39999997615814208984375);
                                float _3403 = _3402 * _3402;
                                float _3406 = ((1.0 - _3403) * dot(vec3(_3389, _3390, _3391), vec3(_521, _524, _527))) + _3403;
                                float _3409 = _3400 * _3400;
                                float _3413 = (fma(_1695, _3291.z, fma(_1694, _3291.y, _3291.x * _1693)) + _3291.w) / _3354;
                                float _3414 = (fma(_1695, _3307.z, fma(_1694, _3307.y, _3307.x * _1693)) + _3307.w) / _3354;
                                float _3418 = 1.0 - dot(vec2(_3413, _3414), vec2(_3413, _3414));
                                float _4569 = isnan(0.0) ? _3418 : (isnan(_3418) ? 0.0 : max(_3418, 0.0));
                                float _3419 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
                                float _3420 = _3419 * (((isnan(0.0) ? _3406 : (isnan(_3406) ? 0.0 : max(_3406, 0.0))) * _3396) / ((_3409 * 0.699999988079071044921875) + 1.0));
                                float _3432 = exp2(log2(1.0 / ((_3409 * 3.5) + 5.0)) * 0.25);
                                float _3433 = 1.0 - _596;
                                float _3440 = sqrt(1.0 - ((1.0 - (_3433 * _3433)) * (1.0 - (_3432 * _3432))));
                                float _3441 = _3440 * _3440;
                                float _3442 = _3441 * _3441;
                                float _3443 = _3389 - _2860;
                                float _3444 = _3390 - _2861;
                                float _3445 = _3391 - _2862;
                                float _3449 = inversesqrt(dot(vec3(_3443, _3444, _3445), vec3(_3443, _3444, _3445)));
                                float _3453 = dot(vec3(_521, _524, _527), vec3((-0.0) - _2860, (-0.0) - _2861, (-0.0) - _2862));
                                float _4580 = isnan(0.0) ? _3453 : (isnan(_3453) ? 0.0 : max(_3453, 0.0));
                                float _3456 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
                                float _3457 = dot(vec3(_521, _524, _527), vec3(_3449 * _3443, _3449 * _3444, _3449 * _3445));
                                float _4591 = isnan(0.0) ? _3457 : (isnan(_3457) ? 0.0 : max(_3457, 0.0));
                                float _3460 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
                                float _3464 = ((_3460 * _3460) * (_3442 + (-1.0))) + 1.0;
                                float _3465 = _3402 * _3441;
                                float _3466 = _3465 * _3465;
                                float _3472 = ((1.0 - _3466) * dot(vec3(_521, _524, _527), vec3(_3389, _3390, _3391))) + _3466;
                                float _4602 = isnan(0.0) ? _3472 : (isnan(_3472) ? 0.0 : max(_3472, 0.0));
                                float _3473 = isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0));
                                float _3474 = 1.0 - _3441;
                                float _3484 = (0.5 / (((_3473 * ((_3456 * _3474) + _3441)) + 9.9999999392252902907785028219223e-09) + (((_3473 * _3474) + _3441) * _3456))) * _3473;
                                float _4613 = isnan(0.0) ? _3484 : (isnan(_3484) ? 0.0 : max(_3484, 0.0));
                                float _3494 = (_3419 * _3396) * (((_3442 * 3.1415927410125732421875) * (isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0)))) / ((_3464 * _3464) * ((_3409 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3420 * _3263.y;
                                frontier_phi_90_pred_1 = _3420 * _3263.x;
                                frontier_phi_90_pred_2 = _3494 * _3275.z;
                                frontier_phi_90_pred_3 = _3494 * _3275.y;
                                frontier_phi_90_pred_4 = _3494 * _3275.x;
                                frontier_phi_90_pred_5 = _3420 * _3263.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3502 = frontier_phi_90_pred;
                            _3501 = frontier_phi_90_pred_1;
                            _3500 = frontier_phi_90_pred_2;
                            _3499 = frontier_phi_90_pred_3;
                            _3498 = frontier_phi_90_pred_4;
                            _3503 = frontier_phi_90_pred_5;
                            _3205 = _3501 + _3218;
                            _3206 = _3502 + _3219;
                            _3207 = _3503 + _3220;
                            _3202 = _3498 + _3215;
                            _3203 = _3499 + _3216;
                            _3204 = _3500 + _3217;
                            if (_3222 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3215 = _3202;
                                _3216 = _3203;
                                _3217 = _3204;
                                _3218 = _3205;
                                _3219 = _3206;
                                _3220 = _3207;
                                _3221 = _3222;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3206;
                        frontier_phi_84_pred_1 = _3205;
                        frontier_phi_84_pred_2 = _3204;
                        frontier_phi_84_pred_3 = _3203;
                        frontier_phi_84_pred_4 = _3202;
                        frontier_phi_84_pred_5 = _3207;
                    }
                    _2843 = frontier_phi_84_pred;
                    _2841 = frontier_phi_84_pred_1;
                    _2839 = frontier_phi_84_pred_2;
                    _2837 = frontier_phi_84_pred_3;
                    _2835 = frontier_phi_84_pred_4;
                    _2845 = frontier_phi_84_pred_5;
                    uint _3001 = _3000 + 1u;
                    if (_3001 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2994 = _2835;
                        _2995 = _2837;
                        _2996 = _2839;
                        _2997 = _2841;
                        _2998 = _2843;
                        _2999 = _2845;
                        _3000 = _3001;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2845;
                frontier_phi_65_66_ladder_1 = _2841;
                frontier_phi_65_66_ladder_2 = _2843;
                frontier_phi_65_66_ladder_3 = _2837;
                frontier_phi_65_66_ladder_4 = _2835;
                frontier_phi_65_66_ladder_5 = _2839;
            }
            else
            {
                frontier_phi_65_66_ladder = _2724;
                frontier_phi_65_66_ladder_1 = _2720;
                frontier_phi_65_66_ladder_2 = _2722;
                frontier_phi_65_66_ladder_3 = _2716;
                frontier_phi_65_66_ladder_4 = _2714;
                frontier_phi_65_66_ladder_5 = _2718;
            }
            _2834 = frontier_phi_65_66_ladder_4;
            _2836 = frontier_phi_65_66_ladder_3;
            _2838 = frontier_phi_65_66_ladder_5;
            _2840 = frontier_phi_65_66_ladder_1;
            _2842 = frontier_phi_65_66_ladder_2;
            _2844 = frontier_phi_65_66_ladder;
        }
        float _2849 = isnan(1.0) ? _580 : (isnan(_580) ? 1.0 : min(_580, 1.0));
        _2647 = (_2849 * _2840) + _2160;
        _2649 = (_2849 * _2842) + _2162;
        _2651 = (_2849 * _2844) + _2164;
        _2653 = ((_2834 * _565) * _2849) + _2498;
        _2655 = ((_2836 * _567) * _2849) + _2500;
        _2657 = ((_2838 * _568) * _2849) + _2502;
    }
    else
    {
        _2647 = _2160;
        _2649 = _2162;
        _2651 = _2164;
        _2653 = _2498;
        _2655 = _2500;
        _2657 = _2502;
    }
    float _4629 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
    float _4640 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _4651 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _2674 = ((isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0))) * (_2647 + ((isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0))) * _580))) + ((_2653 + ((isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0))) * _1422)) * cbPerFrame._m0[3u].x);
    float _2675 = ((isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0))) * (_2649 + ((isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0))) * _580))) + ((_2655 + ((isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0))) * _1422)) * cbPerFrame._m0[3u].x);
    float _2676 = ((isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0))) * (_2651 + ((isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0))) * _580))) + ((_2657 + ((isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0))) * _1422)) * cbPerFrame._m0[3u].x);
    uint _2677 = _540 + 6u;
    float _2685 = _500 / cbSceneParam._m0[86u].x;
    float _2686 = _501 / cbSceneParam._m0[86u].y;
    vec4 _2700 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2685, _2686, (log2((isnan(cbSceneParam._m0[77u].w) ? _420 : (isnan(_420) ? cbSceneParam._m0[77u].w : min(_420, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2702 = _2700.x;
    float _2703 = _2700.y;
    float _2704 = _2700.z;
    float _2705 = _2700.w;
    float _2776;
    float _2778;
    float _2780;
    float _2782;
    if (_420 > cbSceneParam._m0[78u].w)
    {
        float _2739 = isnan(_420) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _420 : min(cbSceneParam._m0[80u].w, _420));
        float _2740 = _2739 / _420;
        float _2751 = _2740 * _472;
        float _2752 = _473 * _2740;
        float _2753 = (-0.0) - _2752;
        float _2754 = _2740 * _474;
        float _2756 = (cbSceneParam._m0[77u].w * _2753) / _2739;
        float _2757 = _2756 + cbSceneParam._m0[79u].w;
        float _2758 = cbSceneParam._m0[79u].w - _2752;
        float _2764 = sqrt(((_2751 * _2751) + (_2752 * _2752)) + (_2754 * _2754));
        float _2767 = (1.0 - (cbSceneParam._m0[77u].w / _2739)) * _2764;
        float _2772 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2774 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2951;
        if (abs((_2753 - _2756) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2951 = ((((_2757 > 0.0) ? exp2(_2772 * _2757) : (2.0 - exp2(_2774 * _2757))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2767;
        }
        else
        {
            float _2895 = 1.0 / cbSceneParam._m0[80u].x;
            float _2896 = isnan(_2758) ? _2757 : (isnan(_2757) ? _2758 : max(_2757, _2758));
            float _2897 = isnan(_2758) ? _2757 : (isnan(_2757) ? _2758 : min(_2757, _2758));
            float _2906 = isnan(0.0) ? _2896 : (isnan(_2896) ? 0.0 : min(_2896, 0.0));
            float _2907 = isnan(0.0) ? _2897 : (isnan(_2897) ? 0.0 : min(_2897, 0.0));
            _2951 = ((abs(_2764 / _2753) * cbSceneParam._m0[80u].y) * ((((_2906 - _2907) * 2.0) - ((exp2(_2772 * (isnan(0.0) ? _2896 : (isnan(_2896) ? 0.0 : max(_2896, 0.0)))) - exp2(_2772 * (isnan(0.0) ? _2897 : (isnan(_2897) ? 0.0 : max(_2897, 0.0))))) * _2895)) - ((exp2(_2774 * _2906) - exp2(_2774 * _2907)) * _2895))) + (_2767 * cbSceneParam._m0[80u].z);
        }
        vec4 _2953 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2685, _2686, 1.0), 0.0);
        float _2962 = exp2((_2951 * (-1.44269502162933349609375)) * (1.0 - _2953.w));
        float _2963 = log2(_2962);
        float _2979 = log2(_2705);
        _2776 = (exp2(_2979 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2963 * cbSceneParam._m0[78u].x)) * _2953.x) / cbSceneParam._m0[78u].x)) + _2702;
        _2778 = (exp2(_2979 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2963 * cbSceneParam._m0[78u].y)) * _2953.y) / cbSceneParam._m0[78u].y)) + _2703;
        _2780 = (exp2(_2979 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2963 * cbSceneParam._m0[78u].z)) * _2953.z) / cbSceneParam._m0[78u].z)) + _2704;
        _2782 = _2962 * _2705;
    }
    else
    {
        _2776 = _2702;
        _2778 = _2703;
        _2780 = _2704;
        _2782 = _2705;
    }
    bool _2989;
    vec4 _2792;
    vec4 _2814;
    float _2816;
    float _2820;
    float _2821;
    float _2822;
    float _2823;
    bool _2833;
    for (;;)
    {
        _2792 = cbMatDynParam._m0[0u];
        float _2794 = roundEven(_2792.y);
        bool _2795 = _2794 == 3.0;
        float _2796 = log2(_2782);
        float _2803 = exp2(_2796 * cbSceneParam._m0[78u].x) * _2674;
        float _2804 = exp2(_2796 * cbSceneParam._m0[78u].y) * _2675;
        float _2805 = exp2(_2796 * cbSceneParam._m0[78u].z) * _2676;
        float _2812 = _488 + (-0.5);
        _2814 = cbMtdParam._m0[1u];
        _2816 = _2814.y * _2812;
        float _2819 = (_2794 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2820 = _2819 * (_2795 ? _2803 : (_2803 + (cbSceneParam._m0[72u].w * _2776)));
        _2821 = _2819 * (_2795 ? _2804 : (_2804 + (cbSceneParam._m0[72u].w * _2778)));
        _2822 = _2819 * (_2795 ? _2805 : (_2805 + (cbSceneParam._m0[72u].w * _2780)));
        _2823 = _2812 * 0.999000012874603271484375;
        _2833 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2833)
        {
            if ((cbInstanceData._m0[_540 + 7u].x + _2823) < 0.5)
            {
                _2989 = true;
                break;
            }
        }
        uint _2930 = _541 + uint(_2792.w);
        if ((cbInstanceData._m0[_2930].w < 1.0) && ((cbInstanceData._m0[_2930].w + _2823) < 0.5))
        {
            _2989 = true;
            break;
        }
        if ((_2816 + _252) < _2814.x)
        {
            _2989 = true;
            break;
        }
        _2989 = false;
        break;
    }
    float _3193;
    if (_2989)
    {
        discard_state = true;
        _3193 = 0.0;
    }
    else
    {
        _3193 = cbInstanceData._m0[_2677].w;
    }
    SV_Target.x = _2820;
    SV_Target.y = _2821;
    SV_Target.z = _2822;
    SV_Target.w = _3193;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2677].w;
    discard_exit();
}


