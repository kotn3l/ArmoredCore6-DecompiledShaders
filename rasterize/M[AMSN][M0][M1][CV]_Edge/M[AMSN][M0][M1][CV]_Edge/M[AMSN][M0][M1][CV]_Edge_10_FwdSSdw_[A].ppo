#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _966;
float _3379;
float _3380;
float _3381;
float _3382;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _196 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _203 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _204 = _203 * NORMAL.x;
    float _205 = _203 * NORMAL.y;
    float _206 = _203 * NORMAL.z;
    float _210 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _218;
    float _219;
    float _220;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _218 = (-0.0) - _204;
        _219 = (-0.0) - _205;
        _220 = (-0.0) - _206;
    }
    else
    {
        _218 = _204;
        _219 = _205;
        _220 = _206;
    }
    vec4 _246 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _252 = _246.w;
    float _253 = _246.x * cbMtdParam._m0[9u].x;
    float _254 = _246.y * cbMtdParam._m0[9u].y;
    float _255 = _246.z * cbMtdParam._m0[9u].z;
    vec4 _267 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _271 = _267.z;
    float _275 = (_267.x * 2.0) + (-1.0);
    float _277 = (_267.y * 2.0) + (-1.0);
    float _278 = dot(vec2(_275, _277), vec2(_275, _277));
    float _3391 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _284 = sqrt(1.0 - (isnan(1.0) ? _3391 : (isnan(_3391) ? 1.0 : min(_3391, 1.0))));
    float _296 = (TEXCOORD_3.x - (((1.0 - TEXCOORD_3.x) * 0.00999999977648258209228515625) * cbMtdParam._m0[12u].y)) * (cbMtdParam._m0[12u].z + 1.0);
    float _3402 = isnan(0.0) ? _296 : (isnan(_296) ? 0.0 : max(_296, 0.0));
    float _297 = isnan(1.0) ? _3402 : (isnan(_3402) ? 1.0 : min(_3402, 1.0));
    float _304 = (_297 * (cbMtdParam._m0[10u].x - _253)) + _253;
    float _305 = (_297 * (cbMtdParam._m0[10u].y - _254)) + _254;
    float _306 = (_297 * (cbMtdParam._m0[10u].z - _255)) + _255;
    vec4 _318 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _320 = _318.x;
    float _322 = _320 - (_320 * _297);
    vec4 _334 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _341 = (_334.x * 2.0) + (-1.0);
    float _342 = (_334.y * 2.0) + (-1.0);
    float _343 = dot(vec2(_341, _342), vec2(_341, _342));
    float _3413 = isnan(0.0) ? _343 : (isnan(_343) ? 0.0 : max(_343, 0.0));
    float _351 = (_297 * (_334.z - _271)) + _271;
    float _363 = (((_341 - _275) + (cbMtdParam._m0[12u].w * _275)) * _297) + _275;
    float _364 = (((_342 - _277) + (cbMtdParam._m0[12u].w * _277)) * _297) + _277;
    float _365 = (_297 * (sqrt(1.0 - (isnan(1.0) ? _3413 : (isnan(_3413) ? 1.0 : min(_3413, 1.0)))) - _284)) + _284;
    float _368 = fma(_365, _218, fma(_364, _210 * TANGENT.x, (_196 * _188) * _363));
    float _371 = fma(_365, _219, fma(_364, _210 * TANGENT.y, (_196 * _189) * _363));
    float _374 = fma(_365, _220, fma(_364, _210 * TANGENT.z, (_196 * _190) * _363));
    float _378 = inversesqrt(dot(vec3(_368, _371, _374), vec3(_368, _371, _374)));
    float _379 = _378 * _368;
    float _380 = _378 * _371;
    float _381 = _378 * _374;
    float _3424 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    float _382 = isnan(1.0) ? _3424 : (isnan(_3424) ? 1.0 : min(_3424, 1.0));
    float _3435 = isnan(0.0) ? _304 : (isnan(_304) ? 0.0 : max(_304, 0.0));
    float _3446 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _3457 = isnan(0.0) ? _306 : (isnan(_306) ? 0.0 : max(_306, 0.0));
    float _3468 = isnan(0.0) ? _322 : (isnan(_322) ? 0.0 : max(_322, 0.0));
    float _386 = isnan(1.0) ? _3468 : (isnan(_3468) ? 1.0 : min(_3468, 1.0));
    float _402 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _444 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _454 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _444);
    float _455 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _444);
    float _456 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _444);
    float _460 = inversesqrt(dot(vec3(_454, _455, _456), vec3(_454, _455, _456)));
    float _461 = _454 * _460;
    float _462 = _455 * _460;
    float _463 = _456 * _460;
    vec4 _468 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _470 = _468.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _646 = sqrt(((_454 * _454) + (_455 * _455)) + (_456 * _456));
        float _652 = (cbMatDynParam._m0[5u].x * _646) + cbMatDynParam._m0[5u].y;
        float _3479 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
        float _653 = isnan(1.0) ? _3479 : (isnan(_3479) ? 1.0 : min(_3479, 1.0));
        float _657 = (cbMatDynParam._m0[5u].z * _646) + cbMatDynParam._m0[5u].w;
        float _3490 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0))) - _653)) + _653) < ((_470 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _482 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _483 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _503 = fma(_381, cbSceneParam._m0[5u].z, fma(_380, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _379));
    float _506 = fma(_381, cbSceneParam._m0[6u].z, fma(_380, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _379));
    float _509 = fma(_381, cbSceneParam._m0[7u].z, fma(_380, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _379));
    uint _522 = uint(roundEven(NORMAL.w)) * 13u;
    uint _524 = _522 + 9u;
    uint _525 = _524 + uint(cbMatDynParam._m0[0u].w);
    float _531 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3435 : (isnan(_3435) ? 1.0 : min(_3435, 1.0)))) * cbInstanceData._m0[_525].x;
    float _532 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3446 : (isnan(_3446) ? 1.0 : min(_3446, 1.0)))) * cbInstanceData._m0[_525].y;
    float _533 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3457 : (isnan(_3457) ? 1.0 : min(_3457, 1.0)))) * cbInstanceData._m0[_525].z;
    float _3501 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _534 = isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0));
    float _3512 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _535 = isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0));
    float _3523 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _536 = isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0));
    float _537 = 1.0 - _386;
    float _538 = _534 * _537;
    float _539 = _535 * _537;
    float _540 = _536 * _537;
    float _545 = (_534 + (-0.039999999105930328369140625)) * _386;
    float _546 = (_535 + (-0.039999999105930328369140625)) * _386;
    float _547 = (_536 + (-0.039999999105930328369140625)) * _386;
    float _548 = _545 + 0.039999999105930328369140625;
    float _550 = _546 + 0.039999999105930328369140625;
    float _551 = _547 + 0.039999999105930328369140625;
    vec4 _560 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _482, cbSceneParam._m0[86u].y * _483));
    float _563 = _560.x * TEXCOORD_3.w;
    float _564 = dot(vec3(_379, _380, _381), vec3(_461, _462, _463));
    float _567 = _564 * 2.0;
    float _571 = (_567 * _379) - _461;
    float _572 = (_567 * _380) - _462;
    float _573 = (_567 * _381) - _463;
    float _577 = abs(dot(vec3(_461, _462, _463), vec3(_379, _380, _381)));
    float _3534 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _579 = sqrt(_382);
    float _592 = exp2((_579 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_579 * 3.0));
    float _598 = (1.0 - _592) * ((_579 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _599 = _592 * _579;
    float _627 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _631 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _635 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _965;
    float _967;
    float _968;
    float _969;
    float _970;
    float _971;
    float _972;
    float _973;
    float _974;
    float _975;
    float _976;
    float _977;
    float _978;
    float _979;
    float _980;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _690 = fma(_635, cbModelParam._m0[26u].z, fma(_631, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _627));
        float _694 = fma(_635, cbModelParam._m0[27u].z, fma(_631, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _627));
        float _698 = fma(_635, cbModelParam._m0[28u].z, fma(_631, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _627));
        float _723 = _627 + _379;
        float _724 = _631 + _380;
        float _725 = _635 + _381;
        float _735 = fma(_725, cbModelParam._m0[26u].z, fma(_724, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _723)) - _690;
        float _736 = fma(_725, cbModelParam._m0[27u].z, fma(_724, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _723)) - _694;
        float _737 = fma(_725, cbModelParam._m0[28u].z, fma(_724, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _723)) - _698;
        float _741 = inversesqrt(dot(vec3(_735, _736, _737), vec3(_735, _736, _737)));
        float _754 = ((_741 * _735) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_690 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _755 = ((_741 * _736) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_694 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _756 = ((_741 * _737) / cbModelParam._m0[34u].z) + ((((((_698 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _759 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_754, _755, _756), 0.0);
        vec4 _766 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_754, _755, _756), 0.0);
        vec4 _773 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_754, _755, _756), 0.0);
        vec4 _780 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_754, _755, _756), 0.0);
        float _793 = exp2((_759.w + (-0.5)) * 20.0) * 2.0;
        float _794 = _793 * (_759.x + (-0.5));
        float _795 = _793 * (_759.y + (-0.5));
        float _796 = _793 * (_759.z + (-0.5));
        float _803 = exp2((_766.w + (-0.5)) * 20.0) * 2.0;
        float _804 = _803 * (_766.x + (-0.5));
        float _805 = _803 * (_766.y + (-0.5));
        float _806 = _803 * (_766.z + (-0.5));
        float _813 = exp2((_773.w + (-0.5)) * 20.0) * 2.0;
        float _814 = _813 * (_773.x + (-0.5));
        float _815 = _813 * (_773.y + (-0.5));
        float _816 = _813 * (_773.z + (-0.5));
        float _823 = exp2((_780.w + (-0.5)) * 20.0) * 2.0;
        float _824 = _823 * (_780.x + (-0.5));
        float _825 = _823 * (_780.y + (-0.5));
        float _826 = _823 * (_780.z + (-0.5));
        float _827 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
        float _828 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
        float _829 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
        float _830 = _794 * 0.5;
        float _831 = _804 * 0.5;
        float _832 = _814 * 0.5;
        float _833 = dot(vec3(_830, _831, _832), vec3(_830, _831, _832));
        float _838 = (_833 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_833);
        float _847 = (dot(vec3(_379, _380, _381), vec3(_838 * _830, _838 * _831, _838 * _832)) + 1.0) * 0.5;
        float _3560 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
        float _857 = sqrt(((_831 * _831) + (_830 * _830)) + (_832 * _832)) / (_827 + 9.9999997473787516355514526367188e-06);
        float _3571 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
        float _858 = isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0));
        float _859 = _858 * 2.0;
        float _863 = (1.0 - _858) / (_858 + 1.0);
        float _3582 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
        float _864 = isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0));
        float _873 = ((((1.0 - _864) * (_859 + 2.0)) * exp2(log2(isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0))) * (_859 + 1.0))) + _864) * _827;
        float _874 = _795 * 0.5;
        float _875 = _805 * 0.5;
        float _876 = _815 * 0.5;
        float _877 = dot(vec3(_874, _875, _876), vec3(_874, _875, _876));
        float _882 = (_877 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_877);
        float _890 = (dot(vec3(_379, _380, _381), vec3(_882 * _874, _882 * _875, _882 * _876)) + 1.0) * 0.5;
        float _3593 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
        float _899 = sqrt(((_875 * _875) + (_874 * _874)) + (_876 * _876)) / (_828 + 9.9999997473787516355514526367188e-06);
        float _3604 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
        float _900 = isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0));
        float _901 = _900 * 2.0;
        float _905 = (1.0 - _900) / (_900 + 1.0);
        float _3615 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _906 = isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0));
        float _915 = ((((1.0 - _906) * (_901 + 2.0)) * exp2(log2(isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0))) * (_901 + 1.0))) + _906) * _828;
        float _916 = _796 * 0.5;
        float _917 = _806 * 0.5;
        float _918 = _816 * 0.5;
        float _919 = dot(vec3(_916, _917, _918), vec3(_916, _917, _918));
        float _924 = (_919 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_919);
        float _932 = (dot(vec3(_379, _380, _381), vec3(_924 * _916, _924 * _917, _924 * _918)) + 1.0) * 0.5;
        float _3626 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
        float _941 = sqrt(((_917 * _917) + (_916 * _916)) + (_918 * _918)) / (_829 + 9.9999997473787516355514526367188e-06);
        float _3637 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
        float _942 = isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0));
        float _943 = _942 * 2.0;
        float _947 = (1.0 - _942) / (_942 + 1.0);
        float _3648 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
        float _948 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
        float _957 = ((((1.0 - _948) * (_943 + 2.0)) * exp2(log2(isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0))) * (_943 + 1.0))) + _948) * _829;
        _965 = _796;
        _967 = _795;
        _968 = _794;
        _969 = _806;
        _970 = _805;
        _971 = _804;
        _972 = _816;
        _973 = _815;
        _974 = _814;
        _975 = _829;
        _976 = _828;
        _977 = _827;
        _978 = cbModelParam._m0[36u].z * (isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0)));
        _979 = cbModelParam._m0[36u].z * (isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0)));
        _980 = cbModelParam._m0[36u].z * (isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0)));
    }
    else
    {
        _965 = _966;
        _967 = _966;
        _968 = _966;
        _969 = _966;
        _970 = _966;
        _971 = _966;
        _972 = _966;
        _973 = _966;
        _974 = _966;
        _975 = _966;
        _976 = _966;
        _977 = _966;
        _978 = 0.0;
        _979 = 0.0;
        _980 = 0.0;
    }
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1009 = fma(_635, cbModelParam._m0[30u].z, fma(_631, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _627));
        float _1013 = fma(_635, cbModelParam._m0[31u].z, fma(_631, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _627));
        float _1017 = fma(_635, cbModelParam._m0[32u].z, fma(_631, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _627));
        float _1040 = _627 + _379;
        float _1041 = _631 + _380;
        float _1042 = _635 + _381;
        float _1052 = fma(_1042, cbModelParam._m0[30u].z, fma(_1041, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1040)) - _1009;
        float _1053 = fma(_1042, cbModelParam._m0[31u].z, fma(_1041, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1040)) - _1013;
        float _1054 = fma(_1042, cbModelParam._m0[32u].z, fma(_1041, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1040)) - _1017;
        float _1058 = inversesqrt(dot(vec3(_1052, _1053, _1054), vec3(_1052, _1053, _1054)));
        float _1071 = ((_1058 * _1052) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1009 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1072 = ((_1058 * _1053) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1013 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1073 = ((_1058 * _1054) / cbModelParam._m0[35u].z) + ((((((_1017 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1075 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1071, _1072, _1073), 0.0);
        vec4 _1082 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1071, _1072, _1073), 0.0);
        vec4 _1089 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1071, _1072, _1073), 0.0);
        vec4 _1096 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1071, _1072, _1073), 0.0);
        float _1108 = exp2((_1075.w + (-0.5)) * 20.0) * 2.0;
        float _1109 = _1108 * (_1075.x + (-0.5));
        float _1110 = _1108 * (_1075.y + (-0.5));
        float _1111 = _1108 * (_1075.z + (-0.5));
        float _1118 = exp2((_1082.w + (-0.5)) * 20.0) * 2.0;
        float _1119 = _1118 * (_1082.x + (-0.5));
        float _1120 = _1118 * (_1082.y + (-0.5));
        float _1121 = _1118 * (_1082.z + (-0.5));
        float _1128 = exp2((_1089.w + (-0.5)) * 20.0) * 2.0;
        float _1129 = _1128 * (_1089.x + (-0.5));
        float _1130 = _1128 * (_1089.y + (-0.5));
        float _1131 = _1128 * (_1089.z + (-0.5));
        float _1138 = exp2((_1096.w + (-0.5)) * 20.0) * 2.0;
        float _1139 = _1138 * (_1096.x + (-0.5));
        float _1140 = _1138 * (_1096.y + (-0.5));
        float _1141 = _1138 * (_1096.z + (-0.5));
        float _1142 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1143 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1144 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1145 = _1109 * 0.5;
        float _1146 = _1119 * 0.5;
        float _1147 = _1129 * 0.5;
        float _1148 = dot(vec3(_1145, _1146, _1147), vec3(_1145, _1146, _1147));
        float _1153 = (_1148 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1148);
        float _1161 = (dot(vec3(_379, _380, _381), vec3(_1153 * _1145, _1153 * _1146, _1153 * _1147)) + 1.0) * 0.5;
        float _3689 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1170 = sqrt(((_1146 * _1146) + (_1145 * _1145)) + (_1147 * _1147)) / (_1142 + 9.9999997473787516355514526367188e-06);
        float _3700 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1171 = isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0));
        float _1172 = _1171 * 2.0;
        float _1176 = (1.0 - _1171) / (_1171 + 1.0);
        float _3711 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1177 = isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0));
        float _1186 = ((((1.0 - _1177) * (_1172 + 2.0)) * exp2(log2(isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0))) * (_1172 + 1.0))) + _1177) * _1142;
        float _1187 = _1110 * 0.5;
        float _1188 = _1120 * 0.5;
        float _1189 = _1130 * 0.5;
        float _1190 = dot(vec3(_1187, _1188, _1189), vec3(_1187, _1188, _1189));
        float _1195 = (_1190 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1190);
        float _1203 = (dot(vec3(_379, _380, _381), vec3(_1195 * _1187, _1195 * _1188, _1195 * _1189)) + 1.0) * 0.5;
        float _3722 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1212 = sqrt(((_1188 * _1188) + (_1187 * _1187)) + (_1189 * _1189)) / (_1143 + 9.9999997473787516355514526367188e-06);
        float _3733 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1213 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
        float _1214 = _1213 * 2.0;
        float _1218 = (1.0 - _1213) / (_1213 + 1.0);
        float _3744 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1219 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
        float _1228 = ((((1.0 - _1219) * (_1214 + 2.0)) * exp2(log2(isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0))) * (_1214 + 1.0))) + _1219) * _1143;
        float _1229 = _1111 * 0.5;
        float _1230 = _1121 * 0.5;
        float _1231 = _1131 * 0.5;
        float _1232 = dot(vec3(_1229, _1230, _1231), vec3(_1229, _1230, _1231));
        float _1237 = (_1232 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1232);
        float _1245 = (dot(vec3(_379, _380, _381), vec3(_1237 * _1229, _1237 * _1230, _1237 * _1231)) + 1.0) * 0.5;
        float _3755 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1254 = sqrt(((_1230 * _1230) + (_1229 * _1229)) + (_1231 * _1231)) / (_1144 + 9.9999997473787516355514526367188e-06);
        float _3766 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1255 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
        float _1256 = _1255 * 2.0;
        float _1260 = (1.0 - _1255) / (_1255 + 1.0);
        float _3777 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1261 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
        float _1270 = ((((1.0 - _1261) * (_1256 + 2.0)) * exp2(log2(isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0))) * (_1256 + 1.0))) + _1261) * _1144;
        _1278 = _1111;
        _1279 = _1110;
        _1280 = _1109;
        _1281 = _1121;
        _1282 = _1120;
        _1283 = _1119;
        _1284 = _1131;
        _1285 = _1130;
        _1286 = _1129;
        _1287 = _1144;
        _1288 = _1143;
        _1289 = _1142;
        _1290 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0)));
        _1291 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0)));
        _1292 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0)));
    }
    else
    {
        _1278 = _966;
        _1279 = _966;
        _1280 = _966;
        _1281 = _966;
        _1282 = _966;
        _1283 = _966;
        _1284 = _966;
        _1285 = _966;
        _1286 = _966;
        _1287 = _966;
        _1288 = _966;
        _1289 = _966;
        _1290 = 0.0;
        _1291 = 0.0;
        _1292 = 0.0;
    }
    float _1302 = (cbModelParam._m0[1u].x * (_1290 - _978)) + _978;
    float _1303 = (cbModelParam._m0[1u].x * (_1291 - _979)) + _979;
    float _1304 = (cbModelParam._m0[1u].x * (_1292 - _980)) + _980;
    float _1325 = fma(_1304, cbSceneParam._m0[89u].z, fma(_1303, cbSceneParam._m0[89u].y, _1302 * cbSceneParam._m0[89u].x));
    float _1328 = fma(_1304, cbSceneParam._m0[90u].z, fma(_1303, cbSceneParam._m0[90u].y, _1302 * cbSceneParam._m0[90u].x));
    float _1331 = fma(_1304, cbSceneParam._m0[91u].z, fma(_1303, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1302));
    float _1346 = _571 * 0.5;
    float _1347 = _572 * 0.5;
    float _1348 = _573 * 0.5;
    float _1349 = dot(vec4(_1346, _1347, _1348, 1.0), vec4(_1280, _1283, _1286, _1289));
    float _1352 = dot(vec4(_1346, _1347, _1348, 1.0), vec4(_1279, _1282, _1285, _1288));
    float _1355 = dot(vec4(_1346, _1347, _1348, 1.0), vec4(_1278, _1281, _1284, _1287));
    float _1389;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1362 = dot(vec4(_1346, _1347, _1348, 1.0), vec4(_965, _969, _972, _975));
        float _1366 = dot(vec4(_1346, _1347, _1348, 1.0), vec4(_967, _970, _973, _976));
        float _1370 = dot(vec4(_1346, _1347, _1348, 1.0), vec4(_968, _971, _974, _977));
        float _1377 = dot(vec4(cbModelParam._m0[39u]), vec4(_1346, _1347, _1348, 1.0));
        _1389 = dot(vec3(isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0)), isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0)), isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1377) ? 0.0 : (isnan(0.0) ? _1377 : max(0.0, _1377))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1389 = 1.0;
    }
    float _1400;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1391 = dot(vec4(cbModelParam._m0[40u]), vec4(_1346, _1347, _1348, 1.0));
        _1400 = dot(vec3(isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0)), isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0)), isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1391) ? 0.0 : (isnan(0.0) ? _1391 : max(0.0, _1391))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1400 = 1.0;
    }
    float _1404 = (_1400 * cbModelParam._m0[1u].x) + (_1389 * (1.0 - cbModelParam._m0[1u].x));
    float _1414 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _382);
    float _1415 = isnan(_1414) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1414 : min(cbModelParam._m0[25u].z, _1414));
    float _1496;
    float _1498;
    float _1500;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1463 = fma(_635, cbModelParam._m0[13u].z, fma(_631, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _627)) + cbModelParam._m0[13u].w;
        float _1467 = fma(_635, cbModelParam._m0[14u].z, fma(_631, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _627)) + cbModelParam._m0[14u].w;
        float _1471 = fma(_635, cbModelParam._m0[15u].z, fma(_631, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _627)) + cbModelParam._m0[15u].w;
        float _1474 = fma(_573, cbModelParam._m0[13u].z, fma(_572, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _571));
        float _1477 = fma(_573, cbModelParam._m0[14u].z, fma(_572, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _571));
        float _1480 = fma(_573, cbModelParam._m0[15u].z, fma(_572, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _571));
        float _1508;
        if (_1474 > 0.0)
        {
            _1508 = abs((1.0 - _1463) / _1474);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1474 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1463 + 1.0) / _1474);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1508 = frontier_phi_19_17_ladder;
        }
        float _1736;
        if (_1477 > 0.0)
        {
            _1736 = abs((1.0 - _1467) / _1477);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1477 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1467 + 1.0) / _1477);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1736 = frontier_phi_28_24_ladder;
        }
        float _1993;
        if (_1480 > 0.0)
        {
            _1993 = abs((1.0 - _1471) / _1480);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1480 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1471 + 1.0) / _1480);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1993 = frontier_phi_40_35_ladder;
        }
        float _1995 = isnan(_1736) ? _1508 : (isnan(_1508) ? _1736 : min(_1508, _1736));
        float _1996 = isnan(_1993) ? _1995 : (isnan(_1995) ? _1993 : min(_1995, _1993));
        float _2000 = (_1996 * _1474) + _1463;
        float _2001 = (_1996 * _1477) + _1467;
        float _2002 = (_1996 * _1480) + _1471;
        float _2003 = _1996 * 9.9999997473787516355514526367188e-05;
        float _2005 = (-1.0) - _2003;
        float _2007 = _2003 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2002 > _2007) || ((_2002 < _2005) || ((_2001 > _2007) || ((_2001 < _2005) || ((_2000 < _2005) || (_2000 > _2007))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2130 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2002, cbModelParam._m0[9u].z, fma(_2001, cbModelParam._m0[9u].y, _2000 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2002, cbModelParam._m0[10u].z, fma(_2001, cbModelParam._m0[10u].y, _2000 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2002, cbModelParam._m0[11u].z, fma(_2001, cbModelParam._m0[11u].y, _2000 * cbModelParam._m0[11u].x))), _1415);
            frontier_phi_18_40_ladder = _2130.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2130.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2130.x * cbModelParam._m0[1u].y;
        }
        _1496 = frontier_phi_18_40_ladder_2;
        _1498 = frontier_phi_18_40_ladder_1;
        _1500 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1484 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_571, _572, _573), _1415);
        _1496 = _1484.x * cbModelParam._m0[1u].y;
        _1498 = _1484.y * cbModelParam._m0[1u].y;
        _1500 = _1484.z * cbModelParam._m0[1u].y;
    }
    float _1504 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _382);
    float _1505 = isnan(_1504) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1504 : min(cbModelParam._m0[25u].w, _1504));
    float _1598;
    float _1600;
    float _1602;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1562 = fma(_635, cbModelParam._m0[21u].z, fma(_631, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _627)) + cbModelParam._m0[21u].w;
        float _1566 = fma(_635, cbModelParam._m0[22u].z, fma(_631, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _627)) + cbModelParam._m0[22u].w;
        float _1570 = fma(_635, cbModelParam._m0[23u].z, fma(_631, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _627)) + cbModelParam._m0[23u].w;
        float _1573 = fma(_573, cbModelParam._m0[21u].z, fma(_572, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _571));
        float _1576 = fma(_573, cbModelParam._m0[22u].z, fma(_572, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _571));
        float _1579 = fma(_573, cbModelParam._m0[23u].z, fma(_572, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _571));
        float _1741;
        if (_1573 > 0.0)
        {
            _1741 = abs((1.0 - _1562) / _1573);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1573 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1562 + 1.0) / _1573);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1741 = frontier_phi_30_26_ladder;
        }
        float _2020;
        if (_1576 > 0.0)
        {
            _2020 = abs((1.0 - _1566) / _1576);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1576 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1566 + 1.0) / _1576);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2020 = frontier_phi_42_37_ladder;
        }
        float _2233;
        if (_1579 > 0.0)
        {
            _2233 = abs((1.0 - _1570) / _1579);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1579 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1570 + 1.0) / _1579);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2233 = frontier_phi_51_48_ladder;
        }
        float _2235 = isnan(_2020) ? _1741 : (isnan(_1741) ? _2020 : min(_1741, _2020));
        float _2236 = isnan(_2233) ? _2235 : (isnan(_2235) ? _2233 : min(_2235, _2233));
        float _2240 = (_2236 * _1573) + _1562;
        float _2241 = (_2236 * _1576) + _1566;
        float _2242 = (_2236 * _1579) + _1570;
        float _2243 = _2236 * 9.9999997473787516355514526367188e-05;
        float _2244 = (-1.0) - _2243;
        float _2246 = _2243 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2242 > _2246) || ((_2242 < _2244) || ((_2241 > _2246) || ((_2241 < _2244) || ((_2240 < _2244) || (_2240 > _2246))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2440 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2242, cbModelParam._m0[17u].z, fma(_2241, cbModelParam._m0[17u].y, _2240 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2242, cbModelParam._m0[18u].z, fma(_2241, cbModelParam._m0[18u].y, _2240 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2242, cbModelParam._m0[19u].z, fma(_2241, cbModelParam._m0[19u].y, _2240 * cbModelParam._m0[19u].x))), _1505);
            frontier_phi_27_51_ladder = _2440.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2440.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2440.x * cbModelParam._m0[1u].z;
        }
        _1598 = frontier_phi_27_51_ladder_2;
        _1600 = frontier_phi_27_51_ladder_1;
        _1602 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1582 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_571, _572, _573), _1505);
        _1598 = _1582.x * cbModelParam._m0[1u].z;
        _1600 = _1582.y * cbModelParam._m0[1u].z;
        _1602 = _1582.z * cbModelParam._m0[1u].z;
    }
    float _1615 = (((_598 * _548) + _599) * _563) * ((cbModelParam._m0[1u].w * (_1598 - _1496)) + _1496);
    float _1617 = (((_598 * _550) + _599) * _563) * ((cbModelParam._m0[1u].w * (_1600 - _1498)) + _1498);
    float _1619 = (((_598 * _551) + _599) * _563) * ((cbModelParam._m0[1u].w * (_1602 - _1500)) + _1500);
    float _1622 = fma(_1619, cbSceneParam._m0[89u].z, fma(_1617, cbSceneParam._m0[89u].y, _1615 * cbSceneParam._m0[89u].x));
    float _1625 = fma(_1619, cbSceneParam._m0[90u].z, fma(_1617, cbSceneParam._m0[90u].y, _1615 * cbSceneParam._m0[90u].x));
    float _1628 = fma(_1619, cbSceneParam._m0[91u].z, fma(_1617, cbSceneParam._m0[91u].y, _1615 * cbSceneParam._m0[91u].x));
    vec4 _1636 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_482, _483));
    float _1638 = _1636.w;
    float _1650 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1638);
    float _1651 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1638);
    float _1652 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1638);
    uvec4 _1656 = floatBitsToUint(cbInstanceData._m0[_522 + 5u]);
    uint _1658 = _1656.x * 14u;
    uint _1659 = _1658 + 13u;
    float _1666 = _563 + (-1.0);
    float _1671 = (cbLight._m0[_1659].x * _1666) + 1.0;
    float _1672 = (cbLight._m0[_1659].y * _1666) + 1.0;
    float _1673 = (cbLight._m0[_1659].z * _1666) + 1.0;
    float _1674 = (cbLight._m0[_1659].w * _1666) + 1.0;
    uint _1675 = _1658 + 5u;
    float _1681 = isnan(1.0) ? _1672 : (isnan(_1672) ? 1.0 : min(_1672, 1.0));
    uint _1685 = _1658 + 4u;
    float _1695 = isnan(1.0) ? _1671 : (isnan(_1671) ? 1.0 : min(_1671, 1.0));
    uint _1699 = _1658 | 1u;
    float _1710 = dot(vec3(cbLight._m0[_1658].xyz), vec3(_379, _380, _381));
    float _1713 = dot(vec3(cbLight._m0[_1699].xyz), vec3(_379, _380, _381));
    float _3913 = isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0));
    float _3924 = isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0));
    float _1718 = (isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0))) * 0.3183098733425140380859375;
    float _1720 = (isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0))) * 0.3183098733425140380859375;
    float _1727 = ((cbLight._m0[_1675].x * _1681) * _1720) + (((cbLight._m0[_1685].x * _1650) * _1695) * _1718);
    float _1728 = ((_1681 * cbLight._m0[_1675].y) * _1720) + (((cbLight._m0[_1685].y * _1651) * _1695) * _1718);
    float _1729 = ((_1681 * cbLight._m0[_1675].z) * _1720) + (((cbLight._m0[_1685].z * _1652) * _1695) * _1718);
    uvec4 _1733 = floatBitsToUint(cbLight._m0[_1658 + 12u]);
    bool _1735 = _1733.x == 0u;
    float _1746;
    float _1748;
    float _1750;
    if (_1735)
    {
        _1746 = _1727;
        _1748 = _1728;
        _1750 = _1729;
    }
    else
    {
        uint _1754 = _1658 + 6u;
        float _1770 = (dot(vec3(cbLight._m0[_1658 + 2u].xyz), vec3(_379, _380, _381)) * 0.5) + 0.5;
        float _1771 = _1770 * _1770;
        float _3935 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
        float _1772 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
        float _1773 = isnan(1.0) ? _1673 : (isnan(_1673) ? 1.0 : min(_1673, 1.0));
        _1746 = (((cbLight._m0[_1754].x * 0.3183098733425140380859375) * _1772) * _1773) + _1727;
        _1748 = (((cbLight._m0[_1754].y * 0.3183098733425140380859375) * _1772) * _1773) + _1728;
        _1750 = (((cbLight._m0[_1754].z * 0.3183098733425140380859375) * _1772) * _1773) + _1729;
    }
    bool _1753 = _1733.y == 0u;
    float _1791;
    float _1793;
    float _1795;
    if (_1753)
    {
        _1791 = _1746;
        _1793 = _1748;
        _1795 = _1750;
    }
    else
    {
        uint _1964 = _1658 + 7u;
        float _1980 = (dot(vec3(cbLight._m0[_1658 + 3u].xyz), vec3(_379, _380, _381)) * 0.5) + 0.5;
        float _1981 = _1980 * _1980;
        float _3951 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
        float _1982 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
        float _1983 = isnan(1.0) ? _1674 : (isnan(_1674) ? 1.0 : min(_1674, 1.0));
        _1791 = (((cbLight._m0[_1964].x * 0.3183098733425140380859375) * _1982) * _1983) + _1746;
        _1793 = (((cbLight._m0[_1964].y * 0.3183098733425140380859375) * _1982) * _1983) + _1748;
        _1795 = (((cbLight._m0[_1964].z * 0.3183098733425140380859375) * _1982) * _1983) + _1750;
    }
    uint _1798 = _1658 + 8u;
    float _1811 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1658].w)) * _382) * 0.949999988079071044921875);
    float _1812 = _1811 * _1811;
    float _1813 = cbLight._m0[_1658].x + _461;
    float _1814 = cbLight._m0[_1658].y + _462;
    float _1815 = cbLight._m0[_1658].z + _463;
    float _1819 = inversesqrt(dot(vec3(_1813, _1814, _1815), vec3(_1813, _1814, _1815)));
    float _1820 = _1819 * _1813;
    float _1821 = _1819 * _1814;
    float _1822 = _1819 * _1815;
    float _1823 = dot(vec3(_379, _380, _381), vec3(cbLight._m0[_1658].xyz));
    float _3967 = isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0));
    float _1826 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
    float _3978 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _1827 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
    float _1828 = dot(vec3(_379, _380, _381), vec3(_1820, _1821, _1822));
    float _3989 = isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0));
    float _1831 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
    float _1832 = dot(vec3(cbLight._m0[_1658].xyz), vec3(_1820, _1821, _1822));
    float _4000 = isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0));
    float _1836 = _1812 * _1812;
    float _1840 = ((_1831 * _1831) * (_1836 + (-1.0))) + 1.0;
    float _1848 = exp2(log2(1.0 - (isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0)))) * 5.0);
    float _1849 = 0.959999978542327880859375 - _545;
    float _1851 = 0.959999978542327880859375 - _546;
    float _1852 = 0.959999978542327880859375 - _547;
    float _1859 = 1.0 - _1812;
    float _1870 = (0.5 / (((_1827 * ((_1826 * _1859) + _1812)) + 9.9999999392252902907785028219223e-09) + (((_1827 * _1859) + _1812) * _1826))) * _1826;
    float _4011 = isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0));
    float _1872 = (isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0))) * (_1836 / ((_1840 * _1840) * 3.141590118408203125));
    uint _1886 = _1658 + 9u;
    float _1897 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1699].w)) * _382) * 0.949999988079071044921875);
    float _1898 = _1897 * _1897;
    float _1899 = cbLight._m0[_1699].x + _461;
    float _1900 = cbLight._m0[_1699].y + _462;
    float _1901 = cbLight._m0[_1699].z + _463;
    float _1905 = inversesqrt(dot(vec3(_1899, _1900, _1901), vec3(_1899, _1900, _1901)));
    float _1906 = _1905 * _1899;
    float _1907 = _1905 * _1900;
    float _1908 = _1905 * _1901;
    float _1909 = dot(vec3(_379, _380, _381), vec3(cbLight._m0[_1699].xyz));
    float _4022 = isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0));
    float _1912 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
    float _1913 = dot(vec3(_379, _380, _381), vec3(_1906, _1907, _1908));
    float _4033 = isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0));
    float _1916 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
    float _1917 = dot(vec3(cbLight._m0[_1699].xyz), vec3(_1906, _1907, _1908));
    float _4044 = isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0));
    float _1921 = _1898 * _1898;
    float _1925 = ((_1916 * _1916) * (_1921 + (-1.0))) + 1.0;
    float _1932 = exp2(log2(1.0 - (isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0)))) * 5.0);
    float _1939 = 1.0 - _1898;
    float _1949 = (0.5 / (((_1827 * ((_1912 * _1939) + _1898)) + 9.9999999392252902907785028219223e-09) + (((_1827 * _1939) + _1898) * _1912))) * _1912;
    float _4055 = isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0));
    float _1951 = (isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0))) * (_1921 / ((_1925 * _1925) * 3.141590118408203125));
    float _1961 = (((((_1932 * _1849) + _548) * cbLight._m0[_1886].x) * _1951) * _1681) + ((((cbLight._m0[_1798].x * _1650) * ((_1848 * _1849) + _548)) * _1872) * _1695);
    float _1962 = (((((_1932 * _1851) + _550) * cbLight._m0[_1886].y) * _1951) * _1681) + ((((cbLight._m0[_1798].y * _1651) * ((_1848 * _1851) + _550)) * _1872) * _1695);
    float _1963 = (((((_1932 * _1852) + _551) * cbLight._m0[_1886].z) * _1951) * _1681) + ((((cbLight._m0[_1798].z * _1652) * ((_1848 * _1852) + _551)) * _1872) * _1695);
    float _2025;
    float _2027;
    float _2029;
    if (_1735)
    {
        _2025 = _1961;
        _2027 = _1962;
        _2029 = _1963;
    }
    else
    {
        uint _2031 = _1658 + 2u;
        uint _2035 = _1658 + 10u;
        float _2049 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2031].w)) * _382) * 0.949999988079071044921875);
        float _2050 = _2049 * _2049;
        float _2051 = cbLight._m0[_2031].x + _461;
        float _2052 = cbLight._m0[_2031].y + _462;
        float _2053 = cbLight._m0[_2031].z + _463;
        float _2057 = inversesqrt(dot(vec3(_2051, _2052, _2053), vec3(_2051, _2052, _2053)));
        float _2058 = _2057 * _2051;
        float _2059 = _2057 * _2052;
        float _2060 = _2057 * _2053;
        float _2061 = dot(vec3(_379, _380, _381), vec3(cbLight._m0[_2031].xyz));
        float _4066 = isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0));
        float _2064 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
        float _2065 = dot(vec3(_379, _380, _381), vec3(_2058, _2059, _2060));
        float _4077 = isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0));
        float _2068 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
        float _2069 = dot(vec3(cbLight._m0[_2031].xyz), vec3(_2058, _2059, _2060));
        float _4088 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0));
        float _2073 = _2050 * _2050;
        float _2077 = ((_2068 * _2068) * (_2073 + (-1.0))) + 1.0;
        float _2084 = exp2(log2(1.0 - (isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0)))) * 5.0);
        float _2091 = 1.0 - _2050;
        float _2101 = (0.5 / (((_1827 * ((_2064 * _2091) + _2050)) + 9.9999999392252902907785028219223e-09) + (((_1827 * _2091) + _2050) * _2064))) * _2064;
        float _4099 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
        float _2103 = (isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0))) * (_2073 / ((_2077 * _2077) * 3.141590118408203125));
        float _2104 = isnan(1.0) ? _1673 : (isnan(_1673) ? 1.0 : min(_1673, 1.0));
        _2025 = (((((_2084 * _1849) + _548) * cbLight._m0[_2035].x) * _2103) * _2104) + _1961;
        _2027 = (((((_2084 * _1851) + _550) * cbLight._m0[_2035].y) * _2103) * _2104) + _1962;
        _2029 = (((((_2084 * _1852) + _551) * cbLight._m0[_2035].z) * _2103) * _2104) + _1963;
    }
    float _2139;
    float _2141;
    float _2143;
    if (_1753)
    {
        _2139 = _2025;
        _2141 = _2027;
        _2143 = _2029;
    }
    else
    {
        uint _2150 = _1658 + 3u;
        uint _2154 = _1658 + 11u;
        float _2168 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2150].w)) * _382) * 0.949999988079071044921875);
        float _2169 = _2168 * _2168;
        float _2170 = cbLight._m0[_2150].x + _461;
        float _2171 = cbLight._m0[_2150].y + _462;
        float _2172 = cbLight._m0[_2150].z + _463;
        float _2176 = inversesqrt(dot(vec3(_2170, _2171, _2172), vec3(_2170, _2171, _2172)));
        float _2177 = _2176 * _2170;
        float _2178 = _2176 * _2171;
        float _2179 = _2176 * _2172;
        float _2180 = dot(vec3(_379, _380, _381), vec3(cbLight._m0[_2150].xyz));
        float _4115 = isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0));
        float _2183 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
        float _2184 = dot(vec3(_379, _380, _381), vec3(_2177, _2178, _2179));
        float _4126 = isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0));
        float _2187 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
        float _2188 = dot(vec3(cbLight._m0[_2150].xyz), vec3(_2177, _2178, _2179));
        float _4137 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
        float _2192 = _2169 * _2169;
        float _2196 = ((_2187 * _2187) * (_2192 + (-1.0))) + 1.0;
        float _2203 = exp2(log2(1.0 - (isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0)))) * 5.0);
        float _2210 = 1.0 - _2169;
        float _2220 = (0.5 / (((_1827 * ((_2183 * _2210) + _2169)) + 9.9999999392252902907785028219223e-09) + (((_1827 * _2210) + _2169) * _2183))) * _2183;
        float _4148 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
        float _2222 = (isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0))) * (_2192 / ((_2196 * _2196) * 3.141590118408203125));
        float _2223 = isnan(1.0) ? _1674 : (isnan(_1674) ? 1.0 : min(_1674, 1.0));
        _2139 = (((((_2203 * _1849) + _548) * cbLight._m0[_2154].x) * _2222) * _2223) + _2025;
        _2141 = (((((_2203 * _1851) + _550) * cbLight._m0[_2154].y) * _2222) * _2223) + _2027;
        _2143 = (((((_2203 * _1852) + _551) * cbLight._m0[_2154].z) * _2222) * _2223) + _2029;
    }
    float _2357;
    float _2359;
    float _2361;
    float _2363;
    float _2365;
    float _2367;
    if (_1656.y == 0u)
    {
        float _2298 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2299 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2298;
        float _2300 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2298;
        float _2301 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2298;
        uvec4 _2313 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2314 = _2313.x;
        uint _2325 = uint((float(_2313.y) * floor(float(uint(cbSceneParam._m0[85u].y * _483) / _2314))) + floor(float(uint(cbSceneParam._m0[85u].x * _482) / _2314)));
        float _2335 = (log2(_2301 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2336 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
        uint _2339 = uint(isnan(14.0) ? _2336 : (isnan(_2336) ? 14.0 : min(_2336, 14.0)));
        uvec4 _2344 = texelFetch(g_lightClusterGridBuffer, int(((_2339 << 2u) + (_2325 << 6u)) >> 2u));
        uint _2345 = _2344.x;
        uint _2346 = _2313.z;
        float _2445;
        float _2447;
        float _2449;
        float _2451;
        float _2453;
        float _2455;
        if (((((1u << ((_2346 >> 4u) & 15u)) + 4294967295u) & _2345) == 0u) || ((_2346 & 240u) == 0u))
        {
            _2445 = 0.0;
            _2447 = 0.0;
            _2449 = 0.0;
            _2451 = 0.0;
            _2453 = 0.0;
            _2455 = 0.0;
        }
        else
        {
            float _2446;
            float _2448;
            float _2450;
            float _2452;
            float _2454;
            float _2456;
            float _2597 = 0.0;
            float _2598 = 0.0;
            float _2599 = 0.0;
            float _2600 = 0.0;
            float _2601 = 0.0;
            float _2602 = 0.0;
            uint _2603 = 0u;
            uint _2612;
            bool _2613;
            for (;;)
            {
                _2612 = texelFetch(g_lightClassification, int((((_2339 << 5u) + (_2325 << 9u)) + (_2603 << 2u)) >> 2u)).x;
                _2613 = _2612 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2613)
                {
                    frontier_phi_68_pred = _2599;
                    frontier_phi_68_pred_1 = _2602;
                    frontier_phi_68_pred_2 = _2601;
                    frontier_phi_68_pred_3 = _2600;
                    frontier_phi_68_pred_4 = _2598;
                    frontier_phi_68_pred_5 = _2597;
                }
                else
                {
                    float _2742;
                    float _2743;
                    float _2744;
                    float _2745;
                    float _2746;
                    float _2747;
                    uint _2748;
                    _2742 = _2597;
                    _2743 = _2598;
                    _2744 = _2599;
                    _2745 = _2600;
                    _2746 = _2601;
                    _2747 = _2602;
                    _2748 = _2612;
                    float _2669;
                    float _2670;
                    float _2671;
                    float _2672;
                    float _2673;
                    float _2674;
                    for (;;)
                    {
                        uint _2752 = uint(findLSB(_2748)) + (_2603 << 5u);
                        uint _2749 = (_2748 + 4294967295u) & _2748;
                        uint _2754 = _2752 * 48u;
                        vec4 _2768 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2754)).x, texelFetch(g_PointLightRenderingBuffer, int(_2754 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2754 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2754 + 3u)).x));
                        uint _2774 = (_2752 * 48u) + 4u;
                        vec4 _2787 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2774)).x, texelFetch(g_PointLightRenderingBuffer, int(_2774 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2774 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2774 + 3u)).x));
                        uint _2793 = (_2752 * 48u) + 8u;
                        vec3 _2804 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2793)).x, texelFetch(g_PointLightRenderingBuffer, int(_2793 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2793 + 2u)).x));
                        float _2808 = _2768.x - _2299;
                        float _2809 = _2768.y - _2300;
                        float _2810 = _2768.z - _2301;
                        float _2811 = dot(vec3(_2808, _2809, _2810), vec3(_2808, _2809, _2810));
                        float _2814 = inversesqrt(_2811);
                        float _2815 = _2814 * _2808;
                        float _2816 = _2814 * _2809;
                        float _2817 = _2814 * _2810;
                        float _2818 = dot(vec3(_503, _506, _509), vec3(_2815, _2816, _2817));
                        float _2823 = 1.0 - (_2811 * _2768.w);
                        float _4174 = isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : max(_2823, 0.0));
                        float _2824 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
                        float _2825 = sqrt(_2811) * _2787.w;
                        float _2828 = 1.39999997615814208984375 / (_2825 + 1.39999997615814208984375);
                        float _2829 = _2828 * _2828;
                        float _2832 = ((1.0 - _2829) * _2818) + _2829;
                        float _2835 = _2825 * _2825;
                        float _2839 = ((isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : max(_2832, 0.0))) * _2824) / ((_2835 * 0.699999988079071044921875) + 1.0);
                        float _2843 = (-0.0) - _2299;
                        float _2844 = (-0.0) - _2300;
                        float _2845 = (-0.0) - _2301;
                        float _2849 = inversesqrt(dot(vec3(_2843, _2844, _2845), vec3(_2843, _2844, _2845)));
                        float _2850 = _2849 * _2843;
                        float _2851 = _2849 * _2844;
                        float _2852 = _2849 * _2845;
                        float _2860 = exp2(log2(1.0 / ((_2835 * 3.5) + 5.0)) * 0.25);
                        float _2861 = 1.0 - _579;
                        float _2868 = sqrt(1.0 - ((1.0 - (_2861 * _2861)) * (1.0 - (_2860 * _2860))));
                        float _2869 = _2868 * _2868;
                        float _2870 = _2869 * _2869;
                        float _2871 = _2850 + _2815;
                        float _2872 = _2851 + _2816;
                        float _2873 = _2852 + _2817;
                        float _2877 = inversesqrt(dot(vec3(_2871, _2872, _2873), vec3(_2871, _2872, _2873)));
                        float _2881 = dot(vec3(_503, _506, _509), vec3(_2850, _2851, _2852));
                        float _4190 = isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : max(_2881, 0.0));
                        float _2884 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
                        float _2885 = dot(vec3(_503, _506, _509), vec3(_2877 * _2871, _2877 * _2872, _2877 * _2873));
                        float _4201 = isnan(0.0) ? _2885 : (isnan(_2885) ? 0.0 : max(_2885, 0.0));
                        float _2888 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
                        float _2892 = ((_2888 * _2888) * (_2870 + (-1.0))) + 1.0;
                        float _2893 = _2828 * _2869;
                        float _2894 = _2893 * _2893;
                        float _2897 = ((1.0 - _2894) * _2818) + _2894;
                        float _4212 = isnan(0.0) ? _2897 : (isnan(_2897) ? 0.0 : max(_2897, 0.0));
                        float _2898 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
                        float _2899 = 1.0 - _2869;
                        float _2909 = (0.5 / (((_2898 * ((_2884 * _2899) + _2869)) + 9.9999999392252902907785028219223e-09) + (((_2898 * _2899) + _2869) * _2884))) * _2898;
                        float _4223 = isnan(0.0) ? _2909 : (isnan(_2909) ? 0.0 : max(_2909, 0.0));
                        float _2920 = (((_2870 * 3.1415927410125732421875) * (isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0)))) / ((_2892 * _2892) * ((_2835 * 2.1991131305694580078125) + 3.141590118408203125))) * _2824;
                        _2672 = (_2839 * _2787.x) + _2745;
                        _2673 = (_2839 * _2787.y) + _2746;
                        _2674 = (_2839 * _2787.z) + _2747;
                        _2669 = (_2920 * _2804.x) + _2742;
                        _2670 = (_2920 * _2804.y) + _2743;
                        _2671 = (_2920 * _2804.z) + _2744;
                        if (_2749 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2742 = _2669;
                            _2743 = _2670;
                            _2744 = _2671;
                            _2745 = _2672;
                            _2746 = _2673;
                            _2747 = _2674;
                            _2748 = _2749;
                        }
                    }
                    frontier_phi_68_pred = _2671;
                    frontier_phi_68_pred_1 = _2674;
                    frontier_phi_68_pred_2 = _2673;
                    frontier_phi_68_pred_3 = _2672;
                    frontier_phi_68_pred_4 = _2670;
                    frontier_phi_68_pred_5 = _2669;
                }
                _2450 = frontier_phi_68_pred;
                _2456 = frontier_phi_68_pred_1;
                _2454 = frontier_phi_68_pred_2;
                _2452 = frontier_phi_68_pred_3;
                _2448 = frontier_phi_68_pred_4;
                _2446 = frontier_phi_68_pred_5;
                uint _2604 = _2603 + 1u;
                if (_2604 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2597 = _2446;
                    _2598 = _2448;
                    _2599 = _2450;
                    _2600 = _2452;
                    _2601 = _2454;
                    _2602 = _2456;
                    _2603 = _2604;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2445 = _2446;
            _2447 = _2448;
            _2449 = _2450;
            _2451 = _2452;
            _2453 = _2454;
            _2455 = _2456;
        }
        uvec4 _2459 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2460 = _2459.z;
        uint _2462 = (_2460 >> 8u) & 15u;
        float _2565;
        float _2567;
        float _2569;
        float _2571;
        float _2573;
        float _2575;
        if (((4294967295u << _2462) & _2345) == 0u)
        {
            _2565 = _2445;
            _2567 = _2447;
            _2569 = _2449;
            _2571 = _2451;
            _2573 = _2453;
            _2575 = _2455;
        }
        else
        {
            float _2590 = inversesqrt(dot(vec3(_2299, _2300, _2301), vec3(_2299, _2300, _2301)));
            float _2591 = _2590 * _2299;
            float _2592 = _2590 * _2300;
            float _2593 = _2590 * _2301;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2462 < ((_2460 >> 12u) & 15u))
            {
                float _2566;
                float _2568;
                float _2570;
                float _2572;
                float _2574;
                float _2576;
                float _2725 = _2445;
                float _2726 = _2447;
                float _2727 = _2449;
                float _2728 = _2451;
                float _2729 = _2453;
                float _2730 = _2455;
                uint _2731 = _2462;
                uint _2740;
                bool _2741;
                for (;;)
                {
                    _2740 = texelFetch(g_lightClassification, int((((_2339 << 5u) + (_2325 << 9u)) + (_2731 << 2u)) >> 2u)).x;
                    _2741 = _2740 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2741)
                    {
                        frontier_phi_79_pred = _2730;
                        frontier_phi_79_pred_1 = _2729;
                        frontier_phi_79_pred_2 = _2728;
                        frontier_phi_79_pred_3 = _2727;
                        frontier_phi_79_pred_4 = _2726;
                        frontier_phi_79_pred_5 = _2725;
                    }
                    else
                    {
                        float _2934;
                        float _2935;
                        float _2936;
                        float _2937;
                        float _2938;
                        float _2939;
                        float _3230;
                        float _3231;
                        float _3232;
                        float _3233;
                        float _3234;
                        float _3235;
                        float _2947 = _2725;
                        float _2948 = _2726;
                        float _2949 = _2727;
                        float _2950 = _2728;
                        float _2951 = _2729;
                        float _2952 = _2730;
                        uint _2953 = _2740;
                        uint _2954;
                        vec4 _2979;
                        float _2980;
                        vec4 _2995;
                        vec3 _3007;
                        vec4 _3023;
                        vec4 _3039;
                        float _3086;
                        bool _3087;
                        for (;;)
                        {
                            uint _2964 = ((_2731 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2953));
                            _2954 = (_2953 + 4294967295u) & _2953;
                            uint _2966 = _2964 * 40u;
                            _2979 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2966)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2966 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2966 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2966 + 3u)).x));
                            _2980 = _2979.w;
                            uint _2982 = (_2964 * 40u) + 4u;
                            _2995 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2982)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2982 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2982 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2982 + 3u)).x));
                            uint _2997 = (_2964 * 40u) + 8u;
                            _3007 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2997)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2997 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2997 + 2u)).x));
                            uint _3010 = (_2964 * 40u) + 16u;
                            _3023 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3010)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3010 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3010 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3010 + 3u)).x));
                            uint _3026 = (_2964 * 40u) + 20u;
                            _3039 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3026)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 3u)).x));
                            uint _3042 = (_2964 * 40u) + 24u;
                            vec4 _3055 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3042)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 3u)).x));
                            uint _3061 = (_2964 * 40u) + 28u;
                            vec4 _3074 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3061)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3061 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3061 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3061 + 3u)).x));
                            _3086 = fma(_2301, _3074.z, fma(_2300, _3074.y, _3074.x * _2299)) + _3074.w;
                            _3087 = !((fma(_2301, _3055.z, fma(_2300, _3055.y, _3055.x * _2299)) + _3055.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3087)
                            {
                                float _3114 = _2979.x - _2299;
                                float _3115 = _2979.y - _2300;
                                float _3116 = _2979.z - _2301;
                                float _3117 = dot(vec3(_3114, _3115, _3116), vec3(_3114, _3115, _3116));
                                float _3120 = inversesqrt(_3117);
                                float _3121 = _3120 * _3114;
                                float _3122 = _3120 * _3115;
                                float _3123 = _3120 * _3116;
                                float _3127 = 1.0 - (_3117 / (_2980 * _2980));
                                float _4234 = isnan(0.0) ? _3127 : (isnan(_3127) ? 0.0 : max(_3127, 0.0));
                                float _3128 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
                                float _3132 = sqrt(_3117) * _2995.w;
                                float _3134 = 1.39999997615814208984375 / (_3132 + 1.39999997615814208984375);
                                float _3135 = _3134 * _3134;
                                float _3138 = ((1.0 - _3135) * dot(vec3(_3121, _3122, _3123), vec3(_503, _506, _509))) + _3135;
                                float _3141 = _3132 * _3132;
                                float _3145 = (fma(_2301, _3023.z, fma(_2300, _3023.y, _3023.x * _2299)) + _3023.w) / _3086;
                                float _3146 = (fma(_2301, _3039.z, fma(_2300, _3039.y, _3039.x * _2299)) + _3039.w) / _3086;
                                float _3150 = 1.0 - dot(vec2(_3145, _3146), vec2(_3145, _3146));
                                float _4250 = isnan(0.0) ? _3150 : (isnan(_3150) ? 0.0 : max(_3150, 0.0));
                                float _3151 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
                                float _3152 = _3151 * (((isnan(0.0) ? _3138 : (isnan(_3138) ? 0.0 : max(_3138, 0.0))) * _3128) / ((_3141 * 0.699999988079071044921875) + 1.0));
                                float _3164 = exp2(log2(1.0 / ((_3141 * 3.5) + 5.0)) * 0.25);
                                float _3165 = 1.0 - _579;
                                float _3172 = sqrt(1.0 - ((1.0 - (_3165 * _3165)) * (1.0 - (_3164 * _3164))));
                                float _3173 = _3172 * _3172;
                                float _3174 = _3173 * _3173;
                                float _3175 = _3121 - _2591;
                                float _3176 = _3122 - _2592;
                                float _3177 = _3123 - _2593;
                                float _3181 = inversesqrt(dot(vec3(_3175, _3176, _3177), vec3(_3175, _3176, _3177)));
                                float _3185 = dot(vec3(_503, _506, _509), vec3((-0.0) - _2591, (-0.0) - _2592, (-0.0) - _2593));
                                float _4261 = isnan(0.0) ? _3185 : (isnan(_3185) ? 0.0 : max(_3185, 0.0));
                                float _3188 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
                                float _3189 = dot(vec3(_503, _506, _509), vec3(_3181 * _3175, _3181 * _3176, _3181 * _3177));
                                float _4272 = isnan(0.0) ? _3189 : (isnan(_3189) ? 0.0 : max(_3189, 0.0));
                                float _3192 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
                                float _3196 = ((_3192 * _3192) * (_3174 + (-1.0))) + 1.0;
                                float _3197 = _3134 * _3173;
                                float _3198 = _3197 * _3197;
                                float _3204 = ((1.0 - _3198) * dot(vec3(_503, _506, _509), vec3(_3121, _3122, _3123))) + _3198;
                                float _4283 = isnan(0.0) ? _3204 : (isnan(_3204) ? 0.0 : max(_3204, 0.0));
                                float _3205 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
                                float _3206 = 1.0 - _3173;
                                float _3216 = (0.5 / (((_3205 * ((_3188 * _3206) + _3173)) + 9.9999999392252902907785028219223e-09) + (((_3205 * _3206) + _3173) * _3188))) * _3205;
                                float _4294 = isnan(0.0) ? _3216 : (isnan(_3216) ? 0.0 : max(_3216, 0.0));
                                float _3226 = (_3151 * _3128) * (((_3174 * 3.1415927410125732421875) * (isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0)))) / ((_3196 * _3196) * ((_3141 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3152 * _2995.z;
                                frontier_phi_85_pred_1 = _3152 * _2995.y;
                                frontier_phi_85_pred_2 = _3152 * _2995.x;
                                frontier_phi_85_pred_3 = _3226 * _3007.z;
                                frontier_phi_85_pred_4 = _3226 * _3007.y;
                                frontier_phi_85_pred_5 = _3226 * _3007.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3235 = frontier_phi_85_pred;
                            _3234 = frontier_phi_85_pred_1;
                            _3233 = frontier_phi_85_pred_2;
                            _3232 = frontier_phi_85_pred_3;
                            _3231 = frontier_phi_85_pred_4;
                            _3230 = frontier_phi_85_pred_5;
                            _2937 = _3233 + _2950;
                            _2938 = _3234 + _2951;
                            _2939 = _3235 + _2952;
                            _2934 = _3230 + _2947;
                            _2935 = _3231 + _2948;
                            _2936 = _3232 + _2949;
                            if (_2954 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2947 = _2934;
                                _2948 = _2935;
                                _2949 = _2936;
                                _2950 = _2937;
                                _2951 = _2938;
                                _2952 = _2939;
                                _2953 = _2954;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2939;
                        frontier_phi_79_pred_1 = _2938;
                        frontier_phi_79_pred_2 = _2937;
                        frontier_phi_79_pred_3 = _2936;
                        frontier_phi_79_pred_4 = _2935;
                        frontier_phi_79_pred_5 = _2934;
                    }
                    _2576 = frontier_phi_79_pred;
                    _2574 = frontier_phi_79_pred_1;
                    _2572 = frontier_phi_79_pred_2;
                    _2570 = frontier_phi_79_pred_3;
                    _2568 = frontier_phi_79_pred_4;
                    _2566 = frontier_phi_79_pred_5;
                    uint _2732 = _2731 + 1u;
                    if (_2732 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2725 = _2566;
                        _2726 = _2568;
                        _2727 = _2570;
                        _2728 = _2572;
                        _2729 = _2574;
                        _2730 = _2576;
                        _2731 = _2732;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2572;
                frontier_phi_60_61_ladder_1 = _2576;
                frontier_phi_60_61_ladder_2 = _2574;
                frontier_phi_60_61_ladder_3 = _2570;
                frontier_phi_60_61_ladder_4 = _2568;
                frontier_phi_60_61_ladder_5 = _2566;
            }
            else
            {
                frontier_phi_60_61_ladder = _2451;
                frontier_phi_60_61_ladder_1 = _2455;
                frontier_phi_60_61_ladder_2 = _2453;
                frontier_phi_60_61_ladder_3 = _2449;
                frontier_phi_60_61_ladder_4 = _2447;
                frontier_phi_60_61_ladder_5 = _2445;
            }
            _2565 = frontier_phi_60_61_ladder_5;
            _2567 = frontier_phi_60_61_ladder_4;
            _2569 = frontier_phi_60_61_ladder_3;
            _2571 = frontier_phi_60_61_ladder;
            _2573 = frontier_phi_60_61_ladder_2;
            _2575 = frontier_phi_60_61_ladder_1;
        }
        float _2580 = isnan(1.0) ? _563 : (isnan(_563) ? 1.0 : min(_563, 1.0));
        _2357 = (_2580 * _2571) + _1791;
        _2359 = (_2580 * _2573) + _1793;
        _2361 = (_2580 * _2575) + _1795;
        _2363 = ((_2565 * _548) * _2580) + _2139;
        _2365 = ((_2567 * _550) * _2580) + _2141;
        _2367 = ((_2569 * _551) * _2580) + _2143;
    }
    else
    {
        _2357 = _1791;
        _2359 = _1793;
        _2361 = _1795;
        _2363 = _2139;
        _2365 = _2141;
        _2367 = _2143;
    }
    float _4310 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _4321 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _4332 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _2384 = ((isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0))) * (_2357 + ((isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0))) * _563))) + ((_2363 + ((isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0))) * _1404)) * cbPerFrame._m0[3u].x);
    float _2385 = ((isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0))) * (_2359 + ((isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0))) * _563))) + ((_2365 + ((isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0))) * _1404)) * cbPerFrame._m0[3u].x);
    float _2386 = ((isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0))) * (_2361 + ((isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0))) * _563))) + ((_2367 + ((isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0))) * _1404)) * cbPerFrame._m0[3u].x);
    uint _2387 = _522 + 6u;
    float _2395 = _482 / cbSceneParam._m0[86u].x;
    float _2396 = _483 / cbSceneParam._m0[86u].y;
    vec4 _2410 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2395, _2396, (log2((isnan(cbSceneParam._m0[77u].w) ? _402 : (isnan(_402) ? cbSceneParam._m0[77u].w : min(_402, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2412 = _2410.x;
    float _2413 = _2410.y;
    float _2414 = _2410.z;
    float _2415 = _2410.w;
    float _2507;
    float _2509;
    float _2511;
    float _2513;
    if (_402 > cbSceneParam._m0[78u].w)
    {
        float _2470 = isnan(_402) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _402 : min(cbSceneParam._m0[80u].w, _402));
        float _2471 = _2470 / _402;
        float _2482 = _2471 * _454;
        float _2483 = _455 * _2471;
        float _2484 = (-0.0) - _2483;
        float _2485 = _2471 * _456;
        float _2487 = (cbSceneParam._m0[77u].w * _2484) / _2470;
        float _2488 = _2487 + cbSceneParam._m0[79u].w;
        float _2489 = cbSceneParam._m0[79u].w - _2483;
        float _2495 = sqrt(((_2482 * _2482) + (_2483 * _2483)) + (_2485 * _2485));
        float _2498 = (1.0 - (cbSceneParam._m0[77u].w / _2470)) * _2495;
        float _2503 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2505 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2682;
        if (abs((_2484 - _2487) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2682 = ((((_2488 > 0.0) ? exp2(_2503 * _2488) : (2.0 - exp2(_2505 * _2488))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2498;
        }
        else
        {
            float _2626 = 1.0 / cbSceneParam._m0[80u].x;
            float _2627 = isnan(_2489) ? _2488 : (isnan(_2488) ? _2489 : max(_2488, _2489));
            float _2628 = isnan(_2489) ? _2488 : (isnan(_2488) ? _2489 : min(_2488, _2489));
            float _2637 = isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : min(_2627, 0.0));
            float _2638 = isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : min(_2628, 0.0));
            _2682 = ((abs(_2495 / _2484) * cbSceneParam._m0[80u].y) * ((((_2637 - _2638) * 2.0) - ((exp2(_2503 * (isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0)))) - exp2(_2503 * (isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : max(_2628, 0.0))))) * _2626)) - ((exp2(_2505 * _2637) - exp2(_2505 * _2638)) * _2626))) + (_2498 * cbSceneParam._m0[80u].z);
        }
        vec4 _2684 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2395, _2396, 1.0), 0.0);
        float _2693 = exp2((_2682 * (-1.44269502162933349609375)) * (1.0 - _2684.w));
        float _2694 = log2(_2693);
        float _2710 = log2(_2415);
        _2507 = (exp2(_2710 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2694 * cbSceneParam._m0[78u].x)) * _2684.x) / cbSceneParam._m0[78u].x)) + _2412;
        _2509 = (exp2(_2710 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2694 * cbSceneParam._m0[78u].y)) * _2684.y) / cbSceneParam._m0[78u].y)) + _2413;
        _2511 = (exp2(_2710 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2694 * cbSceneParam._m0[78u].z)) * _2684.z) / cbSceneParam._m0[78u].z)) + _2414;
        _2513 = _2693 * _2415;
    }
    else
    {
        _2507 = _2412;
        _2509 = _2413;
        _2511 = _2414;
        _2513 = _2415;
    }
    bool _2720;
    vec4 _2523;
    vec4 _2545;
    float _2547;
    float _2551;
    float _2552;
    float _2553;
    float _2554;
    bool _2564;
    for (;;)
    {
        _2523 = cbMatDynParam._m0[0u];
        float _2525 = roundEven(_2523.y);
        bool _2526 = _2525 == 3.0;
        float _2527 = log2(_2513);
        float _2534 = exp2(_2527 * cbSceneParam._m0[78u].x) * _2384;
        float _2535 = exp2(_2527 * cbSceneParam._m0[78u].y) * _2385;
        float _2536 = exp2(_2527 * cbSceneParam._m0[78u].z) * _2386;
        float _2543 = _470 + (-0.5);
        _2545 = cbMtdParam._m0[1u];
        _2547 = _2545.y * _2543;
        float _2550 = (_2525 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2551 = _2550 * (_2526 ? _2534 : (_2534 + (cbSceneParam._m0[72u].w * _2507)));
        _2552 = _2550 * (_2526 ? _2535 : (_2535 + (cbSceneParam._m0[72u].w * _2509)));
        _2553 = _2550 * (_2526 ? _2536 : (_2536 + (cbSceneParam._m0[72u].w * _2511)));
        _2554 = _2543 * 0.999000012874603271484375;
        _2564 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2564)
        {
            if ((cbInstanceData._m0[_522 + 7u].x + _2554) < 0.5)
            {
                _2720 = true;
                break;
            }
        }
        uint _2661 = _524 + uint(_2523.w);
        if ((cbInstanceData._m0[_2661].w < 1.0) && ((cbInstanceData._m0[_2661].w + _2554) < 0.5))
        {
            _2720 = true;
            break;
        }
        if ((_2547 + _252) < _2545.x)
        {
            _2720 = true;
            break;
        }
        _2720 = false;
        break;
    }
    float _2925;
    if (_2720)
    {
        discard_state = true;
        _2925 = 0.0;
    }
    else
    {
        _2925 = cbInstanceData._m0[_2387].w;
    }
    SV_Target.x = _2551;
    SV_Target.y = _2552;
    SV_Target.z = _2553;
    SV_Target.w = _2925;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2387].w;
    discard_exit();
}


