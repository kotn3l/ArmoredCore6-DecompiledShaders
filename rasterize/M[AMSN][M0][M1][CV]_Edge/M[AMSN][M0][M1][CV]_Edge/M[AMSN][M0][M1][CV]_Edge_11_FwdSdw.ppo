#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _942;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _196 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _203 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _204 = _203 * NORMAL.x;
    float _205 = _203 * NORMAL.y;
    float _206 = _203 * NORMAL.z;
    float _210 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _218;
    float _219;
    float _220;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _218 = (-0.0) - _204;
        _219 = (-0.0) - _205;
        _220 = (-0.0) - _206;
    }
    else
    {
        _218 = _204;
        _219 = _205;
        _220 = _206;
    }
    vec4 _246 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _252 = _246.x * cbMtdParam._m0[9u].x;
    float _253 = _246.y * cbMtdParam._m0[9u].y;
    float _254 = _246.z * cbMtdParam._m0[9u].z;
    vec4 _266 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _270 = _266.z;
    float _274 = (_266.x * 2.0) + (-1.0);
    float _276 = (_266.y * 2.0) + (-1.0);
    float _277 = dot(vec2(_274, _276), vec2(_274, _276));
    float _3559 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    float _283 = sqrt(1.0 - (isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0))));
    vec4 _300 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w));
    float _312 = (TEXCOORD_3.x - ((cbMtdParam._m0[12u].y * (1.0 - TEXCOORD_3.x)) * ((_300.x * cbMtdParam._m0[12u].y) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[12u].z + 1.0);
    float _3570 = isnan(0.0) ? _312 : (isnan(_312) ? 0.0 : max(_312, 0.0));
    float _313 = isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0));
    float _320 = (_313 * (cbMtdParam._m0[10u].x - _252)) + _252;
    float _321 = (_313 * (cbMtdParam._m0[10u].y - _253)) + _253;
    float _322 = (_313 * (cbMtdParam._m0[10u].z - _254)) + _254;
    vec4 _334 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _336 = _334.x;
    float _338 = _336 - (_336 * _313);
    vec4 _350 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _357 = (_350.x * 2.0) + (-1.0);
    float _358 = (_350.y * 2.0) + (-1.0);
    float _359 = dot(vec2(_357, _358), vec2(_357, _358));
    float _3581 = isnan(0.0) ? _359 : (isnan(_359) ? 0.0 : max(_359, 0.0));
    float _367 = (_313 * (_350.z - _270)) + _270;
    float _379 = (((_357 - _274) + (cbMtdParam._m0[12u].w * _274)) * _313) + _274;
    float _380 = (((_358 - _276) + (cbMtdParam._m0[12u].w * _276)) * _313) + _276;
    float _381 = (_313 * (sqrt(1.0 - (isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0)))) - _283)) + _283;
    float _384 = fma(_381, _218, fma(_380, _210 * TANGENT.x, (_196 * _188) * _379));
    float _387 = fma(_381, _219, fma(_380, _210 * TANGENT.y, (_196 * _189) * _379));
    float _390 = fma(_381, _220, fma(_380, _210 * TANGENT.z, (_196 * _190) * _379));
    float _394 = inversesqrt(dot(vec3(_384, _387, _390), vec3(_384, _387, _390)));
    float _395 = _394 * _384;
    float _396 = _394 * _387;
    float _397 = _394 * _390;
    float _3592 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _398 = isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0));
    float _3603 = isnan(0.0) ? _320 : (isnan(_320) ? 0.0 : max(_320, 0.0));
    float _3614 = isnan(0.0) ? _321 : (isnan(_321) ? 0.0 : max(_321, 0.0));
    float _3625 = isnan(0.0) ? _322 : (isnan(_322) ? 0.0 : max(_322, 0.0));
    float _3636 = isnan(0.0) ? _338 : (isnan(_338) ? 0.0 : max(_338, 0.0));
    float _402 = isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0));
    float _418 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _460 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _470 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _460);
    float _471 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _460);
    float _472 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _460);
    float _476 = inversesqrt(dot(vec3(_470, _471, _472), vec3(_470, _471, _472)));
    float _477 = _470 * _476;
    float _478 = _471 * _476;
    float _479 = _472 * _476;
    float _485 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _486 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _507 = fma(_397, cbSceneParam._m0[5u].z, fma(_396, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _395));
    float _510 = fma(_397, cbSceneParam._m0[6u].z, fma(_396, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _395));
    float _513 = fma(_397, cbSceneParam._m0[7u].z, fma(_396, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _395));
    uint _526 = uint(roundEven(NORMAL.w)) * 13u;
    uint _529 = (_526 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _535 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0)))) * cbInstanceData._m0[_529].x;
    float _536 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0)))) * cbInstanceData._m0[_529].y;
    float _537 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0)))) * cbInstanceData._m0[_529].z;
    float _3647 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _538 = isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0));
    float _3658 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    float _539 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
    float _3669 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _540 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
    float _541 = 1.0 - _402;
    float _542 = _538 * _541;
    float _543 = _539 * _541;
    float _544 = _540 * _541;
    float _549 = (_538 + (-0.039999999105930328369140625)) * _402;
    float _550 = (_539 + (-0.039999999105930328369140625)) * _402;
    float _551 = (_540 + (-0.039999999105930328369140625)) * _402;
    float _552 = _549 + 0.039999999105930328369140625;
    float _554 = _550 + 0.039999999105930328369140625;
    float _555 = _551 + 0.039999999105930328369140625;
    vec4 _564 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _485, cbSceneParam._m0[86u].y * _486));
    float _567 = _564.x * TEXCOORD_3.w;
    float _568 = dot(vec3(_395, _396, _397), vec3(_477, _478, _479));
    float _571 = _568 * 2.0;
    float _575 = (_571 * _395) - _477;
    float _576 = (_571 * _396) - _478;
    float _577 = (_571 * _397) - _479;
    float _581 = abs(dot(vec3(_477, _478, _479), vec3(_395, _396, _397)));
    float _3680 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _583 = sqrt(_398);
    float _596 = exp2((_583 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_583 * 3.0));
    float _602 = (1.0 - _596) * ((_583 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _603 = _596 * _583;
    float _631 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _635 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _639 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _941;
    float _943;
    float _944;
    float _945;
    float _946;
    float _947;
    float _948;
    float _949;
    float _950;
    float _951;
    float _952;
    float _953;
    float _954;
    float _955;
    float _956;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _666 = fma(_639, cbModelParam._m0[26u].z, fma(_635, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _631));
        float _670 = fma(_639, cbModelParam._m0[27u].z, fma(_635, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _631));
        float _674 = fma(_639, cbModelParam._m0[28u].z, fma(_635, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _631));
        float _699 = _631 + _395;
        float _700 = _635 + _396;
        float _701 = _639 + _397;
        float _711 = fma(_701, cbModelParam._m0[26u].z, fma(_700, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _699)) - _666;
        float _712 = fma(_701, cbModelParam._m0[27u].z, fma(_700, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _699)) - _670;
        float _713 = fma(_701, cbModelParam._m0[28u].z, fma(_700, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _699)) - _674;
        float _717 = inversesqrt(dot(vec3(_711, _712, _713), vec3(_711, _712, _713)));
        float _730 = ((_717 * _711) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_666 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _731 = ((_717 * _712) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_670 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _732 = ((_717 * _713) / cbModelParam._m0[34u].z) + ((((((_674 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _735 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_730, _731, _732), 0.0);
        vec4 _742 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_730, _731, _732), 0.0);
        vec4 _749 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_730, _731, _732), 0.0);
        vec4 _756 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_730, _731, _732), 0.0);
        float _769 = exp2((_735.w + (-0.5)) * 20.0) * 2.0;
        float _770 = _769 * (_735.x + (-0.5));
        float _771 = _769 * (_735.y + (-0.5));
        float _772 = _769 * (_735.z + (-0.5));
        float _779 = exp2((_742.w + (-0.5)) * 20.0) * 2.0;
        float _780 = _779 * (_742.x + (-0.5));
        float _781 = _779 * (_742.y + (-0.5));
        float _782 = _779 * (_742.z + (-0.5));
        float _789 = exp2((_749.w + (-0.5)) * 20.0) * 2.0;
        float _790 = _789 * (_749.x + (-0.5));
        float _791 = _789 * (_749.y + (-0.5));
        float _792 = _789 * (_749.z + (-0.5));
        float _799 = exp2((_756.w + (-0.5)) * 20.0) * 2.0;
        float _800 = _799 * (_756.x + (-0.5));
        float _801 = _799 * (_756.y + (-0.5));
        float _802 = _799 * (_756.z + (-0.5));
        float _803 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
        float _804 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
        float _805 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
        float _806 = _770 * 0.5;
        float _807 = _780 * 0.5;
        float _808 = _790 * 0.5;
        float _809 = dot(vec3(_806, _807, _808), vec3(_806, _807, _808));
        float _814 = (_809 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_809);
        float _823 = (dot(vec3(_395, _396, _397), vec3(_814 * _806, _814 * _807, _814 * _808)) + 1.0) * 0.5;
        float _3706 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
        float _833 = sqrt(((_807 * _807) + (_806 * _806)) + (_808 * _808)) / (_803 + 9.9999997473787516355514526367188e-06);
        float _3717 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
        float _834 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
        float _835 = _834 * 2.0;
        float _839 = (1.0 - _834) / (_834 + 1.0);
        float _3728 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
        float _840 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
        float _849 = ((((1.0 - _840) * (_835 + 2.0)) * exp2(log2(isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0))) * (_835 + 1.0))) + _840) * _803;
        float _850 = _771 * 0.5;
        float _851 = _781 * 0.5;
        float _852 = _791 * 0.5;
        float _853 = dot(vec3(_850, _851, _852), vec3(_850, _851, _852));
        float _858 = (_853 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_853);
        float _866 = (dot(vec3(_395, _396, _397), vec3(_858 * _850, _858 * _851, _858 * _852)) + 1.0) * 0.5;
        float _3739 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
        float _875 = sqrt(((_851 * _851) + (_850 * _850)) + (_852 * _852)) / (_804 + 9.9999997473787516355514526367188e-06);
        float _3750 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
        float _876 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
        float _877 = _876 * 2.0;
        float _881 = (1.0 - _876) / (_876 + 1.0);
        float _3761 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
        float _882 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
        float _891 = ((((1.0 - _882) * (_877 + 2.0)) * exp2(log2(isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0))) * (_877 + 1.0))) + _882) * _804;
        float _892 = _772 * 0.5;
        float _893 = _782 * 0.5;
        float _894 = _792 * 0.5;
        float _895 = dot(vec3(_892, _893, _894), vec3(_892, _893, _894));
        float _900 = (_895 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_895);
        float _908 = (dot(vec3(_395, _396, _397), vec3(_900 * _892, _900 * _893, _900 * _894)) + 1.0) * 0.5;
        float _3772 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
        float _917 = sqrt(((_893 * _893) + (_892 * _892)) + (_894 * _894)) / (_805 + 9.9999997473787516355514526367188e-06);
        float _3783 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
        float _918 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
        float _919 = _918 * 2.0;
        float _923 = (1.0 - _918) / (_918 + 1.0);
        float _3794 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
        float _924 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
        float _933 = ((((1.0 - _924) * (_919 + 2.0)) * exp2(log2(isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0))) * (_919 + 1.0))) + _924) * _805;
        _941 = _772;
        _943 = _771;
        _944 = _770;
        _945 = _782;
        _946 = _781;
        _947 = _780;
        _948 = _792;
        _949 = _791;
        _950 = _790;
        _951 = _805;
        _952 = _804;
        _953 = _803;
        _954 = cbModelParam._m0[36u].z * (isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0)));
        _955 = cbModelParam._m0[36u].z * (isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0)));
        _956 = cbModelParam._m0[36u].z * (isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0)));
    }
    else
    {
        _941 = _942;
        _943 = _942;
        _944 = _942;
        _945 = _942;
        _946 = _942;
        _947 = _942;
        _948 = _942;
        _949 = _942;
        _950 = _942;
        _951 = _942;
        _952 = _942;
        _953 = _942;
        _954 = 0.0;
        _955 = 0.0;
        _956 = 0.0;
    }
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _982 = fma(_639, cbModelParam._m0[30u].z, fma(_635, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _631));
        float _986 = fma(_639, cbModelParam._m0[31u].z, fma(_635, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _631));
        float _990 = fma(_639, cbModelParam._m0[32u].z, fma(_635, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _631));
        float _1013 = _631 + _395;
        float _1014 = _635 + _396;
        float _1015 = _639 + _397;
        float _1025 = fma(_1015, cbModelParam._m0[30u].z, fma(_1014, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1013)) - _982;
        float _1026 = fma(_1015, cbModelParam._m0[31u].z, fma(_1014, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1013)) - _986;
        float _1027 = fma(_1015, cbModelParam._m0[32u].z, fma(_1014, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1013)) - _990;
        float _1031 = inversesqrt(dot(vec3(_1025, _1026, _1027), vec3(_1025, _1026, _1027)));
        float _1044 = ((_1031 * _1025) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_982 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1045 = ((_1031 * _1026) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_986 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1046 = ((_1031 * _1027) / cbModelParam._m0[35u].z) + ((((((_990 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1048 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1044, _1045, _1046), 0.0);
        vec4 _1055 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1044, _1045, _1046), 0.0);
        vec4 _1062 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1044, _1045, _1046), 0.0);
        vec4 _1069 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1044, _1045, _1046), 0.0);
        float _1081 = exp2((_1048.w + (-0.5)) * 20.0) * 2.0;
        float _1082 = _1081 * (_1048.x + (-0.5));
        float _1083 = _1081 * (_1048.y + (-0.5));
        float _1084 = _1081 * (_1048.z + (-0.5));
        float _1091 = exp2((_1055.w + (-0.5)) * 20.0) * 2.0;
        float _1092 = _1091 * (_1055.x + (-0.5));
        float _1093 = _1091 * (_1055.y + (-0.5));
        float _1094 = _1091 * (_1055.z + (-0.5));
        float _1101 = exp2((_1062.w + (-0.5)) * 20.0) * 2.0;
        float _1102 = _1101 * (_1062.x + (-0.5));
        float _1103 = _1101 * (_1062.y + (-0.5));
        float _1104 = _1101 * (_1062.z + (-0.5));
        float _1111 = exp2((_1069.w + (-0.5)) * 20.0) * 2.0;
        float _1112 = _1111 * (_1069.x + (-0.5));
        float _1113 = _1111 * (_1069.y + (-0.5));
        float _1114 = _1111 * (_1069.z + (-0.5));
        float _1115 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1116 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1117 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1118 = _1082 * 0.5;
        float _1119 = _1092 * 0.5;
        float _1120 = _1102 * 0.5;
        float _1121 = dot(vec3(_1118, _1119, _1120), vec3(_1118, _1119, _1120));
        float _1126 = (_1121 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1121);
        float _1134 = (dot(vec3(_395, _396, _397), vec3(_1126 * _1118, _1126 * _1119, _1126 * _1120)) + 1.0) * 0.5;
        float _3835 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1143 = sqrt(((_1119 * _1119) + (_1118 * _1118)) + (_1120 * _1120)) / (_1115 + 9.9999997473787516355514526367188e-06);
        float _3846 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1144 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
        float _1145 = _1144 * 2.0;
        float _1149 = (1.0 - _1144) / (_1144 + 1.0);
        float _3857 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1150 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
        float _1159 = ((((1.0 - _1150) * (_1145 + 2.0)) * exp2(log2(isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0))) * (_1145 + 1.0))) + _1150) * _1115;
        float _1160 = _1083 * 0.5;
        float _1161 = _1093 * 0.5;
        float _1162 = _1103 * 0.5;
        float _1163 = dot(vec3(_1160, _1161, _1162), vec3(_1160, _1161, _1162));
        float _1168 = (_1163 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1163);
        float _1176 = (dot(vec3(_395, _396, _397), vec3(_1168 * _1160, _1168 * _1161, _1168 * _1162)) + 1.0) * 0.5;
        float _3868 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1185 = sqrt(((_1161 * _1161) + (_1160 * _1160)) + (_1162 * _1162)) / (_1116 + 9.9999997473787516355514526367188e-06);
        float _3879 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1186 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
        float _1187 = _1186 * 2.0;
        float _1191 = (1.0 - _1186) / (_1186 + 1.0);
        float _3890 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1192 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
        float _1201 = ((((1.0 - _1192) * (_1187 + 2.0)) * exp2(log2(isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0))) * (_1187 + 1.0))) + _1192) * _1116;
        float _1202 = _1084 * 0.5;
        float _1203 = _1094 * 0.5;
        float _1204 = _1104 * 0.5;
        float _1205 = dot(vec3(_1202, _1203, _1204), vec3(_1202, _1203, _1204));
        float _1210 = (_1205 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1205);
        float _1218 = (dot(vec3(_395, _396, _397), vec3(_1210 * _1202, _1210 * _1203, _1210 * _1204)) + 1.0) * 0.5;
        float _3901 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1227 = sqrt(((_1203 * _1203) + (_1202 * _1202)) + (_1204 * _1204)) / (_1117 + 9.9999997473787516355514526367188e-06);
        float _3912 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1228 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
        float _1229 = _1228 * 2.0;
        float _1233 = (1.0 - _1228) / (_1228 + 1.0);
        float _3923 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1234 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
        float _1243 = ((((1.0 - _1234) * (_1229 + 2.0)) * exp2(log2(isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0))) * (_1229 + 1.0))) + _1234) * _1117;
        _1251 = _1084;
        _1252 = _1083;
        _1253 = _1082;
        _1254 = _1094;
        _1255 = _1093;
        _1256 = _1092;
        _1257 = _1104;
        _1258 = _1103;
        _1259 = _1102;
        _1260 = _1117;
        _1261 = _1116;
        _1262 = _1115;
        _1263 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0)));
        _1264 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0)));
        _1265 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0)));
    }
    else
    {
        _1251 = _942;
        _1252 = _942;
        _1253 = _942;
        _1254 = _942;
        _1255 = _942;
        _1256 = _942;
        _1257 = _942;
        _1258 = _942;
        _1259 = _942;
        _1260 = _942;
        _1261 = _942;
        _1262 = _942;
        _1263 = 0.0;
        _1264 = 0.0;
        _1265 = 0.0;
    }
    float _1275 = (cbModelParam._m0[1u].x * (_1263 - _954)) + _954;
    float _1276 = (cbModelParam._m0[1u].x * (_1264 - _955)) + _955;
    float _1277 = (cbModelParam._m0[1u].x * (_1265 - _956)) + _956;
    float _1298 = fma(_1277, cbSceneParam._m0[89u].z, fma(_1276, cbSceneParam._m0[89u].y, _1275 * cbSceneParam._m0[89u].x));
    float _1301 = fma(_1277, cbSceneParam._m0[90u].z, fma(_1276, cbSceneParam._m0[90u].y, _1275 * cbSceneParam._m0[90u].x));
    float _1304 = fma(_1277, cbSceneParam._m0[91u].z, fma(_1276, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1275));
    float _1319 = _575 * 0.5;
    float _1320 = _576 * 0.5;
    float _1321 = _577 * 0.5;
    float _1322 = dot(vec4(_1319, _1320, _1321, 1.0), vec4(_1253, _1256, _1259, _1262));
    float _1325 = dot(vec4(_1319, _1320, _1321, 1.0), vec4(_1252, _1255, _1258, _1261));
    float _1328 = dot(vec4(_1319, _1320, _1321, 1.0), vec4(_1251, _1254, _1257, _1260));
    float _1362;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1335 = dot(vec4(_1319, _1320, _1321, 1.0), vec4(_941, _945, _948, _951));
        float _1339 = dot(vec4(_1319, _1320, _1321, 1.0), vec4(_943, _946, _949, _952));
        float _1343 = dot(vec4(_1319, _1320, _1321, 1.0), vec4(_944, _947, _950, _953));
        float _1350 = dot(vec4(cbModelParam._m0[39u]), vec4(_1319, _1320, _1321, 1.0));
        _1362 = dot(vec3(isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0)), isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0)), isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1350) ? 0.0 : (isnan(0.0) ? _1350 : max(0.0, _1350))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1362 = 1.0;
    }
    float _1373;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1364 = dot(vec4(cbModelParam._m0[40u]), vec4(_1319, _1320, _1321, 1.0));
        _1373 = dot(vec3(isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0)), isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0)), isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1364) ? 0.0 : (isnan(0.0) ? _1364 : max(0.0, _1364))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1373 = 1.0;
    }
    float _1377 = (_1373 * cbModelParam._m0[1u].x) + (_1362 * (1.0 - cbModelParam._m0[1u].x));
    float _1387 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _398);
    float _1388 = isnan(_1387) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1387 : min(cbModelParam._m0[25u].z, _1387));
    float _1469;
    float _1471;
    float _1473;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1436 = fma(_639, cbModelParam._m0[13u].z, fma(_635, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _631)) + cbModelParam._m0[13u].w;
        float _1440 = fma(_639, cbModelParam._m0[14u].z, fma(_635, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _631)) + cbModelParam._m0[14u].w;
        float _1444 = fma(_639, cbModelParam._m0[15u].z, fma(_635, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _631)) + cbModelParam._m0[15u].w;
        float _1447 = fma(_577, cbModelParam._m0[13u].z, fma(_576, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _575));
        float _1450 = fma(_577, cbModelParam._m0[14u].z, fma(_576, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _575));
        float _1453 = fma(_577, cbModelParam._m0[15u].z, fma(_576, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _575));
        float _1481;
        if (_1447 > 0.0)
        {
            _1481 = abs((1.0 - _1436) / _1447);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1447 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1436 + 1.0) / _1447);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1481 = frontier_phi_16_14_ladder;
        }
        float _1656;
        if (_1450 > 0.0)
        {
            _1656 = abs((1.0 - _1440) / _1450);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1450 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1440 + 1.0) / _1450);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1656 = frontier_phi_25_21_ladder;
        }
        float _1951;
        if (_1453 > 0.0)
        {
            _1951 = abs((1.0 - _1444) / _1453);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1453 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1444 + 1.0) / _1453);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1951 = frontier_phi_37_32_ladder;
        }
        float _1953 = isnan(_1656) ? _1481 : (isnan(_1481) ? _1656 : min(_1481, _1656));
        float _1954 = isnan(_1951) ? _1953 : (isnan(_1953) ? _1951 : min(_1953, _1951));
        float _1958 = (_1954 * _1447) + _1436;
        float _1959 = (_1954 * _1450) + _1440;
        float _1960 = (_1954 * _1453) + _1444;
        float _1961 = _1954 * 9.9999997473787516355514526367188e-05;
        float _1963 = (-1.0) - _1961;
        float _1965 = _1961 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1960 > _1965) || ((_1960 < _1963) || ((_1959 > _1965) || ((_1959 < _1963) || ((_1958 < _1963) || (_1958 > _1965))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2105 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1960, cbModelParam._m0[9u].z, fma(_1959, cbModelParam._m0[9u].y, _1958 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1960, cbModelParam._m0[10u].z, fma(_1959, cbModelParam._m0[10u].y, _1958 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1960, cbModelParam._m0[11u].z, fma(_1959, cbModelParam._m0[11u].y, _1958 * cbModelParam._m0[11u].x))), _1388);
            frontier_phi_15_37_ladder = _2105.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2105.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2105.z * cbModelParam._m0[1u].y;
        }
        _1469 = frontier_phi_15_37_ladder_1;
        _1471 = frontier_phi_15_37_ladder;
        _1473 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1457 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_575, _576, _577), _1388);
        _1469 = _1457.x * cbModelParam._m0[1u].y;
        _1471 = _1457.y * cbModelParam._m0[1u].y;
        _1473 = _1457.z * cbModelParam._m0[1u].y;
    }
    float _1477 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _398);
    float _1478 = isnan(_1477) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1477 : min(cbModelParam._m0[25u].w, _1477));
    float _1571;
    float _1573;
    float _1575;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1535 = fma(_639, cbModelParam._m0[21u].z, fma(_635, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _631)) + cbModelParam._m0[21u].w;
        float _1539 = fma(_639, cbModelParam._m0[22u].z, fma(_635, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _631)) + cbModelParam._m0[22u].w;
        float _1543 = fma(_639, cbModelParam._m0[23u].z, fma(_635, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _631)) + cbModelParam._m0[23u].w;
        float _1546 = fma(_577, cbModelParam._m0[21u].z, fma(_576, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _575));
        float _1549 = fma(_577, cbModelParam._m0[22u].z, fma(_576, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _575));
        float _1552 = fma(_577, cbModelParam._m0[23u].z, fma(_576, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _575));
        float _1661;
        if (_1546 > 0.0)
        {
            _1661 = abs((1.0 - _1535) / _1546);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1546 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1535 + 1.0) / _1546);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1661 = frontier_phi_27_23_ladder;
        }
        float _1978;
        if (_1549 > 0.0)
        {
            _1978 = abs((1.0 - _1539) / _1549);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1549 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1539 + 1.0) / _1549);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1978 = frontier_phi_39_34_ladder;
        }
        float _2316;
        if (_1552 > 0.0)
        {
            _2316 = abs((1.0 - _1543) / _1552);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1552 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1543 + 1.0) / _1552);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2316 = frontier_phi_49_46_ladder;
        }
        float _2318 = isnan(_1978) ? _1661 : (isnan(_1661) ? _1978 : min(_1661, _1978));
        float _2319 = isnan(_2316) ? _2318 : (isnan(_2318) ? _2316 : min(_2318, _2316));
        float _2323 = (_2319 * _1546) + _1535;
        float _2324 = (_2319 * _1549) + _1539;
        float _2325 = (_2319 * _1552) + _1543;
        float _2326 = _2319 * 9.9999997473787516355514526367188e-05;
        float _2327 = (-1.0) - _2326;
        float _2329 = _2326 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2325 > _2329) || ((_2325 < _2327) || ((_2324 > _2329) || ((_2324 < _2327) || ((_2323 < _2327) || (_2323 > _2329))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2447 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2325, cbModelParam._m0[17u].z, fma(_2324, cbModelParam._m0[17u].y, _2323 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2325, cbModelParam._m0[18u].z, fma(_2324, cbModelParam._m0[18u].y, _2323 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2325, cbModelParam._m0[19u].z, fma(_2324, cbModelParam._m0[19u].y, _2323 * cbModelParam._m0[19u].x))), _1478);
            frontier_phi_24_49_ladder = _2447.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2447.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2447.x * cbModelParam._m0[1u].z;
        }
        _1571 = frontier_phi_24_49_ladder_2;
        _1573 = frontier_phi_24_49_ladder_1;
        _1575 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1555 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_575, _576, _577), _1478);
        _1571 = _1555.x * cbModelParam._m0[1u].z;
        _1573 = _1555.y * cbModelParam._m0[1u].z;
        _1575 = _1555.z * cbModelParam._m0[1u].z;
    }
    float _1588 = (((_602 * _552) + _603) * _567) * ((cbModelParam._m0[1u].w * (_1571 - _1469)) + _1469);
    float _1590 = (((_602 * _554) + _603) * _567) * ((cbModelParam._m0[1u].w * (_1573 - _1471)) + _1471);
    float _1592 = (((_602 * _555) + _603) * _567) * ((cbModelParam._m0[1u].w * (_1575 - _1473)) + _1473);
    float _1595 = fma(_1592, cbSceneParam._m0[89u].z, fma(_1590, cbSceneParam._m0[89u].y, _1588 * cbSceneParam._m0[89u].x));
    float _1598 = fma(_1592, cbSceneParam._m0[90u].z, fma(_1590, cbSceneParam._m0[90u].y, _1588 * cbSceneParam._m0[90u].x));
    float _1601 = fma(_1592, cbSceneParam._m0[91u].z, fma(_1590, cbSceneParam._m0[91u].y, _1588 * cbSceneParam._m0[91u].x));
    float _1635 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1639 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1643 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1647 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1648 = _1635 / _1647;
    float _1649 = _1639 / _1647;
    float _1650 = _1643 / _1647;
    float _1797;
    float _1798;
    float _1799;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1677 = ((uint(_1650 > cbSceneParam._m0[59u].y) + uint(_1650 > cbSceneParam._m0[59u].x)) + uint(_1650 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1678 = _1677 + 43u;
        uint _1686 = _1677 + 44u;
        uint _1694 = _1677 + 45u;
        uint _1702 = _1677 + 46u;
        float _1713 = fma(_1647, cbSceneParam._m0[_1678].w, fma(_1643, cbSceneParam._m0[_1678].z, fma(_1639, cbSceneParam._m0[_1678].y, _1635 * cbSceneParam._m0[_1678].x)));
        float _1717 = fma(_1647, cbSceneParam._m0[_1686].w, fma(_1643, cbSceneParam._m0[_1686].z, fma(_1639, cbSceneParam._m0[_1686].y, _1635 * cbSceneParam._m0[_1686].x)));
        float _1725 = fma(_1647, cbSceneParam._m0[_1702].w, fma(_1643, cbSceneParam._m0[_1702].z, fma(_1639, cbSceneParam._m0[_1702].y, _1635 * cbSceneParam._m0[_1702].x)));
        float _1730 = cbSceneParam._m0[33u].z * _1725;
        float _1732 = cbSceneParam._m0[33u].w * _1725;
        float _1735 = fma(_1647, cbSceneParam._m0[_1694].w, fma(_1643, cbSceneParam._m0[_1694].z, fma(_1639, cbSceneParam._m0[_1694].y, _1635 * cbSceneParam._m0[_1694].x))) / _1725;
        float _1783 = (cbSceneParam._m0[33u].x - sqrt(((_1649 * _1649) + (_1648 * _1648)) + (_1650 * _1650))) * cbSceneParam._m0[33u].y;
        float _4049 = isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0));
        float _1790 = (isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1730 + _1713) / _1725, (_1732 + _1717) / _1725), _1735), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1732 + _1713) / _1725, (_1717 - _1730) / _1725), _1735), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1713 - _1730) / _1725, (_1717 - _1732) / _1725), _1735), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1713 - _1732) / _1725, (_1730 + _1717) / _1725), _1735), 0.0)).x), vec4(0.25)));
        _1797 = 1.0 - (_1790 * cbSceneParam._m0[34u].x);
        _1798 = 1.0 - (_1790 * cbSceneParam._m0[34u].y);
        _1799 = 1.0 - (_1790 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1797 = 1.0;
        _1798 = 1.0;
        _1799 = 1.0;
    }
    float _1863;
    float _1865;
    float _1867;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1851 = fma(_1647, cbSceneParam._m0[63u].w, fma(_1643, cbSceneParam._m0[63u].z, fma(_1639, cbSceneParam._m0[63u].y, _1635 * cbSceneParam._m0[63u].x)));
        float _1852 = fma(_1647, cbSceneParam._m0[60u].w, fma(_1643, cbSceneParam._m0[60u].z, fma(_1639, cbSceneParam._m0[60u].y, _1635 * cbSceneParam._m0[60u].x))) / _1851;
        float _1853 = fma(_1647, cbSceneParam._m0[61u].w, fma(_1643, cbSceneParam._m0[61u].z, fma(_1639, cbSceneParam._m0[61u].y, _1635 * cbSceneParam._m0[61u].x))) / _1851;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1852 >= cbSceneParam._m0[64u].x) && (_1853 >= cbSceneParam._m0[64u].y)) && (_1852 <= cbSceneParam._m0[64u].z)) && (_1853 <= cbSceneParam._m0[64u].w))
        {
            float _1991 = fma(_1647, cbSceneParam._m0[62u].w, fma(_1643, cbSceneParam._m0[62u].z, fma(_1639, cbSceneParam._m0[62u].y, _1635 * cbSceneParam._m0[62u].x))) / _1851;
            float _1995 = isnan(cbSceneParam._m0[41u].w) ? _1991 : (isnan(_1991) ? cbSceneParam._m0[41u].w : max(_1991, cbSceneParam._m0[41u].w));
            float _2038 = (cbSceneParam._m0[33u].x - sqrt(((_1649 * _1649) + (_1648 * _1648)) + (_1650 * _1650))) * cbSceneParam._m0[33u].y;
            float _4065 = isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0));
            float _2045 = (isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1852, cbSceneParam._m0[33u].w + _1853), _1995), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1852, _1853 - cbSceneParam._m0[33u].z), _1995), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1852 - cbSceneParam._m0[33u].z, _1853 - cbSceneParam._m0[33u].w), _1995), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1852 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1853), _1995), 0.0)).x), vec4(0.25)));
            float _2049 = 1.0 - (_2045 * cbSceneParam._m0[34u].x);
            float _2050 = 1.0 - (_2045 * cbSceneParam._m0[34u].y);
            float _2051 = 1.0 - (_2045 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2050) ? _1798 : (isnan(_1798) ? _2050 : min(_1798, _2050));
            frontier_phi_36_35_ladder_1 = isnan(_2051) ? _1799 : (isnan(_1799) ? _2051 : min(_1799, _2051));
            frontier_phi_36_35_ladder_2 = isnan(_2049) ? _1797 : (isnan(_1797) ? _2049 : min(_1797, _2049));
        }
        else
        {
            frontier_phi_36_35_ladder = _1798;
            frontier_phi_36_35_ladder_1 = _1799;
            frontier_phi_36_35_ladder_2 = _1797;
        }
        _1863 = frontier_phi_36_35_ladder_2;
        _1865 = frontier_phi_36_35_ladder;
        _1867 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _1863 = _1797;
        _1865 = _1798;
        _1867 = _1799;
    }
    uvec4 _1872 = floatBitsToUint(cbInstanceData._m0[_526 + 5u]);
    uint _1874 = _1872.x * 14u;
    uint _1875 = _1874 + 13u;
    float _1882 = _567 + (-1.0);
    float _1887 = (cbLight._m0[_1875].x * _1882) + 1.0;
    float _1888 = (cbLight._m0[_1875].y * _1882) + 1.0;
    float _1889 = (cbLight._m0[_1875].z * _1882) + 1.0;
    float _1890 = (cbLight._m0[_1875].w * _1882) + 1.0;
    uint _1891 = _1874 + 5u;
    float _1897 = isnan(1.0) ? _1888 : (isnan(_1888) ? 1.0 : min(_1888, 1.0));
    uint _1901 = _1874 + 4u;
    float _1910 = isnan(1.0) ? _1887 : (isnan(_1887) ? 1.0 : min(_1887, 1.0));
    uint _1914 = _1874 | 1u;
    float _1925 = dot(vec3(cbLight._m0[_1874].xyz), vec3(_395, _396, _397));
    float _1928 = dot(vec3(cbLight._m0[_1914].xyz), vec3(_395, _396, _397));
    float _4101 = isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0));
    float _4112 = isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0));
    float _1933 = (isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0))) * 0.3183098733425140380859375;
    float _1935 = (isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0))) * 0.3183098733425140380859375;
    float _1942 = ((cbLight._m0[_1891].x * _1897) * _1935) + (((cbLight._m0[_1901].x * _1863) * _1910) * _1933);
    float _1943 = ((_1897 * cbLight._m0[_1891].y) * _1935) + (((cbLight._m0[_1901].y * _1865) * _1910) * _1933);
    float _1944 = ((_1897 * cbLight._m0[_1891].z) * _1935) + (((cbLight._m0[_1901].z * _1867) * _1910) * _1933);
    uvec4 _1948 = floatBitsToUint(cbLight._m0[_1874 + 12u]);
    bool _1950 = _1948.x == 0u;
    float _2052;
    float _2054;
    float _2056;
    if (_1950)
    {
        _2052 = _1942;
        _2054 = _1943;
        _2056 = _1944;
    }
    else
    {
        uint _2060 = _1874 + 6u;
        float _2076 = (dot(vec3(cbLight._m0[_1874 + 2u].xyz), vec3(_395, _396, _397)) * 0.5) + 0.5;
        float _2077 = _2076 * _2076;
        float _4123 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
        float _2078 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
        float _2079 = isnan(1.0) ? _1889 : (isnan(_1889) ? 1.0 : min(_1889, 1.0));
        _2052 = (((cbLight._m0[_2060].x * 0.3183098733425140380859375) * _2078) * _2079) + _1942;
        _2054 = (((cbLight._m0[_2060].y * 0.3183098733425140380859375) * _2078) * _2079) + _1943;
        _2056 = (((cbLight._m0[_2060].z * 0.3183098733425140380859375) * _2078) * _2079) + _1944;
    }
    bool _2059 = _1948.y == 0u;
    float _2114;
    float _2116;
    float _2118;
    if (_2059)
    {
        _2114 = _2052;
        _2116 = _2054;
        _2118 = _2056;
    }
    else
    {
        uint _2287 = _1874 + 7u;
        float _2303 = (dot(vec3(cbLight._m0[_1874 + 3u].xyz), vec3(_395, _396, _397)) * 0.5) + 0.5;
        float _2304 = _2303 * _2303;
        float _4139 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
        float _2305 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
        float _2306 = isnan(1.0) ? _1890 : (isnan(_1890) ? 1.0 : min(_1890, 1.0));
        _2114 = (((cbLight._m0[_2287].x * 0.3183098733425140380859375) * _2305) * _2306) + _2052;
        _2116 = (((cbLight._m0[_2287].y * 0.3183098733425140380859375) * _2305) * _2306) + _2054;
        _2118 = (((cbLight._m0[_2287].z * 0.3183098733425140380859375) * _2305) * _2306) + _2056;
    }
    uint _2121 = _1874 + 8u;
    float _2134 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1874].w)) * _398) * 0.949999988079071044921875);
    float _2135 = _2134 * _2134;
    float _2136 = cbLight._m0[_1874].x + _477;
    float _2137 = cbLight._m0[_1874].y + _478;
    float _2138 = cbLight._m0[_1874].z + _479;
    float _2142 = inversesqrt(dot(vec3(_2136, _2137, _2138), vec3(_2136, _2137, _2138)));
    float _2143 = _2142 * _2136;
    float _2144 = _2142 * _2137;
    float _2145 = _2142 * _2138;
    float _2146 = dot(vec3(_395, _396, _397), vec3(cbLight._m0[_1874].xyz));
    float _4155 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
    float _2149 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
    float _4166 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _2150 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
    float _2151 = dot(vec3(_395, _396, _397), vec3(_2143, _2144, _2145));
    float _4177 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
    float _2154 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
    float _2155 = dot(vec3(cbLight._m0[_1874].xyz), vec3(_2143, _2144, _2145));
    float _4188 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
    float _2159 = _2135 * _2135;
    float _2163 = ((_2154 * _2154) * (_2159 + (-1.0))) + 1.0;
    float _2171 = exp2(log2(1.0 - (isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0)))) * 5.0);
    float _2172 = 0.959999978542327880859375 - _549;
    float _2174 = 0.959999978542327880859375 - _550;
    float _2175 = 0.959999978542327880859375 - _551;
    float _2182 = 1.0 - _2135;
    float _2193 = (0.5 / (((_2150 * ((_2149 * _2182) + _2135)) + 9.9999999392252902907785028219223e-09) + (((_2150 * _2182) + _2135) * _2149))) * _2149;
    float _4199 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
    float _2195 = (isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0))) * (_2159 / ((_2163 * _2163) * 3.141590118408203125));
    uint _2209 = _1874 + 9u;
    float _2220 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1914].w)) * _398) * 0.949999988079071044921875);
    float _2221 = _2220 * _2220;
    float _2222 = cbLight._m0[_1914].x + _477;
    float _2223 = cbLight._m0[_1914].y + _478;
    float _2224 = cbLight._m0[_1914].z + _479;
    float _2228 = inversesqrt(dot(vec3(_2222, _2223, _2224), vec3(_2222, _2223, _2224)));
    float _2229 = _2228 * _2222;
    float _2230 = _2228 * _2223;
    float _2231 = _2228 * _2224;
    float _2232 = dot(vec3(_395, _396, _397), vec3(cbLight._m0[_1914].xyz));
    float _4210 = isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0));
    float _2235 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
    float _2236 = dot(vec3(_395, _396, _397), vec3(_2229, _2230, _2231));
    float _4221 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
    float _2239 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
    float _2240 = dot(vec3(cbLight._m0[_1914].xyz), vec3(_2229, _2230, _2231));
    float _4232 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
    float _2244 = _2221 * _2221;
    float _2248 = ((_2239 * _2239) * (_2244 + (-1.0))) + 1.0;
    float _2255 = exp2(log2(1.0 - (isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0)))) * 5.0);
    float _2262 = 1.0 - _2221;
    float _2272 = (0.5 / (((_2150 * ((_2235 * _2262) + _2221)) + 9.9999999392252902907785028219223e-09) + (((_2150 * _2262) + _2221) * _2235))) * _2235;
    float _4243 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
    float _2274 = (isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0))) * (_2244 / ((_2248 * _2248) * 3.141590118408203125));
    float _2284 = (((((_2255 * _2172) + _552) * cbLight._m0[_2209].x) * _2274) * _1897) + ((((cbLight._m0[_2121].x * _1863) * ((_2171 * _2172) + _552)) * _2195) * _1910);
    float _2285 = (((((_2255 * _2174) + _554) * cbLight._m0[_2209].y) * _2274) * _1897) + ((((cbLight._m0[_2121].y * _1865) * ((_2171 * _2174) + _554)) * _2195) * _1910);
    float _2286 = (((((_2255 * _2175) + _555) * cbLight._m0[_2209].z) * _2274) * _1897) + ((((cbLight._m0[_2121].z * _1867) * ((_2171 * _2175) + _555)) * _2195) * _1910);
    float _2342;
    float _2344;
    float _2346;
    if (_1950)
    {
        _2342 = _2284;
        _2344 = _2285;
        _2346 = _2286;
    }
    else
    {
        uint _2348 = _1874 + 2u;
        uint _2352 = _1874 + 10u;
        float _2366 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2348].w)) * _398) * 0.949999988079071044921875);
        float _2367 = _2366 * _2366;
        float _2368 = cbLight._m0[_2348].x + _477;
        float _2369 = cbLight._m0[_2348].y + _478;
        float _2370 = cbLight._m0[_2348].z + _479;
        float _2374 = inversesqrt(dot(vec3(_2368, _2369, _2370), vec3(_2368, _2369, _2370)));
        float _2375 = _2374 * _2368;
        float _2376 = _2374 * _2369;
        float _2377 = _2374 * _2370;
        float _2378 = dot(vec3(_395, _396, _397), vec3(cbLight._m0[_2348].xyz));
        float _4254 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
        float _2381 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
        float _2382 = dot(vec3(_395, _396, _397), vec3(_2375, _2376, _2377));
        float _4265 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
        float _2385 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
        float _2386 = dot(vec3(cbLight._m0[_2348].xyz), vec3(_2375, _2376, _2377));
        float _4276 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
        float _2390 = _2367 * _2367;
        float _2394 = ((_2385 * _2385) * (_2390 + (-1.0))) + 1.0;
        float _2401 = exp2(log2(1.0 - (isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0)))) * 5.0);
        float _2408 = 1.0 - _2367;
        float _2418 = (0.5 / (((_2150 * ((_2381 * _2408) + _2367)) + 9.9999999392252902907785028219223e-09) + (((_2150 * _2408) + _2367) * _2381))) * _2381;
        float _4287 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
        float _2420 = (isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0))) * (_2390 / ((_2394 * _2394) * 3.141590118408203125));
        float _2421 = isnan(1.0) ? _1889 : (isnan(_1889) ? 1.0 : min(_1889, 1.0));
        _2342 = (((((_2401 * _2172) + _552) * cbLight._m0[_2352].x) * _2420) * _2421) + _2284;
        _2344 = (((((_2401 * _2174) + _554) * cbLight._m0[_2352].y) * _2420) * _2421) + _2285;
        _2346 = (((((_2401 * _2175) + _555) * cbLight._m0[_2352].z) * _2420) * _2421) + _2286;
    }
    float _2452;
    float _2454;
    float _2456;
    if (_2059)
    {
        _2452 = _2342;
        _2454 = _2344;
        _2456 = _2346;
    }
    else
    {
        uint _2463 = _1874 + 3u;
        uint _2467 = _1874 + 11u;
        float _2481 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2463].w)) * _398) * 0.949999988079071044921875);
        float _2482 = _2481 * _2481;
        float _2483 = cbLight._m0[_2463].x + _477;
        float _2484 = cbLight._m0[_2463].y + _478;
        float _2485 = cbLight._m0[_2463].z + _479;
        float _2489 = inversesqrt(dot(vec3(_2483, _2484, _2485), vec3(_2483, _2484, _2485)));
        float _2490 = _2489 * _2483;
        float _2491 = _2489 * _2484;
        float _2492 = _2489 * _2485;
        float _2493 = dot(vec3(_395, _396, _397), vec3(cbLight._m0[_2463].xyz));
        float _4303 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
        float _2496 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
        float _2497 = dot(vec3(_395, _396, _397), vec3(_2490, _2491, _2492));
        float _4314 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
        float _2500 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
        float _2501 = dot(vec3(cbLight._m0[_2463].xyz), vec3(_2490, _2491, _2492));
        float _4325 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
        float _2505 = _2482 * _2482;
        float _2509 = ((_2500 * _2500) * (_2505 + (-1.0))) + 1.0;
        float _2516 = exp2(log2(1.0 - (isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0)))) * 5.0);
        float _2523 = 1.0 - _2482;
        float _2533 = (0.5 / (((_2150 * ((_2496 * _2523) + _2482)) + 9.9999999392252902907785028219223e-09) + (((_2150 * _2523) + _2482) * _2496))) * _2496;
        float _4336 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
        float _2535 = (isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0))) * (_2505 / ((_2509 * _2509) * 3.141590118408203125));
        float _2536 = isnan(1.0) ? _1890 : (isnan(_1890) ? 1.0 : min(_1890, 1.0));
        _2452 = (((((_2516 * _2172) + _552) * cbLight._m0[_2467].x) * _2535) * _2536) + _2342;
        _2454 = (((((_2516 * _2174) + _554) * cbLight._m0[_2467].y) * _2535) * _2536) + _2344;
        _2456 = (((((_2516 * _2175) + _555) * cbLight._m0[_2467].z) * _2535) * _2536) + _2346;
    }
    float _2601;
    float _2603;
    float _2605;
    float _2607;
    float _2609;
    float _2611;
    if (_1872.y == 0u)
    {
        uvec4 _2557 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2558 = _2557.x;
        uint _2569 = uint((float(_2557.y) * floor(float(uint(cbSceneParam._m0[85u].y * _486) / _2558))) + floor(float(uint(cbSceneParam._m0[85u].x * _485) / _2558)));
        float _2579 = (log2(_1650 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2580 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
        uint _2583 = uint(isnan(14.0) ? _2580 : (isnan(_2580) ? 14.0 : min(_2580, 14.0)));
        uvec4 _2588 = texelFetch(g_lightClusterGridBuffer, int(((_2583 << 2u) + (_2569 << 6u)) >> 2u));
        uint _2589 = _2588.x;
        uint _2590 = _2557.z;
        float _2668;
        float _2670;
        float _2672;
        float _2674;
        float _2676;
        float _2678;
        if (((((1u << ((_2590 >> 4u) & 15u)) + 4294967295u) & _2589) == 0u) || ((_2590 & 240u) == 0u))
        {
            _2668 = 0.0;
            _2670 = 0.0;
            _2672 = 0.0;
            _2674 = 0.0;
            _2676 = 0.0;
            _2678 = 0.0;
        }
        else
        {
            float _2669;
            float _2671;
            float _2673;
            float _2675;
            float _2677;
            float _2679;
            float _2812 = 0.0;
            float _2813 = 0.0;
            float _2814 = 0.0;
            float _2815 = 0.0;
            float _2816 = 0.0;
            float _2817 = 0.0;
            uint _2818 = 0u;
            uint _2827;
            bool _2828;
            for (;;)
            {
                _2827 = texelFetch(g_lightClassification, int((((_2583 << 5u) + (_2569 << 9u)) + (_2818 << 2u)) >> 2u)).x;
                _2828 = _2827 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2828)
                {
                    frontier_phi_68_pred = _2817;
                    frontier_phi_68_pred_1 = _2816;
                    frontier_phi_68_pred_2 = _2815;
                    frontier_phi_68_pred_3 = _2813;
                    frontier_phi_68_pred_4 = _2812;
                    frontier_phi_68_pred_5 = _2814;
                }
                else
                {
                    float _2936;
                    float _2937;
                    float _2938;
                    float _2939;
                    float _2940;
                    float _2941;
                    uint _2942;
                    _2936 = _2812;
                    _2937 = _2813;
                    _2938 = _2814;
                    _2939 = _2815;
                    _2940 = _2816;
                    _2941 = _2817;
                    _2942 = _2827;
                    float _2868;
                    float _2869;
                    float _2870;
                    float _2871;
                    float _2872;
                    float _2873;
                    for (;;)
                    {
                        uint _2946 = uint(findLSB(_2942)) + (_2818 << 5u);
                        uint _2943 = (_2942 + 4294967295u) & _2942;
                        uint _2948 = _2946 * 48u;
                        vec4 _2962 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2948)).x, texelFetch(g_PointLightRenderingBuffer, int(_2948 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2948 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2948 + 3u)).x));
                        uint _2968 = (_2946 * 48u) + 4u;
                        vec4 _2981 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2968)).x, texelFetch(g_PointLightRenderingBuffer, int(_2968 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2968 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2968 + 3u)).x));
                        uint _2987 = (_2946 * 48u) + 8u;
                        vec3 _2998 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2987)).x, texelFetch(g_PointLightRenderingBuffer, int(_2987 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2987 + 2u)).x));
                        float _3002 = _2962.x - _1648;
                        float _3003 = _2962.y - _1649;
                        float _3004 = _2962.z - _1650;
                        float _3005 = dot(vec3(_3002, _3003, _3004), vec3(_3002, _3003, _3004));
                        float _3008 = inversesqrt(_3005);
                        float _3009 = _3008 * _3002;
                        float _3010 = _3008 * _3003;
                        float _3011 = _3008 * _3004;
                        float _3012 = dot(vec3(_507, _510, _513), vec3(_3009, _3010, _3011));
                        float _3017 = 1.0 - (_3005 * _2962.w);
                        float _4362 = isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : max(_3017, 0.0));
                        float _3018 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
                        float _3019 = sqrt(_3005) * _2981.w;
                        float _3022 = 1.39999997615814208984375 / (_3019 + 1.39999997615814208984375);
                        float _3023 = _3022 * _3022;
                        float _3026 = ((1.0 - _3023) * _3012) + _3023;
                        float _3029 = _3019 * _3019;
                        float _3033 = ((isnan(0.0) ? _3026 : (isnan(_3026) ? 0.0 : max(_3026, 0.0))) * _3018) / ((_3029 * 0.699999988079071044921875) + 1.0);
                        float _3037 = (-0.0) - _1648;
                        float _3038 = (-0.0) - _1649;
                        float _3039 = (-0.0) - _1650;
                        float _3043 = inversesqrt(dot(vec3(_3037, _3038, _3039), vec3(_3037, _3038, _3039)));
                        float _3044 = _3043 * _3037;
                        float _3045 = _3043 * _3038;
                        float _3046 = _3043 * _3039;
                        float _3053 = exp2(log2(1.0 / ((_3029 * 3.5) + 5.0)) * 0.25);
                        float _3054 = 1.0 - _583;
                        float _3061 = sqrt(1.0 - ((1.0 - (_3054 * _3054)) * (1.0 - (_3053 * _3053))));
                        float _3062 = _3061 * _3061;
                        float _3063 = _3062 * _3062;
                        float _3064 = _3044 + _3009;
                        float _3065 = _3045 + _3010;
                        float _3066 = _3046 + _3011;
                        float _3070 = inversesqrt(dot(vec3(_3064, _3065, _3066), vec3(_3064, _3065, _3066)));
                        float _3074 = dot(vec3(_507, _510, _513), vec3(_3044, _3045, _3046));
                        float _4378 = isnan(0.0) ? _3074 : (isnan(_3074) ? 0.0 : max(_3074, 0.0));
                        float _3077 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
                        float _3078 = dot(vec3(_507, _510, _513), vec3(_3070 * _3064, _3070 * _3065, _3070 * _3066));
                        float _4389 = isnan(0.0) ? _3078 : (isnan(_3078) ? 0.0 : max(_3078, 0.0));
                        float _3081 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
                        float _3085 = ((_3081 * _3081) * (_3063 + (-1.0))) + 1.0;
                        float _3086 = _3022 * _3062;
                        float _3087 = _3086 * _3086;
                        float _3090 = ((1.0 - _3087) * _3012) + _3087;
                        float _4400 = isnan(0.0) ? _3090 : (isnan(_3090) ? 0.0 : max(_3090, 0.0));
                        float _3091 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
                        float _3092 = 1.0 - _3062;
                        float _3102 = (0.5 / (((_3091 * ((_3077 * _3092) + _3062)) + 9.9999999392252902907785028219223e-09) + (((_3091 * _3092) + _3062) * _3077))) * _3091;
                        float _4411 = isnan(0.0) ? _3102 : (isnan(_3102) ? 0.0 : max(_3102, 0.0));
                        float _3113 = (((_3063 * 3.1415927410125732421875) * (isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0)))) / ((_3085 * _3085) * ((_3029 * 2.1991131305694580078125) + 3.141590118408203125))) * _3018;
                        _2871 = (_3033 * _2981.x) + _2939;
                        _2872 = (_3033 * _2981.y) + _2940;
                        _2873 = (_3033 * _2981.z) + _2941;
                        _2868 = (_3113 * _2998.x) + _2936;
                        _2869 = (_3113 * _2998.y) + _2937;
                        _2870 = (_3113 * _2998.z) + _2938;
                        if (_2943 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2936 = _2868;
                            _2937 = _2869;
                            _2938 = _2870;
                            _2939 = _2871;
                            _2940 = _2872;
                            _2941 = _2873;
                            _2942 = _2943;
                        }
                    }
                    frontier_phi_68_pred = _2873;
                    frontier_phi_68_pred_1 = _2872;
                    frontier_phi_68_pred_2 = _2871;
                    frontier_phi_68_pred_3 = _2869;
                    frontier_phi_68_pred_4 = _2868;
                    frontier_phi_68_pred_5 = _2870;
                }
                _2679 = frontier_phi_68_pred;
                _2677 = frontier_phi_68_pred_1;
                _2675 = frontier_phi_68_pred_2;
                _2671 = frontier_phi_68_pred_3;
                _2669 = frontier_phi_68_pred_4;
                _2673 = frontier_phi_68_pred_5;
                uint _2819 = _2818 + 1u;
                if (_2819 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2812 = _2669;
                    _2813 = _2671;
                    _2814 = _2673;
                    _2815 = _2675;
                    _2816 = _2677;
                    _2817 = _2679;
                    _2818 = _2819;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2668 = _2669;
            _2670 = _2671;
            _2672 = _2673;
            _2674 = _2675;
            _2676 = _2677;
            _2678 = _2679;
        }
        uvec4 _2682 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2683 = _2682.z;
        uint _2685 = (_2683 >> 8u) & 15u;
        float _2780;
        float _2782;
        float _2784;
        float _2786;
        float _2788;
        float _2790;
        if (((4294967295u << _2685) & _2589) == 0u)
        {
            _2780 = _2668;
            _2782 = _2670;
            _2784 = _2672;
            _2786 = _2674;
            _2788 = _2676;
            _2790 = _2678;
        }
        else
        {
            float _2805 = inversesqrt(dot(vec3(_1648, _1649, _1650), vec3(_1648, _1649, _1650)));
            float _2806 = _2805 * _1648;
            float _2807 = _2805 * _1649;
            float _2808 = _2805 * _1650;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2685 < ((_2683 >> 12u) & 15u))
            {
                float _2781;
                float _2783;
                float _2785;
                float _2787;
                float _2789;
                float _2791;
                float _2919 = _2668;
                float _2920 = _2670;
                float _2921 = _2672;
                float _2922 = _2674;
                float _2923 = _2676;
                float _2924 = _2678;
                uint _2925 = _2685;
                uint _2934;
                bool _2935;
                for (;;)
                {
                    _2934 = texelFetch(g_lightClassification, int((((_2583 << 5u) + (_2569 << 9u)) + (_2925 << 2u)) >> 2u)).x;
                    _2935 = _2934 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_2935)
                    {
                        frontier_phi_74_pred = _2921;
                        frontier_phi_74_pred_1 = _2920;
                        frontier_phi_74_pred_2 = _2919;
                        frontier_phi_74_pred_3 = _2924;
                        frontier_phi_74_pred_4 = _2923;
                        frontier_phi_74_pred_5 = _2922;
                    }
                    else
                    {
                        float _3118;
                        float _3119;
                        float _3120;
                        float _3121;
                        float _3122;
                        float _3123;
                        float _3414;
                        float _3415;
                        float _3416;
                        float _3417;
                        float _3418;
                        float _3419;
                        float _3131 = _2919;
                        float _3132 = _2920;
                        float _3133 = _2921;
                        float _3134 = _2922;
                        float _3135 = _2923;
                        float _3136 = _2924;
                        uint _3137 = _2934;
                        uint _3138;
                        vec4 _3163;
                        float _3164;
                        vec4 _3179;
                        vec3 _3191;
                        vec4 _3207;
                        vec4 _3223;
                        float _3270;
                        bool _3271;
                        for (;;)
                        {
                            uint _3148 = ((_2925 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3137));
                            _3138 = (_3137 + 4294967295u) & _3137;
                            uint _3150 = _3148 * 40u;
                            _3163 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3150)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 3u)).x));
                            _3164 = _3163.w;
                            uint _3166 = (_3148 * 40u) + 4u;
                            _3179 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3166)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 3u)).x));
                            uint _3181 = (_3148 * 40u) + 8u;
                            _3191 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3181)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 2u)).x));
                            uint _3194 = (_3148 * 40u) + 16u;
                            _3207 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3194)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 3u)).x));
                            uint _3210 = (_3148 * 40u) + 20u;
                            _3223 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3210)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3210 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3210 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3210 + 3u)).x));
                            uint _3226 = (_3148 * 40u) + 24u;
                            vec4 _3239 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3226)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3226 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3226 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3226 + 3u)).x));
                            uint _3245 = (_3148 * 40u) + 28u;
                            vec4 _3258 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3245)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 3u)).x));
                            _3270 = fma(_1650, _3258.z, fma(_1649, _3258.y, _3258.x * _1648)) + _3258.w;
                            _3271 = !((fma(_1650, _3239.z, fma(_1649, _3239.y, _3239.x * _1648)) + _3239.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3271)
                            {
                                float _3298 = _3163.x - _1648;
                                float _3299 = _3163.y - _1649;
                                float _3300 = _3163.z - _1650;
                                float _3301 = dot(vec3(_3298, _3299, _3300), vec3(_3298, _3299, _3300));
                                float _3304 = inversesqrt(_3301);
                                float _3305 = _3304 * _3298;
                                float _3306 = _3304 * _3299;
                                float _3307 = _3304 * _3300;
                                float _3311 = 1.0 - (_3301 / (_3164 * _3164));
                                float _4422 = isnan(0.0) ? _3311 : (isnan(_3311) ? 0.0 : max(_3311, 0.0));
                                float _3312 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
                                float _3316 = sqrt(_3301) * _3179.w;
                                float _3318 = 1.39999997615814208984375 / (_3316 + 1.39999997615814208984375);
                                float _3319 = _3318 * _3318;
                                float _3322 = ((1.0 - _3319) * dot(vec3(_3305, _3306, _3307), vec3(_507, _510, _513))) + _3319;
                                float _3325 = _3316 * _3316;
                                float _3329 = (fma(_1650, _3207.z, fma(_1649, _3207.y, _3207.x * _1648)) + _3207.w) / _3270;
                                float _3330 = (fma(_1650, _3223.z, fma(_1649, _3223.y, _3223.x * _1648)) + _3223.w) / _3270;
                                float _3334 = 1.0 - dot(vec2(_3329, _3330), vec2(_3329, _3330));
                                float _4438 = isnan(0.0) ? _3334 : (isnan(_3334) ? 0.0 : max(_3334, 0.0));
                                float _3335 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
                                float _3336 = _3335 * (((isnan(0.0) ? _3322 : (isnan(_3322) ? 0.0 : max(_3322, 0.0))) * _3312) / ((_3325 * 0.699999988079071044921875) + 1.0));
                                float _3348 = exp2(log2(1.0 / ((_3325 * 3.5) + 5.0)) * 0.25);
                                float _3349 = 1.0 - _583;
                                float _3356 = sqrt(1.0 - ((1.0 - (_3349 * _3349)) * (1.0 - (_3348 * _3348))));
                                float _3357 = _3356 * _3356;
                                float _3358 = _3357 * _3357;
                                float _3359 = _3305 - _2806;
                                float _3360 = _3306 - _2807;
                                float _3361 = _3307 - _2808;
                                float _3365 = inversesqrt(dot(vec3(_3359, _3360, _3361), vec3(_3359, _3360, _3361)));
                                float _3369 = dot(vec3(_507, _510, _513), vec3((-0.0) - _2806, (-0.0) - _2807, (-0.0) - _2808));
                                float _4449 = isnan(0.0) ? _3369 : (isnan(_3369) ? 0.0 : max(_3369, 0.0));
                                float _3372 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
                                float _3373 = dot(vec3(_507, _510, _513), vec3(_3365 * _3359, _3365 * _3360, _3365 * _3361));
                                float _4460 = isnan(0.0) ? _3373 : (isnan(_3373) ? 0.0 : max(_3373, 0.0));
                                float _3376 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
                                float _3380 = ((_3376 * _3376) * (_3358 + (-1.0))) + 1.0;
                                float _3381 = _3318 * _3357;
                                float _3382 = _3381 * _3381;
                                float _3388 = ((1.0 - _3382) * dot(vec3(_507, _510, _513), vec3(_3305, _3306, _3307))) + _3382;
                                float _4471 = isnan(0.0) ? _3388 : (isnan(_3388) ? 0.0 : max(_3388, 0.0));
                                float _3389 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
                                float _3390 = 1.0 - _3357;
                                float _3400 = (0.5 / (((_3389 * ((_3372 * _3390) + _3357)) + 9.9999999392252902907785028219223e-09) + (((_3389 * _3390) + _3357) * _3372))) * _3389;
                                float _4482 = isnan(0.0) ? _3400 : (isnan(_3400) ? 0.0 : max(_3400, 0.0));
                                float _3410 = (_3335 * _3312) * (((_3358 * 3.1415927410125732421875) * (isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0)))) / ((_3380 * _3380) * ((_3325 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3410 * _3191.z;
                                frontier_phi_80_pred_1 = _3410 * _3191.y;
                                frontier_phi_80_pred_2 = _3410 * _3191.x;
                                frontier_phi_80_pred_3 = _3336 * _3179.z;
                                frontier_phi_80_pred_4 = _3336 * _3179.y;
                                frontier_phi_80_pred_5 = _3336 * _3179.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3416 = frontier_phi_80_pred;
                            _3415 = frontier_phi_80_pred_1;
                            _3414 = frontier_phi_80_pred_2;
                            _3419 = frontier_phi_80_pred_3;
                            _3418 = frontier_phi_80_pred_4;
                            _3417 = frontier_phi_80_pred_5;
                            _3121 = _3417 + _3134;
                            _3122 = _3418 + _3135;
                            _3123 = _3419 + _3136;
                            _3118 = _3414 + _3131;
                            _3119 = _3415 + _3132;
                            _3120 = _3416 + _3133;
                            if (_3138 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3131 = _3118;
                                _3132 = _3119;
                                _3133 = _3120;
                                _3134 = _3121;
                                _3135 = _3122;
                                _3136 = _3123;
                                _3137 = _3138;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3120;
                        frontier_phi_74_pred_1 = _3119;
                        frontier_phi_74_pred_2 = _3118;
                        frontier_phi_74_pred_3 = _3123;
                        frontier_phi_74_pred_4 = _3122;
                        frontier_phi_74_pred_5 = _3121;
                    }
                    _2785 = frontier_phi_74_pred;
                    _2783 = frontier_phi_74_pred_1;
                    _2781 = frontier_phi_74_pred_2;
                    _2791 = frontier_phi_74_pred_3;
                    _2789 = frontier_phi_74_pred_4;
                    _2787 = frontier_phi_74_pred_5;
                    uint _2926 = _2925 + 1u;
                    if (_2926 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2919 = _2781;
                        _2920 = _2783;
                        _2921 = _2785;
                        _2922 = _2787;
                        _2923 = _2789;
                        _2924 = _2791;
                        _2925 = _2926;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2789;
                frontier_phi_62_63_ladder_1 = _2787;
                frontier_phi_62_63_ladder_2 = _2785;
                frontier_phi_62_63_ladder_3 = _2791;
                frontier_phi_62_63_ladder_4 = _2783;
                frontier_phi_62_63_ladder_5 = _2781;
            }
            else
            {
                frontier_phi_62_63_ladder = _2676;
                frontier_phi_62_63_ladder_1 = _2674;
                frontier_phi_62_63_ladder_2 = _2672;
                frontier_phi_62_63_ladder_3 = _2678;
                frontier_phi_62_63_ladder_4 = _2670;
                frontier_phi_62_63_ladder_5 = _2668;
            }
            _2780 = frontier_phi_62_63_ladder_5;
            _2782 = frontier_phi_62_63_ladder_4;
            _2784 = frontier_phi_62_63_ladder_2;
            _2786 = frontier_phi_62_63_ladder_1;
            _2788 = frontier_phi_62_63_ladder;
            _2790 = frontier_phi_62_63_ladder_3;
        }
        float _2795 = isnan(1.0) ? _567 : (isnan(_567) ? 1.0 : min(_567, 1.0));
        _2601 = (_2795 * _2786) + _2114;
        _2603 = (_2795 * _2788) + _2116;
        _2605 = (_2795 * _2790) + _2118;
        _2607 = ((_2780 * _552) * _2795) + _2452;
        _2609 = ((_2782 * _554) * _2795) + _2454;
        _2611 = ((_2784 * _555) * _2795) + _2456;
    }
    else
    {
        _2601 = _2114;
        _2603 = _2116;
        _2605 = _2118;
        _2607 = _2452;
        _2609 = _2454;
        _2611 = _2456;
    }
    float _4498 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _4509 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _4520 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    uint _2631 = _526 + 6u;
    float _2639 = _485 / cbSceneParam._m0[86u].x;
    float _2640 = _486 / cbSceneParam._m0[86u].y;
    vec4 _2654 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2639, _2640, (log2((isnan(cbSceneParam._m0[77u].w) ? _418 : (isnan(_418) ? cbSceneParam._m0[77u].w : min(_418, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2656 = _2654.x;
    float _2657 = _2654.y;
    float _2658 = _2654.z;
    float _2659 = _2654.w;
    float _2730;
    float _2732;
    float _2734;
    float _2736;
    if (_418 > cbSceneParam._m0[78u].w)
    {
        float _2693 = isnan(_418) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _418 : min(cbSceneParam._m0[80u].w, _418));
        float _2694 = _2693 / _418;
        float _2705 = _2694 * _470;
        float _2706 = _471 * _2694;
        float _2707 = (-0.0) - _2706;
        float _2708 = _2694 * _472;
        float _2710 = (cbSceneParam._m0[77u].w * _2707) / _2693;
        float _2711 = _2710 + cbSceneParam._m0[79u].w;
        float _2712 = cbSceneParam._m0[79u].w - _2706;
        float _2718 = sqrt(((_2705 * _2705) + (_2706 * _2706)) + (_2708 * _2708));
        float _2721 = (1.0 - (cbSceneParam._m0[77u].w / _2693)) * _2718;
        float _2726 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2728 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2881;
        if (abs((_2707 - _2710) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2881 = ((((_2711 > 0.0) ? exp2(_2726 * _2711) : (2.0 - exp2(_2728 * _2711))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2721;
        }
        else
        {
            float _2841 = 1.0 / cbSceneParam._m0[80u].x;
            float _2842 = isnan(_2712) ? _2711 : (isnan(_2711) ? _2712 : max(_2711, _2712));
            float _2843 = isnan(_2712) ? _2711 : (isnan(_2711) ? _2712 : min(_2711, _2712));
            float _2852 = isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : min(_2842, 0.0));
            float _2853 = isnan(0.0) ? _2843 : (isnan(_2843) ? 0.0 : min(_2843, 0.0));
            _2881 = ((abs(_2718 / _2707) * cbSceneParam._m0[80u].y) * ((((_2852 - _2853) * 2.0) - ((exp2(_2726 * (isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : max(_2842, 0.0)))) - exp2(_2726 * (isnan(0.0) ? _2843 : (isnan(_2843) ? 0.0 : max(_2843, 0.0))))) * _2841)) - ((exp2(_2728 * _2852) - exp2(_2728 * _2853)) * _2841))) + (_2721 * cbSceneParam._m0[80u].z);
        }
        vec4 _2883 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2639, _2640, 1.0), 0.0);
        float _2892 = exp2((_2881 * (-1.44269502162933349609375)) * (1.0 - _2883.w));
        float _2893 = log2(_2892);
        float _2909 = log2(_2659);
        _2730 = (exp2(_2909 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2893 * cbSceneParam._m0[78u].x)) * _2883.x) / cbSceneParam._m0[78u].x)) + _2656;
        _2732 = (exp2(_2909 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2893 * cbSceneParam._m0[78u].y)) * _2883.y) / cbSceneParam._m0[78u].y)) + _2657;
        _2734 = (exp2(_2909 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2893 * cbSceneParam._m0[78u].z)) * _2883.z) / cbSceneParam._m0[78u].z)) + _2658;
        _2736 = _2892 * _2659;
    }
    else
    {
        _2730 = _2656;
        _2732 = _2657;
        _2734 = _2658;
        _2736 = _2659;
    }
    float _2748 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2749 = _2748 == 3.0;
    float _2750 = log2(_2736);
    float _2757 = exp2(_2750 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0))) * (_2601 + ((isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0))) * _567))) + ((_2607 + ((isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0))) * _1377)) * cbPerFrame._m0[3u].x));
    float _2758 = exp2(_2750 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0))) * (_2603 + ((isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0))) * _567))) + ((_2609 + ((isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0))) * _1377)) * cbPerFrame._m0[3u].x));
    float _2759 = exp2(_2750 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0))) * (_2605 + ((isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0))) * _567))) + ((_2611 + ((isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0))) * _1377)) * cbPerFrame._m0[3u].x));
    float _2768 = (_2748 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2768 * (_2749 ? _2757 : (_2757 + (cbSceneParam._m0[72u].w * _2730)));
    SV_Target.y = _2768 * (_2749 ? _2758 : (_2758 + (cbSceneParam._m0[72u].w * _2732)));
    SV_Target.z = _2768 * (_2749 ? _2759 : (_2759 + (cbSceneParam._m0[72u].w * _2734)));
    SV_Target.w = cbInstanceData._m0[_2631].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2631].w;
}


