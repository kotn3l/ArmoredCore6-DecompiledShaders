#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _987;
float _3658;
float _3659;
float _3660;
float _3661;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _192 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _193 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _194 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _200 = inversesqrt(dot(vec3(_192, _193, _194), vec3(_192, _193, _194)));
    float _207 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _208 = _207 * NORMAL.x;
    float _209 = _207 * NORMAL.y;
    float _210 = _207 * NORMAL.z;
    float _214 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _222;
    float _223;
    float _224;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _222 = (-0.0) - _208;
        _223 = (-0.0) - _209;
        _224 = (-0.0) - _210;
    }
    else
    {
        _222 = _208;
        _223 = _209;
        _224 = _210;
    }
    vec4 _250 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _256 = _250.w;
    float _257 = _250.x * cbMtdParam._m0[9u].x;
    float _258 = _250.y * cbMtdParam._m0[9u].y;
    float _259 = _250.z * cbMtdParam._m0[9u].z;
    vec4 _271 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _275 = _271.z;
    float _279 = (_271.x * 2.0) + (-1.0);
    float _281 = (_271.y * 2.0) + (-1.0);
    float _282 = dot(vec2(_279, _281), vec2(_279, _281));
    float _3670 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    float _288 = sqrt(1.0 - (isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0))));
    vec4 _305 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w));
    float _317 = (TEXCOORD_3.x - ((cbMtdParam._m0[12u].y * (1.0 - TEXCOORD_3.x)) * ((_305.x * cbMtdParam._m0[12u].y) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[12u].z + 1.0);
    float _3681 = isnan(0.0) ? _317 : (isnan(_317) ? 0.0 : max(_317, 0.0));
    float _318 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
    float _325 = (_318 * (cbMtdParam._m0[10u].x - _257)) + _257;
    float _326 = (_318 * (cbMtdParam._m0[10u].y - _258)) + _258;
    float _327 = (_318 * (cbMtdParam._m0[10u].z - _259)) + _259;
    vec4 _339 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _341 = _339.x;
    float _343 = _341 - (_341 * _318);
    vec4 _355 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _362 = (_355.x * 2.0) + (-1.0);
    float _363 = (_355.y * 2.0) + (-1.0);
    float _364 = dot(vec2(_362, _363), vec2(_362, _363));
    float _3692 = isnan(0.0) ? _364 : (isnan(_364) ? 0.0 : max(_364, 0.0));
    float _372 = (_318 * (_355.z - _275)) + _275;
    float _384 = (((_362 - _279) + (cbMtdParam._m0[12u].w * _279)) * _318) + _279;
    float _385 = (((_363 - _281) + (cbMtdParam._m0[12u].w * _281)) * _318) + _281;
    float _386 = (_318 * (sqrt(1.0 - (isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0)))) - _288)) + _288;
    float _389 = fma(_386, _222, fma(_385, _214 * TANGENT.x, (_200 * _192) * _384));
    float _392 = fma(_386, _223, fma(_385, _214 * TANGENT.y, (_200 * _193) * _384));
    float _395 = fma(_386, _224, fma(_385, _214 * TANGENT.z, (_200 * _194) * _384));
    float _399 = inversesqrt(dot(vec3(_389, _392, _395), vec3(_389, _392, _395)));
    float _400 = _399 * _389;
    float _401 = _399 * _392;
    float _402 = _399 * _395;
    float _3703 = isnan(0.0) ? _372 : (isnan(_372) ? 0.0 : max(_372, 0.0));
    float _403 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
    float _3714 = isnan(0.0) ? _325 : (isnan(_325) ? 0.0 : max(_325, 0.0));
    float _3725 = isnan(0.0) ? _326 : (isnan(_326) ? 0.0 : max(_326, 0.0));
    float _3736 = isnan(0.0) ? _327 : (isnan(_327) ? 0.0 : max(_327, 0.0));
    float _3747 = isnan(0.0) ? _343 : (isnan(_343) ? 0.0 : max(_343, 0.0));
    float _407 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
    float _423 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _465 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _475 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _465);
    float _476 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _465);
    float _477 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _465);
    float _481 = inversesqrt(dot(vec3(_475, _476, _477), vec3(_475, _476, _477)));
    float _482 = _475 * _481;
    float _483 = _476 * _481;
    float _484 = _477 * _481;
    vec4 _489 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _491 = _489.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _667 = sqrt(((_475 * _475) + (_476 * _476)) + (_477 * _477));
        float _673 = (cbMatDynParam._m0[5u].x * _667) + cbMatDynParam._m0[5u].y;
        float _3758 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
        float _674 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
        float _678 = (cbMatDynParam._m0[5u].z * _667) + cbMatDynParam._m0[5u].w;
        float _3769 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0))) - _674)) + _674) < ((_491 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _503 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _504 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _524 = fma(_402, cbSceneParam._m0[5u].z, fma(_401, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _400));
    float _527 = fma(_402, cbSceneParam._m0[6u].z, fma(_401, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _400));
    float _530 = fma(_402, cbSceneParam._m0[7u].z, fma(_401, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _400));
    uint _543 = uint(roundEven(NORMAL.w)) * 13u;
    uint _545 = _543 + 9u;
    uint _546 = _545 + uint(cbMatDynParam._m0[0u].w);
    float _552 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0)))) * cbInstanceData._m0[_546].x;
    float _553 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0)))) * cbInstanceData._m0[_546].y;
    float _554 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0)))) * cbInstanceData._m0[_546].z;
    float _3780 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    float _555 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
    float _3791 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
    float _556 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
    float _3802 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _557 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
    float _558 = 1.0 - _407;
    float _559 = _555 * _558;
    float _560 = _556 * _558;
    float _561 = _557 * _558;
    float _566 = (_555 + (-0.039999999105930328369140625)) * _407;
    float _567 = (_556 + (-0.039999999105930328369140625)) * _407;
    float _568 = (_557 + (-0.039999999105930328369140625)) * _407;
    float _569 = _566 + 0.039999999105930328369140625;
    float _571 = _567 + 0.039999999105930328369140625;
    float _572 = _568 + 0.039999999105930328369140625;
    vec4 _581 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _503, cbSceneParam._m0[86u].y * _504));
    float _584 = _581.x * TEXCOORD_3.w;
    float _585 = dot(vec3(_400, _401, _402), vec3(_482, _483, _484));
    float _588 = _585 * 2.0;
    float _592 = (_588 * _400) - _482;
    float _593 = (_588 * _401) - _483;
    float _594 = (_588 * _402) - _484;
    float _598 = abs(dot(vec3(_482, _483, _484), vec3(_400, _401, _402)));
    float _3813 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _600 = sqrt(_403);
    float _613 = exp2((_600 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_600 * 3.0));
    float _619 = (1.0 - _613) * ((_600 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _620 = _613 * _600;
    float _648 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _652 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _656 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _986;
    float _988;
    float _989;
    float _990;
    float _991;
    float _992;
    float _993;
    float _994;
    float _995;
    float _996;
    float _997;
    float _998;
    float _999;
    float _1000;
    float _1001;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _711 = fma(_656, cbModelParam._m0[26u].z, fma(_652, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _648));
        float _715 = fma(_656, cbModelParam._m0[27u].z, fma(_652, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _648));
        float _719 = fma(_656, cbModelParam._m0[28u].z, fma(_652, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _648));
        float _744 = _648 + _400;
        float _745 = _652 + _401;
        float _746 = _656 + _402;
        float _756 = fma(_746, cbModelParam._m0[26u].z, fma(_745, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _744)) - _711;
        float _757 = fma(_746, cbModelParam._m0[27u].z, fma(_745, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _744)) - _715;
        float _758 = fma(_746, cbModelParam._m0[28u].z, fma(_745, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _744)) - _719;
        float _762 = inversesqrt(dot(vec3(_756, _757, _758), vec3(_756, _757, _758)));
        float _775 = ((_762 * _756) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_711 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _776 = ((_762 * _757) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_715 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _777 = ((_762 * _758) / cbModelParam._m0[34u].z) + ((((((_719 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _780 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_775, _776, _777), 0.0);
        vec4 _787 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_775, _776, _777), 0.0);
        vec4 _794 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_775, _776, _777), 0.0);
        vec4 _801 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_775, _776, _777), 0.0);
        float _814 = exp2((_780.w + (-0.5)) * 20.0) * 2.0;
        float _815 = _814 * (_780.x + (-0.5));
        float _816 = _814 * (_780.y + (-0.5));
        float _817 = _814 * (_780.z + (-0.5));
        float _824 = exp2((_787.w + (-0.5)) * 20.0) * 2.0;
        float _825 = _824 * (_787.x + (-0.5));
        float _826 = _824 * (_787.y + (-0.5));
        float _827 = _824 * (_787.z + (-0.5));
        float _834 = exp2((_794.w + (-0.5)) * 20.0) * 2.0;
        float _835 = _834 * (_794.x + (-0.5));
        float _836 = _834 * (_794.y + (-0.5));
        float _837 = _834 * (_794.z + (-0.5));
        float _844 = exp2((_801.w + (-0.5)) * 20.0) * 2.0;
        float _845 = _844 * (_801.x + (-0.5));
        float _846 = _844 * (_801.y + (-0.5));
        float _847 = _844 * (_801.z + (-0.5));
        float _848 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
        float _849 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
        float _850 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
        float _851 = _815 * 0.5;
        float _852 = _825 * 0.5;
        float _853 = _835 * 0.5;
        float _854 = dot(vec3(_851, _852, _853), vec3(_851, _852, _853));
        float _859 = (_854 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_854);
        float _868 = (dot(vec3(_400, _401, _402), vec3(_859 * _851, _859 * _852, _859 * _853)) + 1.0) * 0.5;
        float _3839 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
        float _878 = sqrt(((_852 * _852) + (_851 * _851)) + (_853 * _853)) / (_848 + 9.9999997473787516355514526367188e-06);
        float _3850 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
        float _879 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
        float _880 = _879 * 2.0;
        float _884 = (1.0 - _879) / (_879 + 1.0);
        float _3861 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
        float _885 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
        float _894 = ((((1.0 - _885) * (_880 + 2.0)) * exp2(log2(isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0))) * (_880 + 1.0))) + _885) * _848;
        float _895 = _816 * 0.5;
        float _896 = _826 * 0.5;
        float _897 = _836 * 0.5;
        float _898 = dot(vec3(_895, _896, _897), vec3(_895, _896, _897));
        float _903 = (_898 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_898);
        float _911 = (dot(vec3(_400, _401, _402), vec3(_903 * _895, _903 * _896, _903 * _897)) + 1.0) * 0.5;
        float _3872 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
        float _920 = sqrt(((_896 * _896) + (_895 * _895)) + (_897 * _897)) / (_849 + 9.9999997473787516355514526367188e-06);
        float _3883 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
        float _921 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
        float _922 = _921 * 2.0;
        float _926 = (1.0 - _921) / (_921 + 1.0);
        float _3894 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
        float _927 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
        float _936 = ((((1.0 - _927) * (_922 + 2.0)) * exp2(log2(isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0))) * (_922 + 1.0))) + _927) * _849;
        float _937 = _817 * 0.5;
        float _938 = _827 * 0.5;
        float _939 = _837 * 0.5;
        float _940 = dot(vec3(_937, _938, _939), vec3(_937, _938, _939));
        float _945 = (_940 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_940);
        float _953 = (dot(vec3(_400, _401, _402), vec3(_945 * _937, _945 * _938, _945 * _939)) + 1.0) * 0.5;
        float _3905 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _962 = sqrt(((_938 * _938) + (_937 * _937)) + (_939 * _939)) / (_850 + 9.9999997473787516355514526367188e-06);
        float _3916 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _963 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
        float _964 = _963 * 2.0;
        float _968 = (1.0 - _963) / (_963 + 1.0);
        float _3927 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _969 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
        float _978 = ((((1.0 - _969) * (_964 + 2.0)) * exp2(log2(isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0))) * (_964 + 1.0))) + _969) * _850;
        _986 = _817;
        _988 = _816;
        _989 = _815;
        _990 = _827;
        _991 = _826;
        _992 = _825;
        _993 = _837;
        _994 = _836;
        _995 = _835;
        _996 = _850;
        _997 = _849;
        _998 = _848;
        _999 = cbModelParam._m0[36u].z * (isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0)));
        _1000 = cbModelParam._m0[36u].z * (isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0)));
        _1001 = cbModelParam._m0[36u].z * (isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0)));
    }
    else
    {
        _986 = _987;
        _988 = _987;
        _989 = _987;
        _990 = _987;
        _991 = _987;
        _992 = _987;
        _993 = _987;
        _994 = _987;
        _995 = _987;
        _996 = _987;
        _997 = _987;
        _998 = _987;
        _999 = 0.0;
        _1000 = 0.0;
        _1001 = 0.0;
    }
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1030 = fma(_656, cbModelParam._m0[30u].z, fma(_652, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _648));
        float _1034 = fma(_656, cbModelParam._m0[31u].z, fma(_652, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _648));
        float _1038 = fma(_656, cbModelParam._m0[32u].z, fma(_652, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _648));
        float _1061 = _648 + _400;
        float _1062 = _652 + _401;
        float _1063 = _656 + _402;
        float _1073 = fma(_1063, cbModelParam._m0[30u].z, fma(_1062, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1061)) - _1030;
        float _1074 = fma(_1063, cbModelParam._m0[31u].z, fma(_1062, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1061)) - _1034;
        float _1075 = fma(_1063, cbModelParam._m0[32u].z, fma(_1062, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1061)) - _1038;
        float _1079 = inversesqrt(dot(vec3(_1073, _1074, _1075), vec3(_1073, _1074, _1075)));
        float _1092 = ((_1079 * _1073) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1030 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1093 = ((_1079 * _1074) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1034 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1094 = ((_1079 * _1075) / cbModelParam._m0[35u].z) + ((((((_1038 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1096 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1092, _1093, _1094), 0.0);
        vec4 _1103 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1092, _1093, _1094), 0.0);
        vec4 _1110 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1092, _1093, _1094), 0.0);
        vec4 _1117 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1092, _1093, _1094), 0.0);
        float _1129 = exp2((_1096.w + (-0.5)) * 20.0) * 2.0;
        float _1130 = _1129 * (_1096.x + (-0.5));
        float _1131 = _1129 * (_1096.y + (-0.5));
        float _1132 = _1129 * (_1096.z + (-0.5));
        float _1139 = exp2((_1103.w + (-0.5)) * 20.0) * 2.0;
        float _1140 = _1139 * (_1103.x + (-0.5));
        float _1141 = _1139 * (_1103.y + (-0.5));
        float _1142 = _1139 * (_1103.z + (-0.5));
        float _1149 = exp2((_1110.w + (-0.5)) * 20.0) * 2.0;
        float _1150 = _1149 * (_1110.x + (-0.5));
        float _1151 = _1149 * (_1110.y + (-0.5));
        float _1152 = _1149 * (_1110.z + (-0.5));
        float _1159 = exp2((_1117.w + (-0.5)) * 20.0) * 2.0;
        float _1160 = _1159 * (_1117.x + (-0.5));
        float _1161 = _1159 * (_1117.y + (-0.5));
        float _1162 = _1159 * (_1117.z + (-0.5));
        float _1163 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1164 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1165 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1166 = _1130 * 0.5;
        float _1167 = _1140 * 0.5;
        float _1168 = _1150 * 0.5;
        float _1169 = dot(vec3(_1166, _1167, _1168), vec3(_1166, _1167, _1168));
        float _1174 = (_1169 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1169);
        float _1182 = (dot(vec3(_400, _401, _402), vec3(_1174 * _1166, _1174 * _1167, _1174 * _1168)) + 1.0) * 0.5;
        float _3968 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1191 = sqrt(((_1167 * _1167) + (_1166 * _1166)) + (_1168 * _1168)) / (_1163 + 9.9999997473787516355514526367188e-06);
        float _3979 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1192 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
        float _1193 = _1192 * 2.0;
        float _1197 = (1.0 - _1192) / (_1192 + 1.0);
        float _3990 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1198 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
        float _1207 = ((((1.0 - _1198) * (_1193 + 2.0)) * exp2(log2(isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0))) * (_1193 + 1.0))) + _1198) * _1163;
        float _1208 = _1131 * 0.5;
        float _1209 = _1141 * 0.5;
        float _1210 = _1151 * 0.5;
        float _1211 = dot(vec3(_1208, _1209, _1210), vec3(_1208, _1209, _1210));
        float _1216 = (_1211 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1211);
        float _1224 = (dot(vec3(_400, _401, _402), vec3(_1216 * _1208, _1216 * _1209, _1216 * _1210)) + 1.0) * 0.5;
        float _4001 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1233 = sqrt(((_1209 * _1209) + (_1208 * _1208)) + (_1210 * _1210)) / (_1164 + 9.9999997473787516355514526367188e-06);
        float _4012 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1234 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
        float _1235 = _1234 * 2.0;
        float _1239 = (1.0 - _1234) / (_1234 + 1.0);
        float _4023 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1240 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
        float _1249 = ((((1.0 - _1240) * (_1235 + 2.0)) * exp2(log2(isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0))) * (_1235 + 1.0))) + _1240) * _1164;
        float _1250 = _1132 * 0.5;
        float _1251 = _1142 * 0.5;
        float _1252 = _1152 * 0.5;
        float _1253 = dot(vec3(_1250, _1251, _1252), vec3(_1250, _1251, _1252));
        float _1258 = (_1253 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1253);
        float _1266 = (dot(vec3(_400, _401, _402), vec3(_1258 * _1250, _1258 * _1251, _1258 * _1252)) + 1.0) * 0.5;
        float _4034 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1275 = sqrt(((_1251 * _1251) + (_1250 * _1250)) + (_1252 * _1252)) / (_1165 + 9.9999997473787516355514526367188e-06);
        float _4045 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1276 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
        float _1277 = _1276 * 2.0;
        float _1281 = (1.0 - _1276) / (_1276 + 1.0);
        float _4056 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1282 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
        float _1291 = ((((1.0 - _1282) * (_1277 + 2.0)) * exp2(log2(isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0))) * (_1277 + 1.0))) + _1282) * _1165;
        _1299 = _1132;
        _1300 = _1131;
        _1301 = _1130;
        _1302 = _1142;
        _1303 = _1141;
        _1304 = _1140;
        _1305 = _1152;
        _1306 = _1151;
        _1307 = _1150;
        _1308 = _1165;
        _1309 = _1164;
        _1310 = _1163;
        _1311 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0)));
        _1312 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0)));
        _1313 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0)));
    }
    else
    {
        _1299 = _987;
        _1300 = _987;
        _1301 = _987;
        _1302 = _987;
        _1303 = _987;
        _1304 = _987;
        _1305 = _987;
        _1306 = _987;
        _1307 = _987;
        _1308 = _987;
        _1309 = _987;
        _1310 = _987;
        _1311 = 0.0;
        _1312 = 0.0;
        _1313 = 0.0;
    }
    float _1323 = (cbModelParam._m0[1u].x * (_1311 - _999)) + _999;
    float _1324 = (cbModelParam._m0[1u].x * (_1312 - _1000)) + _1000;
    float _1325 = (cbModelParam._m0[1u].x * (_1313 - _1001)) + _1001;
    float _1346 = fma(_1325, cbSceneParam._m0[89u].z, fma(_1324, cbSceneParam._m0[89u].y, _1323 * cbSceneParam._m0[89u].x));
    float _1349 = fma(_1325, cbSceneParam._m0[90u].z, fma(_1324, cbSceneParam._m0[90u].y, _1323 * cbSceneParam._m0[90u].x));
    float _1352 = fma(_1325, cbSceneParam._m0[91u].z, fma(_1324, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1323));
    float _1367 = _592 * 0.5;
    float _1368 = _593 * 0.5;
    float _1369 = _594 * 0.5;
    float _1370 = dot(vec4(_1367, _1368, _1369, 1.0), vec4(_1301, _1304, _1307, _1310));
    float _1373 = dot(vec4(_1367, _1368, _1369, 1.0), vec4(_1300, _1303, _1306, _1309));
    float _1376 = dot(vec4(_1367, _1368, _1369, 1.0), vec4(_1299, _1302, _1305, _1308));
    float _1410;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1383 = dot(vec4(_1367, _1368, _1369, 1.0), vec4(_986, _990, _993, _996));
        float _1387 = dot(vec4(_1367, _1368, _1369, 1.0), vec4(_988, _991, _994, _997));
        float _1391 = dot(vec4(_1367, _1368, _1369, 1.0), vec4(_989, _992, _995, _998));
        float _1398 = dot(vec4(cbModelParam._m0[39u]), vec4(_1367, _1368, _1369, 1.0));
        _1410 = dot(vec3(isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0)), isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0)), isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1398) ? 0.0 : (isnan(0.0) ? _1398 : max(0.0, _1398))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1410 = 1.0;
    }
    float _1421;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1412 = dot(vec4(cbModelParam._m0[40u]), vec4(_1367, _1368, _1369, 1.0));
        _1421 = dot(vec3(isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0)), isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0)), isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1412) ? 0.0 : (isnan(0.0) ? _1412 : max(0.0, _1412))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1421 = 1.0;
    }
    float _1425 = (_1421 * cbModelParam._m0[1u].x) + (_1410 * (1.0 - cbModelParam._m0[1u].x));
    float _1435 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _403);
    float _1436 = isnan(_1435) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1435 : min(cbModelParam._m0[25u].z, _1435));
    float _1517;
    float _1519;
    float _1521;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1484 = fma(_656, cbModelParam._m0[13u].z, fma(_652, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _648)) + cbModelParam._m0[13u].w;
        float _1488 = fma(_656, cbModelParam._m0[14u].z, fma(_652, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _648)) + cbModelParam._m0[14u].w;
        float _1492 = fma(_656, cbModelParam._m0[15u].z, fma(_652, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _648)) + cbModelParam._m0[15u].w;
        float _1495 = fma(_594, cbModelParam._m0[13u].z, fma(_593, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _592));
        float _1498 = fma(_594, cbModelParam._m0[14u].z, fma(_593, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _592));
        float _1501 = fma(_594, cbModelParam._m0[15u].z, fma(_593, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _592));
        float _1529;
        if (_1495 > 0.0)
        {
            _1529 = abs((1.0 - _1484) / _1495);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1495 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1484 + 1.0) / _1495);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1529 = frontier_phi_19_17_ladder;
        }
        float _1704;
        if (_1498 > 0.0)
        {
            _1704 = abs((1.0 - _1488) / _1498);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1498 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1488 + 1.0) / _1498);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1704 = frontier_phi_28_24_ladder;
        }
        float _1999;
        if (_1501 > 0.0)
        {
            _1999 = abs((1.0 - _1492) / _1501);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1501 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1492 + 1.0) / _1501);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1999 = frontier_phi_40_35_ladder;
        }
        float _2001 = isnan(_1704) ? _1529 : (isnan(_1529) ? _1704 : min(_1529, _1704));
        float _2002 = isnan(_1999) ? _2001 : (isnan(_2001) ? _1999 : min(_2001, _1999));
        float _2006 = (_2002 * _1495) + _1484;
        float _2007 = (_2002 * _1498) + _1488;
        float _2008 = (_2002 * _1501) + _1492;
        float _2009 = _2002 * 9.9999997473787516355514526367188e-05;
        float _2011 = (-1.0) - _2009;
        float _2013 = _2009 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2008 > _2013) || ((_2008 < _2011) || ((_2007 > _2013) || ((_2007 < _2011) || ((_2006 < _2011) || (_2006 > _2013))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2153 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2008, cbModelParam._m0[9u].z, fma(_2007, cbModelParam._m0[9u].y, _2006 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2008, cbModelParam._m0[10u].z, fma(_2007, cbModelParam._m0[10u].y, _2006 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2008, cbModelParam._m0[11u].z, fma(_2007, cbModelParam._m0[11u].y, _2006 * cbModelParam._m0[11u].x))), _1436);
            frontier_phi_18_40_ladder = _2153.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2153.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2153.x * cbModelParam._m0[1u].y;
        }
        _1517 = frontier_phi_18_40_ladder_2;
        _1519 = frontier_phi_18_40_ladder_1;
        _1521 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1505 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_592, _593, _594), _1436);
        _1517 = _1505.x * cbModelParam._m0[1u].y;
        _1519 = _1505.y * cbModelParam._m0[1u].y;
        _1521 = _1505.z * cbModelParam._m0[1u].y;
    }
    float _1525 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _403);
    float _1526 = isnan(_1525) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1525 : min(cbModelParam._m0[25u].w, _1525));
    float _1619;
    float _1621;
    float _1623;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1583 = fma(_656, cbModelParam._m0[21u].z, fma(_652, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _648)) + cbModelParam._m0[21u].w;
        float _1587 = fma(_656, cbModelParam._m0[22u].z, fma(_652, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _648)) + cbModelParam._m0[22u].w;
        float _1591 = fma(_656, cbModelParam._m0[23u].z, fma(_652, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _648)) + cbModelParam._m0[23u].w;
        float _1594 = fma(_594, cbModelParam._m0[21u].z, fma(_593, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _592));
        float _1597 = fma(_594, cbModelParam._m0[22u].z, fma(_593, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _592));
        float _1600 = fma(_594, cbModelParam._m0[23u].z, fma(_593, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _592));
        float _1709;
        if (_1594 > 0.0)
        {
            _1709 = abs((1.0 - _1583) / _1594);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1594 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1583 + 1.0) / _1594);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1709 = frontier_phi_30_26_ladder;
        }
        float _2026;
        if (_1597 > 0.0)
        {
            _2026 = abs((1.0 - _1587) / _1597);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1597 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1587 + 1.0) / _1597);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2026 = frontier_phi_42_37_ladder;
        }
        float _2364;
        if (_1600 > 0.0)
        {
            _2364 = abs((1.0 - _1591) / _1600);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1600 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1591 + 1.0) / _1600);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2364 = frontier_phi_52_49_ladder;
        }
        float _2366 = isnan(_2026) ? _1709 : (isnan(_1709) ? _2026 : min(_1709, _2026));
        float _2367 = isnan(_2364) ? _2366 : (isnan(_2366) ? _2364 : min(_2366, _2364));
        float _2371 = (_2367 * _1594) + _1583;
        float _2372 = (_2367 * _1597) + _1587;
        float _2373 = (_2367 * _1600) + _1591;
        float _2374 = _2367 * 9.9999997473787516355514526367188e-05;
        float _2375 = (-1.0) - _2374;
        float _2377 = _2374 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2373 > _2377) || ((_2373 < _2375) || ((_2372 > _2377) || ((_2372 < _2375) || ((_2371 < _2375) || (_2371 > _2377))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2495 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2373, cbModelParam._m0[17u].z, fma(_2372, cbModelParam._m0[17u].y, _2371 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2373, cbModelParam._m0[18u].z, fma(_2372, cbModelParam._m0[18u].y, _2371 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2373, cbModelParam._m0[19u].z, fma(_2372, cbModelParam._m0[19u].y, _2371 * cbModelParam._m0[19u].x))), _1526);
            frontier_phi_27_52_ladder = _2495.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2495.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2495.x * cbModelParam._m0[1u].z;
        }
        _1619 = frontier_phi_27_52_ladder_2;
        _1621 = frontier_phi_27_52_ladder_1;
        _1623 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1603 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_592, _593, _594), _1526);
        _1619 = _1603.x * cbModelParam._m0[1u].z;
        _1621 = _1603.y * cbModelParam._m0[1u].z;
        _1623 = _1603.z * cbModelParam._m0[1u].z;
    }
    float _1636 = (((_619 * _569) + _620) * _584) * ((cbModelParam._m0[1u].w * (_1619 - _1517)) + _1517);
    float _1638 = (((_619 * _571) + _620) * _584) * ((cbModelParam._m0[1u].w * (_1621 - _1519)) + _1519);
    float _1640 = (((_619 * _572) + _620) * _584) * ((cbModelParam._m0[1u].w * (_1623 - _1521)) + _1521);
    float _1643 = fma(_1640, cbSceneParam._m0[89u].z, fma(_1638, cbSceneParam._m0[89u].y, _1636 * cbSceneParam._m0[89u].x));
    float _1646 = fma(_1640, cbSceneParam._m0[90u].z, fma(_1638, cbSceneParam._m0[90u].y, _1636 * cbSceneParam._m0[90u].x));
    float _1649 = fma(_1640, cbSceneParam._m0[91u].z, fma(_1638, cbSceneParam._m0[91u].y, _1636 * cbSceneParam._m0[91u].x));
    float _1683 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1687 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1691 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1695 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1696 = _1683 / _1695;
    float _1697 = _1687 / _1695;
    float _1698 = _1691 / _1695;
    float _1845;
    float _1846;
    float _1847;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1725 = ((uint(_1698 > cbSceneParam._m0[59u].y) + uint(_1698 > cbSceneParam._m0[59u].x)) + uint(_1698 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1726 = _1725 + 43u;
        uint _1734 = _1725 + 44u;
        uint _1742 = _1725 + 45u;
        uint _1750 = _1725 + 46u;
        float _1761 = fma(_1695, cbSceneParam._m0[_1726].w, fma(_1691, cbSceneParam._m0[_1726].z, fma(_1687, cbSceneParam._m0[_1726].y, _1683 * cbSceneParam._m0[_1726].x)));
        float _1765 = fma(_1695, cbSceneParam._m0[_1734].w, fma(_1691, cbSceneParam._m0[_1734].z, fma(_1687, cbSceneParam._m0[_1734].y, _1683 * cbSceneParam._m0[_1734].x)));
        float _1773 = fma(_1695, cbSceneParam._m0[_1750].w, fma(_1691, cbSceneParam._m0[_1750].z, fma(_1687, cbSceneParam._m0[_1750].y, _1683 * cbSceneParam._m0[_1750].x)));
        float _1778 = cbSceneParam._m0[33u].z * _1773;
        float _1780 = cbSceneParam._m0[33u].w * _1773;
        float _1783 = fma(_1695, cbSceneParam._m0[_1742].w, fma(_1691, cbSceneParam._m0[_1742].z, fma(_1687, cbSceneParam._m0[_1742].y, _1683 * cbSceneParam._m0[_1742].x))) / _1773;
        float _1831 = (cbSceneParam._m0[33u].x - sqrt(((_1697 * _1697) + (_1696 * _1696)) + (_1698 * _1698))) * cbSceneParam._m0[33u].y;
        float _4182 = isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0));
        float _1838 = (isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1778 + _1761) / _1773, (_1780 + _1765) / _1773), _1783), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1780 + _1761) / _1773, (_1765 - _1778) / _1773), _1783), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1761 - _1778) / _1773, (_1765 - _1780) / _1773), _1783), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1761 - _1780) / _1773, (_1778 + _1765) / _1773), _1783), 0.0)).x), vec4(0.25)));
        _1845 = 1.0 - (_1838 * cbSceneParam._m0[34u].x);
        _1846 = 1.0 - (_1838 * cbSceneParam._m0[34u].y);
        _1847 = 1.0 - (_1838 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1845 = 1.0;
        _1846 = 1.0;
        _1847 = 1.0;
    }
    float _1911;
    float _1913;
    float _1915;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1899 = fma(_1695, cbSceneParam._m0[63u].w, fma(_1691, cbSceneParam._m0[63u].z, fma(_1687, cbSceneParam._m0[63u].y, _1683 * cbSceneParam._m0[63u].x)));
        float _1900 = fma(_1695, cbSceneParam._m0[60u].w, fma(_1691, cbSceneParam._m0[60u].z, fma(_1687, cbSceneParam._m0[60u].y, _1683 * cbSceneParam._m0[60u].x))) / _1899;
        float _1901 = fma(_1695, cbSceneParam._m0[61u].w, fma(_1691, cbSceneParam._m0[61u].z, fma(_1687, cbSceneParam._m0[61u].y, _1683 * cbSceneParam._m0[61u].x))) / _1899;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1900 >= cbSceneParam._m0[64u].x) && (_1901 >= cbSceneParam._m0[64u].y)) && (_1900 <= cbSceneParam._m0[64u].z)) && (_1901 <= cbSceneParam._m0[64u].w))
        {
            float _2039 = fma(_1695, cbSceneParam._m0[62u].w, fma(_1691, cbSceneParam._m0[62u].z, fma(_1687, cbSceneParam._m0[62u].y, _1683 * cbSceneParam._m0[62u].x))) / _1899;
            float _2043 = isnan(cbSceneParam._m0[41u].w) ? _2039 : (isnan(_2039) ? cbSceneParam._m0[41u].w : max(_2039, cbSceneParam._m0[41u].w));
            float _2086 = (cbSceneParam._m0[33u].x - sqrt(((_1697 * _1697) + (_1696 * _1696)) + (_1698 * _1698))) * cbSceneParam._m0[33u].y;
            float _4198 = isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0));
            float _2093 = (isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1900, cbSceneParam._m0[33u].w + _1901), _2043), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1900, _1901 - cbSceneParam._m0[33u].z), _2043), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1900 - cbSceneParam._m0[33u].z, _1901 - cbSceneParam._m0[33u].w), _2043), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1900 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1901), _2043), 0.0)).x), vec4(0.25)));
            float _2097 = 1.0 - (_2093 * cbSceneParam._m0[34u].x);
            float _2098 = 1.0 - (_2093 * cbSceneParam._m0[34u].y);
            float _2099 = 1.0 - (_2093 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2098) ? _1846 : (isnan(_1846) ? _2098 : min(_1846, _2098));
            frontier_phi_39_38_ladder_1 = isnan(_2097) ? _1845 : (isnan(_1845) ? _2097 : min(_1845, _2097));
            frontier_phi_39_38_ladder_2 = isnan(_2099) ? _1847 : (isnan(_1847) ? _2099 : min(_1847, _2099));
        }
        else
        {
            frontier_phi_39_38_ladder = _1846;
            frontier_phi_39_38_ladder_1 = _1845;
            frontier_phi_39_38_ladder_2 = _1847;
        }
        _1911 = frontier_phi_39_38_ladder_1;
        _1913 = frontier_phi_39_38_ladder;
        _1915 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _1911 = _1845;
        _1913 = _1846;
        _1915 = _1847;
    }
    uvec4 _1920 = floatBitsToUint(cbInstanceData._m0[_543 + 5u]);
    uint _1922 = _1920.x * 14u;
    uint _1923 = _1922 + 13u;
    float _1930 = _584 + (-1.0);
    float _1935 = (cbLight._m0[_1923].x * _1930) + 1.0;
    float _1936 = (cbLight._m0[_1923].y * _1930) + 1.0;
    float _1937 = (cbLight._m0[_1923].z * _1930) + 1.0;
    float _1938 = (cbLight._m0[_1923].w * _1930) + 1.0;
    uint _1939 = _1922 + 5u;
    float _1945 = isnan(1.0) ? _1936 : (isnan(_1936) ? 1.0 : min(_1936, 1.0));
    uint _1949 = _1922 + 4u;
    float _1958 = isnan(1.0) ? _1935 : (isnan(_1935) ? 1.0 : min(_1935, 1.0));
    uint _1962 = _1922 | 1u;
    float _1973 = dot(vec3(cbLight._m0[_1922].xyz), vec3(_400, _401, _402));
    float _1976 = dot(vec3(cbLight._m0[_1962].xyz), vec3(_400, _401, _402));
    float _4234 = isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0));
    float _4245 = isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0));
    float _1981 = (isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0))) * 0.3183098733425140380859375;
    float _1983 = (isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0))) * 0.3183098733425140380859375;
    float _1990 = ((cbLight._m0[_1939].x * _1945) * _1983) + (((cbLight._m0[_1949].x * _1911) * _1958) * _1981);
    float _1991 = ((_1945 * cbLight._m0[_1939].y) * _1983) + (((cbLight._m0[_1949].y * _1913) * _1958) * _1981);
    float _1992 = ((_1945 * cbLight._m0[_1939].z) * _1983) + (((cbLight._m0[_1949].z * _1915) * _1958) * _1981);
    uvec4 _1996 = floatBitsToUint(cbLight._m0[_1922 + 12u]);
    bool _1998 = _1996.x == 0u;
    float _2100;
    float _2102;
    float _2104;
    if (_1998)
    {
        _2100 = _1990;
        _2102 = _1991;
        _2104 = _1992;
    }
    else
    {
        uint _2108 = _1922 + 6u;
        float _2124 = (dot(vec3(cbLight._m0[_1922 + 2u].xyz), vec3(_400, _401, _402)) * 0.5) + 0.5;
        float _2125 = _2124 * _2124;
        float _4256 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
        float _2126 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
        float _2127 = isnan(1.0) ? _1937 : (isnan(_1937) ? 1.0 : min(_1937, 1.0));
        _2100 = (((cbLight._m0[_2108].x * 0.3183098733425140380859375) * _2126) * _2127) + _1990;
        _2102 = (((cbLight._m0[_2108].y * 0.3183098733425140380859375) * _2126) * _2127) + _1991;
        _2104 = (((cbLight._m0[_2108].z * 0.3183098733425140380859375) * _2126) * _2127) + _1992;
    }
    bool _2107 = _1996.y == 0u;
    float _2162;
    float _2164;
    float _2166;
    if (_2107)
    {
        _2162 = _2100;
        _2164 = _2102;
        _2166 = _2104;
    }
    else
    {
        uint _2335 = _1922 + 7u;
        float _2351 = (dot(vec3(cbLight._m0[_1922 + 3u].xyz), vec3(_400, _401, _402)) * 0.5) + 0.5;
        float _2352 = _2351 * _2351;
        float _4272 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
        float _2353 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
        float _2354 = isnan(1.0) ? _1938 : (isnan(_1938) ? 1.0 : min(_1938, 1.0));
        _2162 = (((cbLight._m0[_2335].x * 0.3183098733425140380859375) * _2353) * _2354) + _2100;
        _2164 = (((cbLight._m0[_2335].y * 0.3183098733425140380859375) * _2353) * _2354) + _2102;
        _2166 = (((cbLight._m0[_2335].z * 0.3183098733425140380859375) * _2353) * _2354) + _2104;
    }
    uint _2169 = _1922 + 8u;
    float _2182 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1922].w)) * _403) * 0.949999988079071044921875);
    float _2183 = _2182 * _2182;
    float _2184 = cbLight._m0[_1922].x + _482;
    float _2185 = cbLight._m0[_1922].y + _483;
    float _2186 = cbLight._m0[_1922].z + _484;
    float _2190 = inversesqrt(dot(vec3(_2184, _2185, _2186), vec3(_2184, _2185, _2186)));
    float _2191 = _2190 * _2184;
    float _2192 = _2190 * _2185;
    float _2193 = _2190 * _2186;
    float _2194 = dot(vec3(_400, _401, _402), vec3(cbLight._m0[_1922].xyz));
    float _4288 = isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0));
    float _2197 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
    float _4299 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
    float _2198 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
    float _2199 = dot(vec3(_400, _401, _402), vec3(_2191, _2192, _2193));
    float _4310 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
    float _2202 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
    float _2203 = dot(vec3(cbLight._m0[_1922].xyz), vec3(_2191, _2192, _2193));
    float _4321 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
    float _2207 = _2183 * _2183;
    float _2211 = ((_2202 * _2202) * (_2207 + (-1.0))) + 1.0;
    float _2219 = exp2(log2(1.0 - (isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0)))) * 5.0);
    float _2220 = 0.959999978542327880859375 - _566;
    float _2222 = 0.959999978542327880859375 - _567;
    float _2223 = 0.959999978542327880859375 - _568;
    float _2230 = 1.0 - _2183;
    float _2241 = (0.5 / (((_2198 * ((_2197 * _2230) + _2183)) + 9.9999999392252902907785028219223e-09) + (((_2198 * _2230) + _2183) * _2197))) * _2197;
    float _4332 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
    float _2243 = (isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0))) * (_2207 / ((_2211 * _2211) * 3.141590118408203125));
    uint _2257 = _1922 + 9u;
    float _2268 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1962].w)) * _403) * 0.949999988079071044921875);
    float _2269 = _2268 * _2268;
    float _2270 = cbLight._m0[_1962].x + _482;
    float _2271 = cbLight._m0[_1962].y + _483;
    float _2272 = cbLight._m0[_1962].z + _484;
    float _2276 = inversesqrt(dot(vec3(_2270, _2271, _2272), vec3(_2270, _2271, _2272)));
    float _2277 = _2276 * _2270;
    float _2278 = _2276 * _2271;
    float _2279 = _2276 * _2272;
    float _2280 = dot(vec3(_400, _401, _402), vec3(cbLight._m0[_1962].xyz));
    float _4343 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
    float _2283 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
    float _2284 = dot(vec3(_400, _401, _402), vec3(_2277, _2278, _2279));
    float _4354 = isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0));
    float _2287 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
    float _2288 = dot(vec3(cbLight._m0[_1962].xyz), vec3(_2277, _2278, _2279));
    float _4365 = isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0));
    float _2292 = _2269 * _2269;
    float _2296 = ((_2287 * _2287) * (_2292 + (-1.0))) + 1.0;
    float _2303 = exp2(log2(1.0 - (isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0)))) * 5.0);
    float _2310 = 1.0 - _2269;
    float _2320 = (0.5 / (((_2198 * ((_2283 * _2310) + _2269)) + 9.9999999392252902907785028219223e-09) + (((_2198 * _2310) + _2269) * _2283))) * _2283;
    float _4376 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0));
    float _2322 = (isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0))) * (_2292 / ((_2296 * _2296) * 3.141590118408203125));
    float _2332 = (((((_2303 * _2220) + _569) * cbLight._m0[_2257].x) * _2322) * _1945) + ((((cbLight._m0[_2169].x * _1911) * ((_2219 * _2220) + _569)) * _2243) * _1958);
    float _2333 = (((((_2303 * _2222) + _571) * cbLight._m0[_2257].y) * _2322) * _1945) + ((((cbLight._m0[_2169].y * _1913) * ((_2219 * _2222) + _571)) * _2243) * _1958);
    float _2334 = (((((_2303 * _2223) + _572) * cbLight._m0[_2257].z) * _2322) * _1945) + ((((cbLight._m0[_2169].z * _1915) * ((_2219 * _2223) + _572)) * _2243) * _1958);
    float _2390;
    float _2392;
    float _2394;
    if (_1998)
    {
        _2390 = _2332;
        _2392 = _2333;
        _2394 = _2334;
    }
    else
    {
        uint _2396 = _1922 + 2u;
        uint _2400 = _1922 + 10u;
        float _2414 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2396].w)) * _403) * 0.949999988079071044921875);
        float _2415 = _2414 * _2414;
        float _2416 = cbLight._m0[_2396].x + _482;
        float _2417 = cbLight._m0[_2396].y + _483;
        float _2418 = cbLight._m0[_2396].z + _484;
        float _2422 = inversesqrt(dot(vec3(_2416, _2417, _2418), vec3(_2416, _2417, _2418)));
        float _2423 = _2422 * _2416;
        float _2424 = _2422 * _2417;
        float _2425 = _2422 * _2418;
        float _2426 = dot(vec3(_400, _401, _402), vec3(cbLight._m0[_2396].xyz));
        float _4387 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
        float _2429 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
        float _2430 = dot(vec3(_400, _401, _402), vec3(_2423, _2424, _2425));
        float _4398 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
        float _2433 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
        float _2434 = dot(vec3(cbLight._m0[_2396].xyz), vec3(_2423, _2424, _2425));
        float _4409 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
        float _2438 = _2415 * _2415;
        float _2442 = ((_2433 * _2433) * (_2438 + (-1.0))) + 1.0;
        float _2449 = exp2(log2(1.0 - (isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0)))) * 5.0);
        float _2456 = 1.0 - _2415;
        float _2466 = (0.5 / (((_2198 * ((_2429 * _2456) + _2415)) + 9.9999999392252902907785028219223e-09) + (((_2198 * _2456) + _2415) * _2429))) * _2429;
        float _4420 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
        float _2468 = (isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0))) * (_2438 / ((_2442 * _2442) * 3.141590118408203125));
        float _2469 = isnan(1.0) ? _1937 : (isnan(_1937) ? 1.0 : min(_1937, 1.0));
        _2390 = (((((_2449 * _2220) + _569) * cbLight._m0[_2400].x) * _2468) * _2469) + _2332;
        _2392 = (((((_2449 * _2222) + _571) * cbLight._m0[_2400].y) * _2468) * _2469) + _2333;
        _2394 = (((((_2449 * _2223) + _572) * cbLight._m0[_2400].z) * _2468) * _2469) + _2334;
    }
    float _2500;
    float _2502;
    float _2504;
    if (_2107)
    {
        _2500 = _2390;
        _2502 = _2392;
        _2504 = _2394;
    }
    else
    {
        uint _2511 = _1922 + 3u;
        uint _2515 = _1922 + 11u;
        float _2529 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2511].w)) * _403) * 0.949999988079071044921875);
        float _2530 = _2529 * _2529;
        float _2531 = cbLight._m0[_2511].x + _482;
        float _2532 = cbLight._m0[_2511].y + _483;
        float _2533 = cbLight._m0[_2511].z + _484;
        float _2537 = inversesqrt(dot(vec3(_2531, _2532, _2533), vec3(_2531, _2532, _2533)));
        float _2538 = _2537 * _2531;
        float _2539 = _2537 * _2532;
        float _2540 = _2537 * _2533;
        float _2541 = dot(vec3(_400, _401, _402), vec3(cbLight._m0[_2511].xyz));
        float _4436 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
        float _2544 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
        float _2545 = dot(vec3(_400, _401, _402), vec3(_2538, _2539, _2540));
        float _4447 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0));
        float _2548 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
        float _2549 = dot(vec3(cbLight._m0[_2511].xyz), vec3(_2538, _2539, _2540));
        float _4458 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
        float _2553 = _2530 * _2530;
        float _2557 = ((_2548 * _2548) * (_2553 + (-1.0))) + 1.0;
        float _2564 = exp2(log2(1.0 - (isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0)))) * 5.0);
        float _2571 = 1.0 - _2530;
        float _2581 = (0.5 / (((_2198 * ((_2544 * _2571) + _2530)) + 9.9999999392252902907785028219223e-09) + (((_2198 * _2571) + _2530) * _2544))) * _2544;
        float _4469 = isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0));
        float _2583 = (isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0))) * (_2553 / ((_2557 * _2557) * 3.141590118408203125));
        float _2584 = isnan(1.0) ? _1938 : (isnan(_1938) ? 1.0 : min(_1938, 1.0));
        _2500 = (((((_2564 * _2220) + _569) * cbLight._m0[_2515].x) * _2583) * _2584) + _2390;
        _2502 = (((((_2564 * _2222) + _571) * cbLight._m0[_2515].y) * _2583) * _2584) + _2392;
        _2504 = (((((_2564 * _2223) + _572) * cbLight._m0[_2515].z) * _2583) * _2584) + _2394;
    }
    float _2649;
    float _2651;
    float _2653;
    float _2655;
    float _2657;
    float _2659;
    if (_1920.y == 0u)
    {
        uvec4 _2605 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2606 = _2605.x;
        uint _2617 = uint((float(_2605.y) * floor(float(uint(cbSceneParam._m0[85u].y * _504) / _2606))) + floor(float(uint(cbSceneParam._m0[85u].x * _503) / _2606)));
        float _2627 = (log2(_1698 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2628 = isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0));
        uint _2631 = uint(isnan(14.0) ? _2628 : (isnan(_2628) ? 14.0 : min(_2628, 14.0)));
        uvec4 _2636 = texelFetch(g_lightClusterGridBuffer, int(((_2631 << 2u) + (_2617 << 6u)) >> 2u));
        uint _2637 = _2636.x;
        uint _2638 = _2605.z;
        float _2716;
        float _2718;
        float _2720;
        float _2722;
        float _2724;
        float _2726;
        if (((((1u << ((_2638 >> 4u) & 15u)) + 4294967295u) & _2637) == 0u) || ((_2638 & 240u) == 0u))
        {
            _2716 = 0.0;
            _2718 = 0.0;
            _2720 = 0.0;
            _2722 = 0.0;
            _2724 = 0.0;
            _2726 = 0.0;
        }
        else
        {
            float _2717;
            float _2719;
            float _2721;
            float _2723;
            float _2725;
            float _2727;
            float _2868 = 0.0;
            float _2869 = 0.0;
            float _2870 = 0.0;
            float _2871 = 0.0;
            float _2872 = 0.0;
            float _2873 = 0.0;
            uint _2874 = 0u;
            uint _2883;
            bool _2884;
            for (;;)
            {
                _2883 = texelFetch(g_lightClassification, int((((_2631 << 5u) + (_2617 << 9u)) + (_2874 << 2u)) >> 2u)).x;
                _2884 = _2883 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_2884)
                {
                    frontier_phi_73_pred = _2873;
                    frontier_phi_73_pred_1 = _2872;
                    frontier_phi_73_pred_2 = _2871;
                    frontier_phi_73_pred_3 = _2870;
                    frontier_phi_73_pred_4 = _2869;
                    frontier_phi_73_pred_5 = _2868;
                }
                else
                {
                    float _3013;
                    float _3014;
                    float _3015;
                    float _3016;
                    float _3017;
                    float _3018;
                    uint _3019;
                    _3013 = _2868;
                    _3014 = _2869;
                    _3015 = _2870;
                    _3016 = _2871;
                    _3017 = _2872;
                    _3018 = _2873;
                    _3019 = _2883;
                    float _2940;
                    float _2941;
                    float _2942;
                    float _2943;
                    float _2944;
                    float _2945;
                    for (;;)
                    {
                        uint _3023 = uint(findLSB(_3019)) + (_2874 << 5u);
                        uint _3020 = (_3019 + 4294967295u) & _3019;
                        uint _3025 = _3023 * 48u;
                        vec4 _3039 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3025)).x, texelFetch(g_PointLightRenderingBuffer, int(_3025 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3025 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3025 + 3u)).x));
                        uint _3045 = (_3023 * 48u) + 4u;
                        vec4 _3058 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3045)).x, texelFetch(g_PointLightRenderingBuffer, int(_3045 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3045 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3045 + 3u)).x));
                        uint _3064 = (_3023 * 48u) + 8u;
                        vec3 _3075 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3064)).x, texelFetch(g_PointLightRenderingBuffer, int(_3064 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3064 + 2u)).x));
                        float _3079 = _3039.x - _1696;
                        float _3080 = _3039.y - _1697;
                        float _3081 = _3039.z - _1698;
                        float _3082 = dot(vec3(_3079, _3080, _3081), vec3(_3079, _3080, _3081));
                        float _3085 = inversesqrt(_3082);
                        float _3086 = _3085 * _3079;
                        float _3087 = _3085 * _3080;
                        float _3088 = _3085 * _3081;
                        float _3089 = dot(vec3(_524, _527, _530), vec3(_3086, _3087, _3088));
                        float _3094 = 1.0 - (_3082 * _3039.w);
                        float _4495 = isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : max(_3094, 0.0));
                        float _3095 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
                        float _3096 = sqrt(_3082) * _3058.w;
                        float _3099 = 1.39999997615814208984375 / (_3096 + 1.39999997615814208984375);
                        float _3100 = _3099 * _3099;
                        float _3103 = ((1.0 - _3100) * _3089) + _3100;
                        float _3106 = _3096 * _3096;
                        float _3110 = ((isnan(0.0) ? _3103 : (isnan(_3103) ? 0.0 : max(_3103, 0.0))) * _3095) / ((_3106 * 0.699999988079071044921875) + 1.0);
                        float _3114 = (-0.0) - _1696;
                        float _3115 = (-0.0) - _1697;
                        float _3116 = (-0.0) - _1698;
                        float _3120 = inversesqrt(dot(vec3(_3114, _3115, _3116), vec3(_3114, _3115, _3116)));
                        float _3121 = _3120 * _3114;
                        float _3122 = _3120 * _3115;
                        float _3123 = _3120 * _3116;
                        float _3130 = exp2(log2(1.0 / ((_3106 * 3.5) + 5.0)) * 0.25);
                        float _3131 = 1.0 - _600;
                        float _3138 = sqrt(1.0 - ((1.0 - (_3131 * _3131)) * (1.0 - (_3130 * _3130))));
                        float _3139 = _3138 * _3138;
                        float _3140 = _3139 * _3139;
                        float _3141 = _3121 + _3086;
                        float _3142 = _3122 + _3087;
                        float _3143 = _3123 + _3088;
                        float _3147 = inversesqrt(dot(vec3(_3141, _3142, _3143), vec3(_3141, _3142, _3143)));
                        float _3151 = dot(vec3(_524, _527, _530), vec3(_3121, _3122, _3123));
                        float _4511 = isnan(0.0) ? _3151 : (isnan(_3151) ? 0.0 : max(_3151, 0.0));
                        float _3154 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
                        float _3155 = dot(vec3(_524, _527, _530), vec3(_3147 * _3141, _3147 * _3142, _3147 * _3143));
                        float _4522 = isnan(0.0) ? _3155 : (isnan(_3155) ? 0.0 : max(_3155, 0.0));
                        float _3158 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
                        float _3162 = ((_3158 * _3158) * (_3140 + (-1.0))) + 1.0;
                        float _3163 = _3099 * _3139;
                        float _3164 = _3163 * _3163;
                        float _3167 = ((1.0 - _3164) * _3089) + _3164;
                        float _4533 = isnan(0.0) ? _3167 : (isnan(_3167) ? 0.0 : max(_3167, 0.0));
                        float _3168 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
                        float _3169 = 1.0 - _3139;
                        float _3179 = (0.5 / (((_3168 * ((_3154 * _3169) + _3139)) + 9.9999999392252902907785028219223e-09) + (((_3168 * _3169) + _3139) * _3154))) * _3168;
                        float _4544 = isnan(0.0) ? _3179 : (isnan(_3179) ? 0.0 : max(_3179, 0.0));
                        float _3190 = (((_3140 * 3.1415927410125732421875) * (isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0)))) / ((_3162 * _3162) * ((_3106 * 2.1991131305694580078125) + 3.141590118408203125))) * _3095;
                        _2943 = (_3110 * _3058.x) + _3016;
                        _2944 = (_3110 * _3058.y) + _3017;
                        _2945 = (_3110 * _3058.z) + _3018;
                        _2940 = (_3190 * _3075.x) + _3013;
                        _2941 = (_3190 * _3075.y) + _3014;
                        _2942 = (_3190 * _3075.z) + _3015;
                        if (_3020 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3013 = _2940;
                            _3014 = _2941;
                            _3015 = _2942;
                            _3016 = _2943;
                            _3017 = _2944;
                            _3018 = _2945;
                            _3019 = _3020;
                        }
                    }
                    frontier_phi_73_pred = _2945;
                    frontier_phi_73_pred_1 = _2944;
                    frontier_phi_73_pred_2 = _2943;
                    frontier_phi_73_pred_3 = _2942;
                    frontier_phi_73_pred_4 = _2941;
                    frontier_phi_73_pred_5 = _2940;
                }
                _2727 = frontier_phi_73_pred;
                _2725 = frontier_phi_73_pred_1;
                _2723 = frontier_phi_73_pred_2;
                _2721 = frontier_phi_73_pred_3;
                _2719 = frontier_phi_73_pred_4;
                _2717 = frontier_phi_73_pred_5;
                uint _2875 = _2874 + 1u;
                if (_2875 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2868 = _2717;
                    _2869 = _2719;
                    _2870 = _2721;
                    _2871 = _2723;
                    _2872 = _2725;
                    _2873 = _2727;
                    _2874 = _2875;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2716 = _2717;
            _2718 = _2719;
            _2720 = _2721;
            _2722 = _2723;
            _2724 = _2725;
            _2726 = _2727;
        }
        uvec4 _2730 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2731 = _2730.z;
        uint _2733 = (_2731 >> 8u) & 15u;
        float _2836;
        float _2838;
        float _2840;
        float _2842;
        float _2844;
        float _2846;
        if (((4294967295u << _2733) & _2637) == 0u)
        {
            _2836 = _2716;
            _2838 = _2718;
            _2840 = _2720;
            _2842 = _2722;
            _2844 = _2724;
            _2846 = _2726;
        }
        else
        {
            float _2861 = inversesqrt(dot(vec3(_1696, _1697, _1698), vec3(_1696, _1697, _1698)));
            float _2862 = _2861 * _1696;
            float _2863 = _2861 * _1697;
            float _2864 = _2861 * _1698;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2733 < ((_2731 >> 12u) & 15u))
            {
                float _2837;
                float _2839;
                float _2841;
                float _2843;
                float _2845;
                float _2847;
                float _2996 = _2716;
                float _2997 = _2718;
                float _2998 = _2720;
                float _2999 = _2722;
                float _3000 = _2724;
                float _3001 = _2726;
                uint _3002 = _2733;
                uint _3011;
                bool _3012;
                for (;;)
                {
                    _3011 = texelFetch(g_lightClassification, int((((_2631 << 5u) + (_2617 << 9u)) + (_3002 << 2u)) >> 2u)).x;
                    _3012 = _3011 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3012)
                    {
                        frontier_phi_84_pred = _3000;
                        frontier_phi_84_pred_1 = _2999;
                        frontier_phi_84_pred_2 = _2998;
                        frontier_phi_84_pred_3 = _2997;
                        frontier_phi_84_pred_4 = _2996;
                        frontier_phi_84_pred_5 = _3001;
                    }
                    else
                    {
                        float _3204;
                        float _3205;
                        float _3206;
                        float _3207;
                        float _3208;
                        float _3209;
                        float _3500;
                        float _3501;
                        float _3502;
                        float _3503;
                        float _3504;
                        float _3505;
                        float _3217 = _2996;
                        float _3218 = _2997;
                        float _3219 = _2998;
                        float _3220 = _2999;
                        float _3221 = _3000;
                        float _3222 = _3001;
                        uint _3223 = _3011;
                        uint _3224;
                        vec4 _3249;
                        float _3250;
                        vec4 _3265;
                        vec3 _3277;
                        vec4 _3293;
                        vec4 _3309;
                        float _3356;
                        bool _3357;
                        for (;;)
                        {
                            uint _3234 = ((_3002 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3223));
                            _3224 = (_3223 + 4294967295u) & _3223;
                            uint _3236 = _3234 * 40u;
                            _3249 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3236)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3236 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3236 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3236 + 3u)).x));
                            _3250 = _3249.w;
                            uint _3252 = (_3234 * 40u) + 4u;
                            _3265 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3252)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3252 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3252 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3252 + 3u)).x));
                            uint _3267 = (_3234 * 40u) + 8u;
                            _3277 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3267)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 2u)).x));
                            uint _3280 = (_3234 * 40u) + 16u;
                            _3293 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3280)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 3u)).x));
                            uint _3296 = (_3234 * 40u) + 20u;
                            _3309 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3296)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3296 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3296 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3296 + 3u)).x));
                            uint _3312 = (_3234 * 40u) + 24u;
                            vec4 _3325 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3312)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3312 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3312 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3312 + 3u)).x));
                            uint _3331 = (_3234 * 40u) + 28u;
                            vec4 _3344 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3331)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 3u)).x));
                            _3356 = fma(_1698, _3344.z, fma(_1697, _3344.y, _3344.x * _1696)) + _3344.w;
                            _3357 = !((fma(_1698, _3325.z, fma(_1697, _3325.y, _3325.x * _1696)) + _3325.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3357)
                            {
                                float _3384 = _3249.x - _1696;
                                float _3385 = _3249.y - _1697;
                                float _3386 = _3249.z - _1698;
                                float _3387 = dot(vec3(_3384, _3385, _3386), vec3(_3384, _3385, _3386));
                                float _3390 = inversesqrt(_3387);
                                float _3391 = _3390 * _3384;
                                float _3392 = _3390 * _3385;
                                float _3393 = _3390 * _3386;
                                float _3397 = 1.0 - (_3387 / (_3250 * _3250));
                                float _4555 = isnan(0.0) ? _3397 : (isnan(_3397) ? 0.0 : max(_3397, 0.0));
                                float _3398 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
                                float _3402 = sqrt(_3387) * _3265.w;
                                float _3404 = 1.39999997615814208984375 / (_3402 + 1.39999997615814208984375);
                                float _3405 = _3404 * _3404;
                                float _3408 = ((1.0 - _3405) * dot(vec3(_3391, _3392, _3393), vec3(_524, _527, _530))) + _3405;
                                float _3411 = _3402 * _3402;
                                float _3415 = (fma(_1698, _3293.z, fma(_1697, _3293.y, _3293.x * _1696)) + _3293.w) / _3356;
                                float _3416 = (fma(_1698, _3309.z, fma(_1697, _3309.y, _3309.x * _1696)) + _3309.w) / _3356;
                                float _3420 = 1.0 - dot(vec2(_3415, _3416), vec2(_3415, _3416));
                                float _4571 = isnan(0.0) ? _3420 : (isnan(_3420) ? 0.0 : max(_3420, 0.0));
                                float _3421 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
                                float _3422 = _3421 * (((isnan(0.0) ? _3408 : (isnan(_3408) ? 0.0 : max(_3408, 0.0))) * _3398) / ((_3411 * 0.699999988079071044921875) + 1.0));
                                float _3434 = exp2(log2(1.0 / ((_3411 * 3.5) + 5.0)) * 0.25);
                                float _3435 = 1.0 - _600;
                                float _3442 = sqrt(1.0 - ((1.0 - (_3435 * _3435)) * (1.0 - (_3434 * _3434))));
                                float _3443 = _3442 * _3442;
                                float _3444 = _3443 * _3443;
                                float _3445 = _3391 - _2862;
                                float _3446 = _3392 - _2863;
                                float _3447 = _3393 - _2864;
                                float _3451 = inversesqrt(dot(vec3(_3445, _3446, _3447), vec3(_3445, _3446, _3447)));
                                float _3455 = dot(vec3(_524, _527, _530), vec3((-0.0) - _2862, (-0.0) - _2863, (-0.0) - _2864));
                                float _4582 = isnan(0.0) ? _3455 : (isnan(_3455) ? 0.0 : max(_3455, 0.0));
                                float _3458 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
                                float _3459 = dot(vec3(_524, _527, _530), vec3(_3451 * _3445, _3451 * _3446, _3451 * _3447));
                                float _4593 = isnan(0.0) ? _3459 : (isnan(_3459) ? 0.0 : max(_3459, 0.0));
                                float _3462 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
                                float _3466 = ((_3462 * _3462) * (_3444 + (-1.0))) + 1.0;
                                float _3467 = _3404 * _3443;
                                float _3468 = _3467 * _3467;
                                float _3474 = ((1.0 - _3468) * dot(vec3(_524, _527, _530), vec3(_3391, _3392, _3393))) + _3468;
                                float _4604 = isnan(0.0) ? _3474 : (isnan(_3474) ? 0.0 : max(_3474, 0.0));
                                float _3475 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
                                float _3476 = 1.0 - _3443;
                                float _3486 = (0.5 / (((_3475 * ((_3458 * _3476) + _3443)) + 9.9999999392252902907785028219223e-09) + (((_3475 * _3476) + _3443) * _3458))) * _3475;
                                float _4615 = isnan(0.0) ? _3486 : (isnan(_3486) ? 0.0 : max(_3486, 0.0));
                                float _3496 = (_3421 * _3398) * (((_3444 * 3.1415927410125732421875) * (isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0)))) / ((_3466 * _3466) * ((_3411 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3422 * _3265.y;
                                frontier_phi_90_pred_1 = _3422 * _3265.x;
                                frontier_phi_90_pred_2 = _3496 * _3277.z;
                                frontier_phi_90_pred_3 = _3496 * _3277.y;
                                frontier_phi_90_pred_4 = _3496 * _3277.x;
                                frontier_phi_90_pred_5 = _3422 * _3265.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3504 = frontier_phi_90_pred;
                            _3503 = frontier_phi_90_pred_1;
                            _3502 = frontier_phi_90_pred_2;
                            _3501 = frontier_phi_90_pred_3;
                            _3500 = frontier_phi_90_pred_4;
                            _3505 = frontier_phi_90_pred_5;
                            _3207 = _3503 + _3220;
                            _3208 = _3504 + _3221;
                            _3209 = _3505 + _3222;
                            _3204 = _3500 + _3217;
                            _3205 = _3501 + _3218;
                            _3206 = _3502 + _3219;
                            if (_3224 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3217 = _3204;
                                _3218 = _3205;
                                _3219 = _3206;
                                _3220 = _3207;
                                _3221 = _3208;
                                _3222 = _3209;
                                _3223 = _3224;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3208;
                        frontier_phi_84_pred_1 = _3207;
                        frontier_phi_84_pred_2 = _3206;
                        frontier_phi_84_pred_3 = _3205;
                        frontier_phi_84_pred_4 = _3204;
                        frontier_phi_84_pred_5 = _3209;
                    }
                    _2845 = frontier_phi_84_pred;
                    _2843 = frontier_phi_84_pred_1;
                    _2841 = frontier_phi_84_pred_2;
                    _2839 = frontier_phi_84_pred_3;
                    _2837 = frontier_phi_84_pred_4;
                    _2847 = frontier_phi_84_pred_5;
                    uint _3003 = _3002 + 1u;
                    if (_3003 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2996 = _2837;
                        _2997 = _2839;
                        _2998 = _2841;
                        _2999 = _2843;
                        _3000 = _2845;
                        _3001 = _2847;
                        _3002 = _3003;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2847;
                frontier_phi_65_66_ladder_1 = _2843;
                frontier_phi_65_66_ladder_2 = _2845;
                frontier_phi_65_66_ladder_3 = _2839;
                frontier_phi_65_66_ladder_4 = _2837;
                frontier_phi_65_66_ladder_5 = _2841;
            }
            else
            {
                frontier_phi_65_66_ladder = _2726;
                frontier_phi_65_66_ladder_1 = _2722;
                frontier_phi_65_66_ladder_2 = _2724;
                frontier_phi_65_66_ladder_3 = _2718;
                frontier_phi_65_66_ladder_4 = _2716;
                frontier_phi_65_66_ladder_5 = _2720;
            }
            _2836 = frontier_phi_65_66_ladder_4;
            _2838 = frontier_phi_65_66_ladder_3;
            _2840 = frontier_phi_65_66_ladder_5;
            _2842 = frontier_phi_65_66_ladder_1;
            _2844 = frontier_phi_65_66_ladder_2;
            _2846 = frontier_phi_65_66_ladder;
        }
        float _2851 = isnan(1.0) ? _584 : (isnan(_584) ? 1.0 : min(_584, 1.0));
        _2649 = (_2851 * _2842) + _2162;
        _2651 = (_2851 * _2844) + _2164;
        _2653 = (_2851 * _2846) + _2166;
        _2655 = ((_2836 * _569) * _2851) + _2500;
        _2657 = ((_2838 * _571) * _2851) + _2502;
        _2659 = ((_2840 * _572) * _2851) + _2504;
    }
    else
    {
        _2649 = _2162;
        _2651 = _2164;
        _2653 = _2166;
        _2655 = _2500;
        _2657 = _2502;
        _2659 = _2504;
    }
    float _4631 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _4642 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _4653 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _2676 = ((isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0))) * (_2649 + ((isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0))) * _584))) + ((_2655 + ((isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0))) * _1425)) * cbPerFrame._m0[3u].x);
    float _2677 = ((isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0))) * (_2651 + ((isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0))) * _584))) + ((_2657 + ((isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0))) * _1425)) * cbPerFrame._m0[3u].x);
    float _2678 = ((isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0))) * (_2653 + ((isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0))) * _584))) + ((_2659 + ((isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0))) * _1425)) * cbPerFrame._m0[3u].x);
    uint _2679 = _543 + 6u;
    float _2687 = _503 / cbSceneParam._m0[86u].x;
    float _2688 = _504 / cbSceneParam._m0[86u].y;
    vec4 _2702 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2687, _2688, (log2((isnan(cbSceneParam._m0[77u].w) ? _423 : (isnan(_423) ? cbSceneParam._m0[77u].w : min(_423, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2704 = _2702.x;
    float _2705 = _2702.y;
    float _2706 = _2702.z;
    float _2707 = _2702.w;
    float _2778;
    float _2780;
    float _2782;
    float _2784;
    if (_423 > cbSceneParam._m0[78u].w)
    {
        float _2741 = isnan(_423) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _423 : min(cbSceneParam._m0[80u].w, _423));
        float _2742 = _2741 / _423;
        float _2753 = _2742 * _475;
        float _2754 = _476 * _2742;
        float _2755 = (-0.0) - _2754;
        float _2756 = _2742 * _477;
        float _2758 = (cbSceneParam._m0[77u].w * _2755) / _2741;
        float _2759 = _2758 + cbSceneParam._m0[79u].w;
        float _2760 = cbSceneParam._m0[79u].w - _2754;
        float _2766 = sqrt(((_2753 * _2753) + (_2754 * _2754)) + (_2756 * _2756));
        float _2769 = (1.0 - (cbSceneParam._m0[77u].w / _2741)) * _2766;
        float _2774 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2776 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2953;
        if (abs((_2755 - _2758) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2953 = ((((_2759 > 0.0) ? exp2(_2774 * _2759) : (2.0 - exp2(_2776 * _2759))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2769;
        }
        else
        {
            float _2897 = 1.0 / cbSceneParam._m0[80u].x;
            float _2898 = isnan(_2760) ? _2759 : (isnan(_2759) ? _2760 : max(_2759, _2760));
            float _2899 = isnan(_2760) ? _2759 : (isnan(_2759) ? _2760 : min(_2759, _2760));
            float _2908 = isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : min(_2898, 0.0));
            float _2909 = isnan(0.0) ? _2899 : (isnan(_2899) ? 0.0 : min(_2899, 0.0));
            _2953 = ((abs(_2766 / _2755) * cbSceneParam._m0[80u].y) * ((((_2908 - _2909) * 2.0) - ((exp2(_2774 * (isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : max(_2898, 0.0)))) - exp2(_2774 * (isnan(0.0) ? _2899 : (isnan(_2899) ? 0.0 : max(_2899, 0.0))))) * _2897)) - ((exp2(_2776 * _2908) - exp2(_2776 * _2909)) * _2897))) + (_2769 * cbSceneParam._m0[80u].z);
        }
        vec4 _2955 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2687, _2688, 1.0), 0.0);
        float _2964 = exp2((_2953 * (-1.44269502162933349609375)) * (1.0 - _2955.w));
        float _2965 = log2(_2964);
        float _2981 = log2(_2707);
        _2778 = (exp2(_2981 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2965 * cbSceneParam._m0[78u].x)) * _2955.x) / cbSceneParam._m0[78u].x)) + _2704;
        _2780 = (exp2(_2981 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2965 * cbSceneParam._m0[78u].y)) * _2955.y) / cbSceneParam._m0[78u].y)) + _2705;
        _2782 = (exp2(_2981 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2965 * cbSceneParam._m0[78u].z)) * _2955.z) / cbSceneParam._m0[78u].z)) + _2706;
        _2784 = _2964 * _2707;
    }
    else
    {
        _2778 = _2704;
        _2780 = _2705;
        _2782 = _2706;
        _2784 = _2707;
    }
    bool _2991;
    vec4 _2794;
    vec4 _2816;
    float _2818;
    float _2822;
    float _2823;
    float _2824;
    float _2825;
    bool _2835;
    for (;;)
    {
        _2794 = cbMatDynParam._m0[0u];
        float _2796 = roundEven(_2794.y);
        bool _2797 = _2796 == 3.0;
        float _2798 = log2(_2784);
        float _2805 = exp2(_2798 * cbSceneParam._m0[78u].x) * _2676;
        float _2806 = exp2(_2798 * cbSceneParam._m0[78u].y) * _2677;
        float _2807 = exp2(_2798 * cbSceneParam._m0[78u].z) * _2678;
        float _2814 = _491 + (-0.5);
        _2816 = cbMtdParam._m0[1u];
        _2818 = _2816.y * _2814;
        float _2821 = (_2796 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2822 = _2821 * (_2797 ? _2805 : (_2805 + (cbSceneParam._m0[72u].w * _2778)));
        _2823 = _2821 * (_2797 ? _2806 : (_2806 + (cbSceneParam._m0[72u].w * _2780)));
        _2824 = _2821 * (_2797 ? _2807 : (_2807 + (cbSceneParam._m0[72u].w * _2782)));
        _2825 = _2814 * 0.999000012874603271484375;
        _2835 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2835)
        {
            if ((cbInstanceData._m0[_543 + 7u].x + _2825) < 0.5)
            {
                _2991 = true;
                break;
            }
        }
        uint _2932 = _545 + uint(_2794.w);
        if ((cbInstanceData._m0[_2932].w < 1.0) && ((cbInstanceData._m0[_2932].w + _2825) < 0.5))
        {
            _2991 = true;
            break;
        }
        if ((_2818 + _256) < _2816.x)
        {
            _2991 = true;
            break;
        }
        _2991 = false;
        break;
    }
    float _3195;
    if (_2991)
    {
        discard_state = true;
        _3195 = 0.0;
    }
    else
    {
        _3195 = cbInstanceData._m0[_2679].w;
    }
    SV_Target.x = _2822;
    SV_Target.y = _2823;
    SV_Target.z = _2824;
    SV_Target.w = _3195;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2679].w;
    discard_exit();
}


