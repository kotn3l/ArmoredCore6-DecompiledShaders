#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _938;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _192 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _193 = _192 * _184;
    float _194 = _192 * _185;
    float _195 = _192 * _186;
    float _199 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _200 = _199 * NORMAL.x;
    float _201 = _199 * NORMAL.y;
    float _202 = _199 * NORMAL.z;
    float _206 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _207 = _206 * TANGENT.x;
    float _208 = _206 * TANGENT.y;
    float _209 = _206 * TANGENT.z;
    float _214;
    float _215;
    float _216;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _214 = (-0.0) - _200;
        _215 = (-0.0) - _201;
        _216 = (-0.0) - _202;
    }
    else
    {
        _214 = _200;
        _215 = _201;
        _216 = _202;
    }
    vec4 _242 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _248 = _242.x * cbMtdParam._m0[9u].x;
    float _249 = _242.y * cbMtdParam._m0[9u].y;
    float _250 = _242.z * cbMtdParam._m0[9u].z;
    vec4 _268 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _272 = _268.z;
    float _276 = (_268.x * 2.0) + (-1.0);
    float _278 = (_268.y * 2.0) + (-1.0);
    float _279 = dot(vec2(_276, _278), vec2(_276, _278));
    float _3556 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    float _285 = sqrt(1.0 - (isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0))));
    float _288 = fma(_285, _214, fma(_278, _207, _276 * _193));
    float _291 = fma(_285, _215, fma(_278, _208, _276 * _194));
    float _294 = fma(_285, _216, fma(_278, _209, _276 * _195));
    float _298 = inversesqrt(dot(vec3(_288, _291, _294), vec3(_288, _291, _294)));
    float _309 = cbMtdParam._m0[12u].x + dot(vec4(_298 * _288, _298 * _291, _298 * _294, 0.0), vec4(cbMtdParam._m0[13u].xyz, 0.0));
    float _3567 = isnan(0.0) ? _309 : (isnan(_309) ? 0.0 : max(_309, 0.0));
    float _310 = isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0));
    float _317 = (_310 * (cbMtdParam._m0[10u].x - _248)) + _248;
    float _318 = (_310 * (cbMtdParam._m0[10u].y - _249)) + _249;
    float _319 = (_310 * (cbMtdParam._m0[10u].z - _250)) + _250;
    vec4 _331 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _333 = _331.x;
    float _335 = _333 - (_333 * _310);
    vec4 _347 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _354 = (_347.x * 2.0) + (-1.0);
    float _355 = (_347.y * 2.0) + (-1.0);
    float _356 = dot(vec2(_354, _355), vec2(_354, _355));
    float _3578 = isnan(0.0) ? _356 : (isnan(_356) ? 0.0 : max(_356, 0.0));
    float _364 = ((_347.z - _272) * _310) + _272;
    float _376 = (((_354 - _276) + (cbMtdParam._m0[12u].w * _276)) * _310) + _276;
    float _377 = (((_355 - _278) + (cbMtdParam._m0[12u].w * _278)) * _310) + _278;
    float _378 = ((sqrt(1.0 - (isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0)))) - _285) * _310) + _285;
    float _381 = fma(_378, _214, fma(_377, _207, _376 * _193));
    float _384 = fma(_378, _215, fma(_377, _208, _376 * _194));
    float _387 = fma(_378, _216, fma(_377, _209, _376 * _195));
    float _391 = inversesqrt(dot(vec3(_381, _384, _387), vec3(_381, _384, _387)));
    float _392 = _391 * _381;
    float _393 = _391 * _384;
    float _394 = _391 * _387;
    float _3589 = isnan(0.0) ? _364 : (isnan(_364) ? 0.0 : max(_364, 0.0));
    float _395 = isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0));
    float _3600 = isnan(0.0) ? _317 : (isnan(_317) ? 0.0 : max(_317, 0.0));
    float _3611 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    float _3622 = isnan(0.0) ? _319 : (isnan(_319) ? 0.0 : max(_319, 0.0));
    float _3633 = isnan(0.0) ? _335 : (isnan(_335) ? 0.0 : max(_335, 0.0));
    float _399 = isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0));
    float _415 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _457 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _467 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _457);
    float _468 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _457);
    float _469 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _457);
    float _473 = inversesqrt(dot(vec3(_467, _468, _469), vec3(_467, _468, _469)));
    float _474 = _467 * _473;
    float _475 = _468 * _473;
    float _476 = _469 * _473;
    float _482 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _483 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _504 = fma(_394, cbSceneParam._m0[5u].z, fma(_393, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _392));
    float _507 = fma(_394, cbSceneParam._m0[6u].z, fma(_393, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _392));
    float _510 = fma(_394, cbSceneParam._m0[7u].z, fma(_393, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _392));
    uint _523 = uint(roundEven(NORMAL.w)) * 13u;
    uint _525 = (_523 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _531 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0)))) * cbInstanceData._m0[_525].x;
    float _532 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0)))) * cbInstanceData._m0[_525].y;
    float _533 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0)))) * cbInstanceData._m0[_525].z;
    float _3644 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _534 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
    float _3655 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _535 = isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0));
    float _3666 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _536 = isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0));
    float _537 = 1.0 - _399;
    float _538 = _534 * _537;
    float _539 = _535 * _537;
    float _540 = _536 * _537;
    float _545 = (_534 + (-0.039999999105930328369140625)) * _399;
    float _546 = (_535 + (-0.039999999105930328369140625)) * _399;
    float _547 = (_536 + (-0.039999999105930328369140625)) * _399;
    float _548 = _545 + 0.039999999105930328369140625;
    float _550 = _546 + 0.039999999105930328369140625;
    float _551 = _547 + 0.039999999105930328369140625;
    vec4 _560 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _482, cbSceneParam._m0[86u].y * _483));
    float _563 = _560.x * TEXCOORD_3.w;
    float _564 = dot(vec3(_392, _393, _394), vec3(_474, _475, _476));
    float _567 = _564 * 2.0;
    float _571 = (_567 * _392) - _474;
    float _572 = (_567 * _393) - _475;
    float _573 = (_567 * _394) - _476;
    float _577 = abs(dot(vec3(_474, _475, _476), vec3(_392, _393, _394)));
    float _3677 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _579 = sqrt(_395);
    float _592 = exp2((_579 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_579 * 3.0));
    float _598 = (1.0 - _592) * ((_579 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _599 = _592 * _579;
    float _627 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _631 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _635 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _937;
    float _939;
    float _940;
    float _941;
    float _942;
    float _943;
    float _944;
    float _945;
    float _946;
    float _947;
    float _948;
    float _949;
    float _950;
    float _951;
    float _952;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _662 = fma(_635, cbModelParam._m0[26u].z, fma(_631, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _627));
        float _666 = fma(_635, cbModelParam._m0[27u].z, fma(_631, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _627));
        float _670 = fma(_635, cbModelParam._m0[28u].z, fma(_631, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _627));
        float _695 = _627 + _392;
        float _696 = _631 + _393;
        float _697 = _635 + _394;
        float _707 = fma(_697, cbModelParam._m0[26u].z, fma(_696, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _695)) - _662;
        float _708 = fma(_697, cbModelParam._m0[27u].z, fma(_696, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _695)) - _666;
        float _709 = fma(_697, cbModelParam._m0[28u].z, fma(_696, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _695)) - _670;
        float _713 = inversesqrt(dot(vec3(_707, _708, _709), vec3(_707, _708, _709)));
        float _726 = ((_713 * _707) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_662 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _727 = ((_713 * _708) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_666 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _728 = ((_713 * _709) / cbModelParam._m0[34u].z) + ((((((_670 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _731 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_726, _727, _728), 0.0);
        vec4 _738 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_726, _727, _728), 0.0);
        vec4 _745 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_726, _727, _728), 0.0);
        vec4 _752 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_726, _727, _728), 0.0);
        float _765 = exp2((_731.w + (-0.5)) * 20.0) * 2.0;
        float _766 = _765 * (_731.x + (-0.5));
        float _767 = _765 * (_731.y + (-0.5));
        float _768 = _765 * (_731.z + (-0.5));
        float _775 = exp2((_738.w + (-0.5)) * 20.0) * 2.0;
        float _776 = _775 * (_738.x + (-0.5));
        float _777 = _775 * (_738.y + (-0.5));
        float _778 = _775 * (_738.z + (-0.5));
        float _785 = exp2((_745.w + (-0.5)) * 20.0) * 2.0;
        float _786 = _785 * (_745.x + (-0.5));
        float _787 = _785 * (_745.y + (-0.5));
        float _788 = _785 * (_745.z + (-0.5));
        float _795 = exp2((_752.w + (-0.5)) * 20.0) * 2.0;
        float _796 = _795 * (_752.x + (-0.5));
        float _797 = _795 * (_752.y + (-0.5));
        float _798 = _795 * (_752.z + (-0.5));
        float _799 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
        float _800 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
        float _801 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
        float _802 = _766 * 0.5;
        float _803 = _776 * 0.5;
        float _804 = _786 * 0.5;
        float _805 = dot(vec3(_802, _803, _804), vec3(_802, _803, _804));
        float _810 = (_805 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_805);
        float _819 = (dot(vec3(_392, _393, _394), vec3(_810 * _802, _810 * _803, _810 * _804)) + 1.0) * 0.5;
        float _3703 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
        float _829 = sqrt(((_803 * _803) + (_802 * _802)) + (_804 * _804)) / (_799 + 9.9999997473787516355514526367188e-06);
        float _3714 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
        float _830 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
        float _831 = _830 * 2.0;
        float _835 = (1.0 - _830) / (_830 + 1.0);
        float _3725 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
        float _836 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
        float _845 = ((((1.0 - _836) * (_831 + 2.0)) * exp2(log2(isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0))) * (_831 + 1.0))) + _836) * _799;
        float _846 = _767 * 0.5;
        float _847 = _777 * 0.5;
        float _848 = _787 * 0.5;
        float _849 = dot(vec3(_846, _847, _848), vec3(_846, _847, _848));
        float _854 = (_849 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_849);
        float _862 = (dot(vec3(_392, _393, _394), vec3(_854 * _846, _854 * _847, _854 * _848)) + 1.0) * 0.5;
        float _3736 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
        float _871 = sqrt(((_847 * _847) + (_846 * _846)) + (_848 * _848)) / (_800 + 9.9999997473787516355514526367188e-06);
        float _3747 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
        float _872 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
        float _873 = _872 * 2.0;
        float _877 = (1.0 - _872) / (_872 + 1.0);
        float _3758 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
        float _878 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
        float _887 = ((((1.0 - _878) * (_873 + 2.0)) * exp2(log2(isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0))) * (_873 + 1.0))) + _878) * _800;
        float _888 = _768 * 0.5;
        float _889 = _778 * 0.5;
        float _890 = _788 * 0.5;
        float _891 = dot(vec3(_888, _889, _890), vec3(_888, _889, _890));
        float _896 = (_891 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_891);
        float _904 = (dot(vec3(_392, _393, _394), vec3(_896 * _888, _896 * _889, _896 * _890)) + 1.0) * 0.5;
        float _3769 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
        float _913 = sqrt(((_889 * _889) + (_888 * _888)) + (_890 * _890)) / (_801 + 9.9999997473787516355514526367188e-06);
        float _3780 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
        float _914 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
        float _915 = _914 * 2.0;
        float _919 = (1.0 - _914) / (_914 + 1.0);
        float _3791 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
        float _920 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
        float _929 = ((((1.0 - _920) * (_915 + 2.0)) * exp2(log2(isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0))) * (_915 + 1.0))) + _920) * _801;
        _937 = _768;
        _939 = _767;
        _940 = _766;
        _941 = _778;
        _942 = _777;
        _943 = _776;
        _944 = _788;
        _945 = _787;
        _946 = _786;
        _947 = _801;
        _948 = _800;
        _949 = _799;
        _950 = cbModelParam._m0[36u].z * (isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0)));
        _951 = cbModelParam._m0[36u].z * (isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0)));
        _952 = cbModelParam._m0[36u].z * (isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0)));
    }
    else
    {
        _937 = _938;
        _939 = _938;
        _940 = _938;
        _941 = _938;
        _942 = _938;
        _943 = _938;
        _944 = _938;
        _945 = _938;
        _946 = _938;
        _947 = _938;
        _948 = _938;
        _949 = _938;
        _950 = 0.0;
        _951 = 0.0;
        _952 = 0.0;
    }
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _978 = fma(_635, cbModelParam._m0[30u].z, fma(_631, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _627));
        float _982 = fma(_635, cbModelParam._m0[31u].z, fma(_631, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _627));
        float _986 = fma(_635, cbModelParam._m0[32u].z, fma(_631, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _627));
        float _1009 = _627 + _392;
        float _1010 = _631 + _393;
        float _1011 = _635 + _394;
        float _1021 = fma(_1011, cbModelParam._m0[30u].z, fma(_1010, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1009)) - _978;
        float _1022 = fma(_1011, cbModelParam._m0[31u].z, fma(_1010, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1009)) - _982;
        float _1023 = fma(_1011, cbModelParam._m0[32u].z, fma(_1010, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1009)) - _986;
        float _1027 = inversesqrt(dot(vec3(_1021, _1022, _1023), vec3(_1021, _1022, _1023)));
        float _1040 = ((_1027 * _1021) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_978 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1041 = ((_1027 * _1022) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_982 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1042 = ((_1027 * _1023) / cbModelParam._m0[35u].z) + ((((((_986 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1044 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1040, _1041, _1042), 0.0);
        vec4 _1051 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1040, _1041, _1042), 0.0);
        vec4 _1058 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1040, _1041, _1042), 0.0);
        vec4 _1065 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1040, _1041, _1042), 0.0);
        float _1077 = exp2((_1044.w + (-0.5)) * 20.0) * 2.0;
        float _1078 = _1077 * (_1044.x + (-0.5));
        float _1079 = _1077 * (_1044.y + (-0.5));
        float _1080 = _1077 * (_1044.z + (-0.5));
        float _1087 = exp2((_1051.w + (-0.5)) * 20.0) * 2.0;
        float _1088 = _1087 * (_1051.x + (-0.5));
        float _1089 = _1087 * (_1051.y + (-0.5));
        float _1090 = _1087 * (_1051.z + (-0.5));
        float _1097 = exp2((_1058.w + (-0.5)) * 20.0) * 2.0;
        float _1098 = _1097 * (_1058.x + (-0.5));
        float _1099 = _1097 * (_1058.y + (-0.5));
        float _1100 = _1097 * (_1058.z + (-0.5));
        float _1107 = exp2((_1065.w + (-0.5)) * 20.0) * 2.0;
        float _1108 = _1107 * (_1065.x + (-0.5));
        float _1109 = _1107 * (_1065.y + (-0.5));
        float _1110 = _1107 * (_1065.z + (-0.5));
        float _1111 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1112 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1113 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1114 = _1078 * 0.5;
        float _1115 = _1088 * 0.5;
        float _1116 = _1098 * 0.5;
        float _1117 = dot(vec3(_1114, _1115, _1116), vec3(_1114, _1115, _1116));
        float _1122 = (_1117 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1117);
        float _1130 = (dot(vec3(_392, _393, _394), vec3(_1122 * _1114, _1122 * _1115, _1122 * _1116)) + 1.0) * 0.5;
        float _3832 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1139 = sqrt(((_1115 * _1115) + (_1114 * _1114)) + (_1116 * _1116)) / (_1111 + 9.9999997473787516355514526367188e-06);
        float _3843 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1140 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
        float _1141 = _1140 * 2.0;
        float _1145 = (1.0 - _1140) / (_1140 + 1.0);
        float _3854 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1146 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
        float _1155 = ((((1.0 - _1146) * (_1141 + 2.0)) * exp2(log2(isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0))) * (_1141 + 1.0))) + _1146) * _1111;
        float _1156 = _1079 * 0.5;
        float _1157 = _1089 * 0.5;
        float _1158 = _1099 * 0.5;
        float _1159 = dot(vec3(_1156, _1157, _1158), vec3(_1156, _1157, _1158));
        float _1164 = (_1159 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1159);
        float _1172 = (dot(vec3(_392, _393, _394), vec3(_1164 * _1156, _1164 * _1157, _1164 * _1158)) + 1.0) * 0.5;
        float _3865 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1181 = sqrt(((_1157 * _1157) + (_1156 * _1156)) + (_1158 * _1158)) / (_1112 + 9.9999997473787516355514526367188e-06);
        float _3876 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1182 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
        float _1183 = _1182 * 2.0;
        float _1187 = (1.0 - _1182) / (_1182 + 1.0);
        float _3887 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1188 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
        float _1197 = ((((1.0 - _1188) * (_1183 + 2.0)) * exp2(log2(isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0))) * (_1183 + 1.0))) + _1188) * _1112;
        float _1198 = _1080 * 0.5;
        float _1199 = _1090 * 0.5;
        float _1200 = _1100 * 0.5;
        float _1201 = dot(vec3(_1198, _1199, _1200), vec3(_1198, _1199, _1200));
        float _1206 = (_1201 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1201);
        float _1214 = (dot(vec3(_392, _393, _394), vec3(_1206 * _1198, _1206 * _1199, _1206 * _1200)) + 1.0) * 0.5;
        float _3898 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1223 = sqrt(((_1199 * _1199) + (_1198 * _1198)) + (_1200 * _1200)) / (_1113 + 9.9999997473787516355514526367188e-06);
        float _3909 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1224 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
        float _1225 = _1224 * 2.0;
        float _1229 = (1.0 - _1224) / (_1224 + 1.0);
        float _3920 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1230 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
        float _1239 = ((((1.0 - _1230) * (_1225 + 2.0)) * exp2(log2(isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0))) * (_1225 + 1.0))) + _1230) * _1113;
        _1247 = _1080;
        _1248 = _1079;
        _1249 = _1078;
        _1250 = _1090;
        _1251 = _1089;
        _1252 = _1088;
        _1253 = _1100;
        _1254 = _1099;
        _1255 = _1098;
        _1256 = _1113;
        _1257 = _1112;
        _1258 = _1111;
        _1259 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0)));
        _1260 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0)));
        _1261 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0)));
    }
    else
    {
        _1247 = _938;
        _1248 = _938;
        _1249 = _938;
        _1250 = _938;
        _1251 = _938;
        _1252 = _938;
        _1253 = _938;
        _1254 = _938;
        _1255 = _938;
        _1256 = _938;
        _1257 = _938;
        _1258 = _938;
        _1259 = 0.0;
        _1260 = 0.0;
        _1261 = 0.0;
    }
    float _1271 = (cbModelParam._m0[1u].x * (_1259 - _950)) + _950;
    float _1272 = (cbModelParam._m0[1u].x * (_1260 - _951)) + _951;
    float _1273 = (cbModelParam._m0[1u].x * (_1261 - _952)) + _952;
    float _1294 = fma(_1273, cbSceneParam._m0[89u].z, fma(_1272, cbSceneParam._m0[89u].y, _1271 * cbSceneParam._m0[89u].x));
    float _1297 = fma(_1273, cbSceneParam._m0[90u].z, fma(_1272, cbSceneParam._m0[90u].y, _1271 * cbSceneParam._m0[90u].x));
    float _1300 = fma(_1273, cbSceneParam._m0[91u].z, fma(_1272, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1271));
    float _1315 = _571 * 0.5;
    float _1316 = _572 * 0.5;
    float _1317 = _573 * 0.5;
    float _1318 = dot(vec4(_1315, _1316, _1317, 1.0), vec4(_1249, _1252, _1255, _1258));
    float _1321 = dot(vec4(_1315, _1316, _1317, 1.0), vec4(_1248, _1251, _1254, _1257));
    float _1324 = dot(vec4(_1315, _1316, _1317, 1.0), vec4(_1247, _1250, _1253, _1256));
    float _1358;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1331 = dot(vec4(_1315, _1316, _1317, 1.0), vec4(_937, _941, _944, _947));
        float _1335 = dot(vec4(_1315, _1316, _1317, 1.0), vec4(_939, _942, _945, _948));
        float _1339 = dot(vec4(_1315, _1316, _1317, 1.0), vec4(_940, _943, _946, _949));
        float _1346 = dot(vec4(cbModelParam._m0[39u]), vec4(_1315, _1316, _1317, 1.0));
        _1358 = dot(vec3(isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0)), isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0)), isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1346) ? 0.0 : (isnan(0.0) ? _1346 : max(0.0, _1346))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1358 = 1.0;
    }
    float _1369;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1360 = dot(vec4(cbModelParam._m0[40u]), vec4(_1315, _1316, _1317, 1.0));
        _1369 = dot(vec3(isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0)), isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0)), isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1360) ? 0.0 : (isnan(0.0) ? _1360 : max(0.0, _1360))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1369 = 1.0;
    }
    float _1373 = (_1369 * cbModelParam._m0[1u].x) + (_1358 * (1.0 - cbModelParam._m0[1u].x));
    float _1383 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _395);
    float _1384 = isnan(_1383) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1383 : min(cbModelParam._m0[25u].z, _1383));
    float _1465;
    float _1467;
    float _1469;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1432 = fma(_635, cbModelParam._m0[13u].z, fma(_631, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _627)) + cbModelParam._m0[13u].w;
        float _1436 = fma(_635, cbModelParam._m0[14u].z, fma(_631, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _627)) + cbModelParam._m0[14u].w;
        float _1440 = fma(_635, cbModelParam._m0[15u].z, fma(_631, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _627)) + cbModelParam._m0[15u].w;
        float _1443 = fma(_573, cbModelParam._m0[13u].z, fma(_572, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _571));
        float _1446 = fma(_573, cbModelParam._m0[14u].z, fma(_572, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _571));
        float _1449 = fma(_573, cbModelParam._m0[15u].z, fma(_572, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _571));
        float _1477;
        if (_1443 > 0.0)
        {
            _1477 = abs((1.0 - _1432) / _1443);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1443 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1432 + 1.0) / _1443);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1477 = frontier_phi_16_14_ladder;
        }
        float _1652;
        if (_1446 > 0.0)
        {
            _1652 = abs((1.0 - _1436) / _1446);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1446 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1436 + 1.0) / _1446);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1652 = frontier_phi_25_21_ladder;
        }
        float _1948;
        if (_1449 > 0.0)
        {
            _1948 = abs((1.0 - _1440) / _1449);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1449 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1440 + 1.0) / _1449);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1948 = frontier_phi_37_32_ladder;
        }
        float _1950 = isnan(_1652) ? _1477 : (isnan(_1477) ? _1652 : min(_1477, _1652));
        float _1951 = isnan(_1948) ? _1950 : (isnan(_1950) ? _1948 : min(_1950, _1948));
        float _1955 = (_1951 * _1443) + _1432;
        float _1956 = (_1951 * _1446) + _1436;
        float _1957 = (_1951 * _1449) + _1440;
        float _1958 = _1951 * 9.9999997473787516355514526367188e-05;
        float _1960 = (-1.0) - _1958;
        float _1962 = _1958 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1957 > _1962) || ((_1957 < _1960) || ((_1956 > _1962) || ((_1956 < _1960) || ((_1955 < _1960) || (_1955 > _1962))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2102 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1957, cbModelParam._m0[9u].z, fma(_1956, cbModelParam._m0[9u].y, _1955 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1957, cbModelParam._m0[10u].z, fma(_1956, cbModelParam._m0[10u].y, _1955 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1957, cbModelParam._m0[11u].z, fma(_1956, cbModelParam._m0[11u].y, _1955 * cbModelParam._m0[11u].x))), _1384);
            frontier_phi_15_37_ladder = _2102.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2102.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2102.z * cbModelParam._m0[1u].y;
        }
        _1465 = frontier_phi_15_37_ladder_1;
        _1467 = frontier_phi_15_37_ladder;
        _1469 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1453 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_571, _572, _573), _1384);
        _1465 = _1453.x * cbModelParam._m0[1u].y;
        _1467 = _1453.y * cbModelParam._m0[1u].y;
        _1469 = _1453.z * cbModelParam._m0[1u].y;
    }
    float _1473 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _395);
    float _1474 = isnan(_1473) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1473 : min(cbModelParam._m0[25u].w, _1473));
    float _1567;
    float _1569;
    float _1571;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1531 = fma(_635, cbModelParam._m0[21u].z, fma(_631, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _627)) + cbModelParam._m0[21u].w;
        float _1535 = fma(_635, cbModelParam._m0[22u].z, fma(_631, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _627)) + cbModelParam._m0[22u].w;
        float _1539 = fma(_635, cbModelParam._m0[23u].z, fma(_631, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _627)) + cbModelParam._m0[23u].w;
        float _1542 = fma(_573, cbModelParam._m0[21u].z, fma(_572, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _571));
        float _1545 = fma(_573, cbModelParam._m0[22u].z, fma(_572, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _571));
        float _1548 = fma(_573, cbModelParam._m0[23u].z, fma(_572, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _571));
        float _1657;
        if (_1542 > 0.0)
        {
            _1657 = abs((1.0 - _1531) / _1542);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1542 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1531 + 1.0) / _1542);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1657 = frontier_phi_27_23_ladder;
        }
        float _1975;
        if (_1545 > 0.0)
        {
            _1975 = abs((1.0 - _1535) / _1545);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1545 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1535 + 1.0) / _1545);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1975 = frontier_phi_39_34_ladder;
        }
        float _2313;
        if (_1548 > 0.0)
        {
            _2313 = abs((1.0 - _1539) / _1548);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1548 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1539 + 1.0) / _1548);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2313 = frontier_phi_49_46_ladder;
        }
        float _2315 = isnan(_1975) ? _1657 : (isnan(_1657) ? _1975 : min(_1657, _1975));
        float _2316 = isnan(_2313) ? _2315 : (isnan(_2315) ? _2313 : min(_2315, _2313));
        float _2320 = (_2316 * _1542) + _1531;
        float _2321 = (_2316 * _1545) + _1535;
        float _2322 = (_2316 * _1548) + _1539;
        float _2323 = _2316 * 9.9999997473787516355514526367188e-05;
        float _2324 = (-1.0) - _2323;
        float _2326 = _2323 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2322 > _2326) || ((_2322 < _2324) || ((_2321 > _2326) || ((_2321 < _2324) || ((_2320 < _2324) || (_2320 > _2326))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2444 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2322, cbModelParam._m0[17u].z, fma(_2321, cbModelParam._m0[17u].y, _2320 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2322, cbModelParam._m0[18u].z, fma(_2321, cbModelParam._m0[18u].y, _2320 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2322, cbModelParam._m0[19u].z, fma(_2321, cbModelParam._m0[19u].y, _2320 * cbModelParam._m0[19u].x))), _1474);
            frontier_phi_24_49_ladder = _2444.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2444.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2444.x * cbModelParam._m0[1u].z;
        }
        _1567 = frontier_phi_24_49_ladder_2;
        _1569 = frontier_phi_24_49_ladder_1;
        _1571 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1551 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_571, _572, _573), _1474);
        _1567 = _1551.x * cbModelParam._m0[1u].z;
        _1569 = _1551.y * cbModelParam._m0[1u].z;
        _1571 = _1551.z * cbModelParam._m0[1u].z;
    }
    float _1584 = (((_598 * _548) + _599) * _563) * ((cbModelParam._m0[1u].w * (_1567 - _1465)) + _1465);
    float _1586 = (((_598 * _550) + _599) * _563) * ((cbModelParam._m0[1u].w * (_1569 - _1467)) + _1467);
    float _1588 = (((_598 * _551) + _599) * _563) * ((cbModelParam._m0[1u].w * (_1571 - _1469)) + _1469);
    float _1591 = fma(_1588, cbSceneParam._m0[89u].z, fma(_1586, cbSceneParam._m0[89u].y, _1584 * cbSceneParam._m0[89u].x));
    float _1594 = fma(_1588, cbSceneParam._m0[90u].z, fma(_1586, cbSceneParam._m0[90u].y, _1584 * cbSceneParam._m0[90u].x));
    float _1597 = fma(_1588, cbSceneParam._m0[91u].z, fma(_1586, cbSceneParam._m0[91u].y, _1584 * cbSceneParam._m0[91u].x));
    float _1631 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1635 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1639 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1643 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1644 = _1631 / _1643;
    float _1645 = _1635 / _1643;
    float _1646 = _1639 / _1643;
    float _1793;
    float _1794;
    float _1795;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1673 = ((uint(_1646 > cbSceneParam._m0[59u].y) + uint(_1646 > cbSceneParam._m0[59u].x)) + uint(_1646 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1674 = _1673 + 43u;
        uint _1682 = _1673 + 44u;
        uint _1690 = _1673 + 45u;
        uint _1698 = _1673 + 46u;
        float _1709 = fma(_1643, cbSceneParam._m0[_1674].w, fma(_1639, cbSceneParam._m0[_1674].z, fma(_1635, cbSceneParam._m0[_1674].y, _1631 * cbSceneParam._m0[_1674].x)));
        float _1713 = fma(_1643, cbSceneParam._m0[_1682].w, fma(_1639, cbSceneParam._m0[_1682].z, fma(_1635, cbSceneParam._m0[_1682].y, _1631 * cbSceneParam._m0[_1682].x)));
        float _1721 = fma(_1643, cbSceneParam._m0[_1698].w, fma(_1639, cbSceneParam._m0[_1698].z, fma(_1635, cbSceneParam._m0[_1698].y, _1631 * cbSceneParam._m0[_1698].x)));
        float _1726 = cbSceneParam._m0[33u].z * _1721;
        float _1728 = cbSceneParam._m0[33u].w * _1721;
        float _1731 = fma(_1643, cbSceneParam._m0[_1690].w, fma(_1639, cbSceneParam._m0[_1690].z, fma(_1635, cbSceneParam._m0[_1690].y, _1631 * cbSceneParam._m0[_1690].x))) / _1721;
        float _1779 = (cbSceneParam._m0[33u].x - sqrt(((_1645 * _1645) + (_1644 * _1644)) + (_1646 * _1646))) * cbSceneParam._m0[33u].y;
        float _4046 = isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0));
        float _1786 = (isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1726 + _1709) / _1721, (_1728 + _1713) / _1721), _1731), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1728 + _1709) / _1721, (_1713 - _1726) / _1721), _1731), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1709 - _1726) / _1721, (_1713 - _1728) / _1721), _1731), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1709 - _1728) / _1721, (_1726 + _1713) / _1721), _1731), 0.0)).x), vec4(0.25)));
        _1793 = 1.0 - (_1786 * cbSceneParam._m0[34u].x);
        _1794 = 1.0 - (_1786 * cbSceneParam._m0[34u].y);
        _1795 = 1.0 - (_1786 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1793 = 1.0;
        _1794 = 1.0;
        _1795 = 1.0;
    }
    float _1859;
    float _1861;
    float _1863;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1847 = fma(_1643, cbSceneParam._m0[63u].w, fma(_1639, cbSceneParam._m0[63u].z, fma(_1635, cbSceneParam._m0[63u].y, _1631 * cbSceneParam._m0[63u].x)));
        float _1848 = fma(_1643, cbSceneParam._m0[60u].w, fma(_1639, cbSceneParam._m0[60u].z, fma(_1635, cbSceneParam._m0[60u].y, _1631 * cbSceneParam._m0[60u].x))) / _1847;
        float _1849 = fma(_1643, cbSceneParam._m0[61u].w, fma(_1639, cbSceneParam._m0[61u].z, fma(_1635, cbSceneParam._m0[61u].y, _1631 * cbSceneParam._m0[61u].x))) / _1847;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1848 >= cbSceneParam._m0[64u].x) && (_1849 >= cbSceneParam._m0[64u].y)) && (_1848 <= cbSceneParam._m0[64u].z)) && (_1849 <= cbSceneParam._m0[64u].w))
        {
            float _1988 = fma(_1643, cbSceneParam._m0[62u].w, fma(_1639, cbSceneParam._m0[62u].z, fma(_1635, cbSceneParam._m0[62u].y, _1631 * cbSceneParam._m0[62u].x))) / _1847;
            float _1992 = isnan(cbSceneParam._m0[41u].w) ? _1988 : (isnan(_1988) ? cbSceneParam._m0[41u].w : max(_1988, cbSceneParam._m0[41u].w));
            float _2035 = (cbSceneParam._m0[33u].x - sqrt(((_1645 * _1645) + (_1644 * _1644)) + (_1646 * _1646))) * cbSceneParam._m0[33u].y;
            float _4062 = isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0));
            float _2042 = (isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1848, cbSceneParam._m0[33u].w + _1849), _1992), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1848, _1849 - cbSceneParam._m0[33u].z), _1992), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1848 - cbSceneParam._m0[33u].z, _1849 - cbSceneParam._m0[33u].w), _1992), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1848 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1849), _1992), 0.0)).x), vec4(0.25)));
            float _2046 = 1.0 - (_2042 * cbSceneParam._m0[34u].x);
            float _2047 = 1.0 - (_2042 * cbSceneParam._m0[34u].y);
            float _2048 = 1.0 - (_2042 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2047) ? _1794 : (isnan(_1794) ? _2047 : min(_1794, _2047));
            frontier_phi_36_35_ladder_1 = isnan(_2048) ? _1795 : (isnan(_1795) ? _2048 : min(_1795, _2048));
            frontier_phi_36_35_ladder_2 = isnan(_2046) ? _1793 : (isnan(_1793) ? _2046 : min(_1793, _2046));
        }
        else
        {
            frontier_phi_36_35_ladder = _1794;
            frontier_phi_36_35_ladder_1 = _1795;
            frontier_phi_36_35_ladder_2 = _1793;
        }
        _1859 = frontier_phi_36_35_ladder_2;
        _1861 = frontier_phi_36_35_ladder;
        _1863 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _1859 = _1793;
        _1861 = _1794;
        _1863 = _1795;
    }
    uvec4 _1868 = floatBitsToUint(cbInstanceData._m0[_523 + 5u]);
    uint _1870 = _1868.x * 14u;
    uint _1871 = _1870 + 13u;
    float _1878 = _563 + (-1.0);
    float _1883 = (cbLight._m0[_1871].x * _1878) + 1.0;
    float _1884 = (cbLight._m0[_1871].y * _1878) + 1.0;
    float _1885 = (cbLight._m0[_1871].z * _1878) + 1.0;
    float _1886 = (cbLight._m0[_1871].w * _1878) + 1.0;
    uint _1887 = _1870 + 5u;
    float _1893 = isnan(1.0) ? _1884 : (isnan(_1884) ? 1.0 : min(_1884, 1.0));
    uint _1897 = _1870 + 4u;
    float _1907 = isnan(1.0) ? _1883 : (isnan(_1883) ? 1.0 : min(_1883, 1.0));
    uint _1911 = _1870 | 1u;
    float _1922 = dot(vec3(cbLight._m0[_1870].xyz), vec3(_392, _393, _394));
    float _1925 = dot(vec3(cbLight._m0[_1911].xyz), vec3(_392, _393, _394));
    float _4098 = isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0));
    float _4109 = isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0));
    float _1930 = (isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0))) * 0.3183098733425140380859375;
    float _1932 = (isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0))) * 0.3183098733425140380859375;
    float _1939 = ((cbLight._m0[_1887].x * _1893) * _1932) + (((cbLight._m0[_1897].x * _1859) * _1907) * _1930);
    float _1940 = ((_1893 * cbLight._m0[_1887].y) * _1932) + (((cbLight._m0[_1897].y * _1861) * _1907) * _1930);
    float _1941 = ((_1893 * cbLight._m0[_1887].z) * _1932) + (((cbLight._m0[_1897].z * _1863) * _1907) * _1930);
    uvec4 _1945 = floatBitsToUint(cbLight._m0[_1870 + 12u]);
    bool _1947 = _1945.x == 0u;
    float _2049;
    float _2051;
    float _2053;
    if (_1947)
    {
        _2049 = _1939;
        _2051 = _1940;
        _2053 = _1941;
    }
    else
    {
        uint _2057 = _1870 + 6u;
        float _2073 = (dot(vec3(cbLight._m0[_1870 + 2u].xyz), vec3(_392, _393, _394)) * 0.5) + 0.5;
        float _2074 = _2073 * _2073;
        float _4120 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
        float _2075 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
        float _2076 = isnan(1.0) ? _1885 : (isnan(_1885) ? 1.0 : min(_1885, 1.0));
        _2049 = (((cbLight._m0[_2057].x * 0.3183098733425140380859375) * _2075) * _2076) + _1939;
        _2051 = (((cbLight._m0[_2057].y * 0.3183098733425140380859375) * _2075) * _2076) + _1940;
        _2053 = (((cbLight._m0[_2057].z * 0.3183098733425140380859375) * _2075) * _2076) + _1941;
    }
    bool _2056 = _1945.y == 0u;
    float _2111;
    float _2113;
    float _2115;
    if (_2056)
    {
        _2111 = _2049;
        _2113 = _2051;
        _2115 = _2053;
    }
    else
    {
        uint _2284 = _1870 + 7u;
        float _2300 = (dot(vec3(cbLight._m0[_1870 + 3u].xyz), vec3(_392, _393, _394)) * 0.5) + 0.5;
        float _2301 = _2300 * _2300;
        float _4136 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
        float _2302 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
        float _2303 = isnan(1.0) ? _1886 : (isnan(_1886) ? 1.0 : min(_1886, 1.0));
        _2111 = (((cbLight._m0[_2284].x * 0.3183098733425140380859375) * _2302) * _2303) + _2049;
        _2113 = (((cbLight._m0[_2284].y * 0.3183098733425140380859375) * _2302) * _2303) + _2051;
        _2115 = (((cbLight._m0[_2284].z * 0.3183098733425140380859375) * _2302) * _2303) + _2053;
    }
    uint _2118 = _1870 + 8u;
    float _2131 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1870].w)) * _395) * 0.949999988079071044921875);
    float _2132 = _2131 * _2131;
    float _2133 = cbLight._m0[_1870].x + _474;
    float _2134 = cbLight._m0[_1870].y + _475;
    float _2135 = cbLight._m0[_1870].z + _476;
    float _2139 = inversesqrt(dot(vec3(_2133, _2134, _2135), vec3(_2133, _2134, _2135)));
    float _2140 = _2139 * _2133;
    float _2141 = _2139 * _2134;
    float _2142 = _2139 * _2135;
    float _2143 = dot(vec3(_392, _393, _394), vec3(cbLight._m0[_1870].xyz));
    float _4152 = isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0));
    float _2146 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
    float _4163 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _2147 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
    float _2148 = dot(vec3(_392, _393, _394), vec3(_2140, _2141, _2142));
    float _4174 = isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0));
    float _2151 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
    float _2152 = dot(vec3(cbLight._m0[_1870].xyz), vec3(_2140, _2141, _2142));
    float _4185 = isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0));
    float _2156 = _2132 * _2132;
    float _2160 = ((_2151 * _2151) * (_2156 + (-1.0))) + 1.0;
    float _2168 = exp2(log2(1.0 - (isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0)))) * 5.0);
    float _2169 = 0.959999978542327880859375 - _545;
    float _2171 = 0.959999978542327880859375 - _546;
    float _2172 = 0.959999978542327880859375 - _547;
    float _2179 = 1.0 - _2132;
    float _2190 = (0.5 / (((_2147 * ((_2146 * _2179) + _2132)) + 9.9999999392252902907785028219223e-09) + (((_2147 * _2179) + _2132) * _2146))) * _2146;
    float _4196 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
    float _2192 = (isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0))) * (_2156 / ((_2160 * _2160) * 3.141590118408203125));
    uint _2206 = _1870 + 9u;
    float _2217 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1911].w)) * _395) * 0.949999988079071044921875);
    float _2218 = _2217 * _2217;
    float _2219 = cbLight._m0[_1911].x + _474;
    float _2220 = cbLight._m0[_1911].y + _475;
    float _2221 = cbLight._m0[_1911].z + _476;
    float _2225 = inversesqrt(dot(vec3(_2219, _2220, _2221), vec3(_2219, _2220, _2221)));
    float _2226 = _2225 * _2219;
    float _2227 = _2225 * _2220;
    float _2228 = _2225 * _2221;
    float _2229 = dot(vec3(_392, _393, _394), vec3(cbLight._m0[_1911].xyz));
    float _4207 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
    float _2232 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
    float _2233 = dot(vec3(_392, _393, _394), vec3(_2226, _2227, _2228));
    float _4218 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
    float _2236 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
    float _2237 = dot(vec3(cbLight._m0[_1911].xyz), vec3(_2226, _2227, _2228));
    float _4229 = isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : max(_2237, 0.0));
    float _2241 = _2218 * _2218;
    float _2245 = ((_2236 * _2236) * (_2241 + (-1.0))) + 1.0;
    float _2252 = exp2(log2(1.0 - (isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0)))) * 5.0);
    float _2259 = 1.0 - _2218;
    float _2269 = (0.5 / (((_2147 * ((_2232 * _2259) + _2218)) + 9.9999999392252902907785028219223e-09) + (((_2147 * _2259) + _2218) * _2232))) * _2232;
    float _4240 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
    float _2271 = (isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0))) * (_2241 / ((_2245 * _2245) * 3.141590118408203125));
    float _2281 = (((((_2252 * _2169) + _548) * cbLight._m0[_2206].x) * _2271) * _1893) + ((((cbLight._m0[_2118].x * _1859) * ((_2168 * _2169) + _548)) * _2192) * _1907);
    float _2282 = (((((_2252 * _2171) + _550) * cbLight._m0[_2206].y) * _2271) * _1893) + ((((cbLight._m0[_2118].y * _1861) * ((_2168 * _2171) + _550)) * _2192) * _1907);
    float _2283 = (((((_2252 * _2172) + _551) * cbLight._m0[_2206].z) * _2271) * _1893) + ((((cbLight._m0[_2118].z * _1863) * ((_2168 * _2172) + _551)) * _2192) * _1907);
    float _2339;
    float _2341;
    float _2343;
    if (_1947)
    {
        _2339 = _2281;
        _2341 = _2282;
        _2343 = _2283;
    }
    else
    {
        uint _2345 = _1870 + 2u;
        uint _2349 = _1870 + 10u;
        float _2363 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2345].w)) * _395) * 0.949999988079071044921875);
        float _2364 = _2363 * _2363;
        float _2365 = cbLight._m0[_2345].x + _474;
        float _2366 = cbLight._m0[_2345].y + _475;
        float _2367 = cbLight._m0[_2345].z + _476;
        float _2371 = inversesqrt(dot(vec3(_2365, _2366, _2367), vec3(_2365, _2366, _2367)));
        float _2372 = _2371 * _2365;
        float _2373 = _2371 * _2366;
        float _2374 = _2371 * _2367;
        float _2375 = dot(vec3(_392, _393, _394), vec3(cbLight._m0[_2345].xyz));
        float _4251 = isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0));
        float _2378 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
        float _2379 = dot(vec3(_392, _393, _394), vec3(_2372, _2373, _2374));
        float _4262 = isnan(0.0) ? _2379 : (isnan(_2379) ? 0.0 : max(_2379, 0.0));
        float _2382 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
        float _2383 = dot(vec3(cbLight._m0[_2345].xyz), vec3(_2372, _2373, _2374));
        float _4273 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
        float _2387 = _2364 * _2364;
        float _2391 = ((_2382 * _2382) * (_2387 + (-1.0))) + 1.0;
        float _2398 = exp2(log2(1.0 - (isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0)))) * 5.0);
        float _2405 = 1.0 - _2364;
        float _2415 = (0.5 / (((_2147 * ((_2378 * _2405) + _2364)) + 9.9999999392252902907785028219223e-09) + (((_2147 * _2405) + _2364) * _2378))) * _2378;
        float _4284 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
        float _2417 = (isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0))) * (_2387 / ((_2391 * _2391) * 3.141590118408203125));
        float _2418 = isnan(1.0) ? _1885 : (isnan(_1885) ? 1.0 : min(_1885, 1.0));
        _2339 = (((((_2398 * _2169) + _548) * cbLight._m0[_2349].x) * _2417) * _2418) + _2281;
        _2341 = (((((_2398 * _2171) + _550) * cbLight._m0[_2349].y) * _2417) * _2418) + _2282;
        _2343 = (((((_2398 * _2172) + _551) * cbLight._m0[_2349].z) * _2417) * _2418) + _2283;
    }
    float _2449;
    float _2451;
    float _2453;
    if (_2056)
    {
        _2449 = _2339;
        _2451 = _2341;
        _2453 = _2343;
    }
    else
    {
        uint _2460 = _1870 + 3u;
        uint _2464 = _1870 + 11u;
        float _2478 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2460].w)) * _395) * 0.949999988079071044921875);
        float _2479 = _2478 * _2478;
        float _2480 = cbLight._m0[_2460].x + _474;
        float _2481 = cbLight._m0[_2460].y + _475;
        float _2482 = cbLight._m0[_2460].z + _476;
        float _2486 = inversesqrt(dot(vec3(_2480, _2481, _2482), vec3(_2480, _2481, _2482)));
        float _2487 = _2486 * _2480;
        float _2488 = _2486 * _2481;
        float _2489 = _2486 * _2482;
        float _2490 = dot(vec3(_392, _393, _394), vec3(cbLight._m0[_2460].xyz));
        float _4300 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
        float _2493 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
        float _2494 = dot(vec3(_392, _393, _394), vec3(_2487, _2488, _2489));
        float _4311 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
        float _2497 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
        float _2498 = dot(vec3(cbLight._m0[_2460].xyz), vec3(_2487, _2488, _2489));
        float _4322 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0));
        float _2502 = _2479 * _2479;
        float _2506 = ((_2497 * _2497) * (_2502 + (-1.0))) + 1.0;
        float _2513 = exp2(log2(1.0 - (isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0)))) * 5.0);
        float _2520 = 1.0 - _2479;
        float _2530 = (0.5 / (((_2147 * ((_2493 * _2520) + _2479)) + 9.9999999392252902907785028219223e-09) + (((_2147 * _2520) + _2479) * _2493))) * _2493;
        float _4333 = isnan(0.0) ? _2530 : (isnan(_2530) ? 0.0 : max(_2530, 0.0));
        float _2532 = (isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0))) * (_2502 / ((_2506 * _2506) * 3.141590118408203125));
        float _2533 = isnan(1.0) ? _1886 : (isnan(_1886) ? 1.0 : min(_1886, 1.0));
        _2449 = (((((_2513 * _2169) + _548) * cbLight._m0[_2464].x) * _2532) * _2533) + _2339;
        _2451 = (((((_2513 * _2171) + _550) * cbLight._m0[_2464].y) * _2532) * _2533) + _2341;
        _2453 = (((((_2513 * _2172) + _551) * cbLight._m0[_2464].z) * _2532) * _2533) + _2343;
    }
    float _2598;
    float _2600;
    float _2602;
    float _2604;
    float _2606;
    float _2608;
    if (_1868.y == 0u)
    {
        uvec4 _2554 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2555 = _2554.x;
        uint _2566 = uint((float(_2554.y) * floor(float(uint(cbSceneParam._m0[85u].y * _483) / _2555))) + floor(float(uint(cbSceneParam._m0[85u].x * _482) / _2555)));
        float _2576 = (log2(_1646 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2577 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
        uint _2580 = uint(isnan(14.0) ? _2577 : (isnan(_2577) ? 14.0 : min(_2577, 14.0)));
        uvec4 _2585 = texelFetch(g_lightClusterGridBuffer, int(((_2580 << 2u) + (_2566 << 6u)) >> 2u));
        uint _2586 = _2585.x;
        uint _2587 = _2554.z;
        float _2665;
        float _2667;
        float _2669;
        float _2671;
        float _2673;
        float _2675;
        if (((((1u << ((_2587 >> 4u) & 15u)) + 4294967295u) & _2586) == 0u) || ((_2587 & 240u) == 0u))
        {
            _2665 = 0.0;
            _2667 = 0.0;
            _2669 = 0.0;
            _2671 = 0.0;
            _2673 = 0.0;
            _2675 = 0.0;
        }
        else
        {
            float _2666;
            float _2668;
            float _2670;
            float _2672;
            float _2674;
            float _2676;
            float _2809 = 0.0;
            float _2810 = 0.0;
            float _2811 = 0.0;
            float _2812 = 0.0;
            float _2813 = 0.0;
            float _2814 = 0.0;
            uint _2815 = 0u;
            uint _2824;
            bool _2825;
            for (;;)
            {
                _2824 = texelFetch(g_lightClassification, int((((_2580 << 5u) + (_2566 << 9u)) + (_2815 << 2u)) >> 2u)).x;
                _2825 = _2824 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2825)
                {
                    frontier_phi_68_pred = _2814;
                    frontier_phi_68_pred_1 = _2813;
                    frontier_phi_68_pred_2 = _2812;
                    frontier_phi_68_pred_3 = _2810;
                    frontier_phi_68_pred_4 = _2809;
                    frontier_phi_68_pred_5 = _2811;
                }
                else
                {
                    float _2933;
                    float _2934;
                    float _2935;
                    float _2936;
                    float _2937;
                    float _2938;
                    uint _2939;
                    _2933 = _2809;
                    _2934 = _2810;
                    _2935 = _2811;
                    _2936 = _2812;
                    _2937 = _2813;
                    _2938 = _2814;
                    _2939 = _2824;
                    float _2865;
                    float _2866;
                    float _2867;
                    float _2868;
                    float _2869;
                    float _2870;
                    for (;;)
                    {
                        uint _2943 = uint(findLSB(_2939)) + (_2815 << 5u);
                        uint _2940 = (_2939 + 4294967295u) & _2939;
                        uint _2945 = _2943 * 48u;
                        vec4 _2959 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2945)).x, texelFetch(g_PointLightRenderingBuffer, int(_2945 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2945 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2945 + 3u)).x));
                        uint _2965 = (_2943 * 48u) + 4u;
                        vec4 _2978 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2965)).x, texelFetch(g_PointLightRenderingBuffer, int(_2965 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2965 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2965 + 3u)).x));
                        uint _2984 = (_2943 * 48u) + 8u;
                        vec3 _2995 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2984)).x, texelFetch(g_PointLightRenderingBuffer, int(_2984 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2984 + 2u)).x));
                        float _2999 = _2959.x - _1644;
                        float _3000 = _2959.y - _1645;
                        float _3001 = _2959.z - _1646;
                        float _3002 = dot(vec3(_2999, _3000, _3001), vec3(_2999, _3000, _3001));
                        float _3005 = inversesqrt(_3002);
                        float _3006 = _3005 * _2999;
                        float _3007 = _3005 * _3000;
                        float _3008 = _3005 * _3001;
                        float _3009 = dot(vec3(_504, _507, _510), vec3(_3006, _3007, _3008));
                        float _3014 = 1.0 - (_3002 * _2959.w);
                        float _4359 = isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : max(_3014, 0.0));
                        float _3015 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
                        float _3016 = sqrt(_3002) * _2978.w;
                        float _3019 = 1.39999997615814208984375 / (_3016 + 1.39999997615814208984375);
                        float _3020 = _3019 * _3019;
                        float _3023 = ((1.0 - _3020) * _3009) + _3020;
                        float _3026 = _3016 * _3016;
                        float _3030 = ((isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : max(_3023, 0.0))) * _3015) / ((_3026 * 0.699999988079071044921875) + 1.0);
                        float _3034 = (-0.0) - _1644;
                        float _3035 = (-0.0) - _1645;
                        float _3036 = (-0.0) - _1646;
                        float _3040 = inversesqrt(dot(vec3(_3034, _3035, _3036), vec3(_3034, _3035, _3036)));
                        float _3041 = _3040 * _3034;
                        float _3042 = _3040 * _3035;
                        float _3043 = _3040 * _3036;
                        float _3050 = exp2(log2(1.0 / ((_3026 * 3.5) + 5.0)) * 0.25);
                        float _3051 = 1.0 - _579;
                        float _3058 = sqrt(1.0 - ((1.0 - (_3051 * _3051)) * (1.0 - (_3050 * _3050))));
                        float _3059 = _3058 * _3058;
                        float _3060 = _3059 * _3059;
                        float _3061 = _3041 + _3006;
                        float _3062 = _3042 + _3007;
                        float _3063 = _3043 + _3008;
                        float _3067 = inversesqrt(dot(vec3(_3061, _3062, _3063), vec3(_3061, _3062, _3063)));
                        float _3071 = dot(vec3(_504, _507, _510), vec3(_3041, _3042, _3043));
                        float _4375 = isnan(0.0) ? _3071 : (isnan(_3071) ? 0.0 : max(_3071, 0.0));
                        float _3074 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
                        float _3075 = dot(vec3(_504, _507, _510), vec3(_3067 * _3061, _3067 * _3062, _3067 * _3063));
                        float _4386 = isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : max(_3075, 0.0));
                        float _3078 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
                        float _3082 = ((_3078 * _3078) * (_3060 + (-1.0))) + 1.0;
                        float _3083 = _3019 * _3059;
                        float _3084 = _3083 * _3083;
                        float _3087 = ((1.0 - _3084) * _3009) + _3084;
                        float _4397 = isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : max(_3087, 0.0));
                        float _3088 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
                        float _3089 = 1.0 - _3059;
                        float _3099 = (0.5 / (((_3088 * ((_3074 * _3089) + _3059)) + 9.9999999392252902907785028219223e-09) + (((_3088 * _3089) + _3059) * _3074))) * _3088;
                        float _4408 = isnan(0.0) ? _3099 : (isnan(_3099) ? 0.0 : max(_3099, 0.0));
                        float _3110 = (((_3060 * 3.1415927410125732421875) * (isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0)))) / ((_3082 * _3082) * ((_3026 * 2.1991131305694580078125) + 3.141590118408203125))) * _3015;
                        _2868 = (_3030 * _2978.x) + _2936;
                        _2869 = (_3030 * _2978.y) + _2937;
                        _2870 = (_3030 * _2978.z) + _2938;
                        _2865 = (_3110 * _2995.x) + _2933;
                        _2866 = (_3110 * _2995.y) + _2934;
                        _2867 = (_3110 * _2995.z) + _2935;
                        if (_2940 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2933 = _2865;
                            _2934 = _2866;
                            _2935 = _2867;
                            _2936 = _2868;
                            _2937 = _2869;
                            _2938 = _2870;
                            _2939 = _2940;
                        }
                    }
                    frontier_phi_68_pred = _2870;
                    frontier_phi_68_pred_1 = _2869;
                    frontier_phi_68_pred_2 = _2868;
                    frontier_phi_68_pred_3 = _2866;
                    frontier_phi_68_pred_4 = _2865;
                    frontier_phi_68_pred_5 = _2867;
                }
                _2676 = frontier_phi_68_pred;
                _2674 = frontier_phi_68_pred_1;
                _2672 = frontier_phi_68_pred_2;
                _2668 = frontier_phi_68_pred_3;
                _2666 = frontier_phi_68_pred_4;
                _2670 = frontier_phi_68_pred_5;
                uint _2816 = _2815 + 1u;
                if (_2816 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2809 = _2666;
                    _2810 = _2668;
                    _2811 = _2670;
                    _2812 = _2672;
                    _2813 = _2674;
                    _2814 = _2676;
                    _2815 = _2816;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2665 = _2666;
            _2667 = _2668;
            _2669 = _2670;
            _2671 = _2672;
            _2673 = _2674;
            _2675 = _2676;
        }
        uvec4 _2679 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2680 = _2679.z;
        uint _2682 = (_2680 >> 8u) & 15u;
        float _2777;
        float _2779;
        float _2781;
        float _2783;
        float _2785;
        float _2787;
        if (((4294967295u << _2682) & _2586) == 0u)
        {
            _2777 = _2665;
            _2779 = _2667;
            _2781 = _2669;
            _2783 = _2671;
            _2785 = _2673;
            _2787 = _2675;
        }
        else
        {
            float _2802 = inversesqrt(dot(vec3(_1644, _1645, _1646), vec3(_1644, _1645, _1646)));
            float _2803 = _2802 * _1644;
            float _2804 = _2802 * _1645;
            float _2805 = _2802 * _1646;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2682 < ((_2680 >> 12u) & 15u))
            {
                float _2778;
                float _2780;
                float _2782;
                float _2784;
                float _2786;
                float _2788;
                float _2916 = _2665;
                float _2917 = _2667;
                float _2918 = _2669;
                float _2919 = _2671;
                float _2920 = _2673;
                float _2921 = _2675;
                uint _2922 = _2682;
                uint _2931;
                bool _2932;
                for (;;)
                {
                    _2931 = texelFetch(g_lightClassification, int((((_2580 << 5u) + (_2566 << 9u)) + (_2922 << 2u)) >> 2u)).x;
                    _2932 = _2931 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_2932)
                    {
                        frontier_phi_74_pred = _2918;
                        frontier_phi_74_pred_1 = _2917;
                        frontier_phi_74_pred_2 = _2916;
                        frontier_phi_74_pred_3 = _2921;
                        frontier_phi_74_pred_4 = _2920;
                        frontier_phi_74_pred_5 = _2919;
                    }
                    else
                    {
                        float _3115;
                        float _3116;
                        float _3117;
                        float _3118;
                        float _3119;
                        float _3120;
                        float _3411;
                        float _3412;
                        float _3413;
                        float _3414;
                        float _3415;
                        float _3416;
                        float _3128 = _2916;
                        float _3129 = _2917;
                        float _3130 = _2918;
                        float _3131 = _2919;
                        float _3132 = _2920;
                        float _3133 = _2921;
                        uint _3134 = _2931;
                        uint _3135;
                        vec4 _3160;
                        float _3161;
                        vec4 _3176;
                        vec3 _3188;
                        vec4 _3204;
                        vec4 _3220;
                        float _3267;
                        bool _3268;
                        for (;;)
                        {
                            uint _3145 = ((_2922 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3134));
                            _3135 = (_3134 + 4294967295u) & _3134;
                            uint _3147 = _3145 * 40u;
                            _3160 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3147)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 3u)).x));
                            _3161 = _3160.w;
                            uint _3163 = (_3145 * 40u) + 4u;
                            _3176 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3163)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 3u)).x));
                            uint _3178 = (_3145 * 40u) + 8u;
                            _3188 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3178)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 2u)).x));
                            uint _3191 = (_3145 * 40u) + 16u;
                            _3204 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3191)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 3u)).x));
                            uint _3207 = (_3145 * 40u) + 20u;
                            _3220 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3207)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 3u)).x));
                            uint _3223 = (_3145 * 40u) + 24u;
                            vec4 _3236 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3223)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3223 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3223 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3223 + 3u)).x));
                            uint _3242 = (_3145 * 40u) + 28u;
                            vec4 _3255 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3242)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 3u)).x));
                            _3267 = fma(_1646, _3255.z, fma(_1645, _3255.y, _3255.x * _1644)) + _3255.w;
                            _3268 = !((fma(_1646, _3236.z, fma(_1645, _3236.y, _3236.x * _1644)) + _3236.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3268)
                            {
                                float _3295 = _3160.x - _1644;
                                float _3296 = _3160.y - _1645;
                                float _3297 = _3160.z - _1646;
                                float _3298 = dot(vec3(_3295, _3296, _3297), vec3(_3295, _3296, _3297));
                                float _3301 = inversesqrt(_3298);
                                float _3302 = _3301 * _3295;
                                float _3303 = _3301 * _3296;
                                float _3304 = _3301 * _3297;
                                float _3308 = 1.0 - (_3298 / (_3161 * _3161));
                                float _4419 = isnan(0.0) ? _3308 : (isnan(_3308) ? 0.0 : max(_3308, 0.0));
                                float _3309 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
                                float _3313 = sqrt(_3298) * _3176.w;
                                float _3315 = 1.39999997615814208984375 / (_3313 + 1.39999997615814208984375);
                                float _3316 = _3315 * _3315;
                                float _3319 = ((1.0 - _3316) * dot(vec3(_3302, _3303, _3304), vec3(_504, _507, _510))) + _3316;
                                float _3322 = _3313 * _3313;
                                float _3326 = (fma(_1646, _3204.z, fma(_1645, _3204.y, _3204.x * _1644)) + _3204.w) / _3267;
                                float _3327 = (fma(_1646, _3220.z, fma(_1645, _3220.y, _3220.x * _1644)) + _3220.w) / _3267;
                                float _3331 = 1.0 - dot(vec2(_3326, _3327), vec2(_3326, _3327));
                                float _4435 = isnan(0.0) ? _3331 : (isnan(_3331) ? 0.0 : max(_3331, 0.0));
                                float _3332 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
                                float _3333 = _3332 * (((isnan(0.0) ? _3319 : (isnan(_3319) ? 0.0 : max(_3319, 0.0))) * _3309) / ((_3322 * 0.699999988079071044921875) + 1.0));
                                float _3345 = exp2(log2(1.0 / ((_3322 * 3.5) + 5.0)) * 0.25);
                                float _3346 = 1.0 - _579;
                                float _3353 = sqrt(1.0 - ((1.0 - (_3346 * _3346)) * (1.0 - (_3345 * _3345))));
                                float _3354 = _3353 * _3353;
                                float _3355 = _3354 * _3354;
                                float _3356 = _3302 - _2803;
                                float _3357 = _3303 - _2804;
                                float _3358 = _3304 - _2805;
                                float _3362 = inversesqrt(dot(vec3(_3356, _3357, _3358), vec3(_3356, _3357, _3358)));
                                float _3366 = dot(vec3(_504, _507, _510), vec3((-0.0) - _2803, (-0.0) - _2804, (-0.0) - _2805));
                                float _4446 = isnan(0.0) ? _3366 : (isnan(_3366) ? 0.0 : max(_3366, 0.0));
                                float _3369 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
                                float _3370 = dot(vec3(_504, _507, _510), vec3(_3362 * _3356, _3362 * _3357, _3362 * _3358));
                                float _4457 = isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : max(_3370, 0.0));
                                float _3373 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
                                float _3377 = ((_3373 * _3373) * (_3355 + (-1.0))) + 1.0;
                                float _3378 = _3315 * _3354;
                                float _3379 = _3378 * _3378;
                                float _3385 = ((1.0 - _3379) * dot(vec3(_504, _507, _510), vec3(_3302, _3303, _3304))) + _3379;
                                float _4468 = isnan(0.0) ? _3385 : (isnan(_3385) ? 0.0 : max(_3385, 0.0));
                                float _3386 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
                                float _3387 = 1.0 - _3354;
                                float _3397 = (0.5 / (((_3386 * ((_3369 * _3387) + _3354)) + 9.9999999392252902907785028219223e-09) + (((_3386 * _3387) + _3354) * _3369))) * _3386;
                                float _4479 = isnan(0.0) ? _3397 : (isnan(_3397) ? 0.0 : max(_3397, 0.0));
                                float _3407 = (_3332 * _3309) * (((_3355 * 3.1415927410125732421875) * (isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0)))) / ((_3377 * _3377) * ((_3322 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3407 * _3188.z;
                                frontier_phi_80_pred_1 = _3407 * _3188.y;
                                frontier_phi_80_pred_2 = _3407 * _3188.x;
                                frontier_phi_80_pred_3 = _3333 * _3176.z;
                                frontier_phi_80_pred_4 = _3333 * _3176.y;
                                frontier_phi_80_pred_5 = _3333 * _3176.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3413 = frontier_phi_80_pred;
                            _3412 = frontier_phi_80_pred_1;
                            _3411 = frontier_phi_80_pred_2;
                            _3416 = frontier_phi_80_pred_3;
                            _3415 = frontier_phi_80_pred_4;
                            _3414 = frontier_phi_80_pred_5;
                            _3118 = _3414 + _3131;
                            _3119 = _3415 + _3132;
                            _3120 = _3416 + _3133;
                            _3115 = _3411 + _3128;
                            _3116 = _3412 + _3129;
                            _3117 = _3413 + _3130;
                            if (_3135 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3128 = _3115;
                                _3129 = _3116;
                                _3130 = _3117;
                                _3131 = _3118;
                                _3132 = _3119;
                                _3133 = _3120;
                                _3134 = _3135;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3117;
                        frontier_phi_74_pred_1 = _3116;
                        frontier_phi_74_pred_2 = _3115;
                        frontier_phi_74_pred_3 = _3120;
                        frontier_phi_74_pred_4 = _3119;
                        frontier_phi_74_pred_5 = _3118;
                    }
                    _2782 = frontier_phi_74_pred;
                    _2780 = frontier_phi_74_pred_1;
                    _2778 = frontier_phi_74_pred_2;
                    _2788 = frontier_phi_74_pred_3;
                    _2786 = frontier_phi_74_pred_4;
                    _2784 = frontier_phi_74_pred_5;
                    uint _2923 = _2922 + 1u;
                    if (_2923 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2916 = _2778;
                        _2917 = _2780;
                        _2918 = _2782;
                        _2919 = _2784;
                        _2920 = _2786;
                        _2921 = _2788;
                        _2922 = _2923;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2786;
                frontier_phi_62_63_ladder_1 = _2784;
                frontier_phi_62_63_ladder_2 = _2782;
                frontier_phi_62_63_ladder_3 = _2788;
                frontier_phi_62_63_ladder_4 = _2780;
                frontier_phi_62_63_ladder_5 = _2778;
            }
            else
            {
                frontier_phi_62_63_ladder = _2673;
                frontier_phi_62_63_ladder_1 = _2671;
                frontier_phi_62_63_ladder_2 = _2669;
                frontier_phi_62_63_ladder_3 = _2675;
                frontier_phi_62_63_ladder_4 = _2667;
                frontier_phi_62_63_ladder_5 = _2665;
            }
            _2777 = frontier_phi_62_63_ladder_5;
            _2779 = frontier_phi_62_63_ladder_4;
            _2781 = frontier_phi_62_63_ladder_2;
            _2783 = frontier_phi_62_63_ladder_1;
            _2785 = frontier_phi_62_63_ladder;
            _2787 = frontier_phi_62_63_ladder_3;
        }
        float _2792 = isnan(1.0) ? _563 : (isnan(_563) ? 1.0 : min(_563, 1.0));
        _2598 = (_2792 * _2783) + _2111;
        _2600 = (_2792 * _2785) + _2113;
        _2602 = (_2792 * _2787) + _2115;
        _2604 = ((_2777 * _548) * _2792) + _2449;
        _2606 = ((_2779 * _550) * _2792) + _2451;
        _2608 = ((_2781 * _551) * _2792) + _2453;
    }
    else
    {
        _2598 = _2111;
        _2600 = _2113;
        _2602 = _2115;
        _2604 = _2449;
        _2606 = _2451;
        _2608 = _2453;
    }
    float _4495 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _4506 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _4517 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    uint _2628 = _523 + 6u;
    float _2636 = _482 / cbSceneParam._m0[86u].x;
    float _2637 = _483 / cbSceneParam._m0[86u].y;
    vec4 _2651 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2636, _2637, (log2((isnan(cbSceneParam._m0[77u].w) ? _415 : (isnan(_415) ? cbSceneParam._m0[77u].w : min(_415, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2653 = _2651.x;
    float _2654 = _2651.y;
    float _2655 = _2651.z;
    float _2656 = _2651.w;
    float _2727;
    float _2729;
    float _2731;
    float _2733;
    if (_415 > cbSceneParam._m0[78u].w)
    {
        float _2690 = isnan(_415) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _415 : min(cbSceneParam._m0[80u].w, _415));
        float _2691 = _2690 / _415;
        float _2702 = _2691 * _467;
        float _2703 = _468 * _2691;
        float _2704 = (-0.0) - _2703;
        float _2705 = _2691 * _469;
        float _2707 = (cbSceneParam._m0[77u].w * _2704) / _2690;
        float _2708 = _2707 + cbSceneParam._m0[79u].w;
        float _2709 = cbSceneParam._m0[79u].w - _2703;
        float _2715 = sqrt(((_2702 * _2702) + (_2703 * _2703)) + (_2705 * _2705));
        float _2718 = (1.0 - (cbSceneParam._m0[77u].w / _2690)) * _2715;
        float _2723 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2725 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2878;
        if (abs((_2704 - _2707) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2878 = ((((_2708 > 0.0) ? exp2(_2723 * _2708) : (2.0 - exp2(_2725 * _2708))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2718;
        }
        else
        {
            float _2838 = 1.0 / cbSceneParam._m0[80u].x;
            float _2839 = isnan(_2709) ? _2708 : (isnan(_2708) ? _2709 : max(_2708, _2709));
            float _2840 = isnan(_2709) ? _2708 : (isnan(_2708) ? _2709 : min(_2708, _2709));
            float _2849 = isnan(0.0) ? _2839 : (isnan(_2839) ? 0.0 : min(_2839, 0.0));
            float _2850 = isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : min(_2840, 0.0));
            _2878 = ((abs(_2715 / _2704) * cbSceneParam._m0[80u].y) * ((((_2849 - _2850) * 2.0) - ((exp2(_2723 * (isnan(0.0) ? _2839 : (isnan(_2839) ? 0.0 : max(_2839, 0.0)))) - exp2(_2723 * (isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : max(_2840, 0.0))))) * _2838)) - ((exp2(_2725 * _2849) - exp2(_2725 * _2850)) * _2838))) + (_2718 * cbSceneParam._m0[80u].z);
        }
        vec4 _2880 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2636, _2637, 1.0), 0.0);
        float _2889 = exp2((_2878 * (-1.44269502162933349609375)) * (1.0 - _2880.w));
        float _2890 = log2(_2889);
        float _2906 = log2(_2656);
        _2727 = (exp2(_2906 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2890 * cbSceneParam._m0[78u].x)) * _2880.x) / cbSceneParam._m0[78u].x)) + _2653;
        _2729 = (exp2(_2906 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2890 * cbSceneParam._m0[78u].y)) * _2880.y) / cbSceneParam._m0[78u].y)) + _2654;
        _2731 = (exp2(_2906 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2890 * cbSceneParam._m0[78u].z)) * _2880.z) / cbSceneParam._m0[78u].z)) + _2655;
        _2733 = _2889 * _2656;
    }
    else
    {
        _2727 = _2653;
        _2729 = _2654;
        _2731 = _2655;
        _2733 = _2656;
    }
    float _2745 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2746 = _2745 == 3.0;
    float _2747 = log2(_2733);
    float _2754 = exp2(_2747 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0))) * (_2598 + ((isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0))) * _563))) + ((_2604 + ((isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0))) * _1373)) * cbPerFrame._m0[3u].x));
    float _2755 = exp2(_2747 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0))) * (_2600 + ((isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0))) * _563))) + ((_2606 + ((isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0))) * _1373)) * cbPerFrame._m0[3u].x));
    float _2756 = exp2(_2747 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0))) * (_2602 + ((isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0))) * _563))) + ((_2608 + ((isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0))) * _1373)) * cbPerFrame._m0[3u].x));
    float _2765 = (_2745 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2765 * (_2746 ? _2754 : (_2754 + (cbSceneParam._m0[72u].w * _2727)));
    SV_Target.y = _2765 * (_2746 ? _2755 : (_2755 + (cbSceneParam._m0[72u].w * _2729)));
    SV_Target.z = _2765 * (_2746 ? _2756 : (_2756 + (cbSceneParam._m0[72u].w * _2731)));
    SV_Target.w = cbInstanceData._m0[_2628].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2628].w;
}


