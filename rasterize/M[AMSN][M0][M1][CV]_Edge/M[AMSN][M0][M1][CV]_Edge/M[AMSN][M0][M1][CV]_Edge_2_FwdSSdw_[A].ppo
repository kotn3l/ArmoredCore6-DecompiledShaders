#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _965;
float _3356;
float _3357;
float _3358;
float _3359;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _194 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _195 = _194 * _186;
    float _196 = _194 * _187;
    float _197 = _194 * _188;
    float _201 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _202 = _201 * NORMAL.x;
    float _203 = _201 * NORMAL.y;
    float _204 = _201 * NORMAL.z;
    float _208 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _209 = _208 * TANGENT.x;
    float _210 = _208 * TANGENT.y;
    float _211 = _208 * TANGENT.z;
    float _216;
    float _217;
    float _218;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _216 = (-0.0) - _202;
        _217 = (-0.0) - _203;
        _218 = (-0.0) - _204;
    }
    else
    {
        _216 = _202;
        _217 = _203;
        _218 = _204;
    }
    vec4 _244 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _250 = _244.w;
    float _251 = _244.x * cbMtdParam._m0[9u].x;
    float _252 = _244.y * cbMtdParam._m0[9u].y;
    float _253 = _244.z * cbMtdParam._m0[9u].z;
    vec4 _271 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _275 = _271.z;
    float _279 = (_271.x * 2.0) + (-1.0);
    float _281 = (_271.y * 2.0) + (-1.0);
    float _282 = dot(vec2(_279, _281), vec2(_279, _281));
    float _3368 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    float _288 = sqrt(1.0 - (isnan(1.0) ? _3368 : (isnan(_3368) ? 1.0 : min(_3368, 1.0))));
    float _291 = fma(_288, _216, fma(_281, _209, _279 * _195));
    float _294 = fma(_288, _217, fma(_281, _210, _279 * _196));
    float _297 = fma(_288, _218, fma(_281, _211, _279 * _197));
    float _301 = inversesqrt(dot(vec3(_291, _294, _297), vec3(_291, _294, _297)));
    float _330 = (cbMtdParam._m0[12u].x + dot(vec4(_301 * _291, _301 * _294, _301 * _297, 0.0), vec4(cbMtdParam._m0[13u].xyz, 0.0))) - (texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w)).x * cbMtdParam._m0[12u].y);
    float _3379 = isnan(0.0) ? _330 : (isnan(_330) ? 0.0 : max(_330, 0.0));
    float _331 = isnan(1.0) ? _3379 : (isnan(_3379) ? 1.0 : min(_3379, 1.0));
    float _338 = (_331 * (cbMtdParam._m0[10u].x - _251)) + _251;
    float _339 = (_331 * (cbMtdParam._m0[10u].y - _252)) + _252;
    float _340 = (_331 * (cbMtdParam._m0[10u].z - _253)) + _253;
    vec4 _352 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _359 = (_352.x * 2.0) + (-1.0);
    float _360 = (_352.y * 2.0) + (-1.0);
    float _361 = dot(vec2(_359, _360), vec2(_359, _360));
    float _3390 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
    float _369 = ((_352.z - _275) * _331) + _275;
    float _381 = (((_359 - _279) + (cbMtdParam._m0[12u].w * _279)) * _331) + _279;
    float _382 = (((_360 - _281) + (cbMtdParam._m0[12u].w * _281)) * _331) + _281;
    float _383 = ((sqrt(1.0 - (isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0)))) - _288) * _331) + _288;
    float _386 = fma(_383, _216, fma(_382, _209, _381 * _195));
    float _389 = fma(_383, _217, fma(_382, _210, _381 * _196));
    float _392 = fma(_383, _218, fma(_382, _211, _381 * _197));
    float _396 = inversesqrt(dot(vec3(_386, _389, _392), vec3(_386, _389, _392)));
    float _397 = _396 * _386;
    float _398 = _396 * _389;
    float _399 = _396 * _392;
    float _3401 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _400 = isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0));
    float _3412 = isnan(0.0) ? _338 : (isnan(_338) ? 0.0 : max(_338, 0.0));
    float _3423 = isnan(0.0) ? _339 : (isnan(_339) ? 0.0 : max(_339, 0.0));
    float _3434 = isnan(0.0) ? _340 : (isnan(_340) ? 0.0 : max(_340, 0.0));
    float _419 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _461 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _471 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _461);
    float _472 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _461);
    float _473 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _461);
    float _477 = inversesqrt(dot(vec3(_471, _472, _473), vec3(_471, _472, _473)));
    float _478 = _471 * _477;
    float _479 = _472 * _477;
    float _480 = _473 * _477;
    vec4 _485 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _487 = _485.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _644 = sqrt(((_471 * _471) + (_472 * _472)) + (_473 * _473));
        float _650 = (cbMatDynParam._m0[5u].x * _644) + cbMatDynParam._m0[5u].y;
        float _3445 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
        float _651 = isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0));
        float _655 = (cbMatDynParam._m0[5u].z * _644) + cbMatDynParam._m0[5u].w;
        float _3456 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0))) - _651)) + _651) < ((_487 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _499 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _500 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _520 = fma(_399, cbSceneParam._m0[5u].z, fma(_398, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _397));
    float _523 = fma(_399, cbSceneParam._m0[6u].z, fma(_398, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _397));
    float _526 = fma(_399, cbSceneParam._m0[7u].z, fma(_398, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _397));
    uint _539 = uint(roundEven(NORMAL.w)) * 13u;
    uint _540 = _539 + 9u;
    uint _541 = _540 + uint(cbMatDynParam._m0[0u].w);
    float _547 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0)))) * cbInstanceData._m0[_541].x;
    float _548 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0)))) * cbInstanceData._m0[_541].y;
    float _549 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0)))) * cbInstanceData._m0[_541].z;
    float _3467 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _550 = isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0));
    float _3478 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _551 = isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0));
    float _3489 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _552 = isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0));
    vec4 _561 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _499, cbSceneParam._m0[86u].y * _500));
    float _564 = _561.x * TEXCOORD_3.w;
    float _565 = dot(vec3(_397, _398, _399), vec3(_478, _479, _480));
    float _568 = _565 * 2.0;
    float _572 = (_568 * _397) - _478;
    float _573 = (_568 * _398) - _479;
    float _574 = (_568 * _399) - _480;
    float _578 = abs(dot(vec3(_478, _479, _480), vec3(_397, _398, _399)));
    float _3500 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _580 = sqrt(_400);
    float _593 = exp2((_580 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_580 * 3.0));
    float _625 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _629 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _633 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _964;
    float _966;
    float _967;
    float _968;
    float _969;
    float _970;
    float _971;
    float _972;
    float _973;
    float _974;
    float _975;
    float _976;
    float _977;
    float _978;
    float _979;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _689 = fma(_633, cbModelParam._m0[26u].z, fma(_629, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _625));
        float _693 = fma(_633, cbModelParam._m0[27u].z, fma(_629, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _625));
        float _697 = fma(_633, cbModelParam._m0[28u].z, fma(_629, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _625));
        float _722 = _625 + _397;
        float _723 = _629 + _398;
        float _724 = _633 + _399;
        float _734 = fma(_724, cbModelParam._m0[26u].z, fma(_723, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _722)) - _689;
        float _735 = fma(_724, cbModelParam._m0[27u].z, fma(_723, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _722)) - _693;
        float _736 = fma(_724, cbModelParam._m0[28u].z, fma(_723, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _722)) - _697;
        float _740 = inversesqrt(dot(vec3(_734, _735, _736), vec3(_734, _735, _736)));
        float _753 = ((_740 * _734) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_689 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _754 = ((_740 * _735) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_693 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _755 = ((_740 * _736) / cbModelParam._m0[34u].z) + ((((((_697 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _758 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_753, _754, _755), 0.0);
        vec4 _765 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_753, _754, _755), 0.0);
        vec4 _772 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_753, _754, _755), 0.0);
        vec4 _779 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_753, _754, _755), 0.0);
        float _792 = exp2((_758.w + (-0.5)) * 20.0) * 2.0;
        float _793 = _792 * (_758.x + (-0.5));
        float _794 = _792 * (_758.y + (-0.5));
        float _795 = _792 * (_758.z + (-0.5));
        float _802 = exp2((_765.w + (-0.5)) * 20.0) * 2.0;
        float _803 = _802 * (_765.x + (-0.5));
        float _804 = _802 * (_765.y + (-0.5));
        float _805 = _802 * (_765.z + (-0.5));
        float _812 = exp2((_772.w + (-0.5)) * 20.0) * 2.0;
        float _813 = _812 * (_772.x + (-0.5));
        float _814 = _812 * (_772.y + (-0.5));
        float _815 = _812 * (_772.z + (-0.5));
        float _822 = exp2((_779.w + (-0.5)) * 20.0) * 2.0;
        float _823 = _822 * (_779.x + (-0.5));
        float _824 = _822 * (_779.y + (-0.5));
        float _825 = _822 * (_779.z + (-0.5));
        float _826 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
        float _827 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
        float _828 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
        float _829 = _793 * 0.5;
        float _830 = _803 * 0.5;
        float _831 = _813 * 0.5;
        float _832 = dot(vec3(_829, _830, _831), vec3(_829, _830, _831));
        float _837 = (_832 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_832);
        float _846 = (dot(vec3(_397, _398, _399), vec3(_837 * _829, _837 * _830, _837 * _831)) + 1.0) * 0.5;
        float _3526 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
        float _856 = sqrt(((_830 * _830) + (_829 * _829)) + (_831 * _831)) / (_826 + 9.9999997473787516355514526367188e-06);
        float _3537 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
        float _857 = isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0));
        float _858 = _857 * 2.0;
        float _862 = (1.0 - _857) / (_857 + 1.0);
        float _3548 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
        float _863 = isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0));
        float _872 = ((((1.0 - _863) * (_858 + 2.0)) * exp2(log2(isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0))) * (_858 + 1.0))) + _863) * _826;
        float _873 = _794 * 0.5;
        float _874 = _804 * 0.5;
        float _875 = _814 * 0.5;
        float _876 = dot(vec3(_873, _874, _875), vec3(_873, _874, _875));
        float _881 = (_876 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_876);
        float _889 = (dot(vec3(_397, _398, _399), vec3(_881 * _873, _881 * _874, _881 * _875)) + 1.0) * 0.5;
        float _3559 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
        float _898 = sqrt(((_874 * _874) + (_873 * _873)) + (_875 * _875)) / (_827 + 9.9999997473787516355514526367188e-06);
        float _3570 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
        float _899 = isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0));
        float _900 = _899 * 2.0;
        float _904 = (1.0 - _899) / (_899 + 1.0);
        float _3581 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
        float _905 = isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0));
        float _914 = ((((1.0 - _905) * (_900 + 2.0)) * exp2(log2(isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0))) * (_900 + 1.0))) + _905) * _827;
        float _915 = _795 * 0.5;
        float _916 = _805 * 0.5;
        float _917 = _815 * 0.5;
        float _918 = dot(vec3(_915, _916, _917), vec3(_915, _916, _917));
        float _923 = (_918 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_918);
        float _931 = (dot(vec3(_397, _398, _399), vec3(_923 * _915, _923 * _916, _923 * _917)) + 1.0) * 0.5;
        float _3592 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        float _940 = sqrt(((_916 * _916) + (_915 * _915)) + (_917 * _917)) / (_828 + 9.9999997473787516355514526367188e-06);
        float _3603 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _941 = isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0));
        float _942 = _941 * 2.0;
        float _946 = (1.0 - _941) / (_941 + 1.0);
        float _3614 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _947 = isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0));
        float _956 = ((((1.0 - _947) * (_942 + 2.0)) * exp2(log2(isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0))) * (_942 + 1.0))) + _947) * _828;
        _964 = _795;
        _966 = _794;
        _967 = _793;
        _968 = _805;
        _969 = _804;
        _970 = _803;
        _971 = _815;
        _972 = _814;
        _973 = _813;
        _974 = _828;
        _975 = _827;
        _976 = _826;
        _977 = cbModelParam._m0[36u].z * (isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0)));
        _978 = cbModelParam._m0[36u].z * (isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0)));
        _979 = cbModelParam._m0[36u].z * (isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0)));
    }
    else
    {
        _964 = _965;
        _966 = _965;
        _967 = _965;
        _968 = _965;
        _969 = _965;
        _970 = _965;
        _971 = _965;
        _972 = _965;
        _973 = _965;
        _974 = _965;
        _975 = _965;
        _976 = _965;
        _977 = 0.0;
        _978 = 0.0;
        _979 = 0.0;
    }
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1008 = fma(_633, cbModelParam._m0[30u].z, fma(_629, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _625));
        float _1012 = fma(_633, cbModelParam._m0[31u].z, fma(_629, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _625));
        float _1016 = fma(_633, cbModelParam._m0[32u].z, fma(_629, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _625));
        float _1039 = _625 + _397;
        float _1040 = _629 + _398;
        float _1041 = _633 + _399;
        float _1051 = fma(_1041, cbModelParam._m0[30u].z, fma(_1040, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1039)) - _1008;
        float _1052 = fma(_1041, cbModelParam._m0[31u].z, fma(_1040, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1039)) - _1012;
        float _1053 = fma(_1041, cbModelParam._m0[32u].z, fma(_1040, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1039)) - _1016;
        float _1057 = inversesqrt(dot(vec3(_1051, _1052, _1053), vec3(_1051, _1052, _1053)));
        float _1070 = ((_1057 * _1051) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1008 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1071 = ((_1057 * _1052) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1012 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1072 = ((_1057 * _1053) / cbModelParam._m0[35u].z) + ((((((_1016 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1074 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1070, _1071, _1072), 0.0);
        vec4 _1081 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1070, _1071, _1072), 0.0);
        vec4 _1088 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1070, _1071, _1072), 0.0);
        vec4 _1095 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1070, _1071, _1072), 0.0);
        float _1107 = exp2((_1074.w + (-0.5)) * 20.0) * 2.0;
        float _1108 = _1107 * (_1074.x + (-0.5));
        float _1109 = _1107 * (_1074.y + (-0.5));
        float _1110 = _1107 * (_1074.z + (-0.5));
        float _1117 = exp2((_1081.w + (-0.5)) * 20.0) * 2.0;
        float _1118 = _1117 * (_1081.x + (-0.5));
        float _1119 = _1117 * (_1081.y + (-0.5));
        float _1120 = _1117 * (_1081.z + (-0.5));
        float _1127 = exp2((_1088.w + (-0.5)) * 20.0) * 2.0;
        float _1128 = _1127 * (_1088.x + (-0.5));
        float _1129 = _1127 * (_1088.y + (-0.5));
        float _1130 = _1127 * (_1088.z + (-0.5));
        float _1137 = exp2((_1095.w + (-0.5)) * 20.0) * 2.0;
        float _1138 = _1137 * (_1095.x + (-0.5));
        float _1139 = _1137 * (_1095.y + (-0.5));
        float _1140 = _1137 * (_1095.z + (-0.5));
        float _1141 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1142 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1143 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1144 = _1108 * 0.5;
        float _1145 = _1118 * 0.5;
        float _1146 = _1128 * 0.5;
        float _1147 = dot(vec3(_1144, _1145, _1146), vec3(_1144, _1145, _1146));
        float _1152 = (_1147 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1147);
        float _1160 = (dot(vec3(_397, _398, _399), vec3(_1152 * _1144, _1152 * _1145, _1152 * _1146)) + 1.0) * 0.5;
        float _3655 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1169 = sqrt(((_1145 * _1145) + (_1144 * _1144)) + (_1146 * _1146)) / (_1141 + 9.9999997473787516355514526367188e-06);
        float _3666 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1170 = isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0));
        float _1171 = _1170 * 2.0;
        float _1175 = (1.0 - _1170) / (_1170 + 1.0);
        float _3677 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1176 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
        float _1185 = ((((1.0 - _1176) * (_1171 + 2.0)) * exp2(log2(isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0))) * (_1171 + 1.0))) + _1176) * _1141;
        float _1186 = _1109 * 0.5;
        float _1187 = _1119 * 0.5;
        float _1188 = _1129 * 0.5;
        float _1189 = dot(vec3(_1186, _1187, _1188), vec3(_1186, _1187, _1188));
        float _1194 = (_1189 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1189);
        float _1202 = (dot(vec3(_397, _398, _399), vec3(_1194 * _1186, _1194 * _1187, _1194 * _1188)) + 1.0) * 0.5;
        float _3688 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1211 = sqrt(((_1187 * _1187) + (_1186 * _1186)) + (_1188 * _1188)) / (_1142 + 9.9999997473787516355514526367188e-06);
        float _3699 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1212 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
        float _1213 = _1212 * 2.0;
        float _1217 = (1.0 - _1212) / (_1212 + 1.0);
        float _3710 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1218 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
        float _1227 = ((((1.0 - _1218) * (_1213 + 2.0)) * exp2(log2(isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0))) * (_1213 + 1.0))) + _1218) * _1142;
        float _1228 = _1110 * 0.5;
        float _1229 = _1120 * 0.5;
        float _1230 = _1130 * 0.5;
        float _1231 = dot(vec3(_1228, _1229, _1230), vec3(_1228, _1229, _1230));
        float _1236 = (_1231 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1231);
        float _1244 = (dot(vec3(_397, _398, _399), vec3(_1236 * _1228, _1236 * _1229, _1236 * _1230)) + 1.0) * 0.5;
        float _3721 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1253 = sqrt(((_1229 * _1229) + (_1228 * _1228)) + (_1230 * _1230)) / (_1143 + 9.9999997473787516355514526367188e-06);
        float _3732 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1254 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
        float _1255 = _1254 * 2.0;
        float _1259 = (1.0 - _1254) / (_1254 + 1.0);
        float _3743 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1260 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
        float _1269 = ((((1.0 - _1260) * (_1255 + 2.0)) * exp2(log2(isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0))) * (_1255 + 1.0))) + _1260) * _1143;
        _1277 = _1110;
        _1278 = _1109;
        _1279 = _1108;
        _1280 = _1120;
        _1281 = _1119;
        _1282 = _1118;
        _1283 = _1130;
        _1284 = _1129;
        _1285 = _1128;
        _1286 = _1143;
        _1287 = _1142;
        _1288 = _1141;
        _1289 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0)));
        _1290 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0)));
        _1291 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0)));
    }
    else
    {
        _1277 = _965;
        _1278 = _965;
        _1279 = _965;
        _1280 = _965;
        _1281 = _965;
        _1282 = _965;
        _1283 = _965;
        _1284 = _965;
        _1285 = _965;
        _1286 = _965;
        _1287 = _965;
        _1288 = _965;
        _1289 = 0.0;
        _1290 = 0.0;
        _1291 = 0.0;
    }
    float _1301 = (cbModelParam._m0[1u].x * (_1289 - _977)) + _977;
    float _1302 = (cbModelParam._m0[1u].x * (_1290 - _978)) + _978;
    float _1303 = (cbModelParam._m0[1u].x * (_1291 - _979)) + _979;
    float _1324 = fma(_1303, cbSceneParam._m0[89u].z, fma(_1302, cbSceneParam._m0[89u].y, _1301 * cbSceneParam._m0[89u].x));
    float _1327 = fma(_1303, cbSceneParam._m0[90u].z, fma(_1302, cbSceneParam._m0[90u].y, _1301 * cbSceneParam._m0[90u].x));
    float _1330 = fma(_1303, cbSceneParam._m0[91u].z, fma(_1302, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1301));
    float _1345 = _572 * 0.5;
    float _1346 = _573 * 0.5;
    float _1347 = _574 * 0.5;
    float _1348 = dot(vec4(_1345, _1346, _1347, 1.0), vec4(_1279, _1282, _1285, _1288));
    float _1351 = dot(vec4(_1345, _1346, _1347, 1.0), vec4(_1278, _1281, _1284, _1287));
    float _1354 = dot(vec4(_1345, _1346, _1347, 1.0), vec4(_1277, _1280, _1283, _1286));
    float _1388;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1361 = dot(vec4(_1345, _1346, _1347, 1.0), vec4(_964, _968, _971, _974));
        float _1365 = dot(vec4(_1345, _1346, _1347, 1.0), vec4(_966, _969, _972, _975));
        float _1369 = dot(vec4(_1345, _1346, _1347, 1.0), vec4(_967, _970, _973, _976));
        float _1376 = dot(vec4(cbModelParam._m0[39u]), vec4(_1345, _1346, _1347, 1.0));
        _1388 = dot(vec3(isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0)), isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0)), isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1376) ? 0.0 : (isnan(0.0) ? _1376 : max(0.0, _1376))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1388 = 1.0;
    }
    float _1399;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1390 = dot(vec4(cbModelParam._m0[40u]), vec4(_1345, _1346, _1347, 1.0));
        _1399 = dot(vec3(isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0)), isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0)), isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1390) ? 0.0 : (isnan(0.0) ? _1390 : max(0.0, _1390))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1399 = 1.0;
    }
    float _1403 = (_1399 * cbModelParam._m0[1u].x) + (_1388 * (1.0 - cbModelParam._m0[1u].x));
    float _1413 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _400);
    float _1414 = isnan(_1413) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1413 : min(cbModelParam._m0[25u].z, _1413));
    float _1495;
    float _1497;
    float _1499;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1462 = fma(_633, cbModelParam._m0[13u].z, fma(_629, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _625)) + cbModelParam._m0[13u].w;
        float _1466 = fma(_633, cbModelParam._m0[14u].z, fma(_629, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _625)) + cbModelParam._m0[14u].w;
        float _1470 = fma(_633, cbModelParam._m0[15u].z, fma(_629, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _625)) + cbModelParam._m0[15u].w;
        float _1473 = fma(_574, cbModelParam._m0[13u].z, fma(_573, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _572));
        float _1476 = fma(_574, cbModelParam._m0[14u].z, fma(_573, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _572));
        float _1479 = fma(_574, cbModelParam._m0[15u].z, fma(_573, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _572));
        float _1507;
        if (_1473 > 0.0)
        {
            _1507 = abs((1.0 - _1462) / _1473);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1473 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1462 + 1.0) / _1473);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1507 = frontier_phi_19_17_ladder;
        }
        float _1732;
        if (_1476 > 0.0)
        {
            _1732 = abs((1.0 - _1466) / _1476);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1476 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1466 + 1.0) / _1476);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1732 = frontier_phi_28_24_ladder;
        }
        float _1978;
        if (_1479 > 0.0)
        {
            _1978 = abs((1.0 - _1470) / _1479);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1479 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1470 + 1.0) / _1479);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1978 = frontier_phi_40_35_ladder;
        }
        float _1980 = isnan(_1732) ? _1507 : (isnan(_1507) ? _1732 : min(_1507, _1732));
        float _1981 = isnan(_1978) ? _1980 : (isnan(_1980) ? _1978 : min(_1980, _1978));
        float _1985 = (_1981 * _1473) + _1462;
        float _1986 = (_1981 * _1476) + _1466;
        float _1987 = (_1981 * _1479) + _1470;
        float _1988 = _1981 * 9.9999997473787516355514526367188e-05;
        float _1990 = (-1.0) - _1988;
        float _1992 = _1988 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1987 > _1992) || ((_1987 < _1990) || ((_1986 > _1992) || ((_1986 < _1990) || ((_1985 < _1990) || (_1985 > _1992))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2111 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1987, cbModelParam._m0[9u].z, fma(_1986, cbModelParam._m0[9u].y, _1985 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1987, cbModelParam._m0[10u].z, fma(_1986, cbModelParam._m0[10u].y, _1985 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1987, cbModelParam._m0[11u].z, fma(_1986, cbModelParam._m0[11u].y, _1985 * cbModelParam._m0[11u].x))), _1414);
            frontier_phi_18_40_ladder = _2111.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2111.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2111.x * cbModelParam._m0[1u].y;
        }
        _1495 = frontier_phi_18_40_ladder_2;
        _1497 = frontier_phi_18_40_ladder_1;
        _1499 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1483 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_572, _573, _574), _1414);
        _1495 = _1483.x * cbModelParam._m0[1u].y;
        _1497 = _1483.y * cbModelParam._m0[1u].y;
        _1499 = _1483.z * cbModelParam._m0[1u].y;
    }
    float _1503 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _400);
    float _1504 = isnan(_1503) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1503 : min(cbModelParam._m0[25u].w, _1503));
    float _1597;
    float _1599;
    float _1601;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1561 = fma(_633, cbModelParam._m0[21u].z, fma(_629, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _625)) + cbModelParam._m0[21u].w;
        float _1565 = fma(_633, cbModelParam._m0[22u].z, fma(_629, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _625)) + cbModelParam._m0[22u].w;
        float _1569 = fma(_633, cbModelParam._m0[23u].z, fma(_629, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _625)) + cbModelParam._m0[23u].w;
        float _1572 = fma(_574, cbModelParam._m0[21u].z, fma(_573, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _572));
        float _1575 = fma(_574, cbModelParam._m0[22u].z, fma(_573, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _572));
        float _1578 = fma(_574, cbModelParam._m0[23u].z, fma(_573, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _572));
        float _1737;
        if (_1572 > 0.0)
        {
            _1737 = abs((1.0 - _1561) / _1572);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1572 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1561 + 1.0) / _1572);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1737 = frontier_phi_30_26_ladder;
        }
        float _2005;
        if (_1575 > 0.0)
        {
            _2005 = abs((1.0 - _1565) / _1575);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1575 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1565 + 1.0) / _1575);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2005 = frontier_phi_42_37_ladder;
        }
        float _2210;
        if (_1578 > 0.0)
        {
            _2210 = abs((1.0 - _1569) / _1578);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1578 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1569 + 1.0) / _1578);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2210 = frontier_phi_51_48_ladder;
        }
        float _2212 = isnan(_2005) ? _1737 : (isnan(_1737) ? _2005 : min(_1737, _2005));
        float _2213 = isnan(_2210) ? _2212 : (isnan(_2212) ? _2210 : min(_2212, _2210));
        float _2217 = (_2213 * _1572) + _1561;
        float _2218 = (_2213 * _1575) + _1565;
        float _2219 = (_2213 * _1578) + _1569;
        float _2220 = _2213 * 9.9999997473787516355514526367188e-05;
        float _2221 = (-1.0) - _2220;
        float _2223 = _2220 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2219 > _2223) || ((_2219 < _2221) || ((_2218 > _2223) || ((_2218 < _2221) || ((_2217 < _2221) || (_2217 > _2223))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2417 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2219, cbModelParam._m0[17u].z, fma(_2218, cbModelParam._m0[17u].y, _2217 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2219, cbModelParam._m0[18u].z, fma(_2218, cbModelParam._m0[18u].y, _2217 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2219, cbModelParam._m0[19u].z, fma(_2218, cbModelParam._m0[19u].y, _2217 * cbModelParam._m0[19u].x))), _1504);
            frontier_phi_27_51_ladder = _2417.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2417.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2417.x * cbModelParam._m0[1u].z;
        }
        _1597 = frontier_phi_27_51_ladder_2;
        _1599 = frontier_phi_27_51_ladder_1;
        _1601 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1581 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_572, _573, _574), _1504);
        _1597 = _1581.x * cbModelParam._m0[1u].z;
        _1599 = _1581.y * cbModelParam._m0[1u].z;
        _1601 = _1581.z * cbModelParam._m0[1u].z;
    }
    float _1613 = ((((1.0 - _593) * ((_580 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_593 * _580)) * _564;
    float _1614 = _1613 * ((cbModelParam._m0[1u].w * (_1597 - _1495)) + _1495);
    float _1615 = _1613 * ((cbModelParam._m0[1u].w * (_1599 - _1497)) + _1497);
    float _1616 = _1613 * ((cbModelParam._m0[1u].w * (_1601 - _1499)) + _1499);
    float _1619 = fma(_1616, cbSceneParam._m0[89u].z, fma(_1615, cbSceneParam._m0[89u].y, _1614 * cbSceneParam._m0[89u].x));
    float _1622 = fma(_1616, cbSceneParam._m0[90u].z, fma(_1615, cbSceneParam._m0[90u].y, _1614 * cbSceneParam._m0[90u].x));
    float _1625 = fma(_1616, cbSceneParam._m0[91u].z, fma(_1615, cbSceneParam._m0[91u].y, _1614 * cbSceneParam._m0[91u].x));
    vec4 _1633 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_499, _500));
    float _1635 = _1633.w;
    float _1647 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1635);
    float _1648 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1635);
    float _1649 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1635);
    uvec4 _1653 = floatBitsToUint(cbInstanceData._m0[_539 + 5u]);
    uint _1655 = _1653.x * 14u;
    uint _1656 = _1655 + 13u;
    float _1663 = _564 + (-1.0);
    float _1668 = (cbLight._m0[_1656].x * _1663) + 1.0;
    float _1669 = (cbLight._m0[_1656].y * _1663) + 1.0;
    float _1670 = (cbLight._m0[_1656].z * _1663) + 1.0;
    float _1671 = (cbLight._m0[_1656].w * _1663) + 1.0;
    uint _1672 = _1655 + 5u;
    float _1678 = isnan(1.0) ? _1669 : (isnan(_1669) ? 1.0 : min(_1669, 1.0));
    uint _1682 = _1655 + 4u;
    float _1691 = isnan(1.0) ? _1668 : (isnan(_1668) ? 1.0 : min(_1668, 1.0));
    uint _1695 = _1655 | 1u;
    float _1706 = dot(vec3(cbLight._m0[_1655].xyz), vec3(_397, _398, _399));
    float _1709 = dot(vec3(cbLight._m0[_1695].xyz), vec3(_397, _398, _399));
    float _3879 = isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0));
    float _3890 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
    float _1714 = (isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0))) * 0.3183098733425140380859375;
    float _1716 = (isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0))) * 0.3183098733425140380859375;
    float _1723 = ((cbLight._m0[_1672].x * _1678) * _1716) + (((cbLight._m0[_1682].x * _1647) * _1691) * _1714);
    float _1724 = ((_1678 * cbLight._m0[_1672].y) * _1716) + (((cbLight._m0[_1682].y * _1648) * _1691) * _1714);
    float _1725 = ((_1678 * cbLight._m0[_1672].z) * _1716) + (((cbLight._m0[_1682].z * _1649) * _1691) * _1714);
    uvec4 _1729 = floatBitsToUint(cbLight._m0[_1655 + 12u]);
    bool _1731 = _1729.x == 0u;
    float _1742;
    float _1744;
    float _1746;
    if (_1731)
    {
        _1742 = _1723;
        _1744 = _1724;
        _1746 = _1725;
    }
    else
    {
        uint _1750 = _1655 + 6u;
        float _1766 = (dot(vec3(cbLight._m0[_1655 + 2u].xyz), vec3(_397, _398, _399)) * 0.5) + 0.5;
        float _1767 = _1766 * _1766;
        float _3901 = isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0));
        float _1768 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
        float _1769 = isnan(1.0) ? _1670 : (isnan(_1670) ? 1.0 : min(_1670, 1.0));
        _1742 = (((cbLight._m0[_1750].x * 0.3183098733425140380859375) * _1768) * _1769) + _1723;
        _1744 = (((cbLight._m0[_1750].y * 0.3183098733425140380859375) * _1768) * _1769) + _1724;
        _1746 = (((cbLight._m0[_1750].z * 0.3183098733425140380859375) * _1768) * _1769) + _1725;
    }
    bool _1749 = _1729.y == 0u;
    float _1787;
    float _1789;
    float _1791;
    if (_1749)
    {
        _1787 = _1742;
        _1789 = _1744;
        _1791 = _1746;
    }
    else
    {
        uint _1949 = _1655 + 7u;
        float _1965 = (dot(vec3(cbLight._m0[_1655 + 3u].xyz), vec3(_397, _398, _399)) * 0.5) + 0.5;
        float _1966 = _1965 * _1965;
        float _3917 = isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0));
        float _1967 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
        float _1968 = isnan(1.0) ? _1671 : (isnan(_1671) ? 1.0 : min(_1671, 1.0));
        _1787 = (((cbLight._m0[_1949].x * 0.3183098733425140380859375) * _1967) * _1968) + _1742;
        _1789 = (((cbLight._m0[_1949].y * 0.3183098733425140380859375) * _1967) * _1968) + _1744;
        _1791 = (((cbLight._m0[_1949].z * 0.3183098733425140380859375) * _1967) * _1968) + _1746;
    }
    uint _1794 = _1655 + 8u;
    float _1807 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1655].w)) * _400) * 0.949999988079071044921875);
    float _1808 = _1807 * _1807;
    float _1809 = cbLight._m0[_1655].x + _478;
    float _1810 = cbLight._m0[_1655].y + _479;
    float _1811 = cbLight._m0[_1655].z + _480;
    float _1815 = inversesqrt(dot(vec3(_1809, _1810, _1811), vec3(_1809, _1810, _1811)));
    float _1816 = _1815 * _1809;
    float _1817 = _1815 * _1810;
    float _1818 = _1815 * _1811;
    float _1819 = dot(vec3(_397, _398, _399), vec3(cbLight._m0[_1655].xyz));
    float _3933 = isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0));
    float _1822 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
    float _3944 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _1823 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
    float _1824 = dot(vec3(_397, _398, _399), vec3(_1816, _1817, _1818));
    float _3955 = isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0));
    float _1827 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
    float _1828 = dot(vec3(cbLight._m0[_1655].xyz), vec3(_1816, _1817, _1818));
    float _3966 = isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0));
    float _1832 = _1808 * _1808;
    float _1836 = ((_1827 * _1827) * (_1832 + (-1.0))) + 1.0;
    float _1847 = (exp2(log2(1.0 - (isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1848 = 1.0 - _1808;
    float _1859 = (0.5 / (((_1823 * ((_1822 * _1848) + _1808)) + 9.9999999392252902907785028219223e-09) + (((_1823 * _1848) + _1808) * _1822))) * _1822;
    float _3977 = isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0));
    float _1861 = (isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0))) * (_1832 / ((_1836 * _1836) * 3.141590118408203125));
    uint _1875 = _1655 + 9u;
    float _1886 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1695].w)) * _400) * 0.949999988079071044921875);
    float _1887 = _1886 * _1886;
    float _1888 = cbLight._m0[_1695].x + _478;
    float _1889 = cbLight._m0[_1695].y + _479;
    float _1890 = cbLight._m0[_1695].z + _480;
    float _1894 = inversesqrt(dot(vec3(_1888, _1889, _1890), vec3(_1888, _1889, _1890)));
    float _1895 = _1894 * _1888;
    float _1896 = _1894 * _1889;
    float _1897 = _1894 * _1890;
    float _1898 = dot(vec3(_397, _398, _399), vec3(cbLight._m0[_1695].xyz));
    float _3988 = isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0));
    float _1901 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
    float _1902 = dot(vec3(_397, _398, _399), vec3(_1895, _1896, _1897));
    float _3999 = isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0));
    float _1905 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
    float _1906 = dot(vec3(cbLight._m0[_1695].xyz), vec3(_1895, _1896, _1897));
    float _4010 = isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0));
    float _1910 = _1887 * _1887;
    float _1914 = ((_1905 * _1905) * (_1910 + (-1.0))) + 1.0;
    float _1923 = (exp2(log2(1.0 - (isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1924 = 1.0 - _1887;
    float _1934 = (0.5 / (((_1823 * ((_1901 * _1924) + _1887)) + 9.9999999392252902907785028219223e-09) + (((_1823 * _1924) + _1887) * _1901))) * _1901;
    float _4021 = isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0));
    float _1936 = (isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0))) * (_1910 / ((_1914 * _1914) * 3.141590118408203125));
    float _1946 = (((_1923 * cbLight._m0[_1875].x) * _1936) * _1678) + ((((cbLight._m0[_1794].x * _1647) * _1847) * _1861) * _1691);
    float _1947 = (((_1923 * cbLight._m0[_1875].y) * _1936) * _1678) + ((((cbLight._m0[_1794].y * _1648) * _1847) * _1861) * _1691);
    float _1948 = (((_1923 * cbLight._m0[_1875].z) * _1936) * _1678) + ((((cbLight._m0[_1794].z * _1649) * _1847) * _1861) * _1691);
    float _2010;
    float _2012;
    float _2014;
    if (_1731)
    {
        _2010 = _1946;
        _2012 = _1947;
        _2014 = _1948;
    }
    else
    {
        uint _2016 = _1655 + 2u;
        uint _2020 = _1655 + 10u;
        float _2034 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2016].w)) * _400) * 0.949999988079071044921875);
        float _2035 = _2034 * _2034;
        float _2036 = cbLight._m0[_2016].x + _478;
        float _2037 = cbLight._m0[_2016].y + _479;
        float _2038 = cbLight._m0[_2016].z + _480;
        float _2042 = inversesqrt(dot(vec3(_2036, _2037, _2038), vec3(_2036, _2037, _2038)));
        float _2043 = _2042 * _2036;
        float _2044 = _2042 * _2037;
        float _2045 = _2042 * _2038;
        float _2046 = dot(vec3(_397, _398, _399), vec3(cbLight._m0[_2016].xyz));
        float _4032 = isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0));
        float _2049 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
        float _2050 = dot(vec3(_397, _398, _399), vec3(_2043, _2044, _2045));
        float _4043 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
        float _2053 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
        float _2054 = dot(vec3(cbLight._m0[_2016].xyz), vec3(_2043, _2044, _2045));
        float _4054 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
        float _2058 = _2035 * _2035;
        float _2062 = ((_2053 * _2053) * (_2058 + (-1.0))) + 1.0;
        float _2071 = (exp2(log2(1.0 - (isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2072 = 1.0 - _2035;
        float _2082 = (0.5 / (((_1823 * ((_2049 * _2072) + _2035)) + 9.9999999392252902907785028219223e-09) + (((_1823 * _2072) + _2035) * _2049))) * _2049;
        float _4065 = isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0));
        float _2084 = (isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0))) * (_2058 / ((_2062 * _2062) * 3.141590118408203125));
        float _2085 = isnan(1.0) ? _1670 : (isnan(_1670) ? 1.0 : min(_1670, 1.0));
        _2010 = (((_2071 * cbLight._m0[_2020].x) * _2084) * _2085) + _1946;
        _2012 = (((_2071 * cbLight._m0[_2020].y) * _2084) * _2085) + _1947;
        _2014 = (((_2071 * cbLight._m0[_2020].z) * _2084) * _2085) + _1948;
    }
    float _2120;
    float _2122;
    float _2124;
    if (_1749)
    {
        _2120 = _2010;
        _2122 = _2012;
        _2124 = _2014;
    }
    else
    {
        uint _2131 = _1655 + 3u;
        uint _2135 = _1655 + 11u;
        float _2149 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2131].w)) * _400) * 0.949999988079071044921875);
        float _2150 = _2149 * _2149;
        float _2151 = cbLight._m0[_2131].x + _478;
        float _2152 = cbLight._m0[_2131].y + _479;
        float _2153 = cbLight._m0[_2131].z + _480;
        float _2157 = inversesqrt(dot(vec3(_2151, _2152, _2153), vec3(_2151, _2152, _2153)));
        float _2158 = _2157 * _2151;
        float _2159 = _2157 * _2152;
        float _2160 = _2157 * _2153;
        float _2161 = dot(vec3(_397, _398, _399), vec3(cbLight._m0[_2131].xyz));
        float _4081 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
        float _2164 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
        float _2165 = dot(vec3(_397, _398, _399), vec3(_2158, _2159, _2160));
        float _4092 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
        float _2168 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
        float _2169 = dot(vec3(cbLight._m0[_2131].xyz), vec3(_2158, _2159, _2160));
        float _4103 = isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0));
        float _2173 = _2150 * _2150;
        float _2177 = ((_2168 * _2168) * (_2173 + (-1.0))) + 1.0;
        float _2186 = (exp2(log2(1.0 - (isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2187 = 1.0 - _2150;
        float _2197 = (0.5 / (((_1823 * ((_2164 * _2187) + _2150)) + 9.9999999392252902907785028219223e-09) + (((_1823 * _2187) + _2150) * _2164))) * _2164;
        float _4114 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
        float _2199 = (isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0))) * (_2173 / ((_2177 * _2177) * 3.141590118408203125));
        float _2200 = isnan(1.0) ? _1671 : (isnan(_1671) ? 1.0 : min(_1671, 1.0));
        _2120 = (((_2186 * cbLight._m0[_2135].x) * _2199) * _2200) + _2010;
        _2122 = (((_2186 * cbLight._m0[_2135].y) * _2199) * _2200) + _2012;
        _2124 = (((_2186 * cbLight._m0[_2135].z) * _2199) * _2200) + _2014;
    }
    float _2334;
    float _2336;
    float _2338;
    float _2340;
    float _2342;
    float _2344;
    if (_1653.y == 0u)
    {
        float _2275 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2276 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2275;
        float _2277 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2275;
        float _2278 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2275;
        uvec4 _2290 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2291 = _2290.x;
        uint _2302 = uint((float(_2290.y) * floor(float(uint(cbSceneParam._m0[85u].y * _500) / _2291))) + floor(float(uint(cbSceneParam._m0[85u].x * _499) / _2291)));
        float _2312 = (log2(_2278 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2313 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
        uint _2316 = uint(isnan(14.0) ? _2313 : (isnan(_2313) ? 14.0 : min(_2313, 14.0)));
        uvec4 _2321 = texelFetch(g_lightClusterGridBuffer, int(((_2316 << 2u) + (_2302 << 6u)) >> 2u));
        uint _2322 = _2321.x;
        uint _2323 = _2290.z;
        float _2422;
        float _2424;
        float _2426;
        float _2428;
        float _2430;
        float _2432;
        if (((((1u << ((_2323 >> 4u) & 15u)) + 4294967295u) & _2322) == 0u) || ((_2323 & 240u) == 0u))
        {
            _2422 = 0.0;
            _2424 = 0.0;
            _2426 = 0.0;
            _2428 = 0.0;
            _2430 = 0.0;
            _2432 = 0.0;
        }
        else
        {
            float _2423;
            float _2425;
            float _2427;
            float _2429;
            float _2431;
            float _2433;
            float _2574 = 0.0;
            float _2575 = 0.0;
            float _2576 = 0.0;
            float _2577 = 0.0;
            float _2578 = 0.0;
            float _2579 = 0.0;
            uint _2580 = 0u;
            uint _2589;
            bool _2590;
            for (;;)
            {
                _2589 = texelFetch(g_lightClassification, int((((_2316 << 5u) + (_2302 << 9u)) + (_2580 << 2u)) >> 2u)).x;
                _2590 = _2589 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2590)
                {
                    frontier_phi_68_pred = _2576;
                    frontier_phi_68_pred_1 = _2579;
                    frontier_phi_68_pred_2 = _2578;
                    frontier_phi_68_pred_3 = _2577;
                    frontier_phi_68_pred_4 = _2575;
                    frontier_phi_68_pred_5 = _2574;
                }
                else
                {
                    float _2719;
                    float _2720;
                    float _2721;
                    float _2722;
                    float _2723;
                    float _2724;
                    uint _2725;
                    _2719 = _2574;
                    _2720 = _2575;
                    _2721 = _2576;
                    _2722 = _2577;
                    _2723 = _2578;
                    _2724 = _2579;
                    _2725 = _2589;
                    float _2646;
                    float _2647;
                    float _2648;
                    float _2649;
                    float _2650;
                    float _2651;
                    for (;;)
                    {
                        uint _2729 = uint(findLSB(_2725)) + (_2580 << 5u);
                        uint _2726 = (_2725 + 4294967295u) & _2725;
                        uint _2731 = _2729 * 48u;
                        vec4 _2745 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2731)).x, texelFetch(g_PointLightRenderingBuffer, int(_2731 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2731 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2731 + 3u)).x));
                        uint _2751 = (_2729 * 48u) + 4u;
                        vec4 _2764 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2751)).x, texelFetch(g_PointLightRenderingBuffer, int(_2751 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2751 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2751 + 3u)).x));
                        uint _2770 = (_2729 * 48u) + 8u;
                        vec3 _2781 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2770)).x, texelFetch(g_PointLightRenderingBuffer, int(_2770 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2770 + 2u)).x));
                        float _2785 = _2745.x - _2276;
                        float _2786 = _2745.y - _2277;
                        float _2787 = _2745.z - _2278;
                        float _2788 = dot(vec3(_2785, _2786, _2787), vec3(_2785, _2786, _2787));
                        float _2791 = inversesqrt(_2788);
                        float _2792 = _2791 * _2785;
                        float _2793 = _2791 * _2786;
                        float _2794 = _2791 * _2787;
                        float _2795 = dot(vec3(_520, _523, _526), vec3(_2792, _2793, _2794));
                        float _2800 = 1.0 - (_2788 * _2745.w);
                        float _4140 = isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0));
                        float _2801 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
                        float _2802 = sqrt(_2788) * _2764.w;
                        float _2805 = 1.39999997615814208984375 / (_2802 + 1.39999997615814208984375);
                        float _2806 = _2805 * _2805;
                        float _2809 = ((1.0 - _2806) * _2795) + _2806;
                        float _2812 = _2802 * _2802;
                        float _2816 = ((isnan(0.0) ? _2809 : (isnan(_2809) ? 0.0 : max(_2809, 0.0))) * _2801) / ((_2812 * 0.699999988079071044921875) + 1.0);
                        float _2820 = (-0.0) - _2276;
                        float _2821 = (-0.0) - _2277;
                        float _2822 = (-0.0) - _2278;
                        float _2826 = inversesqrt(dot(vec3(_2820, _2821, _2822), vec3(_2820, _2821, _2822)));
                        float _2827 = _2826 * _2820;
                        float _2828 = _2826 * _2821;
                        float _2829 = _2826 * _2822;
                        float _2837 = exp2(log2(1.0 / ((_2812 * 3.5) + 5.0)) * 0.25);
                        float _2838 = 1.0 - _580;
                        float _2845 = sqrt(1.0 - ((1.0 - (_2838 * _2838)) * (1.0 - (_2837 * _2837))));
                        float _2846 = _2845 * _2845;
                        float _2847 = _2846 * _2846;
                        float _2848 = _2827 + _2792;
                        float _2849 = _2828 + _2793;
                        float _2850 = _2829 + _2794;
                        float _2854 = inversesqrt(dot(vec3(_2848, _2849, _2850), vec3(_2848, _2849, _2850)));
                        float _2858 = dot(vec3(_520, _523, _526), vec3(_2827, _2828, _2829));
                        float _4156 = isnan(0.0) ? _2858 : (isnan(_2858) ? 0.0 : max(_2858, 0.0));
                        float _2861 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
                        float _2862 = dot(vec3(_520, _523, _526), vec3(_2854 * _2848, _2854 * _2849, _2854 * _2850));
                        float _4167 = isnan(0.0) ? _2862 : (isnan(_2862) ? 0.0 : max(_2862, 0.0));
                        float _2865 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
                        float _2869 = ((_2865 * _2865) * (_2847 + (-1.0))) + 1.0;
                        float _2870 = _2805 * _2846;
                        float _2871 = _2870 * _2870;
                        float _2874 = ((1.0 - _2871) * _2795) + _2871;
                        float _4178 = isnan(0.0) ? _2874 : (isnan(_2874) ? 0.0 : max(_2874, 0.0));
                        float _2875 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
                        float _2876 = 1.0 - _2846;
                        float _2886 = (0.5 / (((_2875 * ((_2861 * _2876) + _2846)) + 9.9999999392252902907785028219223e-09) + (((_2875 * _2876) + _2846) * _2861))) * _2875;
                        float _4189 = isnan(0.0) ? _2886 : (isnan(_2886) ? 0.0 : max(_2886, 0.0));
                        float _2897 = (((_2847 * 3.1415927410125732421875) * (isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0)))) / ((_2869 * _2869) * ((_2812 * 2.1991131305694580078125) + 3.141590118408203125))) * _2801;
                        _2649 = (_2816 * _2764.x) + _2722;
                        _2650 = (_2816 * _2764.y) + _2723;
                        _2651 = (_2816 * _2764.z) + _2724;
                        _2646 = (_2897 * _2781.x) + _2719;
                        _2647 = (_2897 * _2781.y) + _2720;
                        _2648 = (_2897 * _2781.z) + _2721;
                        if (_2726 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2719 = _2646;
                            _2720 = _2647;
                            _2721 = _2648;
                            _2722 = _2649;
                            _2723 = _2650;
                            _2724 = _2651;
                            _2725 = _2726;
                        }
                    }
                    frontier_phi_68_pred = _2648;
                    frontier_phi_68_pred_1 = _2651;
                    frontier_phi_68_pred_2 = _2650;
                    frontier_phi_68_pred_3 = _2649;
                    frontier_phi_68_pred_4 = _2647;
                    frontier_phi_68_pred_5 = _2646;
                }
                _2427 = frontier_phi_68_pred;
                _2433 = frontier_phi_68_pred_1;
                _2431 = frontier_phi_68_pred_2;
                _2429 = frontier_phi_68_pred_3;
                _2425 = frontier_phi_68_pred_4;
                _2423 = frontier_phi_68_pred_5;
                uint _2581 = _2580 + 1u;
                if (_2581 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2574 = _2423;
                    _2575 = _2425;
                    _2576 = _2427;
                    _2577 = _2429;
                    _2578 = _2431;
                    _2579 = _2433;
                    _2580 = _2581;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2422 = _2423;
            _2424 = _2425;
            _2426 = _2427;
            _2428 = _2429;
            _2430 = _2431;
            _2432 = _2433;
        }
        uvec4 _2436 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2437 = _2436.z;
        uint _2439 = (_2437 >> 8u) & 15u;
        float _2542;
        float _2544;
        float _2546;
        float _2548;
        float _2550;
        float _2552;
        if (((4294967295u << _2439) & _2322) == 0u)
        {
            _2542 = _2422;
            _2544 = _2424;
            _2546 = _2426;
            _2548 = _2428;
            _2550 = _2430;
            _2552 = _2432;
        }
        else
        {
            float _2567 = inversesqrt(dot(vec3(_2276, _2277, _2278), vec3(_2276, _2277, _2278)));
            float _2568 = _2567 * _2276;
            float _2569 = _2567 * _2277;
            float _2570 = _2567 * _2278;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2439 < ((_2437 >> 12u) & 15u))
            {
                float _2543;
                float _2545;
                float _2547;
                float _2549;
                float _2551;
                float _2553;
                float _2702 = _2422;
                float _2703 = _2424;
                float _2704 = _2426;
                float _2705 = _2428;
                float _2706 = _2430;
                float _2707 = _2432;
                uint _2708 = _2439;
                uint _2717;
                bool _2718;
                for (;;)
                {
                    _2717 = texelFetch(g_lightClassification, int((((_2316 << 5u) + (_2302 << 9u)) + (_2708 << 2u)) >> 2u)).x;
                    _2718 = _2717 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2718)
                    {
                        frontier_phi_79_pred = _2707;
                        frontier_phi_79_pred_1 = _2706;
                        frontier_phi_79_pred_2 = _2705;
                        frontier_phi_79_pred_3 = _2704;
                        frontier_phi_79_pred_4 = _2703;
                        frontier_phi_79_pred_5 = _2702;
                    }
                    else
                    {
                        float _2911;
                        float _2912;
                        float _2913;
                        float _2914;
                        float _2915;
                        float _2916;
                        float _3207;
                        float _3208;
                        float _3209;
                        float _3210;
                        float _3211;
                        float _3212;
                        float _2924 = _2702;
                        float _2925 = _2703;
                        float _2926 = _2704;
                        float _2927 = _2705;
                        float _2928 = _2706;
                        float _2929 = _2707;
                        uint _2930 = _2717;
                        uint _2931;
                        vec4 _2956;
                        float _2957;
                        vec4 _2972;
                        vec3 _2984;
                        vec4 _3000;
                        vec4 _3016;
                        float _3063;
                        bool _3064;
                        for (;;)
                        {
                            uint _2941 = ((_2708 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2930));
                            _2931 = (_2930 + 4294967295u) & _2930;
                            uint _2943 = _2941 * 40u;
                            _2956 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2943)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2943 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2943 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2943 + 3u)).x));
                            _2957 = _2956.w;
                            uint _2959 = (_2941 * 40u) + 4u;
                            _2972 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2959)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2959 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2959 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2959 + 3u)).x));
                            uint _2974 = (_2941 * 40u) + 8u;
                            _2984 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2974)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2974 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2974 + 2u)).x));
                            uint _2987 = (_2941 * 40u) + 16u;
                            _3000 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2987)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 3u)).x));
                            uint _3003 = (_2941 * 40u) + 20u;
                            _3016 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3003)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3003 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3003 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3003 + 3u)).x));
                            uint _3019 = (_2941 * 40u) + 24u;
                            vec4 _3032 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3019)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3019 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3019 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3019 + 3u)).x));
                            uint _3038 = (_2941 * 40u) + 28u;
                            vec4 _3051 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3038)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3038 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3038 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3038 + 3u)).x));
                            _3063 = fma(_2278, _3051.z, fma(_2277, _3051.y, _3051.x * _2276)) + _3051.w;
                            _3064 = !((fma(_2278, _3032.z, fma(_2277, _3032.y, _3032.x * _2276)) + _3032.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3064)
                            {
                                float _3091 = _2956.x - _2276;
                                float _3092 = _2956.y - _2277;
                                float _3093 = _2956.z - _2278;
                                float _3094 = dot(vec3(_3091, _3092, _3093), vec3(_3091, _3092, _3093));
                                float _3097 = inversesqrt(_3094);
                                float _3098 = _3097 * _3091;
                                float _3099 = _3097 * _3092;
                                float _3100 = _3097 * _3093;
                                float _3104 = 1.0 - (_3094 / (_2957 * _2957));
                                float _4200 = isnan(0.0) ? _3104 : (isnan(_3104) ? 0.0 : max(_3104, 0.0));
                                float _3105 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
                                float _3109 = sqrt(_3094) * _2972.w;
                                float _3111 = 1.39999997615814208984375 / (_3109 + 1.39999997615814208984375);
                                float _3112 = _3111 * _3111;
                                float _3115 = ((1.0 - _3112) * dot(vec3(_3098, _3099, _3100), vec3(_520, _523, _526))) + _3112;
                                float _3118 = _3109 * _3109;
                                float _3122 = (fma(_2278, _3000.z, fma(_2277, _3000.y, _3000.x * _2276)) + _3000.w) / _3063;
                                float _3123 = (fma(_2278, _3016.z, fma(_2277, _3016.y, _3016.x * _2276)) + _3016.w) / _3063;
                                float _3127 = 1.0 - dot(vec2(_3122, _3123), vec2(_3122, _3123));
                                float _4216 = isnan(0.0) ? _3127 : (isnan(_3127) ? 0.0 : max(_3127, 0.0));
                                float _3128 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
                                float _3129 = _3128 * (((isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : max(_3115, 0.0))) * _3105) / ((_3118 * 0.699999988079071044921875) + 1.0));
                                float _3141 = exp2(log2(1.0 / ((_3118 * 3.5) + 5.0)) * 0.25);
                                float _3142 = 1.0 - _580;
                                float _3149 = sqrt(1.0 - ((1.0 - (_3142 * _3142)) * (1.0 - (_3141 * _3141))));
                                float _3150 = _3149 * _3149;
                                float _3151 = _3150 * _3150;
                                float _3152 = _3098 - _2568;
                                float _3153 = _3099 - _2569;
                                float _3154 = _3100 - _2570;
                                float _3158 = inversesqrt(dot(vec3(_3152, _3153, _3154), vec3(_3152, _3153, _3154)));
                                float _3162 = dot(vec3(_520, _523, _526), vec3((-0.0) - _2568, (-0.0) - _2569, (-0.0) - _2570));
                                float _4227 = isnan(0.0) ? _3162 : (isnan(_3162) ? 0.0 : max(_3162, 0.0));
                                float _3165 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
                                float _3166 = dot(vec3(_520, _523, _526), vec3(_3158 * _3152, _3158 * _3153, _3158 * _3154));
                                float _4238 = isnan(0.0) ? _3166 : (isnan(_3166) ? 0.0 : max(_3166, 0.0));
                                float _3169 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
                                float _3173 = ((_3169 * _3169) * (_3151 + (-1.0))) + 1.0;
                                float _3174 = _3111 * _3150;
                                float _3175 = _3174 * _3174;
                                float _3181 = ((1.0 - _3175) * dot(vec3(_520, _523, _526), vec3(_3098, _3099, _3100))) + _3175;
                                float _4249 = isnan(0.0) ? _3181 : (isnan(_3181) ? 0.0 : max(_3181, 0.0));
                                float _3182 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
                                float _3183 = 1.0 - _3150;
                                float _3193 = (0.5 / (((_3182 * ((_3165 * _3183) + _3150)) + 9.9999999392252902907785028219223e-09) + (((_3182 * _3183) + _3150) * _3165))) * _3182;
                                float _4260 = isnan(0.0) ? _3193 : (isnan(_3193) ? 0.0 : max(_3193, 0.0));
                                float _3203 = (_3128 * _3105) * (((_3151 * 3.1415927410125732421875) * (isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0)))) / ((_3173 * _3173) * ((_3118 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3129 * _2972.z;
                                frontier_phi_85_pred_1 = _3129 * _2972.y;
                                frontier_phi_85_pred_2 = _3129 * _2972.x;
                                frontier_phi_85_pred_3 = _3203 * _2984.z;
                                frontier_phi_85_pred_4 = _3203 * _2984.y;
                                frontier_phi_85_pred_5 = _3203 * _2984.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3212 = frontier_phi_85_pred;
                            _3211 = frontier_phi_85_pred_1;
                            _3210 = frontier_phi_85_pred_2;
                            _3209 = frontier_phi_85_pred_3;
                            _3208 = frontier_phi_85_pred_4;
                            _3207 = frontier_phi_85_pred_5;
                            _2914 = _3210 + _2927;
                            _2915 = _3211 + _2928;
                            _2916 = _3212 + _2929;
                            _2911 = _3207 + _2924;
                            _2912 = _3208 + _2925;
                            _2913 = _3209 + _2926;
                            if (_2931 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2924 = _2911;
                                _2925 = _2912;
                                _2926 = _2913;
                                _2927 = _2914;
                                _2928 = _2915;
                                _2929 = _2916;
                                _2930 = _2931;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2916;
                        frontier_phi_79_pred_1 = _2915;
                        frontier_phi_79_pred_2 = _2914;
                        frontier_phi_79_pred_3 = _2913;
                        frontier_phi_79_pred_4 = _2912;
                        frontier_phi_79_pred_5 = _2911;
                    }
                    _2553 = frontier_phi_79_pred;
                    _2551 = frontier_phi_79_pred_1;
                    _2549 = frontier_phi_79_pred_2;
                    _2547 = frontier_phi_79_pred_3;
                    _2545 = frontier_phi_79_pred_4;
                    _2543 = frontier_phi_79_pred_5;
                    uint _2709 = _2708 + 1u;
                    if (_2709 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2702 = _2543;
                        _2703 = _2545;
                        _2704 = _2547;
                        _2705 = _2549;
                        _2706 = _2551;
                        _2707 = _2553;
                        _2708 = _2709;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2549;
                frontier_phi_60_61_ladder_1 = _2553;
                frontier_phi_60_61_ladder_2 = _2551;
                frontier_phi_60_61_ladder_3 = _2547;
                frontier_phi_60_61_ladder_4 = _2545;
                frontier_phi_60_61_ladder_5 = _2543;
            }
            else
            {
                frontier_phi_60_61_ladder = _2428;
                frontier_phi_60_61_ladder_1 = _2432;
                frontier_phi_60_61_ladder_2 = _2430;
                frontier_phi_60_61_ladder_3 = _2426;
                frontier_phi_60_61_ladder_4 = _2424;
                frontier_phi_60_61_ladder_5 = _2422;
            }
            _2542 = frontier_phi_60_61_ladder_5;
            _2544 = frontier_phi_60_61_ladder_4;
            _2546 = frontier_phi_60_61_ladder_3;
            _2548 = frontier_phi_60_61_ladder;
            _2550 = frontier_phi_60_61_ladder_2;
            _2552 = frontier_phi_60_61_ladder_1;
        }
        float _2557 = isnan(1.0) ? _564 : (isnan(_564) ? 1.0 : min(_564, 1.0));
        _2334 = (_2557 * _2548) + _1787;
        _2336 = (_2557 * _2550) + _1789;
        _2338 = (_2557 * _2552) + _1791;
        _2340 = ((_2542 * 0.039999999105930328369140625) * _2557) + _2120;
        _2342 = ((_2544 * 0.039999999105930328369140625) * _2557) + _2122;
        _2344 = ((_2546 * 0.039999999105930328369140625) * _2557) + _2124;
    }
    else
    {
        _2334 = _1787;
        _2336 = _1789;
        _2338 = _1791;
        _2340 = _2120;
        _2342 = _2122;
        _2344 = _2124;
    }
    float _4276 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _4287 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
    float _4298 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    float _2361 = ((isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0))) * (_2334 + ((isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0))) * _564))) + ((_2340 + ((isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0))) * _1403)) * cbPerFrame._m0[3u].x);
    float _2362 = ((isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0))) * (_2336 + ((isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0))) * _564))) + ((_2342 + ((isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0))) * _1403)) * cbPerFrame._m0[3u].x);
    float _2363 = ((isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0))) * (_2338 + ((isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0))) * _564))) + ((_2344 + ((isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0))) * _1403)) * cbPerFrame._m0[3u].x);
    uint _2364 = _539 + 6u;
    float _2372 = _499 / cbSceneParam._m0[86u].x;
    float _2373 = _500 / cbSceneParam._m0[86u].y;
    vec4 _2387 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2372, _2373, (log2((isnan(cbSceneParam._m0[77u].w) ? _419 : (isnan(_419) ? cbSceneParam._m0[77u].w : min(_419, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2389 = _2387.x;
    float _2390 = _2387.y;
    float _2391 = _2387.z;
    float _2392 = _2387.w;
    float _2484;
    float _2486;
    float _2488;
    float _2490;
    if (_419 > cbSceneParam._m0[78u].w)
    {
        float _2447 = isnan(_419) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _419 : min(cbSceneParam._m0[80u].w, _419));
        float _2448 = _2447 / _419;
        float _2459 = _2448 * _471;
        float _2460 = _472 * _2448;
        float _2461 = (-0.0) - _2460;
        float _2462 = _2448 * _473;
        float _2464 = (cbSceneParam._m0[77u].w * _2461) / _2447;
        float _2465 = _2464 + cbSceneParam._m0[79u].w;
        float _2466 = cbSceneParam._m0[79u].w - _2460;
        float _2472 = sqrt(((_2459 * _2459) + (_2460 * _2460)) + (_2462 * _2462));
        float _2475 = (1.0 - (cbSceneParam._m0[77u].w / _2447)) * _2472;
        float _2480 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2482 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2659;
        if (abs((_2461 - _2464) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2659 = ((((_2465 > 0.0) ? exp2(_2480 * _2465) : (2.0 - exp2(_2482 * _2465))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2475;
        }
        else
        {
            float _2603 = 1.0 / cbSceneParam._m0[80u].x;
            float _2604 = isnan(_2466) ? _2465 : (isnan(_2465) ? _2466 : max(_2465, _2466));
            float _2605 = isnan(_2466) ? _2465 : (isnan(_2465) ? _2466 : min(_2465, _2466));
            float _2614 = isnan(0.0) ? _2604 : (isnan(_2604) ? 0.0 : min(_2604, 0.0));
            float _2615 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : min(_2605, 0.0));
            _2659 = ((abs(_2472 / _2461) * cbSceneParam._m0[80u].y) * ((((_2614 - _2615) * 2.0) - ((exp2(_2480 * (isnan(0.0) ? _2604 : (isnan(_2604) ? 0.0 : max(_2604, 0.0)))) - exp2(_2480 * (isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0))))) * _2603)) - ((exp2(_2482 * _2614) - exp2(_2482 * _2615)) * _2603))) + (_2475 * cbSceneParam._m0[80u].z);
        }
        vec4 _2661 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2372, _2373, 1.0), 0.0);
        float _2670 = exp2((_2659 * (-1.44269502162933349609375)) * (1.0 - _2661.w));
        float _2671 = log2(_2670);
        float _2687 = log2(_2392);
        _2484 = (exp2(_2687 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2671 * cbSceneParam._m0[78u].x)) * _2661.x) / cbSceneParam._m0[78u].x)) + _2389;
        _2486 = (exp2(_2687 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2671 * cbSceneParam._m0[78u].y)) * _2661.y) / cbSceneParam._m0[78u].y)) + _2390;
        _2488 = (exp2(_2687 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2671 * cbSceneParam._m0[78u].z)) * _2661.z) / cbSceneParam._m0[78u].z)) + _2391;
        _2490 = _2670 * _2392;
    }
    else
    {
        _2484 = _2389;
        _2486 = _2390;
        _2488 = _2391;
        _2490 = _2392;
    }
    bool _2697;
    vec4 _2500;
    vec4 _2522;
    float _2524;
    float _2528;
    float _2529;
    float _2530;
    float _2531;
    bool _2541;
    for (;;)
    {
        _2500 = cbMatDynParam._m0[0u];
        float _2502 = roundEven(_2500.y);
        bool _2503 = _2502 == 3.0;
        float _2504 = log2(_2490);
        float _2511 = exp2(_2504 * cbSceneParam._m0[78u].x) * _2361;
        float _2512 = exp2(_2504 * cbSceneParam._m0[78u].y) * _2362;
        float _2513 = exp2(_2504 * cbSceneParam._m0[78u].z) * _2363;
        float _2520 = _487 + (-0.5);
        _2522 = cbMtdParam._m0[1u];
        _2524 = _2522.y * _2520;
        float _2527 = (_2502 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2528 = _2527 * (_2503 ? _2511 : (_2511 + (cbSceneParam._m0[72u].w * _2484)));
        _2529 = _2527 * (_2503 ? _2512 : (_2512 + (cbSceneParam._m0[72u].w * _2486)));
        _2530 = _2527 * (_2503 ? _2513 : (_2513 + (cbSceneParam._m0[72u].w * _2488)));
        _2531 = _2520 * 0.999000012874603271484375;
        _2541 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2541)
        {
            if ((cbInstanceData._m0[_539 + 7u].x + _2531) < 0.5)
            {
                _2697 = true;
                break;
            }
        }
        uint _2638 = _540 + uint(_2500.w);
        if ((cbInstanceData._m0[_2638].w < 1.0) && ((cbInstanceData._m0[_2638].w + _2531) < 0.5))
        {
            _2697 = true;
            break;
        }
        if ((_2524 + _250) < _2522.x)
        {
            _2697 = true;
            break;
        }
        _2697 = false;
        break;
    }
    float _2902;
    if (_2697)
    {
        discard_state = true;
        _2902 = 0.0;
    }
    else
    {
        _2902 = cbInstanceData._m0[_2364].w;
    }
    SV_Target.x = _2528;
    SV_Target.y = _2529;
    SV_Target.z = _2530;
    SV_Target.w = _2902;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2364].w;
    discard_exit();
}


