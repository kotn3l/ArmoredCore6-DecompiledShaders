#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _929;
float _3321;
float _3322;
float _3323;
float _3324;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _194 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _201 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _202 = _201 * NORMAL.x;
    float _203 = _201 * NORMAL.y;
    float _204 = _201 * NORMAL.z;
    float _208 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _216;
    float _217;
    float _218;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _216 = (-0.0) - _202;
        _217 = (-0.0) - _203;
        _218 = (-0.0) - _204;
    }
    else
    {
        _216 = _202;
        _217 = _203;
        _218 = _204;
    }
    vec4 _244 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _250 = _244.w;
    float _251 = _244.x * cbMtdParam._m0[9u].x;
    float _252 = _244.y * cbMtdParam._m0[9u].y;
    float _253 = _244.z * cbMtdParam._m0[9u].z;
    vec4 _265 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _269 = _265.z;
    float _273 = (_265.x * 2.0) + (-1.0);
    float _275 = (_265.y * 2.0) + (-1.0);
    float _276 = dot(vec2(_273, _275), vec2(_273, _275));
    float _3333 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _282 = sqrt(1.0 - (isnan(1.0) ? _3333 : (isnan(_3333) ? 1.0 : min(_3333, 1.0))));
    float _294 = (TEXCOORD_3.x - (((1.0 - TEXCOORD_3.x) * 0.00999999977648258209228515625) * cbMtdParam._m0[12u].y)) * (cbMtdParam._m0[12u].z + 1.0);
    float _3344 = isnan(0.0) ? _294 : (isnan(_294) ? 0.0 : max(_294, 0.0));
    float _295 = isnan(1.0) ? _3344 : (isnan(_3344) ? 1.0 : min(_3344, 1.0));
    float _302 = (_295 * (cbMtdParam._m0[10u].x - _251)) + _251;
    float _303 = (_295 * (cbMtdParam._m0[10u].y - _252)) + _252;
    float _304 = (_295 * (cbMtdParam._m0[10u].z - _253)) + _253;
    vec4 _316 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _323 = (_316.x * 2.0) + (-1.0);
    float _324 = (_316.y * 2.0) + (-1.0);
    float _325 = dot(vec2(_323, _324), vec2(_323, _324));
    float _3355 = isnan(0.0) ? _325 : (isnan(_325) ? 0.0 : max(_325, 0.0));
    float _333 = (_295 * (_316.z - _269)) + _269;
    float _345 = (((_323 - _273) + (cbMtdParam._m0[12u].w * _273)) * _295) + _273;
    float _346 = (((_324 - _275) + (cbMtdParam._m0[12u].w * _275)) * _295) + _275;
    float _347 = (_295 * (sqrt(1.0 - (isnan(1.0) ? _3355 : (isnan(_3355) ? 1.0 : min(_3355, 1.0)))) - _282)) + _282;
    float _350 = fma(_347, _216, fma(_346, _208 * TANGENT.x, (_194 * _186) * _345));
    float _353 = fma(_347, _217, fma(_346, _208 * TANGENT.y, (_194 * _187) * _345));
    float _356 = fma(_347, _218, fma(_346, _208 * TANGENT.z, (_194 * _188) * _345));
    float _360 = inversesqrt(dot(vec3(_350, _353, _356), vec3(_350, _353, _356)));
    float _361 = _360 * _350;
    float _362 = _360 * _353;
    float _363 = _360 * _356;
    float _3366 = isnan(0.0) ? _333 : (isnan(_333) ? 0.0 : max(_333, 0.0));
    float _364 = isnan(1.0) ? _3366 : (isnan(_3366) ? 1.0 : min(_3366, 1.0));
    float _3377 = isnan(0.0) ? _302 : (isnan(_302) ? 0.0 : max(_302, 0.0));
    float _3388 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _3399 = isnan(0.0) ? _304 : (isnan(_304) ? 0.0 : max(_304, 0.0));
    float _383 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _425 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _435 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _425);
    float _436 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _425);
    float _437 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _425);
    float _441 = inversesqrt(dot(vec3(_435, _436, _437), vec3(_435, _436, _437)));
    float _442 = _435 * _441;
    float _443 = _436 * _441;
    float _444 = _437 * _441;
    vec4 _449 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _451 = _449.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _609 = sqrt(((_435 * _435) + (_436 * _436)) + (_437 * _437));
        float _615 = (cbMatDynParam._m0[5u].x * _609) + cbMatDynParam._m0[5u].y;
        float _3410 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
        float _616 = isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0));
        float _620 = (cbMatDynParam._m0[5u].z * _609) + cbMatDynParam._m0[5u].w;
        float _3421 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0))) - _616)) + _616) < ((_451 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _463 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _464 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _484 = fma(_363, cbSceneParam._m0[5u].z, fma(_362, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _361));
    float _487 = fma(_363, cbSceneParam._m0[6u].z, fma(_362, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _361));
    float _490 = fma(_363, cbSceneParam._m0[7u].z, fma(_362, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _361));
    uint _503 = uint(roundEven(NORMAL.w)) * 13u;
    uint _505 = _503 + 9u;
    uint _506 = _505 + uint(cbMatDynParam._m0[0u].w);
    float _512 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3377 : (isnan(_3377) ? 1.0 : min(_3377, 1.0)))) * cbInstanceData._m0[_506].x;
    float _513 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3388 : (isnan(_3388) ? 1.0 : min(_3388, 1.0)))) * cbInstanceData._m0[_506].y;
    float _514 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3399 : (isnan(_3399) ? 1.0 : min(_3399, 1.0)))) * cbInstanceData._m0[_506].z;
    float _3432 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _515 = isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0));
    float _3443 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _516 = isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0));
    float _3454 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _517 = isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0));
    vec4 _526 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _463, cbSceneParam._m0[86u].y * _464));
    float _529 = _526.x * TEXCOORD_3.w;
    float _530 = dot(vec3(_361, _362, _363), vec3(_442, _443, _444));
    float _533 = _530 * 2.0;
    float _537 = (_533 * _361) - _442;
    float _538 = (_533 * _362) - _443;
    float _539 = (_533 * _363) - _444;
    float _543 = abs(dot(vec3(_442, _443, _444), vec3(_361, _362, _363)));
    float _3465 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _545 = sqrt(_364);
    float _558 = exp2((_545 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_545 * 3.0));
    float _590 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _594 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _598 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _928;
    float _930;
    float _931;
    float _932;
    float _933;
    float _934;
    float _935;
    float _936;
    float _937;
    float _938;
    float _939;
    float _940;
    float _941;
    float _942;
    float _943;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _653 = fma(_598, cbModelParam._m0[26u].z, fma(_594, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _590));
        float _657 = fma(_598, cbModelParam._m0[27u].z, fma(_594, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _590));
        float _661 = fma(_598, cbModelParam._m0[28u].z, fma(_594, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _590));
        float _686 = _590 + _361;
        float _687 = _594 + _362;
        float _688 = _598 + _363;
        float _698 = fma(_688, cbModelParam._m0[26u].z, fma(_687, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _686)) - _653;
        float _699 = fma(_688, cbModelParam._m0[27u].z, fma(_687, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _686)) - _657;
        float _700 = fma(_688, cbModelParam._m0[28u].z, fma(_687, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _686)) - _661;
        float _704 = inversesqrt(dot(vec3(_698, _699, _700), vec3(_698, _699, _700)));
        float _717 = ((_704 * _698) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_653 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _718 = ((_704 * _699) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_657 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _719 = ((_704 * _700) / cbModelParam._m0[34u].z) + ((((((_661 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _722 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_717, _718, _719), 0.0);
        vec4 _729 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_717, _718, _719), 0.0);
        vec4 _736 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_717, _718, _719), 0.0);
        vec4 _743 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_717, _718, _719), 0.0);
        float _756 = exp2((_722.w + (-0.5)) * 20.0) * 2.0;
        float _757 = _756 * (_722.x + (-0.5));
        float _758 = _756 * (_722.y + (-0.5));
        float _759 = _756 * (_722.z + (-0.5));
        float _766 = exp2((_729.w + (-0.5)) * 20.0) * 2.0;
        float _767 = _766 * (_729.x + (-0.5));
        float _768 = _766 * (_729.y + (-0.5));
        float _769 = _766 * (_729.z + (-0.5));
        float _776 = exp2((_736.w + (-0.5)) * 20.0) * 2.0;
        float _777 = _776 * (_736.x + (-0.5));
        float _778 = _776 * (_736.y + (-0.5));
        float _779 = _776 * (_736.z + (-0.5));
        float _786 = exp2((_743.w + (-0.5)) * 20.0) * 2.0;
        float _787 = _786 * (_743.x + (-0.5));
        float _788 = _786 * (_743.y + (-0.5));
        float _789 = _786 * (_743.z + (-0.5));
        float _790 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
        float _791 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
        float _792 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
        float _793 = _757 * 0.5;
        float _794 = _767 * 0.5;
        float _795 = _777 * 0.5;
        float _796 = dot(vec3(_793, _794, _795), vec3(_793, _794, _795));
        float _801 = (_796 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_796);
        float _810 = (dot(vec3(_361, _362, _363), vec3(_801 * _793, _801 * _794, _801 * _795)) + 1.0) * 0.5;
        float _3491 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
        float _820 = sqrt(((_794 * _794) + (_793 * _793)) + (_795 * _795)) / (_790 + 9.9999997473787516355514526367188e-06);
        float _3502 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
        float _821 = isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0));
        float _822 = _821 * 2.0;
        float _826 = (1.0 - _821) / (_821 + 1.0);
        float _3513 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
        float _827 = isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0));
        float _836 = ((((1.0 - _827) * (_822 + 2.0)) * exp2(log2(isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0))) * (_822 + 1.0))) + _827) * _790;
        float _837 = _758 * 0.5;
        float _838 = _768 * 0.5;
        float _839 = _778 * 0.5;
        float _840 = dot(vec3(_837, _838, _839), vec3(_837, _838, _839));
        float _845 = (_840 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_840);
        float _853 = (dot(vec3(_361, _362, _363), vec3(_845 * _837, _845 * _838, _845 * _839)) + 1.0) * 0.5;
        float _3524 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
        float _862 = sqrt(((_838 * _838) + (_837 * _837)) + (_839 * _839)) / (_791 + 9.9999997473787516355514526367188e-06);
        float _3535 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
        float _863 = isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0));
        float _864 = _863 * 2.0;
        float _868 = (1.0 - _863) / (_863 + 1.0);
        float _3546 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
        float _869 = isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0));
        float _878 = ((((1.0 - _869) * (_864 + 2.0)) * exp2(log2(isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0))) * (_864 + 1.0))) + _869) * _791;
        float _879 = _759 * 0.5;
        float _880 = _769 * 0.5;
        float _881 = _779 * 0.5;
        float _882 = dot(vec3(_879, _880, _881), vec3(_879, _880, _881));
        float _887 = (_882 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_882);
        float _895 = (dot(vec3(_361, _362, _363), vec3(_887 * _879, _887 * _880, _887 * _881)) + 1.0) * 0.5;
        float _3557 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
        float _904 = sqrt(((_880 * _880) + (_879 * _879)) + (_881 * _881)) / (_792 + 9.9999997473787516355514526367188e-06);
        float _3568 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
        float _905 = isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0));
        float _906 = _905 * 2.0;
        float _910 = (1.0 - _905) / (_905 + 1.0);
        float _3579 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
        float _911 = isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0));
        float _920 = ((((1.0 - _911) * (_906 + 2.0)) * exp2(log2(isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0))) * (_906 + 1.0))) + _911) * _792;
        _928 = _759;
        _930 = _758;
        _931 = _757;
        _932 = _769;
        _933 = _768;
        _934 = _767;
        _935 = _779;
        _936 = _778;
        _937 = _777;
        _938 = _792;
        _939 = _791;
        _940 = _790;
        _941 = cbModelParam._m0[36u].z * (isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0)));
        _942 = cbModelParam._m0[36u].z * (isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0)));
        _943 = cbModelParam._m0[36u].z * (isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0)));
    }
    else
    {
        _928 = _929;
        _930 = _929;
        _931 = _929;
        _932 = _929;
        _933 = _929;
        _934 = _929;
        _935 = _929;
        _936 = _929;
        _937 = _929;
        _938 = _929;
        _939 = _929;
        _940 = _929;
        _941 = 0.0;
        _942 = 0.0;
        _943 = 0.0;
    }
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _972 = fma(_598, cbModelParam._m0[30u].z, fma(_594, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _590));
        float _976 = fma(_598, cbModelParam._m0[31u].z, fma(_594, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _590));
        float _980 = fma(_598, cbModelParam._m0[32u].z, fma(_594, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _590));
        float _1003 = _590 + _361;
        float _1004 = _594 + _362;
        float _1005 = _598 + _363;
        float _1015 = fma(_1005, cbModelParam._m0[30u].z, fma(_1004, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1003)) - _972;
        float _1016 = fma(_1005, cbModelParam._m0[31u].z, fma(_1004, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1003)) - _976;
        float _1017 = fma(_1005, cbModelParam._m0[32u].z, fma(_1004, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1003)) - _980;
        float _1021 = inversesqrt(dot(vec3(_1015, _1016, _1017), vec3(_1015, _1016, _1017)));
        float _1034 = ((_1021 * _1015) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_972 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1035 = ((_1021 * _1016) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_976 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1036 = ((_1021 * _1017) / cbModelParam._m0[35u].z) + ((((((_980 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1038 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1034, _1035, _1036), 0.0);
        vec4 _1045 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1034, _1035, _1036), 0.0);
        vec4 _1052 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1034, _1035, _1036), 0.0);
        vec4 _1059 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1034, _1035, _1036), 0.0);
        float _1071 = exp2((_1038.w + (-0.5)) * 20.0) * 2.0;
        float _1072 = _1071 * (_1038.x + (-0.5));
        float _1073 = _1071 * (_1038.y + (-0.5));
        float _1074 = _1071 * (_1038.z + (-0.5));
        float _1081 = exp2((_1045.w + (-0.5)) * 20.0) * 2.0;
        float _1082 = _1081 * (_1045.x + (-0.5));
        float _1083 = _1081 * (_1045.y + (-0.5));
        float _1084 = _1081 * (_1045.z + (-0.5));
        float _1091 = exp2((_1052.w + (-0.5)) * 20.0) * 2.0;
        float _1092 = _1091 * (_1052.x + (-0.5));
        float _1093 = _1091 * (_1052.y + (-0.5));
        float _1094 = _1091 * (_1052.z + (-0.5));
        float _1101 = exp2((_1059.w + (-0.5)) * 20.0) * 2.0;
        float _1102 = _1101 * (_1059.x + (-0.5));
        float _1103 = _1101 * (_1059.y + (-0.5));
        float _1104 = _1101 * (_1059.z + (-0.5));
        float _1105 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1106 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1107 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1108 = _1072 * 0.5;
        float _1109 = _1082 * 0.5;
        float _1110 = _1092 * 0.5;
        float _1111 = dot(vec3(_1108, _1109, _1110), vec3(_1108, _1109, _1110));
        float _1116 = (_1111 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1111);
        float _1124 = (dot(vec3(_361, _362, _363), vec3(_1116 * _1108, _1116 * _1109, _1116 * _1110)) + 1.0) * 0.5;
        float _3620 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1133 = sqrt(((_1109 * _1109) + (_1108 * _1108)) + (_1110 * _1110)) / (_1105 + 9.9999997473787516355514526367188e-06);
        float _3631 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1134 = isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0));
        float _1135 = _1134 * 2.0;
        float _1139 = (1.0 - _1134) / (_1134 + 1.0);
        float _3642 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1140 = isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0));
        float _1149 = ((((1.0 - _1140) * (_1135 + 2.0)) * exp2(log2(isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0))) * (_1135 + 1.0))) + _1140) * _1105;
        float _1150 = _1073 * 0.5;
        float _1151 = _1083 * 0.5;
        float _1152 = _1093 * 0.5;
        float _1153 = dot(vec3(_1150, _1151, _1152), vec3(_1150, _1151, _1152));
        float _1158 = (_1153 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1153);
        float _1166 = (dot(vec3(_361, _362, _363), vec3(_1158 * _1150, _1158 * _1151, _1158 * _1152)) + 1.0) * 0.5;
        float _3653 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1175 = sqrt(((_1151 * _1151) + (_1150 * _1150)) + (_1152 * _1152)) / (_1106 + 9.9999997473787516355514526367188e-06);
        float _3664 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1176 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
        float _1177 = _1176 * 2.0;
        float _1181 = (1.0 - _1176) / (_1176 + 1.0);
        float _3675 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1182 = isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0));
        float _1191 = ((((1.0 - _1182) * (_1177 + 2.0)) * exp2(log2(isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0))) * (_1177 + 1.0))) + _1182) * _1106;
        float _1192 = _1074 * 0.5;
        float _1193 = _1084 * 0.5;
        float _1194 = _1094 * 0.5;
        float _1195 = dot(vec3(_1192, _1193, _1194), vec3(_1192, _1193, _1194));
        float _1200 = (_1195 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1195);
        float _1208 = (dot(vec3(_361, _362, _363), vec3(_1200 * _1192, _1200 * _1193, _1200 * _1194)) + 1.0) * 0.5;
        float _3686 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1217 = sqrt(((_1193 * _1193) + (_1192 * _1192)) + (_1194 * _1194)) / (_1107 + 9.9999997473787516355514526367188e-06);
        float _3697 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1218 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
        float _1219 = _1218 * 2.0;
        float _1223 = (1.0 - _1218) / (_1218 + 1.0);
        float _3708 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1224 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
        float _1233 = ((((1.0 - _1224) * (_1219 + 2.0)) * exp2(log2(isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0))) * (_1219 + 1.0))) + _1224) * _1107;
        _1241 = _1074;
        _1242 = _1073;
        _1243 = _1072;
        _1244 = _1084;
        _1245 = _1083;
        _1246 = _1082;
        _1247 = _1094;
        _1248 = _1093;
        _1249 = _1092;
        _1250 = _1107;
        _1251 = _1106;
        _1252 = _1105;
        _1253 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0)));
        _1254 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0)));
        _1255 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0)));
    }
    else
    {
        _1241 = _929;
        _1242 = _929;
        _1243 = _929;
        _1244 = _929;
        _1245 = _929;
        _1246 = _929;
        _1247 = _929;
        _1248 = _929;
        _1249 = _929;
        _1250 = _929;
        _1251 = _929;
        _1252 = _929;
        _1253 = 0.0;
        _1254 = 0.0;
        _1255 = 0.0;
    }
    float _1265 = (cbModelParam._m0[1u].x * (_1253 - _941)) + _941;
    float _1266 = (cbModelParam._m0[1u].x * (_1254 - _942)) + _942;
    float _1267 = (cbModelParam._m0[1u].x * (_1255 - _943)) + _943;
    float _1288 = fma(_1267, cbSceneParam._m0[89u].z, fma(_1266, cbSceneParam._m0[89u].y, _1265 * cbSceneParam._m0[89u].x));
    float _1291 = fma(_1267, cbSceneParam._m0[90u].z, fma(_1266, cbSceneParam._m0[90u].y, _1265 * cbSceneParam._m0[90u].x));
    float _1294 = fma(_1267, cbSceneParam._m0[91u].z, fma(_1266, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1265));
    float _1309 = _537 * 0.5;
    float _1310 = _538 * 0.5;
    float _1311 = _539 * 0.5;
    float _1312 = dot(vec4(_1309, _1310, _1311, 1.0), vec4(_1243, _1246, _1249, _1252));
    float _1315 = dot(vec4(_1309, _1310, _1311, 1.0), vec4(_1242, _1245, _1248, _1251));
    float _1318 = dot(vec4(_1309, _1310, _1311, 1.0), vec4(_1241, _1244, _1247, _1250));
    float _1352;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1325 = dot(vec4(_1309, _1310, _1311, 1.0), vec4(_928, _932, _935, _938));
        float _1329 = dot(vec4(_1309, _1310, _1311, 1.0), vec4(_930, _933, _936, _939));
        float _1333 = dot(vec4(_1309, _1310, _1311, 1.0), vec4(_931, _934, _937, _940));
        float _1340 = dot(vec4(cbModelParam._m0[39u]), vec4(_1309, _1310, _1311, 1.0));
        _1352 = dot(vec3(isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0)), isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0)), isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1340) ? 0.0 : (isnan(0.0) ? _1340 : max(0.0, _1340))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1352 = 1.0;
    }
    float _1363;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1354 = dot(vec4(cbModelParam._m0[40u]), vec4(_1309, _1310, _1311, 1.0));
        _1363 = dot(vec3(isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0)), isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0)), isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1354) ? 0.0 : (isnan(0.0) ? _1354 : max(0.0, _1354))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1363 = 1.0;
    }
    float _1367 = (_1363 * cbModelParam._m0[1u].x) + (_1352 * (1.0 - cbModelParam._m0[1u].x));
    float _1377 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _364);
    float _1378 = isnan(_1377) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1377 : min(cbModelParam._m0[25u].z, _1377));
    float _1459;
    float _1461;
    float _1463;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1426 = fma(_598, cbModelParam._m0[13u].z, fma(_594, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _590)) + cbModelParam._m0[13u].w;
        float _1430 = fma(_598, cbModelParam._m0[14u].z, fma(_594, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _590)) + cbModelParam._m0[14u].w;
        float _1434 = fma(_598, cbModelParam._m0[15u].z, fma(_594, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _590)) + cbModelParam._m0[15u].w;
        float _1437 = fma(_539, cbModelParam._m0[13u].z, fma(_538, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _537));
        float _1440 = fma(_539, cbModelParam._m0[14u].z, fma(_538, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _537));
        float _1443 = fma(_539, cbModelParam._m0[15u].z, fma(_538, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _537));
        float _1471;
        if (_1437 > 0.0)
        {
            _1471 = abs((1.0 - _1426) / _1437);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1437 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1426 + 1.0) / _1437);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1471 = frontier_phi_19_17_ladder;
        }
        float _1697;
        if (_1440 > 0.0)
        {
            _1697 = abs((1.0 - _1430) / _1440);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1440 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1430 + 1.0) / _1440);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1697 = frontier_phi_28_24_ladder;
        }
        float _1943;
        if (_1443 > 0.0)
        {
            _1943 = abs((1.0 - _1434) / _1443);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1443 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1434 + 1.0) / _1443);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1943 = frontier_phi_40_35_ladder;
        }
        float _1945 = isnan(_1697) ? _1471 : (isnan(_1471) ? _1697 : min(_1471, _1697));
        float _1946 = isnan(_1943) ? _1945 : (isnan(_1945) ? _1943 : min(_1945, _1943));
        float _1950 = (_1946 * _1437) + _1426;
        float _1951 = (_1946 * _1440) + _1430;
        float _1952 = (_1946 * _1443) + _1434;
        float _1953 = _1946 * 9.9999997473787516355514526367188e-05;
        float _1955 = (-1.0) - _1953;
        float _1957 = _1953 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1952 > _1957) || ((_1952 < _1955) || ((_1951 > _1957) || ((_1951 < _1955) || ((_1950 < _1955) || (_1950 > _1957))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2076 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1952, cbModelParam._m0[9u].z, fma(_1951, cbModelParam._m0[9u].y, _1950 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1952, cbModelParam._m0[10u].z, fma(_1951, cbModelParam._m0[10u].y, _1950 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1952, cbModelParam._m0[11u].z, fma(_1951, cbModelParam._m0[11u].y, _1950 * cbModelParam._m0[11u].x))), _1378);
            frontier_phi_18_40_ladder = _2076.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2076.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2076.x * cbModelParam._m0[1u].y;
        }
        _1459 = frontier_phi_18_40_ladder_2;
        _1461 = frontier_phi_18_40_ladder_1;
        _1463 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1447 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_537, _538, _539), _1378);
        _1459 = _1447.x * cbModelParam._m0[1u].y;
        _1461 = _1447.y * cbModelParam._m0[1u].y;
        _1463 = _1447.z * cbModelParam._m0[1u].y;
    }
    float _1467 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _364);
    float _1468 = isnan(_1467) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1467 : min(cbModelParam._m0[25u].w, _1467));
    float _1561;
    float _1563;
    float _1565;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1525 = fma(_598, cbModelParam._m0[21u].z, fma(_594, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _590)) + cbModelParam._m0[21u].w;
        float _1529 = fma(_598, cbModelParam._m0[22u].z, fma(_594, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _590)) + cbModelParam._m0[22u].w;
        float _1533 = fma(_598, cbModelParam._m0[23u].z, fma(_594, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _590)) + cbModelParam._m0[23u].w;
        float _1536 = fma(_539, cbModelParam._m0[21u].z, fma(_538, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _537));
        float _1539 = fma(_539, cbModelParam._m0[22u].z, fma(_538, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _537));
        float _1542 = fma(_539, cbModelParam._m0[23u].z, fma(_538, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _537));
        float _1702;
        if (_1536 > 0.0)
        {
            _1702 = abs((1.0 - _1525) / _1536);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1536 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1525 + 1.0) / _1536);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1702 = frontier_phi_30_26_ladder;
        }
        float _1970;
        if (_1539 > 0.0)
        {
            _1970 = abs((1.0 - _1529) / _1539);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1539 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1529 + 1.0) / _1539);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1970 = frontier_phi_42_37_ladder;
        }
        float _2175;
        if (_1542 > 0.0)
        {
            _2175 = abs((1.0 - _1533) / _1542);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1542 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1533 + 1.0) / _1542);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2175 = frontier_phi_51_48_ladder;
        }
        float _2177 = isnan(_1970) ? _1702 : (isnan(_1702) ? _1970 : min(_1702, _1970));
        float _2178 = isnan(_2175) ? _2177 : (isnan(_2177) ? _2175 : min(_2177, _2175));
        float _2182 = (_2178 * _1536) + _1525;
        float _2183 = (_2178 * _1539) + _1529;
        float _2184 = (_2178 * _1542) + _1533;
        float _2185 = _2178 * 9.9999997473787516355514526367188e-05;
        float _2186 = (-1.0) - _2185;
        float _2188 = _2185 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2184 > _2188) || ((_2184 < _2186) || ((_2183 > _2188) || ((_2183 < _2186) || ((_2182 < _2186) || (_2182 > _2188))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2382 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2184, cbModelParam._m0[17u].z, fma(_2183, cbModelParam._m0[17u].y, _2182 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2184, cbModelParam._m0[18u].z, fma(_2183, cbModelParam._m0[18u].y, _2182 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2184, cbModelParam._m0[19u].z, fma(_2183, cbModelParam._m0[19u].y, _2182 * cbModelParam._m0[19u].x))), _1468);
            frontier_phi_27_51_ladder = _2382.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2382.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2382.x * cbModelParam._m0[1u].z;
        }
        _1561 = frontier_phi_27_51_ladder_2;
        _1563 = frontier_phi_27_51_ladder_1;
        _1565 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1545 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_537, _538, _539), _1468);
        _1561 = _1545.x * cbModelParam._m0[1u].z;
        _1563 = _1545.y * cbModelParam._m0[1u].z;
        _1565 = _1545.z * cbModelParam._m0[1u].z;
    }
    float _1577 = ((((1.0 - _558) * ((_545 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_558 * _545)) * _529;
    float _1578 = _1577 * ((cbModelParam._m0[1u].w * (_1561 - _1459)) + _1459);
    float _1579 = _1577 * ((cbModelParam._m0[1u].w * (_1563 - _1461)) + _1461);
    float _1580 = _1577 * ((cbModelParam._m0[1u].w * (_1565 - _1463)) + _1463);
    float _1583 = fma(_1580, cbSceneParam._m0[89u].z, fma(_1579, cbSceneParam._m0[89u].y, _1578 * cbSceneParam._m0[89u].x));
    float _1586 = fma(_1580, cbSceneParam._m0[90u].z, fma(_1579, cbSceneParam._m0[90u].y, _1578 * cbSceneParam._m0[90u].x));
    float _1589 = fma(_1580, cbSceneParam._m0[91u].z, fma(_1579, cbSceneParam._m0[91u].y, _1578 * cbSceneParam._m0[91u].x));
    vec4 _1597 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_463, _464));
    float _1599 = _1597.w;
    float _1611 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1599);
    float _1612 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1599);
    float _1613 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1599);
    uvec4 _1617 = floatBitsToUint(cbInstanceData._m0[_503 + 5u]);
    uint _1619 = _1617.x * 14u;
    uint _1620 = _1619 + 13u;
    float _1627 = _529 + (-1.0);
    float _1632 = (cbLight._m0[_1620].x * _1627) + 1.0;
    float _1633 = (cbLight._m0[_1620].y * _1627) + 1.0;
    float _1634 = (cbLight._m0[_1620].z * _1627) + 1.0;
    float _1635 = (cbLight._m0[_1620].w * _1627) + 1.0;
    uint _1636 = _1619 + 5u;
    float _1642 = isnan(1.0) ? _1633 : (isnan(_1633) ? 1.0 : min(_1633, 1.0));
    uint _1646 = _1619 + 4u;
    float _1656 = isnan(1.0) ? _1632 : (isnan(_1632) ? 1.0 : min(_1632, 1.0));
    uint _1660 = _1619 | 1u;
    float _1671 = dot(vec3(cbLight._m0[_1619].xyz), vec3(_361, _362, _363));
    float _1674 = dot(vec3(cbLight._m0[_1660].xyz), vec3(_361, _362, _363));
    float _3844 = isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0));
    float _3855 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
    float _1679 = (isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0))) * 0.3183098733425140380859375;
    float _1681 = (isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0))) * 0.3183098733425140380859375;
    float _1688 = ((cbLight._m0[_1636].x * _1642) * _1681) + (((cbLight._m0[_1646].x * _1611) * _1656) * _1679);
    float _1689 = ((_1642 * cbLight._m0[_1636].y) * _1681) + (((cbLight._m0[_1646].y * _1612) * _1656) * _1679);
    float _1690 = ((_1642 * cbLight._m0[_1636].z) * _1681) + (((cbLight._m0[_1646].z * _1613) * _1656) * _1679);
    uvec4 _1694 = floatBitsToUint(cbLight._m0[_1619 + 12u]);
    bool _1696 = _1694.x == 0u;
    float _1707;
    float _1709;
    float _1711;
    if (_1696)
    {
        _1707 = _1688;
        _1709 = _1689;
        _1711 = _1690;
    }
    else
    {
        uint _1715 = _1619 + 6u;
        float _1731 = (dot(vec3(cbLight._m0[_1619 + 2u].xyz), vec3(_361, _362, _363)) * 0.5) + 0.5;
        float _1732 = _1731 * _1731;
        float _3866 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
        float _1733 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
        float _1734 = isnan(1.0) ? _1634 : (isnan(_1634) ? 1.0 : min(_1634, 1.0));
        _1707 = (((cbLight._m0[_1715].x * 0.3183098733425140380859375) * _1733) * _1734) + _1688;
        _1709 = (((cbLight._m0[_1715].y * 0.3183098733425140380859375) * _1733) * _1734) + _1689;
        _1711 = (((cbLight._m0[_1715].z * 0.3183098733425140380859375) * _1733) * _1734) + _1690;
    }
    bool _1714 = _1694.y == 0u;
    float _1752;
    float _1754;
    float _1756;
    if (_1714)
    {
        _1752 = _1707;
        _1754 = _1709;
        _1756 = _1711;
    }
    else
    {
        uint _1914 = _1619 + 7u;
        float _1930 = (dot(vec3(cbLight._m0[_1619 + 3u].xyz), vec3(_361, _362, _363)) * 0.5) + 0.5;
        float _1931 = _1930 * _1930;
        float _3882 = isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0));
        float _1932 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
        float _1933 = isnan(1.0) ? _1635 : (isnan(_1635) ? 1.0 : min(_1635, 1.0));
        _1752 = (((cbLight._m0[_1914].x * 0.3183098733425140380859375) * _1932) * _1933) + _1707;
        _1754 = (((cbLight._m0[_1914].y * 0.3183098733425140380859375) * _1932) * _1933) + _1709;
        _1756 = (((cbLight._m0[_1914].z * 0.3183098733425140380859375) * _1932) * _1933) + _1711;
    }
    uint _1759 = _1619 + 8u;
    float _1772 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1619].w)) * _364) * 0.949999988079071044921875);
    float _1773 = _1772 * _1772;
    float _1774 = cbLight._m0[_1619].x + _442;
    float _1775 = cbLight._m0[_1619].y + _443;
    float _1776 = cbLight._m0[_1619].z + _444;
    float _1780 = inversesqrt(dot(vec3(_1774, _1775, _1776), vec3(_1774, _1775, _1776)));
    float _1781 = _1780 * _1774;
    float _1782 = _1780 * _1775;
    float _1783 = _1780 * _1776;
    float _1784 = dot(vec3(_361, _362, _363), vec3(cbLight._m0[_1619].xyz));
    float _3898 = isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0));
    float _1787 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
    float _3909 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _1788 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
    float _1789 = dot(vec3(_361, _362, _363), vec3(_1781, _1782, _1783));
    float _3920 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
    float _1792 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
    float _1793 = dot(vec3(cbLight._m0[_1619].xyz), vec3(_1781, _1782, _1783));
    float _3931 = isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0));
    float _1797 = _1773 * _1773;
    float _1801 = ((_1792 * _1792) * (_1797 + (-1.0))) + 1.0;
    float _1812 = (exp2(log2(1.0 - (isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1813 = 1.0 - _1773;
    float _1824 = (0.5 / (((_1788 * ((_1787 * _1813) + _1773)) + 9.9999999392252902907785028219223e-09) + (((_1788 * _1813) + _1773) * _1787))) * _1787;
    float _3942 = isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0));
    float _1826 = (isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0))) * (_1797 / ((_1801 * _1801) * 3.141590118408203125));
    uint _1840 = _1619 + 9u;
    float _1851 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1660].w)) * _364) * 0.949999988079071044921875);
    float _1852 = _1851 * _1851;
    float _1853 = cbLight._m0[_1660].x + _442;
    float _1854 = cbLight._m0[_1660].y + _443;
    float _1855 = cbLight._m0[_1660].z + _444;
    float _1859 = inversesqrt(dot(vec3(_1853, _1854, _1855), vec3(_1853, _1854, _1855)));
    float _1860 = _1859 * _1853;
    float _1861 = _1859 * _1854;
    float _1862 = _1859 * _1855;
    float _1863 = dot(vec3(_361, _362, _363), vec3(cbLight._m0[_1660].xyz));
    float _3953 = isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0));
    float _1866 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
    float _1867 = dot(vec3(_361, _362, _363), vec3(_1860, _1861, _1862));
    float _3964 = isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0));
    float _1870 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
    float _1871 = dot(vec3(cbLight._m0[_1660].xyz), vec3(_1860, _1861, _1862));
    float _3975 = isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0));
    float _1875 = _1852 * _1852;
    float _1879 = ((_1870 * _1870) * (_1875 + (-1.0))) + 1.0;
    float _1888 = (exp2(log2(1.0 - (isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1889 = 1.0 - _1852;
    float _1899 = (0.5 / (((_1788 * ((_1866 * _1889) + _1852)) + 9.9999999392252902907785028219223e-09) + (((_1788 * _1889) + _1852) * _1866))) * _1866;
    float _3986 = isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0));
    float _1901 = (isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0))) * (_1875 / ((_1879 * _1879) * 3.141590118408203125));
    float _1911 = (((_1888 * cbLight._m0[_1840].x) * _1901) * _1642) + ((((cbLight._m0[_1759].x * _1611) * _1812) * _1826) * _1656);
    float _1912 = (((_1888 * cbLight._m0[_1840].y) * _1901) * _1642) + ((((cbLight._m0[_1759].y * _1612) * _1812) * _1826) * _1656);
    float _1913 = (((_1888 * cbLight._m0[_1840].z) * _1901) * _1642) + ((((cbLight._m0[_1759].z * _1613) * _1812) * _1826) * _1656);
    float _1975;
    float _1977;
    float _1979;
    if (_1696)
    {
        _1975 = _1911;
        _1977 = _1912;
        _1979 = _1913;
    }
    else
    {
        uint _1981 = _1619 + 2u;
        uint _1985 = _1619 + 10u;
        float _1999 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1981].w)) * _364) * 0.949999988079071044921875);
        float _2000 = _1999 * _1999;
        float _2001 = cbLight._m0[_1981].x + _442;
        float _2002 = cbLight._m0[_1981].y + _443;
        float _2003 = cbLight._m0[_1981].z + _444;
        float _2007 = inversesqrt(dot(vec3(_2001, _2002, _2003), vec3(_2001, _2002, _2003)));
        float _2008 = _2007 * _2001;
        float _2009 = _2007 * _2002;
        float _2010 = _2007 * _2003;
        float _2011 = dot(vec3(_361, _362, _363), vec3(cbLight._m0[_1981].xyz));
        float _3997 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
        float _2014 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
        float _2015 = dot(vec3(_361, _362, _363), vec3(_2008, _2009, _2010));
        float _4008 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
        float _2018 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
        float _2019 = dot(vec3(cbLight._m0[_1981].xyz), vec3(_2008, _2009, _2010));
        float _4019 = isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0));
        float _2023 = _2000 * _2000;
        float _2027 = ((_2018 * _2018) * (_2023 + (-1.0))) + 1.0;
        float _2036 = (exp2(log2(1.0 - (isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2037 = 1.0 - _2000;
        float _2047 = (0.5 / (((_1788 * ((_2014 * _2037) + _2000)) + 9.9999999392252902907785028219223e-09) + (((_1788 * _2037) + _2000) * _2014))) * _2014;
        float _4030 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
        float _2049 = (isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0))) * (_2023 / ((_2027 * _2027) * 3.141590118408203125));
        float _2050 = isnan(1.0) ? _1634 : (isnan(_1634) ? 1.0 : min(_1634, 1.0));
        _1975 = (((_2036 * cbLight._m0[_1985].x) * _2049) * _2050) + _1911;
        _1977 = (((_2036 * cbLight._m0[_1985].y) * _2049) * _2050) + _1912;
        _1979 = (((_2036 * cbLight._m0[_1985].z) * _2049) * _2050) + _1913;
    }
    float _2085;
    float _2087;
    float _2089;
    if (_1714)
    {
        _2085 = _1975;
        _2087 = _1977;
        _2089 = _1979;
    }
    else
    {
        uint _2096 = _1619 + 3u;
        uint _2100 = _1619 + 11u;
        float _2114 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2096].w)) * _364) * 0.949999988079071044921875);
        float _2115 = _2114 * _2114;
        float _2116 = cbLight._m0[_2096].x + _442;
        float _2117 = cbLight._m0[_2096].y + _443;
        float _2118 = cbLight._m0[_2096].z + _444;
        float _2122 = inversesqrt(dot(vec3(_2116, _2117, _2118), vec3(_2116, _2117, _2118)));
        float _2123 = _2122 * _2116;
        float _2124 = _2122 * _2117;
        float _2125 = _2122 * _2118;
        float _2126 = dot(vec3(_361, _362, _363), vec3(cbLight._m0[_2096].xyz));
        float _4046 = isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0));
        float _2129 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
        float _2130 = dot(vec3(_361, _362, _363), vec3(_2123, _2124, _2125));
        float _4057 = isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0));
        float _2133 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
        float _2134 = dot(vec3(cbLight._m0[_2096].xyz), vec3(_2123, _2124, _2125));
        float _4068 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
        float _2138 = _2115 * _2115;
        float _2142 = ((_2133 * _2133) * (_2138 + (-1.0))) + 1.0;
        float _2151 = (exp2(log2(1.0 - (isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2152 = 1.0 - _2115;
        float _2162 = (0.5 / (((_1788 * ((_2129 * _2152) + _2115)) + 9.9999999392252902907785028219223e-09) + (((_1788 * _2152) + _2115) * _2129))) * _2129;
        float _4079 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
        float _2164 = (isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0))) * (_2138 / ((_2142 * _2142) * 3.141590118408203125));
        float _2165 = isnan(1.0) ? _1635 : (isnan(_1635) ? 1.0 : min(_1635, 1.0));
        _2085 = (((_2151 * cbLight._m0[_2100].x) * _2164) * _2165) + _1975;
        _2087 = (((_2151 * cbLight._m0[_2100].y) * _2164) * _2165) + _1977;
        _2089 = (((_2151 * cbLight._m0[_2100].z) * _2164) * _2165) + _1979;
    }
    float _2299;
    float _2301;
    float _2303;
    float _2305;
    float _2307;
    float _2309;
    if (_1617.y == 0u)
    {
        float _2240 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2241 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2240;
        float _2242 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2240;
        float _2243 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2240;
        uvec4 _2255 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2256 = _2255.x;
        uint _2267 = uint((float(_2255.y) * floor(float(uint(cbSceneParam._m0[85u].y * _464) / _2256))) + floor(float(uint(cbSceneParam._m0[85u].x * _463) / _2256)));
        float _2277 = (log2(_2243 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2278 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
        uint _2281 = uint(isnan(14.0) ? _2278 : (isnan(_2278) ? 14.0 : min(_2278, 14.0)));
        uvec4 _2286 = texelFetch(g_lightClusterGridBuffer, int(((_2281 << 2u) + (_2267 << 6u)) >> 2u));
        uint _2287 = _2286.x;
        uint _2288 = _2255.z;
        float _2387;
        float _2389;
        float _2391;
        float _2393;
        float _2395;
        float _2397;
        if (((((1u << ((_2288 >> 4u) & 15u)) + 4294967295u) & _2287) == 0u) || ((_2288 & 240u) == 0u))
        {
            _2387 = 0.0;
            _2389 = 0.0;
            _2391 = 0.0;
            _2393 = 0.0;
            _2395 = 0.0;
            _2397 = 0.0;
        }
        else
        {
            float _2388;
            float _2390;
            float _2392;
            float _2394;
            float _2396;
            float _2398;
            float _2539 = 0.0;
            float _2540 = 0.0;
            float _2541 = 0.0;
            float _2542 = 0.0;
            float _2543 = 0.0;
            float _2544 = 0.0;
            uint _2545 = 0u;
            uint _2554;
            bool _2555;
            for (;;)
            {
                _2554 = texelFetch(g_lightClassification, int((((_2281 << 5u) + (_2267 << 9u)) + (_2545 << 2u)) >> 2u)).x;
                _2555 = _2554 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2555)
                {
                    frontier_phi_68_pred = _2541;
                    frontier_phi_68_pred_1 = _2544;
                    frontier_phi_68_pred_2 = _2543;
                    frontier_phi_68_pred_3 = _2542;
                    frontier_phi_68_pred_4 = _2540;
                    frontier_phi_68_pred_5 = _2539;
                }
                else
                {
                    float _2684;
                    float _2685;
                    float _2686;
                    float _2687;
                    float _2688;
                    float _2689;
                    uint _2690;
                    _2684 = _2539;
                    _2685 = _2540;
                    _2686 = _2541;
                    _2687 = _2542;
                    _2688 = _2543;
                    _2689 = _2544;
                    _2690 = _2554;
                    float _2611;
                    float _2612;
                    float _2613;
                    float _2614;
                    float _2615;
                    float _2616;
                    for (;;)
                    {
                        uint _2694 = uint(findLSB(_2690)) + (_2545 << 5u);
                        uint _2691 = (_2690 + 4294967295u) & _2690;
                        uint _2696 = _2694 * 48u;
                        vec4 _2710 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2696)).x, texelFetch(g_PointLightRenderingBuffer, int(_2696 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2696 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2696 + 3u)).x));
                        uint _2716 = (_2694 * 48u) + 4u;
                        vec4 _2729 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2716)).x, texelFetch(g_PointLightRenderingBuffer, int(_2716 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2716 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2716 + 3u)).x));
                        uint _2735 = (_2694 * 48u) + 8u;
                        vec3 _2746 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2735)).x, texelFetch(g_PointLightRenderingBuffer, int(_2735 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2735 + 2u)).x));
                        float _2750 = _2710.x - _2241;
                        float _2751 = _2710.y - _2242;
                        float _2752 = _2710.z - _2243;
                        float _2753 = dot(vec3(_2750, _2751, _2752), vec3(_2750, _2751, _2752));
                        float _2756 = inversesqrt(_2753);
                        float _2757 = _2756 * _2750;
                        float _2758 = _2756 * _2751;
                        float _2759 = _2756 * _2752;
                        float _2760 = dot(vec3(_484, _487, _490), vec3(_2757, _2758, _2759));
                        float _2765 = 1.0 - (_2753 * _2710.w);
                        float _4105 = isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0));
                        float _2766 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
                        float _2767 = sqrt(_2753) * _2729.w;
                        float _2770 = 1.39999997615814208984375 / (_2767 + 1.39999997615814208984375);
                        float _2771 = _2770 * _2770;
                        float _2774 = ((1.0 - _2771) * _2760) + _2771;
                        float _2777 = _2767 * _2767;
                        float _2781 = ((isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : max(_2774, 0.0))) * _2766) / ((_2777 * 0.699999988079071044921875) + 1.0);
                        float _2785 = (-0.0) - _2241;
                        float _2786 = (-0.0) - _2242;
                        float _2787 = (-0.0) - _2243;
                        float _2791 = inversesqrt(dot(vec3(_2785, _2786, _2787), vec3(_2785, _2786, _2787)));
                        float _2792 = _2791 * _2785;
                        float _2793 = _2791 * _2786;
                        float _2794 = _2791 * _2787;
                        float _2802 = exp2(log2(1.0 / ((_2777 * 3.5) + 5.0)) * 0.25);
                        float _2803 = 1.0 - _545;
                        float _2810 = sqrt(1.0 - ((1.0 - (_2803 * _2803)) * (1.0 - (_2802 * _2802))));
                        float _2811 = _2810 * _2810;
                        float _2812 = _2811 * _2811;
                        float _2813 = _2792 + _2757;
                        float _2814 = _2793 + _2758;
                        float _2815 = _2794 + _2759;
                        float _2819 = inversesqrt(dot(vec3(_2813, _2814, _2815), vec3(_2813, _2814, _2815)));
                        float _2823 = dot(vec3(_484, _487, _490), vec3(_2792, _2793, _2794));
                        float _4121 = isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : max(_2823, 0.0));
                        float _2826 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
                        float _2827 = dot(vec3(_484, _487, _490), vec3(_2819 * _2813, _2819 * _2814, _2819 * _2815));
                        float _4132 = isnan(0.0) ? _2827 : (isnan(_2827) ? 0.0 : max(_2827, 0.0));
                        float _2830 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
                        float _2834 = ((_2830 * _2830) * (_2812 + (-1.0))) + 1.0;
                        float _2835 = _2770 * _2811;
                        float _2836 = _2835 * _2835;
                        float _2839 = ((1.0 - _2836) * _2760) + _2836;
                        float _4143 = isnan(0.0) ? _2839 : (isnan(_2839) ? 0.0 : max(_2839, 0.0));
                        float _2840 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
                        float _2841 = 1.0 - _2811;
                        float _2851 = (0.5 / (((_2840 * ((_2826 * _2841) + _2811)) + 9.9999999392252902907785028219223e-09) + (((_2840 * _2841) + _2811) * _2826))) * _2840;
                        float _4154 = isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : max(_2851, 0.0));
                        float _2862 = (((_2812 * 3.1415927410125732421875) * (isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0)))) / ((_2834 * _2834) * ((_2777 * 2.1991131305694580078125) + 3.141590118408203125))) * _2766;
                        _2614 = (_2781 * _2729.x) + _2687;
                        _2615 = (_2781 * _2729.y) + _2688;
                        _2616 = (_2781 * _2729.z) + _2689;
                        _2611 = (_2862 * _2746.x) + _2684;
                        _2612 = (_2862 * _2746.y) + _2685;
                        _2613 = (_2862 * _2746.z) + _2686;
                        if (_2691 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2684 = _2611;
                            _2685 = _2612;
                            _2686 = _2613;
                            _2687 = _2614;
                            _2688 = _2615;
                            _2689 = _2616;
                            _2690 = _2691;
                        }
                    }
                    frontier_phi_68_pred = _2613;
                    frontier_phi_68_pred_1 = _2616;
                    frontier_phi_68_pred_2 = _2615;
                    frontier_phi_68_pred_3 = _2614;
                    frontier_phi_68_pred_4 = _2612;
                    frontier_phi_68_pred_5 = _2611;
                }
                _2392 = frontier_phi_68_pred;
                _2398 = frontier_phi_68_pred_1;
                _2396 = frontier_phi_68_pred_2;
                _2394 = frontier_phi_68_pred_3;
                _2390 = frontier_phi_68_pred_4;
                _2388 = frontier_phi_68_pred_5;
                uint _2546 = _2545 + 1u;
                if (_2546 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2539 = _2388;
                    _2540 = _2390;
                    _2541 = _2392;
                    _2542 = _2394;
                    _2543 = _2396;
                    _2544 = _2398;
                    _2545 = _2546;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2387 = _2388;
            _2389 = _2390;
            _2391 = _2392;
            _2393 = _2394;
            _2395 = _2396;
            _2397 = _2398;
        }
        uvec4 _2401 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2402 = _2401.z;
        uint _2404 = (_2402 >> 8u) & 15u;
        float _2507;
        float _2509;
        float _2511;
        float _2513;
        float _2515;
        float _2517;
        if (((4294967295u << _2404) & _2287) == 0u)
        {
            _2507 = _2387;
            _2509 = _2389;
            _2511 = _2391;
            _2513 = _2393;
            _2515 = _2395;
            _2517 = _2397;
        }
        else
        {
            float _2532 = inversesqrt(dot(vec3(_2241, _2242, _2243), vec3(_2241, _2242, _2243)));
            float _2533 = _2532 * _2241;
            float _2534 = _2532 * _2242;
            float _2535 = _2532 * _2243;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2404 < ((_2402 >> 12u) & 15u))
            {
                float _2508;
                float _2510;
                float _2512;
                float _2514;
                float _2516;
                float _2518;
                float _2667 = _2387;
                float _2668 = _2389;
                float _2669 = _2391;
                float _2670 = _2393;
                float _2671 = _2395;
                float _2672 = _2397;
                uint _2673 = _2404;
                uint _2682;
                bool _2683;
                for (;;)
                {
                    _2682 = texelFetch(g_lightClassification, int((((_2281 << 5u) + (_2267 << 9u)) + (_2673 << 2u)) >> 2u)).x;
                    _2683 = _2682 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2683)
                    {
                        frontier_phi_79_pred = _2672;
                        frontier_phi_79_pred_1 = _2671;
                        frontier_phi_79_pred_2 = _2670;
                        frontier_phi_79_pred_3 = _2669;
                        frontier_phi_79_pred_4 = _2668;
                        frontier_phi_79_pred_5 = _2667;
                    }
                    else
                    {
                        float _2876;
                        float _2877;
                        float _2878;
                        float _2879;
                        float _2880;
                        float _2881;
                        float _3172;
                        float _3173;
                        float _3174;
                        float _3175;
                        float _3176;
                        float _3177;
                        float _2889 = _2667;
                        float _2890 = _2668;
                        float _2891 = _2669;
                        float _2892 = _2670;
                        float _2893 = _2671;
                        float _2894 = _2672;
                        uint _2895 = _2682;
                        uint _2896;
                        vec4 _2921;
                        float _2922;
                        vec4 _2937;
                        vec3 _2949;
                        vec4 _2965;
                        vec4 _2981;
                        float _3028;
                        bool _3029;
                        for (;;)
                        {
                            uint _2906 = ((_2673 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2895));
                            _2896 = (_2895 + 4294967295u) & _2895;
                            uint _2908 = _2906 * 40u;
                            _2921 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2908)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 3u)).x));
                            _2922 = _2921.w;
                            uint _2924 = (_2906 * 40u) + 4u;
                            _2937 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2924)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2924 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2924 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2924 + 3u)).x));
                            uint _2939 = (_2906 * 40u) + 8u;
                            _2949 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2939)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2939 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2939 + 2u)).x));
                            uint _2952 = (_2906 * 40u) + 16u;
                            _2965 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2952)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2952 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2952 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2952 + 3u)).x));
                            uint _2968 = (_2906 * 40u) + 20u;
                            _2981 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2968)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2968 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2968 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2968 + 3u)).x));
                            uint _2984 = (_2906 * 40u) + 24u;
                            vec4 _2997 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2984)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2984 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2984 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2984 + 3u)).x));
                            uint _3003 = (_2906 * 40u) + 28u;
                            vec4 _3016 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3003)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3003 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3003 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3003 + 3u)).x));
                            _3028 = fma(_2243, _3016.z, fma(_2242, _3016.y, _3016.x * _2241)) + _3016.w;
                            _3029 = !((fma(_2243, _2997.z, fma(_2242, _2997.y, _2997.x * _2241)) + _2997.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3029)
                            {
                                float _3056 = _2921.x - _2241;
                                float _3057 = _2921.y - _2242;
                                float _3058 = _2921.z - _2243;
                                float _3059 = dot(vec3(_3056, _3057, _3058), vec3(_3056, _3057, _3058));
                                float _3062 = inversesqrt(_3059);
                                float _3063 = _3062 * _3056;
                                float _3064 = _3062 * _3057;
                                float _3065 = _3062 * _3058;
                                float _3069 = 1.0 - (_3059 / (_2922 * _2922));
                                float _4165 = isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : max(_3069, 0.0));
                                float _3070 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
                                float _3074 = sqrt(_3059) * _2937.w;
                                float _3076 = 1.39999997615814208984375 / (_3074 + 1.39999997615814208984375);
                                float _3077 = _3076 * _3076;
                                float _3080 = ((1.0 - _3077) * dot(vec3(_3063, _3064, _3065), vec3(_484, _487, _490))) + _3077;
                                float _3083 = _3074 * _3074;
                                float _3087 = (fma(_2243, _2965.z, fma(_2242, _2965.y, _2965.x * _2241)) + _2965.w) / _3028;
                                float _3088 = (fma(_2243, _2981.z, fma(_2242, _2981.y, _2981.x * _2241)) + _2981.w) / _3028;
                                float _3092 = 1.0 - dot(vec2(_3087, _3088), vec2(_3087, _3088));
                                float _4181 = isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : max(_3092, 0.0));
                                float _3093 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
                                float _3094 = _3093 * (((isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : max(_3080, 0.0))) * _3070) / ((_3083 * 0.699999988079071044921875) + 1.0));
                                float _3106 = exp2(log2(1.0 / ((_3083 * 3.5) + 5.0)) * 0.25);
                                float _3107 = 1.0 - _545;
                                float _3114 = sqrt(1.0 - ((1.0 - (_3107 * _3107)) * (1.0 - (_3106 * _3106))));
                                float _3115 = _3114 * _3114;
                                float _3116 = _3115 * _3115;
                                float _3117 = _3063 - _2533;
                                float _3118 = _3064 - _2534;
                                float _3119 = _3065 - _2535;
                                float _3123 = inversesqrt(dot(vec3(_3117, _3118, _3119), vec3(_3117, _3118, _3119)));
                                float _3127 = dot(vec3(_484, _487, _490), vec3((-0.0) - _2533, (-0.0) - _2534, (-0.0) - _2535));
                                float _4192 = isnan(0.0) ? _3127 : (isnan(_3127) ? 0.0 : max(_3127, 0.0));
                                float _3130 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
                                float _3131 = dot(vec3(_484, _487, _490), vec3(_3123 * _3117, _3123 * _3118, _3123 * _3119));
                                float _4203 = isnan(0.0) ? _3131 : (isnan(_3131) ? 0.0 : max(_3131, 0.0));
                                float _3134 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
                                float _3138 = ((_3134 * _3134) * (_3116 + (-1.0))) + 1.0;
                                float _3139 = _3076 * _3115;
                                float _3140 = _3139 * _3139;
                                float _3146 = ((1.0 - _3140) * dot(vec3(_484, _487, _490), vec3(_3063, _3064, _3065))) + _3140;
                                float _4214 = isnan(0.0) ? _3146 : (isnan(_3146) ? 0.0 : max(_3146, 0.0));
                                float _3147 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
                                float _3148 = 1.0 - _3115;
                                float _3158 = (0.5 / (((_3147 * ((_3130 * _3148) + _3115)) + 9.9999999392252902907785028219223e-09) + (((_3147 * _3148) + _3115) * _3130))) * _3147;
                                float _4225 = isnan(0.0) ? _3158 : (isnan(_3158) ? 0.0 : max(_3158, 0.0));
                                float _3168 = (_3093 * _3070) * (((_3116 * 3.1415927410125732421875) * (isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0)))) / ((_3138 * _3138) * ((_3083 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3094 * _2937.z;
                                frontier_phi_85_pred_1 = _3094 * _2937.y;
                                frontier_phi_85_pred_2 = _3094 * _2937.x;
                                frontier_phi_85_pred_3 = _3168 * _2949.z;
                                frontier_phi_85_pred_4 = _3168 * _2949.y;
                                frontier_phi_85_pred_5 = _3168 * _2949.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3177 = frontier_phi_85_pred;
                            _3176 = frontier_phi_85_pred_1;
                            _3175 = frontier_phi_85_pred_2;
                            _3174 = frontier_phi_85_pred_3;
                            _3173 = frontier_phi_85_pred_4;
                            _3172 = frontier_phi_85_pred_5;
                            _2879 = _3175 + _2892;
                            _2880 = _3176 + _2893;
                            _2881 = _3177 + _2894;
                            _2876 = _3172 + _2889;
                            _2877 = _3173 + _2890;
                            _2878 = _3174 + _2891;
                            if (_2896 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2889 = _2876;
                                _2890 = _2877;
                                _2891 = _2878;
                                _2892 = _2879;
                                _2893 = _2880;
                                _2894 = _2881;
                                _2895 = _2896;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2881;
                        frontier_phi_79_pred_1 = _2880;
                        frontier_phi_79_pred_2 = _2879;
                        frontier_phi_79_pred_3 = _2878;
                        frontier_phi_79_pred_4 = _2877;
                        frontier_phi_79_pred_5 = _2876;
                    }
                    _2518 = frontier_phi_79_pred;
                    _2516 = frontier_phi_79_pred_1;
                    _2514 = frontier_phi_79_pred_2;
                    _2512 = frontier_phi_79_pred_3;
                    _2510 = frontier_phi_79_pred_4;
                    _2508 = frontier_phi_79_pred_5;
                    uint _2674 = _2673 + 1u;
                    if (_2674 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2667 = _2508;
                        _2668 = _2510;
                        _2669 = _2512;
                        _2670 = _2514;
                        _2671 = _2516;
                        _2672 = _2518;
                        _2673 = _2674;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2514;
                frontier_phi_60_61_ladder_1 = _2518;
                frontier_phi_60_61_ladder_2 = _2516;
                frontier_phi_60_61_ladder_3 = _2512;
                frontier_phi_60_61_ladder_4 = _2510;
                frontier_phi_60_61_ladder_5 = _2508;
            }
            else
            {
                frontier_phi_60_61_ladder = _2393;
                frontier_phi_60_61_ladder_1 = _2397;
                frontier_phi_60_61_ladder_2 = _2395;
                frontier_phi_60_61_ladder_3 = _2391;
                frontier_phi_60_61_ladder_4 = _2389;
                frontier_phi_60_61_ladder_5 = _2387;
            }
            _2507 = frontier_phi_60_61_ladder_5;
            _2509 = frontier_phi_60_61_ladder_4;
            _2511 = frontier_phi_60_61_ladder_3;
            _2513 = frontier_phi_60_61_ladder;
            _2515 = frontier_phi_60_61_ladder_2;
            _2517 = frontier_phi_60_61_ladder_1;
        }
        float _2522 = isnan(1.0) ? _529 : (isnan(_529) ? 1.0 : min(_529, 1.0));
        _2299 = (_2522 * _2513) + _1752;
        _2301 = (_2522 * _2515) + _1754;
        _2303 = (_2522 * _2517) + _1756;
        _2305 = ((_2507 * 0.039999999105930328369140625) * _2522) + _2085;
        _2307 = ((_2509 * 0.039999999105930328369140625) * _2522) + _2087;
        _2309 = ((_2511 * 0.039999999105930328369140625) * _2522) + _2089;
    }
    else
    {
        _2299 = _1752;
        _2301 = _1754;
        _2303 = _1756;
        _2305 = _2085;
        _2307 = _2087;
        _2309 = _2089;
    }
    float _4241 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _4252 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _4263 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _2326 = ((isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0))) * (_2299 + ((isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0))) * _529))) + ((_2305 + ((isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0))) * _1367)) * cbPerFrame._m0[3u].x);
    float _2327 = ((isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0))) * (_2301 + ((isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0))) * _529))) + ((_2307 + ((isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0))) * _1367)) * cbPerFrame._m0[3u].x);
    float _2328 = ((isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0))) * (_2303 + ((isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0))) * _529))) + ((_2309 + ((isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0))) * _1367)) * cbPerFrame._m0[3u].x);
    uint _2329 = _503 + 6u;
    float _2337 = _463 / cbSceneParam._m0[86u].x;
    float _2338 = _464 / cbSceneParam._m0[86u].y;
    vec4 _2352 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2337, _2338, (log2((isnan(cbSceneParam._m0[77u].w) ? _383 : (isnan(_383) ? cbSceneParam._m0[77u].w : min(_383, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2354 = _2352.x;
    float _2355 = _2352.y;
    float _2356 = _2352.z;
    float _2357 = _2352.w;
    float _2449;
    float _2451;
    float _2453;
    float _2455;
    if (_383 > cbSceneParam._m0[78u].w)
    {
        float _2412 = isnan(_383) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _383 : min(cbSceneParam._m0[80u].w, _383));
        float _2413 = _2412 / _383;
        float _2424 = _2413 * _435;
        float _2425 = _436 * _2413;
        float _2426 = (-0.0) - _2425;
        float _2427 = _2413 * _437;
        float _2429 = (cbSceneParam._m0[77u].w * _2426) / _2412;
        float _2430 = _2429 + cbSceneParam._m0[79u].w;
        float _2431 = cbSceneParam._m0[79u].w - _2425;
        float _2437 = sqrt(((_2424 * _2424) + (_2425 * _2425)) + (_2427 * _2427));
        float _2440 = (1.0 - (cbSceneParam._m0[77u].w / _2412)) * _2437;
        float _2445 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2447 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2624;
        if (abs((_2426 - _2429) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2624 = ((((_2430 > 0.0) ? exp2(_2445 * _2430) : (2.0 - exp2(_2447 * _2430))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2440;
        }
        else
        {
            float _2568 = 1.0 / cbSceneParam._m0[80u].x;
            float _2569 = isnan(_2431) ? _2430 : (isnan(_2430) ? _2431 : max(_2430, _2431));
            float _2570 = isnan(_2431) ? _2430 : (isnan(_2430) ? _2431 : min(_2430, _2431));
            float _2579 = isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : min(_2569, 0.0));
            float _2580 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : min(_2570, 0.0));
            _2624 = ((abs(_2437 / _2426) * cbSceneParam._m0[80u].y) * ((((_2579 - _2580) * 2.0) - ((exp2(_2445 * (isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0)))) - exp2(_2445 * (isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0))))) * _2568)) - ((exp2(_2447 * _2579) - exp2(_2447 * _2580)) * _2568))) + (_2440 * cbSceneParam._m0[80u].z);
        }
        vec4 _2626 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2337, _2338, 1.0), 0.0);
        float _2635 = exp2((_2624 * (-1.44269502162933349609375)) * (1.0 - _2626.w));
        float _2636 = log2(_2635);
        float _2652 = log2(_2357);
        _2449 = (exp2(_2652 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2636 * cbSceneParam._m0[78u].x)) * _2626.x) / cbSceneParam._m0[78u].x)) + _2354;
        _2451 = (exp2(_2652 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2636 * cbSceneParam._m0[78u].y)) * _2626.y) / cbSceneParam._m0[78u].y)) + _2355;
        _2453 = (exp2(_2652 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2636 * cbSceneParam._m0[78u].z)) * _2626.z) / cbSceneParam._m0[78u].z)) + _2356;
        _2455 = _2635 * _2357;
    }
    else
    {
        _2449 = _2354;
        _2451 = _2355;
        _2453 = _2356;
        _2455 = _2357;
    }
    bool _2662;
    vec4 _2465;
    vec4 _2487;
    float _2489;
    float _2493;
    float _2494;
    float _2495;
    float _2496;
    bool _2506;
    for (;;)
    {
        _2465 = cbMatDynParam._m0[0u];
        float _2467 = roundEven(_2465.y);
        bool _2468 = _2467 == 3.0;
        float _2469 = log2(_2455);
        float _2476 = exp2(_2469 * cbSceneParam._m0[78u].x) * _2326;
        float _2477 = exp2(_2469 * cbSceneParam._m0[78u].y) * _2327;
        float _2478 = exp2(_2469 * cbSceneParam._m0[78u].z) * _2328;
        float _2485 = _451 + (-0.5);
        _2487 = cbMtdParam._m0[1u];
        _2489 = _2487.y * _2485;
        float _2492 = (_2467 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2493 = _2492 * (_2468 ? _2476 : (_2476 + (cbSceneParam._m0[72u].w * _2449)));
        _2494 = _2492 * (_2468 ? _2477 : (_2477 + (cbSceneParam._m0[72u].w * _2451)));
        _2495 = _2492 * (_2468 ? _2478 : (_2478 + (cbSceneParam._m0[72u].w * _2453)));
        _2496 = _2485 * 0.999000012874603271484375;
        _2506 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2506)
        {
            if ((cbInstanceData._m0[_503 + 7u].x + _2496) < 0.5)
            {
                _2662 = true;
                break;
            }
        }
        uint _2603 = _505 + uint(_2465.w);
        if ((cbInstanceData._m0[_2603].w < 1.0) && ((cbInstanceData._m0[_2603].w + _2496) < 0.5))
        {
            _2662 = true;
            break;
        }
        if ((_2489 + _250) < _2487.x)
        {
            _2662 = true;
            break;
        }
        _2662 = false;
        break;
    }
    float _2867;
    if (_2662)
    {
        discard_state = true;
        _2867 = 0.0;
    }
    else
    {
        _2867 = cbInstanceData._m0[_2329].w;
    }
    SV_Target.x = _2493;
    SV_Target.y = _2494;
    SV_Target.z = _2495;
    SV_Target.w = _2867;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2329].w;
    discard_exit();
}


