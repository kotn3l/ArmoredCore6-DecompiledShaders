#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1004;
float _3675;
float _3676;
float _3677;
float _3678;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _190 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _191 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _192 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _198 = inversesqrt(dot(vec3(_190, _191, _192), vec3(_190, _191, _192)));
    float _199 = _198 * _190;
    float _200 = _198 * _191;
    float _201 = _198 * _192;
    float _205 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _206 = _205 * NORMAL.x;
    float _207 = _205 * NORMAL.y;
    float _208 = _205 * NORMAL.z;
    float _212 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _213 = _212 * TANGENT.x;
    float _214 = _212 * TANGENT.y;
    float _215 = _212 * TANGENT.z;
    float _220;
    float _221;
    float _222;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _220 = (-0.0) - _206;
        _221 = (-0.0) - _207;
        _222 = (-0.0) - _208;
    }
    else
    {
        _220 = _206;
        _221 = _207;
        _222 = _208;
    }
    vec4 _248 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _254 = _248.w;
    float _255 = _248.x * cbMtdParam._m0[9u].x;
    float _256 = _248.y * cbMtdParam._m0[9u].y;
    float _257 = _248.z * cbMtdParam._m0[9u].z;
    vec4 _275 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _279 = _275.z;
    float _283 = (_275.x * 2.0) + (-1.0);
    float _285 = (_275.y * 2.0) + (-1.0);
    float _286 = dot(vec2(_283, _285), vec2(_283, _285));
    float _3687 = isnan(0.0) ? _286 : (isnan(_286) ? 0.0 : max(_286, 0.0));
    float _292 = sqrt(1.0 - (isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0))));
    float _295 = fma(_292, _220, fma(_285, _213, _283 * _199));
    float _298 = fma(_292, _221, fma(_285, _214, _283 * _200));
    float _301 = fma(_292, _222, fma(_285, _215, _283 * _201));
    float _305 = inversesqrt(dot(vec3(_295, _298, _301), vec3(_295, _298, _301)));
    float _334 = (cbMtdParam._m0[12u].x + dot(vec4(_305 * _295, _305 * _298, _305 * _301, 0.0), vec4(cbMtdParam._m0[13u].xyz, 0.0))) - (texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w)).x * cbMtdParam._m0[12u].y);
    float _3698 = isnan(0.0) ? _334 : (isnan(_334) ? 0.0 : max(_334, 0.0));
    float _335 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
    float _342 = (_335 * (cbMtdParam._m0[10u].x - _255)) + _255;
    float _343 = (_335 * (cbMtdParam._m0[10u].y - _256)) + _256;
    float _344 = (_335 * (cbMtdParam._m0[10u].z - _257)) + _257;
    vec4 _356 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _358 = _356.x;
    float _360 = _358 - (_358 * _335);
    vec4 _372 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _379 = (_372.x * 2.0) + (-1.0);
    float _380 = (_372.y * 2.0) + (-1.0);
    float _381 = dot(vec2(_379, _380), vec2(_379, _380));
    float _3709 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _389 = ((_372.z - _279) * _335) + _279;
    float _401 = (((_379 - _283) + (cbMtdParam._m0[12u].w * _283)) * _335) + _283;
    float _402 = (((_380 - _285) + (cbMtdParam._m0[12u].w * _285)) * _335) + _285;
    float _403 = ((sqrt(1.0 - (isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0)))) - _292) * _335) + _292;
    float _406 = fma(_403, _220, fma(_402, _213, _401 * _199));
    float _409 = fma(_403, _221, fma(_402, _214, _401 * _200));
    float _412 = fma(_403, _222, fma(_402, _215, _401 * _201));
    float _416 = inversesqrt(dot(vec3(_406, _409, _412), vec3(_406, _409, _412)));
    float _417 = _416 * _406;
    float _418 = _416 * _409;
    float _419 = _416 * _412;
    float _3720 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _420 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
    float _3731 = isnan(0.0) ? _342 : (isnan(_342) ? 0.0 : max(_342, 0.0));
    float _3742 = isnan(0.0) ? _343 : (isnan(_343) ? 0.0 : max(_343, 0.0));
    float _3753 = isnan(0.0) ? _344 : (isnan(_344) ? 0.0 : max(_344, 0.0));
    float _3764 = isnan(0.0) ? _360 : (isnan(_360) ? 0.0 : max(_360, 0.0));
    float _424 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
    float _440 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _482 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _492 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _482);
    float _493 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _482);
    float _494 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _482);
    float _498 = inversesqrt(dot(vec3(_492, _493, _494), vec3(_492, _493, _494)));
    float _499 = _492 * _498;
    float _500 = _493 * _498;
    float _501 = _494 * _498;
    vec4 _506 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _508 = _506.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _683 = sqrt(((_492 * _492) + (_493 * _493)) + (_494 * _494));
        float _689 = (cbMatDynParam._m0[5u].x * _683) + cbMatDynParam._m0[5u].y;
        float _3775 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
        float _690 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
        float _694 = (cbMatDynParam._m0[5u].z * _683) + cbMatDynParam._m0[5u].w;
        float _3786 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0))) - _690)) + _690) < ((_508 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _520 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _521 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _541 = fma(_419, cbSceneParam._m0[5u].z, fma(_418, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _417));
    float _544 = fma(_419, cbSceneParam._m0[6u].z, fma(_418, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _417));
    float _547 = fma(_419, cbSceneParam._m0[7u].z, fma(_418, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _417));
    uint _560 = uint(roundEven(NORMAL.w)) * 13u;
    uint _561 = _560 + 9u;
    uint _562 = _561 + uint(cbMatDynParam._m0[0u].w);
    float _568 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0)))) * cbInstanceData._m0[_562].x;
    float _569 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0)))) * cbInstanceData._m0[_562].y;
    float _570 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0)))) * cbInstanceData._m0[_562].z;
    float _3797 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _571 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
    float _3808 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _572 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
    float _3819 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _573 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
    float _574 = 1.0 - _424;
    float _575 = _571 * _574;
    float _576 = _572 * _574;
    float _577 = _573 * _574;
    float _582 = (_571 + (-0.039999999105930328369140625)) * _424;
    float _583 = (_572 + (-0.039999999105930328369140625)) * _424;
    float _584 = (_573 + (-0.039999999105930328369140625)) * _424;
    float _585 = _582 + 0.039999999105930328369140625;
    float _587 = _583 + 0.039999999105930328369140625;
    float _588 = _584 + 0.039999999105930328369140625;
    vec4 _597 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _520, cbSceneParam._m0[86u].y * _521));
    float _600 = _597.x * TEXCOORD_3.w;
    float _601 = dot(vec3(_417, _418, _419), vec3(_499, _500, _501));
    float _604 = _601 * 2.0;
    float _608 = (_604 * _417) - _499;
    float _609 = (_604 * _418) - _500;
    float _610 = (_604 * _419) - _501;
    float _614 = abs(dot(vec3(_499, _500, _501), vec3(_417, _418, _419)));
    float _3830 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _616 = sqrt(_420);
    float _629 = exp2((_616 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_616 * 3.0));
    float _635 = (1.0 - _629) * ((_616 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _636 = _629 * _616;
    float _664 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _668 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _672 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1003;
    float _1005;
    float _1006;
    float _1007;
    float _1008;
    float _1009;
    float _1010;
    float _1011;
    float _1012;
    float _1013;
    float _1014;
    float _1015;
    float _1016;
    float _1017;
    float _1018;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _728 = fma(_672, cbModelParam._m0[26u].z, fma(_668, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _664));
        float _732 = fma(_672, cbModelParam._m0[27u].z, fma(_668, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _664));
        float _736 = fma(_672, cbModelParam._m0[28u].z, fma(_668, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _664));
        float _761 = _664 + _417;
        float _762 = _668 + _418;
        float _763 = _672 + _419;
        float _773 = fma(_763, cbModelParam._m0[26u].z, fma(_762, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _761)) - _728;
        float _774 = fma(_763, cbModelParam._m0[27u].z, fma(_762, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _761)) - _732;
        float _775 = fma(_763, cbModelParam._m0[28u].z, fma(_762, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _761)) - _736;
        float _779 = inversesqrt(dot(vec3(_773, _774, _775), vec3(_773, _774, _775)));
        float _792 = ((_779 * _773) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_728 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _793 = ((_779 * _774) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_732 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _794 = ((_779 * _775) / cbModelParam._m0[34u].z) + ((((((_736 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _797 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_792, _793, _794), 0.0);
        vec4 _804 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_792, _793, _794), 0.0);
        vec4 _811 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_792, _793, _794), 0.0);
        vec4 _818 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_792, _793, _794), 0.0);
        float _831 = exp2((_797.w + (-0.5)) * 20.0) * 2.0;
        float _832 = _831 * (_797.x + (-0.5));
        float _833 = _831 * (_797.y + (-0.5));
        float _834 = _831 * (_797.z + (-0.5));
        float _841 = exp2((_804.w + (-0.5)) * 20.0) * 2.0;
        float _842 = _841 * (_804.x + (-0.5));
        float _843 = _841 * (_804.y + (-0.5));
        float _844 = _841 * (_804.z + (-0.5));
        float _851 = exp2((_811.w + (-0.5)) * 20.0) * 2.0;
        float _852 = _851 * (_811.x + (-0.5));
        float _853 = _851 * (_811.y + (-0.5));
        float _854 = _851 * (_811.z + (-0.5));
        float _861 = exp2((_818.w + (-0.5)) * 20.0) * 2.0;
        float _862 = _861 * (_818.x + (-0.5));
        float _863 = _861 * (_818.y + (-0.5));
        float _864 = _861 * (_818.z + (-0.5));
        float _865 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
        float _866 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
        float _867 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
        float _868 = _832 * 0.5;
        float _869 = _842 * 0.5;
        float _870 = _852 * 0.5;
        float _871 = dot(vec3(_868, _869, _870), vec3(_868, _869, _870));
        float _876 = (_871 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_871);
        float _885 = (dot(vec3(_417, _418, _419), vec3(_876 * _868, _876 * _869, _876 * _870)) + 1.0) * 0.5;
        float _3856 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
        float _895 = sqrt(((_869 * _869) + (_868 * _868)) + (_870 * _870)) / (_865 + 9.9999997473787516355514526367188e-06);
        float _3867 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
        float _896 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
        float _897 = _896 * 2.0;
        float _901 = (1.0 - _896) / (_896 + 1.0);
        float _3878 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
        float _902 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
        float _911 = ((((1.0 - _902) * (_897 + 2.0)) * exp2(log2(isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0))) * (_897 + 1.0))) + _902) * _865;
        float _912 = _833 * 0.5;
        float _913 = _843 * 0.5;
        float _914 = _853 * 0.5;
        float _915 = dot(vec3(_912, _913, _914), vec3(_912, _913, _914));
        float _920 = (_915 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_915);
        float _928 = (dot(vec3(_417, _418, _419), vec3(_920 * _912, _920 * _913, _920 * _914)) + 1.0) * 0.5;
        float _3889 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
        float _937 = sqrt(((_913 * _913) + (_912 * _912)) + (_914 * _914)) / (_866 + 9.9999997473787516355514526367188e-06);
        float _3900 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
        float _938 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
        float _939 = _938 * 2.0;
        float _943 = (1.0 - _938) / (_938 + 1.0);
        float _3911 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
        float _944 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
        float _953 = ((((1.0 - _944) * (_939 + 2.0)) * exp2(log2(isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0))) * (_939 + 1.0))) + _944) * _866;
        float _954 = _834 * 0.5;
        float _955 = _844 * 0.5;
        float _956 = _854 * 0.5;
        float _957 = dot(vec3(_954, _955, _956), vec3(_954, _955, _956));
        float _962 = (_957 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_957);
        float _970 = (dot(vec3(_417, _418, _419), vec3(_962 * _954, _962 * _955, _962 * _956)) + 1.0) * 0.5;
        float _3922 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _979 = sqrt(((_955 * _955) + (_954 * _954)) + (_956 * _956)) / (_867 + 9.9999997473787516355514526367188e-06);
        float _3933 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _980 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
        float _981 = _980 * 2.0;
        float _985 = (1.0 - _980) / (_980 + 1.0);
        float _3944 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _986 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
        float _995 = ((((1.0 - _986) * (_981 + 2.0)) * exp2(log2(isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0))) * (_981 + 1.0))) + _986) * _867;
        _1003 = _834;
        _1005 = _833;
        _1006 = _832;
        _1007 = _844;
        _1008 = _843;
        _1009 = _842;
        _1010 = _854;
        _1011 = _853;
        _1012 = _852;
        _1013 = _867;
        _1014 = _866;
        _1015 = _865;
        _1016 = cbModelParam._m0[36u].z * (isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0)));
        _1017 = cbModelParam._m0[36u].z * (isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0)));
        _1018 = cbModelParam._m0[36u].z * (isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0)));
    }
    else
    {
        _1003 = _1004;
        _1005 = _1004;
        _1006 = _1004;
        _1007 = _1004;
        _1008 = _1004;
        _1009 = _1004;
        _1010 = _1004;
        _1011 = _1004;
        _1012 = _1004;
        _1013 = _1004;
        _1014 = _1004;
        _1015 = _1004;
        _1016 = 0.0;
        _1017 = 0.0;
        _1018 = 0.0;
    }
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1047 = fma(_672, cbModelParam._m0[30u].z, fma(_668, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _664));
        float _1051 = fma(_672, cbModelParam._m0[31u].z, fma(_668, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _664));
        float _1055 = fma(_672, cbModelParam._m0[32u].z, fma(_668, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _664));
        float _1078 = _664 + _417;
        float _1079 = _668 + _418;
        float _1080 = _672 + _419;
        float _1090 = fma(_1080, cbModelParam._m0[30u].z, fma(_1079, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1078)) - _1047;
        float _1091 = fma(_1080, cbModelParam._m0[31u].z, fma(_1079, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1078)) - _1051;
        float _1092 = fma(_1080, cbModelParam._m0[32u].z, fma(_1079, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1078)) - _1055;
        float _1096 = inversesqrt(dot(vec3(_1090, _1091, _1092), vec3(_1090, _1091, _1092)));
        float _1109 = ((_1096 * _1090) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1047 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1110 = ((_1096 * _1091) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1051 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1111 = ((_1096 * _1092) / cbModelParam._m0[35u].z) + ((((((_1055 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1113 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1109, _1110, _1111), 0.0);
        vec4 _1120 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1109, _1110, _1111), 0.0);
        vec4 _1127 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1109, _1110, _1111), 0.0);
        vec4 _1134 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1109, _1110, _1111), 0.0);
        float _1146 = exp2((_1113.w + (-0.5)) * 20.0) * 2.0;
        float _1147 = _1146 * (_1113.x + (-0.5));
        float _1148 = _1146 * (_1113.y + (-0.5));
        float _1149 = _1146 * (_1113.z + (-0.5));
        float _1156 = exp2((_1120.w + (-0.5)) * 20.0) * 2.0;
        float _1157 = _1156 * (_1120.x + (-0.5));
        float _1158 = _1156 * (_1120.y + (-0.5));
        float _1159 = _1156 * (_1120.z + (-0.5));
        float _1166 = exp2((_1127.w + (-0.5)) * 20.0) * 2.0;
        float _1167 = _1166 * (_1127.x + (-0.5));
        float _1168 = _1166 * (_1127.y + (-0.5));
        float _1169 = _1166 * (_1127.z + (-0.5));
        float _1176 = exp2((_1134.w + (-0.5)) * 20.0) * 2.0;
        float _1177 = _1176 * (_1134.x + (-0.5));
        float _1178 = _1176 * (_1134.y + (-0.5));
        float _1179 = _1176 * (_1134.z + (-0.5));
        float _1180 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1181 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1182 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1183 = _1147 * 0.5;
        float _1184 = _1157 * 0.5;
        float _1185 = _1167 * 0.5;
        float _1186 = dot(vec3(_1183, _1184, _1185), vec3(_1183, _1184, _1185));
        float _1191 = (_1186 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1186);
        float _1199 = (dot(vec3(_417, _418, _419), vec3(_1191 * _1183, _1191 * _1184, _1191 * _1185)) + 1.0) * 0.5;
        float _3985 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1208 = sqrt(((_1184 * _1184) + (_1183 * _1183)) + (_1185 * _1185)) / (_1180 + 9.9999997473787516355514526367188e-06);
        float _3996 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1209 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
        float _1210 = _1209 * 2.0;
        float _1214 = (1.0 - _1209) / (_1209 + 1.0);
        float _4007 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1215 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _1224 = ((((1.0 - _1215) * (_1210 + 2.0)) * exp2(log2(isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0))) * (_1210 + 1.0))) + _1215) * _1180;
        float _1225 = _1148 * 0.5;
        float _1226 = _1158 * 0.5;
        float _1227 = _1168 * 0.5;
        float _1228 = dot(vec3(_1225, _1226, _1227), vec3(_1225, _1226, _1227));
        float _1233 = (_1228 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1228);
        float _1241 = (dot(vec3(_417, _418, _419), vec3(_1233 * _1225, _1233 * _1226, _1233 * _1227)) + 1.0) * 0.5;
        float _4018 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1250 = sqrt(((_1226 * _1226) + (_1225 * _1225)) + (_1227 * _1227)) / (_1181 + 9.9999997473787516355514526367188e-06);
        float _4029 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1251 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
        float _1252 = _1251 * 2.0;
        float _1256 = (1.0 - _1251) / (_1251 + 1.0);
        float _4040 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1257 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _1266 = ((((1.0 - _1257) * (_1252 + 2.0)) * exp2(log2(isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0))) * (_1252 + 1.0))) + _1257) * _1181;
        float _1267 = _1149 * 0.5;
        float _1268 = _1159 * 0.5;
        float _1269 = _1169 * 0.5;
        float _1270 = dot(vec3(_1267, _1268, _1269), vec3(_1267, _1268, _1269));
        float _1275 = (_1270 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1270);
        float _1283 = (dot(vec3(_417, _418, _419), vec3(_1275 * _1267, _1275 * _1268, _1275 * _1269)) + 1.0) * 0.5;
        float _4051 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1292 = sqrt(((_1268 * _1268) + (_1267 * _1267)) + (_1269 * _1269)) / (_1182 + 9.9999997473787516355514526367188e-06);
        float _4062 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1293 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
        float _1294 = _1293 * 2.0;
        float _1298 = (1.0 - _1293) / (_1293 + 1.0);
        float _4073 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1299 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
        float _1308 = ((((1.0 - _1299) * (_1294 + 2.0)) * exp2(log2(isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0))) * (_1294 + 1.0))) + _1299) * _1182;
        _1316 = _1149;
        _1317 = _1148;
        _1318 = _1147;
        _1319 = _1159;
        _1320 = _1158;
        _1321 = _1157;
        _1322 = _1169;
        _1323 = _1168;
        _1324 = _1167;
        _1325 = _1182;
        _1326 = _1181;
        _1327 = _1180;
        _1328 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0)));
        _1329 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0)));
        _1330 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0)));
    }
    else
    {
        _1316 = _1004;
        _1317 = _1004;
        _1318 = _1004;
        _1319 = _1004;
        _1320 = _1004;
        _1321 = _1004;
        _1322 = _1004;
        _1323 = _1004;
        _1324 = _1004;
        _1325 = _1004;
        _1326 = _1004;
        _1327 = _1004;
        _1328 = 0.0;
        _1329 = 0.0;
        _1330 = 0.0;
    }
    float _1340 = (cbModelParam._m0[1u].x * (_1328 - _1016)) + _1016;
    float _1341 = (cbModelParam._m0[1u].x * (_1329 - _1017)) + _1017;
    float _1342 = (cbModelParam._m0[1u].x * (_1330 - _1018)) + _1018;
    float _1363 = fma(_1342, cbSceneParam._m0[89u].z, fma(_1341, cbSceneParam._m0[89u].y, _1340 * cbSceneParam._m0[89u].x));
    float _1366 = fma(_1342, cbSceneParam._m0[90u].z, fma(_1341, cbSceneParam._m0[90u].y, _1340 * cbSceneParam._m0[90u].x));
    float _1369 = fma(_1342, cbSceneParam._m0[91u].z, fma(_1341, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1340));
    float _1384 = _608 * 0.5;
    float _1385 = _609 * 0.5;
    float _1386 = _610 * 0.5;
    float _1387 = dot(vec4(_1384, _1385, _1386, 1.0), vec4(_1318, _1321, _1324, _1327));
    float _1390 = dot(vec4(_1384, _1385, _1386, 1.0), vec4(_1317, _1320, _1323, _1326));
    float _1393 = dot(vec4(_1384, _1385, _1386, 1.0), vec4(_1316, _1319, _1322, _1325));
    float _1427;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1400 = dot(vec4(_1384, _1385, _1386, 1.0), vec4(_1003, _1007, _1010, _1013));
        float _1404 = dot(vec4(_1384, _1385, _1386, 1.0), vec4(_1005, _1008, _1011, _1014));
        float _1408 = dot(vec4(_1384, _1385, _1386, 1.0), vec4(_1006, _1009, _1012, _1015));
        float _1415 = dot(vec4(cbModelParam._m0[39u]), vec4(_1384, _1385, _1386, 1.0));
        _1427 = dot(vec3(isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0)), isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0)), isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1415) ? 0.0 : (isnan(0.0) ? _1415 : max(0.0, _1415))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1427 = 1.0;
    }
    float _1438;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1429 = dot(vec4(cbModelParam._m0[40u]), vec4(_1384, _1385, _1386, 1.0));
        _1438 = dot(vec3(isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0)), isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0)), isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1429) ? 0.0 : (isnan(0.0) ? _1429 : max(0.0, _1429))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1438 = 1.0;
    }
    float _1442 = (_1438 * cbModelParam._m0[1u].x) + (_1427 * (1.0 - cbModelParam._m0[1u].x));
    float _1452 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _420);
    float _1453 = isnan(_1452) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1452 : min(cbModelParam._m0[25u].z, _1452));
    float _1534;
    float _1536;
    float _1538;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1501 = fma(_672, cbModelParam._m0[13u].z, fma(_668, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _664)) + cbModelParam._m0[13u].w;
        float _1505 = fma(_672, cbModelParam._m0[14u].z, fma(_668, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _664)) + cbModelParam._m0[14u].w;
        float _1509 = fma(_672, cbModelParam._m0[15u].z, fma(_668, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _664)) + cbModelParam._m0[15u].w;
        float _1512 = fma(_610, cbModelParam._m0[13u].z, fma(_609, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _608));
        float _1515 = fma(_610, cbModelParam._m0[14u].z, fma(_609, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _608));
        float _1518 = fma(_610, cbModelParam._m0[15u].z, fma(_609, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _608));
        float _1546;
        if (_1512 > 0.0)
        {
            _1546 = abs((1.0 - _1501) / _1512);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1512 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1501 + 1.0) / _1512);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1546 = frontier_phi_19_17_ladder;
        }
        float _1721;
        if (_1515 > 0.0)
        {
            _1721 = abs((1.0 - _1505) / _1515);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1515 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1505 + 1.0) / _1515);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1721 = frontier_phi_28_24_ladder;
        }
        float _2016;
        if (_1518 > 0.0)
        {
            _2016 = abs((1.0 - _1509) / _1518);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1518 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1509 + 1.0) / _1518);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2016 = frontier_phi_40_35_ladder;
        }
        float _2018 = isnan(_1721) ? _1546 : (isnan(_1546) ? _1721 : min(_1546, _1721));
        float _2019 = isnan(_2016) ? _2018 : (isnan(_2018) ? _2016 : min(_2018, _2016));
        float _2023 = (_2019 * _1512) + _1501;
        float _2024 = (_2019 * _1515) + _1505;
        float _2025 = (_2019 * _1518) + _1509;
        float _2026 = _2019 * 9.9999997473787516355514526367188e-05;
        float _2028 = (-1.0) - _2026;
        float _2030 = _2026 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2025 > _2030) || ((_2025 < _2028) || ((_2024 > _2030) || ((_2024 < _2028) || ((_2023 < _2028) || (_2023 > _2030))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2170 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2025, cbModelParam._m0[9u].z, fma(_2024, cbModelParam._m0[9u].y, _2023 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2025, cbModelParam._m0[10u].z, fma(_2024, cbModelParam._m0[10u].y, _2023 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2025, cbModelParam._m0[11u].z, fma(_2024, cbModelParam._m0[11u].y, _2023 * cbModelParam._m0[11u].x))), _1453);
            frontier_phi_18_40_ladder = _2170.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2170.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2170.x * cbModelParam._m0[1u].y;
        }
        _1534 = frontier_phi_18_40_ladder_2;
        _1536 = frontier_phi_18_40_ladder_1;
        _1538 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1522 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_608, _609, _610), _1453);
        _1534 = _1522.x * cbModelParam._m0[1u].y;
        _1536 = _1522.y * cbModelParam._m0[1u].y;
        _1538 = _1522.z * cbModelParam._m0[1u].y;
    }
    float _1542 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _420);
    float _1543 = isnan(_1542) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1542 : min(cbModelParam._m0[25u].w, _1542));
    float _1636;
    float _1638;
    float _1640;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1600 = fma(_672, cbModelParam._m0[21u].z, fma(_668, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _664)) + cbModelParam._m0[21u].w;
        float _1604 = fma(_672, cbModelParam._m0[22u].z, fma(_668, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _664)) + cbModelParam._m0[22u].w;
        float _1608 = fma(_672, cbModelParam._m0[23u].z, fma(_668, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _664)) + cbModelParam._m0[23u].w;
        float _1611 = fma(_610, cbModelParam._m0[21u].z, fma(_609, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _608));
        float _1614 = fma(_610, cbModelParam._m0[22u].z, fma(_609, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _608));
        float _1617 = fma(_610, cbModelParam._m0[23u].z, fma(_609, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _608));
        float _1726;
        if (_1611 > 0.0)
        {
            _1726 = abs((1.0 - _1600) / _1611);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1611 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1600 + 1.0) / _1611);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1726 = frontier_phi_30_26_ladder;
        }
        float _2043;
        if (_1614 > 0.0)
        {
            _2043 = abs((1.0 - _1604) / _1614);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1614 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1604 + 1.0) / _1614);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2043 = frontier_phi_42_37_ladder;
        }
        float _2381;
        if (_1617 > 0.0)
        {
            _2381 = abs((1.0 - _1608) / _1617);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1617 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1608 + 1.0) / _1617);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2381 = frontier_phi_52_49_ladder;
        }
        float _2383 = isnan(_2043) ? _1726 : (isnan(_1726) ? _2043 : min(_1726, _2043));
        float _2384 = isnan(_2381) ? _2383 : (isnan(_2383) ? _2381 : min(_2383, _2381));
        float _2388 = (_2384 * _1611) + _1600;
        float _2389 = (_2384 * _1614) + _1604;
        float _2390 = (_2384 * _1617) + _1608;
        float _2391 = _2384 * 9.9999997473787516355514526367188e-05;
        float _2392 = (-1.0) - _2391;
        float _2394 = _2391 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2390 > _2394) || ((_2390 < _2392) || ((_2389 > _2394) || ((_2389 < _2392) || ((_2388 < _2392) || (_2388 > _2394))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2512 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2390, cbModelParam._m0[17u].z, fma(_2389, cbModelParam._m0[17u].y, _2388 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2390, cbModelParam._m0[18u].z, fma(_2389, cbModelParam._m0[18u].y, _2388 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2390, cbModelParam._m0[19u].z, fma(_2389, cbModelParam._m0[19u].y, _2388 * cbModelParam._m0[19u].x))), _1543);
            frontier_phi_27_52_ladder = _2512.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2512.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2512.x * cbModelParam._m0[1u].z;
        }
        _1636 = frontier_phi_27_52_ladder_2;
        _1638 = frontier_phi_27_52_ladder_1;
        _1640 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1620 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_608, _609, _610), _1543);
        _1636 = _1620.x * cbModelParam._m0[1u].z;
        _1638 = _1620.y * cbModelParam._m0[1u].z;
        _1640 = _1620.z * cbModelParam._m0[1u].z;
    }
    float _1653 = (((_635 * _585) + _636) * _600) * ((cbModelParam._m0[1u].w * (_1636 - _1534)) + _1534);
    float _1655 = (((_635 * _587) + _636) * _600) * ((cbModelParam._m0[1u].w * (_1638 - _1536)) + _1536);
    float _1657 = (((_635 * _588) + _636) * _600) * ((cbModelParam._m0[1u].w * (_1640 - _1538)) + _1538);
    float _1660 = fma(_1657, cbSceneParam._m0[89u].z, fma(_1655, cbSceneParam._m0[89u].y, _1653 * cbSceneParam._m0[89u].x));
    float _1663 = fma(_1657, cbSceneParam._m0[90u].z, fma(_1655, cbSceneParam._m0[90u].y, _1653 * cbSceneParam._m0[90u].x));
    float _1666 = fma(_1657, cbSceneParam._m0[91u].z, fma(_1655, cbSceneParam._m0[91u].y, _1653 * cbSceneParam._m0[91u].x));
    float _1700 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1704 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1708 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1712 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1713 = _1700 / _1712;
    float _1714 = _1704 / _1712;
    float _1715 = _1708 / _1712;
    float _1862;
    float _1863;
    float _1864;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1742 = ((uint(_1715 > cbSceneParam._m0[59u].y) + uint(_1715 > cbSceneParam._m0[59u].x)) + uint(_1715 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1743 = _1742 + 43u;
        uint _1751 = _1742 + 44u;
        uint _1759 = _1742 + 45u;
        uint _1767 = _1742 + 46u;
        float _1778 = fma(_1712, cbSceneParam._m0[_1743].w, fma(_1708, cbSceneParam._m0[_1743].z, fma(_1704, cbSceneParam._m0[_1743].y, _1700 * cbSceneParam._m0[_1743].x)));
        float _1782 = fma(_1712, cbSceneParam._m0[_1751].w, fma(_1708, cbSceneParam._m0[_1751].z, fma(_1704, cbSceneParam._m0[_1751].y, _1700 * cbSceneParam._m0[_1751].x)));
        float _1790 = fma(_1712, cbSceneParam._m0[_1767].w, fma(_1708, cbSceneParam._m0[_1767].z, fma(_1704, cbSceneParam._m0[_1767].y, _1700 * cbSceneParam._m0[_1767].x)));
        float _1795 = cbSceneParam._m0[33u].z * _1790;
        float _1797 = cbSceneParam._m0[33u].w * _1790;
        float _1800 = fma(_1712, cbSceneParam._m0[_1759].w, fma(_1708, cbSceneParam._m0[_1759].z, fma(_1704, cbSceneParam._m0[_1759].y, _1700 * cbSceneParam._m0[_1759].x))) / _1790;
        float _1848 = (cbSceneParam._m0[33u].x - sqrt(((_1714 * _1714) + (_1713 * _1713)) + (_1715 * _1715))) * cbSceneParam._m0[33u].y;
        float _4199 = isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0));
        float _1855 = (isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1795 + _1778) / _1790, (_1797 + _1782) / _1790), _1800), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1797 + _1778) / _1790, (_1782 - _1795) / _1790), _1800), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1778 - _1795) / _1790, (_1782 - _1797) / _1790), _1800), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1778 - _1797) / _1790, (_1795 + _1782) / _1790), _1800), 0.0)).x), vec4(0.25)));
        _1862 = 1.0 - (_1855 * cbSceneParam._m0[34u].x);
        _1863 = 1.0 - (_1855 * cbSceneParam._m0[34u].y);
        _1864 = 1.0 - (_1855 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1862 = 1.0;
        _1863 = 1.0;
        _1864 = 1.0;
    }
    float _1928;
    float _1930;
    float _1932;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1916 = fma(_1712, cbSceneParam._m0[63u].w, fma(_1708, cbSceneParam._m0[63u].z, fma(_1704, cbSceneParam._m0[63u].y, _1700 * cbSceneParam._m0[63u].x)));
        float _1917 = fma(_1712, cbSceneParam._m0[60u].w, fma(_1708, cbSceneParam._m0[60u].z, fma(_1704, cbSceneParam._m0[60u].y, _1700 * cbSceneParam._m0[60u].x))) / _1916;
        float _1918 = fma(_1712, cbSceneParam._m0[61u].w, fma(_1708, cbSceneParam._m0[61u].z, fma(_1704, cbSceneParam._m0[61u].y, _1700 * cbSceneParam._m0[61u].x))) / _1916;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1917 >= cbSceneParam._m0[64u].x) && (_1918 >= cbSceneParam._m0[64u].y)) && (_1917 <= cbSceneParam._m0[64u].z)) && (_1918 <= cbSceneParam._m0[64u].w))
        {
            float _2056 = fma(_1712, cbSceneParam._m0[62u].w, fma(_1708, cbSceneParam._m0[62u].z, fma(_1704, cbSceneParam._m0[62u].y, _1700 * cbSceneParam._m0[62u].x))) / _1916;
            float _2060 = isnan(cbSceneParam._m0[41u].w) ? _2056 : (isnan(_2056) ? cbSceneParam._m0[41u].w : max(_2056, cbSceneParam._m0[41u].w));
            float _2103 = (cbSceneParam._m0[33u].x - sqrt(((_1714 * _1714) + (_1713 * _1713)) + (_1715 * _1715))) * cbSceneParam._m0[33u].y;
            float _4215 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
            float _2110 = (isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1917, cbSceneParam._m0[33u].w + _1918), _2060), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1917, _1918 - cbSceneParam._m0[33u].z), _2060), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1917 - cbSceneParam._m0[33u].z, _1918 - cbSceneParam._m0[33u].w), _2060), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1917 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1918), _2060), 0.0)).x), vec4(0.25)));
            float _2114 = 1.0 - (_2110 * cbSceneParam._m0[34u].x);
            float _2115 = 1.0 - (_2110 * cbSceneParam._m0[34u].y);
            float _2116 = 1.0 - (_2110 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2115) ? _1863 : (isnan(_1863) ? _2115 : min(_1863, _2115));
            frontier_phi_39_38_ladder_1 = isnan(_2114) ? _1862 : (isnan(_1862) ? _2114 : min(_1862, _2114));
            frontier_phi_39_38_ladder_2 = isnan(_2116) ? _1864 : (isnan(_1864) ? _2116 : min(_1864, _2116));
        }
        else
        {
            frontier_phi_39_38_ladder = _1863;
            frontier_phi_39_38_ladder_1 = _1862;
            frontier_phi_39_38_ladder_2 = _1864;
        }
        _1928 = frontier_phi_39_38_ladder_1;
        _1930 = frontier_phi_39_38_ladder;
        _1932 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _1928 = _1862;
        _1930 = _1863;
        _1932 = _1864;
    }
    uvec4 _1937 = floatBitsToUint(cbInstanceData._m0[_560 + 5u]);
    uint _1939 = _1937.x * 14u;
    uint _1940 = _1939 + 13u;
    float _1947 = _600 + (-1.0);
    float _1952 = (cbLight._m0[_1940].x * _1947) + 1.0;
    float _1953 = (cbLight._m0[_1940].y * _1947) + 1.0;
    float _1954 = (cbLight._m0[_1940].z * _1947) + 1.0;
    float _1955 = (cbLight._m0[_1940].w * _1947) + 1.0;
    uint _1956 = _1939 + 5u;
    float _1962 = isnan(1.0) ? _1953 : (isnan(_1953) ? 1.0 : min(_1953, 1.0));
    uint _1966 = _1939 + 4u;
    float _1975 = isnan(1.0) ? _1952 : (isnan(_1952) ? 1.0 : min(_1952, 1.0));
    uint _1979 = _1939 | 1u;
    float _1990 = dot(vec3(cbLight._m0[_1939].xyz), vec3(_417, _418, _419));
    float _1993 = dot(vec3(cbLight._m0[_1979].xyz), vec3(_417, _418, _419));
    float _4251 = isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0));
    float _4262 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
    float _1998 = (isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0))) * 0.3183098733425140380859375;
    float _2000 = (isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0))) * 0.3183098733425140380859375;
    float _2007 = ((cbLight._m0[_1956].x * _1962) * _2000) + (((cbLight._m0[_1966].x * _1928) * _1975) * _1998);
    float _2008 = ((_1962 * cbLight._m0[_1956].y) * _2000) + (((cbLight._m0[_1966].y * _1930) * _1975) * _1998);
    float _2009 = ((_1962 * cbLight._m0[_1956].z) * _2000) + (((cbLight._m0[_1966].z * _1932) * _1975) * _1998);
    uvec4 _2013 = floatBitsToUint(cbLight._m0[_1939 + 12u]);
    bool _2015 = _2013.x == 0u;
    float _2117;
    float _2119;
    float _2121;
    if (_2015)
    {
        _2117 = _2007;
        _2119 = _2008;
        _2121 = _2009;
    }
    else
    {
        uint _2125 = _1939 + 6u;
        float _2141 = (dot(vec3(cbLight._m0[_1939 + 2u].xyz), vec3(_417, _418, _419)) * 0.5) + 0.5;
        float _2142 = _2141 * _2141;
        float _4273 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
        float _2143 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
        float _2144 = isnan(1.0) ? _1954 : (isnan(_1954) ? 1.0 : min(_1954, 1.0));
        _2117 = (((cbLight._m0[_2125].x * 0.3183098733425140380859375) * _2143) * _2144) + _2007;
        _2119 = (((cbLight._m0[_2125].y * 0.3183098733425140380859375) * _2143) * _2144) + _2008;
        _2121 = (((cbLight._m0[_2125].z * 0.3183098733425140380859375) * _2143) * _2144) + _2009;
    }
    bool _2124 = _2013.y == 0u;
    float _2179;
    float _2181;
    float _2183;
    if (_2124)
    {
        _2179 = _2117;
        _2181 = _2119;
        _2183 = _2121;
    }
    else
    {
        uint _2352 = _1939 + 7u;
        float _2368 = (dot(vec3(cbLight._m0[_1939 + 3u].xyz), vec3(_417, _418, _419)) * 0.5) + 0.5;
        float _2369 = _2368 * _2368;
        float _4289 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
        float _2370 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
        float _2371 = isnan(1.0) ? _1955 : (isnan(_1955) ? 1.0 : min(_1955, 1.0));
        _2179 = (((cbLight._m0[_2352].x * 0.3183098733425140380859375) * _2370) * _2371) + _2117;
        _2181 = (((cbLight._m0[_2352].y * 0.3183098733425140380859375) * _2370) * _2371) + _2119;
        _2183 = (((cbLight._m0[_2352].z * 0.3183098733425140380859375) * _2370) * _2371) + _2121;
    }
    uint _2186 = _1939 + 8u;
    float _2199 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1939].w)) * _420) * 0.949999988079071044921875);
    float _2200 = _2199 * _2199;
    float _2201 = cbLight._m0[_1939].x + _499;
    float _2202 = cbLight._m0[_1939].y + _500;
    float _2203 = cbLight._m0[_1939].z + _501;
    float _2207 = inversesqrt(dot(vec3(_2201, _2202, _2203), vec3(_2201, _2202, _2203)));
    float _2208 = _2207 * _2201;
    float _2209 = _2207 * _2202;
    float _2210 = _2207 * _2203;
    float _2211 = dot(vec3(_417, _418, _419), vec3(cbLight._m0[_1939].xyz));
    float _4305 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
    float _2214 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
    float _4316 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _2215 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
    float _2216 = dot(vec3(_417, _418, _419), vec3(_2208, _2209, _2210));
    float _4327 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
    float _2219 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
    float _2220 = dot(vec3(cbLight._m0[_1939].xyz), vec3(_2208, _2209, _2210));
    float _4338 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
    float _2224 = _2200 * _2200;
    float _2228 = ((_2219 * _2219) * (_2224 + (-1.0))) + 1.0;
    float _2236 = exp2(log2(1.0 - (isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0)))) * 5.0);
    float _2237 = 0.959999978542327880859375 - _582;
    float _2239 = 0.959999978542327880859375 - _583;
    float _2240 = 0.959999978542327880859375 - _584;
    float _2247 = 1.0 - _2200;
    float _2258 = (0.5 / (((_2215 * ((_2214 * _2247) + _2200)) + 9.9999999392252902907785028219223e-09) + (((_2215 * _2247) + _2200) * _2214))) * _2214;
    float _4349 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
    float _2260 = (isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0))) * (_2224 / ((_2228 * _2228) * 3.141590118408203125));
    uint _2274 = _1939 + 9u;
    float _2285 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1979].w)) * _420) * 0.949999988079071044921875);
    float _2286 = _2285 * _2285;
    float _2287 = cbLight._m0[_1979].x + _499;
    float _2288 = cbLight._m0[_1979].y + _500;
    float _2289 = cbLight._m0[_1979].z + _501;
    float _2293 = inversesqrt(dot(vec3(_2287, _2288, _2289), vec3(_2287, _2288, _2289)));
    float _2294 = _2293 * _2287;
    float _2295 = _2293 * _2288;
    float _2296 = _2293 * _2289;
    float _2297 = dot(vec3(_417, _418, _419), vec3(cbLight._m0[_1979].xyz));
    float _4360 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
    float _2300 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
    float _2301 = dot(vec3(_417, _418, _419), vec3(_2294, _2295, _2296));
    float _4371 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
    float _2304 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
    float _2305 = dot(vec3(cbLight._m0[_1979].xyz), vec3(_2294, _2295, _2296));
    float _4382 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
    float _2309 = _2286 * _2286;
    float _2313 = ((_2304 * _2304) * (_2309 + (-1.0))) + 1.0;
    float _2320 = exp2(log2(1.0 - (isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0)))) * 5.0);
    float _2327 = 1.0 - _2286;
    float _2337 = (0.5 / (((_2215 * ((_2300 * _2327) + _2286)) + 9.9999999392252902907785028219223e-09) + (((_2215 * _2327) + _2286) * _2300))) * _2300;
    float _4393 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
    float _2339 = (isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0))) * (_2309 / ((_2313 * _2313) * 3.141590118408203125));
    float _2349 = (((((_2320 * _2237) + _585) * cbLight._m0[_2274].x) * _2339) * _1962) + ((((cbLight._m0[_2186].x * _1928) * ((_2236 * _2237) + _585)) * _2260) * _1975);
    float _2350 = (((((_2320 * _2239) + _587) * cbLight._m0[_2274].y) * _2339) * _1962) + ((((cbLight._m0[_2186].y * _1930) * ((_2236 * _2239) + _587)) * _2260) * _1975);
    float _2351 = (((((_2320 * _2240) + _588) * cbLight._m0[_2274].z) * _2339) * _1962) + ((((cbLight._m0[_2186].z * _1932) * ((_2236 * _2240) + _588)) * _2260) * _1975);
    float _2407;
    float _2409;
    float _2411;
    if (_2015)
    {
        _2407 = _2349;
        _2409 = _2350;
        _2411 = _2351;
    }
    else
    {
        uint _2413 = _1939 + 2u;
        uint _2417 = _1939 + 10u;
        float _2431 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2413].w)) * _420) * 0.949999988079071044921875);
        float _2432 = _2431 * _2431;
        float _2433 = cbLight._m0[_2413].x + _499;
        float _2434 = cbLight._m0[_2413].y + _500;
        float _2435 = cbLight._m0[_2413].z + _501;
        float _2439 = inversesqrt(dot(vec3(_2433, _2434, _2435), vec3(_2433, _2434, _2435)));
        float _2440 = _2439 * _2433;
        float _2441 = _2439 * _2434;
        float _2442 = _2439 * _2435;
        float _2443 = dot(vec3(_417, _418, _419), vec3(cbLight._m0[_2413].xyz));
        float _4404 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
        float _2446 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
        float _2447 = dot(vec3(_417, _418, _419), vec3(_2440, _2441, _2442));
        float _4415 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
        float _2450 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
        float _2451 = dot(vec3(cbLight._m0[_2413].xyz), vec3(_2440, _2441, _2442));
        float _4426 = isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0));
        float _2455 = _2432 * _2432;
        float _2459 = ((_2450 * _2450) * (_2455 + (-1.0))) + 1.0;
        float _2466 = exp2(log2(1.0 - (isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0)))) * 5.0);
        float _2473 = 1.0 - _2432;
        float _2483 = (0.5 / (((_2215 * ((_2446 * _2473) + _2432)) + 9.9999999392252902907785028219223e-09) + (((_2215 * _2473) + _2432) * _2446))) * _2446;
        float _4437 = isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0));
        float _2485 = (isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0))) * (_2455 / ((_2459 * _2459) * 3.141590118408203125));
        float _2486 = isnan(1.0) ? _1954 : (isnan(_1954) ? 1.0 : min(_1954, 1.0));
        _2407 = (((((_2466 * _2237) + _585) * cbLight._m0[_2417].x) * _2485) * _2486) + _2349;
        _2409 = (((((_2466 * _2239) + _587) * cbLight._m0[_2417].y) * _2485) * _2486) + _2350;
        _2411 = (((((_2466 * _2240) + _588) * cbLight._m0[_2417].z) * _2485) * _2486) + _2351;
    }
    float _2517;
    float _2519;
    float _2521;
    if (_2124)
    {
        _2517 = _2407;
        _2519 = _2409;
        _2521 = _2411;
    }
    else
    {
        uint _2528 = _1939 + 3u;
        uint _2532 = _1939 + 11u;
        float _2546 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2528].w)) * _420) * 0.949999988079071044921875);
        float _2547 = _2546 * _2546;
        float _2548 = cbLight._m0[_2528].x + _499;
        float _2549 = cbLight._m0[_2528].y + _500;
        float _2550 = cbLight._m0[_2528].z + _501;
        float _2554 = inversesqrt(dot(vec3(_2548, _2549, _2550), vec3(_2548, _2549, _2550)));
        float _2555 = _2554 * _2548;
        float _2556 = _2554 * _2549;
        float _2557 = _2554 * _2550;
        float _2558 = dot(vec3(_417, _418, _419), vec3(cbLight._m0[_2528].xyz));
        float _4453 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0));
        float _2561 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
        float _2562 = dot(vec3(_417, _418, _419), vec3(_2555, _2556, _2557));
        float _4464 = isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : max(_2562, 0.0));
        float _2565 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
        float _2566 = dot(vec3(cbLight._m0[_2528].xyz), vec3(_2555, _2556, _2557));
        float _4475 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0));
        float _2570 = _2547 * _2547;
        float _2574 = ((_2565 * _2565) * (_2570 + (-1.0))) + 1.0;
        float _2581 = exp2(log2(1.0 - (isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0)))) * 5.0);
        float _2588 = 1.0 - _2547;
        float _2598 = (0.5 / (((_2215 * ((_2561 * _2588) + _2547)) + 9.9999999392252902907785028219223e-09) + (((_2215 * _2588) + _2547) * _2561))) * _2561;
        float _4486 = isnan(0.0) ? _2598 : (isnan(_2598) ? 0.0 : max(_2598, 0.0));
        float _2600 = (isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0))) * (_2570 / ((_2574 * _2574) * 3.141590118408203125));
        float _2601 = isnan(1.0) ? _1955 : (isnan(_1955) ? 1.0 : min(_1955, 1.0));
        _2517 = (((((_2581 * _2237) + _585) * cbLight._m0[_2532].x) * _2600) * _2601) + _2407;
        _2519 = (((((_2581 * _2239) + _587) * cbLight._m0[_2532].y) * _2600) * _2601) + _2409;
        _2521 = (((((_2581 * _2240) + _588) * cbLight._m0[_2532].z) * _2600) * _2601) + _2411;
    }
    float _2666;
    float _2668;
    float _2670;
    float _2672;
    float _2674;
    float _2676;
    if (_1937.y == 0u)
    {
        uvec4 _2622 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2623 = _2622.x;
        uint _2634 = uint((float(_2622.y) * floor(float(uint(cbSceneParam._m0[85u].y * _521) / _2623))) + floor(float(uint(cbSceneParam._m0[85u].x * _520) / _2623)));
        float _2644 = (log2(_1715 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2645 = isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : max(_2644, 0.0));
        uint _2648 = uint(isnan(14.0) ? _2645 : (isnan(_2645) ? 14.0 : min(_2645, 14.0)));
        uvec4 _2653 = texelFetch(g_lightClusterGridBuffer, int(((_2648 << 2u) + (_2634 << 6u)) >> 2u));
        uint _2654 = _2653.x;
        uint _2655 = _2622.z;
        float _2733;
        float _2735;
        float _2737;
        float _2739;
        float _2741;
        float _2743;
        if (((((1u << ((_2655 >> 4u) & 15u)) + 4294967295u) & _2654) == 0u) || ((_2655 & 240u) == 0u))
        {
            _2733 = 0.0;
            _2735 = 0.0;
            _2737 = 0.0;
            _2739 = 0.0;
            _2741 = 0.0;
            _2743 = 0.0;
        }
        else
        {
            float _2734;
            float _2736;
            float _2738;
            float _2740;
            float _2742;
            float _2744;
            float _2885 = 0.0;
            float _2886 = 0.0;
            float _2887 = 0.0;
            float _2888 = 0.0;
            float _2889 = 0.0;
            float _2890 = 0.0;
            uint _2891 = 0u;
            uint _2900;
            bool _2901;
            for (;;)
            {
                _2900 = texelFetch(g_lightClassification, int((((_2648 << 5u) + (_2634 << 9u)) + (_2891 << 2u)) >> 2u)).x;
                _2901 = _2900 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_2901)
                {
                    frontier_phi_73_pred = _2890;
                    frontier_phi_73_pred_1 = _2889;
                    frontier_phi_73_pred_2 = _2888;
                    frontier_phi_73_pred_3 = _2887;
                    frontier_phi_73_pred_4 = _2886;
                    frontier_phi_73_pred_5 = _2885;
                }
                else
                {
                    float _3030;
                    float _3031;
                    float _3032;
                    float _3033;
                    float _3034;
                    float _3035;
                    uint _3036;
                    _3030 = _2885;
                    _3031 = _2886;
                    _3032 = _2887;
                    _3033 = _2888;
                    _3034 = _2889;
                    _3035 = _2890;
                    _3036 = _2900;
                    float _2957;
                    float _2958;
                    float _2959;
                    float _2960;
                    float _2961;
                    float _2962;
                    for (;;)
                    {
                        uint _3040 = uint(findLSB(_3036)) + (_2891 << 5u);
                        uint _3037 = (_3036 + 4294967295u) & _3036;
                        uint _3042 = _3040 * 48u;
                        vec4 _3056 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3042)).x, texelFetch(g_PointLightRenderingBuffer, int(_3042 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3042 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3042 + 3u)).x));
                        uint _3062 = (_3040 * 48u) + 4u;
                        vec4 _3075 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3062)).x, texelFetch(g_PointLightRenderingBuffer, int(_3062 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3062 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3062 + 3u)).x));
                        uint _3081 = (_3040 * 48u) + 8u;
                        vec3 _3092 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3081)).x, texelFetch(g_PointLightRenderingBuffer, int(_3081 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3081 + 2u)).x));
                        float _3096 = _3056.x - _1713;
                        float _3097 = _3056.y - _1714;
                        float _3098 = _3056.z - _1715;
                        float _3099 = dot(vec3(_3096, _3097, _3098), vec3(_3096, _3097, _3098));
                        float _3102 = inversesqrt(_3099);
                        float _3103 = _3102 * _3096;
                        float _3104 = _3102 * _3097;
                        float _3105 = _3102 * _3098;
                        float _3106 = dot(vec3(_541, _544, _547), vec3(_3103, _3104, _3105));
                        float _3111 = 1.0 - (_3099 * _3056.w);
                        float _4512 = isnan(0.0) ? _3111 : (isnan(_3111) ? 0.0 : max(_3111, 0.0));
                        float _3112 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
                        float _3113 = sqrt(_3099) * _3075.w;
                        float _3116 = 1.39999997615814208984375 / (_3113 + 1.39999997615814208984375);
                        float _3117 = _3116 * _3116;
                        float _3120 = ((1.0 - _3117) * _3106) + _3117;
                        float _3123 = _3113 * _3113;
                        float _3127 = ((isnan(0.0) ? _3120 : (isnan(_3120) ? 0.0 : max(_3120, 0.0))) * _3112) / ((_3123 * 0.699999988079071044921875) + 1.0);
                        float _3131 = (-0.0) - _1713;
                        float _3132 = (-0.0) - _1714;
                        float _3133 = (-0.0) - _1715;
                        float _3137 = inversesqrt(dot(vec3(_3131, _3132, _3133), vec3(_3131, _3132, _3133)));
                        float _3138 = _3137 * _3131;
                        float _3139 = _3137 * _3132;
                        float _3140 = _3137 * _3133;
                        float _3147 = exp2(log2(1.0 / ((_3123 * 3.5) + 5.0)) * 0.25);
                        float _3148 = 1.0 - _616;
                        float _3155 = sqrt(1.0 - ((1.0 - (_3148 * _3148)) * (1.0 - (_3147 * _3147))));
                        float _3156 = _3155 * _3155;
                        float _3157 = _3156 * _3156;
                        float _3158 = _3138 + _3103;
                        float _3159 = _3139 + _3104;
                        float _3160 = _3140 + _3105;
                        float _3164 = inversesqrt(dot(vec3(_3158, _3159, _3160), vec3(_3158, _3159, _3160)));
                        float _3168 = dot(vec3(_541, _544, _547), vec3(_3138, _3139, _3140));
                        float _4528 = isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : max(_3168, 0.0));
                        float _3171 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
                        float _3172 = dot(vec3(_541, _544, _547), vec3(_3164 * _3158, _3164 * _3159, _3164 * _3160));
                        float _4539 = isnan(0.0) ? _3172 : (isnan(_3172) ? 0.0 : max(_3172, 0.0));
                        float _3175 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
                        float _3179 = ((_3175 * _3175) * (_3157 + (-1.0))) + 1.0;
                        float _3180 = _3116 * _3156;
                        float _3181 = _3180 * _3180;
                        float _3184 = ((1.0 - _3181) * _3106) + _3181;
                        float _4550 = isnan(0.0) ? _3184 : (isnan(_3184) ? 0.0 : max(_3184, 0.0));
                        float _3185 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
                        float _3186 = 1.0 - _3156;
                        float _3196 = (0.5 / (((_3185 * ((_3171 * _3186) + _3156)) + 9.9999999392252902907785028219223e-09) + (((_3185 * _3186) + _3156) * _3171))) * _3185;
                        float _4561 = isnan(0.0) ? _3196 : (isnan(_3196) ? 0.0 : max(_3196, 0.0));
                        float _3207 = (((_3157 * 3.1415927410125732421875) * (isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0)))) / ((_3179 * _3179) * ((_3123 * 2.1991131305694580078125) + 3.141590118408203125))) * _3112;
                        _2960 = (_3127 * _3075.x) + _3033;
                        _2961 = (_3127 * _3075.y) + _3034;
                        _2962 = (_3127 * _3075.z) + _3035;
                        _2957 = (_3207 * _3092.x) + _3030;
                        _2958 = (_3207 * _3092.y) + _3031;
                        _2959 = (_3207 * _3092.z) + _3032;
                        if (_3037 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3030 = _2957;
                            _3031 = _2958;
                            _3032 = _2959;
                            _3033 = _2960;
                            _3034 = _2961;
                            _3035 = _2962;
                            _3036 = _3037;
                        }
                    }
                    frontier_phi_73_pred = _2962;
                    frontier_phi_73_pred_1 = _2961;
                    frontier_phi_73_pred_2 = _2960;
                    frontier_phi_73_pred_3 = _2959;
                    frontier_phi_73_pred_4 = _2958;
                    frontier_phi_73_pred_5 = _2957;
                }
                _2744 = frontier_phi_73_pred;
                _2742 = frontier_phi_73_pred_1;
                _2740 = frontier_phi_73_pred_2;
                _2738 = frontier_phi_73_pred_3;
                _2736 = frontier_phi_73_pred_4;
                _2734 = frontier_phi_73_pred_5;
                uint _2892 = _2891 + 1u;
                if (_2892 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2885 = _2734;
                    _2886 = _2736;
                    _2887 = _2738;
                    _2888 = _2740;
                    _2889 = _2742;
                    _2890 = _2744;
                    _2891 = _2892;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2733 = _2734;
            _2735 = _2736;
            _2737 = _2738;
            _2739 = _2740;
            _2741 = _2742;
            _2743 = _2744;
        }
        uvec4 _2747 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2748 = _2747.z;
        uint _2750 = (_2748 >> 8u) & 15u;
        float _2853;
        float _2855;
        float _2857;
        float _2859;
        float _2861;
        float _2863;
        if (((4294967295u << _2750) & _2654) == 0u)
        {
            _2853 = _2733;
            _2855 = _2735;
            _2857 = _2737;
            _2859 = _2739;
            _2861 = _2741;
            _2863 = _2743;
        }
        else
        {
            float _2878 = inversesqrt(dot(vec3(_1713, _1714, _1715), vec3(_1713, _1714, _1715)));
            float _2879 = _2878 * _1713;
            float _2880 = _2878 * _1714;
            float _2881 = _2878 * _1715;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2750 < ((_2748 >> 12u) & 15u))
            {
                float _2854;
                float _2856;
                float _2858;
                float _2860;
                float _2862;
                float _2864;
                float _3013 = _2733;
                float _3014 = _2735;
                float _3015 = _2737;
                float _3016 = _2739;
                float _3017 = _2741;
                float _3018 = _2743;
                uint _3019 = _2750;
                uint _3028;
                bool _3029;
                for (;;)
                {
                    _3028 = texelFetch(g_lightClassification, int((((_2648 << 5u) + (_2634 << 9u)) + (_3019 << 2u)) >> 2u)).x;
                    _3029 = _3028 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3029)
                    {
                        frontier_phi_84_pred = _3017;
                        frontier_phi_84_pred_1 = _3016;
                        frontier_phi_84_pred_2 = _3015;
                        frontier_phi_84_pred_3 = _3014;
                        frontier_phi_84_pred_4 = _3013;
                        frontier_phi_84_pred_5 = _3018;
                    }
                    else
                    {
                        float _3221;
                        float _3222;
                        float _3223;
                        float _3224;
                        float _3225;
                        float _3226;
                        float _3517;
                        float _3518;
                        float _3519;
                        float _3520;
                        float _3521;
                        float _3522;
                        float _3234 = _3013;
                        float _3235 = _3014;
                        float _3236 = _3015;
                        float _3237 = _3016;
                        float _3238 = _3017;
                        float _3239 = _3018;
                        uint _3240 = _3028;
                        uint _3241;
                        vec4 _3266;
                        float _3267;
                        vec4 _3282;
                        vec3 _3294;
                        vec4 _3310;
                        vec4 _3326;
                        float _3373;
                        bool _3374;
                        for (;;)
                        {
                            uint _3251 = ((_3019 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3240));
                            _3241 = (_3240 + 4294967295u) & _3240;
                            uint _3253 = _3251 * 40u;
                            _3266 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3253)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 3u)).x));
                            _3267 = _3266.w;
                            uint _3269 = (_3251 * 40u) + 4u;
                            _3282 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3269)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 3u)).x));
                            uint _3284 = (_3251 * 40u) + 8u;
                            _3294 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3284)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 2u)).x));
                            uint _3297 = (_3251 * 40u) + 16u;
                            _3310 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3297)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 3u)).x));
                            uint _3313 = (_3251 * 40u) + 20u;
                            _3326 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3313)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 3u)).x));
                            uint _3329 = (_3251 * 40u) + 24u;
                            vec4 _3342 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3329)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3329 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3329 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3329 + 3u)).x));
                            uint _3348 = (_3251 * 40u) + 28u;
                            vec4 _3361 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3348)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 3u)).x));
                            _3373 = fma(_1715, _3361.z, fma(_1714, _3361.y, _3361.x * _1713)) + _3361.w;
                            _3374 = !((fma(_1715, _3342.z, fma(_1714, _3342.y, _3342.x * _1713)) + _3342.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3374)
                            {
                                float _3401 = _3266.x - _1713;
                                float _3402 = _3266.y - _1714;
                                float _3403 = _3266.z - _1715;
                                float _3404 = dot(vec3(_3401, _3402, _3403), vec3(_3401, _3402, _3403));
                                float _3407 = inversesqrt(_3404);
                                float _3408 = _3407 * _3401;
                                float _3409 = _3407 * _3402;
                                float _3410 = _3407 * _3403;
                                float _3414 = 1.0 - (_3404 / (_3267 * _3267));
                                float _4572 = isnan(0.0) ? _3414 : (isnan(_3414) ? 0.0 : max(_3414, 0.0));
                                float _3415 = isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0));
                                float _3419 = sqrt(_3404) * _3282.w;
                                float _3421 = 1.39999997615814208984375 / (_3419 + 1.39999997615814208984375);
                                float _3422 = _3421 * _3421;
                                float _3425 = ((1.0 - _3422) * dot(vec3(_3408, _3409, _3410), vec3(_541, _544, _547))) + _3422;
                                float _3428 = _3419 * _3419;
                                float _3432 = (fma(_1715, _3310.z, fma(_1714, _3310.y, _3310.x * _1713)) + _3310.w) / _3373;
                                float _3433 = (fma(_1715, _3326.z, fma(_1714, _3326.y, _3326.x * _1713)) + _3326.w) / _3373;
                                float _3437 = 1.0 - dot(vec2(_3432, _3433), vec2(_3432, _3433));
                                float _4588 = isnan(0.0) ? _3437 : (isnan(_3437) ? 0.0 : max(_3437, 0.0));
                                float _3438 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
                                float _3439 = _3438 * (((isnan(0.0) ? _3425 : (isnan(_3425) ? 0.0 : max(_3425, 0.0))) * _3415) / ((_3428 * 0.699999988079071044921875) + 1.0));
                                float _3451 = exp2(log2(1.0 / ((_3428 * 3.5) + 5.0)) * 0.25);
                                float _3452 = 1.0 - _616;
                                float _3459 = sqrt(1.0 - ((1.0 - (_3452 * _3452)) * (1.0 - (_3451 * _3451))));
                                float _3460 = _3459 * _3459;
                                float _3461 = _3460 * _3460;
                                float _3462 = _3408 - _2879;
                                float _3463 = _3409 - _2880;
                                float _3464 = _3410 - _2881;
                                float _3468 = inversesqrt(dot(vec3(_3462, _3463, _3464), vec3(_3462, _3463, _3464)));
                                float _3472 = dot(vec3(_541, _544, _547), vec3((-0.0) - _2879, (-0.0) - _2880, (-0.0) - _2881));
                                float _4599 = isnan(0.0) ? _3472 : (isnan(_3472) ? 0.0 : max(_3472, 0.0));
                                float _3475 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
                                float _3476 = dot(vec3(_541, _544, _547), vec3(_3468 * _3462, _3468 * _3463, _3468 * _3464));
                                float _4610 = isnan(0.0) ? _3476 : (isnan(_3476) ? 0.0 : max(_3476, 0.0));
                                float _3479 = isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0));
                                float _3483 = ((_3479 * _3479) * (_3461 + (-1.0))) + 1.0;
                                float _3484 = _3421 * _3460;
                                float _3485 = _3484 * _3484;
                                float _3491 = ((1.0 - _3485) * dot(vec3(_541, _544, _547), vec3(_3408, _3409, _3410))) + _3485;
                                float _4621 = isnan(0.0) ? _3491 : (isnan(_3491) ? 0.0 : max(_3491, 0.0));
                                float _3492 = isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0));
                                float _3493 = 1.0 - _3460;
                                float _3503 = (0.5 / (((_3492 * ((_3475 * _3493) + _3460)) + 9.9999999392252902907785028219223e-09) + (((_3492 * _3493) + _3460) * _3475))) * _3492;
                                float _4632 = isnan(0.0) ? _3503 : (isnan(_3503) ? 0.0 : max(_3503, 0.0));
                                float _3513 = (_3438 * _3415) * (((_3461 * 3.1415927410125732421875) * (isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0)))) / ((_3483 * _3483) * ((_3428 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3439 * _3282.y;
                                frontier_phi_90_pred_1 = _3439 * _3282.x;
                                frontier_phi_90_pred_2 = _3513 * _3294.z;
                                frontier_phi_90_pred_3 = _3513 * _3294.y;
                                frontier_phi_90_pred_4 = _3513 * _3294.x;
                                frontier_phi_90_pred_5 = _3439 * _3282.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3521 = frontier_phi_90_pred;
                            _3520 = frontier_phi_90_pred_1;
                            _3519 = frontier_phi_90_pred_2;
                            _3518 = frontier_phi_90_pred_3;
                            _3517 = frontier_phi_90_pred_4;
                            _3522 = frontier_phi_90_pred_5;
                            _3224 = _3520 + _3237;
                            _3225 = _3521 + _3238;
                            _3226 = _3522 + _3239;
                            _3221 = _3517 + _3234;
                            _3222 = _3518 + _3235;
                            _3223 = _3519 + _3236;
                            if (_3241 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3234 = _3221;
                                _3235 = _3222;
                                _3236 = _3223;
                                _3237 = _3224;
                                _3238 = _3225;
                                _3239 = _3226;
                                _3240 = _3241;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3225;
                        frontier_phi_84_pred_1 = _3224;
                        frontier_phi_84_pred_2 = _3223;
                        frontier_phi_84_pred_3 = _3222;
                        frontier_phi_84_pred_4 = _3221;
                        frontier_phi_84_pred_5 = _3226;
                    }
                    _2862 = frontier_phi_84_pred;
                    _2860 = frontier_phi_84_pred_1;
                    _2858 = frontier_phi_84_pred_2;
                    _2856 = frontier_phi_84_pred_3;
                    _2854 = frontier_phi_84_pred_4;
                    _2864 = frontier_phi_84_pred_5;
                    uint _3020 = _3019 + 1u;
                    if (_3020 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3013 = _2854;
                        _3014 = _2856;
                        _3015 = _2858;
                        _3016 = _2860;
                        _3017 = _2862;
                        _3018 = _2864;
                        _3019 = _3020;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2864;
                frontier_phi_65_66_ladder_1 = _2860;
                frontier_phi_65_66_ladder_2 = _2862;
                frontier_phi_65_66_ladder_3 = _2856;
                frontier_phi_65_66_ladder_4 = _2854;
                frontier_phi_65_66_ladder_5 = _2858;
            }
            else
            {
                frontier_phi_65_66_ladder = _2743;
                frontier_phi_65_66_ladder_1 = _2739;
                frontier_phi_65_66_ladder_2 = _2741;
                frontier_phi_65_66_ladder_3 = _2735;
                frontier_phi_65_66_ladder_4 = _2733;
                frontier_phi_65_66_ladder_5 = _2737;
            }
            _2853 = frontier_phi_65_66_ladder_4;
            _2855 = frontier_phi_65_66_ladder_3;
            _2857 = frontier_phi_65_66_ladder_5;
            _2859 = frontier_phi_65_66_ladder_1;
            _2861 = frontier_phi_65_66_ladder_2;
            _2863 = frontier_phi_65_66_ladder;
        }
        float _2868 = isnan(1.0) ? _600 : (isnan(_600) ? 1.0 : min(_600, 1.0));
        _2666 = (_2868 * _2859) + _2179;
        _2668 = (_2868 * _2861) + _2181;
        _2670 = (_2868 * _2863) + _2183;
        _2672 = ((_2853 * _585) * _2868) + _2517;
        _2674 = ((_2855 * _587) * _2868) + _2519;
        _2676 = ((_2857 * _588) * _2868) + _2521;
    }
    else
    {
        _2666 = _2179;
        _2668 = _2181;
        _2670 = _2183;
        _2672 = _2517;
        _2674 = _2519;
        _2676 = _2521;
    }
    float _4648 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _4659 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _4670 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _2693 = ((isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0))) * (_2666 + ((isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0))) * _600))) + ((_2672 + ((isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0))) * _1442)) * cbPerFrame._m0[3u].x);
    float _2694 = ((isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0))) * (_2668 + ((isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0))) * _600))) + ((_2674 + ((isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0))) * _1442)) * cbPerFrame._m0[3u].x);
    float _2695 = ((isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0))) * (_2670 + ((isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0))) * _600))) + ((_2676 + ((isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0))) * _1442)) * cbPerFrame._m0[3u].x);
    uint _2696 = _560 + 6u;
    float _2704 = _520 / cbSceneParam._m0[86u].x;
    float _2705 = _521 / cbSceneParam._m0[86u].y;
    vec4 _2719 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2704, _2705, (log2((isnan(cbSceneParam._m0[77u].w) ? _440 : (isnan(_440) ? cbSceneParam._m0[77u].w : min(_440, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2721 = _2719.x;
    float _2722 = _2719.y;
    float _2723 = _2719.z;
    float _2724 = _2719.w;
    float _2795;
    float _2797;
    float _2799;
    float _2801;
    if (_440 > cbSceneParam._m0[78u].w)
    {
        float _2758 = isnan(_440) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _440 : min(cbSceneParam._m0[80u].w, _440));
        float _2759 = _2758 / _440;
        float _2770 = _2759 * _492;
        float _2771 = _493 * _2759;
        float _2772 = (-0.0) - _2771;
        float _2773 = _2759 * _494;
        float _2775 = (cbSceneParam._m0[77u].w * _2772) / _2758;
        float _2776 = _2775 + cbSceneParam._m0[79u].w;
        float _2777 = cbSceneParam._m0[79u].w - _2771;
        float _2783 = sqrt(((_2770 * _2770) + (_2771 * _2771)) + (_2773 * _2773));
        float _2786 = (1.0 - (cbSceneParam._m0[77u].w / _2758)) * _2783;
        float _2791 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2793 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2970;
        if (abs((_2772 - _2775) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2970 = ((((_2776 > 0.0) ? exp2(_2791 * _2776) : (2.0 - exp2(_2793 * _2776))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2786;
        }
        else
        {
            float _2914 = 1.0 / cbSceneParam._m0[80u].x;
            float _2915 = isnan(_2777) ? _2776 : (isnan(_2776) ? _2777 : max(_2776, _2777));
            float _2916 = isnan(_2777) ? _2776 : (isnan(_2776) ? _2777 : min(_2776, _2777));
            float _2925 = isnan(0.0) ? _2915 : (isnan(_2915) ? 0.0 : min(_2915, 0.0));
            float _2926 = isnan(0.0) ? _2916 : (isnan(_2916) ? 0.0 : min(_2916, 0.0));
            _2970 = ((abs(_2783 / _2772) * cbSceneParam._m0[80u].y) * ((((_2925 - _2926) * 2.0) - ((exp2(_2791 * (isnan(0.0) ? _2915 : (isnan(_2915) ? 0.0 : max(_2915, 0.0)))) - exp2(_2791 * (isnan(0.0) ? _2916 : (isnan(_2916) ? 0.0 : max(_2916, 0.0))))) * _2914)) - ((exp2(_2793 * _2925) - exp2(_2793 * _2926)) * _2914))) + (_2786 * cbSceneParam._m0[80u].z);
        }
        vec4 _2972 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2704, _2705, 1.0), 0.0);
        float _2981 = exp2((_2970 * (-1.44269502162933349609375)) * (1.0 - _2972.w));
        float _2982 = log2(_2981);
        float _2998 = log2(_2724);
        _2795 = (exp2(_2998 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2982 * cbSceneParam._m0[78u].x)) * _2972.x) / cbSceneParam._m0[78u].x)) + _2721;
        _2797 = (exp2(_2998 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2982 * cbSceneParam._m0[78u].y)) * _2972.y) / cbSceneParam._m0[78u].y)) + _2722;
        _2799 = (exp2(_2998 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2982 * cbSceneParam._m0[78u].z)) * _2972.z) / cbSceneParam._m0[78u].z)) + _2723;
        _2801 = _2981 * _2724;
    }
    else
    {
        _2795 = _2721;
        _2797 = _2722;
        _2799 = _2723;
        _2801 = _2724;
    }
    bool _3008;
    vec4 _2811;
    vec4 _2833;
    float _2835;
    float _2839;
    float _2840;
    float _2841;
    float _2842;
    bool _2852;
    for (;;)
    {
        _2811 = cbMatDynParam._m0[0u];
        float _2813 = roundEven(_2811.y);
        bool _2814 = _2813 == 3.0;
        float _2815 = log2(_2801);
        float _2822 = exp2(_2815 * cbSceneParam._m0[78u].x) * _2693;
        float _2823 = exp2(_2815 * cbSceneParam._m0[78u].y) * _2694;
        float _2824 = exp2(_2815 * cbSceneParam._m0[78u].z) * _2695;
        float _2831 = _508 + (-0.5);
        _2833 = cbMtdParam._m0[1u];
        _2835 = _2833.y * _2831;
        float _2838 = (_2813 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2839 = _2838 * (_2814 ? _2822 : (_2822 + (cbSceneParam._m0[72u].w * _2795)));
        _2840 = _2838 * (_2814 ? _2823 : (_2823 + (cbSceneParam._m0[72u].w * _2797)));
        _2841 = _2838 * (_2814 ? _2824 : (_2824 + (cbSceneParam._m0[72u].w * _2799)));
        _2842 = _2831 * 0.999000012874603271484375;
        _2852 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2852)
        {
            if ((cbInstanceData._m0[_560 + 7u].x + _2842) < 0.5)
            {
                _3008 = true;
                break;
            }
        }
        uint _2949 = _561 + uint(_2811.w);
        if ((cbInstanceData._m0[_2949].w < 1.0) && ((cbInstanceData._m0[_2949].w + _2842) < 0.5))
        {
            _3008 = true;
            break;
        }
        if ((_2835 + _254) < _2833.x)
        {
            _3008 = true;
            break;
        }
        _3008 = false;
        break;
    }
    float _3212;
    if (_3008)
    {
        discard_state = true;
        _3212 = 0.0;
    }
    else
    {
        _3212 = cbInstanceData._m0[_2696].w;
    }
    SV_Target.x = _2839;
    SV_Target.y = _2840;
    SV_Target.z = _2841;
    SV_Target.w = _3212;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2696].w;
    discard_exit();
}


