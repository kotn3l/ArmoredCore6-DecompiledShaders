#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _964;
float _3353;
float _3354;
float _3355;
float _3356;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _194 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _201 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _202 = _201 * NORMAL.x;
    float _203 = _201 * NORMAL.y;
    float _204 = _201 * NORMAL.z;
    float _208 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _216;
    float _217;
    float _218;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _216 = (-0.0) - _202;
        _217 = (-0.0) - _203;
        _218 = (-0.0) - _204;
    }
    else
    {
        _216 = _202;
        _217 = _203;
        _218 = _204;
    }
    vec4 _244 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _250 = _244.w;
    float _251 = _244.x * cbMtdParam._m0[9u].x;
    float _252 = _244.y * cbMtdParam._m0[9u].y;
    float _253 = _244.z * cbMtdParam._m0[9u].z;
    vec4 _265 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _269 = _265.z;
    float _273 = (_265.x * 2.0) + (-1.0);
    float _275 = (_265.y * 2.0) + (-1.0);
    float _276 = dot(vec2(_273, _275), vec2(_273, _275));
    float _3365 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _282 = sqrt(1.0 - (isnan(1.0) ? _3365 : (isnan(_3365) ? 1.0 : min(_3365, 1.0))));
    float _294 = (TEXCOORD_3.x - (((1.0 - TEXCOORD_3.x) * 0.00999999977648258209228515625) * cbMtdParam._m0[12u].y)) * (cbMtdParam._m0[12u].z + 1.0);
    float _3376 = isnan(0.0) ? _294 : (isnan(_294) ? 0.0 : max(_294, 0.0));
    float _295 = isnan(1.0) ? _3376 : (isnan(_3376) ? 1.0 : min(_3376, 1.0));
    float _302 = (_295 * (cbMtdParam._m0[10u].x - _251)) + _251;
    float _303 = (_295 * (cbMtdParam._m0[10u].y - _252)) + _252;
    float _304 = (_295 * (cbMtdParam._m0[10u].z - _253)) + _253;
    vec4 _316 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _318 = _316.x;
    float _320 = _318 - (_318 * _295);
    vec4 _332 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _339 = (_332.x * 2.0) + (-1.0);
    float _340 = (_332.y * 2.0) + (-1.0);
    float _341 = dot(vec2(_339, _340), vec2(_339, _340));
    float _3387 = isnan(0.0) ? _341 : (isnan(_341) ? 0.0 : max(_341, 0.0));
    float _349 = (_295 * (_332.z - _269)) + _269;
    float _361 = (((_339 - _273) + (cbMtdParam._m0[12u].w * _273)) * _295) + _273;
    float _362 = (((_340 - _275) + (cbMtdParam._m0[12u].w * _275)) * _295) + _275;
    float _363 = (_295 * (sqrt(1.0 - (isnan(1.0) ? _3387 : (isnan(_3387) ? 1.0 : min(_3387, 1.0)))) - _282)) + _282;
    float _366 = fma(_363, _216, fma(_362, _208 * TANGENT.x, (_194 * _186) * _361));
    float _369 = fma(_363, _217, fma(_362, _208 * TANGENT.y, (_194 * _187) * _361));
    float _372 = fma(_363, _218, fma(_362, _208 * TANGENT.z, (_194 * _188) * _361));
    float _376 = inversesqrt(dot(vec3(_366, _369, _372), vec3(_366, _369, _372)));
    float _377 = _376 * _366;
    float _378 = _376 * _369;
    float _379 = _376 * _372;
    float _3398 = isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : max(_349, 0.0));
    float _380 = isnan(1.0) ? _3398 : (isnan(_3398) ? 1.0 : min(_3398, 1.0));
    float _3409 = isnan(0.0) ? _302 : (isnan(_302) ? 0.0 : max(_302, 0.0));
    float _3420 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _3431 = isnan(0.0) ? _304 : (isnan(_304) ? 0.0 : max(_304, 0.0));
    float _3442 = isnan(0.0) ? _320 : (isnan(_320) ? 0.0 : max(_320, 0.0));
    float _384 = isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0));
    float _400 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _442 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _452 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _442);
    float _453 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _442);
    float _454 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _442);
    float _458 = inversesqrt(dot(vec3(_452, _453, _454), vec3(_452, _453, _454)));
    float _459 = _452 * _458;
    float _460 = _453 * _458;
    float _461 = _454 * _458;
    vec4 _466 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _468 = _466.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _644 = sqrt(((_452 * _452) + (_453 * _453)) + (_454 * _454));
        float _650 = (cbMatDynParam._m0[5u].x * _644) + cbMatDynParam._m0[5u].y;
        float _3453 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
        float _651 = isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0));
        float _655 = (cbMatDynParam._m0[5u].z * _644) + cbMatDynParam._m0[5u].w;
        float _3464 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0))) - _651)) + _651) < ((_468 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _480 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _481 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _501 = fma(_379, cbSceneParam._m0[5u].z, fma(_378, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _377));
    float _504 = fma(_379, cbSceneParam._m0[6u].z, fma(_378, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _377));
    float _507 = fma(_379, cbSceneParam._m0[7u].z, fma(_378, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _377));
    uint _520 = uint(roundEven(NORMAL.w)) * 13u;
    uint _522 = _520 + 9u;
    uint _523 = _522 + uint(cbMatDynParam._m0[0u].w);
    float _529 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0)))) * cbInstanceData._m0[_523].x;
    float _530 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3420 : (isnan(_3420) ? 1.0 : min(_3420, 1.0)))) * cbInstanceData._m0[_523].y;
    float _531 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3431 : (isnan(_3431) ? 1.0 : min(_3431, 1.0)))) * cbInstanceData._m0[_523].z;
    float _3475 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _532 = isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0));
    float _3486 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _533 = isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0));
    float _3497 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _534 = isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0));
    float _535 = 1.0 - _384;
    float _536 = _532 * _535;
    float _537 = _533 * _535;
    float _538 = _534 * _535;
    float _543 = (_532 + (-0.039999999105930328369140625)) * _384;
    float _544 = (_533 + (-0.039999999105930328369140625)) * _384;
    float _545 = (_534 + (-0.039999999105930328369140625)) * _384;
    float _546 = _543 + 0.039999999105930328369140625;
    float _548 = _544 + 0.039999999105930328369140625;
    float _549 = _545 + 0.039999999105930328369140625;
    vec4 _558 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _480, cbSceneParam._m0[86u].y * _481));
    float _561 = _558.x * TEXCOORD_3.w;
    float _562 = dot(vec3(_377, _378, _379), vec3(_459, _460, _461));
    float _565 = _562 * 2.0;
    float _569 = (_565 * _377) - _459;
    float _570 = (_565 * _378) - _460;
    float _571 = (_565 * _379) - _461;
    float _575 = abs(dot(vec3(_459, _460, _461), vec3(_377, _378, _379)));
    float _3508 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _577 = sqrt(_380);
    float _590 = exp2((_577 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_577 * 3.0));
    float _596 = (1.0 - _590) * ((_577 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _597 = _590 * _577;
    float _625 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _629 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _633 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _963;
    float _965;
    float _966;
    float _967;
    float _968;
    float _969;
    float _970;
    float _971;
    float _972;
    float _973;
    float _974;
    float _975;
    float _976;
    float _977;
    float _978;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _688 = fma(_633, cbModelParam._m0[26u].z, fma(_629, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _625));
        float _692 = fma(_633, cbModelParam._m0[27u].z, fma(_629, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _625));
        float _696 = fma(_633, cbModelParam._m0[28u].z, fma(_629, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _625));
        float _721 = _625 + _377;
        float _722 = _629 + _378;
        float _723 = _633 + _379;
        float _733 = fma(_723, cbModelParam._m0[26u].z, fma(_722, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _721)) - _688;
        float _734 = fma(_723, cbModelParam._m0[27u].z, fma(_722, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _721)) - _692;
        float _735 = fma(_723, cbModelParam._m0[28u].z, fma(_722, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _721)) - _696;
        float _739 = inversesqrt(dot(vec3(_733, _734, _735), vec3(_733, _734, _735)));
        float _752 = ((_739 * _733) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_688 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _753 = ((_739 * _734) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_692 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _754 = ((_739 * _735) / cbModelParam._m0[34u].z) + ((((((_696 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _757 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_752, _753, _754), 0.0);
        vec4 _764 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_752, _753, _754), 0.0);
        vec4 _771 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_752, _753, _754), 0.0);
        vec4 _778 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_752, _753, _754), 0.0);
        float _791 = exp2((_757.w + (-0.5)) * 20.0) * 2.0;
        float _792 = _791 * (_757.x + (-0.5));
        float _793 = _791 * (_757.y + (-0.5));
        float _794 = _791 * (_757.z + (-0.5));
        float _801 = exp2((_764.w + (-0.5)) * 20.0) * 2.0;
        float _802 = _801 * (_764.x + (-0.5));
        float _803 = _801 * (_764.y + (-0.5));
        float _804 = _801 * (_764.z + (-0.5));
        float _811 = exp2((_771.w + (-0.5)) * 20.0) * 2.0;
        float _812 = _811 * (_771.x + (-0.5));
        float _813 = _811 * (_771.y + (-0.5));
        float _814 = _811 * (_771.z + (-0.5));
        float _821 = exp2((_778.w + (-0.5)) * 20.0) * 2.0;
        float _822 = _821 * (_778.x + (-0.5));
        float _823 = _821 * (_778.y + (-0.5));
        float _824 = _821 * (_778.z + (-0.5));
        float _825 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
        float _826 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
        float _827 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
        float _828 = _792 * 0.5;
        float _829 = _802 * 0.5;
        float _830 = _812 * 0.5;
        float _831 = dot(vec3(_828, _829, _830), vec3(_828, _829, _830));
        float _836 = (_831 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_831);
        float _845 = (dot(vec3(_377, _378, _379), vec3(_836 * _828, _836 * _829, _836 * _830)) + 1.0) * 0.5;
        float _3534 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
        float _855 = sqrt(((_829 * _829) + (_828 * _828)) + (_830 * _830)) / (_825 + 9.9999997473787516355514526367188e-06);
        float _3545 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
        float _856 = isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0));
        float _857 = _856 * 2.0;
        float _861 = (1.0 - _856) / (_856 + 1.0);
        float _3556 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
        float _862 = isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0));
        float _871 = ((((1.0 - _862) * (_857 + 2.0)) * exp2(log2(isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0))) * (_857 + 1.0))) + _862) * _825;
        float _872 = _793 * 0.5;
        float _873 = _803 * 0.5;
        float _874 = _813 * 0.5;
        float _875 = dot(vec3(_872, _873, _874), vec3(_872, _873, _874));
        float _880 = (_875 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_875);
        float _888 = (dot(vec3(_377, _378, _379), vec3(_880 * _872, _880 * _873, _880 * _874)) + 1.0) * 0.5;
        float _3567 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
        float _897 = sqrt(((_873 * _873) + (_872 * _872)) + (_874 * _874)) / (_826 + 9.9999997473787516355514526367188e-06);
        float _3578 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
        float _898 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
        float _899 = _898 * 2.0;
        float _903 = (1.0 - _898) / (_898 + 1.0);
        float _3589 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        float _904 = isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0));
        float _913 = ((((1.0 - _904) * (_899 + 2.0)) * exp2(log2(isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0))) * (_899 + 1.0))) + _904) * _826;
        float _914 = _794 * 0.5;
        float _915 = _804 * 0.5;
        float _916 = _814 * 0.5;
        float _917 = dot(vec3(_914, _915, _916), vec3(_914, _915, _916));
        float _922 = (_917 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_917);
        float _930 = (dot(vec3(_377, _378, _379), vec3(_922 * _914, _922 * _915, _922 * _916)) + 1.0) * 0.5;
        float _3600 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
        float _939 = sqrt(((_915 * _915) + (_914 * _914)) + (_916 * _916)) / (_827 + 9.9999997473787516355514526367188e-06);
        float _3611 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
        float _940 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
        float _941 = _940 * 2.0;
        float _945 = (1.0 - _940) / (_940 + 1.0);
        float _3622 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
        float _946 = isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0));
        float _955 = ((((1.0 - _946) * (_941 + 2.0)) * exp2(log2(isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0))) * (_941 + 1.0))) + _946) * _827;
        _963 = _794;
        _965 = _793;
        _966 = _792;
        _967 = _804;
        _968 = _803;
        _969 = _802;
        _970 = _814;
        _971 = _813;
        _972 = _812;
        _973 = _827;
        _974 = _826;
        _975 = _825;
        _976 = cbModelParam._m0[36u].z * (isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0)));
        _977 = cbModelParam._m0[36u].z * (isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0)));
        _978 = cbModelParam._m0[36u].z * (isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0)));
    }
    else
    {
        _963 = _964;
        _965 = _964;
        _966 = _964;
        _967 = _964;
        _968 = _964;
        _969 = _964;
        _970 = _964;
        _971 = _964;
        _972 = _964;
        _973 = _964;
        _974 = _964;
        _975 = _964;
        _976 = 0.0;
        _977 = 0.0;
        _978 = 0.0;
    }
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1007 = fma(_633, cbModelParam._m0[30u].z, fma(_629, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _625));
        float _1011 = fma(_633, cbModelParam._m0[31u].z, fma(_629, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _625));
        float _1015 = fma(_633, cbModelParam._m0[32u].z, fma(_629, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _625));
        float _1038 = _625 + _377;
        float _1039 = _629 + _378;
        float _1040 = _633 + _379;
        float _1050 = fma(_1040, cbModelParam._m0[30u].z, fma(_1039, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1038)) - _1007;
        float _1051 = fma(_1040, cbModelParam._m0[31u].z, fma(_1039, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1038)) - _1011;
        float _1052 = fma(_1040, cbModelParam._m0[32u].z, fma(_1039, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1038)) - _1015;
        float _1056 = inversesqrt(dot(vec3(_1050, _1051, _1052), vec3(_1050, _1051, _1052)));
        float _1069 = ((_1056 * _1050) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1007 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1070 = ((_1056 * _1051) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1011 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1071 = ((_1056 * _1052) / cbModelParam._m0[35u].z) + ((((((_1015 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1073 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1069, _1070, _1071), 0.0);
        vec4 _1080 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1069, _1070, _1071), 0.0);
        vec4 _1087 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1069, _1070, _1071), 0.0);
        vec4 _1094 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1069, _1070, _1071), 0.0);
        float _1106 = exp2((_1073.w + (-0.5)) * 20.0) * 2.0;
        float _1107 = _1106 * (_1073.x + (-0.5));
        float _1108 = _1106 * (_1073.y + (-0.5));
        float _1109 = _1106 * (_1073.z + (-0.5));
        float _1116 = exp2((_1080.w + (-0.5)) * 20.0) * 2.0;
        float _1117 = _1116 * (_1080.x + (-0.5));
        float _1118 = _1116 * (_1080.y + (-0.5));
        float _1119 = _1116 * (_1080.z + (-0.5));
        float _1126 = exp2((_1087.w + (-0.5)) * 20.0) * 2.0;
        float _1127 = _1126 * (_1087.x + (-0.5));
        float _1128 = _1126 * (_1087.y + (-0.5));
        float _1129 = _1126 * (_1087.z + (-0.5));
        float _1136 = exp2((_1094.w + (-0.5)) * 20.0) * 2.0;
        float _1137 = _1136 * (_1094.x + (-0.5));
        float _1138 = _1136 * (_1094.y + (-0.5));
        float _1139 = _1136 * (_1094.z + (-0.5));
        float _1140 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1141 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1142 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1143 = _1107 * 0.5;
        float _1144 = _1117 * 0.5;
        float _1145 = _1127 * 0.5;
        float _1146 = dot(vec3(_1143, _1144, _1145), vec3(_1143, _1144, _1145));
        float _1151 = (_1146 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1146);
        float _1159 = (dot(vec3(_377, _378, _379), vec3(_1151 * _1143, _1151 * _1144, _1151 * _1145)) + 1.0) * 0.5;
        float _3663 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1168 = sqrt(((_1144 * _1144) + (_1143 * _1143)) + (_1145 * _1145)) / (_1140 + 9.9999997473787516355514526367188e-06);
        float _3674 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1169 = isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0));
        float _1170 = _1169 * 2.0;
        float _1174 = (1.0 - _1169) / (_1169 + 1.0);
        float _3685 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1175 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
        float _1184 = ((((1.0 - _1175) * (_1170 + 2.0)) * exp2(log2(isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0))) * (_1170 + 1.0))) + _1175) * _1140;
        float _1185 = _1108 * 0.5;
        float _1186 = _1118 * 0.5;
        float _1187 = _1128 * 0.5;
        float _1188 = dot(vec3(_1185, _1186, _1187), vec3(_1185, _1186, _1187));
        float _1193 = (_1188 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1188);
        float _1201 = (dot(vec3(_377, _378, _379), vec3(_1193 * _1185, _1193 * _1186, _1193 * _1187)) + 1.0) * 0.5;
        float _3696 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1210 = sqrt(((_1186 * _1186) + (_1185 * _1185)) + (_1187 * _1187)) / (_1141 + 9.9999997473787516355514526367188e-06);
        float _3707 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1211 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
        float _1212 = _1211 * 2.0;
        float _1216 = (1.0 - _1211) / (_1211 + 1.0);
        float _3718 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1217 = isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0));
        float _1226 = ((((1.0 - _1217) * (_1212 + 2.0)) * exp2(log2(isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0))) * (_1212 + 1.0))) + _1217) * _1141;
        float _1227 = _1109 * 0.5;
        float _1228 = _1119 * 0.5;
        float _1229 = _1129 * 0.5;
        float _1230 = dot(vec3(_1227, _1228, _1229), vec3(_1227, _1228, _1229));
        float _1235 = (_1230 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1230);
        float _1243 = (dot(vec3(_377, _378, _379), vec3(_1235 * _1227, _1235 * _1228, _1235 * _1229)) + 1.0) * 0.5;
        float _3729 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1252 = sqrt(((_1228 * _1228) + (_1227 * _1227)) + (_1229 * _1229)) / (_1142 + 9.9999997473787516355514526367188e-06);
        float _3740 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1253 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
        float _1254 = _1253 * 2.0;
        float _1258 = (1.0 - _1253) / (_1253 + 1.0);
        float _3751 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1259 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
        float _1268 = ((((1.0 - _1259) * (_1254 + 2.0)) * exp2(log2(isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0))) * (_1254 + 1.0))) + _1259) * _1142;
        _1276 = _1109;
        _1277 = _1108;
        _1278 = _1107;
        _1279 = _1119;
        _1280 = _1118;
        _1281 = _1117;
        _1282 = _1129;
        _1283 = _1128;
        _1284 = _1127;
        _1285 = _1142;
        _1286 = _1141;
        _1287 = _1140;
        _1288 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0)));
        _1289 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0)));
        _1290 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0)));
    }
    else
    {
        _1276 = _964;
        _1277 = _964;
        _1278 = _964;
        _1279 = _964;
        _1280 = _964;
        _1281 = _964;
        _1282 = _964;
        _1283 = _964;
        _1284 = _964;
        _1285 = _964;
        _1286 = _964;
        _1287 = _964;
        _1288 = 0.0;
        _1289 = 0.0;
        _1290 = 0.0;
    }
    float _1300 = (cbModelParam._m0[1u].x * (_1288 - _976)) + _976;
    float _1301 = (cbModelParam._m0[1u].x * (_1289 - _977)) + _977;
    float _1302 = (cbModelParam._m0[1u].x * (_1290 - _978)) + _978;
    float _1323 = fma(_1302, cbSceneParam._m0[89u].z, fma(_1301, cbSceneParam._m0[89u].y, _1300 * cbSceneParam._m0[89u].x));
    float _1326 = fma(_1302, cbSceneParam._m0[90u].z, fma(_1301, cbSceneParam._m0[90u].y, _1300 * cbSceneParam._m0[90u].x));
    float _1329 = fma(_1302, cbSceneParam._m0[91u].z, fma(_1301, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1300));
    float _1344 = _569 * 0.5;
    float _1345 = _570 * 0.5;
    float _1346 = _571 * 0.5;
    float _1347 = dot(vec4(_1344, _1345, _1346, 1.0), vec4(_1278, _1281, _1284, _1287));
    float _1350 = dot(vec4(_1344, _1345, _1346, 1.0), vec4(_1277, _1280, _1283, _1286));
    float _1353 = dot(vec4(_1344, _1345, _1346, 1.0), vec4(_1276, _1279, _1282, _1285));
    float _1387;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1360 = dot(vec4(_1344, _1345, _1346, 1.0), vec4(_963, _967, _970, _973));
        float _1364 = dot(vec4(_1344, _1345, _1346, 1.0), vec4(_965, _968, _971, _974));
        float _1368 = dot(vec4(_1344, _1345, _1346, 1.0), vec4(_966, _969, _972, _975));
        float _1375 = dot(vec4(cbModelParam._m0[39u]), vec4(_1344, _1345, _1346, 1.0));
        _1387 = dot(vec3(isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0)), isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0)), isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1375) ? 0.0 : (isnan(0.0) ? _1375 : max(0.0, _1375))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1387 = 1.0;
    }
    float _1398;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1389 = dot(vec4(cbModelParam._m0[40u]), vec4(_1344, _1345, _1346, 1.0));
        _1398 = dot(vec3(isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0)), isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0)), isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1389) ? 0.0 : (isnan(0.0) ? _1389 : max(0.0, _1389))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1398 = 1.0;
    }
    float _1402 = (_1398 * cbModelParam._m0[1u].x) + (_1387 * (1.0 - cbModelParam._m0[1u].x));
    float _1412 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _380);
    float _1413 = isnan(_1412) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1412 : min(cbModelParam._m0[25u].z, _1412));
    float _1494;
    float _1496;
    float _1498;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1461 = fma(_633, cbModelParam._m0[13u].z, fma(_629, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _625)) + cbModelParam._m0[13u].w;
        float _1465 = fma(_633, cbModelParam._m0[14u].z, fma(_629, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _625)) + cbModelParam._m0[14u].w;
        float _1469 = fma(_633, cbModelParam._m0[15u].z, fma(_629, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _625)) + cbModelParam._m0[15u].w;
        float _1472 = fma(_571, cbModelParam._m0[13u].z, fma(_570, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _569));
        float _1475 = fma(_571, cbModelParam._m0[14u].z, fma(_570, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _569));
        float _1478 = fma(_571, cbModelParam._m0[15u].z, fma(_570, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _569));
        float _1506;
        if (_1472 > 0.0)
        {
            _1506 = abs((1.0 - _1461) / _1472);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1472 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1461 + 1.0) / _1472);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1506 = frontier_phi_19_17_ladder;
        }
        float _1713;
        if (_1475 > 0.0)
        {
            _1713 = abs((1.0 - _1465) / _1475);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1475 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1465 + 1.0) / _1475);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1713 = frontier_phi_28_24_ladder;
        }
        float _1967;
        if (_1478 > 0.0)
        {
            _1967 = abs((1.0 - _1469) / _1478);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1478 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1469 + 1.0) / _1478);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1967 = frontier_phi_40_35_ladder;
        }
        float _1969 = isnan(_1713) ? _1506 : (isnan(_1506) ? _1713 : min(_1506, _1713));
        float _1970 = isnan(_1967) ? _1969 : (isnan(_1969) ? _1967 : min(_1969, _1967));
        float _1974 = (_1970 * _1472) + _1461;
        float _1975 = (_1970 * _1475) + _1465;
        float _1976 = (_1970 * _1478) + _1469;
        float _1977 = _1970 * 9.9999997473787516355514526367188e-05;
        float _1979 = (-1.0) - _1977;
        float _1981 = _1977 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1976 > _1981) || ((_1976 < _1979) || ((_1975 > _1981) || ((_1975 < _1979) || ((_1974 < _1979) || (_1974 > _1981))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2104 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1976, cbModelParam._m0[9u].z, fma(_1975, cbModelParam._m0[9u].y, _1974 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1976, cbModelParam._m0[10u].z, fma(_1975, cbModelParam._m0[10u].y, _1974 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1976, cbModelParam._m0[11u].z, fma(_1975, cbModelParam._m0[11u].y, _1974 * cbModelParam._m0[11u].x))), _1413);
            frontier_phi_18_40_ladder = _2104.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2104.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2104.x * cbModelParam._m0[1u].y;
        }
        _1494 = frontier_phi_18_40_ladder_2;
        _1496 = frontier_phi_18_40_ladder_1;
        _1498 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1482 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_569, _570, _571), _1413);
        _1494 = _1482.x * cbModelParam._m0[1u].y;
        _1496 = _1482.y * cbModelParam._m0[1u].y;
        _1498 = _1482.z * cbModelParam._m0[1u].y;
    }
    float _1502 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _380);
    float _1503 = isnan(_1502) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1502 : min(cbModelParam._m0[25u].w, _1502));
    float _1596;
    float _1598;
    float _1600;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1560 = fma(_633, cbModelParam._m0[21u].z, fma(_629, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _625)) + cbModelParam._m0[21u].w;
        float _1564 = fma(_633, cbModelParam._m0[22u].z, fma(_629, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _625)) + cbModelParam._m0[22u].w;
        float _1568 = fma(_633, cbModelParam._m0[23u].z, fma(_629, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _625)) + cbModelParam._m0[23u].w;
        float _1571 = fma(_571, cbModelParam._m0[21u].z, fma(_570, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _569));
        float _1574 = fma(_571, cbModelParam._m0[22u].z, fma(_570, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _569));
        float _1577 = fma(_571, cbModelParam._m0[23u].z, fma(_570, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _569));
        float _1718;
        if (_1571 > 0.0)
        {
            _1718 = abs((1.0 - _1560) / _1571);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1571 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1560 + 1.0) / _1571);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1718 = frontier_phi_30_26_ladder;
        }
        float _1994;
        if (_1574 > 0.0)
        {
            _1994 = abs((1.0 - _1564) / _1574);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1574 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1564 + 1.0) / _1574);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1994 = frontier_phi_42_37_ladder;
        }
        float _2207;
        if (_1577 > 0.0)
        {
            _2207 = abs((1.0 - _1568) / _1577);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1577 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1568 + 1.0) / _1577);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2207 = frontier_phi_51_48_ladder;
        }
        float _2209 = isnan(_1994) ? _1718 : (isnan(_1718) ? _1994 : min(_1718, _1994));
        float _2210 = isnan(_2207) ? _2209 : (isnan(_2209) ? _2207 : min(_2209, _2207));
        float _2214 = (_2210 * _1571) + _1560;
        float _2215 = (_2210 * _1574) + _1564;
        float _2216 = (_2210 * _1577) + _1568;
        float _2217 = _2210 * 9.9999997473787516355514526367188e-05;
        float _2218 = (-1.0) - _2217;
        float _2220 = _2217 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2216 > _2220) || ((_2216 < _2218) || ((_2215 > _2220) || ((_2215 < _2218) || ((_2214 < _2218) || (_2214 > _2220))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2414 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2216, cbModelParam._m0[17u].z, fma(_2215, cbModelParam._m0[17u].y, _2214 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2216, cbModelParam._m0[18u].z, fma(_2215, cbModelParam._m0[18u].y, _2214 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2216, cbModelParam._m0[19u].z, fma(_2215, cbModelParam._m0[19u].y, _2214 * cbModelParam._m0[19u].x))), _1503);
            frontier_phi_27_51_ladder = _2414.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2414.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2414.x * cbModelParam._m0[1u].z;
        }
        _1596 = frontier_phi_27_51_ladder_2;
        _1598 = frontier_phi_27_51_ladder_1;
        _1600 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1580 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_569, _570, _571), _1503);
        _1596 = _1580.x * cbModelParam._m0[1u].z;
        _1598 = _1580.y * cbModelParam._m0[1u].z;
        _1600 = _1580.z * cbModelParam._m0[1u].z;
    }
    float _1613 = (((_596 * _546) + _597) * _561) * ((cbModelParam._m0[1u].w * (_1596 - _1494)) + _1494);
    float _1615 = (((_596 * _548) + _597) * _561) * ((cbModelParam._m0[1u].w * (_1598 - _1496)) + _1496);
    float _1617 = (((_596 * _549) + _597) * _561) * ((cbModelParam._m0[1u].w * (_1600 - _1498)) + _1498);
    float _1620 = fma(_1617, cbSceneParam._m0[89u].z, fma(_1615, cbSceneParam._m0[89u].y, _1613 * cbSceneParam._m0[89u].x));
    float _1623 = fma(_1617, cbSceneParam._m0[90u].z, fma(_1615, cbSceneParam._m0[90u].y, _1613 * cbSceneParam._m0[90u].x));
    float _1626 = fma(_1617, cbSceneParam._m0[91u].z, fma(_1615, cbSceneParam._m0[91u].y, _1613 * cbSceneParam._m0[91u].x));
    uvec4 _1636 = floatBitsToUint(cbInstanceData._m0[_520 + 5u]);
    uint _1638 = _1636.x * 14u;
    uint _1639 = _1638 + 13u;
    float _1646 = _561 + (-1.0);
    float _1651 = (cbLight._m0[_1639].x * _1646) + 1.0;
    float _1652 = (cbLight._m0[_1639].y * _1646) + 1.0;
    float _1653 = (cbLight._m0[_1639].z * _1646) + 1.0;
    float _1654 = (cbLight._m0[_1639].w * _1646) + 1.0;
    uint _1655 = _1638 + 5u;
    float _1661 = isnan(1.0) ? _1652 : (isnan(_1652) ? 1.0 : min(_1652, 1.0));
    uint _1665 = _1638 + 4u;
    float _1672 = isnan(1.0) ? _1651 : (isnan(_1651) ? 1.0 : min(_1651, 1.0));
    uint _1676 = _1638 | 1u;
    float _1687 = dot(vec3(cbLight._m0[_1638].xyz), vec3(_377, _378, _379));
    float _1690 = dot(vec3(cbLight._m0[_1676].xyz), vec3(_377, _378, _379));
    float _3887 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
    float _3898 = isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0));
    float _1695 = (isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0))) * 0.3183098733425140380859375;
    float _1697 = (isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0))) * 0.3183098733425140380859375;
    float _1704 = ((cbLight._m0[_1655].x * _1661) * _1697) + ((cbLight._m0[_1665].x * _1672) * _1695);
    float _1705 = ((_1661 * cbLight._m0[_1655].y) * _1697) + ((_1672 * cbLight._m0[_1665].y) * _1695);
    float _1706 = ((_1661 * cbLight._m0[_1655].z) * _1697) + ((_1672 * cbLight._m0[_1665].z) * _1695);
    uvec4 _1710 = floatBitsToUint(cbLight._m0[_1638 + 12u]);
    bool _1712 = _1710.x == 0u;
    float _1723;
    float _1725;
    float _1727;
    if (_1712)
    {
        _1723 = _1704;
        _1725 = _1705;
        _1727 = _1706;
    }
    else
    {
        uint _1731 = _1638 + 6u;
        float _1747 = (dot(vec3(cbLight._m0[_1638 + 2u].xyz), vec3(_377, _378, _379)) * 0.5) + 0.5;
        float _1748 = _1747 * _1747;
        float _3909 = isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0));
        float _1749 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
        float _1750 = isnan(1.0) ? _1653 : (isnan(_1653) ? 1.0 : min(_1653, 1.0));
        _1723 = (((cbLight._m0[_1731].x * 0.3183098733425140380859375) * _1749) * _1750) + _1704;
        _1725 = (((cbLight._m0[_1731].y * 0.3183098733425140380859375) * _1749) * _1750) + _1705;
        _1727 = (((cbLight._m0[_1731].z * 0.3183098733425140380859375) * _1749) * _1750) + _1706;
    }
    bool _1730 = _1710.y == 0u;
    float _1768;
    float _1770;
    float _1772;
    if (_1730)
    {
        _1768 = _1723;
        _1770 = _1725;
        _1772 = _1727;
    }
    else
    {
        uint _1938 = _1638 + 7u;
        float _1954 = (dot(vec3(cbLight._m0[_1638 + 3u].xyz), vec3(_377, _378, _379)) * 0.5) + 0.5;
        float _1955 = _1954 * _1954;
        float _3925 = isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0));
        float _1956 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
        float _1957 = isnan(1.0) ? _1654 : (isnan(_1654) ? 1.0 : min(_1654, 1.0));
        _1768 = (((cbLight._m0[_1938].x * 0.3183098733425140380859375) * _1956) * _1957) + _1723;
        _1770 = (((cbLight._m0[_1938].y * 0.3183098733425140380859375) * _1956) * _1957) + _1725;
        _1772 = (((cbLight._m0[_1938].z * 0.3183098733425140380859375) * _1956) * _1957) + _1727;
    }
    uint _1775 = _1638 + 8u;
    float _1788 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1638].w)) * _380) * 0.949999988079071044921875);
    float _1789 = _1788 * _1788;
    float _1790 = cbLight._m0[_1638].x + _459;
    float _1791 = cbLight._m0[_1638].y + _460;
    float _1792 = cbLight._m0[_1638].z + _461;
    float _1796 = inversesqrt(dot(vec3(_1790, _1791, _1792), vec3(_1790, _1791, _1792)));
    float _1797 = _1796 * _1790;
    float _1798 = _1796 * _1791;
    float _1799 = _1796 * _1792;
    float _1800 = dot(vec3(_377, _378, _379), vec3(cbLight._m0[_1638].xyz));
    float _3941 = isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0));
    float _1803 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
    float _3952 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _1804 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
    float _1805 = dot(vec3(_377, _378, _379), vec3(_1797, _1798, _1799));
    float _3963 = isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0));
    float _1808 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
    float _1809 = dot(vec3(cbLight._m0[_1638].xyz), vec3(_1797, _1798, _1799));
    float _3974 = isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0));
    float _1813 = _1789 * _1789;
    float _1817 = ((_1808 * _1808) * (_1813 + (-1.0))) + 1.0;
    float _1825 = exp2(log2(1.0 - (isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0)))) * 5.0);
    float _1826 = 0.959999978542327880859375 - _543;
    float _1828 = 0.959999978542327880859375 - _544;
    float _1829 = 0.959999978542327880859375 - _545;
    float _1836 = 1.0 - _1789;
    float _1847 = (0.5 / (((_1804 * ((_1803 * _1836) + _1789)) + 9.9999999392252902907785028219223e-09) + (((_1804 * _1836) + _1789) * _1803))) * _1803;
    float _3985 = isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0));
    float _1849 = (isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0))) * (_1813 / ((_1817 * _1817) * 3.141590118408203125));
    uint _1860 = _1638 + 9u;
    float _1871 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1676].w)) * _380) * 0.949999988079071044921875);
    float _1872 = _1871 * _1871;
    float _1873 = cbLight._m0[_1676].x + _459;
    float _1874 = cbLight._m0[_1676].y + _460;
    float _1875 = cbLight._m0[_1676].z + _461;
    float _1879 = inversesqrt(dot(vec3(_1873, _1874, _1875), vec3(_1873, _1874, _1875)));
    float _1880 = _1879 * _1873;
    float _1881 = _1879 * _1874;
    float _1882 = _1879 * _1875;
    float _1883 = dot(vec3(_377, _378, _379), vec3(cbLight._m0[_1676].xyz));
    float _3996 = isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0));
    float _1886 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
    float _1887 = dot(vec3(_377, _378, _379), vec3(_1880, _1881, _1882));
    float _4007 = isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0));
    float _1890 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
    float _1891 = dot(vec3(cbLight._m0[_1676].xyz), vec3(_1880, _1881, _1882));
    float _4018 = isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0));
    float _1895 = _1872 * _1872;
    float _1899 = ((_1890 * _1890) * (_1895 + (-1.0))) + 1.0;
    float _1906 = exp2(log2(1.0 - (isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0)))) * 5.0);
    float _1913 = 1.0 - _1872;
    float _1923 = (0.5 / (((_1804 * ((_1886 * _1913) + _1872)) + 9.9999999392252902907785028219223e-09) + (((_1804 * _1913) + _1872) * _1886))) * _1886;
    float _4029 = isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0));
    float _1925 = (isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0))) * (_1895 / ((_1899 * _1899) * 3.141590118408203125));
    float _1935 = (((((_1906 * _1826) + _546) * cbLight._m0[_1860].x) * _1925) * _1661) + (((((_1825 * _1826) + _546) * cbLight._m0[_1775].x) * _1849) * _1672);
    float _1936 = (((((_1906 * _1828) + _548) * cbLight._m0[_1860].y) * _1925) * _1661) + (((((_1825 * _1828) + _548) * cbLight._m0[_1775].y) * _1849) * _1672);
    float _1937 = (((((_1906 * _1829) + _549) * cbLight._m0[_1860].z) * _1925) * _1661) + (((((_1825 * _1829) + _549) * cbLight._m0[_1775].z) * _1849) * _1672);
    float _1999;
    float _2001;
    float _2003;
    if (_1712)
    {
        _1999 = _1935;
        _2001 = _1936;
        _2003 = _1937;
    }
    else
    {
        uint _2005 = _1638 + 2u;
        uint _2009 = _1638 + 10u;
        float _2023 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2005].w)) * _380) * 0.949999988079071044921875);
        float _2024 = _2023 * _2023;
        float _2025 = cbLight._m0[_2005].x + _459;
        float _2026 = cbLight._m0[_2005].y + _460;
        float _2027 = cbLight._m0[_2005].z + _461;
        float _2031 = inversesqrt(dot(vec3(_2025, _2026, _2027), vec3(_2025, _2026, _2027)));
        float _2032 = _2031 * _2025;
        float _2033 = _2031 * _2026;
        float _2034 = _2031 * _2027;
        float _2035 = dot(vec3(_377, _378, _379), vec3(cbLight._m0[_2005].xyz));
        float _4040 = isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0));
        float _2038 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _2039 = dot(vec3(_377, _378, _379), vec3(_2032, _2033, _2034));
        float _4051 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
        float _2042 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
        float _2043 = dot(vec3(cbLight._m0[_2005].xyz), vec3(_2032, _2033, _2034));
        float _4062 = isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0));
        float _2047 = _2024 * _2024;
        float _2051 = ((_2042 * _2042) * (_2047 + (-1.0))) + 1.0;
        float _2058 = exp2(log2(1.0 - (isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0)))) * 5.0);
        float _2065 = 1.0 - _2024;
        float _2075 = (0.5 / (((_1804 * ((_2038 * _2065) + _2024)) + 9.9999999392252902907785028219223e-09) + (((_1804 * _2065) + _2024) * _2038))) * _2038;
        float _4073 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
        float _2077 = (isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0))) * (_2047 / ((_2051 * _2051) * 3.141590118408203125));
        float _2078 = isnan(1.0) ? _1653 : (isnan(_1653) ? 1.0 : min(_1653, 1.0));
        _1999 = (((((_2058 * _1826) + _546) * cbLight._m0[_2009].x) * _2077) * _2078) + _1935;
        _2001 = (((((_2058 * _1828) + _548) * cbLight._m0[_2009].y) * _2077) * _2078) + _1936;
        _2003 = (((((_2058 * _1829) + _549) * cbLight._m0[_2009].z) * _2077) * _2078) + _1937;
    }
    float _2113;
    float _2115;
    float _2117;
    if (_1730)
    {
        _2113 = _1999;
        _2115 = _2001;
        _2117 = _2003;
    }
    else
    {
        uint _2124 = _1638 + 3u;
        uint _2128 = _1638 + 11u;
        float _2142 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2124].w)) * _380) * 0.949999988079071044921875);
        float _2143 = _2142 * _2142;
        float _2144 = cbLight._m0[_2124].x + _459;
        float _2145 = cbLight._m0[_2124].y + _460;
        float _2146 = cbLight._m0[_2124].z + _461;
        float _2150 = inversesqrt(dot(vec3(_2144, _2145, _2146), vec3(_2144, _2145, _2146)));
        float _2151 = _2150 * _2144;
        float _2152 = _2150 * _2145;
        float _2153 = _2150 * _2146;
        float _2154 = dot(vec3(_377, _378, _379), vec3(cbLight._m0[_2124].xyz));
        float _4089 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0));
        float _2157 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
        float _2158 = dot(vec3(_377, _378, _379), vec3(_2151, _2152, _2153));
        float _4100 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0));
        float _2161 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
        float _2162 = dot(vec3(cbLight._m0[_2124].xyz), vec3(_2151, _2152, _2153));
        float _4111 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
        float _2166 = _2143 * _2143;
        float _2170 = ((_2161 * _2161) * (_2166 + (-1.0))) + 1.0;
        float _2177 = exp2(log2(1.0 - (isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0)))) * 5.0);
        float _2184 = 1.0 - _2143;
        float _2194 = (0.5 / (((_1804 * ((_2157 * _2184) + _2143)) + 9.9999999392252902907785028219223e-09) + (((_1804 * _2184) + _2143) * _2157))) * _2157;
        float _4122 = isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0));
        float _2196 = (isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0))) * (_2166 / ((_2170 * _2170) * 3.141590118408203125));
        float _2197 = isnan(1.0) ? _1654 : (isnan(_1654) ? 1.0 : min(_1654, 1.0));
        _2113 = (((((_2177 * _1826) + _546) * cbLight._m0[_2128].x) * _2196) * _2197) + _1999;
        _2115 = (((((_2177 * _1828) + _548) * cbLight._m0[_2128].y) * _2196) * _2197) + _2001;
        _2117 = (((((_2177 * _1829) + _549) * cbLight._m0[_2128].z) * _2196) * _2197) + _2003;
    }
    float _2331;
    float _2333;
    float _2335;
    float _2337;
    float _2339;
    float _2341;
    if (_1636.y == 0u)
    {
        float _2272 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2273 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2272;
        float _2274 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2272;
        float _2275 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2272;
        uvec4 _2287 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2288 = _2287.x;
        uint _2299 = uint((float(_2287.y) * floor(float(uint(cbSceneParam._m0[85u].y * _481) / _2288))) + floor(float(uint(cbSceneParam._m0[85u].x * _480) / _2288)));
        float _2309 = (log2(_2275 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2310 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
        uint _2313 = uint(isnan(14.0) ? _2310 : (isnan(_2310) ? 14.0 : min(_2310, 14.0)));
        uvec4 _2318 = texelFetch(g_lightClusterGridBuffer, int(((_2313 << 2u) + (_2299 << 6u)) >> 2u));
        uint _2319 = _2318.x;
        uint _2320 = _2287.z;
        float _2419;
        float _2421;
        float _2423;
        float _2425;
        float _2427;
        float _2429;
        if (((((1u << ((_2320 >> 4u) & 15u)) + 4294967295u) & _2319) == 0u) || ((_2320 & 240u) == 0u))
        {
            _2419 = 0.0;
            _2421 = 0.0;
            _2423 = 0.0;
            _2425 = 0.0;
            _2427 = 0.0;
            _2429 = 0.0;
        }
        else
        {
            float _2420;
            float _2422;
            float _2424;
            float _2426;
            float _2428;
            float _2430;
            float _2571 = 0.0;
            float _2572 = 0.0;
            float _2573 = 0.0;
            float _2574 = 0.0;
            float _2575 = 0.0;
            float _2576 = 0.0;
            uint _2577 = 0u;
            uint _2586;
            bool _2587;
            for (;;)
            {
                _2586 = texelFetch(g_lightClassification, int((((_2313 << 5u) + (_2299 << 9u)) + (_2577 << 2u)) >> 2u)).x;
                _2587 = _2586 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2587)
                {
                    frontier_phi_68_pred = _2573;
                    frontier_phi_68_pred_1 = _2576;
                    frontier_phi_68_pred_2 = _2575;
                    frontier_phi_68_pred_3 = _2574;
                    frontier_phi_68_pred_4 = _2572;
                    frontier_phi_68_pred_5 = _2571;
                }
                else
                {
                    float _2716;
                    float _2717;
                    float _2718;
                    float _2719;
                    float _2720;
                    float _2721;
                    uint _2722;
                    _2716 = _2571;
                    _2717 = _2572;
                    _2718 = _2573;
                    _2719 = _2574;
                    _2720 = _2575;
                    _2721 = _2576;
                    _2722 = _2586;
                    float _2643;
                    float _2644;
                    float _2645;
                    float _2646;
                    float _2647;
                    float _2648;
                    for (;;)
                    {
                        uint _2726 = uint(findLSB(_2722)) + (_2577 << 5u);
                        uint _2723 = (_2722 + 4294967295u) & _2722;
                        uint _2728 = _2726 * 48u;
                        vec4 _2742 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2728)).x, texelFetch(g_PointLightRenderingBuffer, int(_2728 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2728 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2728 + 3u)).x));
                        uint _2748 = (_2726 * 48u) + 4u;
                        vec4 _2761 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2748)).x, texelFetch(g_PointLightRenderingBuffer, int(_2748 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2748 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2748 + 3u)).x));
                        uint _2767 = (_2726 * 48u) + 8u;
                        vec3 _2778 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2767)).x, texelFetch(g_PointLightRenderingBuffer, int(_2767 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2767 + 2u)).x));
                        float _2782 = _2742.x - _2273;
                        float _2783 = _2742.y - _2274;
                        float _2784 = _2742.z - _2275;
                        float _2785 = dot(vec3(_2782, _2783, _2784), vec3(_2782, _2783, _2784));
                        float _2788 = inversesqrt(_2785);
                        float _2789 = _2788 * _2782;
                        float _2790 = _2788 * _2783;
                        float _2791 = _2788 * _2784;
                        float _2792 = dot(vec3(_501, _504, _507), vec3(_2789, _2790, _2791));
                        float _2797 = 1.0 - (_2785 * _2742.w);
                        float _4148 = isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : max(_2797, 0.0));
                        float _2798 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
                        float _2799 = sqrt(_2785) * _2761.w;
                        float _2802 = 1.39999997615814208984375 / (_2799 + 1.39999997615814208984375);
                        float _2803 = _2802 * _2802;
                        float _2806 = ((1.0 - _2803) * _2792) + _2803;
                        float _2809 = _2799 * _2799;
                        float _2813 = ((isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : max(_2806, 0.0))) * _2798) / ((_2809 * 0.699999988079071044921875) + 1.0);
                        float _2817 = (-0.0) - _2273;
                        float _2818 = (-0.0) - _2274;
                        float _2819 = (-0.0) - _2275;
                        float _2823 = inversesqrt(dot(vec3(_2817, _2818, _2819), vec3(_2817, _2818, _2819)));
                        float _2824 = _2823 * _2817;
                        float _2825 = _2823 * _2818;
                        float _2826 = _2823 * _2819;
                        float _2834 = exp2(log2(1.0 / ((_2809 * 3.5) + 5.0)) * 0.25);
                        float _2835 = 1.0 - _577;
                        float _2842 = sqrt(1.0 - ((1.0 - (_2835 * _2835)) * (1.0 - (_2834 * _2834))));
                        float _2843 = _2842 * _2842;
                        float _2844 = _2843 * _2843;
                        float _2845 = _2824 + _2789;
                        float _2846 = _2825 + _2790;
                        float _2847 = _2826 + _2791;
                        float _2851 = inversesqrt(dot(vec3(_2845, _2846, _2847), vec3(_2845, _2846, _2847)));
                        float _2855 = dot(vec3(_501, _504, _507), vec3(_2824, _2825, _2826));
                        float _4164 = isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0));
                        float _2858 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
                        float _2859 = dot(vec3(_501, _504, _507), vec3(_2851 * _2845, _2851 * _2846, _2851 * _2847));
                        float _4175 = isnan(0.0) ? _2859 : (isnan(_2859) ? 0.0 : max(_2859, 0.0));
                        float _2862 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
                        float _2866 = ((_2862 * _2862) * (_2844 + (-1.0))) + 1.0;
                        float _2867 = _2802 * _2843;
                        float _2868 = _2867 * _2867;
                        float _2871 = ((1.0 - _2868) * _2792) + _2868;
                        float _4186 = isnan(0.0) ? _2871 : (isnan(_2871) ? 0.0 : max(_2871, 0.0));
                        float _2872 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
                        float _2873 = 1.0 - _2843;
                        float _2883 = (0.5 / (((_2872 * ((_2858 * _2873) + _2843)) + 9.9999999392252902907785028219223e-09) + (((_2872 * _2873) + _2843) * _2858))) * _2872;
                        float _4197 = isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : max(_2883, 0.0));
                        float _2894 = (((_2844 * 3.1415927410125732421875) * (isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0)))) / ((_2866 * _2866) * ((_2809 * 2.1991131305694580078125) + 3.141590118408203125))) * _2798;
                        _2646 = (_2813 * _2761.x) + _2719;
                        _2647 = (_2813 * _2761.y) + _2720;
                        _2648 = (_2813 * _2761.z) + _2721;
                        _2643 = (_2894 * _2778.x) + _2716;
                        _2644 = (_2894 * _2778.y) + _2717;
                        _2645 = (_2894 * _2778.z) + _2718;
                        if (_2723 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2716 = _2643;
                            _2717 = _2644;
                            _2718 = _2645;
                            _2719 = _2646;
                            _2720 = _2647;
                            _2721 = _2648;
                            _2722 = _2723;
                        }
                    }
                    frontier_phi_68_pred = _2645;
                    frontier_phi_68_pred_1 = _2648;
                    frontier_phi_68_pred_2 = _2647;
                    frontier_phi_68_pred_3 = _2646;
                    frontier_phi_68_pred_4 = _2644;
                    frontier_phi_68_pred_5 = _2643;
                }
                _2424 = frontier_phi_68_pred;
                _2430 = frontier_phi_68_pred_1;
                _2428 = frontier_phi_68_pred_2;
                _2426 = frontier_phi_68_pred_3;
                _2422 = frontier_phi_68_pred_4;
                _2420 = frontier_phi_68_pred_5;
                uint _2578 = _2577 + 1u;
                if (_2578 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2571 = _2420;
                    _2572 = _2422;
                    _2573 = _2424;
                    _2574 = _2426;
                    _2575 = _2428;
                    _2576 = _2430;
                    _2577 = _2578;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2419 = _2420;
            _2421 = _2422;
            _2423 = _2424;
            _2425 = _2426;
            _2427 = _2428;
            _2429 = _2430;
        }
        uvec4 _2433 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2434 = _2433.z;
        uint _2436 = (_2434 >> 8u) & 15u;
        float _2539;
        float _2541;
        float _2543;
        float _2545;
        float _2547;
        float _2549;
        if (((4294967295u << _2436) & _2319) == 0u)
        {
            _2539 = _2419;
            _2541 = _2421;
            _2543 = _2423;
            _2545 = _2425;
            _2547 = _2427;
            _2549 = _2429;
        }
        else
        {
            float _2564 = inversesqrt(dot(vec3(_2273, _2274, _2275), vec3(_2273, _2274, _2275)));
            float _2565 = _2564 * _2273;
            float _2566 = _2564 * _2274;
            float _2567 = _2564 * _2275;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2436 < ((_2434 >> 12u) & 15u))
            {
                float _2540;
                float _2542;
                float _2544;
                float _2546;
                float _2548;
                float _2550;
                float _2699 = _2419;
                float _2700 = _2421;
                float _2701 = _2423;
                float _2702 = _2425;
                float _2703 = _2427;
                float _2704 = _2429;
                uint _2705 = _2436;
                uint _2714;
                bool _2715;
                for (;;)
                {
                    _2714 = texelFetch(g_lightClassification, int((((_2313 << 5u) + (_2299 << 9u)) + (_2705 << 2u)) >> 2u)).x;
                    _2715 = _2714 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2715)
                    {
                        frontier_phi_79_pred = _2704;
                        frontier_phi_79_pred_1 = _2703;
                        frontier_phi_79_pred_2 = _2702;
                        frontier_phi_79_pred_3 = _2701;
                        frontier_phi_79_pred_4 = _2700;
                        frontier_phi_79_pred_5 = _2699;
                    }
                    else
                    {
                        float _2908;
                        float _2909;
                        float _2910;
                        float _2911;
                        float _2912;
                        float _2913;
                        float _3204;
                        float _3205;
                        float _3206;
                        float _3207;
                        float _3208;
                        float _3209;
                        float _2921 = _2699;
                        float _2922 = _2700;
                        float _2923 = _2701;
                        float _2924 = _2702;
                        float _2925 = _2703;
                        float _2926 = _2704;
                        uint _2927 = _2714;
                        uint _2928;
                        vec4 _2953;
                        float _2954;
                        vec4 _2969;
                        vec3 _2981;
                        vec4 _2997;
                        vec4 _3013;
                        float _3060;
                        bool _3061;
                        for (;;)
                        {
                            uint _2938 = ((_2705 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2927));
                            _2928 = (_2927 + 4294967295u) & _2927;
                            uint _2940 = _2938 * 40u;
                            _2953 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2940)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2940 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2940 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2940 + 3u)).x));
                            _2954 = _2953.w;
                            uint _2956 = (_2938 * 40u) + 4u;
                            _2969 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2956)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2956 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2956 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2956 + 3u)).x));
                            uint _2971 = (_2938 * 40u) + 8u;
                            _2981 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2971)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2971 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2971 + 2u)).x));
                            uint _2984 = (_2938 * 40u) + 16u;
                            _2997 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2984)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2984 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2984 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2984 + 3u)).x));
                            uint _3000 = (_2938 * 40u) + 20u;
                            _3013 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3000)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3000 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3000 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3000 + 3u)).x));
                            uint _3016 = (_2938 * 40u) + 24u;
                            vec4 _3029 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3016)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3016 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3016 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3016 + 3u)).x));
                            uint _3035 = (_2938 * 40u) + 28u;
                            vec4 _3048 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3035)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3035 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3035 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3035 + 3u)).x));
                            _3060 = fma(_2275, _3048.z, fma(_2274, _3048.y, _3048.x * _2273)) + _3048.w;
                            _3061 = !((fma(_2275, _3029.z, fma(_2274, _3029.y, _3029.x * _2273)) + _3029.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3061)
                            {
                                float _3088 = _2953.x - _2273;
                                float _3089 = _2953.y - _2274;
                                float _3090 = _2953.z - _2275;
                                float _3091 = dot(vec3(_3088, _3089, _3090), vec3(_3088, _3089, _3090));
                                float _3094 = inversesqrt(_3091);
                                float _3095 = _3094 * _3088;
                                float _3096 = _3094 * _3089;
                                float _3097 = _3094 * _3090;
                                float _3101 = 1.0 - (_3091 / (_2954 * _2954));
                                float _4208 = isnan(0.0) ? _3101 : (isnan(_3101) ? 0.0 : max(_3101, 0.0));
                                float _3102 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
                                float _3106 = sqrt(_3091) * _2969.w;
                                float _3108 = 1.39999997615814208984375 / (_3106 + 1.39999997615814208984375);
                                float _3109 = _3108 * _3108;
                                float _3112 = ((1.0 - _3109) * dot(vec3(_3095, _3096, _3097), vec3(_501, _504, _507))) + _3109;
                                float _3115 = _3106 * _3106;
                                float _3119 = (fma(_2275, _2997.z, fma(_2274, _2997.y, _2997.x * _2273)) + _2997.w) / _3060;
                                float _3120 = (fma(_2275, _3013.z, fma(_2274, _3013.y, _3013.x * _2273)) + _3013.w) / _3060;
                                float _3124 = 1.0 - dot(vec2(_3119, _3120), vec2(_3119, _3120));
                                float _4224 = isnan(0.0) ? _3124 : (isnan(_3124) ? 0.0 : max(_3124, 0.0));
                                float _3125 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
                                float _3126 = _3125 * (((isnan(0.0) ? _3112 : (isnan(_3112) ? 0.0 : max(_3112, 0.0))) * _3102) / ((_3115 * 0.699999988079071044921875) + 1.0));
                                float _3138 = exp2(log2(1.0 / ((_3115 * 3.5) + 5.0)) * 0.25);
                                float _3139 = 1.0 - _577;
                                float _3146 = sqrt(1.0 - ((1.0 - (_3139 * _3139)) * (1.0 - (_3138 * _3138))));
                                float _3147 = _3146 * _3146;
                                float _3148 = _3147 * _3147;
                                float _3149 = _3095 - _2565;
                                float _3150 = _3096 - _2566;
                                float _3151 = _3097 - _2567;
                                float _3155 = inversesqrt(dot(vec3(_3149, _3150, _3151), vec3(_3149, _3150, _3151)));
                                float _3159 = dot(vec3(_501, _504, _507), vec3((-0.0) - _2565, (-0.0) - _2566, (-0.0) - _2567));
                                float _4235 = isnan(0.0) ? _3159 : (isnan(_3159) ? 0.0 : max(_3159, 0.0));
                                float _3162 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
                                float _3163 = dot(vec3(_501, _504, _507), vec3(_3155 * _3149, _3155 * _3150, _3155 * _3151));
                                float _4246 = isnan(0.0) ? _3163 : (isnan(_3163) ? 0.0 : max(_3163, 0.0));
                                float _3166 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
                                float _3170 = ((_3166 * _3166) * (_3148 + (-1.0))) + 1.0;
                                float _3171 = _3108 * _3147;
                                float _3172 = _3171 * _3171;
                                float _3178 = ((1.0 - _3172) * dot(vec3(_501, _504, _507), vec3(_3095, _3096, _3097))) + _3172;
                                float _4257 = isnan(0.0) ? _3178 : (isnan(_3178) ? 0.0 : max(_3178, 0.0));
                                float _3179 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
                                float _3180 = 1.0 - _3147;
                                float _3190 = (0.5 / (((_3179 * ((_3162 * _3180) + _3147)) + 9.9999999392252902907785028219223e-09) + (((_3179 * _3180) + _3147) * _3162))) * _3179;
                                float _4268 = isnan(0.0) ? _3190 : (isnan(_3190) ? 0.0 : max(_3190, 0.0));
                                float _3200 = (_3125 * _3102) * (((_3148 * 3.1415927410125732421875) * (isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0)))) / ((_3170 * _3170) * ((_3115 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3126 * _2969.z;
                                frontier_phi_85_pred_1 = _3126 * _2969.y;
                                frontier_phi_85_pred_2 = _3126 * _2969.x;
                                frontier_phi_85_pred_3 = _3200 * _2981.z;
                                frontier_phi_85_pred_4 = _3200 * _2981.y;
                                frontier_phi_85_pred_5 = _3200 * _2981.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3209 = frontier_phi_85_pred;
                            _3208 = frontier_phi_85_pred_1;
                            _3207 = frontier_phi_85_pred_2;
                            _3206 = frontier_phi_85_pred_3;
                            _3205 = frontier_phi_85_pred_4;
                            _3204 = frontier_phi_85_pred_5;
                            _2911 = _3207 + _2924;
                            _2912 = _3208 + _2925;
                            _2913 = _3209 + _2926;
                            _2908 = _3204 + _2921;
                            _2909 = _3205 + _2922;
                            _2910 = _3206 + _2923;
                            if (_2928 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2921 = _2908;
                                _2922 = _2909;
                                _2923 = _2910;
                                _2924 = _2911;
                                _2925 = _2912;
                                _2926 = _2913;
                                _2927 = _2928;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2913;
                        frontier_phi_79_pred_1 = _2912;
                        frontier_phi_79_pred_2 = _2911;
                        frontier_phi_79_pred_3 = _2910;
                        frontier_phi_79_pred_4 = _2909;
                        frontier_phi_79_pred_5 = _2908;
                    }
                    _2550 = frontier_phi_79_pred;
                    _2548 = frontier_phi_79_pred_1;
                    _2546 = frontier_phi_79_pred_2;
                    _2544 = frontier_phi_79_pred_3;
                    _2542 = frontier_phi_79_pred_4;
                    _2540 = frontier_phi_79_pred_5;
                    uint _2706 = _2705 + 1u;
                    if (_2706 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2699 = _2540;
                        _2700 = _2542;
                        _2701 = _2544;
                        _2702 = _2546;
                        _2703 = _2548;
                        _2704 = _2550;
                        _2705 = _2706;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2546;
                frontier_phi_60_61_ladder_1 = _2550;
                frontier_phi_60_61_ladder_2 = _2548;
                frontier_phi_60_61_ladder_3 = _2544;
                frontier_phi_60_61_ladder_4 = _2542;
                frontier_phi_60_61_ladder_5 = _2540;
            }
            else
            {
                frontier_phi_60_61_ladder = _2425;
                frontier_phi_60_61_ladder_1 = _2429;
                frontier_phi_60_61_ladder_2 = _2427;
                frontier_phi_60_61_ladder_3 = _2423;
                frontier_phi_60_61_ladder_4 = _2421;
                frontier_phi_60_61_ladder_5 = _2419;
            }
            _2539 = frontier_phi_60_61_ladder_5;
            _2541 = frontier_phi_60_61_ladder_4;
            _2543 = frontier_phi_60_61_ladder_3;
            _2545 = frontier_phi_60_61_ladder;
            _2547 = frontier_phi_60_61_ladder_2;
            _2549 = frontier_phi_60_61_ladder_1;
        }
        float _2554 = isnan(1.0) ? _561 : (isnan(_561) ? 1.0 : min(_561, 1.0));
        _2331 = (_2554 * _2545) + _1768;
        _2333 = (_2554 * _2547) + _1770;
        _2335 = (_2554 * _2549) + _1772;
        _2337 = ((_2539 * _546) * _2554) + _2113;
        _2339 = ((_2541 * _548) * _2554) + _2115;
        _2341 = ((_2543 * _549) * _2554) + _2117;
    }
    else
    {
        _2331 = _1768;
        _2333 = _1770;
        _2335 = _1772;
        _2337 = _2113;
        _2339 = _2115;
        _2341 = _2117;
    }
    float _4284 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    float _4295 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _4306 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _2358 = ((isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0))) * (_2331 + ((isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0))) * _561))) + ((_2337 + ((isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0))) * _1402)) * cbPerFrame._m0[3u].x);
    float _2359 = ((isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0))) * (_2333 + ((isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0))) * _561))) + ((_2339 + ((isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0))) * _1402)) * cbPerFrame._m0[3u].x);
    float _2360 = ((isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0))) * (_2335 + ((isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0))) * _561))) + ((_2341 + ((isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0))) * _1402)) * cbPerFrame._m0[3u].x);
    uint _2361 = _520 + 6u;
    float _2369 = _480 / cbSceneParam._m0[86u].x;
    float _2370 = _481 / cbSceneParam._m0[86u].y;
    vec4 _2384 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2369, _2370, (log2((isnan(cbSceneParam._m0[77u].w) ? _400 : (isnan(_400) ? cbSceneParam._m0[77u].w : min(_400, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2386 = _2384.x;
    float _2387 = _2384.y;
    float _2388 = _2384.z;
    float _2389 = _2384.w;
    float _2481;
    float _2483;
    float _2485;
    float _2487;
    if (_400 > cbSceneParam._m0[78u].w)
    {
        float _2444 = isnan(_400) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _400 : min(cbSceneParam._m0[80u].w, _400));
        float _2445 = _2444 / _400;
        float _2456 = _2445 * _452;
        float _2457 = _453 * _2445;
        float _2458 = (-0.0) - _2457;
        float _2459 = _2445 * _454;
        float _2461 = (cbSceneParam._m0[77u].w * _2458) / _2444;
        float _2462 = _2461 + cbSceneParam._m0[79u].w;
        float _2463 = cbSceneParam._m0[79u].w - _2457;
        float _2469 = sqrt(((_2456 * _2456) + (_2457 * _2457)) + (_2459 * _2459));
        float _2472 = (1.0 - (cbSceneParam._m0[77u].w / _2444)) * _2469;
        float _2477 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2479 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2656;
        if (abs((_2458 - _2461) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2656 = ((((_2462 > 0.0) ? exp2(_2477 * _2462) : (2.0 - exp2(_2479 * _2462))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2472;
        }
        else
        {
            float _2600 = 1.0 / cbSceneParam._m0[80u].x;
            float _2601 = isnan(_2463) ? _2462 : (isnan(_2462) ? _2463 : max(_2462, _2463));
            float _2602 = isnan(_2463) ? _2462 : (isnan(_2462) ? _2463 : min(_2462, _2463));
            float _2611 = isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : min(_2601, 0.0));
            float _2612 = isnan(0.0) ? _2602 : (isnan(_2602) ? 0.0 : min(_2602, 0.0));
            _2656 = ((abs(_2469 / _2458) * cbSceneParam._m0[80u].y) * ((((_2611 - _2612) * 2.0) - ((exp2(_2477 * (isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : max(_2601, 0.0)))) - exp2(_2477 * (isnan(0.0) ? _2602 : (isnan(_2602) ? 0.0 : max(_2602, 0.0))))) * _2600)) - ((exp2(_2479 * _2611) - exp2(_2479 * _2612)) * _2600))) + (_2472 * cbSceneParam._m0[80u].z);
        }
        vec4 _2658 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2369, _2370, 1.0), 0.0);
        float _2667 = exp2((_2656 * (-1.44269502162933349609375)) * (1.0 - _2658.w));
        float _2668 = log2(_2667);
        float _2684 = log2(_2389);
        _2481 = (exp2(_2684 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2668 * cbSceneParam._m0[78u].x)) * _2658.x) / cbSceneParam._m0[78u].x)) + _2386;
        _2483 = (exp2(_2684 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2668 * cbSceneParam._m0[78u].y)) * _2658.y) / cbSceneParam._m0[78u].y)) + _2387;
        _2485 = (exp2(_2684 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2668 * cbSceneParam._m0[78u].z)) * _2658.z) / cbSceneParam._m0[78u].z)) + _2388;
        _2487 = _2667 * _2389;
    }
    else
    {
        _2481 = _2386;
        _2483 = _2387;
        _2485 = _2388;
        _2487 = _2389;
    }
    bool _2694;
    vec4 _2497;
    vec4 _2519;
    float _2521;
    float _2525;
    float _2526;
    float _2527;
    float _2528;
    bool _2538;
    for (;;)
    {
        _2497 = cbMatDynParam._m0[0u];
        float _2499 = roundEven(_2497.y);
        bool _2500 = _2499 == 3.0;
        float _2501 = log2(_2487);
        float _2508 = exp2(_2501 * cbSceneParam._m0[78u].x) * _2358;
        float _2509 = exp2(_2501 * cbSceneParam._m0[78u].y) * _2359;
        float _2510 = exp2(_2501 * cbSceneParam._m0[78u].z) * _2360;
        float _2517 = _468 + (-0.5);
        _2519 = cbMtdParam._m0[1u];
        _2521 = _2519.y * _2517;
        float _2524 = (_2499 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2525 = _2524 * (_2500 ? _2508 : (_2508 + (cbSceneParam._m0[72u].w * _2481)));
        _2526 = _2524 * (_2500 ? _2509 : (_2509 + (cbSceneParam._m0[72u].w * _2483)));
        _2527 = _2524 * (_2500 ? _2510 : (_2510 + (cbSceneParam._m0[72u].w * _2485)));
        _2528 = _2517 * 0.999000012874603271484375;
        _2538 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2538)
        {
            if ((cbInstanceData._m0[_520 + 7u].x + _2528) < 0.5)
            {
                _2694 = true;
                break;
            }
        }
        uint _2635 = _522 + uint(_2497.w);
        if ((cbInstanceData._m0[_2635].w < 1.0) && ((cbInstanceData._m0[_2635].w + _2528) < 0.5))
        {
            _2694 = true;
            break;
        }
        if ((_2521 + _250) < _2519.x)
        {
            _2694 = true;
            break;
        }
        _2694 = false;
        break;
    }
    float _2899;
    if (_2694)
    {
        discard_state = true;
        _2899 = 0.0;
    }
    else
    {
        _2899 = cbInstanceData._m0[_2361].w;
    }
    SV_Target.x = _2525;
    SV_Target.y = _2526;
    SV_Target.z = _2527;
    SV_Target.w = _2899;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2361].w;
    discard_exit();
}


