#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _882;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _188 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _195 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _196 = _195 * NORMAL.x;
    float _197 = _195 * NORMAL.y;
    float _198 = _195 * NORMAL.z;
    float _202 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _210;
    float _211;
    float _212;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _210 = (-0.0) - _196;
        _211 = (-0.0) - _197;
        _212 = (-0.0) - _198;
    }
    else
    {
        _210 = _196;
        _211 = _197;
        _212 = _198;
    }
    vec4 _238 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _244 = _238.x * cbMtdParam._m0[9u].x;
    float _245 = _238.y * cbMtdParam._m0[9u].y;
    float _246 = _238.z * cbMtdParam._m0[9u].z;
    vec4 _258 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _262 = _258.z;
    float _266 = (_258.x * 2.0) + (-1.0);
    float _268 = (_258.y * 2.0) + (-1.0);
    float _269 = dot(vec2(_266, _268), vec2(_266, _268));
    float _3196 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _275 = sqrt(1.0 - (isnan(1.0) ? _3196 : (isnan(_3196) ? 1.0 : min(_3196, 1.0))));
    float _287 = (TEXCOORD_3.x - (((1.0 - TEXCOORD_3.x) * 0.00999999977648258209228515625) * cbMtdParam._m0[12u].y)) * (cbMtdParam._m0[12u].z + 1.0);
    float _3207 = isnan(0.0) ? _287 : (isnan(_287) ? 0.0 : max(_287, 0.0));
    float _288 = isnan(1.0) ? _3207 : (isnan(_3207) ? 1.0 : min(_3207, 1.0));
    float _295 = (_288 * (cbMtdParam._m0[10u].x - _244)) + _244;
    float _296 = (_288 * (cbMtdParam._m0[10u].y - _245)) + _245;
    float _297 = (_288 * (cbMtdParam._m0[10u].z - _246)) + _246;
    vec4 _309 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _316 = (_309.x * 2.0) + (-1.0);
    float _317 = (_309.y * 2.0) + (-1.0);
    float _318 = dot(vec2(_316, _317), vec2(_316, _317));
    float _3218 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    float _326 = (_288 * (_309.z - _262)) + _262;
    float _338 = (((_316 - _266) + (cbMtdParam._m0[12u].w * _266)) * _288) + _266;
    float _339 = (((_317 - _268) + (cbMtdParam._m0[12u].w * _268)) * _288) + _268;
    float _340 = (_288 * (sqrt(1.0 - (isnan(1.0) ? _3218 : (isnan(_3218) ? 1.0 : min(_3218, 1.0)))) - _275)) + _275;
    float _343 = fma(_340, _210, fma(_339, _202 * TANGENT.x, (_188 * _180) * _338));
    float _346 = fma(_340, _211, fma(_339, _202 * TANGENT.y, (_188 * _181) * _338));
    float _349 = fma(_340, _212, fma(_339, _202 * TANGENT.z, (_188 * _182) * _338));
    float _353 = inversesqrt(dot(vec3(_343, _346, _349), vec3(_343, _346, _349)));
    float _354 = _353 * _343;
    float _355 = _353 * _346;
    float _356 = _353 * _349;
    float _3229 = isnan(0.0) ? _326 : (isnan(_326) ? 0.0 : max(_326, 0.0));
    float _357 = isnan(1.0) ? _3229 : (isnan(_3229) ? 1.0 : min(_3229, 1.0));
    float _3240 = isnan(0.0) ? _295 : (isnan(_295) ? 0.0 : max(_295, 0.0));
    float _3251 = isnan(0.0) ? _296 : (isnan(_296) ? 0.0 : max(_296, 0.0));
    float _3262 = isnan(0.0) ? _297 : (isnan(_297) ? 0.0 : max(_297, 0.0));
    float _376 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _418 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _428 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _418);
    float _429 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _418);
    float _430 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _418);
    float _434 = inversesqrt(dot(vec3(_428, _429, _430), vec3(_428, _429, _430)));
    float _435 = _428 * _434;
    float _436 = _429 * _434;
    float _437 = _430 * _434;
    float _443 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _444 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _465 = fma(_356, cbSceneParam._m0[5u].z, fma(_355, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _354));
    float _468 = fma(_356, cbSceneParam._m0[6u].z, fma(_355, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _354));
    float _471 = fma(_356, cbSceneParam._m0[7u].z, fma(_355, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _354));
    uint _484 = uint(roundEven(NORMAL.w)) * 13u;
    uint _487 = (_484 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _493 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3240 : (isnan(_3240) ? 1.0 : min(_3240, 1.0)))) * cbInstanceData._m0[_487].x;
    float _494 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3251 : (isnan(_3251) ? 1.0 : min(_3251, 1.0)))) * cbInstanceData._m0[_487].y;
    float _495 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3262 : (isnan(_3262) ? 1.0 : min(_3262, 1.0)))) * cbInstanceData._m0[_487].z;
    float _3273 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _496 = isnan(1.0) ? _3273 : (isnan(_3273) ? 1.0 : min(_3273, 1.0));
    float _3284 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _497 = isnan(1.0) ? _3284 : (isnan(_3284) ? 1.0 : min(_3284, 1.0));
    float _3295 = isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0));
    float _498 = isnan(1.0) ? _3295 : (isnan(_3295) ? 1.0 : min(_3295, 1.0));
    vec4 _507 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _443, cbSceneParam._m0[86u].y * _444));
    float _510 = _507.x * TEXCOORD_3.w;
    float _511 = dot(vec3(_354, _355, _356), vec3(_435, _436, _437));
    float _514 = _511 * 2.0;
    float _518 = (_514 * _354) - _435;
    float _519 = (_514 * _355) - _436;
    float _520 = (_514 * _356) - _437;
    float _524 = abs(dot(vec3(_435, _436, _437), vec3(_354, _355, _356)));
    float _3306 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _526 = sqrt(_357);
    float _539 = exp2((_526 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3306 : (isnan(_3306) ? 1.0 : min(_3306, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_526 * 3.0));
    float _571 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _575 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _579 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _881;
    float _883;
    float _884;
    float _885;
    float _886;
    float _887;
    float _888;
    float _889;
    float _890;
    float _891;
    float _892;
    float _893;
    float _894;
    float _895;
    float _896;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _606 = fma(_579, cbModelParam._m0[26u].z, fma(_575, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _571));
        float _610 = fma(_579, cbModelParam._m0[27u].z, fma(_575, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _571));
        float _614 = fma(_579, cbModelParam._m0[28u].z, fma(_575, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _571));
        float _639 = _571 + _354;
        float _640 = _575 + _355;
        float _641 = _579 + _356;
        float _651 = fma(_641, cbModelParam._m0[26u].z, fma(_640, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _639)) - _606;
        float _652 = fma(_641, cbModelParam._m0[27u].z, fma(_640, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _639)) - _610;
        float _653 = fma(_641, cbModelParam._m0[28u].z, fma(_640, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _639)) - _614;
        float _657 = inversesqrt(dot(vec3(_651, _652, _653), vec3(_651, _652, _653)));
        float _670 = ((_657 * _651) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_606 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _671 = ((_657 * _652) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_610 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _672 = ((_657 * _653) / cbModelParam._m0[34u].z) + ((((((_614 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _675 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_670, _671, _672), 0.0);
        vec4 _682 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_670, _671, _672), 0.0);
        vec4 _689 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_670, _671, _672), 0.0);
        vec4 _696 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_670, _671, _672), 0.0);
        float _709 = exp2((_675.w + (-0.5)) * 20.0) * 2.0;
        float _710 = _709 * (_675.x + (-0.5));
        float _711 = _709 * (_675.y + (-0.5));
        float _712 = _709 * (_675.z + (-0.5));
        float _719 = exp2((_682.w + (-0.5)) * 20.0) * 2.0;
        float _720 = _719 * (_682.x + (-0.5));
        float _721 = _719 * (_682.y + (-0.5));
        float _722 = _719 * (_682.z + (-0.5));
        float _729 = exp2((_689.w + (-0.5)) * 20.0) * 2.0;
        float _730 = _729 * (_689.x + (-0.5));
        float _731 = _729 * (_689.y + (-0.5));
        float _732 = _729 * (_689.z + (-0.5));
        float _739 = exp2((_696.w + (-0.5)) * 20.0) * 2.0;
        float _740 = _739 * (_696.x + (-0.5));
        float _741 = _739 * (_696.y + (-0.5));
        float _742 = _739 * (_696.z + (-0.5));
        float _743 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
        float _744 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
        float _745 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
        float _746 = _710 * 0.5;
        float _747 = _720 * 0.5;
        float _748 = _730 * 0.5;
        float _749 = dot(vec3(_746, _747, _748), vec3(_746, _747, _748));
        float _754 = (_749 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_749);
        float _763 = (dot(vec3(_354, _355, _356), vec3(_754 * _746, _754 * _747, _754 * _748)) + 1.0) * 0.5;
        float _3332 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
        float _773 = sqrt(((_747 * _747) + (_746 * _746)) + (_748 * _748)) / (_743 + 9.9999997473787516355514526367188e-06);
        float _3343 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
        float _774 = isnan(1.0) ? _3343 : (isnan(_3343) ? 1.0 : min(_3343, 1.0));
        float _775 = _774 * 2.0;
        float _779 = (1.0 - _774) / (_774 + 1.0);
        float _3354 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
        float _780 = isnan(1.0) ? _3354 : (isnan(_3354) ? 1.0 : min(_3354, 1.0));
        float _789 = ((((1.0 - _780) * (_775 + 2.0)) * exp2(log2(isnan(1.0) ? _3332 : (isnan(_3332) ? 1.0 : min(_3332, 1.0))) * (_775 + 1.0))) + _780) * _743;
        float _790 = _711 * 0.5;
        float _791 = _721 * 0.5;
        float _792 = _731 * 0.5;
        float _793 = dot(vec3(_790, _791, _792), vec3(_790, _791, _792));
        float _798 = (_793 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_793);
        float _806 = (dot(vec3(_354, _355, _356), vec3(_798 * _790, _798 * _791, _798 * _792)) + 1.0) * 0.5;
        float _3365 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
        float _815 = sqrt(((_791 * _791) + (_790 * _790)) + (_792 * _792)) / (_744 + 9.9999997473787516355514526367188e-06);
        float _3376 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
        float _816 = isnan(1.0) ? _3376 : (isnan(_3376) ? 1.0 : min(_3376, 1.0));
        float _817 = _816 * 2.0;
        float _821 = (1.0 - _816) / (_816 + 1.0);
        float _3387 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
        float _822 = isnan(1.0) ? _3387 : (isnan(_3387) ? 1.0 : min(_3387, 1.0));
        float _831 = ((((1.0 - _822) * (_817 + 2.0)) * exp2(log2(isnan(1.0) ? _3365 : (isnan(_3365) ? 1.0 : min(_3365, 1.0))) * (_817 + 1.0))) + _822) * _744;
        float _832 = _712 * 0.5;
        float _833 = _722 * 0.5;
        float _834 = _732 * 0.5;
        float _835 = dot(vec3(_832, _833, _834), vec3(_832, _833, _834));
        float _840 = (_835 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_835);
        float _848 = (dot(vec3(_354, _355, _356), vec3(_840 * _832, _840 * _833, _840 * _834)) + 1.0) * 0.5;
        float _3398 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
        float _857 = sqrt(((_833 * _833) + (_832 * _832)) + (_834 * _834)) / (_745 + 9.9999997473787516355514526367188e-06);
        float _3409 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
        float _858 = isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0));
        float _859 = _858 * 2.0;
        float _863 = (1.0 - _858) / (_858 + 1.0);
        float _3420 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
        float _864 = isnan(1.0) ? _3420 : (isnan(_3420) ? 1.0 : min(_3420, 1.0));
        float _873 = ((((1.0 - _864) * (_859 + 2.0)) * exp2(log2(isnan(1.0) ? _3398 : (isnan(_3398) ? 1.0 : min(_3398, 1.0))) * (_859 + 1.0))) + _864) * _745;
        _881 = _712;
        _883 = _711;
        _884 = _710;
        _885 = _722;
        _886 = _721;
        _887 = _720;
        _888 = _732;
        _889 = _731;
        _890 = _730;
        _891 = _745;
        _892 = _744;
        _893 = _743;
        _894 = cbModelParam._m0[36u].z * (isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0)));
        _895 = cbModelParam._m0[36u].z * (isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0)));
        _896 = cbModelParam._m0[36u].z * (isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0)));
    }
    else
    {
        _881 = _882;
        _883 = _882;
        _884 = _882;
        _885 = _882;
        _886 = _882;
        _887 = _882;
        _888 = _882;
        _889 = _882;
        _890 = _882;
        _891 = _882;
        _892 = _882;
        _893 = _882;
        _894 = 0.0;
        _895 = 0.0;
        _896 = 0.0;
    }
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _922 = fma(_579, cbModelParam._m0[30u].z, fma(_575, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _571));
        float _926 = fma(_579, cbModelParam._m0[31u].z, fma(_575, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _571));
        float _930 = fma(_579, cbModelParam._m0[32u].z, fma(_575, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _571));
        float _953 = _571 + _354;
        float _954 = _575 + _355;
        float _955 = _579 + _356;
        float _965 = fma(_955, cbModelParam._m0[30u].z, fma(_954, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _953)) - _922;
        float _966 = fma(_955, cbModelParam._m0[31u].z, fma(_954, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _953)) - _926;
        float _967 = fma(_955, cbModelParam._m0[32u].z, fma(_954, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _953)) - _930;
        float _971 = inversesqrt(dot(vec3(_965, _966, _967), vec3(_965, _966, _967)));
        float _984 = ((_971 * _965) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_922 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _985 = ((_971 * _966) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_926 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _986 = ((_971 * _967) / cbModelParam._m0[35u].z) + ((((((_930 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _988 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_984, _985, _986), 0.0);
        vec4 _995 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_984, _985, _986), 0.0);
        vec4 _1002 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_984, _985, _986), 0.0);
        vec4 _1009 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_984, _985, _986), 0.0);
        float _1021 = exp2((_988.w + (-0.5)) * 20.0) * 2.0;
        float _1022 = _1021 * (_988.x + (-0.5));
        float _1023 = _1021 * (_988.y + (-0.5));
        float _1024 = _1021 * (_988.z + (-0.5));
        float _1031 = exp2((_995.w + (-0.5)) * 20.0) * 2.0;
        float _1032 = _1031 * (_995.x + (-0.5));
        float _1033 = _1031 * (_995.y + (-0.5));
        float _1034 = _1031 * (_995.z + (-0.5));
        float _1041 = exp2((_1002.w + (-0.5)) * 20.0) * 2.0;
        float _1042 = _1041 * (_1002.x + (-0.5));
        float _1043 = _1041 * (_1002.y + (-0.5));
        float _1044 = _1041 * (_1002.z + (-0.5));
        float _1051 = exp2((_1009.w + (-0.5)) * 20.0) * 2.0;
        float _1052 = _1051 * (_1009.x + (-0.5));
        float _1053 = _1051 * (_1009.y + (-0.5));
        float _1054 = _1051 * (_1009.z + (-0.5));
        float _1055 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1056 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1057 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1058 = _1022 * 0.5;
        float _1059 = _1032 * 0.5;
        float _1060 = _1042 * 0.5;
        float _1061 = dot(vec3(_1058, _1059, _1060), vec3(_1058, _1059, _1060));
        float _1066 = (_1061 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1061);
        float _1074 = (dot(vec3(_354, _355, _356), vec3(_1066 * _1058, _1066 * _1059, _1066 * _1060)) + 1.0) * 0.5;
        float _3461 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1083 = sqrt(((_1059 * _1059) + (_1058 * _1058)) + (_1060 * _1060)) / (_1055 + 9.9999997473787516355514526367188e-06);
        float _3472 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1084 = isnan(1.0) ? _3472 : (isnan(_3472) ? 1.0 : min(_3472, 1.0));
        float _1085 = _1084 * 2.0;
        float _1089 = (1.0 - _1084) / (_1084 + 1.0);
        float _3483 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1090 = isnan(1.0) ? _3483 : (isnan(_3483) ? 1.0 : min(_3483, 1.0));
        float _1099 = ((((1.0 - _1090) * (_1085 + 2.0)) * exp2(log2(isnan(1.0) ? _3461 : (isnan(_3461) ? 1.0 : min(_3461, 1.0))) * (_1085 + 1.0))) + _1090) * _1055;
        float _1100 = _1023 * 0.5;
        float _1101 = _1033 * 0.5;
        float _1102 = _1043 * 0.5;
        float _1103 = dot(vec3(_1100, _1101, _1102), vec3(_1100, _1101, _1102));
        float _1108 = (_1103 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1103);
        float _1116 = (dot(vec3(_354, _355, _356), vec3(_1108 * _1100, _1108 * _1101, _1108 * _1102)) + 1.0) * 0.5;
        float _3494 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1125 = sqrt(((_1101 * _1101) + (_1100 * _1100)) + (_1102 * _1102)) / (_1056 + 9.9999997473787516355514526367188e-06);
        float _3505 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1126 = isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0));
        float _1127 = _1126 * 2.0;
        float _1131 = (1.0 - _1126) / (_1126 + 1.0);
        float _3516 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1132 = isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0));
        float _1141 = ((((1.0 - _1132) * (_1127 + 2.0)) * exp2(log2(isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0))) * (_1127 + 1.0))) + _1132) * _1056;
        float _1142 = _1024 * 0.5;
        float _1143 = _1034 * 0.5;
        float _1144 = _1044 * 0.5;
        float _1145 = dot(vec3(_1142, _1143, _1144), vec3(_1142, _1143, _1144));
        float _1150 = (_1145 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1145);
        float _1158 = (dot(vec3(_354, _355, _356), vec3(_1150 * _1142, _1150 * _1143, _1150 * _1144)) + 1.0) * 0.5;
        float _3527 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1167 = sqrt(((_1143 * _1143) + (_1142 * _1142)) + (_1144 * _1144)) / (_1057 + 9.9999997473787516355514526367188e-06);
        float _3538 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1168 = isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0));
        float _1169 = _1168 * 2.0;
        float _1173 = (1.0 - _1168) / (_1168 + 1.0);
        float _3549 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1174 = isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0));
        float _1183 = ((((1.0 - _1174) * (_1169 + 2.0)) * exp2(log2(isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0))) * (_1169 + 1.0))) + _1174) * _1057;
        _1191 = _1024;
        _1192 = _1023;
        _1193 = _1022;
        _1194 = _1034;
        _1195 = _1033;
        _1196 = _1032;
        _1197 = _1044;
        _1198 = _1043;
        _1199 = _1042;
        _1200 = _1057;
        _1201 = _1056;
        _1202 = _1055;
        _1203 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0)));
        _1204 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0)));
        _1205 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0)));
    }
    else
    {
        _1191 = _882;
        _1192 = _882;
        _1193 = _882;
        _1194 = _882;
        _1195 = _882;
        _1196 = _882;
        _1197 = _882;
        _1198 = _882;
        _1199 = _882;
        _1200 = _882;
        _1201 = _882;
        _1202 = _882;
        _1203 = 0.0;
        _1204 = 0.0;
        _1205 = 0.0;
    }
    float _1215 = (cbModelParam._m0[1u].x * (_1203 - _894)) + _894;
    float _1216 = (cbModelParam._m0[1u].x * (_1204 - _895)) + _895;
    float _1217 = (cbModelParam._m0[1u].x * (_1205 - _896)) + _896;
    float _1238 = fma(_1217, cbSceneParam._m0[89u].z, fma(_1216, cbSceneParam._m0[89u].y, _1215 * cbSceneParam._m0[89u].x));
    float _1241 = fma(_1217, cbSceneParam._m0[90u].z, fma(_1216, cbSceneParam._m0[90u].y, _1215 * cbSceneParam._m0[90u].x));
    float _1244 = fma(_1217, cbSceneParam._m0[91u].z, fma(_1216, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1215));
    float _1259 = _518 * 0.5;
    float _1260 = _519 * 0.5;
    float _1261 = _520 * 0.5;
    float _1262 = dot(vec4(_1259, _1260, _1261, 1.0), vec4(_1193, _1196, _1199, _1202));
    float _1265 = dot(vec4(_1259, _1260, _1261, 1.0), vec4(_1192, _1195, _1198, _1201));
    float _1268 = dot(vec4(_1259, _1260, _1261, 1.0), vec4(_1191, _1194, _1197, _1200));
    float _1302;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1275 = dot(vec4(_1259, _1260, _1261, 1.0), vec4(_881, _885, _888, _891));
        float _1279 = dot(vec4(_1259, _1260, _1261, 1.0), vec4(_883, _886, _889, _892));
        float _1283 = dot(vec4(_1259, _1260, _1261, 1.0), vec4(_884, _887, _890, _893));
        float _1290 = dot(vec4(cbModelParam._m0[39u]), vec4(_1259, _1260, _1261, 1.0));
        _1302 = dot(vec3(isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0)), isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0)), isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1290) ? 0.0 : (isnan(0.0) ? _1290 : max(0.0, _1290))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1302 = 1.0;
    }
    float _1313;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1304 = dot(vec4(cbModelParam._m0[40u]), vec4(_1259, _1260, _1261, 1.0));
        _1313 = dot(vec3(isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0)), isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0)), isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1304) ? 0.0 : (isnan(0.0) ? _1304 : max(0.0, _1304))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1313 = 1.0;
    }
    float _1317 = (_1313 * cbModelParam._m0[1u].x) + (_1302 * (1.0 - cbModelParam._m0[1u].x));
    float _1327 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _357);
    float _1328 = isnan(_1327) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1327 : min(cbModelParam._m0[25u].z, _1327));
    float _1409;
    float _1411;
    float _1413;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1376 = fma(_579, cbModelParam._m0[13u].z, fma(_575, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _571)) + cbModelParam._m0[13u].w;
        float _1380 = fma(_579, cbModelParam._m0[14u].z, fma(_575, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _571)) + cbModelParam._m0[14u].w;
        float _1384 = fma(_579, cbModelParam._m0[15u].z, fma(_575, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _571)) + cbModelParam._m0[15u].w;
        float _1387 = fma(_520, cbModelParam._m0[13u].z, fma(_519, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _518));
        float _1390 = fma(_520, cbModelParam._m0[14u].z, fma(_519, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _518));
        float _1393 = fma(_520, cbModelParam._m0[15u].z, fma(_519, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _518));
        float _1421;
        if (_1387 > 0.0)
        {
            _1421 = abs((1.0 - _1376) / _1387);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1387 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1376 + 1.0) / _1387);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1421 = frontier_phi_16_14_ladder;
        }
        float _1626;
        if (_1390 > 0.0)
        {
            _1626 = abs((1.0 - _1380) / _1390);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1390 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1380 + 1.0) / _1390);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1626 = frontier_phi_25_21_ladder;
        }
        float _1869;
        if (_1393 > 0.0)
        {
            _1869 = abs((1.0 - _1384) / _1393);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1393 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1384 + 1.0) / _1393);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1869 = frontier_phi_37_32_ladder;
        }
        float _1871 = isnan(_1626) ? _1421 : (isnan(_1421) ? _1626 : min(_1421, _1626));
        float _1872 = isnan(_1869) ? _1871 : (isnan(_1871) ? _1869 : min(_1871, _1869));
        float _1876 = (_1872 * _1387) + _1376;
        float _1877 = (_1872 * _1390) + _1380;
        float _1878 = (_1872 * _1393) + _1384;
        float _1879 = _1872 * 9.9999997473787516355514526367188e-05;
        float _1881 = (-1.0) - _1879;
        float _1883 = _1879 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1878 > _1883) || ((_1878 < _1881) || ((_1877 > _1883) || ((_1877 < _1881) || ((_1876 < _1881) || (_1876 > _1883))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2002 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1878, cbModelParam._m0[9u].z, fma(_1877, cbModelParam._m0[9u].y, _1876 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1878, cbModelParam._m0[10u].z, fma(_1877, cbModelParam._m0[10u].y, _1876 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1878, cbModelParam._m0[11u].z, fma(_1877, cbModelParam._m0[11u].y, _1876 * cbModelParam._m0[11u].x))), _1328);
            frontier_phi_15_37_ladder = _2002.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2002.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2002.x * cbModelParam._m0[1u].y;
        }
        _1409 = frontier_phi_15_37_ladder_2;
        _1411 = frontier_phi_15_37_ladder_1;
        _1413 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1397 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_518, _519, _520), _1328);
        _1409 = _1397.x * cbModelParam._m0[1u].y;
        _1411 = _1397.y * cbModelParam._m0[1u].y;
        _1413 = _1397.z * cbModelParam._m0[1u].y;
    }
    float _1417 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _357);
    float _1418 = isnan(_1417) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1417 : min(cbModelParam._m0[25u].w, _1417));
    float _1511;
    float _1513;
    float _1515;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1475 = fma(_579, cbModelParam._m0[21u].z, fma(_575, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _571)) + cbModelParam._m0[21u].w;
        float _1479 = fma(_579, cbModelParam._m0[22u].z, fma(_575, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _571)) + cbModelParam._m0[22u].w;
        float _1483 = fma(_579, cbModelParam._m0[23u].z, fma(_575, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _571)) + cbModelParam._m0[23u].w;
        float _1486 = fma(_520, cbModelParam._m0[21u].z, fma(_519, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _518));
        float _1489 = fma(_520, cbModelParam._m0[22u].z, fma(_519, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _518));
        float _1492 = fma(_520, cbModelParam._m0[23u].z, fma(_519, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _518));
        float _1631;
        if (_1486 > 0.0)
        {
            _1631 = abs((1.0 - _1475) / _1486);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1486 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1475 + 1.0) / _1486);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1631 = frontier_phi_27_23_ladder;
        }
        float _1896;
        if (_1489 > 0.0)
        {
            _1896 = abs((1.0 - _1479) / _1489);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1489 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1479 + 1.0) / _1489);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1896 = frontier_phi_39_34_ladder;
        }
        float _2101;
        if (_1492 > 0.0)
        {
            _2101 = abs((1.0 - _1483) / _1492);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1492 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1483 + 1.0) / _1492);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2101 = frontier_phi_48_45_ladder;
        }
        float _2103 = isnan(_1896) ? _1631 : (isnan(_1631) ? _1896 : min(_1631, _1896));
        float _2104 = isnan(_2101) ? _2103 : (isnan(_2103) ? _2101 : min(_2103, _2101));
        float _2108 = (_2104 * _1486) + _1475;
        float _2109 = (_2104 * _1489) + _1479;
        float _2110 = (_2104 * _1492) + _1483;
        float _2111 = _2104 * 9.9999997473787516355514526367188e-05;
        float _2112 = (-1.0) - _2111;
        float _2114 = _2111 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2110 > _2114) || ((_2110 < _2112) || ((_2109 > _2114) || ((_2109 < _2112) || ((_2108 < _2112) || (_2108 > _2114))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2308 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2110, cbModelParam._m0[17u].z, fma(_2109, cbModelParam._m0[17u].y, _2108 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2110, cbModelParam._m0[18u].z, fma(_2109, cbModelParam._m0[18u].y, _2108 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2110, cbModelParam._m0[19u].z, fma(_2109, cbModelParam._m0[19u].y, _2108 * cbModelParam._m0[19u].x))), _1418);
            frontier_phi_24_48_ladder = _2308.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2308.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2308.x * cbModelParam._m0[1u].z;
        }
        _1511 = frontier_phi_24_48_ladder_2;
        _1513 = frontier_phi_24_48_ladder_1;
        _1515 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1495 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_518, _519, _520), _1418);
        _1511 = _1495.x * cbModelParam._m0[1u].z;
        _1513 = _1495.y * cbModelParam._m0[1u].z;
        _1515 = _1495.z * cbModelParam._m0[1u].z;
    }
    float _1527 = ((((1.0 - _539) * ((_526 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_539 * _526)) * _510;
    float _1528 = _1527 * ((cbModelParam._m0[1u].w * (_1511 - _1409)) + _1409);
    float _1529 = _1527 * ((cbModelParam._m0[1u].w * (_1513 - _1411)) + _1411);
    float _1530 = _1527 * ((cbModelParam._m0[1u].w * (_1515 - _1413)) + _1413);
    float _1533 = fma(_1530, cbSceneParam._m0[89u].z, fma(_1529, cbSceneParam._m0[89u].y, _1528 * cbSceneParam._m0[89u].x));
    float _1536 = fma(_1530, cbSceneParam._m0[90u].z, fma(_1529, cbSceneParam._m0[90u].y, _1528 * cbSceneParam._m0[90u].x));
    float _1539 = fma(_1530, cbSceneParam._m0[91u].z, fma(_1529, cbSceneParam._m0[91u].y, _1528 * cbSceneParam._m0[91u].x));
    uvec4 _1549 = floatBitsToUint(cbInstanceData._m0[_484 + 5u]);
    uint _1551 = _1549.x * 14u;
    uint _1552 = _1551 + 13u;
    float _1559 = _510 + (-1.0);
    float _1564 = (cbLight._m0[_1552].x * _1559) + 1.0;
    float _1565 = (cbLight._m0[_1552].y * _1559) + 1.0;
    float _1566 = (cbLight._m0[_1552].z * _1559) + 1.0;
    float _1567 = (cbLight._m0[_1552].w * _1559) + 1.0;
    uint _1568 = _1551 + 5u;
    float _1574 = isnan(1.0) ? _1565 : (isnan(_1565) ? 1.0 : min(_1565, 1.0));
    uint _1578 = _1551 + 4u;
    float _1585 = isnan(1.0) ? _1564 : (isnan(_1564) ? 1.0 : min(_1564, 1.0));
    uint _1589 = _1551 | 1u;
    float _1600 = dot(vec3(cbLight._m0[_1551].xyz), vec3(_354, _355, _356));
    float _1603 = dot(vec3(cbLight._m0[_1589].xyz), vec3(_354, _355, _356));
    float _3685 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
    float _3696 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
    float _1608 = (isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0))) * 0.3183098733425140380859375;
    float _1610 = (isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0))) * 0.3183098733425140380859375;
    float _1617 = ((cbLight._m0[_1568].x * _1574) * _1610) + ((cbLight._m0[_1578].x * _1585) * _1608);
    float _1618 = ((_1574 * cbLight._m0[_1568].y) * _1610) + ((_1585 * cbLight._m0[_1578].y) * _1608);
    float _1619 = ((_1574 * cbLight._m0[_1568].z) * _1610) + ((_1585 * cbLight._m0[_1578].z) * _1608);
    uvec4 _1623 = floatBitsToUint(cbLight._m0[_1551 + 12u]);
    bool _1625 = _1623.x == 0u;
    float _1636;
    float _1638;
    float _1640;
    if (_1625)
    {
        _1636 = _1617;
        _1638 = _1618;
        _1640 = _1619;
    }
    else
    {
        uint _1644 = _1551 + 6u;
        float _1660 = (dot(vec3(cbLight._m0[_1551 + 2u].xyz), vec3(_354, _355, _356)) * 0.5) + 0.5;
        float _1661 = _1660 * _1660;
        float _3707 = isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0));
        float _1662 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
        float _1663 = isnan(1.0) ? _1566 : (isnan(_1566) ? 1.0 : min(_1566, 1.0));
        _1636 = (((cbLight._m0[_1644].x * 0.3183098733425140380859375) * _1662) * _1663) + _1617;
        _1638 = (((cbLight._m0[_1644].y * 0.3183098733425140380859375) * _1662) * _1663) + _1618;
        _1640 = (((cbLight._m0[_1644].z * 0.3183098733425140380859375) * _1662) * _1663) + _1619;
    }
    bool _1643 = _1623.y == 0u;
    float _1681;
    float _1683;
    float _1685;
    if (_1643)
    {
        _1681 = _1636;
        _1683 = _1638;
        _1685 = _1640;
    }
    else
    {
        uint _1840 = _1551 + 7u;
        float _1856 = (dot(vec3(cbLight._m0[_1551 + 3u].xyz), vec3(_354, _355, _356)) * 0.5) + 0.5;
        float _1857 = _1856 * _1856;
        float _3723 = isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0));
        float _1858 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
        float _1859 = isnan(1.0) ? _1567 : (isnan(_1567) ? 1.0 : min(_1567, 1.0));
        _1681 = (((cbLight._m0[_1840].x * 0.3183098733425140380859375) * _1858) * _1859) + _1636;
        _1683 = (((cbLight._m0[_1840].y * 0.3183098733425140380859375) * _1858) * _1859) + _1638;
        _1685 = (((cbLight._m0[_1840].z * 0.3183098733425140380859375) * _1858) * _1859) + _1640;
    }
    uint _1688 = _1551 + 8u;
    float _1701 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1551].w)) * _357) * 0.949999988079071044921875);
    float _1702 = _1701 * _1701;
    float _1703 = cbLight._m0[_1551].x + _435;
    float _1704 = cbLight._m0[_1551].y + _436;
    float _1705 = cbLight._m0[_1551].z + _437;
    float _1709 = inversesqrt(dot(vec3(_1703, _1704, _1705), vec3(_1703, _1704, _1705)));
    float _1710 = _1709 * _1703;
    float _1711 = _1709 * _1704;
    float _1712 = _1709 * _1705;
    float _1713 = dot(vec3(_354, _355, _356), vec3(cbLight._m0[_1551].xyz));
    float _3739 = isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0));
    float _1716 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
    float _3750 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _1717 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
    float _1718 = dot(vec3(_354, _355, _356), vec3(_1710, _1711, _1712));
    float _3761 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
    float _1721 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
    float _1722 = dot(vec3(cbLight._m0[_1551].xyz), vec3(_1710, _1711, _1712));
    float _3772 = isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0));
    float _1726 = _1702 * _1702;
    float _1730 = ((_1721 * _1721) * (_1726 + (-1.0))) + 1.0;
    float _1741 = (exp2(log2(1.0 - (isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1742 = 1.0 - _1702;
    float _1753 = (0.5 / (((_1717 * ((_1716 * _1742) + _1702)) + 9.9999999392252902907785028219223e-09) + (((_1717 * _1742) + _1702) * _1716))) * _1716;
    float _3783 = isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0));
    float _1755 = (isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0))) * (_1726 / ((_1730 * _1730) * 3.141590118408203125));
    uint _1766 = _1551 + 9u;
    float _1777 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1589].w)) * _357) * 0.949999988079071044921875);
    float _1778 = _1777 * _1777;
    float _1779 = cbLight._m0[_1589].x + _435;
    float _1780 = cbLight._m0[_1589].y + _436;
    float _1781 = cbLight._m0[_1589].z + _437;
    float _1785 = inversesqrt(dot(vec3(_1779, _1780, _1781), vec3(_1779, _1780, _1781)));
    float _1786 = _1785 * _1779;
    float _1787 = _1785 * _1780;
    float _1788 = _1785 * _1781;
    float _1789 = dot(vec3(_354, _355, _356), vec3(cbLight._m0[_1589].xyz));
    float _3794 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
    float _1792 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
    float _1793 = dot(vec3(_354, _355, _356), vec3(_1786, _1787, _1788));
    float _3805 = isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0));
    float _1796 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
    float _1797 = dot(vec3(cbLight._m0[_1589].xyz), vec3(_1786, _1787, _1788));
    float _3816 = isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0));
    float _1801 = _1778 * _1778;
    float _1805 = ((_1796 * _1796) * (_1801 + (-1.0))) + 1.0;
    float _1814 = (exp2(log2(1.0 - (isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1815 = 1.0 - _1778;
    float _1825 = (0.5 / (((_1717 * ((_1792 * _1815) + _1778)) + 9.9999999392252902907785028219223e-09) + (((_1717 * _1815) + _1778) * _1792))) * _1792;
    float _3827 = isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0));
    float _1827 = (isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0))) * (_1801 / ((_1805 * _1805) * 3.141590118408203125));
    float _1837 = (((_1814 * cbLight._m0[_1766].x) * _1827) * _1574) + (((_1741 * cbLight._m0[_1688].x) * _1755) * _1585);
    float _1838 = (((_1814 * cbLight._m0[_1766].y) * _1827) * _1574) + (((_1741 * cbLight._m0[_1688].y) * _1755) * _1585);
    float _1839 = (((_1814 * cbLight._m0[_1766].z) * _1827) * _1574) + (((_1741 * cbLight._m0[_1688].z) * _1755) * _1585);
    float _1901;
    float _1903;
    float _1905;
    if (_1625)
    {
        _1901 = _1837;
        _1903 = _1838;
        _1905 = _1839;
    }
    else
    {
        uint _1907 = _1551 + 2u;
        uint _1911 = _1551 + 10u;
        float _1925 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1907].w)) * _357) * 0.949999988079071044921875);
        float _1926 = _1925 * _1925;
        float _1927 = cbLight._m0[_1907].x + _435;
        float _1928 = cbLight._m0[_1907].y + _436;
        float _1929 = cbLight._m0[_1907].z + _437;
        float _1933 = inversesqrt(dot(vec3(_1927, _1928, _1929), vec3(_1927, _1928, _1929)));
        float _1934 = _1933 * _1927;
        float _1935 = _1933 * _1928;
        float _1936 = _1933 * _1929;
        float _1937 = dot(vec3(_354, _355, _356), vec3(cbLight._m0[_1907].xyz));
        float _3838 = isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0));
        float _1940 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
        float _1941 = dot(vec3(_354, _355, _356), vec3(_1934, _1935, _1936));
        float _3849 = isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0));
        float _1944 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
        float _1945 = dot(vec3(cbLight._m0[_1907].xyz), vec3(_1934, _1935, _1936));
        float _3860 = isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0));
        float _1949 = _1926 * _1926;
        float _1953 = ((_1944 * _1944) * (_1949 + (-1.0))) + 1.0;
        float _1962 = (exp2(log2(1.0 - (isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1963 = 1.0 - _1926;
        float _1973 = (0.5 / (((_1717 * ((_1940 * _1963) + _1926)) + 9.9999999392252902907785028219223e-09) + (((_1717 * _1963) + _1926) * _1940))) * _1940;
        float _3871 = isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0));
        float _1975 = (isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0))) * (_1949 / ((_1953 * _1953) * 3.141590118408203125));
        float _1976 = isnan(1.0) ? _1566 : (isnan(_1566) ? 1.0 : min(_1566, 1.0));
        _1901 = (((_1962 * cbLight._m0[_1911].x) * _1975) * _1976) + _1837;
        _1903 = (((_1962 * cbLight._m0[_1911].y) * _1975) * _1976) + _1838;
        _1905 = (((_1962 * cbLight._m0[_1911].z) * _1975) * _1976) + _1839;
    }
    float _2011;
    float _2013;
    float _2015;
    if (_1643)
    {
        _2011 = _1901;
        _2013 = _1903;
        _2015 = _1905;
    }
    else
    {
        uint _2022 = _1551 + 3u;
        uint _2026 = _1551 + 11u;
        float _2040 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2022].w)) * _357) * 0.949999988079071044921875);
        float _2041 = _2040 * _2040;
        float _2042 = cbLight._m0[_2022].x + _435;
        float _2043 = cbLight._m0[_2022].y + _436;
        float _2044 = cbLight._m0[_2022].z + _437;
        float _2048 = inversesqrt(dot(vec3(_2042, _2043, _2044), vec3(_2042, _2043, _2044)));
        float _2049 = _2048 * _2042;
        float _2050 = _2048 * _2043;
        float _2051 = _2048 * _2044;
        float _2052 = dot(vec3(_354, _355, _356), vec3(cbLight._m0[_2022].xyz));
        float _3887 = isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0));
        float _2055 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
        float _2056 = dot(vec3(_354, _355, _356), vec3(_2049, _2050, _2051));
        float _3898 = isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0));
        float _2059 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
        float _2060 = dot(vec3(cbLight._m0[_2022].xyz), vec3(_2049, _2050, _2051));
        float _3909 = isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0));
        float _2064 = _2041 * _2041;
        float _2068 = ((_2059 * _2059) * (_2064 + (-1.0))) + 1.0;
        float _2077 = (exp2(log2(1.0 - (isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2078 = 1.0 - _2041;
        float _2088 = (0.5 / (((_1717 * ((_2055 * _2078) + _2041)) + 9.9999999392252902907785028219223e-09) + (((_1717 * _2078) + _2041) * _2055))) * _2055;
        float _3920 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
        float _2090 = (isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0))) * (_2064 / ((_2068 * _2068) * 3.141590118408203125));
        float _2091 = isnan(1.0) ? _1567 : (isnan(_1567) ? 1.0 : min(_1567, 1.0));
        _2011 = (((_2077 * cbLight._m0[_2026].x) * _2090) * _2091) + _1901;
        _2013 = (((_2077 * cbLight._m0[_2026].y) * _2090) * _2091) + _1903;
        _2015 = (((_2077 * cbLight._m0[_2026].z) * _2090) * _2091) + _1905;
    }
    float _2225;
    float _2227;
    float _2229;
    float _2231;
    float _2233;
    float _2235;
    if (_1549.y == 0u)
    {
        float _2166 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2167 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2166;
        float _2168 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2166;
        float _2169 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2166;
        uvec4 _2181 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2182 = _2181.x;
        uint _2193 = uint((float(_2181.y) * floor(float(uint(cbSceneParam._m0[85u].y * _444) / _2182))) + floor(float(uint(cbSceneParam._m0[85u].x * _443) / _2182)));
        float _2203 = (log2(_2169 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2204 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
        uint _2207 = uint(isnan(14.0) ? _2204 : (isnan(_2204) ? 14.0 : min(_2204, 14.0)));
        uvec4 _2212 = texelFetch(g_lightClusterGridBuffer, int(((_2207 << 2u) + (_2193 << 6u)) >> 2u));
        uint _2213 = _2212.x;
        uint _2214 = _2181.z;
        float _2313;
        float _2315;
        float _2317;
        float _2319;
        float _2321;
        float _2323;
        if (((((1u << ((_2214 >> 4u) & 15u)) + 4294967295u) & _2213) == 0u) || ((_2214 & 240u) == 0u))
        {
            _2313 = 0.0;
            _2315 = 0.0;
            _2317 = 0.0;
            _2319 = 0.0;
            _2321 = 0.0;
            _2323 = 0.0;
        }
        else
        {
            float _2314;
            float _2316;
            float _2318;
            float _2320;
            float _2322;
            float _2324;
            float _2457 = 0.0;
            float _2458 = 0.0;
            float _2459 = 0.0;
            float _2460 = 0.0;
            float _2461 = 0.0;
            float _2462 = 0.0;
            uint _2463 = 0u;
            uint _2472;
            bool _2473;
            for (;;)
            {
                _2472 = texelFetch(g_lightClassification, int((((_2207 << 5u) + (_2193 << 9u)) + (_2463 << 2u)) >> 2u)).x;
                _2473 = _2472 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2473)
                {
                    frontier_phi_63_pred = _2462;
                    frontier_phi_63_pred_1 = _2461;
                    frontier_phi_63_pred_2 = _2460;
                    frontier_phi_63_pred_3 = _2459;
                    frontier_phi_63_pred_4 = _2458;
                    frontier_phi_63_pred_5 = _2457;
                }
                else
                {
                    float _2581;
                    float _2582;
                    float _2583;
                    float _2584;
                    float _2585;
                    float _2586;
                    uint _2587;
                    _2581 = _2457;
                    _2582 = _2458;
                    _2583 = _2459;
                    _2584 = _2460;
                    _2585 = _2461;
                    _2586 = _2462;
                    _2587 = _2472;
                    float _2513;
                    float _2514;
                    float _2515;
                    float _2516;
                    float _2517;
                    float _2518;
                    for (;;)
                    {
                        uint _2591 = uint(findLSB(_2587)) + (_2463 << 5u);
                        uint _2588 = (_2587 + 4294967295u) & _2587;
                        uint _2593 = _2591 * 48u;
                        vec4 _2607 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2593)).x, texelFetch(g_PointLightRenderingBuffer, int(_2593 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2593 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2593 + 3u)).x));
                        uint _2613 = (_2591 * 48u) + 4u;
                        vec4 _2626 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2613)).x, texelFetch(g_PointLightRenderingBuffer, int(_2613 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2613 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2613 + 3u)).x));
                        uint _2632 = (_2591 * 48u) + 8u;
                        vec3 _2643 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2632)).x, texelFetch(g_PointLightRenderingBuffer, int(_2632 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2632 + 2u)).x));
                        float _2647 = _2607.x - _2167;
                        float _2648 = _2607.y - _2168;
                        float _2649 = _2607.z - _2169;
                        float _2650 = dot(vec3(_2647, _2648, _2649), vec3(_2647, _2648, _2649));
                        float _2653 = inversesqrt(_2650);
                        float _2654 = _2653 * _2647;
                        float _2655 = _2653 * _2648;
                        float _2656 = _2653 * _2649;
                        float _2657 = dot(vec3(_465, _468, _471), vec3(_2654, _2655, _2656));
                        float _2662 = 1.0 - (_2650 * _2607.w);
                        float _3946 = isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0));
                        float _2663 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
                        float _2664 = sqrt(_2650) * _2626.w;
                        float _2667 = 1.39999997615814208984375 / (_2664 + 1.39999997615814208984375);
                        float _2668 = _2667 * _2667;
                        float _2671 = ((1.0 - _2668) * _2657) + _2668;
                        float _2674 = _2664 * _2664;
                        float _2678 = ((isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0))) * _2663) / ((_2674 * 0.699999988079071044921875) + 1.0);
                        float _2682 = (-0.0) - _2167;
                        float _2683 = (-0.0) - _2168;
                        float _2684 = (-0.0) - _2169;
                        float _2688 = inversesqrt(dot(vec3(_2682, _2683, _2684), vec3(_2682, _2683, _2684)));
                        float _2689 = _2688 * _2682;
                        float _2690 = _2688 * _2683;
                        float _2691 = _2688 * _2684;
                        float _2699 = exp2(log2(1.0 / ((_2674 * 3.5) + 5.0)) * 0.25);
                        float _2700 = 1.0 - _526;
                        float _2707 = sqrt(1.0 - ((1.0 - (_2700 * _2700)) * (1.0 - (_2699 * _2699))));
                        float _2708 = _2707 * _2707;
                        float _2709 = _2708 * _2708;
                        float _2710 = _2689 + _2654;
                        float _2711 = _2690 + _2655;
                        float _2712 = _2691 + _2656;
                        float _2716 = inversesqrt(dot(vec3(_2710, _2711, _2712), vec3(_2710, _2711, _2712)));
                        float _2720 = dot(vec3(_465, _468, _471), vec3(_2689, _2690, _2691));
                        float _3962 = isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : max(_2720, 0.0));
                        float _2723 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
                        float _2724 = dot(vec3(_465, _468, _471), vec3(_2716 * _2710, _2716 * _2711, _2716 * _2712));
                        float _3973 = isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0));
                        float _2727 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
                        float _2731 = ((_2727 * _2727) * (_2709 + (-1.0))) + 1.0;
                        float _2732 = _2667 * _2708;
                        float _2733 = _2732 * _2732;
                        float _2736 = ((1.0 - _2733) * _2657) + _2733;
                        float _3984 = isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0));
                        float _2737 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
                        float _2738 = 1.0 - _2708;
                        float _2748 = (0.5 / (((_2737 * ((_2723 * _2738) + _2708)) + 9.9999999392252902907785028219223e-09) + (((_2737 * _2738) + _2708) * _2723))) * _2737;
                        float _3995 = isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : max(_2748, 0.0));
                        float _2759 = (((_2709 * 3.1415927410125732421875) * (isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0)))) / ((_2731 * _2731) * ((_2674 * 2.1991131305694580078125) + 3.141590118408203125))) * _2663;
                        _2516 = (_2678 * _2626.x) + _2584;
                        _2517 = (_2678 * _2626.y) + _2585;
                        _2518 = (_2678 * _2626.z) + _2586;
                        _2513 = (_2759 * _2643.x) + _2581;
                        _2514 = (_2759 * _2643.y) + _2582;
                        _2515 = (_2759 * _2643.z) + _2583;
                        if (_2588 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2581 = _2513;
                            _2582 = _2514;
                            _2583 = _2515;
                            _2584 = _2516;
                            _2585 = _2517;
                            _2586 = _2518;
                            _2587 = _2588;
                        }
                    }
                    frontier_phi_63_pred = _2518;
                    frontier_phi_63_pred_1 = _2517;
                    frontier_phi_63_pred_2 = _2516;
                    frontier_phi_63_pred_3 = _2515;
                    frontier_phi_63_pred_4 = _2514;
                    frontier_phi_63_pred_5 = _2513;
                }
                _2324 = frontier_phi_63_pred;
                _2322 = frontier_phi_63_pred_1;
                _2320 = frontier_phi_63_pred_2;
                _2318 = frontier_phi_63_pred_3;
                _2316 = frontier_phi_63_pred_4;
                _2314 = frontier_phi_63_pred_5;
                uint _2464 = _2463 + 1u;
                if (_2464 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2457 = _2314;
                    _2458 = _2316;
                    _2459 = _2318;
                    _2460 = _2320;
                    _2461 = _2322;
                    _2462 = _2324;
                    _2463 = _2464;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2313 = _2314;
            _2315 = _2316;
            _2317 = _2318;
            _2319 = _2320;
            _2321 = _2322;
            _2323 = _2324;
        }
        uvec4 _2327 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2328 = _2327.z;
        uint _2330 = (_2328 >> 8u) & 15u;
        float _2425;
        float _2427;
        float _2429;
        float _2431;
        float _2433;
        float _2435;
        if (((4294967295u << _2330) & _2213) == 0u)
        {
            _2425 = _2313;
            _2427 = _2315;
            _2429 = _2317;
            _2431 = _2319;
            _2433 = _2321;
            _2435 = _2323;
        }
        else
        {
            float _2450 = inversesqrt(dot(vec3(_2167, _2168, _2169), vec3(_2167, _2168, _2169)));
            float _2451 = _2450 * _2167;
            float _2452 = _2450 * _2168;
            float _2453 = _2450 * _2169;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2330 < ((_2328 >> 12u) & 15u))
            {
                float _2426;
                float _2428;
                float _2430;
                float _2432;
                float _2434;
                float _2436;
                float _2564 = _2313;
                float _2565 = _2315;
                float _2566 = _2317;
                float _2567 = _2319;
                float _2568 = _2321;
                float _2569 = _2323;
                uint _2570 = _2330;
                uint _2579;
                bool _2580;
                for (;;)
                {
                    _2579 = texelFetch(g_lightClassification, int((((_2207 << 5u) + (_2193 << 9u)) + (_2570 << 2u)) >> 2u)).x;
                    _2580 = _2579 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2580)
                    {
                        frontier_phi_69_pred = _2569;
                        frontier_phi_69_pred_1 = _2568;
                        frontier_phi_69_pred_2 = _2567;
                        frontier_phi_69_pred_3 = _2566;
                        frontier_phi_69_pred_4 = _2565;
                        frontier_phi_69_pred_5 = _2564;
                    }
                    else
                    {
                        float _2764;
                        float _2765;
                        float _2766;
                        float _2767;
                        float _2768;
                        float _2769;
                        float _3060;
                        float _3061;
                        float _3062;
                        float _3063;
                        float _3064;
                        float _3065;
                        float _2777 = _2564;
                        float _2778 = _2565;
                        float _2779 = _2566;
                        float _2780 = _2567;
                        float _2781 = _2568;
                        float _2782 = _2569;
                        uint _2783 = _2579;
                        uint _2784;
                        vec4 _2809;
                        float _2810;
                        vec4 _2825;
                        vec3 _2837;
                        vec4 _2853;
                        vec4 _2869;
                        float _2916;
                        bool _2917;
                        for (;;)
                        {
                            uint _2794 = ((_2570 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2783));
                            _2784 = (_2783 + 4294967295u) & _2783;
                            uint _2796 = _2794 * 40u;
                            _2809 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2796)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2796 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2796 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2796 + 3u)).x));
                            _2810 = _2809.w;
                            uint _2812 = (_2794 * 40u) + 4u;
                            _2825 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2812)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2812 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2812 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2812 + 3u)).x));
                            uint _2827 = (_2794 * 40u) + 8u;
                            _2837 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2827)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2827 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2827 + 2u)).x));
                            uint _2840 = (_2794 * 40u) + 16u;
                            _2853 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2840)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2840 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2840 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2840 + 3u)).x));
                            uint _2856 = (_2794 * 40u) + 20u;
                            _2869 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2856)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2856 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2856 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2856 + 3u)).x));
                            uint _2872 = (_2794 * 40u) + 24u;
                            vec4 _2885 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2872)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2872 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2872 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2872 + 3u)).x));
                            uint _2891 = (_2794 * 40u) + 28u;
                            vec4 _2904 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2891)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2891 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2891 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2891 + 3u)).x));
                            _2916 = fma(_2169, _2904.z, fma(_2168, _2904.y, _2904.x * _2167)) + _2904.w;
                            _2917 = !((fma(_2169, _2885.z, fma(_2168, _2885.y, _2885.x * _2167)) + _2885.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2917)
                            {
                                float _2944 = _2809.x - _2167;
                                float _2945 = _2809.y - _2168;
                                float _2946 = _2809.z - _2169;
                                float _2947 = dot(vec3(_2944, _2945, _2946), vec3(_2944, _2945, _2946));
                                float _2950 = inversesqrt(_2947);
                                float _2951 = _2950 * _2944;
                                float _2952 = _2950 * _2945;
                                float _2953 = _2950 * _2946;
                                float _2957 = 1.0 - (_2947 / (_2810 * _2810));
                                float _4006 = isnan(0.0) ? _2957 : (isnan(_2957) ? 0.0 : max(_2957, 0.0));
                                float _2958 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
                                float _2962 = sqrt(_2947) * _2825.w;
                                float _2964 = 1.39999997615814208984375 / (_2962 + 1.39999997615814208984375);
                                float _2965 = _2964 * _2964;
                                float _2968 = ((1.0 - _2965) * dot(vec3(_2951, _2952, _2953), vec3(_465, _468, _471))) + _2965;
                                float _2971 = _2962 * _2962;
                                float _2975 = (fma(_2169, _2853.z, fma(_2168, _2853.y, _2853.x * _2167)) + _2853.w) / _2916;
                                float _2976 = (fma(_2169, _2869.z, fma(_2168, _2869.y, _2869.x * _2167)) + _2869.w) / _2916;
                                float _2980 = 1.0 - dot(vec2(_2975, _2976), vec2(_2975, _2976));
                                float _4022 = isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : max(_2980, 0.0));
                                float _2981 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
                                float _2982 = _2981 * (((isnan(0.0) ? _2968 : (isnan(_2968) ? 0.0 : max(_2968, 0.0))) * _2958) / ((_2971 * 0.699999988079071044921875) + 1.0));
                                float _2994 = exp2(log2(1.0 / ((_2971 * 3.5) + 5.0)) * 0.25);
                                float _2995 = 1.0 - _526;
                                float _3002 = sqrt(1.0 - ((1.0 - (_2995 * _2995)) * (1.0 - (_2994 * _2994))));
                                float _3003 = _3002 * _3002;
                                float _3004 = _3003 * _3003;
                                float _3005 = _2951 - _2451;
                                float _3006 = _2952 - _2452;
                                float _3007 = _2953 - _2453;
                                float _3011 = inversesqrt(dot(vec3(_3005, _3006, _3007), vec3(_3005, _3006, _3007)));
                                float _3015 = dot(vec3(_465, _468, _471), vec3((-0.0) - _2451, (-0.0) - _2452, (-0.0) - _2453));
                                float _4033 = isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : max(_3015, 0.0));
                                float _3018 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
                                float _3019 = dot(vec3(_465, _468, _471), vec3(_3011 * _3005, _3011 * _3006, _3011 * _3007));
                                float _4044 = isnan(0.0) ? _3019 : (isnan(_3019) ? 0.0 : max(_3019, 0.0));
                                float _3022 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
                                float _3026 = ((_3022 * _3022) * (_3004 + (-1.0))) + 1.0;
                                float _3027 = _2964 * _3003;
                                float _3028 = _3027 * _3027;
                                float _3034 = ((1.0 - _3028) * dot(vec3(_465, _468, _471), vec3(_2951, _2952, _2953))) + _3028;
                                float _4055 = isnan(0.0) ? _3034 : (isnan(_3034) ? 0.0 : max(_3034, 0.0));
                                float _3035 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
                                float _3036 = 1.0 - _3003;
                                float _3046 = (0.5 / (((_3035 * ((_3018 * _3036) + _3003)) + 9.9999999392252902907785028219223e-09) + (((_3035 * _3036) + _3003) * _3018))) * _3035;
                                float _4066 = isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : max(_3046, 0.0));
                                float _3056 = (_2981 * _2958) * (((_3004 * 3.1415927410125732421875) * (isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0)))) / ((_3026 * _3026) * ((_2971 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _2982 * _2825.z;
                                frontier_phi_75_pred_1 = _2982 * _2825.y;
                                frontier_phi_75_pred_2 = _2982 * _2825.x;
                                frontier_phi_75_pred_3 = _3056 * _2837.z;
                                frontier_phi_75_pred_4 = _3056 * _2837.y;
                                frontier_phi_75_pred_5 = _3056 * _2837.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3065 = frontier_phi_75_pred;
                            _3064 = frontier_phi_75_pred_1;
                            _3063 = frontier_phi_75_pred_2;
                            _3062 = frontier_phi_75_pred_3;
                            _3061 = frontier_phi_75_pred_4;
                            _3060 = frontier_phi_75_pred_5;
                            _2767 = _3063 + _2780;
                            _2768 = _3064 + _2781;
                            _2769 = _3065 + _2782;
                            _2764 = _3060 + _2777;
                            _2765 = _3061 + _2778;
                            _2766 = _3062 + _2779;
                            if (_2784 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2777 = _2764;
                                _2778 = _2765;
                                _2779 = _2766;
                                _2780 = _2767;
                                _2781 = _2768;
                                _2782 = _2769;
                                _2783 = _2784;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2769;
                        frontier_phi_69_pred_1 = _2768;
                        frontier_phi_69_pred_2 = _2767;
                        frontier_phi_69_pred_3 = _2766;
                        frontier_phi_69_pred_4 = _2765;
                        frontier_phi_69_pred_5 = _2764;
                    }
                    _2436 = frontier_phi_69_pred;
                    _2434 = frontier_phi_69_pred_1;
                    _2432 = frontier_phi_69_pred_2;
                    _2430 = frontier_phi_69_pred_3;
                    _2428 = frontier_phi_69_pred_4;
                    _2426 = frontier_phi_69_pred_5;
                    uint _2571 = _2570 + 1u;
                    if (_2571 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2564 = _2426;
                        _2565 = _2428;
                        _2566 = _2430;
                        _2567 = _2432;
                        _2568 = _2434;
                        _2569 = _2436;
                        _2570 = _2571;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2436;
                frontier_phi_57_58_ladder_1 = _2434;
                frontier_phi_57_58_ladder_2 = _2432;
                frontier_phi_57_58_ladder_3 = _2430;
                frontier_phi_57_58_ladder_4 = _2428;
                frontier_phi_57_58_ladder_5 = _2426;
            }
            else
            {
                frontier_phi_57_58_ladder = _2323;
                frontier_phi_57_58_ladder_1 = _2321;
                frontier_phi_57_58_ladder_2 = _2319;
                frontier_phi_57_58_ladder_3 = _2317;
                frontier_phi_57_58_ladder_4 = _2315;
                frontier_phi_57_58_ladder_5 = _2313;
            }
            _2425 = frontier_phi_57_58_ladder_5;
            _2427 = frontier_phi_57_58_ladder_4;
            _2429 = frontier_phi_57_58_ladder_3;
            _2431 = frontier_phi_57_58_ladder_2;
            _2433 = frontier_phi_57_58_ladder_1;
            _2435 = frontier_phi_57_58_ladder;
        }
        float _2440 = isnan(1.0) ? _510 : (isnan(_510) ? 1.0 : min(_510, 1.0));
        _2225 = (_2440 * _2431) + _1681;
        _2227 = (_2440 * _2433) + _1683;
        _2229 = (_2440 * _2435) + _1685;
        _2231 = ((_2425 * 0.039999999105930328369140625) * _2440) + _2011;
        _2233 = ((_2427 * 0.039999999105930328369140625) * _2440) + _2013;
        _2235 = ((_2429 * 0.039999999105930328369140625) * _2440) + _2015;
    }
    else
    {
        _2225 = _1681;
        _2227 = _1683;
        _2229 = _1685;
        _2231 = _2011;
        _2233 = _2013;
        _2235 = _2015;
    }
    float _4082 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _4093 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _4104 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    uint _2255 = _484 + 6u;
    float _2263 = _443 / cbSceneParam._m0[86u].x;
    float _2264 = _444 / cbSceneParam._m0[86u].y;
    vec4 _2278 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2263, _2264, (log2((isnan(cbSceneParam._m0[77u].w) ? _376 : (isnan(_376) ? cbSceneParam._m0[77u].w : min(_376, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2280 = _2278.x;
    float _2281 = _2278.y;
    float _2282 = _2278.z;
    float _2283 = _2278.w;
    float _2375;
    float _2377;
    float _2379;
    float _2381;
    if (_376 > cbSceneParam._m0[78u].w)
    {
        float _2338 = isnan(_376) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _376 : min(cbSceneParam._m0[80u].w, _376));
        float _2339 = _2338 / _376;
        float _2350 = _2339 * _428;
        float _2351 = _429 * _2339;
        float _2352 = (-0.0) - _2351;
        float _2353 = _2339 * _430;
        float _2355 = (cbSceneParam._m0[77u].w * _2352) / _2338;
        float _2356 = _2355 + cbSceneParam._m0[79u].w;
        float _2357 = cbSceneParam._m0[79u].w - _2351;
        float _2363 = sqrt(((_2350 * _2350) + (_2351 * _2351)) + (_2353 * _2353));
        float _2366 = (1.0 - (cbSceneParam._m0[77u].w / _2338)) * _2363;
        float _2371 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2373 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2526;
        if (abs((_2352 - _2355) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2526 = ((((_2356 > 0.0) ? exp2(_2371 * _2356) : (2.0 - exp2(_2373 * _2356))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2366;
        }
        else
        {
            float _2486 = 1.0 / cbSceneParam._m0[80u].x;
            float _2487 = isnan(_2357) ? _2356 : (isnan(_2356) ? _2357 : max(_2356, _2357));
            float _2488 = isnan(_2357) ? _2356 : (isnan(_2356) ? _2357 : min(_2356, _2357));
            float _2497 = isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : min(_2487, 0.0));
            float _2498 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : min(_2488, 0.0));
            _2526 = ((abs(_2363 / _2352) * cbSceneParam._m0[80u].y) * ((((_2497 - _2498) * 2.0) - ((exp2(_2371 * (isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0)))) - exp2(_2371 * (isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0))))) * _2486)) - ((exp2(_2373 * _2497) - exp2(_2373 * _2498)) * _2486))) + (_2366 * cbSceneParam._m0[80u].z);
        }
        vec4 _2528 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2263, _2264, 1.0), 0.0);
        float _2537 = exp2((_2526 * (-1.44269502162933349609375)) * (1.0 - _2528.w));
        float _2538 = log2(_2537);
        float _2554 = log2(_2283);
        _2375 = (exp2(_2554 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2538 * cbSceneParam._m0[78u].x)) * _2528.x) / cbSceneParam._m0[78u].x)) + _2280;
        _2377 = (exp2(_2554 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2538 * cbSceneParam._m0[78u].y)) * _2528.y) / cbSceneParam._m0[78u].y)) + _2281;
        _2379 = (exp2(_2554 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2538 * cbSceneParam._m0[78u].z)) * _2528.z) / cbSceneParam._m0[78u].z)) + _2282;
        _2381 = _2537 * _2283;
    }
    else
    {
        _2375 = _2280;
        _2377 = _2281;
        _2379 = _2282;
        _2381 = _2283;
    }
    float _2393 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2394 = _2393 == 3.0;
    float _2395 = log2(_2381);
    float _2402 = exp2(_2395 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0))) * (_2225 + ((isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0))) * _510))) + ((_2231 + ((isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0))) * _1317)) * cbPerFrame._m0[3u].x));
    float _2403 = exp2(_2395 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0))) * (_2227 + ((isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0))) * _510))) + ((_2233 + ((isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0))) * _1317)) * cbPerFrame._m0[3u].x));
    float _2404 = exp2(_2395 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0))) * (_2229 + ((isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0))) * _510))) + ((_2235 + ((isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0))) * _1317)) * cbPerFrame._m0[3u].x));
    float _2413 = (_2393 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2413 * (_2394 ? _2402 : (_2402 + (cbSceneParam._m0[72u].w * _2375)));
    SV_Target.y = _2413 * (_2394 ? _2403 : (_2403 + (cbSceneParam._m0[72u].w * _2377)));
    SV_Target.z = _2413 * (_2394 ? _2404 : (_2404 + (cbSceneParam._m0[72u].w * _2379)));
    SV_Target.w = cbInstanceData._m0[_2255].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2255].w;
}


