#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _903;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _192 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _199 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _200 = _199 * NORMAL.x;
    float _201 = _199 * NORMAL.y;
    float _202 = _199 * NORMAL.z;
    float _206 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _214;
    float _215;
    float _216;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _214 = (-0.0) - _200;
        _215 = (-0.0) - _201;
        _216 = (-0.0) - _202;
    }
    else
    {
        _214 = _200;
        _215 = _201;
        _216 = _202;
    }
    vec4 _242 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _248 = _242.x * cbMtdParam._m0[9u].x;
    float _249 = _242.y * cbMtdParam._m0[9u].y;
    float _250 = _242.z * cbMtdParam._m0[9u].z;
    vec4 _262 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _266 = _262.z;
    float _270 = (_262.x * 2.0) + (-1.0);
    float _272 = (_262.y * 2.0) + (-1.0);
    float _273 = dot(vec2(_270, _272), vec2(_270, _272));
    float _3240 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    float _279 = sqrt(1.0 - (isnan(1.0) ? _3240 : (isnan(_3240) ? 1.0 : min(_3240, 1.0))));
    float _308 = (TEXCOORD_3.x - ((cbMtdParam._m0[12u].y * (1.0 - TEXCOORD_3.x)) * ((texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w)).x * cbMtdParam._m0[12u].y) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[12u].z + 1.0);
    float _3251 = isnan(0.0) ? _308 : (isnan(_308) ? 0.0 : max(_308, 0.0));
    float _309 = isnan(1.0) ? _3251 : (isnan(_3251) ? 1.0 : min(_3251, 1.0));
    float _316 = (_309 * (cbMtdParam._m0[10u].x - _248)) + _248;
    float _317 = (_309 * (cbMtdParam._m0[10u].y - _249)) + _249;
    float _318 = (_309 * (cbMtdParam._m0[10u].z - _250)) + _250;
    vec4 _330 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _337 = (_330.x * 2.0) + (-1.0);
    float _338 = (_330.y * 2.0) + (-1.0);
    float _339 = dot(vec2(_337, _338), vec2(_337, _338));
    float _3262 = isnan(0.0) ? _339 : (isnan(_339) ? 0.0 : max(_339, 0.0));
    float _347 = (_309 * (_330.z - _266)) + _266;
    float _359 = (((_337 - _270) + (cbMtdParam._m0[12u].w * _270)) * _309) + _270;
    float _360 = (((_338 - _272) + (cbMtdParam._m0[12u].w * _272)) * _309) + _272;
    float _361 = (_309 * (sqrt(1.0 - (isnan(1.0) ? _3262 : (isnan(_3262) ? 1.0 : min(_3262, 1.0)))) - _279)) + _279;
    float _364 = fma(_361, _214, fma(_360, _206 * TANGENT.x, (_192 * _184) * _359));
    float _367 = fma(_361, _215, fma(_360, _206 * TANGENT.y, (_192 * _185) * _359));
    float _370 = fma(_361, _216, fma(_360, _206 * TANGENT.z, (_192 * _186) * _359));
    float _374 = inversesqrt(dot(vec3(_364, _367, _370), vec3(_364, _367, _370)));
    float _375 = _374 * _364;
    float _376 = _374 * _367;
    float _377 = _374 * _370;
    float _3273 = isnan(0.0) ? _347 : (isnan(_347) ? 0.0 : max(_347, 0.0));
    float _378 = isnan(1.0) ? _3273 : (isnan(_3273) ? 1.0 : min(_3273, 1.0));
    float _3284 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    float _3295 = isnan(0.0) ? _317 : (isnan(_317) ? 0.0 : max(_317, 0.0));
    float _3306 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    float _397 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _439 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _449 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _439);
    float _450 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _439);
    float _451 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _439);
    float _455 = inversesqrt(dot(vec3(_449, _450, _451), vec3(_449, _450, _451)));
    float _456 = _449 * _455;
    float _457 = _450 * _455;
    float _458 = _451 * _455;
    float _464 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _465 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _486 = fma(_377, cbSceneParam._m0[5u].z, fma(_376, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _375));
    float _489 = fma(_377, cbSceneParam._m0[6u].z, fma(_376, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _375));
    float _492 = fma(_377, cbSceneParam._m0[7u].z, fma(_376, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _375));
    uint _505 = uint(roundEven(NORMAL.w)) * 13u;
    uint _508 = (_505 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _514 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3284 : (isnan(_3284) ? 1.0 : min(_3284, 1.0)))) * cbInstanceData._m0[_508].x;
    float _515 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3295 : (isnan(_3295) ? 1.0 : min(_3295, 1.0)))) * cbInstanceData._m0[_508].y;
    float _516 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3306 : (isnan(_3306) ? 1.0 : min(_3306, 1.0)))) * cbInstanceData._m0[_508].z;
    float _3317 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _517 = isnan(1.0) ? _3317 : (isnan(_3317) ? 1.0 : min(_3317, 1.0));
    float _3328 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _518 = isnan(1.0) ? _3328 : (isnan(_3328) ? 1.0 : min(_3328, 1.0));
    float _3339 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _519 = isnan(1.0) ? _3339 : (isnan(_3339) ? 1.0 : min(_3339, 1.0));
    vec4 _528 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _464, cbSceneParam._m0[86u].y * _465));
    float _531 = _528.x * TEXCOORD_3.w;
    float _532 = dot(vec3(_375, _376, _377), vec3(_456, _457, _458));
    float _535 = _532 * 2.0;
    float _539 = (_535 * _375) - _456;
    float _540 = (_535 * _376) - _457;
    float _541 = (_535 * _377) - _458;
    float _545 = abs(dot(vec3(_456, _457, _458), vec3(_375, _376, _377)));
    float _3350 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _547 = sqrt(_378);
    float _560 = exp2((_547 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3350 : (isnan(_3350) ? 1.0 : min(_3350, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_547 * 3.0));
    float _592 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _596 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _600 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _902;
    float _904;
    float _905;
    float _906;
    float _907;
    float _908;
    float _909;
    float _910;
    float _911;
    float _912;
    float _913;
    float _914;
    float _915;
    float _916;
    float _917;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _627 = fma(_600, cbModelParam._m0[26u].z, fma(_596, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _592));
        float _631 = fma(_600, cbModelParam._m0[27u].z, fma(_596, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _592));
        float _635 = fma(_600, cbModelParam._m0[28u].z, fma(_596, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _592));
        float _660 = _592 + _375;
        float _661 = _596 + _376;
        float _662 = _600 + _377;
        float _672 = fma(_662, cbModelParam._m0[26u].z, fma(_661, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _660)) - _627;
        float _673 = fma(_662, cbModelParam._m0[27u].z, fma(_661, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _660)) - _631;
        float _674 = fma(_662, cbModelParam._m0[28u].z, fma(_661, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _660)) - _635;
        float _678 = inversesqrt(dot(vec3(_672, _673, _674), vec3(_672, _673, _674)));
        float _691 = ((_678 * _672) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_627 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _692 = ((_678 * _673) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_631 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _693 = ((_678 * _674) / cbModelParam._m0[34u].z) + ((((((_635 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _696 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_691, _692, _693), 0.0);
        vec4 _703 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_691, _692, _693), 0.0);
        vec4 _710 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_691, _692, _693), 0.0);
        vec4 _717 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_691, _692, _693), 0.0);
        float _730 = exp2((_696.w + (-0.5)) * 20.0) * 2.0;
        float _731 = _730 * (_696.x + (-0.5));
        float _732 = _730 * (_696.y + (-0.5));
        float _733 = _730 * (_696.z + (-0.5));
        float _740 = exp2((_703.w + (-0.5)) * 20.0) * 2.0;
        float _741 = _740 * (_703.x + (-0.5));
        float _742 = _740 * (_703.y + (-0.5));
        float _743 = _740 * (_703.z + (-0.5));
        float _750 = exp2((_710.w + (-0.5)) * 20.0) * 2.0;
        float _751 = _750 * (_710.x + (-0.5));
        float _752 = _750 * (_710.y + (-0.5));
        float _753 = _750 * (_710.z + (-0.5));
        float _760 = exp2((_717.w + (-0.5)) * 20.0) * 2.0;
        float _761 = _760 * (_717.x + (-0.5));
        float _762 = _760 * (_717.y + (-0.5));
        float _763 = _760 * (_717.z + (-0.5));
        float _764 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
        float _765 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
        float _766 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
        float _767 = _731 * 0.5;
        float _768 = _741 * 0.5;
        float _769 = _751 * 0.5;
        float _770 = dot(vec3(_767, _768, _769), vec3(_767, _768, _769));
        float _775 = (_770 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_770);
        float _784 = (dot(vec3(_375, _376, _377), vec3(_775 * _767, _775 * _768, _775 * _769)) + 1.0) * 0.5;
        float _3376 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
        float _794 = sqrt(((_768 * _768) + (_767 * _767)) + (_769 * _769)) / (_764 + 9.9999997473787516355514526367188e-06);
        float _3387 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
        float _795 = isnan(1.0) ? _3387 : (isnan(_3387) ? 1.0 : min(_3387, 1.0));
        float _796 = _795 * 2.0;
        float _800 = (1.0 - _795) / (_795 + 1.0);
        float _3398 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
        float _801 = isnan(1.0) ? _3398 : (isnan(_3398) ? 1.0 : min(_3398, 1.0));
        float _810 = ((((1.0 - _801) * (_796 + 2.0)) * exp2(log2(isnan(1.0) ? _3376 : (isnan(_3376) ? 1.0 : min(_3376, 1.0))) * (_796 + 1.0))) + _801) * _764;
        float _811 = _732 * 0.5;
        float _812 = _742 * 0.5;
        float _813 = _752 * 0.5;
        float _814 = dot(vec3(_811, _812, _813), vec3(_811, _812, _813));
        float _819 = (_814 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_814);
        float _827 = (dot(vec3(_375, _376, _377), vec3(_819 * _811, _819 * _812, _819 * _813)) + 1.0) * 0.5;
        float _3409 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
        float _836 = sqrt(((_812 * _812) + (_811 * _811)) + (_813 * _813)) / (_765 + 9.9999997473787516355514526367188e-06);
        float _3420 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
        float _837 = isnan(1.0) ? _3420 : (isnan(_3420) ? 1.0 : min(_3420, 1.0));
        float _838 = _837 * 2.0;
        float _842 = (1.0 - _837) / (_837 + 1.0);
        float _3431 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
        float _843 = isnan(1.0) ? _3431 : (isnan(_3431) ? 1.0 : min(_3431, 1.0));
        float _852 = ((((1.0 - _843) * (_838 + 2.0)) * exp2(log2(isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0))) * (_838 + 1.0))) + _843) * _765;
        float _853 = _733 * 0.5;
        float _854 = _743 * 0.5;
        float _855 = _753 * 0.5;
        float _856 = dot(vec3(_853, _854, _855), vec3(_853, _854, _855));
        float _861 = (_856 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_856);
        float _869 = (dot(vec3(_375, _376, _377), vec3(_861 * _853, _861 * _854, _861 * _855)) + 1.0) * 0.5;
        float _3442 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
        float _878 = sqrt(((_854 * _854) + (_853 * _853)) + (_855 * _855)) / (_766 + 9.9999997473787516355514526367188e-06);
        float _3453 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
        float _879 = isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0));
        float _880 = _879 * 2.0;
        float _884 = (1.0 - _879) / (_879 + 1.0);
        float _3464 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
        float _885 = isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0));
        float _894 = ((((1.0 - _885) * (_880 + 2.0)) * exp2(log2(isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0))) * (_880 + 1.0))) + _885) * _766;
        _902 = _733;
        _904 = _732;
        _905 = _731;
        _906 = _743;
        _907 = _742;
        _908 = _741;
        _909 = _753;
        _910 = _752;
        _911 = _751;
        _912 = _766;
        _913 = _765;
        _914 = _764;
        _915 = cbModelParam._m0[36u].z * (isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0)));
        _916 = cbModelParam._m0[36u].z * (isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0)));
        _917 = cbModelParam._m0[36u].z * (isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0)));
    }
    else
    {
        _902 = _903;
        _904 = _903;
        _905 = _903;
        _906 = _903;
        _907 = _903;
        _908 = _903;
        _909 = _903;
        _910 = _903;
        _911 = _903;
        _912 = _903;
        _913 = _903;
        _914 = _903;
        _915 = 0.0;
        _916 = 0.0;
        _917 = 0.0;
    }
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _943 = fma(_600, cbModelParam._m0[30u].z, fma(_596, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _592));
        float _947 = fma(_600, cbModelParam._m0[31u].z, fma(_596, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _592));
        float _951 = fma(_600, cbModelParam._m0[32u].z, fma(_596, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _592));
        float _974 = _592 + _375;
        float _975 = _596 + _376;
        float _976 = _600 + _377;
        float _986 = fma(_976, cbModelParam._m0[30u].z, fma(_975, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _974)) - _943;
        float _987 = fma(_976, cbModelParam._m0[31u].z, fma(_975, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _974)) - _947;
        float _988 = fma(_976, cbModelParam._m0[32u].z, fma(_975, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _974)) - _951;
        float _992 = inversesqrt(dot(vec3(_986, _987, _988), vec3(_986, _987, _988)));
        float _1005 = ((_992 * _986) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_943 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1006 = ((_992 * _987) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_947 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1007 = ((_992 * _988) / cbModelParam._m0[35u].z) + ((((((_951 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1009 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1005, _1006, _1007), 0.0);
        vec4 _1016 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1005, _1006, _1007), 0.0);
        vec4 _1023 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1005, _1006, _1007), 0.0);
        vec4 _1030 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1005, _1006, _1007), 0.0);
        float _1042 = exp2((_1009.w + (-0.5)) * 20.0) * 2.0;
        float _1043 = _1042 * (_1009.x + (-0.5));
        float _1044 = _1042 * (_1009.y + (-0.5));
        float _1045 = _1042 * (_1009.z + (-0.5));
        float _1052 = exp2((_1016.w + (-0.5)) * 20.0) * 2.0;
        float _1053 = _1052 * (_1016.x + (-0.5));
        float _1054 = _1052 * (_1016.y + (-0.5));
        float _1055 = _1052 * (_1016.z + (-0.5));
        float _1062 = exp2((_1023.w + (-0.5)) * 20.0) * 2.0;
        float _1063 = _1062 * (_1023.x + (-0.5));
        float _1064 = _1062 * (_1023.y + (-0.5));
        float _1065 = _1062 * (_1023.z + (-0.5));
        float _1072 = exp2((_1030.w + (-0.5)) * 20.0) * 2.0;
        float _1073 = _1072 * (_1030.x + (-0.5));
        float _1074 = _1072 * (_1030.y + (-0.5));
        float _1075 = _1072 * (_1030.z + (-0.5));
        float _1076 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1077 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1078 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1079 = _1043 * 0.5;
        float _1080 = _1053 * 0.5;
        float _1081 = _1063 * 0.5;
        float _1082 = dot(vec3(_1079, _1080, _1081), vec3(_1079, _1080, _1081));
        float _1087 = (_1082 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1082);
        float _1095 = (dot(vec3(_375, _376, _377), vec3(_1087 * _1079, _1087 * _1080, _1087 * _1081)) + 1.0) * 0.5;
        float _3505 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1104 = sqrt(((_1080 * _1080) + (_1079 * _1079)) + (_1081 * _1081)) / (_1076 + 9.9999997473787516355514526367188e-06);
        float _3516 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1105 = isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0));
        float _1106 = _1105 * 2.0;
        float _1110 = (1.0 - _1105) / (_1105 + 1.0);
        float _3527 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1111 = isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0));
        float _1120 = ((((1.0 - _1111) * (_1106 + 2.0)) * exp2(log2(isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0))) * (_1106 + 1.0))) + _1111) * _1076;
        float _1121 = _1044 * 0.5;
        float _1122 = _1054 * 0.5;
        float _1123 = _1064 * 0.5;
        float _1124 = dot(vec3(_1121, _1122, _1123), vec3(_1121, _1122, _1123));
        float _1129 = (_1124 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1124);
        float _1137 = (dot(vec3(_375, _376, _377), vec3(_1129 * _1121, _1129 * _1122, _1129 * _1123)) + 1.0) * 0.5;
        float _3538 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1146 = sqrt(((_1122 * _1122) + (_1121 * _1121)) + (_1123 * _1123)) / (_1077 + 9.9999997473787516355514526367188e-06);
        float _3549 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1147 = isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0));
        float _1148 = _1147 * 2.0;
        float _1152 = (1.0 - _1147) / (_1147 + 1.0);
        float _3560 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1153 = isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0));
        float _1162 = ((((1.0 - _1153) * (_1148 + 2.0)) * exp2(log2(isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0))) * (_1148 + 1.0))) + _1153) * _1077;
        float _1163 = _1045 * 0.5;
        float _1164 = _1055 * 0.5;
        float _1165 = _1065 * 0.5;
        float _1166 = dot(vec3(_1163, _1164, _1165), vec3(_1163, _1164, _1165));
        float _1171 = (_1166 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1166);
        float _1179 = (dot(vec3(_375, _376, _377), vec3(_1171 * _1163, _1171 * _1164, _1171 * _1165)) + 1.0) * 0.5;
        float _3571 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1188 = sqrt(((_1164 * _1164) + (_1163 * _1163)) + (_1165 * _1165)) / (_1078 + 9.9999997473787516355514526367188e-06);
        float _3582 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1189 = isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0));
        float _1190 = _1189 * 2.0;
        float _1194 = (1.0 - _1189) / (_1189 + 1.0);
        float _3593 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1195 = isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0));
        float _1204 = ((((1.0 - _1195) * (_1190 + 2.0)) * exp2(log2(isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0))) * (_1190 + 1.0))) + _1195) * _1078;
        _1212 = _1045;
        _1213 = _1044;
        _1214 = _1043;
        _1215 = _1055;
        _1216 = _1054;
        _1217 = _1053;
        _1218 = _1065;
        _1219 = _1064;
        _1220 = _1063;
        _1221 = _1078;
        _1222 = _1077;
        _1223 = _1076;
        _1224 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0)));
        _1225 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0)));
        _1226 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0)));
    }
    else
    {
        _1212 = _903;
        _1213 = _903;
        _1214 = _903;
        _1215 = _903;
        _1216 = _903;
        _1217 = _903;
        _1218 = _903;
        _1219 = _903;
        _1220 = _903;
        _1221 = _903;
        _1222 = _903;
        _1223 = _903;
        _1224 = 0.0;
        _1225 = 0.0;
        _1226 = 0.0;
    }
    float _1236 = (cbModelParam._m0[1u].x * (_1224 - _915)) + _915;
    float _1237 = (cbModelParam._m0[1u].x * (_1225 - _916)) + _916;
    float _1238 = (cbModelParam._m0[1u].x * (_1226 - _917)) + _917;
    float _1259 = fma(_1238, cbSceneParam._m0[89u].z, fma(_1237, cbSceneParam._m0[89u].y, _1236 * cbSceneParam._m0[89u].x));
    float _1262 = fma(_1238, cbSceneParam._m0[90u].z, fma(_1237, cbSceneParam._m0[90u].y, _1236 * cbSceneParam._m0[90u].x));
    float _1265 = fma(_1238, cbSceneParam._m0[91u].z, fma(_1237, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1236));
    float _1280 = _539 * 0.5;
    float _1281 = _540 * 0.5;
    float _1282 = _541 * 0.5;
    float _1283 = dot(vec4(_1280, _1281, _1282, 1.0), vec4(_1214, _1217, _1220, _1223));
    float _1286 = dot(vec4(_1280, _1281, _1282, 1.0), vec4(_1213, _1216, _1219, _1222));
    float _1289 = dot(vec4(_1280, _1281, _1282, 1.0), vec4(_1212, _1215, _1218, _1221));
    float _1323;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1296 = dot(vec4(_1280, _1281, _1282, 1.0), vec4(_902, _906, _909, _912));
        float _1300 = dot(vec4(_1280, _1281, _1282, 1.0), vec4(_904, _907, _910, _913));
        float _1304 = dot(vec4(_1280, _1281, _1282, 1.0), vec4(_905, _908, _911, _914));
        float _1311 = dot(vec4(cbModelParam._m0[39u]), vec4(_1280, _1281, _1282, 1.0));
        _1323 = dot(vec3(isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0)), isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0)), isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1311) ? 0.0 : (isnan(0.0) ? _1311 : max(0.0, _1311))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1323 = 1.0;
    }
    float _1334;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1325 = dot(vec4(cbModelParam._m0[40u]), vec4(_1280, _1281, _1282, 1.0));
        _1334 = dot(vec3(isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0)), isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0)), isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1325) ? 0.0 : (isnan(0.0) ? _1325 : max(0.0, _1325))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1334 = 1.0;
    }
    float _1338 = (_1334 * cbModelParam._m0[1u].x) + (_1323 * (1.0 - cbModelParam._m0[1u].x));
    float _1348 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _378);
    float _1349 = isnan(_1348) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1348 : min(cbModelParam._m0[25u].z, _1348));
    float _1430;
    float _1432;
    float _1434;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1397 = fma(_600, cbModelParam._m0[13u].z, fma(_596, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _592)) + cbModelParam._m0[13u].w;
        float _1401 = fma(_600, cbModelParam._m0[14u].z, fma(_596, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _592)) + cbModelParam._m0[14u].w;
        float _1405 = fma(_600, cbModelParam._m0[15u].z, fma(_596, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _592)) + cbModelParam._m0[15u].w;
        float _1408 = fma(_541, cbModelParam._m0[13u].z, fma(_540, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _539));
        float _1411 = fma(_541, cbModelParam._m0[14u].z, fma(_540, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _539));
        float _1414 = fma(_541, cbModelParam._m0[15u].z, fma(_540, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _539));
        float _1442;
        if (_1408 > 0.0)
        {
            _1442 = abs((1.0 - _1397) / _1408);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1408 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1397 + 1.0) / _1408);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1442 = frontier_phi_16_14_ladder;
        }
        float _1667;
        if (_1411 > 0.0)
        {
            _1667 = abs((1.0 - _1401) / _1411);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1411 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1401 + 1.0) / _1411);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1667 = frontier_phi_25_21_ladder;
        }
        float _1913;
        if (_1414 > 0.0)
        {
            _1913 = abs((1.0 - _1405) / _1414);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1414 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1405 + 1.0) / _1414);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1913 = frontier_phi_37_32_ladder;
        }
        float _1915 = isnan(_1667) ? _1442 : (isnan(_1442) ? _1667 : min(_1442, _1667));
        float _1916 = isnan(_1913) ? _1915 : (isnan(_1915) ? _1913 : min(_1915, _1913));
        float _1920 = (_1916 * _1408) + _1397;
        float _1921 = (_1916 * _1411) + _1401;
        float _1922 = (_1916 * _1414) + _1405;
        float _1923 = _1916 * 9.9999997473787516355514526367188e-05;
        float _1925 = (-1.0) - _1923;
        float _1927 = _1923 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1922 > _1927) || ((_1922 < _1925) || ((_1921 > _1927) || ((_1921 < _1925) || ((_1920 < _1925) || (_1920 > _1927))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2046 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1922, cbModelParam._m0[9u].z, fma(_1921, cbModelParam._m0[9u].y, _1920 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1922, cbModelParam._m0[10u].z, fma(_1921, cbModelParam._m0[10u].y, _1920 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1922, cbModelParam._m0[11u].z, fma(_1921, cbModelParam._m0[11u].y, _1920 * cbModelParam._m0[11u].x))), _1349);
            frontier_phi_15_37_ladder = _2046.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2046.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2046.x * cbModelParam._m0[1u].y;
        }
        _1430 = frontier_phi_15_37_ladder_2;
        _1432 = frontier_phi_15_37_ladder_1;
        _1434 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1418 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_539, _540, _541), _1349);
        _1430 = _1418.x * cbModelParam._m0[1u].y;
        _1432 = _1418.y * cbModelParam._m0[1u].y;
        _1434 = _1418.z * cbModelParam._m0[1u].y;
    }
    float _1438 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _378);
    float _1439 = isnan(_1438) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1438 : min(cbModelParam._m0[25u].w, _1438));
    float _1532;
    float _1534;
    float _1536;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1496 = fma(_600, cbModelParam._m0[21u].z, fma(_596, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _592)) + cbModelParam._m0[21u].w;
        float _1500 = fma(_600, cbModelParam._m0[22u].z, fma(_596, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _592)) + cbModelParam._m0[22u].w;
        float _1504 = fma(_600, cbModelParam._m0[23u].z, fma(_596, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _592)) + cbModelParam._m0[23u].w;
        float _1507 = fma(_541, cbModelParam._m0[21u].z, fma(_540, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _539));
        float _1510 = fma(_541, cbModelParam._m0[22u].z, fma(_540, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _539));
        float _1513 = fma(_541, cbModelParam._m0[23u].z, fma(_540, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _539));
        float _1672;
        if (_1507 > 0.0)
        {
            _1672 = abs((1.0 - _1496) / _1507);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1507 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1496 + 1.0) / _1507);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1672 = frontier_phi_27_23_ladder;
        }
        float _1940;
        if (_1510 > 0.0)
        {
            _1940 = abs((1.0 - _1500) / _1510);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1510 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1500 + 1.0) / _1510);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1940 = frontier_phi_39_34_ladder;
        }
        float _2145;
        if (_1513 > 0.0)
        {
            _2145 = abs((1.0 - _1504) / _1513);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1513 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1504 + 1.0) / _1513);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2145 = frontier_phi_48_45_ladder;
        }
        float _2147 = isnan(_1940) ? _1672 : (isnan(_1672) ? _1940 : min(_1672, _1940));
        float _2148 = isnan(_2145) ? _2147 : (isnan(_2147) ? _2145 : min(_2147, _2145));
        float _2152 = (_2148 * _1507) + _1496;
        float _2153 = (_2148 * _1510) + _1500;
        float _2154 = (_2148 * _1513) + _1504;
        float _2155 = _2148 * 9.9999997473787516355514526367188e-05;
        float _2156 = (-1.0) - _2155;
        float _2158 = _2155 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2154 > _2158) || ((_2154 < _2156) || ((_2153 > _2158) || ((_2153 < _2156) || ((_2152 < _2156) || (_2152 > _2158))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2352 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2154, cbModelParam._m0[17u].z, fma(_2153, cbModelParam._m0[17u].y, _2152 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2154, cbModelParam._m0[18u].z, fma(_2153, cbModelParam._m0[18u].y, _2152 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2154, cbModelParam._m0[19u].z, fma(_2153, cbModelParam._m0[19u].y, _2152 * cbModelParam._m0[19u].x))), _1439);
            frontier_phi_24_48_ladder = _2352.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2352.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2352.x * cbModelParam._m0[1u].z;
        }
        _1532 = frontier_phi_24_48_ladder_2;
        _1534 = frontier_phi_24_48_ladder_1;
        _1536 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1516 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_539, _540, _541), _1439);
        _1532 = _1516.x * cbModelParam._m0[1u].z;
        _1534 = _1516.y * cbModelParam._m0[1u].z;
        _1536 = _1516.z * cbModelParam._m0[1u].z;
    }
    float _1548 = ((((1.0 - _560) * ((_547 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_560 * _547)) * _531;
    float _1549 = _1548 * ((cbModelParam._m0[1u].w * (_1532 - _1430)) + _1430);
    float _1550 = _1548 * ((cbModelParam._m0[1u].w * (_1534 - _1432)) + _1432);
    float _1551 = _1548 * ((cbModelParam._m0[1u].w * (_1536 - _1434)) + _1434);
    float _1554 = fma(_1551, cbSceneParam._m0[89u].z, fma(_1550, cbSceneParam._m0[89u].y, _1549 * cbSceneParam._m0[89u].x));
    float _1557 = fma(_1551, cbSceneParam._m0[90u].z, fma(_1550, cbSceneParam._m0[90u].y, _1549 * cbSceneParam._m0[90u].x));
    float _1560 = fma(_1551, cbSceneParam._m0[91u].z, fma(_1550, cbSceneParam._m0[91u].y, _1549 * cbSceneParam._m0[91u].x));
    vec4 _1568 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_464, _465));
    float _1570 = _1568.w;
    float _1582 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1570);
    float _1583 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1570);
    float _1584 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1570);
    uvec4 _1588 = floatBitsToUint(cbInstanceData._m0[_505 + 5u]);
    uint _1590 = _1588.x * 14u;
    uint _1591 = _1590 + 13u;
    float _1598 = _531 + (-1.0);
    float _1603 = (cbLight._m0[_1591].x * _1598) + 1.0;
    float _1604 = (cbLight._m0[_1591].y * _1598) + 1.0;
    float _1605 = (cbLight._m0[_1591].z * _1598) + 1.0;
    float _1606 = (cbLight._m0[_1591].w * _1598) + 1.0;
    uint _1607 = _1590 + 5u;
    float _1613 = isnan(1.0) ? _1604 : (isnan(_1604) ? 1.0 : min(_1604, 1.0));
    uint _1617 = _1590 + 4u;
    float _1626 = isnan(1.0) ? _1603 : (isnan(_1603) ? 1.0 : min(_1603, 1.0));
    uint _1630 = _1590 | 1u;
    float _1641 = dot(vec3(cbLight._m0[_1590].xyz), vec3(_375, _376, _377));
    float _1644 = dot(vec3(cbLight._m0[_1630].xyz), vec3(_375, _376, _377));
    float _3729 = isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0));
    float _3740 = isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0));
    float _1649 = (isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0))) * 0.3183098733425140380859375;
    float _1651 = (isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0))) * 0.3183098733425140380859375;
    float _1658 = ((cbLight._m0[_1607].x * _1613) * _1651) + (((cbLight._m0[_1617].x * _1582) * _1626) * _1649);
    float _1659 = ((_1613 * cbLight._m0[_1607].y) * _1651) + (((cbLight._m0[_1617].y * _1583) * _1626) * _1649);
    float _1660 = ((_1613 * cbLight._m0[_1607].z) * _1651) + (((cbLight._m0[_1617].z * _1584) * _1626) * _1649);
    uvec4 _1664 = floatBitsToUint(cbLight._m0[_1590 + 12u]);
    bool _1666 = _1664.x == 0u;
    float _1677;
    float _1679;
    float _1681;
    if (_1666)
    {
        _1677 = _1658;
        _1679 = _1659;
        _1681 = _1660;
    }
    else
    {
        uint _1685 = _1590 + 6u;
        float _1701 = (dot(vec3(cbLight._m0[_1590 + 2u].xyz), vec3(_375, _376, _377)) * 0.5) + 0.5;
        float _1702 = _1701 * _1701;
        float _3751 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
        float _1703 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
        float _1704 = isnan(1.0) ? _1605 : (isnan(_1605) ? 1.0 : min(_1605, 1.0));
        _1677 = (((cbLight._m0[_1685].x * 0.3183098733425140380859375) * _1703) * _1704) + _1658;
        _1679 = (((cbLight._m0[_1685].y * 0.3183098733425140380859375) * _1703) * _1704) + _1659;
        _1681 = (((cbLight._m0[_1685].z * 0.3183098733425140380859375) * _1703) * _1704) + _1660;
    }
    bool _1684 = _1664.y == 0u;
    float _1722;
    float _1724;
    float _1726;
    if (_1684)
    {
        _1722 = _1677;
        _1724 = _1679;
        _1726 = _1681;
    }
    else
    {
        uint _1884 = _1590 + 7u;
        float _1900 = (dot(vec3(cbLight._m0[_1590 + 3u].xyz), vec3(_375, _376, _377)) * 0.5) + 0.5;
        float _1901 = _1900 * _1900;
        float _3767 = isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0));
        float _1902 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
        float _1903 = isnan(1.0) ? _1606 : (isnan(_1606) ? 1.0 : min(_1606, 1.0));
        _1722 = (((cbLight._m0[_1884].x * 0.3183098733425140380859375) * _1902) * _1903) + _1677;
        _1724 = (((cbLight._m0[_1884].y * 0.3183098733425140380859375) * _1902) * _1903) + _1679;
        _1726 = (((cbLight._m0[_1884].z * 0.3183098733425140380859375) * _1902) * _1903) + _1681;
    }
    uint _1729 = _1590 + 8u;
    float _1742 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1590].w)) * _378) * 0.949999988079071044921875);
    float _1743 = _1742 * _1742;
    float _1744 = cbLight._m0[_1590].x + _456;
    float _1745 = cbLight._m0[_1590].y + _457;
    float _1746 = cbLight._m0[_1590].z + _458;
    float _1750 = inversesqrt(dot(vec3(_1744, _1745, _1746), vec3(_1744, _1745, _1746)));
    float _1751 = _1750 * _1744;
    float _1752 = _1750 * _1745;
    float _1753 = _1750 * _1746;
    float _1754 = dot(vec3(_375, _376, _377), vec3(cbLight._m0[_1590].xyz));
    float _3783 = isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0));
    float _1757 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
    float _3794 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _1758 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
    float _1759 = dot(vec3(_375, _376, _377), vec3(_1751, _1752, _1753));
    float _3805 = isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0));
    float _1762 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
    float _1763 = dot(vec3(cbLight._m0[_1590].xyz), vec3(_1751, _1752, _1753));
    float _3816 = isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0));
    float _1767 = _1743 * _1743;
    float _1771 = ((_1762 * _1762) * (_1767 + (-1.0))) + 1.0;
    float _1782 = (exp2(log2(1.0 - (isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1783 = 1.0 - _1743;
    float _1794 = (0.5 / (((_1758 * ((_1757 * _1783) + _1743)) + 9.9999999392252902907785028219223e-09) + (((_1758 * _1783) + _1743) * _1757))) * _1757;
    float _3827 = isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0));
    float _1796 = (isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0))) * (_1767 / ((_1771 * _1771) * 3.141590118408203125));
    uint _1810 = _1590 + 9u;
    float _1821 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1630].w)) * _378) * 0.949999988079071044921875);
    float _1822 = _1821 * _1821;
    float _1823 = cbLight._m0[_1630].x + _456;
    float _1824 = cbLight._m0[_1630].y + _457;
    float _1825 = cbLight._m0[_1630].z + _458;
    float _1829 = inversesqrt(dot(vec3(_1823, _1824, _1825), vec3(_1823, _1824, _1825)));
    float _1830 = _1829 * _1823;
    float _1831 = _1829 * _1824;
    float _1832 = _1829 * _1825;
    float _1833 = dot(vec3(_375, _376, _377), vec3(cbLight._m0[_1630].xyz));
    float _3838 = isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0));
    float _1836 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
    float _1837 = dot(vec3(_375, _376, _377), vec3(_1830, _1831, _1832));
    float _3849 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
    float _1840 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
    float _1841 = dot(vec3(cbLight._m0[_1630].xyz), vec3(_1830, _1831, _1832));
    float _3860 = isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0));
    float _1845 = _1822 * _1822;
    float _1849 = ((_1840 * _1840) * (_1845 + (-1.0))) + 1.0;
    float _1858 = (exp2(log2(1.0 - (isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1859 = 1.0 - _1822;
    float _1869 = (0.5 / (((_1758 * ((_1836 * _1859) + _1822)) + 9.9999999392252902907785028219223e-09) + (((_1758 * _1859) + _1822) * _1836))) * _1836;
    float _3871 = isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0));
    float _1871 = (isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0))) * (_1845 / ((_1849 * _1849) * 3.141590118408203125));
    float _1881 = (((_1858 * cbLight._m0[_1810].x) * _1871) * _1613) + ((((cbLight._m0[_1729].x * _1582) * _1782) * _1796) * _1626);
    float _1882 = (((_1858 * cbLight._m0[_1810].y) * _1871) * _1613) + ((((cbLight._m0[_1729].y * _1583) * _1782) * _1796) * _1626);
    float _1883 = (((_1858 * cbLight._m0[_1810].z) * _1871) * _1613) + ((((cbLight._m0[_1729].z * _1584) * _1782) * _1796) * _1626);
    float _1945;
    float _1947;
    float _1949;
    if (_1666)
    {
        _1945 = _1881;
        _1947 = _1882;
        _1949 = _1883;
    }
    else
    {
        uint _1951 = _1590 + 2u;
        uint _1955 = _1590 + 10u;
        float _1969 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1951].w)) * _378) * 0.949999988079071044921875);
        float _1970 = _1969 * _1969;
        float _1971 = cbLight._m0[_1951].x + _456;
        float _1972 = cbLight._m0[_1951].y + _457;
        float _1973 = cbLight._m0[_1951].z + _458;
        float _1977 = inversesqrt(dot(vec3(_1971, _1972, _1973), vec3(_1971, _1972, _1973)));
        float _1978 = _1977 * _1971;
        float _1979 = _1977 * _1972;
        float _1980 = _1977 * _1973;
        float _1981 = dot(vec3(_375, _376, _377), vec3(cbLight._m0[_1951].xyz));
        float _3882 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
        float _1984 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
        float _1985 = dot(vec3(_375, _376, _377), vec3(_1978, _1979, _1980));
        float _3893 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
        float _1988 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
        float _1989 = dot(vec3(cbLight._m0[_1951].xyz), vec3(_1978, _1979, _1980));
        float _3904 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
        float _1993 = _1970 * _1970;
        float _1997 = ((_1988 * _1988) * (_1993 + (-1.0))) + 1.0;
        float _2006 = (exp2(log2(1.0 - (isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2007 = 1.0 - _1970;
        float _2017 = (0.5 / (((_1758 * ((_1984 * _2007) + _1970)) + 9.9999999392252902907785028219223e-09) + (((_1758 * _2007) + _1970) * _1984))) * _1984;
        float _3915 = isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0));
        float _2019 = (isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0))) * (_1993 / ((_1997 * _1997) * 3.141590118408203125));
        float _2020 = isnan(1.0) ? _1605 : (isnan(_1605) ? 1.0 : min(_1605, 1.0));
        _1945 = (((_2006 * cbLight._m0[_1955].x) * _2019) * _2020) + _1881;
        _1947 = (((_2006 * cbLight._m0[_1955].y) * _2019) * _2020) + _1882;
        _1949 = (((_2006 * cbLight._m0[_1955].z) * _2019) * _2020) + _1883;
    }
    float _2055;
    float _2057;
    float _2059;
    if (_1684)
    {
        _2055 = _1945;
        _2057 = _1947;
        _2059 = _1949;
    }
    else
    {
        uint _2066 = _1590 + 3u;
        uint _2070 = _1590 + 11u;
        float _2084 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2066].w)) * _378) * 0.949999988079071044921875);
        float _2085 = _2084 * _2084;
        float _2086 = cbLight._m0[_2066].x + _456;
        float _2087 = cbLight._m0[_2066].y + _457;
        float _2088 = cbLight._m0[_2066].z + _458;
        float _2092 = inversesqrt(dot(vec3(_2086, _2087, _2088), vec3(_2086, _2087, _2088)));
        float _2093 = _2092 * _2086;
        float _2094 = _2092 * _2087;
        float _2095 = _2092 * _2088;
        float _2096 = dot(vec3(_375, _376, _377), vec3(cbLight._m0[_2066].xyz));
        float _3931 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
        float _2099 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
        float _2100 = dot(vec3(_375, _376, _377), vec3(_2093, _2094, _2095));
        float _3942 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
        float _2103 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
        float _2104 = dot(vec3(cbLight._m0[_2066].xyz), vec3(_2093, _2094, _2095));
        float _3953 = isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0));
        float _2108 = _2085 * _2085;
        float _2112 = ((_2103 * _2103) * (_2108 + (-1.0))) + 1.0;
        float _2121 = (exp2(log2(1.0 - (isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2122 = 1.0 - _2085;
        float _2132 = (0.5 / (((_1758 * ((_2099 * _2122) + _2085)) + 9.9999999392252902907785028219223e-09) + (((_1758 * _2122) + _2085) * _2099))) * _2099;
        float _3964 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
        float _2134 = (isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0))) * (_2108 / ((_2112 * _2112) * 3.141590118408203125));
        float _2135 = isnan(1.0) ? _1606 : (isnan(_1606) ? 1.0 : min(_1606, 1.0));
        _2055 = (((_2121 * cbLight._m0[_2070].x) * _2134) * _2135) + _1945;
        _2057 = (((_2121 * cbLight._m0[_2070].y) * _2134) * _2135) + _1947;
        _2059 = (((_2121 * cbLight._m0[_2070].z) * _2134) * _2135) + _1949;
    }
    float _2269;
    float _2271;
    float _2273;
    float _2275;
    float _2277;
    float _2279;
    if (_1588.y == 0u)
    {
        float _2210 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2211 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2210;
        float _2212 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2210;
        float _2213 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2210;
        uvec4 _2225 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2226 = _2225.x;
        uint _2237 = uint((float(_2225.y) * floor(float(uint(cbSceneParam._m0[85u].y * _465) / _2226))) + floor(float(uint(cbSceneParam._m0[85u].x * _464) / _2226)));
        float _2247 = (log2(_2213 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2248 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
        uint _2251 = uint(isnan(14.0) ? _2248 : (isnan(_2248) ? 14.0 : min(_2248, 14.0)));
        uvec4 _2256 = texelFetch(g_lightClusterGridBuffer, int(((_2251 << 2u) + (_2237 << 6u)) >> 2u));
        uint _2257 = _2256.x;
        uint _2258 = _2225.z;
        float _2357;
        float _2359;
        float _2361;
        float _2363;
        float _2365;
        float _2367;
        if (((((1u << ((_2258 >> 4u) & 15u)) + 4294967295u) & _2257) == 0u) || ((_2258 & 240u) == 0u))
        {
            _2357 = 0.0;
            _2359 = 0.0;
            _2361 = 0.0;
            _2363 = 0.0;
            _2365 = 0.0;
            _2367 = 0.0;
        }
        else
        {
            float _2358;
            float _2360;
            float _2362;
            float _2364;
            float _2366;
            float _2368;
            float _2501 = 0.0;
            float _2502 = 0.0;
            float _2503 = 0.0;
            float _2504 = 0.0;
            float _2505 = 0.0;
            float _2506 = 0.0;
            uint _2507 = 0u;
            uint _2516;
            bool _2517;
            for (;;)
            {
                _2516 = texelFetch(g_lightClassification, int((((_2251 << 5u) + (_2237 << 9u)) + (_2507 << 2u)) >> 2u)).x;
                _2517 = _2516 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2517)
                {
                    frontier_phi_63_pred = _2506;
                    frontier_phi_63_pred_1 = _2505;
                    frontier_phi_63_pred_2 = _2504;
                    frontier_phi_63_pred_3 = _2503;
                    frontier_phi_63_pred_4 = _2502;
                    frontier_phi_63_pred_5 = _2501;
                }
                else
                {
                    float _2625;
                    float _2626;
                    float _2627;
                    float _2628;
                    float _2629;
                    float _2630;
                    uint _2631;
                    _2625 = _2501;
                    _2626 = _2502;
                    _2627 = _2503;
                    _2628 = _2504;
                    _2629 = _2505;
                    _2630 = _2506;
                    _2631 = _2516;
                    float _2557;
                    float _2558;
                    float _2559;
                    float _2560;
                    float _2561;
                    float _2562;
                    for (;;)
                    {
                        uint _2635 = uint(findLSB(_2631)) + (_2507 << 5u);
                        uint _2632 = (_2631 + 4294967295u) & _2631;
                        uint _2637 = _2635 * 48u;
                        vec4 _2651 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2637)).x, texelFetch(g_PointLightRenderingBuffer, int(_2637 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2637 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2637 + 3u)).x));
                        uint _2657 = (_2635 * 48u) + 4u;
                        vec4 _2670 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2657)).x, texelFetch(g_PointLightRenderingBuffer, int(_2657 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2657 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2657 + 3u)).x));
                        uint _2676 = (_2635 * 48u) + 8u;
                        vec3 _2687 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2676)).x, texelFetch(g_PointLightRenderingBuffer, int(_2676 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2676 + 2u)).x));
                        float _2691 = _2651.x - _2211;
                        float _2692 = _2651.y - _2212;
                        float _2693 = _2651.z - _2213;
                        float _2694 = dot(vec3(_2691, _2692, _2693), vec3(_2691, _2692, _2693));
                        float _2697 = inversesqrt(_2694);
                        float _2698 = _2697 * _2691;
                        float _2699 = _2697 * _2692;
                        float _2700 = _2697 * _2693;
                        float _2701 = dot(vec3(_486, _489, _492), vec3(_2698, _2699, _2700));
                        float _2706 = 1.0 - (_2694 * _2651.w);
                        float _3990 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0));
                        float _2707 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
                        float _2708 = sqrt(_2694) * _2670.w;
                        float _2711 = 1.39999997615814208984375 / (_2708 + 1.39999997615814208984375);
                        float _2712 = _2711 * _2711;
                        float _2715 = ((1.0 - _2712) * _2701) + _2712;
                        float _2718 = _2708 * _2708;
                        float _2722 = ((isnan(0.0) ? _2715 : (isnan(_2715) ? 0.0 : max(_2715, 0.0))) * _2707) / ((_2718 * 0.699999988079071044921875) + 1.0);
                        float _2726 = (-0.0) - _2211;
                        float _2727 = (-0.0) - _2212;
                        float _2728 = (-0.0) - _2213;
                        float _2732 = inversesqrt(dot(vec3(_2726, _2727, _2728), vec3(_2726, _2727, _2728)));
                        float _2733 = _2732 * _2726;
                        float _2734 = _2732 * _2727;
                        float _2735 = _2732 * _2728;
                        float _2743 = exp2(log2(1.0 / ((_2718 * 3.5) + 5.0)) * 0.25);
                        float _2744 = 1.0 - _547;
                        float _2751 = sqrt(1.0 - ((1.0 - (_2744 * _2744)) * (1.0 - (_2743 * _2743))));
                        float _2752 = _2751 * _2751;
                        float _2753 = _2752 * _2752;
                        float _2754 = _2733 + _2698;
                        float _2755 = _2734 + _2699;
                        float _2756 = _2735 + _2700;
                        float _2760 = inversesqrt(dot(vec3(_2754, _2755, _2756), vec3(_2754, _2755, _2756)));
                        float _2764 = dot(vec3(_486, _489, _492), vec3(_2733, _2734, _2735));
                        float _4006 = isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0));
                        float _2767 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
                        float _2768 = dot(vec3(_486, _489, _492), vec3(_2760 * _2754, _2760 * _2755, _2760 * _2756));
                        float _4017 = isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : max(_2768, 0.0));
                        float _2771 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
                        float _2775 = ((_2771 * _2771) * (_2753 + (-1.0))) + 1.0;
                        float _2776 = _2711 * _2752;
                        float _2777 = _2776 * _2776;
                        float _2780 = ((1.0 - _2777) * _2701) + _2777;
                        float _4028 = isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : max(_2780, 0.0));
                        float _2781 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
                        float _2782 = 1.0 - _2752;
                        float _2792 = (0.5 / (((_2781 * ((_2767 * _2782) + _2752)) + 9.9999999392252902907785028219223e-09) + (((_2781 * _2782) + _2752) * _2767))) * _2781;
                        float _4039 = isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0));
                        float _2803 = (((_2753 * 3.1415927410125732421875) * (isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0)))) / ((_2775 * _2775) * ((_2718 * 2.1991131305694580078125) + 3.141590118408203125))) * _2707;
                        _2560 = (_2722 * _2670.x) + _2628;
                        _2561 = (_2722 * _2670.y) + _2629;
                        _2562 = (_2722 * _2670.z) + _2630;
                        _2557 = (_2803 * _2687.x) + _2625;
                        _2558 = (_2803 * _2687.y) + _2626;
                        _2559 = (_2803 * _2687.z) + _2627;
                        if (_2632 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2625 = _2557;
                            _2626 = _2558;
                            _2627 = _2559;
                            _2628 = _2560;
                            _2629 = _2561;
                            _2630 = _2562;
                            _2631 = _2632;
                        }
                    }
                    frontier_phi_63_pred = _2562;
                    frontier_phi_63_pred_1 = _2561;
                    frontier_phi_63_pred_2 = _2560;
                    frontier_phi_63_pred_3 = _2559;
                    frontier_phi_63_pred_4 = _2558;
                    frontier_phi_63_pred_5 = _2557;
                }
                _2368 = frontier_phi_63_pred;
                _2366 = frontier_phi_63_pred_1;
                _2364 = frontier_phi_63_pred_2;
                _2362 = frontier_phi_63_pred_3;
                _2360 = frontier_phi_63_pred_4;
                _2358 = frontier_phi_63_pred_5;
                uint _2508 = _2507 + 1u;
                if (_2508 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2501 = _2358;
                    _2502 = _2360;
                    _2503 = _2362;
                    _2504 = _2364;
                    _2505 = _2366;
                    _2506 = _2368;
                    _2507 = _2508;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2357 = _2358;
            _2359 = _2360;
            _2361 = _2362;
            _2363 = _2364;
            _2365 = _2366;
            _2367 = _2368;
        }
        uvec4 _2371 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2372 = _2371.z;
        uint _2374 = (_2372 >> 8u) & 15u;
        float _2469;
        float _2471;
        float _2473;
        float _2475;
        float _2477;
        float _2479;
        if (((4294967295u << _2374) & _2257) == 0u)
        {
            _2469 = _2357;
            _2471 = _2359;
            _2473 = _2361;
            _2475 = _2363;
            _2477 = _2365;
            _2479 = _2367;
        }
        else
        {
            float _2494 = inversesqrt(dot(vec3(_2211, _2212, _2213), vec3(_2211, _2212, _2213)));
            float _2495 = _2494 * _2211;
            float _2496 = _2494 * _2212;
            float _2497 = _2494 * _2213;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2374 < ((_2372 >> 12u) & 15u))
            {
                float _2470;
                float _2472;
                float _2474;
                float _2476;
                float _2478;
                float _2480;
                float _2608 = _2357;
                float _2609 = _2359;
                float _2610 = _2361;
                float _2611 = _2363;
                float _2612 = _2365;
                float _2613 = _2367;
                uint _2614 = _2374;
                uint _2623;
                bool _2624;
                for (;;)
                {
                    _2623 = texelFetch(g_lightClassification, int((((_2251 << 5u) + (_2237 << 9u)) + (_2614 << 2u)) >> 2u)).x;
                    _2624 = _2623 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2624)
                    {
                        frontier_phi_69_pred = _2613;
                        frontier_phi_69_pred_1 = _2612;
                        frontier_phi_69_pred_2 = _2611;
                        frontier_phi_69_pred_3 = _2610;
                        frontier_phi_69_pred_4 = _2609;
                        frontier_phi_69_pred_5 = _2608;
                    }
                    else
                    {
                        float _2808;
                        float _2809;
                        float _2810;
                        float _2811;
                        float _2812;
                        float _2813;
                        float _3104;
                        float _3105;
                        float _3106;
                        float _3107;
                        float _3108;
                        float _3109;
                        float _2821 = _2608;
                        float _2822 = _2609;
                        float _2823 = _2610;
                        float _2824 = _2611;
                        float _2825 = _2612;
                        float _2826 = _2613;
                        uint _2827 = _2623;
                        uint _2828;
                        vec4 _2853;
                        float _2854;
                        vec4 _2869;
                        vec3 _2881;
                        vec4 _2897;
                        vec4 _2913;
                        float _2960;
                        bool _2961;
                        for (;;)
                        {
                            uint _2838 = ((_2614 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2827));
                            _2828 = (_2827 + 4294967295u) & _2827;
                            uint _2840 = _2838 * 40u;
                            _2853 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2840)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2840 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2840 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2840 + 3u)).x));
                            _2854 = _2853.w;
                            uint _2856 = (_2838 * 40u) + 4u;
                            _2869 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2856)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2856 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2856 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2856 + 3u)).x));
                            uint _2871 = (_2838 * 40u) + 8u;
                            _2881 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2871)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2871 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2871 + 2u)).x));
                            uint _2884 = (_2838 * 40u) + 16u;
                            _2897 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2884)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2884 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2884 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2884 + 3u)).x));
                            uint _2900 = (_2838 * 40u) + 20u;
                            _2913 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2900)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2900 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2900 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2900 + 3u)).x));
                            uint _2916 = (_2838 * 40u) + 24u;
                            vec4 _2929 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2916)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2916 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2916 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2916 + 3u)).x));
                            uint _2935 = (_2838 * 40u) + 28u;
                            vec4 _2948 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2935)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2935 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2935 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2935 + 3u)).x));
                            _2960 = fma(_2213, _2948.z, fma(_2212, _2948.y, _2948.x * _2211)) + _2948.w;
                            _2961 = !((fma(_2213, _2929.z, fma(_2212, _2929.y, _2929.x * _2211)) + _2929.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2961)
                            {
                                float _2988 = _2853.x - _2211;
                                float _2989 = _2853.y - _2212;
                                float _2990 = _2853.z - _2213;
                                float _2991 = dot(vec3(_2988, _2989, _2990), vec3(_2988, _2989, _2990));
                                float _2994 = inversesqrt(_2991);
                                float _2995 = _2994 * _2988;
                                float _2996 = _2994 * _2989;
                                float _2997 = _2994 * _2990;
                                float _3001 = 1.0 - (_2991 / (_2854 * _2854));
                                float _4050 = isnan(0.0) ? _3001 : (isnan(_3001) ? 0.0 : max(_3001, 0.0));
                                float _3002 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
                                float _3006 = sqrt(_2991) * _2869.w;
                                float _3008 = 1.39999997615814208984375 / (_3006 + 1.39999997615814208984375);
                                float _3009 = _3008 * _3008;
                                float _3012 = ((1.0 - _3009) * dot(vec3(_2995, _2996, _2997), vec3(_486, _489, _492))) + _3009;
                                float _3015 = _3006 * _3006;
                                float _3019 = (fma(_2213, _2897.z, fma(_2212, _2897.y, _2897.x * _2211)) + _2897.w) / _2960;
                                float _3020 = (fma(_2213, _2913.z, fma(_2212, _2913.y, _2913.x * _2211)) + _2913.w) / _2960;
                                float _3024 = 1.0 - dot(vec2(_3019, _3020), vec2(_3019, _3020));
                                float _4066 = isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : max(_3024, 0.0));
                                float _3025 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
                                float _3026 = _3025 * (((isnan(0.0) ? _3012 : (isnan(_3012) ? 0.0 : max(_3012, 0.0))) * _3002) / ((_3015 * 0.699999988079071044921875) + 1.0));
                                float _3038 = exp2(log2(1.0 / ((_3015 * 3.5) + 5.0)) * 0.25);
                                float _3039 = 1.0 - _547;
                                float _3046 = sqrt(1.0 - ((1.0 - (_3039 * _3039)) * (1.0 - (_3038 * _3038))));
                                float _3047 = _3046 * _3046;
                                float _3048 = _3047 * _3047;
                                float _3049 = _2995 - _2495;
                                float _3050 = _2996 - _2496;
                                float _3051 = _2997 - _2497;
                                float _3055 = inversesqrt(dot(vec3(_3049, _3050, _3051), vec3(_3049, _3050, _3051)));
                                float _3059 = dot(vec3(_486, _489, _492), vec3((-0.0) - _2495, (-0.0) - _2496, (-0.0) - _2497));
                                float _4077 = isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : max(_3059, 0.0));
                                float _3062 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
                                float _3063 = dot(vec3(_486, _489, _492), vec3(_3055 * _3049, _3055 * _3050, _3055 * _3051));
                                float _4088 = isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : max(_3063, 0.0));
                                float _3066 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
                                float _3070 = ((_3066 * _3066) * (_3048 + (-1.0))) + 1.0;
                                float _3071 = _3008 * _3047;
                                float _3072 = _3071 * _3071;
                                float _3078 = ((1.0 - _3072) * dot(vec3(_486, _489, _492), vec3(_2995, _2996, _2997))) + _3072;
                                float _4099 = isnan(0.0) ? _3078 : (isnan(_3078) ? 0.0 : max(_3078, 0.0));
                                float _3079 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
                                float _3080 = 1.0 - _3047;
                                float _3090 = (0.5 / (((_3079 * ((_3062 * _3080) + _3047)) + 9.9999999392252902907785028219223e-09) + (((_3079 * _3080) + _3047) * _3062))) * _3079;
                                float _4110 = isnan(0.0) ? _3090 : (isnan(_3090) ? 0.0 : max(_3090, 0.0));
                                float _3100 = (_3025 * _3002) * (((_3048 * 3.1415927410125732421875) * (isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0)))) / ((_3070 * _3070) * ((_3015 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3026 * _2869.z;
                                frontier_phi_75_pred_1 = _3026 * _2869.y;
                                frontier_phi_75_pred_2 = _3026 * _2869.x;
                                frontier_phi_75_pred_3 = _3100 * _2881.z;
                                frontier_phi_75_pred_4 = _3100 * _2881.y;
                                frontier_phi_75_pred_5 = _3100 * _2881.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3109 = frontier_phi_75_pred;
                            _3108 = frontier_phi_75_pred_1;
                            _3107 = frontier_phi_75_pred_2;
                            _3106 = frontier_phi_75_pred_3;
                            _3105 = frontier_phi_75_pred_4;
                            _3104 = frontier_phi_75_pred_5;
                            _2811 = _3107 + _2824;
                            _2812 = _3108 + _2825;
                            _2813 = _3109 + _2826;
                            _2808 = _3104 + _2821;
                            _2809 = _3105 + _2822;
                            _2810 = _3106 + _2823;
                            if (_2828 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2821 = _2808;
                                _2822 = _2809;
                                _2823 = _2810;
                                _2824 = _2811;
                                _2825 = _2812;
                                _2826 = _2813;
                                _2827 = _2828;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2813;
                        frontier_phi_69_pred_1 = _2812;
                        frontier_phi_69_pred_2 = _2811;
                        frontier_phi_69_pred_3 = _2810;
                        frontier_phi_69_pred_4 = _2809;
                        frontier_phi_69_pred_5 = _2808;
                    }
                    _2480 = frontier_phi_69_pred;
                    _2478 = frontier_phi_69_pred_1;
                    _2476 = frontier_phi_69_pred_2;
                    _2474 = frontier_phi_69_pred_3;
                    _2472 = frontier_phi_69_pred_4;
                    _2470 = frontier_phi_69_pred_5;
                    uint _2615 = _2614 + 1u;
                    if (_2615 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2608 = _2470;
                        _2609 = _2472;
                        _2610 = _2474;
                        _2611 = _2476;
                        _2612 = _2478;
                        _2613 = _2480;
                        _2614 = _2615;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2480;
                frontier_phi_57_58_ladder_1 = _2478;
                frontier_phi_57_58_ladder_2 = _2476;
                frontier_phi_57_58_ladder_3 = _2474;
                frontier_phi_57_58_ladder_4 = _2472;
                frontier_phi_57_58_ladder_5 = _2470;
            }
            else
            {
                frontier_phi_57_58_ladder = _2367;
                frontier_phi_57_58_ladder_1 = _2365;
                frontier_phi_57_58_ladder_2 = _2363;
                frontier_phi_57_58_ladder_3 = _2361;
                frontier_phi_57_58_ladder_4 = _2359;
                frontier_phi_57_58_ladder_5 = _2357;
            }
            _2469 = frontier_phi_57_58_ladder_5;
            _2471 = frontier_phi_57_58_ladder_4;
            _2473 = frontier_phi_57_58_ladder_3;
            _2475 = frontier_phi_57_58_ladder_2;
            _2477 = frontier_phi_57_58_ladder_1;
            _2479 = frontier_phi_57_58_ladder;
        }
        float _2484 = isnan(1.0) ? _531 : (isnan(_531) ? 1.0 : min(_531, 1.0));
        _2269 = (_2484 * _2475) + _1722;
        _2271 = (_2484 * _2477) + _1724;
        _2273 = (_2484 * _2479) + _1726;
        _2275 = ((_2469 * 0.039999999105930328369140625) * _2484) + _2055;
        _2277 = ((_2471 * 0.039999999105930328369140625) * _2484) + _2057;
        _2279 = ((_2473 * 0.039999999105930328369140625) * _2484) + _2059;
    }
    else
    {
        _2269 = _1722;
        _2271 = _1724;
        _2273 = _1726;
        _2275 = _2055;
        _2277 = _2057;
        _2279 = _2059;
    }
    float _4126 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _4137 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _4148 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    uint _2299 = _505 + 6u;
    float _2307 = _464 / cbSceneParam._m0[86u].x;
    float _2308 = _465 / cbSceneParam._m0[86u].y;
    vec4 _2322 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2307, _2308, (log2((isnan(cbSceneParam._m0[77u].w) ? _397 : (isnan(_397) ? cbSceneParam._m0[77u].w : min(_397, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2324 = _2322.x;
    float _2325 = _2322.y;
    float _2326 = _2322.z;
    float _2327 = _2322.w;
    float _2419;
    float _2421;
    float _2423;
    float _2425;
    if (_397 > cbSceneParam._m0[78u].w)
    {
        float _2382 = isnan(_397) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _397 : min(cbSceneParam._m0[80u].w, _397));
        float _2383 = _2382 / _397;
        float _2394 = _2383 * _449;
        float _2395 = _450 * _2383;
        float _2396 = (-0.0) - _2395;
        float _2397 = _2383 * _451;
        float _2399 = (cbSceneParam._m0[77u].w * _2396) / _2382;
        float _2400 = _2399 + cbSceneParam._m0[79u].w;
        float _2401 = cbSceneParam._m0[79u].w - _2395;
        float _2407 = sqrt(((_2394 * _2394) + (_2395 * _2395)) + (_2397 * _2397));
        float _2410 = (1.0 - (cbSceneParam._m0[77u].w / _2382)) * _2407;
        float _2415 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2417 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2570;
        if (abs((_2396 - _2399) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2570 = ((((_2400 > 0.0) ? exp2(_2415 * _2400) : (2.0 - exp2(_2417 * _2400))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2410;
        }
        else
        {
            float _2530 = 1.0 / cbSceneParam._m0[80u].x;
            float _2531 = isnan(_2401) ? _2400 : (isnan(_2400) ? _2401 : max(_2400, _2401));
            float _2532 = isnan(_2401) ? _2400 : (isnan(_2400) ? _2401 : min(_2400, _2401));
            float _2541 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : min(_2531, 0.0));
            float _2542 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : min(_2532, 0.0));
            _2570 = ((abs(_2407 / _2396) * cbSceneParam._m0[80u].y) * ((((_2541 - _2542) * 2.0) - ((exp2(_2415 * (isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0)))) - exp2(_2415 * (isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0))))) * _2530)) - ((exp2(_2417 * _2541) - exp2(_2417 * _2542)) * _2530))) + (_2410 * cbSceneParam._m0[80u].z);
        }
        vec4 _2572 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2307, _2308, 1.0), 0.0);
        float _2581 = exp2((_2570 * (-1.44269502162933349609375)) * (1.0 - _2572.w));
        float _2582 = log2(_2581);
        float _2598 = log2(_2327);
        _2419 = (exp2(_2598 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2582 * cbSceneParam._m0[78u].x)) * _2572.x) / cbSceneParam._m0[78u].x)) + _2324;
        _2421 = (exp2(_2598 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2582 * cbSceneParam._m0[78u].y)) * _2572.y) / cbSceneParam._m0[78u].y)) + _2325;
        _2423 = (exp2(_2598 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2582 * cbSceneParam._m0[78u].z)) * _2572.z) / cbSceneParam._m0[78u].z)) + _2326;
        _2425 = _2581 * _2327;
    }
    else
    {
        _2419 = _2324;
        _2421 = _2325;
        _2423 = _2326;
        _2425 = _2327;
    }
    float _2437 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2438 = _2437 == 3.0;
    float _2439 = log2(_2425);
    float _2446 = exp2(_2439 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0))) * (_2269 + ((isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0))) * _531))) + ((_2275 + ((isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0))) * _1338)) * cbPerFrame._m0[3u].x));
    float _2447 = exp2(_2439 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0))) * (_2271 + ((isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0))) * _531))) + ((_2277 + ((isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0))) * _1338)) * cbPerFrame._m0[3u].x));
    float _2448 = exp2(_2439 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0))) * (_2273 + ((isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0))) * _531))) + ((_2279 + ((isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0))) * _1338)) * cbPerFrame._m0[3u].x));
    float _2457 = (_2437 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2457 * (_2438 ? _2446 : (_2446 + (cbSceneParam._m0[72u].w * _2419)));
    SV_Target.y = _2457 * (_2438 ? _2447 : (_2447 + (cbSceneParam._m0[72u].w * _2421)));
    SV_Target.z = _2457 * (_2438 ? _2448 : (_2448 + (cbSceneParam._m0[72u].w * _2423)));
    SV_Target.w = cbInstanceData._m0[_2299].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2299].w;
}


