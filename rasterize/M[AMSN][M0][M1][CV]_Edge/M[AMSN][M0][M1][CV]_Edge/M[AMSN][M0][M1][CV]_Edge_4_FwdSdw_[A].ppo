#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _931;
float _3582;
float _3583;
float _3584;
float _3585;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _196 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _203 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _204 = _203 * NORMAL.x;
    float _205 = _203 * NORMAL.y;
    float _206 = _203 * NORMAL.z;
    float _210 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _218;
    float _219;
    float _220;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _218 = (-0.0) - _204;
        _219 = (-0.0) - _205;
        _220 = (-0.0) - _206;
    }
    else
    {
        _218 = _204;
        _219 = _205;
        _220 = _206;
    }
    vec4 _246 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _252 = _246.w;
    float _253 = _246.x * cbMtdParam._m0[9u].x;
    float _254 = _246.y * cbMtdParam._m0[9u].y;
    float _255 = _246.z * cbMtdParam._m0[9u].z;
    vec4 _267 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _271 = _267.z;
    float _275 = (_267.x * 2.0) + (-1.0);
    float _277 = (_267.y * 2.0) + (-1.0);
    float _278 = dot(vec2(_275, _277), vec2(_275, _277));
    float _3594 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _284 = sqrt(1.0 - (isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0))));
    float _296 = (TEXCOORD_3.x - (((1.0 - TEXCOORD_3.x) * 0.00999999977648258209228515625) * cbMtdParam._m0[12u].y)) * (cbMtdParam._m0[12u].z + 1.0);
    float _3605 = isnan(0.0) ? _296 : (isnan(_296) ? 0.0 : max(_296, 0.0));
    float _297 = isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0));
    float _304 = (_297 * (cbMtdParam._m0[10u].x - _253)) + _253;
    float _305 = (_297 * (cbMtdParam._m0[10u].y - _254)) + _254;
    float _306 = (_297 * (cbMtdParam._m0[10u].z - _255)) + _255;
    vec4 _318 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _325 = (_318.x * 2.0) + (-1.0);
    float _326 = (_318.y * 2.0) + (-1.0);
    float _327 = dot(vec2(_325, _326), vec2(_325, _326));
    float _3616 = isnan(0.0) ? _327 : (isnan(_327) ? 0.0 : max(_327, 0.0));
    float _335 = (_297 * (_318.z - _271)) + _271;
    float _347 = (((_325 - _275) + (cbMtdParam._m0[12u].w * _275)) * _297) + _275;
    float _348 = (((_326 - _277) + (cbMtdParam._m0[12u].w * _277)) * _297) + _277;
    float _349 = (_297 * (sqrt(1.0 - (isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0)))) - _284)) + _284;
    float _352 = fma(_349, _218, fma(_348, _210 * TANGENT.x, (_196 * _188) * _347));
    float _355 = fma(_349, _219, fma(_348, _210 * TANGENT.y, (_196 * _189) * _347));
    float _358 = fma(_349, _220, fma(_348, _210 * TANGENT.z, (_196 * _190) * _347));
    float _362 = inversesqrt(dot(vec3(_352, _355, _358), vec3(_352, _355, _358)));
    float _363 = _362 * _352;
    float _364 = _362 * _355;
    float _365 = _362 * _358;
    float _3627 = isnan(0.0) ? _335 : (isnan(_335) ? 0.0 : max(_335, 0.0));
    float _366 = isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0));
    float _3638 = isnan(0.0) ? _304 : (isnan(_304) ? 0.0 : max(_304, 0.0));
    float _3649 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _3660 = isnan(0.0) ? _306 : (isnan(_306) ? 0.0 : max(_306, 0.0));
    float _385 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _427 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _437 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _427);
    float _438 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _427);
    float _439 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _427);
    float _443 = inversesqrt(dot(vec3(_437, _438, _439), vec3(_437, _438, _439)));
    float _444 = _437 * _443;
    float _445 = _438 * _443;
    float _446 = _439 * _443;
    vec4 _451 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _453 = _451.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _611 = sqrt(((_437 * _437) + (_438 * _438)) + (_439 * _439));
        float _617 = (cbMatDynParam._m0[5u].x * _611) + cbMatDynParam._m0[5u].y;
        float _3671 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
        float _618 = isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0));
        float _622 = (cbMatDynParam._m0[5u].z * _611) + cbMatDynParam._m0[5u].w;
        float _3682 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0))) - _618)) + _618) < ((_453 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _465 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _466 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _486 = fma(_365, cbSceneParam._m0[5u].z, fma(_364, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _363));
    float _489 = fma(_365, cbSceneParam._m0[6u].z, fma(_364, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _363));
    float _492 = fma(_365, cbSceneParam._m0[7u].z, fma(_364, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _363));
    uint _505 = uint(roundEven(NORMAL.w)) * 13u;
    uint _507 = _505 + 9u;
    uint _508 = _507 + uint(cbMatDynParam._m0[0u].w);
    float _514 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0)))) * cbInstanceData._m0[_508].x;
    float _515 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0)))) * cbInstanceData._m0[_508].y;
    float _516 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0)))) * cbInstanceData._m0[_508].z;
    float _3693 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _517 = isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0));
    float _3704 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _518 = isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0));
    float _3715 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _519 = isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0));
    vec4 _528 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _465, cbSceneParam._m0[86u].y * _466));
    float _531 = _528.x * TEXCOORD_3.w;
    float _532 = dot(vec3(_363, _364, _365), vec3(_444, _445, _446));
    float _535 = _532 * 2.0;
    float _539 = (_535 * _363) - _444;
    float _540 = (_535 * _364) - _445;
    float _541 = (_535 * _365) - _446;
    float _545 = abs(dot(vec3(_444, _445, _446), vec3(_363, _364, _365)));
    float _3726 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _547 = sqrt(_366);
    float _560 = exp2((_547 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_547 * 3.0));
    float _592 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _596 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _600 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _930;
    float _932;
    float _933;
    float _934;
    float _935;
    float _936;
    float _937;
    float _938;
    float _939;
    float _940;
    float _941;
    float _942;
    float _943;
    float _944;
    float _945;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _655 = fma(_600, cbModelParam._m0[26u].z, fma(_596, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _592));
        float _659 = fma(_600, cbModelParam._m0[27u].z, fma(_596, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _592));
        float _663 = fma(_600, cbModelParam._m0[28u].z, fma(_596, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _592));
        float _688 = _592 + _363;
        float _689 = _596 + _364;
        float _690 = _600 + _365;
        float _700 = fma(_690, cbModelParam._m0[26u].z, fma(_689, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _688)) - _655;
        float _701 = fma(_690, cbModelParam._m0[27u].z, fma(_689, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _688)) - _659;
        float _702 = fma(_690, cbModelParam._m0[28u].z, fma(_689, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _688)) - _663;
        float _706 = inversesqrt(dot(vec3(_700, _701, _702), vec3(_700, _701, _702)));
        float _719 = ((_706 * _700) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_655 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _720 = ((_706 * _701) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_659 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _721 = ((_706 * _702) / cbModelParam._m0[34u].z) + ((((((_663 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _724 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_719, _720, _721), 0.0);
        vec4 _731 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_719, _720, _721), 0.0);
        vec4 _738 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_719, _720, _721), 0.0);
        vec4 _745 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_719, _720, _721), 0.0);
        float _758 = exp2((_724.w + (-0.5)) * 20.0) * 2.0;
        float _759 = _758 * (_724.x + (-0.5));
        float _760 = _758 * (_724.y + (-0.5));
        float _761 = _758 * (_724.z + (-0.5));
        float _768 = exp2((_731.w + (-0.5)) * 20.0) * 2.0;
        float _769 = _768 * (_731.x + (-0.5));
        float _770 = _768 * (_731.y + (-0.5));
        float _771 = _768 * (_731.z + (-0.5));
        float _778 = exp2((_738.w + (-0.5)) * 20.0) * 2.0;
        float _779 = _778 * (_738.x + (-0.5));
        float _780 = _778 * (_738.y + (-0.5));
        float _781 = _778 * (_738.z + (-0.5));
        float _788 = exp2((_745.w + (-0.5)) * 20.0) * 2.0;
        float _789 = _788 * (_745.x + (-0.5));
        float _790 = _788 * (_745.y + (-0.5));
        float _791 = _788 * (_745.z + (-0.5));
        float _792 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
        float _793 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
        float _794 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
        float _795 = _759 * 0.5;
        float _796 = _769 * 0.5;
        float _797 = _779 * 0.5;
        float _798 = dot(vec3(_795, _796, _797), vec3(_795, _796, _797));
        float _803 = (_798 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_798);
        float _812 = (dot(vec3(_363, _364, _365), vec3(_803 * _795, _803 * _796, _803 * _797)) + 1.0) * 0.5;
        float _3752 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
        float _822 = sqrt(((_796 * _796) + (_795 * _795)) + (_797 * _797)) / (_792 + 9.9999997473787516355514526367188e-06);
        float _3763 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
        float _823 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
        float _824 = _823 * 2.0;
        float _828 = (1.0 - _823) / (_823 + 1.0);
        float _3774 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
        float _829 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
        float _838 = ((((1.0 - _829) * (_824 + 2.0)) * exp2(log2(isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0))) * (_824 + 1.0))) + _829) * _792;
        float _839 = _760 * 0.5;
        float _840 = _770 * 0.5;
        float _841 = _780 * 0.5;
        float _842 = dot(vec3(_839, _840, _841), vec3(_839, _840, _841));
        float _847 = (_842 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_842);
        float _855 = (dot(vec3(_363, _364, _365), vec3(_847 * _839, _847 * _840, _847 * _841)) + 1.0) * 0.5;
        float _3785 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
        float _864 = sqrt(((_840 * _840) + (_839 * _839)) + (_841 * _841)) / (_793 + 9.9999997473787516355514526367188e-06);
        float _3796 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
        float _865 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
        float _866 = _865 * 2.0;
        float _870 = (1.0 - _865) / (_865 + 1.0);
        float _3807 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
        float _871 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
        float _880 = ((((1.0 - _871) * (_866 + 2.0)) * exp2(log2(isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0))) * (_866 + 1.0))) + _871) * _793;
        float _881 = _761 * 0.5;
        float _882 = _771 * 0.5;
        float _883 = _781 * 0.5;
        float _884 = dot(vec3(_881, _882, _883), vec3(_881, _882, _883));
        float _889 = (_884 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_884);
        float _897 = (dot(vec3(_363, _364, _365), vec3(_889 * _881, _889 * _882, _889 * _883)) + 1.0) * 0.5;
        float _3818 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
        float _906 = sqrt(((_882 * _882) + (_881 * _881)) + (_883 * _883)) / (_794 + 9.9999997473787516355514526367188e-06);
        float _3829 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
        float _907 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
        float _908 = _907 * 2.0;
        float _912 = (1.0 - _907) / (_907 + 1.0);
        float _3840 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
        float _913 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
        float _922 = ((((1.0 - _913) * (_908 + 2.0)) * exp2(log2(isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0))) * (_908 + 1.0))) + _913) * _794;
        _930 = _761;
        _932 = _760;
        _933 = _759;
        _934 = _771;
        _935 = _770;
        _936 = _769;
        _937 = _781;
        _938 = _780;
        _939 = _779;
        _940 = _794;
        _941 = _793;
        _942 = _792;
        _943 = cbModelParam._m0[36u].z * (isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0)));
        _944 = cbModelParam._m0[36u].z * (isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0)));
        _945 = cbModelParam._m0[36u].z * (isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0)));
    }
    else
    {
        _930 = _931;
        _932 = _931;
        _933 = _931;
        _934 = _931;
        _935 = _931;
        _936 = _931;
        _937 = _931;
        _938 = _931;
        _939 = _931;
        _940 = _931;
        _941 = _931;
        _942 = _931;
        _943 = 0.0;
        _944 = 0.0;
        _945 = 0.0;
    }
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _974 = fma(_600, cbModelParam._m0[30u].z, fma(_596, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _592));
        float _978 = fma(_600, cbModelParam._m0[31u].z, fma(_596, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _592));
        float _982 = fma(_600, cbModelParam._m0[32u].z, fma(_596, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _592));
        float _1005 = _592 + _363;
        float _1006 = _596 + _364;
        float _1007 = _600 + _365;
        float _1017 = fma(_1007, cbModelParam._m0[30u].z, fma(_1006, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1005)) - _974;
        float _1018 = fma(_1007, cbModelParam._m0[31u].z, fma(_1006, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1005)) - _978;
        float _1019 = fma(_1007, cbModelParam._m0[32u].z, fma(_1006, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1005)) - _982;
        float _1023 = inversesqrt(dot(vec3(_1017, _1018, _1019), vec3(_1017, _1018, _1019)));
        float _1036 = ((_1023 * _1017) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_974 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1037 = ((_1023 * _1018) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_978 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1038 = ((_1023 * _1019) / cbModelParam._m0[35u].z) + ((((((_982 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1040 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1036, _1037, _1038), 0.0);
        vec4 _1047 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1036, _1037, _1038), 0.0);
        vec4 _1054 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1036, _1037, _1038), 0.0);
        vec4 _1061 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1036, _1037, _1038), 0.0);
        float _1073 = exp2((_1040.w + (-0.5)) * 20.0) * 2.0;
        float _1074 = _1073 * (_1040.x + (-0.5));
        float _1075 = _1073 * (_1040.y + (-0.5));
        float _1076 = _1073 * (_1040.z + (-0.5));
        float _1083 = exp2((_1047.w + (-0.5)) * 20.0) * 2.0;
        float _1084 = _1083 * (_1047.x + (-0.5));
        float _1085 = _1083 * (_1047.y + (-0.5));
        float _1086 = _1083 * (_1047.z + (-0.5));
        float _1093 = exp2((_1054.w + (-0.5)) * 20.0) * 2.0;
        float _1094 = _1093 * (_1054.x + (-0.5));
        float _1095 = _1093 * (_1054.y + (-0.5));
        float _1096 = _1093 * (_1054.z + (-0.5));
        float _1103 = exp2((_1061.w + (-0.5)) * 20.0) * 2.0;
        float _1104 = _1103 * (_1061.x + (-0.5));
        float _1105 = _1103 * (_1061.y + (-0.5));
        float _1106 = _1103 * (_1061.z + (-0.5));
        float _1107 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1108 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1109 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1110 = _1074 * 0.5;
        float _1111 = _1084 * 0.5;
        float _1112 = _1094 * 0.5;
        float _1113 = dot(vec3(_1110, _1111, _1112), vec3(_1110, _1111, _1112));
        float _1118 = (_1113 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1113);
        float _1126 = (dot(vec3(_363, _364, _365), vec3(_1118 * _1110, _1118 * _1111, _1118 * _1112)) + 1.0) * 0.5;
        float _3881 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1135 = sqrt(((_1111 * _1111) + (_1110 * _1110)) + (_1112 * _1112)) / (_1107 + 9.9999997473787516355514526367188e-06);
        float _3892 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1136 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
        float _1137 = _1136 * 2.0;
        float _1141 = (1.0 - _1136) / (_1136 + 1.0);
        float _3903 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1142 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
        float _1151 = ((((1.0 - _1142) * (_1137 + 2.0)) * exp2(log2(isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0))) * (_1137 + 1.0))) + _1142) * _1107;
        float _1152 = _1075 * 0.5;
        float _1153 = _1085 * 0.5;
        float _1154 = _1095 * 0.5;
        float _1155 = dot(vec3(_1152, _1153, _1154), vec3(_1152, _1153, _1154));
        float _1160 = (_1155 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1155);
        float _1168 = (dot(vec3(_363, _364, _365), vec3(_1160 * _1152, _1160 * _1153, _1160 * _1154)) + 1.0) * 0.5;
        float _3914 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1177 = sqrt(((_1153 * _1153) + (_1152 * _1152)) + (_1154 * _1154)) / (_1108 + 9.9999997473787516355514526367188e-06);
        float _3925 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1178 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
        float _1179 = _1178 * 2.0;
        float _1183 = (1.0 - _1178) / (_1178 + 1.0);
        float _3936 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1184 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
        float _1193 = ((((1.0 - _1184) * (_1179 + 2.0)) * exp2(log2(isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0))) * (_1179 + 1.0))) + _1184) * _1108;
        float _1194 = _1076 * 0.5;
        float _1195 = _1086 * 0.5;
        float _1196 = _1096 * 0.5;
        float _1197 = dot(vec3(_1194, _1195, _1196), vec3(_1194, _1195, _1196));
        float _1202 = (_1197 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1197);
        float _1210 = (dot(vec3(_363, _364, _365), vec3(_1202 * _1194, _1202 * _1195, _1202 * _1196)) + 1.0) * 0.5;
        float _3947 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1219 = sqrt(((_1195 * _1195) + (_1194 * _1194)) + (_1196 * _1196)) / (_1109 + 9.9999997473787516355514526367188e-06);
        float _3958 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1220 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
        float _1221 = _1220 * 2.0;
        float _1225 = (1.0 - _1220) / (_1220 + 1.0);
        float _3969 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1226 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
        float _1235 = ((((1.0 - _1226) * (_1221 + 2.0)) * exp2(log2(isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0))) * (_1221 + 1.0))) + _1226) * _1109;
        _1243 = _1076;
        _1244 = _1075;
        _1245 = _1074;
        _1246 = _1086;
        _1247 = _1085;
        _1248 = _1084;
        _1249 = _1096;
        _1250 = _1095;
        _1251 = _1094;
        _1252 = _1109;
        _1253 = _1108;
        _1254 = _1107;
        _1255 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0)));
        _1256 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0)));
        _1257 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0)));
    }
    else
    {
        _1243 = _931;
        _1244 = _931;
        _1245 = _931;
        _1246 = _931;
        _1247 = _931;
        _1248 = _931;
        _1249 = _931;
        _1250 = _931;
        _1251 = _931;
        _1252 = _931;
        _1253 = _931;
        _1254 = _931;
        _1255 = 0.0;
        _1256 = 0.0;
        _1257 = 0.0;
    }
    float _1267 = (cbModelParam._m0[1u].x * (_1255 - _943)) + _943;
    float _1268 = (cbModelParam._m0[1u].x * (_1256 - _944)) + _944;
    float _1269 = (cbModelParam._m0[1u].x * (_1257 - _945)) + _945;
    float _1290 = fma(_1269, cbSceneParam._m0[89u].z, fma(_1268, cbSceneParam._m0[89u].y, _1267 * cbSceneParam._m0[89u].x));
    float _1293 = fma(_1269, cbSceneParam._m0[90u].z, fma(_1268, cbSceneParam._m0[90u].y, _1267 * cbSceneParam._m0[90u].x));
    float _1296 = fma(_1269, cbSceneParam._m0[91u].z, fma(_1268, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1267));
    float _1311 = _539 * 0.5;
    float _1312 = _540 * 0.5;
    float _1313 = _541 * 0.5;
    float _1314 = dot(vec4(_1311, _1312, _1313, 1.0), vec4(_1245, _1248, _1251, _1254));
    float _1317 = dot(vec4(_1311, _1312, _1313, 1.0), vec4(_1244, _1247, _1250, _1253));
    float _1320 = dot(vec4(_1311, _1312, _1313, 1.0), vec4(_1243, _1246, _1249, _1252));
    float _1354;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1327 = dot(vec4(_1311, _1312, _1313, 1.0), vec4(_930, _934, _937, _940));
        float _1331 = dot(vec4(_1311, _1312, _1313, 1.0), vec4(_932, _935, _938, _941));
        float _1335 = dot(vec4(_1311, _1312, _1313, 1.0), vec4(_933, _936, _939, _942));
        float _1342 = dot(vec4(cbModelParam._m0[39u]), vec4(_1311, _1312, _1313, 1.0));
        _1354 = dot(vec3(isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0)), isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0)), isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1342) ? 0.0 : (isnan(0.0) ? _1342 : max(0.0, _1342))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1354 = 1.0;
    }
    float _1365;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1356 = dot(vec4(cbModelParam._m0[40u]), vec4(_1311, _1312, _1313, 1.0));
        _1365 = dot(vec3(isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0)), isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0)), isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1356) ? 0.0 : (isnan(0.0) ? _1356 : max(0.0, _1356))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1365 = 1.0;
    }
    float _1369 = (_1365 * cbModelParam._m0[1u].x) + (_1354 * (1.0 - cbModelParam._m0[1u].x));
    float _1379 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _366);
    float _1380 = isnan(_1379) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1379 : min(cbModelParam._m0[25u].z, _1379));
    float _1461;
    float _1463;
    float _1465;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1428 = fma(_600, cbModelParam._m0[13u].z, fma(_596, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _592)) + cbModelParam._m0[13u].w;
        float _1432 = fma(_600, cbModelParam._m0[14u].z, fma(_596, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _592)) + cbModelParam._m0[14u].w;
        float _1436 = fma(_600, cbModelParam._m0[15u].z, fma(_596, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _592)) + cbModelParam._m0[15u].w;
        float _1439 = fma(_541, cbModelParam._m0[13u].z, fma(_540, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _539));
        float _1442 = fma(_541, cbModelParam._m0[14u].z, fma(_540, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _539));
        float _1445 = fma(_541, cbModelParam._m0[15u].z, fma(_540, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _539));
        float _1473;
        if (_1439 > 0.0)
        {
            _1473 = abs((1.0 - _1428) / _1439);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1439 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1428 + 1.0) / _1439);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1473 = frontier_phi_19_17_ladder;
        }
        float _1646;
        if (_1442 > 0.0)
        {
            _1646 = abs((1.0 - _1432) / _1442);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1442 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1432 + 1.0) / _1442);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1646 = frontier_phi_28_24_ladder;
        }
        float _1942;
        if (_1445 > 0.0)
        {
            _1942 = abs((1.0 - _1436) / _1445);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1445 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1436 + 1.0) / _1445);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1942 = frontier_phi_40_35_ladder;
        }
        float _1944 = isnan(_1646) ? _1473 : (isnan(_1473) ? _1646 : min(_1473, _1646));
        float _1945 = isnan(_1942) ? _1944 : (isnan(_1944) ? _1942 : min(_1944, _1942));
        float _1949 = (_1945 * _1439) + _1428;
        float _1950 = (_1945 * _1442) + _1432;
        float _1951 = (_1945 * _1445) + _1436;
        float _1952 = _1945 * 9.9999997473787516355514526367188e-05;
        float _1954 = (-1.0) - _1952;
        float _1956 = _1952 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1951 > _1956) || ((_1951 < _1954) || ((_1950 > _1956) || ((_1950 < _1954) || ((_1949 < _1954) || (_1949 > _1956))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2096 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1951, cbModelParam._m0[9u].z, fma(_1950, cbModelParam._m0[9u].y, _1949 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1951, cbModelParam._m0[10u].z, fma(_1950, cbModelParam._m0[10u].y, _1949 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1951, cbModelParam._m0[11u].z, fma(_1950, cbModelParam._m0[11u].y, _1949 * cbModelParam._m0[11u].x))), _1380);
            frontier_phi_18_40_ladder = _2096.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2096.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2096.x * cbModelParam._m0[1u].y;
        }
        _1461 = frontier_phi_18_40_ladder_2;
        _1463 = frontier_phi_18_40_ladder_1;
        _1465 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1449 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_539, _540, _541), _1380);
        _1461 = _1449.x * cbModelParam._m0[1u].y;
        _1463 = _1449.y * cbModelParam._m0[1u].y;
        _1465 = _1449.z * cbModelParam._m0[1u].y;
    }
    float _1469 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _366);
    float _1470 = isnan(_1469) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1469 : min(cbModelParam._m0[25u].w, _1469));
    float _1563;
    float _1565;
    float _1567;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1527 = fma(_600, cbModelParam._m0[21u].z, fma(_596, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _592)) + cbModelParam._m0[21u].w;
        float _1531 = fma(_600, cbModelParam._m0[22u].z, fma(_596, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _592)) + cbModelParam._m0[22u].w;
        float _1535 = fma(_600, cbModelParam._m0[23u].z, fma(_596, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _592)) + cbModelParam._m0[23u].w;
        float _1538 = fma(_541, cbModelParam._m0[21u].z, fma(_540, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _539));
        float _1541 = fma(_541, cbModelParam._m0[22u].z, fma(_540, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _539));
        float _1544 = fma(_541, cbModelParam._m0[23u].z, fma(_540, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _539));
        float _1651;
        if (_1538 > 0.0)
        {
            _1651 = abs((1.0 - _1527) / _1538);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1538 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1527 + 1.0) / _1538);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1651 = frontier_phi_30_26_ladder;
        }
        float _1969;
        if (_1541 > 0.0)
        {
            _1969 = abs((1.0 - _1531) / _1541);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1541 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1531 + 1.0) / _1541);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1969 = frontier_phi_42_37_ladder;
        }
        float _2296;
        if (_1544 > 0.0)
        {
            _2296 = abs((1.0 - _1535) / _1544);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1544 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1535 + 1.0) / _1544);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2296 = frontier_phi_52_49_ladder;
        }
        float _2298 = isnan(_1969) ? _1651 : (isnan(_1651) ? _1969 : min(_1651, _1969));
        float _2299 = isnan(_2296) ? _2298 : (isnan(_2298) ? _2296 : min(_2298, _2296));
        float _2303 = (_2299 * _1538) + _1527;
        float _2304 = (_2299 * _1541) + _1531;
        float _2305 = (_2299 * _1544) + _1535;
        float _2306 = _2299 * 9.9999997473787516355514526367188e-05;
        float _2307 = (-1.0) - _2306;
        float _2309 = _2306 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2305 > _2309) || ((_2305 < _2307) || ((_2304 > _2309) || ((_2304 < _2307) || ((_2303 < _2307) || (_2303 > _2309))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2423 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2305, cbModelParam._m0[17u].z, fma(_2304, cbModelParam._m0[17u].y, _2303 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2305, cbModelParam._m0[18u].z, fma(_2304, cbModelParam._m0[18u].y, _2303 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2305, cbModelParam._m0[19u].z, fma(_2304, cbModelParam._m0[19u].y, _2303 * cbModelParam._m0[19u].x))), _1470);
            frontier_phi_27_52_ladder = _2423.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2423.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2423.x * cbModelParam._m0[1u].z;
        }
        _1563 = frontier_phi_27_52_ladder_2;
        _1565 = frontier_phi_27_52_ladder_1;
        _1567 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1547 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_539, _540, _541), _1470);
        _1563 = _1547.x * cbModelParam._m0[1u].z;
        _1565 = _1547.y * cbModelParam._m0[1u].z;
        _1567 = _1547.z * cbModelParam._m0[1u].z;
    }
    float _1579 = ((((1.0 - _560) * ((_547 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_560 * _547)) * _531;
    float _1580 = _1579 * ((cbModelParam._m0[1u].w * (_1563 - _1461)) + _1461);
    float _1581 = _1579 * ((cbModelParam._m0[1u].w * (_1565 - _1463)) + _1463);
    float _1582 = _1579 * ((cbModelParam._m0[1u].w * (_1567 - _1465)) + _1465);
    float _1585 = fma(_1582, cbSceneParam._m0[89u].z, fma(_1581, cbSceneParam._m0[89u].y, _1580 * cbSceneParam._m0[89u].x));
    float _1588 = fma(_1582, cbSceneParam._m0[90u].z, fma(_1581, cbSceneParam._m0[90u].y, _1580 * cbSceneParam._m0[90u].x));
    float _1591 = fma(_1582, cbSceneParam._m0[91u].z, fma(_1581, cbSceneParam._m0[91u].y, _1580 * cbSceneParam._m0[91u].x));
    float _1625 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1629 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1633 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1637 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1638 = _1625 / _1637;
    float _1639 = _1629 / _1637;
    float _1640 = _1633 / _1637;
    float _1787;
    float _1788;
    float _1789;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1667 = ((uint(_1640 > cbSceneParam._m0[59u].y) + uint(_1640 > cbSceneParam._m0[59u].x)) + uint(_1640 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1668 = _1667 + 43u;
        uint _1676 = _1667 + 44u;
        uint _1684 = _1667 + 45u;
        uint _1692 = _1667 + 46u;
        float _1703 = fma(_1637, cbSceneParam._m0[_1668].w, fma(_1633, cbSceneParam._m0[_1668].z, fma(_1629, cbSceneParam._m0[_1668].y, _1625 * cbSceneParam._m0[_1668].x)));
        float _1707 = fma(_1637, cbSceneParam._m0[_1676].w, fma(_1633, cbSceneParam._m0[_1676].z, fma(_1629, cbSceneParam._m0[_1676].y, _1625 * cbSceneParam._m0[_1676].x)));
        float _1715 = fma(_1637, cbSceneParam._m0[_1692].w, fma(_1633, cbSceneParam._m0[_1692].z, fma(_1629, cbSceneParam._m0[_1692].y, _1625 * cbSceneParam._m0[_1692].x)));
        float _1720 = cbSceneParam._m0[33u].z * _1715;
        float _1722 = cbSceneParam._m0[33u].w * _1715;
        float _1725 = fma(_1637, cbSceneParam._m0[_1684].w, fma(_1633, cbSceneParam._m0[_1684].z, fma(_1629, cbSceneParam._m0[_1684].y, _1625 * cbSceneParam._m0[_1684].x))) / _1715;
        float _1773 = (cbSceneParam._m0[33u].x - sqrt(((_1639 * _1639) + (_1638 * _1638)) + (_1640 * _1640))) * cbSceneParam._m0[33u].y;
        float _4095 = isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0));
        float _1780 = (isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1720 + _1703) / _1715, (_1722 + _1707) / _1715), _1725), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1722 + _1703) / _1715, (_1707 - _1720) / _1715), _1725), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1703 - _1720) / _1715, (_1707 - _1722) / _1715), _1725), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1703 - _1722) / _1715, (_1720 + _1707) / _1715), _1725), 0.0)).x), vec4(0.25)));
        _1787 = 1.0 - (_1780 * cbSceneParam._m0[34u].x);
        _1788 = 1.0 - (_1780 * cbSceneParam._m0[34u].y);
        _1789 = 1.0 - (_1780 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1787 = 1.0;
        _1788 = 1.0;
        _1789 = 1.0;
    }
    float _1853;
    float _1855;
    float _1857;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1841 = fma(_1637, cbSceneParam._m0[63u].w, fma(_1633, cbSceneParam._m0[63u].z, fma(_1629, cbSceneParam._m0[63u].y, _1625 * cbSceneParam._m0[63u].x)));
        float _1842 = fma(_1637, cbSceneParam._m0[60u].w, fma(_1633, cbSceneParam._m0[60u].z, fma(_1629, cbSceneParam._m0[60u].y, _1625 * cbSceneParam._m0[60u].x))) / _1841;
        float _1843 = fma(_1637, cbSceneParam._m0[61u].w, fma(_1633, cbSceneParam._m0[61u].z, fma(_1629, cbSceneParam._m0[61u].y, _1625 * cbSceneParam._m0[61u].x))) / _1841;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1842 >= cbSceneParam._m0[64u].x) && (_1843 >= cbSceneParam._m0[64u].y)) && (_1842 <= cbSceneParam._m0[64u].z)) && (_1843 <= cbSceneParam._m0[64u].w))
        {
            float _1982 = fma(_1637, cbSceneParam._m0[62u].w, fma(_1633, cbSceneParam._m0[62u].z, fma(_1629, cbSceneParam._m0[62u].y, _1625 * cbSceneParam._m0[62u].x))) / _1841;
            float _1986 = isnan(cbSceneParam._m0[41u].w) ? _1982 : (isnan(_1982) ? cbSceneParam._m0[41u].w : max(_1982, cbSceneParam._m0[41u].w));
            float _2029 = (cbSceneParam._m0[33u].x - sqrt(((_1639 * _1639) + (_1638 * _1638)) + (_1640 * _1640))) * cbSceneParam._m0[33u].y;
            float _4111 = isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0));
            float _2036 = (isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1842, cbSceneParam._m0[33u].w + _1843), _1986), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1842, _1843 - cbSceneParam._m0[33u].z), _1986), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1842 - cbSceneParam._m0[33u].z, _1843 - cbSceneParam._m0[33u].w), _1986), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1842 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1843), _1986), 0.0)).x), vec4(0.25)));
            float _2040 = 1.0 - (_2036 * cbSceneParam._m0[34u].x);
            float _2041 = 1.0 - (_2036 * cbSceneParam._m0[34u].y);
            float _2042 = 1.0 - (_2036 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2041) ? _1788 : (isnan(_1788) ? _2041 : min(_1788, _2041));
            frontier_phi_39_38_ladder_1 = isnan(_2040) ? _1787 : (isnan(_1787) ? _2040 : min(_1787, _2040));
            frontier_phi_39_38_ladder_2 = isnan(_2042) ? _1789 : (isnan(_1789) ? _2042 : min(_1789, _2042));
        }
        else
        {
            frontier_phi_39_38_ladder = _1788;
            frontier_phi_39_38_ladder_1 = _1787;
            frontier_phi_39_38_ladder_2 = _1789;
        }
        _1853 = frontier_phi_39_38_ladder_1;
        _1855 = frontier_phi_39_38_ladder;
        _1857 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _1853 = _1787;
        _1855 = _1788;
        _1857 = _1789;
    }
    uvec4 _1862 = floatBitsToUint(cbInstanceData._m0[_505 + 5u]);
    uint _1864 = _1862.x * 14u;
    uint _1865 = _1864 + 13u;
    float _1872 = _531 + (-1.0);
    float _1877 = (cbLight._m0[_1865].x * _1872) + 1.0;
    float _1878 = (cbLight._m0[_1865].y * _1872) + 1.0;
    float _1879 = (cbLight._m0[_1865].z * _1872) + 1.0;
    float _1880 = (cbLight._m0[_1865].w * _1872) + 1.0;
    uint _1881 = _1864 + 5u;
    float _1887 = isnan(1.0) ? _1878 : (isnan(_1878) ? 1.0 : min(_1878, 1.0));
    uint _1891 = _1864 + 4u;
    float _1901 = isnan(1.0) ? _1877 : (isnan(_1877) ? 1.0 : min(_1877, 1.0));
    uint _1905 = _1864 | 1u;
    float _1916 = dot(vec3(cbLight._m0[_1864].xyz), vec3(_363, _364, _365));
    float _1919 = dot(vec3(cbLight._m0[_1905].xyz), vec3(_363, _364, _365));
    float _4147 = isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0));
    float _4158 = isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0));
    float _1924 = (isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0))) * 0.3183098733425140380859375;
    float _1926 = (isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0))) * 0.3183098733425140380859375;
    float _1933 = ((cbLight._m0[_1881].x * _1887) * _1926) + (((cbLight._m0[_1891].x * _1853) * _1901) * _1924);
    float _1934 = ((_1887 * cbLight._m0[_1881].y) * _1926) + (((cbLight._m0[_1891].y * _1855) * _1901) * _1924);
    float _1935 = ((_1887 * cbLight._m0[_1881].z) * _1926) + (((cbLight._m0[_1891].z * _1857) * _1901) * _1924);
    uvec4 _1939 = floatBitsToUint(cbLight._m0[_1864 + 12u]);
    bool _1941 = _1939.x == 0u;
    float _2043;
    float _2045;
    float _2047;
    if (_1941)
    {
        _2043 = _1933;
        _2045 = _1934;
        _2047 = _1935;
    }
    else
    {
        uint _2051 = _1864 + 6u;
        float _2067 = (dot(vec3(cbLight._m0[_1864 + 2u].xyz), vec3(_363, _364, _365)) * 0.5) + 0.5;
        float _2068 = _2067 * _2067;
        float _4169 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
        float _2069 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
        float _2070 = isnan(1.0) ? _1879 : (isnan(_1879) ? 1.0 : min(_1879, 1.0));
        _2043 = (((cbLight._m0[_2051].x * 0.3183098733425140380859375) * _2069) * _2070) + _1933;
        _2045 = (((cbLight._m0[_2051].y * 0.3183098733425140380859375) * _2069) * _2070) + _1934;
        _2047 = (((cbLight._m0[_2051].z * 0.3183098733425140380859375) * _2069) * _2070) + _1935;
    }
    bool _2050 = _1939.y == 0u;
    float _2105;
    float _2107;
    float _2109;
    if (_2050)
    {
        _2105 = _2043;
        _2107 = _2045;
        _2109 = _2047;
    }
    else
    {
        uint _2267 = _1864 + 7u;
        float _2283 = (dot(vec3(cbLight._m0[_1864 + 3u].xyz), vec3(_363, _364, _365)) * 0.5) + 0.5;
        float _2284 = _2283 * _2283;
        float _4185 = isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0));
        float _2285 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
        float _2286 = isnan(1.0) ? _1880 : (isnan(_1880) ? 1.0 : min(_1880, 1.0));
        _2105 = (((cbLight._m0[_2267].x * 0.3183098733425140380859375) * _2285) * _2286) + _2043;
        _2107 = (((cbLight._m0[_2267].y * 0.3183098733425140380859375) * _2285) * _2286) + _2045;
        _2109 = (((cbLight._m0[_2267].z * 0.3183098733425140380859375) * _2285) * _2286) + _2047;
    }
    uint _2112 = _1864 + 8u;
    float _2125 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1864].w)) * _366) * 0.949999988079071044921875);
    float _2126 = _2125 * _2125;
    float _2127 = cbLight._m0[_1864].x + _444;
    float _2128 = cbLight._m0[_1864].y + _445;
    float _2129 = cbLight._m0[_1864].z + _446;
    float _2133 = inversesqrt(dot(vec3(_2127, _2128, _2129), vec3(_2127, _2128, _2129)));
    float _2134 = _2133 * _2127;
    float _2135 = _2133 * _2128;
    float _2136 = _2133 * _2129;
    float _2137 = dot(vec3(_363, _364, _365), vec3(cbLight._m0[_1864].xyz));
    float _4201 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
    float _2140 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
    float _4212 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _2141 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
    float _2142 = dot(vec3(_363, _364, _365), vec3(_2134, _2135, _2136));
    float _4223 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
    float _2145 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
    float _2146 = dot(vec3(cbLight._m0[_1864].xyz), vec3(_2134, _2135, _2136));
    float _4234 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
    float _2150 = _2126 * _2126;
    float _2154 = ((_2145 * _2145) * (_2150 + (-1.0))) + 1.0;
    float _2165 = (exp2(log2(1.0 - (isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2166 = 1.0 - _2126;
    float _2177 = (0.5 / (((_2141 * ((_2140 * _2166) + _2126)) + 9.9999999392252902907785028219223e-09) + (((_2141 * _2166) + _2126) * _2140))) * _2140;
    float _4245 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
    float _2179 = (isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0))) * (_2150 / ((_2154 * _2154) * 3.141590118408203125));
    uint _2193 = _1864 + 9u;
    float _2204 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1905].w)) * _366) * 0.949999988079071044921875);
    float _2205 = _2204 * _2204;
    float _2206 = cbLight._m0[_1905].x + _444;
    float _2207 = cbLight._m0[_1905].y + _445;
    float _2208 = cbLight._m0[_1905].z + _446;
    float _2212 = inversesqrt(dot(vec3(_2206, _2207, _2208), vec3(_2206, _2207, _2208)));
    float _2213 = _2212 * _2206;
    float _2214 = _2212 * _2207;
    float _2215 = _2212 * _2208;
    float _2216 = dot(vec3(_363, _364, _365), vec3(cbLight._m0[_1905].xyz));
    float _4256 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
    float _2219 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
    float _2220 = dot(vec3(_363, _364, _365), vec3(_2213, _2214, _2215));
    float _4267 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
    float _2223 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
    float _2224 = dot(vec3(cbLight._m0[_1905].xyz), vec3(_2213, _2214, _2215));
    float _4278 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
    float _2228 = _2205 * _2205;
    float _2232 = ((_2223 * _2223) * (_2228 + (-1.0))) + 1.0;
    float _2241 = (exp2(log2(1.0 - (isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2242 = 1.0 - _2205;
    float _2252 = (0.5 / (((_2141 * ((_2219 * _2242) + _2205)) + 9.9999999392252902907785028219223e-09) + (((_2141 * _2242) + _2205) * _2219))) * _2219;
    float _4289 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
    float _2254 = (isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0))) * (_2228 / ((_2232 * _2232) * 3.141590118408203125));
    float _2264 = (((_2241 * cbLight._m0[_2193].x) * _2254) * _1887) + ((((cbLight._m0[_2112].x * _1853) * _2165) * _2179) * _1901);
    float _2265 = (((_2241 * cbLight._m0[_2193].y) * _2254) * _1887) + ((((cbLight._m0[_2112].y * _1855) * _2165) * _2179) * _1901);
    float _2266 = (((_2241 * cbLight._m0[_2193].z) * _2254) * _1887) + ((((cbLight._m0[_2112].z * _1857) * _2165) * _2179) * _1901);
    float _2322;
    float _2324;
    float _2326;
    if (_1941)
    {
        _2322 = _2264;
        _2324 = _2265;
        _2326 = _2266;
    }
    else
    {
        uint _2328 = _1864 + 2u;
        uint _2332 = _1864 + 10u;
        float _2346 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2328].w)) * _366) * 0.949999988079071044921875);
        float _2347 = _2346 * _2346;
        float _2348 = cbLight._m0[_2328].x + _444;
        float _2349 = cbLight._m0[_2328].y + _445;
        float _2350 = cbLight._m0[_2328].z + _446;
        float _2354 = inversesqrt(dot(vec3(_2348, _2349, _2350), vec3(_2348, _2349, _2350)));
        float _2355 = _2354 * _2348;
        float _2356 = _2354 * _2349;
        float _2357 = _2354 * _2350;
        float _2358 = dot(vec3(_363, _364, _365), vec3(cbLight._m0[_2328].xyz));
        float _4300 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0));
        float _2361 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
        float _2362 = dot(vec3(_363, _364, _365), vec3(_2355, _2356, _2357));
        float _4311 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
        float _2365 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
        float _2366 = dot(vec3(cbLight._m0[_2328].xyz), vec3(_2355, _2356, _2357));
        float _4322 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
        float _2370 = _2347 * _2347;
        float _2374 = ((_2365 * _2365) * (_2370 + (-1.0))) + 1.0;
        float _2383 = (exp2(log2(1.0 - (isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2384 = 1.0 - _2347;
        float _2394 = (0.5 / (((_2141 * ((_2361 * _2384) + _2347)) + 9.9999999392252902907785028219223e-09) + (((_2141 * _2384) + _2347) * _2361))) * _2361;
        float _4333 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
        float _2396 = (isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0))) * (_2370 / ((_2374 * _2374) * 3.141590118408203125));
        float _2397 = isnan(1.0) ? _1879 : (isnan(_1879) ? 1.0 : min(_1879, 1.0));
        _2322 = (((_2383 * cbLight._m0[_2332].x) * _2396) * _2397) + _2264;
        _2324 = (((_2383 * cbLight._m0[_2332].y) * _2396) * _2397) + _2265;
        _2326 = (((_2383 * cbLight._m0[_2332].z) * _2396) * _2397) + _2266;
    }
    float _2428;
    float _2430;
    float _2432;
    if (_2050)
    {
        _2428 = _2322;
        _2430 = _2324;
        _2432 = _2326;
    }
    else
    {
        uint _2439 = _1864 + 3u;
        uint _2443 = _1864 + 11u;
        float _2457 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2439].w)) * _366) * 0.949999988079071044921875);
        float _2458 = _2457 * _2457;
        float _2459 = cbLight._m0[_2439].x + _444;
        float _2460 = cbLight._m0[_2439].y + _445;
        float _2461 = cbLight._m0[_2439].z + _446;
        float _2465 = inversesqrt(dot(vec3(_2459, _2460, _2461), vec3(_2459, _2460, _2461)));
        float _2466 = _2465 * _2459;
        float _2467 = _2465 * _2460;
        float _2468 = _2465 * _2461;
        float _2469 = dot(vec3(_363, _364, _365), vec3(cbLight._m0[_2439].xyz));
        float _4349 = isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0));
        float _2472 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
        float _2473 = dot(vec3(_363, _364, _365), vec3(_2466, _2467, _2468));
        float _4360 = isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0));
        float _2476 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
        float _2477 = dot(vec3(cbLight._m0[_2439].xyz), vec3(_2466, _2467, _2468));
        float _4371 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
        float _2481 = _2458 * _2458;
        float _2485 = ((_2476 * _2476) * (_2481 + (-1.0))) + 1.0;
        float _2494 = (exp2(log2(1.0 - (isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2495 = 1.0 - _2458;
        float _2505 = (0.5 / (((_2141 * ((_2472 * _2495) + _2458)) + 9.9999999392252902907785028219223e-09) + (((_2141 * _2495) + _2458) * _2472))) * _2472;
        float _4382 = isnan(0.0) ? _2505 : (isnan(_2505) ? 0.0 : max(_2505, 0.0));
        float _2507 = (isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0))) * (_2481 / ((_2485 * _2485) * 3.141590118408203125));
        float _2508 = isnan(1.0) ? _1880 : (isnan(_1880) ? 1.0 : min(_1880, 1.0));
        _2428 = (((_2494 * cbLight._m0[_2443].x) * _2507) * _2508) + _2322;
        _2430 = (((_2494 * cbLight._m0[_2443].y) * _2507) * _2508) + _2324;
        _2432 = (((_2494 * cbLight._m0[_2443].z) * _2507) * _2508) + _2326;
    }
    float _2573;
    float _2575;
    float _2577;
    float _2579;
    float _2581;
    float _2583;
    if (_1862.y == 0u)
    {
        uvec4 _2529 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2530 = _2529.x;
        uint _2541 = uint((float(_2529.y) * floor(float(uint(cbSceneParam._m0[85u].y * _466) / _2530))) + floor(float(uint(cbSceneParam._m0[85u].x * _465) / _2530)));
        float _2551 = (log2(_1640 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2552 = isnan(0.0) ? _2551 : (isnan(_2551) ? 0.0 : max(_2551, 0.0));
        uint _2555 = uint(isnan(14.0) ? _2552 : (isnan(_2552) ? 14.0 : min(_2552, 14.0)));
        uvec4 _2560 = texelFetch(g_lightClusterGridBuffer, int(((_2555 << 2u) + (_2541 << 6u)) >> 2u));
        uint _2561 = _2560.x;
        uint _2562 = _2529.z;
        float _2640;
        float _2642;
        float _2644;
        float _2646;
        float _2648;
        float _2650;
        if (((((1u << ((_2562 >> 4u) & 15u)) + 4294967295u) & _2561) == 0u) || ((_2562 & 240u) == 0u))
        {
            _2640 = 0.0;
            _2642 = 0.0;
            _2644 = 0.0;
            _2646 = 0.0;
            _2648 = 0.0;
            _2650 = 0.0;
        }
        else
        {
            float _2641;
            float _2643;
            float _2645;
            float _2647;
            float _2649;
            float _2651;
            float _2792 = 0.0;
            float _2793 = 0.0;
            float _2794 = 0.0;
            float _2795 = 0.0;
            float _2796 = 0.0;
            float _2797 = 0.0;
            uint _2798 = 0u;
            uint _2807;
            bool _2808;
            for (;;)
            {
                _2807 = texelFetch(g_lightClassification, int((((_2555 << 5u) + (_2541 << 9u)) + (_2798 << 2u)) >> 2u)).x;
                _2808 = _2807 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_2808)
                {
                    frontier_phi_73_pred = _2797;
                    frontier_phi_73_pred_1 = _2796;
                    frontier_phi_73_pred_2 = _2795;
                    frontier_phi_73_pred_3 = _2794;
                    frontier_phi_73_pred_4 = _2793;
                    frontier_phi_73_pred_5 = _2792;
                }
                else
                {
                    float _2937;
                    float _2938;
                    float _2939;
                    float _2940;
                    float _2941;
                    float _2942;
                    uint _2943;
                    _2937 = _2792;
                    _2938 = _2793;
                    _2939 = _2794;
                    _2940 = _2795;
                    _2941 = _2796;
                    _2942 = _2797;
                    _2943 = _2807;
                    float _2864;
                    float _2865;
                    float _2866;
                    float _2867;
                    float _2868;
                    float _2869;
                    for (;;)
                    {
                        uint _2947 = uint(findLSB(_2943)) + (_2798 << 5u);
                        uint _2944 = (_2943 + 4294967295u) & _2943;
                        uint _2949 = _2947 * 48u;
                        vec4 _2963 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2949)).x, texelFetch(g_PointLightRenderingBuffer, int(_2949 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2949 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2949 + 3u)).x));
                        uint _2969 = (_2947 * 48u) + 4u;
                        vec4 _2982 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2969)).x, texelFetch(g_PointLightRenderingBuffer, int(_2969 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2969 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2969 + 3u)).x));
                        uint _2988 = (_2947 * 48u) + 8u;
                        vec3 _2999 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2988)).x, texelFetch(g_PointLightRenderingBuffer, int(_2988 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2988 + 2u)).x));
                        float _3003 = _2963.x - _1638;
                        float _3004 = _2963.y - _1639;
                        float _3005 = _2963.z - _1640;
                        float _3006 = dot(vec3(_3003, _3004, _3005), vec3(_3003, _3004, _3005));
                        float _3009 = inversesqrt(_3006);
                        float _3010 = _3009 * _3003;
                        float _3011 = _3009 * _3004;
                        float _3012 = _3009 * _3005;
                        float _3013 = dot(vec3(_486, _489, _492), vec3(_3010, _3011, _3012));
                        float _3018 = 1.0 - (_3006 * _2963.w);
                        float _4408 = isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0));
                        float _3019 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
                        float _3020 = sqrt(_3006) * _2982.w;
                        float _3023 = 1.39999997615814208984375 / (_3020 + 1.39999997615814208984375);
                        float _3024 = _3023 * _3023;
                        float _3027 = ((1.0 - _3024) * _3013) + _3024;
                        float _3030 = _3020 * _3020;
                        float _3034 = ((isnan(0.0) ? _3027 : (isnan(_3027) ? 0.0 : max(_3027, 0.0))) * _3019) / ((_3030 * 0.699999988079071044921875) + 1.0);
                        float _3038 = (-0.0) - _1638;
                        float _3039 = (-0.0) - _1639;
                        float _3040 = (-0.0) - _1640;
                        float _3044 = inversesqrt(dot(vec3(_3038, _3039, _3040), vec3(_3038, _3039, _3040)));
                        float _3045 = _3044 * _3038;
                        float _3046 = _3044 * _3039;
                        float _3047 = _3044 * _3040;
                        float _3054 = exp2(log2(1.0 / ((_3030 * 3.5) + 5.0)) * 0.25);
                        float _3055 = 1.0 - _547;
                        float _3062 = sqrt(1.0 - ((1.0 - (_3055 * _3055)) * (1.0 - (_3054 * _3054))));
                        float _3063 = _3062 * _3062;
                        float _3064 = _3063 * _3063;
                        float _3065 = _3045 + _3010;
                        float _3066 = _3046 + _3011;
                        float _3067 = _3047 + _3012;
                        float _3071 = inversesqrt(dot(vec3(_3065, _3066, _3067), vec3(_3065, _3066, _3067)));
                        float _3075 = dot(vec3(_486, _489, _492), vec3(_3045, _3046, _3047));
                        float _4424 = isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : max(_3075, 0.0));
                        float _3078 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
                        float _3079 = dot(vec3(_486, _489, _492), vec3(_3071 * _3065, _3071 * _3066, _3071 * _3067));
                        float _4435 = isnan(0.0) ? _3079 : (isnan(_3079) ? 0.0 : max(_3079, 0.0));
                        float _3082 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
                        float _3086 = ((_3082 * _3082) * (_3064 + (-1.0))) + 1.0;
                        float _3087 = _3023 * _3063;
                        float _3088 = _3087 * _3087;
                        float _3091 = ((1.0 - _3088) * _3013) + _3088;
                        float _4446 = isnan(0.0) ? _3091 : (isnan(_3091) ? 0.0 : max(_3091, 0.0));
                        float _3092 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
                        float _3093 = 1.0 - _3063;
                        float _3103 = (0.5 / (((_3092 * ((_3078 * _3093) + _3063)) + 9.9999999392252902907785028219223e-09) + (((_3092 * _3093) + _3063) * _3078))) * _3092;
                        float _4457 = isnan(0.0) ? _3103 : (isnan(_3103) ? 0.0 : max(_3103, 0.0));
                        float _3114 = (((_3064 * 3.1415927410125732421875) * (isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0)))) / ((_3086 * _3086) * ((_3030 * 2.1991131305694580078125) + 3.141590118408203125))) * _3019;
                        _2867 = (_3034 * _2982.x) + _2940;
                        _2868 = (_3034 * _2982.y) + _2941;
                        _2869 = (_3034 * _2982.z) + _2942;
                        _2864 = (_3114 * _2999.x) + _2937;
                        _2865 = (_3114 * _2999.y) + _2938;
                        _2866 = (_3114 * _2999.z) + _2939;
                        if (_2944 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2937 = _2864;
                            _2938 = _2865;
                            _2939 = _2866;
                            _2940 = _2867;
                            _2941 = _2868;
                            _2942 = _2869;
                            _2943 = _2944;
                        }
                    }
                    frontier_phi_73_pred = _2869;
                    frontier_phi_73_pred_1 = _2868;
                    frontier_phi_73_pred_2 = _2867;
                    frontier_phi_73_pred_3 = _2866;
                    frontier_phi_73_pred_4 = _2865;
                    frontier_phi_73_pred_5 = _2864;
                }
                _2651 = frontier_phi_73_pred;
                _2649 = frontier_phi_73_pred_1;
                _2647 = frontier_phi_73_pred_2;
                _2645 = frontier_phi_73_pred_3;
                _2643 = frontier_phi_73_pred_4;
                _2641 = frontier_phi_73_pred_5;
                uint _2799 = _2798 + 1u;
                if (_2799 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2792 = _2641;
                    _2793 = _2643;
                    _2794 = _2645;
                    _2795 = _2647;
                    _2796 = _2649;
                    _2797 = _2651;
                    _2798 = _2799;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2640 = _2641;
            _2642 = _2643;
            _2644 = _2645;
            _2646 = _2647;
            _2648 = _2649;
            _2650 = _2651;
        }
        uvec4 _2654 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2655 = _2654.z;
        uint _2657 = (_2655 >> 8u) & 15u;
        float _2760;
        float _2762;
        float _2764;
        float _2766;
        float _2768;
        float _2770;
        if (((4294967295u << _2657) & _2561) == 0u)
        {
            _2760 = _2640;
            _2762 = _2642;
            _2764 = _2644;
            _2766 = _2646;
            _2768 = _2648;
            _2770 = _2650;
        }
        else
        {
            float _2785 = inversesqrt(dot(vec3(_1638, _1639, _1640), vec3(_1638, _1639, _1640)));
            float _2786 = _2785 * _1638;
            float _2787 = _2785 * _1639;
            float _2788 = _2785 * _1640;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2657 < ((_2655 >> 12u) & 15u))
            {
                float _2761;
                float _2763;
                float _2765;
                float _2767;
                float _2769;
                float _2771;
                float _2920 = _2640;
                float _2921 = _2642;
                float _2922 = _2644;
                float _2923 = _2646;
                float _2924 = _2648;
                float _2925 = _2650;
                uint _2926 = _2657;
                uint _2935;
                bool _2936;
                for (;;)
                {
                    _2935 = texelFetch(g_lightClassification, int((((_2555 << 5u) + (_2541 << 9u)) + (_2926 << 2u)) >> 2u)).x;
                    _2936 = _2935 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_2936)
                    {
                        frontier_phi_84_pred = _2924;
                        frontier_phi_84_pred_1 = _2923;
                        frontier_phi_84_pred_2 = _2922;
                        frontier_phi_84_pred_3 = _2921;
                        frontier_phi_84_pred_4 = _2920;
                        frontier_phi_84_pred_5 = _2925;
                    }
                    else
                    {
                        float _3128;
                        float _3129;
                        float _3130;
                        float _3131;
                        float _3132;
                        float _3133;
                        float _3424;
                        float _3425;
                        float _3426;
                        float _3427;
                        float _3428;
                        float _3429;
                        float _3141 = _2920;
                        float _3142 = _2921;
                        float _3143 = _2922;
                        float _3144 = _2923;
                        float _3145 = _2924;
                        float _3146 = _2925;
                        uint _3147 = _2935;
                        uint _3148;
                        vec4 _3173;
                        float _3174;
                        vec4 _3189;
                        vec3 _3201;
                        vec4 _3217;
                        vec4 _3233;
                        float _3280;
                        bool _3281;
                        for (;;)
                        {
                            uint _3158 = ((_2926 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3147));
                            _3148 = (_3147 + 4294967295u) & _3147;
                            uint _3160 = _3158 * 40u;
                            _3173 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3160)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 3u)).x));
                            _3174 = _3173.w;
                            uint _3176 = (_3158 * 40u) + 4u;
                            _3189 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3176)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 3u)).x));
                            uint _3191 = (_3158 * 40u) + 8u;
                            _3201 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3191)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 2u)).x));
                            uint _3204 = (_3158 * 40u) + 16u;
                            _3217 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3204)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 3u)).x));
                            uint _3220 = (_3158 * 40u) + 20u;
                            _3233 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3220)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 3u)).x));
                            uint _3236 = (_3158 * 40u) + 24u;
                            vec4 _3249 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3236)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3236 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3236 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3236 + 3u)).x));
                            uint _3255 = (_3158 * 40u) + 28u;
                            vec4 _3268 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3255)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3255 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3255 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3255 + 3u)).x));
                            _3280 = fma(_1640, _3268.z, fma(_1639, _3268.y, _3268.x * _1638)) + _3268.w;
                            _3281 = !((fma(_1640, _3249.z, fma(_1639, _3249.y, _3249.x * _1638)) + _3249.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3281)
                            {
                                float _3308 = _3173.x - _1638;
                                float _3309 = _3173.y - _1639;
                                float _3310 = _3173.z - _1640;
                                float _3311 = dot(vec3(_3308, _3309, _3310), vec3(_3308, _3309, _3310));
                                float _3314 = inversesqrt(_3311);
                                float _3315 = _3314 * _3308;
                                float _3316 = _3314 * _3309;
                                float _3317 = _3314 * _3310;
                                float _3321 = 1.0 - (_3311 / (_3174 * _3174));
                                float _4468 = isnan(0.0) ? _3321 : (isnan(_3321) ? 0.0 : max(_3321, 0.0));
                                float _3322 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
                                float _3326 = sqrt(_3311) * _3189.w;
                                float _3328 = 1.39999997615814208984375 / (_3326 + 1.39999997615814208984375);
                                float _3329 = _3328 * _3328;
                                float _3332 = ((1.0 - _3329) * dot(vec3(_3315, _3316, _3317), vec3(_486, _489, _492))) + _3329;
                                float _3335 = _3326 * _3326;
                                float _3339 = (fma(_1640, _3217.z, fma(_1639, _3217.y, _3217.x * _1638)) + _3217.w) / _3280;
                                float _3340 = (fma(_1640, _3233.z, fma(_1639, _3233.y, _3233.x * _1638)) + _3233.w) / _3280;
                                float _3344 = 1.0 - dot(vec2(_3339, _3340), vec2(_3339, _3340));
                                float _4484 = isnan(0.0) ? _3344 : (isnan(_3344) ? 0.0 : max(_3344, 0.0));
                                float _3345 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
                                float _3346 = _3345 * (((isnan(0.0) ? _3332 : (isnan(_3332) ? 0.0 : max(_3332, 0.0))) * _3322) / ((_3335 * 0.699999988079071044921875) + 1.0));
                                float _3358 = exp2(log2(1.0 / ((_3335 * 3.5) + 5.0)) * 0.25);
                                float _3359 = 1.0 - _547;
                                float _3366 = sqrt(1.0 - ((1.0 - (_3359 * _3359)) * (1.0 - (_3358 * _3358))));
                                float _3367 = _3366 * _3366;
                                float _3368 = _3367 * _3367;
                                float _3369 = _3315 - _2786;
                                float _3370 = _3316 - _2787;
                                float _3371 = _3317 - _2788;
                                float _3375 = inversesqrt(dot(vec3(_3369, _3370, _3371), vec3(_3369, _3370, _3371)));
                                float _3379 = dot(vec3(_486, _489, _492), vec3((-0.0) - _2786, (-0.0) - _2787, (-0.0) - _2788));
                                float _4495 = isnan(0.0) ? _3379 : (isnan(_3379) ? 0.0 : max(_3379, 0.0));
                                float _3382 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
                                float _3383 = dot(vec3(_486, _489, _492), vec3(_3375 * _3369, _3375 * _3370, _3375 * _3371));
                                float _4506 = isnan(0.0) ? _3383 : (isnan(_3383) ? 0.0 : max(_3383, 0.0));
                                float _3386 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
                                float _3390 = ((_3386 * _3386) * (_3368 + (-1.0))) + 1.0;
                                float _3391 = _3328 * _3367;
                                float _3392 = _3391 * _3391;
                                float _3398 = ((1.0 - _3392) * dot(vec3(_486, _489, _492), vec3(_3315, _3316, _3317))) + _3392;
                                float _4517 = isnan(0.0) ? _3398 : (isnan(_3398) ? 0.0 : max(_3398, 0.0));
                                float _3399 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
                                float _3400 = 1.0 - _3367;
                                float _3410 = (0.5 / (((_3399 * ((_3382 * _3400) + _3367)) + 9.9999999392252902907785028219223e-09) + (((_3399 * _3400) + _3367) * _3382))) * _3399;
                                float _4528 = isnan(0.0) ? _3410 : (isnan(_3410) ? 0.0 : max(_3410, 0.0));
                                float _3420 = (_3345 * _3322) * (((_3368 * 3.1415927410125732421875) * (isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0)))) / ((_3390 * _3390) * ((_3335 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3346 * _3189.y;
                                frontier_phi_90_pred_1 = _3346 * _3189.x;
                                frontier_phi_90_pred_2 = _3420 * _3201.z;
                                frontier_phi_90_pred_3 = _3420 * _3201.y;
                                frontier_phi_90_pred_4 = _3420 * _3201.x;
                                frontier_phi_90_pred_5 = _3346 * _3189.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3428 = frontier_phi_90_pred;
                            _3427 = frontier_phi_90_pred_1;
                            _3426 = frontier_phi_90_pred_2;
                            _3425 = frontier_phi_90_pred_3;
                            _3424 = frontier_phi_90_pred_4;
                            _3429 = frontier_phi_90_pred_5;
                            _3131 = _3427 + _3144;
                            _3132 = _3428 + _3145;
                            _3133 = _3429 + _3146;
                            _3128 = _3424 + _3141;
                            _3129 = _3425 + _3142;
                            _3130 = _3426 + _3143;
                            if (_3148 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3141 = _3128;
                                _3142 = _3129;
                                _3143 = _3130;
                                _3144 = _3131;
                                _3145 = _3132;
                                _3146 = _3133;
                                _3147 = _3148;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3132;
                        frontier_phi_84_pred_1 = _3131;
                        frontier_phi_84_pred_2 = _3130;
                        frontier_phi_84_pred_3 = _3129;
                        frontier_phi_84_pred_4 = _3128;
                        frontier_phi_84_pred_5 = _3133;
                    }
                    _2769 = frontier_phi_84_pred;
                    _2767 = frontier_phi_84_pred_1;
                    _2765 = frontier_phi_84_pred_2;
                    _2763 = frontier_phi_84_pred_3;
                    _2761 = frontier_phi_84_pred_4;
                    _2771 = frontier_phi_84_pred_5;
                    uint _2927 = _2926 + 1u;
                    if (_2927 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2920 = _2761;
                        _2921 = _2763;
                        _2922 = _2765;
                        _2923 = _2767;
                        _2924 = _2769;
                        _2925 = _2771;
                        _2926 = _2927;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2771;
                frontier_phi_65_66_ladder_1 = _2767;
                frontier_phi_65_66_ladder_2 = _2769;
                frontier_phi_65_66_ladder_3 = _2763;
                frontier_phi_65_66_ladder_4 = _2761;
                frontier_phi_65_66_ladder_5 = _2765;
            }
            else
            {
                frontier_phi_65_66_ladder = _2650;
                frontier_phi_65_66_ladder_1 = _2646;
                frontier_phi_65_66_ladder_2 = _2648;
                frontier_phi_65_66_ladder_3 = _2642;
                frontier_phi_65_66_ladder_4 = _2640;
                frontier_phi_65_66_ladder_5 = _2644;
            }
            _2760 = frontier_phi_65_66_ladder_4;
            _2762 = frontier_phi_65_66_ladder_3;
            _2764 = frontier_phi_65_66_ladder_5;
            _2766 = frontier_phi_65_66_ladder_1;
            _2768 = frontier_phi_65_66_ladder_2;
            _2770 = frontier_phi_65_66_ladder;
        }
        float _2775 = isnan(1.0) ? _531 : (isnan(_531) ? 1.0 : min(_531, 1.0));
        _2573 = (_2775 * _2766) + _2105;
        _2575 = (_2775 * _2768) + _2107;
        _2577 = (_2775 * _2770) + _2109;
        _2579 = ((_2760 * 0.039999999105930328369140625) * _2775) + _2428;
        _2581 = ((_2762 * 0.039999999105930328369140625) * _2775) + _2430;
        _2583 = ((_2764 * 0.039999999105930328369140625) * _2775) + _2432;
    }
    else
    {
        _2573 = _2105;
        _2575 = _2107;
        _2577 = _2109;
        _2579 = _2428;
        _2581 = _2430;
        _2583 = _2432;
    }
    float _4544 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _4555 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _4566 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _2600 = ((isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0))) * (_2573 + ((isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0))) * _531))) + ((_2579 + ((isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0))) * _1369)) * cbPerFrame._m0[3u].x);
    float _2601 = ((isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0))) * (_2575 + ((isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0))) * _531))) + ((_2581 + ((isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0))) * _1369)) * cbPerFrame._m0[3u].x);
    float _2602 = ((isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0))) * (_2577 + ((isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0))) * _531))) + ((_2583 + ((isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0))) * _1369)) * cbPerFrame._m0[3u].x);
    uint _2603 = _505 + 6u;
    float _2611 = _465 / cbSceneParam._m0[86u].x;
    float _2612 = _466 / cbSceneParam._m0[86u].y;
    vec4 _2626 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2611, _2612, (log2((isnan(cbSceneParam._m0[77u].w) ? _385 : (isnan(_385) ? cbSceneParam._m0[77u].w : min(_385, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2628 = _2626.x;
    float _2629 = _2626.y;
    float _2630 = _2626.z;
    float _2631 = _2626.w;
    float _2702;
    float _2704;
    float _2706;
    float _2708;
    if (_385 > cbSceneParam._m0[78u].w)
    {
        float _2665 = isnan(_385) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _385 : min(cbSceneParam._m0[80u].w, _385));
        float _2666 = _2665 / _385;
        float _2677 = _2666 * _437;
        float _2678 = _438 * _2666;
        float _2679 = (-0.0) - _2678;
        float _2680 = _2666 * _439;
        float _2682 = (cbSceneParam._m0[77u].w * _2679) / _2665;
        float _2683 = _2682 + cbSceneParam._m0[79u].w;
        float _2684 = cbSceneParam._m0[79u].w - _2678;
        float _2690 = sqrt(((_2677 * _2677) + (_2678 * _2678)) + (_2680 * _2680));
        float _2693 = (1.0 - (cbSceneParam._m0[77u].w / _2665)) * _2690;
        float _2698 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2700 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2877;
        if (abs((_2679 - _2682) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2877 = ((((_2683 > 0.0) ? exp2(_2698 * _2683) : (2.0 - exp2(_2700 * _2683))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2693;
        }
        else
        {
            float _2821 = 1.0 / cbSceneParam._m0[80u].x;
            float _2822 = isnan(_2684) ? _2683 : (isnan(_2683) ? _2684 : max(_2683, _2684));
            float _2823 = isnan(_2684) ? _2683 : (isnan(_2683) ? _2684 : min(_2683, _2684));
            float _2832 = isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : min(_2822, 0.0));
            float _2833 = isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : min(_2823, 0.0));
            _2877 = ((abs(_2690 / _2679) * cbSceneParam._m0[80u].y) * ((((_2832 - _2833) * 2.0) - ((exp2(_2698 * (isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0)))) - exp2(_2698 * (isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : max(_2823, 0.0))))) * _2821)) - ((exp2(_2700 * _2832) - exp2(_2700 * _2833)) * _2821))) + (_2693 * cbSceneParam._m0[80u].z);
        }
        vec4 _2879 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2611, _2612, 1.0), 0.0);
        float _2888 = exp2((_2877 * (-1.44269502162933349609375)) * (1.0 - _2879.w));
        float _2889 = log2(_2888);
        float _2905 = log2(_2631);
        _2702 = (exp2(_2905 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2889 * cbSceneParam._m0[78u].x)) * _2879.x) / cbSceneParam._m0[78u].x)) + _2628;
        _2704 = (exp2(_2905 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2889 * cbSceneParam._m0[78u].y)) * _2879.y) / cbSceneParam._m0[78u].y)) + _2629;
        _2706 = (exp2(_2905 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2889 * cbSceneParam._m0[78u].z)) * _2879.z) / cbSceneParam._m0[78u].z)) + _2630;
        _2708 = _2888 * _2631;
    }
    else
    {
        _2702 = _2628;
        _2704 = _2629;
        _2706 = _2630;
        _2708 = _2631;
    }
    bool _2915;
    vec4 _2718;
    vec4 _2740;
    float _2742;
    float _2746;
    float _2747;
    float _2748;
    float _2749;
    bool _2759;
    for (;;)
    {
        _2718 = cbMatDynParam._m0[0u];
        float _2720 = roundEven(_2718.y);
        bool _2721 = _2720 == 3.0;
        float _2722 = log2(_2708);
        float _2729 = exp2(_2722 * cbSceneParam._m0[78u].x) * _2600;
        float _2730 = exp2(_2722 * cbSceneParam._m0[78u].y) * _2601;
        float _2731 = exp2(_2722 * cbSceneParam._m0[78u].z) * _2602;
        float _2738 = _453 + (-0.5);
        _2740 = cbMtdParam._m0[1u];
        _2742 = _2740.y * _2738;
        float _2745 = (_2720 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2746 = _2745 * (_2721 ? _2729 : (_2729 + (cbSceneParam._m0[72u].w * _2702)));
        _2747 = _2745 * (_2721 ? _2730 : (_2730 + (cbSceneParam._m0[72u].w * _2704)));
        _2748 = _2745 * (_2721 ? _2731 : (_2731 + (cbSceneParam._m0[72u].w * _2706)));
        _2749 = _2738 * 0.999000012874603271484375;
        _2759 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2759)
        {
            if ((cbInstanceData._m0[_505 + 7u].x + _2749) < 0.5)
            {
                _2915 = true;
                break;
            }
        }
        uint _2856 = _507 + uint(_2718.w);
        if ((cbInstanceData._m0[_2856].w < 1.0) && ((cbInstanceData._m0[_2856].w + _2749) < 0.5))
        {
            _2915 = true;
            break;
        }
        if ((_2742 + _252) < _2740.x)
        {
            _2915 = true;
            break;
        }
        _2915 = false;
        break;
    }
    float _3119;
    if (_2915)
    {
        discard_state = true;
        _3119 = 0.0;
    }
    else
    {
        _3119 = cbInstanceData._m0[_2603].w;
    }
    SV_Target.x = _2746;
    SV_Target.y = _2747;
    SV_Target.z = _2748;
    SV_Target.w = _3119;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2603].w;
    discard_exit();
}


