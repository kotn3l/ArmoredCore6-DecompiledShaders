#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _905;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _194 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _201 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _202 = _201 * NORMAL.x;
    float _203 = _201 * NORMAL.y;
    float _204 = _201 * NORMAL.z;
    float _208 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _216;
    float _217;
    float _218;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _216 = (-0.0) - _202;
        _217 = (-0.0) - _203;
        _218 = (-0.0) - _204;
    }
    else
    {
        _216 = _202;
        _217 = _203;
        _218 = _204;
    }
    vec4 _244 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _250 = _244.x * cbMtdParam._m0[9u].x;
    float _251 = _244.y * cbMtdParam._m0[9u].y;
    float _252 = _244.z * cbMtdParam._m0[9u].z;
    vec4 _264 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _268 = _264.z;
    float _272 = (_264.x * 2.0) + (-1.0);
    float _274 = (_264.y * 2.0) + (-1.0);
    float _275 = dot(vec2(_272, _274), vec2(_272, _274));
    float _3501 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    float _281 = sqrt(1.0 - (isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0))));
    float _310 = (TEXCOORD_3.x - ((cbMtdParam._m0[12u].y * (1.0 - TEXCOORD_3.x)) * ((texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w)).x * cbMtdParam._m0[12u].y) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[12u].z + 1.0);
    float _3512 = isnan(0.0) ? _310 : (isnan(_310) ? 0.0 : max(_310, 0.0));
    float _311 = isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0));
    float _318 = (_311 * (cbMtdParam._m0[10u].x - _250)) + _250;
    float _319 = (_311 * (cbMtdParam._m0[10u].y - _251)) + _251;
    float _320 = (_311 * (cbMtdParam._m0[10u].z - _252)) + _252;
    vec4 _332 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _339 = (_332.x * 2.0) + (-1.0);
    float _340 = (_332.y * 2.0) + (-1.0);
    float _341 = dot(vec2(_339, _340), vec2(_339, _340));
    float _3523 = isnan(0.0) ? _341 : (isnan(_341) ? 0.0 : max(_341, 0.0));
    float _349 = (_311 * (_332.z - _268)) + _268;
    float _361 = (((_339 - _272) + (cbMtdParam._m0[12u].w * _272)) * _311) + _272;
    float _362 = (((_340 - _274) + (cbMtdParam._m0[12u].w * _274)) * _311) + _274;
    float _363 = (_311 * (sqrt(1.0 - (isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0)))) - _281)) + _281;
    float _366 = fma(_363, _216, fma(_362, _208 * TANGENT.x, (_194 * _186) * _361));
    float _369 = fma(_363, _217, fma(_362, _208 * TANGENT.y, (_194 * _187) * _361));
    float _372 = fma(_363, _218, fma(_362, _208 * TANGENT.z, (_194 * _188) * _361));
    float _376 = inversesqrt(dot(vec3(_366, _369, _372), vec3(_366, _369, _372)));
    float _377 = _376 * _366;
    float _378 = _376 * _369;
    float _379 = _376 * _372;
    float _3534 = isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : max(_349, 0.0));
    float _380 = isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0));
    float _3545 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    float _3556 = isnan(0.0) ? _319 : (isnan(_319) ? 0.0 : max(_319, 0.0));
    float _3567 = isnan(0.0) ? _320 : (isnan(_320) ? 0.0 : max(_320, 0.0));
    float _399 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _441 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _451 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _441);
    float _452 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _441);
    float _453 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _441);
    float _457 = inversesqrt(dot(vec3(_451, _452, _453), vec3(_451, _452, _453)));
    float _458 = _451 * _457;
    float _459 = _452 * _457;
    float _460 = _453 * _457;
    float _466 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _467 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _488 = fma(_379, cbSceneParam._m0[5u].z, fma(_378, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _377));
    float _491 = fma(_379, cbSceneParam._m0[6u].z, fma(_378, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _377));
    float _494 = fma(_379, cbSceneParam._m0[7u].z, fma(_378, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _377));
    uint _507 = uint(roundEven(NORMAL.w)) * 13u;
    uint _510 = (_507 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _516 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0)))) * cbInstanceData._m0[_510].x;
    float _517 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0)))) * cbInstanceData._m0[_510].y;
    float _518 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0)))) * cbInstanceData._m0[_510].z;
    float _3578 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _519 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
    float _3589 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _520 = isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0));
    float _3600 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _521 = isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0));
    vec4 _530 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _466, cbSceneParam._m0[86u].y * _467));
    float _533 = _530.x * TEXCOORD_3.w;
    float _534 = dot(vec3(_377, _378, _379), vec3(_458, _459, _460));
    float _537 = _534 * 2.0;
    float _541 = (_537 * _377) - _458;
    float _542 = (_537 * _378) - _459;
    float _543 = (_537 * _379) - _460;
    float _547 = abs(dot(vec3(_458, _459, _460), vec3(_377, _378, _379)));
    float _3611 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _549 = sqrt(_380);
    float _562 = exp2((_549 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_549 * 3.0));
    float _594 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _598 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _602 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _904;
    float _906;
    float _907;
    float _908;
    float _909;
    float _910;
    float _911;
    float _912;
    float _913;
    float _914;
    float _915;
    float _916;
    float _917;
    float _918;
    float _919;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _629 = fma(_602, cbModelParam._m0[26u].z, fma(_598, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _594));
        float _633 = fma(_602, cbModelParam._m0[27u].z, fma(_598, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _594));
        float _637 = fma(_602, cbModelParam._m0[28u].z, fma(_598, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _594));
        float _662 = _594 + _377;
        float _663 = _598 + _378;
        float _664 = _602 + _379;
        float _674 = fma(_664, cbModelParam._m0[26u].z, fma(_663, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _662)) - _629;
        float _675 = fma(_664, cbModelParam._m0[27u].z, fma(_663, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _662)) - _633;
        float _676 = fma(_664, cbModelParam._m0[28u].z, fma(_663, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _662)) - _637;
        float _680 = inversesqrt(dot(vec3(_674, _675, _676), vec3(_674, _675, _676)));
        float _693 = ((_680 * _674) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_629 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _694 = ((_680 * _675) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_633 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _695 = ((_680 * _676) / cbModelParam._m0[34u].z) + ((((((_637 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _698 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_693, _694, _695), 0.0);
        vec4 _705 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_693, _694, _695), 0.0);
        vec4 _712 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_693, _694, _695), 0.0);
        vec4 _719 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_693, _694, _695), 0.0);
        float _732 = exp2((_698.w + (-0.5)) * 20.0) * 2.0;
        float _733 = _732 * (_698.x + (-0.5));
        float _734 = _732 * (_698.y + (-0.5));
        float _735 = _732 * (_698.z + (-0.5));
        float _742 = exp2((_705.w + (-0.5)) * 20.0) * 2.0;
        float _743 = _742 * (_705.x + (-0.5));
        float _744 = _742 * (_705.y + (-0.5));
        float _745 = _742 * (_705.z + (-0.5));
        float _752 = exp2((_712.w + (-0.5)) * 20.0) * 2.0;
        float _753 = _752 * (_712.x + (-0.5));
        float _754 = _752 * (_712.y + (-0.5));
        float _755 = _752 * (_712.z + (-0.5));
        float _762 = exp2((_719.w + (-0.5)) * 20.0) * 2.0;
        float _763 = _762 * (_719.x + (-0.5));
        float _764 = _762 * (_719.y + (-0.5));
        float _765 = _762 * (_719.z + (-0.5));
        float _766 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
        float _767 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
        float _768 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
        float _769 = _733 * 0.5;
        float _770 = _743 * 0.5;
        float _771 = _753 * 0.5;
        float _772 = dot(vec3(_769, _770, _771), vec3(_769, _770, _771));
        float _777 = (_772 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_772);
        float _786 = (dot(vec3(_377, _378, _379), vec3(_777 * _769, _777 * _770, _777 * _771)) + 1.0) * 0.5;
        float _3637 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
        float _796 = sqrt(((_770 * _770) + (_769 * _769)) + (_771 * _771)) / (_766 + 9.9999997473787516355514526367188e-06);
        float _3648 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
        float _797 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
        float _798 = _797 * 2.0;
        float _802 = (1.0 - _797) / (_797 + 1.0);
        float _3659 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
        float _803 = isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0));
        float _812 = ((((1.0 - _803) * (_798 + 2.0)) * exp2(log2(isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0))) * (_798 + 1.0))) + _803) * _766;
        float _813 = _734 * 0.5;
        float _814 = _744 * 0.5;
        float _815 = _754 * 0.5;
        float _816 = dot(vec3(_813, _814, _815), vec3(_813, _814, _815));
        float _821 = (_816 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_816);
        float _829 = (dot(vec3(_377, _378, _379), vec3(_821 * _813, _821 * _814, _821 * _815)) + 1.0) * 0.5;
        float _3670 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
        float _838 = sqrt(((_814 * _814) + (_813 * _813)) + (_815 * _815)) / (_767 + 9.9999997473787516355514526367188e-06);
        float _3681 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
        float _839 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
        float _840 = _839 * 2.0;
        float _844 = (1.0 - _839) / (_839 + 1.0);
        float _3692 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
        float _845 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
        float _854 = ((((1.0 - _845) * (_840 + 2.0)) * exp2(log2(isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0))) * (_840 + 1.0))) + _845) * _767;
        float _855 = _735 * 0.5;
        float _856 = _745 * 0.5;
        float _857 = _755 * 0.5;
        float _858 = dot(vec3(_855, _856, _857), vec3(_855, _856, _857));
        float _863 = (_858 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_858);
        float _871 = (dot(vec3(_377, _378, _379), vec3(_863 * _855, _863 * _856, _863 * _857)) + 1.0) * 0.5;
        float _3703 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
        float _880 = sqrt(((_856 * _856) + (_855 * _855)) + (_857 * _857)) / (_768 + 9.9999997473787516355514526367188e-06);
        float _3714 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
        float _881 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
        float _882 = _881 * 2.0;
        float _886 = (1.0 - _881) / (_881 + 1.0);
        float _3725 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
        float _887 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
        float _896 = ((((1.0 - _887) * (_882 + 2.0)) * exp2(log2(isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0))) * (_882 + 1.0))) + _887) * _768;
        _904 = _735;
        _906 = _734;
        _907 = _733;
        _908 = _745;
        _909 = _744;
        _910 = _743;
        _911 = _755;
        _912 = _754;
        _913 = _753;
        _914 = _768;
        _915 = _767;
        _916 = _766;
        _917 = cbModelParam._m0[36u].z * (isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0)));
        _918 = cbModelParam._m0[36u].z * (isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0)));
        _919 = cbModelParam._m0[36u].z * (isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0)));
    }
    else
    {
        _904 = _905;
        _906 = _905;
        _907 = _905;
        _908 = _905;
        _909 = _905;
        _910 = _905;
        _911 = _905;
        _912 = _905;
        _913 = _905;
        _914 = _905;
        _915 = _905;
        _916 = _905;
        _917 = 0.0;
        _918 = 0.0;
        _919 = 0.0;
    }
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _945 = fma(_602, cbModelParam._m0[30u].z, fma(_598, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _594));
        float _949 = fma(_602, cbModelParam._m0[31u].z, fma(_598, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _594));
        float _953 = fma(_602, cbModelParam._m0[32u].z, fma(_598, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _594));
        float _976 = _594 + _377;
        float _977 = _598 + _378;
        float _978 = _602 + _379;
        float _988 = fma(_978, cbModelParam._m0[30u].z, fma(_977, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _976)) - _945;
        float _989 = fma(_978, cbModelParam._m0[31u].z, fma(_977, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _976)) - _949;
        float _990 = fma(_978, cbModelParam._m0[32u].z, fma(_977, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _976)) - _953;
        float _994 = inversesqrt(dot(vec3(_988, _989, _990), vec3(_988, _989, _990)));
        float _1007 = ((_994 * _988) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_945 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1008 = ((_994 * _989) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_949 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1009 = ((_994 * _990) / cbModelParam._m0[35u].z) + ((((((_953 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1011 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1007, _1008, _1009), 0.0);
        vec4 _1018 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1007, _1008, _1009), 0.0);
        vec4 _1025 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1007, _1008, _1009), 0.0);
        vec4 _1032 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1007, _1008, _1009), 0.0);
        float _1044 = exp2((_1011.w + (-0.5)) * 20.0) * 2.0;
        float _1045 = _1044 * (_1011.x + (-0.5));
        float _1046 = _1044 * (_1011.y + (-0.5));
        float _1047 = _1044 * (_1011.z + (-0.5));
        float _1054 = exp2((_1018.w + (-0.5)) * 20.0) * 2.0;
        float _1055 = _1054 * (_1018.x + (-0.5));
        float _1056 = _1054 * (_1018.y + (-0.5));
        float _1057 = _1054 * (_1018.z + (-0.5));
        float _1064 = exp2((_1025.w + (-0.5)) * 20.0) * 2.0;
        float _1065 = _1064 * (_1025.x + (-0.5));
        float _1066 = _1064 * (_1025.y + (-0.5));
        float _1067 = _1064 * (_1025.z + (-0.5));
        float _1074 = exp2((_1032.w + (-0.5)) * 20.0) * 2.0;
        float _1075 = _1074 * (_1032.x + (-0.5));
        float _1076 = _1074 * (_1032.y + (-0.5));
        float _1077 = _1074 * (_1032.z + (-0.5));
        float _1078 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1079 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1080 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1081 = _1045 * 0.5;
        float _1082 = _1055 * 0.5;
        float _1083 = _1065 * 0.5;
        float _1084 = dot(vec3(_1081, _1082, _1083), vec3(_1081, _1082, _1083));
        float _1089 = (_1084 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1084);
        float _1097 = (dot(vec3(_377, _378, _379), vec3(_1089 * _1081, _1089 * _1082, _1089 * _1083)) + 1.0) * 0.5;
        float _3766 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1106 = sqrt(((_1082 * _1082) + (_1081 * _1081)) + (_1083 * _1083)) / (_1078 + 9.9999997473787516355514526367188e-06);
        float _3777 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1107 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
        float _1108 = _1107 * 2.0;
        float _1112 = (1.0 - _1107) / (_1107 + 1.0);
        float _3788 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1113 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
        float _1122 = ((((1.0 - _1113) * (_1108 + 2.0)) * exp2(log2(isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0))) * (_1108 + 1.0))) + _1113) * _1078;
        float _1123 = _1046 * 0.5;
        float _1124 = _1056 * 0.5;
        float _1125 = _1066 * 0.5;
        float _1126 = dot(vec3(_1123, _1124, _1125), vec3(_1123, _1124, _1125));
        float _1131 = (_1126 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1126);
        float _1139 = (dot(vec3(_377, _378, _379), vec3(_1131 * _1123, _1131 * _1124, _1131 * _1125)) + 1.0) * 0.5;
        float _3799 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1148 = sqrt(((_1124 * _1124) + (_1123 * _1123)) + (_1125 * _1125)) / (_1079 + 9.9999997473787516355514526367188e-06);
        float _3810 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1149 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
        float _1150 = _1149 * 2.0;
        float _1154 = (1.0 - _1149) / (_1149 + 1.0);
        float _3821 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1155 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
        float _1164 = ((((1.0 - _1155) * (_1150 + 2.0)) * exp2(log2(isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0))) * (_1150 + 1.0))) + _1155) * _1079;
        float _1165 = _1047 * 0.5;
        float _1166 = _1057 * 0.5;
        float _1167 = _1067 * 0.5;
        float _1168 = dot(vec3(_1165, _1166, _1167), vec3(_1165, _1166, _1167));
        float _1173 = (_1168 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1168);
        float _1181 = (dot(vec3(_377, _378, _379), vec3(_1173 * _1165, _1173 * _1166, _1173 * _1167)) + 1.0) * 0.5;
        float _3832 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1190 = sqrt(((_1166 * _1166) + (_1165 * _1165)) + (_1167 * _1167)) / (_1080 + 9.9999997473787516355514526367188e-06);
        float _3843 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1191 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
        float _1192 = _1191 * 2.0;
        float _1196 = (1.0 - _1191) / (_1191 + 1.0);
        float _3854 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1197 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
        float _1206 = ((((1.0 - _1197) * (_1192 + 2.0)) * exp2(log2(isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0))) * (_1192 + 1.0))) + _1197) * _1080;
        _1214 = _1047;
        _1215 = _1046;
        _1216 = _1045;
        _1217 = _1057;
        _1218 = _1056;
        _1219 = _1055;
        _1220 = _1067;
        _1221 = _1066;
        _1222 = _1065;
        _1223 = _1080;
        _1224 = _1079;
        _1225 = _1078;
        _1226 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0)));
        _1227 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0)));
        _1228 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0)));
    }
    else
    {
        _1214 = _905;
        _1215 = _905;
        _1216 = _905;
        _1217 = _905;
        _1218 = _905;
        _1219 = _905;
        _1220 = _905;
        _1221 = _905;
        _1222 = _905;
        _1223 = _905;
        _1224 = _905;
        _1225 = _905;
        _1226 = 0.0;
        _1227 = 0.0;
        _1228 = 0.0;
    }
    float _1238 = (cbModelParam._m0[1u].x * (_1226 - _917)) + _917;
    float _1239 = (cbModelParam._m0[1u].x * (_1227 - _918)) + _918;
    float _1240 = (cbModelParam._m0[1u].x * (_1228 - _919)) + _919;
    float _1261 = fma(_1240, cbSceneParam._m0[89u].z, fma(_1239, cbSceneParam._m0[89u].y, _1238 * cbSceneParam._m0[89u].x));
    float _1264 = fma(_1240, cbSceneParam._m0[90u].z, fma(_1239, cbSceneParam._m0[90u].y, _1238 * cbSceneParam._m0[90u].x));
    float _1267 = fma(_1240, cbSceneParam._m0[91u].z, fma(_1239, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1238));
    float _1282 = _541 * 0.5;
    float _1283 = _542 * 0.5;
    float _1284 = _543 * 0.5;
    float _1285 = dot(vec4(_1282, _1283, _1284, 1.0), vec4(_1216, _1219, _1222, _1225));
    float _1288 = dot(vec4(_1282, _1283, _1284, 1.0), vec4(_1215, _1218, _1221, _1224));
    float _1291 = dot(vec4(_1282, _1283, _1284, 1.0), vec4(_1214, _1217, _1220, _1223));
    float _1325;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1298 = dot(vec4(_1282, _1283, _1284, 1.0), vec4(_904, _908, _911, _914));
        float _1302 = dot(vec4(_1282, _1283, _1284, 1.0), vec4(_906, _909, _912, _915));
        float _1306 = dot(vec4(_1282, _1283, _1284, 1.0), vec4(_907, _910, _913, _916));
        float _1313 = dot(vec4(cbModelParam._m0[39u]), vec4(_1282, _1283, _1284, 1.0));
        _1325 = dot(vec3(isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0)), isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0)), isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1313) ? 0.0 : (isnan(0.0) ? _1313 : max(0.0, _1313))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1325 = 1.0;
    }
    float _1336;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1327 = dot(vec4(cbModelParam._m0[40u]), vec4(_1282, _1283, _1284, 1.0));
        _1336 = dot(vec3(isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0)), isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0)), isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1327) ? 0.0 : (isnan(0.0) ? _1327 : max(0.0, _1327))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1336 = 1.0;
    }
    float _1340 = (_1336 * cbModelParam._m0[1u].x) + (_1325 * (1.0 - cbModelParam._m0[1u].x));
    float _1350 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _380);
    float _1351 = isnan(_1350) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1350 : min(cbModelParam._m0[25u].z, _1350));
    float _1432;
    float _1434;
    float _1436;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1399 = fma(_602, cbModelParam._m0[13u].z, fma(_598, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _594)) + cbModelParam._m0[13u].w;
        float _1403 = fma(_602, cbModelParam._m0[14u].z, fma(_598, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _594)) + cbModelParam._m0[14u].w;
        float _1407 = fma(_602, cbModelParam._m0[15u].z, fma(_598, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _594)) + cbModelParam._m0[15u].w;
        float _1410 = fma(_543, cbModelParam._m0[13u].z, fma(_542, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _541));
        float _1413 = fma(_543, cbModelParam._m0[14u].z, fma(_542, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _541));
        float _1416 = fma(_543, cbModelParam._m0[15u].z, fma(_542, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _541));
        float _1444;
        if (_1410 > 0.0)
        {
            _1444 = abs((1.0 - _1399) / _1410);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1410 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1399 + 1.0) / _1410);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1444 = frontier_phi_16_14_ladder;
        }
        float _1617;
        if (_1413 > 0.0)
        {
            _1617 = abs((1.0 - _1403) / _1413);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1413 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1403 + 1.0) / _1413);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1617 = frontier_phi_25_21_ladder;
        }
        float _1912;
        if (_1416 > 0.0)
        {
            _1912 = abs((1.0 - _1407) / _1416);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1416 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1407 + 1.0) / _1416);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1912 = frontier_phi_37_32_ladder;
        }
        float _1914 = isnan(_1617) ? _1444 : (isnan(_1444) ? _1617 : min(_1444, _1617));
        float _1915 = isnan(_1912) ? _1914 : (isnan(_1914) ? _1912 : min(_1914, _1912));
        float _1919 = (_1915 * _1410) + _1399;
        float _1920 = (_1915 * _1413) + _1403;
        float _1921 = (_1915 * _1416) + _1407;
        float _1922 = _1915 * 9.9999997473787516355514526367188e-05;
        float _1924 = (-1.0) - _1922;
        float _1926 = _1922 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1921 > _1926) || ((_1921 < _1924) || ((_1920 > _1926) || ((_1920 < _1924) || ((_1919 < _1924) || (_1919 > _1926))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2066 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1921, cbModelParam._m0[9u].z, fma(_1920, cbModelParam._m0[9u].y, _1919 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1921, cbModelParam._m0[10u].z, fma(_1920, cbModelParam._m0[10u].y, _1919 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1921, cbModelParam._m0[11u].z, fma(_1920, cbModelParam._m0[11u].y, _1919 * cbModelParam._m0[11u].x))), _1351);
            frontier_phi_15_37_ladder = _2066.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2066.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2066.z * cbModelParam._m0[1u].y;
        }
        _1432 = frontier_phi_15_37_ladder_1;
        _1434 = frontier_phi_15_37_ladder;
        _1436 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1420 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_541, _542, _543), _1351);
        _1432 = _1420.x * cbModelParam._m0[1u].y;
        _1434 = _1420.y * cbModelParam._m0[1u].y;
        _1436 = _1420.z * cbModelParam._m0[1u].y;
    }
    float _1440 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _380);
    float _1441 = isnan(_1440) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1440 : min(cbModelParam._m0[25u].w, _1440));
    float _1534;
    float _1536;
    float _1538;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1498 = fma(_602, cbModelParam._m0[21u].z, fma(_598, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _594)) + cbModelParam._m0[21u].w;
        float _1502 = fma(_602, cbModelParam._m0[22u].z, fma(_598, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _594)) + cbModelParam._m0[22u].w;
        float _1506 = fma(_602, cbModelParam._m0[23u].z, fma(_598, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _594)) + cbModelParam._m0[23u].w;
        float _1509 = fma(_543, cbModelParam._m0[21u].z, fma(_542, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _541));
        float _1512 = fma(_543, cbModelParam._m0[22u].z, fma(_542, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _541));
        float _1515 = fma(_543, cbModelParam._m0[23u].z, fma(_542, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _541));
        float _1622;
        if (_1509 > 0.0)
        {
            _1622 = abs((1.0 - _1498) / _1509);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1509 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1498 + 1.0) / _1509);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1622 = frontier_phi_27_23_ladder;
        }
        float _1939;
        if (_1512 > 0.0)
        {
            _1939 = abs((1.0 - _1502) / _1512);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1512 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1502 + 1.0) / _1512);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1939 = frontier_phi_39_34_ladder;
        }
        float _2266;
        if (_1515 > 0.0)
        {
            _2266 = abs((1.0 - _1506) / _1515);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1515 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1506 + 1.0) / _1515);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2266 = frontier_phi_49_46_ladder;
        }
        float _2268 = isnan(_1939) ? _1622 : (isnan(_1622) ? _1939 : min(_1622, _1939));
        float _2269 = isnan(_2266) ? _2268 : (isnan(_2268) ? _2266 : min(_2268, _2266));
        float _2273 = (_2269 * _1509) + _1498;
        float _2274 = (_2269 * _1512) + _1502;
        float _2275 = (_2269 * _1515) + _1506;
        float _2276 = _2269 * 9.9999997473787516355514526367188e-05;
        float _2277 = (-1.0) - _2276;
        float _2279 = _2276 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2275 > _2279) || ((_2275 < _2277) || ((_2274 > _2279) || ((_2274 < _2277) || ((_2273 < _2277) || (_2273 > _2279))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2393 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2275, cbModelParam._m0[17u].z, fma(_2274, cbModelParam._m0[17u].y, _2273 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2275, cbModelParam._m0[18u].z, fma(_2274, cbModelParam._m0[18u].y, _2273 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2275, cbModelParam._m0[19u].z, fma(_2274, cbModelParam._m0[19u].y, _2273 * cbModelParam._m0[19u].x))), _1441);
            frontier_phi_24_49_ladder = _2393.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2393.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2393.x * cbModelParam._m0[1u].z;
        }
        _1534 = frontier_phi_24_49_ladder_2;
        _1536 = frontier_phi_24_49_ladder_1;
        _1538 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1518 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_541, _542, _543), _1441);
        _1534 = _1518.x * cbModelParam._m0[1u].z;
        _1536 = _1518.y * cbModelParam._m0[1u].z;
        _1538 = _1518.z * cbModelParam._m0[1u].z;
    }
    float _1550 = ((((1.0 - _562) * ((_549 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_562 * _549)) * _533;
    float _1551 = _1550 * ((cbModelParam._m0[1u].w * (_1534 - _1432)) + _1432);
    float _1552 = _1550 * ((cbModelParam._m0[1u].w * (_1536 - _1434)) + _1434);
    float _1553 = _1550 * ((cbModelParam._m0[1u].w * (_1538 - _1436)) + _1436);
    float _1556 = fma(_1553, cbSceneParam._m0[89u].z, fma(_1552, cbSceneParam._m0[89u].y, _1551 * cbSceneParam._m0[89u].x));
    float _1559 = fma(_1553, cbSceneParam._m0[90u].z, fma(_1552, cbSceneParam._m0[90u].y, _1551 * cbSceneParam._m0[90u].x));
    float _1562 = fma(_1553, cbSceneParam._m0[91u].z, fma(_1552, cbSceneParam._m0[91u].y, _1551 * cbSceneParam._m0[91u].x));
    float _1596 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1600 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1604 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1608 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1609 = _1596 / _1608;
    float _1610 = _1600 / _1608;
    float _1611 = _1604 / _1608;
    float _1758;
    float _1759;
    float _1760;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1638 = ((uint(_1611 > cbSceneParam._m0[59u].y) + uint(_1611 > cbSceneParam._m0[59u].x)) + uint(_1611 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1639 = _1638 + 43u;
        uint _1647 = _1638 + 44u;
        uint _1655 = _1638 + 45u;
        uint _1663 = _1638 + 46u;
        float _1674 = fma(_1608, cbSceneParam._m0[_1639].w, fma(_1604, cbSceneParam._m0[_1639].z, fma(_1600, cbSceneParam._m0[_1639].y, _1596 * cbSceneParam._m0[_1639].x)));
        float _1678 = fma(_1608, cbSceneParam._m0[_1647].w, fma(_1604, cbSceneParam._m0[_1647].z, fma(_1600, cbSceneParam._m0[_1647].y, _1596 * cbSceneParam._m0[_1647].x)));
        float _1686 = fma(_1608, cbSceneParam._m0[_1663].w, fma(_1604, cbSceneParam._m0[_1663].z, fma(_1600, cbSceneParam._m0[_1663].y, _1596 * cbSceneParam._m0[_1663].x)));
        float _1691 = cbSceneParam._m0[33u].z * _1686;
        float _1693 = cbSceneParam._m0[33u].w * _1686;
        float _1696 = fma(_1608, cbSceneParam._m0[_1655].w, fma(_1604, cbSceneParam._m0[_1655].z, fma(_1600, cbSceneParam._m0[_1655].y, _1596 * cbSceneParam._m0[_1655].x))) / _1686;
        float _1744 = (cbSceneParam._m0[33u].x - sqrt(((_1610 * _1610) + (_1609 * _1609)) + (_1611 * _1611))) * cbSceneParam._m0[33u].y;
        float _3980 = isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0));
        float _1751 = (isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1691 + _1674) / _1686, (_1693 + _1678) / _1686), _1696), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1693 + _1674) / _1686, (_1678 - _1691) / _1686), _1696), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1674 - _1691) / _1686, (_1678 - _1693) / _1686), _1696), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1674 - _1693) / _1686, (_1691 + _1678) / _1686), _1696), 0.0)).x), vec4(0.25)));
        _1758 = 1.0 - (_1751 * cbSceneParam._m0[34u].x);
        _1759 = 1.0 - (_1751 * cbSceneParam._m0[34u].y);
        _1760 = 1.0 - (_1751 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1758 = 1.0;
        _1759 = 1.0;
        _1760 = 1.0;
    }
    float _1824;
    float _1826;
    float _1828;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1812 = fma(_1608, cbSceneParam._m0[63u].w, fma(_1604, cbSceneParam._m0[63u].z, fma(_1600, cbSceneParam._m0[63u].y, _1596 * cbSceneParam._m0[63u].x)));
        float _1813 = fma(_1608, cbSceneParam._m0[60u].w, fma(_1604, cbSceneParam._m0[60u].z, fma(_1600, cbSceneParam._m0[60u].y, _1596 * cbSceneParam._m0[60u].x))) / _1812;
        float _1814 = fma(_1608, cbSceneParam._m0[61u].w, fma(_1604, cbSceneParam._m0[61u].z, fma(_1600, cbSceneParam._m0[61u].y, _1596 * cbSceneParam._m0[61u].x))) / _1812;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1813 >= cbSceneParam._m0[64u].x) && (_1814 >= cbSceneParam._m0[64u].y)) && (_1813 <= cbSceneParam._m0[64u].z)) && (_1814 <= cbSceneParam._m0[64u].w))
        {
            float _1952 = fma(_1608, cbSceneParam._m0[62u].w, fma(_1604, cbSceneParam._m0[62u].z, fma(_1600, cbSceneParam._m0[62u].y, _1596 * cbSceneParam._m0[62u].x))) / _1812;
            float _1956 = isnan(cbSceneParam._m0[41u].w) ? _1952 : (isnan(_1952) ? cbSceneParam._m0[41u].w : max(_1952, cbSceneParam._m0[41u].w));
            float _1999 = (cbSceneParam._m0[33u].x - sqrt(((_1610 * _1610) + (_1609 * _1609)) + (_1611 * _1611))) * cbSceneParam._m0[33u].y;
            float _3996 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
            float _2006 = (isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1813, cbSceneParam._m0[33u].w + _1814), _1956), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1813, _1814 - cbSceneParam._m0[33u].z), _1956), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1813 - cbSceneParam._m0[33u].z, _1814 - cbSceneParam._m0[33u].w), _1956), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1813 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1814), _1956), 0.0)).x), vec4(0.25)));
            float _2010 = 1.0 - (_2006 * cbSceneParam._m0[34u].x);
            float _2011 = 1.0 - (_2006 * cbSceneParam._m0[34u].y);
            float _2012 = 1.0 - (_2006 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2011) ? _1759 : (isnan(_1759) ? _2011 : min(_1759, _2011));
            frontier_phi_36_35_ladder_1 = isnan(_2012) ? _1760 : (isnan(_1760) ? _2012 : min(_1760, _2012));
            frontier_phi_36_35_ladder_2 = isnan(_2010) ? _1758 : (isnan(_1758) ? _2010 : min(_1758, _2010));
        }
        else
        {
            frontier_phi_36_35_ladder = _1759;
            frontier_phi_36_35_ladder_1 = _1760;
            frontier_phi_36_35_ladder_2 = _1758;
        }
        _1824 = frontier_phi_36_35_ladder_2;
        _1826 = frontier_phi_36_35_ladder;
        _1828 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _1824 = _1758;
        _1826 = _1759;
        _1828 = _1760;
    }
    uvec4 _1833 = floatBitsToUint(cbInstanceData._m0[_507 + 5u]);
    uint _1835 = _1833.x * 14u;
    uint _1836 = _1835 + 13u;
    float _1843 = _533 + (-1.0);
    float _1848 = (cbLight._m0[_1836].x * _1843) + 1.0;
    float _1849 = (cbLight._m0[_1836].y * _1843) + 1.0;
    float _1850 = (cbLight._m0[_1836].z * _1843) + 1.0;
    float _1851 = (cbLight._m0[_1836].w * _1843) + 1.0;
    uint _1852 = _1835 + 5u;
    float _1858 = isnan(1.0) ? _1849 : (isnan(_1849) ? 1.0 : min(_1849, 1.0));
    uint _1862 = _1835 + 4u;
    float _1871 = isnan(1.0) ? _1848 : (isnan(_1848) ? 1.0 : min(_1848, 1.0));
    uint _1875 = _1835 | 1u;
    float _1886 = dot(vec3(cbLight._m0[_1835].xyz), vec3(_377, _378, _379));
    float _1889 = dot(vec3(cbLight._m0[_1875].xyz), vec3(_377, _378, _379));
    float _4032 = isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0));
    float _4043 = isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0));
    float _1894 = (isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0))) * 0.3183098733425140380859375;
    float _1896 = (isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0))) * 0.3183098733425140380859375;
    float _1903 = ((cbLight._m0[_1852].x * _1858) * _1896) + (((cbLight._m0[_1862].x * _1824) * _1871) * _1894);
    float _1904 = ((_1858 * cbLight._m0[_1852].y) * _1896) + (((cbLight._m0[_1862].y * _1826) * _1871) * _1894);
    float _1905 = ((_1858 * cbLight._m0[_1852].z) * _1896) + (((cbLight._m0[_1862].z * _1828) * _1871) * _1894);
    uvec4 _1909 = floatBitsToUint(cbLight._m0[_1835 + 12u]);
    bool _1911 = _1909.x == 0u;
    float _2013;
    float _2015;
    float _2017;
    if (_1911)
    {
        _2013 = _1903;
        _2015 = _1904;
        _2017 = _1905;
    }
    else
    {
        uint _2021 = _1835 + 6u;
        float _2037 = (dot(vec3(cbLight._m0[_1835 + 2u].xyz), vec3(_377, _378, _379)) * 0.5) + 0.5;
        float _2038 = _2037 * _2037;
        float _4054 = isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0));
        float _2039 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _2040 = isnan(1.0) ? _1850 : (isnan(_1850) ? 1.0 : min(_1850, 1.0));
        _2013 = (((cbLight._m0[_2021].x * 0.3183098733425140380859375) * _2039) * _2040) + _1903;
        _2015 = (((cbLight._m0[_2021].y * 0.3183098733425140380859375) * _2039) * _2040) + _1904;
        _2017 = (((cbLight._m0[_2021].z * 0.3183098733425140380859375) * _2039) * _2040) + _1905;
    }
    bool _2020 = _1909.y == 0u;
    float _2075;
    float _2077;
    float _2079;
    if (_2020)
    {
        _2075 = _2013;
        _2077 = _2015;
        _2079 = _2017;
    }
    else
    {
        uint _2237 = _1835 + 7u;
        float _2253 = (dot(vec3(cbLight._m0[_1835 + 3u].xyz), vec3(_377, _378, _379)) * 0.5) + 0.5;
        float _2254 = _2253 * _2253;
        float _4070 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
        float _2255 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _2256 = isnan(1.0) ? _1851 : (isnan(_1851) ? 1.0 : min(_1851, 1.0));
        _2075 = (((cbLight._m0[_2237].x * 0.3183098733425140380859375) * _2255) * _2256) + _2013;
        _2077 = (((cbLight._m0[_2237].y * 0.3183098733425140380859375) * _2255) * _2256) + _2015;
        _2079 = (((cbLight._m0[_2237].z * 0.3183098733425140380859375) * _2255) * _2256) + _2017;
    }
    uint _2082 = _1835 + 8u;
    float _2095 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1835].w)) * _380) * 0.949999988079071044921875);
    float _2096 = _2095 * _2095;
    float _2097 = cbLight._m0[_1835].x + _458;
    float _2098 = cbLight._m0[_1835].y + _459;
    float _2099 = cbLight._m0[_1835].z + _460;
    float _2103 = inversesqrt(dot(vec3(_2097, _2098, _2099), vec3(_2097, _2098, _2099)));
    float _2104 = _2103 * _2097;
    float _2105 = _2103 * _2098;
    float _2106 = _2103 * _2099;
    float _2107 = dot(vec3(_377, _378, _379), vec3(cbLight._m0[_1835].xyz));
    float _4086 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
    float _2110 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
    float _4097 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _2111 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
    float _2112 = dot(vec3(_377, _378, _379), vec3(_2104, _2105, _2106));
    float _4108 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
    float _2115 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
    float _2116 = dot(vec3(cbLight._m0[_1835].xyz), vec3(_2104, _2105, _2106));
    float _4119 = isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0));
    float _2120 = _2096 * _2096;
    float _2124 = ((_2115 * _2115) * (_2120 + (-1.0))) + 1.0;
    float _2135 = (exp2(log2(1.0 - (isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2136 = 1.0 - _2096;
    float _2147 = (0.5 / (((_2111 * ((_2110 * _2136) + _2096)) + 9.9999999392252902907785028219223e-09) + (((_2111 * _2136) + _2096) * _2110))) * _2110;
    float _4130 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
    float _2149 = (isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0))) * (_2120 / ((_2124 * _2124) * 3.141590118408203125));
    uint _2163 = _1835 + 9u;
    float _2174 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1875].w)) * _380) * 0.949999988079071044921875);
    float _2175 = _2174 * _2174;
    float _2176 = cbLight._m0[_1875].x + _458;
    float _2177 = cbLight._m0[_1875].y + _459;
    float _2178 = cbLight._m0[_1875].z + _460;
    float _2182 = inversesqrt(dot(vec3(_2176, _2177, _2178), vec3(_2176, _2177, _2178)));
    float _2183 = _2182 * _2176;
    float _2184 = _2182 * _2177;
    float _2185 = _2182 * _2178;
    float _2186 = dot(vec3(_377, _378, _379), vec3(cbLight._m0[_1875].xyz));
    float _4141 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
    float _2189 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
    float _2190 = dot(vec3(_377, _378, _379), vec3(_2183, _2184, _2185));
    float _4152 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
    float _2193 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
    float _2194 = dot(vec3(cbLight._m0[_1875].xyz), vec3(_2183, _2184, _2185));
    float _4163 = isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0));
    float _2198 = _2175 * _2175;
    float _2202 = ((_2193 * _2193) * (_2198 + (-1.0))) + 1.0;
    float _2211 = (exp2(log2(1.0 - (isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2212 = 1.0 - _2175;
    float _2222 = (0.5 / (((_2111 * ((_2189 * _2212) + _2175)) + 9.9999999392252902907785028219223e-09) + (((_2111 * _2212) + _2175) * _2189))) * _2189;
    float _4174 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
    float _2224 = (isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0))) * (_2198 / ((_2202 * _2202) * 3.141590118408203125));
    float _2234 = (((_2211 * cbLight._m0[_2163].x) * _2224) * _1858) + ((((cbLight._m0[_2082].x * _1824) * _2135) * _2149) * _1871);
    float _2235 = (((_2211 * cbLight._m0[_2163].y) * _2224) * _1858) + ((((cbLight._m0[_2082].y * _1826) * _2135) * _2149) * _1871);
    float _2236 = (((_2211 * cbLight._m0[_2163].z) * _2224) * _1858) + ((((cbLight._m0[_2082].z * _1828) * _2135) * _2149) * _1871);
    float _2292;
    float _2294;
    float _2296;
    if (_1911)
    {
        _2292 = _2234;
        _2294 = _2235;
        _2296 = _2236;
    }
    else
    {
        uint _2298 = _1835 + 2u;
        uint _2302 = _1835 + 10u;
        float _2316 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2298].w)) * _380) * 0.949999988079071044921875);
        float _2317 = _2316 * _2316;
        float _2318 = cbLight._m0[_2298].x + _458;
        float _2319 = cbLight._m0[_2298].y + _459;
        float _2320 = cbLight._m0[_2298].z + _460;
        float _2324 = inversesqrt(dot(vec3(_2318, _2319, _2320), vec3(_2318, _2319, _2320)));
        float _2325 = _2324 * _2318;
        float _2326 = _2324 * _2319;
        float _2327 = _2324 * _2320;
        float _2328 = dot(vec3(_377, _378, _379), vec3(cbLight._m0[_2298].xyz));
        float _4185 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
        float _2331 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
        float _2332 = dot(vec3(_377, _378, _379), vec3(_2325, _2326, _2327));
        float _4196 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
        float _2335 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _2336 = dot(vec3(cbLight._m0[_2298].xyz), vec3(_2325, _2326, _2327));
        float _4207 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
        float _2340 = _2317 * _2317;
        float _2344 = ((_2335 * _2335) * (_2340 + (-1.0))) + 1.0;
        float _2353 = (exp2(log2(1.0 - (isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2354 = 1.0 - _2317;
        float _2364 = (0.5 / (((_2111 * ((_2331 * _2354) + _2317)) + 9.9999999392252902907785028219223e-09) + (((_2111 * _2354) + _2317) * _2331))) * _2331;
        float _4218 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
        float _2366 = (isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0))) * (_2340 / ((_2344 * _2344) * 3.141590118408203125));
        float _2367 = isnan(1.0) ? _1850 : (isnan(_1850) ? 1.0 : min(_1850, 1.0));
        _2292 = (((_2353 * cbLight._m0[_2302].x) * _2366) * _2367) + _2234;
        _2294 = (((_2353 * cbLight._m0[_2302].y) * _2366) * _2367) + _2235;
        _2296 = (((_2353 * cbLight._m0[_2302].z) * _2366) * _2367) + _2236;
    }
    float _2398;
    float _2400;
    float _2402;
    if (_2020)
    {
        _2398 = _2292;
        _2400 = _2294;
        _2402 = _2296;
    }
    else
    {
        uint _2409 = _1835 + 3u;
        uint _2413 = _1835 + 11u;
        float _2427 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2409].w)) * _380) * 0.949999988079071044921875);
        float _2428 = _2427 * _2427;
        float _2429 = cbLight._m0[_2409].x + _458;
        float _2430 = cbLight._m0[_2409].y + _459;
        float _2431 = cbLight._m0[_2409].z + _460;
        float _2435 = inversesqrt(dot(vec3(_2429, _2430, _2431), vec3(_2429, _2430, _2431)));
        float _2436 = _2435 * _2429;
        float _2437 = _2435 * _2430;
        float _2438 = _2435 * _2431;
        float _2439 = dot(vec3(_377, _378, _379), vec3(cbLight._m0[_2409].xyz));
        float _4234 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
        float _2442 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
        float _2443 = dot(vec3(_377, _378, _379), vec3(_2436, _2437, _2438));
        float _4245 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
        float _2446 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
        float _2447 = dot(vec3(cbLight._m0[_2409].xyz), vec3(_2436, _2437, _2438));
        float _4256 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
        float _2451 = _2428 * _2428;
        float _2455 = ((_2446 * _2446) * (_2451 + (-1.0))) + 1.0;
        float _2464 = (exp2(log2(1.0 - (isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2465 = 1.0 - _2428;
        float _2475 = (0.5 / (((_2111 * ((_2442 * _2465) + _2428)) + 9.9999999392252902907785028219223e-09) + (((_2111 * _2465) + _2428) * _2442))) * _2442;
        float _4267 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
        float _2477 = (isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0))) * (_2451 / ((_2455 * _2455) * 3.141590118408203125));
        float _2478 = isnan(1.0) ? _1851 : (isnan(_1851) ? 1.0 : min(_1851, 1.0));
        _2398 = (((_2464 * cbLight._m0[_2413].x) * _2477) * _2478) + _2292;
        _2400 = (((_2464 * cbLight._m0[_2413].y) * _2477) * _2478) + _2294;
        _2402 = (((_2464 * cbLight._m0[_2413].z) * _2477) * _2478) + _2296;
    }
    float _2543;
    float _2545;
    float _2547;
    float _2549;
    float _2551;
    float _2553;
    if (_1833.y == 0u)
    {
        uvec4 _2499 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2500 = _2499.x;
        uint _2511 = uint((float(_2499.y) * floor(float(uint(cbSceneParam._m0[85u].y * _467) / _2500))) + floor(float(uint(cbSceneParam._m0[85u].x * _466) / _2500)));
        float _2521 = (log2(_1611 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2522 = isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0));
        uint _2525 = uint(isnan(14.0) ? _2522 : (isnan(_2522) ? 14.0 : min(_2522, 14.0)));
        uvec4 _2530 = texelFetch(g_lightClusterGridBuffer, int(((_2525 << 2u) + (_2511 << 6u)) >> 2u));
        uint _2531 = _2530.x;
        uint _2532 = _2499.z;
        float _2610;
        float _2612;
        float _2614;
        float _2616;
        float _2618;
        float _2620;
        if (((((1u << ((_2532 >> 4u) & 15u)) + 4294967295u) & _2531) == 0u) || ((_2532 & 240u) == 0u))
        {
            _2610 = 0.0;
            _2612 = 0.0;
            _2614 = 0.0;
            _2616 = 0.0;
            _2618 = 0.0;
            _2620 = 0.0;
        }
        else
        {
            float _2611;
            float _2613;
            float _2615;
            float _2617;
            float _2619;
            float _2621;
            float _2754 = 0.0;
            float _2755 = 0.0;
            float _2756 = 0.0;
            float _2757 = 0.0;
            float _2758 = 0.0;
            float _2759 = 0.0;
            uint _2760 = 0u;
            uint _2769;
            bool _2770;
            for (;;)
            {
                _2769 = texelFetch(g_lightClassification, int((((_2525 << 5u) + (_2511 << 9u)) + (_2760 << 2u)) >> 2u)).x;
                _2770 = _2769 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2770)
                {
                    frontier_phi_68_pred = _2759;
                    frontier_phi_68_pred_1 = _2758;
                    frontier_phi_68_pred_2 = _2757;
                    frontier_phi_68_pred_3 = _2755;
                    frontier_phi_68_pred_4 = _2754;
                    frontier_phi_68_pred_5 = _2756;
                }
                else
                {
                    float _2878;
                    float _2879;
                    float _2880;
                    float _2881;
                    float _2882;
                    float _2883;
                    uint _2884;
                    _2878 = _2754;
                    _2879 = _2755;
                    _2880 = _2756;
                    _2881 = _2757;
                    _2882 = _2758;
                    _2883 = _2759;
                    _2884 = _2769;
                    float _2810;
                    float _2811;
                    float _2812;
                    float _2813;
                    float _2814;
                    float _2815;
                    for (;;)
                    {
                        uint _2888 = uint(findLSB(_2884)) + (_2760 << 5u);
                        uint _2885 = (_2884 + 4294967295u) & _2884;
                        uint _2890 = _2888 * 48u;
                        vec4 _2904 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2890)).x, texelFetch(g_PointLightRenderingBuffer, int(_2890 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2890 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2890 + 3u)).x));
                        uint _2910 = (_2888 * 48u) + 4u;
                        vec4 _2923 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2910)).x, texelFetch(g_PointLightRenderingBuffer, int(_2910 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2910 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2910 + 3u)).x));
                        uint _2929 = (_2888 * 48u) + 8u;
                        vec3 _2940 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2929)).x, texelFetch(g_PointLightRenderingBuffer, int(_2929 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2929 + 2u)).x));
                        float _2944 = _2904.x - _1609;
                        float _2945 = _2904.y - _1610;
                        float _2946 = _2904.z - _1611;
                        float _2947 = dot(vec3(_2944, _2945, _2946), vec3(_2944, _2945, _2946));
                        float _2950 = inversesqrt(_2947);
                        float _2951 = _2950 * _2944;
                        float _2952 = _2950 * _2945;
                        float _2953 = _2950 * _2946;
                        float _2954 = dot(vec3(_488, _491, _494), vec3(_2951, _2952, _2953));
                        float _2959 = 1.0 - (_2947 * _2904.w);
                        float _4293 = isnan(0.0) ? _2959 : (isnan(_2959) ? 0.0 : max(_2959, 0.0));
                        float _2960 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
                        float _2961 = sqrt(_2947) * _2923.w;
                        float _2964 = 1.39999997615814208984375 / (_2961 + 1.39999997615814208984375);
                        float _2965 = _2964 * _2964;
                        float _2968 = ((1.0 - _2965) * _2954) + _2965;
                        float _2971 = _2961 * _2961;
                        float _2975 = ((isnan(0.0) ? _2968 : (isnan(_2968) ? 0.0 : max(_2968, 0.0))) * _2960) / ((_2971 * 0.699999988079071044921875) + 1.0);
                        float _2979 = (-0.0) - _1609;
                        float _2980 = (-0.0) - _1610;
                        float _2981 = (-0.0) - _1611;
                        float _2985 = inversesqrt(dot(vec3(_2979, _2980, _2981), vec3(_2979, _2980, _2981)));
                        float _2986 = _2985 * _2979;
                        float _2987 = _2985 * _2980;
                        float _2988 = _2985 * _2981;
                        float _2995 = exp2(log2(1.0 / ((_2971 * 3.5) + 5.0)) * 0.25);
                        float _2996 = 1.0 - _549;
                        float _3003 = sqrt(1.0 - ((1.0 - (_2996 * _2996)) * (1.0 - (_2995 * _2995))));
                        float _3004 = _3003 * _3003;
                        float _3005 = _3004 * _3004;
                        float _3006 = _2986 + _2951;
                        float _3007 = _2987 + _2952;
                        float _3008 = _2988 + _2953;
                        float _3012 = inversesqrt(dot(vec3(_3006, _3007, _3008), vec3(_3006, _3007, _3008)));
                        float _3016 = dot(vec3(_488, _491, _494), vec3(_2986, _2987, _2988));
                        float _4309 = isnan(0.0) ? _3016 : (isnan(_3016) ? 0.0 : max(_3016, 0.0));
                        float _3019 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
                        float _3020 = dot(vec3(_488, _491, _494), vec3(_3012 * _3006, _3012 * _3007, _3012 * _3008));
                        float _4320 = isnan(0.0) ? _3020 : (isnan(_3020) ? 0.0 : max(_3020, 0.0));
                        float _3023 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
                        float _3027 = ((_3023 * _3023) * (_3005 + (-1.0))) + 1.0;
                        float _3028 = _2964 * _3004;
                        float _3029 = _3028 * _3028;
                        float _3032 = ((1.0 - _3029) * _2954) + _3029;
                        float _4331 = isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : max(_3032, 0.0));
                        float _3033 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
                        float _3034 = 1.0 - _3004;
                        float _3044 = (0.5 / (((_3033 * ((_3019 * _3034) + _3004)) + 9.9999999392252902907785028219223e-09) + (((_3033 * _3034) + _3004) * _3019))) * _3033;
                        float _4342 = isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : max(_3044, 0.0));
                        float _3055 = (((_3005 * 3.1415927410125732421875) * (isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0)))) / ((_3027 * _3027) * ((_2971 * 2.1991131305694580078125) + 3.141590118408203125))) * _2960;
                        _2813 = (_2975 * _2923.x) + _2881;
                        _2814 = (_2975 * _2923.y) + _2882;
                        _2815 = (_2975 * _2923.z) + _2883;
                        _2810 = (_3055 * _2940.x) + _2878;
                        _2811 = (_3055 * _2940.y) + _2879;
                        _2812 = (_3055 * _2940.z) + _2880;
                        if (_2885 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2878 = _2810;
                            _2879 = _2811;
                            _2880 = _2812;
                            _2881 = _2813;
                            _2882 = _2814;
                            _2883 = _2815;
                            _2884 = _2885;
                        }
                    }
                    frontier_phi_68_pred = _2815;
                    frontier_phi_68_pred_1 = _2814;
                    frontier_phi_68_pred_2 = _2813;
                    frontier_phi_68_pred_3 = _2811;
                    frontier_phi_68_pred_4 = _2810;
                    frontier_phi_68_pred_5 = _2812;
                }
                _2621 = frontier_phi_68_pred;
                _2619 = frontier_phi_68_pred_1;
                _2617 = frontier_phi_68_pred_2;
                _2613 = frontier_phi_68_pred_3;
                _2611 = frontier_phi_68_pred_4;
                _2615 = frontier_phi_68_pred_5;
                uint _2761 = _2760 + 1u;
                if (_2761 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2754 = _2611;
                    _2755 = _2613;
                    _2756 = _2615;
                    _2757 = _2617;
                    _2758 = _2619;
                    _2759 = _2621;
                    _2760 = _2761;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2610 = _2611;
            _2612 = _2613;
            _2614 = _2615;
            _2616 = _2617;
            _2618 = _2619;
            _2620 = _2621;
        }
        uvec4 _2624 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2625 = _2624.z;
        uint _2627 = (_2625 >> 8u) & 15u;
        float _2722;
        float _2724;
        float _2726;
        float _2728;
        float _2730;
        float _2732;
        if (((4294967295u << _2627) & _2531) == 0u)
        {
            _2722 = _2610;
            _2724 = _2612;
            _2726 = _2614;
            _2728 = _2616;
            _2730 = _2618;
            _2732 = _2620;
        }
        else
        {
            float _2747 = inversesqrt(dot(vec3(_1609, _1610, _1611), vec3(_1609, _1610, _1611)));
            float _2748 = _2747 * _1609;
            float _2749 = _2747 * _1610;
            float _2750 = _2747 * _1611;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2627 < ((_2625 >> 12u) & 15u))
            {
                float _2723;
                float _2725;
                float _2727;
                float _2729;
                float _2731;
                float _2733;
                float _2861 = _2610;
                float _2862 = _2612;
                float _2863 = _2614;
                float _2864 = _2616;
                float _2865 = _2618;
                float _2866 = _2620;
                uint _2867 = _2627;
                uint _2876;
                bool _2877;
                for (;;)
                {
                    _2876 = texelFetch(g_lightClassification, int((((_2525 << 5u) + (_2511 << 9u)) + (_2867 << 2u)) >> 2u)).x;
                    _2877 = _2876 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_2877)
                    {
                        frontier_phi_74_pred = _2863;
                        frontier_phi_74_pred_1 = _2862;
                        frontier_phi_74_pred_2 = _2861;
                        frontier_phi_74_pred_3 = _2866;
                        frontier_phi_74_pred_4 = _2865;
                        frontier_phi_74_pred_5 = _2864;
                    }
                    else
                    {
                        float _3060;
                        float _3061;
                        float _3062;
                        float _3063;
                        float _3064;
                        float _3065;
                        float _3356;
                        float _3357;
                        float _3358;
                        float _3359;
                        float _3360;
                        float _3361;
                        float _3073 = _2861;
                        float _3074 = _2862;
                        float _3075 = _2863;
                        float _3076 = _2864;
                        float _3077 = _2865;
                        float _3078 = _2866;
                        uint _3079 = _2876;
                        uint _3080;
                        vec4 _3105;
                        float _3106;
                        vec4 _3121;
                        vec3 _3133;
                        vec4 _3149;
                        vec4 _3165;
                        float _3212;
                        bool _3213;
                        for (;;)
                        {
                            uint _3090 = ((_2867 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3079));
                            _3080 = (_3079 + 4294967295u) & _3079;
                            uint _3092 = _3090 * 40u;
                            _3105 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3092)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 3u)).x));
                            _3106 = _3105.w;
                            uint _3108 = (_3090 * 40u) + 4u;
                            _3121 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3108)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3108 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3108 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3108 + 3u)).x));
                            uint _3123 = (_3090 * 40u) + 8u;
                            _3133 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3123)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 2u)).x));
                            uint _3136 = (_3090 * 40u) + 16u;
                            _3149 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3136)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 3u)).x));
                            uint _3152 = (_3090 * 40u) + 20u;
                            _3165 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3152)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3152 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3152 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3152 + 3u)).x));
                            uint _3168 = (_3090 * 40u) + 24u;
                            vec4 _3181 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3168)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 3u)).x));
                            uint _3187 = (_3090 * 40u) + 28u;
                            vec4 _3200 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3187)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3187 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3187 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3187 + 3u)).x));
                            _3212 = fma(_1611, _3200.z, fma(_1610, _3200.y, _3200.x * _1609)) + _3200.w;
                            _3213 = !((fma(_1611, _3181.z, fma(_1610, _3181.y, _3181.x * _1609)) + _3181.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3213)
                            {
                                float _3240 = _3105.x - _1609;
                                float _3241 = _3105.y - _1610;
                                float _3242 = _3105.z - _1611;
                                float _3243 = dot(vec3(_3240, _3241, _3242), vec3(_3240, _3241, _3242));
                                float _3246 = inversesqrt(_3243);
                                float _3247 = _3246 * _3240;
                                float _3248 = _3246 * _3241;
                                float _3249 = _3246 * _3242;
                                float _3253 = 1.0 - (_3243 / (_3106 * _3106));
                                float _4353 = isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : max(_3253, 0.0));
                                float _3254 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
                                float _3258 = sqrt(_3243) * _3121.w;
                                float _3260 = 1.39999997615814208984375 / (_3258 + 1.39999997615814208984375);
                                float _3261 = _3260 * _3260;
                                float _3264 = ((1.0 - _3261) * dot(vec3(_3247, _3248, _3249), vec3(_488, _491, _494))) + _3261;
                                float _3267 = _3258 * _3258;
                                float _3271 = (fma(_1611, _3149.z, fma(_1610, _3149.y, _3149.x * _1609)) + _3149.w) / _3212;
                                float _3272 = (fma(_1611, _3165.z, fma(_1610, _3165.y, _3165.x * _1609)) + _3165.w) / _3212;
                                float _3276 = 1.0 - dot(vec2(_3271, _3272), vec2(_3271, _3272));
                                float _4369 = isnan(0.0) ? _3276 : (isnan(_3276) ? 0.0 : max(_3276, 0.0));
                                float _3277 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
                                float _3278 = _3277 * (((isnan(0.0) ? _3264 : (isnan(_3264) ? 0.0 : max(_3264, 0.0))) * _3254) / ((_3267 * 0.699999988079071044921875) + 1.0));
                                float _3290 = exp2(log2(1.0 / ((_3267 * 3.5) + 5.0)) * 0.25);
                                float _3291 = 1.0 - _549;
                                float _3298 = sqrt(1.0 - ((1.0 - (_3291 * _3291)) * (1.0 - (_3290 * _3290))));
                                float _3299 = _3298 * _3298;
                                float _3300 = _3299 * _3299;
                                float _3301 = _3247 - _2748;
                                float _3302 = _3248 - _2749;
                                float _3303 = _3249 - _2750;
                                float _3307 = inversesqrt(dot(vec3(_3301, _3302, _3303), vec3(_3301, _3302, _3303)));
                                float _3311 = dot(vec3(_488, _491, _494), vec3((-0.0) - _2748, (-0.0) - _2749, (-0.0) - _2750));
                                float _4380 = isnan(0.0) ? _3311 : (isnan(_3311) ? 0.0 : max(_3311, 0.0));
                                float _3314 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
                                float _3315 = dot(vec3(_488, _491, _494), vec3(_3307 * _3301, _3307 * _3302, _3307 * _3303));
                                float _4391 = isnan(0.0) ? _3315 : (isnan(_3315) ? 0.0 : max(_3315, 0.0));
                                float _3318 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
                                float _3322 = ((_3318 * _3318) * (_3300 + (-1.0))) + 1.0;
                                float _3323 = _3260 * _3299;
                                float _3324 = _3323 * _3323;
                                float _3330 = ((1.0 - _3324) * dot(vec3(_488, _491, _494), vec3(_3247, _3248, _3249))) + _3324;
                                float _4402 = isnan(0.0) ? _3330 : (isnan(_3330) ? 0.0 : max(_3330, 0.0));
                                float _3331 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
                                float _3332 = 1.0 - _3299;
                                float _3342 = (0.5 / (((_3331 * ((_3314 * _3332) + _3299)) + 9.9999999392252902907785028219223e-09) + (((_3331 * _3332) + _3299) * _3314))) * _3331;
                                float _4413 = isnan(0.0) ? _3342 : (isnan(_3342) ? 0.0 : max(_3342, 0.0));
                                float _3352 = (_3277 * _3254) * (((_3300 * 3.1415927410125732421875) * (isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0)))) / ((_3322 * _3322) * ((_3267 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3352 * _3133.z;
                                frontier_phi_80_pred_1 = _3352 * _3133.y;
                                frontier_phi_80_pred_2 = _3352 * _3133.x;
                                frontier_phi_80_pred_3 = _3278 * _3121.z;
                                frontier_phi_80_pred_4 = _3278 * _3121.y;
                                frontier_phi_80_pred_5 = _3278 * _3121.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3358 = frontier_phi_80_pred;
                            _3357 = frontier_phi_80_pred_1;
                            _3356 = frontier_phi_80_pred_2;
                            _3361 = frontier_phi_80_pred_3;
                            _3360 = frontier_phi_80_pred_4;
                            _3359 = frontier_phi_80_pred_5;
                            _3063 = _3359 + _3076;
                            _3064 = _3360 + _3077;
                            _3065 = _3361 + _3078;
                            _3060 = _3356 + _3073;
                            _3061 = _3357 + _3074;
                            _3062 = _3358 + _3075;
                            if (_3080 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3073 = _3060;
                                _3074 = _3061;
                                _3075 = _3062;
                                _3076 = _3063;
                                _3077 = _3064;
                                _3078 = _3065;
                                _3079 = _3080;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3062;
                        frontier_phi_74_pred_1 = _3061;
                        frontier_phi_74_pred_2 = _3060;
                        frontier_phi_74_pred_3 = _3065;
                        frontier_phi_74_pred_4 = _3064;
                        frontier_phi_74_pred_5 = _3063;
                    }
                    _2727 = frontier_phi_74_pred;
                    _2725 = frontier_phi_74_pred_1;
                    _2723 = frontier_phi_74_pred_2;
                    _2733 = frontier_phi_74_pred_3;
                    _2731 = frontier_phi_74_pred_4;
                    _2729 = frontier_phi_74_pred_5;
                    uint _2868 = _2867 + 1u;
                    if (_2868 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2861 = _2723;
                        _2862 = _2725;
                        _2863 = _2727;
                        _2864 = _2729;
                        _2865 = _2731;
                        _2866 = _2733;
                        _2867 = _2868;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2731;
                frontier_phi_62_63_ladder_1 = _2729;
                frontier_phi_62_63_ladder_2 = _2727;
                frontier_phi_62_63_ladder_3 = _2733;
                frontier_phi_62_63_ladder_4 = _2725;
                frontier_phi_62_63_ladder_5 = _2723;
            }
            else
            {
                frontier_phi_62_63_ladder = _2618;
                frontier_phi_62_63_ladder_1 = _2616;
                frontier_phi_62_63_ladder_2 = _2614;
                frontier_phi_62_63_ladder_3 = _2620;
                frontier_phi_62_63_ladder_4 = _2612;
                frontier_phi_62_63_ladder_5 = _2610;
            }
            _2722 = frontier_phi_62_63_ladder_5;
            _2724 = frontier_phi_62_63_ladder_4;
            _2726 = frontier_phi_62_63_ladder_2;
            _2728 = frontier_phi_62_63_ladder_1;
            _2730 = frontier_phi_62_63_ladder;
            _2732 = frontier_phi_62_63_ladder_3;
        }
        float _2737 = isnan(1.0) ? _533 : (isnan(_533) ? 1.0 : min(_533, 1.0));
        _2543 = (_2737 * _2728) + _2075;
        _2545 = (_2737 * _2730) + _2077;
        _2547 = (_2737 * _2732) + _2079;
        _2549 = ((_2722 * 0.039999999105930328369140625) * _2737) + _2398;
        _2551 = ((_2724 * 0.039999999105930328369140625) * _2737) + _2400;
        _2553 = ((_2726 * 0.039999999105930328369140625) * _2737) + _2402;
    }
    else
    {
        _2543 = _2075;
        _2545 = _2077;
        _2547 = _2079;
        _2549 = _2398;
        _2551 = _2400;
        _2553 = _2402;
    }
    float _4429 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _4440 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _4451 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    uint _2573 = _507 + 6u;
    float _2581 = _466 / cbSceneParam._m0[86u].x;
    float _2582 = _467 / cbSceneParam._m0[86u].y;
    vec4 _2596 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2581, _2582, (log2((isnan(cbSceneParam._m0[77u].w) ? _399 : (isnan(_399) ? cbSceneParam._m0[77u].w : min(_399, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2598 = _2596.x;
    float _2599 = _2596.y;
    float _2600 = _2596.z;
    float _2601 = _2596.w;
    float _2672;
    float _2674;
    float _2676;
    float _2678;
    if (_399 > cbSceneParam._m0[78u].w)
    {
        float _2635 = isnan(_399) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _399 : min(cbSceneParam._m0[80u].w, _399));
        float _2636 = _2635 / _399;
        float _2647 = _2636 * _451;
        float _2648 = _452 * _2636;
        float _2649 = (-0.0) - _2648;
        float _2650 = _2636 * _453;
        float _2652 = (cbSceneParam._m0[77u].w * _2649) / _2635;
        float _2653 = _2652 + cbSceneParam._m0[79u].w;
        float _2654 = cbSceneParam._m0[79u].w - _2648;
        float _2660 = sqrt(((_2647 * _2647) + (_2648 * _2648)) + (_2650 * _2650));
        float _2663 = (1.0 - (cbSceneParam._m0[77u].w / _2635)) * _2660;
        float _2668 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2670 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2823;
        if (abs((_2649 - _2652) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2823 = ((((_2653 > 0.0) ? exp2(_2668 * _2653) : (2.0 - exp2(_2670 * _2653))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2663;
        }
        else
        {
            float _2783 = 1.0 / cbSceneParam._m0[80u].x;
            float _2784 = isnan(_2654) ? _2653 : (isnan(_2653) ? _2654 : max(_2653, _2654));
            float _2785 = isnan(_2654) ? _2653 : (isnan(_2653) ? _2654 : min(_2653, _2654));
            float _2794 = isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : min(_2784, 0.0));
            float _2795 = isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : min(_2785, 0.0));
            _2823 = ((abs(_2660 / _2649) * cbSceneParam._m0[80u].y) * ((((_2794 - _2795) * 2.0) - ((exp2(_2668 * (isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : max(_2784, 0.0)))) - exp2(_2668 * (isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : max(_2785, 0.0))))) * _2783)) - ((exp2(_2670 * _2794) - exp2(_2670 * _2795)) * _2783))) + (_2663 * cbSceneParam._m0[80u].z);
        }
        vec4 _2825 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2581, _2582, 1.0), 0.0);
        float _2834 = exp2((_2823 * (-1.44269502162933349609375)) * (1.0 - _2825.w));
        float _2835 = log2(_2834);
        float _2851 = log2(_2601);
        _2672 = (exp2(_2851 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2835 * cbSceneParam._m0[78u].x)) * _2825.x) / cbSceneParam._m0[78u].x)) + _2598;
        _2674 = (exp2(_2851 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2835 * cbSceneParam._m0[78u].y)) * _2825.y) / cbSceneParam._m0[78u].y)) + _2599;
        _2676 = (exp2(_2851 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2835 * cbSceneParam._m0[78u].z)) * _2825.z) / cbSceneParam._m0[78u].z)) + _2600;
        _2678 = _2834 * _2601;
    }
    else
    {
        _2672 = _2598;
        _2674 = _2599;
        _2676 = _2600;
        _2678 = _2601;
    }
    float _2690 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2691 = _2690 == 3.0;
    float _2692 = log2(_2678);
    float _2699 = exp2(_2692 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0))) * (_2543 + ((isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0))) * _533))) + ((_2549 + ((isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0))) * _1340)) * cbPerFrame._m0[3u].x));
    float _2700 = exp2(_2692 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0))) * (_2545 + ((isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0))) * _533))) + ((_2551 + ((isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0))) * _1340)) * cbPerFrame._m0[3u].x));
    float _2701 = exp2(_2692 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0))) * (_2547 + ((isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0))) * _533))) + ((_2553 + ((isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0))) * _1340)) * cbPerFrame._m0[3u].x));
    float _2710 = (_2690 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2710 * (_2691 ? _2699 : (_2699 + (cbSceneParam._m0[72u].w * _2672)));
    SV_Target.y = _2710 * (_2691 ? _2700 : (_2700 + (cbSceneParam._m0[72u].w * _2674)));
    SV_Target.z = _2710 * (_2691 ? _2701 : (_2701 + (cbSceneParam._m0[72u].w * _2676)));
    SV_Target.w = cbInstanceData._m0[_2573].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2573].w;
}


