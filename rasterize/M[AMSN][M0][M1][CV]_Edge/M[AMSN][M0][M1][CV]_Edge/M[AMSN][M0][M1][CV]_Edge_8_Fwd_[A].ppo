#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1000;
float _3388;
float _3389;
float _3390;
float _3391;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _194 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _195 = _194 * _186;
    float _196 = _194 * _187;
    float _197 = _194 * _188;
    float _201 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _202 = _201 * NORMAL.x;
    float _203 = _201 * NORMAL.y;
    float _204 = _201 * NORMAL.z;
    float _208 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _209 = _208 * TANGENT.x;
    float _210 = _208 * TANGENT.y;
    float _211 = _208 * TANGENT.z;
    float _216;
    float _217;
    float _218;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _216 = (-0.0) - _202;
        _217 = (-0.0) - _203;
        _218 = (-0.0) - _204;
    }
    else
    {
        _216 = _202;
        _217 = _203;
        _218 = _204;
    }
    vec4 _244 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _250 = _244.w;
    float _251 = _244.x * cbMtdParam._m0[9u].x;
    float _252 = _244.y * cbMtdParam._m0[9u].y;
    float _253 = _244.z * cbMtdParam._m0[9u].z;
    vec4 _271 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _275 = _271.z;
    float _279 = (_271.x * 2.0) + (-1.0);
    float _281 = (_271.y * 2.0) + (-1.0);
    float _282 = dot(vec2(_279, _281), vec2(_279, _281));
    float _3400 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    float _288 = sqrt(1.0 - (isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0))));
    float _291 = fma(_288, _216, fma(_281, _209, _279 * _195));
    float _294 = fma(_288, _217, fma(_281, _210, _279 * _196));
    float _297 = fma(_288, _218, fma(_281, _211, _279 * _197));
    float _301 = inversesqrt(dot(vec3(_291, _294, _297), vec3(_291, _294, _297)));
    float _330 = (cbMtdParam._m0[12u].x + dot(vec4(_301 * _291, _301 * _294, _301 * _297, 0.0), vec4(cbMtdParam._m0[13u].xyz, 0.0))) - (texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w)).x * cbMtdParam._m0[12u].y);
    float _3411 = isnan(0.0) ? _330 : (isnan(_330) ? 0.0 : max(_330, 0.0));
    float _331 = isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0));
    float _338 = (_331 * (cbMtdParam._m0[10u].x - _251)) + _251;
    float _339 = (_331 * (cbMtdParam._m0[10u].y - _252)) + _252;
    float _340 = (_331 * (cbMtdParam._m0[10u].z - _253)) + _253;
    vec4 _352 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _354 = _352.x;
    float _356 = _354 - (_354 * _331);
    vec4 _368 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _375 = (_368.x * 2.0) + (-1.0);
    float _376 = (_368.y * 2.0) + (-1.0);
    float _377 = dot(vec2(_375, _376), vec2(_375, _376));
    float _3422 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _385 = ((_368.z - _275) * _331) + _275;
    float _397 = (((_375 - _279) + (cbMtdParam._m0[12u].w * _279)) * _331) + _279;
    float _398 = (((_376 - _281) + (cbMtdParam._m0[12u].w * _281)) * _331) + _281;
    float _399 = ((sqrt(1.0 - (isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0)))) - _288) * _331) + _288;
    float _402 = fma(_399, _216, fma(_398, _209, _397 * _195));
    float _405 = fma(_399, _217, fma(_398, _210, _397 * _196));
    float _408 = fma(_399, _218, fma(_398, _211, _397 * _197));
    float _412 = inversesqrt(dot(vec3(_402, _405, _408), vec3(_402, _405, _408)));
    float _413 = _412 * _402;
    float _414 = _412 * _405;
    float _415 = _412 * _408;
    float _3433 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _416 = isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0));
    float _3444 = isnan(0.0) ? _338 : (isnan(_338) ? 0.0 : max(_338, 0.0));
    float _3455 = isnan(0.0) ? _339 : (isnan(_339) ? 0.0 : max(_339, 0.0));
    float _3466 = isnan(0.0) ? _340 : (isnan(_340) ? 0.0 : max(_340, 0.0));
    float _3477 = isnan(0.0) ? _356 : (isnan(_356) ? 0.0 : max(_356, 0.0));
    float _420 = isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0));
    float _436 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _478 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _488 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _478);
    float _489 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _478);
    float _490 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _478);
    float _494 = inversesqrt(dot(vec3(_488, _489, _490), vec3(_488, _489, _490)));
    float _495 = _488 * _494;
    float _496 = _489 * _494;
    float _497 = _490 * _494;
    vec4 _502 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _504 = _502.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _679 = sqrt(((_488 * _488) + (_489 * _489)) + (_490 * _490));
        float _685 = (cbMatDynParam._m0[5u].x * _679) + cbMatDynParam._m0[5u].y;
        float _3488 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
        float _686 = isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0));
        float _690 = (cbMatDynParam._m0[5u].z * _679) + cbMatDynParam._m0[5u].w;
        float _3499 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0))) - _686)) + _686) < ((_504 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _516 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _517 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _537 = fma(_415, cbSceneParam._m0[5u].z, fma(_414, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _413));
    float _540 = fma(_415, cbSceneParam._m0[6u].z, fma(_414, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _413));
    float _543 = fma(_415, cbSceneParam._m0[7u].z, fma(_414, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _413));
    uint _556 = uint(roundEven(NORMAL.w)) * 13u;
    uint _557 = _556 + 9u;
    uint _558 = _557 + uint(cbMatDynParam._m0[0u].w);
    float _564 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0)))) * cbInstanceData._m0[_558].x;
    float _565 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0)))) * cbInstanceData._m0[_558].y;
    float _566 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0)))) * cbInstanceData._m0[_558].z;
    float _3510 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _567 = isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0));
    float _3521 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _568 = isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0));
    float _3532 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _569 = isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0));
    float _570 = 1.0 - _420;
    float _571 = _567 * _570;
    float _572 = _568 * _570;
    float _573 = _569 * _570;
    float _578 = (_567 + (-0.039999999105930328369140625)) * _420;
    float _579 = (_568 + (-0.039999999105930328369140625)) * _420;
    float _580 = (_569 + (-0.039999999105930328369140625)) * _420;
    float _581 = _578 + 0.039999999105930328369140625;
    float _583 = _579 + 0.039999999105930328369140625;
    float _584 = _580 + 0.039999999105930328369140625;
    vec4 _593 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _516, cbSceneParam._m0[86u].y * _517));
    float _596 = _593.x * TEXCOORD_3.w;
    float _597 = dot(vec3(_413, _414, _415), vec3(_495, _496, _497));
    float _600 = _597 * 2.0;
    float _604 = (_600 * _413) - _495;
    float _605 = (_600 * _414) - _496;
    float _606 = (_600 * _415) - _497;
    float _610 = abs(dot(vec3(_495, _496, _497), vec3(_413, _414, _415)));
    float _3543 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _612 = sqrt(_416);
    float _625 = exp2((_612 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_612 * 3.0));
    float _631 = (1.0 - _625) * ((_612 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _632 = _625 * _612;
    float _660 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _664 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _668 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _999;
    float _1001;
    float _1002;
    float _1003;
    float _1004;
    float _1005;
    float _1006;
    float _1007;
    float _1008;
    float _1009;
    float _1010;
    float _1011;
    float _1012;
    float _1013;
    float _1014;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _724 = fma(_668, cbModelParam._m0[26u].z, fma(_664, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _660));
        float _728 = fma(_668, cbModelParam._m0[27u].z, fma(_664, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _660));
        float _732 = fma(_668, cbModelParam._m0[28u].z, fma(_664, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _660));
        float _757 = _660 + _413;
        float _758 = _664 + _414;
        float _759 = _668 + _415;
        float _769 = fma(_759, cbModelParam._m0[26u].z, fma(_758, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _757)) - _724;
        float _770 = fma(_759, cbModelParam._m0[27u].z, fma(_758, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _757)) - _728;
        float _771 = fma(_759, cbModelParam._m0[28u].z, fma(_758, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _757)) - _732;
        float _775 = inversesqrt(dot(vec3(_769, _770, _771), vec3(_769, _770, _771)));
        float _788 = ((_775 * _769) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_724 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _789 = ((_775 * _770) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_728 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _790 = ((_775 * _771) / cbModelParam._m0[34u].z) + ((((((_732 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _793 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_788, _789, _790), 0.0);
        vec4 _800 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_788, _789, _790), 0.0);
        vec4 _807 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_788, _789, _790), 0.0);
        vec4 _814 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_788, _789, _790), 0.0);
        float _827 = exp2((_793.w + (-0.5)) * 20.0) * 2.0;
        float _828 = _827 * (_793.x + (-0.5));
        float _829 = _827 * (_793.y + (-0.5));
        float _830 = _827 * (_793.z + (-0.5));
        float _837 = exp2((_800.w + (-0.5)) * 20.0) * 2.0;
        float _838 = _837 * (_800.x + (-0.5));
        float _839 = _837 * (_800.y + (-0.5));
        float _840 = _837 * (_800.z + (-0.5));
        float _847 = exp2((_807.w + (-0.5)) * 20.0) * 2.0;
        float _848 = _847 * (_807.x + (-0.5));
        float _849 = _847 * (_807.y + (-0.5));
        float _850 = _847 * (_807.z + (-0.5));
        float _857 = exp2((_814.w + (-0.5)) * 20.0) * 2.0;
        float _858 = _857 * (_814.x + (-0.5));
        float _859 = _857 * (_814.y + (-0.5));
        float _860 = _857 * (_814.z + (-0.5));
        float _861 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
        float _862 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
        float _863 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
        float _864 = _828 * 0.5;
        float _865 = _838 * 0.5;
        float _866 = _848 * 0.5;
        float _867 = dot(vec3(_864, _865, _866), vec3(_864, _865, _866));
        float _872 = (_867 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_867);
        float _881 = (dot(vec3(_413, _414, _415), vec3(_872 * _864, _872 * _865, _872 * _866)) + 1.0) * 0.5;
        float _3569 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
        float _891 = sqrt(((_865 * _865) + (_864 * _864)) + (_866 * _866)) / (_861 + 9.9999997473787516355514526367188e-06);
        float _3580 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
        float _892 = isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0));
        float _893 = _892 * 2.0;
        float _897 = (1.0 - _892) / (_892 + 1.0);
        float _3591 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
        float _898 = isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0));
        float _907 = ((((1.0 - _898) * (_893 + 2.0)) * exp2(log2(isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0))) * (_893 + 1.0))) + _898) * _861;
        float _908 = _829 * 0.5;
        float _909 = _839 * 0.5;
        float _910 = _849 * 0.5;
        float _911 = dot(vec3(_908, _909, _910), vec3(_908, _909, _910));
        float _916 = (_911 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_911);
        float _924 = (dot(vec3(_413, _414, _415), vec3(_916 * _908, _916 * _909, _916 * _910)) + 1.0) * 0.5;
        float _3602 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        float _933 = sqrt(((_909 * _909) + (_908 * _908)) + (_910 * _910)) / (_862 + 9.9999997473787516355514526367188e-06);
        float _3613 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
        float _934 = isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0));
        float _935 = _934 * 2.0;
        float _939 = (1.0 - _934) / (_934 + 1.0);
        float _3624 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
        float _940 = isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0));
        float _949 = ((((1.0 - _940) * (_935 + 2.0)) * exp2(log2(isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0))) * (_935 + 1.0))) + _940) * _862;
        float _950 = _830 * 0.5;
        float _951 = _840 * 0.5;
        float _952 = _850 * 0.5;
        float _953 = dot(vec3(_950, _951, _952), vec3(_950, _951, _952));
        float _958 = (_953 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_953);
        float _966 = (dot(vec3(_413, _414, _415), vec3(_958 * _950, _958 * _951, _958 * _952)) + 1.0) * 0.5;
        float _3635 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
        float _975 = sqrt(((_951 * _951) + (_950 * _950)) + (_952 * _952)) / (_863 + 9.9999997473787516355514526367188e-06);
        float _3646 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _976 = isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0));
        float _977 = _976 * 2.0;
        float _981 = (1.0 - _976) / (_976 + 1.0);
        float _3657 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _982 = isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0));
        float _991 = ((((1.0 - _982) * (_977 + 2.0)) * exp2(log2(isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0))) * (_977 + 1.0))) + _982) * _863;
        _999 = _830;
        _1001 = _829;
        _1002 = _828;
        _1003 = _840;
        _1004 = _839;
        _1005 = _838;
        _1006 = _850;
        _1007 = _849;
        _1008 = _848;
        _1009 = _863;
        _1010 = _862;
        _1011 = _861;
        _1012 = cbModelParam._m0[36u].z * (isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0)));
        _1013 = cbModelParam._m0[36u].z * (isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0)));
        _1014 = cbModelParam._m0[36u].z * (isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0)));
    }
    else
    {
        _999 = _1000;
        _1001 = _1000;
        _1002 = _1000;
        _1003 = _1000;
        _1004 = _1000;
        _1005 = _1000;
        _1006 = _1000;
        _1007 = _1000;
        _1008 = _1000;
        _1009 = _1000;
        _1010 = _1000;
        _1011 = _1000;
        _1012 = 0.0;
        _1013 = 0.0;
        _1014 = 0.0;
    }
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1043 = fma(_668, cbModelParam._m0[30u].z, fma(_664, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _660));
        float _1047 = fma(_668, cbModelParam._m0[31u].z, fma(_664, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _660));
        float _1051 = fma(_668, cbModelParam._m0[32u].z, fma(_664, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _660));
        float _1074 = _660 + _413;
        float _1075 = _664 + _414;
        float _1076 = _668 + _415;
        float _1086 = fma(_1076, cbModelParam._m0[30u].z, fma(_1075, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1074)) - _1043;
        float _1087 = fma(_1076, cbModelParam._m0[31u].z, fma(_1075, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1074)) - _1047;
        float _1088 = fma(_1076, cbModelParam._m0[32u].z, fma(_1075, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1074)) - _1051;
        float _1092 = inversesqrt(dot(vec3(_1086, _1087, _1088), vec3(_1086, _1087, _1088)));
        float _1105 = ((_1092 * _1086) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1043 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1106 = ((_1092 * _1087) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1047 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1107 = ((_1092 * _1088) / cbModelParam._m0[35u].z) + ((((((_1051 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1109 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1105, _1106, _1107), 0.0);
        vec4 _1116 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1105, _1106, _1107), 0.0);
        vec4 _1123 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1105, _1106, _1107), 0.0);
        vec4 _1130 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1105, _1106, _1107), 0.0);
        float _1142 = exp2((_1109.w + (-0.5)) * 20.0) * 2.0;
        float _1143 = _1142 * (_1109.x + (-0.5));
        float _1144 = _1142 * (_1109.y + (-0.5));
        float _1145 = _1142 * (_1109.z + (-0.5));
        float _1152 = exp2((_1116.w + (-0.5)) * 20.0) * 2.0;
        float _1153 = _1152 * (_1116.x + (-0.5));
        float _1154 = _1152 * (_1116.y + (-0.5));
        float _1155 = _1152 * (_1116.z + (-0.5));
        float _1162 = exp2((_1123.w + (-0.5)) * 20.0) * 2.0;
        float _1163 = _1162 * (_1123.x + (-0.5));
        float _1164 = _1162 * (_1123.y + (-0.5));
        float _1165 = _1162 * (_1123.z + (-0.5));
        float _1172 = exp2((_1130.w + (-0.5)) * 20.0) * 2.0;
        float _1173 = _1172 * (_1130.x + (-0.5));
        float _1174 = _1172 * (_1130.y + (-0.5));
        float _1175 = _1172 * (_1130.z + (-0.5));
        float _1176 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1177 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1178 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1179 = _1143 * 0.5;
        float _1180 = _1153 * 0.5;
        float _1181 = _1163 * 0.5;
        float _1182 = dot(vec3(_1179, _1180, _1181), vec3(_1179, _1180, _1181));
        float _1187 = (_1182 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1182);
        float _1195 = (dot(vec3(_413, _414, _415), vec3(_1187 * _1179, _1187 * _1180, _1187 * _1181)) + 1.0) * 0.5;
        float _3698 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1204 = sqrt(((_1180 * _1180) + (_1179 * _1179)) + (_1181 * _1181)) / (_1176 + 9.9999997473787516355514526367188e-06);
        float _3709 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1205 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
        float _1206 = _1205 * 2.0;
        float _1210 = (1.0 - _1205) / (_1205 + 1.0);
        float _3720 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1211 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
        float _1220 = ((((1.0 - _1211) * (_1206 + 2.0)) * exp2(log2(isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0))) * (_1206 + 1.0))) + _1211) * _1176;
        float _1221 = _1144 * 0.5;
        float _1222 = _1154 * 0.5;
        float _1223 = _1164 * 0.5;
        float _1224 = dot(vec3(_1221, _1222, _1223), vec3(_1221, _1222, _1223));
        float _1229 = (_1224 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1224);
        float _1237 = (dot(vec3(_413, _414, _415), vec3(_1229 * _1221, _1229 * _1222, _1229 * _1223)) + 1.0) * 0.5;
        float _3731 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1246 = sqrt(((_1222 * _1222) + (_1221 * _1221)) + (_1223 * _1223)) / (_1177 + 9.9999997473787516355514526367188e-06);
        float _3742 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1247 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
        float _1248 = _1247 * 2.0;
        float _1252 = (1.0 - _1247) / (_1247 + 1.0);
        float _3753 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1253 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
        float _1262 = ((((1.0 - _1253) * (_1248 + 2.0)) * exp2(log2(isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0))) * (_1248 + 1.0))) + _1253) * _1177;
        float _1263 = _1145 * 0.5;
        float _1264 = _1155 * 0.5;
        float _1265 = _1165 * 0.5;
        float _1266 = dot(vec3(_1263, _1264, _1265), vec3(_1263, _1264, _1265));
        float _1271 = (_1266 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1266);
        float _1279 = (dot(vec3(_413, _414, _415), vec3(_1271 * _1263, _1271 * _1264, _1271 * _1265)) + 1.0) * 0.5;
        float _3764 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1288 = sqrt(((_1264 * _1264) + (_1263 * _1263)) + (_1265 * _1265)) / (_1178 + 9.9999997473787516355514526367188e-06);
        float _3775 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1289 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
        float _1290 = _1289 * 2.0;
        float _1294 = (1.0 - _1289) / (_1289 + 1.0);
        float _3786 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1295 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
        float _1304 = ((((1.0 - _1295) * (_1290 + 2.0)) * exp2(log2(isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0))) * (_1290 + 1.0))) + _1295) * _1178;
        _1312 = _1145;
        _1313 = _1144;
        _1314 = _1143;
        _1315 = _1155;
        _1316 = _1154;
        _1317 = _1153;
        _1318 = _1165;
        _1319 = _1164;
        _1320 = _1163;
        _1321 = _1178;
        _1322 = _1177;
        _1323 = _1176;
        _1324 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0)));
        _1325 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0)));
        _1326 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0)));
    }
    else
    {
        _1312 = _1000;
        _1313 = _1000;
        _1314 = _1000;
        _1315 = _1000;
        _1316 = _1000;
        _1317 = _1000;
        _1318 = _1000;
        _1319 = _1000;
        _1320 = _1000;
        _1321 = _1000;
        _1322 = _1000;
        _1323 = _1000;
        _1324 = 0.0;
        _1325 = 0.0;
        _1326 = 0.0;
    }
    float _1336 = (cbModelParam._m0[1u].x * (_1324 - _1012)) + _1012;
    float _1337 = (cbModelParam._m0[1u].x * (_1325 - _1013)) + _1013;
    float _1338 = (cbModelParam._m0[1u].x * (_1326 - _1014)) + _1014;
    float _1359 = fma(_1338, cbSceneParam._m0[89u].z, fma(_1337, cbSceneParam._m0[89u].y, _1336 * cbSceneParam._m0[89u].x));
    float _1362 = fma(_1338, cbSceneParam._m0[90u].z, fma(_1337, cbSceneParam._m0[90u].y, _1336 * cbSceneParam._m0[90u].x));
    float _1365 = fma(_1338, cbSceneParam._m0[91u].z, fma(_1337, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1336));
    float _1380 = _604 * 0.5;
    float _1381 = _605 * 0.5;
    float _1382 = _606 * 0.5;
    float _1383 = dot(vec4(_1380, _1381, _1382, 1.0), vec4(_1314, _1317, _1320, _1323));
    float _1386 = dot(vec4(_1380, _1381, _1382, 1.0), vec4(_1313, _1316, _1319, _1322));
    float _1389 = dot(vec4(_1380, _1381, _1382, 1.0), vec4(_1312, _1315, _1318, _1321));
    float _1423;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1396 = dot(vec4(_1380, _1381, _1382, 1.0), vec4(_999, _1003, _1006, _1009));
        float _1400 = dot(vec4(_1380, _1381, _1382, 1.0), vec4(_1001, _1004, _1007, _1010));
        float _1404 = dot(vec4(_1380, _1381, _1382, 1.0), vec4(_1002, _1005, _1008, _1011));
        float _1411 = dot(vec4(cbModelParam._m0[39u]), vec4(_1380, _1381, _1382, 1.0));
        _1423 = dot(vec3(isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0)), isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0)), isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1411) ? 0.0 : (isnan(0.0) ? _1411 : max(0.0, _1411))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1423 = 1.0;
    }
    float _1434;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1425 = dot(vec4(cbModelParam._m0[40u]), vec4(_1380, _1381, _1382, 1.0));
        _1434 = dot(vec3(isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0)), isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0)), isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1425) ? 0.0 : (isnan(0.0) ? _1425 : max(0.0, _1425))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1434 = 1.0;
    }
    float _1438 = (_1434 * cbModelParam._m0[1u].x) + (_1423 * (1.0 - cbModelParam._m0[1u].x));
    float _1448 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _416);
    float _1449 = isnan(_1448) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1448 : min(cbModelParam._m0[25u].z, _1448));
    float _1530;
    float _1532;
    float _1534;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1497 = fma(_668, cbModelParam._m0[13u].z, fma(_664, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _660)) + cbModelParam._m0[13u].w;
        float _1501 = fma(_668, cbModelParam._m0[14u].z, fma(_664, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _660)) + cbModelParam._m0[14u].w;
        float _1505 = fma(_668, cbModelParam._m0[15u].z, fma(_664, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _660)) + cbModelParam._m0[15u].w;
        float _1508 = fma(_606, cbModelParam._m0[13u].z, fma(_605, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _604));
        float _1511 = fma(_606, cbModelParam._m0[14u].z, fma(_605, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _604));
        float _1514 = fma(_606, cbModelParam._m0[15u].z, fma(_605, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _604));
        float _1542;
        if (_1508 > 0.0)
        {
            _1542 = abs((1.0 - _1497) / _1508);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1508 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1497 + 1.0) / _1508);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1542 = frontier_phi_19_17_ladder;
        }
        float _1748;
        if (_1511 > 0.0)
        {
            _1748 = abs((1.0 - _1501) / _1511);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1511 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1501 + 1.0) / _1511);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1748 = frontier_phi_28_24_ladder;
        }
        float _2002;
        if (_1514 > 0.0)
        {
            _2002 = abs((1.0 - _1505) / _1514);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1514 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1505 + 1.0) / _1514);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2002 = frontier_phi_40_35_ladder;
        }
        float _2004 = isnan(_1748) ? _1542 : (isnan(_1542) ? _1748 : min(_1542, _1748));
        float _2005 = isnan(_2002) ? _2004 : (isnan(_2004) ? _2002 : min(_2004, _2002));
        float _2009 = (_2005 * _1508) + _1497;
        float _2010 = (_2005 * _1511) + _1501;
        float _2011 = (_2005 * _1514) + _1505;
        float _2012 = _2005 * 9.9999997473787516355514526367188e-05;
        float _2014 = (-1.0) - _2012;
        float _2016 = _2012 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2011 > _2016) || ((_2011 < _2014) || ((_2010 > _2016) || ((_2010 < _2014) || ((_2009 < _2014) || (_2009 > _2016))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2139 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2011, cbModelParam._m0[9u].z, fma(_2010, cbModelParam._m0[9u].y, _2009 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2011, cbModelParam._m0[10u].z, fma(_2010, cbModelParam._m0[10u].y, _2009 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2011, cbModelParam._m0[11u].z, fma(_2010, cbModelParam._m0[11u].y, _2009 * cbModelParam._m0[11u].x))), _1449);
            frontier_phi_18_40_ladder = _2139.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2139.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2139.x * cbModelParam._m0[1u].y;
        }
        _1530 = frontier_phi_18_40_ladder_2;
        _1532 = frontier_phi_18_40_ladder_1;
        _1534 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1518 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_604, _605, _606), _1449);
        _1530 = _1518.x * cbModelParam._m0[1u].y;
        _1532 = _1518.y * cbModelParam._m0[1u].y;
        _1534 = _1518.z * cbModelParam._m0[1u].y;
    }
    float _1538 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _416);
    float _1539 = isnan(_1538) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1538 : min(cbModelParam._m0[25u].w, _1538));
    float _1632;
    float _1634;
    float _1636;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1596 = fma(_668, cbModelParam._m0[21u].z, fma(_664, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _660)) + cbModelParam._m0[21u].w;
        float _1600 = fma(_668, cbModelParam._m0[22u].z, fma(_664, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _660)) + cbModelParam._m0[22u].w;
        float _1604 = fma(_668, cbModelParam._m0[23u].z, fma(_664, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _660)) + cbModelParam._m0[23u].w;
        float _1607 = fma(_606, cbModelParam._m0[21u].z, fma(_605, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _604));
        float _1610 = fma(_606, cbModelParam._m0[22u].z, fma(_605, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _604));
        float _1613 = fma(_606, cbModelParam._m0[23u].z, fma(_605, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _604));
        float _1753;
        if (_1607 > 0.0)
        {
            _1753 = abs((1.0 - _1596) / _1607);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1607 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1596 + 1.0) / _1607);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1753 = frontier_phi_30_26_ladder;
        }
        float _2029;
        if (_1610 > 0.0)
        {
            _2029 = abs((1.0 - _1600) / _1610);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1610 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1600 + 1.0) / _1610);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2029 = frontier_phi_42_37_ladder;
        }
        float _2242;
        if (_1613 > 0.0)
        {
            _2242 = abs((1.0 - _1604) / _1613);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1613 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1604 + 1.0) / _1613);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2242 = frontier_phi_51_48_ladder;
        }
        float _2244 = isnan(_2029) ? _1753 : (isnan(_1753) ? _2029 : min(_1753, _2029));
        float _2245 = isnan(_2242) ? _2244 : (isnan(_2244) ? _2242 : min(_2244, _2242));
        float _2249 = (_2245 * _1607) + _1596;
        float _2250 = (_2245 * _1610) + _1600;
        float _2251 = (_2245 * _1613) + _1604;
        float _2252 = _2245 * 9.9999997473787516355514526367188e-05;
        float _2253 = (-1.0) - _2252;
        float _2255 = _2252 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2251 > _2255) || ((_2251 < _2253) || ((_2250 > _2255) || ((_2250 < _2253) || ((_2249 < _2253) || (_2249 > _2255))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2449 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2251, cbModelParam._m0[17u].z, fma(_2250, cbModelParam._m0[17u].y, _2249 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2251, cbModelParam._m0[18u].z, fma(_2250, cbModelParam._m0[18u].y, _2249 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2251, cbModelParam._m0[19u].z, fma(_2250, cbModelParam._m0[19u].y, _2249 * cbModelParam._m0[19u].x))), _1539);
            frontier_phi_27_51_ladder = _2449.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2449.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2449.x * cbModelParam._m0[1u].z;
        }
        _1632 = frontier_phi_27_51_ladder_2;
        _1634 = frontier_phi_27_51_ladder_1;
        _1636 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1616 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_604, _605, _606), _1539);
        _1632 = _1616.x * cbModelParam._m0[1u].z;
        _1634 = _1616.y * cbModelParam._m0[1u].z;
        _1636 = _1616.z * cbModelParam._m0[1u].z;
    }
    float _1649 = (((_631 * _581) + _632) * _596) * ((cbModelParam._m0[1u].w * (_1632 - _1530)) + _1530);
    float _1651 = (((_631 * _583) + _632) * _596) * ((cbModelParam._m0[1u].w * (_1634 - _1532)) + _1532);
    float _1653 = (((_631 * _584) + _632) * _596) * ((cbModelParam._m0[1u].w * (_1636 - _1534)) + _1534);
    float _1656 = fma(_1653, cbSceneParam._m0[89u].z, fma(_1651, cbSceneParam._m0[89u].y, _1649 * cbSceneParam._m0[89u].x));
    float _1659 = fma(_1653, cbSceneParam._m0[90u].z, fma(_1651, cbSceneParam._m0[90u].y, _1649 * cbSceneParam._m0[90u].x));
    float _1662 = fma(_1653, cbSceneParam._m0[91u].z, fma(_1651, cbSceneParam._m0[91u].y, _1649 * cbSceneParam._m0[91u].x));
    uvec4 _1672 = floatBitsToUint(cbInstanceData._m0[_556 + 5u]);
    uint _1674 = _1672.x * 14u;
    uint _1675 = _1674 + 13u;
    float _1682 = _596 + (-1.0);
    float _1687 = (cbLight._m0[_1675].x * _1682) + 1.0;
    float _1688 = (cbLight._m0[_1675].y * _1682) + 1.0;
    float _1689 = (cbLight._m0[_1675].z * _1682) + 1.0;
    float _1690 = (cbLight._m0[_1675].w * _1682) + 1.0;
    uint _1691 = _1674 + 5u;
    float _1697 = isnan(1.0) ? _1688 : (isnan(_1688) ? 1.0 : min(_1688, 1.0));
    uint _1701 = _1674 + 4u;
    float _1707 = isnan(1.0) ? _1687 : (isnan(_1687) ? 1.0 : min(_1687, 1.0));
    uint _1711 = _1674 | 1u;
    float _1722 = dot(vec3(cbLight._m0[_1674].xyz), vec3(_413, _414, _415));
    float _1725 = dot(vec3(cbLight._m0[_1711].xyz), vec3(_413, _414, _415));
    float _3922 = isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0));
    float _3933 = isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0));
    float _1730 = (isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0))) * 0.3183098733425140380859375;
    float _1732 = (isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0))) * 0.3183098733425140380859375;
    float _1739 = ((cbLight._m0[_1691].x * _1697) * _1732) + ((cbLight._m0[_1701].x * _1707) * _1730);
    float _1740 = ((_1697 * cbLight._m0[_1691].y) * _1732) + ((_1707 * cbLight._m0[_1701].y) * _1730);
    float _1741 = ((_1697 * cbLight._m0[_1691].z) * _1732) + ((_1707 * cbLight._m0[_1701].z) * _1730);
    uvec4 _1745 = floatBitsToUint(cbLight._m0[_1674 + 12u]);
    bool _1747 = _1745.x == 0u;
    float _1758;
    float _1760;
    float _1762;
    if (_1747)
    {
        _1758 = _1739;
        _1760 = _1740;
        _1762 = _1741;
    }
    else
    {
        uint _1766 = _1674 + 6u;
        float _1782 = (dot(vec3(cbLight._m0[_1674 + 2u].xyz), vec3(_413, _414, _415)) * 0.5) + 0.5;
        float _1783 = _1782 * _1782;
        float _3944 = isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0));
        float _1784 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
        float _1785 = isnan(1.0) ? _1689 : (isnan(_1689) ? 1.0 : min(_1689, 1.0));
        _1758 = (((cbLight._m0[_1766].x * 0.3183098733425140380859375) * _1784) * _1785) + _1739;
        _1760 = (((cbLight._m0[_1766].y * 0.3183098733425140380859375) * _1784) * _1785) + _1740;
        _1762 = (((cbLight._m0[_1766].z * 0.3183098733425140380859375) * _1784) * _1785) + _1741;
    }
    bool _1765 = _1745.y == 0u;
    float _1803;
    float _1805;
    float _1807;
    if (_1765)
    {
        _1803 = _1758;
        _1805 = _1760;
        _1807 = _1762;
    }
    else
    {
        uint _1973 = _1674 + 7u;
        float _1989 = (dot(vec3(cbLight._m0[_1674 + 3u].xyz), vec3(_413, _414, _415)) * 0.5) + 0.5;
        float _1990 = _1989 * _1989;
        float _3960 = isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0));
        float _1991 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
        float _1992 = isnan(1.0) ? _1690 : (isnan(_1690) ? 1.0 : min(_1690, 1.0));
        _1803 = (((cbLight._m0[_1973].x * 0.3183098733425140380859375) * _1991) * _1992) + _1758;
        _1805 = (((cbLight._m0[_1973].y * 0.3183098733425140380859375) * _1991) * _1992) + _1760;
        _1807 = (((cbLight._m0[_1973].z * 0.3183098733425140380859375) * _1991) * _1992) + _1762;
    }
    uint _1810 = _1674 + 8u;
    float _1823 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1674].w)) * _416) * 0.949999988079071044921875);
    float _1824 = _1823 * _1823;
    float _1825 = cbLight._m0[_1674].x + _495;
    float _1826 = cbLight._m0[_1674].y + _496;
    float _1827 = cbLight._m0[_1674].z + _497;
    float _1831 = inversesqrt(dot(vec3(_1825, _1826, _1827), vec3(_1825, _1826, _1827)));
    float _1832 = _1831 * _1825;
    float _1833 = _1831 * _1826;
    float _1834 = _1831 * _1827;
    float _1835 = dot(vec3(_413, _414, _415), vec3(cbLight._m0[_1674].xyz));
    float _3976 = isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0));
    float _1838 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
    float _3987 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _1839 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
    float _1840 = dot(vec3(_413, _414, _415), vec3(_1832, _1833, _1834));
    float _3998 = isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0));
    float _1843 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
    float _1844 = dot(vec3(cbLight._m0[_1674].xyz), vec3(_1832, _1833, _1834));
    float _4009 = isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0));
    float _1848 = _1824 * _1824;
    float _1852 = ((_1843 * _1843) * (_1848 + (-1.0))) + 1.0;
    float _1860 = exp2(log2(1.0 - (isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0)))) * 5.0);
    float _1861 = 0.959999978542327880859375 - _578;
    float _1863 = 0.959999978542327880859375 - _579;
    float _1864 = 0.959999978542327880859375 - _580;
    float _1871 = 1.0 - _1824;
    float _1882 = (0.5 / (((_1839 * ((_1838 * _1871) + _1824)) + 9.9999999392252902907785028219223e-09) + (((_1839 * _1871) + _1824) * _1838))) * _1838;
    float _4020 = isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0));
    float _1884 = (isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0))) * (_1848 / ((_1852 * _1852) * 3.141590118408203125));
    uint _1895 = _1674 + 9u;
    float _1906 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1711].w)) * _416) * 0.949999988079071044921875);
    float _1907 = _1906 * _1906;
    float _1908 = cbLight._m0[_1711].x + _495;
    float _1909 = cbLight._m0[_1711].y + _496;
    float _1910 = cbLight._m0[_1711].z + _497;
    float _1914 = inversesqrt(dot(vec3(_1908, _1909, _1910), vec3(_1908, _1909, _1910)));
    float _1915 = _1914 * _1908;
    float _1916 = _1914 * _1909;
    float _1917 = _1914 * _1910;
    float _1918 = dot(vec3(_413, _414, _415), vec3(cbLight._m0[_1711].xyz));
    float _4031 = isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0));
    float _1921 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
    float _1922 = dot(vec3(_413, _414, _415), vec3(_1915, _1916, _1917));
    float _4042 = isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0));
    float _1925 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
    float _1926 = dot(vec3(cbLight._m0[_1711].xyz), vec3(_1915, _1916, _1917));
    float _4053 = isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0));
    float _1930 = _1907 * _1907;
    float _1934 = ((_1925 * _1925) * (_1930 + (-1.0))) + 1.0;
    float _1941 = exp2(log2(1.0 - (isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0)))) * 5.0);
    float _1948 = 1.0 - _1907;
    float _1958 = (0.5 / (((_1839 * ((_1921 * _1948) + _1907)) + 9.9999999392252902907785028219223e-09) + (((_1839 * _1948) + _1907) * _1921))) * _1921;
    float _4064 = isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0));
    float _1960 = (isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0))) * (_1930 / ((_1934 * _1934) * 3.141590118408203125));
    float _1970 = (((((_1941 * _1861) + _581) * cbLight._m0[_1895].x) * _1960) * _1697) + (((((_1860 * _1861) + _581) * cbLight._m0[_1810].x) * _1884) * _1707);
    float _1971 = (((((_1941 * _1863) + _583) * cbLight._m0[_1895].y) * _1960) * _1697) + (((((_1860 * _1863) + _583) * cbLight._m0[_1810].y) * _1884) * _1707);
    float _1972 = (((((_1941 * _1864) + _584) * cbLight._m0[_1895].z) * _1960) * _1697) + (((((_1860 * _1864) + _584) * cbLight._m0[_1810].z) * _1884) * _1707);
    float _2034;
    float _2036;
    float _2038;
    if (_1747)
    {
        _2034 = _1970;
        _2036 = _1971;
        _2038 = _1972;
    }
    else
    {
        uint _2040 = _1674 + 2u;
        uint _2044 = _1674 + 10u;
        float _2058 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2040].w)) * _416) * 0.949999988079071044921875);
        float _2059 = _2058 * _2058;
        float _2060 = cbLight._m0[_2040].x + _495;
        float _2061 = cbLight._m0[_2040].y + _496;
        float _2062 = cbLight._m0[_2040].z + _497;
        float _2066 = inversesqrt(dot(vec3(_2060, _2061, _2062), vec3(_2060, _2061, _2062)));
        float _2067 = _2066 * _2060;
        float _2068 = _2066 * _2061;
        float _2069 = _2066 * _2062;
        float _2070 = dot(vec3(_413, _414, _415), vec3(cbLight._m0[_2040].xyz));
        float _4075 = isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0));
        float _2073 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
        float _2074 = dot(vec3(_413, _414, _415), vec3(_2067, _2068, _2069));
        float _4086 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
        float _2077 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
        float _2078 = dot(vec3(cbLight._m0[_2040].xyz), vec3(_2067, _2068, _2069));
        float _4097 = isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0));
        float _2082 = _2059 * _2059;
        float _2086 = ((_2077 * _2077) * (_2082 + (-1.0))) + 1.0;
        float _2093 = exp2(log2(1.0 - (isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0)))) * 5.0);
        float _2100 = 1.0 - _2059;
        float _2110 = (0.5 / (((_1839 * ((_2073 * _2100) + _2059)) + 9.9999999392252902907785028219223e-09) + (((_1839 * _2100) + _2059) * _2073))) * _2073;
        float _4108 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
        float _2112 = (isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0))) * (_2082 / ((_2086 * _2086) * 3.141590118408203125));
        float _2113 = isnan(1.0) ? _1689 : (isnan(_1689) ? 1.0 : min(_1689, 1.0));
        _2034 = (((((_2093 * _1861) + _581) * cbLight._m0[_2044].x) * _2112) * _2113) + _1970;
        _2036 = (((((_2093 * _1863) + _583) * cbLight._m0[_2044].y) * _2112) * _2113) + _1971;
        _2038 = (((((_2093 * _1864) + _584) * cbLight._m0[_2044].z) * _2112) * _2113) + _1972;
    }
    float _2148;
    float _2150;
    float _2152;
    if (_1765)
    {
        _2148 = _2034;
        _2150 = _2036;
        _2152 = _2038;
    }
    else
    {
        uint _2159 = _1674 + 3u;
        uint _2163 = _1674 + 11u;
        float _2177 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2159].w)) * _416) * 0.949999988079071044921875);
        float _2178 = _2177 * _2177;
        float _2179 = cbLight._m0[_2159].x + _495;
        float _2180 = cbLight._m0[_2159].y + _496;
        float _2181 = cbLight._m0[_2159].z + _497;
        float _2185 = inversesqrt(dot(vec3(_2179, _2180, _2181), vec3(_2179, _2180, _2181)));
        float _2186 = _2185 * _2179;
        float _2187 = _2185 * _2180;
        float _2188 = _2185 * _2181;
        float _2189 = dot(vec3(_413, _414, _415), vec3(cbLight._m0[_2159].xyz));
        float _4124 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
        float _2192 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
        float _2193 = dot(vec3(_413, _414, _415), vec3(_2186, _2187, _2188));
        float _4135 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
        float _2196 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
        float _2197 = dot(vec3(cbLight._m0[_2159].xyz), vec3(_2186, _2187, _2188));
        float _4146 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
        float _2201 = _2178 * _2178;
        float _2205 = ((_2196 * _2196) * (_2201 + (-1.0))) + 1.0;
        float _2212 = exp2(log2(1.0 - (isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0)))) * 5.0);
        float _2219 = 1.0 - _2178;
        float _2229 = (0.5 / (((_1839 * ((_2192 * _2219) + _2178)) + 9.9999999392252902907785028219223e-09) + (((_1839 * _2219) + _2178) * _2192))) * _2192;
        float _4157 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
        float _2231 = (isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0))) * (_2201 / ((_2205 * _2205) * 3.141590118408203125));
        float _2232 = isnan(1.0) ? _1690 : (isnan(_1690) ? 1.0 : min(_1690, 1.0));
        _2148 = (((((_2212 * _1861) + _581) * cbLight._m0[_2163].x) * _2231) * _2232) + _2034;
        _2150 = (((((_2212 * _1863) + _583) * cbLight._m0[_2163].y) * _2231) * _2232) + _2036;
        _2152 = (((((_2212 * _1864) + _584) * cbLight._m0[_2163].z) * _2231) * _2232) + _2038;
    }
    float _2366;
    float _2368;
    float _2370;
    float _2372;
    float _2374;
    float _2376;
    if (_1672.y == 0u)
    {
        float _2307 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2308 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2307;
        float _2309 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2307;
        float _2310 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2307;
        uvec4 _2322 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2323 = _2322.x;
        uint _2334 = uint((float(_2322.y) * floor(float(uint(cbSceneParam._m0[85u].y * _517) / _2323))) + floor(float(uint(cbSceneParam._m0[85u].x * _516) / _2323)));
        float _2344 = (log2(_2310 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2345 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
        uint _2348 = uint(isnan(14.0) ? _2345 : (isnan(_2345) ? 14.0 : min(_2345, 14.0)));
        uvec4 _2353 = texelFetch(g_lightClusterGridBuffer, int(((_2348 << 2u) + (_2334 << 6u)) >> 2u));
        uint _2354 = _2353.x;
        uint _2355 = _2322.z;
        float _2454;
        float _2456;
        float _2458;
        float _2460;
        float _2462;
        float _2464;
        if (((((1u << ((_2355 >> 4u) & 15u)) + 4294967295u) & _2354) == 0u) || ((_2355 & 240u) == 0u))
        {
            _2454 = 0.0;
            _2456 = 0.0;
            _2458 = 0.0;
            _2460 = 0.0;
            _2462 = 0.0;
            _2464 = 0.0;
        }
        else
        {
            float _2455;
            float _2457;
            float _2459;
            float _2461;
            float _2463;
            float _2465;
            float _2606 = 0.0;
            float _2607 = 0.0;
            float _2608 = 0.0;
            float _2609 = 0.0;
            float _2610 = 0.0;
            float _2611 = 0.0;
            uint _2612 = 0u;
            uint _2621;
            bool _2622;
            for (;;)
            {
                _2621 = texelFetch(g_lightClassification, int((((_2348 << 5u) + (_2334 << 9u)) + (_2612 << 2u)) >> 2u)).x;
                _2622 = _2621 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2622)
                {
                    frontier_phi_68_pred = _2608;
                    frontier_phi_68_pred_1 = _2611;
                    frontier_phi_68_pred_2 = _2610;
                    frontier_phi_68_pred_3 = _2609;
                    frontier_phi_68_pred_4 = _2607;
                    frontier_phi_68_pred_5 = _2606;
                }
                else
                {
                    float _2751;
                    float _2752;
                    float _2753;
                    float _2754;
                    float _2755;
                    float _2756;
                    uint _2757;
                    _2751 = _2606;
                    _2752 = _2607;
                    _2753 = _2608;
                    _2754 = _2609;
                    _2755 = _2610;
                    _2756 = _2611;
                    _2757 = _2621;
                    float _2678;
                    float _2679;
                    float _2680;
                    float _2681;
                    float _2682;
                    float _2683;
                    for (;;)
                    {
                        uint _2761 = uint(findLSB(_2757)) + (_2612 << 5u);
                        uint _2758 = (_2757 + 4294967295u) & _2757;
                        uint _2763 = _2761 * 48u;
                        vec4 _2777 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2763)).x, texelFetch(g_PointLightRenderingBuffer, int(_2763 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2763 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2763 + 3u)).x));
                        uint _2783 = (_2761 * 48u) + 4u;
                        vec4 _2796 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2783)).x, texelFetch(g_PointLightRenderingBuffer, int(_2783 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2783 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2783 + 3u)).x));
                        uint _2802 = (_2761 * 48u) + 8u;
                        vec3 _2813 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2802)).x, texelFetch(g_PointLightRenderingBuffer, int(_2802 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2802 + 2u)).x));
                        float _2817 = _2777.x - _2308;
                        float _2818 = _2777.y - _2309;
                        float _2819 = _2777.z - _2310;
                        float _2820 = dot(vec3(_2817, _2818, _2819), vec3(_2817, _2818, _2819));
                        float _2823 = inversesqrt(_2820);
                        float _2824 = _2823 * _2817;
                        float _2825 = _2823 * _2818;
                        float _2826 = _2823 * _2819;
                        float _2827 = dot(vec3(_537, _540, _543), vec3(_2824, _2825, _2826));
                        float _2832 = 1.0 - (_2820 * _2777.w);
                        float _4183 = isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : max(_2832, 0.0));
                        float _2833 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
                        float _2834 = sqrt(_2820) * _2796.w;
                        float _2837 = 1.39999997615814208984375 / (_2834 + 1.39999997615814208984375);
                        float _2838 = _2837 * _2837;
                        float _2841 = ((1.0 - _2838) * _2827) + _2838;
                        float _2844 = _2834 * _2834;
                        float _2848 = ((isnan(0.0) ? _2841 : (isnan(_2841) ? 0.0 : max(_2841, 0.0))) * _2833) / ((_2844 * 0.699999988079071044921875) + 1.0);
                        float _2852 = (-0.0) - _2308;
                        float _2853 = (-0.0) - _2309;
                        float _2854 = (-0.0) - _2310;
                        float _2858 = inversesqrt(dot(vec3(_2852, _2853, _2854), vec3(_2852, _2853, _2854)));
                        float _2859 = _2858 * _2852;
                        float _2860 = _2858 * _2853;
                        float _2861 = _2858 * _2854;
                        float _2869 = exp2(log2(1.0 / ((_2844 * 3.5) + 5.0)) * 0.25);
                        float _2870 = 1.0 - _612;
                        float _2877 = sqrt(1.0 - ((1.0 - (_2870 * _2870)) * (1.0 - (_2869 * _2869))));
                        float _2878 = _2877 * _2877;
                        float _2879 = _2878 * _2878;
                        float _2880 = _2859 + _2824;
                        float _2881 = _2860 + _2825;
                        float _2882 = _2861 + _2826;
                        float _2886 = inversesqrt(dot(vec3(_2880, _2881, _2882), vec3(_2880, _2881, _2882)));
                        float _2890 = dot(vec3(_537, _540, _543), vec3(_2859, _2860, _2861));
                        float _4199 = isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : max(_2890, 0.0));
                        float _2893 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
                        float _2894 = dot(vec3(_537, _540, _543), vec3(_2886 * _2880, _2886 * _2881, _2886 * _2882));
                        float _4210 = isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : max(_2894, 0.0));
                        float _2897 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
                        float _2901 = ((_2897 * _2897) * (_2879 + (-1.0))) + 1.0;
                        float _2902 = _2837 * _2878;
                        float _2903 = _2902 * _2902;
                        float _2906 = ((1.0 - _2903) * _2827) + _2903;
                        float _4221 = isnan(0.0) ? _2906 : (isnan(_2906) ? 0.0 : max(_2906, 0.0));
                        float _2907 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
                        float _2908 = 1.0 - _2878;
                        float _2918 = (0.5 / (((_2907 * ((_2893 * _2908) + _2878)) + 9.9999999392252902907785028219223e-09) + (((_2907 * _2908) + _2878) * _2893))) * _2907;
                        float _4232 = isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : max(_2918, 0.0));
                        float _2929 = (((_2879 * 3.1415927410125732421875) * (isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0)))) / ((_2901 * _2901) * ((_2844 * 2.1991131305694580078125) + 3.141590118408203125))) * _2833;
                        _2681 = (_2848 * _2796.x) + _2754;
                        _2682 = (_2848 * _2796.y) + _2755;
                        _2683 = (_2848 * _2796.z) + _2756;
                        _2678 = (_2929 * _2813.x) + _2751;
                        _2679 = (_2929 * _2813.y) + _2752;
                        _2680 = (_2929 * _2813.z) + _2753;
                        if (_2758 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2751 = _2678;
                            _2752 = _2679;
                            _2753 = _2680;
                            _2754 = _2681;
                            _2755 = _2682;
                            _2756 = _2683;
                            _2757 = _2758;
                        }
                    }
                    frontier_phi_68_pred = _2680;
                    frontier_phi_68_pred_1 = _2683;
                    frontier_phi_68_pred_2 = _2682;
                    frontier_phi_68_pred_3 = _2681;
                    frontier_phi_68_pred_4 = _2679;
                    frontier_phi_68_pred_5 = _2678;
                }
                _2459 = frontier_phi_68_pred;
                _2465 = frontier_phi_68_pred_1;
                _2463 = frontier_phi_68_pred_2;
                _2461 = frontier_phi_68_pred_3;
                _2457 = frontier_phi_68_pred_4;
                _2455 = frontier_phi_68_pred_5;
                uint _2613 = _2612 + 1u;
                if (_2613 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2606 = _2455;
                    _2607 = _2457;
                    _2608 = _2459;
                    _2609 = _2461;
                    _2610 = _2463;
                    _2611 = _2465;
                    _2612 = _2613;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2454 = _2455;
            _2456 = _2457;
            _2458 = _2459;
            _2460 = _2461;
            _2462 = _2463;
            _2464 = _2465;
        }
        uvec4 _2468 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2469 = _2468.z;
        uint _2471 = (_2469 >> 8u) & 15u;
        float _2574;
        float _2576;
        float _2578;
        float _2580;
        float _2582;
        float _2584;
        if (((4294967295u << _2471) & _2354) == 0u)
        {
            _2574 = _2454;
            _2576 = _2456;
            _2578 = _2458;
            _2580 = _2460;
            _2582 = _2462;
            _2584 = _2464;
        }
        else
        {
            float _2599 = inversesqrt(dot(vec3(_2308, _2309, _2310), vec3(_2308, _2309, _2310)));
            float _2600 = _2599 * _2308;
            float _2601 = _2599 * _2309;
            float _2602 = _2599 * _2310;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2471 < ((_2469 >> 12u) & 15u))
            {
                float _2575;
                float _2577;
                float _2579;
                float _2581;
                float _2583;
                float _2585;
                float _2734 = _2454;
                float _2735 = _2456;
                float _2736 = _2458;
                float _2737 = _2460;
                float _2738 = _2462;
                float _2739 = _2464;
                uint _2740 = _2471;
                uint _2749;
                bool _2750;
                for (;;)
                {
                    _2749 = texelFetch(g_lightClassification, int((((_2348 << 5u) + (_2334 << 9u)) + (_2740 << 2u)) >> 2u)).x;
                    _2750 = _2749 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2750)
                    {
                        frontier_phi_79_pred = _2739;
                        frontier_phi_79_pred_1 = _2738;
                        frontier_phi_79_pred_2 = _2737;
                        frontier_phi_79_pred_3 = _2736;
                        frontier_phi_79_pred_4 = _2735;
                        frontier_phi_79_pred_5 = _2734;
                    }
                    else
                    {
                        float _2943;
                        float _2944;
                        float _2945;
                        float _2946;
                        float _2947;
                        float _2948;
                        float _3239;
                        float _3240;
                        float _3241;
                        float _3242;
                        float _3243;
                        float _3244;
                        float _2956 = _2734;
                        float _2957 = _2735;
                        float _2958 = _2736;
                        float _2959 = _2737;
                        float _2960 = _2738;
                        float _2961 = _2739;
                        uint _2962 = _2749;
                        uint _2963;
                        vec4 _2988;
                        float _2989;
                        vec4 _3004;
                        vec3 _3016;
                        vec4 _3032;
                        vec4 _3048;
                        float _3095;
                        bool _3096;
                        for (;;)
                        {
                            uint _2973 = ((_2740 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2962));
                            _2963 = (_2962 + 4294967295u) & _2962;
                            uint _2975 = _2973 * 40u;
                            _2988 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2975)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 3u)).x));
                            _2989 = _2988.w;
                            uint _2991 = (_2973 * 40u) + 4u;
                            _3004 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2991)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 3u)).x));
                            uint _3006 = (_2973 * 40u) + 8u;
                            _3016 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3006)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3006 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3006 + 2u)).x));
                            uint _3019 = (_2973 * 40u) + 16u;
                            _3032 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3019)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3019 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3019 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3019 + 3u)).x));
                            uint _3035 = (_2973 * 40u) + 20u;
                            _3048 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3035)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3035 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3035 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3035 + 3u)).x));
                            uint _3051 = (_2973 * 40u) + 24u;
                            vec4 _3064 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3051)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3051 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3051 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3051 + 3u)).x));
                            uint _3070 = (_2973 * 40u) + 28u;
                            vec4 _3083 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3070)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3070 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3070 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3070 + 3u)).x));
                            _3095 = fma(_2310, _3083.z, fma(_2309, _3083.y, _3083.x * _2308)) + _3083.w;
                            _3096 = !((fma(_2310, _3064.z, fma(_2309, _3064.y, _3064.x * _2308)) + _3064.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3096)
                            {
                                float _3123 = _2988.x - _2308;
                                float _3124 = _2988.y - _2309;
                                float _3125 = _2988.z - _2310;
                                float _3126 = dot(vec3(_3123, _3124, _3125), vec3(_3123, _3124, _3125));
                                float _3129 = inversesqrt(_3126);
                                float _3130 = _3129 * _3123;
                                float _3131 = _3129 * _3124;
                                float _3132 = _3129 * _3125;
                                float _3136 = 1.0 - (_3126 / (_2989 * _2989));
                                float _4243 = isnan(0.0) ? _3136 : (isnan(_3136) ? 0.0 : max(_3136, 0.0));
                                float _3137 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
                                float _3141 = sqrt(_3126) * _3004.w;
                                float _3143 = 1.39999997615814208984375 / (_3141 + 1.39999997615814208984375);
                                float _3144 = _3143 * _3143;
                                float _3147 = ((1.0 - _3144) * dot(vec3(_3130, _3131, _3132), vec3(_537, _540, _543))) + _3144;
                                float _3150 = _3141 * _3141;
                                float _3154 = (fma(_2310, _3032.z, fma(_2309, _3032.y, _3032.x * _2308)) + _3032.w) / _3095;
                                float _3155 = (fma(_2310, _3048.z, fma(_2309, _3048.y, _3048.x * _2308)) + _3048.w) / _3095;
                                float _3159 = 1.0 - dot(vec2(_3154, _3155), vec2(_3154, _3155));
                                float _4259 = isnan(0.0) ? _3159 : (isnan(_3159) ? 0.0 : max(_3159, 0.0));
                                float _3160 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
                                float _3161 = _3160 * (((isnan(0.0) ? _3147 : (isnan(_3147) ? 0.0 : max(_3147, 0.0))) * _3137) / ((_3150 * 0.699999988079071044921875) + 1.0));
                                float _3173 = exp2(log2(1.0 / ((_3150 * 3.5) + 5.0)) * 0.25);
                                float _3174 = 1.0 - _612;
                                float _3181 = sqrt(1.0 - ((1.0 - (_3174 * _3174)) * (1.0 - (_3173 * _3173))));
                                float _3182 = _3181 * _3181;
                                float _3183 = _3182 * _3182;
                                float _3184 = _3130 - _2600;
                                float _3185 = _3131 - _2601;
                                float _3186 = _3132 - _2602;
                                float _3190 = inversesqrt(dot(vec3(_3184, _3185, _3186), vec3(_3184, _3185, _3186)));
                                float _3194 = dot(vec3(_537, _540, _543), vec3((-0.0) - _2600, (-0.0) - _2601, (-0.0) - _2602));
                                float _4270 = isnan(0.0) ? _3194 : (isnan(_3194) ? 0.0 : max(_3194, 0.0));
                                float _3197 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
                                float _3198 = dot(vec3(_537, _540, _543), vec3(_3190 * _3184, _3190 * _3185, _3190 * _3186));
                                float _4281 = isnan(0.0) ? _3198 : (isnan(_3198) ? 0.0 : max(_3198, 0.0));
                                float _3201 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
                                float _3205 = ((_3201 * _3201) * (_3183 + (-1.0))) + 1.0;
                                float _3206 = _3143 * _3182;
                                float _3207 = _3206 * _3206;
                                float _3213 = ((1.0 - _3207) * dot(vec3(_537, _540, _543), vec3(_3130, _3131, _3132))) + _3207;
                                float _4292 = isnan(0.0) ? _3213 : (isnan(_3213) ? 0.0 : max(_3213, 0.0));
                                float _3214 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
                                float _3215 = 1.0 - _3182;
                                float _3225 = (0.5 / (((_3214 * ((_3197 * _3215) + _3182)) + 9.9999999392252902907785028219223e-09) + (((_3214 * _3215) + _3182) * _3197))) * _3214;
                                float _4303 = isnan(0.0) ? _3225 : (isnan(_3225) ? 0.0 : max(_3225, 0.0));
                                float _3235 = (_3160 * _3137) * (((_3183 * 3.1415927410125732421875) * (isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0)))) / ((_3205 * _3205) * ((_3150 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3161 * _3004.z;
                                frontier_phi_85_pred_1 = _3161 * _3004.y;
                                frontier_phi_85_pred_2 = _3161 * _3004.x;
                                frontier_phi_85_pred_3 = _3235 * _3016.z;
                                frontier_phi_85_pred_4 = _3235 * _3016.y;
                                frontier_phi_85_pred_5 = _3235 * _3016.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3244 = frontier_phi_85_pred;
                            _3243 = frontier_phi_85_pred_1;
                            _3242 = frontier_phi_85_pred_2;
                            _3241 = frontier_phi_85_pred_3;
                            _3240 = frontier_phi_85_pred_4;
                            _3239 = frontier_phi_85_pred_5;
                            _2946 = _3242 + _2959;
                            _2947 = _3243 + _2960;
                            _2948 = _3244 + _2961;
                            _2943 = _3239 + _2956;
                            _2944 = _3240 + _2957;
                            _2945 = _3241 + _2958;
                            if (_2963 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2956 = _2943;
                                _2957 = _2944;
                                _2958 = _2945;
                                _2959 = _2946;
                                _2960 = _2947;
                                _2961 = _2948;
                                _2962 = _2963;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2948;
                        frontier_phi_79_pred_1 = _2947;
                        frontier_phi_79_pred_2 = _2946;
                        frontier_phi_79_pred_3 = _2945;
                        frontier_phi_79_pred_4 = _2944;
                        frontier_phi_79_pred_5 = _2943;
                    }
                    _2585 = frontier_phi_79_pred;
                    _2583 = frontier_phi_79_pred_1;
                    _2581 = frontier_phi_79_pred_2;
                    _2579 = frontier_phi_79_pred_3;
                    _2577 = frontier_phi_79_pred_4;
                    _2575 = frontier_phi_79_pred_5;
                    uint _2741 = _2740 + 1u;
                    if (_2741 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2734 = _2575;
                        _2735 = _2577;
                        _2736 = _2579;
                        _2737 = _2581;
                        _2738 = _2583;
                        _2739 = _2585;
                        _2740 = _2741;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2581;
                frontier_phi_60_61_ladder_1 = _2585;
                frontier_phi_60_61_ladder_2 = _2583;
                frontier_phi_60_61_ladder_3 = _2579;
                frontier_phi_60_61_ladder_4 = _2577;
                frontier_phi_60_61_ladder_5 = _2575;
            }
            else
            {
                frontier_phi_60_61_ladder = _2460;
                frontier_phi_60_61_ladder_1 = _2464;
                frontier_phi_60_61_ladder_2 = _2462;
                frontier_phi_60_61_ladder_3 = _2458;
                frontier_phi_60_61_ladder_4 = _2456;
                frontier_phi_60_61_ladder_5 = _2454;
            }
            _2574 = frontier_phi_60_61_ladder_5;
            _2576 = frontier_phi_60_61_ladder_4;
            _2578 = frontier_phi_60_61_ladder_3;
            _2580 = frontier_phi_60_61_ladder;
            _2582 = frontier_phi_60_61_ladder_2;
            _2584 = frontier_phi_60_61_ladder_1;
        }
        float _2589 = isnan(1.0) ? _596 : (isnan(_596) ? 1.0 : min(_596, 1.0));
        _2366 = (_2589 * _2580) + _1803;
        _2368 = (_2589 * _2582) + _1805;
        _2370 = (_2589 * _2584) + _1807;
        _2372 = ((_2574 * _581) * _2589) + _2148;
        _2374 = ((_2576 * _583) * _2589) + _2150;
        _2376 = ((_2578 * _584) * _2589) + _2152;
    }
    else
    {
        _2366 = _1803;
        _2368 = _1805;
        _2370 = _1807;
        _2372 = _2148;
        _2374 = _2150;
        _2376 = _2152;
    }
    float _4319 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _4330 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _4341 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _2393 = ((isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0))) * (_2366 + ((isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0))) * _596))) + ((_2372 + ((isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0))) * _1438)) * cbPerFrame._m0[3u].x);
    float _2394 = ((isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0))) * (_2368 + ((isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0))) * _596))) + ((_2374 + ((isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0))) * _1438)) * cbPerFrame._m0[3u].x);
    float _2395 = ((isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0))) * (_2370 + ((isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0))) * _596))) + ((_2376 + ((isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0))) * _1438)) * cbPerFrame._m0[3u].x);
    uint _2396 = _556 + 6u;
    float _2404 = _516 / cbSceneParam._m0[86u].x;
    float _2405 = _517 / cbSceneParam._m0[86u].y;
    vec4 _2419 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2404, _2405, (log2((isnan(cbSceneParam._m0[77u].w) ? _436 : (isnan(_436) ? cbSceneParam._m0[77u].w : min(_436, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2421 = _2419.x;
    float _2422 = _2419.y;
    float _2423 = _2419.z;
    float _2424 = _2419.w;
    float _2516;
    float _2518;
    float _2520;
    float _2522;
    if (_436 > cbSceneParam._m0[78u].w)
    {
        float _2479 = isnan(_436) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _436 : min(cbSceneParam._m0[80u].w, _436));
        float _2480 = _2479 / _436;
        float _2491 = _2480 * _488;
        float _2492 = _489 * _2480;
        float _2493 = (-0.0) - _2492;
        float _2494 = _2480 * _490;
        float _2496 = (cbSceneParam._m0[77u].w * _2493) / _2479;
        float _2497 = _2496 + cbSceneParam._m0[79u].w;
        float _2498 = cbSceneParam._m0[79u].w - _2492;
        float _2504 = sqrt(((_2491 * _2491) + (_2492 * _2492)) + (_2494 * _2494));
        float _2507 = (1.0 - (cbSceneParam._m0[77u].w / _2479)) * _2504;
        float _2512 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2514 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2691;
        if (abs((_2493 - _2496) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2691 = ((((_2497 > 0.0) ? exp2(_2512 * _2497) : (2.0 - exp2(_2514 * _2497))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2507;
        }
        else
        {
            float _2635 = 1.0 / cbSceneParam._m0[80u].x;
            float _2636 = isnan(_2498) ? _2497 : (isnan(_2497) ? _2498 : max(_2497, _2498));
            float _2637 = isnan(_2498) ? _2497 : (isnan(_2497) ? _2498 : min(_2497, _2498));
            float _2646 = isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : min(_2636, 0.0));
            float _2647 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : min(_2637, 0.0));
            _2691 = ((abs(_2504 / _2493) * cbSceneParam._m0[80u].y) * ((((_2646 - _2647) * 2.0) - ((exp2(_2512 * (isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : max(_2636, 0.0)))) - exp2(_2512 * (isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0))))) * _2635)) - ((exp2(_2514 * _2646) - exp2(_2514 * _2647)) * _2635))) + (_2507 * cbSceneParam._m0[80u].z);
        }
        vec4 _2693 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2404, _2405, 1.0), 0.0);
        float _2702 = exp2((_2691 * (-1.44269502162933349609375)) * (1.0 - _2693.w));
        float _2703 = log2(_2702);
        float _2719 = log2(_2424);
        _2516 = (exp2(_2719 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2703 * cbSceneParam._m0[78u].x)) * _2693.x) / cbSceneParam._m0[78u].x)) + _2421;
        _2518 = (exp2(_2719 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2703 * cbSceneParam._m0[78u].y)) * _2693.y) / cbSceneParam._m0[78u].y)) + _2422;
        _2520 = (exp2(_2719 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2703 * cbSceneParam._m0[78u].z)) * _2693.z) / cbSceneParam._m0[78u].z)) + _2423;
        _2522 = _2702 * _2424;
    }
    else
    {
        _2516 = _2421;
        _2518 = _2422;
        _2520 = _2423;
        _2522 = _2424;
    }
    bool _2729;
    vec4 _2532;
    vec4 _2554;
    float _2556;
    float _2560;
    float _2561;
    float _2562;
    float _2563;
    bool _2573;
    for (;;)
    {
        _2532 = cbMatDynParam._m0[0u];
        float _2534 = roundEven(_2532.y);
        bool _2535 = _2534 == 3.0;
        float _2536 = log2(_2522);
        float _2543 = exp2(_2536 * cbSceneParam._m0[78u].x) * _2393;
        float _2544 = exp2(_2536 * cbSceneParam._m0[78u].y) * _2394;
        float _2545 = exp2(_2536 * cbSceneParam._m0[78u].z) * _2395;
        float _2552 = _504 + (-0.5);
        _2554 = cbMtdParam._m0[1u];
        _2556 = _2554.y * _2552;
        float _2559 = (_2534 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2560 = _2559 * (_2535 ? _2543 : (_2543 + (cbSceneParam._m0[72u].w * _2516)));
        _2561 = _2559 * (_2535 ? _2544 : (_2544 + (cbSceneParam._m0[72u].w * _2518)));
        _2562 = _2559 * (_2535 ? _2545 : (_2545 + (cbSceneParam._m0[72u].w * _2520)));
        _2563 = _2552 * 0.999000012874603271484375;
        _2573 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2573)
        {
            if ((cbInstanceData._m0[_556 + 7u].x + _2563) < 0.5)
            {
                _2729 = true;
                break;
            }
        }
        uint _2670 = _557 + uint(_2532.w);
        if ((cbInstanceData._m0[_2670].w < 1.0) && ((cbInstanceData._m0[_2670].w + _2563) < 0.5))
        {
            _2729 = true;
            break;
        }
        if ((_2556 + _250) < _2554.x)
        {
            _2729 = true;
            break;
        }
        _2729 = false;
        break;
    }
    float _2934;
    if (_2729)
    {
        discard_state = true;
        _2934 = 0.0;
    }
    else
    {
        _2934 = cbInstanceData._m0[_2396].w;
    }
    SV_Target.x = _2560;
    SV_Target.y = _2561;
    SV_Target.z = _2562;
    SV_Target.w = _2934;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2396].w;
    discard_exit();
}


