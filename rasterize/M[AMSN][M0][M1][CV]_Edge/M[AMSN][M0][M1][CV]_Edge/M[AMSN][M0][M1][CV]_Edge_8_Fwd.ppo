#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _954;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _190 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _191 = _190 * _182;
    float _192 = _190 * _183;
    float _193 = _190 * _184;
    float _197 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _198 = _197 * NORMAL.x;
    float _199 = _197 * NORMAL.y;
    float _200 = _197 * NORMAL.z;
    float _204 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _205 = _204 * TANGENT.x;
    float _206 = _204 * TANGENT.y;
    float _207 = _204 * TANGENT.z;
    float _212;
    float _213;
    float _214;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _212 = (-0.0) - _198;
        _213 = (-0.0) - _199;
        _214 = (-0.0) - _200;
    }
    else
    {
        _212 = _198;
        _213 = _199;
        _214 = _200;
    }
    vec4 _240 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _246 = _240.x * cbMtdParam._m0[9u].x;
    float _247 = _240.y * cbMtdParam._m0[9u].y;
    float _248 = _240.z * cbMtdParam._m0[9u].z;
    vec4 _266 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _270 = _266.z;
    float _274 = (_266.x * 2.0) + (-1.0);
    float _276 = (_266.y * 2.0) + (-1.0);
    float _277 = dot(vec2(_274, _276), vec2(_274, _276));
    float _3288 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    float _283 = sqrt(1.0 - (isnan(1.0) ? _3288 : (isnan(_3288) ? 1.0 : min(_3288, 1.0))));
    float _286 = fma(_283, _212, fma(_276, _205, _274 * _191));
    float _289 = fma(_283, _213, fma(_276, _206, _274 * _192));
    float _292 = fma(_283, _214, fma(_276, _207, _274 * _193));
    float _296 = inversesqrt(dot(vec3(_286, _289, _292), vec3(_286, _289, _292)));
    float _325 = (cbMtdParam._m0[12u].x + dot(vec4(_296 * _286, _296 * _289, _296 * _292, 0.0), vec4(cbMtdParam._m0[13u].xyz, 0.0))) - (texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w)).x * cbMtdParam._m0[12u].y);
    float _3299 = isnan(0.0) ? _325 : (isnan(_325) ? 0.0 : max(_325, 0.0));
    float _326 = isnan(1.0) ? _3299 : (isnan(_3299) ? 1.0 : min(_3299, 1.0));
    float _333 = (_326 * (cbMtdParam._m0[10u].x - _246)) + _246;
    float _334 = (_326 * (cbMtdParam._m0[10u].y - _247)) + _247;
    float _335 = (_326 * (cbMtdParam._m0[10u].z - _248)) + _248;
    vec4 _347 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _349 = _347.x;
    float _351 = _349 - (_349 * _326);
    vec4 _363 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _370 = (_363.x * 2.0) + (-1.0);
    float _371 = (_363.y * 2.0) + (-1.0);
    float _372 = dot(vec2(_370, _371), vec2(_370, _371));
    float _3310 = isnan(0.0) ? _372 : (isnan(_372) ? 0.0 : max(_372, 0.0));
    float _380 = ((_363.z - _270) * _326) + _270;
    float _392 = (((_370 - _274) + (cbMtdParam._m0[12u].w * _274)) * _326) + _274;
    float _393 = (((_371 - _276) + (cbMtdParam._m0[12u].w * _276)) * _326) + _276;
    float _394 = ((sqrt(1.0 - (isnan(1.0) ? _3310 : (isnan(_3310) ? 1.0 : min(_3310, 1.0)))) - _283) * _326) + _283;
    float _397 = fma(_394, _212, fma(_393, _205, _392 * _191));
    float _400 = fma(_394, _213, fma(_393, _206, _392 * _192));
    float _403 = fma(_394, _214, fma(_393, _207, _392 * _193));
    float _407 = inversesqrt(dot(vec3(_397, _400, _403), vec3(_397, _400, _403)));
    float _408 = _407 * _397;
    float _409 = _407 * _400;
    float _410 = _407 * _403;
    float _3321 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _411 = isnan(1.0) ? _3321 : (isnan(_3321) ? 1.0 : min(_3321, 1.0));
    float _3332 = isnan(0.0) ? _333 : (isnan(_333) ? 0.0 : max(_333, 0.0));
    float _3343 = isnan(0.0) ? _334 : (isnan(_334) ? 0.0 : max(_334, 0.0));
    float _3354 = isnan(0.0) ? _335 : (isnan(_335) ? 0.0 : max(_335, 0.0));
    float _3365 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    float _415 = isnan(1.0) ? _3365 : (isnan(_3365) ? 1.0 : min(_3365, 1.0));
    float _431 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _473 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _483 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _473);
    float _484 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _473);
    float _485 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _473);
    float _489 = inversesqrt(dot(vec3(_483, _484, _485), vec3(_483, _484, _485)));
    float _490 = _483 * _489;
    float _491 = _484 * _489;
    float _492 = _485 * _489;
    float _498 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _499 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _520 = fma(_410, cbSceneParam._m0[5u].z, fma(_409, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _408));
    float _523 = fma(_410, cbSceneParam._m0[6u].z, fma(_409, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _408));
    float _526 = fma(_410, cbSceneParam._m0[7u].z, fma(_409, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _408));
    uint _539 = uint(roundEven(NORMAL.w)) * 13u;
    uint _541 = (_539 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _547 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3332 : (isnan(_3332) ? 1.0 : min(_3332, 1.0)))) * cbInstanceData._m0[_541].x;
    float _548 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3343 : (isnan(_3343) ? 1.0 : min(_3343, 1.0)))) * cbInstanceData._m0[_541].y;
    float _549 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3354 : (isnan(_3354) ? 1.0 : min(_3354, 1.0)))) * cbInstanceData._m0[_541].z;
    float _3376 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _550 = isnan(1.0) ? _3376 : (isnan(_3376) ? 1.0 : min(_3376, 1.0));
    float _3387 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _551 = isnan(1.0) ? _3387 : (isnan(_3387) ? 1.0 : min(_3387, 1.0));
    float _3398 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _552 = isnan(1.0) ? _3398 : (isnan(_3398) ? 1.0 : min(_3398, 1.0));
    float _553 = 1.0 - _415;
    float _554 = _550 * _553;
    float _555 = _551 * _553;
    float _556 = _552 * _553;
    float _561 = (_550 + (-0.039999999105930328369140625)) * _415;
    float _562 = (_551 + (-0.039999999105930328369140625)) * _415;
    float _563 = (_552 + (-0.039999999105930328369140625)) * _415;
    float _564 = _561 + 0.039999999105930328369140625;
    float _566 = _562 + 0.039999999105930328369140625;
    float _567 = _563 + 0.039999999105930328369140625;
    vec4 _576 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _498, cbSceneParam._m0[86u].y * _499));
    float _579 = _576.x * TEXCOORD_3.w;
    float _580 = dot(vec3(_408, _409, _410), vec3(_490, _491, _492));
    float _583 = _580 * 2.0;
    float _587 = (_583 * _408) - _490;
    float _588 = (_583 * _409) - _491;
    float _589 = (_583 * _410) - _492;
    float _593 = abs(dot(vec3(_490, _491, _492), vec3(_408, _409, _410)));
    float _3409 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _595 = sqrt(_411);
    float _608 = exp2((_595 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_595 * 3.0));
    float _614 = (1.0 - _608) * ((_595 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _615 = _608 * _595;
    float _643 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _647 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _651 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _953;
    float _955;
    float _956;
    float _957;
    float _958;
    float _959;
    float _960;
    float _961;
    float _962;
    float _963;
    float _964;
    float _965;
    float _966;
    float _967;
    float _968;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _678 = fma(_651, cbModelParam._m0[26u].z, fma(_647, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _643));
        float _682 = fma(_651, cbModelParam._m0[27u].z, fma(_647, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _643));
        float _686 = fma(_651, cbModelParam._m0[28u].z, fma(_647, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _643));
        float _711 = _643 + _408;
        float _712 = _647 + _409;
        float _713 = _651 + _410;
        float _723 = fma(_713, cbModelParam._m0[26u].z, fma(_712, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _711)) - _678;
        float _724 = fma(_713, cbModelParam._m0[27u].z, fma(_712, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _711)) - _682;
        float _725 = fma(_713, cbModelParam._m0[28u].z, fma(_712, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _711)) - _686;
        float _729 = inversesqrt(dot(vec3(_723, _724, _725), vec3(_723, _724, _725)));
        float _742 = ((_729 * _723) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_678 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _743 = ((_729 * _724) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_682 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _744 = ((_729 * _725) / cbModelParam._m0[34u].z) + ((((((_686 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _747 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_742, _743, _744), 0.0);
        vec4 _754 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_742, _743, _744), 0.0);
        vec4 _761 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_742, _743, _744), 0.0);
        vec4 _768 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_742, _743, _744), 0.0);
        float _781 = exp2((_747.w + (-0.5)) * 20.0) * 2.0;
        float _782 = _781 * (_747.x + (-0.5));
        float _783 = _781 * (_747.y + (-0.5));
        float _784 = _781 * (_747.z + (-0.5));
        float _791 = exp2((_754.w + (-0.5)) * 20.0) * 2.0;
        float _792 = _791 * (_754.x + (-0.5));
        float _793 = _791 * (_754.y + (-0.5));
        float _794 = _791 * (_754.z + (-0.5));
        float _801 = exp2((_761.w + (-0.5)) * 20.0) * 2.0;
        float _802 = _801 * (_761.x + (-0.5));
        float _803 = _801 * (_761.y + (-0.5));
        float _804 = _801 * (_761.z + (-0.5));
        float _811 = exp2((_768.w + (-0.5)) * 20.0) * 2.0;
        float _812 = _811 * (_768.x + (-0.5));
        float _813 = _811 * (_768.y + (-0.5));
        float _814 = _811 * (_768.z + (-0.5));
        float _815 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
        float _816 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
        float _817 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
        float _818 = _782 * 0.5;
        float _819 = _792 * 0.5;
        float _820 = _802 * 0.5;
        float _821 = dot(vec3(_818, _819, _820), vec3(_818, _819, _820));
        float _826 = (_821 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_821);
        float _835 = (dot(vec3(_408, _409, _410), vec3(_826 * _818, _826 * _819, _826 * _820)) + 1.0) * 0.5;
        float _3435 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
        float _845 = sqrt(((_819 * _819) + (_818 * _818)) + (_820 * _820)) / (_815 + 9.9999997473787516355514526367188e-06);
        float _3446 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
        float _846 = isnan(1.0) ? _3446 : (isnan(_3446) ? 1.0 : min(_3446, 1.0));
        float _847 = _846 * 2.0;
        float _851 = (1.0 - _846) / (_846 + 1.0);
        float _3457 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
        float _852 = isnan(1.0) ? _3457 : (isnan(_3457) ? 1.0 : min(_3457, 1.0));
        float _861 = ((((1.0 - _852) * (_847 + 2.0)) * exp2(log2(isnan(1.0) ? _3435 : (isnan(_3435) ? 1.0 : min(_3435, 1.0))) * (_847 + 1.0))) + _852) * _815;
        float _862 = _783 * 0.5;
        float _863 = _793 * 0.5;
        float _864 = _803 * 0.5;
        float _865 = dot(vec3(_862, _863, _864), vec3(_862, _863, _864));
        float _870 = (_865 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_865);
        float _878 = (dot(vec3(_408, _409, _410), vec3(_870 * _862, _870 * _863, _870 * _864)) + 1.0) * 0.5;
        float _3468 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
        float _887 = sqrt(((_863 * _863) + (_862 * _862)) + (_864 * _864)) / (_816 + 9.9999997473787516355514526367188e-06);
        float _3479 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
        float _888 = isnan(1.0) ? _3479 : (isnan(_3479) ? 1.0 : min(_3479, 1.0));
        float _889 = _888 * 2.0;
        float _893 = (1.0 - _888) / (_888 + 1.0);
        float _3490 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
        float _894 = isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0));
        float _903 = ((((1.0 - _894) * (_889 + 2.0)) * exp2(log2(isnan(1.0) ? _3468 : (isnan(_3468) ? 1.0 : min(_3468, 1.0))) * (_889 + 1.0))) + _894) * _816;
        float _904 = _784 * 0.5;
        float _905 = _794 * 0.5;
        float _906 = _804 * 0.5;
        float _907 = dot(vec3(_904, _905, _906), vec3(_904, _905, _906));
        float _912 = (_907 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_907);
        float _920 = (dot(vec3(_408, _409, _410), vec3(_912 * _904, _912 * _905, _912 * _906)) + 1.0) * 0.5;
        float _3501 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
        float _929 = sqrt(((_905 * _905) + (_904 * _904)) + (_906 * _906)) / (_817 + 9.9999997473787516355514526367188e-06);
        float _3512 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
        float _930 = isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0));
        float _931 = _930 * 2.0;
        float _935 = (1.0 - _930) / (_930 + 1.0);
        float _3523 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
        float _936 = isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0));
        float _945 = ((((1.0 - _936) * (_931 + 2.0)) * exp2(log2(isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0))) * (_931 + 1.0))) + _936) * _817;
        _953 = _784;
        _955 = _783;
        _956 = _782;
        _957 = _794;
        _958 = _793;
        _959 = _792;
        _960 = _804;
        _961 = _803;
        _962 = _802;
        _963 = _817;
        _964 = _816;
        _965 = _815;
        _966 = cbModelParam._m0[36u].z * (isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0)));
        _967 = cbModelParam._m0[36u].z * (isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0)));
        _968 = cbModelParam._m0[36u].z * (isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0)));
    }
    else
    {
        _953 = _954;
        _955 = _954;
        _956 = _954;
        _957 = _954;
        _958 = _954;
        _959 = _954;
        _960 = _954;
        _961 = _954;
        _962 = _954;
        _963 = _954;
        _964 = _954;
        _965 = _954;
        _966 = 0.0;
        _967 = 0.0;
        _968 = 0.0;
    }
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _994 = fma(_651, cbModelParam._m0[30u].z, fma(_647, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _643));
        float _998 = fma(_651, cbModelParam._m0[31u].z, fma(_647, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _643));
        float _1002 = fma(_651, cbModelParam._m0[32u].z, fma(_647, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _643));
        float _1025 = _643 + _408;
        float _1026 = _647 + _409;
        float _1027 = _651 + _410;
        float _1037 = fma(_1027, cbModelParam._m0[30u].z, fma(_1026, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1025)) - _994;
        float _1038 = fma(_1027, cbModelParam._m0[31u].z, fma(_1026, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1025)) - _998;
        float _1039 = fma(_1027, cbModelParam._m0[32u].z, fma(_1026, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1025)) - _1002;
        float _1043 = inversesqrt(dot(vec3(_1037, _1038, _1039), vec3(_1037, _1038, _1039)));
        float _1056 = ((_1043 * _1037) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_994 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1057 = ((_1043 * _1038) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_998 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1058 = ((_1043 * _1039) / cbModelParam._m0[35u].z) + ((((((_1002 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1060 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1056, _1057, _1058), 0.0);
        vec4 _1067 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1056, _1057, _1058), 0.0);
        vec4 _1074 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1056, _1057, _1058), 0.0);
        vec4 _1081 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1056, _1057, _1058), 0.0);
        float _1093 = exp2((_1060.w + (-0.5)) * 20.0) * 2.0;
        float _1094 = _1093 * (_1060.x + (-0.5));
        float _1095 = _1093 * (_1060.y + (-0.5));
        float _1096 = _1093 * (_1060.z + (-0.5));
        float _1103 = exp2((_1067.w + (-0.5)) * 20.0) * 2.0;
        float _1104 = _1103 * (_1067.x + (-0.5));
        float _1105 = _1103 * (_1067.y + (-0.5));
        float _1106 = _1103 * (_1067.z + (-0.5));
        float _1113 = exp2((_1074.w + (-0.5)) * 20.0) * 2.0;
        float _1114 = _1113 * (_1074.x + (-0.5));
        float _1115 = _1113 * (_1074.y + (-0.5));
        float _1116 = _1113 * (_1074.z + (-0.5));
        float _1123 = exp2((_1081.w + (-0.5)) * 20.0) * 2.0;
        float _1124 = _1123 * (_1081.x + (-0.5));
        float _1125 = _1123 * (_1081.y + (-0.5));
        float _1126 = _1123 * (_1081.z + (-0.5));
        float _1127 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1128 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1129 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1130 = _1094 * 0.5;
        float _1131 = _1104 * 0.5;
        float _1132 = _1114 * 0.5;
        float _1133 = dot(vec3(_1130, _1131, _1132), vec3(_1130, _1131, _1132));
        float _1138 = (_1133 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1133);
        float _1146 = (dot(vec3(_408, _409, _410), vec3(_1138 * _1130, _1138 * _1131, _1138 * _1132)) + 1.0) * 0.5;
        float _3564 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1155 = sqrt(((_1131 * _1131) + (_1130 * _1130)) + (_1132 * _1132)) / (_1127 + 9.9999997473787516355514526367188e-06);
        float _3575 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1156 = isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0));
        float _1157 = _1156 * 2.0;
        float _1161 = (1.0 - _1156) / (_1156 + 1.0);
        float _3586 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1162 = isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0));
        float _1171 = ((((1.0 - _1162) * (_1157 + 2.0)) * exp2(log2(isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0))) * (_1157 + 1.0))) + _1162) * _1127;
        float _1172 = _1095 * 0.5;
        float _1173 = _1105 * 0.5;
        float _1174 = _1115 * 0.5;
        float _1175 = dot(vec3(_1172, _1173, _1174), vec3(_1172, _1173, _1174));
        float _1180 = (_1175 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1175);
        float _1188 = (dot(vec3(_408, _409, _410), vec3(_1180 * _1172, _1180 * _1173, _1180 * _1174)) + 1.0) * 0.5;
        float _3597 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1197 = sqrt(((_1173 * _1173) + (_1172 * _1172)) + (_1174 * _1174)) / (_1128 + 9.9999997473787516355514526367188e-06);
        float _3608 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1198 = isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0));
        float _1199 = _1198 * 2.0;
        float _1203 = (1.0 - _1198) / (_1198 + 1.0);
        float _3619 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1204 = isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0));
        float _1213 = ((((1.0 - _1204) * (_1199 + 2.0)) * exp2(log2(isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0))) * (_1199 + 1.0))) + _1204) * _1128;
        float _1214 = _1096 * 0.5;
        float _1215 = _1106 * 0.5;
        float _1216 = _1116 * 0.5;
        float _1217 = dot(vec3(_1214, _1215, _1216), vec3(_1214, _1215, _1216));
        float _1222 = (_1217 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1217);
        float _1230 = (dot(vec3(_408, _409, _410), vec3(_1222 * _1214, _1222 * _1215, _1222 * _1216)) + 1.0) * 0.5;
        float _3630 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1239 = sqrt(((_1215 * _1215) + (_1214 * _1214)) + (_1216 * _1216)) / (_1129 + 9.9999997473787516355514526367188e-06);
        float _3641 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1240 = isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0));
        float _1241 = _1240 * 2.0;
        float _1245 = (1.0 - _1240) / (_1240 + 1.0);
        float _3652 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1246 = isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0));
        float _1255 = ((((1.0 - _1246) * (_1241 + 2.0)) * exp2(log2(isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0))) * (_1241 + 1.0))) + _1246) * _1129;
        _1263 = _1096;
        _1264 = _1095;
        _1265 = _1094;
        _1266 = _1106;
        _1267 = _1105;
        _1268 = _1104;
        _1269 = _1116;
        _1270 = _1115;
        _1271 = _1114;
        _1272 = _1129;
        _1273 = _1128;
        _1274 = _1127;
        _1275 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0)));
        _1276 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0)));
        _1277 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0)));
    }
    else
    {
        _1263 = _954;
        _1264 = _954;
        _1265 = _954;
        _1266 = _954;
        _1267 = _954;
        _1268 = _954;
        _1269 = _954;
        _1270 = _954;
        _1271 = _954;
        _1272 = _954;
        _1273 = _954;
        _1274 = _954;
        _1275 = 0.0;
        _1276 = 0.0;
        _1277 = 0.0;
    }
    float _1287 = (cbModelParam._m0[1u].x * (_1275 - _966)) + _966;
    float _1288 = (cbModelParam._m0[1u].x * (_1276 - _967)) + _967;
    float _1289 = (cbModelParam._m0[1u].x * (_1277 - _968)) + _968;
    float _1310 = fma(_1289, cbSceneParam._m0[89u].z, fma(_1288, cbSceneParam._m0[89u].y, _1287 * cbSceneParam._m0[89u].x));
    float _1313 = fma(_1289, cbSceneParam._m0[90u].z, fma(_1288, cbSceneParam._m0[90u].y, _1287 * cbSceneParam._m0[90u].x));
    float _1316 = fma(_1289, cbSceneParam._m0[91u].z, fma(_1288, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1287));
    float _1331 = _587 * 0.5;
    float _1332 = _588 * 0.5;
    float _1333 = _589 * 0.5;
    float _1334 = dot(vec4(_1331, _1332, _1333, 1.0), vec4(_1265, _1268, _1271, _1274));
    float _1337 = dot(vec4(_1331, _1332, _1333, 1.0), vec4(_1264, _1267, _1270, _1273));
    float _1340 = dot(vec4(_1331, _1332, _1333, 1.0), vec4(_1263, _1266, _1269, _1272));
    float _1374;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1347 = dot(vec4(_1331, _1332, _1333, 1.0), vec4(_953, _957, _960, _963));
        float _1351 = dot(vec4(_1331, _1332, _1333, 1.0), vec4(_955, _958, _961, _964));
        float _1355 = dot(vec4(_1331, _1332, _1333, 1.0), vec4(_956, _959, _962, _965));
        float _1362 = dot(vec4(cbModelParam._m0[39u]), vec4(_1331, _1332, _1333, 1.0));
        _1374 = dot(vec3(isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0)), isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0)), isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1362) ? 0.0 : (isnan(0.0) ? _1362 : max(0.0, _1362))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1374 = 1.0;
    }
    float _1385;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1376 = dot(vec4(cbModelParam._m0[40u]), vec4(_1331, _1332, _1333, 1.0));
        _1385 = dot(vec3(isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0)), isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0)), isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1376) ? 0.0 : (isnan(0.0) ? _1376 : max(0.0, _1376))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1385 = 1.0;
    }
    float _1389 = (_1385 * cbModelParam._m0[1u].x) + (_1374 * (1.0 - cbModelParam._m0[1u].x));
    float _1399 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _411);
    float _1400 = isnan(_1399) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1399 : min(cbModelParam._m0[25u].z, _1399));
    float _1481;
    float _1483;
    float _1485;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1448 = fma(_651, cbModelParam._m0[13u].z, fma(_647, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _643)) + cbModelParam._m0[13u].w;
        float _1452 = fma(_651, cbModelParam._m0[14u].z, fma(_647, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _643)) + cbModelParam._m0[14u].w;
        float _1456 = fma(_651, cbModelParam._m0[15u].z, fma(_647, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _643)) + cbModelParam._m0[15u].w;
        float _1459 = fma(_589, cbModelParam._m0[13u].z, fma(_588, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _587));
        float _1462 = fma(_589, cbModelParam._m0[14u].z, fma(_588, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _587));
        float _1465 = fma(_589, cbModelParam._m0[15u].z, fma(_588, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _587));
        float _1493;
        if (_1459 > 0.0)
        {
            _1493 = abs((1.0 - _1448) / _1459);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1459 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1448 + 1.0) / _1459);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1493 = frontier_phi_16_14_ladder;
        }
        float _1699;
        if (_1462 > 0.0)
        {
            _1699 = abs((1.0 - _1452) / _1462);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1462 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1452 + 1.0) / _1462);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1699 = frontier_phi_25_21_ladder;
        }
        float _1953;
        if (_1465 > 0.0)
        {
            _1953 = abs((1.0 - _1456) / _1465);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1465 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1456 + 1.0) / _1465);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1953 = frontier_phi_37_32_ladder;
        }
        float _1955 = isnan(_1699) ? _1493 : (isnan(_1493) ? _1699 : min(_1493, _1699));
        float _1956 = isnan(_1953) ? _1955 : (isnan(_1955) ? _1953 : min(_1955, _1953));
        float _1960 = (_1956 * _1459) + _1448;
        float _1961 = (_1956 * _1462) + _1452;
        float _1962 = (_1956 * _1465) + _1456;
        float _1963 = _1956 * 9.9999997473787516355514526367188e-05;
        float _1965 = (-1.0) - _1963;
        float _1967 = _1963 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1962 > _1967) || ((_1962 < _1965) || ((_1961 > _1967) || ((_1961 < _1965) || ((_1960 < _1965) || (_1960 > _1967))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2090 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1962, cbModelParam._m0[9u].z, fma(_1961, cbModelParam._m0[9u].y, _1960 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1962, cbModelParam._m0[10u].z, fma(_1961, cbModelParam._m0[10u].y, _1960 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1962, cbModelParam._m0[11u].z, fma(_1961, cbModelParam._m0[11u].y, _1960 * cbModelParam._m0[11u].x))), _1400);
            frontier_phi_15_37_ladder = _2090.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2090.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2090.x * cbModelParam._m0[1u].y;
        }
        _1481 = frontier_phi_15_37_ladder_2;
        _1483 = frontier_phi_15_37_ladder_1;
        _1485 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1469 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_587, _588, _589), _1400);
        _1481 = _1469.x * cbModelParam._m0[1u].y;
        _1483 = _1469.y * cbModelParam._m0[1u].y;
        _1485 = _1469.z * cbModelParam._m0[1u].y;
    }
    float _1489 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _411);
    float _1490 = isnan(_1489) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1489 : min(cbModelParam._m0[25u].w, _1489));
    float _1583;
    float _1585;
    float _1587;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1547 = fma(_651, cbModelParam._m0[21u].z, fma(_647, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _643)) + cbModelParam._m0[21u].w;
        float _1551 = fma(_651, cbModelParam._m0[22u].z, fma(_647, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _643)) + cbModelParam._m0[22u].w;
        float _1555 = fma(_651, cbModelParam._m0[23u].z, fma(_647, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _643)) + cbModelParam._m0[23u].w;
        float _1558 = fma(_589, cbModelParam._m0[21u].z, fma(_588, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _587));
        float _1561 = fma(_589, cbModelParam._m0[22u].z, fma(_588, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _587));
        float _1564 = fma(_589, cbModelParam._m0[23u].z, fma(_588, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _587));
        float _1704;
        if (_1558 > 0.0)
        {
            _1704 = abs((1.0 - _1547) / _1558);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1558 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1547 + 1.0) / _1558);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1704 = frontier_phi_27_23_ladder;
        }
        float _1980;
        if (_1561 > 0.0)
        {
            _1980 = abs((1.0 - _1551) / _1561);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1561 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1551 + 1.0) / _1561);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1980 = frontier_phi_39_34_ladder;
        }
        float _2193;
        if (_1564 > 0.0)
        {
            _2193 = abs((1.0 - _1555) / _1564);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1564 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1555 + 1.0) / _1564);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2193 = frontier_phi_48_45_ladder;
        }
        float _2195 = isnan(_1980) ? _1704 : (isnan(_1704) ? _1980 : min(_1704, _1980));
        float _2196 = isnan(_2193) ? _2195 : (isnan(_2195) ? _2193 : min(_2195, _2193));
        float _2200 = (_2196 * _1558) + _1547;
        float _2201 = (_2196 * _1561) + _1551;
        float _2202 = (_2196 * _1564) + _1555;
        float _2203 = _2196 * 9.9999997473787516355514526367188e-05;
        float _2204 = (-1.0) - _2203;
        float _2206 = _2203 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2202 > _2206) || ((_2202 < _2204) || ((_2201 > _2206) || ((_2201 < _2204) || ((_2200 < _2204) || (_2200 > _2206))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2400 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2202, cbModelParam._m0[17u].z, fma(_2201, cbModelParam._m0[17u].y, _2200 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2202, cbModelParam._m0[18u].z, fma(_2201, cbModelParam._m0[18u].y, _2200 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2202, cbModelParam._m0[19u].z, fma(_2201, cbModelParam._m0[19u].y, _2200 * cbModelParam._m0[19u].x))), _1490);
            frontier_phi_24_48_ladder = _2400.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2400.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2400.x * cbModelParam._m0[1u].z;
        }
        _1583 = frontier_phi_24_48_ladder_2;
        _1585 = frontier_phi_24_48_ladder_1;
        _1587 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1567 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_587, _588, _589), _1490);
        _1583 = _1567.x * cbModelParam._m0[1u].z;
        _1585 = _1567.y * cbModelParam._m0[1u].z;
        _1587 = _1567.z * cbModelParam._m0[1u].z;
    }
    float _1600 = (((_614 * _564) + _615) * _579) * ((cbModelParam._m0[1u].w * (_1583 - _1481)) + _1481);
    float _1602 = (((_614 * _566) + _615) * _579) * ((cbModelParam._m0[1u].w * (_1585 - _1483)) + _1483);
    float _1604 = (((_614 * _567) + _615) * _579) * ((cbModelParam._m0[1u].w * (_1587 - _1485)) + _1485);
    float _1607 = fma(_1604, cbSceneParam._m0[89u].z, fma(_1602, cbSceneParam._m0[89u].y, _1600 * cbSceneParam._m0[89u].x));
    float _1610 = fma(_1604, cbSceneParam._m0[90u].z, fma(_1602, cbSceneParam._m0[90u].y, _1600 * cbSceneParam._m0[90u].x));
    float _1613 = fma(_1604, cbSceneParam._m0[91u].z, fma(_1602, cbSceneParam._m0[91u].y, _1600 * cbSceneParam._m0[91u].x));
    uvec4 _1623 = floatBitsToUint(cbInstanceData._m0[_539 + 5u]);
    uint _1625 = _1623.x * 14u;
    uint _1626 = _1625 + 13u;
    float _1633 = _579 + (-1.0);
    float _1638 = (cbLight._m0[_1626].x * _1633) + 1.0;
    float _1639 = (cbLight._m0[_1626].y * _1633) + 1.0;
    float _1640 = (cbLight._m0[_1626].z * _1633) + 1.0;
    float _1641 = (cbLight._m0[_1626].w * _1633) + 1.0;
    uint _1642 = _1625 + 5u;
    float _1648 = isnan(1.0) ? _1639 : (isnan(_1639) ? 1.0 : min(_1639, 1.0));
    uint _1652 = _1625 + 4u;
    float _1658 = isnan(1.0) ? _1638 : (isnan(_1638) ? 1.0 : min(_1638, 1.0));
    uint _1662 = _1625 | 1u;
    float _1673 = dot(vec3(cbLight._m0[_1625].xyz), vec3(_408, _409, _410));
    float _1676 = dot(vec3(cbLight._m0[_1662].xyz), vec3(_408, _409, _410));
    float _3788 = isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0));
    float _3799 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
    float _1681 = (isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0))) * 0.3183098733425140380859375;
    float _1683 = (isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0))) * 0.3183098733425140380859375;
    float _1690 = ((cbLight._m0[_1642].x * _1648) * _1683) + ((cbLight._m0[_1652].x * _1658) * _1681);
    float _1691 = ((_1648 * cbLight._m0[_1642].y) * _1683) + ((_1658 * cbLight._m0[_1652].y) * _1681);
    float _1692 = ((_1648 * cbLight._m0[_1642].z) * _1683) + ((_1658 * cbLight._m0[_1652].z) * _1681);
    uvec4 _1696 = floatBitsToUint(cbLight._m0[_1625 + 12u]);
    bool _1698 = _1696.x == 0u;
    float _1709;
    float _1711;
    float _1713;
    if (_1698)
    {
        _1709 = _1690;
        _1711 = _1691;
        _1713 = _1692;
    }
    else
    {
        uint _1717 = _1625 + 6u;
        float _1733 = (dot(vec3(cbLight._m0[_1625 + 2u].xyz), vec3(_408, _409, _410)) * 0.5) + 0.5;
        float _1734 = _1733 * _1733;
        float _3810 = isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0));
        float _1735 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
        float _1736 = isnan(1.0) ? _1640 : (isnan(_1640) ? 1.0 : min(_1640, 1.0));
        _1709 = (((cbLight._m0[_1717].x * 0.3183098733425140380859375) * _1735) * _1736) + _1690;
        _1711 = (((cbLight._m0[_1717].y * 0.3183098733425140380859375) * _1735) * _1736) + _1691;
        _1713 = (((cbLight._m0[_1717].z * 0.3183098733425140380859375) * _1735) * _1736) + _1692;
    }
    bool _1716 = _1696.y == 0u;
    float _1754;
    float _1756;
    float _1758;
    if (_1716)
    {
        _1754 = _1709;
        _1756 = _1711;
        _1758 = _1713;
    }
    else
    {
        uint _1924 = _1625 + 7u;
        float _1940 = (dot(vec3(cbLight._m0[_1625 + 3u].xyz), vec3(_408, _409, _410)) * 0.5) + 0.5;
        float _1941 = _1940 * _1940;
        float _3826 = isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0));
        float _1942 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
        float _1943 = isnan(1.0) ? _1641 : (isnan(_1641) ? 1.0 : min(_1641, 1.0));
        _1754 = (((cbLight._m0[_1924].x * 0.3183098733425140380859375) * _1942) * _1943) + _1709;
        _1756 = (((cbLight._m0[_1924].y * 0.3183098733425140380859375) * _1942) * _1943) + _1711;
        _1758 = (((cbLight._m0[_1924].z * 0.3183098733425140380859375) * _1942) * _1943) + _1713;
    }
    uint _1761 = _1625 + 8u;
    float _1774 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1625].w)) * _411) * 0.949999988079071044921875);
    float _1775 = _1774 * _1774;
    float _1776 = cbLight._m0[_1625].x + _490;
    float _1777 = cbLight._m0[_1625].y + _491;
    float _1778 = cbLight._m0[_1625].z + _492;
    float _1782 = inversesqrt(dot(vec3(_1776, _1777, _1778), vec3(_1776, _1777, _1778)));
    float _1783 = _1782 * _1776;
    float _1784 = _1782 * _1777;
    float _1785 = _1782 * _1778;
    float _1786 = dot(vec3(_408, _409, _410), vec3(cbLight._m0[_1625].xyz));
    float _3842 = isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0));
    float _1789 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
    float _3853 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _1790 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
    float _1791 = dot(vec3(_408, _409, _410), vec3(_1783, _1784, _1785));
    float _3864 = isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0));
    float _1794 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
    float _1795 = dot(vec3(cbLight._m0[_1625].xyz), vec3(_1783, _1784, _1785));
    float _3875 = isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0));
    float _1799 = _1775 * _1775;
    float _1803 = ((_1794 * _1794) * (_1799 + (-1.0))) + 1.0;
    float _1811 = exp2(log2(1.0 - (isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0)))) * 5.0);
    float _1812 = 0.959999978542327880859375 - _561;
    float _1814 = 0.959999978542327880859375 - _562;
    float _1815 = 0.959999978542327880859375 - _563;
    float _1822 = 1.0 - _1775;
    float _1833 = (0.5 / (((_1790 * ((_1789 * _1822) + _1775)) + 9.9999999392252902907785028219223e-09) + (((_1790 * _1822) + _1775) * _1789))) * _1789;
    float _3886 = isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0));
    float _1835 = (isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0))) * (_1799 / ((_1803 * _1803) * 3.141590118408203125));
    uint _1846 = _1625 + 9u;
    float _1857 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1662].w)) * _411) * 0.949999988079071044921875);
    float _1858 = _1857 * _1857;
    float _1859 = cbLight._m0[_1662].x + _490;
    float _1860 = cbLight._m0[_1662].y + _491;
    float _1861 = cbLight._m0[_1662].z + _492;
    float _1865 = inversesqrt(dot(vec3(_1859, _1860, _1861), vec3(_1859, _1860, _1861)));
    float _1866 = _1865 * _1859;
    float _1867 = _1865 * _1860;
    float _1868 = _1865 * _1861;
    float _1869 = dot(vec3(_408, _409, _410), vec3(cbLight._m0[_1662].xyz));
    float _3897 = isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0));
    float _1872 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
    float _1873 = dot(vec3(_408, _409, _410), vec3(_1866, _1867, _1868));
    float _3908 = isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0));
    float _1876 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
    float _1877 = dot(vec3(cbLight._m0[_1662].xyz), vec3(_1866, _1867, _1868));
    float _3919 = isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0));
    float _1881 = _1858 * _1858;
    float _1885 = ((_1876 * _1876) * (_1881 + (-1.0))) + 1.0;
    float _1892 = exp2(log2(1.0 - (isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0)))) * 5.0);
    float _1899 = 1.0 - _1858;
    float _1909 = (0.5 / (((_1790 * ((_1872 * _1899) + _1858)) + 9.9999999392252902907785028219223e-09) + (((_1790 * _1899) + _1858) * _1872))) * _1872;
    float _3930 = isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0));
    float _1911 = (isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0))) * (_1881 / ((_1885 * _1885) * 3.141590118408203125));
    float _1921 = (((((_1892 * _1812) + _564) * cbLight._m0[_1846].x) * _1911) * _1648) + (((((_1811 * _1812) + _564) * cbLight._m0[_1761].x) * _1835) * _1658);
    float _1922 = (((((_1892 * _1814) + _566) * cbLight._m0[_1846].y) * _1911) * _1648) + (((((_1811 * _1814) + _566) * cbLight._m0[_1761].y) * _1835) * _1658);
    float _1923 = (((((_1892 * _1815) + _567) * cbLight._m0[_1846].z) * _1911) * _1648) + (((((_1811 * _1815) + _567) * cbLight._m0[_1761].z) * _1835) * _1658);
    float _1985;
    float _1987;
    float _1989;
    if (_1698)
    {
        _1985 = _1921;
        _1987 = _1922;
        _1989 = _1923;
    }
    else
    {
        uint _1991 = _1625 + 2u;
        uint _1995 = _1625 + 10u;
        float _2009 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1991].w)) * _411) * 0.949999988079071044921875);
        float _2010 = _2009 * _2009;
        float _2011 = cbLight._m0[_1991].x + _490;
        float _2012 = cbLight._m0[_1991].y + _491;
        float _2013 = cbLight._m0[_1991].z + _492;
        float _2017 = inversesqrt(dot(vec3(_2011, _2012, _2013), vec3(_2011, _2012, _2013)));
        float _2018 = _2017 * _2011;
        float _2019 = _2017 * _2012;
        float _2020 = _2017 * _2013;
        float _2021 = dot(vec3(_408, _409, _410), vec3(cbLight._m0[_1991].xyz));
        float _3941 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
        float _2024 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
        float _2025 = dot(vec3(_408, _409, _410), vec3(_2018, _2019, _2020));
        float _3952 = isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0));
        float _2028 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
        float _2029 = dot(vec3(cbLight._m0[_1991].xyz), vec3(_2018, _2019, _2020));
        float _3963 = isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0));
        float _2033 = _2010 * _2010;
        float _2037 = ((_2028 * _2028) * (_2033 + (-1.0))) + 1.0;
        float _2044 = exp2(log2(1.0 - (isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0)))) * 5.0);
        float _2051 = 1.0 - _2010;
        float _2061 = (0.5 / (((_1790 * ((_2024 * _2051) + _2010)) + 9.9999999392252902907785028219223e-09) + (((_1790 * _2051) + _2010) * _2024))) * _2024;
        float _3974 = isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0));
        float _2063 = (isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0))) * (_2033 / ((_2037 * _2037) * 3.141590118408203125));
        float _2064 = isnan(1.0) ? _1640 : (isnan(_1640) ? 1.0 : min(_1640, 1.0));
        _1985 = (((((_2044 * _1812) + _564) * cbLight._m0[_1995].x) * _2063) * _2064) + _1921;
        _1987 = (((((_2044 * _1814) + _566) * cbLight._m0[_1995].y) * _2063) * _2064) + _1922;
        _1989 = (((((_2044 * _1815) + _567) * cbLight._m0[_1995].z) * _2063) * _2064) + _1923;
    }
    float _2099;
    float _2101;
    float _2103;
    if (_1716)
    {
        _2099 = _1985;
        _2101 = _1987;
        _2103 = _1989;
    }
    else
    {
        uint _2110 = _1625 + 3u;
        uint _2114 = _1625 + 11u;
        float _2128 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2110].w)) * _411) * 0.949999988079071044921875);
        float _2129 = _2128 * _2128;
        float _2130 = cbLight._m0[_2110].x + _490;
        float _2131 = cbLight._m0[_2110].y + _491;
        float _2132 = cbLight._m0[_2110].z + _492;
        float _2136 = inversesqrt(dot(vec3(_2130, _2131, _2132), vec3(_2130, _2131, _2132)));
        float _2137 = _2136 * _2130;
        float _2138 = _2136 * _2131;
        float _2139 = _2136 * _2132;
        float _2140 = dot(vec3(_408, _409, _410), vec3(cbLight._m0[_2110].xyz));
        float _3990 = isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0));
        float _2143 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
        float _2144 = dot(vec3(_408, _409, _410), vec3(_2137, _2138, _2139));
        float _4001 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
        float _2147 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
        float _2148 = dot(vec3(cbLight._m0[_2110].xyz), vec3(_2137, _2138, _2139));
        float _4012 = isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0));
        float _2152 = _2129 * _2129;
        float _2156 = ((_2147 * _2147) * (_2152 + (-1.0))) + 1.0;
        float _2163 = exp2(log2(1.0 - (isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0)))) * 5.0);
        float _2170 = 1.0 - _2129;
        float _2180 = (0.5 / (((_1790 * ((_2143 * _2170) + _2129)) + 9.9999999392252902907785028219223e-09) + (((_1790 * _2170) + _2129) * _2143))) * _2143;
        float _4023 = isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0));
        float _2182 = (isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0))) * (_2152 / ((_2156 * _2156) * 3.141590118408203125));
        float _2183 = isnan(1.0) ? _1641 : (isnan(_1641) ? 1.0 : min(_1641, 1.0));
        _2099 = (((((_2163 * _1812) + _564) * cbLight._m0[_2114].x) * _2182) * _2183) + _1985;
        _2101 = (((((_2163 * _1814) + _566) * cbLight._m0[_2114].y) * _2182) * _2183) + _1987;
        _2103 = (((((_2163 * _1815) + _567) * cbLight._m0[_2114].z) * _2182) * _2183) + _1989;
    }
    float _2317;
    float _2319;
    float _2321;
    float _2323;
    float _2325;
    float _2327;
    if (_1623.y == 0u)
    {
        float _2258 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2259 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2258;
        float _2260 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2258;
        float _2261 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2258;
        uvec4 _2273 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2274 = _2273.x;
        uint _2285 = uint((float(_2273.y) * floor(float(uint(cbSceneParam._m0[85u].y * _499) / _2274))) + floor(float(uint(cbSceneParam._m0[85u].x * _498) / _2274)));
        float _2295 = (log2(_2261 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2296 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
        uint _2299 = uint(isnan(14.0) ? _2296 : (isnan(_2296) ? 14.0 : min(_2296, 14.0)));
        uvec4 _2304 = texelFetch(g_lightClusterGridBuffer, int(((_2299 << 2u) + (_2285 << 6u)) >> 2u));
        uint _2305 = _2304.x;
        uint _2306 = _2273.z;
        float _2405;
        float _2407;
        float _2409;
        float _2411;
        float _2413;
        float _2415;
        if (((((1u << ((_2306 >> 4u) & 15u)) + 4294967295u) & _2305) == 0u) || ((_2306 & 240u) == 0u))
        {
            _2405 = 0.0;
            _2407 = 0.0;
            _2409 = 0.0;
            _2411 = 0.0;
            _2413 = 0.0;
            _2415 = 0.0;
        }
        else
        {
            float _2406;
            float _2408;
            float _2410;
            float _2412;
            float _2414;
            float _2416;
            float _2549 = 0.0;
            float _2550 = 0.0;
            float _2551 = 0.0;
            float _2552 = 0.0;
            float _2553 = 0.0;
            float _2554 = 0.0;
            uint _2555 = 0u;
            uint _2564;
            bool _2565;
            for (;;)
            {
                _2564 = texelFetch(g_lightClassification, int((((_2299 << 5u) + (_2285 << 9u)) + (_2555 << 2u)) >> 2u)).x;
                _2565 = _2564 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2565)
                {
                    frontier_phi_63_pred = _2554;
                    frontier_phi_63_pred_1 = _2553;
                    frontier_phi_63_pred_2 = _2552;
                    frontier_phi_63_pred_3 = _2551;
                    frontier_phi_63_pred_4 = _2550;
                    frontier_phi_63_pred_5 = _2549;
                }
                else
                {
                    float _2673;
                    float _2674;
                    float _2675;
                    float _2676;
                    float _2677;
                    float _2678;
                    uint _2679;
                    _2673 = _2549;
                    _2674 = _2550;
                    _2675 = _2551;
                    _2676 = _2552;
                    _2677 = _2553;
                    _2678 = _2554;
                    _2679 = _2564;
                    float _2605;
                    float _2606;
                    float _2607;
                    float _2608;
                    float _2609;
                    float _2610;
                    for (;;)
                    {
                        uint _2683 = uint(findLSB(_2679)) + (_2555 << 5u);
                        uint _2680 = (_2679 + 4294967295u) & _2679;
                        uint _2685 = _2683 * 48u;
                        vec4 _2699 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2685)).x, texelFetch(g_PointLightRenderingBuffer, int(_2685 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2685 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2685 + 3u)).x));
                        uint _2705 = (_2683 * 48u) + 4u;
                        vec4 _2718 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2705)).x, texelFetch(g_PointLightRenderingBuffer, int(_2705 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2705 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2705 + 3u)).x));
                        uint _2724 = (_2683 * 48u) + 8u;
                        vec3 _2735 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2724)).x, texelFetch(g_PointLightRenderingBuffer, int(_2724 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2724 + 2u)).x));
                        float _2739 = _2699.x - _2259;
                        float _2740 = _2699.y - _2260;
                        float _2741 = _2699.z - _2261;
                        float _2742 = dot(vec3(_2739, _2740, _2741), vec3(_2739, _2740, _2741));
                        float _2745 = inversesqrt(_2742);
                        float _2746 = _2745 * _2739;
                        float _2747 = _2745 * _2740;
                        float _2748 = _2745 * _2741;
                        float _2749 = dot(vec3(_520, _523, _526), vec3(_2746, _2747, _2748));
                        float _2754 = 1.0 - (_2742 * _2699.w);
                        float _4049 = isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0));
                        float _2755 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
                        float _2756 = sqrt(_2742) * _2718.w;
                        float _2759 = 1.39999997615814208984375 / (_2756 + 1.39999997615814208984375);
                        float _2760 = _2759 * _2759;
                        float _2763 = ((1.0 - _2760) * _2749) + _2760;
                        float _2766 = _2756 * _2756;
                        float _2770 = ((isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0))) * _2755) / ((_2766 * 0.699999988079071044921875) + 1.0);
                        float _2774 = (-0.0) - _2259;
                        float _2775 = (-0.0) - _2260;
                        float _2776 = (-0.0) - _2261;
                        float _2780 = inversesqrt(dot(vec3(_2774, _2775, _2776), vec3(_2774, _2775, _2776)));
                        float _2781 = _2780 * _2774;
                        float _2782 = _2780 * _2775;
                        float _2783 = _2780 * _2776;
                        float _2791 = exp2(log2(1.0 / ((_2766 * 3.5) + 5.0)) * 0.25);
                        float _2792 = 1.0 - _595;
                        float _2799 = sqrt(1.0 - ((1.0 - (_2792 * _2792)) * (1.0 - (_2791 * _2791))));
                        float _2800 = _2799 * _2799;
                        float _2801 = _2800 * _2800;
                        float _2802 = _2781 + _2746;
                        float _2803 = _2782 + _2747;
                        float _2804 = _2783 + _2748;
                        float _2808 = inversesqrt(dot(vec3(_2802, _2803, _2804), vec3(_2802, _2803, _2804)));
                        float _2812 = dot(vec3(_520, _523, _526), vec3(_2781, _2782, _2783));
                        float _4065 = isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0));
                        float _2815 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
                        float _2816 = dot(vec3(_520, _523, _526), vec3(_2808 * _2802, _2808 * _2803, _2808 * _2804));
                        float _4076 = isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0));
                        float _2819 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
                        float _2823 = ((_2819 * _2819) * (_2801 + (-1.0))) + 1.0;
                        float _2824 = _2759 * _2800;
                        float _2825 = _2824 * _2824;
                        float _2828 = ((1.0 - _2825) * _2749) + _2825;
                        float _4087 = isnan(0.0) ? _2828 : (isnan(_2828) ? 0.0 : max(_2828, 0.0));
                        float _2829 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
                        float _2830 = 1.0 - _2800;
                        float _2840 = (0.5 / (((_2829 * ((_2815 * _2830) + _2800)) + 9.9999999392252902907785028219223e-09) + (((_2829 * _2830) + _2800) * _2815))) * _2829;
                        float _4098 = isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : max(_2840, 0.0));
                        float _2851 = (((_2801 * 3.1415927410125732421875) * (isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0)))) / ((_2823 * _2823) * ((_2766 * 2.1991131305694580078125) + 3.141590118408203125))) * _2755;
                        _2608 = (_2770 * _2718.x) + _2676;
                        _2609 = (_2770 * _2718.y) + _2677;
                        _2610 = (_2770 * _2718.z) + _2678;
                        _2605 = (_2851 * _2735.x) + _2673;
                        _2606 = (_2851 * _2735.y) + _2674;
                        _2607 = (_2851 * _2735.z) + _2675;
                        if (_2680 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2673 = _2605;
                            _2674 = _2606;
                            _2675 = _2607;
                            _2676 = _2608;
                            _2677 = _2609;
                            _2678 = _2610;
                            _2679 = _2680;
                        }
                    }
                    frontier_phi_63_pred = _2610;
                    frontier_phi_63_pred_1 = _2609;
                    frontier_phi_63_pred_2 = _2608;
                    frontier_phi_63_pred_3 = _2607;
                    frontier_phi_63_pred_4 = _2606;
                    frontier_phi_63_pred_5 = _2605;
                }
                _2416 = frontier_phi_63_pred;
                _2414 = frontier_phi_63_pred_1;
                _2412 = frontier_phi_63_pred_2;
                _2410 = frontier_phi_63_pred_3;
                _2408 = frontier_phi_63_pred_4;
                _2406 = frontier_phi_63_pred_5;
                uint _2556 = _2555 + 1u;
                if (_2556 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2549 = _2406;
                    _2550 = _2408;
                    _2551 = _2410;
                    _2552 = _2412;
                    _2553 = _2414;
                    _2554 = _2416;
                    _2555 = _2556;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2405 = _2406;
            _2407 = _2408;
            _2409 = _2410;
            _2411 = _2412;
            _2413 = _2414;
            _2415 = _2416;
        }
        uvec4 _2419 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2420 = _2419.z;
        uint _2422 = (_2420 >> 8u) & 15u;
        float _2517;
        float _2519;
        float _2521;
        float _2523;
        float _2525;
        float _2527;
        if (((4294967295u << _2422) & _2305) == 0u)
        {
            _2517 = _2405;
            _2519 = _2407;
            _2521 = _2409;
            _2523 = _2411;
            _2525 = _2413;
            _2527 = _2415;
        }
        else
        {
            float _2542 = inversesqrt(dot(vec3(_2259, _2260, _2261), vec3(_2259, _2260, _2261)));
            float _2543 = _2542 * _2259;
            float _2544 = _2542 * _2260;
            float _2545 = _2542 * _2261;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2422 < ((_2420 >> 12u) & 15u))
            {
                float _2518;
                float _2520;
                float _2522;
                float _2524;
                float _2526;
                float _2528;
                float _2656 = _2405;
                float _2657 = _2407;
                float _2658 = _2409;
                float _2659 = _2411;
                float _2660 = _2413;
                float _2661 = _2415;
                uint _2662 = _2422;
                uint _2671;
                bool _2672;
                for (;;)
                {
                    _2671 = texelFetch(g_lightClassification, int((((_2299 << 5u) + (_2285 << 9u)) + (_2662 << 2u)) >> 2u)).x;
                    _2672 = _2671 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2672)
                    {
                        frontier_phi_69_pred = _2661;
                        frontier_phi_69_pred_1 = _2660;
                        frontier_phi_69_pred_2 = _2659;
                        frontier_phi_69_pred_3 = _2658;
                        frontier_phi_69_pred_4 = _2657;
                        frontier_phi_69_pred_5 = _2656;
                    }
                    else
                    {
                        float _2856;
                        float _2857;
                        float _2858;
                        float _2859;
                        float _2860;
                        float _2861;
                        float _3152;
                        float _3153;
                        float _3154;
                        float _3155;
                        float _3156;
                        float _3157;
                        float _2869 = _2656;
                        float _2870 = _2657;
                        float _2871 = _2658;
                        float _2872 = _2659;
                        float _2873 = _2660;
                        float _2874 = _2661;
                        uint _2875 = _2671;
                        uint _2876;
                        vec4 _2901;
                        float _2902;
                        vec4 _2917;
                        vec3 _2929;
                        vec4 _2945;
                        vec4 _2961;
                        float _3008;
                        bool _3009;
                        for (;;)
                        {
                            uint _2886 = ((_2662 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2875));
                            _2876 = (_2875 + 4294967295u) & _2875;
                            uint _2888 = _2886 * 40u;
                            _2901 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2888)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2888 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2888 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2888 + 3u)).x));
                            _2902 = _2901.w;
                            uint _2904 = (_2886 * 40u) + 4u;
                            _2917 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2904)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2904 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2904 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2904 + 3u)).x));
                            uint _2919 = (_2886 * 40u) + 8u;
                            _2929 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2919)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2919 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2919 + 2u)).x));
                            uint _2932 = (_2886 * 40u) + 16u;
                            _2945 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2932)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2932 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2932 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2932 + 3u)).x));
                            uint _2948 = (_2886 * 40u) + 20u;
                            _2961 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2948)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2948 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2948 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2948 + 3u)).x));
                            uint _2964 = (_2886 * 40u) + 24u;
                            vec4 _2977 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2964)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2964 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2964 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2964 + 3u)).x));
                            uint _2983 = (_2886 * 40u) + 28u;
                            vec4 _2996 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2983)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2983 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2983 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2983 + 3u)).x));
                            _3008 = fma(_2261, _2996.z, fma(_2260, _2996.y, _2996.x * _2259)) + _2996.w;
                            _3009 = !((fma(_2261, _2977.z, fma(_2260, _2977.y, _2977.x * _2259)) + _2977.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3009)
                            {
                                float _3036 = _2901.x - _2259;
                                float _3037 = _2901.y - _2260;
                                float _3038 = _2901.z - _2261;
                                float _3039 = dot(vec3(_3036, _3037, _3038), vec3(_3036, _3037, _3038));
                                float _3042 = inversesqrt(_3039);
                                float _3043 = _3042 * _3036;
                                float _3044 = _3042 * _3037;
                                float _3045 = _3042 * _3038;
                                float _3049 = 1.0 - (_3039 / (_2902 * _2902));
                                float _4109 = isnan(0.0) ? _3049 : (isnan(_3049) ? 0.0 : max(_3049, 0.0));
                                float _3050 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
                                float _3054 = sqrt(_3039) * _2917.w;
                                float _3056 = 1.39999997615814208984375 / (_3054 + 1.39999997615814208984375);
                                float _3057 = _3056 * _3056;
                                float _3060 = ((1.0 - _3057) * dot(vec3(_3043, _3044, _3045), vec3(_520, _523, _526))) + _3057;
                                float _3063 = _3054 * _3054;
                                float _3067 = (fma(_2261, _2945.z, fma(_2260, _2945.y, _2945.x * _2259)) + _2945.w) / _3008;
                                float _3068 = (fma(_2261, _2961.z, fma(_2260, _2961.y, _2961.x * _2259)) + _2961.w) / _3008;
                                float _3072 = 1.0 - dot(vec2(_3067, _3068), vec2(_3067, _3068));
                                float _4125 = isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0));
                                float _3073 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
                                float _3074 = _3073 * (((isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : max(_3060, 0.0))) * _3050) / ((_3063 * 0.699999988079071044921875) + 1.0));
                                float _3086 = exp2(log2(1.0 / ((_3063 * 3.5) + 5.0)) * 0.25);
                                float _3087 = 1.0 - _595;
                                float _3094 = sqrt(1.0 - ((1.0 - (_3087 * _3087)) * (1.0 - (_3086 * _3086))));
                                float _3095 = _3094 * _3094;
                                float _3096 = _3095 * _3095;
                                float _3097 = _3043 - _2543;
                                float _3098 = _3044 - _2544;
                                float _3099 = _3045 - _2545;
                                float _3103 = inversesqrt(dot(vec3(_3097, _3098, _3099), vec3(_3097, _3098, _3099)));
                                float _3107 = dot(vec3(_520, _523, _526), vec3((-0.0) - _2543, (-0.0) - _2544, (-0.0) - _2545));
                                float _4136 = isnan(0.0) ? _3107 : (isnan(_3107) ? 0.0 : max(_3107, 0.0));
                                float _3110 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
                                float _3111 = dot(vec3(_520, _523, _526), vec3(_3103 * _3097, _3103 * _3098, _3103 * _3099));
                                float _4147 = isnan(0.0) ? _3111 : (isnan(_3111) ? 0.0 : max(_3111, 0.0));
                                float _3114 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
                                float _3118 = ((_3114 * _3114) * (_3096 + (-1.0))) + 1.0;
                                float _3119 = _3056 * _3095;
                                float _3120 = _3119 * _3119;
                                float _3126 = ((1.0 - _3120) * dot(vec3(_520, _523, _526), vec3(_3043, _3044, _3045))) + _3120;
                                float _4158 = isnan(0.0) ? _3126 : (isnan(_3126) ? 0.0 : max(_3126, 0.0));
                                float _3127 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
                                float _3128 = 1.0 - _3095;
                                float _3138 = (0.5 / (((_3127 * ((_3110 * _3128) + _3095)) + 9.9999999392252902907785028219223e-09) + (((_3127 * _3128) + _3095) * _3110))) * _3127;
                                float _4169 = isnan(0.0) ? _3138 : (isnan(_3138) ? 0.0 : max(_3138, 0.0));
                                float _3148 = (_3073 * _3050) * (((_3096 * 3.1415927410125732421875) * (isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0)))) / ((_3118 * _3118) * ((_3063 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3074 * _2917.z;
                                frontier_phi_75_pred_1 = _3074 * _2917.y;
                                frontier_phi_75_pred_2 = _3074 * _2917.x;
                                frontier_phi_75_pred_3 = _3148 * _2929.z;
                                frontier_phi_75_pred_4 = _3148 * _2929.y;
                                frontier_phi_75_pred_5 = _3148 * _2929.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3157 = frontier_phi_75_pred;
                            _3156 = frontier_phi_75_pred_1;
                            _3155 = frontier_phi_75_pred_2;
                            _3154 = frontier_phi_75_pred_3;
                            _3153 = frontier_phi_75_pred_4;
                            _3152 = frontier_phi_75_pred_5;
                            _2859 = _3155 + _2872;
                            _2860 = _3156 + _2873;
                            _2861 = _3157 + _2874;
                            _2856 = _3152 + _2869;
                            _2857 = _3153 + _2870;
                            _2858 = _3154 + _2871;
                            if (_2876 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2869 = _2856;
                                _2870 = _2857;
                                _2871 = _2858;
                                _2872 = _2859;
                                _2873 = _2860;
                                _2874 = _2861;
                                _2875 = _2876;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2861;
                        frontier_phi_69_pred_1 = _2860;
                        frontier_phi_69_pred_2 = _2859;
                        frontier_phi_69_pred_3 = _2858;
                        frontier_phi_69_pred_4 = _2857;
                        frontier_phi_69_pred_5 = _2856;
                    }
                    _2528 = frontier_phi_69_pred;
                    _2526 = frontier_phi_69_pred_1;
                    _2524 = frontier_phi_69_pred_2;
                    _2522 = frontier_phi_69_pred_3;
                    _2520 = frontier_phi_69_pred_4;
                    _2518 = frontier_phi_69_pred_5;
                    uint _2663 = _2662 + 1u;
                    if (_2663 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2656 = _2518;
                        _2657 = _2520;
                        _2658 = _2522;
                        _2659 = _2524;
                        _2660 = _2526;
                        _2661 = _2528;
                        _2662 = _2663;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2528;
                frontier_phi_57_58_ladder_1 = _2526;
                frontier_phi_57_58_ladder_2 = _2524;
                frontier_phi_57_58_ladder_3 = _2522;
                frontier_phi_57_58_ladder_4 = _2520;
                frontier_phi_57_58_ladder_5 = _2518;
            }
            else
            {
                frontier_phi_57_58_ladder = _2415;
                frontier_phi_57_58_ladder_1 = _2413;
                frontier_phi_57_58_ladder_2 = _2411;
                frontier_phi_57_58_ladder_3 = _2409;
                frontier_phi_57_58_ladder_4 = _2407;
                frontier_phi_57_58_ladder_5 = _2405;
            }
            _2517 = frontier_phi_57_58_ladder_5;
            _2519 = frontier_phi_57_58_ladder_4;
            _2521 = frontier_phi_57_58_ladder_3;
            _2523 = frontier_phi_57_58_ladder_2;
            _2525 = frontier_phi_57_58_ladder_1;
            _2527 = frontier_phi_57_58_ladder;
        }
        float _2532 = isnan(1.0) ? _579 : (isnan(_579) ? 1.0 : min(_579, 1.0));
        _2317 = (_2532 * _2523) + _1754;
        _2319 = (_2532 * _2525) + _1756;
        _2321 = (_2532 * _2527) + _1758;
        _2323 = ((_2517 * _564) * _2532) + _2099;
        _2325 = ((_2519 * _566) * _2532) + _2101;
        _2327 = ((_2521 * _567) * _2532) + _2103;
    }
    else
    {
        _2317 = _1754;
        _2319 = _1756;
        _2321 = _1758;
        _2323 = _2099;
        _2325 = _2101;
        _2327 = _2103;
    }
    float _4185 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _4196 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
    float _4207 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    uint _2347 = _539 + 6u;
    float _2355 = _498 / cbSceneParam._m0[86u].x;
    float _2356 = _499 / cbSceneParam._m0[86u].y;
    vec4 _2370 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2355, _2356, (log2((isnan(cbSceneParam._m0[77u].w) ? _431 : (isnan(_431) ? cbSceneParam._m0[77u].w : min(_431, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2372 = _2370.x;
    float _2373 = _2370.y;
    float _2374 = _2370.z;
    float _2375 = _2370.w;
    float _2467;
    float _2469;
    float _2471;
    float _2473;
    if (_431 > cbSceneParam._m0[78u].w)
    {
        float _2430 = isnan(_431) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _431 : min(cbSceneParam._m0[80u].w, _431));
        float _2431 = _2430 / _431;
        float _2442 = _2431 * _483;
        float _2443 = _484 * _2431;
        float _2444 = (-0.0) - _2443;
        float _2445 = _2431 * _485;
        float _2447 = (cbSceneParam._m0[77u].w * _2444) / _2430;
        float _2448 = _2447 + cbSceneParam._m0[79u].w;
        float _2449 = cbSceneParam._m0[79u].w - _2443;
        float _2455 = sqrt(((_2442 * _2442) + (_2443 * _2443)) + (_2445 * _2445));
        float _2458 = (1.0 - (cbSceneParam._m0[77u].w / _2430)) * _2455;
        float _2463 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2465 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2618;
        if (abs((_2444 - _2447) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2618 = ((((_2448 > 0.0) ? exp2(_2463 * _2448) : (2.0 - exp2(_2465 * _2448))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2458;
        }
        else
        {
            float _2578 = 1.0 / cbSceneParam._m0[80u].x;
            float _2579 = isnan(_2449) ? _2448 : (isnan(_2448) ? _2449 : max(_2448, _2449));
            float _2580 = isnan(_2449) ? _2448 : (isnan(_2448) ? _2449 : min(_2448, _2449));
            float _2589 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : min(_2579, 0.0));
            float _2590 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : min(_2580, 0.0));
            _2618 = ((abs(_2455 / _2444) * cbSceneParam._m0[80u].y) * ((((_2589 - _2590) * 2.0) - ((exp2(_2463 * (isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0)))) - exp2(_2463 * (isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0))))) * _2578)) - ((exp2(_2465 * _2589) - exp2(_2465 * _2590)) * _2578))) + (_2458 * cbSceneParam._m0[80u].z);
        }
        vec4 _2620 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2355, _2356, 1.0), 0.0);
        float _2629 = exp2((_2618 * (-1.44269502162933349609375)) * (1.0 - _2620.w));
        float _2630 = log2(_2629);
        float _2646 = log2(_2375);
        _2467 = (exp2(_2646 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2630 * cbSceneParam._m0[78u].x)) * _2620.x) / cbSceneParam._m0[78u].x)) + _2372;
        _2469 = (exp2(_2646 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2630 * cbSceneParam._m0[78u].y)) * _2620.y) / cbSceneParam._m0[78u].y)) + _2373;
        _2471 = (exp2(_2646 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2630 * cbSceneParam._m0[78u].z)) * _2620.z) / cbSceneParam._m0[78u].z)) + _2374;
        _2473 = _2629 * _2375;
    }
    else
    {
        _2467 = _2372;
        _2469 = _2373;
        _2471 = _2374;
        _2473 = _2375;
    }
    float _2485 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2486 = _2485 == 3.0;
    float _2487 = log2(_2473);
    float _2494 = exp2(_2487 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0))) * (_2317 + ((isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0))) * _579))) + ((_2323 + ((isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0))) * _1389)) * cbPerFrame._m0[3u].x));
    float _2495 = exp2(_2487 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0))) * (_2319 + ((isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0))) * _579))) + ((_2325 + ((isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0))) * _1389)) * cbPerFrame._m0[3u].x));
    float _2496 = exp2(_2487 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0))) * (_2321 + ((isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0))) * _579))) + ((_2327 + ((isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0))) * _1389)) * cbPerFrame._m0[3u].x));
    float _2505 = (_2485 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2505 * (_2486 ? _2494 : (_2494 + (cbSceneParam._m0[72u].w * _2467)));
    SV_Target.y = _2505 * (_2486 ? _2495 : (_2495 + (cbSceneParam._m0[72u].w * _2469)));
    SV_Target.z = _2505 * (_2486 ? _2496 : (_2496 + (cbSceneParam._m0[72u].w * _2471)));
    SV_Target.w = cbInstanceData._m0[_2347].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2347].w;
}


