#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _921;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _192 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _193 = _192 * _184;
    float _194 = _192 * _185;
    float _195 = _192 * _186;
    float _199 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _200 = _199 * NORMAL.x;
    float _201 = _199 * NORMAL.y;
    float _202 = _199 * NORMAL.z;
    float _206 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _207 = _206 * TANGENT.x;
    float _208 = _206 * TANGENT.y;
    float _209 = _206 * TANGENT.z;
    float _214;
    float _215;
    float _216;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _214 = (-0.0) - _200;
        _215 = (-0.0) - _201;
        _216 = (-0.0) - _202;
    }
    else
    {
        _214 = _200;
        _215 = _201;
        _216 = _202;
    }
    vec4 _242 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _248 = _242.x * cbMtdParam._m0[9u].x;
    float _249 = _242.y * cbMtdParam._m0[9u].y;
    float _250 = _242.z * cbMtdParam._m0[9u].z;
    vec4 _268 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _272 = _268.z;
    float _276 = (_268.x * 2.0) + (-1.0);
    float _278 = (_268.y * 2.0) + (-1.0);
    float _279 = dot(vec2(_276, _278), vec2(_276, _278));
    float _3517 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    float _285 = sqrt(1.0 - (isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0))));
    float _288 = fma(_285, _214, fma(_278, _207, _276 * _193));
    float _291 = fma(_285, _215, fma(_278, _208, _276 * _194));
    float _294 = fma(_285, _216, fma(_278, _209, _276 * _195));
    float _298 = inversesqrt(dot(vec3(_288, _291, _294), vec3(_288, _291, _294)));
    float _327 = (cbMtdParam._m0[12u].x + dot(vec4(_298 * _288, _298 * _291, _298 * _294, 0.0), vec4(cbMtdParam._m0[13u].xyz, 0.0))) - (texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w)).x * cbMtdParam._m0[12u].y);
    float _3528 = isnan(0.0) ? _327 : (isnan(_327) ? 0.0 : max(_327, 0.0));
    float _328 = isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0));
    float _335 = (_328 * (cbMtdParam._m0[10u].x - _248)) + _248;
    float _336 = (_328 * (cbMtdParam._m0[10u].y - _249)) + _249;
    float _337 = (_328 * (cbMtdParam._m0[10u].z - _250)) + _250;
    vec4 _349 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _356 = (_349.x * 2.0) + (-1.0);
    float _357 = (_349.y * 2.0) + (-1.0);
    float _358 = dot(vec2(_356, _357), vec2(_356, _357));
    float _3539 = isnan(0.0) ? _358 : (isnan(_358) ? 0.0 : max(_358, 0.0));
    float _366 = ((_349.z - _272) * _328) + _272;
    float _378 = (((_356 - _276) + (cbMtdParam._m0[12u].w * _276)) * _328) + _276;
    float _379 = (((_357 - _278) + (cbMtdParam._m0[12u].w * _278)) * _328) + _278;
    float _380 = ((sqrt(1.0 - (isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0)))) - _285) * _328) + _285;
    float _383 = fma(_380, _214, fma(_379, _207, _378 * _193));
    float _386 = fma(_380, _215, fma(_379, _208, _378 * _194));
    float _389 = fma(_380, _216, fma(_379, _209, _378 * _195));
    float _393 = inversesqrt(dot(vec3(_383, _386, _389), vec3(_383, _386, _389)));
    float _394 = _393 * _383;
    float _395 = _393 * _386;
    float _396 = _393 * _389;
    float _3550 = isnan(0.0) ? _366 : (isnan(_366) ? 0.0 : max(_366, 0.0));
    float _397 = isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0));
    float _3561 = isnan(0.0) ? _335 : (isnan(_335) ? 0.0 : max(_335, 0.0));
    float _3572 = isnan(0.0) ? _336 : (isnan(_336) ? 0.0 : max(_336, 0.0));
    float _3583 = isnan(0.0) ? _337 : (isnan(_337) ? 0.0 : max(_337, 0.0));
    float _416 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _458 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _468 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _458);
    float _469 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _458);
    float _470 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _458);
    float _474 = inversesqrt(dot(vec3(_468, _469, _470), vec3(_468, _469, _470)));
    float _475 = _468 * _474;
    float _476 = _469 * _474;
    float _477 = _470 * _474;
    float _483 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _484 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _505 = fma(_396, cbSceneParam._m0[5u].z, fma(_395, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _394));
    float _508 = fma(_396, cbSceneParam._m0[6u].z, fma(_395, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _394));
    float _511 = fma(_396, cbSceneParam._m0[7u].z, fma(_395, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _394));
    uint _524 = uint(roundEven(NORMAL.w)) * 13u;
    uint _526 = (_524 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _532 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0)))) * cbInstanceData._m0[_526].x;
    float _533 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0)))) * cbInstanceData._m0[_526].y;
    float _534 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0)))) * cbInstanceData._m0[_526].z;
    float _3594 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _535 = isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0));
    float _3605 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _536 = isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0));
    float _3616 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _537 = isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0));
    vec4 _546 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _483, cbSceneParam._m0[86u].y * _484));
    float _549 = _546.x * TEXCOORD_3.w;
    float _550 = dot(vec3(_394, _395, _396), vec3(_475, _476, _477));
    float _553 = _550 * 2.0;
    float _557 = (_553 * _394) - _475;
    float _558 = (_553 * _395) - _476;
    float _559 = (_553 * _396) - _477;
    float _563 = abs(dot(vec3(_475, _476, _477), vec3(_394, _395, _396)));
    float _3627 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _565 = sqrt(_397);
    float _578 = exp2((_565 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_565 * 3.0));
    float _610 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _614 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _618 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _920;
    float _922;
    float _923;
    float _924;
    float _925;
    float _926;
    float _927;
    float _928;
    float _929;
    float _930;
    float _931;
    float _932;
    float _933;
    float _934;
    float _935;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _645 = fma(_618, cbModelParam._m0[26u].z, fma(_614, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _610));
        float _649 = fma(_618, cbModelParam._m0[27u].z, fma(_614, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _610));
        float _653 = fma(_618, cbModelParam._m0[28u].z, fma(_614, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _610));
        float _678 = _610 + _394;
        float _679 = _614 + _395;
        float _680 = _618 + _396;
        float _690 = fma(_680, cbModelParam._m0[26u].z, fma(_679, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _678)) - _645;
        float _691 = fma(_680, cbModelParam._m0[27u].z, fma(_679, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _678)) - _649;
        float _692 = fma(_680, cbModelParam._m0[28u].z, fma(_679, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _678)) - _653;
        float _696 = inversesqrt(dot(vec3(_690, _691, _692), vec3(_690, _691, _692)));
        float _709 = ((_696 * _690) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_645 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _710 = ((_696 * _691) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_649 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _711 = ((_696 * _692) / cbModelParam._m0[34u].z) + ((((((_653 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _714 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_709, _710, _711), 0.0);
        vec4 _721 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_709, _710, _711), 0.0);
        vec4 _728 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_709, _710, _711), 0.0);
        vec4 _735 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_709, _710, _711), 0.0);
        float _748 = exp2((_714.w + (-0.5)) * 20.0) * 2.0;
        float _749 = _748 * (_714.x + (-0.5));
        float _750 = _748 * (_714.y + (-0.5));
        float _751 = _748 * (_714.z + (-0.5));
        float _758 = exp2((_721.w + (-0.5)) * 20.0) * 2.0;
        float _759 = _758 * (_721.x + (-0.5));
        float _760 = _758 * (_721.y + (-0.5));
        float _761 = _758 * (_721.z + (-0.5));
        float _768 = exp2((_728.w + (-0.5)) * 20.0) * 2.0;
        float _769 = _768 * (_728.x + (-0.5));
        float _770 = _768 * (_728.y + (-0.5));
        float _771 = _768 * (_728.z + (-0.5));
        float _778 = exp2((_735.w + (-0.5)) * 20.0) * 2.0;
        float _779 = _778 * (_735.x + (-0.5));
        float _780 = _778 * (_735.y + (-0.5));
        float _781 = _778 * (_735.z + (-0.5));
        float _782 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
        float _783 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
        float _784 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
        float _785 = _749 * 0.5;
        float _786 = _759 * 0.5;
        float _787 = _769 * 0.5;
        float _788 = dot(vec3(_785, _786, _787), vec3(_785, _786, _787));
        float _793 = (_788 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_788);
        float _802 = (dot(vec3(_394, _395, _396), vec3(_793 * _785, _793 * _786, _793 * _787)) + 1.0) * 0.5;
        float _3653 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
        float _812 = sqrt(((_786 * _786) + (_785 * _785)) + (_787 * _787)) / (_782 + 9.9999997473787516355514526367188e-06);
        float _3664 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
        float _813 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
        float _814 = _813 * 2.0;
        float _818 = (1.0 - _813) / (_813 + 1.0);
        float _3675 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
        float _819 = isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0));
        float _828 = ((((1.0 - _819) * (_814 + 2.0)) * exp2(log2(isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0))) * (_814 + 1.0))) + _819) * _782;
        float _829 = _750 * 0.5;
        float _830 = _760 * 0.5;
        float _831 = _770 * 0.5;
        float _832 = dot(vec3(_829, _830, _831), vec3(_829, _830, _831));
        float _837 = (_832 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_832);
        float _845 = (dot(vec3(_394, _395, _396), vec3(_837 * _829, _837 * _830, _837 * _831)) + 1.0) * 0.5;
        float _3686 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
        float _854 = sqrt(((_830 * _830) + (_829 * _829)) + (_831 * _831)) / (_783 + 9.9999997473787516355514526367188e-06);
        float _3697 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
        float _855 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
        float _856 = _855 * 2.0;
        float _860 = (1.0 - _855) / (_855 + 1.0);
        float _3708 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
        float _861 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
        float _870 = ((((1.0 - _861) * (_856 + 2.0)) * exp2(log2(isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0))) * (_856 + 1.0))) + _861) * _783;
        float _871 = _751 * 0.5;
        float _872 = _761 * 0.5;
        float _873 = _771 * 0.5;
        float _874 = dot(vec3(_871, _872, _873), vec3(_871, _872, _873));
        float _879 = (_874 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_874);
        float _887 = (dot(vec3(_394, _395, _396), vec3(_879 * _871, _879 * _872, _879 * _873)) + 1.0) * 0.5;
        float _3719 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
        float _896 = sqrt(((_872 * _872) + (_871 * _871)) + (_873 * _873)) / (_784 + 9.9999997473787516355514526367188e-06);
        float _3730 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
        float _897 = isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0));
        float _898 = _897 * 2.0;
        float _902 = (1.0 - _897) / (_897 + 1.0);
        float _3741 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
        float _903 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
        float _912 = ((((1.0 - _903) * (_898 + 2.0)) * exp2(log2(isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0))) * (_898 + 1.0))) + _903) * _784;
        _920 = _751;
        _922 = _750;
        _923 = _749;
        _924 = _761;
        _925 = _760;
        _926 = _759;
        _927 = _771;
        _928 = _770;
        _929 = _769;
        _930 = _784;
        _931 = _783;
        _932 = _782;
        _933 = cbModelParam._m0[36u].z * (isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0)));
        _934 = cbModelParam._m0[36u].z * (isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0)));
        _935 = cbModelParam._m0[36u].z * (isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0)));
    }
    else
    {
        _920 = _921;
        _922 = _921;
        _923 = _921;
        _924 = _921;
        _925 = _921;
        _926 = _921;
        _927 = _921;
        _928 = _921;
        _929 = _921;
        _930 = _921;
        _931 = _921;
        _932 = _921;
        _933 = 0.0;
        _934 = 0.0;
        _935 = 0.0;
    }
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _961 = fma(_618, cbModelParam._m0[30u].z, fma(_614, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _610));
        float _965 = fma(_618, cbModelParam._m0[31u].z, fma(_614, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _610));
        float _969 = fma(_618, cbModelParam._m0[32u].z, fma(_614, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _610));
        float _992 = _610 + _394;
        float _993 = _614 + _395;
        float _994 = _618 + _396;
        float _1004 = fma(_994, cbModelParam._m0[30u].z, fma(_993, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _992)) - _961;
        float _1005 = fma(_994, cbModelParam._m0[31u].z, fma(_993, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _992)) - _965;
        float _1006 = fma(_994, cbModelParam._m0[32u].z, fma(_993, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _992)) - _969;
        float _1010 = inversesqrt(dot(vec3(_1004, _1005, _1006), vec3(_1004, _1005, _1006)));
        float _1023 = ((_1010 * _1004) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_961 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1024 = ((_1010 * _1005) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_965 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1025 = ((_1010 * _1006) / cbModelParam._m0[35u].z) + ((((((_969 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1027 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1023, _1024, _1025), 0.0);
        vec4 _1034 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1023, _1024, _1025), 0.0);
        vec4 _1041 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1023, _1024, _1025), 0.0);
        vec4 _1048 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1023, _1024, _1025), 0.0);
        float _1060 = exp2((_1027.w + (-0.5)) * 20.0) * 2.0;
        float _1061 = _1060 * (_1027.x + (-0.5));
        float _1062 = _1060 * (_1027.y + (-0.5));
        float _1063 = _1060 * (_1027.z + (-0.5));
        float _1070 = exp2((_1034.w + (-0.5)) * 20.0) * 2.0;
        float _1071 = _1070 * (_1034.x + (-0.5));
        float _1072 = _1070 * (_1034.y + (-0.5));
        float _1073 = _1070 * (_1034.z + (-0.5));
        float _1080 = exp2((_1041.w + (-0.5)) * 20.0) * 2.0;
        float _1081 = _1080 * (_1041.x + (-0.5));
        float _1082 = _1080 * (_1041.y + (-0.5));
        float _1083 = _1080 * (_1041.z + (-0.5));
        float _1090 = exp2((_1048.w + (-0.5)) * 20.0) * 2.0;
        float _1091 = _1090 * (_1048.x + (-0.5));
        float _1092 = _1090 * (_1048.y + (-0.5));
        float _1093 = _1090 * (_1048.z + (-0.5));
        float _1094 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1095 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1096 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1097 = _1061 * 0.5;
        float _1098 = _1071 * 0.5;
        float _1099 = _1081 * 0.5;
        float _1100 = dot(vec3(_1097, _1098, _1099), vec3(_1097, _1098, _1099));
        float _1105 = (_1100 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1100);
        float _1113 = (dot(vec3(_394, _395, _396), vec3(_1105 * _1097, _1105 * _1098, _1105 * _1099)) + 1.0) * 0.5;
        float _3782 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1122 = sqrt(((_1098 * _1098) + (_1097 * _1097)) + (_1099 * _1099)) / (_1094 + 9.9999997473787516355514526367188e-06);
        float _3793 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1123 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
        float _1124 = _1123 * 2.0;
        float _1128 = (1.0 - _1123) / (_1123 + 1.0);
        float _3804 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1129 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
        float _1138 = ((((1.0 - _1129) * (_1124 + 2.0)) * exp2(log2(isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0))) * (_1124 + 1.0))) + _1129) * _1094;
        float _1139 = _1062 * 0.5;
        float _1140 = _1072 * 0.5;
        float _1141 = _1082 * 0.5;
        float _1142 = dot(vec3(_1139, _1140, _1141), vec3(_1139, _1140, _1141));
        float _1147 = (_1142 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1142);
        float _1155 = (dot(vec3(_394, _395, _396), vec3(_1147 * _1139, _1147 * _1140, _1147 * _1141)) + 1.0) * 0.5;
        float _3815 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1164 = sqrt(((_1140 * _1140) + (_1139 * _1139)) + (_1141 * _1141)) / (_1095 + 9.9999997473787516355514526367188e-06);
        float _3826 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1165 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
        float _1166 = _1165 * 2.0;
        float _1170 = (1.0 - _1165) / (_1165 + 1.0);
        float _3837 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1171 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
        float _1180 = ((((1.0 - _1171) * (_1166 + 2.0)) * exp2(log2(isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0))) * (_1166 + 1.0))) + _1171) * _1095;
        float _1181 = _1063 * 0.5;
        float _1182 = _1073 * 0.5;
        float _1183 = _1083 * 0.5;
        float _1184 = dot(vec3(_1181, _1182, _1183), vec3(_1181, _1182, _1183));
        float _1189 = (_1184 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1184);
        float _1197 = (dot(vec3(_394, _395, _396), vec3(_1189 * _1181, _1189 * _1182, _1189 * _1183)) + 1.0) * 0.5;
        float _3848 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1206 = sqrt(((_1182 * _1182) + (_1181 * _1181)) + (_1183 * _1183)) / (_1096 + 9.9999997473787516355514526367188e-06);
        float _3859 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1207 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
        float _1208 = _1207 * 2.0;
        float _1212 = (1.0 - _1207) / (_1207 + 1.0);
        float _3870 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1213 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
        float _1222 = ((((1.0 - _1213) * (_1208 + 2.0)) * exp2(log2(isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0))) * (_1208 + 1.0))) + _1213) * _1096;
        _1230 = _1063;
        _1231 = _1062;
        _1232 = _1061;
        _1233 = _1073;
        _1234 = _1072;
        _1235 = _1071;
        _1236 = _1083;
        _1237 = _1082;
        _1238 = _1081;
        _1239 = _1096;
        _1240 = _1095;
        _1241 = _1094;
        _1242 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0)));
        _1243 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0)));
        _1244 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0)));
    }
    else
    {
        _1230 = _921;
        _1231 = _921;
        _1232 = _921;
        _1233 = _921;
        _1234 = _921;
        _1235 = _921;
        _1236 = _921;
        _1237 = _921;
        _1238 = _921;
        _1239 = _921;
        _1240 = _921;
        _1241 = _921;
        _1242 = 0.0;
        _1243 = 0.0;
        _1244 = 0.0;
    }
    float _1254 = (cbModelParam._m0[1u].x * (_1242 - _933)) + _933;
    float _1255 = (cbModelParam._m0[1u].x * (_1243 - _934)) + _934;
    float _1256 = (cbModelParam._m0[1u].x * (_1244 - _935)) + _935;
    float _1277 = fma(_1256, cbSceneParam._m0[89u].z, fma(_1255, cbSceneParam._m0[89u].y, _1254 * cbSceneParam._m0[89u].x));
    float _1280 = fma(_1256, cbSceneParam._m0[90u].z, fma(_1255, cbSceneParam._m0[90u].y, _1254 * cbSceneParam._m0[90u].x));
    float _1283 = fma(_1256, cbSceneParam._m0[91u].z, fma(_1255, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1254));
    float _1298 = _557 * 0.5;
    float _1299 = _558 * 0.5;
    float _1300 = _559 * 0.5;
    float _1301 = dot(vec4(_1298, _1299, _1300, 1.0), vec4(_1232, _1235, _1238, _1241));
    float _1304 = dot(vec4(_1298, _1299, _1300, 1.0), vec4(_1231, _1234, _1237, _1240));
    float _1307 = dot(vec4(_1298, _1299, _1300, 1.0), vec4(_1230, _1233, _1236, _1239));
    float _1341;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1314 = dot(vec4(_1298, _1299, _1300, 1.0), vec4(_920, _924, _927, _930));
        float _1318 = dot(vec4(_1298, _1299, _1300, 1.0), vec4(_922, _925, _928, _931));
        float _1322 = dot(vec4(_1298, _1299, _1300, 1.0), vec4(_923, _926, _929, _932));
        float _1329 = dot(vec4(cbModelParam._m0[39u]), vec4(_1298, _1299, _1300, 1.0));
        _1341 = dot(vec3(isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0)), isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0)), isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1329) ? 0.0 : (isnan(0.0) ? _1329 : max(0.0, _1329))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1341 = 1.0;
    }
    float _1352;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1343 = dot(vec4(cbModelParam._m0[40u]), vec4(_1298, _1299, _1300, 1.0));
        _1352 = dot(vec3(isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0)), isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0)), isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1343) ? 0.0 : (isnan(0.0) ? _1343 : max(0.0, _1343))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1352 = 1.0;
    }
    float _1356 = (_1352 * cbModelParam._m0[1u].x) + (_1341 * (1.0 - cbModelParam._m0[1u].x));
    float _1366 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _397);
    float _1367 = isnan(_1366) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1366 : min(cbModelParam._m0[25u].z, _1366));
    float _1448;
    float _1450;
    float _1452;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1415 = fma(_618, cbModelParam._m0[13u].z, fma(_614, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _610)) + cbModelParam._m0[13u].w;
        float _1419 = fma(_618, cbModelParam._m0[14u].z, fma(_614, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _610)) + cbModelParam._m0[14u].w;
        float _1423 = fma(_618, cbModelParam._m0[15u].z, fma(_614, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _610)) + cbModelParam._m0[15u].w;
        float _1426 = fma(_559, cbModelParam._m0[13u].z, fma(_558, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _557));
        float _1429 = fma(_559, cbModelParam._m0[14u].z, fma(_558, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _557));
        float _1432 = fma(_559, cbModelParam._m0[15u].z, fma(_558, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _557));
        float _1460;
        if (_1426 > 0.0)
        {
            _1460 = abs((1.0 - _1415) / _1426);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1426 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1415 + 1.0) / _1426);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1460 = frontier_phi_16_14_ladder;
        }
        float _1633;
        if (_1429 > 0.0)
        {
            _1633 = abs((1.0 - _1419) / _1429);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1429 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1419 + 1.0) / _1429);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1633 = frontier_phi_25_21_ladder;
        }
        float _1928;
        if (_1432 > 0.0)
        {
            _1928 = abs((1.0 - _1423) / _1432);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1432 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1423 + 1.0) / _1432);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1928 = frontier_phi_37_32_ladder;
        }
        float _1930 = isnan(_1633) ? _1460 : (isnan(_1460) ? _1633 : min(_1460, _1633));
        float _1931 = isnan(_1928) ? _1930 : (isnan(_1930) ? _1928 : min(_1930, _1928));
        float _1935 = (_1931 * _1426) + _1415;
        float _1936 = (_1931 * _1429) + _1419;
        float _1937 = (_1931 * _1432) + _1423;
        float _1938 = _1931 * 9.9999997473787516355514526367188e-05;
        float _1940 = (-1.0) - _1938;
        float _1942 = _1938 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1937 > _1942) || ((_1937 < _1940) || ((_1936 > _1942) || ((_1936 < _1940) || ((_1935 < _1940) || (_1935 > _1942))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2082 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1937, cbModelParam._m0[9u].z, fma(_1936, cbModelParam._m0[9u].y, _1935 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1937, cbModelParam._m0[10u].z, fma(_1936, cbModelParam._m0[10u].y, _1935 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1937, cbModelParam._m0[11u].z, fma(_1936, cbModelParam._m0[11u].y, _1935 * cbModelParam._m0[11u].x))), _1367);
            frontier_phi_15_37_ladder = _2082.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2082.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2082.z * cbModelParam._m0[1u].y;
        }
        _1448 = frontier_phi_15_37_ladder_1;
        _1450 = frontier_phi_15_37_ladder;
        _1452 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1436 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_557, _558, _559), _1367);
        _1448 = _1436.x * cbModelParam._m0[1u].y;
        _1450 = _1436.y * cbModelParam._m0[1u].y;
        _1452 = _1436.z * cbModelParam._m0[1u].y;
    }
    float _1456 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _397);
    float _1457 = isnan(_1456) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1456 : min(cbModelParam._m0[25u].w, _1456));
    float _1550;
    float _1552;
    float _1554;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1514 = fma(_618, cbModelParam._m0[21u].z, fma(_614, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _610)) + cbModelParam._m0[21u].w;
        float _1518 = fma(_618, cbModelParam._m0[22u].z, fma(_614, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _610)) + cbModelParam._m0[22u].w;
        float _1522 = fma(_618, cbModelParam._m0[23u].z, fma(_614, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _610)) + cbModelParam._m0[23u].w;
        float _1525 = fma(_559, cbModelParam._m0[21u].z, fma(_558, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _557));
        float _1528 = fma(_559, cbModelParam._m0[22u].z, fma(_558, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _557));
        float _1531 = fma(_559, cbModelParam._m0[23u].z, fma(_558, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _557));
        float _1638;
        if (_1525 > 0.0)
        {
            _1638 = abs((1.0 - _1514) / _1525);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1525 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1514 + 1.0) / _1525);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1638 = frontier_phi_27_23_ladder;
        }
        float _1955;
        if (_1528 > 0.0)
        {
            _1955 = abs((1.0 - _1518) / _1528);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1528 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1518 + 1.0) / _1528);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1955 = frontier_phi_39_34_ladder;
        }
        float _2282;
        if (_1531 > 0.0)
        {
            _2282 = abs((1.0 - _1522) / _1531);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1531 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1522 + 1.0) / _1531);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2282 = frontier_phi_49_46_ladder;
        }
        float _2284 = isnan(_1955) ? _1638 : (isnan(_1638) ? _1955 : min(_1638, _1955));
        float _2285 = isnan(_2282) ? _2284 : (isnan(_2284) ? _2282 : min(_2284, _2282));
        float _2289 = (_2285 * _1525) + _1514;
        float _2290 = (_2285 * _1528) + _1518;
        float _2291 = (_2285 * _1531) + _1522;
        float _2292 = _2285 * 9.9999997473787516355514526367188e-05;
        float _2293 = (-1.0) - _2292;
        float _2295 = _2292 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2291 > _2295) || ((_2291 < _2293) || ((_2290 > _2295) || ((_2290 < _2293) || ((_2289 < _2293) || (_2289 > _2295))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2409 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2291, cbModelParam._m0[17u].z, fma(_2290, cbModelParam._m0[17u].y, _2289 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2291, cbModelParam._m0[18u].z, fma(_2290, cbModelParam._m0[18u].y, _2289 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2291, cbModelParam._m0[19u].z, fma(_2290, cbModelParam._m0[19u].y, _2289 * cbModelParam._m0[19u].x))), _1457);
            frontier_phi_24_49_ladder = _2409.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2409.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2409.x * cbModelParam._m0[1u].z;
        }
        _1550 = frontier_phi_24_49_ladder_2;
        _1552 = frontier_phi_24_49_ladder_1;
        _1554 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1534 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_557, _558, _559), _1457);
        _1550 = _1534.x * cbModelParam._m0[1u].z;
        _1552 = _1534.y * cbModelParam._m0[1u].z;
        _1554 = _1534.z * cbModelParam._m0[1u].z;
    }
    float _1566 = ((((1.0 - _578) * ((_565 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_578 * _565)) * _549;
    float _1567 = _1566 * ((cbModelParam._m0[1u].w * (_1550 - _1448)) + _1448);
    float _1568 = _1566 * ((cbModelParam._m0[1u].w * (_1552 - _1450)) + _1450);
    float _1569 = _1566 * ((cbModelParam._m0[1u].w * (_1554 - _1452)) + _1452);
    float _1572 = fma(_1569, cbSceneParam._m0[89u].z, fma(_1568, cbSceneParam._m0[89u].y, _1567 * cbSceneParam._m0[89u].x));
    float _1575 = fma(_1569, cbSceneParam._m0[90u].z, fma(_1568, cbSceneParam._m0[90u].y, _1567 * cbSceneParam._m0[90u].x));
    float _1578 = fma(_1569, cbSceneParam._m0[91u].z, fma(_1568, cbSceneParam._m0[91u].y, _1567 * cbSceneParam._m0[91u].x));
    float _1612 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1616 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1620 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1624 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1625 = _1612 / _1624;
    float _1626 = _1616 / _1624;
    float _1627 = _1620 / _1624;
    float _1774;
    float _1775;
    float _1776;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1654 = ((uint(_1627 > cbSceneParam._m0[59u].y) + uint(_1627 > cbSceneParam._m0[59u].x)) + uint(_1627 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1655 = _1654 + 43u;
        uint _1663 = _1654 + 44u;
        uint _1671 = _1654 + 45u;
        uint _1679 = _1654 + 46u;
        float _1690 = fma(_1624, cbSceneParam._m0[_1655].w, fma(_1620, cbSceneParam._m0[_1655].z, fma(_1616, cbSceneParam._m0[_1655].y, _1612 * cbSceneParam._m0[_1655].x)));
        float _1694 = fma(_1624, cbSceneParam._m0[_1663].w, fma(_1620, cbSceneParam._m0[_1663].z, fma(_1616, cbSceneParam._m0[_1663].y, _1612 * cbSceneParam._m0[_1663].x)));
        float _1702 = fma(_1624, cbSceneParam._m0[_1679].w, fma(_1620, cbSceneParam._m0[_1679].z, fma(_1616, cbSceneParam._m0[_1679].y, _1612 * cbSceneParam._m0[_1679].x)));
        float _1707 = cbSceneParam._m0[33u].z * _1702;
        float _1709 = cbSceneParam._m0[33u].w * _1702;
        float _1712 = fma(_1624, cbSceneParam._m0[_1671].w, fma(_1620, cbSceneParam._m0[_1671].z, fma(_1616, cbSceneParam._m0[_1671].y, _1612 * cbSceneParam._m0[_1671].x))) / _1702;
        float _1760 = (cbSceneParam._m0[33u].x - sqrt(((_1626 * _1626) + (_1625 * _1625)) + (_1627 * _1627))) * cbSceneParam._m0[33u].y;
        float _3996 = isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0));
        float _1767 = (isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1707 + _1690) / _1702, (_1709 + _1694) / _1702), _1712), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1709 + _1690) / _1702, (_1694 - _1707) / _1702), _1712), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1690 - _1707) / _1702, (_1694 - _1709) / _1702), _1712), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1690 - _1709) / _1702, (_1707 + _1694) / _1702), _1712), 0.0)).x), vec4(0.25)));
        _1774 = 1.0 - (_1767 * cbSceneParam._m0[34u].x);
        _1775 = 1.0 - (_1767 * cbSceneParam._m0[34u].y);
        _1776 = 1.0 - (_1767 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1774 = 1.0;
        _1775 = 1.0;
        _1776 = 1.0;
    }
    float _1840;
    float _1842;
    float _1844;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1828 = fma(_1624, cbSceneParam._m0[63u].w, fma(_1620, cbSceneParam._m0[63u].z, fma(_1616, cbSceneParam._m0[63u].y, _1612 * cbSceneParam._m0[63u].x)));
        float _1829 = fma(_1624, cbSceneParam._m0[60u].w, fma(_1620, cbSceneParam._m0[60u].z, fma(_1616, cbSceneParam._m0[60u].y, _1612 * cbSceneParam._m0[60u].x))) / _1828;
        float _1830 = fma(_1624, cbSceneParam._m0[61u].w, fma(_1620, cbSceneParam._m0[61u].z, fma(_1616, cbSceneParam._m0[61u].y, _1612 * cbSceneParam._m0[61u].x))) / _1828;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1829 >= cbSceneParam._m0[64u].x) && (_1830 >= cbSceneParam._m0[64u].y)) && (_1829 <= cbSceneParam._m0[64u].z)) && (_1830 <= cbSceneParam._m0[64u].w))
        {
            float _1968 = fma(_1624, cbSceneParam._m0[62u].w, fma(_1620, cbSceneParam._m0[62u].z, fma(_1616, cbSceneParam._m0[62u].y, _1612 * cbSceneParam._m0[62u].x))) / _1828;
            float _1972 = isnan(cbSceneParam._m0[41u].w) ? _1968 : (isnan(_1968) ? cbSceneParam._m0[41u].w : max(_1968, cbSceneParam._m0[41u].w));
            float _2015 = (cbSceneParam._m0[33u].x - sqrt(((_1626 * _1626) + (_1625 * _1625)) + (_1627 * _1627))) * cbSceneParam._m0[33u].y;
            float _4012 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
            float _2022 = (isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1829, cbSceneParam._m0[33u].w + _1830), _1972), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1829, _1830 - cbSceneParam._m0[33u].z), _1972), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1829 - cbSceneParam._m0[33u].z, _1830 - cbSceneParam._m0[33u].w), _1972), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1829 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1830), _1972), 0.0)).x), vec4(0.25)));
            float _2026 = 1.0 - (_2022 * cbSceneParam._m0[34u].x);
            float _2027 = 1.0 - (_2022 * cbSceneParam._m0[34u].y);
            float _2028 = 1.0 - (_2022 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2027) ? _1775 : (isnan(_1775) ? _2027 : min(_1775, _2027));
            frontier_phi_36_35_ladder_1 = isnan(_2028) ? _1776 : (isnan(_1776) ? _2028 : min(_1776, _2028));
            frontier_phi_36_35_ladder_2 = isnan(_2026) ? _1774 : (isnan(_1774) ? _2026 : min(_1774, _2026));
        }
        else
        {
            frontier_phi_36_35_ladder = _1775;
            frontier_phi_36_35_ladder_1 = _1776;
            frontier_phi_36_35_ladder_2 = _1774;
        }
        _1840 = frontier_phi_36_35_ladder_2;
        _1842 = frontier_phi_36_35_ladder;
        _1844 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _1840 = _1774;
        _1842 = _1775;
        _1844 = _1776;
    }
    uvec4 _1849 = floatBitsToUint(cbInstanceData._m0[_524 + 5u]);
    uint _1851 = _1849.x * 14u;
    uint _1852 = _1851 + 13u;
    float _1859 = _549 + (-1.0);
    float _1864 = (cbLight._m0[_1852].x * _1859) + 1.0;
    float _1865 = (cbLight._m0[_1852].y * _1859) + 1.0;
    float _1866 = (cbLight._m0[_1852].z * _1859) + 1.0;
    float _1867 = (cbLight._m0[_1852].w * _1859) + 1.0;
    uint _1868 = _1851 + 5u;
    float _1874 = isnan(1.0) ? _1865 : (isnan(_1865) ? 1.0 : min(_1865, 1.0));
    uint _1878 = _1851 + 4u;
    float _1887 = isnan(1.0) ? _1864 : (isnan(_1864) ? 1.0 : min(_1864, 1.0));
    uint _1891 = _1851 | 1u;
    float _1902 = dot(vec3(cbLight._m0[_1851].xyz), vec3(_394, _395, _396));
    float _1905 = dot(vec3(cbLight._m0[_1891].xyz), vec3(_394, _395, _396));
    float _4048 = isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0));
    float _4059 = isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0));
    float _1910 = (isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0))) * 0.3183098733425140380859375;
    float _1912 = (isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0))) * 0.3183098733425140380859375;
    float _1919 = ((cbLight._m0[_1868].x * _1874) * _1912) + (((cbLight._m0[_1878].x * _1840) * _1887) * _1910);
    float _1920 = ((_1874 * cbLight._m0[_1868].y) * _1912) + (((cbLight._m0[_1878].y * _1842) * _1887) * _1910);
    float _1921 = ((_1874 * cbLight._m0[_1868].z) * _1912) + (((cbLight._m0[_1878].z * _1844) * _1887) * _1910);
    uvec4 _1925 = floatBitsToUint(cbLight._m0[_1851 + 12u]);
    bool _1927 = _1925.x == 0u;
    float _2029;
    float _2031;
    float _2033;
    if (_1927)
    {
        _2029 = _1919;
        _2031 = _1920;
        _2033 = _1921;
    }
    else
    {
        uint _2037 = _1851 + 6u;
        float _2053 = (dot(vec3(cbLight._m0[_1851 + 2u].xyz), vec3(_394, _395, _396)) * 0.5) + 0.5;
        float _2054 = _2053 * _2053;
        float _4070 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
        float _2055 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _2056 = isnan(1.0) ? _1866 : (isnan(_1866) ? 1.0 : min(_1866, 1.0));
        _2029 = (((cbLight._m0[_2037].x * 0.3183098733425140380859375) * _2055) * _2056) + _1919;
        _2031 = (((cbLight._m0[_2037].y * 0.3183098733425140380859375) * _2055) * _2056) + _1920;
        _2033 = (((cbLight._m0[_2037].z * 0.3183098733425140380859375) * _2055) * _2056) + _1921;
    }
    bool _2036 = _1925.y == 0u;
    float _2091;
    float _2093;
    float _2095;
    if (_2036)
    {
        _2091 = _2029;
        _2093 = _2031;
        _2095 = _2033;
    }
    else
    {
        uint _2253 = _1851 + 7u;
        float _2269 = (dot(vec3(cbLight._m0[_1851 + 3u].xyz), vec3(_394, _395, _396)) * 0.5) + 0.5;
        float _2270 = _2269 * _2269;
        float _4086 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
        float _2271 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
        float _2272 = isnan(1.0) ? _1867 : (isnan(_1867) ? 1.0 : min(_1867, 1.0));
        _2091 = (((cbLight._m0[_2253].x * 0.3183098733425140380859375) * _2271) * _2272) + _2029;
        _2093 = (((cbLight._m0[_2253].y * 0.3183098733425140380859375) * _2271) * _2272) + _2031;
        _2095 = (((cbLight._m0[_2253].z * 0.3183098733425140380859375) * _2271) * _2272) + _2033;
    }
    uint _2098 = _1851 + 8u;
    float _2111 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1851].w)) * _397) * 0.949999988079071044921875);
    float _2112 = _2111 * _2111;
    float _2113 = cbLight._m0[_1851].x + _475;
    float _2114 = cbLight._m0[_1851].y + _476;
    float _2115 = cbLight._m0[_1851].z + _477;
    float _2119 = inversesqrt(dot(vec3(_2113, _2114, _2115), vec3(_2113, _2114, _2115)));
    float _2120 = _2119 * _2113;
    float _2121 = _2119 * _2114;
    float _2122 = _2119 * _2115;
    float _2123 = dot(vec3(_394, _395, _396), vec3(cbLight._m0[_1851].xyz));
    float _4102 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
    float _2126 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
    float _4113 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _2127 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
    float _2128 = dot(vec3(_394, _395, _396), vec3(_2120, _2121, _2122));
    float _4124 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
    float _2131 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
    float _2132 = dot(vec3(cbLight._m0[_1851].xyz), vec3(_2120, _2121, _2122));
    float _4135 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
    float _2136 = _2112 * _2112;
    float _2140 = ((_2131 * _2131) * (_2136 + (-1.0))) + 1.0;
    float _2151 = (exp2(log2(1.0 - (isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2152 = 1.0 - _2112;
    float _2163 = (0.5 / (((_2127 * ((_2126 * _2152) + _2112)) + 9.9999999392252902907785028219223e-09) + (((_2127 * _2152) + _2112) * _2126))) * _2126;
    float _4146 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
    float _2165 = (isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0))) * (_2136 / ((_2140 * _2140) * 3.141590118408203125));
    uint _2179 = _1851 + 9u;
    float _2190 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1891].w)) * _397) * 0.949999988079071044921875);
    float _2191 = _2190 * _2190;
    float _2192 = cbLight._m0[_1891].x + _475;
    float _2193 = cbLight._m0[_1891].y + _476;
    float _2194 = cbLight._m0[_1891].z + _477;
    float _2198 = inversesqrt(dot(vec3(_2192, _2193, _2194), vec3(_2192, _2193, _2194)));
    float _2199 = _2198 * _2192;
    float _2200 = _2198 * _2193;
    float _2201 = _2198 * _2194;
    float _2202 = dot(vec3(_394, _395, _396), vec3(cbLight._m0[_1891].xyz));
    float _4157 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
    float _2205 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
    float _2206 = dot(vec3(_394, _395, _396), vec3(_2199, _2200, _2201));
    float _4168 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
    float _2209 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
    float _2210 = dot(vec3(cbLight._m0[_1891].xyz), vec3(_2199, _2200, _2201));
    float _4179 = isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0));
    float _2214 = _2191 * _2191;
    float _2218 = ((_2209 * _2209) * (_2214 + (-1.0))) + 1.0;
    float _2227 = (exp2(log2(1.0 - (isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2228 = 1.0 - _2191;
    float _2238 = (0.5 / (((_2127 * ((_2205 * _2228) + _2191)) + 9.9999999392252902907785028219223e-09) + (((_2127 * _2228) + _2191) * _2205))) * _2205;
    float _4190 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
    float _2240 = (isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0))) * (_2214 / ((_2218 * _2218) * 3.141590118408203125));
    float _2250 = (((_2227 * cbLight._m0[_2179].x) * _2240) * _1874) + ((((cbLight._m0[_2098].x * _1840) * _2151) * _2165) * _1887);
    float _2251 = (((_2227 * cbLight._m0[_2179].y) * _2240) * _1874) + ((((cbLight._m0[_2098].y * _1842) * _2151) * _2165) * _1887);
    float _2252 = (((_2227 * cbLight._m0[_2179].z) * _2240) * _1874) + ((((cbLight._m0[_2098].z * _1844) * _2151) * _2165) * _1887);
    float _2308;
    float _2310;
    float _2312;
    if (_1927)
    {
        _2308 = _2250;
        _2310 = _2251;
        _2312 = _2252;
    }
    else
    {
        uint _2314 = _1851 + 2u;
        uint _2318 = _1851 + 10u;
        float _2332 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2314].w)) * _397) * 0.949999988079071044921875);
        float _2333 = _2332 * _2332;
        float _2334 = cbLight._m0[_2314].x + _475;
        float _2335 = cbLight._m0[_2314].y + _476;
        float _2336 = cbLight._m0[_2314].z + _477;
        float _2340 = inversesqrt(dot(vec3(_2334, _2335, _2336), vec3(_2334, _2335, _2336)));
        float _2341 = _2340 * _2334;
        float _2342 = _2340 * _2335;
        float _2343 = _2340 * _2336;
        float _2344 = dot(vec3(_394, _395, _396), vec3(cbLight._m0[_2314].xyz));
        float _4201 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
        float _2347 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
        float _2348 = dot(vec3(_394, _395, _396), vec3(_2341, _2342, _2343));
        float _4212 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
        float _2351 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
        float _2352 = dot(vec3(cbLight._m0[_2314].xyz), vec3(_2341, _2342, _2343));
        float _4223 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
        float _2356 = _2333 * _2333;
        float _2360 = ((_2351 * _2351) * (_2356 + (-1.0))) + 1.0;
        float _2369 = (exp2(log2(1.0 - (isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2370 = 1.0 - _2333;
        float _2380 = (0.5 / (((_2127 * ((_2347 * _2370) + _2333)) + 9.9999999392252902907785028219223e-09) + (((_2127 * _2370) + _2333) * _2347))) * _2347;
        float _4234 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
        float _2382 = (isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0))) * (_2356 / ((_2360 * _2360) * 3.141590118408203125));
        float _2383 = isnan(1.0) ? _1866 : (isnan(_1866) ? 1.0 : min(_1866, 1.0));
        _2308 = (((_2369 * cbLight._m0[_2318].x) * _2382) * _2383) + _2250;
        _2310 = (((_2369 * cbLight._m0[_2318].y) * _2382) * _2383) + _2251;
        _2312 = (((_2369 * cbLight._m0[_2318].z) * _2382) * _2383) + _2252;
    }
    float _2414;
    float _2416;
    float _2418;
    if (_2036)
    {
        _2414 = _2308;
        _2416 = _2310;
        _2418 = _2312;
    }
    else
    {
        uint _2425 = _1851 + 3u;
        uint _2429 = _1851 + 11u;
        float _2443 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2425].w)) * _397) * 0.949999988079071044921875);
        float _2444 = _2443 * _2443;
        float _2445 = cbLight._m0[_2425].x + _475;
        float _2446 = cbLight._m0[_2425].y + _476;
        float _2447 = cbLight._m0[_2425].z + _477;
        float _2451 = inversesqrt(dot(vec3(_2445, _2446, _2447), vec3(_2445, _2446, _2447)));
        float _2452 = _2451 * _2445;
        float _2453 = _2451 * _2446;
        float _2454 = _2451 * _2447;
        float _2455 = dot(vec3(_394, _395, _396), vec3(cbLight._m0[_2425].xyz));
        float _4250 = isnan(0.0) ? _2455 : (isnan(_2455) ? 0.0 : max(_2455, 0.0));
        float _2458 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
        float _2459 = dot(vec3(_394, _395, _396), vec3(_2452, _2453, _2454));
        float _4261 = isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0));
        float _2462 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
        float _2463 = dot(vec3(cbLight._m0[_2425].xyz), vec3(_2452, _2453, _2454));
        float _4272 = isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0));
        float _2467 = _2444 * _2444;
        float _2471 = ((_2462 * _2462) * (_2467 + (-1.0))) + 1.0;
        float _2480 = (exp2(log2(1.0 - (isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2481 = 1.0 - _2444;
        float _2491 = (0.5 / (((_2127 * ((_2458 * _2481) + _2444)) + 9.9999999392252902907785028219223e-09) + (((_2127 * _2481) + _2444) * _2458))) * _2458;
        float _4283 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0));
        float _2493 = (isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0))) * (_2467 / ((_2471 * _2471) * 3.141590118408203125));
        float _2494 = isnan(1.0) ? _1867 : (isnan(_1867) ? 1.0 : min(_1867, 1.0));
        _2414 = (((_2480 * cbLight._m0[_2429].x) * _2493) * _2494) + _2308;
        _2416 = (((_2480 * cbLight._m0[_2429].y) * _2493) * _2494) + _2310;
        _2418 = (((_2480 * cbLight._m0[_2429].z) * _2493) * _2494) + _2312;
    }
    float _2559;
    float _2561;
    float _2563;
    float _2565;
    float _2567;
    float _2569;
    if (_1849.y == 0u)
    {
        uvec4 _2515 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2516 = _2515.x;
        uint _2527 = uint((float(_2515.y) * floor(float(uint(cbSceneParam._m0[85u].y * _484) / _2516))) + floor(float(uint(cbSceneParam._m0[85u].x * _483) / _2516)));
        float _2537 = (log2(_1627 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2538 = isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0));
        uint _2541 = uint(isnan(14.0) ? _2538 : (isnan(_2538) ? 14.0 : min(_2538, 14.0)));
        uvec4 _2546 = texelFetch(g_lightClusterGridBuffer, int(((_2541 << 2u) + (_2527 << 6u)) >> 2u));
        uint _2547 = _2546.x;
        uint _2548 = _2515.z;
        float _2626;
        float _2628;
        float _2630;
        float _2632;
        float _2634;
        float _2636;
        if (((((1u << ((_2548 >> 4u) & 15u)) + 4294967295u) & _2547) == 0u) || ((_2548 & 240u) == 0u))
        {
            _2626 = 0.0;
            _2628 = 0.0;
            _2630 = 0.0;
            _2632 = 0.0;
            _2634 = 0.0;
            _2636 = 0.0;
        }
        else
        {
            float _2627;
            float _2629;
            float _2631;
            float _2633;
            float _2635;
            float _2637;
            float _2770 = 0.0;
            float _2771 = 0.0;
            float _2772 = 0.0;
            float _2773 = 0.0;
            float _2774 = 0.0;
            float _2775 = 0.0;
            uint _2776 = 0u;
            uint _2785;
            bool _2786;
            for (;;)
            {
                _2785 = texelFetch(g_lightClassification, int((((_2541 << 5u) + (_2527 << 9u)) + (_2776 << 2u)) >> 2u)).x;
                _2786 = _2785 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2786)
                {
                    frontier_phi_68_pred = _2775;
                    frontier_phi_68_pred_1 = _2774;
                    frontier_phi_68_pred_2 = _2773;
                    frontier_phi_68_pred_3 = _2771;
                    frontier_phi_68_pred_4 = _2770;
                    frontier_phi_68_pred_5 = _2772;
                }
                else
                {
                    float _2894;
                    float _2895;
                    float _2896;
                    float _2897;
                    float _2898;
                    float _2899;
                    uint _2900;
                    _2894 = _2770;
                    _2895 = _2771;
                    _2896 = _2772;
                    _2897 = _2773;
                    _2898 = _2774;
                    _2899 = _2775;
                    _2900 = _2785;
                    float _2826;
                    float _2827;
                    float _2828;
                    float _2829;
                    float _2830;
                    float _2831;
                    for (;;)
                    {
                        uint _2904 = uint(findLSB(_2900)) + (_2776 << 5u);
                        uint _2901 = (_2900 + 4294967295u) & _2900;
                        uint _2906 = _2904 * 48u;
                        vec4 _2920 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2906)).x, texelFetch(g_PointLightRenderingBuffer, int(_2906 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2906 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2906 + 3u)).x));
                        uint _2926 = (_2904 * 48u) + 4u;
                        vec4 _2939 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2926)).x, texelFetch(g_PointLightRenderingBuffer, int(_2926 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2926 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2926 + 3u)).x));
                        uint _2945 = (_2904 * 48u) + 8u;
                        vec3 _2956 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2945)).x, texelFetch(g_PointLightRenderingBuffer, int(_2945 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2945 + 2u)).x));
                        float _2960 = _2920.x - _1625;
                        float _2961 = _2920.y - _1626;
                        float _2962 = _2920.z - _1627;
                        float _2963 = dot(vec3(_2960, _2961, _2962), vec3(_2960, _2961, _2962));
                        float _2966 = inversesqrt(_2963);
                        float _2967 = _2966 * _2960;
                        float _2968 = _2966 * _2961;
                        float _2969 = _2966 * _2962;
                        float _2970 = dot(vec3(_505, _508, _511), vec3(_2967, _2968, _2969));
                        float _2975 = 1.0 - (_2963 * _2920.w);
                        float _4309 = isnan(0.0) ? _2975 : (isnan(_2975) ? 0.0 : max(_2975, 0.0));
                        float _2976 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
                        float _2977 = sqrt(_2963) * _2939.w;
                        float _2980 = 1.39999997615814208984375 / (_2977 + 1.39999997615814208984375);
                        float _2981 = _2980 * _2980;
                        float _2984 = ((1.0 - _2981) * _2970) + _2981;
                        float _2987 = _2977 * _2977;
                        float _2991 = ((isnan(0.0) ? _2984 : (isnan(_2984) ? 0.0 : max(_2984, 0.0))) * _2976) / ((_2987 * 0.699999988079071044921875) + 1.0);
                        float _2995 = (-0.0) - _1625;
                        float _2996 = (-0.0) - _1626;
                        float _2997 = (-0.0) - _1627;
                        float _3001 = inversesqrt(dot(vec3(_2995, _2996, _2997), vec3(_2995, _2996, _2997)));
                        float _3002 = _3001 * _2995;
                        float _3003 = _3001 * _2996;
                        float _3004 = _3001 * _2997;
                        float _3011 = exp2(log2(1.0 / ((_2987 * 3.5) + 5.0)) * 0.25);
                        float _3012 = 1.0 - _565;
                        float _3019 = sqrt(1.0 - ((1.0 - (_3012 * _3012)) * (1.0 - (_3011 * _3011))));
                        float _3020 = _3019 * _3019;
                        float _3021 = _3020 * _3020;
                        float _3022 = _3002 + _2967;
                        float _3023 = _3003 + _2968;
                        float _3024 = _3004 + _2969;
                        float _3028 = inversesqrt(dot(vec3(_3022, _3023, _3024), vec3(_3022, _3023, _3024)));
                        float _3032 = dot(vec3(_505, _508, _511), vec3(_3002, _3003, _3004));
                        float _4325 = isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : max(_3032, 0.0));
                        float _3035 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
                        float _3036 = dot(vec3(_505, _508, _511), vec3(_3028 * _3022, _3028 * _3023, _3028 * _3024));
                        float _4336 = isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : max(_3036, 0.0));
                        float _3039 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
                        float _3043 = ((_3039 * _3039) * (_3021 + (-1.0))) + 1.0;
                        float _3044 = _2980 * _3020;
                        float _3045 = _3044 * _3044;
                        float _3048 = ((1.0 - _3045) * _2970) + _3045;
                        float _4347 = isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : max(_3048, 0.0));
                        float _3049 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
                        float _3050 = 1.0 - _3020;
                        float _3060 = (0.5 / (((_3049 * ((_3035 * _3050) + _3020)) + 9.9999999392252902907785028219223e-09) + (((_3049 * _3050) + _3020) * _3035))) * _3049;
                        float _4358 = isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : max(_3060, 0.0));
                        float _3071 = (((_3021 * 3.1415927410125732421875) * (isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0)))) / ((_3043 * _3043) * ((_2987 * 2.1991131305694580078125) + 3.141590118408203125))) * _2976;
                        _2829 = (_2991 * _2939.x) + _2897;
                        _2830 = (_2991 * _2939.y) + _2898;
                        _2831 = (_2991 * _2939.z) + _2899;
                        _2826 = (_3071 * _2956.x) + _2894;
                        _2827 = (_3071 * _2956.y) + _2895;
                        _2828 = (_3071 * _2956.z) + _2896;
                        if (_2901 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2894 = _2826;
                            _2895 = _2827;
                            _2896 = _2828;
                            _2897 = _2829;
                            _2898 = _2830;
                            _2899 = _2831;
                            _2900 = _2901;
                        }
                    }
                    frontier_phi_68_pred = _2831;
                    frontier_phi_68_pred_1 = _2830;
                    frontier_phi_68_pred_2 = _2829;
                    frontier_phi_68_pred_3 = _2827;
                    frontier_phi_68_pred_4 = _2826;
                    frontier_phi_68_pred_5 = _2828;
                }
                _2637 = frontier_phi_68_pred;
                _2635 = frontier_phi_68_pred_1;
                _2633 = frontier_phi_68_pred_2;
                _2629 = frontier_phi_68_pred_3;
                _2627 = frontier_phi_68_pred_4;
                _2631 = frontier_phi_68_pred_5;
                uint _2777 = _2776 + 1u;
                if (_2777 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2770 = _2627;
                    _2771 = _2629;
                    _2772 = _2631;
                    _2773 = _2633;
                    _2774 = _2635;
                    _2775 = _2637;
                    _2776 = _2777;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2626 = _2627;
            _2628 = _2629;
            _2630 = _2631;
            _2632 = _2633;
            _2634 = _2635;
            _2636 = _2637;
        }
        uvec4 _2640 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2641 = _2640.z;
        uint _2643 = (_2641 >> 8u) & 15u;
        float _2738;
        float _2740;
        float _2742;
        float _2744;
        float _2746;
        float _2748;
        if (((4294967295u << _2643) & _2547) == 0u)
        {
            _2738 = _2626;
            _2740 = _2628;
            _2742 = _2630;
            _2744 = _2632;
            _2746 = _2634;
            _2748 = _2636;
        }
        else
        {
            float _2763 = inversesqrt(dot(vec3(_1625, _1626, _1627), vec3(_1625, _1626, _1627)));
            float _2764 = _2763 * _1625;
            float _2765 = _2763 * _1626;
            float _2766 = _2763 * _1627;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2643 < ((_2641 >> 12u) & 15u))
            {
                float _2739;
                float _2741;
                float _2743;
                float _2745;
                float _2747;
                float _2749;
                float _2877 = _2626;
                float _2878 = _2628;
                float _2879 = _2630;
                float _2880 = _2632;
                float _2881 = _2634;
                float _2882 = _2636;
                uint _2883 = _2643;
                uint _2892;
                bool _2893;
                for (;;)
                {
                    _2892 = texelFetch(g_lightClassification, int((((_2541 << 5u) + (_2527 << 9u)) + (_2883 << 2u)) >> 2u)).x;
                    _2893 = _2892 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_2893)
                    {
                        frontier_phi_74_pred = _2879;
                        frontier_phi_74_pred_1 = _2878;
                        frontier_phi_74_pred_2 = _2877;
                        frontier_phi_74_pred_3 = _2882;
                        frontier_phi_74_pred_4 = _2881;
                        frontier_phi_74_pred_5 = _2880;
                    }
                    else
                    {
                        float _3076;
                        float _3077;
                        float _3078;
                        float _3079;
                        float _3080;
                        float _3081;
                        float _3372;
                        float _3373;
                        float _3374;
                        float _3375;
                        float _3376;
                        float _3377;
                        float _3089 = _2877;
                        float _3090 = _2878;
                        float _3091 = _2879;
                        float _3092 = _2880;
                        float _3093 = _2881;
                        float _3094 = _2882;
                        uint _3095 = _2892;
                        uint _3096;
                        vec4 _3121;
                        float _3122;
                        vec4 _3137;
                        vec3 _3149;
                        vec4 _3165;
                        vec4 _3181;
                        float _3228;
                        bool _3229;
                        for (;;)
                        {
                            uint _3106 = ((_2883 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3095));
                            _3096 = (_3095 + 4294967295u) & _3095;
                            uint _3108 = _3106 * 40u;
                            _3121 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3108)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3108 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3108 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3108 + 3u)).x));
                            _3122 = _3121.w;
                            uint _3124 = (_3106 * 40u) + 4u;
                            _3137 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3124)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 3u)).x));
                            uint _3139 = (_3106 * 40u) + 8u;
                            _3149 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3139)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 2u)).x));
                            uint _3152 = (_3106 * 40u) + 16u;
                            _3165 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3152)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3152 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3152 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3152 + 3u)).x));
                            uint _3168 = (_3106 * 40u) + 20u;
                            _3181 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3168)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 3u)).x));
                            uint _3184 = (_3106 * 40u) + 24u;
                            vec4 _3197 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3184)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 3u)).x));
                            uint _3203 = (_3106 * 40u) + 28u;
                            vec4 _3216 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3203)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 3u)).x));
                            _3228 = fma(_1627, _3216.z, fma(_1626, _3216.y, _3216.x * _1625)) + _3216.w;
                            _3229 = !((fma(_1627, _3197.z, fma(_1626, _3197.y, _3197.x * _1625)) + _3197.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3229)
                            {
                                float _3256 = _3121.x - _1625;
                                float _3257 = _3121.y - _1626;
                                float _3258 = _3121.z - _1627;
                                float _3259 = dot(vec3(_3256, _3257, _3258), vec3(_3256, _3257, _3258));
                                float _3262 = inversesqrt(_3259);
                                float _3263 = _3262 * _3256;
                                float _3264 = _3262 * _3257;
                                float _3265 = _3262 * _3258;
                                float _3269 = 1.0 - (_3259 / (_3122 * _3122));
                                float _4369 = isnan(0.0) ? _3269 : (isnan(_3269) ? 0.0 : max(_3269, 0.0));
                                float _3270 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
                                float _3274 = sqrt(_3259) * _3137.w;
                                float _3276 = 1.39999997615814208984375 / (_3274 + 1.39999997615814208984375);
                                float _3277 = _3276 * _3276;
                                float _3280 = ((1.0 - _3277) * dot(vec3(_3263, _3264, _3265), vec3(_505, _508, _511))) + _3277;
                                float _3283 = _3274 * _3274;
                                float _3287 = (fma(_1627, _3165.z, fma(_1626, _3165.y, _3165.x * _1625)) + _3165.w) / _3228;
                                float _3288 = (fma(_1627, _3181.z, fma(_1626, _3181.y, _3181.x * _1625)) + _3181.w) / _3228;
                                float _3292 = 1.0 - dot(vec2(_3287, _3288), vec2(_3287, _3288));
                                float _4385 = isnan(0.0) ? _3292 : (isnan(_3292) ? 0.0 : max(_3292, 0.0));
                                float _3293 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
                                float _3294 = _3293 * (((isnan(0.0) ? _3280 : (isnan(_3280) ? 0.0 : max(_3280, 0.0))) * _3270) / ((_3283 * 0.699999988079071044921875) + 1.0));
                                float _3306 = exp2(log2(1.0 / ((_3283 * 3.5) + 5.0)) * 0.25);
                                float _3307 = 1.0 - _565;
                                float _3314 = sqrt(1.0 - ((1.0 - (_3307 * _3307)) * (1.0 - (_3306 * _3306))));
                                float _3315 = _3314 * _3314;
                                float _3316 = _3315 * _3315;
                                float _3317 = _3263 - _2764;
                                float _3318 = _3264 - _2765;
                                float _3319 = _3265 - _2766;
                                float _3323 = inversesqrt(dot(vec3(_3317, _3318, _3319), vec3(_3317, _3318, _3319)));
                                float _3327 = dot(vec3(_505, _508, _511), vec3((-0.0) - _2764, (-0.0) - _2765, (-0.0) - _2766));
                                float _4396 = isnan(0.0) ? _3327 : (isnan(_3327) ? 0.0 : max(_3327, 0.0));
                                float _3330 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
                                float _3331 = dot(vec3(_505, _508, _511), vec3(_3323 * _3317, _3323 * _3318, _3323 * _3319));
                                float _4407 = isnan(0.0) ? _3331 : (isnan(_3331) ? 0.0 : max(_3331, 0.0));
                                float _3334 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
                                float _3338 = ((_3334 * _3334) * (_3316 + (-1.0))) + 1.0;
                                float _3339 = _3276 * _3315;
                                float _3340 = _3339 * _3339;
                                float _3346 = ((1.0 - _3340) * dot(vec3(_505, _508, _511), vec3(_3263, _3264, _3265))) + _3340;
                                float _4418 = isnan(0.0) ? _3346 : (isnan(_3346) ? 0.0 : max(_3346, 0.0));
                                float _3347 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
                                float _3348 = 1.0 - _3315;
                                float _3358 = (0.5 / (((_3347 * ((_3330 * _3348) + _3315)) + 9.9999999392252902907785028219223e-09) + (((_3347 * _3348) + _3315) * _3330))) * _3347;
                                float _4429 = isnan(0.0) ? _3358 : (isnan(_3358) ? 0.0 : max(_3358, 0.0));
                                float _3368 = (_3293 * _3270) * (((_3316 * 3.1415927410125732421875) * (isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0)))) / ((_3338 * _3338) * ((_3283 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3368 * _3149.z;
                                frontier_phi_80_pred_1 = _3368 * _3149.y;
                                frontier_phi_80_pred_2 = _3368 * _3149.x;
                                frontier_phi_80_pred_3 = _3294 * _3137.z;
                                frontier_phi_80_pred_4 = _3294 * _3137.y;
                                frontier_phi_80_pred_5 = _3294 * _3137.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3374 = frontier_phi_80_pred;
                            _3373 = frontier_phi_80_pred_1;
                            _3372 = frontier_phi_80_pred_2;
                            _3377 = frontier_phi_80_pred_3;
                            _3376 = frontier_phi_80_pred_4;
                            _3375 = frontier_phi_80_pred_5;
                            _3079 = _3375 + _3092;
                            _3080 = _3376 + _3093;
                            _3081 = _3377 + _3094;
                            _3076 = _3372 + _3089;
                            _3077 = _3373 + _3090;
                            _3078 = _3374 + _3091;
                            if (_3096 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3089 = _3076;
                                _3090 = _3077;
                                _3091 = _3078;
                                _3092 = _3079;
                                _3093 = _3080;
                                _3094 = _3081;
                                _3095 = _3096;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3078;
                        frontier_phi_74_pred_1 = _3077;
                        frontier_phi_74_pred_2 = _3076;
                        frontier_phi_74_pred_3 = _3081;
                        frontier_phi_74_pred_4 = _3080;
                        frontier_phi_74_pred_5 = _3079;
                    }
                    _2743 = frontier_phi_74_pred;
                    _2741 = frontier_phi_74_pred_1;
                    _2739 = frontier_phi_74_pred_2;
                    _2749 = frontier_phi_74_pred_3;
                    _2747 = frontier_phi_74_pred_4;
                    _2745 = frontier_phi_74_pred_5;
                    uint _2884 = _2883 + 1u;
                    if (_2884 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2877 = _2739;
                        _2878 = _2741;
                        _2879 = _2743;
                        _2880 = _2745;
                        _2881 = _2747;
                        _2882 = _2749;
                        _2883 = _2884;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2747;
                frontier_phi_62_63_ladder_1 = _2745;
                frontier_phi_62_63_ladder_2 = _2743;
                frontier_phi_62_63_ladder_3 = _2749;
                frontier_phi_62_63_ladder_4 = _2741;
                frontier_phi_62_63_ladder_5 = _2739;
            }
            else
            {
                frontier_phi_62_63_ladder = _2634;
                frontier_phi_62_63_ladder_1 = _2632;
                frontier_phi_62_63_ladder_2 = _2630;
                frontier_phi_62_63_ladder_3 = _2636;
                frontier_phi_62_63_ladder_4 = _2628;
                frontier_phi_62_63_ladder_5 = _2626;
            }
            _2738 = frontier_phi_62_63_ladder_5;
            _2740 = frontier_phi_62_63_ladder_4;
            _2742 = frontier_phi_62_63_ladder_2;
            _2744 = frontier_phi_62_63_ladder_1;
            _2746 = frontier_phi_62_63_ladder;
            _2748 = frontier_phi_62_63_ladder_3;
        }
        float _2753 = isnan(1.0) ? _549 : (isnan(_549) ? 1.0 : min(_549, 1.0));
        _2559 = (_2753 * _2744) + _2091;
        _2561 = (_2753 * _2746) + _2093;
        _2563 = (_2753 * _2748) + _2095;
        _2565 = ((_2738 * 0.039999999105930328369140625) * _2753) + _2414;
        _2567 = ((_2740 * 0.039999999105930328369140625) * _2753) + _2416;
        _2569 = ((_2742 * 0.039999999105930328369140625) * _2753) + _2418;
    }
    else
    {
        _2559 = _2091;
        _2561 = _2093;
        _2563 = _2095;
        _2565 = _2414;
        _2567 = _2416;
        _2569 = _2418;
    }
    float _4445 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _4456 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    float _4467 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    uint _2589 = _524 + 6u;
    float _2597 = _483 / cbSceneParam._m0[86u].x;
    float _2598 = _484 / cbSceneParam._m0[86u].y;
    vec4 _2612 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2597, _2598, (log2((isnan(cbSceneParam._m0[77u].w) ? _416 : (isnan(_416) ? cbSceneParam._m0[77u].w : min(_416, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2614 = _2612.x;
    float _2615 = _2612.y;
    float _2616 = _2612.z;
    float _2617 = _2612.w;
    float _2688;
    float _2690;
    float _2692;
    float _2694;
    if (_416 > cbSceneParam._m0[78u].w)
    {
        float _2651 = isnan(_416) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _416 : min(cbSceneParam._m0[80u].w, _416));
        float _2652 = _2651 / _416;
        float _2663 = _2652 * _468;
        float _2664 = _469 * _2652;
        float _2665 = (-0.0) - _2664;
        float _2666 = _2652 * _470;
        float _2668 = (cbSceneParam._m0[77u].w * _2665) / _2651;
        float _2669 = _2668 + cbSceneParam._m0[79u].w;
        float _2670 = cbSceneParam._m0[79u].w - _2664;
        float _2676 = sqrt(((_2663 * _2663) + (_2664 * _2664)) + (_2666 * _2666));
        float _2679 = (1.0 - (cbSceneParam._m0[77u].w / _2651)) * _2676;
        float _2684 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2686 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2839;
        if (abs((_2665 - _2668) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2839 = ((((_2669 > 0.0) ? exp2(_2684 * _2669) : (2.0 - exp2(_2686 * _2669))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2679;
        }
        else
        {
            float _2799 = 1.0 / cbSceneParam._m0[80u].x;
            float _2800 = isnan(_2670) ? _2669 : (isnan(_2669) ? _2670 : max(_2669, _2670));
            float _2801 = isnan(_2670) ? _2669 : (isnan(_2669) ? _2670 : min(_2669, _2670));
            float _2810 = isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : min(_2800, 0.0));
            float _2811 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : min(_2801, 0.0));
            _2839 = ((abs(_2676 / _2665) * cbSceneParam._m0[80u].y) * ((((_2810 - _2811) * 2.0) - ((exp2(_2684 * (isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0)))) - exp2(_2684 * (isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0))))) * _2799)) - ((exp2(_2686 * _2810) - exp2(_2686 * _2811)) * _2799))) + (_2679 * cbSceneParam._m0[80u].z);
        }
        vec4 _2841 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2597, _2598, 1.0), 0.0);
        float _2850 = exp2((_2839 * (-1.44269502162933349609375)) * (1.0 - _2841.w));
        float _2851 = log2(_2850);
        float _2867 = log2(_2617);
        _2688 = (exp2(_2867 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2851 * cbSceneParam._m0[78u].x)) * _2841.x) / cbSceneParam._m0[78u].x)) + _2614;
        _2690 = (exp2(_2867 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2851 * cbSceneParam._m0[78u].y)) * _2841.y) / cbSceneParam._m0[78u].y)) + _2615;
        _2692 = (exp2(_2867 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2851 * cbSceneParam._m0[78u].z)) * _2841.z) / cbSceneParam._m0[78u].z)) + _2616;
        _2694 = _2850 * _2617;
    }
    else
    {
        _2688 = _2614;
        _2690 = _2615;
        _2692 = _2616;
        _2694 = _2617;
    }
    float _2706 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2707 = _2706 == 3.0;
    float _2708 = log2(_2694);
    float _2715 = exp2(_2708 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0))) * (_2559 + ((isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0))) * _549))) + ((_2565 + ((isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0))) * _1356)) * cbPerFrame._m0[3u].x));
    float _2716 = exp2(_2708 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0))) * (_2561 + ((isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0))) * _549))) + ((_2567 + ((isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0))) * _1356)) * cbPerFrame._m0[3u].x));
    float _2717 = exp2(_2708 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0))) * (_2563 + ((isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0))) * _549))) + ((_2569 + ((isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0))) * _1356)) * cbPerFrame._m0[3u].x));
    float _2726 = (_2706 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2726 * (_2707 ? _2715 : (_2715 + (cbSceneParam._m0[72u].w * _2688)));
    SV_Target.y = _2726 * (_2707 ? _2716 : (_2716 + (cbSceneParam._m0[72u].w * _2690)));
    SV_Target.z = _2726 * (_2707 ? _2717 : (_2717 + (cbSceneParam._m0[72u].w * _2692)));
    SV_Target.w = cbInstanceData._m0[_2589].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2589].w;
}


