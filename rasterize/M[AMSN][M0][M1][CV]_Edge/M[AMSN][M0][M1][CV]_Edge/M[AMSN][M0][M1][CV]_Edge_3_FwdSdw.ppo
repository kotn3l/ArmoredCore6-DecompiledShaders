#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _901;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _190 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _191 = _190 * _182;
    float _192 = _190 * _183;
    float _193 = _190 * _184;
    float _197 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _198 = _197 * NORMAL.x;
    float _199 = _197 * NORMAL.y;
    float _200 = _197 * NORMAL.z;
    float _204 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _205 = _204 * TANGENT.x;
    float _206 = _204 * TANGENT.y;
    float _207 = _204 * TANGENT.z;
    float _212;
    float _213;
    float _214;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _212 = (-0.0) - _198;
        _213 = (-0.0) - _199;
        _214 = (-0.0) - _200;
    }
    else
    {
        _212 = _198;
        _213 = _199;
        _214 = _200;
    }
    vec4 _240 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _246 = _240.x * cbMtdParam._m0[9u].x;
    float _247 = _240.y * cbMtdParam._m0[9u].y;
    float _248 = _240.z * cbMtdParam._m0[9u].z;
    vec4 _266 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _270 = _266.z;
    float _274 = (_266.x * 2.0) + (-1.0);
    float _276 = (_266.y * 2.0) + (-1.0);
    float _277 = dot(vec2(_274, _276), vec2(_274, _276));
    float _3498 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    float _283 = sqrt(1.0 - (isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0))));
    float _286 = fma(_283, _212, fma(_276, _205, _274 * _191));
    float _289 = fma(_283, _213, fma(_276, _206, _274 * _192));
    float _292 = fma(_283, _214, fma(_276, _207, _274 * _193));
    float _296 = inversesqrt(dot(vec3(_286, _289, _292), vec3(_286, _289, _292)));
    float _307 = cbMtdParam._m0[12u].x + dot(vec4(_296 * _286, _296 * _289, _296 * _292, 0.0), vec4(cbMtdParam._m0[13u].xyz, 0.0));
    float _3509 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _308 = isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0));
    float _315 = (_308 * (cbMtdParam._m0[10u].x - _246)) + _246;
    float _316 = (_308 * (cbMtdParam._m0[10u].y - _247)) + _247;
    float _317 = (_308 * (cbMtdParam._m0[10u].z - _248)) + _248;
    vec4 _329 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _336 = (_329.x * 2.0) + (-1.0);
    float _337 = (_329.y * 2.0) + (-1.0);
    float _338 = dot(vec2(_336, _337), vec2(_336, _337));
    float _3520 = isnan(0.0) ? _338 : (isnan(_338) ? 0.0 : max(_338, 0.0));
    float _346 = ((_329.z - _270) * _308) + _270;
    float _358 = (((_336 - _274) + (cbMtdParam._m0[12u].w * _274)) * _308) + _274;
    float _359 = (((_337 - _276) + (cbMtdParam._m0[12u].w * _276)) * _308) + _276;
    float _360 = ((sqrt(1.0 - (isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0)))) - _283) * _308) + _283;
    float _363 = fma(_360, _212, fma(_359, _205, _358 * _191));
    float _366 = fma(_360, _213, fma(_359, _206, _358 * _192));
    float _369 = fma(_360, _214, fma(_359, _207, _358 * _193));
    float _373 = inversesqrt(dot(vec3(_363, _366, _369), vec3(_363, _366, _369)));
    float _374 = _373 * _363;
    float _375 = _373 * _366;
    float _376 = _373 * _369;
    float _3531 = isnan(0.0) ? _346 : (isnan(_346) ? 0.0 : max(_346, 0.0));
    float _377 = isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0));
    float _3542 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _3553 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    float _3564 = isnan(0.0) ? _317 : (isnan(_317) ? 0.0 : max(_317, 0.0));
    float _396 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _438 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _448 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _438);
    float _449 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _438);
    float _450 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _438);
    float _454 = inversesqrt(dot(vec3(_448, _449, _450), vec3(_448, _449, _450)));
    float _455 = _448 * _454;
    float _456 = _449 * _454;
    float _457 = _450 * _454;
    float _463 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _464 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _485 = fma(_376, cbSceneParam._m0[5u].z, fma(_375, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _374));
    float _488 = fma(_376, cbSceneParam._m0[6u].z, fma(_375, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _374));
    float _491 = fma(_376, cbSceneParam._m0[7u].z, fma(_375, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _374));
    uint _504 = uint(roundEven(NORMAL.w)) * 13u;
    uint _506 = (_504 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _512 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0)))) * cbInstanceData._m0[_506].x;
    float _513 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0)))) * cbInstanceData._m0[_506].y;
    float _514 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0)))) * cbInstanceData._m0[_506].z;
    float _3575 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _515 = isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0));
    float _3586 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _516 = isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0));
    float _3597 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _517 = isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0));
    vec4 _526 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _463, cbSceneParam._m0[86u].y * _464));
    float _529 = _526.x * TEXCOORD_3.w;
    float _530 = dot(vec3(_374, _375, _376), vec3(_455, _456, _457));
    float _533 = _530 * 2.0;
    float _537 = (_533 * _374) - _455;
    float _538 = (_533 * _375) - _456;
    float _539 = (_533 * _376) - _457;
    float _543 = abs(dot(vec3(_455, _456, _457), vec3(_374, _375, _376)));
    float _3608 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _545 = sqrt(_377);
    float _558 = exp2((_545 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_545 * 3.0));
    float _590 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _594 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _598 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _900;
    float _902;
    float _903;
    float _904;
    float _905;
    float _906;
    float _907;
    float _908;
    float _909;
    float _910;
    float _911;
    float _912;
    float _913;
    float _914;
    float _915;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _625 = fma(_598, cbModelParam._m0[26u].z, fma(_594, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _590));
        float _629 = fma(_598, cbModelParam._m0[27u].z, fma(_594, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _590));
        float _633 = fma(_598, cbModelParam._m0[28u].z, fma(_594, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _590));
        float _658 = _590 + _374;
        float _659 = _594 + _375;
        float _660 = _598 + _376;
        float _670 = fma(_660, cbModelParam._m0[26u].z, fma(_659, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _658)) - _625;
        float _671 = fma(_660, cbModelParam._m0[27u].z, fma(_659, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _658)) - _629;
        float _672 = fma(_660, cbModelParam._m0[28u].z, fma(_659, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _658)) - _633;
        float _676 = inversesqrt(dot(vec3(_670, _671, _672), vec3(_670, _671, _672)));
        float _689 = ((_676 * _670) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_625 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _690 = ((_676 * _671) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_629 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _691 = ((_676 * _672) / cbModelParam._m0[34u].z) + ((((((_633 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _694 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_689, _690, _691), 0.0);
        vec4 _701 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_689, _690, _691), 0.0);
        vec4 _708 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_689, _690, _691), 0.0);
        vec4 _715 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_689, _690, _691), 0.0);
        float _728 = exp2((_694.w + (-0.5)) * 20.0) * 2.0;
        float _729 = _728 * (_694.x + (-0.5));
        float _730 = _728 * (_694.y + (-0.5));
        float _731 = _728 * (_694.z + (-0.5));
        float _738 = exp2((_701.w + (-0.5)) * 20.0) * 2.0;
        float _739 = _738 * (_701.x + (-0.5));
        float _740 = _738 * (_701.y + (-0.5));
        float _741 = _738 * (_701.z + (-0.5));
        float _748 = exp2((_708.w + (-0.5)) * 20.0) * 2.0;
        float _749 = _748 * (_708.x + (-0.5));
        float _750 = _748 * (_708.y + (-0.5));
        float _751 = _748 * (_708.z + (-0.5));
        float _758 = exp2((_715.w + (-0.5)) * 20.0) * 2.0;
        float _759 = _758 * (_715.x + (-0.5));
        float _760 = _758 * (_715.y + (-0.5));
        float _761 = _758 * (_715.z + (-0.5));
        float _762 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
        float _763 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
        float _764 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
        float _765 = _729 * 0.5;
        float _766 = _739 * 0.5;
        float _767 = _749 * 0.5;
        float _768 = dot(vec3(_765, _766, _767), vec3(_765, _766, _767));
        float _773 = (_768 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_768);
        float _782 = (dot(vec3(_374, _375, _376), vec3(_773 * _765, _773 * _766, _773 * _767)) + 1.0) * 0.5;
        float _3634 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
        float _792 = sqrt(((_766 * _766) + (_765 * _765)) + (_767 * _767)) / (_762 + 9.9999997473787516355514526367188e-06);
        float _3645 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
        float _793 = isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0));
        float _794 = _793 * 2.0;
        float _798 = (1.0 - _793) / (_793 + 1.0);
        float _3656 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
        float _799 = isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0));
        float _808 = ((((1.0 - _799) * (_794 + 2.0)) * exp2(log2(isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0))) * (_794 + 1.0))) + _799) * _762;
        float _809 = _730 * 0.5;
        float _810 = _740 * 0.5;
        float _811 = _750 * 0.5;
        float _812 = dot(vec3(_809, _810, _811), vec3(_809, _810, _811));
        float _817 = (_812 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_812);
        float _825 = (dot(vec3(_374, _375, _376), vec3(_817 * _809, _817 * _810, _817 * _811)) + 1.0) * 0.5;
        float _3667 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
        float _834 = sqrt(((_810 * _810) + (_809 * _809)) + (_811 * _811)) / (_763 + 9.9999997473787516355514526367188e-06);
        float _3678 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
        float _835 = isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0));
        float _836 = _835 * 2.0;
        float _840 = (1.0 - _835) / (_835 + 1.0);
        float _3689 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
        float _841 = isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0));
        float _850 = ((((1.0 - _841) * (_836 + 2.0)) * exp2(log2(isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0))) * (_836 + 1.0))) + _841) * _763;
        float _851 = _731 * 0.5;
        float _852 = _741 * 0.5;
        float _853 = _751 * 0.5;
        float _854 = dot(vec3(_851, _852, _853), vec3(_851, _852, _853));
        float _859 = (_854 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_854);
        float _867 = (dot(vec3(_374, _375, _376), vec3(_859 * _851, _859 * _852, _859 * _853)) + 1.0) * 0.5;
        float _3700 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
        float _876 = sqrt(((_852 * _852) + (_851 * _851)) + (_853 * _853)) / (_764 + 9.9999997473787516355514526367188e-06);
        float _3711 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
        float _877 = isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0));
        float _878 = _877 * 2.0;
        float _882 = (1.0 - _877) / (_877 + 1.0);
        float _3722 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
        float _883 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
        float _892 = ((((1.0 - _883) * (_878 + 2.0)) * exp2(log2(isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0))) * (_878 + 1.0))) + _883) * _764;
        _900 = _731;
        _902 = _730;
        _903 = _729;
        _904 = _741;
        _905 = _740;
        _906 = _739;
        _907 = _751;
        _908 = _750;
        _909 = _749;
        _910 = _764;
        _911 = _763;
        _912 = _762;
        _913 = cbModelParam._m0[36u].z * (isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0)));
        _914 = cbModelParam._m0[36u].z * (isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0)));
        _915 = cbModelParam._m0[36u].z * (isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0)));
    }
    else
    {
        _900 = _901;
        _902 = _901;
        _903 = _901;
        _904 = _901;
        _905 = _901;
        _906 = _901;
        _907 = _901;
        _908 = _901;
        _909 = _901;
        _910 = _901;
        _911 = _901;
        _912 = _901;
        _913 = 0.0;
        _914 = 0.0;
        _915 = 0.0;
    }
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _941 = fma(_598, cbModelParam._m0[30u].z, fma(_594, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _590));
        float _945 = fma(_598, cbModelParam._m0[31u].z, fma(_594, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _590));
        float _949 = fma(_598, cbModelParam._m0[32u].z, fma(_594, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _590));
        float _972 = _590 + _374;
        float _973 = _594 + _375;
        float _974 = _598 + _376;
        float _984 = fma(_974, cbModelParam._m0[30u].z, fma(_973, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _972)) - _941;
        float _985 = fma(_974, cbModelParam._m0[31u].z, fma(_973, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _972)) - _945;
        float _986 = fma(_974, cbModelParam._m0[32u].z, fma(_973, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _972)) - _949;
        float _990 = inversesqrt(dot(vec3(_984, _985, _986), vec3(_984, _985, _986)));
        float _1003 = ((_990 * _984) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_941 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1004 = ((_990 * _985) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_945 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1005 = ((_990 * _986) / cbModelParam._m0[35u].z) + ((((((_949 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1007 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1003, _1004, _1005), 0.0);
        vec4 _1014 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1003, _1004, _1005), 0.0);
        vec4 _1021 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1003, _1004, _1005), 0.0);
        vec4 _1028 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1003, _1004, _1005), 0.0);
        float _1040 = exp2((_1007.w + (-0.5)) * 20.0) * 2.0;
        float _1041 = _1040 * (_1007.x + (-0.5));
        float _1042 = _1040 * (_1007.y + (-0.5));
        float _1043 = _1040 * (_1007.z + (-0.5));
        float _1050 = exp2((_1014.w + (-0.5)) * 20.0) * 2.0;
        float _1051 = _1050 * (_1014.x + (-0.5));
        float _1052 = _1050 * (_1014.y + (-0.5));
        float _1053 = _1050 * (_1014.z + (-0.5));
        float _1060 = exp2((_1021.w + (-0.5)) * 20.0) * 2.0;
        float _1061 = _1060 * (_1021.x + (-0.5));
        float _1062 = _1060 * (_1021.y + (-0.5));
        float _1063 = _1060 * (_1021.z + (-0.5));
        float _1070 = exp2((_1028.w + (-0.5)) * 20.0) * 2.0;
        float _1071 = _1070 * (_1028.x + (-0.5));
        float _1072 = _1070 * (_1028.y + (-0.5));
        float _1073 = _1070 * (_1028.z + (-0.5));
        float _1074 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1075 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1076 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1077 = _1041 * 0.5;
        float _1078 = _1051 * 0.5;
        float _1079 = _1061 * 0.5;
        float _1080 = dot(vec3(_1077, _1078, _1079), vec3(_1077, _1078, _1079));
        float _1085 = (_1080 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1080);
        float _1093 = (dot(vec3(_374, _375, _376), vec3(_1085 * _1077, _1085 * _1078, _1085 * _1079)) + 1.0) * 0.5;
        float _3763 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1102 = sqrt(((_1078 * _1078) + (_1077 * _1077)) + (_1079 * _1079)) / (_1074 + 9.9999997473787516355514526367188e-06);
        float _3774 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1103 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
        float _1104 = _1103 * 2.0;
        float _1108 = (1.0 - _1103) / (_1103 + 1.0);
        float _3785 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1109 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
        float _1118 = ((((1.0 - _1109) * (_1104 + 2.0)) * exp2(log2(isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0))) * (_1104 + 1.0))) + _1109) * _1074;
        float _1119 = _1042 * 0.5;
        float _1120 = _1052 * 0.5;
        float _1121 = _1062 * 0.5;
        float _1122 = dot(vec3(_1119, _1120, _1121), vec3(_1119, _1120, _1121));
        float _1127 = (_1122 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1122);
        float _1135 = (dot(vec3(_374, _375, _376), vec3(_1127 * _1119, _1127 * _1120, _1127 * _1121)) + 1.0) * 0.5;
        float _3796 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1144 = sqrt(((_1120 * _1120) + (_1119 * _1119)) + (_1121 * _1121)) / (_1075 + 9.9999997473787516355514526367188e-06);
        float _3807 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1145 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
        float _1146 = _1145 * 2.0;
        float _1150 = (1.0 - _1145) / (_1145 + 1.0);
        float _3818 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1151 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
        float _1160 = ((((1.0 - _1151) * (_1146 + 2.0)) * exp2(log2(isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0))) * (_1146 + 1.0))) + _1151) * _1075;
        float _1161 = _1043 * 0.5;
        float _1162 = _1053 * 0.5;
        float _1163 = _1063 * 0.5;
        float _1164 = dot(vec3(_1161, _1162, _1163), vec3(_1161, _1162, _1163));
        float _1169 = (_1164 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1164);
        float _1177 = (dot(vec3(_374, _375, _376), vec3(_1169 * _1161, _1169 * _1162, _1169 * _1163)) + 1.0) * 0.5;
        float _3829 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1186 = sqrt(((_1162 * _1162) + (_1161 * _1161)) + (_1163 * _1163)) / (_1076 + 9.9999997473787516355514526367188e-06);
        float _3840 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1187 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
        float _1188 = _1187 * 2.0;
        float _1192 = (1.0 - _1187) / (_1187 + 1.0);
        float _3851 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1193 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
        float _1202 = ((((1.0 - _1193) * (_1188 + 2.0)) * exp2(log2(isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0))) * (_1188 + 1.0))) + _1193) * _1076;
        _1210 = _1043;
        _1211 = _1042;
        _1212 = _1041;
        _1213 = _1053;
        _1214 = _1052;
        _1215 = _1051;
        _1216 = _1063;
        _1217 = _1062;
        _1218 = _1061;
        _1219 = _1076;
        _1220 = _1075;
        _1221 = _1074;
        _1222 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0)));
        _1223 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0)));
        _1224 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0)));
    }
    else
    {
        _1210 = _901;
        _1211 = _901;
        _1212 = _901;
        _1213 = _901;
        _1214 = _901;
        _1215 = _901;
        _1216 = _901;
        _1217 = _901;
        _1218 = _901;
        _1219 = _901;
        _1220 = _901;
        _1221 = _901;
        _1222 = 0.0;
        _1223 = 0.0;
        _1224 = 0.0;
    }
    float _1234 = (cbModelParam._m0[1u].x * (_1222 - _913)) + _913;
    float _1235 = (cbModelParam._m0[1u].x * (_1223 - _914)) + _914;
    float _1236 = (cbModelParam._m0[1u].x * (_1224 - _915)) + _915;
    float _1257 = fma(_1236, cbSceneParam._m0[89u].z, fma(_1235, cbSceneParam._m0[89u].y, _1234 * cbSceneParam._m0[89u].x));
    float _1260 = fma(_1236, cbSceneParam._m0[90u].z, fma(_1235, cbSceneParam._m0[90u].y, _1234 * cbSceneParam._m0[90u].x));
    float _1263 = fma(_1236, cbSceneParam._m0[91u].z, fma(_1235, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1234));
    float _1278 = _537 * 0.5;
    float _1279 = _538 * 0.5;
    float _1280 = _539 * 0.5;
    float _1281 = dot(vec4(_1278, _1279, _1280, 1.0), vec4(_1212, _1215, _1218, _1221));
    float _1284 = dot(vec4(_1278, _1279, _1280, 1.0), vec4(_1211, _1214, _1217, _1220));
    float _1287 = dot(vec4(_1278, _1279, _1280, 1.0), vec4(_1210, _1213, _1216, _1219));
    float _1321;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1294 = dot(vec4(_1278, _1279, _1280, 1.0), vec4(_900, _904, _907, _910));
        float _1298 = dot(vec4(_1278, _1279, _1280, 1.0), vec4(_902, _905, _908, _911));
        float _1302 = dot(vec4(_1278, _1279, _1280, 1.0), vec4(_903, _906, _909, _912));
        float _1309 = dot(vec4(cbModelParam._m0[39u]), vec4(_1278, _1279, _1280, 1.0));
        _1321 = dot(vec3(isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0)), isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0)), isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1309) ? 0.0 : (isnan(0.0) ? _1309 : max(0.0, _1309))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1321 = 1.0;
    }
    float _1332;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1323 = dot(vec4(cbModelParam._m0[40u]), vec4(_1278, _1279, _1280, 1.0));
        _1332 = dot(vec3(isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0)), isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0)), isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1323) ? 0.0 : (isnan(0.0) ? _1323 : max(0.0, _1323))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1332 = 1.0;
    }
    float _1336 = (_1332 * cbModelParam._m0[1u].x) + (_1321 * (1.0 - cbModelParam._m0[1u].x));
    float _1346 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _377);
    float _1347 = isnan(_1346) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1346 : min(cbModelParam._m0[25u].z, _1346));
    float _1428;
    float _1430;
    float _1432;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1395 = fma(_598, cbModelParam._m0[13u].z, fma(_594, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _590)) + cbModelParam._m0[13u].w;
        float _1399 = fma(_598, cbModelParam._m0[14u].z, fma(_594, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _590)) + cbModelParam._m0[14u].w;
        float _1403 = fma(_598, cbModelParam._m0[15u].z, fma(_594, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _590)) + cbModelParam._m0[15u].w;
        float _1406 = fma(_539, cbModelParam._m0[13u].z, fma(_538, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _537));
        float _1409 = fma(_539, cbModelParam._m0[14u].z, fma(_538, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _537));
        float _1412 = fma(_539, cbModelParam._m0[15u].z, fma(_538, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _537));
        float _1440;
        if (_1406 > 0.0)
        {
            _1440 = abs((1.0 - _1395) / _1406);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1406 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1395 + 1.0) / _1406);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1440 = frontier_phi_16_14_ladder;
        }
        float _1613;
        if (_1409 > 0.0)
        {
            _1613 = abs((1.0 - _1399) / _1409);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1409 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1399 + 1.0) / _1409);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1613 = frontier_phi_25_21_ladder;
        }
        float _1909;
        if (_1412 > 0.0)
        {
            _1909 = abs((1.0 - _1403) / _1412);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1412 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1403 + 1.0) / _1412);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1909 = frontier_phi_37_32_ladder;
        }
        float _1911 = isnan(_1613) ? _1440 : (isnan(_1440) ? _1613 : min(_1440, _1613));
        float _1912 = isnan(_1909) ? _1911 : (isnan(_1911) ? _1909 : min(_1911, _1909));
        float _1916 = (_1912 * _1406) + _1395;
        float _1917 = (_1912 * _1409) + _1399;
        float _1918 = (_1912 * _1412) + _1403;
        float _1919 = _1912 * 9.9999997473787516355514526367188e-05;
        float _1921 = (-1.0) - _1919;
        float _1923 = _1919 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1918 > _1923) || ((_1918 < _1921) || ((_1917 > _1923) || ((_1917 < _1921) || ((_1916 < _1921) || (_1916 > _1923))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2063 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1918, cbModelParam._m0[9u].z, fma(_1917, cbModelParam._m0[9u].y, _1916 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1918, cbModelParam._m0[10u].z, fma(_1917, cbModelParam._m0[10u].y, _1916 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1918, cbModelParam._m0[11u].z, fma(_1917, cbModelParam._m0[11u].y, _1916 * cbModelParam._m0[11u].x))), _1347);
            frontier_phi_15_37_ladder = _2063.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2063.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2063.z * cbModelParam._m0[1u].y;
        }
        _1428 = frontier_phi_15_37_ladder_1;
        _1430 = frontier_phi_15_37_ladder;
        _1432 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1416 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_537, _538, _539), _1347);
        _1428 = _1416.x * cbModelParam._m0[1u].y;
        _1430 = _1416.y * cbModelParam._m0[1u].y;
        _1432 = _1416.z * cbModelParam._m0[1u].y;
    }
    float _1436 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _377);
    float _1437 = isnan(_1436) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1436 : min(cbModelParam._m0[25u].w, _1436));
    float _1530;
    float _1532;
    float _1534;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1494 = fma(_598, cbModelParam._m0[21u].z, fma(_594, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _590)) + cbModelParam._m0[21u].w;
        float _1498 = fma(_598, cbModelParam._m0[22u].z, fma(_594, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _590)) + cbModelParam._m0[22u].w;
        float _1502 = fma(_598, cbModelParam._m0[23u].z, fma(_594, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _590)) + cbModelParam._m0[23u].w;
        float _1505 = fma(_539, cbModelParam._m0[21u].z, fma(_538, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _537));
        float _1508 = fma(_539, cbModelParam._m0[22u].z, fma(_538, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _537));
        float _1511 = fma(_539, cbModelParam._m0[23u].z, fma(_538, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _537));
        float _1618;
        if (_1505 > 0.0)
        {
            _1618 = abs((1.0 - _1494) / _1505);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1505 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1494 + 1.0) / _1505);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1618 = frontier_phi_27_23_ladder;
        }
        float _1936;
        if (_1508 > 0.0)
        {
            _1936 = abs((1.0 - _1498) / _1508);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1508 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1498 + 1.0) / _1508);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1936 = frontier_phi_39_34_ladder;
        }
        float _2263;
        if (_1511 > 0.0)
        {
            _2263 = abs((1.0 - _1502) / _1511);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1511 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1502 + 1.0) / _1511);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2263 = frontier_phi_49_46_ladder;
        }
        float _2265 = isnan(_1936) ? _1618 : (isnan(_1618) ? _1936 : min(_1618, _1936));
        float _2266 = isnan(_2263) ? _2265 : (isnan(_2265) ? _2263 : min(_2265, _2263));
        float _2270 = (_2266 * _1505) + _1494;
        float _2271 = (_2266 * _1508) + _1498;
        float _2272 = (_2266 * _1511) + _1502;
        float _2273 = _2266 * 9.9999997473787516355514526367188e-05;
        float _2274 = (-1.0) - _2273;
        float _2276 = _2273 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2272 > _2276) || ((_2272 < _2274) || ((_2271 > _2276) || ((_2271 < _2274) || ((_2270 < _2274) || (_2270 > _2276))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2390 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2272, cbModelParam._m0[17u].z, fma(_2271, cbModelParam._m0[17u].y, _2270 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2272, cbModelParam._m0[18u].z, fma(_2271, cbModelParam._m0[18u].y, _2270 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2272, cbModelParam._m0[19u].z, fma(_2271, cbModelParam._m0[19u].y, _2270 * cbModelParam._m0[19u].x))), _1437);
            frontier_phi_24_49_ladder = _2390.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2390.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2390.x * cbModelParam._m0[1u].z;
        }
        _1530 = frontier_phi_24_49_ladder_2;
        _1532 = frontier_phi_24_49_ladder_1;
        _1534 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1514 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_537, _538, _539), _1437);
        _1530 = _1514.x * cbModelParam._m0[1u].z;
        _1532 = _1514.y * cbModelParam._m0[1u].z;
        _1534 = _1514.z * cbModelParam._m0[1u].z;
    }
    float _1546 = ((((1.0 - _558) * ((_545 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_558 * _545)) * _529;
    float _1547 = _1546 * ((cbModelParam._m0[1u].w * (_1530 - _1428)) + _1428);
    float _1548 = _1546 * ((cbModelParam._m0[1u].w * (_1532 - _1430)) + _1430);
    float _1549 = _1546 * ((cbModelParam._m0[1u].w * (_1534 - _1432)) + _1432);
    float _1552 = fma(_1549, cbSceneParam._m0[89u].z, fma(_1548, cbSceneParam._m0[89u].y, _1547 * cbSceneParam._m0[89u].x));
    float _1555 = fma(_1549, cbSceneParam._m0[90u].z, fma(_1548, cbSceneParam._m0[90u].y, _1547 * cbSceneParam._m0[90u].x));
    float _1558 = fma(_1549, cbSceneParam._m0[91u].z, fma(_1548, cbSceneParam._m0[91u].y, _1547 * cbSceneParam._m0[91u].x));
    float _1592 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1596 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1600 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1604 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1605 = _1592 / _1604;
    float _1606 = _1596 / _1604;
    float _1607 = _1600 / _1604;
    float _1754;
    float _1755;
    float _1756;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1634 = ((uint(_1607 > cbSceneParam._m0[59u].y) + uint(_1607 > cbSceneParam._m0[59u].x)) + uint(_1607 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1635 = _1634 + 43u;
        uint _1643 = _1634 + 44u;
        uint _1651 = _1634 + 45u;
        uint _1659 = _1634 + 46u;
        float _1670 = fma(_1604, cbSceneParam._m0[_1635].w, fma(_1600, cbSceneParam._m0[_1635].z, fma(_1596, cbSceneParam._m0[_1635].y, _1592 * cbSceneParam._m0[_1635].x)));
        float _1674 = fma(_1604, cbSceneParam._m0[_1643].w, fma(_1600, cbSceneParam._m0[_1643].z, fma(_1596, cbSceneParam._m0[_1643].y, _1592 * cbSceneParam._m0[_1643].x)));
        float _1682 = fma(_1604, cbSceneParam._m0[_1659].w, fma(_1600, cbSceneParam._m0[_1659].z, fma(_1596, cbSceneParam._m0[_1659].y, _1592 * cbSceneParam._m0[_1659].x)));
        float _1687 = cbSceneParam._m0[33u].z * _1682;
        float _1689 = cbSceneParam._m0[33u].w * _1682;
        float _1692 = fma(_1604, cbSceneParam._m0[_1651].w, fma(_1600, cbSceneParam._m0[_1651].z, fma(_1596, cbSceneParam._m0[_1651].y, _1592 * cbSceneParam._m0[_1651].x))) / _1682;
        float _1740 = (cbSceneParam._m0[33u].x - sqrt(((_1606 * _1606) + (_1605 * _1605)) + (_1607 * _1607))) * cbSceneParam._m0[33u].y;
        float _3977 = isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0));
        float _1747 = (isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1687 + _1670) / _1682, (_1689 + _1674) / _1682), _1692), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1689 + _1670) / _1682, (_1674 - _1687) / _1682), _1692), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1670 - _1687) / _1682, (_1674 - _1689) / _1682), _1692), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1670 - _1689) / _1682, (_1687 + _1674) / _1682), _1692), 0.0)).x), vec4(0.25)));
        _1754 = 1.0 - (_1747 * cbSceneParam._m0[34u].x);
        _1755 = 1.0 - (_1747 * cbSceneParam._m0[34u].y);
        _1756 = 1.0 - (_1747 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1754 = 1.0;
        _1755 = 1.0;
        _1756 = 1.0;
    }
    float _1820;
    float _1822;
    float _1824;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1808 = fma(_1604, cbSceneParam._m0[63u].w, fma(_1600, cbSceneParam._m0[63u].z, fma(_1596, cbSceneParam._m0[63u].y, _1592 * cbSceneParam._m0[63u].x)));
        float _1809 = fma(_1604, cbSceneParam._m0[60u].w, fma(_1600, cbSceneParam._m0[60u].z, fma(_1596, cbSceneParam._m0[60u].y, _1592 * cbSceneParam._m0[60u].x))) / _1808;
        float _1810 = fma(_1604, cbSceneParam._m0[61u].w, fma(_1600, cbSceneParam._m0[61u].z, fma(_1596, cbSceneParam._m0[61u].y, _1592 * cbSceneParam._m0[61u].x))) / _1808;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1809 >= cbSceneParam._m0[64u].x) && (_1810 >= cbSceneParam._m0[64u].y)) && (_1809 <= cbSceneParam._m0[64u].z)) && (_1810 <= cbSceneParam._m0[64u].w))
        {
            float _1949 = fma(_1604, cbSceneParam._m0[62u].w, fma(_1600, cbSceneParam._m0[62u].z, fma(_1596, cbSceneParam._m0[62u].y, _1592 * cbSceneParam._m0[62u].x))) / _1808;
            float _1953 = isnan(cbSceneParam._m0[41u].w) ? _1949 : (isnan(_1949) ? cbSceneParam._m0[41u].w : max(_1949, cbSceneParam._m0[41u].w));
            float _1996 = (cbSceneParam._m0[33u].x - sqrt(((_1606 * _1606) + (_1605 * _1605)) + (_1607 * _1607))) * cbSceneParam._m0[33u].y;
            float _3993 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
            float _2003 = (isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1809, cbSceneParam._m0[33u].w + _1810), _1953), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1809, _1810 - cbSceneParam._m0[33u].z), _1953), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1809 - cbSceneParam._m0[33u].z, _1810 - cbSceneParam._m0[33u].w), _1953), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1809 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1810), _1953), 0.0)).x), vec4(0.25)));
            float _2007 = 1.0 - (_2003 * cbSceneParam._m0[34u].x);
            float _2008 = 1.0 - (_2003 * cbSceneParam._m0[34u].y);
            float _2009 = 1.0 - (_2003 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2008) ? _1755 : (isnan(_1755) ? _2008 : min(_1755, _2008));
            frontier_phi_36_35_ladder_1 = isnan(_2009) ? _1756 : (isnan(_1756) ? _2009 : min(_1756, _2009));
            frontier_phi_36_35_ladder_2 = isnan(_2007) ? _1754 : (isnan(_1754) ? _2007 : min(_1754, _2007));
        }
        else
        {
            frontier_phi_36_35_ladder = _1755;
            frontier_phi_36_35_ladder_1 = _1756;
            frontier_phi_36_35_ladder_2 = _1754;
        }
        _1820 = frontier_phi_36_35_ladder_2;
        _1822 = frontier_phi_36_35_ladder;
        _1824 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _1820 = _1754;
        _1822 = _1755;
        _1824 = _1756;
    }
    uvec4 _1829 = floatBitsToUint(cbInstanceData._m0[_504 + 5u]);
    uint _1831 = _1829.x * 14u;
    uint _1832 = _1831 + 13u;
    float _1839 = _529 + (-1.0);
    float _1844 = (cbLight._m0[_1832].x * _1839) + 1.0;
    float _1845 = (cbLight._m0[_1832].y * _1839) + 1.0;
    float _1846 = (cbLight._m0[_1832].z * _1839) + 1.0;
    float _1847 = (cbLight._m0[_1832].w * _1839) + 1.0;
    uint _1848 = _1831 + 5u;
    float _1854 = isnan(1.0) ? _1845 : (isnan(_1845) ? 1.0 : min(_1845, 1.0));
    uint _1858 = _1831 + 4u;
    float _1868 = isnan(1.0) ? _1844 : (isnan(_1844) ? 1.0 : min(_1844, 1.0));
    uint _1872 = _1831 | 1u;
    float _1883 = dot(vec3(cbLight._m0[_1831].xyz), vec3(_374, _375, _376));
    float _1886 = dot(vec3(cbLight._m0[_1872].xyz), vec3(_374, _375, _376));
    float _4029 = isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0));
    float _4040 = isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0));
    float _1891 = (isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0))) * 0.3183098733425140380859375;
    float _1893 = (isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0))) * 0.3183098733425140380859375;
    float _1900 = ((cbLight._m0[_1848].x * _1854) * _1893) + (((cbLight._m0[_1858].x * _1820) * _1868) * _1891);
    float _1901 = ((_1854 * cbLight._m0[_1848].y) * _1893) + (((cbLight._m0[_1858].y * _1822) * _1868) * _1891);
    float _1902 = ((_1854 * cbLight._m0[_1848].z) * _1893) + (((cbLight._m0[_1858].z * _1824) * _1868) * _1891);
    uvec4 _1906 = floatBitsToUint(cbLight._m0[_1831 + 12u]);
    bool _1908 = _1906.x == 0u;
    float _2010;
    float _2012;
    float _2014;
    if (_1908)
    {
        _2010 = _1900;
        _2012 = _1901;
        _2014 = _1902;
    }
    else
    {
        uint _2018 = _1831 + 6u;
        float _2034 = (dot(vec3(cbLight._m0[_1831 + 2u].xyz), vec3(_374, _375, _376)) * 0.5) + 0.5;
        float _2035 = _2034 * _2034;
        float _4051 = isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0));
        float _2036 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
        float _2037 = isnan(1.0) ? _1846 : (isnan(_1846) ? 1.0 : min(_1846, 1.0));
        _2010 = (((cbLight._m0[_2018].x * 0.3183098733425140380859375) * _2036) * _2037) + _1900;
        _2012 = (((cbLight._m0[_2018].y * 0.3183098733425140380859375) * _2036) * _2037) + _1901;
        _2014 = (((cbLight._m0[_2018].z * 0.3183098733425140380859375) * _2036) * _2037) + _1902;
    }
    bool _2017 = _1906.y == 0u;
    float _2072;
    float _2074;
    float _2076;
    if (_2017)
    {
        _2072 = _2010;
        _2074 = _2012;
        _2076 = _2014;
    }
    else
    {
        uint _2234 = _1831 + 7u;
        float _2250 = (dot(vec3(cbLight._m0[_1831 + 3u].xyz), vec3(_374, _375, _376)) * 0.5) + 0.5;
        float _2251 = _2250 * _2250;
        float _4067 = isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0));
        float _2252 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
        float _2253 = isnan(1.0) ? _1847 : (isnan(_1847) ? 1.0 : min(_1847, 1.0));
        _2072 = (((cbLight._m0[_2234].x * 0.3183098733425140380859375) * _2252) * _2253) + _2010;
        _2074 = (((cbLight._m0[_2234].y * 0.3183098733425140380859375) * _2252) * _2253) + _2012;
        _2076 = (((cbLight._m0[_2234].z * 0.3183098733425140380859375) * _2252) * _2253) + _2014;
    }
    uint _2079 = _1831 + 8u;
    float _2092 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1831].w)) * _377) * 0.949999988079071044921875);
    float _2093 = _2092 * _2092;
    float _2094 = cbLight._m0[_1831].x + _455;
    float _2095 = cbLight._m0[_1831].y + _456;
    float _2096 = cbLight._m0[_1831].z + _457;
    float _2100 = inversesqrt(dot(vec3(_2094, _2095, _2096), vec3(_2094, _2095, _2096)));
    float _2101 = _2100 * _2094;
    float _2102 = _2100 * _2095;
    float _2103 = _2100 * _2096;
    float _2104 = dot(vec3(_374, _375, _376), vec3(cbLight._m0[_1831].xyz));
    float _4083 = isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0));
    float _2107 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
    float _4094 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _2108 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
    float _2109 = dot(vec3(_374, _375, _376), vec3(_2101, _2102, _2103));
    float _4105 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
    float _2112 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
    float _2113 = dot(vec3(cbLight._m0[_1831].xyz), vec3(_2101, _2102, _2103));
    float _4116 = isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0));
    float _2117 = _2093 * _2093;
    float _2121 = ((_2112 * _2112) * (_2117 + (-1.0))) + 1.0;
    float _2132 = (exp2(log2(1.0 - (isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2133 = 1.0 - _2093;
    float _2144 = (0.5 / (((_2108 * ((_2107 * _2133) + _2093)) + 9.9999999392252902907785028219223e-09) + (((_2108 * _2133) + _2093) * _2107))) * _2107;
    float _4127 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
    float _2146 = (isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0))) * (_2117 / ((_2121 * _2121) * 3.141590118408203125));
    uint _2160 = _1831 + 9u;
    float _2171 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1872].w)) * _377) * 0.949999988079071044921875);
    float _2172 = _2171 * _2171;
    float _2173 = cbLight._m0[_1872].x + _455;
    float _2174 = cbLight._m0[_1872].y + _456;
    float _2175 = cbLight._m0[_1872].z + _457;
    float _2179 = inversesqrt(dot(vec3(_2173, _2174, _2175), vec3(_2173, _2174, _2175)));
    float _2180 = _2179 * _2173;
    float _2181 = _2179 * _2174;
    float _2182 = _2179 * _2175;
    float _2183 = dot(vec3(_374, _375, _376), vec3(cbLight._m0[_1872].xyz));
    float _4138 = isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0));
    float _2186 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
    float _2187 = dot(vec3(_374, _375, _376), vec3(_2180, _2181, _2182));
    float _4149 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
    float _2190 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
    float _2191 = dot(vec3(cbLight._m0[_1872].xyz), vec3(_2180, _2181, _2182));
    float _4160 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
    float _2195 = _2172 * _2172;
    float _2199 = ((_2190 * _2190) * (_2195 + (-1.0))) + 1.0;
    float _2208 = (exp2(log2(1.0 - (isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2209 = 1.0 - _2172;
    float _2219 = (0.5 / (((_2108 * ((_2186 * _2209) + _2172)) + 9.9999999392252902907785028219223e-09) + (((_2108 * _2209) + _2172) * _2186))) * _2186;
    float _4171 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
    float _2221 = (isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0))) * (_2195 / ((_2199 * _2199) * 3.141590118408203125));
    float _2231 = (((_2208 * cbLight._m0[_2160].x) * _2221) * _1854) + ((((cbLight._m0[_2079].x * _1820) * _2132) * _2146) * _1868);
    float _2232 = (((_2208 * cbLight._m0[_2160].y) * _2221) * _1854) + ((((cbLight._m0[_2079].y * _1822) * _2132) * _2146) * _1868);
    float _2233 = (((_2208 * cbLight._m0[_2160].z) * _2221) * _1854) + ((((cbLight._m0[_2079].z * _1824) * _2132) * _2146) * _1868);
    float _2289;
    float _2291;
    float _2293;
    if (_1908)
    {
        _2289 = _2231;
        _2291 = _2232;
        _2293 = _2233;
    }
    else
    {
        uint _2295 = _1831 + 2u;
        uint _2299 = _1831 + 10u;
        float _2313 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2295].w)) * _377) * 0.949999988079071044921875);
        float _2314 = _2313 * _2313;
        float _2315 = cbLight._m0[_2295].x + _455;
        float _2316 = cbLight._m0[_2295].y + _456;
        float _2317 = cbLight._m0[_2295].z + _457;
        float _2321 = inversesqrt(dot(vec3(_2315, _2316, _2317), vec3(_2315, _2316, _2317)));
        float _2322 = _2321 * _2315;
        float _2323 = _2321 * _2316;
        float _2324 = _2321 * _2317;
        float _2325 = dot(vec3(_374, _375, _376), vec3(cbLight._m0[_2295].xyz));
        float _4182 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
        float _2328 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
        float _2329 = dot(vec3(_374, _375, _376), vec3(_2322, _2323, _2324));
        float _4193 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
        float _2332 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
        float _2333 = dot(vec3(cbLight._m0[_2295].xyz), vec3(_2322, _2323, _2324));
        float _4204 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
        float _2337 = _2314 * _2314;
        float _2341 = ((_2332 * _2332) * (_2337 + (-1.0))) + 1.0;
        float _2350 = (exp2(log2(1.0 - (isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2351 = 1.0 - _2314;
        float _2361 = (0.5 / (((_2108 * ((_2328 * _2351) + _2314)) + 9.9999999392252902907785028219223e-09) + (((_2108 * _2351) + _2314) * _2328))) * _2328;
        float _4215 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
        float _2363 = (isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0))) * (_2337 / ((_2341 * _2341) * 3.141590118408203125));
        float _2364 = isnan(1.0) ? _1846 : (isnan(_1846) ? 1.0 : min(_1846, 1.0));
        _2289 = (((_2350 * cbLight._m0[_2299].x) * _2363) * _2364) + _2231;
        _2291 = (((_2350 * cbLight._m0[_2299].y) * _2363) * _2364) + _2232;
        _2293 = (((_2350 * cbLight._m0[_2299].z) * _2363) * _2364) + _2233;
    }
    float _2395;
    float _2397;
    float _2399;
    if (_2017)
    {
        _2395 = _2289;
        _2397 = _2291;
        _2399 = _2293;
    }
    else
    {
        uint _2406 = _1831 + 3u;
        uint _2410 = _1831 + 11u;
        float _2424 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2406].w)) * _377) * 0.949999988079071044921875);
        float _2425 = _2424 * _2424;
        float _2426 = cbLight._m0[_2406].x + _455;
        float _2427 = cbLight._m0[_2406].y + _456;
        float _2428 = cbLight._m0[_2406].z + _457;
        float _2432 = inversesqrt(dot(vec3(_2426, _2427, _2428), vec3(_2426, _2427, _2428)));
        float _2433 = _2432 * _2426;
        float _2434 = _2432 * _2427;
        float _2435 = _2432 * _2428;
        float _2436 = dot(vec3(_374, _375, _376), vec3(cbLight._m0[_2406].xyz));
        float _4231 = isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : max(_2436, 0.0));
        float _2439 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
        float _2440 = dot(vec3(_374, _375, _376), vec3(_2433, _2434, _2435));
        float _4242 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
        float _2443 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
        float _2444 = dot(vec3(cbLight._m0[_2406].xyz), vec3(_2433, _2434, _2435));
        float _4253 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
        float _2448 = _2425 * _2425;
        float _2452 = ((_2443 * _2443) * (_2448 + (-1.0))) + 1.0;
        float _2461 = (exp2(log2(1.0 - (isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2462 = 1.0 - _2425;
        float _2472 = (0.5 / (((_2108 * ((_2439 * _2462) + _2425)) + 9.9999999392252902907785028219223e-09) + (((_2108 * _2462) + _2425) * _2439))) * _2439;
        float _4264 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
        float _2474 = (isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0))) * (_2448 / ((_2452 * _2452) * 3.141590118408203125));
        float _2475 = isnan(1.0) ? _1847 : (isnan(_1847) ? 1.0 : min(_1847, 1.0));
        _2395 = (((_2461 * cbLight._m0[_2410].x) * _2474) * _2475) + _2289;
        _2397 = (((_2461 * cbLight._m0[_2410].y) * _2474) * _2475) + _2291;
        _2399 = (((_2461 * cbLight._m0[_2410].z) * _2474) * _2475) + _2293;
    }
    float _2540;
    float _2542;
    float _2544;
    float _2546;
    float _2548;
    float _2550;
    if (_1829.y == 0u)
    {
        uvec4 _2496 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2497 = _2496.x;
        uint _2508 = uint((float(_2496.y) * floor(float(uint(cbSceneParam._m0[85u].y * _464) / _2497))) + floor(float(uint(cbSceneParam._m0[85u].x * _463) / _2497)));
        float _2518 = (log2(_1607 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2519 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0));
        uint _2522 = uint(isnan(14.0) ? _2519 : (isnan(_2519) ? 14.0 : min(_2519, 14.0)));
        uvec4 _2527 = texelFetch(g_lightClusterGridBuffer, int(((_2522 << 2u) + (_2508 << 6u)) >> 2u));
        uint _2528 = _2527.x;
        uint _2529 = _2496.z;
        float _2607;
        float _2609;
        float _2611;
        float _2613;
        float _2615;
        float _2617;
        if (((((1u << ((_2529 >> 4u) & 15u)) + 4294967295u) & _2528) == 0u) || ((_2529 & 240u) == 0u))
        {
            _2607 = 0.0;
            _2609 = 0.0;
            _2611 = 0.0;
            _2613 = 0.0;
            _2615 = 0.0;
            _2617 = 0.0;
        }
        else
        {
            float _2608;
            float _2610;
            float _2612;
            float _2614;
            float _2616;
            float _2618;
            float _2751 = 0.0;
            float _2752 = 0.0;
            float _2753 = 0.0;
            float _2754 = 0.0;
            float _2755 = 0.0;
            float _2756 = 0.0;
            uint _2757 = 0u;
            uint _2766;
            bool _2767;
            for (;;)
            {
                _2766 = texelFetch(g_lightClassification, int((((_2522 << 5u) + (_2508 << 9u)) + (_2757 << 2u)) >> 2u)).x;
                _2767 = _2766 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2767)
                {
                    frontier_phi_68_pred = _2756;
                    frontier_phi_68_pred_1 = _2755;
                    frontier_phi_68_pred_2 = _2754;
                    frontier_phi_68_pred_3 = _2752;
                    frontier_phi_68_pred_4 = _2751;
                    frontier_phi_68_pred_5 = _2753;
                }
                else
                {
                    float _2875;
                    float _2876;
                    float _2877;
                    float _2878;
                    float _2879;
                    float _2880;
                    uint _2881;
                    _2875 = _2751;
                    _2876 = _2752;
                    _2877 = _2753;
                    _2878 = _2754;
                    _2879 = _2755;
                    _2880 = _2756;
                    _2881 = _2766;
                    float _2807;
                    float _2808;
                    float _2809;
                    float _2810;
                    float _2811;
                    float _2812;
                    for (;;)
                    {
                        uint _2885 = uint(findLSB(_2881)) + (_2757 << 5u);
                        uint _2882 = (_2881 + 4294967295u) & _2881;
                        uint _2887 = _2885 * 48u;
                        vec4 _2901 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2887)).x, texelFetch(g_PointLightRenderingBuffer, int(_2887 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2887 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2887 + 3u)).x));
                        uint _2907 = (_2885 * 48u) + 4u;
                        vec4 _2920 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2907)).x, texelFetch(g_PointLightRenderingBuffer, int(_2907 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2907 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2907 + 3u)).x));
                        uint _2926 = (_2885 * 48u) + 8u;
                        vec3 _2937 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2926)).x, texelFetch(g_PointLightRenderingBuffer, int(_2926 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2926 + 2u)).x));
                        float _2941 = _2901.x - _1605;
                        float _2942 = _2901.y - _1606;
                        float _2943 = _2901.z - _1607;
                        float _2944 = dot(vec3(_2941, _2942, _2943), vec3(_2941, _2942, _2943));
                        float _2947 = inversesqrt(_2944);
                        float _2948 = _2947 * _2941;
                        float _2949 = _2947 * _2942;
                        float _2950 = _2947 * _2943;
                        float _2951 = dot(vec3(_485, _488, _491), vec3(_2948, _2949, _2950));
                        float _2956 = 1.0 - (_2944 * _2901.w);
                        float _4290 = isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : max(_2956, 0.0));
                        float _2957 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
                        float _2958 = sqrt(_2944) * _2920.w;
                        float _2961 = 1.39999997615814208984375 / (_2958 + 1.39999997615814208984375);
                        float _2962 = _2961 * _2961;
                        float _2965 = ((1.0 - _2962) * _2951) + _2962;
                        float _2968 = _2958 * _2958;
                        float _2972 = ((isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : max(_2965, 0.0))) * _2957) / ((_2968 * 0.699999988079071044921875) + 1.0);
                        float _2976 = (-0.0) - _1605;
                        float _2977 = (-0.0) - _1606;
                        float _2978 = (-0.0) - _1607;
                        float _2982 = inversesqrt(dot(vec3(_2976, _2977, _2978), vec3(_2976, _2977, _2978)));
                        float _2983 = _2982 * _2976;
                        float _2984 = _2982 * _2977;
                        float _2985 = _2982 * _2978;
                        float _2992 = exp2(log2(1.0 / ((_2968 * 3.5) + 5.0)) * 0.25);
                        float _2993 = 1.0 - _545;
                        float _3000 = sqrt(1.0 - ((1.0 - (_2993 * _2993)) * (1.0 - (_2992 * _2992))));
                        float _3001 = _3000 * _3000;
                        float _3002 = _3001 * _3001;
                        float _3003 = _2983 + _2948;
                        float _3004 = _2984 + _2949;
                        float _3005 = _2985 + _2950;
                        float _3009 = inversesqrt(dot(vec3(_3003, _3004, _3005), vec3(_3003, _3004, _3005)));
                        float _3013 = dot(vec3(_485, _488, _491), vec3(_2983, _2984, _2985));
                        float _4306 = isnan(0.0) ? _3013 : (isnan(_3013) ? 0.0 : max(_3013, 0.0));
                        float _3016 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
                        float _3017 = dot(vec3(_485, _488, _491), vec3(_3009 * _3003, _3009 * _3004, _3009 * _3005));
                        float _4317 = isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : max(_3017, 0.0));
                        float _3020 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
                        float _3024 = ((_3020 * _3020) * (_3002 + (-1.0))) + 1.0;
                        float _3025 = _2961 * _3001;
                        float _3026 = _3025 * _3025;
                        float _3029 = ((1.0 - _3026) * _2951) + _3026;
                        float _4328 = isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : max(_3029, 0.0));
                        float _3030 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
                        float _3031 = 1.0 - _3001;
                        float _3041 = (0.5 / (((_3030 * ((_3016 * _3031) + _3001)) + 9.9999999392252902907785028219223e-09) + (((_3030 * _3031) + _3001) * _3016))) * _3030;
                        float _4339 = isnan(0.0) ? _3041 : (isnan(_3041) ? 0.0 : max(_3041, 0.0));
                        float _3052 = (((_3002 * 3.1415927410125732421875) * (isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0)))) / ((_3024 * _3024) * ((_2968 * 2.1991131305694580078125) + 3.141590118408203125))) * _2957;
                        _2810 = (_2972 * _2920.x) + _2878;
                        _2811 = (_2972 * _2920.y) + _2879;
                        _2812 = (_2972 * _2920.z) + _2880;
                        _2807 = (_3052 * _2937.x) + _2875;
                        _2808 = (_3052 * _2937.y) + _2876;
                        _2809 = (_3052 * _2937.z) + _2877;
                        if (_2882 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2875 = _2807;
                            _2876 = _2808;
                            _2877 = _2809;
                            _2878 = _2810;
                            _2879 = _2811;
                            _2880 = _2812;
                            _2881 = _2882;
                        }
                    }
                    frontier_phi_68_pred = _2812;
                    frontier_phi_68_pred_1 = _2811;
                    frontier_phi_68_pred_2 = _2810;
                    frontier_phi_68_pred_3 = _2808;
                    frontier_phi_68_pred_4 = _2807;
                    frontier_phi_68_pred_5 = _2809;
                }
                _2618 = frontier_phi_68_pred;
                _2616 = frontier_phi_68_pred_1;
                _2614 = frontier_phi_68_pred_2;
                _2610 = frontier_phi_68_pred_3;
                _2608 = frontier_phi_68_pred_4;
                _2612 = frontier_phi_68_pred_5;
                uint _2758 = _2757 + 1u;
                if (_2758 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2751 = _2608;
                    _2752 = _2610;
                    _2753 = _2612;
                    _2754 = _2614;
                    _2755 = _2616;
                    _2756 = _2618;
                    _2757 = _2758;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2607 = _2608;
            _2609 = _2610;
            _2611 = _2612;
            _2613 = _2614;
            _2615 = _2616;
            _2617 = _2618;
        }
        uvec4 _2621 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2622 = _2621.z;
        uint _2624 = (_2622 >> 8u) & 15u;
        float _2719;
        float _2721;
        float _2723;
        float _2725;
        float _2727;
        float _2729;
        if (((4294967295u << _2624) & _2528) == 0u)
        {
            _2719 = _2607;
            _2721 = _2609;
            _2723 = _2611;
            _2725 = _2613;
            _2727 = _2615;
            _2729 = _2617;
        }
        else
        {
            float _2744 = inversesqrt(dot(vec3(_1605, _1606, _1607), vec3(_1605, _1606, _1607)));
            float _2745 = _2744 * _1605;
            float _2746 = _2744 * _1606;
            float _2747 = _2744 * _1607;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2624 < ((_2622 >> 12u) & 15u))
            {
                float _2720;
                float _2722;
                float _2724;
                float _2726;
                float _2728;
                float _2730;
                float _2858 = _2607;
                float _2859 = _2609;
                float _2860 = _2611;
                float _2861 = _2613;
                float _2862 = _2615;
                float _2863 = _2617;
                uint _2864 = _2624;
                uint _2873;
                bool _2874;
                for (;;)
                {
                    _2873 = texelFetch(g_lightClassification, int((((_2522 << 5u) + (_2508 << 9u)) + (_2864 << 2u)) >> 2u)).x;
                    _2874 = _2873 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_2874)
                    {
                        frontier_phi_74_pred = _2860;
                        frontier_phi_74_pred_1 = _2859;
                        frontier_phi_74_pred_2 = _2858;
                        frontier_phi_74_pred_3 = _2863;
                        frontier_phi_74_pred_4 = _2862;
                        frontier_phi_74_pred_5 = _2861;
                    }
                    else
                    {
                        float _3057;
                        float _3058;
                        float _3059;
                        float _3060;
                        float _3061;
                        float _3062;
                        float _3353;
                        float _3354;
                        float _3355;
                        float _3356;
                        float _3357;
                        float _3358;
                        float _3070 = _2858;
                        float _3071 = _2859;
                        float _3072 = _2860;
                        float _3073 = _2861;
                        float _3074 = _2862;
                        float _3075 = _2863;
                        uint _3076 = _2873;
                        uint _3077;
                        vec4 _3102;
                        float _3103;
                        vec4 _3118;
                        vec3 _3130;
                        vec4 _3146;
                        vec4 _3162;
                        float _3209;
                        bool _3210;
                        for (;;)
                        {
                            uint _3087 = ((_2864 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3076));
                            _3077 = (_3076 + 4294967295u) & _3076;
                            uint _3089 = _3087 * 40u;
                            _3102 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3089)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3089 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3089 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3089 + 3u)).x));
                            _3103 = _3102.w;
                            uint _3105 = (_3087 * 40u) + 4u;
                            _3118 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3105)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 3u)).x));
                            uint _3120 = (_3087 * 40u) + 8u;
                            _3130 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3120)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 2u)).x));
                            uint _3133 = (_3087 * 40u) + 16u;
                            _3146 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3133)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3133 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3133 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3133 + 3u)).x));
                            uint _3149 = (_3087 * 40u) + 20u;
                            _3162 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3149)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 3u)).x));
                            uint _3165 = (_3087 * 40u) + 24u;
                            vec4 _3178 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3165)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 3u)).x));
                            uint _3184 = (_3087 * 40u) + 28u;
                            vec4 _3197 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3184)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 3u)).x));
                            _3209 = fma(_1607, _3197.z, fma(_1606, _3197.y, _3197.x * _1605)) + _3197.w;
                            _3210 = !((fma(_1607, _3178.z, fma(_1606, _3178.y, _3178.x * _1605)) + _3178.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3210)
                            {
                                float _3237 = _3102.x - _1605;
                                float _3238 = _3102.y - _1606;
                                float _3239 = _3102.z - _1607;
                                float _3240 = dot(vec3(_3237, _3238, _3239), vec3(_3237, _3238, _3239));
                                float _3243 = inversesqrt(_3240);
                                float _3244 = _3243 * _3237;
                                float _3245 = _3243 * _3238;
                                float _3246 = _3243 * _3239;
                                float _3250 = 1.0 - (_3240 / (_3103 * _3103));
                                float _4350 = isnan(0.0) ? _3250 : (isnan(_3250) ? 0.0 : max(_3250, 0.0));
                                float _3251 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
                                float _3255 = sqrt(_3240) * _3118.w;
                                float _3257 = 1.39999997615814208984375 / (_3255 + 1.39999997615814208984375);
                                float _3258 = _3257 * _3257;
                                float _3261 = ((1.0 - _3258) * dot(vec3(_3244, _3245, _3246), vec3(_485, _488, _491))) + _3258;
                                float _3264 = _3255 * _3255;
                                float _3268 = (fma(_1607, _3146.z, fma(_1606, _3146.y, _3146.x * _1605)) + _3146.w) / _3209;
                                float _3269 = (fma(_1607, _3162.z, fma(_1606, _3162.y, _3162.x * _1605)) + _3162.w) / _3209;
                                float _3273 = 1.0 - dot(vec2(_3268, _3269), vec2(_3268, _3269));
                                float _4366 = isnan(0.0) ? _3273 : (isnan(_3273) ? 0.0 : max(_3273, 0.0));
                                float _3274 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
                                float _3275 = _3274 * (((isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : max(_3261, 0.0))) * _3251) / ((_3264 * 0.699999988079071044921875) + 1.0));
                                float _3287 = exp2(log2(1.0 / ((_3264 * 3.5) + 5.0)) * 0.25);
                                float _3288 = 1.0 - _545;
                                float _3295 = sqrt(1.0 - ((1.0 - (_3288 * _3288)) * (1.0 - (_3287 * _3287))));
                                float _3296 = _3295 * _3295;
                                float _3297 = _3296 * _3296;
                                float _3298 = _3244 - _2745;
                                float _3299 = _3245 - _2746;
                                float _3300 = _3246 - _2747;
                                float _3304 = inversesqrt(dot(vec3(_3298, _3299, _3300), vec3(_3298, _3299, _3300)));
                                float _3308 = dot(vec3(_485, _488, _491), vec3((-0.0) - _2745, (-0.0) - _2746, (-0.0) - _2747));
                                float _4377 = isnan(0.0) ? _3308 : (isnan(_3308) ? 0.0 : max(_3308, 0.0));
                                float _3311 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
                                float _3312 = dot(vec3(_485, _488, _491), vec3(_3304 * _3298, _3304 * _3299, _3304 * _3300));
                                float _4388 = isnan(0.0) ? _3312 : (isnan(_3312) ? 0.0 : max(_3312, 0.0));
                                float _3315 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
                                float _3319 = ((_3315 * _3315) * (_3297 + (-1.0))) + 1.0;
                                float _3320 = _3257 * _3296;
                                float _3321 = _3320 * _3320;
                                float _3327 = ((1.0 - _3321) * dot(vec3(_485, _488, _491), vec3(_3244, _3245, _3246))) + _3321;
                                float _4399 = isnan(0.0) ? _3327 : (isnan(_3327) ? 0.0 : max(_3327, 0.0));
                                float _3328 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
                                float _3329 = 1.0 - _3296;
                                float _3339 = (0.5 / (((_3328 * ((_3311 * _3329) + _3296)) + 9.9999999392252902907785028219223e-09) + (((_3328 * _3329) + _3296) * _3311))) * _3328;
                                float _4410 = isnan(0.0) ? _3339 : (isnan(_3339) ? 0.0 : max(_3339, 0.0));
                                float _3349 = (_3274 * _3251) * (((_3297 * 3.1415927410125732421875) * (isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0)))) / ((_3319 * _3319) * ((_3264 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3349 * _3130.z;
                                frontier_phi_80_pred_1 = _3349 * _3130.y;
                                frontier_phi_80_pred_2 = _3349 * _3130.x;
                                frontier_phi_80_pred_3 = _3275 * _3118.z;
                                frontier_phi_80_pred_4 = _3275 * _3118.y;
                                frontier_phi_80_pred_5 = _3275 * _3118.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3355 = frontier_phi_80_pred;
                            _3354 = frontier_phi_80_pred_1;
                            _3353 = frontier_phi_80_pred_2;
                            _3358 = frontier_phi_80_pred_3;
                            _3357 = frontier_phi_80_pred_4;
                            _3356 = frontier_phi_80_pred_5;
                            _3060 = _3356 + _3073;
                            _3061 = _3357 + _3074;
                            _3062 = _3358 + _3075;
                            _3057 = _3353 + _3070;
                            _3058 = _3354 + _3071;
                            _3059 = _3355 + _3072;
                            if (_3077 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3070 = _3057;
                                _3071 = _3058;
                                _3072 = _3059;
                                _3073 = _3060;
                                _3074 = _3061;
                                _3075 = _3062;
                                _3076 = _3077;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3059;
                        frontier_phi_74_pred_1 = _3058;
                        frontier_phi_74_pred_2 = _3057;
                        frontier_phi_74_pred_3 = _3062;
                        frontier_phi_74_pred_4 = _3061;
                        frontier_phi_74_pred_5 = _3060;
                    }
                    _2724 = frontier_phi_74_pred;
                    _2722 = frontier_phi_74_pred_1;
                    _2720 = frontier_phi_74_pred_2;
                    _2730 = frontier_phi_74_pred_3;
                    _2728 = frontier_phi_74_pred_4;
                    _2726 = frontier_phi_74_pred_5;
                    uint _2865 = _2864 + 1u;
                    if (_2865 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2858 = _2720;
                        _2859 = _2722;
                        _2860 = _2724;
                        _2861 = _2726;
                        _2862 = _2728;
                        _2863 = _2730;
                        _2864 = _2865;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2728;
                frontier_phi_62_63_ladder_1 = _2726;
                frontier_phi_62_63_ladder_2 = _2724;
                frontier_phi_62_63_ladder_3 = _2730;
                frontier_phi_62_63_ladder_4 = _2722;
                frontier_phi_62_63_ladder_5 = _2720;
            }
            else
            {
                frontier_phi_62_63_ladder = _2615;
                frontier_phi_62_63_ladder_1 = _2613;
                frontier_phi_62_63_ladder_2 = _2611;
                frontier_phi_62_63_ladder_3 = _2617;
                frontier_phi_62_63_ladder_4 = _2609;
                frontier_phi_62_63_ladder_5 = _2607;
            }
            _2719 = frontier_phi_62_63_ladder_5;
            _2721 = frontier_phi_62_63_ladder_4;
            _2723 = frontier_phi_62_63_ladder_2;
            _2725 = frontier_phi_62_63_ladder_1;
            _2727 = frontier_phi_62_63_ladder;
            _2729 = frontier_phi_62_63_ladder_3;
        }
        float _2734 = isnan(1.0) ? _529 : (isnan(_529) ? 1.0 : min(_529, 1.0));
        _2540 = (_2734 * _2725) + _2072;
        _2542 = (_2734 * _2727) + _2074;
        _2544 = (_2734 * _2729) + _2076;
        _2546 = ((_2719 * 0.039999999105930328369140625) * _2734) + _2395;
        _2548 = ((_2721 * 0.039999999105930328369140625) * _2734) + _2397;
        _2550 = ((_2723 * 0.039999999105930328369140625) * _2734) + _2399;
    }
    else
    {
        _2540 = _2072;
        _2542 = _2074;
        _2544 = _2076;
        _2546 = _2395;
        _2548 = _2397;
        _2550 = _2399;
    }
    float _4426 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _4437 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _4448 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    uint _2570 = _504 + 6u;
    float _2578 = _463 / cbSceneParam._m0[86u].x;
    float _2579 = _464 / cbSceneParam._m0[86u].y;
    vec4 _2593 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2578, _2579, (log2((isnan(cbSceneParam._m0[77u].w) ? _396 : (isnan(_396) ? cbSceneParam._m0[77u].w : min(_396, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2595 = _2593.x;
    float _2596 = _2593.y;
    float _2597 = _2593.z;
    float _2598 = _2593.w;
    float _2669;
    float _2671;
    float _2673;
    float _2675;
    if (_396 > cbSceneParam._m0[78u].w)
    {
        float _2632 = isnan(_396) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _396 : min(cbSceneParam._m0[80u].w, _396));
        float _2633 = _2632 / _396;
        float _2644 = _2633 * _448;
        float _2645 = _449 * _2633;
        float _2646 = (-0.0) - _2645;
        float _2647 = _2633 * _450;
        float _2649 = (cbSceneParam._m0[77u].w * _2646) / _2632;
        float _2650 = _2649 + cbSceneParam._m0[79u].w;
        float _2651 = cbSceneParam._m0[79u].w - _2645;
        float _2657 = sqrt(((_2644 * _2644) + (_2645 * _2645)) + (_2647 * _2647));
        float _2660 = (1.0 - (cbSceneParam._m0[77u].w / _2632)) * _2657;
        float _2665 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2667 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2820;
        if (abs((_2646 - _2649) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2820 = ((((_2650 > 0.0) ? exp2(_2665 * _2650) : (2.0 - exp2(_2667 * _2650))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2660;
        }
        else
        {
            float _2780 = 1.0 / cbSceneParam._m0[80u].x;
            float _2781 = isnan(_2651) ? _2650 : (isnan(_2650) ? _2651 : max(_2650, _2651));
            float _2782 = isnan(_2651) ? _2650 : (isnan(_2650) ? _2651 : min(_2650, _2651));
            float _2791 = isnan(0.0) ? _2781 : (isnan(_2781) ? 0.0 : min(_2781, 0.0));
            float _2792 = isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : min(_2782, 0.0));
            _2820 = ((abs(_2657 / _2646) * cbSceneParam._m0[80u].y) * ((((_2791 - _2792) * 2.0) - ((exp2(_2665 * (isnan(0.0) ? _2781 : (isnan(_2781) ? 0.0 : max(_2781, 0.0)))) - exp2(_2665 * (isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0))))) * _2780)) - ((exp2(_2667 * _2791) - exp2(_2667 * _2792)) * _2780))) + (_2660 * cbSceneParam._m0[80u].z);
        }
        vec4 _2822 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2578, _2579, 1.0), 0.0);
        float _2831 = exp2((_2820 * (-1.44269502162933349609375)) * (1.0 - _2822.w));
        float _2832 = log2(_2831);
        float _2848 = log2(_2598);
        _2669 = (exp2(_2848 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2832 * cbSceneParam._m0[78u].x)) * _2822.x) / cbSceneParam._m0[78u].x)) + _2595;
        _2671 = (exp2(_2848 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2832 * cbSceneParam._m0[78u].y)) * _2822.y) / cbSceneParam._m0[78u].y)) + _2596;
        _2673 = (exp2(_2848 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2832 * cbSceneParam._m0[78u].z)) * _2822.z) / cbSceneParam._m0[78u].z)) + _2597;
        _2675 = _2831 * _2598;
    }
    else
    {
        _2669 = _2595;
        _2671 = _2596;
        _2673 = _2597;
        _2675 = _2598;
    }
    float _2687 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2688 = _2687 == 3.0;
    float _2689 = log2(_2675);
    float _2696 = exp2(_2689 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0))) * (_2540 + ((isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0))) * _529))) + ((_2546 + ((isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0))) * _1336)) * cbPerFrame._m0[3u].x));
    float _2697 = exp2(_2689 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0))) * (_2542 + ((isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0))) * _529))) + ((_2548 + ((isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0))) * _1336)) * cbPerFrame._m0[3u].x));
    float _2698 = exp2(_2689 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0))) * (_2544 + ((isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0))) * _529))) + ((_2550 + ((isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0))) * _1336)) * cbPerFrame._m0[3u].x));
    float _2707 = (_2687 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2707 * (_2688 ? _2696 : (_2696 + (cbSceneParam._m0[72u].w * _2669)));
    SV_Target.y = _2707 * (_2688 ? _2697 : (_2697 + (cbSceneParam._m0[72u].w * _2671)));
    SV_Target.z = _2707 * (_2688 ? _2698 : (_2698 + (cbSceneParam._m0[72u].w * _2673)));
    SV_Target.w = cbInstanceData._m0[_2570].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2570].w;
}


