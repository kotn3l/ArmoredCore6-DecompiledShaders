#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _899;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _188 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _189 = _188 * _180;
    float _190 = _188 * _181;
    float _191 = _188 * _182;
    float _195 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _196 = _195 * NORMAL.x;
    float _197 = _195 * NORMAL.y;
    float _198 = _195 * NORMAL.z;
    float _202 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _203 = _202 * TANGENT.x;
    float _204 = _202 * TANGENT.y;
    float _205 = _202 * TANGENT.z;
    float _210;
    float _211;
    float _212;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _210 = (-0.0) - _196;
        _211 = (-0.0) - _197;
        _212 = (-0.0) - _198;
    }
    else
    {
        _210 = _196;
        _211 = _197;
        _212 = _198;
    }
    vec4 _238 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _244 = _238.x * cbMtdParam._m0[9u].x;
    float _245 = _238.y * cbMtdParam._m0[9u].y;
    float _246 = _238.z * cbMtdParam._m0[9u].z;
    vec4 _264 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _268 = _264.z;
    float _272 = (_264.x * 2.0) + (-1.0);
    float _274 = (_264.y * 2.0) + (-1.0);
    float _275 = dot(vec2(_272, _274), vec2(_272, _274));
    float _3237 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    float _281 = sqrt(1.0 - (isnan(1.0) ? _3237 : (isnan(_3237) ? 1.0 : min(_3237, 1.0))));
    float _284 = fma(_281, _210, fma(_274, _203, _272 * _189));
    float _287 = fma(_281, _211, fma(_274, _204, _272 * _190));
    float _290 = fma(_281, _212, fma(_274, _205, _272 * _191));
    float _294 = inversesqrt(dot(vec3(_284, _287, _290), vec3(_284, _287, _290)));
    float _305 = cbMtdParam._m0[12u].x + dot(vec4(_294 * _284, _294 * _287, _294 * _290, 0.0), vec4(cbMtdParam._m0[13u].xyz, 0.0));
    float _3248 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _306 = isnan(1.0) ? _3248 : (isnan(_3248) ? 1.0 : min(_3248, 1.0));
    float _313 = (_306 * (cbMtdParam._m0[10u].x - _244)) + _244;
    float _314 = (_306 * (cbMtdParam._m0[10u].y - _245)) + _245;
    float _315 = (_306 * (cbMtdParam._m0[10u].z - _246)) + _246;
    vec4 _327 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _334 = (_327.x * 2.0) + (-1.0);
    float _335 = (_327.y * 2.0) + (-1.0);
    float _336 = dot(vec2(_334, _335), vec2(_334, _335));
    float _3259 = isnan(0.0) ? _336 : (isnan(_336) ? 0.0 : max(_336, 0.0));
    float _344 = ((_327.z - _268) * _306) + _268;
    float _356 = (((_334 - _272) + (cbMtdParam._m0[12u].w * _272)) * _306) + _272;
    float _357 = (((_335 - _274) + (cbMtdParam._m0[12u].w * _274)) * _306) + _274;
    float _358 = ((sqrt(1.0 - (isnan(1.0) ? _3259 : (isnan(_3259) ? 1.0 : min(_3259, 1.0)))) - _281) * _306) + _281;
    float _361 = fma(_358, _210, fma(_357, _203, _356 * _189));
    float _364 = fma(_358, _211, fma(_357, _204, _356 * _190));
    float _367 = fma(_358, _212, fma(_357, _205, _356 * _191));
    float _371 = inversesqrt(dot(vec3(_361, _364, _367), vec3(_361, _364, _367)));
    float _372 = _371 * _361;
    float _373 = _371 * _364;
    float _374 = _371 * _367;
    float _3270 = isnan(0.0) ? _344 : (isnan(_344) ? 0.0 : max(_344, 0.0));
    float _375 = isnan(1.0) ? _3270 : (isnan(_3270) ? 1.0 : min(_3270, 1.0));
    float _3281 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _3292 = isnan(0.0) ? _314 : (isnan(_314) ? 0.0 : max(_314, 0.0));
    float _3303 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _394 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _436 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _446 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _436);
    float _447 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _436);
    float _448 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _436);
    float _452 = inversesqrt(dot(vec3(_446, _447, _448), vec3(_446, _447, _448)));
    float _453 = _446 * _452;
    float _454 = _447 * _452;
    float _455 = _448 * _452;
    float _461 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _462 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _483 = fma(_374, cbSceneParam._m0[5u].z, fma(_373, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _372));
    float _486 = fma(_374, cbSceneParam._m0[6u].z, fma(_373, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _372));
    float _489 = fma(_374, cbSceneParam._m0[7u].z, fma(_373, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _372));
    uint _502 = uint(roundEven(NORMAL.w)) * 13u;
    uint _504 = (_502 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _510 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3281 : (isnan(_3281) ? 1.0 : min(_3281, 1.0)))) * cbInstanceData._m0[_504].x;
    float _511 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3292 : (isnan(_3292) ? 1.0 : min(_3292, 1.0)))) * cbInstanceData._m0[_504].y;
    float _512 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3303 : (isnan(_3303) ? 1.0 : min(_3303, 1.0)))) * cbInstanceData._m0[_504].z;
    float _3314 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _513 = isnan(1.0) ? _3314 : (isnan(_3314) ? 1.0 : min(_3314, 1.0));
    float _3325 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _514 = isnan(1.0) ? _3325 : (isnan(_3325) ? 1.0 : min(_3325, 1.0));
    float _3336 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _515 = isnan(1.0) ? _3336 : (isnan(_3336) ? 1.0 : min(_3336, 1.0));
    vec4 _524 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _461, cbSceneParam._m0[86u].y * _462));
    float _527 = _524.x * TEXCOORD_3.w;
    float _528 = dot(vec3(_372, _373, _374), vec3(_453, _454, _455));
    float _531 = _528 * 2.0;
    float _535 = (_531 * _372) - _453;
    float _536 = (_531 * _373) - _454;
    float _537 = (_531 * _374) - _455;
    float _541 = abs(dot(vec3(_453, _454, _455), vec3(_372, _373, _374)));
    float _3347 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _543 = sqrt(_375);
    float _556 = exp2((_543 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3347 : (isnan(_3347) ? 1.0 : min(_3347, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_543 * 3.0));
    float _588 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _592 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _596 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _898;
    float _900;
    float _901;
    float _902;
    float _903;
    float _904;
    float _905;
    float _906;
    float _907;
    float _908;
    float _909;
    float _910;
    float _911;
    float _912;
    float _913;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _623 = fma(_596, cbModelParam._m0[26u].z, fma(_592, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _588));
        float _627 = fma(_596, cbModelParam._m0[27u].z, fma(_592, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _588));
        float _631 = fma(_596, cbModelParam._m0[28u].z, fma(_592, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _588));
        float _656 = _588 + _372;
        float _657 = _592 + _373;
        float _658 = _596 + _374;
        float _668 = fma(_658, cbModelParam._m0[26u].z, fma(_657, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _656)) - _623;
        float _669 = fma(_658, cbModelParam._m0[27u].z, fma(_657, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _656)) - _627;
        float _670 = fma(_658, cbModelParam._m0[28u].z, fma(_657, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _656)) - _631;
        float _674 = inversesqrt(dot(vec3(_668, _669, _670), vec3(_668, _669, _670)));
        float _687 = ((_674 * _668) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_623 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _688 = ((_674 * _669) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_627 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _689 = ((_674 * _670) / cbModelParam._m0[34u].z) + ((((((_631 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _692 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_687, _688, _689), 0.0);
        vec4 _699 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_687, _688, _689), 0.0);
        vec4 _706 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_687, _688, _689), 0.0);
        vec4 _713 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_687, _688, _689), 0.0);
        float _726 = exp2((_692.w + (-0.5)) * 20.0) * 2.0;
        float _727 = _726 * (_692.x + (-0.5));
        float _728 = _726 * (_692.y + (-0.5));
        float _729 = _726 * (_692.z + (-0.5));
        float _736 = exp2((_699.w + (-0.5)) * 20.0) * 2.0;
        float _737 = _736 * (_699.x + (-0.5));
        float _738 = _736 * (_699.y + (-0.5));
        float _739 = _736 * (_699.z + (-0.5));
        float _746 = exp2((_706.w + (-0.5)) * 20.0) * 2.0;
        float _747 = _746 * (_706.x + (-0.5));
        float _748 = _746 * (_706.y + (-0.5));
        float _749 = _746 * (_706.z + (-0.5));
        float _756 = exp2((_713.w + (-0.5)) * 20.0) * 2.0;
        float _757 = _756 * (_713.x + (-0.5));
        float _758 = _756 * (_713.y + (-0.5));
        float _759 = _756 * (_713.z + (-0.5));
        float _760 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
        float _761 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
        float _762 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
        float _763 = _727 * 0.5;
        float _764 = _737 * 0.5;
        float _765 = _747 * 0.5;
        float _766 = dot(vec3(_763, _764, _765), vec3(_763, _764, _765));
        float _771 = (_766 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_766);
        float _780 = (dot(vec3(_372, _373, _374), vec3(_771 * _763, _771 * _764, _771 * _765)) + 1.0) * 0.5;
        float _3373 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
        float _790 = sqrt(((_764 * _764) + (_763 * _763)) + (_765 * _765)) / (_760 + 9.9999997473787516355514526367188e-06);
        float _3384 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
        float _791 = isnan(1.0) ? _3384 : (isnan(_3384) ? 1.0 : min(_3384, 1.0));
        float _792 = _791 * 2.0;
        float _796 = (1.0 - _791) / (_791 + 1.0);
        float _3395 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
        float _797 = isnan(1.0) ? _3395 : (isnan(_3395) ? 1.0 : min(_3395, 1.0));
        float _806 = ((((1.0 - _797) * (_792 + 2.0)) * exp2(log2(isnan(1.0) ? _3373 : (isnan(_3373) ? 1.0 : min(_3373, 1.0))) * (_792 + 1.0))) + _797) * _760;
        float _807 = _728 * 0.5;
        float _808 = _738 * 0.5;
        float _809 = _748 * 0.5;
        float _810 = dot(vec3(_807, _808, _809), vec3(_807, _808, _809));
        float _815 = (_810 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_810);
        float _823 = (dot(vec3(_372, _373, _374), vec3(_815 * _807, _815 * _808, _815 * _809)) + 1.0) * 0.5;
        float _3406 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
        float _832 = sqrt(((_808 * _808) + (_807 * _807)) + (_809 * _809)) / (_761 + 9.9999997473787516355514526367188e-06);
        float _3417 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
        float _833 = isnan(1.0) ? _3417 : (isnan(_3417) ? 1.0 : min(_3417, 1.0));
        float _834 = _833 * 2.0;
        float _838 = (1.0 - _833) / (_833 + 1.0);
        float _3428 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
        float _839 = isnan(1.0) ? _3428 : (isnan(_3428) ? 1.0 : min(_3428, 1.0));
        float _848 = ((((1.0 - _839) * (_834 + 2.0)) * exp2(log2(isnan(1.0) ? _3406 : (isnan(_3406) ? 1.0 : min(_3406, 1.0))) * (_834 + 1.0))) + _839) * _761;
        float _849 = _729 * 0.5;
        float _850 = _739 * 0.5;
        float _851 = _749 * 0.5;
        float _852 = dot(vec3(_849, _850, _851), vec3(_849, _850, _851));
        float _857 = (_852 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_852);
        float _865 = (dot(vec3(_372, _373, _374), vec3(_857 * _849, _857 * _850, _857 * _851)) + 1.0) * 0.5;
        float _3439 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
        float _874 = sqrt(((_850 * _850) + (_849 * _849)) + (_851 * _851)) / (_762 + 9.9999997473787516355514526367188e-06);
        float _3450 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
        float _875 = isnan(1.0) ? _3450 : (isnan(_3450) ? 1.0 : min(_3450, 1.0));
        float _876 = _875 * 2.0;
        float _880 = (1.0 - _875) / (_875 + 1.0);
        float _3461 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
        float _881 = isnan(1.0) ? _3461 : (isnan(_3461) ? 1.0 : min(_3461, 1.0));
        float _890 = ((((1.0 - _881) * (_876 + 2.0)) * exp2(log2(isnan(1.0) ? _3439 : (isnan(_3439) ? 1.0 : min(_3439, 1.0))) * (_876 + 1.0))) + _881) * _762;
        _898 = _729;
        _900 = _728;
        _901 = _727;
        _902 = _739;
        _903 = _738;
        _904 = _737;
        _905 = _749;
        _906 = _748;
        _907 = _747;
        _908 = _762;
        _909 = _761;
        _910 = _760;
        _911 = cbModelParam._m0[36u].z * (isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0)));
        _912 = cbModelParam._m0[36u].z * (isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0)));
        _913 = cbModelParam._m0[36u].z * (isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0)));
    }
    else
    {
        _898 = _899;
        _900 = _899;
        _901 = _899;
        _902 = _899;
        _903 = _899;
        _904 = _899;
        _905 = _899;
        _906 = _899;
        _907 = _899;
        _908 = _899;
        _909 = _899;
        _910 = _899;
        _911 = 0.0;
        _912 = 0.0;
        _913 = 0.0;
    }
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _939 = fma(_596, cbModelParam._m0[30u].z, fma(_592, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _588));
        float _943 = fma(_596, cbModelParam._m0[31u].z, fma(_592, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _588));
        float _947 = fma(_596, cbModelParam._m0[32u].z, fma(_592, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _588));
        float _970 = _588 + _372;
        float _971 = _592 + _373;
        float _972 = _596 + _374;
        float _982 = fma(_972, cbModelParam._m0[30u].z, fma(_971, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _970)) - _939;
        float _983 = fma(_972, cbModelParam._m0[31u].z, fma(_971, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _970)) - _943;
        float _984 = fma(_972, cbModelParam._m0[32u].z, fma(_971, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _970)) - _947;
        float _988 = inversesqrt(dot(vec3(_982, _983, _984), vec3(_982, _983, _984)));
        float _1001 = ((_988 * _982) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_939 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1002 = ((_988 * _983) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_943 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1003 = ((_988 * _984) / cbModelParam._m0[35u].z) + ((((((_947 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1005 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1001, _1002, _1003), 0.0);
        vec4 _1012 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1001, _1002, _1003), 0.0);
        vec4 _1019 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1001, _1002, _1003), 0.0);
        vec4 _1026 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1001, _1002, _1003), 0.0);
        float _1038 = exp2((_1005.w + (-0.5)) * 20.0) * 2.0;
        float _1039 = _1038 * (_1005.x + (-0.5));
        float _1040 = _1038 * (_1005.y + (-0.5));
        float _1041 = _1038 * (_1005.z + (-0.5));
        float _1048 = exp2((_1012.w + (-0.5)) * 20.0) * 2.0;
        float _1049 = _1048 * (_1012.x + (-0.5));
        float _1050 = _1048 * (_1012.y + (-0.5));
        float _1051 = _1048 * (_1012.z + (-0.5));
        float _1058 = exp2((_1019.w + (-0.5)) * 20.0) * 2.0;
        float _1059 = _1058 * (_1019.x + (-0.5));
        float _1060 = _1058 * (_1019.y + (-0.5));
        float _1061 = _1058 * (_1019.z + (-0.5));
        float _1068 = exp2((_1026.w + (-0.5)) * 20.0) * 2.0;
        float _1069 = _1068 * (_1026.x + (-0.5));
        float _1070 = _1068 * (_1026.y + (-0.5));
        float _1071 = _1068 * (_1026.z + (-0.5));
        float _1072 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1073 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1074 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1075 = _1039 * 0.5;
        float _1076 = _1049 * 0.5;
        float _1077 = _1059 * 0.5;
        float _1078 = dot(vec3(_1075, _1076, _1077), vec3(_1075, _1076, _1077));
        float _1083 = (_1078 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1078);
        float _1091 = (dot(vec3(_372, _373, _374), vec3(_1083 * _1075, _1083 * _1076, _1083 * _1077)) + 1.0) * 0.5;
        float _3502 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1100 = sqrt(((_1076 * _1076) + (_1075 * _1075)) + (_1077 * _1077)) / (_1072 + 9.9999997473787516355514526367188e-06);
        float _3513 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1101 = isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0));
        float _1102 = _1101 * 2.0;
        float _1106 = (1.0 - _1101) / (_1101 + 1.0);
        float _3524 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1107 = isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0));
        float _1116 = ((((1.0 - _1107) * (_1102 + 2.0)) * exp2(log2(isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0))) * (_1102 + 1.0))) + _1107) * _1072;
        float _1117 = _1040 * 0.5;
        float _1118 = _1050 * 0.5;
        float _1119 = _1060 * 0.5;
        float _1120 = dot(vec3(_1117, _1118, _1119), vec3(_1117, _1118, _1119));
        float _1125 = (_1120 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1120);
        float _1133 = (dot(vec3(_372, _373, _374), vec3(_1125 * _1117, _1125 * _1118, _1125 * _1119)) + 1.0) * 0.5;
        float _3535 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1142 = sqrt(((_1118 * _1118) + (_1117 * _1117)) + (_1119 * _1119)) / (_1073 + 9.9999997473787516355514526367188e-06);
        float _3546 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1143 = isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0));
        float _1144 = _1143 * 2.0;
        float _1148 = (1.0 - _1143) / (_1143 + 1.0);
        float _3557 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1149 = isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0));
        float _1158 = ((((1.0 - _1149) * (_1144 + 2.0)) * exp2(log2(isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0))) * (_1144 + 1.0))) + _1149) * _1073;
        float _1159 = _1041 * 0.5;
        float _1160 = _1051 * 0.5;
        float _1161 = _1061 * 0.5;
        float _1162 = dot(vec3(_1159, _1160, _1161), vec3(_1159, _1160, _1161));
        float _1167 = (_1162 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1162);
        float _1175 = (dot(vec3(_372, _373, _374), vec3(_1167 * _1159, _1167 * _1160, _1167 * _1161)) + 1.0) * 0.5;
        float _3568 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1184 = sqrt(((_1160 * _1160) + (_1159 * _1159)) + (_1161 * _1161)) / (_1074 + 9.9999997473787516355514526367188e-06);
        float _3579 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1185 = isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0));
        float _1186 = _1185 * 2.0;
        float _1190 = (1.0 - _1185) / (_1185 + 1.0);
        float _3590 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1191 = isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0));
        float _1200 = ((((1.0 - _1191) * (_1186 + 2.0)) * exp2(log2(isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0))) * (_1186 + 1.0))) + _1191) * _1074;
        _1208 = _1041;
        _1209 = _1040;
        _1210 = _1039;
        _1211 = _1051;
        _1212 = _1050;
        _1213 = _1049;
        _1214 = _1061;
        _1215 = _1060;
        _1216 = _1059;
        _1217 = _1074;
        _1218 = _1073;
        _1219 = _1072;
        _1220 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0)));
        _1221 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0)));
        _1222 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0)));
    }
    else
    {
        _1208 = _899;
        _1209 = _899;
        _1210 = _899;
        _1211 = _899;
        _1212 = _899;
        _1213 = _899;
        _1214 = _899;
        _1215 = _899;
        _1216 = _899;
        _1217 = _899;
        _1218 = _899;
        _1219 = _899;
        _1220 = 0.0;
        _1221 = 0.0;
        _1222 = 0.0;
    }
    float _1232 = (cbModelParam._m0[1u].x * (_1220 - _911)) + _911;
    float _1233 = (cbModelParam._m0[1u].x * (_1221 - _912)) + _912;
    float _1234 = (cbModelParam._m0[1u].x * (_1222 - _913)) + _913;
    float _1255 = fma(_1234, cbSceneParam._m0[89u].z, fma(_1233, cbSceneParam._m0[89u].y, _1232 * cbSceneParam._m0[89u].x));
    float _1258 = fma(_1234, cbSceneParam._m0[90u].z, fma(_1233, cbSceneParam._m0[90u].y, _1232 * cbSceneParam._m0[90u].x));
    float _1261 = fma(_1234, cbSceneParam._m0[91u].z, fma(_1233, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1232));
    float _1276 = _535 * 0.5;
    float _1277 = _536 * 0.5;
    float _1278 = _537 * 0.5;
    float _1279 = dot(vec4(_1276, _1277, _1278, 1.0), vec4(_1210, _1213, _1216, _1219));
    float _1282 = dot(vec4(_1276, _1277, _1278, 1.0), vec4(_1209, _1212, _1215, _1218));
    float _1285 = dot(vec4(_1276, _1277, _1278, 1.0), vec4(_1208, _1211, _1214, _1217));
    float _1319;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1292 = dot(vec4(_1276, _1277, _1278, 1.0), vec4(_898, _902, _905, _908));
        float _1296 = dot(vec4(_1276, _1277, _1278, 1.0), vec4(_900, _903, _906, _909));
        float _1300 = dot(vec4(_1276, _1277, _1278, 1.0), vec4(_901, _904, _907, _910));
        float _1307 = dot(vec4(cbModelParam._m0[39u]), vec4(_1276, _1277, _1278, 1.0));
        _1319 = dot(vec3(isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0)), isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0)), isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1307) ? 0.0 : (isnan(0.0) ? _1307 : max(0.0, _1307))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1319 = 1.0;
    }
    float _1330;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1321 = dot(vec4(cbModelParam._m0[40u]), vec4(_1276, _1277, _1278, 1.0));
        _1330 = dot(vec3(isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0)), isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0)), isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1321) ? 0.0 : (isnan(0.0) ? _1321 : max(0.0, _1321))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1330 = 1.0;
    }
    float _1334 = (_1330 * cbModelParam._m0[1u].x) + (_1319 * (1.0 - cbModelParam._m0[1u].x));
    float _1344 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _375);
    float _1345 = isnan(_1344) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1344 : min(cbModelParam._m0[25u].z, _1344));
    float _1426;
    float _1428;
    float _1430;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1393 = fma(_596, cbModelParam._m0[13u].z, fma(_592, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _588)) + cbModelParam._m0[13u].w;
        float _1397 = fma(_596, cbModelParam._m0[14u].z, fma(_592, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _588)) + cbModelParam._m0[14u].w;
        float _1401 = fma(_596, cbModelParam._m0[15u].z, fma(_592, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _588)) + cbModelParam._m0[15u].w;
        float _1404 = fma(_537, cbModelParam._m0[13u].z, fma(_536, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _535));
        float _1407 = fma(_537, cbModelParam._m0[14u].z, fma(_536, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _535));
        float _1410 = fma(_537, cbModelParam._m0[15u].z, fma(_536, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _535));
        float _1438;
        if (_1404 > 0.0)
        {
            _1438 = abs((1.0 - _1393) / _1404);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1404 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1393 + 1.0) / _1404);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1438 = frontier_phi_16_14_ladder;
        }
        float _1664;
        if (_1407 > 0.0)
        {
            _1664 = abs((1.0 - _1397) / _1407);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1407 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1397 + 1.0) / _1407);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1664 = frontier_phi_25_21_ladder;
        }
        float _1910;
        if (_1410 > 0.0)
        {
            _1910 = abs((1.0 - _1401) / _1410);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1410 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1401 + 1.0) / _1410);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1910 = frontier_phi_37_32_ladder;
        }
        float _1912 = isnan(_1664) ? _1438 : (isnan(_1438) ? _1664 : min(_1438, _1664));
        float _1913 = isnan(_1910) ? _1912 : (isnan(_1912) ? _1910 : min(_1912, _1910));
        float _1917 = (_1913 * _1404) + _1393;
        float _1918 = (_1913 * _1407) + _1397;
        float _1919 = (_1913 * _1410) + _1401;
        float _1920 = _1913 * 9.9999997473787516355514526367188e-05;
        float _1922 = (-1.0) - _1920;
        float _1924 = _1920 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1919 > _1924) || ((_1919 < _1922) || ((_1918 > _1924) || ((_1918 < _1922) || ((_1917 < _1922) || (_1917 > _1924))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2043 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1919, cbModelParam._m0[9u].z, fma(_1918, cbModelParam._m0[9u].y, _1917 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1919, cbModelParam._m0[10u].z, fma(_1918, cbModelParam._m0[10u].y, _1917 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1919, cbModelParam._m0[11u].z, fma(_1918, cbModelParam._m0[11u].y, _1917 * cbModelParam._m0[11u].x))), _1345);
            frontier_phi_15_37_ladder = _2043.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2043.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2043.x * cbModelParam._m0[1u].y;
        }
        _1426 = frontier_phi_15_37_ladder_2;
        _1428 = frontier_phi_15_37_ladder_1;
        _1430 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1414 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_535, _536, _537), _1345);
        _1426 = _1414.x * cbModelParam._m0[1u].y;
        _1428 = _1414.y * cbModelParam._m0[1u].y;
        _1430 = _1414.z * cbModelParam._m0[1u].y;
    }
    float _1434 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _375);
    float _1435 = isnan(_1434) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1434 : min(cbModelParam._m0[25u].w, _1434));
    float _1528;
    float _1530;
    float _1532;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1492 = fma(_596, cbModelParam._m0[21u].z, fma(_592, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _588)) + cbModelParam._m0[21u].w;
        float _1496 = fma(_596, cbModelParam._m0[22u].z, fma(_592, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _588)) + cbModelParam._m0[22u].w;
        float _1500 = fma(_596, cbModelParam._m0[23u].z, fma(_592, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _588)) + cbModelParam._m0[23u].w;
        float _1503 = fma(_537, cbModelParam._m0[21u].z, fma(_536, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _535));
        float _1506 = fma(_537, cbModelParam._m0[22u].z, fma(_536, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _535));
        float _1509 = fma(_537, cbModelParam._m0[23u].z, fma(_536, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _535));
        float _1669;
        if (_1503 > 0.0)
        {
            _1669 = abs((1.0 - _1492) / _1503);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1503 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1492 + 1.0) / _1503);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1669 = frontier_phi_27_23_ladder;
        }
        float _1937;
        if (_1506 > 0.0)
        {
            _1937 = abs((1.0 - _1496) / _1506);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1506 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1496 + 1.0) / _1506);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1937 = frontier_phi_39_34_ladder;
        }
        float _2142;
        if (_1509 > 0.0)
        {
            _2142 = abs((1.0 - _1500) / _1509);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1509 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1500 + 1.0) / _1509);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2142 = frontier_phi_48_45_ladder;
        }
        float _2144 = isnan(_1937) ? _1669 : (isnan(_1669) ? _1937 : min(_1669, _1937));
        float _2145 = isnan(_2142) ? _2144 : (isnan(_2144) ? _2142 : min(_2144, _2142));
        float _2149 = (_2145 * _1503) + _1492;
        float _2150 = (_2145 * _1506) + _1496;
        float _2151 = (_2145 * _1509) + _1500;
        float _2152 = _2145 * 9.9999997473787516355514526367188e-05;
        float _2153 = (-1.0) - _2152;
        float _2155 = _2152 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2151 > _2155) || ((_2151 < _2153) || ((_2150 > _2155) || ((_2150 < _2153) || ((_2149 < _2153) || (_2149 > _2155))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2349 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2151, cbModelParam._m0[17u].z, fma(_2150, cbModelParam._m0[17u].y, _2149 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2151, cbModelParam._m0[18u].z, fma(_2150, cbModelParam._m0[18u].y, _2149 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2151, cbModelParam._m0[19u].z, fma(_2150, cbModelParam._m0[19u].y, _2149 * cbModelParam._m0[19u].x))), _1435);
            frontier_phi_24_48_ladder = _2349.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2349.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2349.x * cbModelParam._m0[1u].z;
        }
        _1528 = frontier_phi_24_48_ladder_2;
        _1530 = frontier_phi_24_48_ladder_1;
        _1532 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1512 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_535, _536, _537), _1435);
        _1528 = _1512.x * cbModelParam._m0[1u].z;
        _1530 = _1512.y * cbModelParam._m0[1u].z;
        _1532 = _1512.z * cbModelParam._m0[1u].z;
    }
    float _1544 = ((((1.0 - _556) * ((_543 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_556 * _543)) * _527;
    float _1545 = _1544 * ((cbModelParam._m0[1u].w * (_1528 - _1426)) + _1426);
    float _1546 = _1544 * ((cbModelParam._m0[1u].w * (_1530 - _1428)) + _1428);
    float _1547 = _1544 * ((cbModelParam._m0[1u].w * (_1532 - _1430)) + _1430);
    float _1550 = fma(_1547, cbSceneParam._m0[89u].z, fma(_1546, cbSceneParam._m0[89u].y, _1545 * cbSceneParam._m0[89u].x));
    float _1553 = fma(_1547, cbSceneParam._m0[90u].z, fma(_1546, cbSceneParam._m0[90u].y, _1545 * cbSceneParam._m0[90u].x));
    float _1556 = fma(_1547, cbSceneParam._m0[91u].z, fma(_1546, cbSceneParam._m0[91u].y, _1545 * cbSceneParam._m0[91u].x));
    vec4 _1564 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_461, _462));
    float _1566 = _1564.w;
    float _1578 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1566);
    float _1579 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1566);
    float _1580 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1566);
    uvec4 _1584 = floatBitsToUint(cbInstanceData._m0[_502 + 5u]);
    uint _1586 = _1584.x * 14u;
    uint _1587 = _1586 + 13u;
    float _1594 = _527 + (-1.0);
    float _1599 = (cbLight._m0[_1587].x * _1594) + 1.0;
    float _1600 = (cbLight._m0[_1587].y * _1594) + 1.0;
    float _1601 = (cbLight._m0[_1587].z * _1594) + 1.0;
    float _1602 = (cbLight._m0[_1587].w * _1594) + 1.0;
    uint _1603 = _1586 + 5u;
    float _1609 = isnan(1.0) ? _1600 : (isnan(_1600) ? 1.0 : min(_1600, 1.0));
    uint _1613 = _1586 + 4u;
    float _1623 = isnan(1.0) ? _1599 : (isnan(_1599) ? 1.0 : min(_1599, 1.0));
    uint _1627 = _1586 | 1u;
    float _1638 = dot(vec3(cbLight._m0[_1586].xyz), vec3(_372, _373, _374));
    float _1641 = dot(vec3(cbLight._m0[_1627].xyz), vec3(_372, _373, _374));
    float _3726 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
    float _3737 = isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0));
    float _1646 = (isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0))) * 0.3183098733425140380859375;
    float _1648 = (isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0))) * 0.3183098733425140380859375;
    float _1655 = ((cbLight._m0[_1603].x * _1609) * _1648) + (((cbLight._m0[_1613].x * _1578) * _1623) * _1646);
    float _1656 = ((_1609 * cbLight._m0[_1603].y) * _1648) + (((cbLight._m0[_1613].y * _1579) * _1623) * _1646);
    float _1657 = ((_1609 * cbLight._m0[_1603].z) * _1648) + (((cbLight._m0[_1613].z * _1580) * _1623) * _1646);
    uvec4 _1661 = floatBitsToUint(cbLight._m0[_1586 + 12u]);
    bool _1663 = _1661.x == 0u;
    float _1674;
    float _1676;
    float _1678;
    if (_1663)
    {
        _1674 = _1655;
        _1676 = _1656;
        _1678 = _1657;
    }
    else
    {
        uint _1682 = _1586 + 6u;
        float _1698 = (dot(vec3(cbLight._m0[_1586 + 2u].xyz), vec3(_372, _373, _374)) * 0.5) + 0.5;
        float _1699 = _1698 * _1698;
        float _3748 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
        float _1700 = isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0));
        float _1701 = isnan(1.0) ? _1601 : (isnan(_1601) ? 1.0 : min(_1601, 1.0));
        _1674 = (((cbLight._m0[_1682].x * 0.3183098733425140380859375) * _1700) * _1701) + _1655;
        _1676 = (((cbLight._m0[_1682].y * 0.3183098733425140380859375) * _1700) * _1701) + _1656;
        _1678 = (((cbLight._m0[_1682].z * 0.3183098733425140380859375) * _1700) * _1701) + _1657;
    }
    bool _1681 = _1661.y == 0u;
    float _1719;
    float _1721;
    float _1723;
    if (_1681)
    {
        _1719 = _1674;
        _1721 = _1676;
        _1723 = _1678;
    }
    else
    {
        uint _1881 = _1586 + 7u;
        float _1897 = (dot(vec3(cbLight._m0[_1586 + 3u].xyz), vec3(_372, _373, _374)) * 0.5) + 0.5;
        float _1898 = _1897 * _1897;
        float _3764 = isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0));
        float _1899 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
        float _1900 = isnan(1.0) ? _1602 : (isnan(_1602) ? 1.0 : min(_1602, 1.0));
        _1719 = (((cbLight._m0[_1881].x * 0.3183098733425140380859375) * _1899) * _1900) + _1674;
        _1721 = (((cbLight._m0[_1881].y * 0.3183098733425140380859375) * _1899) * _1900) + _1676;
        _1723 = (((cbLight._m0[_1881].z * 0.3183098733425140380859375) * _1899) * _1900) + _1678;
    }
    uint _1726 = _1586 + 8u;
    float _1739 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1586].w)) * _375) * 0.949999988079071044921875);
    float _1740 = _1739 * _1739;
    float _1741 = cbLight._m0[_1586].x + _453;
    float _1742 = cbLight._m0[_1586].y + _454;
    float _1743 = cbLight._m0[_1586].z + _455;
    float _1747 = inversesqrt(dot(vec3(_1741, _1742, _1743), vec3(_1741, _1742, _1743)));
    float _1748 = _1747 * _1741;
    float _1749 = _1747 * _1742;
    float _1750 = _1747 * _1743;
    float _1751 = dot(vec3(_372, _373, _374), vec3(cbLight._m0[_1586].xyz));
    float _3780 = isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0));
    float _1754 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
    float _3791 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _1755 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
    float _1756 = dot(vec3(_372, _373, _374), vec3(_1748, _1749, _1750));
    float _3802 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
    float _1759 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
    float _1760 = dot(vec3(cbLight._m0[_1586].xyz), vec3(_1748, _1749, _1750));
    float _3813 = isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0));
    float _1764 = _1740 * _1740;
    float _1768 = ((_1759 * _1759) * (_1764 + (-1.0))) + 1.0;
    float _1779 = (exp2(log2(1.0 - (isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1780 = 1.0 - _1740;
    float _1791 = (0.5 / (((_1755 * ((_1754 * _1780) + _1740)) + 9.9999999392252902907785028219223e-09) + (((_1755 * _1780) + _1740) * _1754))) * _1754;
    float _3824 = isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0));
    float _1793 = (isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0))) * (_1764 / ((_1768 * _1768) * 3.141590118408203125));
    uint _1807 = _1586 + 9u;
    float _1818 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1627].w)) * _375) * 0.949999988079071044921875);
    float _1819 = _1818 * _1818;
    float _1820 = cbLight._m0[_1627].x + _453;
    float _1821 = cbLight._m0[_1627].y + _454;
    float _1822 = cbLight._m0[_1627].z + _455;
    float _1826 = inversesqrt(dot(vec3(_1820, _1821, _1822), vec3(_1820, _1821, _1822)));
    float _1827 = _1826 * _1820;
    float _1828 = _1826 * _1821;
    float _1829 = _1826 * _1822;
    float _1830 = dot(vec3(_372, _373, _374), vec3(cbLight._m0[_1627].xyz));
    float _3835 = isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0));
    float _1833 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
    float _1834 = dot(vec3(_372, _373, _374), vec3(_1827, _1828, _1829));
    float _3846 = isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0));
    float _1837 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
    float _1838 = dot(vec3(cbLight._m0[_1627].xyz), vec3(_1827, _1828, _1829));
    float _3857 = isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0));
    float _1842 = _1819 * _1819;
    float _1846 = ((_1837 * _1837) * (_1842 + (-1.0))) + 1.0;
    float _1855 = (exp2(log2(1.0 - (isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1856 = 1.0 - _1819;
    float _1866 = (0.5 / (((_1755 * ((_1833 * _1856) + _1819)) + 9.9999999392252902907785028219223e-09) + (((_1755 * _1856) + _1819) * _1833))) * _1833;
    float _3868 = isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0));
    float _1868 = (isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0))) * (_1842 / ((_1846 * _1846) * 3.141590118408203125));
    float _1878 = (((_1855 * cbLight._m0[_1807].x) * _1868) * _1609) + ((((cbLight._m0[_1726].x * _1578) * _1779) * _1793) * _1623);
    float _1879 = (((_1855 * cbLight._m0[_1807].y) * _1868) * _1609) + ((((cbLight._m0[_1726].y * _1579) * _1779) * _1793) * _1623);
    float _1880 = (((_1855 * cbLight._m0[_1807].z) * _1868) * _1609) + ((((cbLight._m0[_1726].z * _1580) * _1779) * _1793) * _1623);
    float _1942;
    float _1944;
    float _1946;
    if (_1663)
    {
        _1942 = _1878;
        _1944 = _1879;
        _1946 = _1880;
    }
    else
    {
        uint _1948 = _1586 + 2u;
        uint _1952 = _1586 + 10u;
        float _1966 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1948].w)) * _375) * 0.949999988079071044921875);
        float _1967 = _1966 * _1966;
        float _1968 = cbLight._m0[_1948].x + _453;
        float _1969 = cbLight._m0[_1948].y + _454;
        float _1970 = cbLight._m0[_1948].z + _455;
        float _1974 = inversesqrt(dot(vec3(_1968, _1969, _1970), vec3(_1968, _1969, _1970)));
        float _1975 = _1974 * _1968;
        float _1976 = _1974 * _1969;
        float _1977 = _1974 * _1970;
        float _1978 = dot(vec3(_372, _373, _374), vec3(cbLight._m0[_1948].xyz));
        float _3879 = isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0));
        float _1981 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
        float _1982 = dot(vec3(_372, _373, _374), vec3(_1975, _1976, _1977));
        float _3890 = isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0));
        float _1985 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
        float _1986 = dot(vec3(cbLight._m0[_1948].xyz), vec3(_1975, _1976, _1977));
        float _3901 = isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0));
        float _1990 = _1967 * _1967;
        float _1994 = ((_1985 * _1985) * (_1990 + (-1.0))) + 1.0;
        float _2003 = (exp2(log2(1.0 - (isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2004 = 1.0 - _1967;
        float _2014 = (0.5 / (((_1755 * ((_1981 * _2004) + _1967)) + 9.9999999392252902907785028219223e-09) + (((_1755 * _2004) + _1967) * _1981))) * _1981;
        float _3912 = isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0));
        float _2016 = (isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0))) * (_1990 / ((_1994 * _1994) * 3.141590118408203125));
        float _2017 = isnan(1.0) ? _1601 : (isnan(_1601) ? 1.0 : min(_1601, 1.0));
        _1942 = (((_2003 * cbLight._m0[_1952].x) * _2016) * _2017) + _1878;
        _1944 = (((_2003 * cbLight._m0[_1952].y) * _2016) * _2017) + _1879;
        _1946 = (((_2003 * cbLight._m0[_1952].z) * _2016) * _2017) + _1880;
    }
    float _2052;
    float _2054;
    float _2056;
    if (_1681)
    {
        _2052 = _1942;
        _2054 = _1944;
        _2056 = _1946;
    }
    else
    {
        uint _2063 = _1586 + 3u;
        uint _2067 = _1586 + 11u;
        float _2081 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2063].w)) * _375) * 0.949999988079071044921875);
        float _2082 = _2081 * _2081;
        float _2083 = cbLight._m0[_2063].x + _453;
        float _2084 = cbLight._m0[_2063].y + _454;
        float _2085 = cbLight._m0[_2063].z + _455;
        float _2089 = inversesqrt(dot(vec3(_2083, _2084, _2085), vec3(_2083, _2084, _2085)));
        float _2090 = _2089 * _2083;
        float _2091 = _2089 * _2084;
        float _2092 = _2089 * _2085;
        float _2093 = dot(vec3(_372, _373, _374), vec3(cbLight._m0[_2063].xyz));
        float _3928 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
        float _2096 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
        float _2097 = dot(vec3(_372, _373, _374), vec3(_2090, _2091, _2092));
        float _3939 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
        float _2100 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
        float _2101 = dot(vec3(cbLight._m0[_2063].xyz), vec3(_2090, _2091, _2092));
        float _3950 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
        float _2105 = _2082 * _2082;
        float _2109 = ((_2100 * _2100) * (_2105 + (-1.0))) + 1.0;
        float _2118 = (exp2(log2(1.0 - (isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2119 = 1.0 - _2082;
        float _2129 = (0.5 / (((_1755 * ((_2096 * _2119) + _2082)) + 9.9999999392252902907785028219223e-09) + (((_1755 * _2119) + _2082) * _2096))) * _2096;
        float _3961 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
        float _2131 = (isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0))) * (_2105 / ((_2109 * _2109) * 3.141590118408203125));
        float _2132 = isnan(1.0) ? _1602 : (isnan(_1602) ? 1.0 : min(_1602, 1.0));
        _2052 = (((_2118 * cbLight._m0[_2067].x) * _2131) * _2132) + _1942;
        _2054 = (((_2118 * cbLight._m0[_2067].y) * _2131) * _2132) + _1944;
        _2056 = (((_2118 * cbLight._m0[_2067].z) * _2131) * _2132) + _1946;
    }
    float _2266;
    float _2268;
    float _2270;
    float _2272;
    float _2274;
    float _2276;
    if (_1584.y == 0u)
    {
        float _2207 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2208 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2207;
        float _2209 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2207;
        float _2210 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2207;
        uvec4 _2222 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2223 = _2222.x;
        uint _2234 = uint((float(_2222.y) * floor(float(uint(cbSceneParam._m0[85u].y * _462) / _2223))) + floor(float(uint(cbSceneParam._m0[85u].x * _461) / _2223)));
        float _2244 = (log2(_2210 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2245 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
        uint _2248 = uint(isnan(14.0) ? _2245 : (isnan(_2245) ? 14.0 : min(_2245, 14.0)));
        uvec4 _2253 = texelFetch(g_lightClusterGridBuffer, int(((_2248 << 2u) + (_2234 << 6u)) >> 2u));
        uint _2254 = _2253.x;
        uint _2255 = _2222.z;
        float _2354;
        float _2356;
        float _2358;
        float _2360;
        float _2362;
        float _2364;
        if (((((1u << ((_2255 >> 4u) & 15u)) + 4294967295u) & _2254) == 0u) || ((_2255 & 240u) == 0u))
        {
            _2354 = 0.0;
            _2356 = 0.0;
            _2358 = 0.0;
            _2360 = 0.0;
            _2362 = 0.0;
            _2364 = 0.0;
        }
        else
        {
            float _2355;
            float _2357;
            float _2359;
            float _2361;
            float _2363;
            float _2365;
            float _2498 = 0.0;
            float _2499 = 0.0;
            float _2500 = 0.0;
            float _2501 = 0.0;
            float _2502 = 0.0;
            float _2503 = 0.0;
            uint _2504 = 0u;
            uint _2513;
            bool _2514;
            for (;;)
            {
                _2513 = texelFetch(g_lightClassification, int((((_2248 << 5u) + (_2234 << 9u)) + (_2504 << 2u)) >> 2u)).x;
                _2514 = _2513 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2514)
                {
                    frontier_phi_63_pred = _2503;
                    frontier_phi_63_pred_1 = _2502;
                    frontier_phi_63_pred_2 = _2501;
                    frontier_phi_63_pred_3 = _2500;
                    frontier_phi_63_pred_4 = _2499;
                    frontier_phi_63_pred_5 = _2498;
                }
                else
                {
                    float _2622;
                    float _2623;
                    float _2624;
                    float _2625;
                    float _2626;
                    float _2627;
                    uint _2628;
                    _2622 = _2498;
                    _2623 = _2499;
                    _2624 = _2500;
                    _2625 = _2501;
                    _2626 = _2502;
                    _2627 = _2503;
                    _2628 = _2513;
                    float _2554;
                    float _2555;
                    float _2556;
                    float _2557;
                    float _2558;
                    float _2559;
                    for (;;)
                    {
                        uint _2632 = uint(findLSB(_2628)) + (_2504 << 5u);
                        uint _2629 = (_2628 + 4294967295u) & _2628;
                        uint _2634 = _2632 * 48u;
                        vec4 _2648 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2634)).x, texelFetch(g_PointLightRenderingBuffer, int(_2634 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2634 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2634 + 3u)).x));
                        uint _2654 = (_2632 * 48u) + 4u;
                        vec4 _2667 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2654)).x, texelFetch(g_PointLightRenderingBuffer, int(_2654 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2654 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2654 + 3u)).x));
                        uint _2673 = (_2632 * 48u) + 8u;
                        vec3 _2684 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2673)).x, texelFetch(g_PointLightRenderingBuffer, int(_2673 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2673 + 2u)).x));
                        float _2688 = _2648.x - _2208;
                        float _2689 = _2648.y - _2209;
                        float _2690 = _2648.z - _2210;
                        float _2691 = dot(vec3(_2688, _2689, _2690), vec3(_2688, _2689, _2690));
                        float _2694 = inversesqrt(_2691);
                        float _2695 = _2694 * _2688;
                        float _2696 = _2694 * _2689;
                        float _2697 = _2694 * _2690;
                        float _2698 = dot(vec3(_483, _486, _489), vec3(_2695, _2696, _2697));
                        float _2703 = 1.0 - (_2691 * _2648.w);
                        float _3987 = isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : max(_2703, 0.0));
                        float _2704 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
                        float _2705 = sqrt(_2691) * _2667.w;
                        float _2708 = 1.39999997615814208984375 / (_2705 + 1.39999997615814208984375);
                        float _2709 = _2708 * _2708;
                        float _2712 = ((1.0 - _2709) * _2698) + _2709;
                        float _2715 = _2705 * _2705;
                        float _2719 = ((isnan(0.0) ? _2712 : (isnan(_2712) ? 0.0 : max(_2712, 0.0))) * _2704) / ((_2715 * 0.699999988079071044921875) + 1.0);
                        float _2723 = (-0.0) - _2208;
                        float _2724 = (-0.0) - _2209;
                        float _2725 = (-0.0) - _2210;
                        float _2729 = inversesqrt(dot(vec3(_2723, _2724, _2725), vec3(_2723, _2724, _2725)));
                        float _2730 = _2729 * _2723;
                        float _2731 = _2729 * _2724;
                        float _2732 = _2729 * _2725;
                        float _2740 = exp2(log2(1.0 / ((_2715 * 3.5) + 5.0)) * 0.25);
                        float _2741 = 1.0 - _543;
                        float _2748 = sqrt(1.0 - ((1.0 - (_2741 * _2741)) * (1.0 - (_2740 * _2740))));
                        float _2749 = _2748 * _2748;
                        float _2750 = _2749 * _2749;
                        float _2751 = _2730 + _2695;
                        float _2752 = _2731 + _2696;
                        float _2753 = _2732 + _2697;
                        float _2757 = inversesqrt(dot(vec3(_2751, _2752, _2753), vec3(_2751, _2752, _2753)));
                        float _2761 = dot(vec3(_483, _486, _489), vec3(_2730, _2731, _2732));
                        float _4003 = isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : max(_2761, 0.0));
                        float _2764 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
                        float _2765 = dot(vec3(_483, _486, _489), vec3(_2757 * _2751, _2757 * _2752, _2757 * _2753));
                        float _4014 = isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0));
                        float _2768 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
                        float _2772 = ((_2768 * _2768) * (_2750 + (-1.0))) + 1.0;
                        float _2773 = _2708 * _2749;
                        float _2774 = _2773 * _2773;
                        float _2777 = ((1.0 - _2774) * _2698) + _2774;
                        float _4025 = isnan(0.0) ? _2777 : (isnan(_2777) ? 0.0 : max(_2777, 0.0));
                        float _2778 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
                        float _2779 = 1.0 - _2749;
                        float _2789 = (0.5 / (((_2778 * ((_2764 * _2779) + _2749)) + 9.9999999392252902907785028219223e-09) + (((_2778 * _2779) + _2749) * _2764))) * _2778;
                        float _4036 = isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : max(_2789, 0.0));
                        float _2800 = (((_2750 * 3.1415927410125732421875) * (isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0)))) / ((_2772 * _2772) * ((_2715 * 2.1991131305694580078125) + 3.141590118408203125))) * _2704;
                        _2557 = (_2719 * _2667.x) + _2625;
                        _2558 = (_2719 * _2667.y) + _2626;
                        _2559 = (_2719 * _2667.z) + _2627;
                        _2554 = (_2800 * _2684.x) + _2622;
                        _2555 = (_2800 * _2684.y) + _2623;
                        _2556 = (_2800 * _2684.z) + _2624;
                        if (_2629 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2622 = _2554;
                            _2623 = _2555;
                            _2624 = _2556;
                            _2625 = _2557;
                            _2626 = _2558;
                            _2627 = _2559;
                            _2628 = _2629;
                        }
                    }
                    frontier_phi_63_pred = _2559;
                    frontier_phi_63_pred_1 = _2558;
                    frontier_phi_63_pred_2 = _2557;
                    frontier_phi_63_pred_3 = _2556;
                    frontier_phi_63_pred_4 = _2555;
                    frontier_phi_63_pred_5 = _2554;
                }
                _2365 = frontier_phi_63_pred;
                _2363 = frontier_phi_63_pred_1;
                _2361 = frontier_phi_63_pred_2;
                _2359 = frontier_phi_63_pred_3;
                _2357 = frontier_phi_63_pred_4;
                _2355 = frontier_phi_63_pred_5;
                uint _2505 = _2504 + 1u;
                if (_2505 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2498 = _2355;
                    _2499 = _2357;
                    _2500 = _2359;
                    _2501 = _2361;
                    _2502 = _2363;
                    _2503 = _2365;
                    _2504 = _2505;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2354 = _2355;
            _2356 = _2357;
            _2358 = _2359;
            _2360 = _2361;
            _2362 = _2363;
            _2364 = _2365;
        }
        uvec4 _2368 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2369 = _2368.z;
        uint _2371 = (_2369 >> 8u) & 15u;
        float _2466;
        float _2468;
        float _2470;
        float _2472;
        float _2474;
        float _2476;
        if (((4294967295u << _2371) & _2254) == 0u)
        {
            _2466 = _2354;
            _2468 = _2356;
            _2470 = _2358;
            _2472 = _2360;
            _2474 = _2362;
            _2476 = _2364;
        }
        else
        {
            float _2491 = inversesqrt(dot(vec3(_2208, _2209, _2210), vec3(_2208, _2209, _2210)));
            float _2492 = _2491 * _2208;
            float _2493 = _2491 * _2209;
            float _2494 = _2491 * _2210;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2371 < ((_2369 >> 12u) & 15u))
            {
                float _2467;
                float _2469;
                float _2471;
                float _2473;
                float _2475;
                float _2477;
                float _2605 = _2354;
                float _2606 = _2356;
                float _2607 = _2358;
                float _2608 = _2360;
                float _2609 = _2362;
                float _2610 = _2364;
                uint _2611 = _2371;
                uint _2620;
                bool _2621;
                for (;;)
                {
                    _2620 = texelFetch(g_lightClassification, int((((_2248 << 5u) + (_2234 << 9u)) + (_2611 << 2u)) >> 2u)).x;
                    _2621 = _2620 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2621)
                    {
                        frontier_phi_69_pred = _2610;
                        frontier_phi_69_pred_1 = _2609;
                        frontier_phi_69_pred_2 = _2608;
                        frontier_phi_69_pred_3 = _2607;
                        frontier_phi_69_pred_4 = _2606;
                        frontier_phi_69_pred_5 = _2605;
                    }
                    else
                    {
                        float _2805;
                        float _2806;
                        float _2807;
                        float _2808;
                        float _2809;
                        float _2810;
                        float _3101;
                        float _3102;
                        float _3103;
                        float _3104;
                        float _3105;
                        float _3106;
                        float _2818 = _2605;
                        float _2819 = _2606;
                        float _2820 = _2607;
                        float _2821 = _2608;
                        float _2822 = _2609;
                        float _2823 = _2610;
                        uint _2824 = _2620;
                        uint _2825;
                        vec4 _2850;
                        float _2851;
                        vec4 _2866;
                        vec3 _2878;
                        vec4 _2894;
                        vec4 _2910;
                        float _2957;
                        bool _2958;
                        for (;;)
                        {
                            uint _2835 = ((_2611 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2824));
                            _2825 = (_2824 + 4294967295u) & _2824;
                            uint _2837 = _2835 * 40u;
                            _2850 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2837)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2837 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2837 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2837 + 3u)).x));
                            _2851 = _2850.w;
                            uint _2853 = (_2835 * 40u) + 4u;
                            _2866 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2853)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2853 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2853 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2853 + 3u)).x));
                            uint _2868 = (_2835 * 40u) + 8u;
                            _2878 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2868)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2868 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2868 + 2u)).x));
                            uint _2881 = (_2835 * 40u) + 16u;
                            _2894 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2881)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2881 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2881 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2881 + 3u)).x));
                            uint _2897 = (_2835 * 40u) + 20u;
                            _2910 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2897)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2897 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2897 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2897 + 3u)).x));
                            uint _2913 = (_2835 * 40u) + 24u;
                            vec4 _2926 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2913)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2913 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2913 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2913 + 3u)).x));
                            uint _2932 = (_2835 * 40u) + 28u;
                            vec4 _2945 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2932)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2932 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2932 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2932 + 3u)).x));
                            _2957 = fma(_2210, _2945.z, fma(_2209, _2945.y, _2945.x * _2208)) + _2945.w;
                            _2958 = !((fma(_2210, _2926.z, fma(_2209, _2926.y, _2926.x * _2208)) + _2926.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2958)
                            {
                                float _2985 = _2850.x - _2208;
                                float _2986 = _2850.y - _2209;
                                float _2987 = _2850.z - _2210;
                                float _2988 = dot(vec3(_2985, _2986, _2987), vec3(_2985, _2986, _2987));
                                float _2991 = inversesqrt(_2988);
                                float _2992 = _2991 * _2985;
                                float _2993 = _2991 * _2986;
                                float _2994 = _2991 * _2987;
                                float _2998 = 1.0 - (_2988 / (_2851 * _2851));
                                float _4047 = isnan(0.0) ? _2998 : (isnan(_2998) ? 0.0 : max(_2998, 0.0));
                                float _2999 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
                                float _3003 = sqrt(_2988) * _2866.w;
                                float _3005 = 1.39999997615814208984375 / (_3003 + 1.39999997615814208984375);
                                float _3006 = _3005 * _3005;
                                float _3009 = ((1.0 - _3006) * dot(vec3(_2992, _2993, _2994), vec3(_483, _486, _489))) + _3006;
                                float _3012 = _3003 * _3003;
                                float _3016 = (fma(_2210, _2894.z, fma(_2209, _2894.y, _2894.x * _2208)) + _2894.w) / _2957;
                                float _3017 = (fma(_2210, _2910.z, fma(_2209, _2910.y, _2910.x * _2208)) + _2910.w) / _2957;
                                float _3021 = 1.0 - dot(vec2(_3016, _3017), vec2(_3016, _3017));
                                float _4063 = isnan(0.0) ? _3021 : (isnan(_3021) ? 0.0 : max(_3021, 0.0));
                                float _3022 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
                                float _3023 = _3022 * (((isnan(0.0) ? _3009 : (isnan(_3009) ? 0.0 : max(_3009, 0.0))) * _2999) / ((_3012 * 0.699999988079071044921875) + 1.0));
                                float _3035 = exp2(log2(1.0 / ((_3012 * 3.5) + 5.0)) * 0.25);
                                float _3036 = 1.0 - _543;
                                float _3043 = sqrt(1.0 - ((1.0 - (_3036 * _3036)) * (1.0 - (_3035 * _3035))));
                                float _3044 = _3043 * _3043;
                                float _3045 = _3044 * _3044;
                                float _3046 = _2992 - _2492;
                                float _3047 = _2993 - _2493;
                                float _3048 = _2994 - _2494;
                                float _3052 = inversesqrt(dot(vec3(_3046, _3047, _3048), vec3(_3046, _3047, _3048)));
                                float _3056 = dot(vec3(_483, _486, _489), vec3((-0.0) - _2492, (-0.0) - _2493, (-0.0) - _2494));
                                float _4074 = isnan(0.0) ? _3056 : (isnan(_3056) ? 0.0 : max(_3056, 0.0));
                                float _3059 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
                                float _3060 = dot(vec3(_483, _486, _489), vec3(_3052 * _3046, _3052 * _3047, _3052 * _3048));
                                float _4085 = isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : max(_3060, 0.0));
                                float _3063 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
                                float _3067 = ((_3063 * _3063) * (_3045 + (-1.0))) + 1.0;
                                float _3068 = _3005 * _3044;
                                float _3069 = _3068 * _3068;
                                float _3075 = ((1.0 - _3069) * dot(vec3(_483, _486, _489), vec3(_2992, _2993, _2994))) + _3069;
                                float _4096 = isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : max(_3075, 0.0));
                                float _3076 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
                                float _3077 = 1.0 - _3044;
                                float _3087 = (0.5 / (((_3076 * ((_3059 * _3077) + _3044)) + 9.9999999392252902907785028219223e-09) + (((_3076 * _3077) + _3044) * _3059))) * _3076;
                                float _4107 = isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : max(_3087, 0.0));
                                float _3097 = (_3022 * _2999) * (((_3045 * 3.1415927410125732421875) * (isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0)))) / ((_3067 * _3067) * ((_3012 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3023 * _2866.z;
                                frontier_phi_75_pred_1 = _3023 * _2866.y;
                                frontier_phi_75_pred_2 = _3023 * _2866.x;
                                frontier_phi_75_pred_3 = _3097 * _2878.z;
                                frontier_phi_75_pred_4 = _3097 * _2878.y;
                                frontier_phi_75_pred_5 = _3097 * _2878.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3106 = frontier_phi_75_pred;
                            _3105 = frontier_phi_75_pred_1;
                            _3104 = frontier_phi_75_pred_2;
                            _3103 = frontier_phi_75_pred_3;
                            _3102 = frontier_phi_75_pred_4;
                            _3101 = frontier_phi_75_pred_5;
                            _2808 = _3104 + _2821;
                            _2809 = _3105 + _2822;
                            _2810 = _3106 + _2823;
                            _2805 = _3101 + _2818;
                            _2806 = _3102 + _2819;
                            _2807 = _3103 + _2820;
                            if (_2825 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2818 = _2805;
                                _2819 = _2806;
                                _2820 = _2807;
                                _2821 = _2808;
                                _2822 = _2809;
                                _2823 = _2810;
                                _2824 = _2825;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2810;
                        frontier_phi_69_pred_1 = _2809;
                        frontier_phi_69_pred_2 = _2808;
                        frontier_phi_69_pred_3 = _2807;
                        frontier_phi_69_pred_4 = _2806;
                        frontier_phi_69_pred_5 = _2805;
                    }
                    _2477 = frontier_phi_69_pred;
                    _2475 = frontier_phi_69_pred_1;
                    _2473 = frontier_phi_69_pred_2;
                    _2471 = frontier_phi_69_pred_3;
                    _2469 = frontier_phi_69_pred_4;
                    _2467 = frontier_phi_69_pred_5;
                    uint _2612 = _2611 + 1u;
                    if (_2612 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2605 = _2467;
                        _2606 = _2469;
                        _2607 = _2471;
                        _2608 = _2473;
                        _2609 = _2475;
                        _2610 = _2477;
                        _2611 = _2612;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2477;
                frontier_phi_57_58_ladder_1 = _2475;
                frontier_phi_57_58_ladder_2 = _2473;
                frontier_phi_57_58_ladder_3 = _2471;
                frontier_phi_57_58_ladder_4 = _2469;
                frontier_phi_57_58_ladder_5 = _2467;
            }
            else
            {
                frontier_phi_57_58_ladder = _2364;
                frontier_phi_57_58_ladder_1 = _2362;
                frontier_phi_57_58_ladder_2 = _2360;
                frontier_phi_57_58_ladder_3 = _2358;
                frontier_phi_57_58_ladder_4 = _2356;
                frontier_phi_57_58_ladder_5 = _2354;
            }
            _2466 = frontier_phi_57_58_ladder_5;
            _2468 = frontier_phi_57_58_ladder_4;
            _2470 = frontier_phi_57_58_ladder_3;
            _2472 = frontier_phi_57_58_ladder_2;
            _2474 = frontier_phi_57_58_ladder_1;
            _2476 = frontier_phi_57_58_ladder;
        }
        float _2481 = isnan(1.0) ? _527 : (isnan(_527) ? 1.0 : min(_527, 1.0));
        _2266 = (_2481 * _2472) + _1719;
        _2268 = (_2481 * _2474) + _1721;
        _2270 = (_2481 * _2476) + _1723;
        _2272 = ((_2466 * 0.039999999105930328369140625) * _2481) + _2052;
        _2274 = ((_2468 * 0.039999999105930328369140625) * _2481) + _2054;
        _2276 = ((_2470 * 0.039999999105930328369140625) * _2481) + _2056;
    }
    else
    {
        _2266 = _1719;
        _2268 = _1721;
        _2270 = _1723;
        _2272 = _2052;
        _2274 = _2054;
        _2276 = _2056;
    }
    float _4123 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _4134 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _4145 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    uint _2296 = _502 + 6u;
    float _2304 = _461 / cbSceneParam._m0[86u].x;
    float _2305 = _462 / cbSceneParam._m0[86u].y;
    vec4 _2319 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2304, _2305, (log2((isnan(cbSceneParam._m0[77u].w) ? _394 : (isnan(_394) ? cbSceneParam._m0[77u].w : min(_394, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2321 = _2319.x;
    float _2322 = _2319.y;
    float _2323 = _2319.z;
    float _2324 = _2319.w;
    float _2416;
    float _2418;
    float _2420;
    float _2422;
    if (_394 > cbSceneParam._m0[78u].w)
    {
        float _2379 = isnan(_394) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _394 : min(cbSceneParam._m0[80u].w, _394));
        float _2380 = _2379 / _394;
        float _2391 = _2380 * _446;
        float _2392 = _447 * _2380;
        float _2393 = (-0.0) - _2392;
        float _2394 = _2380 * _448;
        float _2396 = (cbSceneParam._m0[77u].w * _2393) / _2379;
        float _2397 = _2396 + cbSceneParam._m0[79u].w;
        float _2398 = cbSceneParam._m0[79u].w - _2392;
        float _2404 = sqrt(((_2391 * _2391) + (_2392 * _2392)) + (_2394 * _2394));
        float _2407 = (1.0 - (cbSceneParam._m0[77u].w / _2379)) * _2404;
        float _2412 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2414 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2567;
        if (abs((_2393 - _2396) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2567 = ((((_2397 > 0.0) ? exp2(_2412 * _2397) : (2.0 - exp2(_2414 * _2397))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2407;
        }
        else
        {
            float _2527 = 1.0 / cbSceneParam._m0[80u].x;
            float _2528 = isnan(_2398) ? _2397 : (isnan(_2397) ? _2398 : max(_2397, _2398));
            float _2529 = isnan(_2398) ? _2397 : (isnan(_2397) ? _2398 : min(_2397, _2398));
            float _2538 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : min(_2528, 0.0));
            float _2539 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : min(_2529, 0.0));
            _2567 = ((abs(_2404 / _2393) * cbSceneParam._m0[80u].y) * ((((_2538 - _2539) * 2.0) - ((exp2(_2412 * (isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0)))) - exp2(_2412 * (isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0))))) * _2527)) - ((exp2(_2414 * _2538) - exp2(_2414 * _2539)) * _2527))) + (_2407 * cbSceneParam._m0[80u].z);
        }
        vec4 _2569 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2304, _2305, 1.0), 0.0);
        float _2578 = exp2((_2567 * (-1.44269502162933349609375)) * (1.0 - _2569.w));
        float _2579 = log2(_2578);
        float _2595 = log2(_2324);
        _2416 = (exp2(_2595 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2579 * cbSceneParam._m0[78u].x)) * _2569.x) / cbSceneParam._m0[78u].x)) + _2321;
        _2418 = (exp2(_2595 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2579 * cbSceneParam._m0[78u].y)) * _2569.y) / cbSceneParam._m0[78u].y)) + _2322;
        _2420 = (exp2(_2595 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2579 * cbSceneParam._m0[78u].z)) * _2569.z) / cbSceneParam._m0[78u].z)) + _2323;
        _2422 = _2578 * _2324;
    }
    else
    {
        _2416 = _2321;
        _2418 = _2322;
        _2420 = _2323;
        _2422 = _2324;
    }
    float _2434 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2435 = _2434 == 3.0;
    float _2436 = log2(_2422);
    float _2443 = exp2(_2436 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0))) * (_2266 + ((isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0))) * _527))) + ((_2272 + ((isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0))) * _1334)) * cbPerFrame._m0[3u].x));
    float _2444 = exp2(_2436 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0))) * (_2268 + ((isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0))) * _527))) + ((_2274 + ((isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0))) * _1334)) * cbPerFrame._m0[3u].x));
    float _2445 = exp2(_2436 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0))) * (_2270 + ((isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0))) * _527))) + ((_2276 + ((isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0))) * _1334)) * cbPerFrame._m0[3u].x));
    float _2454 = (_2434 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2454 * (_2435 ? _2443 : (_2443 + (cbSceneParam._m0[72u].w * _2416)));
    SV_Target.y = _2454 * (_2435 ? _2444 : (_2444 + (cbSceneParam._m0[72u].w * _2418)));
    SV_Target.z = _2454 * (_2435 ? _2445 : (_2445 + (cbSceneParam._m0[72u].w * _2420)));
    SV_Target.w = cbInstanceData._m0[_2296].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2296].w;
}


