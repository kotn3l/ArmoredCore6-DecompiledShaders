#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _958;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _194 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _195 = _194 * _186;
    float _196 = _194 * _187;
    float _197 = _194 * _188;
    float _201 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _202 = _201 * NORMAL.x;
    float _203 = _201 * NORMAL.y;
    float _204 = _201 * NORMAL.z;
    float _208 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _209 = _208 * TANGENT.x;
    float _210 = _208 * TANGENT.y;
    float _211 = _208 * TANGENT.z;
    float _216;
    float _217;
    float _218;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _216 = (-0.0) - _202;
        _217 = (-0.0) - _203;
        _218 = (-0.0) - _204;
    }
    else
    {
        _216 = _202;
        _217 = _203;
        _218 = _204;
    }
    vec4 _244 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _250 = _244.x * cbMtdParam._m0[9u].x;
    float _251 = _244.y * cbMtdParam._m0[9u].y;
    float _252 = _244.z * cbMtdParam._m0[9u].z;
    vec4 _270 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _274 = _270.z;
    float _278 = (_270.x * 2.0) + (-1.0);
    float _280 = (_270.y * 2.0) + (-1.0);
    float _281 = dot(vec2(_278, _280), vec2(_278, _280));
    float _3575 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    float _287 = sqrt(1.0 - (isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0))));
    float _290 = fma(_287, _216, fma(_280, _209, _278 * _195));
    float _293 = fma(_287, _217, fma(_280, _210, _278 * _196));
    float _296 = fma(_287, _218, fma(_280, _211, _278 * _197));
    float _300 = inversesqrt(dot(vec3(_290, _293, _296), vec3(_290, _293, _296)));
    float _329 = (cbMtdParam._m0[12u].x + dot(vec4(_300 * _290, _300 * _293, _300 * _296, 0.0), vec4(cbMtdParam._m0[13u].xyz, 0.0))) - (texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w)).x * cbMtdParam._m0[12u].y);
    float _3586 = isnan(0.0) ? _329 : (isnan(_329) ? 0.0 : max(_329, 0.0));
    float _330 = isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0));
    float _337 = (_330 * (cbMtdParam._m0[10u].x - _250)) + _250;
    float _338 = (_330 * (cbMtdParam._m0[10u].y - _251)) + _251;
    float _339 = (_330 * (cbMtdParam._m0[10u].z - _252)) + _252;
    vec4 _351 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _353 = _351.x;
    float _355 = _353 - (_353 * _330);
    vec4 _367 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _374 = (_367.x * 2.0) + (-1.0);
    float _375 = (_367.y * 2.0) + (-1.0);
    float _376 = dot(vec2(_374, _375), vec2(_374, _375));
    float _3597 = isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : max(_376, 0.0));
    float _384 = ((_367.z - _274) * _330) + _274;
    float _396 = (((_374 - _278) + (cbMtdParam._m0[12u].w * _278)) * _330) + _278;
    float _397 = (((_375 - _280) + (cbMtdParam._m0[12u].w * _280)) * _330) + _280;
    float _398 = ((sqrt(1.0 - (isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0)))) - _287) * _330) + _287;
    float _401 = fma(_398, _216, fma(_397, _209, _396 * _195));
    float _404 = fma(_398, _217, fma(_397, _210, _396 * _196));
    float _407 = fma(_398, _218, fma(_397, _211, _396 * _197));
    float _411 = inversesqrt(dot(vec3(_401, _404, _407), vec3(_401, _404, _407)));
    float _412 = _411 * _401;
    float _413 = _411 * _404;
    float _414 = _411 * _407;
    float _3608 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _415 = isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0));
    float _3619 = isnan(0.0) ? _337 : (isnan(_337) ? 0.0 : max(_337, 0.0));
    float _3630 = isnan(0.0) ? _338 : (isnan(_338) ? 0.0 : max(_338, 0.0));
    float _3641 = isnan(0.0) ? _339 : (isnan(_339) ? 0.0 : max(_339, 0.0));
    float _3652 = isnan(0.0) ? _355 : (isnan(_355) ? 0.0 : max(_355, 0.0));
    float _419 = isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0));
    float _435 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _477 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _487 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _477);
    float _488 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _477);
    float _489 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _477);
    float _493 = inversesqrt(dot(vec3(_487, _488, _489), vec3(_487, _488, _489)));
    float _494 = _487 * _493;
    float _495 = _488 * _493;
    float _496 = _489 * _493;
    float _502 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _503 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _524 = fma(_414, cbSceneParam._m0[5u].z, fma(_413, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _412));
    float _527 = fma(_414, cbSceneParam._m0[6u].z, fma(_413, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _412));
    float _530 = fma(_414, cbSceneParam._m0[7u].z, fma(_413, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _412));
    uint _543 = uint(roundEven(NORMAL.w)) * 13u;
    uint _545 = (_543 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _551 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0)))) * cbInstanceData._m0[_545].x;
    float _552 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0)))) * cbInstanceData._m0[_545].y;
    float _553 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0)))) * cbInstanceData._m0[_545].z;
    float _3663 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
    float _554 = isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0));
    float _3674 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    float _555 = isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0));
    float _3685 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
    float _556 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
    float _557 = 1.0 - _419;
    float _558 = _554 * _557;
    float _559 = _555 * _557;
    float _560 = _556 * _557;
    float _565 = (_554 + (-0.039999999105930328369140625)) * _419;
    float _566 = (_555 + (-0.039999999105930328369140625)) * _419;
    float _567 = (_556 + (-0.039999999105930328369140625)) * _419;
    float _568 = _565 + 0.039999999105930328369140625;
    float _570 = _566 + 0.039999999105930328369140625;
    float _571 = _567 + 0.039999999105930328369140625;
    vec4 _580 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _502, cbSceneParam._m0[86u].y * _503));
    float _583 = _580.x * TEXCOORD_3.w;
    float _584 = dot(vec3(_412, _413, _414), vec3(_494, _495, _496));
    float _587 = _584 * 2.0;
    float _591 = (_587 * _412) - _494;
    float _592 = (_587 * _413) - _495;
    float _593 = (_587 * _414) - _496;
    float _597 = abs(dot(vec3(_494, _495, _496), vec3(_412, _413, _414)));
    float _3696 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _599 = sqrt(_415);
    float _612 = exp2((_599 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_599 * 3.0));
    float _618 = (1.0 - _612) * ((_599 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _619 = _612 * _599;
    float _647 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _651 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _655 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _957;
    float _959;
    float _960;
    float _961;
    float _962;
    float _963;
    float _964;
    float _965;
    float _966;
    float _967;
    float _968;
    float _969;
    float _970;
    float _971;
    float _972;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _682 = fma(_655, cbModelParam._m0[26u].z, fma(_651, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _647));
        float _686 = fma(_655, cbModelParam._m0[27u].z, fma(_651, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _647));
        float _690 = fma(_655, cbModelParam._m0[28u].z, fma(_651, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _647));
        float _715 = _647 + _412;
        float _716 = _651 + _413;
        float _717 = _655 + _414;
        float _727 = fma(_717, cbModelParam._m0[26u].z, fma(_716, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _715)) - _682;
        float _728 = fma(_717, cbModelParam._m0[27u].z, fma(_716, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _715)) - _686;
        float _729 = fma(_717, cbModelParam._m0[28u].z, fma(_716, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _715)) - _690;
        float _733 = inversesqrt(dot(vec3(_727, _728, _729), vec3(_727, _728, _729)));
        float _746 = ((_733 * _727) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_682 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _747 = ((_733 * _728) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_686 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _748 = ((_733 * _729) / cbModelParam._m0[34u].z) + ((((((_690 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _751 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_746, _747, _748), 0.0);
        vec4 _758 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_746, _747, _748), 0.0);
        vec4 _765 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_746, _747, _748), 0.0);
        vec4 _772 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_746, _747, _748), 0.0);
        float _785 = exp2((_751.w + (-0.5)) * 20.0) * 2.0;
        float _786 = _785 * (_751.x + (-0.5));
        float _787 = _785 * (_751.y + (-0.5));
        float _788 = _785 * (_751.z + (-0.5));
        float _795 = exp2((_758.w + (-0.5)) * 20.0) * 2.0;
        float _796 = _795 * (_758.x + (-0.5));
        float _797 = _795 * (_758.y + (-0.5));
        float _798 = _795 * (_758.z + (-0.5));
        float _805 = exp2((_765.w + (-0.5)) * 20.0) * 2.0;
        float _806 = _805 * (_765.x + (-0.5));
        float _807 = _805 * (_765.y + (-0.5));
        float _808 = _805 * (_765.z + (-0.5));
        float _815 = exp2((_772.w + (-0.5)) * 20.0) * 2.0;
        float _816 = _815 * (_772.x + (-0.5));
        float _817 = _815 * (_772.y + (-0.5));
        float _818 = _815 * (_772.z + (-0.5));
        float _819 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
        float _820 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
        float _821 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
        float _822 = _786 * 0.5;
        float _823 = _796 * 0.5;
        float _824 = _806 * 0.5;
        float _825 = dot(vec3(_822, _823, _824), vec3(_822, _823, _824));
        float _830 = (_825 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_825);
        float _839 = (dot(vec3(_412, _413, _414), vec3(_830 * _822, _830 * _823, _830 * _824)) + 1.0) * 0.5;
        float _3722 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
        float _849 = sqrt(((_823 * _823) + (_822 * _822)) + (_824 * _824)) / (_819 + 9.9999997473787516355514526367188e-06);
        float _3733 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
        float _850 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
        float _851 = _850 * 2.0;
        float _855 = (1.0 - _850) / (_850 + 1.0);
        float _3744 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
        float _856 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
        float _865 = ((((1.0 - _856) * (_851 + 2.0)) * exp2(log2(isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0))) * (_851 + 1.0))) + _856) * _819;
        float _866 = _787 * 0.5;
        float _867 = _797 * 0.5;
        float _868 = _807 * 0.5;
        float _869 = dot(vec3(_866, _867, _868), vec3(_866, _867, _868));
        float _874 = (_869 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_869);
        float _882 = (dot(vec3(_412, _413, _414), vec3(_874 * _866, _874 * _867, _874 * _868)) + 1.0) * 0.5;
        float _3755 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
        float _891 = sqrt(((_867 * _867) + (_866 * _866)) + (_868 * _868)) / (_820 + 9.9999997473787516355514526367188e-06);
        float _3766 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
        float _892 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
        float _893 = _892 * 2.0;
        float _897 = (1.0 - _892) / (_892 + 1.0);
        float _3777 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
        float _898 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
        float _907 = ((((1.0 - _898) * (_893 + 2.0)) * exp2(log2(isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0))) * (_893 + 1.0))) + _898) * _820;
        float _908 = _788 * 0.5;
        float _909 = _798 * 0.5;
        float _910 = _808 * 0.5;
        float _911 = dot(vec3(_908, _909, _910), vec3(_908, _909, _910));
        float _916 = (_911 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_911);
        float _924 = (dot(vec3(_412, _413, _414), vec3(_916 * _908, _916 * _909, _916 * _910)) + 1.0) * 0.5;
        float _3788 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        float _933 = sqrt(((_909 * _909) + (_908 * _908)) + (_910 * _910)) / (_821 + 9.9999997473787516355514526367188e-06);
        float _3799 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
        float _934 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
        float _935 = _934 * 2.0;
        float _939 = (1.0 - _934) / (_934 + 1.0);
        float _3810 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
        float _940 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
        float _949 = ((((1.0 - _940) * (_935 + 2.0)) * exp2(log2(isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0))) * (_935 + 1.0))) + _940) * _821;
        _957 = _788;
        _959 = _787;
        _960 = _786;
        _961 = _798;
        _962 = _797;
        _963 = _796;
        _964 = _808;
        _965 = _807;
        _966 = _806;
        _967 = _821;
        _968 = _820;
        _969 = _819;
        _970 = cbModelParam._m0[36u].z * (isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0)));
        _971 = cbModelParam._m0[36u].z * (isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0)));
        _972 = cbModelParam._m0[36u].z * (isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0)));
    }
    else
    {
        _957 = _958;
        _959 = _958;
        _960 = _958;
        _961 = _958;
        _962 = _958;
        _963 = _958;
        _964 = _958;
        _965 = _958;
        _966 = _958;
        _967 = _958;
        _968 = _958;
        _969 = _958;
        _970 = 0.0;
        _971 = 0.0;
        _972 = 0.0;
    }
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _998 = fma(_655, cbModelParam._m0[30u].z, fma(_651, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _647));
        float _1002 = fma(_655, cbModelParam._m0[31u].z, fma(_651, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _647));
        float _1006 = fma(_655, cbModelParam._m0[32u].z, fma(_651, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _647));
        float _1029 = _647 + _412;
        float _1030 = _651 + _413;
        float _1031 = _655 + _414;
        float _1041 = fma(_1031, cbModelParam._m0[30u].z, fma(_1030, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1029)) - _998;
        float _1042 = fma(_1031, cbModelParam._m0[31u].z, fma(_1030, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1029)) - _1002;
        float _1043 = fma(_1031, cbModelParam._m0[32u].z, fma(_1030, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1029)) - _1006;
        float _1047 = inversesqrt(dot(vec3(_1041, _1042, _1043), vec3(_1041, _1042, _1043)));
        float _1060 = ((_1047 * _1041) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_998 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1061 = ((_1047 * _1042) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1002 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1062 = ((_1047 * _1043) / cbModelParam._m0[35u].z) + ((((((_1006 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1064 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1060, _1061, _1062), 0.0);
        vec4 _1071 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1060, _1061, _1062), 0.0);
        vec4 _1078 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1060, _1061, _1062), 0.0);
        vec4 _1085 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1060, _1061, _1062), 0.0);
        float _1097 = exp2((_1064.w + (-0.5)) * 20.0) * 2.0;
        float _1098 = _1097 * (_1064.x + (-0.5));
        float _1099 = _1097 * (_1064.y + (-0.5));
        float _1100 = _1097 * (_1064.z + (-0.5));
        float _1107 = exp2((_1071.w + (-0.5)) * 20.0) * 2.0;
        float _1108 = _1107 * (_1071.x + (-0.5));
        float _1109 = _1107 * (_1071.y + (-0.5));
        float _1110 = _1107 * (_1071.z + (-0.5));
        float _1117 = exp2((_1078.w + (-0.5)) * 20.0) * 2.0;
        float _1118 = _1117 * (_1078.x + (-0.5));
        float _1119 = _1117 * (_1078.y + (-0.5));
        float _1120 = _1117 * (_1078.z + (-0.5));
        float _1127 = exp2((_1085.w + (-0.5)) * 20.0) * 2.0;
        float _1128 = _1127 * (_1085.x + (-0.5));
        float _1129 = _1127 * (_1085.y + (-0.5));
        float _1130 = _1127 * (_1085.z + (-0.5));
        float _1131 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1132 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1133 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1134 = _1098 * 0.5;
        float _1135 = _1108 * 0.5;
        float _1136 = _1118 * 0.5;
        float _1137 = dot(vec3(_1134, _1135, _1136), vec3(_1134, _1135, _1136));
        float _1142 = (_1137 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1137);
        float _1150 = (dot(vec3(_412, _413, _414), vec3(_1142 * _1134, _1142 * _1135, _1142 * _1136)) + 1.0) * 0.5;
        float _3851 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1159 = sqrt(((_1135 * _1135) + (_1134 * _1134)) + (_1136 * _1136)) / (_1131 + 9.9999997473787516355514526367188e-06);
        float _3862 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1160 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
        float _1161 = _1160 * 2.0;
        float _1165 = (1.0 - _1160) / (_1160 + 1.0);
        float _3873 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1166 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
        float _1175 = ((((1.0 - _1166) * (_1161 + 2.0)) * exp2(log2(isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0))) * (_1161 + 1.0))) + _1166) * _1131;
        float _1176 = _1099 * 0.5;
        float _1177 = _1109 * 0.5;
        float _1178 = _1119 * 0.5;
        float _1179 = dot(vec3(_1176, _1177, _1178), vec3(_1176, _1177, _1178));
        float _1184 = (_1179 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1179);
        float _1192 = (dot(vec3(_412, _413, _414), vec3(_1184 * _1176, _1184 * _1177, _1184 * _1178)) + 1.0) * 0.5;
        float _3884 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1201 = sqrt(((_1177 * _1177) + (_1176 * _1176)) + (_1178 * _1178)) / (_1132 + 9.9999997473787516355514526367188e-06);
        float _3895 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1202 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
        float _1203 = _1202 * 2.0;
        float _1207 = (1.0 - _1202) / (_1202 + 1.0);
        float _3906 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1208 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
        float _1217 = ((((1.0 - _1208) * (_1203 + 2.0)) * exp2(log2(isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0))) * (_1203 + 1.0))) + _1208) * _1132;
        float _1218 = _1100 * 0.5;
        float _1219 = _1110 * 0.5;
        float _1220 = _1120 * 0.5;
        float _1221 = dot(vec3(_1218, _1219, _1220), vec3(_1218, _1219, _1220));
        float _1226 = (_1221 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1221);
        float _1234 = (dot(vec3(_412, _413, _414), vec3(_1226 * _1218, _1226 * _1219, _1226 * _1220)) + 1.0) * 0.5;
        float _3917 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1243 = sqrt(((_1219 * _1219) + (_1218 * _1218)) + (_1220 * _1220)) / (_1133 + 9.9999997473787516355514526367188e-06);
        float _3928 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1244 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
        float _1245 = _1244 * 2.0;
        float _1249 = (1.0 - _1244) / (_1244 + 1.0);
        float _3939 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1250 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
        float _1259 = ((((1.0 - _1250) * (_1245 + 2.0)) * exp2(log2(isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0))) * (_1245 + 1.0))) + _1250) * _1133;
        _1267 = _1100;
        _1268 = _1099;
        _1269 = _1098;
        _1270 = _1110;
        _1271 = _1109;
        _1272 = _1108;
        _1273 = _1120;
        _1274 = _1119;
        _1275 = _1118;
        _1276 = _1133;
        _1277 = _1132;
        _1278 = _1131;
        _1279 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0)));
        _1280 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0)));
        _1281 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0)));
    }
    else
    {
        _1267 = _958;
        _1268 = _958;
        _1269 = _958;
        _1270 = _958;
        _1271 = _958;
        _1272 = _958;
        _1273 = _958;
        _1274 = _958;
        _1275 = _958;
        _1276 = _958;
        _1277 = _958;
        _1278 = _958;
        _1279 = 0.0;
        _1280 = 0.0;
        _1281 = 0.0;
    }
    float _1291 = (cbModelParam._m0[1u].x * (_1279 - _970)) + _970;
    float _1292 = (cbModelParam._m0[1u].x * (_1280 - _971)) + _971;
    float _1293 = (cbModelParam._m0[1u].x * (_1281 - _972)) + _972;
    float _1314 = fma(_1293, cbSceneParam._m0[89u].z, fma(_1292, cbSceneParam._m0[89u].y, _1291 * cbSceneParam._m0[89u].x));
    float _1317 = fma(_1293, cbSceneParam._m0[90u].z, fma(_1292, cbSceneParam._m0[90u].y, _1291 * cbSceneParam._m0[90u].x));
    float _1320 = fma(_1293, cbSceneParam._m0[91u].z, fma(_1292, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1291));
    float _1335 = _591 * 0.5;
    float _1336 = _592 * 0.5;
    float _1337 = _593 * 0.5;
    float _1338 = dot(vec4(_1335, _1336, _1337, 1.0), vec4(_1269, _1272, _1275, _1278));
    float _1341 = dot(vec4(_1335, _1336, _1337, 1.0), vec4(_1268, _1271, _1274, _1277));
    float _1344 = dot(vec4(_1335, _1336, _1337, 1.0), vec4(_1267, _1270, _1273, _1276));
    float _1378;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1351 = dot(vec4(_1335, _1336, _1337, 1.0), vec4(_957, _961, _964, _967));
        float _1355 = dot(vec4(_1335, _1336, _1337, 1.0), vec4(_959, _962, _965, _968));
        float _1359 = dot(vec4(_1335, _1336, _1337, 1.0), vec4(_960, _963, _966, _969));
        float _1366 = dot(vec4(cbModelParam._m0[39u]), vec4(_1335, _1336, _1337, 1.0));
        _1378 = dot(vec3(isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0)), isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0)), isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1366) ? 0.0 : (isnan(0.0) ? _1366 : max(0.0, _1366))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1378 = 1.0;
    }
    float _1389;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1380 = dot(vec4(cbModelParam._m0[40u]), vec4(_1335, _1336, _1337, 1.0));
        _1389 = dot(vec3(isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0)), isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0)), isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1380) ? 0.0 : (isnan(0.0) ? _1380 : max(0.0, _1380))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1389 = 1.0;
    }
    float _1393 = (_1389 * cbModelParam._m0[1u].x) + (_1378 * (1.0 - cbModelParam._m0[1u].x));
    float _1403 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _415);
    float _1404 = isnan(_1403) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1403 : min(cbModelParam._m0[25u].z, _1403));
    float _1485;
    float _1487;
    float _1489;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1452 = fma(_655, cbModelParam._m0[13u].z, fma(_651, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _647)) + cbModelParam._m0[13u].w;
        float _1456 = fma(_655, cbModelParam._m0[14u].z, fma(_651, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _647)) + cbModelParam._m0[14u].w;
        float _1460 = fma(_655, cbModelParam._m0[15u].z, fma(_651, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _647)) + cbModelParam._m0[15u].w;
        float _1463 = fma(_593, cbModelParam._m0[13u].z, fma(_592, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _591));
        float _1466 = fma(_593, cbModelParam._m0[14u].z, fma(_592, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _591));
        float _1469 = fma(_593, cbModelParam._m0[15u].z, fma(_592, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _591));
        float _1497;
        if (_1463 > 0.0)
        {
            _1497 = abs((1.0 - _1452) / _1463);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1463 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1452 + 1.0) / _1463);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1497 = frontier_phi_16_14_ladder;
        }
        float _1672;
        if (_1466 > 0.0)
        {
            _1672 = abs((1.0 - _1456) / _1466);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1466 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1456 + 1.0) / _1466);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1672 = frontier_phi_25_21_ladder;
        }
        float _1967;
        if (_1469 > 0.0)
        {
            _1967 = abs((1.0 - _1460) / _1469);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1469 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1460 + 1.0) / _1469);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1967 = frontier_phi_37_32_ladder;
        }
        float _1969 = isnan(_1672) ? _1497 : (isnan(_1497) ? _1672 : min(_1497, _1672));
        float _1970 = isnan(_1967) ? _1969 : (isnan(_1969) ? _1967 : min(_1969, _1967));
        float _1974 = (_1970 * _1463) + _1452;
        float _1975 = (_1970 * _1466) + _1456;
        float _1976 = (_1970 * _1469) + _1460;
        float _1977 = _1970 * 9.9999997473787516355514526367188e-05;
        float _1979 = (-1.0) - _1977;
        float _1981 = _1977 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1976 > _1981) || ((_1976 < _1979) || ((_1975 > _1981) || ((_1975 < _1979) || ((_1974 < _1979) || (_1974 > _1981))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2121 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1976, cbModelParam._m0[9u].z, fma(_1975, cbModelParam._m0[9u].y, _1974 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1976, cbModelParam._m0[10u].z, fma(_1975, cbModelParam._m0[10u].y, _1974 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1976, cbModelParam._m0[11u].z, fma(_1975, cbModelParam._m0[11u].y, _1974 * cbModelParam._m0[11u].x))), _1404);
            frontier_phi_15_37_ladder = _2121.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2121.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2121.z * cbModelParam._m0[1u].y;
        }
        _1485 = frontier_phi_15_37_ladder_1;
        _1487 = frontier_phi_15_37_ladder;
        _1489 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1473 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_591, _592, _593), _1404);
        _1485 = _1473.x * cbModelParam._m0[1u].y;
        _1487 = _1473.y * cbModelParam._m0[1u].y;
        _1489 = _1473.z * cbModelParam._m0[1u].y;
    }
    float _1493 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _415);
    float _1494 = isnan(_1493) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1493 : min(cbModelParam._m0[25u].w, _1493));
    float _1587;
    float _1589;
    float _1591;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1551 = fma(_655, cbModelParam._m0[21u].z, fma(_651, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _647)) + cbModelParam._m0[21u].w;
        float _1555 = fma(_655, cbModelParam._m0[22u].z, fma(_651, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _647)) + cbModelParam._m0[22u].w;
        float _1559 = fma(_655, cbModelParam._m0[23u].z, fma(_651, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _647)) + cbModelParam._m0[23u].w;
        float _1562 = fma(_593, cbModelParam._m0[21u].z, fma(_592, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _591));
        float _1565 = fma(_593, cbModelParam._m0[22u].z, fma(_592, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _591));
        float _1568 = fma(_593, cbModelParam._m0[23u].z, fma(_592, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _591));
        float _1677;
        if (_1562 > 0.0)
        {
            _1677 = abs((1.0 - _1551) / _1562);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1562 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1551 + 1.0) / _1562);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1677 = frontier_phi_27_23_ladder;
        }
        float _1994;
        if (_1565 > 0.0)
        {
            _1994 = abs((1.0 - _1555) / _1565);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1565 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1555 + 1.0) / _1565);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1994 = frontier_phi_39_34_ladder;
        }
        float _2332;
        if (_1568 > 0.0)
        {
            _2332 = abs((1.0 - _1559) / _1568);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1568 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1559 + 1.0) / _1568);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2332 = frontier_phi_49_46_ladder;
        }
        float _2334 = isnan(_1994) ? _1677 : (isnan(_1677) ? _1994 : min(_1677, _1994));
        float _2335 = isnan(_2332) ? _2334 : (isnan(_2334) ? _2332 : min(_2334, _2332));
        float _2339 = (_2335 * _1562) + _1551;
        float _2340 = (_2335 * _1565) + _1555;
        float _2341 = (_2335 * _1568) + _1559;
        float _2342 = _2335 * 9.9999997473787516355514526367188e-05;
        float _2343 = (-1.0) - _2342;
        float _2345 = _2342 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2341 > _2345) || ((_2341 < _2343) || ((_2340 > _2345) || ((_2340 < _2343) || ((_2339 < _2343) || (_2339 > _2345))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2463 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2341, cbModelParam._m0[17u].z, fma(_2340, cbModelParam._m0[17u].y, _2339 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2341, cbModelParam._m0[18u].z, fma(_2340, cbModelParam._m0[18u].y, _2339 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2341, cbModelParam._m0[19u].z, fma(_2340, cbModelParam._m0[19u].y, _2339 * cbModelParam._m0[19u].x))), _1494);
            frontier_phi_24_49_ladder = _2463.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2463.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2463.x * cbModelParam._m0[1u].z;
        }
        _1587 = frontier_phi_24_49_ladder_2;
        _1589 = frontier_phi_24_49_ladder_1;
        _1591 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1571 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_591, _592, _593), _1494);
        _1587 = _1571.x * cbModelParam._m0[1u].z;
        _1589 = _1571.y * cbModelParam._m0[1u].z;
        _1591 = _1571.z * cbModelParam._m0[1u].z;
    }
    float _1604 = (((_618 * _568) + _619) * _583) * ((cbModelParam._m0[1u].w * (_1587 - _1485)) + _1485);
    float _1606 = (((_618 * _570) + _619) * _583) * ((cbModelParam._m0[1u].w * (_1589 - _1487)) + _1487);
    float _1608 = (((_618 * _571) + _619) * _583) * ((cbModelParam._m0[1u].w * (_1591 - _1489)) + _1489);
    float _1611 = fma(_1608, cbSceneParam._m0[89u].z, fma(_1606, cbSceneParam._m0[89u].y, _1604 * cbSceneParam._m0[89u].x));
    float _1614 = fma(_1608, cbSceneParam._m0[90u].z, fma(_1606, cbSceneParam._m0[90u].y, _1604 * cbSceneParam._m0[90u].x));
    float _1617 = fma(_1608, cbSceneParam._m0[91u].z, fma(_1606, cbSceneParam._m0[91u].y, _1604 * cbSceneParam._m0[91u].x));
    float _1651 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1655 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1659 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1663 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1664 = _1651 / _1663;
    float _1665 = _1655 / _1663;
    float _1666 = _1659 / _1663;
    float _1813;
    float _1814;
    float _1815;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1693 = ((uint(_1666 > cbSceneParam._m0[59u].y) + uint(_1666 > cbSceneParam._m0[59u].x)) + uint(_1666 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1694 = _1693 + 43u;
        uint _1702 = _1693 + 44u;
        uint _1710 = _1693 + 45u;
        uint _1718 = _1693 + 46u;
        float _1729 = fma(_1663, cbSceneParam._m0[_1694].w, fma(_1659, cbSceneParam._m0[_1694].z, fma(_1655, cbSceneParam._m0[_1694].y, _1651 * cbSceneParam._m0[_1694].x)));
        float _1733 = fma(_1663, cbSceneParam._m0[_1702].w, fma(_1659, cbSceneParam._m0[_1702].z, fma(_1655, cbSceneParam._m0[_1702].y, _1651 * cbSceneParam._m0[_1702].x)));
        float _1741 = fma(_1663, cbSceneParam._m0[_1718].w, fma(_1659, cbSceneParam._m0[_1718].z, fma(_1655, cbSceneParam._m0[_1718].y, _1651 * cbSceneParam._m0[_1718].x)));
        float _1746 = cbSceneParam._m0[33u].z * _1741;
        float _1748 = cbSceneParam._m0[33u].w * _1741;
        float _1751 = fma(_1663, cbSceneParam._m0[_1710].w, fma(_1659, cbSceneParam._m0[_1710].z, fma(_1655, cbSceneParam._m0[_1710].y, _1651 * cbSceneParam._m0[_1710].x))) / _1741;
        float _1799 = (cbSceneParam._m0[33u].x - sqrt(((_1665 * _1665) + (_1664 * _1664)) + (_1666 * _1666))) * cbSceneParam._m0[33u].y;
        float _4065 = isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0));
        float _1806 = (isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1746 + _1729) / _1741, (_1748 + _1733) / _1741), _1751), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1748 + _1729) / _1741, (_1733 - _1746) / _1741), _1751), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1729 - _1746) / _1741, (_1733 - _1748) / _1741), _1751), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1729 - _1748) / _1741, (_1746 + _1733) / _1741), _1751), 0.0)).x), vec4(0.25)));
        _1813 = 1.0 - (_1806 * cbSceneParam._m0[34u].x);
        _1814 = 1.0 - (_1806 * cbSceneParam._m0[34u].y);
        _1815 = 1.0 - (_1806 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1813 = 1.0;
        _1814 = 1.0;
        _1815 = 1.0;
    }
    float _1879;
    float _1881;
    float _1883;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1867 = fma(_1663, cbSceneParam._m0[63u].w, fma(_1659, cbSceneParam._m0[63u].z, fma(_1655, cbSceneParam._m0[63u].y, _1651 * cbSceneParam._m0[63u].x)));
        float _1868 = fma(_1663, cbSceneParam._m0[60u].w, fma(_1659, cbSceneParam._m0[60u].z, fma(_1655, cbSceneParam._m0[60u].y, _1651 * cbSceneParam._m0[60u].x))) / _1867;
        float _1869 = fma(_1663, cbSceneParam._m0[61u].w, fma(_1659, cbSceneParam._m0[61u].z, fma(_1655, cbSceneParam._m0[61u].y, _1651 * cbSceneParam._m0[61u].x))) / _1867;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1868 >= cbSceneParam._m0[64u].x) && (_1869 >= cbSceneParam._m0[64u].y)) && (_1868 <= cbSceneParam._m0[64u].z)) && (_1869 <= cbSceneParam._m0[64u].w))
        {
            float _2007 = fma(_1663, cbSceneParam._m0[62u].w, fma(_1659, cbSceneParam._m0[62u].z, fma(_1655, cbSceneParam._m0[62u].y, _1651 * cbSceneParam._m0[62u].x))) / _1867;
            float _2011 = isnan(cbSceneParam._m0[41u].w) ? _2007 : (isnan(_2007) ? cbSceneParam._m0[41u].w : max(_2007, cbSceneParam._m0[41u].w));
            float _2054 = (cbSceneParam._m0[33u].x - sqrt(((_1665 * _1665) + (_1664 * _1664)) + (_1666 * _1666))) * cbSceneParam._m0[33u].y;
            float _4081 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
            float _2061 = (isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1868, cbSceneParam._m0[33u].w + _1869), _2011), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1868, _1869 - cbSceneParam._m0[33u].z), _2011), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1868 - cbSceneParam._m0[33u].z, _1869 - cbSceneParam._m0[33u].w), _2011), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1868 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1869), _2011), 0.0)).x), vec4(0.25)));
            float _2065 = 1.0 - (_2061 * cbSceneParam._m0[34u].x);
            float _2066 = 1.0 - (_2061 * cbSceneParam._m0[34u].y);
            float _2067 = 1.0 - (_2061 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2066) ? _1814 : (isnan(_1814) ? _2066 : min(_1814, _2066));
            frontier_phi_36_35_ladder_1 = isnan(_2067) ? _1815 : (isnan(_1815) ? _2067 : min(_1815, _2067));
            frontier_phi_36_35_ladder_2 = isnan(_2065) ? _1813 : (isnan(_1813) ? _2065 : min(_1813, _2065));
        }
        else
        {
            frontier_phi_36_35_ladder = _1814;
            frontier_phi_36_35_ladder_1 = _1815;
            frontier_phi_36_35_ladder_2 = _1813;
        }
        _1879 = frontier_phi_36_35_ladder_2;
        _1881 = frontier_phi_36_35_ladder;
        _1883 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _1879 = _1813;
        _1881 = _1814;
        _1883 = _1815;
    }
    uvec4 _1888 = floatBitsToUint(cbInstanceData._m0[_543 + 5u]);
    uint _1890 = _1888.x * 14u;
    uint _1891 = _1890 + 13u;
    float _1898 = _583 + (-1.0);
    float _1903 = (cbLight._m0[_1891].x * _1898) + 1.0;
    float _1904 = (cbLight._m0[_1891].y * _1898) + 1.0;
    float _1905 = (cbLight._m0[_1891].z * _1898) + 1.0;
    float _1906 = (cbLight._m0[_1891].w * _1898) + 1.0;
    uint _1907 = _1890 + 5u;
    float _1913 = isnan(1.0) ? _1904 : (isnan(_1904) ? 1.0 : min(_1904, 1.0));
    uint _1917 = _1890 + 4u;
    float _1926 = isnan(1.0) ? _1903 : (isnan(_1903) ? 1.0 : min(_1903, 1.0));
    uint _1930 = _1890 | 1u;
    float _1941 = dot(vec3(cbLight._m0[_1890].xyz), vec3(_412, _413, _414));
    float _1944 = dot(vec3(cbLight._m0[_1930].xyz), vec3(_412, _413, _414));
    float _4117 = isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0));
    float _4128 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0));
    float _1949 = (isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0))) * 0.3183098733425140380859375;
    float _1951 = (isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0))) * 0.3183098733425140380859375;
    float _1958 = ((cbLight._m0[_1907].x * _1913) * _1951) + (((cbLight._m0[_1917].x * _1879) * _1926) * _1949);
    float _1959 = ((_1913 * cbLight._m0[_1907].y) * _1951) + (((cbLight._m0[_1917].y * _1881) * _1926) * _1949);
    float _1960 = ((_1913 * cbLight._m0[_1907].z) * _1951) + (((cbLight._m0[_1917].z * _1883) * _1926) * _1949);
    uvec4 _1964 = floatBitsToUint(cbLight._m0[_1890 + 12u]);
    bool _1966 = _1964.x == 0u;
    float _2068;
    float _2070;
    float _2072;
    if (_1966)
    {
        _2068 = _1958;
        _2070 = _1959;
        _2072 = _1960;
    }
    else
    {
        uint _2076 = _1890 + 6u;
        float _2092 = (dot(vec3(cbLight._m0[_1890 + 2u].xyz), vec3(_412, _413, _414)) * 0.5) + 0.5;
        float _2093 = _2092 * _2092;
        float _4139 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
        float _2094 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
        float _2095 = isnan(1.0) ? _1905 : (isnan(_1905) ? 1.0 : min(_1905, 1.0));
        _2068 = (((cbLight._m0[_2076].x * 0.3183098733425140380859375) * _2094) * _2095) + _1958;
        _2070 = (((cbLight._m0[_2076].y * 0.3183098733425140380859375) * _2094) * _2095) + _1959;
        _2072 = (((cbLight._m0[_2076].z * 0.3183098733425140380859375) * _2094) * _2095) + _1960;
    }
    bool _2075 = _1964.y == 0u;
    float _2130;
    float _2132;
    float _2134;
    if (_2075)
    {
        _2130 = _2068;
        _2132 = _2070;
        _2134 = _2072;
    }
    else
    {
        uint _2303 = _1890 + 7u;
        float _2319 = (dot(vec3(cbLight._m0[_1890 + 3u].xyz), vec3(_412, _413, _414)) * 0.5) + 0.5;
        float _2320 = _2319 * _2319;
        float _4155 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0));
        float _2321 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _2322 = isnan(1.0) ? _1906 : (isnan(_1906) ? 1.0 : min(_1906, 1.0));
        _2130 = (((cbLight._m0[_2303].x * 0.3183098733425140380859375) * _2321) * _2322) + _2068;
        _2132 = (((cbLight._m0[_2303].y * 0.3183098733425140380859375) * _2321) * _2322) + _2070;
        _2134 = (((cbLight._m0[_2303].z * 0.3183098733425140380859375) * _2321) * _2322) + _2072;
    }
    uint _2137 = _1890 + 8u;
    float _2150 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1890].w)) * _415) * 0.949999988079071044921875);
    float _2151 = _2150 * _2150;
    float _2152 = cbLight._m0[_1890].x + _494;
    float _2153 = cbLight._m0[_1890].y + _495;
    float _2154 = cbLight._m0[_1890].z + _496;
    float _2158 = inversesqrt(dot(vec3(_2152, _2153, _2154), vec3(_2152, _2153, _2154)));
    float _2159 = _2158 * _2152;
    float _2160 = _2158 * _2153;
    float _2161 = _2158 * _2154;
    float _2162 = dot(vec3(_412, _413, _414), vec3(cbLight._m0[_1890].xyz));
    float _4171 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
    float _2165 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
    float _4182 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
    float _2166 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
    float _2167 = dot(vec3(_412, _413, _414), vec3(_2159, _2160, _2161));
    float _4193 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
    float _2170 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
    float _2171 = dot(vec3(cbLight._m0[_1890].xyz), vec3(_2159, _2160, _2161));
    float _4204 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
    float _2175 = _2151 * _2151;
    float _2179 = ((_2170 * _2170) * (_2175 + (-1.0))) + 1.0;
    float _2187 = exp2(log2(1.0 - (isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0)))) * 5.0);
    float _2188 = 0.959999978542327880859375 - _565;
    float _2190 = 0.959999978542327880859375 - _566;
    float _2191 = 0.959999978542327880859375 - _567;
    float _2198 = 1.0 - _2151;
    float _2209 = (0.5 / (((_2166 * ((_2165 * _2198) + _2151)) + 9.9999999392252902907785028219223e-09) + (((_2166 * _2198) + _2151) * _2165))) * _2165;
    float _4215 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
    float _2211 = (isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0))) * (_2175 / ((_2179 * _2179) * 3.141590118408203125));
    uint _2225 = _1890 + 9u;
    float _2236 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1930].w)) * _415) * 0.949999988079071044921875);
    float _2237 = _2236 * _2236;
    float _2238 = cbLight._m0[_1930].x + _494;
    float _2239 = cbLight._m0[_1930].y + _495;
    float _2240 = cbLight._m0[_1930].z + _496;
    float _2244 = inversesqrt(dot(vec3(_2238, _2239, _2240), vec3(_2238, _2239, _2240)));
    float _2245 = _2244 * _2238;
    float _2246 = _2244 * _2239;
    float _2247 = _2244 * _2240;
    float _2248 = dot(vec3(_412, _413, _414), vec3(cbLight._m0[_1930].xyz));
    float _4226 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
    float _2251 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
    float _2252 = dot(vec3(_412, _413, _414), vec3(_2245, _2246, _2247));
    float _4237 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
    float _2255 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
    float _2256 = dot(vec3(cbLight._m0[_1930].xyz), vec3(_2245, _2246, _2247));
    float _4248 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
    float _2260 = _2237 * _2237;
    float _2264 = ((_2255 * _2255) * (_2260 + (-1.0))) + 1.0;
    float _2271 = exp2(log2(1.0 - (isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0)))) * 5.0);
    float _2278 = 1.0 - _2237;
    float _2288 = (0.5 / (((_2166 * ((_2251 * _2278) + _2237)) + 9.9999999392252902907785028219223e-09) + (((_2166 * _2278) + _2237) * _2251))) * _2251;
    float _4259 = isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0));
    float _2290 = (isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0))) * (_2260 / ((_2264 * _2264) * 3.141590118408203125));
    float _2300 = (((((_2271 * _2188) + _568) * cbLight._m0[_2225].x) * _2290) * _1913) + ((((cbLight._m0[_2137].x * _1879) * ((_2187 * _2188) + _568)) * _2211) * _1926);
    float _2301 = (((((_2271 * _2190) + _570) * cbLight._m0[_2225].y) * _2290) * _1913) + ((((cbLight._m0[_2137].y * _1881) * ((_2187 * _2190) + _570)) * _2211) * _1926);
    float _2302 = (((((_2271 * _2191) + _571) * cbLight._m0[_2225].z) * _2290) * _1913) + ((((cbLight._m0[_2137].z * _1883) * ((_2187 * _2191) + _571)) * _2211) * _1926);
    float _2358;
    float _2360;
    float _2362;
    if (_1966)
    {
        _2358 = _2300;
        _2360 = _2301;
        _2362 = _2302;
    }
    else
    {
        uint _2364 = _1890 + 2u;
        uint _2368 = _1890 + 10u;
        float _2382 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2364].w)) * _415) * 0.949999988079071044921875);
        float _2383 = _2382 * _2382;
        float _2384 = cbLight._m0[_2364].x + _494;
        float _2385 = cbLight._m0[_2364].y + _495;
        float _2386 = cbLight._m0[_2364].z + _496;
        float _2390 = inversesqrt(dot(vec3(_2384, _2385, _2386), vec3(_2384, _2385, _2386)));
        float _2391 = _2390 * _2384;
        float _2392 = _2390 * _2385;
        float _2393 = _2390 * _2386;
        float _2394 = dot(vec3(_412, _413, _414), vec3(cbLight._m0[_2364].xyz));
        float _4270 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
        float _2397 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
        float _2398 = dot(vec3(_412, _413, _414), vec3(_2391, _2392, _2393));
        float _4281 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
        float _2401 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
        float _2402 = dot(vec3(cbLight._m0[_2364].xyz), vec3(_2391, _2392, _2393));
        float _4292 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
        float _2406 = _2383 * _2383;
        float _2410 = ((_2401 * _2401) * (_2406 + (-1.0))) + 1.0;
        float _2417 = exp2(log2(1.0 - (isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0)))) * 5.0);
        float _2424 = 1.0 - _2383;
        float _2434 = (0.5 / (((_2166 * ((_2397 * _2424) + _2383)) + 9.9999999392252902907785028219223e-09) + (((_2166 * _2424) + _2383) * _2397))) * _2397;
        float _4303 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
        float _2436 = (isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0))) * (_2406 / ((_2410 * _2410) * 3.141590118408203125));
        float _2437 = isnan(1.0) ? _1905 : (isnan(_1905) ? 1.0 : min(_1905, 1.0));
        _2358 = (((((_2417 * _2188) + _568) * cbLight._m0[_2368].x) * _2436) * _2437) + _2300;
        _2360 = (((((_2417 * _2190) + _570) * cbLight._m0[_2368].y) * _2436) * _2437) + _2301;
        _2362 = (((((_2417 * _2191) + _571) * cbLight._m0[_2368].z) * _2436) * _2437) + _2302;
    }
    float _2468;
    float _2470;
    float _2472;
    if (_2075)
    {
        _2468 = _2358;
        _2470 = _2360;
        _2472 = _2362;
    }
    else
    {
        uint _2479 = _1890 + 3u;
        uint _2483 = _1890 + 11u;
        float _2497 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2479].w)) * _415) * 0.949999988079071044921875);
        float _2498 = _2497 * _2497;
        float _2499 = cbLight._m0[_2479].x + _494;
        float _2500 = cbLight._m0[_2479].y + _495;
        float _2501 = cbLight._m0[_2479].z + _496;
        float _2505 = inversesqrt(dot(vec3(_2499, _2500, _2501), vec3(_2499, _2500, _2501)));
        float _2506 = _2505 * _2499;
        float _2507 = _2505 * _2500;
        float _2508 = _2505 * _2501;
        float _2509 = dot(vec3(_412, _413, _414), vec3(cbLight._m0[_2479].xyz));
        float _4319 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
        float _2512 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
        float _2513 = dot(vec3(_412, _413, _414), vec3(_2506, _2507, _2508));
        float _4330 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0));
        float _2516 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
        float _2517 = dot(vec3(cbLight._m0[_2479].xyz), vec3(_2506, _2507, _2508));
        float _4341 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
        float _2521 = _2498 * _2498;
        float _2525 = ((_2516 * _2516) * (_2521 + (-1.0))) + 1.0;
        float _2532 = exp2(log2(1.0 - (isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0)))) * 5.0);
        float _2539 = 1.0 - _2498;
        float _2549 = (0.5 / (((_2166 * ((_2512 * _2539) + _2498)) + 9.9999999392252902907785028219223e-09) + (((_2166 * _2539) + _2498) * _2512))) * _2512;
        float _4352 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
        float _2551 = (isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0))) * (_2521 / ((_2525 * _2525) * 3.141590118408203125));
        float _2552 = isnan(1.0) ? _1906 : (isnan(_1906) ? 1.0 : min(_1906, 1.0));
        _2468 = (((((_2532 * _2188) + _568) * cbLight._m0[_2483].x) * _2551) * _2552) + _2358;
        _2470 = (((((_2532 * _2190) + _570) * cbLight._m0[_2483].y) * _2551) * _2552) + _2360;
        _2472 = (((((_2532 * _2191) + _571) * cbLight._m0[_2483].z) * _2551) * _2552) + _2362;
    }
    float _2617;
    float _2619;
    float _2621;
    float _2623;
    float _2625;
    float _2627;
    if (_1888.y == 0u)
    {
        uvec4 _2573 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2574 = _2573.x;
        uint _2585 = uint((float(_2573.y) * floor(float(uint(cbSceneParam._m0[85u].y * _503) / _2574))) + floor(float(uint(cbSceneParam._m0[85u].x * _502) / _2574)));
        float _2595 = (log2(_1666 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2596 = isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0));
        uint _2599 = uint(isnan(14.0) ? _2596 : (isnan(_2596) ? 14.0 : min(_2596, 14.0)));
        uvec4 _2604 = texelFetch(g_lightClusterGridBuffer, int(((_2599 << 2u) + (_2585 << 6u)) >> 2u));
        uint _2605 = _2604.x;
        uint _2606 = _2573.z;
        float _2684;
        float _2686;
        float _2688;
        float _2690;
        float _2692;
        float _2694;
        if (((((1u << ((_2606 >> 4u) & 15u)) + 4294967295u) & _2605) == 0u) || ((_2606 & 240u) == 0u))
        {
            _2684 = 0.0;
            _2686 = 0.0;
            _2688 = 0.0;
            _2690 = 0.0;
            _2692 = 0.0;
            _2694 = 0.0;
        }
        else
        {
            float _2685;
            float _2687;
            float _2689;
            float _2691;
            float _2693;
            float _2695;
            float _2828 = 0.0;
            float _2829 = 0.0;
            float _2830 = 0.0;
            float _2831 = 0.0;
            float _2832 = 0.0;
            float _2833 = 0.0;
            uint _2834 = 0u;
            uint _2843;
            bool _2844;
            for (;;)
            {
                _2843 = texelFetch(g_lightClassification, int((((_2599 << 5u) + (_2585 << 9u)) + (_2834 << 2u)) >> 2u)).x;
                _2844 = _2843 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2844)
                {
                    frontier_phi_68_pred = _2833;
                    frontier_phi_68_pred_1 = _2832;
                    frontier_phi_68_pred_2 = _2831;
                    frontier_phi_68_pred_3 = _2829;
                    frontier_phi_68_pred_4 = _2828;
                    frontier_phi_68_pred_5 = _2830;
                }
                else
                {
                    float _2952;
                    float _2953;
                    float _2954;
                    float _2955;
                    float _2956;
                    float _2957;
                    uint _2958;
                    _2952 = _2828;
                    _2953 = _2829;
                    _2954 = _2830;
                    _2955 = _2831;
                    _2956 = _2832;
                    _2957 = _2833;
                    _2958 = _2843;
                    float _2884;
                    float _2885;
                    float _2886;
                    float _2887;
                    float _2888;
                    float _2889;
                    for (;;)
                    {
                        uint _2962 = uint(findLSB(_2958)) + (_2834 << 5u);
                        uint _2959 = (_2958 + 4294967295u) & _2958;
                        uint _2964 = _2962 * 48u;
                        vec4 _2978 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2964)).x, texelFetch(g_PointLightRenderingBuffer, int(_2964 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2964 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2964 + 3u)).x));
                        uint _2984 = (_2962 * 48u) + 4u;
                        vec4 _2997 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2984)).x, texelFetch(g_PointLightRenderingBuffer, int(_2984 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2984 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2984 + 3u)).x));
                        uint _3003 = (_2962 * 48u) + 8u;
                        vec3 _3014 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3003)).x, texelFetch(g_PointLightRenderingBuffer, int(_3003 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3003 + 2u)).x));
                        float _3018 = _2978.x - _1664;
                        float _3019 = _2978.y - _1665;
                        float _3020 = _2978.z - _1666;
                        float _3021 = dot(vec3(_3018, _3019, _3020), vec3(_3018, _3019, _3020));
                        float _3024 = inversesqrt(_3021);
                        float _3025 = _3024 * _3018;
                        float _3026 = _3024 * _3019;
                        float _3027 = _3024 * _3020;
                        float _3028 = dot(vec3(_524, _527, _530), vec3(_3025, _3026, _3027));
                        float _3033 = 1.0 - (_3021 * _2978.w);
                        float _4378 = isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : max(_3033, 0.0));
                        float _3034 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
                        float _3035 = sqrt(_3021) * _2997.w;
                        float _3038 = 1.39999997615814208984375 / (_3035 + 1.39999997615814208984375);
                        float _3039 = _3038 * _3038;
                        float _3042 = ((1.0 - _3039) * _3028) + _3039;
                        float _3045 = _3035 * _3035;
                        float _3049 = ((isnan(0.0) ? _3042 : (isnan(_3042) ? 0.0 : max(_3042, 0.0))) * _3034) / ((_3045 * 0.699999988079071044921875) + 1.0);
                        float _3053 = (-0.0) - _1664;
                        float _3054 = (-0.0) - _1665;
                        float _3055 = (-0.0) - _1666;
                        float _3059 = inversesqrt(dot(vec3(_3053, _3054, _3055), vec3(_3053, _3054, _3055)));
                        float _3060 = _3059 * _3053;
                        float _3061 = _3059 * _3054;
                        float _3062 = _3059 * _3055;
                        float _3069 = exp2(log2(1.0 / ((_3045 * 3.5) + 5.0)) * 0.25);
                        float _3070 = 1.0 - _599;
                        float _3077 = sqrt(1.0 - ((1.0 - (_3070 * _3070)) * (1.0 - (_3069 * _3069))));
                        float _3078 = _3077 * _3077;
                        float _3079 = _3078 * _3078;
                        float _3080 = _3060 + _3025;
                        float _3081 = _3061 + _3026;
                        float _3082 = _3062 + _3027;
                        float _3086 = inversesqrt(dot(vec3(_3080, _3081, _3082), vec3(_3080, _3081, _3082)));
                        float _3090 = dot(vec3(_524, _527, _530), vec3(_3060, _3061, _3062));
                        float _4394 = isnan(0.0) ? _3090 : (isnan(_3090) ? 0.0 : max(_3090, 0.0));
                        float _3093 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
                        float _3094 = dot(vec3(_524, _527, _530), vec3(_3086 * _3080, _3086 * _3081, _3086 * _3082));
                        float _4405 = isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : max(_3094, 0.0));
                        float _3097 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
                        float _3101 = ((_3097 * _3097) * (_3079 + (-1.0))) + 1.0;
                        float _3102 = _3038 * _3078;
                        float _3103 = _3102 * _3102;
                        float _3106 = ((1.0 - _3103) * _3028) + _3103;
                        float _4416 = isnan(0.0) ? _3106 : (isnan(_3106) ? 0.0 : max(_3106, 0.0));
                        float _3107 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
                        float _3108 = 1.0 - _3078;
                        float _3118 = (0.5 / (((_3107 * ((_3093 * _3108) + _3078)) + 9.9999999392252902907785028219223e-09) + (((_3107 * _3108) + _3078) * _3093))) * _3107;
                        float _4427 = isnan(0.0) ? _3118 : (isnan(_3118) ? 0.0 : max(_3118, 0.0));
                        float _3129 = (((_3079 * 3.1415927410125732421875) * (isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0)))) / ((_3101 * _3101) * ((_3045 * 2.1991131305694580078125) + 3.141590118408203125))) * _3034;
                        _2887 = (_3049 * _2997.x) + _2955;
                        _2888 = (_3049 * _2997.y) + _2956;
                        _2889 = (_3049 * _2997.z) + _2957;
                        _2884 = (_3129 * _3014.x) + _2952;
                        _2885 = (_3129 * _3014.y) + _2953;
                        _2886 = (_3129 * _3014.z) + _2954;
                        if (_2959 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2952 = _2884;
                            _2953 = _2885;
                            _2954 = _2886;
                            _2955 = _2887;
                            _2956 = _2888;
                            _2957 = _2889;
                            _2958 = _2959;
                        }
                    }
                    frontier_phi_68_pred = _2889;
                    frontier_phi_68_pred_1 = _2888;
                    frontier_phi_68_pred_2 = _2887;
                    frontier_phi_68_pred_3 = _2885;
                    frontier_phi_68_pred_4 = _2884;
                    frontier_phi_68_pred_5 = _2886;
                }
                _2695 = frontier_phi_68_pred;
                _2693 = frontier_phi_68_pred_1;
                _2691 = frontier_phi_68_pred_2;
                _2687 = frontier_phi_68_pred_3;
                _2685 = frontier_phi_68_pred_4;
                _2689 = frontier_phi_68_pred_5;
                uint _2835 = _2834 + 1u;
                if (_2835 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2828 = _2685;
                    _2829 = _2687;
                    _2830 = _2689;
                    _2831 = _2691;
                    _2832 = _2693;
                    _2833 = _2695;
                    _2834 = _2835;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2684 = _2685;
            _2686 = _2687;
            _2688 = _2689;
            _2690 = _2691;
            _2692 = _2693;
            _2694 = _2695;
        }
        uvec4 _2698 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2699 = _2698.z;
        uint _2701 = (_2699 >> 8u) & 15u;
        float _2796;
        float _2798;
        float _2800;
        float _2802;
        float _2804;
        float _2806;
        if (((4294967295u << _2701) & _2605) == 0u)
        {
            _2796 = _2684;
            _2798 = _2686;
            _2800 = _2688;
            _2802 = _2690;
            _2804 = _2692;
            _2806 = _2694;
        }
        else
        {
            float _2821 = inversesqrt(dot(vec3(_1664, _1665, _1666), vec3(_1664, _1665, _1666)));
            float _2822 = _2821 * _1664;
            float _2823 = _2821 * _1665;
            float _2824 = _2821 * _1666;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2701 < ((_2699 >> 12u) & 15u))
            {
                float _2797;
                float _2799;
                float _2801;
                float _2803;
                float _2805;
                float _2807;
                float _2935 = _2684;
                float _2936 = _2686;
                float _2937 = _2688;
                float _2938 = _2690;
                float _2939 = _2692;
                float _2940 = _2694;
                uint _2941 = _2701;
                uint _2950;
                bool _2951;
                for (;;)
                {
                    _2950 = texelFetch(g_lightClassification, int((((_2599 << 5u) + (_2585 << 9u)) + (_2941 << 2u)) >> 2u)).x;
                    _2951 = _2950 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_2951)
                    {
                        frontier_phi_74_pred = _2937;
                        frontier_phi_74_pred_1 = _2936;
                        frontier_phi_74_pred_2 = _2935;
                        frontier_phi_74_pred_3 = _2940;
                        frontier_phi_74_pred_4 = _2939;
                        frontier_phi_74_pred_5 = _2938;
                    }
                    else
                    {
                        float _3134;
                        float _3135;
                        float _3136;
                        float _3137;
                        float _3138;
                        float _3139;
                        float _3430;
                        float _3431;
                        float _3432;
                        float _3433;
                        float _3434;
                        float _3435;
                        float _3147 = _2935;
                        float _3148 = _2936;
                        float _3149 = _2937;
                        float _3150 = _2938;
                        float _3151 = _2939;
                        float _3152 = _2940;
                        uint _3153 = _2950;
                        uint _3154;
                        vec4 _3179;
                        float _3180;
                        vec4 _3195;
                        vec3 _3207;
                        vec4 _3223;
                        vec4 _3239;
                        float _3286;
                        bool _3287;
                        for (;;)
                        {
                            uint _3164 = ((_2941 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3153));
                            _3154 = (_3153 + 4294967295u) & _3153;
                            uint _3166 = _3164 * 40u;
                            _3179 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3166)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 3u)).x));
                            _3180 = _3179.w;
                            uint _3182 = (_3164 * 40u) + 4u;
                            _3195 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3182)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 3u)).x));
                            uint _3197 = (_3164 * 40u) + 8u;
                            _3207 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3197)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 2u)).x));
                            uint _3210 = (_3164 * 40u) + 16u;
                            _3223 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3210)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3210 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3210 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3210 + 3u)).x));
                            uint _3226 = (_3164 * 40u) + 20u;
                            _3239 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3226)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3226 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3226 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3226 + 3u)).x));
                            uint _3242 = (_3164 * 40u) + 24u;
                            vec4 _3255 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3242)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 3u)).x));
                            uint _3261 = (_3164 * 40u) + 28u;
                            vec4 _3274 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3261)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 3u)).x));
                            _3286 = fma(_1666, _3274.z, fma(_1665, _3274.y, _3274.x * _1664)) + _3274.w;
                            _3287 = !((fma(_1666, _3255.z, fma(_1665, _3255.y, _3255.x * _1664)) + _3255.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3287)
                            {
                                float _3314 = _3179.x - _1664;
                                float _3315 = _3179.y - _1665;
                                float _3316 = _3179.z - _1666;
                                float _3317 = dot(vec3(_3314, _3315, _3316), vec3(_3314, _3315, _3316));
                                float _3320 = inversesqrt(_3317);
                                float _3321 = _3320 * _3314;
                                float _3322 = _3320 * _3315;
                                float _3323 = _3320 * _3316;
                                float _3327 = 1.0 - (_3317 / (_3180 * _3180));
                                float _4438 = isnan(0.0) ? _3327 : (isnan(_3327) ? 0.0 : max(_3327, 0.0));
                                float _3328 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
                                float _3332 = sqrt(_3317) * _3195.w;
                                float _3334 = 1.39999997615814208984375 / (_3332 + 1.39999997615814208984375);
                                float _3335 = _3334 * _3334;
                                float _3338 = ((1.0 - _3335) * dot(vec3(_3321, _3322, _3323), vec3(_524, _527, _530))) + _3335;
                                float _3341 = _3332 * _3332;
                                float _3345 = (fma(_1666, _3223.z, fma(_1665, _3223.y, _3223.x * _1664)) + _3223.w) / _3286;
                                float _3346 = (fma(_1666, _3239.z, fma(_1665, _3239.y, _3239.x * _1664)) + _3239.w) / _3286;
                                float _3350 = 1.0 - dot(vec2(_3345, _3346), vec2(_3345, _3346));
                                float _4454 = isnan(0.0) ? _3350 : (isnan(_3350) ? 0.0 : max(_3350, 0.0));
                                float _3351 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
                                float _3352 = _3351 * (((isnan(0.0) ? _3338 : (isnan(_3338) ? 0.0 : max(_3338, 0.0))) * _3328) / ((_3341 * 0.699999988079071044921875) + 1.0));
                                float _3364 = exp2(log2(1.0 / ((_3341 * 3.5) + 5.0)) * 0.25);
                                float _3365 = 1.0 - _599;
                                float _3372 = sqrt(1.0 - ((1.0 - (_3365 * _3365)) * (1.0 - (_3364 * _3364))));
                                float _3373 = _3372 * _3372;
                                float _3374 = _3373 * _3373;
                                float _3375 = _3321 - _2822;
                                float _3376 = _3322 - _2823;
                                float _3377 = _3323 - _2824;
                                float _3381 = inversesqrt(dot(vec3(_3375, _3376, _3377), vec3(_3375, _3376, _3377)));
                                float _3385 = dot(vec3(_524, _527, _530), vec3((-0.0) - _2822, (-0.0) - _2823, (-0.0) - _2824));
                                float _4465 = isnan(0.0) ? _3385 : (isnan(_3385) ? 0.0 : max(_3385, 0.0));
                                float _3388 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
                                float _3389 = dot(vec3(_524, _527, _530), vec3(_3381 * _3375, _3381 * _3376, _3381 * _3377));
                                float _4476 = isnan(0.0) ? _3389 : (isnan(_3389) ? 0.0 : max(_3389, 0.0));
                                float _3392 = isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0));
                                float _3396 = ((_3392 * _3392) * (_3374 + (-1.0))) + 1.0;
                                float _3397 = _3334 * _3373;
                                float _3398 = _3397 * _3397;
                                float _3404 = ((1.0 - _3398) * dot(vec3(_524, _527, _530), vec3(_3321, _3322, _3323))) + _3398;
                                float _4487 = isnan(0.0) ? _3404 : (isnan(_3404) ? 0.0 : max(_3404, 0.0));
                                float _3405 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
                                float _3406 = 1.0 - _3373;
                                float _3416 = (0.5 / (((_3405 * ((_3388 * _3406) + _3373)) + 9.9999999392252902907785028219223e-09) + (((_3405 * _3406) + _3373) * _3388))) * _3405;
                                float _4498 = isnan(0.0) ? _3416 : (isnan(_3416) ? 0.0 : max(_3416, 0.0));
                                float _3426 = (_3351 * _3328) * (((_3374 * 3.1415927410125732421875) * (isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0)))) / ((_3396 * _3396) * ((_3341 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3426 * _3207.z;
                                frontier_phi_80_pred_1 = _3426 * _3207.y;
                                frontier_phi_80_pred_2 = _3426 * _3207.x;
                                frontier_phi_80_pred_3 = _3352 * _3195.z;
                                frontier_phi_80_pred_4 = _3352 * _3195.y;
                                frontier_phi_80_pred_5 = _3352 * _3195.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3432 = frontier_phi_80_pred;
                            _3431 = frontier_phi_80_pred_1;
                            _3430 = frontier_phi_80_pred_2;
                            _3435 = frontier_phi_80_pred_3;
                            _3434 = frontier_phi_80_pred_4;
                            _3433 = frontier_phi_80_pred_5;
                            _3137 = _3433 + _3150;
                            _3138 = _3434 + _3151;
                            _3139 = _3435 + _3152;
                            _3134 = _3430 + _3147;
                            _3135 = _3431 + _3148;
                            _3136 = _3432 + _3149;
                            if (_3154 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3147 = _3134;
                                _3148 = _3135;
                                _3149 = _3136;
                                _3150 = _3137;
                                _3151 = _3138;
                                _3152 = _3139;
                                _3153 = _3154;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3136;
                        frontier_phi_74_pred_1 = _3135;
                        frontier_phi_74_pred_2 = _3134;
                        frontier_phi_74_pred_3 = _3139;
                        frontier_phi_74_pred_4 = _3138;
                        frontier_phi_74_pred_5 = _3137;
                    }
                    _2801 = frontier_phi_74_pred;
                    _2799 = frontier_phi_74_pred_1;
                    _2797 = frontier_phi_74_pred_2;
                    _2807 = frontier_phi_74_pred_3;
                    _2805 = frontier_phi_74_pred_4;
                    _2803 = frontier_phi_74_pred_5;
                    uint _2942 = _2941 + 1u;
                    if (_2942 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2935 = _2797;
                        _2936 = _2799;
                        _2937 = _2801;
                        _2938 = _2803;
                        _2939 = _2805;
                        _2940 = _2807;
                        _2941 = _2942;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2805;
                frontier_phi_62_63_ladder_1 = _2803;
                frontier_phi_62_63_ladder_2 = _2801;
                frontier_phi_62_63_ladder_3 = _2807;
                frontier_phi_62_63_ladder_4 = _2799;
                frontier_phi_62_63_ladder_5 = _2797;
            }
            else
            {
                frontier_phi_62_63_ladder = _2692;
                frontier_phi_62_63_ladder_1 = _2690;
                frontier_phi_62_63_ladder_2 = _2688;
                frontier_phi_62_63_ladder_3 = _2694;
                frontier_phi_62_63_ladder_4 = _2686;
                frontier_phi_62_63_ladder_5 = _2684;
            }
            _2796 = frontier_phi_62_63_ladder_5;
            _2798 = frontier_phi_62_63_ladder_4;
            _2800 = frontier_phi_62_63_ladder_2;
            _2802 = frontier_phi_62_63_ladder_1;
            _2804 = frontier_phi_62_63_ladder;
            _2806 = frontier_phi_62_63_ladder_3;
        }
        float _2811 = isnan(1.0) ? _583 : (isnan(_583) ? 1.0 : min(_583, 1.0));
        _2617 = (_2811 * _2802) + _2130;
        _2619 = (_2811 * _2804) + _2132;
        _2621 = (_2811 * _2806) + _2134;
        _2623 = ((_2796 * _568) * _2811) + _2468;
        _2625 = ((_2798 * _570) * _2811) + _2470;
        _2627 = ((_2800 * _571) * _2811) + _2472;
    }
    else
    {
        _2617 = _2130;
        _2619 = _2132;
        _2621 = _2134;
        _2623 = _2468;
        _2625 = _2470;
        _2627 = _2472;
    }
    float _4514 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _4525 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _4536 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    uint _2647 = _543 + 6u;
    float _2655 = _502 / cbSceneParam._m0[86u].x;
    float _2656 = _503 / cbSceneParam._m0[86u].y;
    vec4 _2670 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2655, _2656, (log2((isnan(cbSceneParam._m0[77u].w) ? _435 : (isnan(_435) ? cbSceneParam._m0[77u].w : min(_435, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2672 = _2670.x;
    float _2673 = _2670.y;
    float _2674 = _2670.z;
    float _2675 = _2670.w;
    float _2746;
    float _2748;
    float _2750;
    float _2752;
    if (_435 > cbSceneParam._m0[78u].w)
    {
        float _2709 = isnan(_435) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _435 : min(cbSceneParam._m0[80u].w, _435));
        float _2710 = _2709 / _435;
        float _2721 = _2710 * _487;
        float _2722 = _488 * _2710;
        float _2723 = (-0.0) - _2722;
        float _2724 = _2710 * _489;
        float _2726 = (cbSceneParam._m0[77u].w * _2723) / _2709;
        float _2727 = _2726 + cbSceneParam._m0[79u].w;
        float _2728 = cbSceneParam._m0[79u].w - _2722;
        float _2734 = sqrt(((_2721 * _2721) + (_2722 * _2722)) + (_2724 * _2724));
        float _2737 = (1.0 - (cbSceneParam._m0[77u].w / _2709)) * _2734;
        float _2742 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2744 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2897;
        if (abs((_2723 - _2726) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2897 = ((((_2727 > 0.0) ? exp2(_2742 * _2727) : (2.0 - exp2(_2744 * _2727))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2737;
        }
        else
        {
            float _2857 = 1.0 / cbSceneParam._m0[80u].x;
            float _2858 = isnan(_2728) ? _2727 : (isnan(_2727) ? _2728 : max(_2727, _2728));
            float _2859 = isnan(_2728) ? _2727 : (isnan(_2727) ? _2728 : min(_2727, _2728));
            float _2868 = isnan(0.0) ? _2858 : (isnan(_2858) ? 0.0 : min(_2858, 0.0));
            float _2869 = isnan(0.0) ? _2859 : (isnan(_2859) ? 0.0 : min(_2859, 0.0));
            _2897 = ((abs(_2734 / _2723) * cbSceneParam._m0[80u].y) * ((((_2868 - _2869) * 2.0) - ((exp2(_2742 * (isnan(0.0) ? _2858 : (isnan(_2858) ? 0.0 : max(_2858, 0.0)))) - exp2(_2742 * (isnan(0.0) ? _2859 : (isnan(_2859) ? 0.0 : max(_2859, 0.0))))) * _2857)) - ((exp2(_2744 * _2868) - exp2(_2744 * _2869)) * _2857))) + (_2737 * cbSceneParam._m0[80u].z);
        }
        vec4 _2899 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2655, _2656, 1.0), 0.0);
        float _2908 = exp2((_2897 * (-1.44269502162933349609375)) * (1.0 - _2899.w));
        float _2909 = log2(_2908);
        float _2925 = log2(_2675);
        _2746 = (exp2(_2925 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2909 * cbSceneParam._m0[78u].x)) * _2899.x) / cbSceneParam._m0[78u].x)) + _2672;
        _2748 = (exp2(_2925 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2909 * cbSceneParam._m0[78u].y)) * _2899.y) / cbSceneParam._m0[78u].y)) + _2673;
        _2750 = (exp2(_2925 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2909 * cbSceneParam._m0[78u].z)) * _2899.z) / cbSceneParam._m0[78u].z)) + _2674;
        _2752 = _2908 * _2675;
    }
    else
    {
        _2746 = _2672;
        _2748 = _2673;
        _2750 = _2674;
        _2752 = _2675;
    }
    float _2764 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2765 = _2764 == 3.0;
    float _2766 = log2(_2752);
    float _2773 = exp2(_2766 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0))) * (_2617 + ((isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0))) * _583))) + ((_2623 + ((isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0))) * _1393)) * cbPerFrame._m0[3u].x));
    float _2774 = exp2(_2766 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0))) * (_2619 + ((isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0))) * _583))) + ((_2625 + ((isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0))) * _1393)) * cbPerFrame._m0[3u].x));
    float _2775 = exp2(_2766 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0))) * (_2621 + ((isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0))) * _583))) + ((_2627 + ((isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0))) * _1393)) * cbPerFrame._m0[3u].x));
    float _2784 = (_2764 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2784 * (_2765 ? _2773 : (_2773 + (cbSceneParam._m0[72u].w * _2746)));
    SV_Target.y = _2784 * (_2765 ? _2774 : (_2774 + (cbSceneParam._m0[72u].w * _2748)));
    SV_Target.z = _2784 * (_2765 ? _2775 : (_2775 + (cbSceneParam._m0[72u].w * _2750)));
    SV_Target.w = cbInstanceData._m0[_2647].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2647].w;
}


