#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _927;
float _3295;
float _3296;
float _3297;
float _3298;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _192 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _199 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _200 = _199 * NORMAL.x;
    float _201 = _199 * NORMAL.y;
    float _202 = _199 * NORMAL.z;
    float _206 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _214;
    float _215;
    float _216;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _214 = (-0.0) - _200;
        _215 = (-0.0) - _201;
        _216 = (-0.0) - _202;
    }
    else
    {
        _214 = _200;
        _215 = _201;
        _216 = _202;
    }
    vec4 _242 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _248 = _242.w;
    float _249 = _242.x * cbMtdParam._m0[9u].x;
    float _250 = _242.y * cbMtdParam._m0[9u].y;
    float _251 = _242.z * cbMtdParam._m0[9u].z;
    vec4 _263 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _267 = _263.z;
    float _271 = (_263.x * 2.0) + (-1.0);
    float _273 = (_263.y * 2.0) + (-1.0);
    float _274 = dot(vec2(_271, _273), vec2(_271, _273));
    float _3307 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _280 = sqrt(1.0 - (isnan(1.0) ? _3307 : (isnan(_3307) ? 1.0 : min(_3307, 1.0))));
    float _292 = (TEXCOORD_3.x - (((1.0 - TEXCOORD_3.x) * 0.00999999977648258209228515625) * cbMtdParam._m0[12u].y)) * (cbMtdParam._m0[12u].z + 1.0);
    float _3318 = isnan(0.0) ? _292 : (isnan(_292) ? 0.0 : max(_292, 0.0));
    float _293 = isnan(1.0) ? _3318 : (isnan(_3318) ? 1.0 : min(_3318, 1.0));
    float _300 = (_293 * (cbMtdParam._m0[10u].x - _249)) + _249;
    float _301 = (_293 * (cbMtdParam._m0[10u].y - _250)) + _250;
    float _302 = (_293 * (cbMtdParam._m0[10u].z - _251)) + _251;
    vec4 _314 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _321 = (_314.x * 2.0) + (-1.0);
    float _322 = (_314.y * 2.0) + (-1.0);
    float _323 = dot(vec2(_321, _322), vec2(_321, _322));
    float _3329 = isnan(0.0) ? _323 : (isnan(_323) ? 0.0 : max(_323, 0.0));
    float _331 = (_293 * (_314.z - _267)) + _267;
    float _343 = (((_321 - _271) + (cbMtdParam._m0[12u].w * _271)) * _293) + _271;
    float _344 = (((_322 - _273) + (cbMtdParam._m0[12u].w * _273)) * _293) + _273;
    float _345 = (_293 * (sqrt(1.0 - (isnan(1.0) ? _3329 : (isnan(_3329) ? 1.0 : min(_3329, 1.0)))) - _280)) + _280;
    float _348 = fma(_345, _214, fma(_344, _206 * TANGENT.x, (_192 * _184) * _343));
    float _351 = fma(_345, _215, fma(_344, _206 * TANGENT.y, (_192 * _185) * _343));
    float _354 = fma(_345, _216, fma(_344, _206 * TANGENT.z, (_192 * _186) * _343));
    float _358 = inversesqrt(dot(vec3(_348, _351, _354), vec3(_348, _351, _354)));
    float _359 = _358 * _348;
    float _360 = _358 * _351;
    float _361 = _358 * _354;
    float _3340 = isnan(0.0) ? _331 : (isnan(_331) ? 0.0 : max(_331, 0.0));
    float _362 = isnan(1.0) ? _3340 : (isnan(_3340) ? 1.0 : min(_3340, 1.0));
    float _3351 = isnan(0.0) ? _300 : (isnan(_300) ? 0.0 : max(_300, 0.0));
    float _3362 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _3373 = isnan(0.0) ? _302 : (isnan(_302) ? 0.0 : max(_302, 0.0));
    float _381 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _423 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _433 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _423);
    float _434 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _423);
    float _435 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _423);
    float _439 = inversesqrt(dot(vec3(_433, _434, _435), vec3(_433, _434, _435)));
    float _440 = _433 * _439;
    float _441 = _434 * _439;
    float _442 = _435 * _439;
    vec4 _447 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _449 = _447.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _607 = sqrt(((_433 * _433) + (_434 * _434)) + (_435 * _435));
        float _613 = (cbMatDynParam._m0[5u].x * _607) + cbMatDynParam._m0[5u].y;
        float _3384 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
        float _614 = isnan(1.0) ? _3384 : (isnan(_3384) ? 1.0 : min(_3384, 1.0));
        float _618 = (cbMatDynParam._m0[5u].z * _607) + cbMatDynParam._m0[5u].w;
        float _3395 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3395 : (isnan(_3395) ? 1.0 : min(_3395, 1.0))) - _614)) + _614) < ((_449 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _461 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _462 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _482 = fma(_361, cbSceneParam._m0[5u].z, fma(_360, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _359));
    float _485 = fma(_361, cbSceneParam._m0[6u].z, fma(_360, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _359));
    float _488 = fma(_361, cbSceneParam._m0[7u].z, fma(_360, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _359));
    uint _501 = uint(roundEven(NORMAL.w)) * 13u;
    uint _503 = _501 + 9u;
    uint _504 = _503 + uint(cbMatDynParam._m0[0u].w);
    float _510 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3351 : (isnan(_3351) ? 1.0 : min(_3351, 1.0)))) * cbInstanceData._m0[_504].x;
    float _511 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3362 : (isnan(_3362) ? 1.0 : min(_3362, 1.0)))) * cbInstanceData._m0[_504].y;
    float _512 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3373 : (isnan(_3373) ? 1.0 : min(_3373, 1.0)))) * cbInstanceData._m0[_504].z;
    float _3406 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _513 = isnan(1.0) ? _3406 : (isnan(_3406) ? 1.0 : min(_3406, 1.0));
    float _3417 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _514 = isnan(1.0) ? _3417 : (isnan(_3417) ? 1.0 : min(_3417, 1.0));
    float _3428 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _515 = isnan(1.0) ? _3428 : (isnan(_3428) ? 1.0 : min(_3428, 1.0));
    vec4 _524 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _461, cbSceneParam._m0[86u].y * _462));
    float _527 = _524.x * TEXCOORD_3.w;
    float _528 = dot(vec3(_359, _360, _361), vec3(_440, _441, _442));
    float _531 = _528 * 2.0;
    float _535 = (_531 * _359) - _440;
    float _536 = (_531 * _360) - _441;
    float _537 = (_531 * _361) - _442;
    float _541 = abs(dot(vec3(_440, _441, _442), vec3(_359, _360, _361)));
    float _3439 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _543 = sqrt(_362);
    float _556 = exp2((_543 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3439 : (isnan(_3439) ? 1.0 : min(_3439, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_543 * 3.0));
    float _588 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _592 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _596 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _926;
    float _928;
    float _929;
    float _930;
    float _931;
    float _932;
    float _933;
    float _934;
    float _935;
    float _936;
    float _937;
    float _938;
    float _939;
    float _940;
    float _941;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _651 = fma(_596, cbModelParam._m0[26u].z, fma(_592, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _588));
        float _655 = fma(_596, cbModelParam._m0[27u].z, fma(_592, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _588));
        float _659 = fma(_596, cbModelParam._m0[28u].z, fma(_592, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _588));
        float _684 = _588 + _359;
        float _685 = _592 + _360;
        float _686 = _596 + _361;
        float _696 = fma(_686, cbModelParam._m0[26u].z, fma(_685, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _684)) - _651;
        float _697 = fma(_686, cbModelParam._m0[27u].z, fma(_685, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _684)) - _655;
        float _698 = fma(_686, cbModelParam._m0[28u].z, fma(_685, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _684)) - _659;
        float _702 = inversesqrt(dot(vec3(_696, _697, _698), vec3(_696, _697, _698)));
        float _715 = ((_702 * _696) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_651 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _716 = ((_702 * _697) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_655 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _717 = ((_702 * _698) / cbModelParam._m0[34u].z) + ((((((_659 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _720 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_715, _716, _717), 0.0);
        vec4 _727 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_715, _716, _717), 0.0);
        vec4 _734 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_715, _716, _717), 0.0);
        vec4 _741 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_715, _716, _717), 0.0);
        float _754 = exp2((_720.w + (-0.5)) * 20.0) * 2.0;
        float _755 = _754 * (_720.x + (-0.5));
        float _756 = _754 * (_720.y + (-0.5));
        float _757 = _754 * (_720.z + (-0.5));
        float _764 = exp2((_727.w + (-0.5)) * 20.0) * 2.0;
        float _765 = _764 * (_727.x + (-0.5));
        float _766 = _764 * (_727.y + (-0.5));
        float _767 = _764 * (_727.z + (-0.5));
        float _774 = exp2((_734.w + (-0.5)) * 20.0) * 2.0;
        float _775 = _774 * (_734.x + (-0.5));
        float _776 = _774 * (_734.y + (-0.5));
        float _777 = _774 * (_734.z + (-0.5));
        float _784 = exp2((_741.w + (-0.5)) * 20.0) * 2.0;
        float _785 = _784 * (_741.x + (-0.5));
        float _786 = _784 * (_741.y + (-0.5));
        float _787 = _784 * (_741.z + (-0.5));
        float _788 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
        float _789 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
        float _790 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
        float _791 = _755 * 0.5;
        float _792 = _765 * 0.5;
        float _793 = _775 * 0.5;
        float _794 = dot(vec3(_791, _792, _793), vec3(_791, _792, _793));
        float _799 = (_794 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_794);
        float _808 = (dot(vec3(_359, _360, _361), vec3(_799 * _791, _799 * _792, _799 * _793)) + 1.0) * 0.5;
        float _3465 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
        float _818 = sqrt(((_792 * _792) + (_791 * _791)) + (_793 * _793)) / (_788 + 9.9999997473787516355514526367188e-06);
        float _3476 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
        float _819 = isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0));
        float _820 = _819 * 2.0;
        float _824 = (1.0 - _819) / (_819 + 1.0);
        float _3487 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
        float _825 = isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0));
        float _834 = ((((1.0 - _825) * (_820 + 2.0)) * exp2(log2(isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0))) * (_820 + 1.0))) + _825) * _788;
        float _835 = _756 * 0.5;
        float _836 = _766 * 0.5;
        float _837 = _776 * 0.5;
        float _838 = dot(vec3(_835, _836, _837), vec3(_835, _836, _837));
        float _843 = (_838 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_838);
        float _851 = (dot(vec3(_359, _360, _361), vec3(_843 * _835, _843 * _836, _843 * _837)) + 1.0) * 0.5;
        float _3498 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
        float _860 = sqrt(((_836 * _836) + (_835 * _835)) + (_837 * _837)) / (_789 + 9.9999997473787516355514526367188e-06);
        float _3509 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
        float _861 = isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0));
        float _862 = _861 * 2.0;
        float _866 = (1.0 - _861) / (_861 + 1.0);
        float _3520 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
        float _867 = isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0));
        float _876 = ((((1.0 - _867) * (_862 + 2.0)) * exp2(log2(isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0))) * (_862 + 1.0))) + _867) * _789;
        float _877 = _757 * 0.5;
        float _878 = _767 * 0.5;
        float _879 = _777 * 0.5;
        float _880 = dot(vec3(_877, _878, _879), vec3(_877, _878, _879));
        float _885 = (_880 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_880);
        float _893 = (dot(vec3(_359, _360, _361), vec3(_885 * _877, _885 * _878, _885 * _879)) + 1.0) * 0.5;
        float _3531 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
        float _902 = sqrt(((_878 * _878) + (_877 * _877)) + (_879 * _879)) / (_790 + 9.9999997473787516355514526367188e-06);
        float _3542 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
        float _903 = isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0));
        float _904 = _903 * 2.0;
        float _908 = (1.0 - _903) / (_903 + 1.0);
        float _3553 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
        float _909 = isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0));
        float _918 = ((((1.0 - _909) * (_904 + 2.0)) * exp2(log2(isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0))) * (_904 + 1.0))) + _909) * _790;
        _926 = _757;
        _928 = _756;
        _929 = _755;
        _930 = _767;
        _931 = _766;
        _932 = _765;
        _933 = _777;
        _934 = _776;
        _935 = _775;
        _936 = _790;
        _937 = _789;
        _938 = _788;
        _939 = cbModelParam._m0[36u].z * (isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0)));
        _940 = cbModelParam._m0[36u].z * (isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0)));
        _941 = cbModelParam._m0[36u].z * (isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0)));
    }
    else
    {
        _926 = _927;
        _928 = _927;
        _929 = _927;
        _930 = _927;
        _931 = _927;
        _932 = _927;
        _933 = _927;
        _934 = _927;
        _935 = _927;
        _936 = _927;
        _937 = _927;
        _938 = _927;
        _939 = 0.0;
        _940 = 0.0;
        _941 = 0.0;
    }
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _970 = fma(_596, cbModelParam._m0[30u].z, fma(_592, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _588));
        float _974 = fma(_596, cbModelParam._m0[31u].z, fma(_592, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _588));
        float _978 = fma(_596, cbModelParam._m0[32u].z, fma(_592, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _588));
        float _1001 = _588 + _359;
        float _1002 = _592 + _360;
        float _1003 = _596 + _361;
        float _1013 = fma(_1003, cbModelParam._m0[30u].z, fma(_1002, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1001)) - _970;
        float _1014 = fma(_1003, cbModelParam._m0[31u].z, fma(_1002, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1001)) - _974;
        float _1015 = fma(_1003, cbModelParam._m0[32u].z, fma(_1002, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1001)) - _978;
        float _1019 = inversesqrt(dot(vec3(_1013, _1014, _1015), vec3(_1013, _1014, _1015)));
        float _1032 = ((_1019 * _1013) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_970 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1033 = ((_1019 * _1014) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_974 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1034 = ((_1019 * _1015) / cbModelParam._m0[35u].z) + ((((((_978 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1036 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1032, _1033, _1034), 0.0);
        vec4 _1043 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1032, _1033, _1034), 0.0);
        vec4 _1050 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1032, _1033, _1034), 0.0);
        vec4 _1057 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1032, _1033, _1034), 0.0);
        float _1069 = exp2((_1036.w + (-0.5)) * 20.0) * 2.0;
        float _1070 = _1069 * (_1036.x + (-0.5));
        float _1071 = _1069 * (_1036.y + (-0.5));
        float _1072 = _1069 * (_1036.z + (-0.5));
        float _1079 = exp2((_1043.w + (-0.5)) * 20.0) * 2.0;
        float _1080 = _1079 * (_1043.x + (-0.5));
        float _1081 = _1079 * (_1043.y + (-0.5));
        float _1082 = _1079 * (_1043.z + (-0.5));
        float _1089 = exp2((_1050.w + (-0.5)) * 20.0) * 2.0;
        float _1090 = _1089 * (_1050.x + (-0.5));
        float _1091 = _1089 * (_1050.y + (-0.5));
        float _1092 = _1089 * (_1050.z + (-0.5));
        float _1099 = exp2((_1057.w + (-0.5)) * 20.0) * 2.0;
        float _1100 = _1099 * (_1057.x + (-0.5));
        float _1101 = _1099 * (_1057.y + (-0.5));
        float _1102 = _1099 * (_1057.z + (-0.5));
        float _1103 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1104 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1105 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1106 = _1070 * 0.5;
        float _1107 = _1080 * 0.5;
        float _1108 = _1090 * 0.5;
        float _1109 = dot(vec3(_1106, _1107, _1108), vec3(_1106, _1107, _1108));
        float _1114 = (_1109 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1109);
        float _1122 = (dot(vec3(_359, _360, _361), vec3(_1114 * _1106, _1114 * _1107, _1114 * _1108)) + 1.0) * 0.5;
        float _3594 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1131 = sqrt(((_1107 * _1107) + (_1106 * _1106)) + (_1108 * _1108)) / (_1103 + 9.9999997473787516355514526367188e-06);
        float _3605 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1132 = isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0));
        float _1133 = _1132 * 2.0;
        float _1137 = (1.0 - _1132) / (_1132 + 1.0);
        float _3616 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1138 = isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0));
        float _1147 = ((((1.0 - _1138) * (_1133 + 2.0)) * exp2(log2(isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0))) * (_1133 + 1.0))) + _1138) * _1103;
        float _1148 = _1071 * 0.5;
        float _1149 = _1081 * 0.5;
        float _1150 = _1091 * 0.5;
        float _1151 = dot(vec3(_1148, _1149, _1150), vec3(_1148, _1149, _1150));
        float _1156 = (_1151 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1151);
        float _1164 = (dot(vec3(_359, _360, _361), vec3(_1156 * _1148, _1156 * _1149, _1156 * _1150)) + 1.0) * 0.5;
        float _3627 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1173 = sqrt(((_1149 * _1149) + (_1148 * _1148)) + (_1150 * _1150)) / (_1104 + 9.9999997473787516355514526367188e-06);
        float _3638 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1174 = isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0));
        float _1175 = _1174 * 2.0;
        float _1179 = (1.0 - _1174) / (_1174 + 1.0);
        float _3649 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1180 = isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0));
        float _1189 = ((((1.0 - _1180) * (_1175 + 2.0)) * exp2(log2(isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0))) * (_1175 + 1.0))) + _1180) * _1104;
        float _1190 = _1072 * 0.5;
        float _1191 = _1082 * 0.5;
        float _1192 = _1092 * 0.5;
        float _1193 = dot(vec3(_1190, _1191, _1192), vec3(_1190, _1191, _1192));
        float _1198 = (_1193 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1193);
        float _1206 = (dot(vec3(_359, _360, _361), vec3(_1198 * _1190, _1198 * _1191, _1198 * _1192)) + 1.0) * 0.5;
        float _3660 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1215 = sqrt(((_1191 * _1191) + (_1190 * _1190)) + (_1192 * _1192)) / (_1105 + 9.9999997473787516355514526367188e-06);
        float _3671 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1216 = isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0));
        float _1217 = _1216 * 2.0;
        float _1221 = (1.0 - _1216) / (_1216 + 1.0);
        float _3682 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1222 = isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0));
        float _1231 = ((((1.0 - _1222) * (_1217 + 2.0)) * exp2(log2(isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0))) * (_1217 + 1.0))) + _1222) * _1105;
        _1239 = _1072;
        _1240 = _1071;
        _1241 = _1070;
        _1242 = _1082;
        _1243 = _1081;
        _1244 = _1080;
        _1245 = _1092;
        _1246 = _1091;
        _1247 = _1090;
        _1248 = _1105;
        _1249 = _1104;
        _1250 = _1103;
        _1251 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0)));
        _1252 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0)));
        _1253 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0)));
    }
    else
    {
        _1239 = _927;
        _1240 = _927;
        _1241 = _927;
        _1242 = _927;
        _1243 = _927;
        _1244 = _927;
        _1245 = _927;
        _1246 = _927;
        _1247 = _927;
        _1248 = _927;
        _1249 = _927;
        _1250 = _927;
        _1251 = 0.0;
        _1252 = 0.0;
        _1253 = 0.0;
    }
    float _1263 = (cbModelParam._m0[1u].x * (_1251 - _939)) + _939;
    float _1264 = (cbModelParam._m0[1u].x * (_1252 - _940)) + _940;
    float _1265 = (cbModelParam._m0[1u].x * (_1253 - _941)) + _941;
    float _1286 = fma(_1265, cbSceneParam._m0[89u].z, fma(_1264, cbSceneParam._m0[89u].y, _1263 * cbSceneParam._m0[89u].x));
    float _1289 = fma(_1265, cbSceneParam._m0[90u].z, fma(_1264, cbSceneParam._m0[90u].y, _1263 * cbSceneParam._m0[90u].x));
    float _1292 = fma(_1265, cbSceneParam._m0[91u].z, fma(_1264, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1263));
    float _1307 = _535 * 0.5;
    float _1308 = _536 * 0.5;
    float _1309 = _537 * 0.5;
    float _1310 = dot(vec4(_1307, _1308, _1309, 1.0), vec4(_1241, _1244, _1247, _1250));
    float _1313 = dot(vec4(_1307, _1308, _1309, 1.0), vec4(_1240, _1243, _1246, _1249));
    float _1316 = dot(vec4(_1307, _1308, _1309, 1.0), vec4(_1239, _1242, _1245, _1248));
    float _1350;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1323 = dot(vec4(_1307, _1308, _1309, 1.0), vec4(_926, _930, _933, _936));
        float _1327 = dot(vec4(_1307, _1308, _1309, 1.0), vec4(_928, _931, _934, _937));
        float _1331 = dot(vec4(_1307, _1308, _1309, 1.0), vec4(_929, _932, _935, _938));
        float _1338 = dot(vec4(cbModelParam._m0[39u]), vec4(_1307, _1308, _1309, 1.0));
        _1350 = dot(vec3(isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0)), isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0)), isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1338) ? 0.0 : (isnan(0.0) ? _1338 : max(0.0, _1338))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1350 = 1.0;
    }
    float _1361;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1352 = dot(vec4(cbModelParam._m0[40u]), vec4(_1307, _1308, _1309, 1.0));
        _1361 = dot(vec3(isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0)), isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0)), isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1352) ? 0.0 : (isnan(0.0) ? _1352 : max(0.0, _1352))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1361 = 1.0;
    }
    float _1365 = (_1361 * cbModelParam._m0[1u].x) + (_1350 * (1.0 - cbModelParam._m0[1u].x));
    float _1375 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _362);
    float _1376 = isnan(_1375) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1375 : min(cbModelParam._m0[25u].z, _1375));
    float _1457;
    float _1459;
    float _1461;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1424 = fma(_596, cbModelParam._m0[13u].z, fma(_592, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _588)) + cbModelParam._m0[13u].w;
        float _1428 = fma(_596, cbModelParam._m0[14u].z, fma(_592, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _588)) + cbModelParam._m0[14u].w;
        float _1432 = fma(_596, cbModelParam._m0[15u].z, fma(_592, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _588)) + cbModelParam._m0[15u].w;
        float _1435 = fma(_537, cbModelParam._m0[13u].z, fma(_536, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _535));
        float _1438 = fma(_537, cbModelParam._m0[14u].z, fma(_536, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _535));
        float _1441 = fma(_537, cbModelParam._m0[15u].z, fma(_536, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _535));
        float _1469;
        if (_1435 > 0.0)
        {
            _1469 = abs((1.0 - _1424) / _1435);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1435 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1424 + 1.0) / _1435);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1469 = frontier_phi_19_17_ladder;
        }
        float _1674;
        if (_1438 > 0.0)
        {
            _1674 = abs((1.0 - _1428) / _1438);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1438 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1428 + 1.0) / _1438);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1674 = frontier_phi_28_24_ladder;
        }
        float _1917;
        if (_1441 > 0.0)
        {
            _1917 = abs((1.0 - _1432) / _1441);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1441 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1432 + 1.0) / _1441);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1917 = frontier_phi_40_35_ladder;
        }
        float _1919 = isnan(_1674) ? _1469 : (isnan(_1469) ? _1674 : min(_1469, _1674));
        float _1920 = isnan(_1917) ? _1919 : (isnan(_1919) ? _1917 : min(_1919, _1917));
        float _1924 = (_1920 * _1435) + _1424;
        float _1925 = (_1920 * _1438) + _1428;
        float _1926 = (_1920 * _1441) + _1432;
        float _1927 = _1920 * 9.9999997473787516355514526367188e-05;
        float _1929 = (-1.0) - _1927;
        float _1931 = _1927 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1926 > _1931) || ((_1926 < _1929) || ((_1925 > _1931) || ((_1925 < _1929) || ((_1924 < _1929) || (_1924 > _1931))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2050 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1926, cbModelParam._m0[9u].z, fma(_1925, cbModelParam._m0[9u].y, _1924 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1926, cbModelParam._m0[10u].z, fma(_1925, cbModelParam._m0[10u].y, _1924 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1926, cbModelParam._m0[11u].z, fma(_1925, cbModelParam._m0[11u].y, _1924 * cbModelParam._m0[11u].x))), _1376);
            frontier_phi_18_40_ladder = _2050.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2050.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2050.x * cbModelParam._m0[1u].y;
        }
        _1457 = frontier_phi_18_40_ladder_2;
        _1459 = frontier_phi_18_40_ladder_1;
        _1461 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1445 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_535, _536, _537), _1376);
        _1457 = _1445.x * cbModelParam._m0[1u].y;
        _1459 = _1445.y * cbModelParam._m0[1u].y;
        _1461 = _1445.z * cbModelParam._m0[1u].y;
    }
    float _1465 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _362);
    float _1466 = isnan(_1465) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1465 : min(cbModelParam._m0[25u].w, _1465));
    float _1559;
    float _1561;
    float _1563;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1523 = fma(_596, cbModelParam._m0[21u].z, fma(_592, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _588)) + cbModelParam._m0[21u].w;
        float _1527 = fma(_596, cbModelParam._m0[22u].z, fma(_592, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _588)) + cbModelParam._m0[22u].w;
        float _1531 = fma(_596, cbModelParam._m0[23u].z, fma(_592, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _588)) + cbModelParam._m0[23u].w;
        float _1534 = fma(_537, cbModelParam._m0[21u].z, fma(_536, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _535));
        float _1537 = fma(_537, cbModelParam._m0[22u].z, fma(_536, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _535));
        float _1540 = fma(_537, cbModelParam._m0[23u].z, fma(_536, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _535));
        float _1679;
        if (_1534 > 0.0)
        {
            _1679 = abs((1.0 - _1523) / _1534);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1534 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1523 + 1.0) / _1534);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1679 = frontier_phi_30_26_ladder;
        }
        float _1944;
        if (_1537 > 0.0)
        {
            _1944 = abs((1.0 - _1527) / _1537);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1537 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1527 + 1.0) / _1537);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1944 = frontier_phi_42_37_ladder;
        }
        float _2149;
        if (_1540 > 0.0)
        {
            _2149 = abs((1.0 - _1531) / _1540);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1540 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1531 + 1.0) / _1540);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2149 = frontier_phi_51_48_ladder;
        }
        float _2151 = isnan(_1944) ? _1679 : (isnan(_1679) ? _1944 : min(_1679, _1944));
        float _2152 = isnan(_2149) ? _2151 : (isnan(_2151) ? _2149 : min(_2151, _2149));
        float _2156 = (_2152 * _1534) + _1523;
        float _2157 = (_2152 * _1537) + _1527;
        float _2158 = (_2152 * _1540) + _1531;
        float _2159 = _2152 * 9.9999997473787516355514526367188e-05;
        float _2160 = (-1.0) - _2159;
        float _2162 = _2159 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2158 > _2162) || ((_2158 < _2160) || ((_2157 > _2162) || ((_2157 < _2160) || ((_2156 < _2160) || (_2156 > _2162))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2356 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2158, cbModelParam._m0[17u].z, fma(_2157, cbModelParam._m0[17u].y, _2156 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2158, cbModelParam._m0[18u].z, fma(_2157, cbModelParam._m0[18u].y, _2156 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2158, cbModelParam._m0[19u].z, fma(_2157, cbModelParam._m0[19u].y, _2156 * cbModelParam._m0[19u].x))), _1466);
            frontier_phi_27_51_ladder = _2356.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2356.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2356.x * cbModelParam._m0[1u].z;
        }
        _1559 = frontier_phi_27_51_ladder_2;
        _1561 = frontier_phi_27_51_ladder_1;
        _1563 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1543 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_535, _536, _537), _1466);
        _1559 = _1543.x * cbModelParam._m0[1u].z;
        _1561 = _1543.y * cbModelParam._m0[1u].z;
        _1563 = _1543.z * cbModelParam._m0[1u].z;
    }
    float _1575 = ((((1.0 - _556) * ((_543 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_556 * _543)) * _527;
    float _1576 = _1575 * ((cbModelParam._m0[1u].w * (_1559 - _1457)) + _1457);
    float _1577 = _1575 * ((cbModelParam._m0[1u].w * (_1561 - _1459)) + _1459);
    float _1578 = _1575 * ((cbModelParam._m0[1u].w * (_1563 - _1461)) + _1461);
    float _1581 = fma(_1578, cbSceneParam._m0[89u].z, fma(_1577, cbSceneParam._m0[89u].y, _1576 * cbSceneParam._m0[89u].x));
    float _1584 = fma(_1578, cbSceneParam._m0[90u].z, fma(_1577, cbSceneParam._m0[90u].y, _1576 * cbSceneParam._m0[90u].x));
    float _1587 = fma(_1578, cbSceneParam._m0[91u].z, fma(_1577, cbSceneParam._m0[91u].y, _1576 * cbSceneParam._m0[91u].x));
    uvec4 _1597 = floatBitsToUint(cbInstanceData._m0[_501 + 5u]);
    uint _1599 = _1597.x * 14u;
    uint _1600 = _1599 + 13u;
    float _1607 = _527 + (-1.0);
    float _1612 = (cbLight._m0[_1600].x * _1607) + 1.0;
    float _1613 = (cbLight._m0[_1600].y * _1607) + 1.0;
    float _1614 = (cbLight._m0[_1600].z * _1607) + 1.0;
    float _1615 = (cbLight._m0[_1600].w * _1607) + 1.0;
    uint _1616 = _1599 + 5u;
    float _1622 = isnan(1.0) ? _1613 : (isnan(_1613) ? 1.0 : min(_1613, 1.0));
    uint _1626 = _1599 + 4u;
    float _1633 = isnan(1.0) ? _1612 : (isnan(_1612) ? 1.0 : min(_1612, 1.0));
    uint _1637 = _1599 | 1u;
    float _1648 = dot(vec3(cbLight._m0[_1599].xyz), vec3(_359, _360, _361));
    float _1651 = dot(vec3(cbLight._m0[_1637].xyz), vec3(_359, _360, _361));
    float _3818 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
    float _3829 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
    float _1656 = (isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0))) * 0.3183098733425140380859375;
    float _1658 = (isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0))) * 0.3183098733425140380859375;
    float _1665 = ((cbLight._m0[_1616].x * _1622) * _1658) + ((cbLight._m0[_1626].x * _1633) * _1656);
    float _1666 = ((_1622 * cbLight._m0[_1616].y) * _1658) + ((_1633 * cbLight._m0[_1626].y) * _1656);
    float _1667 = ((_1622 * cbLight._m0[_1616].z) * _1658) + ((_1633 * cbLight._m0[_1626].z) * _1656);
    uvec4 _1671 = floatBitsToUint(cbLight._m0[_1599 + 12u]);
    bool _1673 = _1671.x == 0u;
    float _1684;
    float _1686;
    float _1688;
    if (_1673)
    {
        _1684 = _1665;
        _1686 = _1666;
        _1688 = _1667;
    }
    else
    {
        uint _1692 = _1599 + 6u;
        float _1708 = (dot(vec3(cbLight._m0[_1599 + 2u].xyz), vec3(_359, _360, _361)) * 0.5) + 0.5;
        float _1709 = _1708 * _1708;
        float _3840 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
        float _1710 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
        float _1711 = isnan(1.0) ? _1614 : (isnan(_1614) ? 1.0 : min(_1614, 1.0));
        _1684 = (((cbLight._m0[_1692].x * 0.3183098733425140380859375) * _1710) * _1711) + _1665;
        _1686 = (((cbLight._m0[_1692].y * 0.3183098733425140380859375) * _1710) * _1711) + _1666;
        _1688 = (((cbLight._m0[_1692].z * 0.3183098733425140380859375) * _1710) * _1711) + _1667;
    }
    bool _1691 = _1671.y == 0u;
    float _1729;
    float _1731;
    float _1733;
    if (_1691)
    {
        _1729 = _1684;
        _1731 = _1686;
        _1733 = _1688;
    }
    else
    {
        uint _1888 = _1599 + 7u;
        float _1904 = (dot(vec3(cbLight._m0[_1599 + 3u].xyz), vec3(_359, _360, _361)) * 0.5) + 0.5;
        float _1905 = _1904 * _1904;
        float _3856 = isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0));
        float _1906 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
        float _1907 = isnan(1.0) ? _1615 : (isnan(_1615) ? 1.0 : min(_1615, 1.0));
        _1729 = (((cbLight._m0[_1888].x * 0.3183098733425140380859375) * _1906) * _1907) + _1684;
        _1731 = (((cbLight._m0[_1888].y * 0.3183098733425140380859375) * _1906) * _1907) + _1686;
        _1733 = (((cbLight._m0[_1888].z * 0.3183098733425140380859375) * _1906) * _1907) + _1688;
    }
    uint _1736 = _1599 + 8u;
    float _1749 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1599].w)) * _362) * 0.949999988079071044921875);
    float _1750 = _1749 * _1749;
    float _1751 = cbLight._m0[_1599].x + _440;
    float _1752 = cbLight._m0[_1599].y + _441;
    float _1753 = cbLight._m0[_1599].z + _442;
    float _1757 = inversesqrt(dot(vec3(_1751, _1752, _1753), vec3(_1751, _1752, _1753)));
    float _1758 = _1757 * _1751;
    float _1759 = _1757 * _1752;
    float _1760 = _1757 * _1753;
    float _1761 = dot(vec3(_359, _360, _361), vec3(cbLight._m0[_1599].xyz));
    float _3872 = isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0));
    float _1764 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
    float _3883 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _1765 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
    float _1766 = dot(vec3(_359, _360, _361), vec3(_1758, _1759, _1760));
    float _3894 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
    float _1769 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
    float _1770 = dot(vec3(cbLight._m0[_1599].xyz), vec3(_1758, _1759, _1760));
    float _3905 = isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0));
    float _1774 = _1750 * _1750;
    float _1778 = ((_1769 * _1769) * (_1774 + (-1.0))) + 1.0;
    float _1789 = (exp2(log2(1.0 - (isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1790 = 1.0 - _1750;
    float _1801 = (0.5 / (((_1765 * ((_1764 * _1790) + _1750)) + 9.9999999392252902907785028219223e-09) + (((_1765 * _1790) + _1750) * _1764))) * _1764;
    float _3916 = isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0));
    float _1803 = (isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0))) * (_1774 / ((_1778 * _1778) * 3.141590118408203125));
    uint _1814 = _1599 + 9u;
    float _1825 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1637].w)) * _362) * 0.949999988079071044921875);
    float _1826 = _1825 * _1825;
    float _1827 = cbLight._m0[_1637].x + _440;
    float _1828 = cbLight._m0[_1637].y + _441;
    float _1829 = cbLight._m0[_1637].z + _442;
    float _1833 = inversesqrt(dot(vec3(_1827, _1828, _1829), vec3(_1827, _1828, _1829)));
    float _1834 = _1833 * _1827;
    float _1835 = _1833 * _1828;
    float _1836 = _1833 * _1829;
    float _1837 = dot(vec3(_359, _360, _361), vec3(cbLight._m0[_1637].xyz));
    float _3927 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
    float _1840 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
    float _1841 = dot(vec3(_359, _360, _361), vec3(_1834, _1835, _1836));
    float _3938 = isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0));
    float _1844 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
    float _1845 = dot(vec3(cbLight._m0[_1637].xyz), vec3(_1834, _1835, _1836));
    float _3949 = isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0));
    float _1849 = _1826 * _1826;
    float _1853 = ((_1844 * _1844) * (_1849 + (-1.0))) + 1.0;
    float _1862 = (exp2(log2(1.0 - (isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1863 = 1.0 - _1826;
    float _1873 = (0.5 / (((_1765 * ((_1840 * _1863) + _1826)) + 9.9999999392252902907785028219223e-09) + (((_1765 * _1863) + _1826) * _1840))) * _1840;
    float _3960 = isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0));
    float _1875 = (isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0))) * (_1849 / ((_1853 * _1853) * 3.141590118408203125));
    float _1885 = (((_1862 * cbLight._m0[_1814].x) * _1875) * _1622) + (((_1789 * cbLight._m0[_1736].x) * _1803) * _1633);
    float _1886 = (((_1862 * cbLight._m0[_1814].y) * _1875) * _1622) + (((_1789 * cbLight._m0[_1736].y) * _1803) * _1633);
    float _1887 = (((_1862 * cbLight._m0[_1814].z) * _1875) * _1622) + (((_1789 * cbLight._m0[_1736].z) * _1803) * _1633);
    float _1949;
    float _1951;
    float _1953;
    if (_1673)
    {
        _1949 = _1885;
        _1951 = _1886;
        _1953 = _1887;
    }
    else
    {
        uint _1955 = _1599 + 2u;
        uint _1959 = _1599 + 10u;
        float _1973 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1955].w)) * _362) * 0.949999988079071044921875);
        float _1974 = _1973 * _1973;
        float _1975 = cbLight._m0[_1955].x + _440;
        float _1976 = cbLight._m0[_1955].y + _441;
        float _1977 = cbLight._m0[_1955].z + _442;
        float _1981 = inversesqrt(dot(vec3(_1975, _1976, _1977), vec3(_1975, _1976, _1977)));
        float _1982 = _1981 * _1975;
        float _1983 = _1981 * _1976;
        float _1984 = _1981 * _1977;
        float _1985 = dot(vec3(_359, _360, _361), vec3(cbLight._m0[_1955].xyz));
        float _3971 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
        float _1988 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
        float _1989 = dot(vec3(_359, _360, _361), vec3(_1982, _1983, _1984));
        float _3982 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
        float _1992 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
        float _1993 = dot(vec3(cbLight._m0[_1955].xyz), vec3(_1982, _1983, _1984));
        float _3993 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
        float _1997 = _1974 * _1974;
        float _2001 = ((_1992 * _1992) * (_1997 + (-1.0))) + 1.0;
        float _2010 = (exp2(log2(1.0 - (isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2011 = 1.0 - _1974;
        float _2021 = (0.5 / (((_1765 * ((_1988 * _2011) + _1974)) + 9.9999999392252902907785028219223e-09) + (((_1765 * _2011) + _1974) * _1988))) * _1988;
        float _4004 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
        float _2023 = (isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0))) * (_1997 / ((_2001 * _2001) * 3.141590118408203125));
        float _2024 = isnan(1.0) ? _1614 : (isnan(_1614) ? 1.0 : min(_1614, 1.0));
        _1949 = (((_2010 * cbLight._m0[_1959].x) * _2023) * _2024) + _1885;
        _1951 = (((_2010 * cbLight._m0[_1959].y) * _2023) * _2024) + _1886;
        _1953 = (((_2010 * cbLight._m0[_1959].z) * _2023) * _2024) + _1887;
    }
    float _2059;
    float _2061;
    float _2063;
    if (_1691)
    {
        _2059 = _1949;
        _2061 = _1951;
        _2063 = _1953;
    }
    else
    {
        uint _2070 = _1599 + 3u;
        uint _2074 = _1599 + 11u;
        float _2088 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2070].w)) * _362) * 0.949999988079071044921875);
        float _2089 = _2088 * _2088;
        float _2090 = cbLight._m0[_2070].x + _440;
        float _2091 = cbLight._m0[_2070].y + _441;
        float _2092 = cbLight._m0[_2070].z + _442;
        float _2096 = inversesqrt(dot(vec3(_2090, _2091, _2092), vec3(_2090, _2091, _2092)));
        float _2097 = _2096 * _2090;
        float _2098 = _2096 * _2091;
        float _2099 = _2096 * _2092;
        float _2100 = dot(vec3(_359, _360, _361), vec3(cbLight._m0[_2070].xyz));
        float _4020 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
        float _2103 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
        float _2104 = dot(vec3(_359, _360, _361), vec3(_2097, _2098, _2099));
        float _4031 = isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0));
        float _2107 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
        float _2108 = dot(vec3(cbLight._m0[_2070].xyz), vec3(_2097, _2098, _2099));
        float _4042 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
        float _2112 = _2089 * _2089;
        float _2116 = ((_2107 * _2107) * (_2112 + (-1.0))) + 1.0;
        float _2125 = (exp2(log2(1.0 - (isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2126 = 1.0 - _2089;
        float _2136 = (0.5 / (((_1765 * ((_2103 * _2126) + _2089)) + 9.9999999392252902907785028219223e-09) + (((_1765 * _2126) + _2089) * _2103))) * _2103;
        float _4053 = isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0));
        float _2138 = (isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0))) * (_2112 / ((_2116 * _2116) * 3.141590118408203125));
        float _2139 = isnan(1.0) ? _1615 : (isnan(_1615) ? 1.0 : min(_1615, 1.0));
        _2059 = (((_2125 * cbLight._m0[_2074].x) * _2138) * _2139) + _1949;
        _2061 = (((_2125 * cbLight._m0[_2074].y) * _2138) * _2139) + _1951;
        _2063 = (((_2125 * cbLight._m0[_2074].z) * _2138) * _2139) + _1953;
    }
    float _2273;
    float _2275;
    float _2277;
    float _2279;
    float _2281;
    float _2283;
    if (_1597.y == 0u)
    {
        float _2214 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2215 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2214;
        float _2216 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2214;
        float _2217 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2214;
        uvec4 _2229 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2230 = _2229.x;
        uint _2241 = uint((float(_2229.y) * floor(float(uint(cbSceneParam._m0[85u].y * _462) / _2230))) + floor(float(uint(cbSceneParam._m0[85u].x * _461) / _2230)));
        float _2251 = (log2(_2217 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2252 = isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0));
        uint _2255 = uint(isnan(14.0) ? _2252 : (isnan(_2252) ? 14.0 : min(_2252, 14.0)));
        uvec4 _2260 = texelFetch(g_lightClusterGridBuffer, int(((_2255 << 2u) + (_2241 << 6u)) >> 2u));
        uint _2261 = _2260.x;
        uint _2262 = _2229.z;
        float _2361;
        float _2363;
        float _2365;
        float _2367;
        float _2369;
        float _2371;
        if (((((1u << ((_2262 >> 4u) & 15u)) + 4294967295u) & _2261) == 0u) || ((_2262 & 240u) == 0u))
        {
            _2361 = 0.0;
            _2363 = 0.0;
            _2365 = 0.0;
            _2367 = 0.0;
            _2369 = 0.0;
            _2371 = 0.0;
        }
        else
        {
            float _2362;
            float _2364;
            float _2366;
            float _2368;
            float _2370;
            float _2372;
            float _2513 = 0.0;
            float _2514 = 0.0;
            float _2515 = 0.0;
            float _2516 = 0.0;
            float _2517 = 0.0;
            float _2518 = 0.0;
            uint _2519 = 0u;
            uint _2528;
            bool _2529;
            for (;;)
            {
                _2528 = texelFetch(g_lightClassification, int((((_2255 << 5u) + (_2241 << 9u)) + (_2519 << 2u)) >> 2u)).x;
                _2529 = _2528 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2529)
                {
                    frontier_phi_68_pred = _2515;
                    frontier_phi_68_pred_1 = _2518;
                    frontier_phi_68_pred_2 = _2517;
                    frontier_phi_68_pred_3 = _2516;
                    frontier_phi_68_pred_4 = _2514;
                    frontier_phi_68_pred_5 = _2513;
                }
                else
                {
                    float _2658;
                    float _2659;
                    float _2660;
                    float _2661;
                    float _2662;
                    float _2663;
                    uint _2664;
                    _2658 = _2513;
                    _2659 = _2514;
                    _2660 = _2515;
                    _2661 = _2516;
                    _2662 = _2517;
                    _2663 = _2518;
                    _2664 = _2528;
                    float _2585;
                    float _2586;
                    float _2587;
                    float _2588;
                    float _2589;
                    float _2590;
                    for (;;)
                    {
                        uint _2668 = uint(findLSB(_2664)) + (_2519 << 5u);
                        uint _2665 = (_2664 + 4294967295u) & _2664;
                        uint _2670 = _2668 * 48u;
                        vec4 _2684 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2670)).x, texelFetch(g_PointLightRenderingBuffer, int(_2670 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2670 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2670 + 3u)).x));
                        uint _2690 = (_2668 * 48u) + 4u;
                        vec4 _2703 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2690)).x, texelFetch(g_PointLightRenderingBuffer, int(_2690 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2690 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2690 + 3u)).x));
                        uint _2709 = (_2668 * 48u) + 8u;
                        vec3 _2720 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2709)).x, texelFetch(g_PointLightRenderingBuffer, int(_2709 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2709 + 2u)).x));
                        float _2724 = _2684.x - _2215;
                        float _2725 = _2684.y - _2216;
                        float _2726 = _2684.z - _2217;
                        float _2727 = dot(vec3(_2724, _2725, _2726), vec3(_2724, _2725, _2726));
                        float _2730 = inversesqrt(_2727);
                        float _2731 = _2730 * _2724;
                        float _2732 = _2730 * _2725;
                        float _2733 = _2730 * _2726;
                        float _2734 = dot(vec3(_482, _485, _488), vec3(_2731, _2732, _2733));
                        float _2739 = 1.0 - (_2727 * _2684.w);
                        float _4079 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0));
                        float _2740 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
                        float _2741 = sqrt(_2727) * _2703.w;
                        float _2744 = 1.39999997615814208984375 / (_2741 + 1.39999997615814208984375);
                        float _2745 = _2744 * _2744;
                        float _2748 = ((1.0 - _2745) * _2734) + _2745;
                        float _2751 = _2741 * _2741;
                        float _2755 = ((isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : max(_2748, 0.0))) * _2740) / ((_2751 * 0.699999988079071044921875) + 1.0);
                        float _2759 = (-0.0) - _2215;
                        float _2760 = (-0.0) - _2216;
                        float _2761 = (-0.0) - _2217;
                        float _2765 = inversesqrt(dot(vec3(_2759, _2760, _2761), vec3(_2759, _2760, _2761)));
                        float _2766 = _2765 * _2759;
                        float _2767 = _2765 * _2760;
                        float _2768 = _2765 * _2761;
                        float _2776 = exp2(log2(1.0 / ((_2751 * 3.5) + 5.0)) * 0.25);
                        float _2777 = 1.0 - _543;
                        float _2784 = sqrt(1.0 - ((1.0 - (_2777 * _2777)) * (1.0 - (_2776 * _2776))));
                        float _2785 = _2784 * _2784;
                        float _2786 = _2785 * _2785;
                        float _2787 = _2766 + _2731;
                        float _2788 = _2767 + _2732;
                        float _2789 = _2768 + _2733;
                        float _2793 = inversesqrt(dot(vec3(_2787, _2788, _2789), vec3(_2787, _2788, _2789)));
                        float _2797 = dot(vec3(_482, _485, _488), vec3(_2766, _2767, _2768));
                        float _4095 = isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : max(_2797, 0.0));
                        float _2800 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
                        float _2801 = dot(vec3(_482, _485, _488), vec3(_2793 * _2787, _2793 * _2788, _2793 * _2789));
                        float _4106 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0));
                        float _2804 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
                        float _2808 = ((_2804 * _2804) * (_2786 + (-1.0))) + 1.0;
                        float _2809 = _2744 * _2785;
                        float _2810 = _2809 * _2809;
                        float _2813 = ((1.0 - _2810) * _2734) + _2810;
                        float _4117 = isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : max(_2813, 0.0));
                        float _2814 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
                        float _2815 = 1.0 - _2785;
                        float _2825 = (0.5 / (((_2814 * ((_2800 * _2815) + _2785)) + 9.9999999392252902907785028219223e-09) + (((_2814 * _2815) + _2785) * _2800))) * _2814;
                        float _4128 = isnan(0.0) ? _2825 : (isnan(_2825) ? 0.0 : max(_2825, 0.0));
                        float _2836 = (((_2786 * 3.1415927410125732421875) * (isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0)))) / ((_2808 * _2808) * ((_2751 * 2.1991131305694580078125) + 3.141590118408203125))) * _2740;
                        _2588 = (_2755 * _2703.x) + _2661;
                        _2589 = (_2755 * _2703.y) + _2662;
                        _2590 = (_2755 * _2703.z) + _2663;
                        _2585 = (_2836 * _2720.x) + _2658;
                        _2586 = (_2836 * _2720.y) + _2659;
                        _2587 = (_2836 * _2720.z) + _2660;
                        if (_2665 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2658 = _2585;
                            _2659 = _2586;
                            _2660 = _2587;
                            _2661 = _2588;
                            _2662 = _2589;
                            _2663 = _2590;
                            _2664 = _2665;
                        }
                    }
                    frontier_phi_68_pred = _2587;
                    frontier_phi_68_pred_1 = _2590;
                    frontier_phi_68_pred_2 = _2589;
                    frontier_phi_68_pred_3 = _2588;
                    frontier_phi_68_pred_4 = _2586;
                    frontier_phi_68_pred_5 = _2585;
                }
                _2366 = frontier_phi_68_pred;
                _2372 = frontier_phi_68_pred_1;
                _2370 = frontier_phi_68_pred_2;
                _2368 = frontier_phi_68_pred_3;
                _2364 = frontier_phi_68_pred_4;
                _2362 = frontier_phi_68_pred_5;
                uint _2520 = _2519 + 1u;
                if (_2520 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2513 = _2362;
                    _2514 = _2364;
                    _2515 = _2366;
                    _2516 = _2368;
                    _2517 = _2370;
                    _2518 = _2372;
                    _2519 = _2520;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2361 = _2362;
            _2363 = _2364;
            _2365 = _2366;
            _2367 = _2368;
            _2369 = _2370;
            _2371 = _2372;
        }
        uvec4 _2375 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2376 = _2375.z;
        uint _2378 = (_2376 >> 8u) & 15u;
        float _2481;
        float _2483;
        float _2485;
        float _2487;
        float _2489;
        float _2491;
        if (((4294967295u << _2378) & _2261) == 0u)
        {
            _2481 = _2361;
            _2483 = _2363;
            _2485 = _2365;
            _2487 = _2367;
            _2489 = _2369;
            _2491 = _2371;
        }
        else
        {
            float _2506 = inversesqrt(dot(vec3(_2215, _2216, _2217), vec3(_2215, _2216, _2217)));
            float _2507 = _2506 * _2215;
            float _2508 = _2506 * _2216;
            float _2509 = _2506 * _2217;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2378 < ((_2376 >> 12u) & 15u))
            {
                float _2482;
                float _2484;
                float _2486;
                float _2488;
                float _2490;
                float _2492;
                float _2641 = _2361;
                float _2642 = _2363;
                float _2643 = _2365;
                float _2644 = _2367;
                float _2645 = _2369;
                float _2646 = _2371;
                uint _2647 = _2378;
                uint _2656;
                bool _2657;
                for (;;)
                {
                    _2656 = texelFetch(g_lightClassification, int((((_2255 << 5u) + (_2241 << 9u)) + (_2647 << 2u)) >> 2u)).x;
                    _2657 = _2656 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2657)
                    {
                        frontier_phi_79_pred = _2646;
                        frontier_phi_79_pred_1 = _2645;
                        frontier_phi_79_pred_2 = _2644;
                        frontier_phi_79_pred_3 = _2643;
                        frontier_phi_79_pred_4 = _2642;
                        frontier_phi_79_pred_5 = _2641;
                    }
                    else
                    {
                        float _2850;
                        float _2851;
                        float _2852;
                        float _2853;
                        float _2854;
                        float _2855;
                        float _3146;
                        float _3147;
                        float _3148;
                        float _3149;
                        float _3150;
                        float _3151;
                        float _2863 = _2641;
                        float _2864 = _2642;
                        float _2865 = _2643;
                        float _2866 = _2644;
                        float _2867 = _2645;
                        float _2868 = _2646;
                        uint _2869 = _2656;
                        uint _2870;
                        vec4 _2895;
                        float _2896;
                        vec4 _2911;
                        vec3 _2923;
                        vec4 _2939;
                        vec4 _2955;
                        float _3002;
                        bool _3003;
                        for (;;)
                        {
                            uint _2880 = ((_2647 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2869));
                            _2870 = (_2869 + 4294967295u) & _2869;
                            uint _2882 = _2880 * 40u;
                            _2895 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2882)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 3u)).x));
                            _2896 = _2895.w;
                            uint _2898 = (_2880 * 40u) + 4u;
                            _2911 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2898)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2898 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2898 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2898 + 3u)).x));
                            uint _2913 = (_2880 * 40u) + 8u;
                            _2923 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2913)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2913 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2913 + 2u)).x));
                            uint _2926 = (_2880 * 40u) + 16u;
                            _2939 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2926)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2926 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2926 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2926 + 3u)).x));
                            uint _2942 = (_2880 * 40u) + 20u;
                            _2955 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2942)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2942 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2942 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2942 + 3u)).x));
                            uint _2958 = (_2880 * 40u) + 24u;
                            vec4 _2971 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2958)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2958 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2958 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2958 + 3u)).x));
                            uint _2977 = (_2880 * 40u) + 28u;
                            vec4 _2990 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2977)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2977 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2977 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2977 + 3u)).x));
                            _3002 = fma(_2217, _2990.z, fma(_2216, _2990.y, _2990.x * _2215)) + _2990.w;
                            _3003 = !((fma(_2217, _2971.z, fma(_2216, _2971.y, _2971.x * _2215)) + _2971.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3003)
                            {
                                float _3030 = _2895.x - _2215;
                                float _3031 = _2895.y - _2216;
                                float _3032 = _2895.z - _2217;
                                float _3033 = dot(vec3(_3030, _3031, _3032), vec3(_3030, _3031, _3032));
                                float _3036 = inversesqrt(_3033);
                                float _3037 = _3036 * _3030;
                                float _3038 = _3036 * _3031;
                                float _3039 = _3036 * _3032;
                                float _3043 = 1.0 - (_3033 / (_2896 * _2896));
                                float _4139 = isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : max(_3043, 0.0));
                                float _3044 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
                                float _3048 = sqrt(_3033) * _2911.w;
                                float _3050 = 1.39999997615814208984375 / (_3048 + 1.39999997615814208984375);
                                float _3051 = _3050 * _3050;
                                float _3054 = ((1.0 - _3051) * dot(vec3(_3037, _3038, _3039), vec3(_482, _485, _488))) + _3051;
                                float _3057 = _3048 * _3048;
                                float _3061 = (fma(_2217, _2939.z, fma(_2216, _2939.y, _2939.x * _2215)) + _2939.w) / _3002;
                                float _3062 = (fma(_2217, _2955.z, fma(_2216, _2955.y, _2955.x * _2215)) + _2955.w) / _3002;
                                float _3066 = 1.0 - dot(vec2(_3061, _3062), vec2(_3061, _3062));
                                float _4155 = isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : max(_3066, 0.0));
                                float _3067 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
                                float _3068 = _3067 * (((isnan(0.0) ? _3054 : (isnan(_3054) ? 0.0 : max(_3054, 0.0))) * _3044) / ((_3057 * 0.699999988079071044921875) + 1.0));
                                float _3080 = exp2(log2(1.0 / ((_3057 * 3.5) + 5.0)) * 0.25);
                                float _3081 = 1.0 - _543;
                                float _3088 = sqrt(1.0 - ((1.0 - (_3081 * _3081)) * (1.0 - (_3080 * _3080))));
                                float _3089 = _3088 * _3088;
                                float _3090 = _3089 * _3089;
                                float _3091 = _3037 - _2507;
                                float _3092 = _3038 - _2508;
                                float _3093 = _3039 - _2509;
                                float _3097 = inversesqrt(dot(vec3(_3091, _3092, _3093), vec3(_3091, _3092, _3093)));
                                float _3101 = dot(vec3(_482, _485, _488), vec3((-0.0) - _2507, (-0.0) - _2508, (-0.0) - _2509));
                                float _4166 = isnan(0.0) ? _3101 : (isnan(_3101) ? 0.0 : max(_3101, 0.0));
                                float _3104 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
                                float _3105 = dot(vec3(_482, _485, _488), vec3(_3097 * _3091, _3097 * _3092, _3097 * _3093));
                                float _4177 = isnan(0.0) ? _3105 : (isnan(_3105) ? 0.0 : max(_3105, 0.0));
                                float _3108 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
                                float _3112 = ((_3108 * _3108) * (_3090 + (-1.0))) + 1.0;
                                float _3113 = _3050 * _3089;
                                float _3114 = _3113 * _3113;
                                float _3120 = ((1.0 - _3114) * dot(vec3(_482, _485, _488), vec3(_3037, _3038, _3039))) + _3114;
                                float _4188 = isnan(0.0) ? _3120 : (isnan(_3120) ? 0.0 : max(_3120, 0.0));
                                float _3121 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
                                float _3122 = 1.0 - _3089;
                                float _3132 = (0.5 / (((_3121 * ((_3104 * _3122) + _3089)) + 9.9999999392252902907785028219223e-09) + (((_3121 * _3122) + _3089) * _3104))) * _3121;
                                float _4199 = isnan(0.0) ? _3132 : (isnan(_3132) ? 0.0 : max(_3132, 0.0));
                                float _3142 = (_3067 * _3044) * (((_3090 * 3.1415927410125732421875) * (isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0)))) / ((_3112 * _3112) * ((_3057 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3068 * _2911.z;
                                frontier_phi_85_pred_1 = _3068 * _2911.y;
                                frontier_phi_85_pred_2 = _3068 * _2911.x;
                                frontier_phi_85_pred_3 = _3142 * _2923.z;
                                frontier_phi_85_pred_4 = _3142 * _2923.y;
                                frontier_phi_85_pred_5 = _3142 * _2923.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3151 = frontier_phi_85_pred;
                            _3150 = frontier_phi_85_pred_1;
                            _3149 = frontier_phi_85_pred_2;
                            _3148 = frontier_phi_85_pred_3;
                            _3147 = frontier_phi_85_pred_4;
                            _3146 = frontier_phi_85_pred_5;
                            _2853 = _3149 + _2866;
                            _2854 = _3150 + _2867;
                            _2855 = _3151 + _2868;
                            _2850 = _3146 + _2863;
                            _2851 = _3147 + _2864;
                            _2852 = _3148 + _2865;
                            if (_2870 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2863 = _2850;
                                _2864 = _2851;
                                _2865 = _2852;
                                _2866 = _2853;
                                _2867 = _2854;
                                _2868 = _2855;
                                _2869 = _2870;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2855;
                        frontier_phi_79_pred_1 = _2854;
                        frontier_phi_79_pred_2 = _2853;
                        frontier_phi_79_pred_3 = _2852;
                        frontier_phi_79_pred_4 = _2851;
                        frontier_phi_79_pred_5 = _2850;
                    }
                    _2492 = frontier_phi_79_pred;
                    _2490 = frontier_phi_79_pred_1;
                    _2488 = frontier_phi_79_pred_2;
                    _2486 = frontier_phi_79_pred_3;
                    _2484 = frontier_phi_79_pred_4;
                    _2482 = frontier_phi_79_pred_5;
                    uint _2648 = _2647 + 1u;
                    if (_2648 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2641 = _2482;
                        _2642 = _2484;
                        _2643 = _2486;
                        _2644 = _2488;
                        _2645 = _2490;
                        _2646 = _2492;
                        _2647 = _2648;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2488;
                frontier_phi_60_61_ladder_1 = _2492;
                frontier_phi_60_61_ladder_2 = _2490;
                frontier_phi_60_61_ladder_3 = _2486;
                frontier_phi_60_61_ladder_4 = _2484;
                frontier_phi_60_61_ladder_5 = _2482;
            }
            else
            {
                frontier_phi_60_61_ladder = _2367;
                frontier_phi_60_61_ladder_1 = _2371;
                frontier_phi_60_61_ladder_2 = _2369;
                frontier_phi_60_61_ladder_3 = _2365;
                frontier_phi_60_61_ladder_4 = _2363;
                frontier_phi_60_61_ladder_5 = _2361;
            }
            _2481 = frontier_phi_60_61_ladder_5;
            _2483 = frontier_phi_60_61_ladder_4;
            _2485 = frontier_phi_60_61_ladder_3;
            _2487 = frontier_phi_60_61_ladder;
            _2489 = frontier_phi_60_61_ladder_2;
            _2491 = frontier_phi_60_61_ladder_1;
        }
        float _2496 = isnan(1.0) ? _527 : (isnan(_527) ? 1.0 : min(_527, 1.0));
        _2273 = (_2496 * _2487) + _1729;
        _2275 = (_2496 * _2489) + _1731;
        _2277 = (_2496 * _2491) + _1733;
        _2279 = ((_2481 * 0.039999999105930328369140625) * _2496) + _2059;
        _2281 = ((_2483 * 0.039999999105930328369140625) * _2496) + _2061;
        _2283 = ((_2485 * 0.039999999105930328369140625) * _2496) + _2063;
    }
    else
    {
        _2273 = _1729;
        _2275 = _1731;
        _2277 = _1733;
        _2279 = _2059;
        _2281 = _2061;
        _2283 = _2063;
    }
    float _4215 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _4226 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _4237 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _2300 = ((isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0))) * (_2273 + ((isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0))) * _527))) + ((_2279 + ((isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0))) * _1365)) * cbPerFrame._m0[3u].x);
    float _2301 = ((isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0))) * (_2275 + ((isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0))) * _527))) + ((_2281 + ((isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0))) * _1365)) * cbPerFrame._m0[3u].x);
    float _2302 = ((isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0))) * (_2277 + ((isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0))) * _527))) + ((_2283 + ((isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0))) * _1365)) * cbPerFrame._m0[3u].x);
    uint _2303 = _501 + 6u;
    float _2311 = _461 / cbSceneParam._m0[86u].x;
    float _2312 = _462 / cbSceneParam._m0[86u].y;
    vec4 _2326 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2311, _2312, (log2((isnan(cbSceneParam._m0[77u].w) ? _381 : (isnan(_381) ? cbSceneParam._m0[77u].w : min(_381, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2328 = _2326.x;
    float _2329 = _2326.y;
    float _2330 = _2326.z;
    float _2331 = _2326.w;
    float _2423;
    float _2425;
    float _2427;
    float _2429;
    if (_381 > cbSceneParam._m0[78u].w)
    {
        float _2386 = isnan(_381) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _381 : min(cbSceneParam._m0[80u].w, _381));
        float _2387 = _2386 / _381;
        float _2398 = _2387 * _433;
        float _2399 = _434 * _2387;
        float _2400 = (-0.0) - _2399;
        float _2401 = _2387 * _435;
        float _2403 = (cbSceneParam._m0[77u].w * _2400) / _2386;
        float _2404 = _2403 + cbSceneParam._m0[79u].w;
        float _2405 = cbSceneParam._m0[79u].w - _2399;
        float _2411 = sqrt(((_2398 * _2398) + (_2399 * _2399)) + (_2401 * _2401));
        float _2414 = (1.0 - (cbSceneParam._m0[77u].w / _2386)) * _2411;
        float _2419 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2421 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2598;
        if (abs((_2400 - _2403) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2598 = ((((_2404 > 0.0) ? exp2(_2419 * _2404) : (2.0 - exp2(_2421 * _2404))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2414;
        }
        else
        {
            float _2542 = 1.0 / cbSceneParam._m0[80u].x;
            float _2543 = isnan(_2405) ? _2404 : (isnan(_2404) ? _2405 : max(_2404, _2405));
            float _2544 = isnan(_2405) ? _2404 : (isnan(_2404) ? _2405 : min(_2404, _2405));
            float _2553 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : min(_2543, 0.0));
            float _2554 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : min(_2544, 0.0));
            _2598 = ((abs(_2411 / _2400) * cbSceneParam._m0[80u].y) * ((((_2553 - _2554) * 2.0) - ((exp2(_2419 * (isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0)))) - exp2(_2419 * (isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0))))) * _2542)) - ((exp2(_2421 * _2553) - exp2(_2421 * _2554)) * _2542))) + (_2414 * cbSceneParam._m0[80u].z);
        }
        vec4 _2600 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2311, _2312, 1.0), 0.0);
        float _2609 = exp2((_2598 * (-1.44269502162933349609375)) * (1.0 - _2600.w));
        float _2610 = log2(_2609);
        float _2626 = log2(_2331);
        _2423 = (exp2(_2626 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2610 * cbSceneParam._m0[78u].x)) * _2600.x) / cbSceneParam._m0[78u].x)) + _2328;
        _2425 = (exp2(_2626 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2610 * cbSceneParam._m0[78u].y)) * _2600.y) / cbSceneParam._m0[78u].y)) + _2329;
        _2427 = (exp2(_2626 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2610 * cbSceneParam._m0[78u].z)) * _2600.z) / cbSceneParam._m0[78u].z)) + _2330;
        _2429 = _2609 * _2331;
    }
    else
    {
        _2423 = _2328;
        _2425 = _2329;
        _2427 = _2330;
        _2429 = _2331;
    }
    bool _2636;
    vec4 _2439;
    vec4 _2461;
    float _2463;
    float _2467;
    float _2468;
    float _2469;
    float _2470;
    bool _2480;
    for (;;)
    {
        _2439 = cbMatDynParam._m0[0u];
        float _2441 = roundEven(_2439.y);
        bool _2442 = _2441 == 3.0;
        float _2443 = log2(_2429);
        float _2450 = exp2(_2443 * cbSceneParam._m0[78u].x) * _2300;
        float _2451 = exp2(_2443 * cbSceneParam._m0[78u].y) * _2301;
        float _2452 = exp2(_2443 * cbSceneParam._m0[78u].z) * _2302;
        float _2459 = _449 + (-0.5);
        _2461 = cbMtdParam._m0[1u];
        _2463 = _2461.y * _2459;
        float _2466 = (_2441 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2467 = _2466 * (_2442 ? _2450 : (_2450 + (cbSceneParam._m0[72u].w * _2423)));
        _2468 = _2466 * (_2442 ? _2451 : (_2451 + (cbSceneParam._m0[72u].w * _2425)));
        _2469 = _2466 * (_2442 ? _2452 : (_2452 + (cbSceneParam._m0[72u].w * _2427)));
        _2470 = _2459 * 0.999000012874603271484375;
        _2480 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2480)
        {
            if ((cbInstanceData._m0[_501 + 7u].x + _2470) < 0.5)
            {
                _2636 = true;
                break;
            }
        }
        uint _2577 = _503 + uint(_2439.w);
        if ((cbInstanceData._m0[_2577].w < 1.0) && ((cbInstanceData._m0[_2577].w + _2470) < 0.5))
        {
            _2636 = true;
            break;
        }
        if ((_2463 + _248) < _2461.x)
        {
            _2636 = true;
            break;
        }
        _2636 = false;
        break;
    }
    float _2841;
    if (_2636)
    {
        discard_state = true;
        _2841 = 0.0;
    }
    else
    {
        _2841 = cbInstanceData._m0[_2303].w;
    }
    SV_Target.x = _2467;
    SV_Target.y = _2468;
    SV_Target.z = _2469;
    SV_Target.w = _2841;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2303].w;
    discard_exit();
}


