#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _921;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _192 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _199 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _200 = _199 * NORMAL.x;
    float _201 = _199 * NORMAL.y;
    float _202 = _199 * NORMAL.z;
    float _206 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _214;
    float _215;
    float _216;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _214 = (-0.0) - _200;
        _215 = (-0.0) - _201;
        _216 = (-0.0) - _202;
    }
    else
    {
        _214 = _200;
        _215 = _201;
        _216 = _202;
    }
    vec4 _242 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _248 = _242.x * cbMtdParam._m0[9u].x;
    float _249 = _242.y * cbMtdParam._m0[9u].y;
    float _250 = _242.z * cbMtdParam._m0[9u].z;
    vec4 _262 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _266 = _262.z;
    float _270 = (_262.x * 2.0) + (-1.0);
    float _272 = (_262.y * 2.0) + (-1.0);
    float _273 = dot(vec2(_270, _272), vec2(_270, _272));
    float _3280 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    float _279 = sqrt(1.0 - (isnan(1.0) ? _3280 : (isnan(_3280) ? 1.0 : min(_3280, 1.0))));
    float _291 = (TEXCOORD_3.x - (((1.0 - TEXCOORD_3.x) * 0.00999999977648258209228515625) * cbMtdParam._m0[12u].y)) * (cbMtdParam._m0[12u].z + 1.0);
    float _3291 = isnan(0.0) ? _291 : (isnan(_291) ? 0.0 : max(_291, 0.0));
    float _292 = isnan(1.0) ? _3291 : (isnan(_3291) ? 1.0 : min(_3291, 1.0));
    float _299 = (_292 * (cbMtdParam._m0[10u].x - _248)) + _248;
    float _300 = (_292 * (cbMtdParam._m0[10u].y - _249)) + _249;
    float _301 = (_292 * (cbMtdParam._m0[10u].z - _250)) + _250;
    vec4 _313 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _315 = _313.x;
    float _317 = _315 - (_315 * _292);
    vec4 _329 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _336 = (_329.x * 2.0) + (-1.0);
    float _337 = (_329.y * 2.0) + (-1.0);
    float _338 = dot(vec2(_336, _337), vec2(_336, _337));
    float _3302 = isnan(0.0) ? _338 : (isnan(_338) ? 0.0 : max(_338, 0.0));
    float _346 = (_292 * (_329.z - _266)) + _266;
    float _358 = (((_336 - _270) + (cbMtdParam._m0[12u].w * _270)) * _292) + _270;
    float _359 = (((_337 - _272) + (cbMtdParam._m0[12u].w * _272)) * _292) + _272;
    float _360 = (_292 * (sqrt(1.0 - (isnan(1.0) ? _3302 : (isnan(_3302) ? 1.0 : min(_3302, 1.0)))) - _279)) + _279;
    float _363 = fma(_360, _214, fma(_359, _206 * TANGENT.x, (_192 * _184) * _358));
    float _366 = fma(_360, _215, fma(_359, _206 * TANGENT.y, (_192 * _185) * _358));
    float _369 = fma(_360, _216, fma(_359, _206 * TANGENT.z, (_192 * _186) * _358));
    float _373 = inversesqrt(dot(vec3(_363, _366, _369), vec3(_363, _366, _369)));
    float _374 = _373 * _363;
    float _375 = _373 * _366;
    float _376 = _373 * _369;
    float _3313 = isnan(0.0) ? _346 : (isnan(_346) ? 0.0 : max(_346, 0.0));
    float _377 = isnan(1.0) ? _3313 : (isnan(_3313) ? 1.0 : min(_3313, 1.0));
    float _3324 = isnan(0.0) ? _299 : (isnan(_299) ? 0.0 : max(_299, 0.0));
    float _3335 = isnan(0.0) ? _300 : (isnan(_300) ? 0.0 : max(_300, 0.0));
    float _3346 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _3357 = isnan(0.0) ? _317 : (isnan(_317) ? 0.0 : max(_317, 0.0));
    float _381 = isnan(1.0) ? _3357 : (isnan(_3357) ? 1.0 : min(_3357, 1.0));
    float _397 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _439 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _449 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _439);
    float _450 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _439);
    float _451 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _439);
    float _455 = inversesqrt(dot(vec3(_449, _450, _451), vec3(_449, _450, _451)));
    float _456 = _449 * _455;
    float _457 = _450 * _455;
    float _458 = _451 * _455;
    float _464 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _465 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _486 = fma(_376, cbSceneParam._m0[5u].z, fma(_375, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _374));
    float _489 = fma(_376, cbSceneParam._m0[6u].z, fma(_375, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _374));
    float _492 = fma(_376, cbSceneParam._m0[7u].z, fma(_375, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _374));
    uint _505 = uint(roundEven(NORMAL.w)) * 13u;
    uint _508 = (_505 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _514 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3324 : (isnan(_3324) ? 1.0 : min(_3324, 1.0)))) * cbInstanceData._m0[_508].x;
    float _515 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3335 : (isnan(_3335) ? 1.0 : min(_3335, 1.0)))) * cbInstanceData._m0[_508].y;
    float _516 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3346 : (isnan(_3346) ? 1.0 : min(_3346, 1.0)))) * cbInstanceData._m0[_508].z;
    float _3368 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _517 = isnan(1.0) ? _3368 : (isnan(_3368) ? 1.0 : min(_3368, 1.0));
    float _3379 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _518 = isnan(1.0) ? _3379 : (isnan(_3379) ? 1.0 : min(_3379, 1.0));
    float _3390 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _519 = isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0));
    float _520 = 1.0 - _381;
    float _521 = _517 * _520;
    float _522 = _518 * _520;
    float _523 = _519 * _520;
    float _528 = (_517 + (-0.039999999105930328369140625)) * _381;
    float _529 = (_518 + (-0.039999999105930328369140625)) * _381;
    float _530 = (_519 + (-0.039999999105930328369140625)) * _381;
    float _531 = _528 + 0.039999999105930328369140625;
    float _533 = _529 + 0.039999999105930328369140625;
    float _534 = _530 + 0.039999999105930328369140625;
    vec4 _543 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _464, cbSceneParam._m0[86u].y * _465));
    float _546 = _543.x * TEXCOORD_3.w;
    float _547 = dot(vec3(_374, _375, _376), vec3(_456, _457, _458));
    float _550 = _547 * 2.0;
    float _554 = (_550 * _374) - _456;
    float _555 = (_550 * _375) - _457;
    float _556 = (_550 * _376) - _458;
    float _560 = abs(dot(vec3(_456, _457, _458), vec3(_374, _375, _376)));
    float _3401 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _562 = sqrt(_377);
    float _575 = exp2((_562 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_562 * 3.0));
    float _581 = (1.0 - _575) * ((_562 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _582 = _575 * _562;
    float _610 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _614 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _618 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _920;
    float _922;
    float _923;
    float _924;
    float _925;
    float _926;
    float _927;
    float _928;
    float _929;
    float _930;
    float _931;
    float _932;
    float _933;
    float _934;
    float _935;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _645 = fma(_618, cbModelParam._m0[26u].z, fma(_614, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _610));
        float _649 = fma(_618, cbModelParam._m0[27u].z, fma(_614, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _610));
        float _653 = fma(_618, cbModelParam._m0[28u].z, fma(_614, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _610));
        float _678 = _610 + _374;
        float _679 = _614 + _375;
        float _680 = _618 + _376;
        float _690 = fma(_680, cbModelParam._m0[26u].z, fma(_679, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _678)) - _645;
        float _691 = fma(_680, cbModelParam._m0[27u].z, fma(_679, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _678)) - _649;
        float _692 = fma(_680, cbModelParam._m0[28u].z, fma(_679, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _678)) - _653;
        float _696 = inversesqrt(dot(vec3(_690, _691, _692), vec3(_690, _691, _692)));
        float _709 = ((_696 * _690) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_645 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _710 = ((_696 * _691) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_649 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _711 = ((_696 * _692) / cbModelParam._m0[34u].z) + ((((((_653 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _714 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_709, _710, _711), 0.0);
        vec4 _721 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_709, _710, _711), 0.0);
        vec4 _728 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_709, _710, _711), 0.0);
        vec4 _735 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_709, _710, _711), 0.0);
        float _748 = exp2((_714.w + (-0.5)) * 20.0) * 2.0;
        float _749 = _748 * (_714.x + (-0.5));
        float _750 = _748 * (_714.y + (-0.5));
        float _751 = _748 * (_714.z + (-0.5));
        float _758 = exp2((_721.w + (-0.5)) * 20.0) * 2.0;
        float _759 = _758 * (_721.x + (-0.5));
        float _760 = _758 * (_721.y + (-0.5));
        float _761 = _758 * (_721.z + (-0.5));
        float _768 = exp2((_728.w + (-0.5)) * 20.0) * 2.0;
        float _769 = _768 * (_728.x + (-0.5));
        float _770 = _768 * (_728.y + (-0.5));
        float _771 = _768 * (_728.z + (-0.5));
        float _778 = exp2((_735.w + (-0.5)) * 20.0) * 2.0;
        float _779 = _778 * (_735.x + (-0.5));
        float _780 = _778 * (_735.y + (-0.5));
        float _781 = _778 * (_735.z + (-0.5));
        float _782 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
        float _783 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
        float _784 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
        float _785 = _749 * 0.5;
        float _786 = _759 * 0.5;
        float _787 = _769 * 0.5;
        float _788 = dot(vec3(_785, _786, _787), vec3(_785, _786, _787));
        float _793 = (_788 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_788);
        float _802 = (dot(vec3(_374, _375, _376), vec3(_793 * _785, _793 * _786, _793 * _787)) + 1.0) * 0.5;
        float _3427 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
        float _812 = sqrt(((_786 * _786) + (_785 * _785)) + (_787 * _787)) / (_782 + 9.9999997473787516355514526367188e-06);
        float _3438 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
        float _813 = isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0));
        float _814 = _813 * 2.0;
        float _818 = (1.0 - _813) / (_813 + 1.0);
        float _3449 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
        float _819 = isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0));
        float _828 = ((((1.0 - _819) * (_814 + 2.0)) * exp2(log2(isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0))) * (_814 + 1.0))) + _819) * _782;
        float _829 = _750 * 0.5;
        float _830 = _760 * 0.5;
        float _831 = _770 * 0.5;
        float _832 = dot(vec3(_829, _830, _831), vec3(_829, _830, _831));
        float _837 = (_832 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_832);
        float _845 = (dot(vec3(_374, _375, _376), vec3(_837 * _829, _837 * _830, _837 * _831)) + 1.0) * 0.5;
        float _3460 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
        float _854 = sqrt(((_830 * _830) + (_829 * _829)) + (_831 * _831)) / (_783 + 9.9999997473787516355514526367188e-06);
        float _3471 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
        float _855 = isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0));
        float _856 = _855 * 2.0;
        float _860 = (1.0 - _855) / (_855 + 1.0);
        float _3482 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
        float _861 = isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0));
        float _870 = ((((1.0 - _861) * (_856 + 2.0)) * exp2(log2(isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0))) * (_856 + 1.0))) + _861) * _783;
        float _871 = _751 * 0.5;
        float _872 = _761 * 0.5;
        float _873 = _771 * 0.5;
        float _874 = dot(vec3(_871, _872, _873), vec3(_871, _872, _873));
        float _879 = (_874 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_874);
        float _887 = (dot(vec3(_374, _375, _376), vec3(_879 * _871, _879 * _872, _879 * _873)) + 1.0) * 0.5;
        float _3493 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
        float _896 = sqrt(((_872 * _872) + (_871 * _871)) + (_873 * _873)) / (_784 + 9.9999997473787516355514526367188e-06);
        float _3504 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
        float _897 = isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0));
        float _898 = _897 * 2.0;
        float _902 = (1.0 - _897) / (_897 + 1.0);
        float _3515 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
        float _903 = isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0));
        float _912 = ((((1.0 - _903) * (_898 + 2.0)) * exp2(log2(isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0))) * (_898 + 1.0))) + _903) * _784;
        _920 = _751;
        _922 = _750;
        _923 = _749;
        _924 = _761;
        _925 = _760;
        _926 = _759;
        _927 = _771;
        _928 = _770;
        _929 = _769;
        _930 = _784;
        _931 = _783;
        _932 = _782;
        _933 = cbModelParam._m0[36u].z * (isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0)));
        _934 = cbModelParam._m0[36u].z * (isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0)));
        _935 = cbModelParam._m0[36u].z * (isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0)));
    }
    else
    {
        _920 = _921;
        _922 = _921;
        _923 = _921;
        _924 = _921;
        _925 = _921;
        _926 = _921;
        _927 = _921;
        _928 = _921;
        _929 = _921;
        _930 = _921;
        _931 = _921;
        _932 = _921;
        _933 = 0.0;
        _934 = 0.0;
        _935 = 0.0;
    }
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _961 = fma(_618, cbModelParam._m0[30u].z, fma(_614, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _610));
        float _965 = fma(_618, cbModelParam._m0[31u].z, fma(_614, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _610));
        float _969 = fma(_618, cbModelParam._m0[32u].z, fma(_614, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _610));
        float _992 = _610 + _374;
        float _993 = _614 + _375;
        float _994 = _618 + _376;
        float _1004 = fma(_994, cbModelParam._m0[30u].z, fma(_993, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _992)) - _961;
        float _1005 = fma(_994, cbModelParam._m0[31u].z, fma(_993, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _992)) - _965;
        float _1006 = fma(_994, cbModelParam._m0[32u].z, fma(_993, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _992)) - _969;
        float _1010 = inversesqrt(dot(vec3(_1004, _1005, _1006), vec3(_1004, _1005, _1006)));
        float _1023 = ((_1010 * _1004) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_961 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1024 = ((_1010 * _1005) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_965 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1025 = ((_1010 * _1006) / cbModelParam._m0[35u].z) + ((((((_969 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1027 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1023, _1024, _1025), 0.0);
        vec4 _1034 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1023, _1024, _1025), 0.0);
        vec4 _1041 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1023, _1024, _1025), 0.0);
        vec4 _1048 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1023, _1024, _1025), 0.0);
        float _1060 = exp2((_1027.w + (-0.5)) * 20.0) * 2.0;
        float _1061 = _1060 * (_1027.x + (-0.5));
        float _1062 = _1060 * (_1027.y + (-0.5));
        float _1063 = _1060 * (_1027.z + (-0.5));
        float _1070 = exp2((_1034.w + (-0.5)) * 20.0) * 2.0;
        float _1071 = _1070 * (_1034.x + (-0.5));
        float _1072 = _1070 * (_1034.y + (-0.5));
        float _1073 = _1070 * (_1034.z + (-0.5));
        float _1080 = exp2((_1041.w + (-0.5)) * 20.0) * 2.0;
        float _1081 = _1080 * (_1041.x + (-0.5));
        float _1082 = _1080 * (_1041.y + (-0.5));
        float _1083 = _1080 * (_1041.z + (-0.5));
        float _1090 = exp2((_1048.w + (-0.5)) * 20.0) * 2.0;
        float _1091 = _1090 * (_1048.x + (-0.5));
        float _1092 = _1090 * (_1048.y + (-0.5));
        float _1093 = _1090 * (_1048.z + (-0.5));
        float _1094 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1095 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1096 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1097 = _1061 * 0.5;
        float _1098 = _1071 * 0.5;
        float _1099 = _1081 * 0.5;
        float _1100 = dot(vec3(_1097, _1098, _1099), vec3(_1097, _1098, _1099));
        float _1105 = (_1100 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1100);
        float _1113 = (dot(vec3(_374, _375, _376), vec3(_1105 * _1097, _1105 * _1098, _1105 * _1099)) + 1.0) * 0.5;
        float _3556 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1122 = sqrt(((_1098 * _1098) + (_1097 * _1097)) + (_1099 * _1099)) / (_1094 + 9.9999997473787516355514526367188e-06);
        float _3567 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1123 = isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0));
        float _1124 = _1123 * 2.0;
        float _1128 = (1.0 - _1123) / (_1123 + 1.0);
        float _3578 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1129 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
        float _1138 = ((((1.0 - _1129) * (_1124 + 2.0)) * exp2(log2(isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0))) * (_1124 + 1.0))) + _1129) * _1094;
        float _1139 = _1062 * 0.5;
        float _1140 = _1072 * 0.5;
        float _1141 = _1082 * 0.5;
        float _1142 = dot(vec3(_1139, _1140, _1141), vec3(_1139, _1140, _1141));
        float _1147 = (_1142 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1142);
        float _1155 = (dot(vec3(_374, _375, _376), vec3(_1147 * _1139, _1147 * _1140, _1147 * _1141)) + 1.0) * 0.5;
        float _3589 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1164 = sqrt(((_1140 * _1140) + (_1139 * _1139)) + (_1141 * _1141)) / (_1095 + 9.9999997473787516355514526367188e-06);
        float _3600 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1165 = isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0));
        float _1166 = _1165 * 2.0;
        float _1170 = (1.0 - _1165) / (_1165 + 1.0);
        float _3611 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1171 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
        float _1180 = ((((1.0 - _1171) * (_1166 + 2.0)) * exp2(log2(isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0))) * (_1166 + 1.0))) + _1171) * _1095;
        float _1181 = _1063 * 0.5;
        float _1182 = _1073 * 0.5;
        float _1183 = _1083 * 0.5;
        float _1184 = dot(vec3(_1181, _1182, _1183), vec3(_1181, _1182, _1183));
        float _1189 = (_1184 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1184);
        float _1197 = (dot(vec3(_374, _375, _376), vec3(_1189 * _1181, _1189 * _1182, _1189 * _1183)) + 1.0) * 0.5;
        float _3622 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1206 = sqrt(((_1182 * _1182) + (_1181 * _1181)) + (_1183 * _1183)) / (_1096 + 9.9999997473787516355514526367188e-06);
        float _3633 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1207 = isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0));
        float _1208 = _1207 * 2.0;
        float _1212 = (1.0 - _1207) / (_1207 + 1.0);
        float _3644 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1213 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
        float _1222 = ((((1.0 - _1213) * (_1208 + 2.0)) * exp2(log2(isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0))) * (_1208 + 1.0))) + _1213) * _1096;
        _1230 = _1063;
        _1231 = _1062;
        _1232 = _1061;
        _1233 = _1073;
        _1234 = _1072;
        _1235 = _1071;
        _1236 = _1083;
        _1237 = _1082;
        _1238 = _1081;
        _1239 = _1096;
        _1240 = _1095;
        _1241 = _1094;
        _1242 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0)));
        _1243 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0)));
        _1244 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0)));
    }
    else
    {
        _1230 = _921;
        _1231 = _921;
        _1232 = _921;
        _1233 = _921;
        _1234 = _921;
        _1235 = _921;
        _1236 = _921;
        _1237 = _921;
        _1238 = _921;
        _1239 = _921;
        _1240 = _921;
        _1241 = _921;
        _1242 = 0.0;
        _1243 = 0.0;
        _1244 = 0.0;
    }
    float _1254 = (cbModelParam._m0[1u].x * (_1242 - _933)) + _933;
    float _1255 = (cbModelParam._m0[1u].x * (_1243 - _934)) + _934;
    float _1256 = (cbModelParam._m0[1u].x * (_1244 - _935)) + _935;
    float _1277 = fma(_1256, cbSceneParam._m0[89u].z, fma(_1255, cbSceneParam._m0[89u].y, _1254 * cbSceneParam._m0[89u].x));
    float _1280 = fma(_1256, cbSceneParam._m0[90u].z, fma(_1255, cbSceneParam._m0[90u].y, _1254 * cbSceneParam._m0[90u].x));
    float _1283 = fma(_1256, cbSceneParam._m0[91u].z, fma(_1255, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1254));
    float _1298 = _554 * 0.5;
    float _1299 = _555 * 0.5;
    float _1300 = _556 * 0.5;
    float _1301 = dot(vec4(_1298, _1299, _1300, 1.0), vec4(_1232, _1235, _1238, _1241));
    float _1304 = dot(vec4(_1298, _1299, _1300, 1.0), vec4(_1231, _1234, _1237, _1240));
    float _1307 = dot(vec4(_1298, _1299, _1300, 1.0), vec4(_1230, _1233, _1236, _1239));
    float _1341;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1314 = dot(vec4(_1298, _1299, _1300, 1.0), vec4(_920, _924, _927, _930));
        float _1318 = dot(vec4(_1298, _1299, _1300, 1.0), vec4(_922, _925, _928, _931));
        float _1322 = dot(vec4(_1298, _1299, _1300, 1.0), vec4(_923, _926, _929, _932));
        float _1329 = dot(vec4(cbModelParam._m0[39u]), vec4(_1298, _1299, _1300, 1.0));
        _1341 = dot(vec3(isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0)), isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0)), isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1329) ? 0.0 : (isnan(0.0) ? _1329 : max(0.0, _1329))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1341 = 1.0;
    }
    float _1352;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1343 = dot(vec4(cbModelParam._m0[40u]), vec4(_1298, _1299, _1300, 1.0));
        _1352 = dot(vec3(isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0)), isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0)), isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1343) ? 0.0 : (isnan(0.0) ? _1343 : max(0.0, _1343))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1352 = 1.0;
    }
    float _1356 = (_1352 * cbModelParam._m0[1u].x) + (_1341 * (1.0 - cbModelParam._m0[1u].x));
    float _1366 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _377);
    float _1367 = isnan(_1366) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1366 : min(cbModelParam._m0[25u].z, _1366));
    float _1448;
    float _1450;
    float _1452;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1415 = fma(_618, cbModelParam._m0[13u].z, fma(_614, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _610)) + cbModelParam._m0[13u].w;
        float _1419 = fma(_618, cbModelParam._m0[14u].z, fma(_614, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _610)) + cbModelParam._m0[14u].w;
        float _1423 = fma(_618, cbModelParam._m0[15u].z, fma(_614, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _610)) + cbModelParam._m0[15u].w;
        float _1426 = fma(_556, cbModelParam._m0[13u].z, fma(_555, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _554));
        float _1429 = fma(_556, cbModelParam._m0[14u].z, fma(_555, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _554));
        float _1432 = fma(_556, cbModelParam._m0[15u].z, fma(_555, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _554));
        float _1460;
        if (_1426 > 0.0)
        {
            _1460 = abs((1.0 - _1415) / _1426);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1426 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1415 + 1.0) / _1426);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1460 = frontier_phi_16_14_ladder;
        }
        float _1688;
        if (_1429 > 0.0)
        {
            _1688 = abs((1.0 - _1419) / _1429);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1429 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1419 + 1.0) / _1429);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1688 = frontier_phi_25_21_ladder;
        }
        float _1945;
        if (_1432 > 0.0)
        {
            _1945 = abs((1.0 - _1423) / _1432);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1432 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1423 + 1.0) / _1432);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1945 = frontier_phi_37_32_ladder;
        }
        float _1947 = isnan(_1688) ? _1460 : (isnan(_1460) ? _1688 : min(_1460, _1688));
        float _1948 = isnan(_1945) ? _1947 : (isnan(_1947) ? _1945 : min(_1947, _1945));
        float _1952 = (_1948 * _1426) + _1415;
        float _1953 = (_1948 * _1429) + _1419;
        float _1954 = (_1948 * _1432) + _1423;
        float _1955 = _1948 * 9.9999997473787516355514526367188e-05;
        float _1957 = (-1.0) - _1955;
        float _1959 = _1955 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1954 > _1959) || ((_1954 < _1957) || ((_1953 > _1959) || ((_1953 < _1957) || ((_1952 < _1957) || (_1952 > _1959))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2082 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1954, cbModelParam._m0[9u].z, fma(_1953, cbModelParam._m0[9u].y, _1952 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1954, cbModelParam._m0[10u].z, fma(_1953, cbModelParam._m0[10u].y, _1952 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1954, cbModelParam._m0[11u].z, fma(_1953, cbModelParam._m0[11u].y, _1952 * cbModelParam._m0[11u].x))), _1367);
            frontier_phi_15_37_ladder = _2082.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2082.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2082.x * cbModelParam._m0[1u].y;
        }
        _1448 = frontier_phi_15_37_ladder_2;
        _1450 = frontier_phi_15_37_ladder_1;
        _1452 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1436 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_554, _555, _556), _1367);
        _1448 = _1436.x * cbModelParam._m0[1u].y;
        _1450 = _1436.y * cbModelParam._m0[1u].y;
        _1452 = _1436.z * cbModelParam._m0[1u].y;
    }
    float _1456 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _377);
    float _1457 = isnan(_1456) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1456 : min(cbModelParam._m0[25u].w, _1456));
    float _1550;
    float _1552;
    float _1554;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1514 = fma(_618, cbModelParam._m0[21u].z, fma(_614, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _610)) + cbModelParam._m0[21u].w;
        float _1518 = fma(_618, cbModelParam._m0[22u].z, fma(_614, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _610)) + cbModelParam._m0[22u].w;
        float _1522 = fma(_618, cbModelParam._m0[23u].z, fma(_614, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _610)) + cbModelParam._m0[23u].w;
        float _1525 = fma(_556, cbModelParam._m0[21u].z, fma(_555, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _554));
        float _1528 = fma(_556, cbModelParam._m0[22u].z, fma(_555, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _554));
        float _1531 = fma(_556, cbModelParam._m0[23u].z, fma(_555, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _554));
        float _1693;
        if (_1525 > 0.0)
        {
            _1693 = abs((1.0 - _1514) / _1525);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1525 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1514 + 1.0) / _1525);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1693 = frontier_phi_27_23_ladder;
        }
        float _1972;
        if (_1528 > 0.0)
        {
            _1972 = abs((1.0 - _1518) / _1528);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1528 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1518 + 1.0) / _1528);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1972 = frontier_phi_39_34_ladder;
        }
        float _2185;
        if (_1531 > 0.0)
        {
            _2185 = abs((1.0 - _1522) / _1531);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1531 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1522 + 1.0) / _1531);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2185 = frontier_phi_48_45_ladder;
        }
        float _2187 = isnan(_1972) ? _1693 : (isnan(_1693) ? _1972 : min(_1693, _1972));
        float _2188 = isnan(_2185) ? _2187 : (isnan(_2187) ? _2185 : min(_2187, _2185));
        float _2192 = (_2188 * _1525) + _1514;
        float _2193 = (_2188 * _1528) + _1518;
        float _2194 = (_2188 * _1531) + _1522;
        float _2195 = _2188 * 9.9999997473787516355514526367188e-05;
        float _2196 = (-1.0) - _2195;
        float _2198 = _2195 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2194 > _2198) || ((_2194 < _2196) || ((_2193 > _2198) || ((_2193 < _2196) || ((_2192 < _2196) || (_2192 > _2198))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2392 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2194, cbModelParam._m0[17u].z, fma(_2193, cbModelParam._m0[17u].y, _2192 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2194, cbModelParam._m0[18u].z, fma(_2193, cbModelParam._m0[18u].y, _2192 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2194, cbModelParam._m0[19u].z, fma(_2193, cbModelParam._m0[19u].y, _2192 * cbModelParam._m0[19u].x))), _1457);
            frontier_phi_24_48_ladder = _2392.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2392.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2392.x * cbModelParam._m0[1u].z;
        }
        _1550 = frontier_phi_24_48_ladder_2;
        _1552 = frontier_phi_24_48_ladder_1;
        _1554 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1534 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_554, _555, _556), _1457);
        _1550 = _1534.x * cbModelParam._m0[1u].z;
        _1552 = _1534.y * cbModelParam._m0[1u].z;
        _1554 = _1534.z * cbModelParam._m0[1u].z;
    }
    float _1567 = (((_581 * _531) + _582) * _546) * ((cbModelParam._m0[1u].w * (_1550 - _1448)) + _1448);
    float _1569 = (((_581 * _533) + _582) * _546) * ((cbModelParam._m0[1u].w * (_1552 - _1450)) + _1450);
    float _1571 = (((_581 * _534) + _582) * _546) * ((cbModelParam._m0[1u].w * (_1554 - _1452)) + _1452);
    float _1574 = fma(_1571, cbSceneParam._m0[89u].z, fma(_1569, cbSceneParam._m0[89u].y, _1567 * cbSceneParam._m0[89u].x));
    float _1577 = fma(_1571, cbSceneParam._m0[90u].z, fma(_1569, cbSceneParam._m0[90u].y, _1567 * cbSceneParam._m0[90u].x));
    float _1580 = fma(_1571, cbSceneParam._m0[91u].z, fma(_1569, cbSceneParam._m0[91u].y, _1567 * cbSceneParam._m0[91u].x));
    vec4 _1588 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_464, _465));
    float _1590 = _1588.w;
    float _1602 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1590);
    float _1603 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1590);
    float _1604 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1590);
    uvec4 _1608 = floatBitsToUint(cbInstanceData._m0[_505 + 5u]);
    uint _1610 = _1608.x * 14u;
    uint _1611 = _1610 + 13u;
    float _1618 = _546 + (-1.0);
    float _1623 = (cbLight._m0[_1611].x * _1618) + 1.0;
    float _1624 = (cbLight._m0[_1611].y * _1618) + 1.0;
    float _1625 = (cbLight._m0[_1611].z * _1618) + 1.0;
    float _1626 = (cbLight._m0[_1611].w * _1618) + 1.0;
    uint _1627 = _1610 + 5u;
    float _1633 = isnan(1.0) ? _1624 : (isnan(_1624) ? 1.0 : min(_1624, 1.0));
    uint _1637 = _1610 + 4u;
    float _1647 = isnan(1.0) ? _1623 : (isnan(_1623) ? 1.0 : min(_1623, 1.0));
    uint _1651 = _1610 | 1u;
    float _1662 = dot(vec3(cbLight._m0[_1610].xyz), vec3(_374, _375, _376));
    float _1665 = dot(vec3(cbLight._m0[_1651].xyz), vec3(_374, _375, _376));
    float _3780 = isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0));
    float _3791 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
    float _1670 = (isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0))) * 0.3183098733425140380859375;
    float _1672 = (isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0))) * 0.3183098733425140380859375;
    float _1679 = ((cbLight._m0[_1627].x * _1633) * _1672) + (((cbLight._m0[_1637].x * _1602) * _1647) * _1670);
    float _1680 = ((_1633 * cbLight._m0[_1627].y) * _1672) + (((cbLight._m0[_1637].y * _1603) * _1647) * _1670);
    float _1681 = ((_1633 * cbLight._m0[_1627].z) * _1672) + (((cbLight._m0[_1637].z * _1604) * _1647) * _1670);
    uvec4 _1685 = floatBitsToUint(cbLight._m0[_1610 + 12u]);
    bool _1687 = _1685.x == 0u;
    float _1698;
    float _1700;
    float _1702;
    if (_1687)
    {
        _1698 = _1679;
        _1700 = _1680;
        _1702 = _1681;
    }
    else
    {
        uint _1706 = _1610 + 6u;
        float _1722 = (dot(vec3(cbLight._m0[_1610 + 2u].xyz), vec3(_374, _375, _376)) * 0.5) + 0.5;
        float _1723 = _1722 * _1722;
        float _3802 = isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0));
        float _1724 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
        float _1725 = isnan(1.0) ? _1625 : (isnan(_1625) ? 1.0 : min(_1625, 1.0));
        _1698 = (((cbLight._m0[_1706].x * 0.3183098733425140380859375) * _1724) * _1725) + _1679;
        _1700 = (((cbLight._m0[_1706].y * 0.3183098733425140380859375) * _1724) * _1725) + _1680;
        _1702 = (((cbLight._m0[_1706].z * 0.3183098733425140380859375) * _1724) * _1725) + _1681;
    }
    bool _1705 = _1685.y == 0u;
    float _1743;
    float _1745;
    float _1747;
    if (_1705)
    {
        _1743 = _1698;
        _1745 = _1700;
        _1747 = _1702;
    }
    else
    {
        uint _1916 = _1610 + 7u;
        float _1932 = (dot(vec3(cbLight._m0[_1610 + 3u].xyz), vec3(_374, _375, _376)) * 0.5) + 0.5;
        float _1933 = _1932 * _1932;
        float _3818 = isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0));
        float _1934 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
        float _1935 = isnan(1.0) ? _1626 : (isnan(_1626) ? 1.0 : min(_1626, 1.0));
        _1743 = (((cbLight._m0[_1916].x * 0.3183098733425140380859375) * _1934) * _1935) + _1698;
        _1745 = (((cbLight._m0[_1916].y * 0.3183098733425140380859375) * _1934) * _1935) + _1700;
        _1747 = (((cbLight._m0[_1916].z * 0.3183098733425140380859375) * _1934) * _1935) + _1702;
    }
    uint _1750 = _1610 + 8u;
    float _1763 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1610].w)) * _377) * 0.949999988079071044921875);
    float _1764 = _1763 * _1763;
    float _1765 = cbLight._m0[_1610].x + _456;
    float _1766 = cbLight._m0[_1610].y + _457;
    float _1767 = cbLight._m0[_1610].z + _458;
    float _1771 = inversesqrt(dot(vec3(_1765, _1766, _1767), vec3(_1765, _1766, _1767)));
    float _1772 = _1771 * _1765;
    float _1773 = _1771 * _1766;
    float _1774 = _1771 * _1767;
    float _1775 = dot(vec3(_374, _375, _376), vec3(cbLight._m0[_1610].xyz));
    float _3834 = isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0));
    float _1778 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
    float _3845 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _1779 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
    float _1780 = dot(vec3(_374, _375, _376), vec3(_1772, _1773, _1774));
    float _3856 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
    float _1783 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
    float _1784 = dot(vec3(cbLight._m0[_1610].xyz), vec3(_1772, _1773, _1774));
    float _3867 = isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0));
    float _1788 = _1764 * _1764;
    float _1792 = ((_1783 * _1783) * (_1788 + (-1.0))) + 1.0;
    float _1800 = exp2(log2(1.0 - (isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0)))) * 5.0);
    float _1801 = 0.959999978542327880859375 - _528;
    float _1803 = 0.959999978542327880859375 - _529;
    float _1804 = 0.959999978542327880859375 - _530;
    float _1811 = 1.0 - _1764;
    float _1822 = (0.5 / (((_1779 * ((_1778 * _1811) + _1764)) + 9.9999999392252902907785028219223e-09) + (((_1779 * _1811) + _1764) * _1778))) * _1778;
    float _3878 = isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0));
    float _1824 = (isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0))) * (_1788 / ((_1792 * _1792) * 3.141590118408203125));
    uint _1838 = _1610 + 9u;
    float _1849 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1651].w)) * _377) * 0.949999988079071044921875);
    float _1850 = _1849 * _1849;
    float _1851 = cbLight._m0[_1651].x + _456;
    float _1852 = cbLight._m0[_1651].y + _457;
    float _1853 = cbLight._m0[_1651].z + _458;
    float _1857 = inversesqrt(dot(vec3(_1851, _1852, _1853), vec3(_1851, _1852, _1853)));
    float _1858 = _1857 * _1851;
    float _1859 = _1857 * _1852;
    float _1860 = _1857 * _1853;
    float _1861 = dot(vec3(_374, _375, _376), vec3(cbLight._m0[_1651].xyz));
    float _3889 = isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0));
    float _1864 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
    float _1865 = dot(vec3(_374, _375, _376), vec3(_1858, _1859, _1860));
    float _3900 = isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0));
    float _1868 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
    float _1869 = dot(vec3(cbLight._m0[_1651].xyz), vec3(_1858, _1859, _1860));
    float _3911 = isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0));
    float _1873 = _1850 * _1850;
    float _1877 = ((_1868 * _1868) * (_1873 + (-1.0))) + 1.0;
    float _1884 = exp2(log2(1.0 - (isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0)))) * 5.0);
    float _1891 = 1.0 - _1850;
    float _1901 = (0.5 / (((_1779 * ((_1864 * _1891) + _1850)) + 9.9999999392252902907785028219223e-09) + (((_1779 * _1891) + _1850) * _1864))) * _1864;
    float _3922 = isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0));
    float _1903 = (isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0))) * (_1873 / ((_1877 * _1877) * 3.141590118408203125));
    float _1913 = (((((_1884 * _1801) + _531) * cbLight._m0[_1838].x) * _1903) * _1633) + ((((cbLight._m0[_1750].x * _1602) * ((_1800 * _1801) + _531)) * _1824) * _1647);
    float _1914 = (((((_1884 * _1803) + _533) * cbLight._m0[_1838].y) * _1903) * _1633) + ((((cbLight._m0[_1750].y * _1603) * ((_1800 * _1803) + _533)) * _1824) * _1647);
    float _1915 = (((((_1884 * _1804) + _534) * cbLight._m0[_1838].z) * _1903) * _1633) + ((((cbLight._m0[_1750].z * _1604) * ((_1800 * _1804) + _534)) * _1824) * _1647);
    float _1977;
    float _1979;
    float _1981;
    if (_1687)
    {
        _1977 = _1913;
        _1979 = _1914;
        _1981 = _1915;
    }
    else
    {
        uint _1983 = _1610 + 2u;
        uint _1987 = _1610 + 10u;
        float _2001 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1983].w)) * _377) * 0.949999988079071044921875);
        float _2002 = _2001 * _2001;
        float _2003 = cbLight._m0[_1983].x + _456;
        float _2004 = cbLight._m0[_1983].y + _457;
        float _2005 = cbLight._m0[_1983].z + _458;
        float _2009 = inversesqrt(dot(vec3(_2003, _2004, _2005), vec3(_2003, _2004, _2005)));
        float _2010 = _2009 * _2003;
        float _2011 = _2009 * _2004;
        float _2012 = _2009 * _2005;
        float _2013 = dot(vec3(_374, _375, _376), vec3(cbLight._m0[_1983].xyz));
        float _3933 = isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0));
        float _2016 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
        float _2017 = dot(vec3(_374, _375, _376), vec3(_2010, _2011, _2012));
        float _3944 = isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0));
        float _2020 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
        float _2021 = dot(vec3(cbLight._m0[_1983].xyz), vec3(_2010, _2011, _2012));
        float _3955 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
        float _2025 = _2002 * _2002;
        float _2029 = ((_2020 * _2020) * (_2025 + (-1.0))) + 1.0;
        float _2036 = exp2(log2(1.0 - (isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0)))) * 5.0);
        float _2043 = 1.0 - _2002;
        float _2053 = (0.5 / (((_1779 * ((_2016 * _2043) + _2002)) + 9.9999999392252902907785028219223e-09) + (((_1779 * _2043) + _2002) * _2016))) * _2016;
        float _3966 = isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0));
        float _2055 = (isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0))) * (_2025 / ((_2029 * _2029) * 3.141590118408203125));
        float _2056 = isnan(1.0) ? _1625 : (isnan(_1625) ? 1.0 : min(_1625, 1.0));
        _1977 = (((((_2036 * _1801) + _531) * cbLight._m0[_1987].x) * _2055) * _2056) + _1913;
        _1979 = (((((_2036 * _1803) + _533) * cbLight._m0[_1987].y) * _2055) * _2056) + _1914;
        _1981 = (((((_2036 * _1804) + _534) * cbLight._m0[_1987].z) * _2055) * _2056) + _1915;
    }
    float _2091;
    float _2093;
    float _2095;
    if (_1705)
    {
        _2091 = _1977;
        _2093 = _1979;
        _2095 = _1981;
    }
    else
    {
        uint _2102 = _1610 + 3u;
        uint _2106 = _1610 + 11u;
        float _2120 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2102].w)) * _377) * 0.949999988079071044921875);
        float _2121 = _2120 * _2120;
        float _2122 = cbLight._m0[_2102].x + _456;
        float _2123 = cbLight._m0[_2102].y + _457;
        float _2124 = cbLight._m0[_2102].z + _458;
        float _2128 = inversesqrt(dot(vec3(_2122, _2123, _2124), vec3(_2122, _2123, _2124)));
        float _2129 = _2128 * _2122;
        float _2130 = _2128 * _2123;
        float _2131 = _2128 * _2124;
        float _2132 = dot(vec3(_374, _375, _376), vec3(cbLight._m0[_2102].xyz));
        float _3982 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
        float _2135 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
        float _2136 = dot(vec3(_374, _375, _376), vec3(_2129, _2130, _2131));
        float _3993 = isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0));
        float _2139 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
        float _2140 = dot(vec3(cbLight._m0[_2102].xyz), vec3(_2129, _2130, _2131));
        float _4004 = isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0));
        float _2144 = _2121 * _2121;
        float _2148 = ((_2139 * _2139) * (_2144 + (-1.0))) + 1.0;
        float _2155 = exp2(log2(1.0 - (isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0)))) * 5.0);
        float _2162 = 1.0 - _2121;
        float _2172 = (0.5 / (((_1779 * ((_2135 * _2162) + _2121)) + 9.9999999392252902907785028219223e-09) + (((_1779 * _2162) + _2121) * _2135))) * _2135;
        float _4015 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
        float _2174 = (isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0))) * (_2144 / ((_2148 * _2148) * 3.141590118408203125));
        float _2175 = isnan(1.0) ? _1626 : (isnan(_1626) ? 1.0 : min(_1626, 1.0));
        _2091 = (((((_2155 * _1801) + _531) * cbLight._m0[_2106].x) * _2174) * _2175) + _1977;
        _2093 = (((((_2155 * _1803) + _533) * cbLight._m0[_2106].y) * _2174) * _2175) + _1979;
        _2095 = (((((_2155 * _1804) + _534) * cbLight._m0[_2106].z) * _2174) * _2175) + _1981;
    }
    float _2309;
    float _2311;
    float _2313;
    float _2315;
    float _2317;
    float _2319;
    if (_1608.y == 0u)
    {
        float _2250 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2251 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2250;
        float _2252 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2250;
        float _2253 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2250;
        uvec4 _2265 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2266 = _2265.x;
        uint _2277 = uint((float(_2265.y) * floor(float(uint(cbSceneParam._m0[85u].y * _465) / _2266))) + floor(float(uint(cbSceneParam._m0[85u].x * _464) / _2266)));
        float _2287 = (log2(_2253 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2288 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
        uint _2291 = uint(isnan(14.0) ? _2288 : (isnan(_2288) ? 14.0 : min(_2288, 14.0)));
        uvec4 _2296 = texelFetch(g_lightClusterGridBuffer, int(((_2291 << 2u) + (_2277 << 6u)) >> 2u));
        uint _2297 = _2296.x;
        uint _2298 = _2265.z;
        float _2397;
        float _2399;
        float _2401;
        float _2403;
        float _2405;
        float _2407;
        if (((((1u << ((_2298 >> 4u) & 15u)) + 4294967295u) & _2297) == 0u) || ((_2298 & 240u) == 0u))
        {
            _2397 = 0.0;
            _2399 = 0.0;
            _2401 = 0.0;
            _2403 = 0.0;
            _2405 = 0.0;
            _2407 = 0.0;
        }
        else
        {
            float _2398;
            float _2400;
            float _2402;
            float _2404;
            float _2406;
            float _2408;
            float _2541 = 0.0;
            float _2542 = 0.0;
            float _2543 = 0.0;
            float _2544 = 0.0;
            float _2545 = 0.0;
            float _2546 = 0.0;
            uint _2547 = 0u;
            uint _2556;
            bool _2557;
            for (;;)
            {
                _2556 = texelFetch(g_lightClassification, int((((_2291 << 5u) + (_2277 << 9u)) + (_2547 << 2u)) >> 2u)).x;
                _2557 = _2556 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2557)
                {
                    frontier_phi_63_pred = _2546;
                    frontier_phi_63_pred_1 = _2545;
                    frontier_phi_63_pred_2 = _2544;
                    frontier_phi_63_pred_3 = _2543;
                    frontier_phi_63_pred_4 = _2542;
                    frontier_phi_63_pred_5 = _2541;
                }
                else
                {
                    float _2665;
                    float _2666;
                    float _2667;
                    float _2668;
                    float _2669;
                    float _2670;
                    uint _2671;
                    _2665 = _2541;
                    _2666 = _2542;
                    _2667 = _2543;
                    _2668 = _2544;
                    _2669 = _2545;
                    _2670 = _2546;
                    _2671 = _2556;
                    float _2597;
                    float _2598;
                    float _2599;
                    float _2600;
                    float _2601;
                    float _2602;
                    for (;;)
                    {
                        uint _2675 = uint(findLSB(_2671)) + (_2547 << 5u);
                        uint _2672 = (_2671 + 4294967295u) & _2671;
                        uint _2677 = _2675 * 48u;
                        vec4 _2691 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2677)).x, texelFetch(g_PointLightRenderingBuffer, int(_2677 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2677 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2677 + 3u)).x));
                        uint _2697 = (_2675 * 48u) + 4u;
                        vec4 _2710 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2697)).x, texelFetch(g_PointLightRenderingBuffer, int(_2697 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2697 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2697 + 3u)).x));
                        uint _2716 = (_2675 * 48u) + 8u;
                        vec3 _2727 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2716)).x, texelFetch(g_PointLightRenderingBuffer, int(_2716 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2716 + 2u)).x));
                        float _2731 = _2691.x - _2251;
                        float _2732 = _2691.y - _2252;
                        float _2733 = _2691.z - _2253;
                        float _2734 = dot(vec3(_2731, _2732, _2733), vec3(_2731, _2732, _2733));
                        float _2737 = inversesqrt(_2734);
                        float _2738 = _2737 * _2731;
                        float _2739 = _2737 * _2732;
                        float _2740 = _2737 * _2733;
                        float _2741 = dot(vec3(_486, _489, _492), vec3(_2738, _2739, _2740));
                        float _2746 = 1.0 - (_2734 * _2691.w);
                        float _4041 = isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : max(_2746, 0.0));
                        float _2747 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
                        float _2748 = sqrt(_2734) * _2710.w;
                        float _2751 = 1.39999997615814208984375 / (_2748 + 1.39999997615814208984375);
                        float _2752 = _2751 * _2751;
                        float _2755 = ((1.0 - _2752) * _2741) + _2752;
                        float _2758 = _2748 * _2748;
                        float _2762 = ((isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0))) * _2747) / ((_2758 * 0.699999988079071044921875) + 1.0);
                        float _2766 = (-0.0) - _2251;
                        float _2767 = (-0.0) - _2252;
                        float _2768 = (-0.0) - _2253;
                        float _2772 = inversesqrt(dot(vec3(_2766, _2767, _2768), vec3(_2766, _2767, _2768)));
                        float _2773 = _2772 * _2766;
                        float _2774 = _2772 * _2767;
                        float _2775 = _2772 * _2768;
                        float _2783 = exp2(log2(1.0 / ((_2758 * 3.5) + 5.0)) * 0.25);
                        float _2784 = 1.0 - _562;
                        float _2791 = sqrt(1.0 - ((1.0 - (_2784 * _2784)) * (1.0 - (_2783 * _2783))));
                        float _2792 = _2791 * _2791;
                        float _2793 = _2792 * _2792;
                        float _2794 = _2773 + _2738;
                        float _2795 = _2774 + _2739;
                        float _2796 = _2775 + _2740;
                        float _2800 = inversesqrt(dot(vec3(_2794, _2795, _2796), vec3(_2794, _2795, _2796)));
                        float _2804 = dot(vec3(_486, _489, _492), vec3(_2773, _2774, _2775));
                        float _4057 = isnan(0.0) ? _2804 : (isnan(_2804) ? 0.0 : max(_2804, 0.0));
                        float _2807 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
                        float _2808 = dot(vec3(_486, _489, _492), vec3(_2800 * _2794, _2800 * _2795, _2800 * _2796));
                        float _4068 = isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0));
                        float _2811 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
                        float _2815 = ((_2811 * _2811) * (_2793 + (-1.0))) + 1.0;
                        float _2816 = _2751 * _2792;
                        float _2817 = _2816 * _2816;
                        float _2820 = ((1.0 - _2817) * _2741) + _2817;
                        float _4079 = isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0));
                        float _2821 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
                        float _2822 = 1.0 - _2792;
                        float _2832 = (0.5 / (((_2821 * ((_2807 * _2822) + _2792)) + 9.9999999392252902907785028219223e-09) + (((_2821 * _2822) + _2792) * _2807))) * _2821;
                        float _4090 = isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : max(_2832, 0.0));
                        float _2843 = (((_2793 * 3.1415927410125732421875) * (isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0)))) / ((_2815 * _2815) * ((_2758 * 2.1991131305694580078125) + 3.141590118408203125))) * _2747;
                        _2600 = (_2762 * _2710.x) + _2668;
                        _2601 = (_2762 * _2710.y) + _2669;
                        _2602 = (_2762 * _2710.z) + _2670;
                        _2597 = (_2843 * _2727.x) + _2665;
                        _2598 = (_2843 * _2727.y) + _2666;
                        _2599 = (_2843 * _2727.z) + _2667;
                        if (_2672 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2665 = _2597;
                            _2666 = _2598;
                            _2667 = _2599;
                            _2668 = _2600;
                            _2669 = _2601;
                            _2670 = _2602;
                            _2671 = _2672;
                        }
                    }
                    frontier_phi_63_pred = _2602;
                    frontier_phi_63_pred_1 = _2601;
                    frontier_phi_63_pred_2 = _2600;
                    frontier_phi_63_pred_3 = _2599;
                    frontier_phi_63_pred_4 = _2598;
                    frontier_phi_63_pred_5 = _2597;
                }
                _2408 = frontier_phi_63_pred;
                _2406 = frontier_phi_63_pred_1;
                _2404 = frontier_phi_63_pred_2;
                _2402 = frontier_phi_63_pred_3;
                _2400 = frontier_phi_63_pred_4;
                _2398 = frontier_phi_63_pred_5;
                uint _2548 = _2547 + 1u;
                if (_2548 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2541 = _2398;
                    _2542 = _2400;
                    _2543 = _2402;
                    _2544 = _2404;
                    _2545 = _2406;
                    _2546 = _2408;
                    _2547 = _2548;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2397 = _2398;
            _2399 = _2400;
            _2401 = _2402;
            _2403 = _2404;
            _2405 = _2406;
            _2407 = _2408;
        }
        uvec4 _2411 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2412 = _2411.z;
        uint _2414 = (_2412 >> 8u) & 15u;
        float _2509;
        float _2511;
        float _2513;
        float _2515;
        float _2517;
        float _2519;
        if (((4294967295u << _2414) & _2297) == 0u)
        {
            _2509 = _2397;
            _2511 = _2399;
            _2513 = _2401;
            _2515 = _2403;
            _2517 = _2405;
            _2519 = _2407;
        }
        else
        {
            float _2534 = inversesqrt(dot(vec3(_2251, _2252, _2253), vec3(_2251, _2252, _2253)));
            float _2535 = _2534 * _2251;
            float _2536 = _2534 * _2252;
            float _2537 = _2534 * _2253;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2414 < ((_2412 >> 12u) & 15u))
            {
                float _2510;
                float _2512;
                float _2514;
                float _2516;
                float _2518;
                float _2520;
                float _2648 = _2397;
                float _2649 = _2399;
                float _2650 = _2401;
                float _2651 = _2403;
                float _2652 = _2405;
                float _2653 = _2407;
                uint _2654 = _2414;
                uint _2663;
                bool _2664;
                for (;;)
                {
                    _2663 = texelFetch(g_lightClassification, int((((_2291 << 5u) + (_2277 << 9u)) + (_2654 << 2u)) >> 2u)).x;
                    _2664 = _2663 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2664)
                    {
                        frontier_phi_69_pred = _2653;
                        frontier_phi_69_pred_1 = _2652;
                        frontier_phi_69_pred_2 = _2651;
                        frontier_phi_69_pred_3 = _2650;
                        frontier_phi_69_pred_4 = _2649;
                        frontier_phi_69_pred_5 = _2648;
                    }
                    else
                    {
                        float _2848;
                        float _2849;
                        float _2850;
                        float _2851;
                        float _2852;
                        float _2853;
                        float _3144;
                        float _3145;
                        float _3146;
                        float _3147;
                        float _3148;
                        float _3149;
                        float _2861 = _2648;
                        float _2862 = _2649;
                        float _2863 = _2650;
                        float _2864 = _2651;
                        float _2865 = _2652;
                        float _2866 = _2653;
                        uint _2867 = _2663;
                        uint _2868;
                        vec4 _2893;
                        float _2894;
                        vec4 _2909;
                        vec3 _2921;
                        vec4 _2937;
                        vec4 _2953;
                        float _3000;
                        bool _3001;
                        for (;;)
                        {
                            uint _2878 = ((_2654 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2867));
                            _2868 = (_2867 + 4294967295u) & _2867;
                            uint _2880 = _2878 * 40u;
                            _2893 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2880)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2880 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2880 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2880 + 3u)).x));
                            _2894 = _2893.w;
                            uint _2896 = (_2878 * 40u) + 4u;
                            _2909 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2896)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2896 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2896 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2896 + 3u)).x));
                            uint _2911 = (_2878 * 40u) + 8u;
                            _2921 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2911)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 2u)).x));
                            uint _2924 = (_2878 * 40u) + 16u;
                            _2937 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2924)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2924 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2924 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2924 + 3u)).x));
                            uint _2940 = (_2878 * 40u) + 20u;
                            _2953 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2940)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2940 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2940 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2940 + 3u)).x));
                            uint _2956 = (_2878 * 40u) + 24u;
                            vec4 _2969 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2956)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2956 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2956 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2956 + 3u)).x));
                            uint _2975 = (_2878 * 40u) + 28u;
                            vec4 _2988 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2975)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 3u)).x));
                            _3000 = fma(_2253, _2988.z, fma(_2252, _2988.y, _2988.x * _2251)) + _2988.w;
                            _3001 = !((fma(_2253, _2969.z, fma(_2252, _2969.y, _2969.x * _2251)) + _2969.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3001)
                            {
                                float _3028 = _2893.x - _2251;
                                float _3029 = _2893.y - _2252;
                                float _3030 = _2893.z - _2253;
                                float _3031 = dot(vec3(_3028, _3029, _3030), vec3(_3028, _3029, _3030));
                                float _3034 = inversesqrt(_3031);
                                float _3035 = _3034 * _3028;
                                float _3036 = _3034 * _3029;
                                float _3037 = _3034 * _3030;
                                float _3041 = 1.0 - (_3031 / (_2894 * _2894));
                                float _4101 = isnan(0.0) ? _3041 : (isnan(_3041) ? 0.0 : max(_3041, 0.0));
                                float _3042 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
                                float _3046 = sqrt(_3031) * _2909.w;
                                float _3048 = 1.39999997615814208984375 / (_3046 + 1.39999997615814208984375);
                                float _3049 = _3048 * _3048;
                                float _3052 = ((1.0 - _3049) * dot(vec3(_3035, _3036, _3037), vec3(_486, _489, _492))) + _3049;
                                float _3055 = _3046 * _3046;
                                float _3059 = (fma(_2253, _2937.z, fma(_2252, _2937.y, _2937.x * _2251)) + _2937.w) / _3000;
                                float _3060 = (fma(_2253, _2953.z, fma(_2252, _2953.y, _2953.x * _2251)) + _2953.w) / _3000;
                                float _3064 = 1.0 - dot(vec2(_3059, _3060), vec2(_3059, _3060));
                                float _4117 = isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : max(_3064, 0.0));
                                float _3065 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
                                float _3066 = _3065 * (((isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : max(_3052, 0.0))) * _3042) / ((_3055 * 0.699999988079071044921875) + 1.0));
                                float _3078 = exp2(log2(1.0 / ((_3055 * 3.5) + 5.0)) * 0.25);
                                float _3079 = 1.0 - _562;
                                float _3086 = sqrt(1.0 - ((1.0 - (_3079 * _3079)) * (1.0 - (_3078 * _3078))));
                                float _3087 = _3086 * _3086;
                                float _3088 = _3087 * _3087;
                                float _3089 = _3035 - _2535;
                                float _3090 = _3036 - _2536;
                                float _3091 = _3037 - _2537;
                                float _3095 = inversesqrt(dot(vec3(_3089, _3090, _3091), vec3(_3089, _3090, _3091)));
                                float _3099 = dot(vec3(_486, _489, _492), vec3((-0.0) - _2535, (-0.0) - _2536, (-0.0) - _2537));
                                float _4128 = isnan(0.0) ? _3099 : (isnan(_3099) ? 0.0 : max(_3099, 0.0));
                                float _3102 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
                                float _3103 = dot(vec3(_486, _489, _492), vec3(_3095 * _3089, _3095 * _3090, _3095 * _3091));
                                float _4139 = isnan(0.0) ? _3103 : (isnan(_3103) ? 0.0 : max(_3103, 0.0));
                                float _3106 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
                                float _3110 = ((_3106 * _3106) * (_3088 + (-1.0))) + 1.0;
                                float _3111 = _3048 * _3087;
                                float _3112 = _3111 * _3111;
                                float _3118 = ((1.0 - _3112) * dot(vec3(_486, _489, _492), vec3(_3035, _3036, _3037))) + _3112;
                                float _4150 = isnan(0.0) ? _3118 : (isnan(_3118) ? 0.0 : max(_3118, 0.0));
                                float _3119 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
                                float _3120 = 1.0 - _3087;
                                float _3130 = (0.5 / (((_3119 * ((_3102 * _3120) + _3087)) + 9.9999999392252902907785028219223e-09) + (((_3119 * _3120) + _3087) * _3102))) * _3119;
                                float _4161 = isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : max(_3130, 0.0));
                                float _3140 = (_3065 * _3042) * (((_3088 * 3.1415927410125732421875) * (isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0)))) / ((_3110 * _3110) * ((_3055 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3066 * _2909.z;
                                frontier_phi_75_pred_1 = _3066 * _2909.y;
                                frontier_phi_75_pred_2 = _3066 * _2909.x;
                                frontier_phi_75_pred_3 = _3140 * _2921.z;
                                frontier_phi_75_pred_4 = _3140 * _2921.y;
                                frontier_phi_75_pred_5 = _3140 * _2921.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3149 = frontier_phi_75_pred;
                            _3148 = frontier_phi_75_pred_1;
                            _3147 = frontier_phi_75_pred_2;
                            _3146 = frontier_phi_75_pred_3;
                            _3145 = frontier_phi_75_pred_4;
                            _3144 = frontier_phi_75_pred_5;
                            _2851 = _3147 + _2864;
                            _2852 = _3148 + _2865;
                            _2853 = _3149 + _2866;
                            _2848 = _3144 + _2861;
                            _2849 = _3145 + _2862;
                            _2850 = _3146 + _2863;
                            if (_2868 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2861 = _2848;
                                _2862 = _2849;
                                _2863 = _2850;
                                _2864 = _2851;
                                _2865 = _2852;
                                _2866 = _2853;
                                _2867 = _2868;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2853;
                        frontier_phi_69_pred_1 = _2852;
                        frontier_phi_69_pred_2 = _2851;
                        frontier_phi_69_pred_3 = _2850;
                        frontier_phi_69_pred_4 = _2849;
                        frontier_phi_69_pred_5 = _2848;
                    }
                    _2520 = frontier_phi_69_pred;
                    _2518 = frontier_phi_69_pred_1;
                    _2516 = frontier_phi_69_pred_2;
                    _2514 = frontier_phi_69_pred_3;
                    _2512 = frontier_phi_69_pred_4;
                    _2510 = frontier_phi_69_pred_5;
                    uint _2655 = _2654 + 1u;
                    if (_2655 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2648 = _2510;
                        _2649 = _2512;
                        _2650 = _2514;
                        _2651 = _2516;
                        _2652 = _2518;
                        _2653 = _2520;
                        _2654 = _2655;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2520;
                frontier_phi_57_58_ladder_1 = _2518;
                frontier_phi_57_58_ladder_2 = _2516;
                frontier_phi_57_58_ladder_3 = _2514;
                frontier_phi_57_58_ladder_4 = _2512;
                frontier_phi_57_58_ladder_5 = _2510;
            }
            else
            {
                frontier_phi_57_58_ladder = _2407;
                frontier_phi_57_58_ladder_1 = _2405;
                frontier_phi_57_58_ladder_2 = _2403;
                frontier_phi_57_58_ladder_3 = _2401;
                frontier_phi_57_58_ladder_4 = _2399;
                frontier_phi_57_58_ladder_5 = _2397;
            }
            _2509 = frontier_phi_57_58_ladder_5;
            _2511 = frontier_phi_57_58_ladder_4;
            _2513 = frontier_phi_57_58_ladder_3;
            _2515 = frontier_phi_57_58_ladder_2;
            _2517 = frontier_phi_57_58_ladder_1;
            _2519 = frontier_phi_57_58_ladder;
        }
        float _2524 = isnan(1.0) ? _546 : (isnan(_546) ? 1.0 : min(_546, 1.0));
        _2309 = (_2524 * _2515) + _1743;
        _2311 = (_2524 * _2517) + _1745;
        _2313 = (_2524 * _2519) + _1747;
        _2315 = ((_2509 * _531) * _2524) + _2091;
        _2317 = ((_2511 * _533) * _2524) + _2093;
        _2319 = ((_2513 * _534) * _2524) + _2095;
    }
    else
    {
        _2309 = _1743;
        _2311 = _1745;
        _2313 = _1747;
        _2315 = _2091;
        _2317 = _2093;
        _2319 = _2095;
    }
    float _4177 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _4188 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _4199 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    uint _2339 = _505 + 6u;
    float _2347 = _464 / cbSceneParam._m0[86u].x;
    float _2348 = _465 / cbSceneParam._m0[86u].y;
    vec4 _2362 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2347, _2348, (log2((isnan(cbSceneParam._m0[77u].w) ? _397 : (isnan(_397) ? cbSceneParam._m0[77u].w : min(_397, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2364 = _2362.x;
    float _2365 = _2362.y;
    float _2366 = _2362.z;
    float _2367 = _2362.w;
    float _2459;
    float _2461;
    float _2463;
    float _2465;
    if (_397 > cbSceneParam._m0[78u].w)
    {
        float _2422 = isnan(_397) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _397 : min(cbSceneParam._m0[80u].w, _397));
        float _2423 = _2422 / _397;
        float _2434 = _2423 * _449;
        float _2435 = _450 * _2423;
        float _2436 = (-0.0) - _2435;
        float _2437 = _2423 * _451;
        float _2439 = (cbSceneParam._m0[77u].w * _2436) / _2422;
        float _2440 = _2439 + cbSceneParam._m0[79u].w;
        float _2441 = cbSceneParam._m0[79u].w - _2435;
        float _2447 = sqrt(((_2434 * _2434) + (_2435 * _2435)) + (_2437 * _2437));
        float _2450 = (1.0 - (cbSceneParam._m0[77u].w / _2422)) * _2447;
        float _2455 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2457 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2610;
        if (abs((_2436 - _2439) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2610 = ((((_2440 > 0.0) ? exp2(_2455 * _2440) : (2.0 - exp2(_2457 * _2440))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2450;
        }
        else
        {
            float _2570 = 1.0 / cbSceneParam._m0[80u].x;
            float _2571 = isnan(_2441) ? _2440 : (isnan(_2440) ? _2441 : max(_2440, _2441));
            float _2572 = isnan(_2441) ? _2440 : (isnan(_2440) ? _2441 : min(_2440, _2441));
            float _2581 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : min(_2571, 0.0));
            float _2582 = isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : min(_2572, 0.0));
            _2610 = ((abs(_2447 / _2436) * cbSceneParam._m0[80u].y) * ((((_2581 - _2582) * 2.0) - ((exp2(_2455 * (isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0)))) - exp2(_2455 * (isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : max(_2572, 0.0))))) * _2570)) - ((exp2(_2457 * _2581) - exp2(_2457 * _2582)) * _2570))) + (_2450 * cbSceneParam._m0[80u].z);
        }
        vec4 _2612 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2347, _2348, 1.0), 0.0);
        float _2621 = exp2((_2610 * (-1.44269502162933349609375)) * (1.0 - _2612.w));
        float _2622 = log2(_2621);
        float _2638 = log2(_2367);
        _2459 = (exp2(_2638 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2622 * cbSceneParam._m0[78u].x)) * _2612.x) / cbSceneParam._m0[78u].x)) + _2364;
        _2461 = (exp2(_2638 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2622 * cbSceneParam._m0[78u].y)) * _2612.y) / cbSceneParam._m0[78u].y)) + _2365;
        _2463 = (exp2(_2638 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2622 * cbSceneParam._m0[78u].z)) * _2612.z) / cbSceneParam._m0[78u].z)) + _2366;
        _2465 = _2621 * _2367;
    }
    else
    {
        _2459 = _2364;
        _2461 = _2365;
        _2463 = _2366;
        _2465 = _2367;
    }
    float _2477 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2478 = _2477 == 3.0;
    float _2479 = log2(_2465);
    float _2486 = exp2(_2479 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0))) * (_2309 + ((isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0))) * _546))) + ((_2315 + ((isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0))) * _1356)) * cbPerFrame._m0[3u].x));
    float _2487 = exp2(_2479 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0))) * (_2311 + ((isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0))) * _546))) + ((_2317 + ((isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0))) * _1356)) * cbPerFrame._m0[3u].x));
    float _2488 = exp2(_2479 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0))) * (_2313 + ((isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0))) * _546))) + ((_2319 + ((isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0))) * _1356)) * cbPerFrame._m0[3u].x));
    float _2497 = (_2477 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2497 * (_2478 ? _2486 : (_2486 + (cbSceneParam._m0[72u].w * _2459)));
    SV_Target.y = _2497 * (_2478 ? _2487 : (_2487 + (cbSceneParam._m0[72u].w * _2461)));
    SV_Target.z = _2497 * (_2478 ? _2488 : (_2488 + (cbSceneParam._m0[72u].w * _2463)));
    SV_Target.w = cbInstanceData._m0[_2339].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2339].w;
}


