#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _938;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _192 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _199 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _200 = _199 * NORMAL.x;
    float _201 = _199 * NORMAL.y;
    float _202 = _199 * NORMAL.z;
    float _206 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _214;
    float _215;
    float _216;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _214 = (-0.0) - _200;
        _215 = (-0.0) - _201;
        _216 = (-0.0) - _202;
    }
    else
    {
        _214 = _200;
        _215 = _201;
        _216 = _202;
    }
    vec4 _242 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _248 = _242.x * cbMtdParam._m0[9u].x;
    float _249 = _242.y * cbMtdParam._m0[9u].y;
    float _250 = _242.z * cbMtdParam._m0[9u].z;
    vec4 _262 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _266 = _262.z;
    float _270 = (_262.x * 2.0) + (-1.0);
    float _272 = (_262.y * 2.0) + (-1.0);
    float _273 = dot(vec2(_270, _272), vec2(_270, _272));
    float _3272 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    float _279 = sqrt(1.0 - (isnan(1.0) ? _3272 : (isnan(_3272) ? 1.0 : min(_3272, 1.0))));
    vec4 _296 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w));
    float _308 = (TEXCOORD_3.x - ((cbMtdParam._m0[12u].y * (1.0 - TEXCOORD_3.x)) * ((_296.x * cbMtdParam._m0[12u].y) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[12u].z + 1.0);
    float _3283 = isnan(0.0) ? _308 : (isnan(_308) ? 0.0 : max(_308, 0.0));
    float _309 = isnan(1.0) ? _3283 : (isnan(_3283) ? 1.0 : min(_3283, 1.0));
    float _316 = (_309 * (cbMtdParam._m0[10u].x - _248)) + _248;
    float _317 = (_309 * (cbMtdParam._m0[10u].y - _249)) + _249;
    float _318 = (_309 * (cbMtdParam._m0[10u].z - _250)) + _250;
    vec4 _330 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _332 = _330.x;
    float _334 = _332 - (_332 * _309);
    vec4 _346 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _353 = (_346.x * 2.0) + (-1.0);
    float _354 = (_346.y * 2.0) + (-1.0);
    float _355 = dot(vec2(_353, _354), vec2(_353, _354));
    float _3294 = isnan(0.0) ? _355 : (isnan(_355) ? 0.0 : max(_355, 0.0));
    float _363 = (_309 * (_346.z - _266)) + _266;
    float _375 = (((_353 - _270) + (cbMtdParam._m0[12u].w * _270)) * _309) + _270;
    float _376 = (((_354 - _272) + (cbMtdParam._m0[12u].w * _272)) * _309) + _272;
    float _377 = (_309 * (sqrt(1.0 - (isnan(1.0) ? _3294 : (isnan(_3294) ? 1.0 : min(_3294, 1.0)))) - _279)) + _279;
    float _380 = fma(_377, _214, fma(_376, _206 * TANGENT.x, (_192 * _184) * _375));
    float _383 = fma(_377, _215, fma(_376, _206 * TANGENT.y, (_192 * _185) * _375));
    float _386 = fma(_377, _216, fma(_376, _206 * TANGENT.z, (_192 * _186) * _375));
    float _390 = inversesqrt(dot(vec3(_380, _383, _386), vec3(_380, _383, _386)));
    float _391 = _390 * _380;
    float _392 = _390 * _383;
    float _393 = _390 * _386;
    float _3305 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    float _394 = isnan(1.0) ? _3305 : (isnan(_3305) ? 1.0 : min(_3305, 1.0));
    float _3316 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    float _3327 = isnan(0.0) ? _317 : (isnan(_317) ? 0.0 : max(_317, 0.0));
    float _3338 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    float _3349 = isnan(0.0) ? _334 : (isnan(_334) ? 0.0 : max(_334, 0.0));
    float _398 = isnan(1.0) ? _3349 : (isnan(_3349) ? 1.0 : min(_3349, 1.0));
    float _414 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _456 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _466 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _456);
    float _467 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _456);
    float _468 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _456);
    float _472 = inversesqrt(dot(vec3(_466, _467, _468), vec3(_466, _467, _468)));
    float _473 = _466 * _472;
    float _474 = _467 * _472;
    float _475 = _468 * _472;
    float _481 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _482 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _503 = fma(_393, cbSceneParam._m0[5u].z, fma(_392, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _391));
    float _506 = fma(_393, cbSceneParam._m0[6u].z, fma(_392, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _391));
    float _509 = fma(_393, cbSceneParam._m0[7u].z, fma(_392, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _391));
    uint _522 = uint(roundEven(NORMAL.w)) * 13u;
    uint _525 = (_522 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _531 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3316 : (isnan(_3316) ? 1.0 : min(_3316, 1.0)))) * cbInstanceData._m0[_525].x;
    float _532 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3327 : (isnan(_3327) ? 1.0 : min(_3327, 1.0)))) * cbInstanceData._m0[_525].y;
    float _533 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3338 : (isnan(_3338) ? 1.0 : min(_3338, 1.0)))) * cbInstanceData._m0[_525].z;
    float _3360 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _534 = isnan(1.0) ? _3360 : (isnan(_3360) ? 1.0 : min(_3360, 1.0));
    float _3371 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _535 = isnan(1.0) ? _3371 : (isnan(_3371) ? 1.0 : min(_3371, 1.0));
    float _3382 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _536 = isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0));
    float _537 = 1.0 - _398;
    float _538 = _534 * _537;
    float _539 = _535 * _537;
    float _540 = _536 * _537;
    float _545 = (_534 + (-0.039999999105930328369140625)) * _398;
    float _546 = (_535 + (-0.039999999105930328369140625)) * _398;
    float _547 = (_536 + (-0.039999999105930328369140625)) * _398;
    float _548 = _545 + 0.039999999105930328369140625;
    float _550 = _546 + 0.039999999105930328369140625;
    float _551 = _547 + 0.039999999105930328369140625;
    vec4 _560 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _481, cbSceneParam._m0[86u].y * _482));
    float _563 = _560.x * TEXCOORD_3.w;
    float _564 = dot(vec3(_391, _392, _393), vec3(_473, _474, _475));
    float _567 = _564 * 2.0;
    float _571 = (_567 * _391) - _473;
    float _572 = (_567 * _392) - _474;
    float _573 = (_567 * _393) - _475;
    float _577 = abs(dot(vec3(_473, _474, _475), vec3(_391, _392, _393)));
    float _3393 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _579 = sqrt(_394);
    float _592 = exp2((_579 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_579 * 3.0));
    float _598 = (1.0 - _592) * ((_579 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _599 = _592 * _579;
    float _627 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _631 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _635 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _937;
    float _939;
    float _940;
    float _941;
    float _942;
    float _943;
    float _944;
    float _945;
    float _946;
    float _947;
    float _948;
    float _949;
    float _950;
    float _951;
    float _952;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _662 = fma(_635, cbModelParam._m0[26u].z, fma(_631, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _627));
        float _666 = fma(_635, cbModelParam._m0[27u].z, fma(_631, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _627));
        float _670 = fma(_635, cbModelParam._m0[28u].z, fma(_631, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _627));
        float _695 = _627 + _391;
        float _696 = _631 + _392;
        float _697 = _635 + _393;
        float _707 = fma(_697, cbModelParam._m0[26u].z, fma(_696, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _695)) - _662;
        float _708 = fma(_697, cbModelParam._m0[27u].z, fma(_696, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _695)) - _666;
        float _709 = fma(_697, cbModelParam._m0[28u].z, fma(_696, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _695)) - _670;
        float _713 = inversesqrt(dot(vec3(_707, _708, _709), vec3(_707, _708, _709)));
        float _726 = ((_713 * _707) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_662 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _727 = ((_713 * _708) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_666 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _728 = ((_713 * _709) / cbModelParam._m0[34u].z) + ((((((_670 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _731 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_726, _727, _728), 0.0);
        vec4 _738 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_726, _727, _728), 0.0);
        vec4 _745 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_726, _727, _728), 0.0);
        vec4 _752 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_726, _727, _728), 0.0);
        float _765 = exp2((_731.w + (-0.5)) * 20.0) * 2.0;
        float _766 = _765 * (_731.x + (-0.5));
        float _767 = _765 * (_731.y + (-0.5));
        float _768 = _765 * (_731.z + (-0.5));
        float _775 = exp2((_738.w + (-0.5)) * 20.0) * 2.0;
        float _776 = _775 * (_738.x + (-0.5));
        float _777 = _775 * (_738.y + (-0.5));
        float _778 = _775 * (_738.z + (-0.5));
        float _785 = exp2((_745.w + (-0.5)) * 20.0) * 2.0;
        float _786 = _785 * (_745.x + (-0.5));
        float _787 = _785 * (_745.y + (-0.5));
        float _788 = _785 * (_745.z + (-0.5));
        float _795 = exp2((_752.w + (-0.5)) * 20.0) * 2.0;
        float _796 = _795 * (_752.x + (-0.5));
        float _797 = _795 * (_752.y + (-0.5));
        float _798 = _795 * (_752.z + (-0.5));
        float _799 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
        float _800 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
        float _801 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
        float _802 = _766 * 0.5;
        float _803 = _776 * 0.5;
        float _804 = _786 * 0.5;
        float _805 = dot(vec3(_802, _803, _804), vec3(_802, _803, _804));
        float _810 = (_805 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_805);
        float _819 = (dot(vec3(_391, _392, _393), vec3(_810 * _802, _810 * _803, _810 * _804)) + 1.0) * 0.5;
        float _3419 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
        float _829 = sqrt(((_803 * _803) + (_802 * _802)) + (_804 * _804)) / (_799 + 9.9999997473787516355514526367188e-06);
        float _3430 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
        float _830 = isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0));
        float _831 = _830 * 2.0;
        float _835 = (1.0 - _830) / (_830 + 1.0);
        float _3441 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
        float _836 = isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0));
        float _845 = ((((1.0 - _836) * (_831 + 2.0)) * exp2(log2(isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0))) * (_831 + 1.0))) + _836) * _799;
        float _846 = _767 * 0.5;
        float _847 = _777 * 0.5;
        float _848 = _787 * 0.5;
        float _849 = dot(vec3(_846, _847, _848), vec3(_846, _847, _848));
        float _854 = (_849 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_849);
        float _862 = (dot(vec3(_391, _392, _393), vec3(_854 * _846, _854 * _847, _854 * _848)) + 1.0) * 0.5;
        float _3452 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
        float _871 = sqrt(((_847 * _847) + (_846 * _846)) + (_848 * _848)) / (_800 + 9.9999997473787516355514526367188e-06);
        float _3463 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
        float _872 = isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0));
        float _873 = _872 * 2.0;
        float _877 = (1.0 - _872) / (_872 + 1.0);
        float _3474 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
        float _878 = isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0));
        float _887 = ((((1.0 - _878) * (_873 + 2.0)) * exp2(log2(isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0))) * (_873 + 1.0))) + _878) * _800;
        float _888 = _768 * 0.5;
        float _889 = _778 * 0.5;
        float _890 = _788 * 0.5;
        float _891 = dot(vec3(_888, _889, _890), vec3(_888, _889, _890));
        float _896 = (_891 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_891);
        float _904 = (dot(vec3(_391, _392, _393), vec3(_896 * _888, _896 * _889, _896 * _890)) + 1.0) * 0.5;
        float _3485 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
        float _913 = sqrt(((_889 * _889) + (_888 * _888)) + (_890 * _890)) / (_801 + 9.9999997473787516355514526367188e-06);
        float _3496 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
        float _914 = isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0));
        float _915 = _914 * 2.0;
        float _919 = (1.0 - _914) / (_914 + 1.0);
        float _3507 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
        float _920 = isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0));
        float _929 = ((((1.0 - _920) * (_915 + 2.0)) * exp2(log2(isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0))) * (_915 + 1.0))) + _920) * _801;
        _937 = _768;
        _939 = _767;
        _940 = _766;
        _941 = _778;
        _942 = _777;
        _943 = _776;
        _944 = _788;
        _945 = _787;
        _946 = _786;
        _947 = _801;
        _948 = _800;
        _949 = _799;
        _950 = cbModelParam._m0[36u].z * (isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0)));
        _951 = cbModelParam._m0[36u].z * (isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0)));
        _952 = cbModelParam._m0[36u].z * (isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0)));
    }
    else
    {
        _937 = _938;
        _939 = _938;
        _940 = _938;
        _941 = _938;
        _942 = _938;
        _943 = _938;
        _944 = _938;
        _945 = _938;
        _946 = _938;
        _947 = _938;
        _948 = _938;
        _949 = _938;
        _950 = 0.0;
        _951 = 0.0;
        _952 = 0.0;
    }
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _978 = fma(_635, cbModelParam._m0[30u].z, fma(_631, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _627));
        float _982 = fma(_635, cbModelParam._m0[31u].z, fma(_631, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _627));
        float _986 = fma(_635, cbModelParam._m0[32u].z, fma(_631, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _627));
        float _1009 = _627 + _391;
        float _1010 = _631 + _392;
        float _1011 = _635 + _393;
        float _1021 = fma(_1011, cbModelParam._m0[30u].z, fma(_1010, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1009)) - _978;
        float _1022 = fma(_1011, cbModelParam._m0[31u].z, fma(_1010, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1009)) - _982;
        float _1023 = fma(_1011, cbModelParam._m0[32u].z, fma(_1010, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1009)) - _986;
        float _1027 = inversesqrt(dot(vec3(_1021, _1022, _1023), vec3(_1021, _1022, _1023)));
        float _1040 = ((_1027 * _1021) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_978 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1041 = ((_1027 * _1022) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_982 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1042 = ((_1027 * _1023) / cbModelParam._m0[35u].z) + ((((((_986 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1044 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1040, _1041, _1042), 0.0);
        vec4 _1051 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1040, _1041, _1042), 0.0);
        vec4 _1058 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1040, _1041, _1042), 0.0);
        vec4 _1065 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1040, _1041, _1042), 0.0);
        float _1077 = exp2((_1044.w + (-0.5)) * 20.0) * 2.0;
        float _1078 = _1077 * (_1044.x + (-0.5));
        float _1079 = _1077 * (_1044.y + (-0.5));
        float _1080 = _1077 * (_1044.z + (-0.5));
        float _1087 = exp2((_1051.w + (-0.5)) * 20.0) * 2.0;
        float _1088 = _1087 * (_1051.x + (-0.5));
        float _1089 = _1087 * (_1051.y + (-0.5));
        float _1090 = _1087 * (_1051.z + (-0.5));
        float _1097 = exp2((_1058.w + (-0.5)) * 20.0) * 2.0;
        float _1098 = _1097 * (_1058.x + (-0.5));
        float _1099 = _1097 * (_1058.y + (-0.5));
        float _1100 = _1097 * (_1058.z + (-0.5));
        float _1107 = exp2((_1065.w + (-0.5)) * 20.0) * 2.0;
        float _1108 = _1107 * (_1065.x + (-0.5));
        float _1109 = _1107 * (_1065.y + (-0.5));
        float _1110 = _1107 * (_1065.z + (-0.5));
        float _1111 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1112 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1113 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1114 = _1078 * 0.5;
        float _1115 = _1088 * 0.5;
        float _1116 = _1098 * 0.5;
        float _1117 = dot(vec3(_1114, _1115, _1116), vec3(_1114, _1115, _1116));
        float _1122 = (_1117 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1117);
        float _1130 = (dot(vec3(_391, _392, _393), vec3(_1122 * _1114, _1122 * _1115, _1122 * _1116)) + 1.0) * 0.5;
        float _3548 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1139 = sqrt(((_1115 * _1115) + (_1114 * _1114)) + (_1116 * _1116)) / (_1111 + 9.9999997473787516355514526367188e-06);
        float _3559 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1140 = isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0));
        float _1141 = _1140 * 2.0;
        float _1145 = (1.0 - _1140) / (_1140 + 1.0);
        float _3570 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1146 = isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0));
        float _1155 = ((((1.0 - _1146) * (_1141 + 2.0)) * exp2(log2(isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0))) * (_1141 + 1.0))) + _1146) * _1111;
        float _1156 = _1079 * 0.5;
        float _1157 = _1089 * 0.5;
        float _1158 = _1099 * 0.5;
        float _1159 = dot(vec3(_1156, _1157, _1158), vec3(_1156, _1157, _1158));
        float _1164 = (_1159 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1159);
        float _1172 = (dot(vec3(_391, _392, _393), vec3(_1164 * _1156, _1164 * _1157, _1164 * _1158)) + 1.0) * 0.5;
        float _3581 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1181 = sqrt(((_1157 * _1157) + (_1156 * _1156)) + (_1158 * _1158)) / (_1112 + 9.9999997473787516355514526367188e-06);
        float _3592 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1182 = isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0));
        float _1183 = _1182 * 2.0;
        float _1187 = (1.0 - _1182) / (_1182 + 1.0);
        float _3603 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1188 = isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0));
        float _1197 = ((((1.0 - _1188) * (_1183 + 2.0)) * exp2(log2(isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0))) * (_1183 + 1.0))) + _1188) * _1112;
        float _1198 = _1080 * 0.5;
        float _1199 = _1090 * 0.5;
        float _1200 = _1100 * 0.5;
        float _1201 = dot(vec3(_1198, _1199, _1200), vec3(_1198, _1199, _1200));
        float _1206 = (_1201 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1201);
        float _1214 = (dot(vec3(_391, _392, _393), vec3(_1206 * _1198, _1206 * _1199, _1206 * _1200)) + 1.0) * 0.5;
        float _3614 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1223 = sqrt(((_1199 * _1199) + (_1198 * _1198)) + (_1200 * _1200)) / (_1113 + 9.9999997473787516355514526367188e-06);
        float _3625 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1224 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
        float _1225 = _1224 * 2.0;
        float _1229 = (1.0 - _1224) / (_1224 + 1.0);
        float _3636 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1230 = isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0));
        float _1239 = ((((1.0 - _1230) * (_1225 + 2.0)) * exp2(log2(isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0))) * (_1225 + 1.0))) + _1230) * _1113;
        _1247 = _1080;
        _1248 = _1079;
        _1249 = _1078;
        _1250 = _1090;
        _1251 = _1089;
        _1252 = _1088;
        _1253 = _1100;
        _1254 = _1099;
        _1255 = _1098;
        _1256 = _1113;
        _1257 = _1112;
        _1258 = _1111;
        _1259 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0)));
        _1260 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0)));
        _1261 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0)));
    }
    else
    {
        _1247 = _938;
        _1248 = _938;
        _1249 = _938;
        _1250 = _938;
        _1251 = _938;
        _1252 = _938;
        _1253 = _938;
        _1254 = _938;
        _1255 = _938;
        _1256 = _938;
        _1257 = _938;
        _1258 = _938;
        _1259 = 0.0;
        _1260 = 0.0;
        _1261 = 0.0;
    }
    float _1271 = (cbModelParam._m0[1u].x * (_1259 - _950)) + _950;
    float _1272 = (cbModelParam._m0[1u].x * (_1260 - _951)) + _951;
    float _1273 = (cbModelParam._m0[1u].x * (_1261 - _952)) + _952;
    float _1294 = fma(_1273, cbSceneParam._m0[89u].z, fma(_1272, cbSceneParam._m0[89u].y, _1271 * cbSceneParam._m0[89u].x));
    float _1297 = fma(_1273, cbSceneParam._m0[90u].z, fma(_1272, cbSceneParam._m0[90u].y, _1271 * cbSceneParam._m0[90u].x));
    float _1300 = fma(_1273, cbSceneParam._m0[91u].z, fma(_1272, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1271));
    float _1315 = _571 * 0.5;
    float _1316 = _572 * 0.5;
    float _1317 = _573 * 0.5;
    float _1318 = dot(vec4(_1315, _1316, _1317, 1.0), vec4(_1249, _1252, _1255, _1258));
    float _1321 = dot(vec4(_1315, _1316, _1317, 1.0), vec4(_1248, _1251, _1254, _1257));
    float _1324 = dot(vec4(_1315, _1316, _1317, 1.0), vec4(_1247, _1250, _1253, _1256));
    float _1358;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1331 = dot(vec4(_1315, _1316, _1317, 1.0), vec4(_937, _941, _944, _947));
        float _1335 = dot(vec4(_1315, _1316, _1317, 1.0), vec4(_939, _942, _945, _948));
        float _1339 = dot(vec4(_1315, _1316, _1317, 1.0), vec4(_940, _943, _946, _949));
        float _1346 = dot(vec4(cbModelParam._m0[39u]), vec4(_1315, _1316, _1317, 1.0));
        _1358 = dot(vec3(isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0)), isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0)), isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1346) ? 0.0 : (isnan(0.0) ? _1346 : max(0.0, _1346))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1358 = 1.0;
    }
    float _1369;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1360 = dot(vec4(cbModelParam._m0[40u]), vec4(_1315, _1316, _1317, 1.0));
        _1369 = dot(vec3(isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0)), isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0)), isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1360) ? 0.0 : (isnan(0.0) ? _1360 : max(0.0, _1360))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1369 = 1.0;
    }
    float _1373 = (_1369 * cbModelParam._m0[1u].x) + (_1358 * (1.0 - cbModelParam._m0[1u].x));
    float _1383 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _394);
    float _1384 = isnan(_1383) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1383 : min(cbModelParam._m0[25u].z, _1383));
    float _1465;
    float _1467;
    float _1469;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1432 = fma(_635, cbModelParam._m0[13u].z, fma(_631, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _627)) + cbModelParam._m0[13u].w;
        float _1436 = fma(_635, cbModelParam._m0[14u].z, fma(_631, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _627)) + cbModelParam._m0[14u].w;
        float _1440 = fma(_635, cbModelParam._m0[15u].z, fma(_631, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _627)) + cbModelParam._m0[15u].w;
        float _1443 = fma(_573, cbModelParam._m0[13u].z, fma(_572, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _571));
        float _1446 = fma(_573, cbModelParam._m0[14u].z, fma(_572, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _571));
        float _1449 = fma(_573, cbModelParam._m0[15u].z, fma(_572, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _571));
        float _1477;
        if (_1443 > 0.0)
        {
            _1477 = abs((1.0 - _1432) / _1443);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1443 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1432 + 1.0) / _1443);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1477 = frontier_phi_16_14_ladder;
        }
        float _1683;
        if (_1446 > 0.0)
        {
            _1683 = abs((1.0 - _1436) / _1446);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1446 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1436 + 1.0) / _1446);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1683 = frontier_phi_25_21_ladder;
        }
        float _1937;
        if (_1449 > 0.0)
        {
            _1937 = abs((1.0 - _1440) / _1449);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1449 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1440 + 1.0) / _1449);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1937 = frontier_phi_37_32_ladder;
        }
        float _1939 = isnan(_1683) ? _1477 : (isnan(_1477) ? _1683 : min(_1477, _1683));
        float _1940 = isnan(_1937) ? _1939 : (isnan(_1939) ? _1937 : min(_1939, _1937));
        float _1944 = (_1940 * _1443) + _1432;
        float _1945 = (_1940 * _1446) + _1436;
        float _1946 = (_1940 * _1449) + _1440;
        float _1947 = _1940 * 9.9999997473787516355514526367188e-05;
        float _1949 = (-1.0) - _1947;
        float _1951 = _1947 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1946 > _1951) || ((_1946 < _1949) || ((_1945 > _1951) || ((_1945 < _1949) || ((_1944 < _1949) || (_1944 > _1951))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2074 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1946, cbModelParam._m0[9u].z, fma(_1945, cbModelParam._m0[9u].y, _1944 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1946, cbModelParam._m0[10u].z, fma(_1945, cbModelParam._m0[10u].y, _1944 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1946, cbModelParam._m0[11u].z, fma(_1945, cbModelParam._m0[11u].y, _1944 * cbModelParam._m0[11u].x))), _1384);
            frontier_phi_15_37_ladder = _2074.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2074.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2074.x * cbModelParam._m0[1u].y;
        }
        _1465 = frontier_phi_15_37_ladder_2;
        _1467 = frontier_phi_15_37_ladder_1;
        _1469 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1453 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_571, _572, _573), _1384);
        _1465 = _1453.x * cbModelParam._m0[1u].y;
        _1467 = _1453.y * cbModelParam._m0[1u].y;
        _1469 = _1453.z * cbModelParam._m0[1u].y;
    }
    float _1473 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _394);
    float _1474 = isnan(_1473) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1473 : min(cbModelParam._m0[25u].w, _1473));
    float _1567;
    float _1569;
    float _1571;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1531 = fma(_635, cbModelParam._m0[21u].z, fma(_631, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _627)) + cbModelParam._m0[21u].w;
        float _1535 = fma(_635, cbModelParam._m0[22u].z, fma(_631, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _627)) + cbModelParam._m0[22u].w;
        float _1539 = fma(_635, cbModelParam._m0[23u].z, fma(_631, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _627)) + cbModelParam._m0[23u].w;
        float _1542 = fma(_573, cbModelParam._m0[21u].z, fma(_572, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _571));
        float _1545 = fma(_573, cbModelParam._m0[22u].z, fma(_572, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _571));
        float _1548 = fma(_573, cbModelParam._m0[23u].z, fma(_572, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _571));
        float _1688;
        if (_1542 > 0.0)
        {
            _1688 = abs((1.0 - _1531) / _1542);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1542 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1531 + 1.0) / _1542);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1688 = frontier_phi_27_23_ladder;
        }
        float _1964;
        if (_1545 > 0.0)
        {
            _1964 = abs((1.0 - _1535) / _1545);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1545 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1535 + 1.0) / _1545);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1964 = frontier_phi_39_34_ladder;
        }
        float _2177;
        if (_1548 > 0.0)
        {
            _2177 = abs((1.0 - _1539) / _1548);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1548 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1539 + 1.0) / _1548);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2177 = frontier_phi_48_45_ladder;
        }
        float _2179 = isnan(_1964) ? _1688 : (isnan(_1688) ? _1964 : min(_1688, _1964));
        float _2180 = isnan(_2177) ? _2179 : (isnan(_2179) ? _2177 : min(_2179, _2177));
        float _2184 = (_2180 * _1542) + _1531;
        float _2185 = (_2180 * _1545) + _1535;
        float _2186 = (_2180 * _1548) + _1539;
        float _2187 = _2180 * 9.9999997473787516355514526367188e-05;
        float _2188 = (-1.0) - _2187;
        float _2190 = _2187 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2186 > _2190) || ((_2186 < _2188) || ((_2185 > _2190) || ((_2185 < _2188) || ((_2184 < _2188) || (_2184 > _2190))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2384 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2186, cbModelParam._m0[17u].z, fma(_2185, cbModelParam._m0[17u].y, _2184 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2186, cbModelParam._m0[18u].z, fma(_2185, cbModelParam._m0[18u].y, _2184 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2186, cbModelParam._m0[19u].z, fma(_2185, cbModelParam._m0[19u].y, _2184 * cbModelParam._m0[19u].x))), _1474);
            frontier_phi_24_48_ladder = _2384.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2384.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2384.x * cbModelParam._m0[1u].z;
        }
        _1567 = frontier_phi_24_48_ladder_2;
        _1569 = frontier_phi_24_48_ladder_1;
        _1571 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1551 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_571, _572, _573), _1474);
        _1567 = _1551.x * cbModelParam._m0[1u].z;
        _1569 = _1551.y * cbModelParam._m0[1u].z;
        _1571 = _1551.z * cbModelParam._m0[1u].z;
    }
    float _1584 = (((_598 * _548) + _599) * _563) * ((cbModelParam._m0[1u].w * (_1567 - _1465)) + _1465);
    float _1586 = (((_598 * _550) + _599) * _563) * ((cbModelParam._m0[1u].w * (_1569 - _1467)) + _1467);
    float _1588 = (((_598 * _551) + _599) * _563) * ((cbModelParam._m0[1u].w * (_1571 - _1469)) + _1469);
    float _1591 = fma(_1588, cbSceneParam._m0[89u].z, fma(_1586, cbSceneParam._m0[89u].y, _1584 * cbSceneParam._m0[89u].x));
    float _1594 = fma(_1588, cbSceneParam._m0[90u].z, fma(_1586, cbSceneParam._m0[90u].y, _1584 * cbSceneParam._m0[90u].x));
    float _1597 = fma(_1588, cbSceneParam._m0[91u].z, fma(_1586, cbSceneParam._m0[91u].y, _1584 * cbSceneParam._m0[91u].x));
    uvec4 _1607 = floatBitsToUint(cbInstanceData._m0[_522 + 5u]);
    uint _1609 = _1607.x * 14u;
    uint _1610 = _1609 + 13u;
    float _1617 = _563 + (-1.0);
    float _1622 = (cbLight._m0[_1610].x * _1617) + 1.0;
    float _1623 = (cbLight._m0[_1610].y * _1617) + 1.0;
    float _1624 = (cbLight._m0[_1610].z * _1617) + 1.0;
    float _1625 = (cbLight._m0[_1610].w * _1617) + 1.0;
    uint _1626 = _1609 + 5u;
    float _1632 = isnan(1.0) ? _1623 : (isnan(_1623) ? 1.0 : min(_1623, 1.0));
    uint _1636 = _1609 + 4u;
    float _1642 = isnan(1.0) ? _1622 : (isnan(_1622) ? 1.0 : min(_1622, 1.0));
    uint _1646 = _1609 | 1u;
    float _1657 = dot(vec3(cbLight._m0[_1609].xyz), vec3(_391, _392, _393));
    float _1660 = dot(vec3(cbLight._m0[_1646].xyz), vec3(_391, _392, _393));
    float _3772 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
    float _3783 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
    float _1665 = (isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0))) * 0.3183098733425140380859375;
    float _1667 = (isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0))) * 0.3183098733425140380859375;
    float _1674 = ((cbLight._m0[_1626].x * _1632) * _1667) + ((cbLight._m0[_1636].x * _1642) * _1665);
    float _1675 = ((_1632 * cbLight._m0[_1626].y) * _1667) + ((_1642 * cbLight._m0[_1636].y) * _1665);
    float _1676 = ((_1632 * cbLight._m0[_1626].z) * _1667) + ((_1642 * cbLight._m0[_1636].z) * _1665);
    uvec4 _1680 = floatBitsToUint(cbLight._m0[_1609 + 12u]);
    bool _1682 = _1680.x == 0u;
    float _1693;
    float _1695;
    float _1697;
    if (_1682)
    {
        _1693 = _1674;
        _1695 = _1675;
        _1697 = _1676;
    }
    else
    {
        uint _1701 = _1609 + 6u;
        float _1717 = (dot(vec3(cbLight._m0[_1609 + 2u].xyz), vec3(_391, _392, _393)) * 0.5) + 0.5;
        float _1718 = _1717 * _1717;
        float _3794 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
        float _1719 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
        float _1720 = isnan(1.0) ? _1624 : (isnan(_1624) ? 1.0 : min(_1624, 1.0));
        _1693 = (((cbLight._m0[_1701].x * 0.3183098733425140380859375) * _1719) * _1720) + _1674;
        _1695 = (((cbLight._m0[_1701].y * 0.3183098733425140380859375) * _1719) * _1720) + _1675;
        _1697 = (((cbLight._m0[_1701].z * 0.3183098733425140380859375) * _1719) * _1720) + _1676;
    }
    bool _1700 = _1680.y == 0u;
    float _1738;
    float _1740;
    float _1742;
    if (_1700)
    {
        _1738 = _1693;
        _1740 = _1695;
        _1742 = _1697;
    }
    else
    {
        uint _1908 = _1609 + 7u;
        float _1924 = (dot(vec3(cbLight._m0[_1609 + 3u].xyz), vec3(_391, _392, _393)) * 0.5) + 0.5;
        float _1925 = _1924 * _1924;
        float _3810 = isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0));
        float _1926 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
        float _1927 = isnan(1.0) ? _1625 : (isnan(_1625) ? 1.0 : min(_1625, 1.0));
        _1738 = (((cbLight._m0[_1908].x * 0.3183098733425140380859375) * _1926) * _1927) + _1693;
        _1740 = (((cbLight._m0[_1908].y * 0.3183098733425140380859375) * _1926) * _1927) + _1695;
        _1742 = (((cbLight._m0[_1908].z * 0.3183098733425140380859375) * _1926) * _1927) + _1697;
    }
    uint _1745 = _1609 + 8u;
    float _1758 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1609].w)) * _394) * 0.949999988079071044921875);
    float _1759 = _1758 * _1758;
    float _1760 = cbLight._m0[_1609].x + _473;
    float _1761 = cbLight._m0[_1609].y + _474;
    float _1762 = cbLight._m0[_1609].z + _475;
    float _1766 = inversesqrt(dot(vec3(_1760, _1761, _1762), vec3(_1760, _1761, _1762)));
    float _1767 = _1766 * _1760;
    float _1768 = _1766 * _1761;
    float _1769 = _1766 * _1762;
    float _1770 = dot(vec3(_391, _392, _393), vec3(cbLight._m0[_1609].xyz));
    float _3826 = isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0));
    float _1773 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
    float _3837 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _1774 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
    float _1775 = dot(vec3(_391, _392, _393), vec3(_1767, _1768, _1769));
    float _3848 = isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0));
    float _1778 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
    float _1779 = dot(vec3(cbLight._m0[_1609].xyz), vec3(_1767, _1768, _1769));
    float _3859 = isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0));
    float _1783 = _1759 * _1759;
    float _1787 = ((_1778 * _1778) * (_1783 + (-1.0))) + 1.0;
    float _1795 = exp2(log2(1.0 - (isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0)))) * 5.0);
    float _1796 = 0.959999978542327880859375 - _545;
    float _1798 = 0.959999978542327880859375 - _546;
    float _1799 = 0.959999978542327880859375 - _547;
    float _1806 = 1.0 - _1759;
    float _1817 = (0.5 / (((_1774 * ((_1773 * _1806) + _1759)) + 9.9999999392252902907785028219223e-09) + (((_1774 * _1806) + _1759) * _1773))) * _1773;
    float _3870 = isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0));
    float _1819 = (isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0))) * (_1783 / ((_1787 * _1787) * 3.141590118408203125));
    uint _1830 = _1609 + 9u;
    float _1841 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1646].w)) * _394) * 0.949999988079071044921875);
    float _1842 = _1841 * _1841;
    float _1843 = cbLight._m0[_1646].x + _473;
    float _1844 = cbLight._m0[_1646].y + _474;
    float _1845 = cbLight._m0[_1646].z + _475;
    float _1849 = inversesqrt(dot(vec3(_1843, _1844, _1845), vec3(_1843, _1844, _1845)));
    float _1850 = _1849 * _1843;
    float _1851 = _1849 * _1844;
    float _1852 = _1849 * _1845;
    float _1853 = dot(vec3(_391, _392, _393), vec3(cbLight._m0[_1646].xyz));
    float _3881 = isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0));
    float _1856 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
    float _1857 = dot(vec3(_391, _392, _393), vec3(_1850, _1851, _1852));
    float _3892 = isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0));
    float _1860 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
    float _1861 = dot(vec3(cbLight._m0[_1646].xyz), vec3(_1850, _1851, _1852));
    float _3903 = isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0));
    float _1865 = _1842 * _1842;
    float _1869 = ((_1860 * _1860) * (_1865 + (-1.0))) + 1.0;
    float _1876 = exp2(log2(1.0 - (isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0)))) * 5.0);
    float _1883 = 1.0 - _1842;
    float _1893 = (0.5 / (((_1774 * ((_1856 * _1883) + _1842)) + 9.9999999392252902907785028219223e-09) + (((_1774 * _1883) + _1842) * _1856))) * _1856;
    float _3914 = isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0));
    float _1895 = (isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0))) * (_1865 / ((_1869 * _1869) * 3.141590118408203125));
    float _1905 = (((((_1876 * _1796) + _548) * cbLight._m0[_1830].x) * _1895) * _1632) + (((((_1795 * _1796) + _548) * cbLight._m0[_1745].x) * _1819) * _1642);
    float _1906 = (((((_1876 * _1798) + _550) * cbLight._m0[_1830].y) * _1895) * _1632) + (((((_1795 * _1798) + _550) * cbLight._m0[_1745].y) * _1819) * _1642);
    float _1907 = (((((_1876 * _1799) + _551) * cbLight._m0[_1830].z) * _1895) * _1632) + (((((_1795 * _1799) + _551) * cbLight._m0[_1745].z) * _1819) * _1642);
    float _1969;
    float _1971;
    float _1973;
    if (_1682)
    {
        _1969 = _1905;
        _1971 = _1906;
        _1973 = _1907;
    }
    else
    {
        uint _1975 = _1609 + 2u;
        uint _1979 = _1609 + 10u;
        float _1993 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1975].w)) * _394) * 0.949999988079071044921875);
        float _1994 = _1993 * _1993;
        float _1995 = cbLight._m0[_1975].x + _473;
        float _1996 = cbLight._m0[_1975].y + _474;
        float _1997 = cbLight._m0[_1975].z + _475;
        float _2001 = inversesqrt(dot(vec3(_1995, _1996, _1997), vec3(_1995, _1996, _1997)));
        float _2002 = _2001 * _1995;
        float _2003 = _2001 * _1996;
        float _2004 = _2001 * _1997;
        float _2005 = dot(vec3(_391, _392, _393), vec3(cbLight._m0[_1975].xyz));
        float _3925 = isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0));
        float _2008 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
        float _2009 = dot(vec3(_391, _392, _393), vec3(_2002, _2003, _2004));
        float _3936 = isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0));
        float _2012 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
        float _2013 = dot(vec3(cbLight._m0[_1975].xyz), vec3(_2002, _2003, _2004));
        float _3947 = isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0));
        float _2017 = _1994 * _1994;
        float _2021 = ((_2012 * _2012) * (_2017 + (-1.0))) + 1.0;
        float _2028 = exp2(log2(1.0 - (isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0)))) * 5.0);
        float _2035 = 1.0 - _1994;
        float _2045 = (0.5 / (((_1774 * ((_2008 * _2035) + _1994)) + 9.9999999392252902907785028219223e-09) + (((_1774 * _2035) + _1994) * _2008))) * _2008;
        float _3958 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
        float _2047 = (isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0))) * (_2017 / ((_2021 * _2021) * 3.141590118408203125));
        float _2048 = isnan(1.0) ? _1624 : (isnan(_1624) ? 1.0 : min(_1624, 1.0));
        _1969 = (((((_2028 * _1796) + _548) * cbLight._m0[_1979].x) * _2047) * _2048) + _1905;
        _1971 = (((((_2028 * _1798) + _550) * cbLight._m0[_1979].y) * _2047) * _2048) + _1906;
        _1973 = (((((_2028 * _1799) + _551) * cbLight._m0[_1979].z) * _2047) * _2048) + _1907;
    }
    float _2083;
    float _2085;
    float _2087;
    if (_1700)
    {
        _2083 = _1969;
        _2085 = _1971;
        _2087 = _1973;
    }
    else
    {
        uint _2094 = _1609 + 3u;
        uint _2098 = _1609 + 11u;
        float _2112 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2094].w)) * _394) * 0.949999988079071044921875);
        float _2113 = _2112 * _2112;
        float _2114 = cbLight._m0[_2094].x + _473;
        float _2115 = cbLight._m0[_2094].y + _474;
        float _2116 = cbLight._m0[_2094].z + _475;
        float _2120 = inversesqrt(dot(vec3(_2114, _2115, _2116), vec3(_2114, _2115, _2116)));
        float _2121 = _2120 * _2114;
        float _2122 = _2120 * _2115;
        float _2123 = _2120 * _2116;
        float _2124 = dot(vec3(_391, _392, _393), vec3(cbLight._m0[_2094].xyz));
        float _3974 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
        float _2127 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
        float _2128 = dot(vec3(_391, _392, _393), vec3(_2121, _2122, _2123));
        float _3985 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
        float _2131 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
        float _2132 = dot(vec3(cbLight._m0[_2094].xyz), vec3(_2121, _2122, _2123));
        float _3996 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
        float _2136 = _2113 * _2113;
        float _2140 = ((_2131 * _2131) * (_2136 + (-1.0))) + 1.0;
        float _2147 = exp2(log2(1.0 - (isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0)))) * 5.0);
        float _2154 = 1.0 - _2113;
        float _2164 = (0.5 / (((_1774 * ((_2127 * _2154) + _2113)) + 9.9999999392252902907785028219223e-09) + (((_1774 * _2154) + _2113) * _2127))) * _2127;
        float _4007 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
        float _2166 = (isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0))) * (_2136 / ((_2140 * _2140) * 3.141590118408203125));
        float _2167 = isnan(1.0) ? _1625 : (isnan(_1625) ? 1.0 : min(_1625, 1.0));
        _2083 = (((((_2147 * _1796) + _548) * cbLight._m0[_2098].x) * _2166) * _2167) + _1969;
        _2085 = (((((_2147 * _1798) + _550) * cbLight._m0[_2098].y) * _2166) * _2167) + _1971;
        _2087 = (((((_2147 * _1799) + _551) * cbLight._m0[_2098].z) * _2166) * _2167) + _1973;
    }
    float _2301;
    float _2303;
    float _2305;
    float _2307;
    float _2309;
    float _2311;
    if (_1607.y == 0u)
    {
        float _2242 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2243 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2242;
        float _2244 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2242;
        float _2245 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2242;
        uvec4 _2257 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2258 = _2257.x;
        uint _2269 = uint((float(_2257.y) * floor(float(uint(cbSceneParam._m0[85u].y * _482) / _2258))) + floor(float(uint(cbSceneParam._m0[85u].x * _481) / _2258)));
        float _2279 = (log2(_2245 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2280 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
        uint _2283 = uint(isnan(14.0) ? _2280 : (isnan(_2280) ? 14.0 : min(_2280, 14.0)));
        uvec4 _2288 = texelFetch(g_lightClusterGridBuffer, int(((_2283 << 2u) + (_2269 << 6u)) >> 2u));
        uint _2289 = _2288.x;
        uint _2290 = _2257.z;
        float _2389;
        float _2391;
        float _2393;
        float _2395;
        float _2397;
        float _2399;
        if (((((1u << ((_2290 >> 4u) & 15u)) + 4294967295u) & _2289) == 0u) || ((_2290 & 240u) == 0u))
        {
            _2389 = 0.0;
            _2391 = 0.0;
            _2393 = 0.0;
            _2395 = 0.0;
            _2397 = 0.0;
            _2399 = 0.0;
        }
        else
        {
            float _2390;
            float _2392;
            float _2394;
            float _2396;
            float _2398;
            float _2400;
            float _2533 = 0.0;
            float _2534 = 0.0;
            float _2535 = 0.0;
            float _2536 = 0.0;
            float _2537 = 0.0;
            float _2538 = 0.0;
            uint _2539 = 0u;
            uint _2548;
            bool _2549;
            for (;;)
            {
                _2548 = texelFetch(g_lightClassification, int((((_2283 << 5u) + (_2269 << 9u)) + (_2539 << 2u)) >> 2u)).x;
                _2549 = _2548 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2549)
                {
                    frontier_phi_63_pred = _2538;
                    frontier_phi_63_pred_1 = _2537;
                    frontier_phi_63_pred_2 = _2536;
                    frontier_phi_63_pred_3 = _2535;
                    frontier_phi_63_pred_4 = _2534;
                    frontier_phi_63_pred_5 = _2533;
                }
                else
                {
                    float _2657;
                    float _2658;
                    float _2659;
                    float _2660;
                    float _2661;
                    float _2662;
                    uint _2663;
                    _2657 = _2533;
                    _2658 = _2534;
                    _2659 = _2535;
                    _2660 = _2536;
                    _2661 = _2537;
                    _2662 = _2538;
                    _2663 = _2548;
                    float _2589;
                    float _2590;
                    float _2591;
                    float _2592;
                    float _2593;
                    float _2594;
                    for (;;)
                    {
                        uint _2667 = uint(findLSB(_2663)) + (_2539 << 5u);
                        uint _2664 = (_2663 + 4294967295u) & _2663;
                        uint _2669 = _2667 * 48u;
                        vec4 _2683 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2669)).x, texelFetch(g_PointLightRenderingBuffer, int(_2669 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2669 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2669 + 3u)).x));
                        uint _2689 = (_2667 * 48u) + 4u;
                        vec4 _2702 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2689)).x, texelFetch(g_PointLightRenderingBuffer, int(_2689 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2689 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2689 + 3u)).x));
                        uint _2708 = (_2667 * 48u) + 8u;
                        vec3 _2719 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2708)).x, texelFetch(g_PointLightRenderingBuffer, int(_2708 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2708 + 2u)).x));
                        float _2723 = _2683.x - _2243;
                        float _2724 = _2683.y - _2244;
                        float _2725 = _2683.z - _2245;
                        float _2726 = dot(vec3(_2723, _2724, _2725), vec3(_2723, _2724, _2725));
                        float _2729 = inversesqrt(_2726);
                        float _2730 = _2729 * _2723;
                        float _2731 = _2729 * _2724;
                        float _2732 = _2729 * _2725;
                        float _2733 = dot(vec3(_503, _506, _509), vec3(_2730, _2731, _2732));
                        float _2738 = 1.0 - (_2726 * _2683.w);
                        float _4033 = isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0));
                        float _2739 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
                        float _2740 = sqrt(_2726) * _2702.w;
                        float _2743 = 1.39999997615814208984375 / (_2740 + 1.39999997615814208984375);
                        float _2744 = _2743 * _2743;
                        float _2747 = ((1.0 - _2744) * _2733) + _2744;
                        float _2750 = _2740 * _2740;
                        float _2754 = ((isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : max(_2747, 0.0))) * _2739) / ((_2750 * 0.699999988079071044921875) + 1.0);
                        float _2758 = (-0.0) - _2243;
                        float _2759 = (-0.0) - _2244;
                        float _2760 = (-0.0) - _2245;
                        float _2764 = inversesqrt(dot(vec3(_2758, _2759, _2760), vec3(_2758, _2759, _2760)));
                        float _2765 = _2764 * _2758;
                        float _2766 = _2764 * _2759;
                        float _2767 = _2764 * _2760;
                        float _2775 = exp2(log2(1.0 / ((_2750 * 3.5) + 5.0)) * 0.25);
                        float _2776 = 1.0 - _579;
                        float _2783 = sqrt(1.0 - ((1.0 - (_2776 * _2776)) * (1.0 - (_2775 * _2775))));
                        float _2784 = _2783 * _2783;
                        float _2785 = _2784 * _2784;
                        float _2786 = _2765 + _2730;
                        float _2787 = _2766 + _2731;
                        float _2788 = _2767 + _2732;
                        float _2792 = inversesqrt(dot(vec3(_2786, _2787, _2788), vec3(_2786, _2787, _2788)));
                        float _2796 = dot(vec3(_503, _506, _509), vec3(_2765, _2766, _2767));
                        float _4049 = isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0));
                        float _2799 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
                        float _2800 = dot(vec3(_503, _506, _509), vec3(_2792 * _2786, _2792 * _2787, _2792 * _2788));
                        float _4060 = isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0));
                        float _2803 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
                        float _2807 = ((_2803 * _2803) * (_2785 + (-1.0))) + 1.0;
                        float _2808 = _2743 * _2784;
                        float _2809 = _2808 * _2808;
                        float _2812 = ((1.0 - _2809) * _2733) + _2809;
                        float _4071 = isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0));
                        float _2813 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
                        float _2814 = 1.0 - _2784;
                        float _2824 = (0.5 / (((_2813 * ((_2799 * _2814) + _2784)) + 9.9999999392252902907785028219223e-09) + (((_2813 * _2814) + _2784) * _2799))) * _2813;
                        float _4082 = isnan(0.0) ? _2824 : (isnan(_2824) ? 0.0 : max(_2824, 0.0));
                        float _2835 = (((_2785 * 3.1415927410125732421875) * (isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0)))) / ((_2807 * _2807) * ((_2750 * 2.1991131305694580078125) + 3.141590118408203125))) * _2739;
                        _2592 = (_2754 * _2702.x) + _2660;
                        _2593 = (_2754 * _2702.y) + _2661;
                        _2594 = (_2754 * _2702.z) + _2662;
                        _2589 = (_2835 * _2719.x) + _2657;
                        _2590 = (_2835 * _2719.y) + _2658;
                        _2591 = (_2835 * _2719.z) + _2659;
                        if (_2664 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2657 = _2589;
                            _2658 = _2590;
                            _2659 = _2591;
                            _2660 = _2592;
                            _2661 = _2593;
                            _2662 = _2594;
                            _2663 = _2664;
                        }
                    }
                    frontier_phi_63_pred = _2594;
                    frontier_phi_63_pred_1 = _2593;
                    frontier_phi_63_pred_2 = _2592;
                    frontier_phi_63_pred_3 = _2591;
                    frontier_phi_63_pred_4 = _2590;
                    frontier_phi_63_pred_5 = _2589;
                }
                _2400 = frontier_phi_63_pred;
                _2398 = frontier_phi_63_pred_1;
                _2396 = frontier_phi_63_pred_2;
                _2394 = frontier_phi_63_pred_3;
                _2392 = frontier_phi_63_pred_4;
                _2390 = frontier_phi_63_pred_5;
                uint _2540 = _2539 + 1u;
                if (_2540 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2533 = _2390;
                    _2534 = _2392;
                    _2535 = _2394;
                    _2536 = _2396;
                    _2537 = _2398;
                    _2538 = _2400;
                    _2539 = _2540;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2389 = _2390;
            _2391 = _2392;
            _2393 = _2394;
            _2395 = _2396;
            _2397 = _2398;
            _2399 = _2400;
        }
        uvec4 _2403 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2404 = _2403.z;
        uint _2406 = (_2404 >> 8u) & 15u;
        float _2501;
        float _2503;
        float _2505;
        float _2507;
        float _2509;
        float _2511;
        if (((4294967295u << _2406) & _2289) == 0u)
        {
            _2501 = _2389;
            _2503 = _2391;
            _2505 = _2393;
            _2507 = _2395;
            _2509 = _2397;
            _2511 = _2399;
        }
        else
        {
            float _2526 = inversesqrt(dot(vec3(_2243, _2244, _2245), vec3(_2243, _2244, _2245)));
            float _2527 = _2526 * _2243;
            float _2528 = _2526 * _2244;
            float _2529 = _2526 * _2245;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2406 < ((_2404 >> 12u) & 15u))
            {
                float _2502;
                float _2504;
                float _2506;
                float _2508;
                float _2510;
                float _2512;
                float _2640 = _2389;
                float _2641 = _2391;
                float _2642 = _2393;
                float _2643 = _2395;
                float _2644 = _2397;
                float _2645 = _2399;
                uint _2646 = _2406;
                uint _2655;
                bool _2656;
                for (;;)
                {
                    _2655 = texelFetch(g_lightClassification, int((((_2283 << 5u) + (_2269 << 9u)) + (_2646 << 2u)) >> 2u)).x;
                    _2656 = _2655 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2656)
                    {
                        frontier_phi_69_pred = _2645;
                        frontier_phi_69_pred_1 = _2644;
                        frontier_phi_69_pred_2 = _2643;
                        frontier_phi_69_pred_3 = _2642;
                        frontier_phi_69_pred_4 = _2641;
                        frontier_phi_69_pred_5 = _2640;
                    }
                    else
                    {
                        float _2840;
                        float _2841;
                        float _2842;
                        float _2843;
                        float _2844;
                        float _2845;
                        float _3136;
                        float _3137;
                        float _3138;
                        float _3139;
                        float _3140;
                        float _3141;
                        float _2853 = _2640;
                        float _2854 = _2641;
                        float _2855 = _2642;
                        float _2856 = _2643;
                        float _2857 = _2644;
                        float _2858 = _2645;
                        uint _2859 = _2655;
                        uint _2860;
                        vec4 _2885;
                        float _2886;
                        vec4 _2901;
                        vec3 _2913;
                        vec4 _2929;
                        vec4 _2945;
                        float _2992;
                        bool _2993;
                        for (;;)
                        {
                            uint _2870 = ((_2646 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2859));
                            _2860 = (_2859 + 4294967295u) & _2859;
                            uint _2872 = _2870 * 40u;
                            _2885 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2872)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2872 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2872 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2872 + 3u)).x));
                            _2886 = _2885.w;
                            uint _2888 = (_2870 * 40u) + 4u;
                            _2901 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2888)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2888 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2888 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2888 + 3u)).x));
                            uint _2903 = (_2870 * 40u) + 8u;
                            _2913 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2903)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2903 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2903 + 2u)).x));
                            uint _2916 = (_2870 * 40u) + 16u;
                            _2929 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2916)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2916 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2916 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2916 + 3u)).x));
                            uint _2932 = (_2870 * 40u) + 20u;
                            _2945 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2932)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2932 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2932 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2932 + 3u)).x));
                            uint _2948 = (_2870 * 40u) + 24u;
                            vec4 _2961 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2948)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2948 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2948 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2948 + 3u)).x));
                            uint _2967 = (_2870 * 40u) + 28u;
                            vec4 _2980 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2967)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2967 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2967 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2967 + 3u)).x));
                            _2992 = fma(_2245, _2980.z, fma(_2244, _2980.y, _2980.x * _2243)) + _2980.w;
                            _2993 = !((fma(_2245, _2961.z, fma(_2244, _2961.y, _2961.x * _2243)) + _2961.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2993)
                            {
                                float _3020 = _2885.x - _2243;
                                float _3021 = _2885.y - _2244;
                                float _3022 = _2885.z - _2245;
                                float _3023 = dot(vec3(_3020, _3021, _3022), vec3(_3020, _3021, _3022));
                                float _3026 = inversesqrt(_3023);
                                float _3027 = _3026 * _3020;
                                float _3028 = _3026 * _3021;
                                float _3029 = _3026 * _3022;
                                float _3033 = 1.0 - (_3023 / (_2886 * _2886));
                                float _4093 = isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : max(_3033, 0.0));
                                float _3034 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
                                float _3038 = sqrt(_3023) * _2901.w;
                                float _3040 = 1.39999997615814208984375 / (_3038 + 1.39999997615814208984375);
                                float _3041 = _3040 * _3040;
                                float _3044 = ((1.0 - _3041) * dot(vec3(_3027, _3028, _3029), vec3(_503, _506, _509))) + _3041;
                                float _3047 = _3038 * _3038;
                                float _3051 = (fma(_2245, _2929.z, fma(_2244, _2929.y, _2929.x * _2243)) + _2929.w) / _2992;
                                float _3052 = (fma(_2245, _2945.z, fma(_2244, _2945.y, _2945.x * _2243)) + _2945.w) / _2992;
                                float _3056 = 1.0 - dot(vec2(_3051, _3052), vec2(_3051, _3052));
                                float _4109 = isnan(0.0) ? _3056 : (isnan(_3056) ? 0.0 : max(_3056, 0.0));
                                float _3057 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
                                float _3058 = _3057 * (((isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : max(_3044, 0.0))) * _3034) / ((_3047 * 0.699999988079071044921875) + 1.0));
                                float _3070 = exp2(log2(1.0 / ((_3047 * 3.5) + 5.0)) * 0.25);
                                float _3071 = 1.0 - _579;
                                float _3078 = sqrt(1.0 - ((1.0 - (_3071 * _3071)) * (1.0 - (_3070 * _3070))));
                                float _3079 = _3078 * _3078;
                                float _3080 = _3079 * _3079;
                                float _3081 = _3027 - _2527;
                                float _3082 = _3028 - _2528;
                                float _3083 = _3029 - _2529;
                                float _3087 = inversesqrt(dot(vec3(_3081, _3082, _3083), vec3(_3081, _3082, _3083)));
                                float _3091 = dot(vec3(_503, _506, _509), vec3((-0.0) - _2527, (-0.0) - _2528, (-0.0) - _2529));
                                float _4120 = isnan(0.0) ? _3091 : (isnan(_3091) ? 0.0 : max(_3091, 0.0));
                                float _3094 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
                                float _3095 = dot(vec3(_503, _506, _509), vec3(_3087 * _3081, _3087 * _3082, _3087 * _3083));
                                float _4131 = isnan(0.0) ? _3095 : (isnan(_3095) ? 0.0 : max(_3095, 0.0));
                                float _3098 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
                                float _3102 = ((_3098 * _3098) * (_3080 + (-1.0))) + 1.0;
                                float _3103 = _3040 * _3079;
                                float _3104 = _3103 * _3103;
                                float _3110 = ((1.0 - _3104) * dot(vec3(_503, _506, _509), vec3(_3027, _3028, _3029))) + _3104;
                                float _4142 = isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : max(_3110, 0.0));
                                float _3111 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
                                float _3112 = 1.0 - _3079;
                                float _3122 = (0.5 / (((_3111 * ((_3094 * _3112) + _3079)) + 9.9999999392252902907785028219223e-09) + (((_3111 * _3112) + _3079) * _3094))) * _3111;
                                float _4153 = isnan(0.0) ? _3122 : (isnan(_3122) ? 0.0 : max(_3122, 0.0));
                                float _3132 = (_3057 * _3034) * (((_3080 * 3.1415927410125732421875) * (isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0)))) / ((_3102 * _3102) * ((_3047 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3058 * _2901.z;
                                frontier_phi_75_pred_1 = _3058 * _2901.y;
                                frontier_phi_75_pred_2 = _3058 * _2901.x;
                                frontier_phi_75_pred_3 = _3132 * _2913.z;
                                frontier_phi_75_pred_4 = _3132 * _2913.y;
                                frontier_phi_75_pred_5 = _3132 * _2913.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3141 = frontier_phi_75_pred;
                            _3140 = frontier_phi_75_pred_1;
                            _3139 = frontier_phi_75_pred_2;
                            _3138 = frontier_phi_75_pred_3;
                            _3137 = frontier_phi_75_pred_4;
                            _3136 = frontier_phi_75_pred_5;
                            _2843 = _3139 + _2856;
                            _2844 = _3140 + _2857;
                            _2845 = _3141 + _2858;
                            _2840 = _3136 + _2853;
                            _2841 = _3137 + _2854;
                            _2842 = _3138 + _2855;
                            if (_2860 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2853 = _2840;
                                _2854 = _2841;
                                _2855 = _2842;
                                _2856 = _2843;
                                _2857 = _2844;
                                _2858 = _2845;
                                _2859 = _2860;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2845;
                        frontier_phi_69_pred_1 = _2844;
                        frontier_phi_69_pred_2 = _2843;
                        frontier_phi_69_pred_3 = _2842;
                        frontier_phi_69_pred_4 = _2841;
                        frontier_phi_69_pred_5 = _2840;
                    }
                    _2512 = frontier_phi_69_pred;
                    _2510 = frontier_phi_69_pred_1;
                    _2508 = frontier_phi_69_pred_2;
                    _2506 = frontier_phi_69_pred_3;
                    _2504 = frontier_phi_69_pred_4;
                    _2502 = frontier_phi_69_pred_5;
                    uint _2647 = _2646 + 1u;
                    if (_2647 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2640 = _2502;
                        _2641 = _2504;
                        _2642 = _2506;
                        _2643 = _2508;
                        _2644 = _2510;
                        _2645 = _2512;
                        _2646 = _2647;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2512;
                frontier_phi_57_58_ladder_1 = _2510;
                frontier_phi_57_58_ladder_2 = _2508;
                frontier_phi_57_58_ladder_3 = _2506;
                frontier_phi_57_58_ladder_4 = _2504;
                frontier_phi_57_58_ladder_5 = _2502;
            }
            else
            {
                frontier_phi_57_58_ladder = _2399;
                frontier_phi_57_58_ladder_1 = _2397;
                frontier_phi_57_58_ladder_2 = _2395;
                frontier_phi_57_58_ladder_3 = _2393;
                frontier_phi_57_58_ladder_4 = _2391;
                frontier_phi_57_58_ladder_5 = _2389;
            }
            _2501 = frontier_phi_57_58_ladder_5;
            _2503 = frontier_phi_57_58_ladder_4;
            _2505 = frontier_phi_57_58_ladder_3;
            _2507 = frontier_phi_57_58_ladder_2;
            _2509 = frontier_phi_57_58_ladder_1;
            _2511 = frontier_phi_57_58_ladder;
        }
        float _2516 = isnan(1.0) ? _563 : (isnan(_563) ? 1.0 : min(_563, 1.0));
        _2301 = (_2516 * _2507) + _1738;
        _2303 = (_2516 * _2509) + _1740;
        _2305 = (_2516 * _2511) + _1742;
        _2307 = ((_2501 * _548) * _2516) + _2083;
        _2309 = ((_2503 * _550) * _2516) + _2085;
        _2311 = ((_2505 * _551) * _2516) + _2087;
    }
    else
    {
        _2301 = _1738;
        _2303 = _1740;
        _2305 = _1742;
        _2307 = _2083;
        _2309 = _2085;
        _2311 = _2087;
    }
    float _4169 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _4180 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _4191 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    uint _2331 = _522 + 6u;
    float _2339 = _481 / cbSceneParam._m0[86u].x;
    float _2340 = _482 / cbSceneParam._m0[86u].y;
    vec4 _2354 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2339, _2340, (log2((isnan(cbSceneParam._m0[77u].w) ? _414 : (isnan(_414) ? cbSceneParam._m0[77u].w : min(_414, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2356 = _2354.x;
    float _2357 = _2354.y;
    float _2358 = _2354.z;
    float _2359 = _2354.w;
    float _2451;
    float _2453;
    float _2455;
    float _2457;
    if (_414 > cbSceneParam._m0[78u].w)
    {
        float _2414 = isnan(_414) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _414 : min(cbSceneParam._m0[80u].w, _414));
        float _2415 = _2414 / _414;
        float _2426 = _2415 * _466;
        float _2427 = _467 * _2415;
        float _2428 = (-0.0) - _2427;
        float _2429 = _2415 * _468;
        float _2431 = (cbSceneParam._m0[77u].w * _2428) / _2414;
        float _2432 = _2431 + cbSceneParam._m0[79u].w;
        float _2433 = cbSceneParam._m0[79u].w - _2427;
        float _2439 = sqrt(((_2426 * _2426) + (_2427 * _2427)) + (_2429 * _2429));
        float _2442 = (1.0 - (cbSceneParam._m0[77u].w / _2414)) * _2439;
        float _2447 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2449 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2602;
        if (abs((_2428 - _2431) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2602 = ((((_2432 > 0.0) ? exp2(_2447 * _2432) : (2.0 - exp2(_2449 * _2432))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2442;
        }
        else
        {
            float _2562 = 1.0 / cbSceneParam._m0[80u].x;
            float _2563 = isnan(_2433) ? _2432 : (isnan(_2432) ? _2433 : max(_2432, _2433));
            float _2564 = isnan(_2433) ? _2432 : (isnan(_2432) ? _2433 : min(_2432, _2433));
            float _2573 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : min(_2563, 0.0));
            float _2574 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : min(_2564, 0.0));
            _2602 = ((abs(_2439 / _2428) * cbSceneParam._m0[80u].y) * ((((_2573 - _2574) * 2.0) - ((exp2(_2447 * (isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0)))) - exp2(_2447 * (isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0))))) * _2562)) - ((exp2(_2449 * _2573) - exp2(_2449 * _2574)) * _2562))) + (_2442 * cbSceneParam._m0[80u].z);
        }
        vec4 _2604 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2339, _2340, 1.0), 0.0);
        float _2613 = exp2((_2602 * (-1.44269502162933349609375)) * (1.0 - _2604.w));
        float _2614 = log2(_2613);
        float _2630 = log2(_2359);
        _2451 = (exp2(_2630 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2614 * cbSceneParam._m0[78u].x)) * _2604.x) / cbSceneParam._m0[78u].x)) + _2356;
        _2453 = (exp2(_2630 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2614 * cbSceneParam._m0[78u].y)) * _2604.y) / cbSceneParam._m0[78u].y)) + _2357;
        _2455 = (exp2(_2630 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2614 * cbSceneParam._m0[78u].z)) * _2604.z) / cbSceneParam._m0[78u].z)) + _2358;
        _2457 = _2613 * _2359;
    }
    else
    {
        _2451 = _2356;
        _2453 = _2357;
        _2455 = _2358;
        _2457 = _2359;
    }
    float _2469 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2470 = _2469 == 3.0;
    float _2471 = log2(_2457);
    float _2478 = exp2(_2471 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0))) * (_2301 + ((isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0))) * _563))) + ((_2307 + ((isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0))) * _1373)) * cbPerFrame._m0[3u].x));
    float _2479 = exp2(_2471 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0))) * (_2303 + ((isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0))) * _563))) + ((_2309 + ((isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0))) * _1373)) * cbPerFrame._m0[3u].x));
    float _2480 = exp2(_2471 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0))) * (_2305 + ((isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0))) * _563))) + ((_2311 + ((isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0))) * _1373)) * cbPerFrame._m0[3u].x));
    float _2489 = (_2469 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2489 * (_2470 ? _2478 : (_2478 + (cbSceneParam._m0[72u].w * _2451)));
    SV_Target.y = _2489 * (_2470 ? _2479 : (_2479 + (cbSceneParam._m0[72u].w * _2453)));
    SV_Target.z = _2489 * (_2470 ? _2480 : (_2480 + (cbSceneParam._m0[72u].w * _2455)));
    SV_Target.w = cbInstanceData._m0[_2331].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2331].w;
}


