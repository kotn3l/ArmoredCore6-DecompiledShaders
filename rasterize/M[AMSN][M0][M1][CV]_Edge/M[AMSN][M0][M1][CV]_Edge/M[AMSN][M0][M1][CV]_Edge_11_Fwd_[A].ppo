#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _983;
float _3371;
float _3372;
float _3373;
float _3374;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _196 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _203 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _204 = _203 * NORMAL.x;
    float _205 = _203 * NORMAL.y;
    float _206 = _203 * NORMAL.z;
    float _210 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _218;
    float _219;
    float _220;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _218 = (-0.0) - _204;
        _219 = (-0.0) - _205;
        _220 = (-0.0) - _206;
    }
    else
    {
        _218 = _204;
        _219 = _205;
        _220 = _206;
    }
    vec4 _246 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _252 = _246.w;
    float _253 = _246.x * cbMtdParam._m0[9u].x;
    float _254 = _246.y * cbMtdParam._m0[9u].y;
    float _255 = _246.z * cbMtdParam._m0[9u].z;
    vec4 _267 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _271 = _267.z;
    float _275 = (_267.x * 2.0) + (-1.0);
    float _277 = (_267.y * 2.0) + (-1.0);
    float _278 = dot(vec2(_275, _277), vec2(_275, _277));
    float _3383 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _284 = sqrt(1.0 - (isnan(1.0) ? _3383 : (isnan(_3383) ? 1.0 : min(_3383, 1.0))));
    vec4 _301 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w));
    float _313 = (TEXCOORD_3.x - ((cbMtdParam._m0[12u].y * (1.0 - TEXCOORD_3.x)) * ((_301.x * cbMtdParam._m0[12u].y) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[12u].z + 1.0);
    float _3394 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _314 = isnan(1.0) ? _3394 : (isnan(_3394) ? 1.0 : min(_3394, 1.0));
    float _321 = (_314 * (cbMtdParam._m0[10u].x - _253)) + _253;
    float _322 = (_314 * (cbMtdParam._m0[10u].y - _254)) + _254;
    float _323 = (_314 * (cbMtdParam._m0[10u].z - _255)) + _255;
    vec4 _335 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _337 = _335.x;
    float _339 = _337 - (_337 * _314);
    vec4 _351 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _358 = (_351.x * 2.0) + (-1.0);
    float _359 = (_351.y * 2.0) + (-1.0);
    float _360 = dot(vec2(_358, _359), vec2(_358, _359));
    float _3405 = isnan(0.0) ? _360 : (isnan(_360) ? 0.0 : max(_360, 0.0));
    float _368 = (_314 * (_351.z - _271)) + _271;
    float _380 = (((_358 - _275) + (cbMtdParam._m0[12u].w * _275)) * _314) + _275;
    float _381 = (((_359 - _277) + (cbMtdParam._m0[12u].w * _277)) * _314) + _277;
    float _382 = (_314 * (sqrt(1.0 - (isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0)))) - _284)) + _284;
    float _385 = fma(_382, _218, fma(_381, _210 * TANGENT.x, (_196 * _188) * _380));
    float _388 = fma(_382, _219, fma(_381, _210 * TANGENT.y, (_196 * _189) * _380));
    float _391 = fma(_382, _220, fma(_381, _210 * TANGENT.z, (_196 * _190) * _380));
    float _395 = inversesqrt(dot(vec3(_385, _388, _391), vec3(_385, _388, _391)));
    float _396 = _395 * _385;
    float _397 = _395 * _388;
    float _398 = _395 * _391;
    float _3416 = isnan(0.0) ? _368 : (isnan(_368) ? 0.0 : max(_368, 0.0));
    float _399 = isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0));
    float _3427 = isnan(0.0) ? _321 : (isnan(_321) ? 0.0 : max(_321, 0.0));
    float _3438 = isnan(0.0) ? _322 : (isnan(_322) ? 0.0 : max(_322, 0.0));
    float _3449 = isnan(0.0) ? _323 : (isnan(_323) ? 0.0 : max(_323, 0.0));
    float _3460 = isnan(0.0) ? _339 : (isnan(_339) ? 0.0 : max(_339, 0.0));
    float _403 = isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0));
    float _419 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _461 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _471 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _461);
    float _472 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _461);
    float _473 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _461);
    float _477 = inversesqrt(dot(vec3(_471, _472, _473), vec3(_471, _472, _473)));
    float _478 = _471 * _477;
    float _479 = _472 * _477;
    float _480 = _473 * _477;
    vec4 _485 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _487 = _485.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _663 = sqrt(((_471 * _471) + (_472 * _472)) + (_473 * _473));
        float _669 = (cbMatDynParam._m0[5u].x * _663) + cbMatDynParam._m0[5u].y;
        float _3471 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
        float _670 = isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0));
        float _674 = (cbMatDynParam._m0[5u].z * _663) + cbMatDynParam._m0[5u].w;
        float _3482 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0))) - _670)) + _670) < ((_487 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _499 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _500 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _520 = fma(_398, cbSceneParam._m0[5u].z, fma(_397, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _396));
    float _523 = fma(_398, cbSceneParam._m0[6u].z, fma(_397, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _396));
    float _526 = fma(_398, cbSceneParam._m0[7u].z, fma(_397, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _396));
    uint _539 = uint(roundEven(NORMAL.w)) * 13u;
    uint _541 = _539 + 9u;
    uint _542 = _541 + uint(cbMatDynParam._m0[0u].w);
    float _548 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0)))) * cbInstanceData._m0[_542].x;
    float _549 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0)))) * cbInstanceData._m0[_542].y;
    float _550 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0)))) * cbInstanceData._m0[_542].z;
    float _3493 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _551 = isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0));
    float _3504 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _552 = isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0));
    float _3515 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _553 = isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0));
    float _554 = 1.0 - _403;
    float _555 = _551 * _554;
    float _556 = _552 * _554;
    float _557 = _553 * _554;
    float _562 = (_551 + (-0.039999999105930328369140625)) * _403;
    float _563 = (_552 + (-0.039999999105930328369140625)) * _403;
    float _564 = (_553 + (-0.039999999105930328369140625)) * _403;
    float _565 = _562 + 0.039999999105930328369140625;
    float _567 = _563 + 0.039999999105930328369140625;
    float _568 = _564 + 0.039999999105930328369140625;
    vec4 _577 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _499, cbSceneParam._m0[86u].y * _500));
    float _580 = _577.x * TEXCOORD_3.w;
    float _581 = dot(vec3(_396, _397, _398), vec3(_478, _479, _480));
    float _584 = _581 * 2.0;
    float _588 = (_584 * _396) - _478;
    float _589 = (_584 * _397) - _479;
    float _590 = (_584 * _398) - _480;
    float _594 = abs(dot(vec3(_478, _479, _480), vec3(_396, _397, _398)));
    float _3526 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _596 = sqrt(_399);
    float _609 = exp2((_596 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_596 * 3.0));
    float _615 = (1.0 - _609) * ((_596 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _616 = _609 * _596;
    float _644 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _648 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _652 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _982;
    float _984;
    float _985;
    float _986;
    float _987;
    float _988;
    float _989;
    float _990;
    float _991;
    float _992;
    float _993;
    float _994;
    float _995;
    float _996;
    float _997;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _707 = fma(_652, cbModelParam._m0[26u].z, fma(_648, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _644));
        float _711 = fma(_652, cbModelParam._m0[27u].z, fma(_648, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _644));
        float _715 = fma(_652, cbModelParam._m0[28u].z, fma(_648, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _644));
        float _740 = _644 + _396;
        float _741 = _648 + _397;
        float _742 = _652 + _398;
        float _752 = fma(_742, cbModelParam._m0[26u].z, fma(_741, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _740)) - _707;
        float _753 = fma(_742, cbModelParam._m0[27u].z, fma(_741, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _740)) - _711;
        float _754 = fma(_742, cbModelParam._m0[28u].z, fma(_741, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _740)) - _715;
        float _758 = inversesqrt(dot(vec3(_752, _753, _754), vec3(_752, _753, _754)));
        float _771 = ((_758 * _752) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_707 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _772 = ((_758 * _753) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_711 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _773 = ((_758 * _754) / cbModelParam._m0[34u].z) + ((((((_715 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _776 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_771, _772, _773), 0.0);
        vec4 _783 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_771, _772, _773), 0.0);
        vec4 _790 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_771, _772, _773), 0.0);
        vec4 _797 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_771, _772, _773), 0.0);
        float _810 = exp2((_776.w + (-0.5)) * 20.0) * 2.0;
        float _811 = _810 * (_776.x + (-0.5));
        float _812 = _810 * (_776.y + (-0.5));
        float _813 = _810 * (_776.z + (-0.5));
        float _820 = exp2((_783.w + (-0.5)) * 20.0) * 2.0;
        float _821 = _820 * (_783.x + (-0.5));
        float _822 = _820 * (_783.y + (-0.5));
        float _823 = _820 * (_783.z + (-0.5));
        float _830 = exp2((_790.w + (-0.5)) * 20.0) * 2.0;
        float _831 = _830 * (_790.x + (-0.5));
        float _832 = _830 * (_790.y + (-0.5));
        float _833 = _830 * (_790.z + (-0.5));
        float _840 = exp2((_797.w + (-0.5)) * 20.0) * 2.0;
        float _841 = _840 * (_797.x + (-0.5));
        float _842 = _840 * (_797.y + (-0.5));
        float _843 = _840 * (_797.z + (-0.5));
        float _844 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
        float _845 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
        float _846 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
        float _847 = _811 * 0.5;
        float _848 = _821 * 0.5;
        float _849 = _831 * 0.5;
        float _850 = dot(vec3(_847, _848, _849), vec3(_847, _848, _849));
        float _855 = (_850 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_850);
        float _864 = (dot(vec3(_396, _397, _398), vec3(_855 * _847, _855 * _848, _855 * _849)) + 1.0) * 0.5;
        float _3552 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
        float _874 = sqrt(((_848 * _848) + (_847 * _847)) + (_849 * _849)) / (_844 + 9.9999997473787516355514526367188e-06);
        float _3563 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
        float _875 = isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0));
        float _876 = _875 * 2.0;
        float _880 = (1.0 - _875) / (_875 + 1.0);
        float _3574 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
        float _881 = isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0));
        float _890 = ((((1.0 - _881) * (_876 + 2.0)) * exp2(log2(isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0))) * (_876 + 1.0))) + _881) * _844;
        float _891 = _812 * 0.5;
        float _892 = _822 * 0.5;
        float _893 = _832 * 0.5;
        float _894 = dot(vec3(_891, _892, _893), vec3(_891, _892, _893));
        float _899 = (_894 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_894);
        float _907 = (dot(vec3(_396, _397, _398), vec3(_899 * _891, _899 * _892, _899 * _893)) + 1.0) * 0.5;
        float _3585 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        float _916 = sqrt(((_892 * _892) + (_891 * _891)) + (_893 * _893)) / (_845 + 9.9999997473787516355514526367188e-06);
        float _3596 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
        float _917 = isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0));
        float _918 = _917 * 2.0;
        float _922 = (1.0 - _917) / (_917 + 1.0);
        float _3607 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
        float _923 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
        float _932 = ((((1.0 - _923) * (_918 + 2.0)) * exp2(log2(isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0))) * (_918 + 1.0))) + _923) * _845;
        float _933 = _813 * 0.5;
        float _934 = _823 * 0.5;
        float _935 = _833 * 0.5;
        float _936 = dot(vec3(_933, _934, _935), vec3(_933, _934, _935));
        float _941 = (_936 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_936);
        float _949 = (dot(vec3(_396, _397, _398), vec3(_941 * _933, _941 * _934, _941 * _935)) + 1.0) * 0.5;
        float _3618 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
        float _958 = sqrt(((_934 * _934) + (_933 * _933)) + (_935 * _935)) / (_846 + 9.9999997473787516355514526367188e-06);
        float _3629 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
        float _959 = isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0));
        float _960 = _959 * 2.0;
        float _964 = (1.0 - _959) / (_959 + 1.0);
        float _3640 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
        float _965 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
        float _974 = ((((1.0 - _965) * (_960 + 2.0)) * exp2(log2(isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0))) * (_960 + 1.0))) + _965) * _846;
        _982 = _813;
        _984 = _812;
        _985 = _811;
        _986 = _823;
        _987 = _822;
        _988 = _821;
        _989 = _833;
        _990 = _832;
        _991 = _831;
        _992 = _846;
        _993 = _845;
        _994 = _844;
        _995 = cbModelParam._m0[36u].z * (isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0)));
        _996 = cbModelParam._m0[36u].z * (isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0)));
        _997 = cbModelParam._m0[36u].z * (isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0)));
    }
    else
    {
        _982 = _983;
        _984 = _983;
        _985 = _983;
        _986 = _983;
        _987 = _983;
        _988 = _983;
        _989 = _983;
        _990 = _983;
        _991 = _983;
        _992 = _983;
        _993 = _983;
        _994 = _983;
        _995 = 0.0;
        _996 = 0.0;
        _997 = 0.0;
    }
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1026 = fma(_652, cbModelParam._m0[30u].z, fma(_648, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _644));
        float _1030 = fma(_652, cbModelParam._m0[31u].z, fma(_648, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _644));
        float _1034 = fma(_652, cbModelParam._m0[32u].z, fma(_648, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _644));
        float _1057 = _644 + _396;
        float _1058 = _648 + _397;
        float _1059 = _652 + _398;
        float _1069 = fma(_1059, cbModelParam._m0[30u].z, fma(_1058, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1057)) - _1026;
        float _1070 = fma(_1059, cbModelParam._m0[31u].z, fma(_1058, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1057)) - _1030;
        float _1071 = fma(_1059, cbModelParam._m0[32u].z, fma(_1058, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1057)) - _1034;
        float _1075 = inversesqrt(dot(vec3(_1069, _1070, _1071), vec3(_1069, _1070, _1071)));
        float _1088 = ((_1075 * _1069) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1026 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1089 = ((_1075 * _1070) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1030 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1090 = ((_1075 * _1071) / cbModelParam._m0[35u].z) + ((((((_1034 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1092 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1088, _1089, _1090), 0.0);
        vec4 _1099 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1088, _1089, _1090), 0.0);
        vec4 _1106 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1088, _1089, _1090), 0.0);
        vec4 _1113 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1088, _1089, _1090), 0.0);
        float _1125 = exp2((_1092.w + (-0.5)) * 20.0) * 2.0;
        float _1126 = _1125 * (_1092.x + (-0.5));
        float _1127 = _1125 * (_1092.y + (-0.5));
        float _1128 = _1125 * (_1092.z + (-0.5));
        float _1135 = exp2((_1099.w + (-0.5)) * 20.0) * 2.0;
        float _1136 = _1135 * (_1099.x + (-0.5));
        float _1137 = _1135 * (_1099.y + (-0.5));
        float _1138 = _1135 * (_1099.z + (-0.5));
        float _1145 = exp2((_1106.w + (-0.5)) * 20.0) * 2.0;
        float _1146 = _1145 * (_1106.x + (-0.5));
        float _1147 = _1145 * (_1106.y + (-0.5));
        float _1148 = _1145 * (_1106.z + (-0.5));
        float _1155 = exp2((_1113.w + (-0.5)) * 20.0) * 2.0;
        float _1156 = _1155 * (_1113.x + (-0.5));
        float _1157 = _1155 * (_1113.y + (-0.5));
        float _1158 = _1155 * (_1113.z + (-0.5));
        float _1159 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1160 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1161 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1162 = _1126 * 0.5;
        float _1163 = _1136 * 0.5;
        float _1164 = _1146 * 0.5;
        float _1165 = dot(vec3(_1162, _1163, _1164), vec3(_1162, _1163, _1164));
        float _1170 = (_1165 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1165);
        float _1178 = (dot(vec3(_396, _397, _398), vec3(_1170 * _1162, _1170 * _1163, _1170 * _1164)) + 1.0) * 0.5;
        float _3681 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1187 = sqrt(((_1163 * _1163) + (_1162 * _1162)) + (_1164 * _1164)) / (_1159 + 9.9999997473787516355514526367188e-06);
        float _3692 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1188 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
        float _1189 = _1188 * 2.0;
        float _1193 = (1.0 - _1188) / (_1188 + 1.0);
        float _3703 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1194 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
        float _1203 = ((((1.0 - _1194) * (_1189 + 2.0)) * exp2(log2(isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0))) * (_1189 + 1.0))) + _1194) * _1159;
        float _1204 = _1127 * 0.5;
        float _1205 = _1137 * 0.5;
        float _1206 = _1147 * 0.5;
        float _1207 = dot(vec3(_1204, _1205, _1206), vec3(_1204, _1205, _1206));
        float _1212 = (_1207 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1207);
        float _1220 = (dot(vec3(_396, _397, _398), vec3(_1212 * _1204, _1212 * _1205, _1212 * _1206)) + 1.0) * 0.5;
        float _3714 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1229 = sqrt(((_1205 * _1205) + (_1204 * _1204)) + (_1206 * _1206)) / (_1160 + 9.9999997473787516355514526367188e-06);
        float _3725 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1230 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
        float _1231 = _1230 * 2.0;
        float _1235 = (1.0 - _1230) / (_1230 + 1.0);
        float _3736 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1236 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
        float _1245 = ((((1.0 - _1236) * (_1231 + 2.0)) * exp2(log2(isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0))) * (_1231 + 1.0))) + _1236) * _1160;
        float _1246 = _1128 * 0.5;
        float _1247 = _1138 * 0.5;
        float _1248 = _1148 * 0.5;
        float _1249 = dot(vec3(_1246, _1247, _1248), vec3(_1246, _1247, _1248));
        float _1254 = (_1249 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1249);
        float _1262 = (dot(vec3(_396, _397, _398), vec3(_1254 * _1246, _1254 * _1247, _1254 * _1248)) + 1.0) * 0.5;
        float _3747 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1271 = sqrt(((_1247 * _1247) + (_1246 * _1246)) + (_1248 * _1248)) / (_1161 + 9.9999997473787516355514526367188e-06);
        float _3758 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1272 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
        float _1273 = _1272 * 2.0;
        float _1277 = (1.0 - _1272) / (_1272 + 1.0);
        float _3769 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1278 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
        float _1287 = ((((1.0 - _1278) * (_1273 + 2.0)) * exp2(log2(isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0))) * (_1273 + 1.0))) + _1278) * _1161;
        _1295 = _1128;
        _1296 = _1127;
        _1297 = _1126;
        _1298 = _1138;
        _1299 = _1137;
        _1300 = _1136;
        _1301 = _1148;
        _1302 = _1147;
        _1303 = _1146;
        _1304 = _1161;
        _1305 = _1160;
        _1306 = _1159;
        _1307 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0)));
        _1308 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0)));
        _1309 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0)));
    }
    else
    {
        _1295 = _983;
        _1296 = _983;
        _1297 = _983;
        _1298 = _983;
        _1299 = _983;
        _1300 = _983;
        _1301 = _983;
        _1302 = _983;
        _1303 = _983;
        _1304 = _983;
        _1305 = _983;
        _1306 = _983;
        _1307 = 0.0;
        _1308 = 0.0;
        _1309 = 0.0;
    }
    float _1319 = (cbModelParam._m0[1u].x * (_1307 - _995)) + _995;
    float _1320 = (cbModelParam._m0[1u].x * (_1308 - _996)) + _996;
    float _1321 = (cbModelParam._m0[1u].x * (_1309 - _997)) + _997;
    float _1342 = fma(_1321, cbSceneParam._m0[89u].z, fma(_1320, cbSceneParam._m0[89u].y, _1319 * cbSceneParam._m0[89u].x));
    float _1345 = fma(_1321, cbSceneParam._m0[90u].z, fma(_1320, cbSceneParam._m0[90u].y, _1319 * cbSceneParam._m0[90u].x));
    float _1348 = fma(_1321, cbSceneParam._m0[91u].z, fma(_1320, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1319));
    float _1363 = _588 * 0.5;
    float _1364 = _589 * 0.5;
    float _1365 = _590 * 0.5;
    float _1366 = dot(vec4(_1363, _1364, _1365, 1.0), vec4(_1297, _1300, _1303, _1306));
    float _1369 = dot(vec4(_1363, _1364, _1365, 1.0), vec4(_1296, _1299, _1302, _1305));
    float _1372 = dot(vec4(_1363, _1364, _1365, 1.0), vec4(_1295, _1298, _1301, _1304));
    float _1406;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1379 = dot(vec4(_1363, _1364, _1365, 1.0), vec4(_982, _986, _989, _992));
        float _1383 = dot(vec4(_1363, _1364, _1365, 1.0), vec4(_984, _987, _990, _993));
        float _1387 = dot(vec4(_1363, _1364, _1365, 1.0), vec4(_985, _988, _991, _994));
        float _1394 = dot(vec4(cbModelParam._m0[39u]), vec4(_1363, _1364, _1365, 1.0));
        _1406 = dot(vec3(isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0)), isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0)), isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1394) ? 0.0 : (isnan(0.0) ? _1394 : max(0.0, _1394))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1406 = 1.0;
    }
    float _1417;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1408 = dot(vec4(cbModelParam._m0[40u]), vec4(_1363, _1364, _1365, 1.0));
        _1417 = dot(vec3(isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0)), isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0)), isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1408) ? 0.0 : (isnan(0.0) ? _1408 : max(0.0, _1408))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1417 = 1.0;
    }
    float _1421 = (_1417 * cbModelParam._m0[1u].x) + (_1406 * (1.0 - cbModelParam._m0[1u].x));
    float _1431 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _399);
    float _1432 = isnan(_1431) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1431 : min(cbModelParam._m0[25u].z, _1431));
    float _1513;
    float _1515;
    float _1517;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1480 = fma(_652, cbModelParam._m0[13u].z, fma(_648, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _644)) + cbModelParam._m0[13u].w;
        float _1484 = fma(_652, cbModelParam._m0[14u].z, fma(_648, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _644)) + cbModelParam._m0[14u].w;
        float _1488 = fma(_652, cbModelParam._m0[15u].z, fma(_648, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _644)) + cbModelParam._m0[15u].w;
        float _1491 = fma(_590, cbModelParam._m0[13u].z, fma(_589, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _588));
        float _1494 = fma(_590, cbModelParam._m0[14u].z, fma(_589, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _588));
        float _1497 = fma(_590, cbModelParam._m0[15u].z, fma(_589, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _588));
        float _1525;
        if (_1491 > 0.0)
        {
            _1525 = abs((1.0 - _1480) / _1491);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1491 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1480 + 1.0) / _1491);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1525 = frontier_phi_19_17_ladder;
        }
        float _1731;
        if (_1494 > 0.0)
        {
            _1731 = abs((1.0 - _1484) / _1494);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1494 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1484 + 1.0) / _1494);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1731 = frontier_phi_28_24_ladder;
        }
        float _1985;
        if (_1497 > 0.0)
        {
            _1985 = abs((1.0 - _1488) / _1497);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1497 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1488 + 1.0) / _1497);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1985 = frontier_phi_40_35_ladder;
        }
        float _1987 = isnan(_1731) ? _1525 : (isnan(_1525) ? _1731 : min(_1525, _1731));
        float _1988 = isnan(_1985) ? _1987 : (isnan(_1987) ? _1985 : min(_1987, _1985));
        float _1992 = (_1988 * _1491) + _1480;
        float _1993 = (_1988 * _1494) + _1484;
        float _1994 = (_1988 * _1497) + _1488;
        float _1995 = _1988 * 9.9999997473787516355514526367188e-05;
        float _1997 = (-1.0) - _1995;
        float _1999 = _1995 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1994 > _1999) || ((_1994 < _1997) || ((_1993 > _1999) || ((_1993 < _1997) || ((_1992 < _1997) || (_1992 > _1999))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2122 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1994, cbModelParam._m0[9u].z, fma(_1993, cbModelParam._m0[9u].y, _1992 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1994, cbModelParam._m0[10u].z, fma(_1993, cbModelParam._m0[10u].y, _1992 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1994, cbModelParam._m0[11u].z, fma(_1993, cbModelParam._m0[11u].y, _1992 * cbModelParam._m0[11u].x))), _1432);
            frontier_phi_18_40_ladder = _2122.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2122.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2122.x * cbModelParam._m0[1u].y;
        }
        _1513 = frontier_phi_18_40_ladder_2;
        _1515 = frontier_phi_18_40_ladder_1;
        _1517 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1501 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_588, _589, _590), _1432);
        _1513 = _1501.x * cbModelParam._m0[1u].y;
        _1515 = _1501.y * cbModelParam._m0[1u].y;
        _1517 = _1501.z * cbModelParam._m0[1u].y;
    }
    float _1521 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _399);
    float _1522 = isnan(_1521) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1521 : min(cbModelParam._m0[25u].w, _1521));
    float _1615;
    float _1617;
    float _1619;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1579 = fma(_652, cbModelParam._m0[21u].z, fma(_648, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _644)) + cbModelParam._m0[21u].w;
        float _1583 = fma(_652, cbModelParam._m0[22u].z, fma(_648, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _644)) + cbModelParam._m0[22u].w;
        float _1587 = fma(_652, cbModelParam._m0[23u].z, fma(_648, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _644)) + cbModelParam._m0[23u].w;
        float _1590 = fma(_590, cbModelParam._m0[21u].z, fma(_589, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _588));
        float _1593 = fma(_590, cbModelParam._m0[22u].z, fma(_589, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _588));
        float _1596 = fma(_590, cbModelParam._m0[23u].z, fma(_589, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _588));
        float _1736;
        if (_1590 > 0.0)
        {
            _1736 = abs((1.0 - _1579) / _1590);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1590 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1579 + 1.0) / _1590);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1736 = frontier_phi_30_26_ladder;
        }
        float _2012;
        if (_1593 > 0.0)
        {
            _2012 = abs((1.0 - _1583) / _1593);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1593 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1583 + 1.0) / _1593);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2012 = frontier_phi_42_37_ladder;
        }
        float _2225;
        if (_1596 > 0.0)
        {
            _2225 = abs((1.0 - _1587) / _1596);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1596 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1587 + 1.0) / _1596);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2225 = frontier_phi_51_48_ladder;
        }
        float _2227 = isnan(_2012) ? _1736 : (isnan(_1736) ? _2012 : min(_1736, _2012));
        float _2228 = isnan(_2225) ? _2227 : (isnan(_2227) ? _2225 : min(_2227, _2225));
        float _2232 = (_2228 * _1590) + _1579;
        float _2233 = (_2228 * _1593) + _1583;
        float _2234 = (_2228 * _1596) + _1587;
        float _2235 = _2228 * 9.9999997473787516355514526367188e-05;
        float _2236 = (-1.0) - _2235;
        float _2238 = _2235 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2234 > _2238) || ((_2234 < _2236) || ((_2233 > _2238) || ((_2233 < _2236) || ((_2232 < _2236) || (_2232 > _2238))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2432 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2234, cbModelParam._m0[17u].z, fma(_2233, cbModelParam._m0[17u].y, _2232 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2234, cbModelParam._m0[18u].z, fma(_2233, cbModelParam._m0[18u].y, _2232 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2234, cbModelParam._m0[19u].z, fma(_2233, cbModelParam._m0[19u].y, _2232 * cbModelParam._m0[19u].x))), _1522);
            frontier_phi_27_51_ladder = _2432.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2432.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2432.x * cbModelParam._m0[1u].z;
        }
        _1615 = frontier_phi_27_51_ladder_2;
        _1617 = frontier_phi_27_51_ladder_1;
        _1619 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1599 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_588, _589, _590), _1522);
        _1615 = _1599.x * cbModelParam._m0[1u].z;
        _1617 = _1599.y * cbModelParam._m0[1u].z;
        _1619 = _1599.z * cbModelParam._m0[1u].z;
    }
    float _1632 = (((_615 * _565) + _616) * _580) * ((cbModelParam._m0[1u].w * (_1615 - _1513)) + _1513);
    float _1634 = (((_615 * _567) + _616) * _580) * ((cbModelParam._m0[1u].w * (_1617 - _1515)) + _1515);
    float _1636 = (((_615 * _568) + _616) * _580) * ((cbModelParam._m0[1u].w * (_1619 - _1517)) + _1517);
    float _1639 = fma(_1636, cbSceneParam._m0[89u].z, fma(_1634, cbSceneParam._m0[89u].y, _1632 * cbSceneParam._m0[89u].x));
    float _1642 = fma(_1636, cbSceneParam._m0[90u].z, fma(_1634, cbSceneParam._m0[90u].y, _1632 * cbSceneParam._m0[90u].x));
    float _1645 = fma(_1636, cbSceneParam._m0[91u].z, fma(_1634, cbSceneParam._m0[91u].y, _1632 * cbSceneParam._m0[91u].x));
    uvec4 _1655 = floatBitsToUint(cbInstanceData._m0[_539 + 5u]);
    uint _1657 = _1655.x * 14u;
    uint _1658 = _1657 + 13u;
    float _1665 = _580 + (-1.0);
    float _1670 = (cbLight._m0[_1658].x * _1665) + 1.0;
    float _1671 = (cbLight._m0[_1658].y * _1665) + 1.0;
    float _1672 = (cbLight._m0[_1658].z * _1665) + 1.0;
    float _1673 = (cbLight._m0[_1658].w * _1665) + 1.0;
    uint _1674 = _1657 + 5u;
    float _1680 = isnan(1.0) ? _1671 : (isnan(_1671) ? 1.0 : min(_1671, 1.0));
    uint _1684 = _1657 + 4u;
    float _1690 = isnan(1.0) ? _1670 : (isnan(_1670) ? 1.0 : min(_1670, 1.0));
    uint _1694 = _1657 | 1u;
    float _1705 = dot(vec3(cbLight._m0[_1657].xyz), vec3(_396, _397, _398));
    float _1708 = dot(vec3(cbLight._m0[_1694].xyz), vec3(_396, _397, _398));
    float _3905 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
    float _3916 = isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0));
    float _1713 = (isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0))) * 0.3183098733425140380859375;
    float _1715 = (isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0))) * 0.3183098733425140380859375;
    float _1722 = ((cbLight._m0[_1674].x * _1680) * _1715) + ((cbLight._m0[_1684].x * _1690) * _1713);
    float _1723 = ((_1680 * cbLight._m0[_1674].y) * _1715) + ((_1690 * cbLight._m0[_1684].y) * _1713);
    float _1724 = ((_1680 * cbLight._m0[_1674].z) * _1715) + ((_1690 * cbLight._m0[_1684].z) * _1713);
    uvec4 _1728 = floatBitsToUint(cbLight._m0[_1657 + 12u]);
    bool _1730 = _1728.x == 0u;
    float _1741;
    float _1743;
    float _1745;
    if (_1730)
    {
        _1741 = _1722;
        _1743 = _1723;
        _1745 = _1724;
    }
    else
    {
        uint _1749 = _1657 + 6u;
        float _1765 = (dot(vec3(cbLight._m0[_1657 + 2u].xyz), vec3(_396, _397, _398)) * 0.5) + 0.5;
        float _1766 = _1765 * _1765;
        float _3927 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
        float _1767 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
        float _1768 = isnan(1.0) ? _1672 : (isnan(_1672) ? 1.0 : min(_1672, 1.0));
        _1741 = (((cbLight._m0[_1749].x * 0.3183098733425140380859375) * _1767) * _1768) + _1722;
        _1743 = (((cbLight._m0[_1749].y * 0.3183098733425140380859375) * _1767) * _1768) + _1723;
        _1745 = (((cbLight._m0[_1749].z * 0.3183098733425140380859375) * _1767) * _1768) + _1724;
    }
    bool _1748 = _1728.y == 0u;
    float _1786;
    float _1788;
    float _1790;
    if (_1748)
    {
        _1786 = _1741;
        _1788 = _1743;
        _1790 = _1745;
    }
    else
    {
        uint _1956 = _1657 + 7u;
        float _1972 = (dot(vec3(cbLight._m0[_1657 + 3u].xyz), vec3(_396, _397, _398)) * 0.5) + 0.5;
        float _1973 = _1972 * _1972;
        float _3943 = isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0));
        float _1974 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
        float _1975 = isnan(1.0) ? _1673 : (isnan(_1673) ? 1.0 : min(_1673, 1.0));
        _1786 = (((cbLight._m0[_1956].x * 0.3183098733425140380859375) * _1974) * _1975) + _1741;
        _1788 = (((cbLight._m0[_1956].y * 0.3183098733425140380859375) * _1974) * _1975) + _1743;
        _1790 = (((cbLight._m0[_1956].z * 0.3183098733425140380859375) * _1974) * _1975) + _1745;
    }
    uint _1793 = _1657 + 8u;
    float _1806 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1657].w)) * _399) * 0.949999988079071044921875);
    float _1807 = _1806 * _1806;
    float _1808 = cbLight._m0[_1657].x + _478;
    float _1809 = cbLight._m0[_1657].y + _479;
    float _1810 = cbLight._m0[_1657].z + _480;
    float _1814 = inversesqrt(dot(vec3(_1808, _1809, _1810), vec3(_1808, _1809, _1810)));
    float _1815 = _1814 * _1808;
    float _1816 = _1814 * _1809;
    float _1817 = _1814 * _1810;
    float _1818 = dot(vec3(_396, _397, _398), vec3(cbLight._m0[_1657].xyz));
    float _3959 = isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0));
    float _1821 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
    float _3970 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _1822 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
    float _1823 = dot(vec3(_396, _397, _398), vec3(_1815, _1816, _1817));
    float _3981 = isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0));
    float _1826 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
    float _1827 = dot(vec3(cbLight._m0[_1657].xyz), vec3(_1815, _1816, _1817));
    float _3992 = isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0));
    float _1831 = _1807 * _1807;
    float _1835 = ((_1826 * _1826) * (_1831 + (-1.0))) + 1.0;
    float _1843 = exp2(log2(1.0 - (isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0)))) * 5.0);
    float _1844 = 0.959999978542327880859375 - _562;
    float _1846 = 0.959999978542327880859375 - _563;
    float _1847 = 0.959999978542327880859375 - _564;
    float _1854 = 1.0 - _1807;
    float _1865 = (0.5 / (((_1822 * ((_1821 * _1854) + _1807)) + 9.9999999392252902907785028219223e-09) + (((_1822 * _1854) + _1807) * _1821))) * _1821;
    float _4003 = isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0));
    float _1867 = (isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0))) * (_1831 / ((_1835 * _1835) * 3.141590118408203125));
    uint _1878 = _1657 + 9u;
    float _1889 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1694].w)) * _399) * 0.949999988079071044921875);
    float _1890 = _1889 * _1889;
    float _1891 = cbLight._m0[_1694].x + _478;
    float _1892 = cbLight._m0[_1694].y + _479;
    float _1893 = cbLight._m0[_1694].z + _480;
    float _1897 = inversesqrt(dot(vec3(_1891, _1892, _1893), vec3(_1891, _1892, _1893)));
    float _1898 = _1897 * _1891;
    float _1899 = _1897 * _1892;
    float _1900 = _1897 * _1893;
    float _1901 = dot(vec3(_396, _397, _398), vec3(cbLight._m0[_1694].xyz));
    float _4014 = isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0));
    float _1904 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
    float _1905 = dot(vec3(_396, _397, _398), vec3(_1898, _1899, _1900));
    float _4025 = isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0));
    float _1908 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
    float _1909 = dot(vec3(cbLight._m0[_1694].xyz), vec3(_1898, _1899, _1900));
    float _4036 = isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0));
    float _1913 = _1890 * _1890;
    float _1917 = ((_1908 * _1908) * (_1913 + (-1.0))) + 1.0;
    float _1924 = exp2(log2(1.0 - (isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0)))) * 5.0);
    float _1931 = 1.0 - _1890;
    float _1941 = (0.5 / (((_1822 * ((_1904 * _1931) + _1890)) + 9.9999999392252902907785028219223e-09) + (((_1822 * _1931) + _1890) * _1904))) * _1904;
    float _4047 = isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0));
    float _1943 = (isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0))) * (_1913 / ((_1917 * _1917) * 3.141590118408203125));
    float _1953 = (((((_1924 * _1844) + _565) * cbLight._m0[_1878].x) * _1943) * _1680) + (((((_1843 * _1844) + _565) * cbLight._m0[_1793].x) * _1867) * _1690);
    float _1954 = (((((_1924 * _1846) + _567) * cbLight._m0[_1878].y) * _1943) * _1680) + (((((_1843 * _1846) + _567) * cbLight._m0[_1793].y) * _1867) * _1690);
    float _1955 = (((((_1924 * _1847) + _568) * cbLight._m0[_1878].z) * _1943) * _1680) + (((((_1843 * _1847) + _568) * cbLight._m0[_1793].z) * _1867) * _1690);
    float _2017;
    float _2019;
    float _2021;
    if (_1730)
    {
        _2017 = _1953;
        _2019 = _1954;
        _2021 = _1955;
    }
    else
    {
        uint _2023 = _1657 + 2u;
        uint _2027 = _1657 + 10u;
        float _2041 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2023].w)) * _399) * 0.949999988079071044921875);
        float _2042 = _2041 * _2041;
        float _2043 = cbLight._m0[_2023].x + _478;
        float _2044 = cbLight._m0[_2023].y + _479;
        float _2045 = cbLight._m0[_2023].z + _480;
        float _2049 = inversesqrt(dot(vec3(_2043, _2044, _2045), vec3(_2043, _2044, _2045)));
        float _2050 = _2049 * _2043;
        float _2051 = _2049 * _2044;
        float _2052 = _2049 * _2045;
        float _2053 = dot(vec3(_396, _397, _398), vec3(cbLight._m0[_2023].xyz));
        float _4058 = isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0));
        float _2056 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
        float _2057 = dot(vec3(_396, _397, _398), vec3(_2050, _2051, _2052));
        float _4069 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
        float _2060 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
        float _2061 = dot(vec3(cbLight._m0[_2023].xyz), vec3(_2050, _2051, _2052));
        float _4080 = isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0));
        float _2065 = _2042 * _2042;
        float _2069 = ((_2060 * _2060) * (_2065 + (-1.0))) + 1.0;
        float _2076 = exp2(log2(1.0 - (isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0)))) * 5.0);
        float _2083 = 1.0 - _2042;
        float _2093 = (0.5 / (((_1822 * ((_2056 * _2083) + _2042)) + 9.9999999392252902907785028219223e-09) + (((_1822 * _2083) + _2042) * _2056))) * _2056;
        float _4091 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
        float _2095 = (isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0))) * (_2065 / ((_2069 * _2069) * 3.141590118408203125));
        float _2096 = isnan(1.0) ? _1672 : (isnan(_1672) ? 1.0 : min(_1672, 1.0));
        _2017 = (((((_2076 * _1844) + _565) * cbLight._m0[_2027].x) * _2095) * _2096) + _1953;
        _2019 = (((((_2076 * _1846) + _567) * cbLight._m0[_2027].y) * _2095) * _2096) + _1954;
        _2021 = (((((_2076 * _1847) + _568) * cbLight._m0[_2027].z) * _2095) * _2096) + _1955;
    }
    float _2131;
    float _2133;
    float _2135;
    if (_1748)
    {
        _2131 = _2017;
        _2133 = _2019;
        _2135 = _2021;
    }
    else
    {
        uint _2142 = _1657 + 3u;
        uint _2146 = _1657 + 11u;
        float _2160 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2142].w)) * _399) * 0.949999988079071044921875);
        float _2161 = _2160 * _2160;
        float _2162 = cbLight._m0[_2142].x + _478;
        float _2163 = cbLight._m0[_2142].y + _479;
        float _2164 = cbLight._m0[_2142].z + _480;
        float _2168 = inversesqrt(dot(vec3(_2162, _2163, _2164), vec3(_2162, _2163, _2164)));
        float _2169 = _2168 * _2162;
        float _2170 = _2168 * _2163;
        float _2171 = _2168 * _2164;
        float _2172 = dot(vec3(_396, _397, _398), vec3(cbLight._m0[_2142].xyz));
        float _4107 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
        float _2175 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
        float _2176 = dot(vec3(_396, _397, _398), vec3(_2169, _2170, _2171));
        float _4118 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
        float _2179 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
        float _2180 = dot(vec3(cbLight._m0[_2142].xyz), vec3(_2169, _2170, _2171));
        float _4129 = isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0));
        float _2184 = _2161 * _2161;
        float _2188 = ((_2179 * _2179) * (_2184 + (-1.0))) + 1.0;
        float _2195 = exp2(log2(1.0 - (isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0)))) * 5.0);
        float _2202 = 1.0 - _2161;
        float _2212 = (0.5 / (((_1822 * ((_2175 * _2202) + _2161)) + 9.9999999392252902907785028219223e-09) + (((_1822 * _2202) + _2161) * _2175))) * _2175;
        float _4140 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
        float _2214 = (isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0))) * (_2184 / ((_2188 * _2188) * 3.141590118408203125));
        float _2215 = isnan(1.0) ? _1673 : (isnan(_1673) ? 1.0 : min(_1673, 1.0));
        _2131 = (((((_2195 * _1844) + _565) * cbLight._m0[_2146].x) * _2214) * _2215) + _2017;
        _2133 = (((((_2195 * _1846) + _567) * cbLight._m0[_2146].y) * _2214) * _2215) + _2019;
        _2135 = (((((_2195 * _1847) + _568) * cbLight._m0[_2146].z) * _2214) * _2215) + _2021;
    }
    float _2349;
    float _2351;
    float _2353;
    float _2355;
    float _2357;
    float _2359;
    if (_1655.y == 0u)
    {
        float _2290 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2291 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2290;
        float _2292 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2290;
        float _2293 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2290;
        uvec4 _2305 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2306 = _2305.x;
        uint _2317 = uint((float(_2305.y) * floor(float(uint(cbSceneParam._m0[85u].y * _500) / _2306))) + floor(float(uint(cbSceneParam._m0[85u].x * _499) / _2306)));
        float _2327 = (log2(_2293 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2328 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
        uint _2331 = uint(isnan(14.0) ? _2328 : (isnan(_2328) ? 14.0 : min(_2328, 14.0)));
        uvec4 _2336 = texelFetch(g_lightClusterGridBuffer, int(((_2331 << 2u) + (_2317 << 6u)) >> 2u));
        uint _2337 = _2336.x;
        uint _2338 = _2305.z;
        float _2437;
        float _2439;
        float _2441;
        float _2443;
        float _2445;
        float _2447;
        if (((((1u << ((_2338 >> 4u) & 15u)) + 4294967295u) & _2337) == 0u) || ((_2338 & 240u) == 0u))
        {
            _2437 = 0.0;
            _2439 = 0.0;
            _2441 = 0.0;
            _2443 = 0.0;
            _2445 = 0.0;
            _2447 = 0.0;
        }
        else
        {
            float _2438;
            float _2440;
            float _2442;
            float _2444;
            float _2446;
            float _2448;
            float _2589 = 0.0;
            float _2590 = 0.0;
            float _2591 = 0.0;
            float _2592 = 0.0;
            float _2593 = 0.0;
            float _2594 = 0.0;
            uint _2595 = 0u;
            uint _2604;
            bool _2605;
            for (;;)
            {
                _2604 = texelFetch(g_lightClassification, int((((_2331 << 5u) + (_2317 << 9u)) + (_2595 << 2u)) >> 2u)).x;
                _2605 = _2604 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2605)
                {
                    frontier_phi_68_pred = _2591;
                    frontier_phi_68_pred_1 = _2594;
                    frontier_phi_68_pred_2 = _2593;
                    frontier_phi_68_pred_3 = _2592;
                    frontier_phi_68_pred_4 = _2590;
                    frontier_phi_68_pred_5 = _2589;
                }
                else
                {
                    float _2734;
                    float _2735;
                    float _2736;
                    float _2737;
                    float _2738;
                    float _2739;
                    uint _2740;
                    _2734 = _2589;
                    _2735 = _2590;
                    _2736 = _2591;
                    _2737 = _2592;
                    _2738 = _2593;
                    _2739 = _2594;
                    _2740 = _2604;
                    float _2661;
                    float _2662;
                    float _2663;
                    float _2664;
                    float _2665;
                    float _2666;
                    for (;;)
                    {
                        uint _2744 = uint(findLSB(_2740)) + (_2595 << 5u);
                        uint _2741 = (_2740 + 4294967295u) & _2740;
                        uint _2746 = _2744 * 48u;
                        vec4 _2760 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2746)).x, texelFetch(g_PointLightRenderingBuffer, int(_2746 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2746 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2746 + 3u)).x));
                        uint _2766 = (_2744 * 48u) + 4u;
                        vec4 _2779 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2766)).x, texelFetch(g_PointLightRenderingBuffer, int(_2766 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2766 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2766 + 3u)).x));
                        uint _2785 = (_2744 * 48u) + 8u;
                        vec3 _2796 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2785)).x, texelFetch(g_PointLightRenderingBuffer, int(_2785 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2785 + 2u)).x));
                        float _2800 = _2760.x - _2291;
                        float _2801 = _2760.y - _2292;
                        float _2802 = _2760.z - _2293;
                        float _2803 = dot(vec3(_2800, _2801, _2802), vec3(_2800, _2801, _2802));
                        float _2806 = inversesqrt(_2803);
                        float _2807 = _2806 * _2800;
                        float _2808 = _2806 * _2801;
                        float _2809 = _2806 * _2802;
                        float _2810 = dot(vec3(_520, _523, _526), vec3(_2807, _2808, _2809));
                        float _2815 = 1.0 - (_2803 * _2760.w);
                        float _4166 = isnan(0.0) ? _2815 : (isnan(_2815) ? 0.0 : max(_2815, 0.0));
                        float _2816 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
                        float _2817 = sqrt(_2803) * _2779.w;
                        float _2820 = 1.39999997615814208984375 / (_2817 + 1.39999997615814208984375);
                        float _2821 = _2820 * _2820;
                        float _2824 = ((1.0 - _2821) * _2810) + _2821;
                        float _2827 = _2817 * _2817;
                        float _2831 = ((isnan(0.0) ? _2824 : (isnan(_2824) ? 0.0 : max(_2824, 0.0))) * _2816) / ((_2827 * 0.699999988079071044921875) + 1.0);
                        float _2835 = (-0.0) - _2291;
                        float _2836 = (-0.0) - _2292;
                        float _2837 = (-0.0) - _2293;
                        float _2841 = inversesqrt(dot(vec3(_2835, _2836, _2837), vec3(_2835, _2836, _2837)));
                        float _2842 = _2841 * _2835;
                        float _2843 = _2841 * _2836;
                        float _2844 = _2841 * _2837;
                        float _2852 = exp2(log2(1.0 / ((_2827 * 3.5) + 5.0)) * 0.25);
                        float _2853 = 1.0 - _596;
                        float _2860 = sqrt(1.0 - ((1.0 - (_2853 * _2853)) * (1.0 - (_2852 * _2852))));
                        float _2861 = _2860 * _2860;
                        float _2862 = _2861 * _2861;
                        float _2863 = _2842 + _2807;
                        float _2864 = _2843 + _2808;
                        float _2865 = _2844 + _2809;
                        float _2869 = inversesqrt(dot(vec3(_2863, _2864, _2865), vec3(_2863, _2864, _2865)));
                        float _2873 = dot(vec3(_520, _523, _526), vec3(_2842, _2843, _2844));
                        float _4182 = isnan(0.0) ? _2873 : (isnan(_2873) ? 0.0 : max(_2873, 0.0));
                        float _2876 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
                        float _2877 = dot(vec3(_520, _523, _526), vec3(_2869 * _2863, _2869 * _2864, _2869 * _2865));
                        float _4193 = isnan(0.0) ? _2877 : (isnan(_2877) ? 0.0 : max(_2877, 0.0));
                        float _2880 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
                        float _2884 = ((_2880 * _2880) * (_2862 + (-1.0))) + 1.0;
                        float _2885 = _2820 * _2861;
                        float _2886 = _2885 * _2885;
                        float _2889 = ((1.0 - _2886) * _2810) + _2886;
                        float _4204 = isnan(0.0) ? _2889 : (isnan(_2889) ? 0.0 : max(_2889, 0.0));
                        float _2890 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
                        float _2891 = 1.0 - _2861;
                        float _2901 = (0.5 / (((_2890 * ((_2876 * _2891) + _2861)) + 9.9999999392252902907785028219223e-09) + (((_2890 * _2891) + _2861) * _2876))) * _2890;
                        float _4215 = isnan(0.0) ? _2901 : (isnan(_2901) ? 0.0 : max(_2901, 0.0));
                        float _2912 = (((_2862 * 3.1415927410125732421875) * (isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0)))) / ((_2884 * _2884) * ((_2827 * 2.1991131305694580078125) + 3.141590118408203125))) * _2816;
                        _2664 = (_2831 * _2779.x) + _2737;
                        _2665 = (_2831 * _2779.y) + _2738;
                        _2666 = (_2831 * _2779.z) + _2739;
                        _2661 = (_2912 * _2796.x) + _2734;
                        _2662 = (_2912 * _2796.y) + _2735;
                        _2663 = (_2912 * _2796.z) + _2736;
                        if (_2741 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2734 = _2661;
                            _2735 = _2662;
                            _2736 = _2663;
                            _2737 = _2664;
                            _2738 = _2665;
                            _2739 = _2666;
                            _2740 = _2741;
                        }
                    }
                    frontier_phi_68_pred = _2663;
                    frontier_phi_68_pred_1 = _2666;
                    frontier_phi_68_pred_2 = _2665;
                    frontier_phi_68_pred_3 = _2664;
                    frontier_phi_68_pred_4 = _2662;
                    frontier_phi_68_pred_5 = _2661;
                }
                _2442 = frontier_phi_68_pred;
                _2448 = frontier_phi_68_pred_1;
                _2446 = frontier_phi_68_pred_2;
                _2444 = frontier_phi_68_pred_3;
                _2440 = frontier_phi_68_pred_4;
                _2438 = frontier_phi_68_pred_5;
                uint _2596 = _2595 + 1u;
                if (_2596 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2589 = _2438;
                    _2590 = _2440;
                    _2591 = _2442;
                    _2592 = _2444;
                    _2593 = _2446;
                    _2594 = _2448;
                    _2595 = _2596;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2437 = _2438;
            _2439 = _2440;
            _2441 = _2442;
            _2443 = _2444;
            _2445 = _2446;
            _2447 = _2448;
        }
        uvec4 _2451 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2452 = _2451.z;
        uint _2454 = (_2452 >> 8u) & 15u;
        float _2557;
        float _2559;
        float _2561;
        float _2563;
        float _2565;
        float _2567;
        if (((4294967295u << _2454) & _2337) == 0u)
        {
            _2557 = _2437;
            _2559 = _2439;
            _2561 = _2441;
            _2563 = _2443;
            _2565 = _2445;
            _2567 = _2447;
        }
        else
        {
            float _2582 = inversesqrt(dot(vec3(_2291, _2292, _2293), vec3(_2291, _2292, _2293)));
            float _2583 = _2582 * _2291;
            float _2584 = _2582 * _2292;
            float _2585 = _2582 * _2293;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2454 < ((_2452 >> 12u) & 15u))
            {
                float _2558;
                float _2560;
                float _2562;
                float _2564;
                float _2566;
                float _2568;
                float _2717 = _2437;
                float _2718 = _2439;
                float _2719 = _2441;
                float _2720 = _2443;
                float _2721 = _2445;
                float _2722 = _2447;
                uint _2723 = _2454;
                uint _2732;
                bool _2733;
                for (;;)
                {
                    _2732 = texelFetch(g_lightClassification, int((((_2331 << 5u) + (_2317 << 9u)) + (_2723 << 2u)) >> 2u)).x;
                    _2733 = _2732 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2733)
                    {
                        frontier_phi_79_pred = _2722;
                        frontier_phi_79_pred_1 = _2721;
                        frontier_phi_79_pred_2 = _2720;
                        frontier_phi_79_pred_3 = _2719;
                        frontier_phi_79_pred_4 = _2718;
                        frontier_phi_79_pred_5 = _2717;
                    }
                    else
                    {
                        float _2926;
                        float _2927;
                        float _2928;
                        float _2929;
                        float _2930;
                        float _2931;
                        float _3222;
                        float _3223;
                        float _3224;
                        float _3225;
                        float _3226;
                        float _3227;
                        float _2939 = _2717;
                        float _2940 = _2718;
                        float _2941 = _2719;
                        float _2942 = _2720;
                        float _2943 = _2721;
                        float _2944 = _2722;
                        uint _2945 = _2732;
                        uint _2946;
                        vec4 _2971;
                        float _2972;
                        vec4 _2987;
                        vec3 _2999;
                        vec4 _3015;
                        vec4 _3031;
                        float _3078;
                        bool _3079;
                        for (;;)
                        {
                            uint _2956 = ((_2723 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2945));
                            _2946 = (_2945 + 4294967295u) & _2945;
                            uint _2958 = _2956 * 40u;
                            _2971 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2958)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2958 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2958 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2958 + 3u)).x));
                            _2972 = _2971.w;
                            uint _2974 = (_2956 * 40u) + 4u;
                            _2987 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2974)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2974 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2974 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2974 + 3u)).x));
                            uint _2989 = (_2956 * 40u) + 8u;
                            _2999 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2989)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2989 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2989 + 2u)).x));
                            uint _3002 = (_2956 * 40u) + 16u;
                            _3015 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3002)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 3u)).x));
                            uint _3018 = (_2956 * 40u) + 20u;
                            _3031 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3018)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3018 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3018 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3018 + 3u)).x));
                            uint _3034 = (_2956 * 40u) + 24u;
                            vec4 _3047 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3034)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3034 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3034 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3034 + 3u)).x));
                            uint _3053 = (_2956 * 40u) + 28u;
                            vec4 _3066 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3053)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 3u)).x));
                            _3078 = fma(_2293, _3066.z, fma(_2292, _3066.y, _3066.x * _2291)) + _3066.w;
                            _3079 = !((fma(_2293, _3047.z, fma(_2292, _3047.y, _3047.x * _2291)) + _3047.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3079)
                            {
                                float _3106 = _2971.x - _2291;
                                float _3107 = _2971.y - _2292;
                                float _3108 = _2971.z - _2293;
                                float _3109 = dot(vec3(_3106, _3107, _3108), vec3(_3106, _3107, _3108));
                                float _3112 = inversesqrt(_3109);
                                float _3113 = _3112 * _3106;
                                float _3114 = _3112 * _3107;
                                float _3115 = _3112 * _3108;
                                float _3119 = 1.0 - (_3109 / (_2972 * _2972));
                                float _4226 = isnan(0.0) ? _3119 : (isnan(_3119) ? 0.0 : max(_3119, 0.0));
                                float _3120 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
                                float _3124 = sqrt(_3109) * _2987.w;
                                float _3126 = 1.39999997615814208984375 / (_3124 + 1.39999997615814208984375);
                                float _3127 = _3126 * _3126;
                                float _3130 = ((1.0 - _3127) * dot(vec3(_3113, _3114, _3115), vec3(_520, _523, _526))) + _3127;
                                float _3133 = _3124 * _3124;
                                float _3137 = (fma(_2293, _3015.z, fma(_2292, _3015.y, _3015.x * _2291)) + _3015.w) / _3078;
                                float _3138 = (fma(_2293, _3031.z, fma(_2292, _3031.y, _3031.x * _2291)) + _3031.w) / _3078;
                                float _3142 = 1.0 - dot(vec2(_3137, _3138), vec2(_3137, _3138));
                                float _4242 = isnan(0.0) ? _3142 : (isnan(_3142) ? 0.0 : max(_3142, 0.0));
                                float _3143 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
                                float _3144 = _3143 * (((isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : max(_3130, 0.0))) * _3120) / ((_3133 * 0.699999988079071044921875) + 1.0));
                                float _3156 = exp2(log2(1.0 / ((_3133 * 3.5) + 5.0)) * 0.25);
                                float _3157 = 1.0 - _596;
                                float _3164 = sqrt(1.0 - ((1.0 - (_3157 * _3157)) * (1.0 - (_3156 * _3156))));
                                float _3165 = _3164 * _3164;
                                float _3166 = _3165 * _3165;
                                float _3167 = _3113 - _2583;
                                float _3168 = _3114 - _2584;
                                float _3169 = _3115 - _2585;
                                float _3173 = inversesqrt(dot(vec3(_3167, _3168, _3169), vec3(_3167, _3168, _3169)));
                                float _3177 = dot(vec3(_520, _523, _526), vec3((-0.0) - _2583, (-0.0) - _2584, (-0.0) - _2585));
                                float _4253 = isnan(0.0) ? _3177 : (isnan(_3177) ? 0.0 : max(_3177, 0.0));
                                float _3180 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
                                float _3181 = dot(vec3(_520, _523, _526), vec3(_3173 * _3167, _3173 * _3168, _3173 * _3169));
                                float _4264 = isnan(0.0) ? _3181 : (isnan(_3181) ? 0.0 : max(_3181, 0.0));
                                float _3184 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
                                float _3188 = ((_3184 * _3184) * (_3166 + (-1.0))) + 1.0;
                                float _3189 = _3126 * _3165;
                                float _3190 = _3189 * _3189;
                                float _3196 = ((1.0 - _3190) * dot(vec3(_520, _523, _526), vec3(_3113, _3114, _3115))) + _3190;
                                float _4275 = isnan(0.0) ? _3196 : (isnan(_3196) ? 0.0 : max(_3196, 0.0));
                                float _3197 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
                                float _3198 = 1.0 - _3165;
                                float _3208 = (0.5 / (((_3197 * ((_3180 * _3198) + _3165)) + 9.9999999392252902907785028219223e-09) + (((_3197 * _3198) + _3165) * _3180))) * _3197;
                                float _4286 = isnan(0.0) ? _3208 : (isnan(_3208) ? 0.0 : max(_3208, 0.0));
                                float _3218 = (_3143 * _3120) * (((_3166 * 3.1415927410125732421875) * (isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0)))) / ((_3188 * _3188) * ((_3133 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3144 * _2987.z;
                                frontier_phi_85_pred_1 = _3144 * _2987.y;
                                frontier_phi_85_pred_2 = _3144 * _2987.x;
                                frontier_phi_85_pred_3 = _3218 * _2999.z;
                                frontier_phi_85_pred_4 = _3218 * _2999.y;
                                frontier_phi_85_pred_5 = _3218 * _2999.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3227 = frontier_phi_85_pred;
                            _3226 = frontier_phi_85_pred_1;
                            _3225 = frontier_phi_85_pred_2;
                            _3224 = frontier_phi_85_pred_3;
                            _3223 = frontier_phi_85_pred_4;
                            _3222 = frontier_phi_85_pred_5;
                            _2929 = _3225 + _2942;
                            _2930 = _3226 + _2943;
                            _2931 = _3227 + _2944;
                            _2926 = _3222 + _2939;
                            _2927 = _3223 + _2940;
                            _2928 = _3224 + _2941;
                            if (_2946 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2939 = _2926;
                                _2940 = _2927;
                                _2941 = _2928;
                                _2942 = _2929;
                                _2943 = _2930;
                                _2944 = _2931;
                                _2945 = _2946;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2931;
                        frontier_phi_79_pred_1 = _2930;
                        frontier_phi_79_pred_2 = _2929;
                        frontier_phi_79_pred_3 = _2928;
                        frontier_phi_79_pred_4 = _2927;
                        frontier_phi_79_pred_5 = _2926;
                    }
                    _2568 = frontier_phi_79_pred;
                    _2566 = frontier_phi_79_pred_1;
                    _2564 = frontier_phi_79_pred_2;
                    _2562 = frontier_phi_79_pred_3;
                    _2560 = frontier_phi_79_pred_4;
                    _2558 = frontier_phi_79_pred_5;
                    uint _2724 = _2723 + 1u;
                    if (_2724 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2717 = _2558;
                        _2718 = _2560;
                        _2719 = _2562;
                        _2720 = _2564;
                        _2721 = _2566;
                        _2722 = _2568;
                        _2723 = _2724;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2564;
                frontier_phi_60_61_ladder_1 = _2568;
                frontier_phi_60_61_ladder_2 = _2566;
                frontier_phi_60_61_ladder_3 = _2562;
                frontier_phi_60_61_ladder_4 = _2560;
                frontier_phi_60_61_ladder_5 = _2558;
            }
            else
            {
                frontier_phi_60_61_ladder = _2443;
                frontier_phi_60_61_ladder_1 = _2447;
                frontier_phi_60_61_ladder_2 = _2445;
                frontier_phi_60_61_ladder_3 = _2441;
                frontier_phi_60_61_ladder_4 = _2439;
                frontier_phi_60_61_ladder_5 = _2437;
            }
            _2557 = frontier_phi_60_61_ladder_5;
            _2559 = frontier_phi_60_61_ladder_4;
            _2561 = frontier_phi_60_61_ladder_3;
            _2563 = frontier_phi_60_61_ladder;
            _2565 = frontier_phi_60_61_ladder_2;
            _2567 = frontier_phi_60_61_ladder_1;
        }
        float _2572 = isnan(1.0) ? _580 : (isnan(_580) ? 1.0 : min(_580, 1.0));
        _2349 = (_2572 * _2563) + _1786;
        _2351 = (_2572 * _2565) + _1788;
        _2353 = (_2572 * _2567) + _1790;
        _2355 = ((_2557 * _565) * _2572) + _2131;
        _2357 = ((_2559 * _567) * _2572) + _2133;
        _2359 = ((_2561 * _568) * _2572) + _2135;
    }
    else
    {
        _2349 = _1786;
        _2351 = _1788;
        _2353 = _1790;
        _2355 = _2131;
        _2357 = _2133;
        _2359 = _2135;
    }
    float _4302 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
    float _4313 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _4324 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _2376 = ((isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0))) * (_2349 + ((isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0))) * _580))) + ((_2355 + ((isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0))) * _1421)) * cbPerFrame._m0[3u].x);
    float _2377 = ((isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0))) * (_2351 + ((isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0))) * _580))) + ((_2357 + ((isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0))) * _1421)) * cbPerFrame._m0[3u].x);
    float _2378 = ((isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0))) * (_2353 + ((isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0))) * _580))) + ((_2359 + ((isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0))) * _1421)) * cbPerFrame._m0[3u].x);
    uint _2379 = _539 + 6u;
    float _2387 = _499 / cbSceneParam._m0[86u].x;
    float _2388 = _500 / cbSceneParam._m0[86u].y;
    vec4 _2402 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2387, _2388, (log2((isnan(cbSceneParam._m0[77u].w) ? _419 : (isnan(_419) ? cbSceneParam._m0[77u].w : min(_419, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2404 = _2402.x;
    float _2405 = _2402.y;
    float _2406 = _2402.z;
    float _2407 = _2402.w;
    float _2499;
    float _2501;
    float _2503;
    float _2505;
    if (_419 > cbSceneParam._m0[78u].w)
    {
        float _2462 = isnan(_419) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _419 : min(cbSceneParam._m0[80u].w, _419));
        float _2463 = _2462 / _419;
        float _2474 = _2463 * _471;
        float _2475 = _472 * _2463;
        float _2476 = (-0.0) - _2475;
        float _2477 = _2463 * _473;
        float _2479 = (cbSceneParam._m0[77u].w * _2476) / _2462;
        float _2480 = _2479 + cbSceneParam._m0[79u].w;
        float _2481 = cbSceneParam._m0[79u].w - _2475;
        float _2487 = sqrt(((_2474 * _2474) + (_2475 * _2475)) + (_2477 * _2477));
        float _2490 = (1.0 - (cbSceneParam._m0[77u].w / _2462)) * _2487;
        float _2495 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2497 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2674;
        if (abs((_2476 - _2479) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2674 = ((((_2480 > 0.0) ? exp2(_2495 * _2480) : (2.0 - exp2(_2497 * _2480))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2490;
        }
        else
        {
            float _2618 = 1.0 / cbSceneParam._m0[80u].x;
            float _2619 = isnan(_2481) ? _2480 : (isnan(_2480) ? _2481 : max(_2480, _2481));
            float _2620 = isnan(_2481) ? _2480 : (isnan(_2480) ? _2481 : min(_2480, _2481));
            float _2629 = isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : min(_2619, 0.0));
            float _2630 = isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : min(_2620, 0.0));
            _2674 = ((abs(_2487 / _2476) * cbSceneParam._m0[80u].y) * ((((_2629 - _2630) * 2.0) - ((exp2(_2495 * (isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0)))) - exp2(_2495 * (isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0))))) * _2618)) - ((exp2(_2497 * _2629) - exp2(_2497 * _2630)) * _2618))) + (_2490 * cbSceneParam._m0[80u].z);
        }
        vec4 _2676 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2387, _2388, 1.0), 0.0);
        float _2685 = exp2((_2674 * (-1.44269502162933349609375)) * (1.0 - _2676.w));
        float _2686 = log2(_2685);
        float _2702 = log2(_2407);
        _2499 = (exp2(_2702 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2686 * cbSceneParam._m0[78u].x)) * _2676.x) / cbSceneParam._m0[78u].x)) + _2404;
        _2501 = (exp2(_2702 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2686 * cbSceneParam._m0[78u].y)) * _2676.y) / cbSceneParam._m0[78u].y)) + _2405;
        _2503 = (exp2(_2702 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2686 * cbSceneParam._m0[78u].z)) * _2676.z) / cbSceneParam._m0[78u].z)) + _2406;
        _2505 = _2685 * _2407;
    }
    else
    {
        _2499 = _2404;
        _2501 = _2405;
        _2503 = _2406;
        _2505 = _2407;
    }
    bool _2712;
    vec4 _2515;
    vec4 _2537;
    float _2539;
    float _2543;
    float _2544;
    float _2545;
    float _2546;
    bool _2556;
    for (;;)
    {
        _2515 = cbMatDynParam._m0[0u];
        float _2517 = roundEven(_2515.y);
        bool _2518 = _2517 == 3.0;
        float _2519 = log2(_2505);
        float _2526 = exp2(_2519 * cbSceneParam._m0[78u].x) * _2376;
        float _2527 = exp2(_2519 * cbSceneParam._m0[78u].y) * _2377;
        float _2528 = exp2(_2519 * cbSceneParam._m0[78u].z) * _2378;
        float _2535 = _487 + (-0.5);
        _2537 = cbMtdParam._m0[1u];
        _2539 = _2537.y * _2535;
        float _2542 = (_2517 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2543 = _2542 * (_2518 ? _2526 : (_2526 + (cbSceneParam._m0[72u].w * _2499)));
        _2544 = _2542 * (_2518 ? _2527 : (_2527 + (cbSceneParam._m0[72u].w * _2501)));
        _2545 = _2542 * (_2518 ? _2528 : (_2528 + (cbSceneParam._m0[72u].w * _2503)));
        _2546 = _2535 * 0.999000012874603271484375;
        _2556 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2556)
        {
            if ((cbInstanceData._m0[_539 + 7u].x + _2546) < 0.5)
            {
                _2712 = true;
                break;
            }
        }
        uint _2653 = _541 + uint(_2515.w);
        if ((cbInstanceData._m0[_2653].w < 1.0) && ((cbInstanceData._m0[_2653].w + _2546) < 0.5))
        {
            _2712 = true;
            break;
        }
        if ((_2539 + _252) < _2537.x)
        {
            _2712 = true;
            break;
        }
        _2712 = false;
        break;
    }
    float _2917;
    if (_2712)
    {
        discard_state = true;
        _2917 = 0.0;
    }
    else
    {
        _2917 = cbInstanceData._m0[_2379].w;
    }
    SV_Target.x = _2543;
    SV_Target.y = _2544;
    SV_Target.z = _2545;
    SV_Target.w = _2917;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2379].w;
    discard_exit();
}


