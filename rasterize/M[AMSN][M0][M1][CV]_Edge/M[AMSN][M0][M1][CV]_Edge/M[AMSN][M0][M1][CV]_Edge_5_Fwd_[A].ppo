#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _946;
float _3313;
float _3314;
float _3315;
float _3316;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _194 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _201 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _202 = _201 * NORMAL.x;
    float _203 = _201 * NORMAL.y;
    float _204 = _201 * NORMAL.z;
    float _208 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _216;
    float _217;
    float _218;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _216 = (-0.0) - _202;
        _217 = (-0.0) - _203;
        _218 = (-0.0) - _204;
    }
    else
    {
        _216 = _202;
        _217 = _203;
        _218 = _204;
    }
    vec4 _244 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _250 = _244.w;
    float _251 = _244.x * cbMtdParam._m0[9u].x;
    float _252 = _244.y * cbMtdParam._m0[9u].y;
    float _253 = _244.z * cbMtdParam._m0[9u].z;
    vec4 _265 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _269 = _265.z;
    float _273 = (_265.x * 2.0) + (-1.0);
    float _275 = (_265.y * 2.0) + (-1.0);
    float _276 = dot(vec2(_273, _275), vec2(_273, _275));
    float _3325 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _282 = sqrt(1.0 - (isnan(1.0) ? _3325 : (isnan(_3325) ? 1.0 : min(_3325, 1.0))));
    float _311 = (TEXCOORD_3.x - ((cbMtdParam._m0[12u].y * (1.0 - TEXCOORD_3.x)) * ((texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w)).x * cbMtdParam._m0[12u].y) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[12u].z + 1.0);
    float _3336 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    float _312 = isnan(1.0) ? _3336 : (isnan(_3336) ? 1.0 : min(_3336, 1.0));
    float _319 = (_312 * (cbMtdParam._m0[10u].x - _251)) + _251;
    float _320 = (_312 * (cbMtdParam._m0[10u].y - _252)) + _252;
    float _321 = (_312 * (cbMtdParam._m0[10u].z - _253)) + _253;
    vec4 _333 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _340 = (_333.x * 2.0) + (-1.0);
    float _341 = (_333.y * 2.0) + (-1.0);
    float _342 = dot(vec2(_340, _341), vec2(_340, _341));
    float _3347 = isnan(0.0) ? _342 : (isnan(_342) ? 0.0 : max(_342, 0.0));
    float _350 = (_312 * (_333.z - _269)) + _269;
    float _362 = (((_340 - _273) + (cbMtdParam._m0[12u].w * _273)) * _312) + _273;
    float _363 = (((_341 - _275) + (cbMtdParam._m0[12u].w * _275)) * _312) + _275;
    float _364 = (_312 * (sqrt(1.0 - (isnan(1.0) ? _3347 : (isnan(_3347) ? 1.0 : min(_3347, 1.0)))) - _282)) + _282;
    float _367 = fma(_364, _216, fma(_363, _208 * TANGENT.x, (_194 * _186) * _362));
    float _370 = fma(_364, _217, fma(_363, _208 * TANGENT.y, (_194 * _187) * _362));
    float _373 = fma(_364, _218, fma(_363, _208 * TANGENT.z, (_194 * _188) * _362));
    float _377 = inversesqrt(dot(vec3(_367, _370, _373), vec3(_367, _370, _373)));
    float _378 = _377 * _367;
    float _379 = _377 * _370;
    float _380 = _377 * _373;
    float _3358 = isnan(0.0) ? _350 : (isnan(_350) ? 0.0 : max(_350, 0.0));
    float _381 = isnan(1.0) ? _3358 : (isnan(_3358) ? 1.0 : min(_3358, 1.0));
    float _3369 = isnan(0.0) ? _319 : (isnan(_319) ? 0.0 : max(_319, 0.0));
    float _3380 = isnan(0.0) ? _320 : (isnan(_320) ? 0.0 : max(_320, 0.0));
    float _3391 = isnan(0.0) ? _321 : (isnan(_321) ? 0.0 : max(_321, 0.0));
    float _400 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _442 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _452 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _442);
    float _453 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _442);
    float _454 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _442);
    float _458 = inversesqrt(dot(vec3(_452, _453, _454), vec3(_452, _453, _454)));
    float _459 = _452 * _458;
    float _460 = _453 * _458;
    float _461 = _454 * _458;
    vec4 _466 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _468 = _466.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _626 = sqrt(((_452 * _452) + (_453 * _453)) + (_454 * _454));
        float _632 = (cbMatDynParam._m0[5u].x * _626) + cbMatDynParam._m0[5u].y;
        float _3402 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
        float _633 = isnan(1.0) ? _3402 : (isnan(_3402) ? 1.0 : min(_3402, 1.0));
        float _637 = (cbMatDynParam._m0[5u].z * _626) + cbMatDynParam._m0[5u].w;
        float _3413 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3413 : (isnan(_3413) ? 1.0 : min(_3413, 1.0))) - _633)) + _633) < ((_468 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _480 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _481 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _501 = fma(_380, cbSceneParam._m0[5u].z, fma(_379, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _378));
    float _504 = fma(_380, cbSceneParam._m0[6u].z, fma(_379, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _378));
    float _507 = fma(_380, cbSceneParam._m0[7u].z, fma(_379, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _378));
    uint _520 = uint(roundEven(NORMAL.w)) * 13u;
    uint _522 = _520 + 9u;
    uint _523 = _522 + uint(cbMatDynParam._m0[0u].w);
    float _529 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3369 : (isnan(_3369) ? 1.0 : min(_3369, 1.0)))) * cbInstanceData._m0[_523].x;
    float _530 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3380 : (isnan(_3380) ? 1.0 : min(_3380, 1.0)))) * cbInstanceData._m0[_523].y;
    float _531 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3391 : (isnan(_3391) ? 1.0 : min(_3391, 1.0)))) * cbInstanceData._m0[_523].z;
    float _3424 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _532 = isnan(1.0) ? _3424 : (isnan(_3424) ? 1.0 : min(_3424, 1.0));
    float _3435 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _533 = isnan(1.0) ? _3435 : (isnan(_3435) ? 1.0 : min(_3435, 1.0));
    float _3446 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _534 = isnan(1.0) ? _3446 : (isnan(_3446) ? 1.0 : min(_3446, 1.0));
    vec4 _543 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _480, cbSceneParam._m0[86u].y * _481));
    float _546 = _543.x * TEXCOORD_3.w;
    float _547 = dot(vec3(_378, _379, _380), vec3(_459, _460, _461));
    float _550 = _547 * 2.0;
    float _554 = (_550 * _378) - _459;
    float _555 = (_550 * _379) - _460;
    float _556 = (_550 * _380) - _461;
    float _560 = abs(dot(vec3(_459, _460, _461), vec3(_378, _379, _380)));
    float _3457 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _562 = sqrt(_381);
    float _575 = exp2((_562 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3457 : (isnan(_3457) ? 1.0 : min(_3457, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_562 * 3.0));
    float _607 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _611 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _615 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _945;
    float _947;
    float _948;
    float _949;
    float _950;
    float _951;
    float _952;
    float _953;
    float _954;
    float _955;
    float _956;
    float _957;
    float _958;
    float _959;
    float _960;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _670 = fma(_615, cbModelParam._m0[26u].z, fma(_611, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _607));
        float _674 = fma(_615, cbModelParam._m0[27u].z, fma(_611, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _607));
        float _678 = fma(_615, cbModelParam._m0[28u].z, fma(_611, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _607));
        float _703 = _607 + _378;
        float _704 = _611 + _379;
        float _705 = _615 + _380;
        float _715 = fma(_705, cbModelParam._m0[26u].z, fma(_704, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _703)) - _670;
        float _716 = fma(_705, cbModelParam._m0[27u].z, fma(_704, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _703)) - _674;
        float _717 = fma(_705, cbModelParam._m0[28u].z, fma(_704, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _703)) - _678;
        float _721 = inversesqrt(dot(vec3(_715, _716, _717), vec3(_715, _716, _717)));
        float _734 = ((_721 * _715) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_670 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _735 = ((_721 * _716) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_674 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _736 = ((_721 * _717) / cbModelParam._m0[34u].z) + ((((((_678 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _739 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_734, _735, _736), 0.0);
        vec4 _746 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_734, _735, _736), 0.0);
        vec4 _753 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_734, _735, _736), 0.0);
        vec4 _760 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_734, _735, _736), 0.0);
        float _773 = exp2((_739.w + (-0.5)) * 20.0) * 2.0;
        float _774 = _773 * (_739.x + (-0.5));
        float _775 = _773 * (_739.y + (-0.5));
        float _776 = _773 * (_739.z + (-0.5));
        float _783 = exp2((_746.w + (-0.5)) * 20.0) * 2.0;
        float _784 = _783 * (_746.x + (-0.5));
        float _785 = _783 * (_746.y + (-0.5));
        float _786 = _783 * (_746.z + (-0.5));
        float _793 = exp2((_753.w + (-0.5)) * 20.0) * 2.0;
        float _794 = _793 * (_753.x + (-0.5));
        float _795 = _793 * (_753.y + (-0.5));
        float _796 = _793 * (_753.z + (-0.5));
        float _803 = exp2((_760.w + (-0.5)) * 20.0) * 2.0;
        float _804 = _803 * (_760.x + (-0.5));
        float _805 = _803 * (_760.y + (-0.5));
        float _806 = _803 * (_760.z + (-0.5));
        float _807 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
        float _808 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
        float _809 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
        float _810 = _774 * 0.5;
        float _811 = _784 * 0.5;
        float _812 = _794 * 0.5;
        float _813 = dot(vec3(_810, _811, _812), vec3(_810, _811, _812));
        float _818 = (_813 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_813);
        float _827 = (dot(vec3(_378, _379, _380), vec3(_818 * _810, _818 * _811, _818 * _812)) + 1.0) * 0.5;
        float _3483 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
        float _837 = sqrt(((_811 * _811) + (_810 * _810)) + (_812 * _812)) / (_807 + 9.9999997473787516355514526367188e-06);
        float _3494 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
        float _838 = isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0));
        float _839 = _838 * 2.0;
        float _843 = (1.0 - _838) / (_838 + 1.0);
        float _3505 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
        float _844 = isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0));
        float _853 = ((((1.0 - _844) * (_839 + 2.0)) * exp2(log2(isnan(1.0) ? _3483 : (isnan(_3483) ? 1.0 : min(_3483, 1.0))) * (_839 + 1.0))) + _844) * _807;
        float _854 = _775 * 0.5;
        float _855 = _785 * 0.5;
        float _856 = _795 * 0.5;
        float _857 = dot(vec3(_854, _855, _856), vec3(_854, _855, _856));
        float _862 = (_857 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_857);
        float _870 = (dot(vec3(_378, _379, _380), vec3(_862 * _854, _862 * _855, _862 * _856)) + 1.0) * 0.5;
        float _3516 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
        float _879 = sqrt(((_855 * _855) + (_854 * _854)) + (_856 * _856)) / (_808 + 9.9999997473787516355514526367188e-06);
        float _3527 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
        float _880 = isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0));
        float _881 = _880 * 2.0;
        float _885 = (1.0 - _880) / (_880 + 1.0);
        float _3538 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
        float _886 = isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0));
        float _895 = ((((1.0 - _886) * (_881 + 2.0)) * exp2(log2(isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0))) * (_881 + 1.0))) + _886) * _808;
        float _896 = _776 * 0.5;
        float _897 = _786 * 0.5;
        float _898 = _796 * 0.5;
        float _899 = dot(vec3(_896, _897, _898), vec3(_896, _897, _898));
        float _904 = (_899 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_899);
        float _912 = (dot(vec3(_378, _379, _380), vec3(_904 * _896, _904 * _897, _904 * _898)) + 1.0) * 0.5;
        float _3549 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
        float _921 = sqrt(((_897 * _897) + (_896 * _896)) + (_898 * _898)) / (_809 + 9.9999997473787516355514526367188e-06);
        float _3560 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
        float _922 = isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0));
        float _923 = _922 * 2.0;
        float _927 = (1.0 - _922) / (_922 + 1.0);
        float _3571 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
        float _928 = isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0));
        float _937 = ((((1.0 - _928) * (_923 + 2.0)) * exp2(log2(isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0))) * (_923 + 1.0))) + _928) * _809;
        _945 = _776;
        _947 = _775;
        _948 = _774;
        _949 = _786;
        _950 = _785;
        _951 = _784;
        _952 = _796;
        _953 = _795;
        _954 = _794;
        _955 = _809;
        _956 = _808;
        _957 = _807;
        _958 = cbModelParam._m0[36u].z * (isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0)));
        _959 = cbModelParam._m0[36u].z * (isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0)));
        _960 = cbModelParam._m0[36u].z * (isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0)));
    }
    else
    {
        _945 = _946;
        _947 = _946;
        _948 = _946;
        _949 = _946;
        _950 = _946;
        _951 = _946;
        _952 = _946;
        _953 = _946;
        _954 = _946;
        _955 = _946;
        _956 = _946;
        _957 = _946;
        _958 = 0.0;
        _959 = 0.0;
        _960 = 0.0;
    }
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _989 = fma(_615, cbModelParam._m0[30u].z, fma(_611, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _607));
        float _993 = fma(_615, cbModelParam._m0[31u].z, fma(_611, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _607));
        float _997 = fma(_615, cbModelParam._m0[32u].z, fma(_611, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _607));
        float _1020 = _607 + _378;
        float _1021 = _611 + _379;
        float _1022 = _615 + _380;
        float _1032 = fma(_1022, cbModelParam._m0[30u].z, fma(_1021, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1020)) - _989;
        float _1033 = fma(_1022, cbModelParam._m0[31u].z, fma(_1021, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1020)) - _993;
        float _1034 = fma(_1022, cbModelParam._m0[32u].z, fma(_1021, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1020)) - _997;
        float _1038 = inversesqrt(dot(vec3(_1032, _1033, _1034), vec3(_1032, _1033, _1034)));
        float _1051 = ((_1038 * _1032) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_989 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1052 = ((_1038 * _1033) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_993 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1053 = ((_1038 * _1034) / cbModelParam._m0[35u].z) + ((((((_997 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1055 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1051, _1052, _1053), 0.0);
        vec4 _1062 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1051, _1052, _1053), 0.0);
        vec4 _1069 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1051, _1052, _1053), 0.0);
        vec4 _1076 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1051, _1052, _1053), 0.0);
        float _1088 = exp2((_1055.w + (-0.5)) * 20.0) * 2.0;
        float _1089 = _1088 * (_1055.x + (-0.5));
        float _1090 = _1088 * (_1055.y + (-0.5));
        float _1091 = _1088 * (_1055.z + (-0.5));
        float _1098 = exp2((_1062.w + (-0.5)) * 20.0) * 2.0;
        float _1099 = _1098 * (_1062.x + (-0.5));
        float _1100 = _1098 * (_1062.y + (-0.5));
        float _1101 = _1098 * (_1062.z + (-0.5));
        float _1108 = exp2((_1069.w + (-0.5)) * 20.0) * 2.0;
        float _1109 = _1108 * (_1069.x + (-0.5));
        float _1110 = _1108 * (_1069.y + (-0.5));
        float _1111 = _1108 * (_1069.z + (-0.5));
        float _1118 = exp2((_1076.w + (-0.5)) * 20.0) * 2.0;
        float _1119 = _1118 * (_1076.x + (-0.5));
        float _1120 = _1118 * (_1076.y + (-0.5));
        float _1121 = _1118 * (_1076.z + (-0.5));
        float _1122 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1123 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1124 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1125 = _1089 * 0.5;
        float _1126 = _1099 * 0.5;
        float _1127 = _1109 * 0.5;
        float _1128 = dot(vec3(_1125, _1126, _1127), vec3(_1125, _1126, _1127));
        float _1133 = (_1128 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1128);
        float _1141 = (dot(vec3(_378, _379, _380), vec3(_1133 * _1125, _1133 * _1126, _1133 * _1127)) + 1.0) * 0.5;
        float _3612 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1150 = sqrt(((_1126 * _1126) + (_1125 * _1125)) + (_1127 * _1127)) / (_1122 + 9.9999997473787516355514526367188e-06);
        float _3623 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1151 = isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0));
        float _1152 = _1151 * 2.0;
        float _1156 = (1.0 - _1151) / (_1151 + 1.0);
        float _3634 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1157 = isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0));
        float _1166 = ((((1.0 - _1157) * (_1152 + 2.0)) * exp2(log2(isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0))) * (_1152 + 1.0))) + _1157) * _1122;
        float _1167 = _1090 * 0.5;
        float _1168 = _1100 * 0.5;
        float _1169 = _1110 * 0.5;
        float _1170 = dot(vec3(_1167, _1168, _1169), vec3(_1167, _1168, _1169));
        float _1175 = (_1170 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1170);
        float _1183 = (dot(vec3(_378, _379, _380), vec3(_1175 * _1167, _1175 * _1168, _1175 * _1169)) + 1.0) * 0.5;
        float _3645 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1192 = sqrt(((_1168 * _1168) + (_1167 * _1167)) + (_1169 * _1169)) / (_1123 + 9.9999997473787516355514526367188e-06);
        float _3656 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1193 = isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0));
        float _1194 = _1193 * 2.0;
        float _1198 = (1.0 - _1193) / (_1193 + 1.0);
        float _3667 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1199 = isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0));
        float _1208 = ((((1.0 - _1199) * (_1194 + 2.0)) * exp2(log2(isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0))) * (_1194 + 1.0))) + _1199) * _1123;
        float _1209 = _1091 * 0.5;
        float _1210 = _1101 * 0.5;
        float _1211 = _1111 * 0.5;
        float _1212 = dot(vec3(_1209, _1210, _1211), vec3(_1209, _1210, _1211));
        float _1217 = (_1212 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1212);
        float _1225 = (dot(vec3(_378, _379, _380), vec3(_1217 * _1209, _1217 * _1210, _1217 * _1211)) + 1.0) * 0.5;
        float _3678 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1234 = sqrt(((_1210 * _1210) + (_1209 * _1209)) + (_1211 * _1211)) / (_1124 + 9.9999997473787516355514526367188e-06);
        float _3689 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1235 = isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0));
        float _1236 = _1235 * 2.0;
        float _1240 = (1.0 - _1235) / (_1235 + 1.0);
        float _3700 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1241 = isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0));
        float _1250 = ((((1.0 - _1241) * (_1236 + 2.0)) * exp2(log2(isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0))) * (_1236 + 1.0))) + _1241) * _1124;
        _1258 = _1091;
        _1259 = _1090;
        _1260 = _1089;
        _1261 = _1101;
        _1262 = _1100;
        _1263 = _1099;
        _1264 = _1111;
        _1265 = _1110;
        _1266 = _1109;
        _1267 = _1124;
        _1268 = _1123;
        _1269 = _1122;
        _1270 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0)));
        _1271 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0)));
        _1272 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0)));
    }
    else
    {
        _1258 = _946;
        _1259 = _946;
        _1260 = _946;
        _1261 = _946;
        _1262 = _946;
        _1263 = _946;
        _1264 = _946;
        _1265 = _946;
        _1266 = _946;
        _1267 = _946;
        _1268 = _946;
        _1269 = _946;
        _1270 = 0.0;
        _1271 = 0.0;
        _1272 = 0.0;
    }
    float _1282 = (cbModelParam._m0[1u].x * (_1270 - _958)) + _958;
    float _1283 = (cbModelParam._m0[1u].x * (_1271 - _959)) + _959;
    float _1284 = (cbModelParam._m0[1u].x * (_1272 - _960)) + _960;
    float _1305 = fma(_1284, cbSceneParam._m0[89u].z, fma(_1283, cbSceneParam._m0[89u].y, _1282 * cbSceneParam._m0[89u].x));
    float _1308 = fma(_1284, cbSceneParam._m0[90u].z, fma(_1283, cbSceneParam._m0[90u].y, _1282 * cbSceneParam._m0[90u].x));
    float _1311 = fma(_1284, cbSceneParam._m0[91u].z, fma(_1283, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1282));
    float _1326 = _554 * 0.5;
    float _1327 = _555 * 0.5;
    float _1328 = _556 * 0.5;
    float _1329 = dot(vec4(_1326, _1327, _1328, 1.0), vec4(_1260, _1263, _1266, _1269));
    float _1332 = dot(vec4(_1326, _1327, _1328, 1.0), vec4(_1259, _1262, _1265, _1268));
    float _1335 = dot(vec4(_1326, _1327, _1328, 1.0), vec4(_1258, _1261, _1264, _1267));
    float _1369;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1342 = dot(vec4(_1326, _1327, _1328, 1.0), vec4(_945, _949, _952, _955));
        float _1346 = dot(vec4(_1326, _1327, _1328, 1.0), vec4(_947, _950, _953, _956));
        float _1350 = dot(vec4(_1326, _1327, _1328, 1.0), vec4(_948, _951, _954, _957));
        float _1357 = dot(vec4(cbModelParam._m0[39u]), vec4(_1326, _1327, _1328, 1.0));
        _1369 = dot(vec3(isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0)), isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0)), isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1357) ? 0.0 : (isnan(0.0) ? _1357 : max(0.0, _1357))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1369 = 1.0;
    }
    float _1380;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1371 = dot(vec4(cbModelParam._m0[40u]), vec4(_1326, _1327, _1328, 1.0));
        _1380 = dot(vec3(isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0)), isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0)), isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1371) ? 0.0 : (isnan(0.0) ? _1371 : max(0.0, _1371))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1380 = 1.0;
    }
    float _1384 = (_1380 * cbModelParam._m0[1u].x) + (_1369 * (1.0 - cbModelParam._m0[1u].x));
    float _1394 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _381);
    float _1395 = isnan(_1394) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1394 : min(cbModelParam._m0[25u].z, _1394));
    float _1476;
    float _1478;
    float _1480;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1443 = fma(_615, cbModelParam._m0[13u].z, fma(_611, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _607)) + cbModelParam._m0[13u].w;
        float _1447 = fma(_615, cbModelParam._m0[14u].z, fma(_611, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _607)) + cbModelParam._m0[14u].w;
        float _1451 = fma(_615, cbModelParam._m0[15u].z, fma(_611, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _607)) + cbModelParam._m0[15u].w;
        float _1454 = fma(_556, cbModelParam._m0[13u].z, fma(_555, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _554));
        float _1457 = fma(_556, cbModelParam._m0[14u].z, fma(_555, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _554));
        float _1460 = fma(_556, cbModelParam._m0[15u].z, fma(_555, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _554));
        float _1488;
        if (_1454 > 0.0)
        {
            _1488 = abs((1.0 - _1443) / _1454);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1454 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1443 + 1.0) / _1454);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1488 = frontier_phi_19_17_ladder;
        }
        float _1692;
        if (_1457 > 0.0)
        {
            _1692 = abs((1.0 - _1447) / _1457);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1457 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1447 + 1.0) / _1457);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1692 = frontier_phi_28_24_ladder;
        }
        float _1935;
        if (_1460 > 0.0)
        {
            _1935 = abs((1.0 - _1451) / _1460);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1460 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1451 + 1.0) / _1460);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1935 = frontier_phi_40_35_ladder;
        }
        float _1937 = isnan(_1692) ? _1488 : (isnan(_1488) ? _1692 : min(_1488, _1692));
        float _1938 = isnan(_1935) ? _1937 : (isnan(_1937) ? _1935 : min(_1937, _1935));
        float _1942 = (_1938 * _1454) + _1443;
        float _1943 = (_1938 * _1457) + _1447;
        float _1944 = (_1938 * _1460) + _1451;
        float _1945 = _1938 * 9.9999997473787516355514526367188e-05;
        float _1947 = (-1.0) - _1945;
        float _1949 = _1945 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1944 > _1949) || ((_1944 < _1947) || ((_1943 > _1949) || ((_1943 < _1947) || ((_1942 < _1947) || (_1942 > _1949))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2068 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1944, cbModelParam._m0[9u].z, fma(_1943, cbModelParam._m0[9u].y, _1942 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1944, cbModelParam._m0[10u].z, fma(_1943, cbModelParam._m0[10u].y, _1942 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1944, cbModelParam._m0[11u].z, fma(_1943, cbModelParam._m0[11u].y, _1942 * cbModelParam._m0[11u].x))), _1395);
            frontier_phi_18_40_ladder = _2068.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2068.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2068.x * cbModelParam._m0[1u].y;
        }
        _1476 = frontier_phi_18_40_ladder_2;
        _1478 = frontier_phi_18_40_ladder_1;
        _1480 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1464 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_554, _555, _556), _1395);
        _1476 = _1464.x * cbModelParam._m0[1u].y;
        _1478 = _1464.y * cbModelParam._m0[1u].y;
        _1480 = _1464.z * cbModelParam._m0[1u].y;
    }
    float _1484 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _381);
    float _1485 = isnan(_1484) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1484 : min(cbModelParam._m0[25u].w, _1484));
    float _1578;
    float _1580;
    float _1582;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1542 = fma(_615, cbModelParam._m0[21u].z, fma(_611, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _607)) + cbModelParam._m0[21u].w;
        float _1546 = fma(_615, cbModelParam._m0[22u].z, fma(_611, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _607)) + cbModelParam._m0[22u].w;
        float _1550 = fma(_615, cbModelParam._m0[23u].z, fma(_611, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _607)) + cbModelParam._m0[23u].w;
        float _1553 = fma(_556, cbModelParam._m0[21u].z, fma(_555, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _554));
        float _1556 = fma(_556, cbModelParam._m0[22u].z, fma(_555, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _554));
        float _1559 = fma(_556, cbModelParam._m0[23u].z, fma(_555, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _554));
        float _1697;
        if (_1553 > 0.0)
        {
            _1697 = abs((1.0 - _1542) / _1553);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1553 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1542 + 1.0) / _1553);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1697 = frontier_phi_30_26_ladder;
        }
        float _1962;
        if (_1556 > 0.0)
        {
            _1962 = abs((1.0 - _1546) / _1556);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1556 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1546 + 1.0) / _1556);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1962 = frontier_phi_42_37_ladder;
        }
        float _2167;
        if (_1559 > 0.0)
        {
            _2167 = abs((1.0 - _1550) / _1559);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1559 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1550 + 1.0) / _1559);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2167 = frontier_phi_51_48_ladder;
        }
        float _2169 = isnan(_1962) ? _1697 : (isnan(_1697) ? _1962 : min(_1697, _1962));
        float _2170 = isnan(_2167) ? _2169 : (isnan(_2169) ? _2167 : min(_2169, _2167));
        float _2174 = (_2170 * _1553) + _1542;
        float _2175 = (_2170 * _1556) + _1546;
        float _2176 = (_2170 * _1559) + _1550;
        float _2177 = _2170 * 9.9999997473787516355514526367188e-05;
        float _2178 = (-1.0) - _2177;
        float _2180 = _2177 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2176 > _2180) || ((_2176 < _2178) || ((_2175 > _2180) || ((_2175 < _2178) || ((_2174 < _2178) || (_2174 > _2180))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2374 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2176, cbModelParam._m0[17u].z, fma(_2175, cbModelParam._m0[17u].y, _2174 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2176, cbModelParam._m0[18u].z, fma(_2175, cbModelParam._m0[18u].y, _2174 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2176, cbModelParam._m0[19u].z, fma(_2175, cbModelParam._m0[19u].y, _2174 * cbModelParam._m0[19u].x))), _1485);
            frontier_phi_27_51_ladder = _2374.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2374.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2374.x * cbModelParam._m0[1u].z;
        }
        _1578 = frontier_phi_27_51_ladder_2;
        _1580 = frontier_phi_27_51_ladder_1;
        _1582 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1562 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_554, _555, _556), _1485);
        _1578 = _1562.x * cbModelParam._m0[1u].z;
        _1580 = _1562.y * cbModelParam._m0[1u].z;
        _1582 = _1562.z * cbModelParam._m0[1u].z;
    }
    float _1594 = ((((1.0 - _575) * ((_562 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_575 * _562)) * _546;
    float _1595 = _1594 * ((cbModelParam._m0[1u].w * (_1578 - _1476)) + _1476);
    float _1596 = _1594 * ((cbModelParam._m0[1u].w * (_1580 - _1478)) + _1478);
    float _1597 = _1594 * ((cbModelParam._m0[1u].w * (_1582 - _1480)) + _1480);
    float _1600 = fma(_1597, cbSceneParam._m0[89u].z, fma(_1596, cbSceneParam._m0[89u].y, _1595 * cbSceneParam._m0[89u].x));
    float _1603 = fma(_1597, cbSceneParam._m0[90u].z, fma(_1596, cbSceneParam._m0[90u].y, _1595 * cbSceneParam._m0[90u].x));
    float _1606 = fma(_1597, cbSceneParam._m0[91u].z, fma(_1596, cbSceneParam._m0[91u].y, _1595 * cbSceneParam._m0[91u].x));
    uvec4 _1616 = floatBitsToUint(cbInstanceData._m0[_520 + 5u]);
    uint _1618 = _1616.x * 14u;
    uint _1619 = _1618 + 13u;
    float _1626 = _546 + (-1.0);
    float _1631 = (cbLight._m0[_1619].x * _1626) + 1.0;
    float _1632 = (cbLight._m0[_1619].y * _1626) + 1.0;
    float _1633 = (cbLight._m0[_1619].z * _1626) + 1.0;
    float _1634 = (cbLight._m0[_1619].w * _1626) + 1.0;
    uint _1635 = _1618 + 5u;
    float _1641 = isnan(1.0) ? _1632 : (isnan(_1632) ? 1.0 : min(_1632, 1.0));
    uint _1645 = _1618 + 4u;
    float _1651 = isnan(1.0) ? _1631 : (isnan(_1631) ? 1.0 : min(_1631, 1.0));
    uint _1655 = _1618 | 1u;
    float _1666 = dot(vec3(cbLight._m0[_1618].xyz), vec3(_378, _379, _380));
    float _1669 = dot(vec3(cbLight._m0[_1655].xyz), vec3(_378, _379, _380));
    float _3836 = isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0));
    float _3847 = isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0));
    float _1674 = (isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0))) * 0.3183098733425140380859375;
    float _1676 = (isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0))) * 0.3183098733425140380859375;
    float _1683 = ((cbLight._m0[_1635].x * _1641) * _1676) + ((cbLight._m0[_1645].x * _1651) * _1674);
    float _1684 = ((_1641 * cbLight._m0[_1635].y) * _1676) + ((_1651 * cbLight._m0[_1645].y) * _1674);
    float _1685 = ((_1641 * cbLight._m0[_1635].z) * _1676) + ((_1651 * cbLight._m0[_1645].z) * _1674);
    uvec4 _1689 = floatBitsToUint(cbLight._m0[_1618 + 12u]);
    bool _1691 = _1689.x == 0u;
    float _1702;
    float _1704;
    float _1706;
    if (_1691)
    {
        _1702 = _1683;
        _1704 = _1684;
        _1706 = _1685;
    }
    else
    {
        uint _1710 = _1618 + 6u;
        float _1726 = (dot(vec3(cbLight._m0[_1618 + 2u].xyz), vec3(_378, _379, _380)) * 0.5) + 0.5;
        float _1727 = _1726 * _1726;
        float _3858 = isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0));
        float _1728 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
        float _1729 = isnan(1.0) ? _1633 : (isnan(_1633) ? 1.0 : min(_1633, 1.0));
        _1702 = (((cbLight._m0[_1710].x * 0.3183098733425140380859375) * _1728) * _1729) + _1683;
        _1704 = (((cbLight._m0[_1710].y * 0.3183098733425140380859375) * _1728) * _1729) + _1684;
        _1706 = (((cbLight._m0[_1710].z * 0.3183098733425140380859375) * _1728) * _1729) + _1685;
    }
    bool _1709 = _1689.y == 0u;
    float _1747;
    float _1749;
    float _1751;
    if (_1709)
    {
        _1747 = _1702;
        _1749 = _1704;
        _1751 = _1706;
    }
    else
    {
        uint _1906 = _1618 + 7u;
        float _1922 = (dot(vec3(cbLight._m0[_1618 + 3u].xyz), vec3(_378, _379, _380)) * 0.5) + 0.5;
        float _1923 = _1922 * _1922;
        float _3874 = isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0));
        float _1924 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
        float _1925 = isnan(1.0) ? _1634 : (isnan(_1634) ? 1.0 : min(_1634, 1.0));
        _1747 = (((cbLight._m0[_1906].x * 0.3183098733425140380859375) * _1924) * _1925) + _1702;
        _1749 = (((cbLight._m0[_1906].y * 0.3183098733425140380859375) * _1924) * _1925) + _1704;
        _1751 = (((cbLight._m0[_1906].z * 0.3183098733425140380859375) * _1924) * _1925) + _1706;
    }
    uint _1754 = _1618 + 8u;
    float _1767 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1618].w)) * _381) * 0.949999988079071044921875);
    float _1768 = _1767 * _1767;
    float _1769 = cbLight._m0[_1618].x + _459;
    float _1770 = cbLight._m0[_1618].y + _460;
    float _1771 = cbLight._m0[_1618].z + _461;
    float _1775 = inversesqrt(dot(vec3(_1769, _1770, _1771), vec3(_1769, _1770, _1771)));
    float _1776 = _1775 * _1769;
    float _1777 = _1775 * _1770;
    float _1778 = _1775 * _1771;
    float _1779 = dot(vec3(_378, _379, _380), vec3(cbLight._m0[_1618].xyz));
    float _3890 = isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0));
    float _1782 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
    float _3901 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _1783 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
    float _1784 = dot(vec3(_378, _379, _380), vec3(_1776, _1777, _1778));
    float _3912 = isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0));
    float _1787 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
    float _1788 = dot(vec3(cbLight._m0[_1618].xyz), vec3(_1776, _1777, _1778));
    float _3923 = isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0));
    float _1792 = _1768 * _1768;
    float _1796 = ((_1787 * _1787) * (_1792 + (-1.0))) + 1.0;
    float _1807 = (exp2(log2(1.0 - (isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1808 = 1.0 - _1768;
    float _1819 = (0.5 / (((_1783 * ((_1782 * _1808) + _1768)) + 9.9999999392252902907785028219223e-09) + (((_1783 * _1808) + _1768) * _1782))) * _1782;
    float _3934 = isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0));
    float _1821 = (isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0))) * (_1792 / ((_1796 * _1796) * 3.141590118408203125));
    uint _1832 = _1618 + 9u;
    float _1843 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1655].w)) * _381) * 0.949999988079071044921875);
    float _1844 = _1843 * _1843;
    float _1845 = cbLight._m0[_1655].x + _459;
    float _1846 = cbLight._m0[_1655].y + _460;
    float _1847 = cbLight._m0[_1655].z + _461;
    float _1851 = inversesqrt(dot(vec3(_1845, _1846, _1847), vec3(_1845, _1846, _1847)));
    float _1852 = _1851 * _1845;
    float _1853 = _1851 * _1846;
    float _1854 = _1851 * _1847;
    float _1855 = dot(vec3(_378, _379, _380), vec3(cbLight._m0[_1655].xyz));
    float _3945 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
    float _1858 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
    float _1859 = dot(vec3(_378, _379, _380), vec3(_1852, _1853, _1854));
    float _3956 = isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0));
    float _1862 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
    float _1863 = dot(vec3(cbLight._m0[_1655].xyz), vec3(_1852, _1853, _1854));
    float _3967 = isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0));
    float _1867 = _1844 * _1844;
    float _1871 = ((_1862 * _1862) * (_1867 + (-1.0))) + 1.0;
    float _1880 = (exp2(log2(1.0 - (isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1881 = 1.0 - _1844;
    float _1891 = (0.5 / (((_1783 * ((_1858 * _1881) + _1844)) + 9.9999999392252902907785028219223e-09) + (((_1783 * _1881) + _1844) * _1858))) * _1858;
    float _3978 = isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0));
    float _1893 = (isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0))) * (_1867 / ((_1871 * _1871) * 3.141590118408203125));
    float _1903 = (((_1880 * cbLight._m0[_1832].x) * _1893) * _1641) + (((_1807 * cbLight._m0[_1754].x) * _1821) * _1651);
    float _1904 = (((_1880 * cbLight._m0[_1832].y) * _1893) * _1641) + (((_1807 * cbLight._m0[_1754].y) * _1821) * _1651);
    float _1905 = (((_1880 * cbLight._m0[_1832].z) * _1893) * _1641) + (((_1807 * cbLight._m0[_1754].z) * _1821) * _1651);
    float _1967;
    float _1969;
    float _1971;
    if (_1691)
    {
        _1967 = _1903;
        _1969 = _1904;
        _1971 = _1905;
    }
    else
    {
        uint _1973 = _1618 + 2u;
        uint _1977 = _1618 + 10u;
        float _1991 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1973].w)) * _381) * 0.949999988079071044921875);
        float _1992 = _1991 * _1991;
        float _1993 = cbLight._m0[_1973].x + _459;
        float _1994 = cbLight._m0[_1973].y + _460;
        float _1995 = cbLight._m0[_1973].z + _461;
        float _1999 = inversesqrt(dot(vec3(_1993, _1994, _1995), vec3(_1993, _1994, _1995)));
        float _2000 = _1999 * _1993;
        float _2001 = _1999 * _1994;
        float _2002 = _1999 * _1995;
        float _2003 = dot(vec3(_378, _379, _380), vec3(cbLight._m0[_1973].xyz));
        float _3989 = isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0));
        float _2006 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
        float _2007 = dot(vec3(_378, _379, _380), vec3(_2000, _2001, _2002));
        float _4000 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
        float _2010 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
        float _2011 = dot(vec3(cbLight._m0[_1973].xyz), vec3(_2000, _2001, _2002));
        float _4011 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
        float _2015 = _1992 * _1992;
        float _2019 = ((_2010 * _2010) * (_2015 + (-1.0))) + 1.0;
        float _2028 = (exp2(log2(1.0 - (isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2029 = 1.0 - _1992;
        float _2039 = (0.5 / (((_1783 * ((_2006 * _2029) + _1992)) + 9.9999999392252902907785028219223e-09) + (((_1783 * _2029) + _1992) * _2006))) * _2006;
        float _4022 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
        float _2041 = (isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0))) * (_2015 / ((_2019 * _2019) * 3.141590118408203125));
        float _2042 = isnan(1.0) ? _1633 : (isnan(_1633) ? 1.0 : min(_1633, 1.0));
        _1967 = (((_2028 * cbLight._m0[_1977].x) * _2041) * _2042) + _1903;
        _1969 = (((_2028 * cbLight._m0[_1977].y) * _2041) * _2042) + _1904;
        _1971 = (((_2028 * cbLight._m0[_1977].z) * _2041) * _2042) + _1905;
    }
    float _2077;
    float _2079;
    float _2081;
    if (_1709)
    {
        _2077 = _1967;
        _2079 = _1969;
        _2081 = _1971;
    }
    else
    {
        uint _2088 = _1618 + 3u;
        uint _2092 = _1618 + 11u;
        float _2106 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2088].w)) * _381) * 0.949999988079071044921875);
        float _2107 = _2106 * _2106;
        float _2108 = cbLight._m0[_2088].x + _459;
        float _2109 = cbLight._m0[_2088].y + _460;
        float _2110 = cbLight._m0[_2088].z + _461;
        float _2114 = inversesqrt(dot(vec3(_2108, _2109, _2110), vec3(_2108, _2109, _2110)));
        float _2115 = _2114 * _2108;
        float _2116 = _2114 * _2109;
        float _2117 = _2114 * _2110;
        float _2118 = dot(vec3(_378, _379, _380), vec3(cbLight._m0[_2088].xyz));
        float _4038 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
        float _2121 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _2122 = dot(vec3(_378, _379, _380), vec3(_2115, _2116, _2117));
        float _4049 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
        float _2125 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
        float _2126 = dot(vec3(cbLight._m0[_2088].xyz), vec3(_2115, _2116, _2117));
        float _4060 = isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0));
        float _2130 = _2107 * _2107;
        float _2134 = ((_2125 * _2125) * (_2130 + (-1.0))) + 1.0;
        float _2143 = (exp2(log2(1.0 - (isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2144 = 1.0 - _2107;
        float _2154 = (0.5 / (((_1783 * ((_2121 * _2144) + _2107)) + 9.9999999392252902907785028219223e-09) + (((_1783 * _2144) + _2107) * _2121))) * _2121;
        float _4071 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0));
        float _2156 = (isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0))) * (_2130 / ((_2134 * _2134) * 3.141590118408203125));
        float _2157 = isnan(1.0) ? _1634 : (isnan(_1634) ? 1.0 : min(_1634, 1.0));
        _2077 = (((_2143 * cbLight._m0[_2092].x) * _2156) * _2157) + _1967;
        _2079 = (((_2143 * cbLight._m0[_2092].y) * _2156) * _2157) + _1969;
        _2081 = (((_2143 * cbLight._m0[_2092].z) * _2156) * _2157) + _1971;
    }
    float _2291;
    float _2293;
    float _2295;
    float _2297;
    float _2299;
    float _2301;
    if (_1616.y == 0u)
    {
        float _2232 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2233 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2232;
        float _2234 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2232;
        float _2235 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2232;
        uvec4 _2247 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2248 = _2247.x;
        uint _2259 = uint((float(_2247.y) * floor(float(uint(cbSceneParam._m0[85u].y * _481) / _2248))) + floor(float(uint(cbSceneParam._m0[85u].x * _480) / _2248)));
        float _2269 = (log2(_2235 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2270 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
        uint _2273 = uint(isnan(14.0) ? _2270 : (isnan(_2270) ? 14.0 : min(_2270, 14.0)));
        uvec4 _2278 = texelFetch(g_lightClusterGridBuffer, int(((_2273 << 2u) + (_2259 << 6u)) >> 2u));
        uint _2279 = _2278.x;
        uint _2280 = _2247.z;
        float _2379;
        float _2381;
        float _2383;
        float _2385;
        float _2387;
        float _2389;
        if (((((1u << ((_2280 >> 4u) & 15u)) + 4294967295u) & _2279) == 0u) || ((_2280 & 240u) == 0u))
        {
            _2379 = 0.0;
            _2381 = 0.0;
            _2383 = 0.0;
            _2385 = 0.0;
            _2387 = 0.0;
            _2389 = 0.0;
        }
        else
        {
            float _2380;
            float _2382;
            float _2384;
            float _2386;
            float _2388;
            float _2390;
            float _2531 = 0.0;
            float _2532 = 0.0;
            float _2533 = 0.0;
            float _2534 = 0.0;
            float _2535 = 0.0;
            float _2536 = 0.0;
            uint _2537 = 0u;
            uint _2546;
            bool _2547;
            for (;;)
            {
                _2546 = texelFetch(g_lightClassification, int((((_2273 << 5u) + (_2259 << 9u)) + (_2537 << 2u)) >> 2u)).x;
                _2547 = _2546 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2547)
                {
                    frontier_phi_68_pred = _2533;
                    frontier_phi_68_pred_1 = _2536;
                    frontier_phi_68_pred_2 = _2535;
                    frontier_phi_68_pred_3 = _2534;
                    frontier_phi_68_pred_4 = _2532;
                    frontier_phi_68_pred_5 = _2531;
                }
                else
                {
                    float _2676;
                    float _2677;
                    float _2678;
                    float _2679;
                    float _2680;
                    float _2681;
                    uint _2682;
                    _2676 = _2531;
                    _2677 = _2532;
                    _2678 = _2533;
                    _2679 = _2534;
                    _2680 = _2535;
                    _2681 = _2536;
                    _2682 = _2546;
                    float _2603;
                    float _2604;
                    float _2605;
                    float _2606;
                    float _2607;
                    float _2608;
                    for (;;)
                    {
                        uint _2686 = uint(findLSB(_2682)) + (_2537 << 5u);
                        uint _2683 = (_2682 + 4294967295u) & _2682;
                        uint _2688 = _2686 * 48u;
                        vec4 _2702 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2688)).x, texelFetch(g_PointLightRenderingBuffer, int(_2688 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2688 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2688 + 3u)).x));
                        uint _2708 = (_2686 * 48u) + 4u;
                        vec4 _2721 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2708)).x, texelFetch(g_PointLightRenderingBuffer, int(_2708 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2708 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2708 + 3u)).x));
                        uint _2727 = (_2686 * 48u) + 8u;
                        vec3 _2738 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2727)).x, texelFetch(g_PointLightRenderingBuffer, int(_2727 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2727 + 2u)).x));
                        float _2742 = _2702.x - _2233;
                        float _2743 = _2702.y - _2234;
                        float _2744 = _2702.z - _2235;
                        float _2745 = dot(vec3(_2742, _2743, _2744), vec3(_2742, _2743, _2744));
                        float _2748 = inversesqrt(_2745);
                        float _2749 = _2748 * _2742;
                        float _2750 = _2748 * _2743;
                        float _2751 = _2748 * _2744;
                        float _2752 = dot(vec3(_501, _504, _507), vec3(_2749, _2750, _2751));
                        float _2757 = 1.0 - (_2745 * _2702.w);
                        float _4097 = isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : max(_2757, 0.0));
                        float _2758 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
                        float _2759 = sqrt(_2745) * _2721.w;
                        float _2762 = 1.39999997615814208984375 / (_2759 + 1.39999997615814208984375);
                        float _2763 = _2762 * _2762;
                        float _2766 = ((1.0 - _2763) * _2752) + _2763;
                        float _2769 = _2759 * _2759;
                        float _2773 = ((isnan(0.0) ? _2766 : (isnan(_2766) ? 0.0 : max(_2766, 0.0))) * _2758) / ((_2769 * 0.699999988079071044921875) + 1.0);
                        float _2777 = (-0.0) - _2233;
                        float _2778 = (-0.0) - _2234;
                        float _2779 = (-0.0) - _2235;
                        float _2783 = inversesqrt(dot(vec3(_2777, _2778, _2779), vec3(_2777, _2778, _2779)));
                        float _2784 = _2783 * _2777;
                        float _2785 = _2783 * _2778;
                        float _2786 = _2783 * _2779;
                        float _2794 = exp2(log2(1.0 / ((_2769 * 3.5) + 5.0)) * 0.25);
                        float _2795 = 1.0 - _562;
                        float _2802 = sqrt(1.0 - ((1.0 - (_2795 * _2795)) * (1.0 - (_2794 * _2794))));
                        float _2803 = _2802 * _2802;
                        float _2804 = _2803 * _2803;
                        float _2805 = _2784 + _2749;
                        float _2806 = _2785 + _2750;
                        float _2807 = _2786 + _2751;
                        float _2811 = inversesqrt(dot(vec3(_2805, _2806, _2807), vec3(_2805, _2806, _2807)));
                        float _2815 = dot(vec3(_501, _504, _507), vec3(_2784, _2785, _2786));
                        float _4113 = isnan(0.0) ? _2815 : (isnan(_2815) ? 0.0 : max(_2815, 0.0));
                        float _2818 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
                        float _2819 = dot(vec3(_501, _504, _507), vec3(_2811 * _2805, _2811 * _2806, _2811 * _2807));
                        float _4124 = isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0));
                        float _2822 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
                        float _2826 = ((_2822 * _2822) * (_2804 + (-1.0))) + 1.0;
                        float _2827 = _2762 * _2803;
                        float _2828 = _2827 * _2827;
                        float _2831 = ((1.0 - _2828) * _2752) + _2828;
                        float _4135 = isnan(0.0) ? _2831 : (isnan(_2831) ? 0.0 : max(_2831, 0.0));
                        float _2832 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
                        float _2833 = 1.0 - _2803;
                        float _2843 = (0.5 / (((_2832 * ((_2818 * _2833) + _2803)) + 9.9999999392252902907785028219223e-09) + (((_2832 * _2833) + _2803) * _2818))) * _2832;
                        float _4146 = isnan(0.0) ? _2843 : (isnan(_2843) ? 0.0 : max(_2843, 0.0));
                        float _2854 = (((_2804 * 3.1415927410125732421875) * (isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0)))) / ((_2826 * _2826) * ((_2769 * 2.1991131305694580078125) + 3.141590118408203125))) * _2758;
                        _2606 = (_2773 * _2721.x) + _2679;
                        _2607 = (_2773 * _2721.y) + _2680;
                        _2608 = (_2773 * _2721.z) + _2681;
                        _2603 = (_2854 * _2738.x) + _2676;
                        _2604 = (_2854 * _2738.y) + _2677;
                        _2605 = (_2854 * _2738.z) + _2678;
                        if (_2683 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2676 = _2603;
                            _2677 = _2604;
                            _2678 = _2605;
                            _2679 = _2606;
                            _2680 = _2607;
                            _2681 = _2608;
                            _2682 = _2683;
                        }
                    }
                    frontier_phi_68_pred = _2605;
                    frontier_phi_68_pred_1 = _2608;
                    frontier_phi_68_pred_2 = _2607;
                    frontier_phi_68_pred_3 = _2606;
                    frontier_phi_68_pred_4 = _2604;
                    frontier_phi_68_pred_5 = _2603;
                }
                _2384 = frontier_phi_68_pred;
                _2390 = frontier_phi_68_pred_1;
                _2388 = frontier_phi_68_pred_2;
                _2386 = frontier_phi_68_pred_3;
                _2382 = frontier_phi_68_pred_4;
                _2380 = frontier_phi_68_pred_5;
                uint _2538 = _2537 + 1u;
                if (_2538 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2531 = _2380;
                    _2532 = _2382;
                    _2533 = _2384;
                    _2534 = _2386;
                    _2535 = _2388;
                    _2536 = _2390;
                    _2537 = _2538;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2379 = _2380;
            _2381 = _2382;
            _2383 = _2384;
            _2385 = _2386;
            _2387 = _2388;
            _2389 = _2390;
        }
        uvec4 _2393 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2394 = _2393.z;
        uint _2396 = (_2394 >> 8u) & 15u;
        float _2499;
        float _2501;
        float _2503;
        float _2505;
        float _2507;
        float _2509;
        if (((4294967295u << _2396) & _2279) == 0u)
        {
            _2499 = _2379;
            _2501 = _2381;
            _2503 = _2383;
            _2505 = _2385;
            _2507 = _2387;
            _2509 = _2389;
        }
        else
        {
            float _2524 = inversesqrt(dot(vec3(_2233, _2234, _2235), vec3(_2233, _2234, _2235)));
            float _2525 = _2524 * _2233;
            float _2526 = _2524 * _2234;
            float _2527 = _2524 * _2235;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2396 < ((_2394 >> 12u) & 15u))
            {
                float _2500;
                float _2502;
                float _2504;
                float _2506;
                float _2508;
                float _2510;
                float _2659 = _2379;
                float _2660 = _2381;
                float _2661 = _2383;
                float _2662 = _2385;
                float _2663 = _2387;
                float _2664 = _2389;
                uint _2665 = _2396;
                uint _2674;
                bool _2675;
                for (;;)
                {
                    _2674 = texelFetch(g_lightClassification, int((((_2273 << 5u) + (_2259 << 9u)) + (_2665 << 2u)) >> 2u)).x;
                    _2675 = _2674 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2675)
                    {
                        frontier_phi_79_pred = _2664;
                        frontier_phi_79_pred_1 = _2663;
                        frontier_phi_79_pred_2 = _2662;
                        frontier_phi_79_pred_3 = _2661;
                        frontier_phi_79_pred_4 = _2660;
                        frontier_phi_79_pred_5 = _2659;
                    }
                    else
                    {
                        float _2868;
                        float _2869;
                        float _2870;
                        float _2871;
                        float _2872;
                        float _2873;
                        float _3164;
                        float _3165;
                        float _3166;
                        float _3167;
                        float _3168;
                        float _3169;
                        float _2881 = _2659;
                        float _2882 = _2660;
                        float _2883 = _2661;
                        float _2884 = _2662;
                        float _2885 = _2663;
                        float _2886 = _2664;
                        uint _2887 = _2674;
                        uint _2888;
                        vec4 _2913;
                        float _2914;
                        vec4 _2929;
                        vec3 _2941;
                        vec4 _2957;
                        vec4 _2973;
                        float _3020;
                        bool _3021;
                        for (;;)
                        {
                            uint _2898 = ((_2665 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2887));
                            _2888 = (_2887 + 4294967295u) & _2887;
                            uint _2900 = _2898 * 40u;
                            _2913 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2900)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2900 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2900 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2900 + 3u)).x));
                            _2914 = _2913.w;
                            uint _2916 = (_2898 * 40u) + 4u;
                            _2929 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2916)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2916 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2916 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2916 + 3u)).x));
                            uint _2931 = (_2898 * 40u) + 8u;
                            _2941 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2931)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2931 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2931 + 2u)).x));
                            uint _2944 = (_2898 * 40u) + 16u;
                            _2957 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2944)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2944 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2944 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2944 + 3u)).x));
                            uint _2960 = (_2898 * 40u) + 20u;
                            _2973 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2960)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2960 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2960 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2960 + 3u)).x));
                            uint _2976 = (_2898 * 40u) + 24u;
                            vec4 _2989 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2976)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2976 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2976 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2976 + 3u)).x));
                            uint _2995 = (_2898 * 40u) + 28u;
                            vec4 _3008 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2995)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2995 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2995 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2995 + 3u)).x));
                            _3020 = fma(_2235, _3008.z, fma(_2234, _3008.y, _3008.x * _2233)) + _3008.w;
                            _3021 = !((fma(_2235, _2989.z, fma(_2234, _2989.y, _2989.x * _2233)) + _2989.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3021)
                            {
                                float _3048 = _2913.x - _2233;
                                float _3049 = _2913.y - _2234;
                                float _3050 = _2913.z - _2235;
                                float _3051 = dot(vec3(_3048, _3049, _3050), vec3(_3048, _3049, _3050));
                                float _3054 = inversesqrt(_3051);
                                float _3055 = _3054 * _3048;
                                float _3056 = _3054 * _3049;
                                float _3057 = _3054 * _3050;
                                float _3061 = 1.0 - (_3051 / (_2914 * _2914));
                                float _4157 = isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : max(_3061, 0.0));
                                float _3062 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
                                float _3066 = sqrt(_3051) * _2929.w;
                                float _3068 = 1.39999997615814208984375 / (_3066 + 1.39999997615814208984375);
                                float _3069 = _3068 * _3068;
                                float _3072 = ((1.0 - _3069) * dot(vec3(_3055, _3056, _3057), vec3(_501, _504, _507))) + _3069;
                                float _3075 = _3066 * _3066;
                                float _3079 = (fma(_2235, _2957.z, fma(_2234, _2957.y, _2957.x * _2233)) + _2957.w) / _3020;
                                float _3080 = (fma(_2235, _2973.z, fma(_2234, _2973.y, _2973.x * _2233)) + _2973.w) / _3020;
                                float _3084 = 1.0 - dot(vec2(_3079, _3080), vec2(_3079, _3080));
                                float _4173 = isnan(0.0) ? _3084 : (isnan(_3084) ? 0.0 : max(_3084, 0.0));
                                float _3085 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
                                float _3086 = _3085 * (((isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0))) * _3062) / ((_3075 * 0.699999988079071044921875) + 1.0));
                                float _3098 = exp2(log2(1.0 / ((_3075 * 3.5) + 5.0)) * 0.25);
                                float _3099 = 1.0 - _562;
                                float _3106 = sqrt(1.0 - ((1.0 - (_3099 * _3099)) * (1.0 - (_3098 * _3098))));
                                float _3107 = _3106 * _3106;
                                float _3108 = _3107 * _3107;
                                float _3109 = _3055 - _2525;
                                float _3110 = _3056 - _2526;
                                float _3111 = _3057 - _2527;
                                float _3115 = inversesqrt(dot(vec3(_3109, _3110, _3111), vec3(_3109, _3110, _3111)));
                                float _3119 = dot(vec3(_501, _504, _507), vec3((-0.0) - _2525, (-0.0) - _2526, (-0.0) - _2527));
                                float _4184 = isnan(0.0) ? _3119 : (isnan(_3119) ? 0.0 : max(_3119, 0.0));
                                float _3122 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
                                float _3123 = dot(vec3(_501, _504, _507), vec3(_3115 * _3109, _3115 * _3110, _3115 * _3111));
                                float _4195 = isnan(0.0) ? _3123 : (isnan(_3123) ? 0.0 : max(_3123, 0.0));
                                float _3126 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
                                float _3130 = ((_3126 * _3126) * (_3108 + (-1.0))) + 1.0;
                                float _3131 = _3068 * _3107;
                                float _3132 = _3131 * _3131;
                                float _3138 = ((1.0 - _3132) * dot(vec3(_501, _504, _507), vec3(_3055, _3056, _3057))) + _3132;
                                float _4206 = isnan(0.0) ? _3138 : (isnan(_3138) ? 0.0 : max(_3138, 0.0));
                                float _3139 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
                                float _3140 = 1.0 - _3107;
                                float _3150 = (0.5 / (((_3139 * ((_3122 * _3140) + _3107)) + 9.9999999392252902907785028219223e-09) + (((_3139 * _3140) + _3107) * _3122))) * _3139;
                                float _4217 = isnan(0.0) ? _3150 : (isnan(_3150) ? 0.0 : max(_3150, 0.0));
                                float _3160 = (_3085 * _3062) * (((_3108 * 3.1415927410125732421875) * (isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0)))) / ((_3130 * _3130) * ((_3075 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3086 * _2929.z;
                                frontier_phi_85_pred_1 = _3086 * _2929.y;
                                frontier_phi_85_pred_2 = _3086 * _2929.x;
                                frontier_phi_85_pred_3 = _3160 * _2941.z;
                                frontier_phi_85_pred_4 = _3160 * _2941.y;
                                frontier_phi_85_pred_5 = _3160 * _2941.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3169 = frontier_phi_85_pred;
                            _3168 = frontier_phi_85_pred_1;
                            _3167 = frontier_phi_85_pred_2;
                            _3166 = frontier_phi_85_pred_3;
                            _3165 = frontier_phi_85_pred_4;
                            _3164 = frontier_phi_85_pred_5;
                            _2871 = _3167 + _2884;
                            _2872 = _3168 + _2885;
                            _2873 = _3169 + _2886;
                            _2868 = _3164 + _2881;
                            _2869 = _3165 + _2882;
                            _2870 = _3166 + _2883;
                            if (_2888 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2881 = _2868;
                                _2882 = _2869;
                                _2883 = _2870;
                                _2884 = _2871;
                                _2885 = _2872;
                                _2886 = _2873;
                                _2887 = _2888;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2873;
                        frontier_phi_79_pred_1 = _2872;
                        frontier_phi_79_pred_2 = _2871;
                        frontier_phi_79_pred_3 = _2870;
                        frontier_phi_79_pred_4 = _2869;
                        frontier_phi_79_pred_5 = _2868;
                    }
                    _2510 = frontier_phi_79_pred;
                    _2508 = frontier_phi_79_pred_1;
                    _2506 = frontier_phi_79_pred_2;
                    _2504 = frontier_phi_79_pred_3;
                    _2502 = frontier_phi_79_pred_4;
                    _2500 = frontier_phi_79_pred_5;
                    uint _2666 = _2665 + 1u;
                    if (_2666 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2659 = _2500;
                        _2660 = _2502;
                        _2661 = _2504;
                        _2662 = _2506;
                        _2663 = _2508;
                        _2664 = _2510;
                        _2665 = _2666;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2506;
                frontier_phi_60_61_ladder_1 = _2510;
                frontier_phi_60_61_ladder_2 = _2508;
                frontier_phi_60_61_ladder_3 = _2504;
                frontier_phi_60_61_ladder_4 = _2502;
                frontier_phi_60_61_ladder_5 = _2500;
            }
            else
            {
                frontier_phi_60_61_ladder = _2385;
                frontier_phi_60_61_ladder_1 = _2389;
                frontier_phi_60_61_ladder_2 = _2387;
                frontier_phi_60_61_ladder_3 = _2383;
                frontier_phi_60_61_ladder_4 = _2381;
                frontier_phi_60_61_ladder_5 = _2379;
            }
            _2499 = frontier_phi_60_61_ladder_5;
            _2501 = frontier_phi_60_61_ladder_4;
            _2503 = frontier_phi_60_61_ladder_3;
            _2505 = frontier_phi_60_61_ladder;
            _2507 = frontier_phi_60_61_ladder_2;
            _2509 = frontier_phi_60_61_ladder_1;
        }
        float _2514 = isnan(1.0) ? _546 : (isnan(_546) ? 1.0 : min(_546, 1.0));
        _2291 = (_2514 * _2505) + _1747;
        _2293 = (_2514 * _2507) + _1749;
        _2295 = (_2514 * _2509) + _1751;
        _2297 = ((_2499 * 0.039999999105930328369140625) * _2514) + _2077;
        _2299 = ((_2501 * 0.039999999105930328369140625) * _2514) + _2079;
        _2301 = ((_2503 * 0.039999999105930328369140625) * _2514) + _2081;
    }
    else
    {
        _2291 = _1747;
        _2293 = _1749;
        _2295 = _1751;
        _2297 = _2077;
        _2299 = _2079;
        _2301 = _2081;
    }
    float _4233 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _4244 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _4255 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _2318 = ((isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0))) * (_2291 + ((isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0))) * _546))) + ((_2297 + ((isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0))) * _1384)) * cbPerFrame._m0[3u].x);
    float _2319 = ((isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0))) * (_2293 + ((isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0))) * _546))) + ((_2299 + ((isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0))) * _1384)) * cbPerFrame._m0[3u].x);
    float _2320 = ((isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0))) * (_2295 + ((isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0))) * _546))) + ((_2301 + ((isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0))) * _1384)) * cbPerFrame._m0[3u].x);
    uint _2321 = _520 + 6u;
    float _2329 = _480 / cbSceneParam._m0[86u].x;
    float _2330 = _481 / cbSceneParam._m0[86u].y;
    vec4 _2344 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2329, _2330, (log2((isnan(cbSceneParam._m0[77u].w) ? _400 : (isnan(_400) ? cbSceneParam._m0[77u].w : min(_400, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2346 = _2344.x;
    float _2347 = _2344.y;
    float _2348 = _2344.z;
    float _2349 = _2344.w;
    float _2441;
    float _2443;
    float _2445;
    float _2447;
    if (_400 > cbSceneParam._m0[78u].w)
    {
        float _2404 = isnan(_400) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _400 : min(cbSceneParam._m0[80u].w, _400));
        float _2405 = _2404 / _400;
        float _2416 = _2405 * _452;
        float _2417 = _453 * _2405;
        float _2418 = (-0.0) - _2417;
        float _2419 = _2405 * _454;
        float _2421 = (cbSceneParam._m0[77u].w * _2418) / _2404;
        float _2422 = _2421 + cbSceneParam._m0[79u].w;
        float _2423 = cbSceneParam._m0[79u].w - _2417;
        float _2429 = sqrt(((_2416 * _2416) + (_2417 * _2417)) + (_2419 * _2419));
        float _2432 = (1.0 - (cbSceneParam._m0[77u].w / _2404)) * _2429;
        float _2437 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2439 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2616;
        if (abs((_2418 - _2421) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2616 = ((((_2422 > 0.0) ? exp2(_2437 * _2422) : (2.0 - exp2(_2439 * _2422))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2432;
        }
        else
        {
            float _2560 = 1.0 / cbSceneParam._m0[80u].x;
            float _2561 = isnan(_2423) ? _2422 : (isnan(_2422) ? _2423 : max(_2422, _2423));
            float _2562 = isnan(_2423) ? _2422 : (isnan(_2422) ? _2423 : min(_2422, _2423));
            float _2571 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : min(_2561, 0.0));
            float _2572 = isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : min(_2562, 0.0));
            _2616 = ((abs(_2429 / _2418) * cbSceneParam._m0[80u].y) * ((((_2571 - _2572) * 2.0) - ((exp2(_2437 * (isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0)))) - exp2(_2437 * (isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : max(_2562, 0.0))))) * _2560)) - ((exp2(_2439 * _2571) - exp2(_2439 * _2572)) * _2560))) + (_2432 * cbSceneParam._m0[80u].z);
        }
        vec4 _2618 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2329, _2330, 1.0), 0.0);
        float _2627 = exp2((_2616 * (-1.44269502162933349609375)) * (1.0 - _2618.w));
        float _2628 = log2(_2627);
        float _2644 = log2(_2349);
        _2441 = (exp2(_2644 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2628 * cbSceneParam._m0[78u].x)) * _2618.x) / cbSceneParam._m0[78u].x)) + _2346;
        _2443 = (exp2(_2644 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2628 * cbSceneParam._m0[78u].y)) * _2618.y) / cbSceneParam._m0[78u].y)) + _2347;
        _2445 = (exp2(_2644 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2628 * cbSceneParam._m0[78u].z)) * _2618.z) / cbSceneParam._m0[78u].z)) + _2348;
        _2447 = _2627 * _2349;
    }
    else
    {
        _2441 = _2346;
        _2443 = _2347;
        _2445 = _2348;
        _2447 = _2349;
    }
    bool _2654;
    vec4 _2457;
    vec4 _2479;
    float _2481;
    float _2485;
    float _2486;
    float _2487;
    float _2488;
    bool _2498;
    for (;;)
    {
        _2457 = cbMatDynParam._m0[0u];
        float _2459 = roundEven(_2457.y);
        bool _2460 = _2459 == 3.0;
        float _2461 = log2(_2447);
        float _2468 = exp2(_2461 * cbSceneParam._m0[78u].x) * _2318;
        float _2469 = exp2(_2461 * cbSceneParam._m0[78u].y) * _2319;
        float _2470 = exp2(_2461 * cbSceneParam._m0[78u].z) * _2320;
        float _2477 = _468 + (-0.5);
        _2479 = cbMtdParam._m0[1u];
        _2481 = _2479.y * _2477;
        float _2484 = (_2459 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2485 = _2484 * (_2460 ? _2468 : (_2468 + (cbSceneParam._m0[72u].w * _2441)));
        _2486 = _2484 * (_2460 ? _2469 : (_2469 + (cbSceneParam._m0[72u].w * _2443)));
        _2487 = _2484 * (_2460 ? _2470 : (_2470 + (cbSceneParam._m0[72u].w * _2445)));
        _2488 = _2477 * 0.999000012874603271484375;
        _2498 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2498)
        {
            if ((cbInstanceData._m0[_520 + 7u].x + _2488) < 0.5)
            {
                _2654 = true;
                break;
            }
        }
        uint _2595 = _522 + uint(_2457.w);
        if ((cbInstanceData._m0[_2595].w < 1.0) && ((cbInstanceData._m0[_2595].w + _2488) < 0.5))
        {
            _2654 = true;
            break;
        }
        if ((_2481 + _250) < _2479.x)
        {
            _2654 = true;
            break;
        }
        _2654 = false;
        break;
    }
    float _2859;
    if (_2654)
    {
        discard_state = true;
        _2859 = 0.0;
    }
    else
    {
        _2859 = cbInstanceData._m0[_2321].w;
    }
    SV_Target.x = _2485;
    SV_Target.y = _2486;
    SV_Target.z = _2487;
    SV_Target.w = _2859;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2321].w;
    discard_exit();
}


