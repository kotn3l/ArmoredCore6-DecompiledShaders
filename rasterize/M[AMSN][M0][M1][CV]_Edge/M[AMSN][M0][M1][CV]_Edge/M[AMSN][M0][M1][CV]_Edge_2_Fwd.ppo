#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _917;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _188 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _189 = _188 * _180;
    float _190 = _188 * _181;
    float _191 = _188 * _182;
    float _195 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _196 = _195 * NORMAL.x;
    float _197 = _195 * NORMAL.y;
    float _198 = _195 * NORMAL.z;
    float _202 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _203 = _202 * TANGENT.x;
    float _204 = _202 * TANGENT.y;
    float _205 = _202 * TANGENT.z;
    float _210;
    float _211;
    float _212;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _210 = (-0.0) - _196;
        _211 = (-0.0) - _197;
        _212 = (-0.0) - _198;
    }
    else
    {
        _210 = _196;
        _211 = _197;
        _212 = _198;
    }
    vec4 _238 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _244 = _238.x * cbMtdParam._m0[9u].x;
    float _245 = _238.y * cbMtdParam._m0[9u].y;
    float _246 = _238.z * cbMtdParam._m0[9u].z;
    vec4 _264 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _268 = _264.z;
    float _272 = (_264.x * 2.0) + (-1.0);
    float _274 = (_264.y * 2.0) + (-1.0);
    float _275 = dot(vec2(_272, _274), vec2(_272, _274));
    float _3230 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    float _281 = sqrt(1.0 - (isnan(1.0) ? _3230 : (isnan(_3230) ? 1.0 : min(_3230, 1.0))));
    float _284 = fma(_281, _210, fma(_274, _203, _272 * _189));
    float _287 = fma(_281, _211, fma(_274, _204, _272 * _190));
    float _290 = fma(_281, _212, fma(_274, _205, _272 * _191));
    float _294 = inversesqrt(dot(vec3(_284, _287, _290), vec3(_284, _287, _290)));
    float _323 = (cbMtdParam._m0[12u].x + dot(vec4(_294 * _284, _294 * _287, _294 * _290, 0.0), vec4(cbMtdParam._m0[13u].xyz, 0.0))) - (texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w)).x * cbMtdParam._m0[12u].y);
    float _3241 = isnan(0.0) ? _323 : (isnan(_323) ? 0.0 : max(_323, 0.0));
    float _324 = isnan(1.0) ? _3241 : (isnan(_3241) ? 1.0 : min(_3241, 1.0));
    float _331 = (_324 * (cbMtdParam._m0[10u].x - _244)) + _244;
    float _332 = (_324 * (cbMtdParam._m0[10u].y - _245)) + _245;
    float _333 = (_324 * (cbMtdParam._m0[10u].z - _246)) + _246;
    vec4 _345 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _352 = (_345.x * 2.0) + (-1.0);
    float _353 = (_345.y * 2.0) + (-1.0);
    float _354 = dot(vec2(_352, _353), vec2(_352, _353));
    float _3252 = isnan(0.0) ? _354 : (isnan(_354) ? 0.0 : max(_354, 0.0));
    float _362 = ((_345.z - _268) * _324) + _268;
    float _374 = (((_352 - _272) + (cbMtdParam._m0[12u].w * _272)) * _324) + _272;
    float _375 = (((_353 - _274) + (cbMtdParam._m0[12u].w * _274)) * _324) + _274;
    float _376 = ((sqrt(1.0 - (isnan(1.0) ? _3252 : (isnan(_3252) ? 1.0 : min(_3252, 1.0)))) - _281) * _324) + _281;
    float _379 = fma(_376, _210, fma(_375, _203, _374 * _189));
    float _382 = fma(_376, _211, fma(_375, _204, _374 * _190));
    float _385 = fma(_376, _212, fma(_375, _205, _374 * _191));
    float _389 = inversesqrt(dot(vec3(_379, _382, _385), vec3(_379, _382, _385)));
    float _390 = _389 * _379;
    float _391 = _389 * _382;
    float _392 = _389 * _385;
    float _3263 = isnan(0.0) ? _362 : (isnan(_362) ? 0.0 : max(_362, 0.0));
    float _393 = isnan(1.0) ? _3263 : (isnan(_3263) ? 1.0 : min(_3263, 1.0));
    float _3274 = isnan(0.0) ? _331 : (isnan(_331) ? 0.0 : max(_331, 0.0));
    float _3285 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    float _3296 = isnan(0.0) ? _333 : (isnan(_333) ? 0.0 : max(_333, 0.0));
    float _412 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _454 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _464 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _454);
    float _465 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _454);
    float _466 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _454);
    float _470 = inversesqrt(dot(vec3(_464, _465, _466), vec3(_464, _465, _466)));
    float _471 = _464 * _470;
    float _472 = _465 * _470;
    float _473 = _466 * _470;
    float _479 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _480 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _501 = fma(_392, cbSceneParam._m0[5u].z, fma(_391, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _390));
    float _504 = fma(_392, cbSceneParam._m0[6u].z, fma(_391, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _390));
    float _507 = fma(_392, cbSceneParam._m0[7u].z, fma(_391, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _390));
    uint _520 = uint(roundEven(NORMAL.w)) * 13u;
    uint _522 = (_520 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _528 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3274 : (isnan(_3274) ? 1.0 : min(_3274, 1.0)))) * cbInstanceData._m0[_522].x;
    float _529 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3285 : (isnan(_3285) ? 1.0 : min(_3285, 1.0)))) * cbInstanceData._m0[_522].y;
    float _530 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3296 : (isnan(_3296) ? 1.0 : min(_3296, 1.0)))) * cbInstanceData._m0[_522].z;
    float _3307 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _531 = isnan(1.0) ? _3307 : (isnan(_3307) ? 1.0 : min(_3307, 1.0));
    float _3318 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _532 = isnan(1.0) ? _3318 : (isnan(_3318) ? 1.0 : min(_3318, 1.0));
    float _3329 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _533 = isnan(1.0) ? _3329 : (isnan(_3329) ? 1.0 : min(_3329, 1.0));
    vec4 _542 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _479, cbSceneParam._m0[86u].y * _480));
    float _545 = _542.x * TEXCOORD_3.w;
    float _546 = dot(vec3(_390, _391, _392), vec3(_471, _472, _473));
    float _549 = _546 * 2.0;
    float _553 = (_549 * _390) - _471;
    float _554 = (_549 * _391) - _472;
    float _555 = (_549 * _392) - _473;
    float _559 = abs(dot(vec3(_471, _472, _473), vec3(_390, _391, _392)));
    float _3340 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _561 = sqrt(_393);
    float _574 = exp2((_561 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3340 : (isnan(_3340) ? 1.0 : min(_3340, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_561 * 3.0));
    float _606 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _610 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _614 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _916;
    float _918;
    float _919;
    float _920;
    float _921;
    float _922;
    float _923;
    float _924;
    float _925;
    float _926;
    float _927;
    float _928;
    float _929;
    float _930;
    float _931;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _641 = fma(_614, cbModelParam._m0[26u].z, fma(_610, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _606));
        float _645 = fma(_614, cbModelParam._m0[27u].z, fma(_610, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _606));
        float _649 = fma(_614, cbModelParam._m0[28u].z, fma(_610, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _606));
        float _674 = _606 + _390;
        float _675 = _610 + _391;
        float _676 = _614 + _392;
        float _686 = fma(_676, cbModelParam._m0[26u].z, fma(_675, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _674)) - _641;
        float _687 = fma(_676, cbModelParam._m0[27u].z, fma(_675, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _674)) - _645;
        float _688 = fma(_676, cbModelParam._m0[28u].z, fma(_675, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _674)) - _649;
        float _692 = inversesqrt(dot(vec3(_686, _687, _688), vec3(_686, _687, _688)));
        float _705 = ((_692 * _686) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_641 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _706 = ((_692 * _687) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_645 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _707 = ((_692 * _688) / cbModelParam._m0[34u].z) + ((((((_649 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _710 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_705, _706, _707), 0.0);
        vec4 _717 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_705, _706, _707), 0.0);
        vec4 _724 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_705, _706, _707), 0.0);
        vec4 _731 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_705, _706, _707), 0.0);
        float _744 = exp2((_710.w + (-0.5)) * 20.0) * 2.0;
        float _745 = _744 * (_710.x + (-0.5));
        float _746 = _744 * (_710.y + (-0.5));
        float _747 = _744 * (_710.z + (-0.5));
        float _754 = exp2((_717.w + (-0.5)) * 20.0) * 2.0;
        float _755 = _754 * (_717.x + (-0.5));
        float _756 = _754 * (_717.y + (-0.5));
        float _757 = _754 * (_717.z + (-0.5));
        float _764 = exp2((_724.w + (-0.5)) * 20.0) * 2.0;
        float _765 = _764 * (_724.x + (-0.5));
        float _766 = _764 * (_724.y + (-0.5));
        float _767 = _764 * (_724.z + (-0.5));
        float _774 = exp2((_731.w + (-0.5)) * 20.0) * 2.0;
        float _775 = _774 * (_731.x + (-0.5));
        float _776 = _774 * (_731.y + (-0.5));
        float _777 = _774 * (_731.z + (-0.5));
        float _778 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
        float _779 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
        float _780 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
        float _781 = _745 * 0.5;
        float _782 = _755 * 0.5;
        float _783 = _765 * 0.5;
        float _784 = dot(vec3(_781, _782, _783), vec3(_781, _782, _783));
        float _789 = (_784 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_784);
        float _798 = (dot(vec3(_390, _391, _392), vec3(_789 * _781, _789 * _782, _789 * _783)) + 1.0) * 0.5;
        float _3366 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
        float _808 = sqrt(((_782 * _782) + (_781 * _781)) + (_783 * _783)) / (_778 + 9.9999997473787516355514526367188e-06);
        float _3377 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
        float _809 = isnan(1.0) ? _3377 : (isnan(_3377) ? 1.0 : min(_3377, 1.0));
        float _810 = _809 * 2.0;
        float _814 = (1.0 - _809) / (_809 + 1.0);
        float _3388 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
        float _815 = isnan(1.0) ? _3388 : (isnan(_3388) ? 1.0 : min(_3388, 1.0));
        float _824 = ((((1.0 - _815) * (_810 + 2.0)) * exp2(log2(isnan(1.0) ? _3366 : (isnan(_3366) ? 1.0 : min(_3366, 1.0))) * (_810 + 1.0))) + _815) * _778;
        float _825 = _746 * 0.5;
        float _826 = _756 * 0.5;
        float _827 = _766 * 0.5;
        float _828 = dot(vec3(_825, _826, _827), vec3(_825, _826, _827));
        float _833 = (_828 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_828);
        float _841 = (dot(vec3(_390, _391, _392), vec3(_833 * _825, _833 * _826, _833 * _827)) + 1.0) * 0.5;
        float _3399 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
        float _850 = sqrt(((_826 * _826) + (_825 * _825)) + (_827 * _827)) / (_779 + 9.9999997473787516355514526367188e-06);
        float _3410 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
        float _851 = isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0));
        float _852 = _851 * 2.0;
        float _856 = (1.0 - _851) / (_851 + 1.0);
        float _3421 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
        float _857 = isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0));
        float _866 = ((((1.0 - _857) * (_852 + 2.0)) * exp2(log2(isnan(1.0) ? _3399 : (isnan(_3399) ? 1.0 : min(_3399, 1.0))) * (_852 + 1.0))) + _857) * _779;
        float _867 = _747 * 0.5;
        float _868 = _757 * 0.5;
        float _869 = _767 * 0.5;
        float _870 = dot(vec3(_867, _868, _869), vec3(_867, _868, _869));
        float _875 = (_870 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_870);
        float _883 = (dot(vec3(_390, _391, _392), vec3(_875 * _867, _875 * _868, _875 * _869)) + 1.0) * 0.5;
        float _3432 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
        float _892 = sqrt(((_868 * _868) + (_867 * _867)) + (_869 * _869)) / (_780 + 9.9999997473787516355514526367188e-06);
        float _3443 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
        float _893 = isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0));
        float _894 = _893 * 2.0;
        float _898 = (1.0 - _893) / (_893 + 1.0);
        float _3454 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
        float _899 = isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0));
        float _908 = ((((1.0 - _899) * (_894 + 2.0)) * exp2(log2(isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0))) * (_894 + 1.0))) + _899) * _780;
        _916 = _747;
        _918 = _746;
        _919 = _745;
        _920 = _757;
        _921 = _756;
        _922 = _755;
        _923 = _767;
        _924 = _766;
        _925 = _765;
        _926 = _780;
        _927 = _779;
        _928 = _778;
        _929 = cbModelParam._m0[36u].z * (isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0)));
        _930 = cbModelParam._m0[36u].z * (isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0)));
        _931 = cbModelParam._m0[36u].z * (isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0)));
    }
    else
    {
        _916 = _917;
        _918 = _917;
        _919 = _917;
        _920 = _917;
        _921 = _917;
        _922 = _917;
        _923 = _917;
        _924 = _917;
        _925 = _917;
        _926 = _917;
        _927 = _917;
        _928 = _917;
        _929 = 0.0;
        _930 = 0.0;
        _931 = 0.0;
    }
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _957 = fma(_614, cbModelParam._m0[30u].z, fma(_610, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _606));
        float _961 = fma(_614, cbModelParam._m0[31u].z, fma(_610, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _606));
        float _965 = fma(_614, cbModelParam._m0[32u].z, fma(_610, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _606));
        float _988 = _606 + _390;
        float _989 = _610 + _391;
        float _990 = _614 + _392;
        float _1000 = fma(_990, cbModelParam._m0[30u].z, fma(_989, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _988)) - _957;
        float _1001 = fma(_990, cbModelParam._m0[31u].z, fma(_989, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _988)) - _961;
        float _1002 = fma(_990, cbModelParam._m0[32u].z, fma(_989, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _988)) - _965;
        float _1006 = inversesqrt(dot(vec3(_1000, _1001, _1002), vec3(_1000, _1001, _1002)));
        float _1019 = ((_1006 * _1000) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_957 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1020 = ((_1006 * _1001) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_961 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1021 = ((_1006 * _1002) / cbModelParam._m0[35u].z) + ((((((_965 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1023 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1019, _1020, _1021), 0.0);
        vec4 _1030 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1019, _1020, _1021), 0.0);
        vec4 _1037 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1019, _1020, _1021), 0.0);
        vec4 _1044 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1019, _1020, _1021), 0.0);
        float _1056 = exp2((_1023.w + (-0.5)) * 20.0) * 2.0;
        float _1057 = _1056 * (_1023.x + (-0.5));
        float _1058 = _1056 * (_1023.y + (-0.5));
        float _1059 = _1056 * (_1023.z + (-0.5));
        float _1066 = exp2((_1030.w + (-0.5)) * 20.0) * 2.0;
        float _1067 = _1066 * (_1030.x + (-0.5));
        float _1068 = _1066 * (_1030.y + (-0.5));
        float _1069 = _1066 * (_1030.z + (-0.5));
        float _1076 = exp2((_1037.w + (-0.5)) * 20.0) * 2.0;
        float _1077 = _1076 * (_1037.x + (-0.5));
        float _1078 = _1076 * (_1037.y + (-0.5));
        float _1079 = _1076 * (_1037.z + (-0.5));
        float _1086 = exp2((_1044.w + (-0.5)) * 20.0) * 2.0;
        float _1087 = _1086 * (_1044.x + (-0.5));
        float _1088 = _1086 * (_1044.y + (-0.5));
        float _1089 = _1086 * (_1044.z + (-0.5));
        float _1090 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1091 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1092 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1093 = _1057 * 0.5;
        float _1094 = _1067 * 0.5;
        float _1095 = _1077 * 0.5;
        float _1096 = dot(vec3(_1093, _1094, _1095), vec3(_1093, _1094, _1095));
        float _1101 = (_1096 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1096);
        float _1109 = (dot(vec3(_390, _391, _392), vec3(_1101 * _1093, _1101 * _1094, _1101 * _1095)) + 1.0) * 0.5;
        float _3495 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1118 = sqrt(((_1094 * _1094) + (_1093 * _1093)) + (_1095 * _1095)) / (_1090 + 9.9999997473787516355514526367188e-06);
        float _3506 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1119 = isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0));
        float _1120 = _1119 * 2.0;
        float _1124 = (1.0 - _1119) / (_1119 + 1.0);
        float _3517 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1125 = isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0));
        float _1134 = ((((1.0 - _1125) * (_1120 + 2.0)) * exp2(log2(isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0))) * (_1120 + 1.0))) + _1125) * _1090;
        float _1135 = _1058 * 0.5;
        float _1136 = _1068 * 0.5;
        float _1137 = _1078 * 0.5;
        float _1138 = dot(vec3(_1135, _1136, _1137), vec3(_1135, _1136, _1137));
        float _1143 = (_1138 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1138);
        float _1151 = (dot(vec3(_390, _391, _392), vec3(_1143 * _1135, _1143 * _1136, _1143 * _1137)) + 1.0) * 0.5;
        float _3528 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1160 = sqrt(((_1136 * _1136) + (_1135 * _1135)) + (_1137 * _1137)) / (_1091 + 9.9999997473787516355514526367188e-06);
        float _3539 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1161 = isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0));
        float _1162 = _1161 * 2.0;
        float _1166 = (1.0 - _1161) / (_1161 + 1.0);
        float _3550 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1167 = isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0));
        float _1176 = ((((1.0 - _1167) * (_1162 + 2.0)) * exp2(log2(isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0))) * (_1162 + 1.0))) + _1167) * _1091;
        float _1177 = _1059 * 0.5;
        float _1178 = _1069 * 0.5;
        float _1179 = _1079 * 0.5;
        float _1180 = dot(vec3(_1177, _1178, _1179), vec3(_1177, _1178, _1179));
        float _1185 = (_1180 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1180);
        float _1193 = (dot(vec3(_390, _391, _392), vec3(_1185 * _1177, _1185 * _1178, _1185 * _1179)) + 1.0) * 0.5;
        float _3561 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1202 = sqrt(((_1178 * _1178) + (_1177 * _1177)) + (_1179 * _1179)) / (_1092 + 9.9999997473787516355514526367188e-06);
        float _3572 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1203 = isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0));
        float _1204 = _1203 * 2.0;
        float _1208 = (1.0 - _1203) / (_1203 + 1.0);
        float _3583 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1209 = isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0));
        float _1218 = ((((1.0 - _1209) * (_1204 + 2.0)) * exp2(log2(isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0))) * (_1204 + 1.0))) + _1209) * _1092;
        _1226 = _1059;
        _1227 = _1058;
        _1228 = _1057;
        _1229 = _1069;
        _1230 = _1068;
        _1231 = _1067;
        _1232 = _1079;
        _1233 = _1078;
        _1234 = _1077;
        _1235 = _1092;
        _1236 = _1091;
        _1237 = _1090;
        _1238 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0)));
        _1239 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0)));
        _1240 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0)));
    }
    else
    {
        _1226 = _917;
        _1227 = _917;
        _1228 = _917;
        _1229 = _917;
        _1230 = _917;
        _1231 = _917;
        _1232 = _917;
        _1233 = _917;
        _1234 = _917;
        _1235 = _917;
        _1236 = _917;
        _1237 = _917;
        _1238 = 0.0;
        _1239 = 0.0;
        _1240 = 0.0;
    }
    float _1250 = (cbModelParam._m0[1u].x * (_1238 - _929)) + _929;
    float _1251 = (cbModelParam._m0[1u].x * (_1239 - _930)) + _930;
    float _1252 = (cbModelParam._m0[1u].x * (_1240 - _931)) + _931;
    float _1273 = fma(_1252, cbSceneParam._m0[89u].z, fma(_1251, cbSceneParam._m0[89u].y, _1250 * cbSceneParam._m0[89u].x));
    float _1276 = fma(_1252, cbSceneParam._m0[90u].z, fma(_1251, cbSceneParam._m0[90u].y, _1250 * cbSceneParam._m0[90u].x));
    float _1279 = fma(_1252, cbSceneParam._m0[91u].z, fma(_1251, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1250));
    float _1294 = _553 * 0.5;
    float _1295 = _554 * 0.5;
    float _1296 = _555 * 0.5;
    float _1297 = dot(vec4(_1294, _1295, _1296, 1.0), vec4(_1228, _1231, _1234, _1237));
    float _1300 = dot(vec4(_1294, _1295, _1296, 1.0), vec4(_1227, _1230, _1233, _1236));
    float _1303 = dot(vec4(_1294, _1295, _1296, 1.0), vec4(_1226, _1229, _1232, _1235));
    float _1337;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1310 = dot(vec4(_1294, _1295, _1296, 1.0), vec4(_916, _920, _923, _926));
        float _1314 = dot(vec4(_1294, _1295, _1296, 1.0), vec4(_918, _921, _924, _927));
        float _1318 = dot(vec4(_1294, _1295, _1296, 1.0), vec4(_919, _922, _925, _928));
        float _1325 = dot(vec4(cbModelParam._m0[39u]), vec4(_1294, _1295, _1296, 1.0));
        _1337 = dot(vec3(isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0)), isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0)), isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1325) ? 0.0 : (isnan(0.0) ? _1325 : max(0.0, _1325))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1337 = 1.0;
    }
    float _1348;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1339 = dot(vec4(cbModelParam._m0[40u]), vec4(_1294, _1295, _1296, 1.0));
        _1348 = dot(vec3(isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0)), isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0)), isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1339) ? 0.0 : (isnan(0.0) ? _1339 : max(0.0, _1339))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1348 = 1.0;
    }
    float _1352 = (_1348 * cbModelParam._m0[1u].x) + (_1337 * (1.0 - cbModelParam._m0[1u].x));
    float _1362 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _393);
    float _1363 = isnan(_1362) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1362 : min(cbModelParam._m0[25u].z, _1362));
    float _1444;
    float _1446;
    float _1448;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1411 = fma(_614, cbModelParam._m0[13u].z, fma(_610, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _606)) + cbModelParam._m0[13u].w;
        float _1415 = fma(_614, cbModelParam._m0[14u].z, fma(_610, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _606)) + cbModelParam._m0[14u].w;
        float _1419 = fma(_614, cbModelParam._m0[15u].z, fma(_610, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _606)) + cbModelParam._m0[15u].w;
        float _1422 = fma(_555, cbModelParam._m0[13u].z, fma(_554, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _553));
        float _1425 = fma(_555, cbModelParam._m0[14u].z, fma(_554, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _553));
        float _1428 = fma(_555, cbModelParam._m0[15u].z, fma(_554, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _553));
        float _1456;
        if (_1422 > 0.0)
        {
            _1456 = abs((1.0 - _1411) / _1422);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1422 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1411 + 1.0) / _1422);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1456 = frontier_phi_16_14_ladder;
        }
        float _1660;
        if (_1425 > 0.0)
        {
            _1660 = abs((1.0 - _1415) / _1425);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1425 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1415 + 1.0) / _1425);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1660 = frontier_phi_25_21_ladder;
        }
        float _1903;
        if (_1428 > 0.0)
        {
            _1903 = abs((1.0 - _1419) / _1428);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1428 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1419 + 1.0) / _1428);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1903 = frontier_phi_37_32_ladder;
        }
        float _1905 = isnan(_1660) ? _1456 : (isnan(_1456) ? _1660 : min(_1456, _1660));
        float _1906 = isnan(_1903) ? _1905 : (isnan(_1905) ? _1903 : min(_1905, _1903));
        float _1910 = (_1906 * _1422) + _1411;
        float _1911 = (_1906 * _1425) + _1415;
        float _1912 = (_1906 * _1428) + _1419;
        float _1913 = _1906 * 9.9999997473787516355514526367188e-05;
        float _1915 = (-1.0) - _1913;
        float _1917 = _1913 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1912 > _1917) || ((_1912 < _1915) || ((_1911 > _1917) || ((_1911 < _1915) || ((_1910 < _1915) || (_1910 > _1917))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2036 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1912, cbModelParam._m0[9u].z, fma(_1911, cbModelParam._m0[9u].y, _1910 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1912, cbModelParam._m0[10u].z, fma(_1911, cbModelParam._m0[10u].y, _1910 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1912, cbModelParam._m0[11u].z, fma(_1911, cbModelParam._m0[11u].y, _1910 * cbModelParam._m0[11u].x))), _1363);
            frontier_phi_15_37_ladder = _2036.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2036.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2036.x * cbModelParam._m0[1u].y;
        }
        _1444 = frontier_phi_15_37_ladder_2;
        _1446 = frontier_phi_15_37_ladder_1;
        _1448 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1432 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_553, _554, _555), _1363);
        _1444 = _1432.x * cbModelParam._m0[1u].y;
        _1446 = _1432.y * cbModelParam._m0[1u].y;
        _1448 = _1432.z * cbModelParam._m0[1u].y;
    }
    float _1452 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _393);
    float _1453 = isnan(_1452) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1452 : min(cbModelParam._m0[25u].w, _1452));
    float _1546;
    float _1548;
    float _1550;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1510 = fma(_614, cbModelParam._m0[21u].z, fma(_610, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _606)) + cbModelParam._m0[21u].w;
        float _1514 = fma(_614, cbModelParam._m0[22u].z, fma(_610, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _606)) + cbModelParam._m0[22u].w;
        float _1518 = fma(_614, cbModelParam._m0[23u].z, fma(_610, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _606)) + cbModelParam._m0[23u].w;
        float _1521 = fma(_555, cbModelParam._m0[21u].z, fma(_554, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _553));
        float _1524 = fma(_555, cbModelParam._m0[22u].z, fma(_554, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _553));
        float _1527 = fma(_555, cbModelParam._m0[23u].z, fma(_554, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _553));
        float _1665;
        if (_1521 > 0.0)
        {
            _1665 = abs((1.0 - _1510) / _1521);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1521 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1510 + 1.0) / _1521);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1665 = frontier_phi_27_23_ladder;
        }
        float _1930;
        if (_1524 > 0.0)
        {
            _1930 = abs((1.0 - _1514) / _1524);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1524 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1514 + 1.0) / _1524);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1930 = frontier_phi_39_34_ladder;
        }
        float _2135;
        if (_1527 > 0.0)
        {
            _2135 = abs((1.0 - _1518) / _1527);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1527 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1518 + 1.0) / _1527);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2135 = frontier_phi_48_45_ladder;
        }
        float _2137 = isnan(_1930) ? _1665 : (isnan(_1665) ? _1930 : min(_1665, _1930));
        float _2138 = isnan(_2135) ? _2137 : (isnan(_2137) ? _2135 : min(_2137, _2135));
        float _2142 = (_2138 * _1521) + _1510;
        float _2143 = (_2138 * _1524) + _1514;
        float _2144 = (_2138 * _1527) + _1518;
        float _2145 = _2138 * 9.9999997473787516355514526367188e-05;
        float _2146 = (-1.0) - _2145;
        float _2148 = _2145 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2144 > _2148) || ((_2144 < _2146) || ((_2143 > _2148) || ((_2143 < _2146) || ((_2142 < _2146) || (_2142 > _2148))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2342 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2144, cbModelParam._m0[17u].z, fma(_2143, cbModelParam._m0[17u].y, _2142 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2144, cbModelParam._m0[18u].z, fma(_2143, cbModelParam._m0[18u].y, _2142 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2144, cbModelParam._m0[19u].z, fma(_2143, cbModelParam._m0[19u].y, _2142 * cbModelParam._m0[19u].x))), _1453);
            frontier_phi_24_48_ladder = _2342.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2342.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2342.x * cbModelParam._m0[1u].z;
        }
        _1546 = frontier_phi_24_48_ladder_2;
        _1548 = frontier_phi_24_48_ladder_1;
        _1550 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1530 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_553, _554, _555), _1453);
        _1546 = _1530.x * cbModelParam._m0[1u].z;
        _1548 = _1530.y * cbModelParam._m0[1u].z;
        _1550 = _1530.z * cbModelParam._m0[1u].z;
    }
    float _1562 = ((((1.0 - _574) * ((_561 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_574 * _561)) * _545;
    float _1563 = _1562 * ((cbModelParam._m0[1u].w * (_1546 - _1444)) + _1444);
    float _1564 = _1562 * ((cbModelParam._m0[1u].w * (_1548 - _1446)) + _1446);
    float _1565 = _1562 * ((cbModelParam._m0[1u].w * (_1550 - _1448)) + _1448);
    float _1568 = fma(_1565, cbSceneParam._m0[89u].z, fma(_1564, cbSceneParam._m0[89u].y, _1563 * cbSceneParam._m0[89u].x));
    float _1571 = fma(_1565, cbSceneParam._m0[90u].z, fma(_1564, cbSceneParam._m0[90u].y, _1563 * cbSceneParam._m0[90u].x));
    float _1574 = fma(_1565, cbSceneParam._m0[91u].z, fma(_1564, cbSceneParam._m0[91u].y, _1563 * cbSceneParam._m0[91u].x));
    uvec4 _1584 = floatBitsToUint(cbInstanceData._m0[_520 + 5u]);
    uint _1586 = _1584.x * 14u;
    uint _1587 = _1586 + 13u;
    float _1594 = _545 + (-1.0);
    float _1599 = (cbLight._m0[_1587].x * _1594) + 1.0;
    float _1600 = (cbLight._m0[_1587].y * _1594) + 1.0;
    float _1601 = (cbLight._m0[_1587].z * _1594) + 1.0;
    float _1602 = (cbLight._m0[_1587].w * _1594) + 1.0;
    uint _1603 = _1586 + 5u;
    float _1609 = isnan(1.0) ? _1600 : (isnan(_1600) ? 1.0 : min(_1600, 1.0));
    uint _1613 = _1586 + 4u;
    float _1619 = isnan(1.0) ? _1599 : (isnan(_1599) ? 1.0 : min(_1599, 1.0));
    uint _1623 = _1586 | 1u;
    float _1634 = dot(vec3(cbLight._m0[_1586].xyz), vec3(_390, _391, _392));
    float _1637 = dot(vec3(cbLight._m0[_1623].xyz), vec3(_390, _391, _392));
    float _3719 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
    float _3730 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
    float _1642 = (isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0))) * 0.3183098733425140380859375;
    float _1644 = (isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0))) * 0.3183098733425140380859375;
    float _1651 = ((cbLight._m0[_1603].x * _1609) * _1644) + ((cbLight._m0[_1613].x * _1619) * _1642);
    float _1652 = ((_1609 * cbLight._m0[_1603].y) * _1644) + ((_1619 * cbLight._m0[_1613].y) * _1642);
    float _1653 = ((_1609 * cbLight._m0[_1603].z) * _1644) + ((_1619 * cbLight._m0[_1613].z) * _1642);
    uvec4 _1657 = floatBitsToUint(cbLight._m0[_1586 + 12u]);
    bool _1659 = _1657.x == 0u;
    float _1670;
    float _1672;
    float _1674;
    if (_1659)
    {
        _1670 = _1651;
        _1672 = _1652;
        _1674 = _1653;
    }
    else
    {
        uint _1678 = _1586 + 6u;
        float _1694 = (dot(vec3(cbLight._m0[_1586 + 2u].xyz), vec3(_390, _391, _392)) * 0.5) + 0.5;
        float _1695 = _1694 * _1694;
        float _3741 = isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0));
        float _1696 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
        float _1697 = isnan(1.0) ? _1601 : (isnan(_1601) ? 1.0 : min(_1601, 1.0));
        _1670 = (((cbLight._m0[_1678].x * 0.3183098733425140380859375) * _1696) * _1697) + _1651;
        _1672 = (((cbLight._m0[_1678].y * 0.3183098733425140380859375) * _1696) * _1697) + _1652;
        _1674 = (((cbLight._m0[_1678].z * 0.3183098733425140380859375) * _1696) * _1697) + _1653;
    }
    bool _1677 = _1657.y == 0u;
    float _1715;
    float _1717;
    float _1719;
    if (_1677)
    {
        _1715 = _1670;
        _1717 = _1672;
        _1719 = _1674;
    }
    else
    {
        uint _1874 = _1586 + 7u;
        float _1890 = (dot(vec3(cbLight._m0[_1586 + 3u].xyz), vec3(_390, _391, _392)) * 0.5) + 0.5;
        float _1891 = _1890 * _1890;
        float _3757 = isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0));
        float _1892 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
        float _1893 = isnan(1.0) ? _1602 : (isnan(_1602) ? 1.0 : min(_1602, 1.0));
        _1715 = (((cbLight._m0[_1874].x * 0.3183098733425140380859375) * _1892) * _1893) + _1670;
        _1717 = (((cbLight._m0[_1874].y * 0.3183098733425140380859375) * _1892) * _1893) + _1672;
        _1719 = (((cbLight._m0[_1874].z * 0.3183098733425140380859375) * _1892) * _1893) + _1674;
    }
    uint _1722 = _1586 + 8u;
    float _1735 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1586].w)) * _393) * 0.949999988079071044921875);
    float _1736 = _1735 * _1735;
    float _1737 = cbLight._m0[_1586].x + _471;
    float _1738 = cbLight._m0[_1586].y + _472;
    float _1739 = cbLight._m0[_1586].z + _473;
    float _1743 = inversesqrt(dot(vec3(_1737, _1738, _1739), vec3(_1737, _1738, _1739)));
    float _1744 = _1743 * _1737;
    float _1745 = _1743 * _1738;
    float _1746 = _1743 * _1739;
    float _1747 = dot(vec3(_390, _391, _392), vec3(cbLight._m0[_1586].xyz));
    float _3773 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
    float _1750 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
    float _3784 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _1751 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
    float _1752 = dot(vec3(_390, _391, _392), vec3(_1744, _1745, _1746));
    float _3795 = isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0));
    float _1755 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
    float _1756 = dot(vec3(cbLight._m0[_1586].xyz), vec3(_1744, _1745, _1746));
    float _3806 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
    float _1760 = _1736 * _1736;
    float _1764 = ((_1755 * _1755) * (_1760 + (-1.0))) + 1.0;
    float _1775 = (exp2(log2(1.0 - (isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1776 = 1.0 - _1736;
    float _1787 = (0.5 / (((_1751 * ((_1750 * _1776) + _1736)) + 9.9999999392252902907785028219223e-09) + (((_1751 * _1776) + _1736) * _1750))) * _1750;
    float _3817 = isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0));
    float _1789 = (isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0))) * (_1760 / ((_1764 * _1764) * 3.141590118408203125));
    uint _1800 = _1586 + 9u;
    float _1811 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1623].w)) * _393) * 0.949999988079071044921875);
    float _1812 = _1811 * _1811;
    float _1813 = cbLight._m0[_1623].x + _471;
    float _1814 = cbLight._m0[_1623].y + _472;
    float _1815 = cbLight._m0[_1623].z + _473;
    float _1819 = inversesqrt(dot(vec3(_1813, _1814, _1815), vec3(_1813, _1814, _1815)));
    float _1820 = _1819 * _1813;
    float _1821 = _1819 * _1814;
    float _1822 = _1819 * _1815;
    float _1823 = dot(vec3(_390, _391, _392), vec3(cbLight._m0[_1623].xyz));
    float _3828 = isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0));
    float _1826 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
    float _1827 = dot(vec3(_390, _391, _392), vec3(_1820, _1821, _1822));
    float _3839 = isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0));
    float _1830 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
    float _1831 = dot(vec3(cbLight._m0[_1623].xyz), vec3(_1820, _1821, _1822));
    float _3850 = isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0));
    float _1835 = _1812 * _1812;
    float _1839 = ((_1830 * _1830) * (_1835 + (-1.0))) + 1.0;
    float _1848 = (exp2(log2(1.0 - (isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1849 = 1.0 - _1812;
    float _1859 = (0.5 / (((_1751 * ((_1826 * _1849) + _1812)) + 9.9999999392252902907785028219223e-09) + (((_1751 * _1849) + _1812) * _1826))) * _1826;
    float _3861 = isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0));
    float _1861 = (isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0))) * (_1835 / ((_1839 * _1839) * 3.141590118408203125));
    float _1871 = (((_1848 * cbLight._m0[_1800].x) * _1861) * _1609) + (((_1775 * cbLight._m0[_1722].x) * _1789) * _1619);
    float _1872 = (((_1848 * cbLight._m0[_1800].y) * _1861) * _1609) + (((_1775 * cbLight._m0[_1722].y) * _1789) * _1619);
    float _1873 = (((_1848 * cbLight._m0[_1800].z) * _1861) * _1609) + (((_1775 * cbLight._m0[_1722].z) * _1789) * _1619);
    float _1935;
    float _1937;
    float _1939;
    if (_1659)
    {
        _1935 = _1871;
        _1937 = _1872;
        _1939 = _1873;
    }
    else
    {
        uint _1941 = _1586 + 2u;
        uint _1945 = _1586 + 10u;
        float _1959 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1941].w)) * _393) * 0.949999988079071044921875);
        float _1960 = _1959 * _1959;
        float _1961 = cbLight._m0[_1941].x + _471;
        float _1962 = cbLight._m0[_1941].y + _472;
        float _1963 = cbLight._m0[_1941].z + _473;
        float _1967 = inversesqrt(dot(vec3(_1961, _1962, _1963), vec3(_1961, _1962, _1963)));
        float _1968 = _1967 * _1961;
        float _1969 = _1967 * _1962;
        float _1970 = _1967 * _1963;
        float _1971 = dot(vec3(_390, _391, _392), vec3(cbLight._m0[_1941].xyz));
        float _3872 = isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0));
        float _1974 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
        float _1975 = dot(vec3(_390, _391, _392), vec3(_1968, _1969, _1970));
        float _3883 = isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0));
        float _1978 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
        float _1979 = dot(vec3(cbLight._m0[_1941].xyz), vec3(_1968, _1969, _1970));
        float _3894 = isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0));
        float _1983 = _1960 * _1960;
        float _1987 = ((_1978 * _1978) * (_1983 + (-1.0))) + 1.0;
        float _1996 = (exp2(log2(1.0 - (isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1997 = 1.0 - _1960;
        float _2007 = (0.5 / (((_1751 * ((_1974 * _1997) + _1960)) + 9.9999999392252902907785028219223e-09) + (((_1751 * _1997) + _1960) * _1974))) * _1974;
        float _3905 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
        float _2009 = (isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0))) * (_1983 / ((_1987 * _1987) * 3.141590118408203125));
        float _2010 = isnan(1.0) ? _1601 : (isnan(_1601) ? 1.0 : min(_1601, 1.0));
        _1935 = (((_1996 * cbLight._m0[_1945].x) * _2009) * _2010) + _1871;
        _1937 = (((_1996 * cbLight._m0[_1945].y) * _2009) * _2010) + _1872;
        _1939 = (((_1996 * cbLight._m0[_1945].z) * _2009) * _2010) + _1873;
    }
    float _2045;
    float _2047;
    float _2049;
    if (_1677)
    {
        _2045 = _1935;
        _2047 = _1937;
        _2049 = _1939;
    }
    else
    {
        uint _2056 = _1586 + 3u;
        uint _2060 = _1586 + 11u;
        float _2074 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2056].w)) * _393) * 0.949999988079071044921875);
        float _2075 = _2074 * _2074;
        float _2076 = cbLight._m0[_2056].x + _471;
        float _2077 = cbLight._m0[_2056].y + _472;
        float _2078 = cbLight._m0[_2056].z + _473;
        float _2082 = inversesqrt(dot(vec3(_2076, _2077, _2078), vec3(_2076, _2077, _2078)));
        float _2083 = _2082 * _2076;
        float _2084 = _2082 * _2077;
        float _2085 = _2082 * _2078;
        float _2086 = dot(vec3(_390, _391, _392), vec3(cbLight._m0[_2056].xyz));
        float _3921 = isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0));
        float _2089 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
        float _2090 = dot(vec3(_390, _391, _392), vec3(_2083, _2084, _2085));
        float _3932 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
        float _2093 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
        float _2094 = dot(vec3(cbLight._m0[_2056].xyz), vec3(_2083, _2084, _2085));
        float _3943 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
        float _2098 = _2075 * _2075;
        float _2102 = ((_2093 * _2093) * (_2098 + (-1.0))) + 1.0;
        float _2111 = (exp2(log2(1.0 - (isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2112 = 1.0 - _2075;
        float _2122 = (0.5 / (((_1751 * ((_2089 * _2112) + _2075)) + 9.9999999392252902907785028219223e-09) + (((_1751 * _2112) + _2075) * _2089))) * _2089;
        float _3954 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
        float _2124 = (isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0))) * (_2098 / ((_2102 * _2102) * 3.141590118408203125));
        float _2125 = isnan(1.0) ? _1602 : (isnan(_1602) ? 1.0 : min(_1602, 1.0));
        _2045 = (((_2111 * cbLight._m0[_2060].x) * _2124) * _2125) + _1935;
        _2047 = (((_2111 * cbLight._m0[_2060].y) * _2124) * _2125) + _1937;
        _2049 = (((_2111 * cbLight._m0[_2060].z) * _2124) * _2125) + _1939;
    }
    float _2259;
    float _2261;
    float _2263;
    float _2265;
    float _2267;
    float _2269;
    if (_1584.y == 0u)
    {
        float _2200 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2201 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2200;
        float _2202 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2200;
        float _2203 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2200;
        uvec4 _2215 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2216 = _2215.x;
        uint _2227 = uint((float(_2215.y) * floor(float(uint(cbSceneParam._m0[85u].y * _480) / _2216))) + floor(float(uint(cbSceneParam._m0[85u].x * _479) / _2216)));
        float _2237 = (log2(_2203 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2238 = isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : max(_2237, 0.0));
        uint _2241 = uint(isnan(14.0) ? _2238 : (isnan(_2238) ? 14.0 : min(_2238, 14.0)));
        uvec4 _2246 = texelFetch(g_lightClusterGridBuffer, int(((_2241 << 2u) + (_2227 << 6u)) >> 2u));
        uint _2247 = _2246.x;
        uint _2248 = _2215.z;
        float _2347;
        float _2349;
        float _2351;
        float _2353;
        float _2355;
        float _2357;
        if (((((1u << ((_2248 >> 4u) & 15u)) + 4294967295u) & _2247) == 0u) || ((_2248 & 240u) == 0u))
        {
            _2347 = 0.0;
            _2349 = 0.0;
            _2351 = 0.0;
            _2353 = 0.0;
            _2355 = 0.0;
            _2357 = 0.0;
        }
        else
        {
            float _2348;
            float _2350;
            float _2352;
            float _2354;
            float _2356;
            float _2358;
            float _2491 = 0.0;
            float _2492 = 0.0;
            float _2493 = 0.0;
            float _2494 = 0.0;
            float _2495 = 0.0;
            float _2496 = 0.0;
            uint _2497 = 0u;
            uint _2506;
            bool _2507;
            for (;;)
            {
                _2506 = texelFetch(g_lightClassification, int((((_2241 << 5u) + (_2227 << 9u)) + (_2497 << 2u)) >> 2u)).x;
                _2507 = _2506 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2507)
                {
                    frontier_phi_63_pred = _2496;
                    frontier_phi_63_pred_1 = _2495;
                    frontier_phi_63_pred_2 = _2494;
                    frontier_phi_63_pred_3 = _2493;
                    frontier_phi_63_pred_4 = _2492;
                    frontier_phi_63_pred_5 = _2491;
                }
                else
                {
                    float _2615;
                    float _2616;
                    float _2617;
                    float _2618;
                    float _2619;
                    float _2620;
                    uint _2621;
                    _2615 = _2491;
                    _2616 = _2492;
                    _2617 = _2493;
                    _2618 = _2494;
                    _2619 = _2495;
                    _2620 = _2496;
                    _2621 = _2506;
                    float _2547;
                    float _2548;
                    float _2549;
                    float _2550;
                    float _2551;
                    float _2552;
                    for (;;)
                    {
                        uint _2625 = uint(findLSB(_2621)) + (_2497 << 5u);
                        uint _2622 = (_2621 + 4294967295u) & _2621;
                        uint _2627 = _2625 * 48u;
                        vec4 _2641 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2627)).x, texelFetch(g_PointLightRenderingBuffer, int(_2627 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2627 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2627 + 3u)).x));
                        uint _2647 = (_2625 * 48u) + 4u;
                        vec4 _2660 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2647)).x, texelFetch(g_PointLightRenderingBuffer, int(_2647 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2647 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2647 + 3u)).x));
                        uint _2666 = (_2625 * 48u) + 8u;
                        vec3 _2677 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2666)).x, texelFetch(g_PointLightRenderingBuffer, int(_2666 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2666 + 2u)).x));
                        float _2681 = _2641.x - _2201;
                        float _2682 = _2641.y - _2202;
                        float _2683 = _2641.z - _2203;
                        float _2684 = dot(vec3(_2681, _2682, _2683), vec3(_2681, _2682, _2683));
                        float _2687 = inversesqrt(_2684);
                        float _2688 = _2687 * _2681;
                        float _2689 = _2687 * _2682;
                        float _2690 = _2687 * _2683;
                        float _2691 = dot(vec3(_501, _504, _507), vec3(_2688, _2689, _2690));
                        float _2696 = 1.0 - (_2684 * _2641.w);
                        float _3980 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0));
                        float _2697 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
                        float _2698 = sqrt(_2684) * _2660.w;
                        float _2701 = 1.39999997615814208984375 / (_2698 + 1.39999997615814208984375);
                        float _2702 = _2701 * _2701;
                        float _2705 = ((1.0 - _2702) * _2691) + _2702;
                        float _2708 = _2698 * _2698;
                        float _2712 = ((isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0))) * _2697) / ((_2708 * 0.699999988079071044921875) + 1.0);
                        float _2716 = (-0.0) - _2201;
                        float _2717 = (-0.0) - _2202;
                        float _2718 = (-0.0) - _2203;
                        float _2722 = inversesqrt(dot(vec3(_2716, _2717, _2718), vec3(_2716, _2717, _2718)));
                        float _2723 = _2722 * _2716;
                        float _2724 = _2722 * _2717;
                        float _2725 = _2722 * _2718;
                        float _2733 = exp2(log2(1.0 / ((_2708 * 3.5) + 5.0)) * 0.25);
                        float _2734 = 1.0 - _561;
                        float _2741 = sqrt(1.0 - ((1.0 - (_2734 * _2734)) * (1.0 - (_2733 * _2733))));
                        float _2742 = _2741 * _2741;
                        float _2743 = _2742 * _2742;
                        float _2744 = _2723 + _2688;
                        float _2745 = _2724 + _2689;
                        float _2746 = _2725 + _2690;
                        float _2750 = inversesqrt(dot(vec3(_2744, _2745, _2746), vec3(_2744, _2745, _2746)));
                        float _2754 = dot(vec3(_501, _504, _507), vec3(_2723, _2724, _2725));
                        float _3996 = isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0));
                        float _2757 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
                        float _2758 = dot(vec3(_501, _504, _507), vec3(_2750 * _2744, _2750 * _2745, _2750 * _2746));
                        float _4007 = isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : max(_2758, 0.0));
                        float _2761 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
                        float _2765 = ((_2761 * _2761) * (_2743 + (-1.0))) + 1.0;
                        float _2766 = _2701 * _2742;
                        float _2767 = _2766 * _2766;
                        float _2770 = ((1.0 - _2767) * _2691) + _2767;
                        float _4018 = isnan(0.0) ? _2770 : (isnan(_2770) ? 0.0 : max(_2770, 0.0));
                        float _2771 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
                        float _2772 = 1.0 - _2742;
                        float _2782 = (0.5 / (((_2771 * ((_2757 * _2772) + _2742)) + 9.9999999392252902907785028219223e-09) + (((_2771 * _2772) + _2742) * _2757))) * _2771;
                        float _4029 = isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0));
                        float _2793 = (((_2743 * 3.1415927410125732421875) * (isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0)))) / ((_2765 * _2765) * ((_2708 * 2.1991131305694580078125) + 3.141590118408203125))) * _2697;
                        _2550 = (_2712 * _2660.x) + _2618;
                        _2551 = (_2712 * _2660.y) + _2619;
                        _2552 = (_2712 * _2660.z) + _2620;
                        _2547 = (_2793 * _2677.x) + _2615;
                        _2548 = (_2793 * _2677.y) + _2616;
                        _2549 = (_2793 * _2677.z) + _2617;
                        if (_2622 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2615 = _2547;
                            _2616 = _2548;
                            _2617 = _2549;
                            _2618 = _2550;
                            _2619 = _2551;
                            _2620 = _2552;
                            _2621 = _2622;
                        }
                    }
                    frontier_phi_63_pred = _2552;
                    frontier_phi_63_pred_1 = _2551;
                    frontier_phi_63_pred_2 = _2550;
                    frontier_phi_63_pred_3 = _2549;
                    frontier_phi_63_pred_4 = _2548;
                    frontier_phi_63_pred_5 = _2547;
                }
                _2358 = frontier_phi_63_pred;
                _2356 = frontier_phi_63_pred_1;
                _2354 = frontier_phi_63_pred_2;
                _2352 = frontier_phi_63_pred_3;
                _2350 = frontier_phi_63_pred_4;
                _2348 = frontier_phi_63_pred_5;
                uint _2498 = _2497 + 1u;
                if (_2498 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2491 = _2348;
                    _2492 = _2350;
                    _2493 = _2352;
                    _2494 = _2354;
                    _2495 = _2356;
                    _2496 = _2358;
                    _2497 = _2498;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2347 = _2348;
            _2349 = _2350;
            _2351 = _2352;
            _2353 = _2354;
            _2355 = _2356;
            _2357 = _2358;
        }
        uvec4 _2361 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2362 = _2361.z;
        uint _2364 = (_2362 >> 8u) & 15u;
        float _2459;
        float _2461;
        float _2463;
        float _2465;
        float _2467;
        float _2469;
        if (((4294967295u << _2364) & _2247) == 0u)
        {
            _2459 = _2347;
            _2461 = _2349;
            _2463 = _2351;
            _2465 = _2353;
            _2467 = _2355;
            _2469 = _2357;
        }
        else
        {
            float _2484 = inversesqrt(dot(vec3(_2201, _2202, _2203), vec3(_2201, _2202, _2203)));
            float _2485 = _2484 * _2201;
            float _2486 = _2484 * _2202;
            float _2487 = _2484 * _2203;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2364 < ((_2362 >> 12u) & 15u))
            {
                float _2460;
                float _2462;
                float _2464;
                float _2466;
                float _2468;
                float _2470;
                float _2598 = _2347;
                float _2599 = _2349;
                float _2600 = _2351;
                float _2601 = _2353;
                float _2602 = _2355;
                float _2603 = _2357;
                uint _2604 = _2364;
                uint _2613;
                bool _2614;
                for (;;)
                {
                    _2613 = texelFetch(g_lightClassification, int((((_2241 << 5u) + (_2227 << 9u)) + (_2604 << 2u)) >> 2u)).x;
                    _2614 = _2613 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2614)
                    {
                        frontier_phi_69_pred = _2603;
                        frontier_phi_69_pred_1 = _2602;
                        frontier_phi_69_pred_2 = _2601;
                        frontier_phi_69_pred_3 = _2600;
                        frontier_phi_69_pred_4 = _2599;
                        frontier_phi_69_pred_5 = _2598;
                    }
                    else
                    {
                        float _2798;
                        float _2799;
                        float _2800;
                        float _2801;
                        float _2802;
                        float _2803;
                        float _3094;
                        float _3095;
                        float _3096;
                        float _3097;
                        float _3098;
                        float _3099;
                        float _2811 = _2598;
                        float _2812 = _2599;
                        float _2813 = _2600;
                        float _2814 = _2601;
                        float _2815 = _2602;
                        float _2816 = _2603;
                        uint _2817 = _2613;
                        uint _2818;
                        vec4 _2843;
                        float _2844;
                        vec4 _2859;
                        vec3 _2871;
                        vec4 _2887;
                        vec4 _2903;
                        float _2950;
                        bool _2951;
                        for (;;)
                        {
                            uint _2828 = ((_2604 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2817));
                            _2818 = (_2817 + 4294967295u) & _2817;
                            uint _2830 = _2828 * 40u;
                            _2843 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2830)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2830 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2830 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2830 + 3u)).x));
                            _2844 = _2843.w;
                            uint _2846 = (_2828 * 40u) + 4u;
                            _2859 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2846)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2846 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2846 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2846 + 3u)).x));
                            uint _2861 = (_2828 * 40u) + 8u;
                            _2871 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2861)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2861 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2861 + 2u)).x));
                            uint _2874 = (_2828 * 40u) + 16u;
                            _2887 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2874)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2874 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2874 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2874 + 3u)).x));
                            uint _2890 = (_2828 * 40u) + 20u;
                            _2903 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2890)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2890 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2890 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2890 + 3u)).x));
                            uint _2906 = (_2828 * 40u) + 24u;
                            vec4 _2919 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2906)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2906 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2906 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2906 + 3u)).x));
                            uint _2925 = (_2828 * 40u) + 28u;
                            vec4 _2938 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2925)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2925 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2925 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2925 + 3u)).x));
                            _2950 = fma(_2203, _2938.z, fma(_2202, _2938.y, _2938.x * _2201)) + _2938.w;
                            _2951 = !((fma(_2203, _2919.z, fma(_2202, _2919.y, _2919.x * _2201)) + _2919.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2951)
                            {
                                float _2978 = _2843.x - _2201;
                                float _2979 = _2843.y - _2202;
                                float _2980 = _2843.z - _2203;
                                float _2981 = dot(vec3(_2978, _2979, _2980), vec3(_2978, _2979, _2980));
                                float _2984 = inversesqrt(_2981);
                                float _2985 = _2984 * _2978;
                                float _2986 = _2984 * _2979;
                                float _2987 = _2984 * _2980;
                                float _2991 = 1.0 - (_2981 / (_2844 * _2844));
                                float _4040 = isnan(0.0) ? _2991 : (isnan(_2991) ? 0.0 : max(_2991, 0.0));
                                float _2992 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
                                float _2996 = sqrt(_2981) * _2859.w;
                                float _2998 = 1.39999997615814208984375 / (_2996 + 1.39999997615814208984375);
                                float _2999 = _2998 * _2998;
                                float _3002 = ((1.0 - _2999) * dot(vec3(_2985, _2986, _2987), vec3(_501, _504, _507))) + _2999;
                                float _3005 = _2996 * _2996;
                                float _3009 = (fma(_2203, _2887.z, fma(_2202, _2887.y, _2887.x * _2201)) + _2887.w) / _2950;
                                float _3010 = (fma(_2203, _2903.z, fma(_2202, _2903.y, _2903.x * _2201)) + _2903.w) / _2950;
                                float _3014 = 1.0 - dot(vec2(_3009, _3010), vec2(_3009, _3010));
                                float _4056 = isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : max(_3014, 0.0));
                                float _3015 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
                                float _3016 = _3015 * (((isnan(0.0) ? _3002 : (isnan(_3002) ? 0.0 : max(_3002, 0.0))) * _2992) / ((_3005 * 0.699999988079071044921875) + 1.0));
                                float _3028 = exp2(log2(1.0 / ((_3005 * 3.5) + 5.0)) * 0.25);
                                float _3029 = 1.0 - _561;
                                float _3036 = sqrt(1.0 - ((1.0 - (_3029 * _3029)) * (1.0 - (_3028 * _3028))));
                                float _3037 = _3036 * _3036;
                                float _3038 = _3037 * _3037;
                                float _3039 = _2985 - _2485;
                                float _3040 = _2986 - _2486;
                                float _3041 = _2987 - _2487;
                                float _3045 = inversesqrt(dot(vec3(_3039, _3040, _3041), vec3(_3039, _3040, _3041)));
                                float _3049 = dot(vec3(_501, _504, _507), vec3((-0.0) - _2485, (-0.0) - _2486, (-0.0) - _2487));
                                float _4067 = isnan(0.0) ? _3049 : (isnan(_3049) ? 0.0 : max(_3049, 0.0));
                                float _3052 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
                                float _3053 = dot(vec3(_501, _504, _507), vec3(_3045 * _3039, _3045 * _3040, _3045 * _3041));
                                float _4078 = isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : max(_3053, 0.0));
                                float _3056 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
                                float _3060 = ((_3056 * _3056) * (_3038 + (-1.0))) + 1.0;
                                float _3061 = _2998 * _3037;
                                float _3062 = _3061 * _3061;
                                float _3068 = ((1.0 - _3062) * dot(vec3(_501, _504, _507), vec3(_2985, _2986, _2987))) + _3062;
                                float _4089 = isnan(0.0) ? _3068 : (isnan(_3068) ? 0.0 : max(_3068, 0.0));
                                float _3069 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
                                float _3070 = 1.0 - _3037;
                                float _3080 = (0.5 / (((_3069 * ((_3052 * _3070) + _3037)) + 9.9999999392252902907785028219223e-09) + (((_3069 * _3070) + _3037) * _3052))) * _3069;
                                float _4100 = isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : max(_3080, 0.0));
                                float _3090 = (_3015 * _2992) * (((_3038 * 3.1415927410125732421875) * (isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0)))) / ((_3060 * _3060) * ((_3005 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3016 * _2859.z;
                                frontier_phi_75_pred_1 = _3016 * _2859.y;
                                frontier_phi_75_pred_2 = _3016 * _2859.x;
                                frontier_phi_75_pred_3 = _3090 * _2871.z;
                                frontier_phi_75_pred_4 = _3090 * _2871.y;
                                frontier_phi_75_pred_5 = _3090 * _2871.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3099 = frontier_phi_75_pred;
                            _3098 = frontier_phi_75_pred_1;
                            _3097 = frontier_phi_75_pred_2;
                            _3096 = frontier_phi_75_pred_3;
                            _3095 = frontier_phi_75_pred_4;
                            _3094 = frontier_phi_75_pred_5;
                            _2801 = _3097 + _2814;
                            _2802 = _3098 + _2815;
                            _2803 = _3099 + _2816;
                            _2798 = _3094 + _2811;
                            _2799 = _3095 + _2812;
                            _2800 = _3096 + _2813;
                            if (_2818 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2811 = _2798;
                                _2812 = _2799;
                                _2813 = _2800;
                                _2814 = _2801;
                                _2815 = _2802;
                                _2816 = _2803;
                                _2817 = _2818;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2803;
                        frontier_phi_69_pred_1 = _2802;
                        frontier_phi_69_pred_2 = _2801;
                        frontier_phi_69_pred_3 = _2800;
                        frontier_phi_69_pred_4 = _2799;
                        frontier_phi_69_pred_5 = _2798;
                    }
                    _2470 = frontier_phi_69_pred;
                    _2468 = frontier_phi_69_pred_1;
                    _2466 = frontier_phi_69_pred_2;
                    _2464 = frontier_phi_69_pred_3;
                    _2462 = frontier_phi_69_pred_4;
                    _2460 = frontier_phi_69_pred_5;
                    uint _2605 = _2604 + 1u;
                    if (_2605 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2598 = _2460;
                        _2599 = _2462;
                        _2600 = _2464;
                        _2601 = _2466;
                        _2602 = _2468;
                        _2603 = _2470;
                        _2604 = _2605;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2470;
                frontier_phi_57_58_ladder_1 = _2468;
                frontier_phi_57_58_ladder_2 = _2466;
                frontier_phi_57_58_ladder_3 = _2464;
                frontier_phi_57_58_ladder_4 = _2462;
                frontier_phi_57_58_ladder_5 = _2460;
            }
            else
            {
                frontier_phi_57_58_ladder = _2357;
                frontier_phi_57_58_ladder_1 = _2355;
                frontier_phi_57_58_ladder_2 = _2353;
                frontier_phi_57_58_ladder_3 = _2351;
                frontier_phi_57_58_ladder_4 = _2349;
                frontier_phi_57_58_ladder_5 = _2347;
            }
            _2459 = frontier_phi_57_58_ladder_5;
            _2461 = frontier_phi_57_58_ladder_4;
            _2463 = frontier_phi_57_58_ladder_3;
            _2465 = frontier_phi_57_58_ladder_2;
            _2467 = frontier_phi_57_58_ladder_1;
            _2469 = frontier_phi_57_58_ladder;
        }
        float _2474 = isnan(1.0) ? _545 : (isnan(_545) ? 1.0 : min(_545, 1.0));
        _2259 = (_2474 * _2465) + _1715;
        _2261 = (_2474 * _2467) + _1717;
        _2263 = (_2474 * _2469) + _1719;
        _2265 = ((_2459 * 0.039999999105930328369140625) * _2474) + _2045;
        _2267 = ((_2461 * 0.039999999105930328369140625) * _2474) + _2047;
        _2269 = ((_2463 * 0.039999999105930328369140625) * _2474) + _2049;
    }
    else
    {
        _2259 = _1715;
        _2261 = _1717;
        _2263 = _1719;
        _2265 = _2045;
        _2267 = _2047;
        _2269 = _2049;
    }
    float _4116 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _4127 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _4138 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    uint _2289 = _520 + 6u;
    float _2297 = _479 / cbSceneParam._m0[86u].x;
    float _2298 = _480 / cbSceneParam._m0[86u].y;
    vec4 _2312 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2297, _2298, (log2((isnan(cbSceneParam._m0[77u].w) ? _412 : (isnan(_412) ? cbSceneParam._m0[77u].w : min(_412, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2314 = _2312.x;
    float _2315 = _2312.y;
    float _2316 = _2312.z;
    float _2317 = _2312.w;
    float _2409;
    float _2411;
    float _2413;
    float _2415;
    if (_412 > cbSceneParam._m0[78u].w)
    {
        float _2372 = isnan(_412) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _412 : min(cbSceneParam._m0[80u].w, _412));
        float _2373 = _2372 / _412;
        float _2384 = _2373 * _464;
        float _2385 = _465 * _2373;
        float _2386 = (-0.0) - _2385;
        float _2387 = _2373 * _466;
        float _2389 = (cbSceneParam._m0[77u].w * _2386) / _2372;
        float _2390 = _2389 + cbSceneParam._m0[79u].w;
        float _2391 = cbSceneParam._m0[79u].w - _2385;
        float _2397 = sqrt(((_2384 * _2384) + (_2385 * _2385)) + (_2387 * _2387));
        float _2400 = (1.0 - (cbSceneParam._m0[77u].w / _2372)) * _2397;
        float _2405 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2407 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2560;
        if (abs((_2386 - _2389) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2560 = ((((_2390 > 0.0) ? exp2(_2405 * _2390) : (2.0 - exp2(_2407 * _2390))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2400;
        }
        else
        {
            float _2520 = 1.0 / cbSceneParam._m0[80u].x;
            float _2521 = isnan(_2391) ? _2390 : (isnan(_2390) ? _2391 : max(_2390, _2391));
            float _2522 = isnan(_2391) ? _2390 : (isnan(_2390) ? _2391 : min(_2390, _2391));
            float _2531 = isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : min(_2521, 0.0));
            float _2532 = isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : min(_2522, 0.0));
            _2560 = ((abs(_2397 / _2386) * cbSceneParam._m0[80u].y) * ((((_2531 - _2532) * 2.0) - ((exp2(_2405 * (isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0)))) - exp2(_2405 * (isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0))))) * _2520)) - ((exp2(_2407 * _2531) - exp2(_2407 * _2532)) * _2520))) + (_2400 * cbSceneParam._m0[80u].z);
        }
        vec4 _2562 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2297, _2298, 1.0), 0.0);
        float _2571 = exp2((_2560 * (-1.44269502162933349609375)) * (1.0 - _2562.w));
        float _2572 = log2(_2571);
        float _2588 = log2(_2317);
        _2409 = (exp2(_2588 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2572 * cbSceneParam._m0[78u].x)) * _2562.x) / cbSceneParam._m0[78u].x)) + _2314;
        _2411 = (exp2(_2588 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2572 * cbSceneParam._m0[78u].y)) * _2562.y) / cbSceneParam._m0[78u].y)) + _2315;
        _2413 = (exp2(_2588 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2572 * cbSceneParam._m0[78u].z)) * _2562.z) / cbSceneParam._m0[78u].z)) + _2316;
        _2415 = _2571 * _2317;
    }
    else
    {
        _2409 = _2314;
        _2411 = _2315;
        _2413 = _2316;
        _2415 = _2317;
    }
    float _2427 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2428 = _2427 == 3.0;
    float _2429 = log2(_2415);
    float _2436 = exp2(_2429 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0))) * (_2259 + ((isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0))) * _545))) + ((_2265 + ((isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0))) * _1352)) * cbPerFrame._m0[3u].x));
    float _2437 = exp2(_2429 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0))) * (_2261 + ((isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0))) * _545))) + ((_2267 + ((isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0))) * _1352)) * cbPerFrame._m0[3u].x));
    float _2438 = exp2(_2429 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0))) * (_2263 + ((isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0))) * _545))) + ((_2269 + ((isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0))) * _1352)) * cbPerFrame._m0[3u].x));
    float _2447 = (_2427 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2447 * (_2428 ? _2436 : (_2436 + (cbSceneParam._m0[72u].w * _2409)));
    SV_Target.y = _2447 * (_2428 ? _2437 : (_2437 + (cbSceneParam._m0[72u].w * _2411)));
    SV_Target.z = _2447 * (_2428 ? _2438 : (_2438 + (cbSceneParam._m0[72u].w * _2413)));
    SV_Target.w = cbInstanceData._m0[_2289].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2289].w;
}


