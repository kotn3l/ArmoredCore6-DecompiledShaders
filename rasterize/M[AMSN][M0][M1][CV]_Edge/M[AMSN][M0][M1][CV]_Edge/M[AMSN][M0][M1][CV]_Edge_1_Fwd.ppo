#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _897;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _178 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _179 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _180 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _186 = inversesqrt(dot(vec3(_178, _179, _180), vec3(_178, _179, _180)));
    float _187 = _186 * _178;
    float _188 = _186 * _179;
    float _189 = _186 * _180;
    float _193 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _194 = _193 * NORMAL.x;
    float _195 = _193 * NORMAL.y;
    float _196 = _193 * NORMAL.z;
    float _200 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _201 = _200 * TANGENT.x;
    float _202 = _200 * TANGENT.y;
    float _203 = _200 * TANGENT.z;
    float _208;
    float _209;
    float _210;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _208 = (-0.0) - _194;
        _209 = (-0.0) - _195;
        _210 = (-0.0) - _196;
    }
    else
    {
        _208 = _194;
        _209 = _195;
        _210 = _196;
    }
    vec4 _236 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _242 = _236.x * cbMtdParam._m0[9u].x;
    float _243 = _236.y * cbMtdParam._m0[9u].y;
    float _244 = _236.z * cbMtdParam._m0[9u].z;
    vec4 _262 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _266 = _262.z;
    float _270 = (_262.x * 2.0) + (-1.0);
    float _272 = (_262.y * 2.0) + (-1.0);
    float _273 = dot(vec2(_270, _272), vec2(_270, _272));
    float _3211 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    float _279 = sqrt(1.0 - (isnan(1.0) ? _3211 : (isnan(_3211) ? 1.0 : min(_3211, 1.0))));
    float _282 = fma(_279, _208, fma(_272, _201, _270 * _187));
    float _285 = fma(_279, _209, fma(_272, _202, _270 * _188));
    float _288 = fma(_279, _210, fma(_272, _203, _270 * _189));
    float _292 = inversesqrt(dot(vec3(_282, _285, _288), vec3(_282, _285, _288)));
    float _303 = cbMtdParam._m0[12u].x + dot(vec4(_292 * _282, _292 * _285, _292 * _288, 0.0), vec4(cbMtdParam._m0[13u].xyz, 0.0));
    float _3222 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _304 = isnan(1.0) ? _3222 : (isnan(_3222) ? 1.0 : min(_3222, 1.0));
    float _311 = (_304 * (cbMtdParam._m0[10u].x - _242)) + _242;
    float _312 = (_304 * (cbMtdParam._m0[10u].y - _243)) + _243;
    float _313 = (_304 * (cbMtdParam._m0[10u].z - _244)) + _244;
    vec4 _325 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _332 = (_325.x * 2.0) + (-1.0);
    float _333 = (_325.y * 2.0) + (-1.0);
    float _334 = dot(vec2(_332, _333), vec2(_332, _333));
    float _3233 = isnan(0.0) ? _334 : (isnan(_334) ? 0.0 : max(_334, 0.0));
    float _342 = ((_325.z - _266) * _304) + _266;
    float _354 = (((_332 - _270) + (cbMtdParam._m0[12u].w * _270)) * _304) + _270;
    float _355 = (((_333 - _272) + (cbMtdParam._m0[12u].w * _272)) * _304) + _272;
    float _356 = ((sqrt(1.0 - (isnan(1.0) ? _3233 : (isnan(_3233) ? 1.0 : min(_3233, 1.0)))) - _279) * _304) + _279;
    float _359 = fma(_356, _208, fma(_355, _201, _354 * _187));
    float _362 = fma(_356, _209, fma(_355, _202, _354 * _188));
    float _365 = fma(_356, _210, fma(_355, _203, _354 * _189));
    float _369 = inversesqrt(dot(vec3(_359, _362, _365), vec3(_359, _362, _365)));
    float _370 = _369 * _359;
    float _371 = _369 * _362;
    float _372 = _369 * _365;
    float _3244 = isnan(0.0) ? _342 : (isnan(_342) ? 0.0 : max(_342, 0.0));
    float _373 = isnan(1.0) ? _3244 : (isnan(_3244) ? 1.0 : min(_3244, 1.0));
    float _3255 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    float _3266 = isnan(0.0) ? _312 : (isnan(_312) ? 0.0 : max(_312, 0.0));
    float _3277 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _392 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _434 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _444 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _434);
    float _445 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _434);
    float _446 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _434);
    float _450 = inversesqrt(dot(vec3(_444, _445, _446), vec3(_444, _445, _446)));
    float _451 = _444 * _450;
    float _452 = _445 * _450;
    float _453 = _446 * _450;
    float _459 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _460 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _481 = fma(_372, cbSceneParam._m0[5u].z, fma(_371, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _370));
    float _484 = fma(_372, cbSceneParam._m0[6u].z, fma(_371, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _370));
    float _487 = fma(_372, cbSceneParam._m0[7u].z, fma(_371, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _370));
    uint _500 = uint(roundEven(NORMAL.w)) * 13u;
    uint _502 = (_500 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _508 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3255 : (isnan(_3255) ? 1.0 : min(_3255, 1.0)))) * cbInstanceData._m0[_502].x;
    float _509 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3266 : (isnan(_3266) ? 1.0 : min(_3266, 1.0)))) * cbInstanceData._m0[_502].y;
    float _510 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3277 : (isnan(_3277) ? 1.0 : min(_3277, 1.0)))) * cbInstanceData._m0[_502].z;
    float _3288 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _511 = isnan(1.0) ? _3288 : (isnan(_3288) ? 1.0 : min(_3288, 1.0));
    float _3299 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _512 = isnan(1.0) ? _3299 : (isnan(_3299) ? 1.0 : min(_3299, 1.0));
    float _3310 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _513 = isnan(1.0) ? _3310 : (isnan(_3310) ? 1.0 : min(_3310, 1.0));
    vec4 _522 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _459, cbSceneParam._m0[86u].y * _460));
    float _525 = _522.x * TEXCOORD_3.w;
    float _526 = dot(vec3(_370, _371, _372), vec3(_451, _452, _453));
    float _529 = _526 * 2.0;
    float _533 = (_529 * _370) - _451;
    float _534 = (_529 * _371) - _452;
    float _535 = (_529 * _372) - _453;
    float _539 = abs(dot(vec3(_451, _452, _453), vec3(_370, _371, _372)));
    float _3321 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _541 = sqrt(_373);
    float _554 = exp2((_541 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3321 : (isnan(_3321) ? 1.0 : min(_3321, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_541 * 3.0));
    float _586 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _590 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _594 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _896;
    float _898;
    float _899;
    float _900;
    float _901;
    float _902;
    float _903;
    float _904;
    float _905;
    float _906;
    float _907;
    float _908;
    float _909;
    float _910;
    float _911;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _621 = fma(_594, cbModelParam._m0[26u].z, fma(_590, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _586));
        float _625 = fma(_594, cbModelParam._m0[27u].z, fma(_590, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _586));
        float _629 = fma(_594, cbModelParam._m0[28u].z, fma(_590, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _586));
        float _654 = _586 + _370;
        float _655 = _590 + _371;
        float _656 = _594 + _372;
        float _666 = fma(_656, cbModelParam._m0[26u].z, fma(_655, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _654)) - _621;
        float _667 = fma(_656, cbModelParam._m0[27u].z, fma(_655, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _654)) - _625;
        float _668 = fma(_656, cbModelParam._m0[28u].z, fma(_655, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _654)) - _629;
        float _672 = inversesqrt(dot(vec3(_666, _667, _668), vec3(_666, _667, _668)));
        float _685 = ((_672 * _666) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_621 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _686 = ((_672 * _667) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_625 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _687 = ((_672 * _668) / cbModelParam._m0[34u].z) + ((((((_629 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _690 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_685, _686, _687), 0.0);
        vec4 _697 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_685, _686, _687), 0.0);
        vec4 _704 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_685, _686, _687), 0.0);
        vec4 _711 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_685, _686, _687), 0.0);
        float _724 = exp2((_690.w + (-0.5)) * 20.0) * 2.0;
        float _725 = _724 * (_690.x + (-0.5));
        float _726 = _724 * (_690.y + (-0.5));
        float _727 = _724 * (_690.z + (-0.5));
        float _734 = exp2((_697.w + (-0.5)) * 20.0) * 2.0;
        float _735 = _734 * (_697.x + (-0.5));
        float _736 = _734 * (_697.y + (-0.5));
        float _737 = _734 * (_697.z + (-0.5));
        float _744 = exp2((_704.w + (-0.5)) * 20.0) * 2.0;
        float _745 = _744 * (_704.x + (-0.5));
        float _746 = _744 * (_704.y + (-0.5));
        float _747 = _744 * (_704.z + (-0.5));
        float _754 = exp2((_711.w + (-0.5)) * 20.0) * 2.0;
        float _755 = _754 * (_711.x + (-0.5));
        float _756 = _754 * (_711.y + (-0.5));
        float _757 = _754 * (_711.z + (-0.5));
        float _758 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
        float _759 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
        float _760 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
        float _761 = _725 * 0.5;
        float _762 = _735 * 0.5;
        float _763 = _745 * 0.5;
        float _764 = dot(vec3(_761, _762, _763), vec3(_761, _762, _763));
        float _769 = (_764 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_764);
        float _778 = (dot(vec3(_370, _371, _372), vec3(_769 * _761, _769 * _762, _769 * _763)) + 1.0) * 0.5;
        float _3347 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
        float _788 = sqrt(((_762 * _762) + (_761 * _761)) + (_763 * _763)) / (_758 + 9.9999997473787516355514526367188e-06);
        float _3358 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
        float _789 = isnan(1.0) ? _3358 : (isnan(_3358) ? 1.0 : min(_3358, 1.0));
        float _790 = _789 * 2.0;
        float _794 = (1.0 - _789) / (_789 + 1.0);
        float _3369 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
        float _795 = isnan(1.0) ? _3369 : (isnan(_3369) ? 1.0 : min(_3369, 1.0));
        float _804 = ((((1.0 - _795) * (_790 + 2.0)) * exp2(log2(isnan(1.0) ? _3347 : (isnan(_3347) ? 1.0 : min(_3347, 1.0))) * (_790 + 1.0))) + _795) * _758;
        float _805 = _726 * 0.5;
        float _806 = _736 * 0.5;
        float _807 = _746 * 0.5;
        float _808 = dot(vec3(_805, _806, _807), vec3(_805, _806, _807));
        float _813 = (_808 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_808);
        float _821 = (dot(vec3(_370, _371, _372), vec3(_813 * _805, _813 * _806, _813 * _807)) + 1.0) * 0.5;
        float _3380 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
        float _830 = sqrt(((_806 * _806) + (_805 * _805)) + (_807 * _807)) / (_759 + 9.9999997473787516355514526367188e-06);
        float _3391 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
        float _831 = isnan(1.0) ? _3391 : (isnan(_3391) ? 1.0 : min(_3391, 1.0));
        float _832 = _831 * 2.0;
        float _836 = (1.0 - _831) / (_831 + 1.0);
        float _3402 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
        float _837 = isnan(1.0) ? _3402 : (isnan(_3402) ? 1.0 : min(_3402, 1.0));
        float _846 = ((((1.0 - _837) * (_832 + 2.0)) * exp2(log2(isnan(1.0) ? _3380 : (isnan(_3380) ? 1.0 : min(_3380, 1.0))) * (_832 + 1.0))) + _837) * _759;
        float _847 = _727 * 0.5;
        float _848 = _737 * 0.5;
        float _849 = _747 * 0.5;
        float _850 = dot(vec3(_847, _848, _849), vec3(_847, _848, _849));
        float _855 = (_850 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_850);
        float _863 = (dot(vec3(_370, _371, _372), vec3(_855 * _847, _855 * _848, _855 * _849)) + 1.0) * 0.5;
        float _3413 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
        float _872 = sqrt(((_848 * _848) + (_847 * _847)) + (_849 * _849)) / (_760 + 9.9999997473787516355514526367188e-06);
        float _3424 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
        float _873 = isnan(1.0) ? _3424 : (isnan(_3424) ? 1.0 : min(_3424, 1.0));
        float _874 = _873 * 2.0;
        float _878 = (1.0 - _873) / (_873 + 1.0);
        float _3435 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
        float _879 = isnan(1.0) ? _3435 : (isnan(_3435) ? 1.0 : min(_3435, 1.0));
        float _888 = ((((1.0 - _879) * (_874 + 2.0)) * exp2(log2(isnan(1.0) ? _3413 : (isnan(_3413) ? 1.0 : min(_3413, 1.0))) * (_874 + 1.0))) + _879) * _760;
        _896 = _727;
        _898 = _726;
        _899 = _725;
        _900 = _737;
        _901 = _736;
        _902 = _735;
        _903 = _747;
        _904 = _746;
        _905 = _745;
        _906 = _760;
        _907 = _759;
        _908 = _758;
        _909 = cbModelParam._m0[36u].z * (isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0)));
        _910 = cbModelParam._m0[36u].z * (isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0)));
        _911 = cbModelParam._m0[36u].z * (isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0)));
    }
    else
    {
        _896 = _897;
        _898 = _897;
        _899 = _897;
        _900 = _897;
        _901 = _897;
        _902 = _897;
        _903 = _897;
        _904 = _897;
        _905 = _897;
        _906 = _897;
        _907 = _897;
        _908 = _897;
        _909 = 0.0;
        _910 = 0.0;
        _911 = 0.0;
    }
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _937 = fma(_594, cbModelParam._m0[30u].z, fma(_590, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _586));
        float _941 = fma(_594, cbModelParam._m0[31u].z, fma(_590, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _586));
        float _945 = fma(_594, cbModelParam._m0[32u].z, fma(_590, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _586));
        float _968 = _586 + _370;
        float _969 = _590 + _371;
        float _970 = _594 + _372;
        float _980 = fma(_970, cbModelParam._m0[30u].z, fma(_969, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _968)) - _937;
        float _981 = fma(_970, cbModelParam._m0[31u].z, fma(_969, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _968)) - _941;
        float _982 = fma(_970, cbModelParam._m0[32u].z, fma(_969, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _968)) - _945;
        float _986 = inversesqrt(dot(vec3(_980, _981, _982), vec3(_980, _981, _982)));
        float _999 = ((_986 * _980) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_937 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1000 = ((_986 * _981) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_941 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1001 = ((_986 * _982) / cbModelParam._m0[35u].z) + ((((((_945 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1003 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_999, _1000, _1001), 0.0);
        vec4 _1010 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_999, _1000, _1001), 0.0);
        vec4 _1017 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_999, _1000, _1001), 0.0);
        vec4 _1024 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_999, _1000, _1001), 0.0);
        float _1036 = exp2((_1003.w + (-0.5)) * 20.0) * 2.0;
        float _1037 = _1036 * (_1003.x + (-0.5));
        float _1038 = _1036 * (_1003.y + (-0.5));
        float _1039 = _1036 * (_1003.z + (-0.5));
        float _1046 = exp2((_1010.w + (-0.5)) * 20.0) * 2.0;
        float _1047 = _1046 * (_1010.x + (-0.5));
        float _1048 = _1046 * (_1010.y + (-0.5));
        float _1049 = _1046 * (_1010.z + (-0.5));
        float _1056 = exp2((_1017.w + (-0.5)) * 20.0) * 2.0;
        float _1057 = _1056 * (_1017.x + (-0.5));
        float _1058 = _1056 * (_1017.y + (-0.5));
        float _1059 = _1056 * (_1017.z + (-0.5));
        float _1066 = exp2((_1024.w + (-0.5)) * 20.0) * 2.0;
        float _1067 = _1066 * (_1024.x + (-0.5));
        float _1068 = _1066 * (_1024.y + (-0.5));
        float _1069 = _1066 * (_1024.z + (-0.5));
        float _1070 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1071 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1072 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1073 = _1037 * 0.5;
        float _1074 = _1047 * 0.5;
        float _1075 = _1057 * 0.5;
        float _1076 = dot(vec3(_1073, _1074, _1075), vec3(_1073, _1074, _1075));
        float _1081 = (_1076 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1076);
        float _1089 = (dot(vec3(_370, _371, _372), vec3(_1081 * _1073, _1081 * _1074, _1081 * _1075)) + 1.0) * 0.5;
        float _3476 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1098 = sqrt(((_1074 * _1074) + (_1073 * _1073)) + (_1075 * _1075)) / (_1070 + 9.9999997473787516355514526367188e-06);
        float _3487 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1099 = isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0));
        float _1100 = _1099 * 2.0;
        float _1104 = (1.0 - _1099) / (_1099 + 1.0);
        float _3498 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1105 = isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0));
        float _1114 = ((((1.0 - _1105) * (_1100 + 2.0)) * exp2(log2(isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0))) * (_1100 + 1.0))) + _1105) * _1070;
        float _1115 = _1038 * 0.5;
        float _1116 = _1048 * 0.5;
        float _1117 = _1058 * 0.5;
        float _1118 = dot(vec3(_1115, _1116, _1117), vec3(_1115, _1116, _1117));
        float _1123 = (_1118 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1118);
        float _1131 = (dot(vec3(_370, _371, _372), vec3(_1123 * _1115, _1123 * _1116, _1123 * _1117)) + 1.0) * 0.5;
        float _3509 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1140 = sqrt(((_1116 * _1116) + (_1115 * _1115)) + (_1117 * _1117)) / (_1071 + 9.9999997473787516355514526367188e-06);
        float _3520 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1141 = isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0));
        float _1142 = _1141 * 2.0;
        float _1146 = (1.0 - _1141) / (_1141 + 1.0);
        float _3531 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1147 = isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0));
        float _1156 = ((((1.0 - _1147) * (_1142 + 2.0)) * exp2(log2(isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0))) * (_1142 + 1.0))) + _1147) * _1071;
        float _1157 = _1039 * 0.5;
        float _1158 = _1049 * 0.5;
        float _1159 = _1059 * 0.5;
        float _1160 = dot(vec3(_1157, _1158, _1159), vec3(_1157, _1158, _1159));
        float _1165 = (_1160 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1160);
        float _1173 = (dot(vec3(_370, _371, _372), vec3(_1165 * _1157, _1165 * _1158, _1165 * _1159)) + 1.0) * 0.5;
        float _3542 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1182 = sqrt(((_1158 * _1158) + (_1157 * _1157)) + (_1159 * _1159)) / (_1072 + 9.9999997473787516355514526367188e-06);
        float _3553 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1183 = isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0));
        float _1184 = _1183 * 2.0;
        float _1188 = (1.0 - _1183) / (_1183 + 1.0);
        float _3564 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1189 = isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0));
        float _1198 = ((((1.0 - _1189) * (_1184 + 2.0)) * exp2(log2(isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0))) * (_1184 + 1.0))) + _1189) * _1072;
        _1206 = _1039;
        _1207 = _1038;
        _1208 = _1037;
        _1209 = _1049;
        _1210 = _1048;
        _1211 = _1047;
        _1212 = _1059;
        _1213 = _1058;
        _1214 = _1057;
        _1215 = _1072;
        _1216 = _1071;
        _1217 = _1070;
        _1218 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0)));
        _1219 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0)));
        _1220 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0)));
    }
    else
    {
        _1206 = _897;
        _1207 = _897;
        _1208 = _897;
        _1209 = _897;
        _1210 = _897;
        _1211 = _897;
        _1212 = _897;
        _1213 = _897;
        _1214 = _897;
        _1215 = _897;
        _1216 = _897;
        _1217 = _897;
        _1218 = 0.0;
        _1219 = 0.0;
        _1220 = 0.0;
    }
    float _1230 = (cbModelParam._m0[1u].x * (_1218 - _909)) + _909;
    float _1231 = (cbModelParam._m0[1u].x * (_1219 - _910)) + _910;
    float _1232 = (cbModelParam._m0[1u].x * (_1220 - _911)) + _911;
    float _1253 = fma(_1232, cbSceneParam._m0[89u].z, fma(_1231, cbSceneParam._m0[89u].y, _1230 * cbSceneParam._m0[89u].x));
    float _1256 = fma(_1232, cbSceneParam._m0[90u].z, fma(_1231, cbSceneParam._m0[90u].y, _1230 * cbSceneParam._m0[90u].x));
    float _1259 = fma(_1232, cbSceneParam._m0[91u].z, fma(_1231, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1230));
    float _1274 = _533 * 0.5;
    float _1275 = _534 * 0.5;
    float _1276 = _535 * 0.5;
    float _1277 = dot(vec4(_1274, _1275, _1276, 1.0), vec4(_1208, _1211, _1214, _1217));
    float _1280 = dot(vec4(_1274, _1275, _1276, 1.0), vec4(_1207, _1210, _1213, _1216));
    float _1283 = dot(vec4(_1274, _1275, _1276, 1.0), vec4(_1206, _1209, _1212, _1215));
    float _1317;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1290 = dot(vec4(_1274, _1275, _1276, 1.0), vec4(_896, _900, _903, _906));
        float _1294 = dot(vec4(_1274, _1275, _1276, 1.0), vec4(_898, _901, _904, _907));
        float _1298 = dot(vec4(_1274, _1275, _1276, 1.0), vec4(_899, _902, _905, _908));
        float _1305 = dot(vec4(cbModelParam._m0[39u]), vec4(_1274, _1275, _1276, 1.0));
        _1317 = dot(vec3(isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0)), isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0)), isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1305) ? 0.0 : (isnan(0.0) ? _1305 : max(0.0, _1305))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1317 = 1.0;
    }
    float _1328;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1319 = dot(vec4(cbModelParam._m0[40u]), vec4(_1274, _1275, _1276, 1.0));
        _1328 = dot(vec3(isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0)), isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0)), isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1319) ? 0.0 : (isnan(0.0) ? _1319 : max(0.0, _1319))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1328 = 1.0;
    }
    float _1332 = (_1328 * cbModelParam._m0[1u].x) + (_1317 * (1.0 - cbModelParam._m0[1u].x));
    float _1342 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _373);
    float _1343 = isnan(_1342) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1342 : min(cbModelParam._m0[25u].z, _1342));
    float _1424;
    float _1426;
    float _1428;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1391 = fma(_594, cbModelParam._m0[13u].z, fma(_590, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _586)) + cbModelParam._m0[13u].w;
        float _1395 = fma(_594, cbModelParam._m0[14u].z, fma(_590, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _586)) + cbModelParam._m0[14u].w;
        float _1399 = fma(_594, cbModelParam._m0[15u].z, fma(_590, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _586)) + cbModelParam._m0[15u].w;
        float _1402 = fma(_535, cbModelParam._m0[13u].z, fma(_534, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _533));
        float _1405 = fma(_535, cbModelParam._m0[14u].z, fma(_534, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _533));
        float _1408 = fma(_535, cbModelParam._m0[15u].z, fma(_534, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _533));
        float _1436;
        if (_1402 > 0.0)
        {
            _1436 = abs((1.0 - _1391) / _1402);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1402 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1391 + 1.0) / _1402);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1436 = frontier_phi_16_14_ladder;
        }
        float _1641;
        if (_1405 > 0.0)
        {
            _1641 = abs((1.0 - _1395) / _1405);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1405 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1395 + 1.0) / _1405);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1641 = frontier_phi_25_21_ladder;
        }
        float _1884;
        if (_1408 > 0.0)
        {
            _1884 = abs((1.0 - _1399) / _1408);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1408 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1399 + 1.0) / _1408);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1884 = frontier_phi_37_32_ladder;
        }
        float _1886 = isnan(_1641) ? _1436 : (isnan(_1436) ? _1641 : min(_1436, _1641));
        float _1887 = isnan(_1884) ? _1886 : (isnan(_1886) ? _1884 : min(_1886, _1884));
        float _1891 = (_1887 * _1402) + _1391;
        float _1892 = (_1887 * _1405) + _1395;
        float _1893 = (_1887 * _1408) + _1399;
        float _1894 = _1887 * 9.9999997473787516355514526367188e-05;
        float _1896 = (-1.0) - _1894;
        float _1898 = _1894 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1893 > _1898) || ((_1893 < _1896) || ((_1892 > _1898) || ((_1892 < _1896) || ((_1891 < _1896) || (_1891 > _1898))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2017 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1893, cbModelParam._m0[9u].z, fma(_1892, cbModelParam._m0[9u].y, _1891 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1893, cbModelParam._m0[10u].z, fma(_1892, cbModelParam._m0[10u].y, _1891 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1893, cbModelParam._m0[11u].z, fma(_1892, cbModelParam._m0[11u].y, _1891 * cbModelParam._m0[11u].x))), _1343);
            frontier_phi_15_37_ladder = _2017.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2017.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2017.x * cbModelParam._m0[1u].y;
        }
        _1424 = frontier_phi_15_37_ladder_2;
        _1426 = frontier_phi_15_37_ladder_1;
        _1428 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1412 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_533, _534, _535), _1343);
        _1424 = _1412.x * cbModelParam._m0[1u].y;
        _1426 = _1412.y * cbModelParam._m0[1u].y;
        _1428 = _1412.z * cbModelParam._m0[1u].y;
    }
    float _1432 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _373);
    float _1433 = isnan(_1432) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1432 : min(cbModelParam._m0[25u].w, _1432));
    float _1526;
    float _1528;
    float _1530;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1490 = fma(_594, cbModelParam._m0[21u].z, fma(_590, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _586)) + cbModelParam._m0[21u].w;
        float _1494 = fma(_594, cbModelParam._m0[22u].z, fma(_590, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _586)) + cbModelParam._m0[22u].w;
        float _1498 = fma(_594, cbModelParam._m0[23u].z, fma(_590, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _586)) + cbModelParam._m0[23u].w;
        float _1501 = fma(_535, cbModelParam._m0[21u].z, fma(_534, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _533));
        float _1504 = fma(_535, cbModelParam._m0[22u].z, fma(_534, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _533));
        float _1507 = fma(_535, cbModelParam._m0[23u].z, fma(_534, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _533));
        float _1646;
        if (_1501 > 0.0)
        {
            _1646 = abs((1.0 - _1490) / _1501);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1501 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1490 + 1.0) / _1501);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1646 = frontier_phi_27_23_ladder;
        }
        float _1911;
        if (_1504 > 0.0)
        {
            _1911 = abs((1.0 - _1494) / _1504);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1504 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1494 + 1.0) / _1504);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1911 = frontier_phi_39_34_ladder;
        }
        float _2116;
        if (_1507 > 0.0)
        {
            _2116 = abs((1.0 - _1498) / _1507);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1507 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1498 + 1.0) / _1507);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2116 = frontier_phi_48_45_ladder;
        }
        float _2118 = isnan(_1911) ? _1646 : (isnan(_1646) ? _1911 : min(_1646, _1911));
        float _2119 = isnan(_2116) ? _2118 : (isnan(_2118) ? _2116 : min(_2118, _2116));
        float _2123 = (_2119 * _1501) + _1490;
        float _2124 = (_2119 * _1504) + _1494;
        float _2125 = (_2119 * _1507) + _1498;
        float _2126 = _2119 * 9.9999997473787516355514526367188e-05;
        float _2127 = (-1.0) - _2126;
        float _2129 = _2126 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2125 > _2129) || ((_2125 < _2127) || ((_2124 > _2129) || ((_2124 < _2127) || ((_2123 < _2127) || (_2123 > _2129))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2323 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2125, cbModelParam._m0[17u].z, fma(_2124, cbModelParam._m0[17u].y, _2123 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2125, cbModelParam._m0[18u].z, fma(_2124, cbModelParam._m0[18u].y, _2123 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2125, cbModelParam._m0[19u].z, fma(_2124, cbModelParam._m0[19u].y, _2123 * cbModelParam._m0[19u].x))), _1433);
            frontier_phi_24_48_ladder = _2323.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2323.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2323.x * cbModelParam._m0[1u].z;
        }
        _1526 = frontier_phi_24_48_ladder_2;
        _1528 = frontier_phi_24_48_ladder_1;
        _1530 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1510 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_533, _534, _535), _1433);
        _1526 = _1510.x * cbModelParam._m0[1u].z;
        _1528 = _1510.y * cbModelParam._m0[1u].z;
        _1530 = _1510.z * cbModelParam._m0[1u].z;
    }
    float _1542 = ((((1.0 - _554) * ((_541 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_554 * _541)) * _525;
    float _1543 = _1542 * ((cbModelParam._m0[1u].w * (_1526 - _1424)) + _1424);
    float _1544 = _1542 * ((cbModelParam._m0[1u].w * (_1528 - _1426)) + _1426);
    float _1545 = _1542 * ((cbModelParam._m0[1u].w * (_1530 - _1428)) + _1428);
    float _1548 = fma(_1545, cbSceneParam._m0[89u].z, fma(_1544, cbSceneParam._m0[89u].y, _1543 * cbSceneParam._m0[89u].x));
    float _1551 = fma(_1545, cbSceneParam._m0[90u].z, fma(_1544, cbSceneParam._m0[90u].y, _1543 * cbSceneParam._m0[90u].x));
    float _1554 = fma(_1545, cbSceneParam._m0[91u].z, fma(_1544, cbSceneParam._m0[91u].y, _1543 * cbSceneParam._m0[91u].x));
    uvec4 _1564 = floatBitsToUint(cbInstanceData._m0[_500 + 5u]);
    uint _1566 = _1564.x * 14u;
    uint _1567 = _1566 + 13u;
    float _1574 = _525 + (-1.0);
    float _1579 = (cbLight._m0[_1567].x * _1574) + 1.0;
    float _1580 = (cbLight._m0[_1567].y * _1574) + 1.0;
    float _1581 = (cbLight._m0[_1567].z * _1574) + 1.0;
    float _1582 = (cbLight._m0[_1567].w * _1574) + 1.0;
    uint _1583 = _1566 + 5u;
    float _1589 = isnan(1.0) ? _1580 : (isnan(_1580) ? 1.0 : min(_1580, 1.0));
    uint _1593 = _1566 + 4u;
    float _1600 = isnan(1.0) ? _1579 : (isnan(_1579) ? 1.0 : min(_1579, 1.0));
    uint _1604 = _1566 | 1u;
    float _1615 = dot(vec3(cbLight._m0[_1566].xyz), vec3(_370, _371, _372));
    float _1618 = dot(vec3(cbLight._m0[_1604].xyz), vec3(_370, _371, _372));
    float _3700 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
    float _3711 = isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0));
    float _1623 = (isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0))) * 0.3183098733425140380859375;
    float _1625 = (isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0))) * 0.3183098733425140380859375;
    float _1632 = ((cbLight._m0[_1583].x * _1589) * _1625) + ((cbLight._m0[_1593].x * _1600) * _1623);
    float _1633 = ((_1589 * cbLight._m0[_1583].y) * _1625) + ((_1600 * cbLight._m0[_1593].y) * _1623);
    float _1634 = ((_1589 * cbLight._m0[_1583].z) * _1625) + ((_1600 * cbLight._m0[_1593].z) * _1623);
    uvec4 _1638 = floatBitsToUint(cbLight._m0[_1566 + 12u]);
    bool _1640 = _1638.x == 0u;
    float _1651;
    float _1653;
    float _1655;
    if (_1640)
    {
        _1651 = _1632;
        _1653 = _1633;
        _1655 = _1634;
    }
    else
    {
        uint _1659 = _1566 + 6u;
        float _1675 = (dot(vec3(cbLight._m0[_1566 + 2u].xyz), vec3(_370, _371, _372)) * 0.5) + 0.5;
        float _1676 = _1675 * _1675;
        float _3722 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
        float _1677 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
        float _1678 = isnan(1.0) ? _1581 : (isnan(_1581) ? 1.0 : min(_1581, 1.0));
        _1651 = (((cbLight._m0[_1659].x * 0.3183098733425140380859375) * _1677) * _1678) + _1632;
        _1653 = (((cbLight._m0[_1659].y * 0.3183098733425140380859375) * _1677) * _1678) + _1633;
        _1655 = (((cbLight._m0[_1659].z * 0.3183098733425140380859375) * _1677) * _1678) + _1634;
    }
    bool _1658 = _1638.y == 0u;
    float _1696;
    float _1698;
    float _1700;
    if (_1658)
    {
        _1696 = _1651;
        _1698 = _1653;
        _1700 = _1655;
    }
    else
    {
        uint _1855 = _1566 + 7u;
        float _1871 = (dot(vec3(cbLight._m0[_1566 + 3u].xyz), vec3(_370, _371, _372)) * 0.5) + 0.5;
        float _1872 = _1871 * _1871;
        float _3738 = isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0));
        float _1873 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
        float _1874 = isnan(1.0) ? _1582 : (isnan(_1582) ? 1.0 : min(_1582, 1.0));
        _1696 = (((cbLight._m0[_1855].x * 0.3183098733425140380859375) * _1873) * _1874) + _1651;
        _1698 = (((cbLight._m0[_1855].y * 0.3183098733425140380859375) * _1873) * _1874) + _1653;
        _1700 = (((cbLight._m0[_1855].z * 0.3183098733425140380859375) * _1873) * _1874) + _1655;
    }
    uint _1703 = _1566 + 8u;
    float _1716 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1566].w)) * _373) * 0.949999988079071044921875);
    float _1717 = _1716 * _1716;
    float _1718 = cbLight._m0[_1566].x + _451;
    float _1719 = cbLight._m0[_1566].y + _452;
    float _1720 = cbLight._m0[_1566].z + _453;
    float _1724 = inversesqrt(dot(vec3(_1718, _1719, _1720), vec3(_1718, _1719, _1720)));
    float _1725 = _1724 * _1718;
    float _1726 = _1724 * _1719;
    float _1727 = _1724 * _1720;
    float _1728 = dot(vec3(_370, _371, _372), vec3(cbLight._m0[_1566].xyz));
    float _3754 = isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0));
    float _1731 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
    float _3765 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _1732 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
    float _1733 = dot(vec3(_370, _371, _372), vec3(_1725, _1726, _1727));
    float _3776 = isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0));
    float _1736 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
    float _1737 = dot(vec3(cbLight._m0[_1566].xyz), vec3(_1725, _1726, _1727));
    float _3787 = isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0));
    float _1741 = _1717 * _1717;
    float _1745 = ((_1736 * _1736) * (_1741 + (-1.0))) + 1.0;
    float _1756 = (exp2(log2(1.0 - (isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1757 = 1.0 - _1717;
    float _1768 = (0.5 / (((_1732 * ((_1731 * _1757) + _1717)) + 9.9999999392252902907785028219223e-09) + (((_1732 * _1757) + _1717) * _1731))) * _1731;
    float _3798 = isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0));
    float _1770 = (isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0))) * (_1741 / ((_1745 * _1745) * 3.141590118408203125));
    uint _1781 = _1566 + 9u;
    float _1792 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1604].w)) * _373) * 0.949999988079071044921875);
    float _1793 = _1792 * _1792;
    float _1794 = cbLight._m0[_1604].x + _451;
    float _1795 = cbLight._m0[_1604].y + _452;
    float _1796 = cbLight._m0[_1604].z + _453;
    float _1800 = inversesqrt(dot(vec3(_1794, _1795, _1796), vec3(_1794, _1795, _1796)));
    float _1801 = _1800 * _1794;
    float _1802 = _1800 * _1795;
    float _1803 = _1800 * _1796;
    float _1804 = dot(vec3(_370, _371, _372), vec3(cbLight._m0[_1604].xyz));
    float _3809 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
    float _1807 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
    float _1808 = dot(vec3(_370, _371, _372), vec3(_1801, _1802, _1803));
    float _3820 = isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0));
    float _1811 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
    float _1812 = dot(vec3(cbLight._m0[_1604].xyz), vec3(_1801, _1802, _1803));
    float _3831 = isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0));
    float _1816 = _1793 * _1793;
    float _1820 = ((_1811 * _1811) * (_1816 + (-1.0))) + 1.0;
    float _1829 = (exp2(log2(1.0 - (isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1830 = 1.0 - _1793;
    float _1840 = (0.5 / (((_1732 * ((_1807 * _1830) + _1793)) + 9.9999999392252902907785028219223e-09) + (((_1732 * _1830) + _1793) * _1807))) * _1807;
    float _3842 = isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0));
    float _1842 = (isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0))) * (_1816 / ((_1820 * _1820) * 3.141590118408203125));
    float _1852 = (((_1829 * cbLight._m0[_1781].x) * _1842) * _1589) + (((_1756 * cbLight._m0[_1703].x) * _1770) * _1600);
    float _1853 = (((_1829 * cbLight._m0[_1781].y) * _1842) * _1589) + (((_1756 * cbLight._m0[_1703].y) * _1770) * _1600);
    float _1854 = (((_1829 * cbLight._m0[_1781].z) * _1842) * _1589) + (((_1756 * cbLight._m0[_1703].z) * _1770) * _1600);
    float _1916;
    float _1918;
    float _1920;
    if (_1640)
    {
        _1916 = _1852;
        _1918 = _1853;
        _1920 = _1854;
    }
    else
    {
        uint _1922 = _1566 + 2u;
        uint _1926 = _1566 + 10u;
        float _1940 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1922].w)) * _373) * 0.949999988079071044921875);
        float _1941 = _1940 * _1940;
        float _1942 = cbLight._m0[_1922].x + _451;
        float _1943 = cbLight._m0[_1922].y + _452;
        float _1944 = cbLight._m0[_1922].z + _453;
        float _1948 = inversesqrt(dot(vec3(_1942, _1943, _1944), vec3(_1942, _1943, _1944)));
        float _1949 = _1948 * _1942;
        float _1950 = _1948 * _1943;
        float _1951 = _1948 * _1944;
        float _1952 = dot(vec3(_370, _371, _372), vec3(cbLight._m0[_1922].xyz));
        float _3853 = isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0));
        float _1955 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
        float _1956 = dot(vec3(_370, _371, _372), vec3(_1949, _1950, _1951));
        float _3864 = isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0));
        float _1959 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
        float _1960 = dot(vec3(cbLight._m0[_1922].xyz), vec3(_1949, _1950, _1951));
        float _3875 = isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0));
        float _1964 = _1941 * _1941;
        float _1968 = ((_1959 * _1959) * (_1964 + (-1.0))) + 1.0;
        float _1977 = (exp2(log2(1.0 - (isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1978 = 1.0 - _1941;
        float _1988 = (0.5 / (((_1732 * ((_1955 * _1978) + _1941)) + 9.9999999392252902907785028219223e-09) + (((_1732 * _1978) + _1941) * _1955))) * _1955;
        float _3886 = isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0));
        float _1990 = (isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0))) * (_1964 / ((_1968 * _1968) * 3.141590118408203125));
        float _1991 = isnan(1.0) ? _1581 : (isnan(_1581) ? 1.0 : min(_1581, 1.0));
        _1916 = (((_1977 * cbLight._m0[_1926].x) * _1990) * _1991) + _1852;
        _1918 = (((_1977 * cbLight._m0[_1926].y) * _1990) * _1991) + _1853;
        _1920 = (((_1977 * cbLight._m0[_1926].z) * _1990) * _1991) + _1854;
    }
    float _2026;
    float _2028;
    float _2030;
    if (_1658)
    {
        _2026 = _1916;
        _2028 = _1918;
        _2030 = _1920;
    }
    else
    {
        uint _2037 = _1566 + 3u;
        uint _2041 = _1566 + 11u;
        float _2055 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2037].w)) * _373) * 0.949999988079071044921875);
        float _2056 = _2055 * _2055;
        float _2057 = cbLight._m0[_2037].x + _451;
        float _2058 = cbLight._m0[_2037].y + _452;
        float _2059 = cbLight._m0[_2037].z + _453;
        float _2063 = inversesqrt(dot(vec3(_2057, _2058, _2059), vec3(_2057, _2058, _2059)));
        float _2064 = _2063 * _2057;
        float _2065 = _2063 * _2058;
        float _2066 = _2063 * _2059;
        float _2067 = dot(vec3(_370, _371, _372), vec3(cbLight._m0[_2037].xyz));
        float _3902 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
        float _2070 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
        float _2071 = dot(vec3(_370, _371, _372), vec3(_2064, _2065, _2066));
        float _3913 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
        float _2074 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
        float _2075 = dot(vec3(cbLight._m0[_2037].xyz), vec3(_2064, _2065, _2066));
        float _3924 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
        float _2079 = _2056 * _2056;
        float _2083 = ((_2074 * _2074) * (_2079 + (-1.0))) + 1.0;
        float _2092 = (exp2(log2(1.0 - (isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2093 = 1.0 - _2056;
        float _2103 = (0.5 / (((_1732 * ((_2070 * _2093) + _2056)) + 9.9999999392252902907785028219223e-09) + (((_1732 * _2093) + _2056) * _2070))) * _2070;
        float _3935 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
        float _2105 = (isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0))) * (_2079 / ((_2083 * _2083) * 3.141590118408203125));
        float _2106 = isnan(1.0) ? _1582 : (isnan(_1582) ? 1.0 : min(_1582, 1.0));
        _2026 = (((_2092 * cbLight._m0[_2041].x) * _2105) * _2106) + _1916;
        _2028 = (((_2092 * cbLight._m0[_2041].y) * _2105) * _2106) + _1918;
        _2030 = (((_2092 * cbLight._m0[_2041].z) * _2105) * _2106) + _1920;
    }
    float _2240;
    float _2242;
    float _2244;
    float _2246;
    float _2248;
    float _2250;
    if (_1564.y == 0u)
    {
        float _2181 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2182 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2181;
        float _2183 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2181;
        float _2184 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2181;
        uvec4 _2196 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2197 = _2196.x;
        uint _2208 = uint((float(_2196.y) * floor(float(uint(cbSceneParam._m0[85u].y * _460) / _2197))) + floor(float(uint(cbSceneParam._m0[85u].x * _459) / _2197)));
        float _2218 = (log2(_2184 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2219 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
        uint _2222 = uint(isnan(14.0) ? _2219 : (isnan(_2219) ? 14.0 : min(_2219, 14.0)));
        uvec4 _2227 = texelFetch(g_lightClusterGridBuffer, int(((_2222 << 2u) + (_2208 << 6u)) >> 2u));
        uint _2228 = _2227.x;
        uint _2229 = _2196.z;
        float _2328;
        float _2330;
        float _2332;
        float _2334;
        float _2336;
        float _2338;
        if (((((1u << ((_2229 >> 4u) & 15u)) + 4294967295u) & _2228) == 0u) || ((_2229 & 240u) == 0u))
        {
            _2328 = 0.0;
            _2330 = 0.0;
            _2332 = 0.0;
            _2334 = 0.0;
            _2336 = 0.0;
            _2338 = 0.0;
        }
        else
        {
            float _2329;
            float _2331;
            float _2333;
            float _2335;
            float _2337;
            float _2339;
            float _2472 = 0.0;
            float _2473 = 0.0;
            float _2474 = 0.0;
            float _2475 = 0.0;
            float _2476 = 0.0;
            float _2477 = 0.0;
            uint _2478 = 0u;
            uint _2487;
            bool _2488;
            for (;;)
            {
                _2487 = texelFetch(g_lightClassification, int((((_2222 << 5u) + (_2208 << 9u)) + (_2478 << 2u)) >> 2u)).x;
                _2488 = _2487 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2488)
                {
                    frontier_phi_63_pred = _2477;
                    frontier_phi_63_pred_1 = _2476;
                    frontier_phi_63_pred_2 = _2475;
                    frontier_phi_63_pred_3 = _2474;
                    frontier_phi_63_pred_4 = _2473;
                    frontier_phi_63_pred_5 = _2472;
                }
                else
                {
                    float _2596;
                    float _2597;
                    float _2598;
                    float _2599;
                    float _2600;
                    float _2601;
                    uint _2602;
                    _2596 = _2472;
                    _2597 = _2473;
                    _2598 = _2474;
                    _2599 = _2475;
                    _2600 = _2476;
                    _2601 = _2477;
                    _2602 = _2487;
                    float _2528;
                    float _2529;
                    float _2530;
                    float _2531;
                    float _2532;
                    float _2533;
                    for (;;)
                    {
                        uint _2606 = uint(findLSB(_2602)) + (_2478 << 5u);
                        uint _2603 = (_2602 + 4294967295u) & _2602;
                        uint _2608 = _2606 * 48u;
                        vec4 _2622 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2608)).x, texelFetch(g_PointLightRenderingBuffer, int(_2608 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2608 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2608 + 3u)).x));
                        uint _2628 = (_2606 * 48u) + 4u;
                        vec4 _2641 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2628)).x, texelFetch(g_PointLightRenderingBuffer, int(_2628 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2628 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2628 + 3u)).x));
                        uint _2647 = (_2606 * 48u) + 8u;
                        vec3 _2658 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2647)).x, texelFetch(g_PointLightRenderingBuffer, int(_2647 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2647 + 2u)).x));
                        float _2662 = _2622.x - _2182;
                        float _2663 = _2622.y - _2183;
                        float _2664 = _2622.z - _2184;
                        float _2665 = dot(vec3(_2662, _2663, _2664), vec3(_2662, _2663, _2664));
                        float _2668 = inversesqrt(_2665);
                        float _2669 = _2668 * _2662;
                        float _2670 = _2668 * _2663;
                        float _2671 = _2668 * _2664;
                        float _2672 = dot(vec3(_481, _484, _487), vec3(_2669, _2670, _2671));
                        float _2677 = 1.0 - (_2665 * _2622.w);
                        float _3961 = isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : max(_2677, 0.0));
                        float _2678 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
                        float _2679 = sqrt(_2665) * _2641.w;
                        float _2682 = 1.39999997615814208984375 / (_2679 + 1.39999997615814208984375);
                        float _2683 = _2682 * _2682;
                        float _2686 = ((1.0 - _2683) * _2672) + _2683;
                        float _2689 = _2679 * _2679;
                        float _2693 = ((isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0))) * _2678) / ((_2689 * 0.699999988079071044921875) + 1.0);
                        float _2697 = (-0.0) - _2182;
                        float _2698 = (-0.0) - _2183;
                        float _2699 = (-0.0) - _2184;
                        float _2703 = inversesqrt(dot(vec3(_2697, _2698, _2699), vec3(_2697, _2698, _2699)));
                        float _2704 = _2703 * _2697;
                        float _2705 = _2703 * _2698;
                        float _2706 = _2703 * _2699;
                        float _2714 = exp2(log2(1.0 / ((_2689 * 3.5) + 5.0)) * 0.25);
                        float _2715 = 1.0 - _541;
                        float _2722 = sqrt(1.0 - ((1.0 - (_2715 * _2715)) * (1.0 - (_2714 * _2714))));
                        float _2723 = _2722 * _2722;
                        float _2724 = _2723 * _2723;
                        float _2725 = _2704 + _2669;
                        float _2726 = _2705 + _2670;
                        float _2727 = _2706 + _2671;
                        float _2731 = inversesqrt(dot(vec3(_2725, _2726, _2727), vec3(_2725, _2726, _2727)));
                        float _2735 = dot(vec3(_481, _484, _487), vec3(_2704, _2705, _2706));
                        float _3977 = isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : max(_2735, 0.0));
                        float _2738 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
                        float _2739 = dot(vec3(_481, _484, _487), vec3(_2731 * _2725, _2731 * _2726, _2731 * _2727));
                        float _3988 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0));
                        float _2742 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
                        float _2746 = ((_2742 * _2742) * (_2724 + (-1.0))) + 1.0;
                        float _2747 = _2682 * _2723;
                        float _2748 = _2747 * _2747;
                        float _2751 = ((1.0 - _2748) * _2672) + _2748;
                        float _3999 = isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0));
                        float _2752 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
                        float _2753 = 1.0 - _2723;
                        float _2763 = (0.5 / (((_2752 * ((_2738 * _2753) + _2723)) + 9.9999999392252902907785028219223e-09) + (((_2752 * _2753) + _2723) * _2738))) * _2752;
                        float _4010 = isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0));
                        float _2774 = (((_2724 * 3.1415927410125732421875) * (isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0)))) / ((_2746 * _2746) * ((_2689 * 2.1991131305694580078125) + 3.141590118408203125))) * _2678;
                        _2531 = (_2693 * _2641.x) + _2599;
                        _2532 = (_2693 * _2641.y) + _2600;
                        _2533 = (_2693 * _2641.z) + _2601;
                        _2528 = (_2774 * _2658.x) + _2596;
                        _2529 = (_2774 * _2658.y) + _2597;
                        _2530 = (_2774 * _2658.z) + _2598;
                        if (_2603 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2596 = _2528;
                            _2597 = _2529;
                            _2598 = _2530;
                            _2599 = _2531;
                            _2600 = _2532;
                            _2601 = _2533;
                            _2602 = _2603;
                        }
                    }
                    frontier_phi_63_pred = _2533;
                    frontier_phi_63_pred_1 = _2532;
                    frontier_phi_63_pred_2 = _2531;
                    frontier_phi_63_pred_3 = _2530;
                    frontier_phi_63_pred_4 = _2529;
                    frontier_phi_63_pred_5 = _2528;
                }
                _2339 = frontier_phi_63_pred;
                _2337 = frontier_phi_63_pred_1;
                _2335 = frontier_phi_63_pred_2;
                _2333 = frontier_phi_63_pred_3;
                _2331 = frontier_phi_63_pred_4;
                _2329 = frontier_phi_63_pred_5;
                uint _2479 = _2478 + 1u;
                if (_2479 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2472 = _2329;
                    _2473 = _2331;
                    _2474 = _2333;
                    _2475 = _2335;
                    _2476 = _2337;
                    _2477 = _2339;
                    _2478 = _2479;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2328 = _2329;
            _2330 = _2331;
            _2332 = _2333;
            _2334 = _2335;
            _2336 = _2337;
            _2338 = _2339;
        }
        uvec4 _2342 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2343 = _2342.z;
        uint _2345 = (_2343 >> 8u) & 15u;
        float _2440;
        float _2442;
        float _2444;
        float _2446;
        float _2448;
        float _2450;
        if (((4294967295u << _2345) & _2228) == 0u)
        {
            _2440 = _2328;
            _2442 = _2330;
            _2444 = _2332;
            _2446 = _2334;
            _2448 = _2336;
            _2450 = _2338;
        }
        else
        {
            float _2465 = inversesqrt(dot(vec3(_2182, _2183, _2184), vec3(_2182, _2183, _2184)));
            float _2466 = _2465 * _2182;
            float _2467 = _2465 * _2183;
            float _2468 = _2465 * _2184;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2345 < ((_2343 >> 12u) & 15u))
            {
                float _2441;
                float _2443;
                float _2445;
                float _2447;
                float _2449;
                float _2451;
                float _2579 = _2328;
                float _2580 = _2330;
                float _2581 = _2332;
                float _2582 = _2334;
                float _2583 = _2336;
                float _2584 = _2338;
                uint _2585 = _2345;
                uint _2594;
                bool _2595;
                for (;;)
                {
                    _2594 = texelFetch(g_lightClassification, int((((_2222 << 5u) + (_2208 << 9u)) + (_2585 << 2u)) >> 2u)).x;
                    _2595 = _2594 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2595)
                    {
                        frontier_phi_69_pred = _2584;
                        frontier_phi_69_pred_1 = _2583;
                        frontier_phi_69_pred_2 = _2582;
                        frontier_phi_69_pred_3 = _2581;
                        frontier_phi_69_pred_4 = _2580;
                        frontier_phi_69_pred_5 = _2579;
                    }
                    else
                    {
                        float _2779;
                        float _2780;
                        float _2781;
                        float _2782;
                        float _2783;
                        float _2784;
                        float _3075;
                        float _3076;
                        float _3077;
                        float _3078;
                        float _3079;
                        float _3080;
                        float _2792 = _2579;
                        float _2793 = _2580;
                        float _2794 = _2581;
                        float _2795 = _2582;
                        float _2796 = _2583;
                        float _2797 = _2584;
                        uint _2798 = _2594;
                        uint _2799;
                        vec4 _2824;
                        float _2825;
                        vec4 _2840;
                        vec3 _2852;
                        vec4 _2868;
                        vec4 _2884;
                        float _2931;
                        bool _2932;
                        for (;;)
                        {
                            uint _2809 = ((_2585 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2798));
                            _2799 = (_2798 + 4294967295u) & _2798;
                            uint _2811 = _2809 * 40u;
                            _2824 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2811)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2811 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2811 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2811 + 3u)).x));
                            _2825 = _2824.w;
                            uint _2827 = (_2809 * 40u) + 4u;
                            _2840 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2827)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2827 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2827 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2827 + 3u)).x));
                            uint _2842 = (_2809 * 40u) + 8u;
                            _2852 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2842)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2842 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2842 + 2u)).x));
                            uint _2855 = (_2809 * 40u) + 16u;
                            _2868 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2855)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2855 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2855 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2855 + 3u)).x));
                            uint _2871 = (_2809 * 40u) + 20u;
                            _2884 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2871)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2871 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2871 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2871 + 3u)).x));
                            uint _2887 = (_2809 * 40u) + 24u;
                            vec4 _2900 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2887)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2887 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2887 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2887 + 3u)).x));
                            uint _2906 = (_2809 * 40u) + 28u;
                            vec4 _2919 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2906)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2906 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2906 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2906 + 3u)).x));
                            _2931 = fma(_2184, _2919.z, fma(_2183, _2919.y, _2919.x * _2182)) + _2919.w;
                            _2932 = !((fma(_2184, _2900.z, fma(_2183, _2900.y, _2900.x * _2182)) + _2900.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2932)
                            {
                                float _2959 = _2824.x - _2182;
                                float _2960 = _2824.y - _2183;
                                float _2961 = _2824.z - _2184;
                                float _2962 = dot(vec3(_2959, _2960, _2961), vec3(_2959, _2960, _2961));
                                float _2965 = inversesqrt(_2962);
                                float _2966 = _2965 * _2959;
                                float _2967 = _2965 * _2960;
                                float _2968 = _2965 * _2961;
                                float _2972 = 1.0 - (_2962 / (_2825 * _2825));
                                float _4021 = isnan(0.0) ? _2972 : (isnan(_2972) ? 0.0 : max(_2972, 0.0));
                                float _2973 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
                                float _2977 = sqrt(_2962) * _2840.w;
                                float _2979 = 1.39999997615814208984375 / (_2977 + 1.39999997615814208984375);
                                float _2980 = _2979 * _2979;
                                float _2983 = ((1.0 - _2980) * dot(vec3(_2966, _2967, _2968), vec3(_481, _484, _487))) + _2980;
                                float _2986 = _2977 * _2977;
                                float _2990 = (fma(_2184, _2868.z, fma(_2183, _2868.y, _2868.x * _2182)) + _2868.w) / _2931;
                                float _2991 = (fma(_2184, _2884.z, fma(_2183, _2884.y, _2884.x * _2182)) + _2884.w) / _2931;
                                float _2995 = 1.0 - dot(vec2(_2990, _2991), vec2(_2990, _2991));
                                float _4037 = isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : max(_2995, 0.0));
                                float _2996 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
                                float _2997 = _2996 * (((isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : max(_2983, 0.0))) * _2973) / ((_2986 * 0.699999988079071044921875) + 1.0));
                                float _3009 = exp2(log2(1.0 / ((_2986 * 3.5) + 5.0)) * 0.25);
                                float _3010 = 1.0 - _541;
                                float _3017 = sqrt(1.0 - ((1.0 - (_3010 * _3010)) * (1.0 - (_3009 * _3009))));
                                float _3018 = _3017 * _3017;
                                float _3019 = _3018 * _3018;
                                float _3020 = _2966 - _2466;
                                float _3021 = _2967 - _2467;
                                float _3022 = _2968 - _2468;
                                float _3026 = inversesqrt(dot(vec3(_3020, _3021, _3022), vec3(_3020, _3021, _3022)));
                                float _3030 = dot(vec3(_481, _484, _487), vec3((-0.0) - _2466, (-0.0) - _2467, (-0.0) - _2468));
                                float _4048 = isnan(0.0) ? _3030 : (isnan(_3030) ? 0.0 : max(_3030, 0.0));
                                float _3033 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
                                float _3034 = dot(vec3(_481, _484, _487), vec3(_3026 * _3020, _3026 * _3021, _3026 * _3022));
                                float _4059 = isnan(0.0) ? _3034 : (isnan(_3034) ? 0.0 : max(_3034, 0.0));
                                float _3037 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
                                float _3041 = ((_3037 * _3037) * (_3019 + (-1.0))) + 1.0;
                                float _3042 = _2979 * _3018;
                                float _3043 = _3042 * _3042;
                                float _3049 = ((1.0 - _3043) * dot(vec3(_481, _484, _487), vec3(_2966, _2967, _2968))) + _3043;
                                float _4070 = isnan(0.0) ? _3049 : (isnan(_3049) ? 0.0 : max(_3049, 0.0));
                                float _3050 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
                                float _3051 = 1.0 - _3018;
                                float _3061 = (0.5 / (((_3050 * ((_3033 * _3051) + _3018)) + 9.9999999392252902907785028219223e-09) + (((_3050 * _3051) + _3018) * _3033))) * _3050;
                                float _4081 = isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : max(_3061, 0.0));
                                float _3071 = (_2996 * _2973) * (((_3019 * 3.1415927410125732421875) * (isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0)))) / ((_3041 * _3041) * ((_2986 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _2997 * _2840.z;
                                frontier_phi_75_pred_1 = _2997 * _2840.y;
                                frontier_phi_75_pred_2 = _2997 * _2840.x;
                                frontier_phi_75_pred_3 = _3071 * _2852.z;
                                frontier_phi_75_pred_4 = _3071 * _2852.y;
                                frontier_phi_75_pred_5 = _3071 * _2852.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3080 = frontier_phi_75_pred;
                            _3079 = frontier_phi_75_pred_1;
                            _3078 = frontier_phi_75_pred_2;
                            _3077 = frontier_phi_75_pred_3;
                            _3076 = frontier_phi_75_pred_4;
                            _3075 = frontier_phi_75_pred_5;
                            _2782 = _3078 + _2795;
                            _2783 = _3079 + _2796;
                            _2784 = _3080 + _2797;
                            _2779 = _3075 + _2792;
                            _2780 = _3076 + _2793;
                            _2781 = _3077 + _2794;
                            if (_2799 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2792 = _2779;
                                _2793 = _2780;
                                _2794 = _2781;
                                _2795 = _2782;
                                _2796 = _2783;
                                _2797 = _2784;
                                _2798 = _2799;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2784;
                        frontier_phi_69_pred_1 = _2783;
                        frontier_phi_69_pred_2 = _2782;
                        frontier_phi_69_pred_3 = _2781;
                        frontier_phi_69_pred_4 = _2780;
                        frontier_phi_69_pred_5 = _2779;
                    }
                    _2451 = frontier_phi_69_pred;
                    _2449 = frontier_phi_69_pred_1;
                    _2447 = frontier_phi_69_pred_2;
                    _2445 = frontier_phi_69_pred_3;
                    _2443 = frontier_phi_69_pred_4;
                    _2441 = frontier_phi_69_pred_5;
                    uint _2586 = _2585 + 1u;
                    if (_2586 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2579 = _2441;
                        _2580 = _2443;
                        _2581 = _2445;
                        _2582 = _2447;
                        _2583 = _2449;
                        _2584 = _2451;
                        _2585 = _2586;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2451;
                frontier_phi_57_58_ladder_1 = _2449;
                frontier_phi_57_58_ladder_2 = _2447;
                frontier_phi_57_58_ladder_3 = _2445;
                frontier_phi_57_58_ladder_4 = _2443;
                frontier_phi_57_58_ladder_5 = _2441;
            }
            else
            {
                frontier_phi_57_58_ladder = _2338;
                frontier_phi_57_58_ladder_1 = _2336;
                frontier_phi_57_58_ladder_2 = _2334;
                frontier_phi_57_58_ladder_3 = _2332;
                frontier_phi_57_58_ladder_4 = _2330;
                frontier_phi_57_58_ladder_5 = _2328;
            }
            _2440 = frontier_phi_57_58_ladder_5;
            _2442 = frontier_phi_57_58_ladder_4;
            _2444 = frontier_phi_57_58_ladder_3;
            _2446 = frontier_phi_57_58_ladder_2;
            _2448 = frontier_phi_57_58_ladder_1;
            _2450 = frontier_phi_57_58_ladder;
        }
        float _2455 = isnan(1.0) ? _525 : (isnan(_525) ? 1.0 : min(_525, 1.0));
        _2240 = (_2455 * _2446) + _1696;
        _2242 = (_2455 * _2448) + _1698;
        _2244 = (_2455 * _2450) + _1700;
        _2246 = ((_2440 * 0.039999999105930328369140625) * _2455) + _2026;
        _2248 = ((_2442 * 0.039999999105930328369140625) * _2455) + _2028;
        _2250 = ((_2444 * 0.039999999105930328369140625) * _2455) + _2030;
    }
    else
    {
        _2240 = _1696;
        _2242 = _1698;
        _2244 = _1700;
        _2246 = _2026;
        _2248 = _2028;
        _2250 = _2030;
    }
    float _4097 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _4108 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _4119 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    uint _2270 = _500 + 6u;
    float _2278 = _459 / cbSceneParam._m0[86u].x;
    float _2279 = _460 / cbSceneParam._m0[86u].y;
    vec4 _2293 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2278, _2279, (log2((isnan(cbSceneParam._m0[77u].w) ? _392 : (isnan(_392) ? cbSceneParam._m0[77u].w : min(_392, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2295 = _2293.x;
    float _2296 = _2293.y;
    float _2297 = _2293.z;
    float _2298 = _2293.w;
    float _2390;
    float _2392;
    float _2394;
    float _2396;
    if (_392 > cbSceneParam._m0[78u].w)
    {
        float _2353 = isnan(_392) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _392 : min(cbSceneParam._m0[80u].w, _392));
        float _2354 = _2353 / _392;
        float _2365 = _2354 * _444;
        float _2366 = _445 * _2354;
        float _2367 = (-0.0) - _2366;
        float _2368 = _2354 * _446;
        float _2370 = (cbSceneParam._m0[77u].w * _2367) / _2353;
        float _2371 = _2370 + cbSceneParam._m0[79u].w;
        float _2372 = cbSceneParam._m0[79u].w - _2366;
        float _2378 = sqrt(((_2365 * _2365) + (_2366 * _2366)) + (_2368 * _2368));
        float _2381 = (1.0 - (cbSceneParam._m0[77u].w / _2353)) * _2378;
        float _2386 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2388 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2541;
        if (abs((_2367 - _2370) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2541 = ((((_2371 > 0.0) ? exp2(_2386 * _2371) : (2.0 - exp2(_2388 * _2371))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2381;
        }
        else
        {
            float _2501 = 1.0 / cbSceneParam._m0[80u].x;
            float _2502 = isnan(_2372) ? _2371 : (isnan(_2371) ? _2372 : max(_2371, _2372));
            float _2503 = isnan(_2372) ? _2371 : (isnan(_2371) ? _2372 : min(_2371, _2372));
            float _2512 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : min(_2502, 0.0));
            float _2513 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : min(_2503, 0.0));
            _2541 = ((abs(_2378 / _2367) * cbSceneParam._m0[80u].y) * ((((_2512 - _2513) * 2.0) - ((exp2(_2386 * (isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0)))) - exp2(_2386 * (isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0))))) * _2501)) - ((exp2(_2388 * _2512) - exp2(_2388 * _2513)) * _2501))) + (_2381 * cbSceneParam._m0[80u].z);
        }
        vec4 _2543 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2278, _2279, 1.0), 0.0);
        float _2552 = exp2((_2541 * (-1.44269502162933349609375)) * (1.0 - _2543.w));
        float _2553 = log2(_2552);
        float _2569 = log2(_2298);
        _2390 = (exp2(_2569 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2553 * cbSceneParam._m0[78u].x)) * _2543.x) / cbSceneParam._m0[78u].x)) + _2295;
        _2392 = (exp2(_2569 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2553 * cbSceneParam._m0[78u].y)) * _2543.y) / cbSceneParam._m0[78u].y)) + _2296;
        _2394 = (exp2(_2569 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2553 * cbSceneParam._m0[78u].z)) * _2543.z) / cbSceneParam._m0[78u].z)) + _2297;
        _2396 = _2552 * _2298;
    }
    else
    {
        _2390 = _2295;
        _2392 = _2296;
        _2394 = _2297;
        _2396 = _2298;
    }
    float _2408 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2409 = _2408 == 3.0;
    float _2410 = log2(_2396);
    float _2417 = exp2(_2410 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0))) * (_2240 + ((isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0))) * _525))) + ((_2246 + ((isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0))) * _1332)) * cbPerFrame._m0[3u].x));
    float _2418 = exp2(_2410 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0))) * (_2242 + ((isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0))) * _525))) + ((_2248 + ((isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0))) * _1332)) * cbPerFrame._m0[3u].x));
    float _2419 = exp2(_2410 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0))) * (_2244 + ((isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0))) * _525))) + ((_2250 + ((isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0))) * _1332)) * cbPerFrame._m0[3u].x));
    float _2428 = (_2408 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2428 * (_2409 ? _2417 : (_2417 + (cbSceneParam._m0[72u].w * _2390)));
    SV_Target.y = _2428 * (_2409 ? _2418 : (_2418 + (cbSceneParam._m0[72u].w * _2392)));
    SV_Target.z = _2428 * (_2409 ? _2419 : (_2419 + (cbSceneParam._m0[72u].w * _2394)));
    SV_Target.w = cbInstanceData._m0[_2270].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2270].w;
}


