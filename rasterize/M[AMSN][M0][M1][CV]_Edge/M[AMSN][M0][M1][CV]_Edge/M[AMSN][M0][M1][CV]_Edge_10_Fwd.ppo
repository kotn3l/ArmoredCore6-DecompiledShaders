#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _919;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _190 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _197 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _198 = _197 * NORMAL.x;
    float _199 = _197 * NORMAL.y;
    float _200 = _197 * NORMAL.z;
    float _204 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _212;
    float _213;
    float _214;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _212 = (-0.0) - _198;
        _213 = (-0.0) - _199;
        _214 = (-0.0) - _200;
    }
    else
    {
        _212 = _198;
        _213 = _199;
        _214 = _200;
    }
    vec4 _240 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _246 = _240.x * cbMtdParam._m0[9u].x;
    float _247 = _240.y * cbMtdParam._m0[9u].y;
    float _248 = _240.z * cbMtdParam._m0[9u].z;
    vec4 _260 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _264 = _260.z;
    float _268 = (_260.x * 2.0) + (-1.0);
    float _270 = (_260.y * 2.0) + (-1.0);
    float _271 = dot(vec2(_268, _270), vec2(_268, _270));
    float _3254 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    float _277 = sqrt(1.0 - (isnan(1.0) ? _3254 : (isnan(_3254) ? 1.0 : min(_3254, 1.0))));
    float _289 = (TEXCOORD_3.x - (((1.0 - TEXCOORD_3.x) * 0.00999999977648258209228515625) * cbMtdParam._m0[12u].y)) * (cbMtdParam._m0[12u].z + 1.0);
    float _3265 = isnan(0.0) ? _289 : (isnan(_289) ? 0.0 : max(_289, 0.0));
    float _290 = isnan(1.0) ? _3265 : (isnan(_3265) ? 1.0 : min(_3265, 1.0));
    float _297 = (_290 * (cbMtdParam._m0[10u].x - _246)) + _246;
    float _298 = (_290 * (cbMtdParam._m0[10u].y - _247)) + _247;
    float _299 = (_290 * (cbMtdParam._m0[10u].z - _248)) + _248;
    vec4 _311 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _313 = _311.x;
    float _315 = _313 - (_313 * _290);
    vec4 _327 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _334 = (_327.x * 2.0) + (-1.0);
    float _335 = (_327.y * 2.0) + (-1.0);
    float _336 = dot(vec2(_334, _335), vec2(_334, _335));
    float _3276 = isnan(0.0) ? _336 : (isnan(_336) ? 0.0 : max(_336, 0.0));
    float _344 = (_290 * (_327.z - _264)) + _264;
    float _356 = (((_334 - _268) + (cbMtdParam._m0[12u].w * _268)) * _290) + _268;
    float _357 = (((_335 - _270) + (cbMtdParam._m0[12u].w * _270)) * _290) + _270;
    float _358 = (_290 * (sqrt(1.0 - (isnan(1.0) ? _3276 : (isnan(_3276) ? 1.0 : min(_3276, 1.0)))) - _277)) + _277;
    float _361 = fma(_358, _212, fma(_357, _204 * TANGENT.x, (_190 * _182) * _356));
    float _364 = fma(_358, _213, fma(_357, _204 * TANGENT.y, (_190 * _183) * _356));
    float _367 = fma(_358, _214, fma(_357, _204 * TANGENT.z, (_190 * _184) * _356));
    float _371 = inversesqrt(dot(vec3(_361, _364, _367), vec3(_361, _364, _367)));
    float _372 = _371 * _361;
    float _373 = _371 * _364;
    float _374 = _371 * _367;
    float _3287 = isnan(0.0) ? _344 : (isnan(_344) ? 0.0 : max(_344, 0.0));
    float _375 = isnan(1.0) ? _3287 : (isnan(_3287) ? 1.0 : min(_3287, 1.0));
    float _3298 = isnan(0.0) ? _297 : (isnan(_297) ? 0.0 : max(_297, 0.0));
    float _3309 = isnan(0.0) ? _298 : (isnan(_298) ? 0.0 : max(_298, 0.0));
    float _3320 = isnan(0.0) ? _299 : (isnan(_299) ? 0.0 : max(_299, 0.0));
    float _3331 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _379 = isnan(1.0) ? _3331 : (isnan(_3331) ? 1.0 : min(_3331, 1.0));
    float _395 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _437 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _447 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _437);
    float _448 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _437);
    float _449 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _437);
    float _453 = inversesqrt(dot(vec3(_447, _448, _449), vec3(_447, _448, _449)));
    float _454 = _447 * _453;
    float _455 = _448 * _453;
    float _456 = _449 * _453;
    float _462 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _463 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _484 = fma(_374, cbSceneParam._m0[5u].z, fma(_373, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _372));
    float _487 = fma(_374, cbSceneParam._m0[6u].z, fma(_373, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _372));
    float _490 = fma(_374, cbSceneParam._m0[7u].z, fma(_373, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _372));
    uint _503 = uint(roundEven(NORMAL.w)) * 13u;
    uint _506 = (_503 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _512 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3298 : (isnan(_3298) ? 1.0 : min(_3298, 1.0)))) * cbInstanceData._m0[_506].x;
    float _513 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3309 : (isnan(_3309) ? 1.0 : min(_3309, 1.0)))) * cbInstanceData._m0[_506].y;
    float _514 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3320 : (isnan(_3320) ? 1.0 : min(_3320, 1.0)))) * cbInstanceData._m0[_506].z;
    float _3342 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _515 = isnan(1.0) ? _3342 : (isnan(_3342) ? 1.0 : min(_3342, 1.0));
    float _3353 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _516 = isnan(1.0) ? _3353 : (isnan(_3353) ? 1.0 : min(_3353, 1.0));
    float _3364 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _517 = isnan(1.0) ? _3364 : (isnan(_3364) ? 1.0 : min(_3364, 1.0));
    float _518 = 1.0 - _379;
    float _519 = _515 * _518;
    float _520 = _516 * _518;
    float _521 = _517 * _518;
    float _526 = (_515 + (-0.039999999105930328369140625)) * _379;
    float _527 = (_516 + (-0.039999999105930328369140625)) * _379;
    float _528 = (_517 + (-0.039999999105930328369140625)) * _379;
    float _529 = _526 + 0.039999999105930328369140625;
    float _531 = _527 + 0.039999999105930328369140625;
    float _532 = _528 + 0.039999999105930328369140625;
    vec4 _541 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _462, cbSceneParam._m0[86u].y * _463));
    float _544 = _541.x * TEXCOORD_3.w;
    float _545 = dot(vec3(_372, _373, _374), vec3(_454, _455, _456));
    float _548 = _545 * 2.0;
    float _552 = (_548 * _372) - _454;
    float _553 = (_548 * _373) - _455;
    float _554 = (_548 * _374) - _456;
    float _558 = abs(dot(vec3(_454, _455, _456), vec3(_372, _373, _374)));
    float _3375 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _560 = sqrt(_375);
    float _573 = exp2((_560 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3375 : (isnan(_3375) ? 1.0 : min(_3375, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_560 * 3.0));
    float _579 = (1.0 - _573) * ((_560 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _580 = _573 * _560;
    float _608 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _612 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _616 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _918;
    float _920;
    float _921;
    float _922;
    float _923;
    float _924;
    float _925;
    float _926;
    float _927;
    float _928;
    float _929;
    float _930;
    float _931;
    float _932;
    float _933;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _643 = fma(_616, cbModelParam._m0[26u].z, fma(_612, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _608));
        float _647 = fma(_616, cbModelParam._m0[27u].z, fma(_612, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _608));
        float _651 = fma(_616, cbModelParam._m0[28u].z, fma(_612, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _608));
        float _676 = _608 + _372;
        float _677 = _612 + _373;
        float _678 = _616 + _374;
        float _688 = fma(_678, cbModelParam._m0[26u].z, fma(_677, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _676)) - _643;
        float _689 = fma(_678, cbModelParam._m0[27u].z, fma(_677, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _676)) - _647;
        float _690 = fma(_678, cbModelParam._m0[28u].z, fma(_677, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _676)) - _651;
        float _694 = inversesqrt(dot(vec3(_688, _689, _690), vec3(_688, _689, _690)));
        float _707 = ((_694 * _688) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_643 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _708 = ((_694 * _689) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_647 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _709 = ((_694 * _690) / cbModelParam._m0[34u].z) + ((((((_651 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _712 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_707, _708, _709), 0.0);
        vec4 _719 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_707, _708, _709), 0.0);
        vec4 _726 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_707, _708, _709), 0.0);
        vec4 _733 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_707, _708, _709), 0.0);
        float _746 = exp2((_712.w + (-0.5)) * 20.0) * 2.0;
        float _747 = _746 * (_712.x + (-0.5));
        float _748 = _746 * (_712.y + (-0.5));
        float _749 = _746 * (_712.z + (-0.5));
        float _756 = exp2((_719.w + (-0.5)) * 20.0) * 2.0;
        float _757 = _756 * (_719.x + (-0.5));
        float _758 = _756 * (_719.y + (-0.5));
        float _759 = _756 * (_719.z + (-0.5));
        float _766 = exp2((_726.w + (-0.5)) * 20.0) * 2.0;
        float _767 = _766 * (_726.x + (-0.5));
        float _768 = _766 * (_726.y + (-0.5));
        float _769 = _766 * (_726.z + (-0.5));
        float _776 = exp2((_733.w + (-0.5)) * 20.0) * 2.0;
        float _777 = _776 * (_733.x + (-0.5));
        float _778 = _776 * (_733.y + (-0.5));
        float _779 = _776 * (_733.z + (-0.5));
        float _780 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
        float _781 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
        float _782 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
        float _783 = _747 * 0.5;
        float _784 = _757 * 0.5;
        float _785 = _767 * 0.5;
        float _786 = dot(vec3(_783, _784, _785), vec3(_783, _784, _785));
        float _791 = (_786 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_786);
        float _800 = (dot(vec3(_372, _373, _374), vec3(_791 * _783, _791 * _784, _791 * _785)) + 1.0) * 0.5;
        float _3401 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
        float _810 = sqrt(((_784 * _784) + (_783 * _783)) + (_785 * _785)) / (_780 + 9.9999997473787516355514526367188e-06);
        float _3412 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
        float _811 = isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0));
        float _812 = _811 * 2.0;
        float _816 = (1.0 - _811) / (_811 + 1.0);
        float _3423 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
        float _817 = isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0));
        float _826 = ((((1.0 - _817) * (_812 + 2.0)) * exp2(log2(isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0))) * (_812 + 1.0))) + _817) * _780;
        float _827 = _748 * 0.5;
        float _828 = _758 * 0.5;
        float _829 = _768 * 0.5;
        float _830 = dot(vec3(_827, _828, _829), vec3(_827, _828, _829));
        float _835 = (_830 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_830);
        float _843 = (dot(vec3(_372, _373, _374), vec3(_835 * _827, _835 * _828, _835 * _829)) + 1.0) * 0.5;
        float _3434 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
        float _852 = sqrt(((_828 * _828) + (_827 * _827)) + (_829 * _829)) / (_781 + 9.9999997473787516355514526367188e-06);
        float _3445 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
        float _853 = isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0));
        float _854 = _853 * 2.0;
        float _858 = (1.0 - _853) / (_853 + 1.0);
        float _3456 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
        float _859 = isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0));
        float _868 = ((((1.0 - _859) * (_854 + 2.0)) * exp2(log2(isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0))) * (_854 + 1.0))) + _859) * _781;
        float _869 = _749 * 0.5;
        float _870 = _759 * 0.5;
        float _871 = _769 * 0.5;
        float _872 = dot(vec3(_869, _870, _871), vec3(_869, _870, _871));
        float _877 = (_872 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_872);
        float _885 = (dot(vec3(_372, _373, _374), vec3(_877 * _869, _877 * _870, _877 * _871)) + 1.0) * 0.5;
        float _3467 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
        float _894 = sqrt(((_870 * _870) + (_869 * _869)) + (_871 * _871)) / (_782 + 9.9999997473787516355514526367188e-06);
        float _3478 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
        float _895 = isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0));
        float _896 = _895 * 2.0;
        float _900 = (1.0 - _895) / (_895 + 1.0);
        float _3489 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
        float _901 = isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0));
        float _910 = ((((1.0 - _901) * (_896 + 2.0)) * exp2(log2(isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0))) * (_896 + 1.0))) + _901) * _782;
        _918 = _749;
        _920 = _748;
        _921 = _747;
        _922 = _759;
        _923 = _758;
        _924 = _757;
        _925 = _769;
        _926 = _768;
        _927 = _767;
        _928 = _782;
        _929 = _781;
        _930 = _780;
        _931 = cbModelParam._m0[36u].z * (isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0)));
        _932 = cbModelParam._m0[36u].z * (isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0)));
        _933 = cbModelParam._m0[36u].z * (isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0)));
    }
    else
    {
        _918 = _919;
        _920 = _919;
        _921 = _919;
        _922 = _919;
        _923 = _919;
        _924 = _919;
        _925 = _919;
        _926 = _919;
        _927 = _919;
        _928 = _919;
        _929 = _919;
        _930 = _919;
        _931 = 0.0;
        _932 = 0.0;
        _933 = 0.0;
    }
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _959 = fma(_616, cbModelParam._m0[30u].z, fma(_612, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _608));
        float _963 = fma(_616, cbModelParam._m0[31u].z, fma(_612, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _608));
        float _967 = fma(_616, cbModelParam._m0[32u].z, fma(_612, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _608));
        float _990 = _608 + _372;
        float _991 = _612 + _373;
        float _992 = _616 + _374;
        float _1002 = fma(_992, cbModelParam._m0[30u].z, fma(_991, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _990)) - _959;
        float _1003 = fma(_992, cbModelParam._m0[31u].z, fma(_991, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _990)) - _963;
        float _1004 = fma(_992, cbModelParam._m0[32u].z, fma(_991, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _990)) - _967;
        float _1008 = inversesqrt(dot(vec3(_1002, _1003, _1004), vec3(_1002, _1003, _1004)));
        float _1021 = ((_1008 * _1002) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_959 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1022 = ((_1008 * _1003) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_963 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1023 = ((_1008 * _1004) / cbModelParam._m0[35u].z) + ((((((_967 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1025 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1021, _1022, _1023), 0.0);
        vec4 _1032 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1021, _1022, _1023), 0.0);
        vec4 _1039 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1021, _1022, _1023), 0.0);
        vec4 _1046 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1021, _1022, _1023), 0.0);
        float _1058 = exp2((_1025.w + (-0.5)) * 20.0) * 2.0;
        float _1059 = _1058 * (_1025.x + (-0.5));
        float _1060 = _1058 * (_1025.y + (-0.5));
        float _1061 = _1058 * (_1025.z + (-0.5));
        float _1068 = exp2((_1032.w + (-0.5)) * 20.0) * 2.0;
        float _1069 = _1068 * (_1032.x + (-0.5));
        float _1070 = _1068 * (_1032.y + (-0.5));
        float _1071 = _1068 * (_1032.z + (-0.5));
        float _1078 = exp2((_1039.w + (-0.5)) * 20.0) * 2.0;
        float _1079 = _1078 * (_1039.x + (-0.5));
        float _1080 = _1078 * (_1039.y + (-0.5));
        float _1081 = _1078 * (_1039.z + (-0.5));
        float _1088 = exp2((_1046.w + (-0.5)) * 20.0) * 2.0;
        float _1089 = _1088 * (_1046.x + (-0.5));
        float _1090 = _1088 * (_1046.y + (-0.5));
        float _1091 = _1088 * (_1046.z + (-0.5));
        float _1092 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1093 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1094 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1095 = _1059 * 0.5;
        float _1096 = _1069 * 0.5;
        float _1097 = _1079 * 0.5;
        float _1098 = dot(vec3(_1095, _1096, _1097), vec3(_1095, _1096, _1097));
        float _1103 = (_1098 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1098);
        float _1111 = (dot(vec3(_372, _373, _374), vec3(_1103 * _1095, _1103 * _1096, _1103 * _1097)) + 1.0) * 0.5;
        float _3530 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1120 = sqrt(((_1096 * _1096) + (_1095 * _1095)) + (_1097 * _1097)) / (_1092 + 9.9999997473787516355514526367188e-06);
        float _3541 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1121 = isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0));
        float _1122 = _1121 * 2.0;
        float _1126 = (1.0 - _1121) / (_1121 + 1.0);
        float _3552 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1127 = isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0));
        float _1136 = ((((1.0 - _1127) * (_1122 + 2.0)) * exp2(log2(isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0))) * (_1122 + 1.0))) + _1127) * _1092;
        float _1137 = _1060 * 0.5;
        float _1138 = _1070 * 0.5;
        float _1139 = _1080 * 0.5;
        float _1140 = dot(vec3(_1137, _1138, _1139), vec3(_1137, _1138, _1139));
        float _1145 = (_1140 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1140);
        float _1153 = (dot(vec3(_372, _373, _374), vec3(_1145 * _1137, _1145 * _1138, _1145 * _1139)) + 1.0) * 0.5;
        float _3563 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1162 = sqrt(((_1138 * _1138) + (_1137 * _1137)) + (_1139 * _1139)) / (_1093 + 9.9999997473787516355514526367188e-06);
        float _3574 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1163 = isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0));
        float _1164 = _1163 * 2.0;
        float _1168 = (1.0 - _1163) / (_1163 + 1.0);
        float _3585 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1169 = isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0));
        float _1178 = ((((1.0 - _1169) * (_1164 + 2.0)) * exp2(log2(isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0))) * (_1164 + 1.0))) + _1169) * _1093;
        float _1179 = _1061 * 0.5;
        float _1180 = _1071 * 0.5;
        float _1181 = _1081 * 0.5;
        float _1182 = dot(vec3(_1179, _1180, _1181), vec3(_1179, _1180, _1181));
        float _1187 = (_1182 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1182);
        float _1195 = (dot(vec3(_372, _373, _374), vec3(_1187 * _1179, _1187 * _1180, _1187 * _1181)) + 1.0) * 0.5;
        float _3596 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1204 = sqrt(((_1180 * _1180) + (_1179 * _1179)) + (_1181 * _1181)) / (_1094 + 9.9999997473787516355514526367188e-06);
        float _3607 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1205 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
        float _1206 = _1205 * 2.0;
        float _1210 = (1.0 - _1205) / (_1205 + 1.0);
        float _3618 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1211 = isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0));
        float _1220 = ((((1.0 - _1211) * (_1206 + 2.0)) * exp2(log2(isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0))) * (_1206 + 1.0))) + _1211) * _1094;
        _1228 = _1061;
        _1229 = _1060;
        _1230 = _1059;
        _1231 = _1071;
        _1232 = _1070;
        _1233 = _1069;
        _1234 = _1081;
        _1235 = _1080;
        _1236 = _1079;
        _1237 = _1094;
        _1238 = _1093;
        _1239 = _1092;
        _1240 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0)));
        _1241 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0)));
        _1242 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0)));
    }
    else
    {
        _1228 = _919;
        _1229 = _919;
        _1230 = _919;
        _1231 = _919;
        _1232 = _919;
        _1233 = _919;
        _1234 = _919;
        _1235 = _919;
        _1236 = _919;
        _1237 = _919;
        _1238 = _919;
        _1239 = _919;
        _1240 = 0.0;
        _1241 = 0.0;
        _1242 = 0.0;
    }
    float _1252 = (cbModelParam._m0[1u].x * (_1240 - _931)) + _931;
    float _1253 = (cbModelParam._m0[1u].x * (_1241 - _932)) + _932;
    float _1254 = (cbModelParam._m0[1u].x * (_1242 - _933)) + _933;
    float _1275 = fma(_1254, cbSceneParam._m0[89u].z, fma(_1253, cbSceneParam._m0[89u].y, _1252 * cbSceneParam._m0[89u].x));
    float _1278 = fma(_1254, cbSceneParam._m0[90u].z, fma(_1253, cbSceneParam._m0[90u].y, _1252 * cbSceneParam._m0[90u].x));
    float _1281 = fma(_1254, cbSceneParam._m0[91u].z, fma(_1253, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1252));
    float _1296 = _552 * 0.5;
    float _1297 = _553 * 0.5;
    float _1298 = _554 * 0.5;
    float _1299 = dot(vec4(_1296, _1297, _1298, 1.0), vec4(_1230, _1233, _1236, _1239));
    float _1302 = dot(vec4(_1296, _1297, _1298, 1.0), vec4(_1229, _1232, _1235, _1238));
    float _1305 = dot(vec4(_1296, _1297, _1298, 1.0), vec4(_1228, _1231, _1234, _1237));
    float _1339;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1312 = dot(vec4(_1296, _1297, _1298, 1.0), vec4(_918, _922, _925, _928));
        float _1316 = dot(vec4(_1296, _1297, _1298, 1.0), vec4(_920, _923, _926, _929));
        float _1320 = dot(vec4(_1296, _1297, _1298, 1.0), vec4(_921, _924, _927, _930));
        float _1327 = dot(vec4(cbModelParam._m0[39u]), vec4(_1296, _1297, _1298, 1.0));
        _1339 = dot(vec3(isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0)), isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0)), isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1327) ? 0.0 : (isnan(0.0) ? _1327 : max(0.0, _1327))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1339 = 1.0;
    }
    float _1350;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1341 = dot(vec4(cbModelParam._m0[40u]), vec4(_1296, _1297, _1298, 1.0));
        _1350 = dot(vec3(isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0)), isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0)), isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1341) ? 0.0 : (isnan(0.0) ? _1341 : max(0.0, _1341))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1350 = 1.0;
    }
    float _1354 = (_1350 * cbModelParam._m0[1u].x) + (_1339 * (1.0 - cbModelParam._m0[1u].x));
    float _1364 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _375);
    float _1365 = isnan(_1364) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1364 : min(cbModelParam._m0[25u].z, _1364));
    float _1446;
    float _1448;
    float _1450;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1413 = fma(_616, cbModelParam._m0[13u].z, fma(_612, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _608)) + cbModelParam._m0[13u].w;
        float _1417 = fma(_616, cbModelParam._m0[14u].z, fma(_612, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _608)) + cbModelParam._m0[14u].w;
        float _1421 = fma(_616, cbModelParam._m0[15u].z, fma(_612, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _608)) + cbModelParam._m0[15u].w;
        float _1424 = fma(_554, cbModelParam._m0[13u].z, fma(_553, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _552));
        float _1427 = fma(_554, cbModelParam._m0[14u].z, fma(_553, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _552));
        float _1430 = fma(_554, cbModelParam._m0[15u].z, fma(_553, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _552));
        float _1458;
        if (_1424 > 0.0)
        {
            _1458 = abs((1.0 - _1413) / _1424);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1424 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1413 + 1.0) / _1424);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1458 = frontier_phi_16_14_ladder;
        }
        float _1665;
        if (_1427 > 0.0)
        {
            _1665 = abs((1.0 - _1417) / _1427);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1427 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1417 + 1.0) / _1427);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1665 = frontier_phi_25_21_ladder;
        }
        float _1919;
        if (_1430 > 0.0)
        {
            _1919 = abs((1.0 - _1421) / _1430);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1430 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1421 + 1.0) / _1430);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1919 = frontier_phi_37_32_ladder;
        }
        float _1921 = isnan(_1665) ? _1458 : (isnan(_1458) ? _1665 : min(_1458, _1665));
        float _1922 = isnan(_1919) ? _1921 : (isnan(_1921) ? _1919 : min(_1921, _1919));
        float _1926 = (_1922 * _1424) + _1413;
        float _1927 = (_1922 * _1427) + _1417;
        float _1928 = (_1922 * _1430) + _1421;
        float _1929 = _1922 * 9.9999997473787516355514526367188e-05;
        float _1931 = (-1.0) - _1929;
        float _1933 = _1929 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1928 > _1933) || ((_1928 < _1931) || ((_1927 > _1933) || ((_1927 < _1931) || ((_1926 < _1931) || (_1926 > _1933))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2056 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1928, cbModelParam._m0[9u].z, fma(_1927, cbModelParam._m0[9u].y, _1926 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1928, cbModelParam._m0[10u].z, fma(_1927, cbModelParam._m0[10u].y, _1926 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1928, cbModelParam._m0[11u].z, fma(_1927, cbModelParam._m0[11u].y, _1926 * cbModelParam._m0[11u].x))), _1365);
            frontier_phi_15_37_ladder = _2056.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2056.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2056.x * cbModelParam._m0[1u].y;
        }
        _1446 = frontier_phi_15_37_ladder_2;
        _1448 = frontier_phi_15_37_ladder_1;
        _1450 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1434 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_552, _553, _554), _1365);
        _1446 = _1434.x * cbModelParam._m0[1u].y;
        _1448 = _1434.y * cbModelParam._m0[1u].y;
        _1450 = _1434.z * cbModelParam._m0[1u].y;
    }
    float _1454 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _375);
    float _1455 = isnan(_1454) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1454 : min(cbModelParam._m0[25u].w, _1454));
    float _1548;
    float _1550;
    float _1552;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1512 = fma(_616, cbModelParam._m0[21u].z, fma(_612, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _608)) + cbModelParam._m0[21u].w;
        float _1516 = fma(_616, cbModelParam._m0[22u].z, fma(_612, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _608)) + cbModelParam._m0[22u].w;
        float _1520 = fma(_616, cbModelParam._m0[23u].z, fma(_612, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _608)) + cbModelParam._m0[23u].w;
        float _1523 = fma(_554, cbModelParam._m0[21u].z, fma(_553, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _552));
        float _1526 = fma(_554, cbModelParam._m0[22u].z, fma(_553, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _552));
        float _1529 = fma(_554, cbModelParam._m0[23u].z, fma(_553, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _552));
        float _1670;
        if (_1523 > 0.0)
        {
            _1670 = abs((1.0 - _1512) / _1523);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1523 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1512 + 1.0) / _1523);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1670 = frontier_phi_27_23_ladder;
        }
        float _1946;
        if (_1526 > 0.0)
        {
            _1946 = abs((1.0 - _1516) / _1526);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1526 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1516 + 1.0) / _1526);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1946 = frontier_phi_39_34_ladder;
        }
        float _2159;
        if (_1529 > 0.0)
        {
            _2159 = abs((1.0 - _1520) / _1529);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1529 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1520 + 1.0) / _1529);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2159 = frontier_phi_48_45_ladder;
        }
        float _2161 = isnan(_1946) ? _1670 : (isnan(_1670) ? _1946 : min(_1670, _1946));
        float _2162 = isnan(_2159) ? _2161 : (isnan(_2161) ? _2159 : min(_2161, _2159));
        float _2166 = (_2162 * _1523) + _1512;
        float _2167 = (_2162 * _1526) + _1516;
        float _2168 = (_2162 * _1529) + _1520;
        float _2169 = _2162 * 9.9999997473787516355514526367188e-05;
        float _2170 = (-1.0) - _2169;
        float _2172 = _2169 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2168 > _2172) || ((_2168 < _2170) || ((_2167 > _2172) || ((_2167 < _2170) || ((_2166 < _2170) || (_2166 > _2172))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2366 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2168, cbModelParam._m0[17u].z, fma(_2167, cbModelParam._m0[17u].y, _2166 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2168, cbModelParam._m0[18u].z, fma(_2167, cbModelParam._m0[18u].y, _2166 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2168, cbModelParam._m0[19u].z, fma(_2167, cbModelParam._m0[19u].y, _2166 * cbModelParam._m0[19u].x))), _1455);
            frontier_phi_24_48_ladder = _2366.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2366.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2366.x * cbModelParam._m0[1u].z;
        }
        _1548 = frontier_phi_24_48_ladder_2;
        _1550 = frontier_phi_24_48_ladder_1;
        _1552 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1532 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_552, _553, _554), _1455);
        _1548 = _1532.x * cbModelParam._m0[1u].z;
        _1550 = _1532.y * cbModelParam._m0[1u].z;
        _1552 = _1532.z * cbModelParam._m0[1u].z;
    }
    float _1565 = (((_579 * _529) + _580) * _544) * ((cbModelParam._m0[1u].w * (_1548 - _1446)) + _1446);
    float _1567 = (((_579 * _531) + _580) * _544) * ((cbModelParam._m0[1u].w * (_1550 - _1448)) + _1448);
    float _1569 = (((_579 * _532) + _580) * _544) * ((cbModelParam._m0[1u].w * (_1552 - _1450)) + _1450);
    float _1572 = fma(_1569, cbSceneParam._m0[89u].z, fma(_1567, cbSceneParam._m0[89u].y, _1565 * cbSceneParam._m0[89u].x));
    float _1575 = fma(_1569, cbSceneParam._m0[90u].z, fma(_1567, cbSceneParam._m0[90u].y, _1565 * cbSceneParam._m0[90u].x));
    float _1578 = fma(_1569, cbSceneParam._m0[91u].z, fma(_1567, cbSceneParam._m0[91u].y, _1565 * cbSceneParam._m0[91u].x));
    uvec4 _1588 = floatBitsToUint(cbInstanceData._m0[_503 + 5u]);
    uint _1590 = _1588.x * 14u;
    uint _1591 = _1590 + 13u;
    float _1598 = _544 + (-1.0);
    float _1603 = (cbLight._m0[_1591].x * _1598) + 1.0;
    float _1604 = (cbLight._m0[_1591].y * _1598) + 1.0;
    float _1605 = (cbLight._m0[_1591].z * _1598) + 1.0;
    float _1606 = (cbLight._m0[_1591].w * _1598) + 1.0;
    uint _1607 = _1590 + 5u;
    float _1613 = isnan(1.0) ? _1604 : (isnan(_1604) ? 1.0 : min(_1604, 1.0));
    uint _1617 = _1590 + 4u;
    float _1624 = isnan(1.0) ? _1603 : (isnan(_1603) ? 1.0 : min(_1603, 1.0));
    uint _1628 = _1590 | 1u;
    float _1639 = dot(vec3(cbLight._m0[_1590].xyz), vec3(_372, _373, _374));
    float _1642 = dot(vec3(cbLight._m0[_1628].xyz), vec3(_372, _373, _374));
    float _3754 = isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0));
    float _3765 = isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0));
    float _1647 = (isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0))) * 0.3183098733425140380859375;
    float _1649 = (isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0))) * 0.3183098733425140380859375;
    float _1656 = ((cbLight._m0[_1607].x * _1613) * _1649) + ((cbLight._m0[_1617].x * _1624) * _1647);
    float _1657 = ((_1613 * cbLight._m0[_1607].y) * _1649) + ((_1624 * cbLight._m0[_1617].y) * _1647);
    float _1658 = ((_1613 * cbLight._m0[_1607].z) * _1649) + ((_1624 * cbLight._m0[_1617].z) * _1647);
    uvec4 _1662 = floatBitsToUint(cbLight._m0[_1590 + 12u]);
    bool _1664 = _1662.x == 0u;
    float _1675;
    float _1677;
    float _1679;
    if (_1664)
    {
        _1675 = _1656;
        _1677 = _1657;
        _1679 = _1658;
    }
    else
    {
        uint _1683 = _1590 + 6u;
        float _1699 = (dot(vec3(cbLight._m0[_1590 + 2u].xyz), vec3(_372, _373, _374)) * 0.5) + 0.5;
        float _1700 = _1699 * _1699;
        float _3776 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
        float _1701 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
        float _1702 = isnan(1.0) ? _1605 : (isnan(_1605) ? 1.0 : min(_1605, 1.0));
        _1675 = (((cbLight._m0[_1683].x * 0.3183098733425140380859375) * _1701) * _1702) + _1656;
        _1677 = (((cbLight._m0[_1683].y * 0.3183098733425140380859375) * _1701) * _1702) + _1657;
        _1679 = (((cbLight._m0[_1683].z * 0.3183098733425140380859375) * _1701) * _1702) + _1658;
    }
    bool _1682 = _1662.y == 0u;
    float _1720;
    float _1722;
    float _1724;
    if (_1682)
    {
        _1720 = _1675;
        _1722 = _1677;
        _1724 = _1679;
    }
    else
    {
        uint _1890 = _1590 + 7u;
        float _1906 = (dot(vec3(cbLight._m0[_1590 + 3u].xyz), vec3(_372, _373, _374)) * 0.5) + 0.5;
        float _1907 = _1906 * _1906;
        float _3792 = isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0));
        float _1908 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
        float _1909 = isnan(1.0) ? _1606 : (isnan(_1606) ? 1.0 : min(_1606, 1.0));
        _1720 = (((cbLight._m0[_1890].x * 0.3183098733425140380859375) * _1908) * _1909) + _1675;
        _1722 = (((cbLight._m0[_1890].y * 0.3183098733425140380859375) * _1908) * _1909) + _1677;
        _1724 = (((cbLight._m0[_1890].z * 0.3183098733425140380859375) * _1908) * _1909) + _1679;
    }
    uint _1727 = _1590 + 8u;
    float _1740 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1590].w)) * _375) * 0.949999988079071044921875);
    float _1741 = _1740 * _1740;
    float _1742 = cbLight._m0[_1590].x + _454;
    float _1743 = cbLight._m0[_1590].y + _455;
    float _1744 = cbLight._m0[_1590].z + _456;
    float _1748 = inversesqrt(dot(vec3(_1742, _1743, _1744), vec3(_1742, _1743, _1744)));
    float _1749 = _1748 * _1742;
    float _1750 = _1748 * _1743;
    float _1751 = _1748 * _1744;
    float _1752 = dot(vec3(_372, _373, _374), vec3(cbLight._m0[_1590].xyz));
    float _3808 = isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0));
    float _1755 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
    float _3819 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _1756 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
    float _1757 = dot(vec3(_372, _373, _374), vec3(_1749, _1750, _1751));
    float _3830 = isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0));
    float _1760 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
    float _1761 = dot(vec3(cbLight._m0[_1590].xyz), vec3(_1749, _1750, _1751));
    float _3841 = isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0));
    float _1765 = _1741 * _1741;
    float _1769 = ((_1760 * _1760) * (_1765 + (-1.0))) + 1.0;
    float _1777 = exp2(log2(1.0 - (isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0)))) * 5.0);
    float _1778 = 0.959999978542327880859375 - _526;
    float _1780 = 0.959999978542327880859375 - _527;
    float _1781 = 0.959999978542327880859375 - _528;
    float _1788 = 1.0 - _1741;
    float _1799 = (0.5 / (((_1756 * ((_1755 * _1788) + _1741)) + 9.9999999392252902907785028219223e-09) + (((_1756 * _1788) + _1741) * _1755))) * _1755;
    float _3852 = isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0));
    float _1801 = (isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0))) * (_1765 / ((_1769 * _1769) * 3.141590118408203125));
    uint _1812 = _1590 + 9u;
    float _1823 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1628].w)) * _375) * 0.949999988079071044921875);
    float _1824 = _1823 * _1823;
    float _1825 = cbLight._m0[_1628].x + _454;
    float _1826 = cbLight._m0[_1628].y + _455;
    float _1827 = cbLight._m0[_1628].z + _456;
    float _1831 = inversesqrt(dot(vec3(_1825, _1826, _1827), vec3(_1825, _1826, _1827)));
    float _1832 = _1831 * _1825;
    float _1833 = _1831 * _1826;
    float _1834 = _1831 * _1827;
    float _1835 = dot(vec3(_372, _373, _374), vec3(cbLight._m0[_1628].xyz));
    float _3863 = isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0));
    float _1838 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
    float _1839 = dot(vec3(_372, _373, _374), vec3(_1832, _1833, _1834));
    float _3874 = isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0));
    float _1842 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
    float _1843 = dot(vec3(cbLight._m0[_1628].xyz), vec3(_1832, _1833, _1834));
    float _3885 = isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0));
    float _1847 = _1824 * _1824;
    float _1851 = ((_1842 * _1842) * (_1847 + (-1.0))) + 1.0;
    float _1858 = exp2(log2(1.0 - (isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0)))) * 5.0);
    float _1865 = 1.0 - _1824;
    float _1875 = (0.5 / (((_1756 * ((_1838 * _1865) + _1824)) + 9.9999999392252902907785028219223e-09) + (((_1756 * _1865) + _1824) * _1838))) * _1838;
    float _3896 = isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0));
    float _1877 = (isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0))) * (_1847 / ((_1851 * _1851) * 3.141590118408203125));
    float _1887 = (((((_1858 * _1778) + _529) * cbLight._m0[_1812].x) * _1877) * _1613) + (((((_1777 * _1778) + _529) * cbLight._m0[_1727].x) * _1801) * _1624);
    float _1888 = (((((_1858 * _1780) + _531) * cbLight._m0[_1812].y) * _1877) * _1613) + (((((_1777 * _1780) + _531) * cbLight._m0[_1727].y) * _1801) * _1624);
    float _1889 = (((((_1858 * _1781) + _532) * cbLight._m0[_1812].z) * _1877) * _1613) + (((((_1777 * _1781) + _532) * cbLight._m0[_1727].z) * _1801) * _1624);
    float _1951;
    float _1953;
    float _1955;
    if (_1664)
    {
        _1951 = _1887;
        _1953 = _1888;
        _1955 = _1889;
    }
    else
    {
        uint _1957 = _1590 + 2u;
        uint _1961 = _1590 + 10u;
        float _1975 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1957].w)) * _375) * 0.949999988079071044921875);
        float _1976 = _1975 * _1975;
        float _1977 = cbLight._m0[_1957].x + _454;
        float _1978 = cbLight._m0[_1957].y + _455;
        float _1979 = cbLight._m0[_1957].z + _456;
        float _1983 = inversesqrt(dot(vec3(_1977, _1978, _1979), vec3(_1977, _1978, _1979)));
        float _1984 = _1983 * _1977;
        float _1985 = _1983 * _1978;
        float _1986 = _1983 * _1979;
        float _1987 = dot(vec3(_372, _373, _374), vec3(cbLight._m0[_1957].xyz));
        float _3907 = isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0));
        float _1990 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
        float _1991 = dot(vec3(_372, _373, _374), vec3(_1984, _1985, _1986));
        float _3918 = isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0));
        float _1994 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
        float _1995 = dot(vec3(cbLight._m0[_1957].xyz), vec3(_1984, _1985, _1986));
        float _3929 = isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0));
        float _1999 = _1976 * _1976;
        float _2003 = ((_1994 * _1994) * (_1999 + (-1.0))) + 1.0;
        float _2010 = exp2(log2(1.0 - (isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0)))) * 5.0);
        float _2017 = 1.0 - _1976;
        float _2027 = (0.5 / (((_1756 * ((_1990 * _2017) + _1976)) + 9.9999999392252902907785028219223e-09) + (((_1756 * _2017) + _1976) * _1990))) * _1990;
        float _3940 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
        float _2029 = (isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0))) * (_1999 / ((_2003 * _2003) * 3.141590118408203125));
        float _2030 = isnan(1.0) ? _1605 : (isnan(_1605) ? 1.0 : min(_1605, 1.0));
        _1951 = (((((_2010 * _1778) + _529) * cbLight._m0[_1961].x) * _2029) * _2030) + _1887;
        _1953 = (((((_2010 * _1780) + _531) * cbLight._m0[_1961].y) * _2029) * _2030) + _1888;
        _1955 = (((((_2010 * _1781) + _532) * cbLight._m0[_1961].z) * _2029) * _2030) + _1889;
    }
    float _2065;
    float _2067;
    float _2069;
    if (_1682)
    {
        _2065 = _1951;
        _2067 = _1953;
        _2069 = _1955;
    }
    else
    {
        uint _2076 = _1590 + 3u;
        uint _2080 = _1590 + 11u;
        float _2094 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2076].w)) * _375) * 0.949999988079071044921875);
        float _2095 = _2094 * _2094;
        float _2096 = cbLight._m0[_2076].x + _454;
        float _2097 = cbLight._m0[_2076].y + _455;
        float _2098 = cbLight._m0[_2076].z + _456;
        float _2102 = inversesqrt(dot(vec3(_2096, _2097, _2098), vec3(_2096, _2097, _2098)));
        float _2103 = _2102 * _2096;
        float _2104 = _2102 * _2097;
        float _2105 = _2102 * _2098;
        float _2106 = dot(vec3(_372, _373, _374), vec3(cbLight._m0[_2076].xyz));
        float _3956 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
        float _2109 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
        float _2110 = dot(vec3(_372, _373, _374), vec3(_2103, _2104, _2105));
        float _3967 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
        float _2113 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
        float _2114 = dot(vec3(cbLight._m0[_2076].xyz), vec3(_2103, _2104, _2105));
        float _3978 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
        float _2118 = _2095 * _2095;
        float _2122 = ((_2113 * _2113) * (_2118 + (-1.0))) + 1.0;
        float _2129 = exp2(log2(1.0 - (isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0)))) * 5.0);
        float _2136 = 1.0 - _2095;
        float _2146 = (0.5 / (((_1756 * ((_2109 * _2136) + _2095)) + 9.9999999392252902907785028219223e-09) + (((_1756 * _2136) + _2095) * _2109))) * _2109;
        float _3989 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
        float _2148 = (isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0))) * (_2118 / ((_2122 * _2122) * 3.141590118408203125));
        float _2149 = isnan(1.0) ? _1606 : (isnan(_1606) ? 1.0 : min(_1606, 1.0));
        _2065 = (((((_2129 * _1778) + _529) * cbLight._m0[_2080].x) * _2148) * _2149) + _1951;
        _2067 = (((((_2129 * _1780) + _531) * cbLight._m0[_2080].y) * _2148) * _2149) + _1953;
        _2069 = (((((_2129 * _1781) + _532) * cbLight._m0[_2080].z) * _2148) * _2149) + _1955;
    }
    float _2283;
    float _2285;
    float _2287;
    float _2289;
    float _2291;
    float _2293;
    if (_1588.y == 0u)
    {
        float _2224 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2225 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2224;
        float _2226 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2224;
        float _2227 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2224;
        uvec4 _2239 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2240 = _2239.x;
        uint _2251 = uint((float(_2239.y) * floor(float(uint(cbSceneParam._m0[85u].y * _463) / _2240))) + floor(float(uint(cbSceneParam._m0[85u].x * _462) / _2240)));
        float _2261 = (log2(_2227 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2262 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
        uint _2265 = uint(isnan(14.0) ? _2262 : (isnan(_2262) ? 14.0 : min(_2262, 14.0)));
        uvec4 _2270 = texelFetch(g_lightClusterGridBuffer, int(((_2265 << 2u) + (_2251 << 6u)) >> 2u));
        uint _2271 = _2270.x;
        uint _2272 = _2239.z;
        float _2371;
        float _2373;
        float _2375;
        float _2377;
        float _2379;
        float _2381;
        if (((((1u << ((_2272 >> 4u) & 15u)) + 4294967295u) & _2271) == 0u) || ((_2272 & 240u) == 0u))
        {
            _2371 = 0.0;
            _2373 = 0.0;
            _2375 = 0.0;
            _2377 = 0.0;
            _2379 = 0.0;
            _2381 = 0.0;
        }
        else
        {
            float _2372;
            float _2374;
            float _2376;
            float _2378;
            float _2380;
            float _2382;
            float _2515 = 0.0;
            float _2516 = 0.0;
            float _2517 = 0.0;
            float _2518 = 0.0;
            float _2519 = 0.0;
            float _2520 = 0.0;
            uint _2521 = 0u;
            uint _2530;
            bool _2531;
            for (;;)
            {
                _2530 = texelFetch(g_lightClassification, int((((_2265 << 5u) + (_2251 << 9u)) + (_2521 << 2u)) >> 2u)).x;
                _2531 = _2530 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2531)
                {
                    frontier_phi_63_pred = _2520;
                    frontier_phi_63_pred_1 = _2519;
                    frontier_phi_63_pred_2 = _2518;
                    frontier_phi_63_pred_3 = _2517;
                    frontier_phi_63_pred_4 = _2516;
                    frontier_phi_63_pred_5 = _2515;
                }
                else
                {
                    float _2639;
                    float _2640;
                    float _2641;
                    float _2642;
                    float _2643;
                    float _2644;
                    uint _2645;
                    _2639 = _2515;
                    _2640 = _2516;
                    _2641 = _2517;
                    _2642 = _2518;
                    _2643 = _2519;
                    _2644 = _2520;
                    _2645 = _2530;
                    float _2571;
                    float _2572;
                    float _2573;
                    float _2574;
                    float _2575;
                    float _2576;
                    for (;;)
                    {
                        uint _2649 = uint(findLSB(_2645)) + (_2521 << 5u);
                        uint _2646 = (_2645 + 4294967295u) & _2645;
                        uint _2651 = _2649 * 48u;
                        vec4 _2665 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2651)).x, texelFetch(g_PointLightRenderingBuffer, int(_2651 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2651 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2651 + 3u)).x));
                        uint _2671 = (_2649 * 48u) + 4u;
                        vec4 _2684 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2671)).x, texelFetch(g_PointLightRenderingBuffer, int(_2671 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2671 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2671 + 3u)).x));
                        uint _2690 = (_2649 * 48u) + 8u;
                        vec3 _2701 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2690)).x, texelFetch(g_PointLightRenderingBuffer, int(_2690 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2690 + 2u)).x));
                        float _2705 = _2665.x - _2225;
                        float _2706 = _2665.y - _2226;
                        float _2707 = _2665.z - _2227;
                        float _2708 = dot(vec3(_2705, _2706, _2707), vec3(_2705, _2706, _2707));
                        float _2711 = inversesqrt(_2708);
                        float _2712 = _2711 * _2705;
                        float _2713 = _2711 * _2706;
                        float _2714 = _2711 * _2707;
                        float _2715 = dot(vec3(_484, _487, _490), vec3(_2712, _2713, _2714));
                        float _2720 = 1.0 - (_2708 * _2665.w);
                        float _4015 = isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : max(_2720, 0.0));
                        float _2721 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
                        float _2722 = sqrt(_2708) * _2684.w;
                        float _2725 = 1.39999997615814208984375 / (_2722 + 1.39999997615814208984375);
                        float _2726 = _2725 * _2725;
                        float _2729 = ((1.0 - _2726) * _2715) + _2726;
                        float _2732 = _2722 * _2722;
                        float _2736 = ((isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0))) * _2721) / ((_2732 * 0.699999988079071044921875) + 1.0);
                        float _2740 = (-0.0) - _2225;
                        float _2741 = (-0.0) - _2226;
                        float _2742 = (-0.0) - _2227;
                        float _2746 = inversesqrt(dot(vec3(_2740, _2741, _2742), vec3(_2740, _2741, _2742)));
                        float _2747 = _2746 * _2740;
                        float _2748 = _2746 * _2741;
                        float _2749 = _2746 * _2742;
                        float _2757 = exp2(log2(1.0 / ((_2732 * 3.5) + 5.0)) * 0.25);
                        float _2758 = 1.0 - _560;
                        float _2765 = sqrt(1.0 - ((1.0 - (_2758 * _2758)) * (1.0 - (_2757 * _2757))));
                        float _2766 = _2765 * _2765;
                        float _2767 = _2766 * _2766;
                        float _2768 = _2747 + _2712;
                        float _2769 = _2748 + _2713;
                        float _2770 = _2749 + _2714;
                        float _2774 = inversesqrt(dot(vec3(_2768, _2769, _2770), vec3(_2768, _2769, _2770)));
                        float _2778 = dot(vec3(_484, _487, _490), vec3(_2747, _2748, _2749));
                        float _4031 = isnan(0.0) ? _2778 : (isnan(_2778) ? 0.0 : max(_2778, 0.0));
                        float _2781 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
                        float _2782 = dot(vec3(_484, _487, _490), vec3(_2774 * _2768, _2774 * _2769, _2774 * _2770));
                        float _4042 = isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0));
                        float _2785 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
                        float _2789 = ((_2785 * _2785) * (_2767 + (-1.0))) + 1.0;
                        float _2790 = _2725 * _2766;
                        float _2791 = _2790 * _2790;
                        float _2794 = ((1.0 - _2791) * _2715) + _2791;
                        float _4053 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0));
                        float _2795 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
                        float _2796 = 1.0 - _2766;
                        float _2806 = (0.5 / (((_2795 * ((_2781 * _2796) + _2766)) + 9.9999999392252902907785028219223e-09) + (((_2795 * _2796) + _2766) * _2781))) * _2795;
                        float _4064 = isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : max(_2806, 0.0));
                        float _2817 = (((_2767 * 3.1415927410125732421875) * (isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0)))) / ((_2789 * _2789) * ((_2732 * 2.1991131305694580078125) + 3.141590118408203125))) * _2721;
                        _2574 = (_2736 * _2684.x) + _2642;
                        _2575 = (_2736 * _2684.y) + _2643;
                        _2576 = (_2736 * _2684.z) + _2644;
                        _2571 = (_2817 * _2701.x) + _2639;
                        _2572 = (_2817 * _2701.y) + _2640;
                        _2573 = (_2817 * _2701.z) + _2641;
                        if (_2646 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2639 = _2571;
                            _2640 = _2572;
                            _2641 = _2573;
                            _2642 = _2574;
                            _2643 = _2575;
                            _2644 = _2576;
                            _2645 = _2646;
                        }
                    }
                    frontier_phi_63_pred = _2576;
                    frontier_phi_63_pred_1 = _2575;
                    frontier_phi_63_pred_2 = _2574;
                    frontier_phi_63_pred_3 = _2573;
                    frontier_phi_63_pred_4 = _2572;
                    frontier_phi_63_pred_5 = _2571;
                }
                _2382 = frontier_phi_63_pred;
                _2380 = frontier_phi_63_pred_1;
                _2378 = frontier_phi_63_pred_2;
                _2376 = frontier_phi_63_pred_3;
                _2374 = frontier_phi_63_pred_4;
                _2372 = frontier_phi_63_pred_5;
                uint _2522 = _2521 + 1u;
                if (_2522 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2515 = _2372;
                    _2516 = _2374;
                    _2517 = _2376;
                    _2518 = _2378;
                    _2519 = _2380;
                    _2520 = _2382;
                    _2521 = _2522;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2371 = _2372;
            _2373 = _2374;
            _2375 = _2376;
            _2377 = _2378;
            _2379 = _2380;
            _2381 = _2382;
        }
        uvec4 _2385 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2386 = _2385.z;
        uint _2388 = (_2386 >> 8u) & 15u;
        float _2483;
        float _2485;
        float _2487;
        float _2489;
        float _2491;
        float _2493;
        if (((4294967295u << _2388) & _2271) == 0u)
        {
            _2483 = _2371;
            _2485 = _2373;
            _2487 = _2375;
            _2489 = _2377;
            _2491 = _2379;
            _2493 = _2381;
        }
        else
        {
            float _2508 = inversesqrt(dot(vec3(_2225, _2226, _2227), vec3(_2225, _2226, _2227)));
            float _2509 = _2508 * _2225;
            float _2510 = _2508 * _2226;
            float _2511 = _2508 * _2227;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2388 < ((_2386 >> 12u) & 15u))
            {
                float _2484;
                float _2486;
                float _2488;
                float _2490;
                float _2492;
                float _2494;
                float _2622 = _2371;
                float _2623 = _2373;
                float _2624 = _2375;
                float _2625 = _2377;
                float _2626 = _2379;
                float _2627 = _2381;
                uint _2628 = _2388;
                uint _2637;
                bool _2638;
                for (;;)
                {
                    _2637 = texelFetch(g_lightClassification, int((((_2265 << 5u) + (_2251 << 9u)) + (_2628 << 2u)) >> 2u)).x;
                    _2638 = _2637 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2638)
                    {
                        frontier_phi_69_pred = _2627;
                        frontier_phi_69_pred_1 = _2626;
                        frontier_phi_69_pred_2 = _2625;
                        frontier_phi_69_pred_3 = _2624;
                        frontier_phi_69_pred_4 = _2623;
                        frontier_phi_69_pred_5 = _2622;
                    }
                    else
                    {
                        float _2822;
                        float _2823;
                        float _2824;
                        float _2825;
                        float _2826;
                        float _2827;
                        float _3118;
                        float _3119;
                        float _3120;
                        float _3121;
                        float _3122;
                        float _3123;
                        float _2835 = _2622;
                        float _2836 = _2623;
                        float _2837 = _2624;
                        float _2838 = _2625;
                        float _2839 = _2626;
                        float _2840 = _2627;
                        uint _2841 = _2637;
                        uint _2842;
                        vec4 _2867;
                        float _2868;
                        vec4 _2883;
                        vec3 _2895;
                        vec4 _2911;
                        vec4 _2927;
                        float _2974;
                        bool _2975;
                        for (;;)
                        {
                            uint _2852 = ((_2628 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2841));
                            _2842 = (_2841 + 4294967295u) & _2841;
                            uint _2854 = _2852 * 40u;
                            _2867 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2854)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2854 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2854 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2854 + 3u)).x));
                            _2868 = _2867.w;
                            uint _2870 = (_2852 * 40u) + 4u;
                            _2883 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2870)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2870 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2870 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2870 + 3u)).x));
                            uint _2885 = (_2852 * 40u) + 8u;
                            _2895 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2885)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2885 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2885 + 2u)).x));
                            uint _2898 = (_2852 * 40u) + 16u;
                            _2911 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2898)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2898 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2898 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2898 + 3u)).x));
                            uint _2914 = (_2852 * 40u) + 20u;
                            _2927 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2914)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2914 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2914 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2914 + 3u)).x));
                            uint _2930 = (_2852 * 40u) + 24u;
                            vec4 _2943 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2930)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2930 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2930 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2930 + 3u)).x));
                            uint _2949 = (_2852 * 40u) + 28u;
                            vec4 _2962 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2949)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2949 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2949 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2949 + 3u)).x));
                            _2974 = fma(_2227, _2962.z, fma(_2226, _2962.y, _2962.x * _2225)) + _2962.w;
                            _2975 = !((fma(_2227, _2943.z, fma(_2226, _2943.y, _2943.x * _2225)) + _2943.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2975)
                            {
                                float _3002 = _2867.x - _2225;
                                float _3003 = _2867.y - _2226;
                                float _3004 = _2867.z - _2227;
                                float _3005 = dot(vec3(_3002, _3003, _3004), vec3(_3002, _3003, _3004));
                                float _3008 = inversesqrt(_3005);
                                float _3009 = _3008 * _3002;
                                float _3010 = _3008 * _3003;
                                float _3011 = _3008 * _3004;
                                float _3015 = 1.0 - (_3005 / (_2868 * _2868));
                                float _4075 = isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : max(_3015, 0.0));
                                float _3016 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
                                float _3020 = sqrt(_3005) * _2883.w;
                                float _3022 = 1.39999997615814208984375 / (_3020 + 1.39999997615814208984375);
                                float _3023 = _3022 * _3022;
                                float _3026 = ((1.0 - _3023) * dot(vec3(_3009, _3010, _3011), vec3(_484, _487, _490))) + _3023;
                                float _3029 = _3020 * _3020;
                                float _3033 = (fma(_2227, _2911.z, fma(_2226, _2911.y, _2911.x * _2225)) + _2911.w) / _2974;
                                float _3034 = (fma(_2227, _2927.z, fma(_2226, _2927.y, _2927.x * _2225)) + _2927.w) / _2974;
                                float _3038 = 1.0 - dot(vec2(_3033, _3034), vec2(_3033, _3034));
                                float _4091 = isnan(0.0) ? _3038 : (isnan(_3038) ? 0.0 : max(_3038, 0.0));
                                float _3039 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
                                float _3040 = _3039 * (((isnan(0.0) ? _3026 : (isnan(_3026) ? 0.0 : max(_3026, 0.0))) * _3016) / ((_3029 * 0.699999988079071044921875) + 1.0));
                                float _3052 = exp2(log2(1.0 / ((_3029 * 3.5) + 5.0)) * 0.25);
                                float _3053 = 1.0 - _560;
                                float _3060 = sqrt(1.0 - ((1.0 - (_3053 * _3053)) * (1.0 - (_3052 * _3052))));
                                float _3061 = _3060 * _3060;
                                float _3062 = _3061 * _3061;
                                float _3063 = _3009 - _2509;
                                float _3064 = _3010 - _2510;
                                float _3065 = _3011 - _2511;
                                float _3069 = inversesqrt(dot(vec3(_3063, _3064, _3065), vec3(_3063, _3064, _3065)));
                                float _3073 = dot(vec3(_484, _487, _490), vec3((-0.0) - _2509, (-0.0) - _2510, (-0.0) - _2511));
                                float _4102 = isnan(0.0) ? _3073 : (isnan(_3073) ? 0.0 : max(_3073, 0.0));
                                float _3076 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
                                float _3077 = dot(vec3(_484, _487, _490), vec3(_3069 * _3063, _3069 * _3064, _3069 * _3065));
                                float _4113 = isnan(0.0) ? _3077 : (isnan(_3077) ? 0.0 : max(_3077, 0.0));
                                float _3080 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
                                float _3084 = ((_3080 * _3080) * (_3062 + (-1.0))) + 1.0;
                                float _3085 = _3022 * _3061;
                                float _3086 = _3085 * _3085;
                                float _3092 = ((1.0 - _3086) * dot(vec3(_484, _487, _490), vec3(_3009, _3010, _3011))) + _3086;
                                float _4124 = isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : max(_3092, 0.0));
                                float _3093 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
                                float _3094 = 1.0 - _3061;
                                float _3104 = (0.5 / (((_3093 * ((_3076 * _3094) + _3061)) + 9.9999999392252902907785028219223e-09) + (((_3093 * _3094) + _3061) * _3076))) * _3093;
                                float _4135 = isnan(0.0) ? _3104 : (isnan(_3104) ? 0.0 : max(_3104, 0.0));
                                float _3114 = (_3039 * _3016) * (((_3062 * 3.1415927410125732421875) * (isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0)))) / ((_3084 * _3084) * ((_3029 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3040 * _2883.z;
                                frontier_phi_75_pred_1 = _3040 * _2883.y;
                                frontier_phi_75_pred_2 = _3040 * _2883.x;
                                frontier_phi_75_pred_3 = _3114 * _2895.z;
                                frontier_phi_75_pred_4 = _3114 * _2895.y;
                                frontier_phi_75_pred_5 = _3114 * _2895.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3123 = frontier_phi_75_pred;
                            _3122 = frontier_phi_75_pred_1;
                            _3121 = frontier_phi_75_pred_2;
                            _3120 = frontier_phi_75_pred_3;
                            _3119 = frontier_phi_75_pred_4;
                            _3118 = frontier_phi_75_pred_5;
                            _2825 = _3121 + _2838;
                            _2826 = _3122 + _2839;
                            _2827 = _3123 + _2840;
                            _2822 = _3118 + _2835;
                            _2823 = _3119 + _2836;
                            _2824 = _3120 + _2837;
                            if (_2842 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2835 = _2822;
                                _2836 = _2823;
                                _2837 = _2824;
                                _2838 = _2825;
                                _2839 = _2826;
                                _2840 = _2827;
                                _2841 = _2842;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2827;
                        frontier_phi_69_pred_1 = _2826;
                        frontier_phi_69_pred_2 = _2825;
                        frontier_phi_69_pred_3 = _2824;
                        frontier_phi_69_pred_4 = _2823;
                        frontier_phi_69_pred_5 = _2822;
                    }
                    _2494 = frontier_phi_69_pred;
                    _2492 = frontier_phi_69_pred_1;
                    _2490 = frontier_phi_69_pred_2;
                    _2488 = frontier_phi_69_pred_3;
                    _2486 = frontier_phi_69_pred_4;
                    _2484 = frontier_phi_69_pred_5;
                    uint _2629 = _2628 + 1u;
                    if (_2629 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2622 = _2484;
                        _2623 = _2486;
                        _2624 = _2488;
                        _2625 = _2490;
                        _2626 = _2492;
                        _2627 = _2494;
                        _2628 = _2629;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2494;
                frontier_phi_57_58_ladder_1 = _2492;
                frontier_phi_57_58_ladder_2 = _2490;
                frontier_phi_57_58_ladder_3 = _2488;
                frontier_phi_57_58_ladder_4 = _2486;
                frontier_phi_57_58_ladder_5 = _2484;
            }
            else
            {
                frontier_phi_57_58_ladder = _2381;
                frontier_phi_57_58_ladder_1 = _2379;
                frontier_phi_57_58_ladder_2 = _2377;
                frontier_phi_57_58_ladder_3 = _2375;
                frontier_phi_57_58_ladder_4 = _2373;
                frontier_phi_57_58_ladder_5 = _2371;
            }
            _2483 = frontier_phi_57_58_ladder_5;
            _2485 = frontier_phi_57_58_ladder_4;
            _2487 = frontier_phi_57_58_ladder_3;
            _2489 = frontier_phi_57_58_ladder_2;
            _2491 = frontier_phi_57_58_ladder_1;
            _2493 = frontier_phi_57_58_ladder;
        }
        float _2498 = isnan(1.0) ? _544 : (isnan(_544) ? 1.0 : min(_544, 1.0));
        _2283 = (_2498 * _2489) + _1720;
        _2285 = (_2498 * _2491) + _1722;
        _2287 = (_2498 * _2493) + _1724;
        _2289 = ((_2483 * _529) * _2498) + _2065;
        _2291 = ((_2485 * _531) * _2498) + _2067;
        _2293 = ((_2487 * _532) * _2498) + _2069;
    }
    else
    {
        _2283 = _1720;
        _2285 = _1722;
        _2287 = _1724;
        _2289 = _2065;
        _2291 = _2067;
        _2293 = _2069;
    }
    float _4151 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _4162 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _4173 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    uint _2313 = _503 + 6u;
    float _2321 = _462 / cbSceneParam._m0[86u].x;
    float _2322 = _463 / cbSceneParam._m0[86u].y;
    vec4 _2336 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2321, _2322, (log2((isnan(cbSceneParam._m0[77u].w) ? _395 : (isnan(_395) ? cbSceneParam._m0[77u].w : min(_395, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2338 = _2336.x;
    float _2339 = _2336.y;
    float _2340 = _2336.z;
    float _2341 = _2336.w;
    float _2433;
    float _2435;
    float _2437;
    float _2439;
    if (_395 > cbSceneParam._m0[78u].w)
    {
        float _2396 = isnan(_395) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _395 : min(cbSceneParam._m0[80u].w, _395));
        float _2397 = _2396 / _395;
        float _2408 = _2397 * _447;
        float _2409 = _448 * _2397;
        float _2410 = (-0.0) - _2409;
        float _2411 = _2397 * _449;
        float _2413 = (cbSceneParam._m0[77u].w * _2410) / _2396;
        float _2414 = _2413 + cbSceneParam._m0[79u].w;
        float _2415 = cbSceneParam._m0[79u].w - _2409;
        float _2421 = sqrt(((_2408 * _2408) + (_2409 * _2409)) + (_2411 * _2411));
        float _2424 = (1.0 - (cbSceneParam._m0[77u].w / _2396)) * _2421;
        float _2429 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2431 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2584;
        if (abs((_2410 - _2413) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2584 = ((((_2414 > 0.0) ? exp2(_2429 * _2414) : (2.0 - exp2(_2431 * _2414))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2424;
        }
        else
        {
            float _2544 = 1.0 / cbSceneParam._m0[80u].x;
            float _2545 = isnan(_2415) ? _2414 : (isnan(_2414) ? _2415 : max(_2414, _2415));
            float _2546 = isnan(_2415) ? _2414 : (isnan(_2414) ? _2415 : min(_2414, _2415));
            float _2555 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : min(_2545, 0.0));
            float _2556 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : min(_2546, 0.0));
            _2584 = ((abs(_2421 / _2410) * cbSceneParam._m0[80u].y) * ((((_2555 - _2556) * 2.0) - ((exp2(_2429 * (isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0)))) - exp2(_2429 * (isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0))))) * _2544)) - ((exp2(_2431 * _2555) - exp2(_2431 * _2556)) * _2544))) + (_2424 * cbSceneParam._m0[80u].z);
        }
        vec4 _2586 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2321, _2322, 1.0), 0.0);
        float _2595 = exp2((_2584 * (-1.44269502162933349609375)) * (1.0 - _2586.w));
        float _2596 = log2(_2595);
        float _2612 = log2(_2341);
        _2433 = (exp2(_2612 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2596 * cbSceneParam._m0[78u].x)) * _2586.x) / cbSceneParam._m0[78u].x)) + _2338;
        _2435 = (exp2(_2612 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2596 * cbSceneParam._m0[78u].y)) * _2586.y) / cbSceneParam._m0[78u].y)) + _2339;
        _2437 = (exp2(_2612 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2596 * cbSceneParam._m0[78u].z)) * _2586.z) / cbSceneParam._m0[78u].z)) + _2340;
        _2439 = _2595 * _2341;
    }
    else
    {
        _2433 = _2338;
        _2435 = _2339;
        _2437 = _2340;
        _2439 = _2341;
    }
    float _2451 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2452 = _2451 == 3.0;
    float _2453 = log2(_2439);
    float _2460 = exp2(_2453 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0))) * (_2283 + ((isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0))) * _544))) + ((_2289 + ((isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0))) * _1354)) * cbPerFrame._m0[3u].x));
    float _2461 = exp2(_2453 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0))) * (_2285 + ((isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0))) * _544))) + ((_2291 + ((isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0))) * _1354)) * cbPerFrame._m0[3u].x));
    float _2462 = exp2(_2453 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0))) * (_2287 + ((isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0))) * _544))) + ((_2293 + ((isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0))) * _1354)) * cbPerFrame._m0[3u].x));
    float _2471 = (_2451 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2471 * (_2452 ? _2460 : (_2460 + (cbSceneParam._m0[72u].w * _2433)));
    SV_Target.y = _2471 * (_2452 ? _2461 : (_2461 + (cbSceneParam._m0[72u].w * _2435)));
    SV_Target.z = _2471 * (_2452 ? _2462 : (_2462 + (cbSceneParam._m0[72u].w * _2437)));
    SV_Target.w = cbInstanceData._m0[_2313].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2313].w;
}


