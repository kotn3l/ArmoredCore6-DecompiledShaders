#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1002;
float _3414;
float _3415;
float _3416;
float _3417;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _196 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _197 = _196 * _188;
    float _198 = _196 * _189;
    float _199 = _196 * _190;
    float _203 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _204 = _203 * NORMAL.x;
    float _205 = _203 * NORMAL.y;
    float _206 = _203 * NORMAL.z;
    float _210 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _211 = _210 * TANGENT.x;
    float _212 = _210 * TANGENT.y;
    float _213 = _210 * TANGENT.z;
    float _218;
    float _219;
    float _220;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _218 = (-0.0) - _204;
        _219 = (-0.0) - _205;
        _220 = (-0.0) - _206;
    }
    else
    {
        _218 = _204;
        _219 = _205;
        _220 = _206;
    }
    vec4 _246 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _252 = _246.w;
    float _253 = _246.x * cbMtdParam._m0[9u].x;
    float _254 = _246.y * cbMtdParam._m0[9u].y;
    float _255 = _246.z * cbMtdParam._m0[9u].z;
    vec4 _273 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _277 = _273.z;
    float _281 = (_273.x * 2.0) + (-1.0);
    float _283 = (_273.y * 2.0) + (-1.0);
    float _284 = dot(vec2(_281, _283), vec2(_281, _283));
    float _3426 = isnan(0.0) ? _284 : (isnan(_284) ? 0.0 : max(_284, 0.0));
    float _290 = sqrt(1.0 - (isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0))));
    float _293 = fma(_290, _218, fma(_283, _211, _281 * _197));
    float _296 = fma(_290, _219, fma(_283, _212, _281 * _198));
    float _299 = fma(_290, _220, fma(_283, _213, _281 * _199));
    float _303 = inversesqrt(dot(vec3(_293, _296, _299), vec3(_293, _296, _299)));
    float _332 = (cbMtdParam._m0[12u].x + dot(vec4(_303 * _293, _303 * _296, _303 * _299, 0.0), vec4(cbMtdParam._m0[13u].xyz, 0.0))) - (texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w)).x * cbMtdParam._m0[12u].y);
    float _3437 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    float _333 = isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0));
    float _340 = (_333 * (cbMtdParam._m0[10u].x - _253)) + _253;
    float _341 = (_333 * (cbMtdParam._m0[10u].y - _254)) + _254;
    float _342 = (_333 * (cbMtdParam._m0[10u].z - _255)) + _255;
    vec4 _354 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _356 = _354.x;
    float _358 = _356 - (_356 * _333);
    vec4 _370 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _377 = (_370.x * 2.0) + (-1.0);
    float _378 = (_370.y * 2.0) + (-1.0);
    float _379 = dot(vec2(_377, _378), vec2(_377, _378));
    float _3448 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _387 = ((_370.z - _277) * _333) + _277;
    float _399 = (((_377 - _281) + (cbMtdParam._m0[12u].w * _281)) * _333) + _281;
    float _400 = (((_378 - _283) + (cbMtdParam._m0[12u].w * _283)) * _333) + _283;
    float _401 = ((sqrt(1.0 - (isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0)))) - _290) * _333) + _290;
    float _404 = fma(_401, _218, fma(_400, _211, _399 * _197));
    float _407 = fma(_401, _219, fma(_400, _212, _399 * _198));
    float _410 = fma(_401, _220, fma(_400, _213, _399 * _199));
    float _414 = inversesqrt(dot(vec3(_404, _407, _410), vec3(_404, _407, _410)));
    float _415 = _414 * _404;
    float _416 = _414 * _407;
    float _417 = _414 * _410;
    float _3459 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _418 = isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0));
    float _3470 = isnan(0.0) ? _340 : (isnan(_340) ? 0.0 : max(_340, 0.0));
    float _3481 = isnan(0.0) ? _341 : (isnan(_341) ? 0.0 : max(_341, 0.0));
    float _3492 = isnan(0.0) ? _342 : (isnan(_342) ? 0.0 : max(_342, 0.0));
    float _3503 = isnan(0.0) ? _358 : (isnan(_358) ? 0.0 : max(_358, 0.0));
    float _422 = isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0));
    float _438 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _480 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _490 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _480);
    float _491 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _480);
    float _492 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _480);
    float _496 = inversesqrt(dot(vec3(_490, _491, _492), vec3(_490, _491, _492)));
    float _497 = _490 * _496;
    float _498 = _491 * _496;
    float _499 = _492 * _496;
    vec4 _504 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _506 = _504.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _681 = sqrt(((_490 * _490) + (_491 * _491)) + (_492 * _492));
        float _687 = (cbMatDynParam._m0[5u].x * _681) + cbMatDynParam._m0[5u].y;
        float _3514 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
        float _688 = isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0));
        float _692 = (cbMatDynParam._m0[5u].z * _681) + cbMatDynParam._m0[5u].w;
        float _3525 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0))) - _688)) + _688) < ((_506 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _518 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _519 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _539 = fma(_417, cbSceneParam._m0[5u].z, fma(_416, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _415));
    float _542 = fma(_417, cbSceneParam._m0[6u].z, fma(_416, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _415));
    float _545 = fma(_417, cbSceneParam._m0[7u].z, fma(_416, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _415));
    uint _558 = uint(roundEven(NORMAL.w)) * 13u;
    uint _559 = _558 + 9u;
    uint _560 = _559 + uint(cbMatDynParam._m0[0u].w);
    float _566 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0)))) * cbInstanceData._m0[_560].x;
    float _567 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0)))) * cbInstanceData._m0[_560].y;
    float _568 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0)))) * cbInstanceData._m0[_560].z;
    float _3536 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _569 = isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0));
    float _3547 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _570 = isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0));
    float _3558 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _571 = isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0));
    float _572 = 1.0 - _422;
    float _573 = _569 * _572;
    float _574 = _570 * _572;
    float _575 = _571 * _572;
    float _580 = (_569 + (-0.039999999105930328369140625)) * _422;
    float _581 = (_570 + (-0.039999999105930328369140625)) * _422;
    float _582 = (_571 + (-0.039999999105930328369140625)) * _422;
    float _583 = _580 + 0.039999999105930328369140625;
    float _585 = _581 + 0.039999999105930328369140625;
    float _586 = _582 + 0.039999999105930328369140625;
    vec4 _595 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _518, cbSceneParam._m0[86u].y * _519));
    float _598 = _595.x * TEXCOORD_3.w;
    float _599 = dot(vec3(_415, _416, _417), vec3(_497, _498, _499));
    float _602 = _599 * 2.0;
    float _606 = (_602 * _415) - _497;
    float _607 = (_602 * _416) - _498;
    float _608 = (_602 * _417) - _499;
    float _612 = abs(dot(vec3(_497, _498, _499), vec3(_415, _416, _417)));
    float _3569 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _614 = sqrt(_418);
    float _627 = exp2((_614 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_614 * 3.0));
    float _633 = (1.0 - _627) * ((_614 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _634 = _627 * _614;
    float _662 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _666 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _670 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1001;
    float _1003;
    float _1004;
    float _1005;
    float _1006;
    float _1007;
    float _1008;
    float _1009;
    float _1010;
    float _1011;
    float _1012;
    float _1013;
    float _1014;
    float _1015;
    float _1016;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _726 = fma(_670, cbModelParam._m0[26u].z, fma(_666, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _662));
        float _730 = fma(_670, cbModelParam._m0[27u].z, fma(_666, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _662));
        float _734 = fma(_670, cbModelParam._m0[28u].z, fma(_666, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _662));
        float _759 = _662 + _415;
        float _760 = _666 + _416;
        float _761 = _670 + _417;
        float _771 = fma(_761, cbModelParam._m0[26u].z, fma(_760, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _759)) - _726;
        float _772 = fma(_761, cbModelParam._m0[27u].z, fma(_760, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _759)) - _730;
        float _773 = fma(_761, cbModelParam._m0[28u].z, fma(_760, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _759)) - _734;
        float _777 = inversesqrt(dot(vec3(_771, _772, _773), vec3(_771, _772, _773)));
        float _790 = ((_777 * _771) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_726 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _791 = ((_777 * _772) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_730 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _792 = ((_777 * _773) / cbModelParam._m0[34u].z) + ((((((_734 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _795 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_790, _791, _792), 0.0);
        vec4 _802 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_790, _791, _792), 0.0);
        vec4 _809 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_790, _791, _792), 0.0);
        vec4 _816 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_790, _791, _792), 0.0);
        float _829 = exp2((_795.w + (-0.5)) * 20.0) * 2.0;
        float _830 = _829 * (_795.x + (-0.5));
        float _831 = _829 * (_795.y + (-0.5));
        float _832 = _829 * (_795.z + (-0.5));
        float _839 = exp2((_802.w + (-0.5)) * 20.0) * 2.0;
        float _840 = _839 * (_802.x + (-0.5));
        float _841 = _839 * (_802.y + (-0.5));
        float _842 = _839 * (_802.z + (-0.5));
        float _849 = exp2((_809.w + (-0.5)) * 20.0) * 2.0;
        float _850 = _849 * (_809.x + (-0.5));
        float _851 = _849 * (_809.y + (-0.5));
        float _852 = _849 * (_809.z + (-0.5));
        float _859 = exp2((_816.w + (-0.5)) * 20.0) * 2.0;
        float _860 = _859 * (_816.x + (-0.5));
        float _861 = _859 * (_816.y + (-0.5));
        float _862 = _859 * (_816.z + (-0.5));
        float _863 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
        float _864 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
        float _865 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
        float _866 = _830 * 0.5;
        float _867 = _840 * 0.5;
        float _868 = _850 * 0.5;
        float _869 = dot(vec3(_866, _867, _868), vec3(_866, _867, _868));
        float _874 = (_869 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_869);
        float _883 = (dot(vec3(_415, _416, _417), vec3(_874 * _866, _874 * _867, _874 * _868)) + 1.0) * 0.5;
        float _3595 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
        float _893 = sqrt(((_867 * _867) + (_866 * _866)) + (_868 * _868)) / (_863 + 9.9999997473787516355514526367188e-06);
        float _3606 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
        float _894 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
        float _895 = _894 * 2.0;
        float _899 = (1.0 - _894) / (_894 + 1.0);
        float _3617 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
        float _900 = isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0));
        float _909 = ((((1.0 - _900) * (_895 + 2.0)) * exp2(log2(isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0))) * (_895 + 1.0))) + _900) * _863;
        float _910 = _831 * 0.5;
        float _911 = _841 * 0.5;
        float _912 = _851 * 0.5;
        float _913 = dot(vec3(_910, _911, _912), vec3(_910, _911, _912));
        float _918 = (_913 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_913);
        float _926 = (dot(vec3(_415, _416, _417), vec3(_918 * _910, _918 * _911, _918 * _912)) + 1.0) * 0.5;
        float _3628 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
        float _935 = sqrt(((_911 * _911) + (_910 * _910)) + (_912 * _912)) / (_864 + 9.9999997473787516355514526367188e-06);
        float _3639 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
        float _936 = isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0));
        float _937 = _936 * 2.0;
        float _941 = (1.0 - _936) / (_936 + 1.0);
        float _3650 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
        float _942 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
        float _951 = ((((1.0 - _942) * (_937 + 2.0)) * exp2(log2(isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0))) * (_937 + 1.0))) + _942) * _864;
        float _952 = _832 * 0.5;
        float _953 = _842 * 0.5;
        float _954 = _852 * 0.5;
        float _955 = dot(vec3(_952, _953, _954), vec3(_952, _953, _954));
        float _960 = (_955 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_955);
        float _968 = (dot(vec3(_415, _416, _417), vec3(_960 * _952, _960 * _953, _960 * _954)) + 1.0) * 0.5;
        float _3661 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _977 = sqrt(((_953 * _953) + (_952 * _952)) + (_954 * _954)) / (_865 + 9.9999997473787516355514526367188e-06);
        float _3672 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _978 = isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0));
        float _979 = _978 * 2.0;
        float _983 = (1.0 - _978) / (_978 + 1.0);
        float _3683 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _984 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
        float _993 = ((((1.0 - _984) * (_979 + 2.0)) * exp2(log2(isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0))) * (_979 + 1.0))) + _984) * _865;
        _1001 = _832;
        _1003 = _831;
        _1004 = _830;
        _1005 = _842;
        _1006 = _841;
        _1007 = _840;
        _1008 = _852;
        _1009 = _851;
        _1010 = _850;
        _1011 = _865;
        _1012 = _864;
        _1013 = _863;
        _1014 = cbModelParam._m0[36u].z * (isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0)));
        _1015 = cbModelParam._m0[36u].z * (isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0)));
        _1016 = cbModelParam._m0[36u].z * (isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0)));
    }
    else
    {
        _1001 = _1002;
        _1003 = _1002;
        _1004 = _1002;
        _1005 = _1002;
        _1006 = _1002;
        _1007 = _1002;
        _1008 = _1002;
        _1009 = _1002;
        _1010 = _1002;
        _1011 = _1002;
        _1012 = _1002;
        _1013 = _1002;
        _1014 = 0.0;
        _1015 = 0.0;
        _1016 = 0.0;
    }
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1045 = fma(_670, cbModelParam._m0[30u].z, fma(_666, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _662));
        float _1049 = fma(_670, cbModelParam._m0[31u].z, fma(_666, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _662));
        float _1053 = fma(_670, cbModelParam._m0[32u].z, fma(_666, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _662));
        float _1076 = _662 + _415;
        float _1077 = _666 + _416;
        float _1078 = _670 + _417;
        float _1088 = fma(_1078, cbModelParam._m0[30u].z, fma(_1077, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1076)) - _1045;
        float _1089 = fma(_1078, cbModelParam._m0[31u].z, fma(_1077, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1076)) - _1049;
        float _1090 = fma(_1078, cbModelParam._m0[32u].z, fma(_1077, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1076)) - _1053;
        float _1094 = inversesqrt(dot(vec3(_1088, _1089, _1090), vec3(_1088, _1089, _1090)));
        float _1107 = ((_1094 * _1088) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1045 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1108 = ((_1094 * _1089) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1049 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1109 = ((_1094 * _1090) / cbModelParam._m0[35u].z) + ((((((_1053 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1111 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1107, _1108, _1109), 0.0);
        vec4 _1118 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1107, _1108, _1109), 0.0);
        vec4 _1125 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1107, _1108, _1109), 0.0);
        vec4 _1132 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1107, _1108, _1109), 0.0);
        float _1144 = exp2((_1111.w + (-0.5)) * 20.0) * 2.0;
        float _1145 = _1144 * (_1111.x + (-0.5));
        float _1146 = _1144 * (_1111.y + (-0.5));
        float _1147 = _1144 * (_1111.z + (-0.5));
        float _1154 = exp2((_1118.w + (-0.5)) * 20.0) * 2.0;
        float _1155 = _1154 * (_1118.x + (-0.5));
        float _1156 = _1154 * (_1118.y + (-0.5));
        float _1157 = _1154 * (_1118.z + (-0.5));
        float _1164 = exp2((_1125.w + (-0.5)) * 20.0) * 2.0;
        float _1165 = _1164 * (_1125.x + (-0.5));
        float _1166 = _1164 * (_1125.y + (-0.5));
        float _1167 = _1164 * (_1125.z + (-0.5));
        float _1174 = exp2((_1132.w + (-0.5)) * 20.0) * 2.0;
        float _1175 = _1174 * (_1132.x + (-0.5));
        float _1176 = _1174 * (_1132.y + (-0.5));
        float _1177 = _1174 * (_1132.z + (-0.5));
        float _1178 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1179 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1180 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1181 = _1145 * 0.5;
        float _1182 = _1155 * 0.5;
        float _1183 = _1165 * 0.5;
        float _1184 = dot(vec3(_1181, _1182, _1183), vec3(_1181, _1182, _1183));
        float _1189 = (_1184 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1184);
        float _1197 = (dot(vec3(_415, _416, _417), vec3(_1189 * _1181, _1189 * _1182, _1189 * _1183)) + 1.0) * 0.5;
        float _3724 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1206 = sqrt(((_1182 * _1182) + (_1181 * _1181)) + (_1183 * _1183)) / (_1178 + 9.9999997473787516355514526367188e-06);
        float _3735 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1207 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
        float _1208 = _1207 * 2.0;
        float _1212 = (1.0 - _1207) / (_1207 + 1.0);
        float _3746 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1213 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
        float _1222 = ((((1.0 - _1213) * (_1208 + 2.0)) * exp2(log2(isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0))) * (_1208 + 1.0))) + _1213) * _1178;
        float _1223 = _1146 * 0.5;
        float _1224 = _1156 * 0.5;
        float _1225 = _1166 * 0.5;
        float _1226 = dot(vec3(_1223, _1224, _1225), vec3(_1223, _1224, _1225));
        float _1231 = (_1226 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1226);
        float _1239 = (dot(vec3(_415, _416, _417), vec3(_1231 * _1223, _1231 * _1224, _1231 * _1225)) + 1.0) * 0.5;
        float _3757 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1248 = sqrt(((_1224 * _1224) + (_1223 * _1223)) + (_1225 * _1225)) / (_1179 + 9.9999997473787516355514526367188e-06);
        float _3768 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1249 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
        float _1250 = _1249 * 2.0;
        float _1254 = (1.0 - _1249) / (_1249 + 1.0);
        float _3779 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1255 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
        float _1264 = ((((1.0 - _1255) * (_1250 + 2.0)) * exp2(log2(isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0))) * (_1250 + 1.0))) + _1255) * _1179;
        float _1265 = _1147 * 0.5;
        float _1266 = _1157 * 0.5;
        float _1267 = _1167 * 0.5;
        float _1268 = dot(vec3(_1265, _1266, _1267), vec3(_1265, _1266, _1267));
        float _1273 = (_1268 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1268);
        float _1281 = (dot(vec3(_415, _416, _417), vec3(_1273 * _1265, _1273 * _1266, _1273 * _1267)) + 1.0) * 0.5;
        float _3790 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1290 = sqrt(((_1266 * _1266) + (_1265 * _1265)) + (_1267 * _1267)) / (_1180 + 9.9999997473787516355514526367188e-06);
        float _3801 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1291 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
        float _1292 = _1291 * 2.0;
        float _1296 = (1.0 - _1291) / (_1291 + 1.0);
        float _3812 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1297 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
        float _1306 = ((((1.0 - _1297) * (_1292 + 2.0)) * exp2(log2(isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0))) * (_1292 + 1.0))) + _1297) * _1180;
        _1314 = _1147;
        _1315 = _1146;
        _1316 = _1145;
        _1317 = _1157;
        _1318 = _1156;
        _1319 = _1155;
        _1320 = _1167;
        _1321 = _1166;
        _1322 = _1165;
        _1323 = _1180;
        _1324 = _1179;
        _1325 = _1178;
        _1326 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0)));
        _1327 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0)));
        _1328 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0)));
    }
    else
    {
        _1314 = _1002;
        _1315 = _1002;
        _1316 = _1002;
        _1317 = _1002;
        _1318 = _1002;
        _1319 = _1002;
        _1320 = _1002;
        _1321 = _1002;
        _1322 = _1002;
        _1323 = _1002;
        _1324 = _1002;
        _1325 = _1002;
        _1326 = 0.0;
        _1327 = 0.0;
        _1328 = 0.0;
    }
    float _1338 = (cbModelParam._m0[1u].x * (_1326 - _1014)) + _1014;
    float _1339 = (cbModelParam._m0[1u].x * (_1327 - _1015)) + _1015;
    float _1340 = (cbModelParam._m0[1u].x * (_1328 - _1016)) + _1016;
    float _1361 = fma(_1340, cbSceneParam._m0[89u].z, fma(_1339, cbSceneParam._m0[89u].y, _1338 * cbSceneParam._m0[89u].x));
    float _1364 = fma(_1340, cbSceneParam._m0[90u].z, fma(_1339, cbSceneParam._m0[90u].y, _1338 * cbSceneParam._m0[90u].x));
    float _1367 = fma(_1340, cbSceneParam._m0[91u].z, fma(_1339, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1338));
    float _1382 = _606 * 0.5;
    float _1383 = _607 * 0.5;
    float _1384 = _608 * 0.5;
    float _1385 = dot(vec4(_1382, _1383, _1384, 1.0), vec4(_1316, _1319, _1322, _1325));
    float _1388 = dot(vec4(_1382, _1383, _1384, 1.0), vec4(_1315, _1318, _1321, _1324));
    float _1391 = dot(vec4(_1382, _1383, _1384, 1.0), vec4(_1314, _1317, _1320, _1323));
    float _1425;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1398 = dot(vec4(_1382, _1383, _1384, 1.0), vec4(_1001, _1005, _1008, _1011));
        float _1402 = dot(vec4(_1382, _1383, _1384, 1.0), vec4(_1003, _1006, _1009, _1012));
        float _1406 = dot(vec4(_1382, _1383, _1384, 1.0), vec4(_1004, _1007, _1010, _1013));
        float _1413 = dot(vec4(cbModelParam._m0[39u]), vec4(_1382, _1383, _1384, 1.0));
        _1425 = dot(vec3(isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0)), isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0)), isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1413) ? 0.0 : (isnan(0.0) ? _1413 : max(0.0, _1413))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1425 = 1.0;
    }
    float _1436;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1427 = dot(vec4(cbModelParam._m0[40u]), vec4(_1382, _1383, _1384, 1.0));
        _1436 = dot(vec3(isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0)), isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0)), isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1427) ? 0.0 : (isnan(0.0) ? _1427 : max(0.0, _1427))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1436 = 1.0;
    }
    float _1440 = (_1436 * cbModelParam._m0[1u].x) + (_1425 * (1.0 - cbModelParam._m0[1u].x));
    float _1450 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _418);
    float _1451 = isnan(_1450) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1450 : min(cbModelParam._m0[25u].z, _1450));
    float _1532;
    float _1534;
    float _1536;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1499 = fma(_670, cbModelParam._m0[13u].z, fma(_666, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _662)) + cbModelParam._m0[13u].w;
        float _1503 = fma(_670, cbModelParam._m0[14u].z, fma(_666, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _662)) + cbModelParam._m0[14u].w;
        float _1507 = fma(_670, cbModelParam._m0[15u].z, fma(_666, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _662)) + cbModelParam._m0[15u].w;
        float _1510 = fma(_608, cbModelParam._m0[13u].z, fma(_607, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _606));
        float _1513 = fma(_608, cbModelParam._m0[14u].z, fma(_607, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _606));
        float _1516 = fma(_608, cbModelParam._m0[15u].z, fma(_607, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _606));
        float _1544;
        if (_1510 > 0.0)
        {
            _1544 = abs((1.0 - _1499) / _1510);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1510 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1499 + 1.0) / _1510);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1544 = frontier_phi_19_17_ladder;
        }
        float _1771;
        if (_1513 > 0.0)
        {
            _1771 = abs((1.0 - _1503) / _1513);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1513 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1503 + 1.0) / _1513);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1771 = frontier_phi_28_24_ladder;
        }
        float _2028;
        if (_1516 > 0.0)
        {
            _2028 = abs((1.0 - _1507) / _1516);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1516 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1507 + 1.0) / _1516);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2028 = frontier_phi_40_35_ladder;
        }
        float _2030 = isnan(_1771) ? _1544 : (isnan(_1544) ? _1771 : min(_1544, _1771));
        float _2031 = isnan(_2028) ? _2030 : (isnan(_2030) ? _2028 : min(_2030, _2028));
        float _2035 = (_2031 * _1510) + _1499;
        float _2036 = (_2031 * _1513) + _1503;
        float _2037 = (_2031 * _1516) + _1507;
        float _2038 = _2031 * 9.9999997473787516355514526367188e-05;
        float _2040 = (-1.0) - _2038;
        float _2042 = _2038 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2037 > _2042) || ((_2037 < _2040) || ((_2036 > _2042) || ((_2036 < _2040) || ((_2035 < _2040) || (_2035 > _2042))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2165 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2037, cbModelParam._m0[9u].z, fma(_2036, cbModelParam._m0[9u].y, _2035 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2037, cbModelParam._m0[10u].z, fma(_2036, cbModelParam._m0[10u].y, _2035 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2037, cbModelParam._m0[11u].z, fma(_2036, cbModelParam._m0[11u].y, _2035 * cbModelParam._m0[11u].x))), _1451);
            frontier_phi_18_40_ladder = _2165.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2165.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2165.x * cbModelParam._m0[1u].y;
        }
        _1532 = frontier_phi_18_40_ladder_2;
        _1534 = frontier_phi_18_40_ladder_1;
        _1536 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1520 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_606, _607, _608), _1451);
        _1532 = _1520.x * cbModelParam._m0[1u].y;
        _1534 = _1520.y * cbModelParam._m0[1u].y;
        _1536 = _1520.z * cbModelParam._m0[1u].y;
    }
    float _1540 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _418);
    float _1541 = isnan(_1540) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1540 : min(cbModelParam._m0[25u].w, _1540));
    float _1634;
    float _1636;
    float _1638;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1598 = fma(_670, cbModelParam._m0[21u].z, fma(_666, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _662)) + cbModelParam._m0[21u].w;
        float _1602 = fma(_670, cbModelParam._m0[22u].z, fma(_666, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _662)) + cbModelParam._m0[22u].w;
        float _1606 = fma(_670, cbModelParam._m0[23u].z, fma(_666, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _662)) + cbModelParam._m0[23u].w;
        float _1609 = fma(_608, cbModelParam._m0[21u].z, fma(_607, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _606));
        float _1612 = fma(_608, cbModelParam._m0[22u].z, fma(_607, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _606));
        float _1615 = fma(_608, cbModelParam._m0[23u].z, fma(_607, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _606));
        float _1776;
        if (_1609 > 0.0)
        {
            _1776 = abs((1.0 - _1598) / _1609);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1609 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1598 + 1.0) / _1609);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1776 = frontier_phi_30_26_ladder;
        }
        float _2055;
        if (_1612 > 0.0)
        {
            _2055 = abs((1.0 - _1602) / _1612);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1612 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1602 + 1.0) / _1612);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2055 = frontier_phi_42_37_ladder;
        }
        float _2268;
        if (_1615 > 0.0)
        {
            _2268 = abs((1.0 - _1606) / _1615);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1615 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1606 + 1.0) / _1615);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2268 = frontier_phi_51_48_ladder;
        }
        float _2270 = isnan(_2055) ? _1776 : (isnan(_1776) ? _2055 : min(_1776, _2055));
        float _2271 = isnan(_2268) ? _2270 : (isnan(_2270) ? _2268 : min(_2270, _2268));
        float _2275 = (_2271 * _1609) + _1598;
        float _2276 = (_2271 * _1612) + _1602;
        float _2277 = (_2271 * _1615) + _1606;
        float _2278 = _2271 * 9.9999997473787516355514526367188e-05;
        float _2279 = (-1.0) - _2278;
        float _2281 = _2278 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2277 > _2281) || ((_2277 < _2279) || ((_2276 > _2281) || ((_2276 < _2279) || ((_2275 < _2279) || (_2275 > _2281))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2475 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2277, cbModelParam._m0[17u].z, fma(_2276, cbModelParam._m0[17u].y, _2275 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2277, cbModelParam._m0[18u].z, fma(_2276, cbModelParam._m0[18u].y, _2275 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2277, cbModelParam._m0[19u].z, fma(_2276, cbModelParam._m0[19u].y, _2275 * cbModelParam._m0[19u].x))), _1541);
            frontier_phi_27_51_ladder = _2475.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2475.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2475.x * cbModelParam._m0[1u].z;
        }
        _1634 = frontier_phi_27_51_ladder_2;
        _1636 = frontier_phi_27_51_ladder_1;
        _1638 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1618 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_606, _607, _608), _1541);
        _1634 = _1618.x * cbModelParam._m0[1u].z;
        _1636 = _1618.y * cbModelParam._m0[1u].z;
        _1638 = _1618.z * cbModelParam._m0[1u].z;
    }
    float _1651 = (((_633 * _583) + _634) * _598) * ((cbModelParam._m0[1u].w * (_1634 - _1532)) + _1532);
    float _1653 = (((_633 * _585) + _634) * _598) * ((cbModelParam._m0[1u].w * (_1636 - _1534)) + _1534);
    float _1655 = (((_633 * _586) + _634) * _598) * ((cbModelParam._m0[1u].w * (_1638 - _1536)) + _1536);
    float _1658 = fma(_1655, cbSceneParam._m0[89u].z, fma(_1653, cbSceneParam._m0[89u].y, _1651 * cbSceneParam._m0[89u].x));
    float _1661 = fma(_1655, cbSceneParam._m0[90u].z, fma(_1653, cbSceneParam._m0[90u].y, _1651 * cbSceneParam._m0[90u].x));
    float _1664 = fma(_1655, cbSceneParam._m0[91u].z, fma(_1653, cbSceneParam._m0[91u].y, _1651 * cbSceneParam._m0[91u].x));
    vec4 _1672 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_518, _519));
    float _1674 = _1672.w;
    float _1686 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1674);
    float _1687 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1674);
    float _1688 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1674);
    uvec4 _1692 = floatBitsToUint(cbInstanceData._m0[_558 + 5u]);
    uint _1694 = _1692.x * 14u;
    uint _1695 = _1694 + 13u;
    float _1702 = _598 + (-1.0);
    float _1707 = (cbLight._m0[_1695].x * _1702) + 1.0;
    float _1708 = (cbLight._m0[_1695].y * _1702) + 1.0;
    float _1709 = (cbLight._m0[_1695].z * _1702) + 1.0;
    float _1710 = (cbLight._m0[_1695].w * _1702) + 1.0;
    uint _1711 = _1694 + 5u;
    float _1717 = isnan(1.0) ? _1708 : (isnan(_1708) ? 1.0 : min(_1708, 1.0));
    uint _1721 = _1694 + 4u;
    float _1730 = isnan(1.0) ? _1707 : (isnan(_1707) ? 1.0 : min(_1707, 1.0));
    uint _1734 = _1694 | 1u;
    float _1745 = dot(vec3(cbLight._m0[_1694].xyz), vec3(_415, _416, _417));
    float _1748 = dot(vec3(cbLight._m0[_1734].xyz), vec3(_415, _416, _417));
    float _3948 = isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0));
    float _3959 = isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0));
    float _1753 = (isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0))) * 0.3183098733425140380859375;
    float _1755 = (isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0))) * 0.3183098733425140380859375;
    float _1762 = ((cbLight._m0[_1711].x * _1717) * _1755) + (((cbLight._m0[_1721].x * _1686) * _1730) * _1753);
    float _1763 = ((_1717 * cbLight._m0[_1711].y) * _1755) + (((cbLight._m0[_1721].y * _1687) * _1730) * _1753);
    float _1764 = ((_1717 * cbLight._m0[_1711].z) * _1755) + (((cbLight._m0[_1721].z * _1688) * _1730) * _1753);
    uvec4 _1768 = floatBitsToUint(cbLight._m0[_1694 + 12u]);
    bool _1770 = _1768.x == 0u;
    float _1781;
    float _1783;
    float _1785;
    if (_1770)
    {
        _1781 = _1762;
        _1783 = _1763;
        _1785 = _1764;
    }
    else
    {
        uint _1789 = _1694 + 6u;
        float _1805 = (dot(vec3(cbLight._m0[_1694 + 2u].xyz), vec3(_415, _416, _417)) * 0.5) + 0.5;
        float _1806 = _1805 * _1805;
        float _3970 = isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0));
        float _1807 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
        float _1808 = isnan(1.0) ? _1709 : (isnan(_1709) ? 1.0 : min(_1709, 1.0));
        _1781 = (((cbLight._m0[_1789].x * 0.3183098733425140380859375) * _1807) * _1808) + _1762;
        _1783 = (((cbLight._m0[_1789].y * 0.3183098733425140380859375) * _1807) * _1808) + _1763;
        _1785 = (((cbLight._m0[_1789].z * 0.3183098733425140380859375) * _1807) * _1808) + _1764;
    }
    bool _1788 = _1768.y == 0u;
    float _1826;
    float _1828;
    float _1830;
    if (_1788)
    {
        _1826 = _1781;
        _1828 = _1783;
        _1830 = _1785;
    }
    else
    {
        uint _1999 = _1694 + 7u;
        float _2015 = (dot(vec3(cbLight._m0[_1694 + 3u].xyz), vec3(_415, _416, _417)) * 0.5) + 0.5;
        float _2016 = _2015 * _2015;
        float _3986 = isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0));
        float _2017 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
        float _2018 = isnan(1.0) ? _1710 : (isnan(_1710) ? 1.0 : min(_1710, 1.0));
        _1826 = (((cbLight._m0[_1999].x * 0.3183098733425140380859375) * _2017) * _2018) + _1781;
        _1828 = (((cbLight._m0[_1999].y * 0.3183098733425140380859375) * _2017) * _2018) + _1783;
        _1830 = (((cbLight._m0[_1999].z * 0.3183098733425140380859375) * _2017) * _2018) + _1785;
    }
    uint _1833 = _1694 + 8u;
    float _1846 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1694].w)) * _418) * 0.949999988079071044921875);
    float _1847 = _1846 * _1846;
    float _1848 = cbLight._m0[_1694].x + _497;
    float _1849 = cbLight._m0[_1694].y + _498;
    float _1850 = cbLight._m0[_1694].z + _499;
    float _1854 = inversesqrt(dot(vec3(_1848, _1849, _1850), vec3(_1848, _1849, _1850)));
    float _1855 = _1854 * _1848;
    float _1856 = _1854 * _1849;
    float _1857 = _1854 * _1850;
    float _1858 = dot(vec3(_415, _416, _417), vec3(cbLight._m0[_1694].xyz));
    float _4002 = isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0));
    float _1861 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
    float _4013 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _1862 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
    float _1863 = dot(vec3(_415, _416, _417), vec3(_1855, _1856, _1857));
    float _4024 = isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0));
    float _1866 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
    float _1867 = dot(vec3(cbLight._m0[_1694].xyz), vec3(_1855, _1856, _1857));
    float _4035 = isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0));
    float _1871 = _1847 * _1847;
    float _1875 = ((_1866 * _1866) * (_1871 + (-1.0))) + 1.0;
    float _1883 = exp2(log2(1.0 - (isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0)))) * 5.0);
    float _1884 = 0.959999978542327880859375 - _580;
    float _1886 = 0.959999978542327880859375 - _581;
    float _1887 = 0.959999978542327880859375 - _582;
    float _1894 = 1.0 - _1847;
    float _1905 = (0.5 / (((_1862 * ((_1861 * _1894) + _1847)) + 9.9999999392252902907785028219223e-09) + (((_1862 * _1894) + _1847) * _1861))) * _1861;
    float _4046 = isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0));
    float _1907 = (isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0))) * (_1871 / ((_1875 * _1875) * 3.141590118408203125));
    uint _1921 = _1694 + 9u;
    float _1932 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1734].w)) * _418) * 0.949999988079071044921875);
    float _1933 = _1932 * _1932;
    float _1934 = cbLight._m0[_1734].x + _497;
    float _1935 = cbLight._m0[_1734].y + _498;
    float _1936 = cbLight._m0[_1734].z + _499;
    float _1940 = inversesqrt(dot(vec3(_1934, _1935, _1936), vec3(_1934, _1935, _1936)));
    float _1941 = _1940 * _1934;
    float _1942 = _1940 * _1935;
    float _1943 = _1940 * _1936;
    float _1944 = dot(vec3(_415, _416, _417), vec3(cbLight._m0[_1734].xyz));
    float _4057 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0));
    float _1947 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
    float _1948 = dot(vec3(_415, _416, _417), vec3(_1941, _1942, _1943));
    float _4068 = isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0));
    float _1951 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
    float _1952 = dot(vec3(cbLight._m0[_1734].xyz), vec3(_1941, _1942, _1943));
    float _4079 = isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0));
    float _1956 = _1933 * _1933;
    float _1960 = ((_1951 * _1951) * (_1956 + (-1.0))) + 1.0;
    float _1967 = exp2(log2(1.0 - (isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0)))) * 5.0);
    float _1974 = 1.0 - _1933;
    float _1984 = (0.5 / (((_1862 * ((_1947 * _1974) + _1933)) + 9.9999999392252902907785028219223e-09) + (((_1862 * _1974) + _1933) * _1947))) * _1947;
    float _4090 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
    float _1986 = (isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0))) * (_1956 / ((_1960 * _1960) * 3.141590118408203125));
    float _1996 = (((((_1967 * _1884) + _583) * cbLight._m0[_1921].x) * _1986) * _1717) + ((((cbLight._m0[_1833].x * _1686) * ((_1883 * _1884) + _583)) * _1907) * _1730);
    float _1997 = (((((_1967 * _1886) + _585) * cbLight._m0[_1921].y) * _1986) * _1717) + ((((cbLight._m0[_1833].y * _1687) * ((_1883 * _1886) + _585)) * _1907) * _1730);
    float _1998 = (((((_1967 * _1887) + _586) * cbLight._m0[_1921].z) * _1986) * _1717) + ((((cbLight._m0[_1833].z * _1688) * ((_1883 * _1887) + _586)) * _1907) * _1730);
    float _2060;
    float _2062;
    float _2064;
    if (_1770)
    {
        _2060 = _1996;
        _2062 = _1997;
        _2064 = _1998;
    }
    else
    {
        uint _2066 = _1694 + 2u;
        uint _2070 = _1694 + 10u;
        float _2084 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2066].w)) * _418) * 0.949999988079071044921875);
        float _2085 = _2084 * _2084;
        float _2086 = cbLight._m0[_2066].x + _497;
        float _2087 = cbLight._m0[_2066].y + _498;
        float _2088 = cbLight._m0[_2066].z + _499;
        float _2092 = inversesqrt(dot(vec3(_2086, _2087, _2088), vec3(_2086, _2087, _2088)));
        float _2093 = _2092 * _2086;
        float _2094 = _2092 * _2087;
        float _2095 = _2092 * _2088;
        float _2096 = dot(vec3(_415, _416, _417), vec3(cbLight._m0[_2066].xyz));
        float _4101 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
        float _2099 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
        float _2100 = dot(vec3(_415, _416, _417), vec3(_2093, _2094, _2095));
        float _4112 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
        float _2103 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
        float _2104 = dot(vec3(cbLight._m0[_2066].xyz), vec3(_2093, _2094, _2095));
        float _4123 = isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0));
        float _2108 = _2085 * _2085;
        float _2112 = ((_2103 * _2103) * (_2108 + (-1.0))) + 1.0;
        float _2119 = exp2(log2(1.0 - (isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0)))) * 5.0);
        float _2126 = 1.0 - _2085;
        float _2136 = (0.5 / (((_1862 * ((_2099 * _2126) + _2085)) + 9.9999999392252902907785028219223e-09) + (((_1862 * _2126) + _2085) * _2099))) * _2099;
        float _4134 = isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0));
        float _2138 = (isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0))) * (_2108 / ((_2112 * _2112) * 3.141590118408203125));
        float _2139 = isnan(1.0) ? _1709 : (isnan(_1709) ? 1.0 : min(_1709, 1.0));
        _2060 = (((((_2119 * _1884) + _583) * cbLight._m0[_2070].x) * _2138) * _2139) + _1996;
        _2062 = (((((_2119 * _1886) + _585) * cbLight._m0[_2070].y) * _2138) * _2139) + _1997;
        _2064 = (((((_2119 * _1887) + _586) * cbLight._m0[_2070].z) * _2138) * _2139) + _1998;
    }
    float _2174;
    float _2176;
    float _2178;
    if (_1788)
    {
        _2174 = _2060;
        _2176 = _2062;
        _2178 = _2064;
    }
    else
    {
        uint _2185 = _1694 + 3u;
        uint _2189 = _1694 + 11u;
        float _2203 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2185].w)) * _418) * 0.949999988079071044921875);
        float _2204 = _2203 * _2203;
        float _2205 = cbLight._m0[_2185].x + _497;
        float _2206 = cbLight._m0[_2185].y + _498;
        float _2207 = cbLight._m0[_2185].z + _499;
        float _2211 = inversesqrt(dot(vec3(_2205, _2206, _2207), vec3(_2205, _2206, _2207)));
        float _2212 = _2211 * _2205;
        float _2213 = _2211 * _2206;
        float _2214 = _2211 * _2207;
        float _2215 = dot(vec3(_415, _416, _417), vec3(cbLight._m0[_2185].xyz));
        float _4150 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
        float _2218 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
        float _2219 = dot(vec3(_415, _416, _417), vec3(_2212, _2213, _2214));
        float _4161 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
        float _2222 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
        float _2223 = dot(vec3(cbLight._m0[_2185].xyz), vec3(_2212, _2213, _2214));
        float _4172 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
        float _2227 = _2204 * _2204;
        float _2231 = ((_2222 * _2222) * (_2227 + (-1.0))) + 1.0;
        float _2238 = exp2(log2(1.0 - (isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0)))) * 5.0);
        float _2245 = 1.0 - _2204;
        float _2255 = (0.5 / (((_1862 * ((_2218 * _2245) + _2204)) + 9.9999999392252902907785028219223e-09) + (((_1862 * _2245) + _2204) * _2218))) * _2218;
        float _4183 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
        float _2257 = (isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0))) * (_2227 / ((_2231 * _2231) * 3.141590118408203125));
        float _2258 = isnan(1.0) ? _1710 : (isnan(_1710) ? 1.0 : min(_1710, 1.0));
        _2174 = (((((_2238 * _1884) + _583) * cbLight._m0[_2189].x) * _2257) * _2258) + _2060;
        _2176 = (((((_2238 * _1886) + _585) * cbLight._m0[_2189].y) * _2257) * _2258) + _2062;
        _2178 = (((((_2238 * _1887) + _586) * cbLight._m0[_2189].z) * _2257) * _2258) + _2064;
    }
    float _2392;
    float _2394;
    float _2396;
    float _2398;
    float _2400;
    float _2402;
    if (_1692.y == 0u)
    {
        float _2333 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2334 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2333;
        float _2335 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2333;
        float _2336 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2333;
        uvec4 _2348 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2349 = _2348.x;
        uint _2360 = uint((float(_2348.y) * floor(float(uint(cbSceneParam._m0[85u].y * _519) / _2349))) + floor(float(uint(cbSceneParam._m0[85u].x * _518) / _2349)));
        float _2370 = (log2(_2336 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2371 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
        uint _2374 = uint(isnan(14.0) ? _2371 : (isnan(_2371) ? 14.0 : min(_2371, 14.0)));
        uvec4 _2379 = texelFetch(g_lightClusterGridBuffer, int(((_2374 << 2u) + (_2360 << 6u)) >> 2u));
        uint _2380 = _2379.x;
        uint _2381 = _2348.z;
        float _2480;
        float _2482;
        float _2484;
        float _2486;
        float _2488;
        float _2490;
        if (((((1u << ((_2381 >> 4u) & 15u)) + 4294967295u) & _2380) == 0u) || ((_2381 & 240u) == 0u))
        {
            _2480 = 0.0;
            _2482 = 0.0;
            _2484 = 0.0;
            _2486 = 0.0;
            _2488 = 0.0;
            _2490 = 0.0;
        }
        else
        {
            float _2481;
            float _2483;
            float _2485;
            float _2487;
            float _2489;
            float _2491;
            float _2632 = 0.0;
            float _2633 = 0.0;
            float _2634 = 0.0;
            float _2635 = 0.0;
            float _2636 = 0.0;
            float _2637 = 0.0;
            uint _2638 = 0u;
            uint _2647;
            bool _2648;
            for (;;)
            {
                _2647 = texelFetch(g_lightClassification, int((((_2374 << 5u) + (_2360 << 9u)) + (_2638 << 2u)) >> 2u)).x;
                _2648 = _2647 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2648)
                {
                    frontier_phi_68_pred = _2634;
                    frontier_phi_68_pred_1 = _2637;
                    frontier_phi_68_pred_2 = _2636;
                    frontier_phi_68_pred_3 = _2635;
                    frontier_phi_68_pred_4 = _2633;
                    frontier_phi_68_pred_5 = _2632;
                }
                else
                {
                    float _2777;
                    float _2778;
                    float _2779;
                    float _2780;
                    float _2781;
                    float _2782;
                    uint _2783;
                    _2777 = _2632;
                    _2778 = _2633;
                    _2779 = _2634;
                    _2780 = _2635;
                    _2781 = _2636;
                    _2782 = _2637;
                    _2783 = _2647;
                    float _2704;
                    float _2705;
                    float _2706;
                    float _2707;
                    float _2708;
                    float _2709;
                    for (;;)
                    {
                        uint _2787 = uint(findLSB(_2783)) + (_2638 << 5u);
                        uint _2784 = (_2783 + 4294967295u) & _2783;
                        uint _2789 = _2787 * 48u;
                        vec4 _2803 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2789)).x, texelFetch(g_PointLightRenderingBuffer, int(_2789 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2789 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2789 + 3u)).x));
                        uint _2809 = (_2787 * 48u) + 4u;
                        vec4 _2822 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2809)).x, texelFetch(g_PointLightRenderingBuffer, int(_2809 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2809 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2809 + 3u)).x));
                        uint _2828 = (_2787 * 48u) + 8u;
                        vec3 _2839 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2828)).x, texelFetch(g_PointLightRenderingBuffer, int(_2828 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2828 + 2u)).x));
                        float _2843 = _2803.x - _2334;
                        float _2844 = _2803.y - _2335;
                        float _2845 = _2803.z - _2336;
                        float _2846 = dot(vec3(_2843, _2844, _2845), vec3(_2843, _2844, _2845));
                        float _2849 = inversesqrt(_2846);
                        float _2850 = _2849 * _2843;
                        float _2851 = _2849 * _2844;
                        float _2852 = _2849 * _2845;
                        float _2853 = dot(vec3(_539, _542, _545), vec3(_2850, _2851, _2852));
                        float _2858 = 1.0 - (_2846 * _2803.w);
                        float _4209 = isnan(0.0) ? _2858 : (isnan(_2858) ? 0.0 : max(_2858, 0.0));
                        float _2859 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
                        float _2860 = sqrt(_2846) * _2822.w;
                        float _2863 = 1.39999997615814208984375 / (_2860 + 1.39999997615814208984375);
                        float _2864 = _2863 * _2863;
                        float _2867 = ((1.0 - _2864) * _2853) + _2864;
                        float _2870 = _2860 * _2860;
                        float _2874 = ((isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : max(_2867, 0.0))) * _2859) / ((_2870 * 0.699999988079071044921875) + 1.0);
                        float _2878 = (-0.0) - _2334;
                        float _2879 = (-0.0) - _2335;
                        float _2880 = (-0.0) - _2336;
                        float _2884 = inversesqrt(dot(vec3(_2878, _2879, _2880), vec3(_2878, _2879, _2880)));
                        float _2885 = _2884 * _2878;
                        float _2886 = _2884 * _2879;
                        float _2887 = _2884 * _2880;
                        float _2895 = exp2(log2(1.0 / ((_2870 * 3.5) + 5.0)) * 0.25);
                        float _2896 = 1.0 - _614;
                        float _2903 = sqrt(1.0 - ((1.0 - (_2896 * _2896)) * (1.0 - (_2895 * _2895))));
                        float _2904 = _2903 * _2903;
                        float _2905 = _2904 * _2904;
                        float _2906 = _2885 + _2850;
                        float _2907 = _2886 + _2851;
                        float _2908 = _2887 + _2852;
                        float _2912 = inversesqrt(dot(vec3(_2906, _2907, _2908), vec3(_2906, _2907, _2908)));
                        float _2916 = dot(vec3(_539, _542, _545), vec3(_2885, _2886, _2887));
                        float _4225 = isnan(0.0) ? _2916 : (isnan(_2916) ? 0.0 : max(_2916, 0.0));
                        float _2919 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
                        float _2920 = dot(vec3(_539, _542, _545), vec3(_2912 * _2906, _2912 * _2907, _2912 * _2908));
                        float _4236 = isnan(0.0) ? _2920 : (isnan(_2920) ? 0.0 : max(_2920, 0.0));
                        float _2923 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
                        float _2927 = ((_2923 * _2923) * (_2905 + (-1.0))) + 1.0;
                        float _2928 = _2863 * _2904;
                        float _2929 = _2928 * _2928;
                        float _2932 = ((1.0 - _2929) * _2853) + _2929;
                        float _4247 = isnan(0.0) ? _2932 : (isnan(_2932) ? 0.0 : max(_2932, 0.0));
                        float _2933 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
                        float _2934 = 1.0 - _2904;
                        float _2944 = (0.5 / (((_2933 * ((_2919 * _2934) + _2904)) + 9.9999999392252902907785028219223e-09) + (((_2933 * _2934) + _2904) * _2919))) * _2933;
                        float _4258 = isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : max(_2944, 0.0));
                        float _2955 = (((_2905 * 3.1415927410125732421875) * (isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0)))) / ((_2927 * _2927) * ((_2870 * 2.1991131305694580078125) + 3.141590118408203125))) * _2859;
                        _2707 = (_2874 * _2822.x) + _2780;
                        _2708 = (_2874 * _2822.y) + _2781;
                        _2709 = (_2874 * _2822.z) + _2782;
                        _2704 = (_2955 * _2839.x) + _2777;
                        _2705 = (_2955 * _2839.y) + _2778;
                        _2706 = (_2955 * _2839.z) + _2779;
                        if (_2784 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2777 = _2704;
                            _2778 = _2705;
                            _2779 = _2706;
                            _2780 = _2707;
                            _2781 = _2708;
                            _2782 = _2709;
                            _2783 = _2784;
                        }
                    }
                    frontier_phi_68_pred = _2706;
                    frontier_phi_68_pred_1 = _2709;
                    frontier_phi_68_pred_2 = _2708;
                    frontier_phi_68_pred_3 = _2707;
                    frontier_phi_68_pred_4 = _2705;
                    frontier_phi_68_pred_5 = _2704;
                }
                _2485 = frontier_phi_68_pred;
                _2491 = frontier_phi_68_pred_1;
                _2489 = frontier_phi_68_pred_2;
                _2487 = frontier_phi_68_pred_3;
                _2483 = frontier_phi_68_pred_4;
                _2481 = frontier_phi_68_pred_5;
                uint _2639 = _2638 + 1u;
                if (_2639 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2632 = _2481;
                    _2633 = _2483;
                    _2634 = _2485;
                    _2635 = _2487;
                    _2636 = _2489;
                    _2637 = _2491;
                    _2638 = _2639;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2480 = _2481;
            _2482 = _2483;
            _2484 = _2485;
            _2486 = _2487;
            _2488 = _2489;
            _2490 = _2491;
        }
        uvec4 _2494 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2495 = _2494.z;
        uint _2497 = (_2495 >> 8u) & 15u;
        float _2600;
        float _2602;
        float _2604;
        float _2606;
        float _2608;
        float _2610;
        if (((4294967295u << _2497) & _2380) == 0u)
        {
            _2600 = _2480;
            _2602 = _2482;
            _2604 = _2484;
            _2606 = _2486;
            _2608 = _2488;
            _2610 = _2490;
        }
        else
        {
            float _2625 = inversesqrt(dot(vec3(_2334, _2335, _2336), vec3(_2334, _2335, _2336)));
            float _2626 = _2625 * _2334;
            float _2627 = _2625 * _2335;
            float _2628 = _2625 * _2336;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2497 < ((_2495 >> 12u) & 15u))
            {
                float _2601;
                float _2603;
                float _2605;
                float _2607;
                float _2609;
                float _2611;
                float _2760 = _2480;
                float _2761 = _2482;
                float _2762 = _2484;
                float _2763 = _2486;
                float _2764 = _2488;
                float _2765 = _2490;
                uint _2766 = _2497;
                uint _2775;
                bool _2776;
                for (;;)
                {
                    _2775 = texelFetch(g_lightClassification, int((((_2374 << 5u) + (_2360 << 9u)) + (_2766 << 2u)) >> 2u)).x;
                    _2776 = _2775 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2776)
                    {
                        frontier_phi_79_pred = _2765;
                        frontier_phi_79_pred_1 = _2764;
                        frontier_phi_79_pred_2 = _2763;
                        frontier_phi_79_pred_3 = _2762;
                        frontier_phi_79_pred_4 = _2761;
                        frontier_phi_79_pred_5 = _2760;
                    }
                    else
                    {
                        float _2969;
                        float _2970;
                        float _2971;
                        float _2972;
                        float _2973;
                        float _2974;
                        float _3265;
                        float _3266;
                        float _3267;
                        float _3268;
                        float _3269;
                        float _3270;
                        float _2982 = _2760;
                        float _2983 = _2761;
                        float _2984 = _2762;
                        float _2985 = _2763;
                        float _2986 = _2764;
                        float _2987 = _2765;
                        uint _2988 = _2775;
                        uint _2989;
                        vec4 _3014;
                        float _3015;
                        vec4 _3030;
                        vec3 _3042;
                        vec4 _3058;
                        vec4 _3074;
                        float _3121;
                        bool _3122;
                        for (;;)
                        {
                            uint _2999 = ((_2766 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2988));
                            _2989 = (_2988 + 4294967295u) & _2988;
                            uint _3001 = _2999 * 40u;
                            _3014 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3001)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3001 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3001 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3001 + 3u)).x));
                            _3015 = _3014.w;
                            uint _3017 = (_2999 * 40u) + 4u;
                            _3030 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3017)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3017 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3017 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3017 + 3u)).x));
                            uint _3032 = (_2999 * 40u) + 8u;
                            _3042 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3032)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 2u)).x));
                            uint _3045 = (_2999 * 40u) + 16u;
                            _3058 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3045)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 3u)).x));
                            uint _3061 = (_2999 * 40u) + 20u;
                            _3074 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3061)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3061 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3061 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3061 + 3u)).x));
                            uint _3077 = (_2999 * 40u) + 24u;
                            vec4 _3090 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3077)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3077 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3077 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3077 + 3u)).x));
                            uint _3096 = (_2999 * 40u) + 28u;
                            vec4 _3109 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3096)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 3u)).x));
                            _3121 = fma(_2336, _3109.z, fma(_2335, _3109.y, _3109.x * _2334)) + _3109.w;
                            _3122 = !((fma(_2336, _3090.z, fma(_2335, _3090.y, _3090.x * _2334)) + _3090.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3122)
                            {
                                float _3149 = _3014.x - _2334;
                                float _3150 = _3014.y - _2335;
                                float _3151 = _3014.z - _2336;
                                float _3152 = dot(vec3(_3149, _3150, _3151), vec3(_3149, _3150, _3151));
                                float _3155 = inversesqrt(_3152);
                                float _3156 = _3155 * _3149;
                                float _3157 = _3155 * _3150;
                                float _3158 = _3155 * _3151;
                                float _3162 = 1.0 - (_3152 / (_3015 * _3015));
                                float _4269 = isnan(0.0) ? _3162 : (isnan(_3162) ? 0.0 : max(_3162, 0.0));
                                float _3163 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
                                float _3167 = sqrt(_3152) * _3030.w;
                                float _3169 = 1.39999997615814208984375 / (_3167 + 1.39999997615814208984375);
                                float _3170 = _3169 * _3169;
                                float _3173 = ((1.0 - _3170) * dot(vec3(_3156, _3157, _3158), vec3(_539, _542, _545))) + _3170;
                                float _3176 = _3167 * _3167;
                                float _3180 = (fma(_2336, _3058.z, fma(_2335, _3058.y, _3058.x * _2334)) + _3058.w) / _3121;
                                float _3181 = (fma(_2336, _3074.z, fma(_2335, _3074.y, _3074.x * _2334)) + _3074.w) / _3121;
                                float _3185 = 1.0 - dot(vec2(_3180, _3181), vec2(_3180, _3181));
                                float _4285 = isnan(0.0) ? _3185 : (isnan(_3185) ? 0.0 : max(_3185, 0.0));
                                float _3186 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
                                float _3187 = _3186 * (((isnan(0.0) ? _3173 : (isnan(_3173) ? 0.0 : max(_3173, 0.0))) * _3163) / ((_3176 * 0.699999988079071044921875) + 1.0));
                                float _3199 = exp2(log2(1.0 / ((_3176 * 3.5) + 5.0)) * 0.25);
                                float _3200 = 1.0 - _614;
                                float _3207 = sqrt(1.0 - ((1.0 - (_3200 * _3200)) * (1.0 - (_3199 * _3199))));
                                float _3208 = _3207 * _3207;
                                float _3209 = _3208 * _3208;
                                float _3210 = _3156 - _2626;
                                float _3211 = _3157 - _2627;
                                float _3212 = _3158 - _2628;
                                float _3216 = inversesqrt(dot(vec3(_3210, _3211, _3212), vec3(_3210, _3211, _3212)));
                                float _3220 = dot(vec3(_539, _542, _545), vec3((-0.0) - _2626, (-0.0) - _2627, (-0.0) - _2628));
                                float _4296 = isnan(0.0) ? _3220 : (isnan(_3220) ? 0.0 : max(_3220, 0.0));
                                float _3223 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
                                float _3224 = dot(vec3(_539, _542, _545), vec3(_3216 * _3210, _3216 * _3211, _3216 * _3212));
                                float _4307 = isnan(0.0) ? _3224 : (isnan(_3224) ? 0.0 : max(_3224, 0.0));
                                float _3227 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
                                float _3231 = ((_3227 * _3227) * (_3209 + (-1.0))) + 1.0;
                                float _3232 = _3169 * _3208;
                                float _3233 = _3232 * _3232;
                                float _3239 = ((1.0 - _3233) * dot(vec3(_539, _542, _545), vec3(_3156, _3157, _3158))) + _3233;
                                float _4318 = isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : max(_3239, 0.0));
                                float _3240 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
                                float _3241 = 1.0 - _3208;
                                float _3251 = (0.5 / (((_3240 * ((_3223 * _3241) + _3208)) + 9.9999999392252902907785028219223e-09) + (((_3240 * _3241) + _3208) * _3223))) * _3240;
                                float _4329 = isnan(0.0) ? _3251 : (isnan(_3251) ? 0.0 : max(_3251, 0.0));
                                float _3261 = (_3186 * _3163) * (((_3209 * 3.1415927410125732421875) * (isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0)))) / ((_3231 * _3231) * ((_3176 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3187 * _3030.z;
                                frontier_phi_85_pred_1 = _3187 * _3030.y;
                                frontier_phi_85_pred_2 = _3187 * _3030.x;
                                frontier_phi_85_pred_3 = _3261 * _3042.z;
                                frontier_phi_85_pred_4 = _3261 * _3042.y;
                                frontier_phi_85_pred_5 = _3261 * _3042.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3270 = frontier_phi_85_pred;
                            _3269 = frontier_phi_85_pred_1;
                            _3268 = frontier_phi_85_pred_2;
                            _3267 = frontier_phi_85_pred_3;
                            _3266 = frontier_phi_85_pred_4;
                            _3265 = frontier_phi_85_pred_5;
                            _2972 = _3268 + _2985;
                            _2973 = _3269 + _2986;
                            _2974 = _3270 + _2987;
                            _2969 = _3265 + _2982;
                            _2970 = _3266 + _2983;
                            _2971 = _3267 + _2984;
                            if (_2989 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2982 = _2969;
                                _2983 = _2970;
                                _2984 = _2971;
                                _2985 = _2972;
                                _2986 = _2973;
                                _2987 = _2974;
                                _2988 = _2989;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2974;
                        frontier_phi_79_pred_1 = _2973;
                        frontier_phi_79_pred_2 = _2972;
                        frontier_phi_79_pred_3 = _2971;
                        frontier_phi_79_pred_4 = _2970;
                        frontier_phi_79_pred_5 = _2969;
                    }
                    _2611 = frontier_phi_79_pred;
                    _2609 = frontier_phi_79_pred_1;
                    _2607 = frontier_phi_79_pred_2;
                    _2605 = frontier_phi_79_pred_3;
                    _2603 = frontier_phi_79_pred_4;
                    _2601 = frontier_phi_79_pred_5;
                    uint _2767 = _2766 + 1u;
                    if (_2767 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2760 = _2601;
                        _2761 = _2603;
                        _2762 = _2605;
                        _2763 = _2607;
                        _2764 = _2609;
                        _2765 = _2611;
                        _2766 = _2767;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2607;
                frontier_phi_60_61_ladder_1 = _2611;
                frontier_phi_60_61_ladder_2 = _2609;
                frontier_phi_60_61_ladder_3 = _2605;
                frontier_phi_60_61_ladder_4 = _2603;
                frontier_phi_60_61_ladder_5 = _2601;
            }
            else
            {
                frontier_phi_60_61_ladder = _2486;
                frontier_phi_60_61_ladder_1 = _2490;
                frontier_phi_60_61_ladder_2 = _2488;
                frontier_phi_60_61_ladder_3 = _2484;
                frontier_phi_60_61_ladder_4 = _2482;
                frontier_phi_60_61_ladder_5 = _2480;
            }
            _2600 = frontier_phi_60_61_ladder_5;
            _2602 = frontier_phi_60_61_ladder_4;
            _2604 = frontier_phi_60_61_ladder_3;
            _2606 = frontier_phi_60_61_ladder;
            _2608 = frontier_phi_60_61_ladder_2;
            _2610 = frontier_phi_60_61_ladder_1;
        }
        float _2615 = isnan(1.0) ? _598 : (isnan(_598) ? 1.0 : min(_598, 1.0));
        _2392 = (_2615 * _2606) + _1826;
        _2394 = (_2615 * _2608) + _1828;
        _2396 = (_2615 * _2610) + _1830;
        _2398 = ((_2600 * _583) * _2615) + _2174;
        _2400 = ((_2602 * _585) * _2615) + _2176;
        _2402 = ((_2604 * _586) * _2615) + _2178;
    }
    else
    {
        _2392 = _1826;
        _2394 = _1828;
        _2396 = _1830;
        _2398 = _2174;
        _2400 = _2176;
        _2402 = _2178;
    }
    float _4345 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _4356 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _4367 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _2419 = ((isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0))) * (_2392 + ((isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0))) * _598))) + ((_2398 + ((isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0))) * _1440)) * cbPerFrame._m0[3u].x);
    float _2420 = ((isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0))) * (_2394 + ((isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0))) * _598))) + ((_2400 + ((isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0))) * _1440)) * cbPerFrame._m0[3u].x);
    float _2421 = ((isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0))) * (_2396 + ((isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0))) * _598))) + ((_2402 + ((isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0))) * _1440)) * cbPerFrame._m0[3u].x);
    uint _2422 = _558 + 6u;
    float _2430 = _518 / cbSceneParam._m0[86u].x;
    float _2431 = _519 / cbSceneParam._m0[86u].y;
    vec4 _2445 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2430, _2431, (log2((isnan(cbSceneParam._m0[77u].w) ? _438 : (isnan(_438) ? cbSceneParam._m0[77u].w : min(_438, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2447 = _2445.x;
    float _2448 = _2445.y;
    float _2449 = _2445.z;
    float _2450 = _2445.w;
    float _2542;
    float _2544;
    float _2546;
    float _2548;
    if (_438 > cbSceneParam._m0[78u].w)
    {
        float _2505 = isnan(_438) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _438 : min(cbSceneParam._m0[80u].w, _438));
        float _2506 = _2505 / _438;
        float _2517 = _2506 * _490;
        float _2518 = _491 * _2506;
        float _2519 = (-0.0) - _2518;
        float _2520 = _2506 * _492;
        float _2522 = (cbSceneParam._m0[77u].w * _2519) / _2505;
        float _2523 = _2522 + cbSceneParam._m0[79u].w;
        float _2524 = cbSceneParam._m0[79u].w - _2518;
        float _2530 = sqrt(((_2517 * _2517) + (_2518 * _2518)) + (_2520 * _2520));
        float _2533 = (1.0 - (cbSceneParam._m0[77u].w / _2505)) * _2530;
        float _2538 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2540 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2717;
        if (abs((_2519 - _2522) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2717 = ((((_2523 > 0.0) ? exp2(_2538 * _2523) : (2.0 - exp2(_2540 * _2523))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2533;
        }
        else
        {
            float _2661 = 1.0 / cbSceneParam._m0[80u].x;
            float _2662 = isnan(_2524) ? _2523 : (isnan(_2523) ? _2524 : max(_2523, _2524));
            float _2663 = isnan(_2524) ? _2523 : (isnan(_2523) ? _2524 : min(_2523, _2524));
            float _2672 = isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : min(_2662, 0.0));
            float _2673 = isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : min(_2663, 0.0));
            _2717 = ((abs(_2530 / _2519) * cbSceneParam._m0[80u].y) * ((((_2672 - _2673) * 2.0) - ((exp2(_2538 * (isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0)))) - exp2(_2538 * (isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : max(_2663, 0.0))))) * _2661)) - ((exp2(_2540 * _2672) - exp2(_2540 * _2673)) * _2661))) + (_2533 * cbSceneParam._m0[80u].z);
        }
        vec4 _2719 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2430, _2431, 1.0), 0.0);
        float _2728 = exp2((_2717 * (-1.44269502162933349609375)) * (1.0 - _2719.w));
        float _2729 = log2(_2728);
        float _2745 = log2(_2450);
        _2542 = (exp2(_2745 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2729 * cbSceneParam._m0[78u].x)) * _2719.x) / cbSceneParam._m0[78u].x)) + _2447;
        _2544 = (exp2(_2745 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2729 * cbSceneParam._m0[78u].y)) * _2719.y) / cbSceneParam._m0[78u].y)) + _2448;
        _2546 = (exp2(_2745 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2729 * cbSceneParam._m0[78u].z)) * _2719.z) / cbSceneParam._m0[78u].z)) + _2449;
        _2548 = _2728 * _2450;
    }
    else
    {
        _2542 = _2447;
        _2544 = _2448;
        _2546 = _2449;
        _2548 = _2450;
    }
    bool _2755;
    vec4 _2558;
    vec4 _2580;
    float _2582;
    float _2586;
    float _2587;
    float _2588;
    float _2589;
    bool _2599;
    for (;;)
    {
        _2558 = cbMatDynParam._m0[0u];
        float _2560 = roundEven(_2558.y);
        bool _2561 = _2560 == 3.0;
        float _2562 = log2(_2548);
        float _2569 = exp2(_2562 * cbSceneParam._m0[78u].x) * _2419;
        float _2570 = exp2(_2562 * cbSceneParam._m0[78u].y) * _2420;
        float _2571 = exp2(_2562 * cbSceneParam._m0[78u].z) * _2421;
        float _2578 = _506 + (-0.5);
        _2580 = cbMtdParam._m0[1u];
        _2582 = _2580.y * _2578;
        float _2585 = (_2560 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2586 = _2585 * (_2561 ? _2569 : (_2569 + (cbSceneParam._m0[72u].w * _2542)));
        _2587 = _2585 * (_2561 ? _2570 : (_2570 + (cbSceneParam._m0[72u].w * _2544)));
        _2588 = _2585 * (_2561 ? _2571 : (_2571 + (cbSceneParam._m0[72u].w * _2546)));
        _2589 = _2578 * 0.999000012874603271484375;
        _2599 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2599)
        {
            if ((cbInstanceData._m0[_558 + 7u].x + _2589) < 0.5)
            {
                _2755 = true;
                break;
            }
        }
        uint _2696 = _559 + uint(_2558.w);
        if ((cbInstanceData._m0[_2696].w < 1.0) && ((cbInstanceData._m0[_2696].w + _2589) < 0.5))
        {
            _2755 = true;
            break;
        }
        if ((_2582 + _252) < _2580.x)
        {
            _2755 = true;
            break;
        }
        _2755 = false;
        break;
    }
    float _2960;
    if (_2755)
    {
        discard_state = true;
        _2960 = 0.0;
    }
    else
    {
        _2960 = cbInstanceData._m0[_2422].w;
    }
    SV_Target.x = _2586;
    SV_Target.y = _2587;
    SV_Target.z = _2588;
    SV_Target.w = _2960;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2422].w;
    discard_exit();
}


