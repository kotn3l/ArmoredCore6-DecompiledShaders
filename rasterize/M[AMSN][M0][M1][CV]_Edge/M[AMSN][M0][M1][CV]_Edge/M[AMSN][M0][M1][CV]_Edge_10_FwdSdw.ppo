#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _923;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _194 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _201 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _202 = _201 * NORMAL.x;
    float _203 = _201 * NORMAL.y;
    float _204 = _201 * NORMAL.z;
    float _208 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _216;
    float _217;
    float _218;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _216 = (-0.0) - _202;
        _217 = (-0.0) - _203;
        _218 = (-0.0) - _204;
    }
    else
    {
        _216 = _202;
        _217 = _203;
        _218 = _204;
    }
    vec4 _244 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _250 = _244.x * cbMtdParam._m0[9u].x;
    float _251 = _244.y * cbMtdParam._m0[9u].y;
    float _252 = _244.z * cbMtdParam._m0[9u].z;
    vec4 _264 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _268 = _264.z;
    float _272 = (_264.x * 2.0) + (-1.0);
    float _274 = (_264.y * 2.0) + (-1.0);
    float _275 = dot(vec2(_272, _274), vec2(_272, _274));
    float _3541 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    float _281 = sqrt(1.0 - (isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0))));
    float _293 = (TEXCOORD_3.x - (((1.0 - TEXCOORD_3.x) * 0.00999999977648258209228515625) * cbMtdParam._m0[12u].y)) * (cbMtdParam._m0[12u].z + 1.0);
    float _3552 = isnan(0.0) ? _293 : (isnan(_293) ? 0.0 : max(_293, 0.0));
    float _294 = isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0));
    float _301 = (_294 * (cbMtdParam._m0[10u].x - _250)) + _250;
    float _302 = (_294 * (cbMtdParam._m0[10u].y - _251)) + _251;
    float _303 = (_294 * (cbMtdParam._m0[10u].z - _252)) + _252;
    vec4 _315 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _317 = _315.x;
    float _319 = _317 - (_317 * _294);
    vec4 _331 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _338 = (_331.x * 2.0) + (-1.0);
    float _339 = (_331.y * 2.0) + (-1.0);
    float _340 = dot(vec2(_338, _339), vec2(_338, _339));
    float _3563 = isnan(0.0) ? _340 : (isnan(_340) ? 0.0 : max(_340, 0.0));
    float _348 = (_294 * (_331.z - _268)) + _268;
    float _360 = (((_338 - _272) + (cbMtdParam._m0[12u].w * _272)) * _294) + _272;
    float _361 = (((_339 - _274) + (cbMtdParam._m0[12u].w * _274)) * _294) + _274;
    float _362 = (_294 * (sqrt(1.0 - (isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0)))) - _281)) + _281;
    float _365 = fma(_362, _216, fma(_361, _208 * TANGENT.x, (_194 * _186) * _360));
    float _368 = fma(_362, _217, fma(_361, _208 * TANGENT.y, (_194 * _187) * _360));
    float _371 = fma(_362, _218, fma(_361, _208 * TANGENT.z, (_194 * _188) * _360));
    float _375 = inversesqrt(dot(vec3(_365, _368, _371), vec3(_365, _368, _371)));
    float _376 = _375 * _365;
    float _377 = _375 * _368;
    float _378 = _375 * _371;
    float _3574 = isnan(0.0) ? _348 : (isnan(_348) ? 0.0 : max(_348, 0.0));
    float _379 = isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0));
    float _3585 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _3596 = isnan(0.0) ? _302 : (isnan(_302) ? 0.0 : max(_302, 0.0));
    float _3607 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _3618 = isnan(0.0) ? _319 : (isnan(_319) ? 0.0 : max(_319, 0.0));
    float _383 = isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0));
    float _399 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _441 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _451 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _441);
    float _452 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _441);
    float _453 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _441);
    float _457 = inversesqrt(dot(vec3(_451, _452, _453), vec3(_451, _452, _453)));
    float _458 = _451 * _457;
    float _459 = _452 * _457;
    float _460 = _453 * _457;
    float _466 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _467 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _488 = fma(_378, cbSceneParam._m0[5u].z, fma(_377, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _376));
    float _491 = fma(_378, cbSceneParam._m0[6u].z, fma(_377, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _376));
    float _494 = fma(_378, cbSceneParam._m0[7u].z, fma(_377, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _376));
    uint _507 = uint(roundEven(NORMAL.w)) * 13u;
    uint _510 = (_507 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _516 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0)))) * cbInstanceData._m0[_510].x;
    float _517 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0)))) * cbInstanceData._m0[_510].y;
    float _518 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0)))) * cbInstanceData._m0[_510].z;
    float _3629 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _519 = isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0));
    float _3640 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _520 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
    float _3651 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _521 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
    float _522 = 1.0 - _383;
    float _523 = _519 * _522;
    float _524 = _520 * _522;
    float _525 = _521 * _522;
    float _530 = (_519 + (-0.039999999105930328369140625)) * _383;
    float _531 = (_520 + (-0.039999999105930328369140625)) * _383;
    float _532 = (_521 + (-0.039999999105930328369140625)) * _383;
    float _533 = _530 + 0.039999999105930328369140625;
    float _535 = _531 + 0.039999999105930328369140625;
    float _536 = _532 + 0.039999999105930328369140625;
    vec4 _545 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _466, cbSceneParam._m0[86u].y * _467));
    float _548 = _545.x * TEXCOORD_3.w;
    float _549 = dot(vec3(_376, _377, _378), vec3(_458, _459, _460));
    float _552 = _549 * 2.0;
    float _556 = (_552 * _376) - _458;
    float _557 = (_552 * _377) - _459;
    float _558 = (_552 * _378) - _460;
    float _562 = abs(dot(vec3(_458, _459, _460), vec3(_376, _377, _378)));
    float _3662 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _564 = sqrt(_379);
    float _577 = exp2((_564 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_564 * 3.0));
    float _583 = (1.0 - _577) * ((_564 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _584 = _577 * _564;
    float _612 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _616 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _620 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _922;
    float _924;
    float _925;
    float _926;
    float _927;
    float _928;
    float _929;
    float _930;
    float _931;
    float _932;
    float _933;
    float _934;
    float _935;
    float _936;
    float _937;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _647 = fma(_620, cbModelParam._m0[26u].z, fma(_616, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _612));
        float _651 = fma(_620, cbModelParam._m0[27u].z, fma(_616, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _612));
        float _655 = fma(_620, cbModelParam._m0[28u].z, fma(_616, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _612));
        float _680 = _612 + _376;
        float _681 = _616 + _377;
        float _682 = _620 + _378;
        float _692 = fma(_682, cbModelParam._m0[26u].z, fma(_681, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _680)) - _647;
        float _693 = fma(_682, cbModelParam._m0[27u].z, fma(_681, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _680)) - _651;
        float _694 = fma(_682, cbModelParam._m0[28u].z, fma(_681, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _680)) - _655;
        float _698 = inversesqrt(dot(vec3(_692, _693, _694), vec3(_692, _693, _694)));
        float _711 = ((_698 * _692) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_647 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _712 = ((_698 * _693) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_651 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _713 = ((_698 * _694) / cbModelParam._m0[34u].z) + ((((((_655 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _716 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_711, _712, _713), 0.0);
        vec4 _723 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_711, _712, _713), 0.0);
        vec4 _730 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_711, _712, _713), 0.0);
        vec4 _737 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_711, _712, _713), 0.0);
        float _750 = exp2((_716.w + (-0.5)) * 20.0) * 2.0;
        float _751 = _750 * (_716.x + (-0.5));
        float _752 = _750 * (_716.y + (-0.5));
        float _753 = _750 * (_716.z + (-0.5));
        float _760 = exp2((_723.w + (-0.5)) * 20.0) * 2.0;
        float _761 = _760 * (_723.x + (-0.5));
        float _762 = _760 * (_723.y + (-0.5));
        float _763 = _760 * (_723.z + (-0.5));
        float _770 = exp2((_730.w + (-0.5)) * 20.0) * 2.0;
        float _771 = _770 * (_730.x + (-0.5));
        float _772 = _770 * (_730.y + (-0.5));
        float _773 = _770 * (_730.z + (-0.5));
        float _780 = exp2((_737.w + (-0.5)) * 20.0) * 2.0;
        float _781 = _780 * (_737.x + (-0.5));
        float _782 = _780 * (_737.y + (-0.5));
        float _783 = _780 * (_737.z + (-0.5));
        float _784 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
        float _785 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
        float _786 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
        float _787 = _751 * 0.5;
        float _788 = _761 * 0.5;
        float _789 = _771 * 0.5;
        float _790 = dot(vec3(_787, _788, _789), vec3(_787, _788, _789));
        float _795 = (_790 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_790);
        float _804 = (dot(vec3(_376, _377, _378), vec3(_795 * _787, _795 * _788, _795 * _789)) + 1.0) * 0.5;
        float _3688 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
        float _814 = sqrt(((_788 * _788) + (_787 * _787)) + (_789 * _789)) / (_784 + 9.9999997473787516355514526367188e-06);
        float _3699 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
        float _815 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
        float _816 = _815 * 2.0;
        float _820 = (1.0 - _815) / (_815 + 1.0);
        float _3710 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
        float _821 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
        float _830 = ((((1.0 - _821) * (_816 + 2.0)) * exp2(log2(isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0))) * (_816 + 1.0))) + _821) * _784;
        float _831 = _752 * 0.5;
        float _832 = _762 * 0.5;
        float _833 = _772 * 0.5;
        float _834 = dot(vec3(_831, _832, _833), vec3(_831, _832, _833));
        float _839 = (_834 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_834);
        float _847 = (dot(vec3(_376, _377, _378), vec3(_839 * _831, _839 * _832, _839 * _833)) + 1.0) * 0.5;
        float _3721 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
        float _856 = sqrt(((_832 * _832) + (_831 * _831)) + (_833 * _833)) / (_785 + 9.9999997473787516355514526367188e-06);
        float _3732 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
        float _857 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
        float _858 = _857 * 2.0;
        float _862 = (1.0 - _857) / (_857 + 1.0);
        float _3743 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
        float _863 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
        float _872 = ((((1.0 - _863) * (_858 + 2.0)) * exp2(log2(isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0))) * (_858 + 1.0))) + _863) * _785;
        float _873 = _753 * 0.5;
        float _874 = _763 * 0.5;
        float _875 = _773 * 0.5;
        float _876 = dot(vec3(_873, _874, _875), vec3(_873, _874, _875));
        float _881 = (_876 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_876);
        float _889 = (dot(vec3(_376, _377, _378), vec3(_881 * _873, _881 * _874, _881 * _875)) + 1.0) * 0.5;
        float _3754 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
        float _898 = sqrt(((_874 * _874) + (_873 * _873)) + (_875 * _875)) / (_786 + 9.9999997473787516355514526367188e-06);
        float _3765 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
        float _899 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
        float _900 = _899 * 2.0;
        float _904 = (1.0 - _899) / (_899 + 1.0);
        float _3776 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
        float _905 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
        float _914 = ((((1.0 - _905) * (_900 + 2.0)) * exp2(log2(isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0))) * (_900 + 1.0))) + _905) * _786;
        _922 = _753;
        _924 = _752;
        _925 = _751;
        _926 = _763;
        _927 = _762;
        _928 = _761;
        _929 = _773;
        _930 = _772;
        _931 = _771;
        _932 = _786;
        _933 = _785;
        _934 = _784;
        _935 = cbModelParam._m0[36u].z * (isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0)));
        _936 = cbModelParam._m0[36u].z * (isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0)));
        _937 = cbModelParam._m0[36u].z * (isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0)));
    }
    else
    {
        _922 = _923;
        _924 = _923;
        _925 = _923;
        _926 = _923;
        _927 = _923;
        _928 = _923;
        _929 = _923;
        _930 = _923;
        _931 = _923;
        _932 = _923;
        _933 = _923;
        _934 = _923;
        _935 = 0.0;
        _936 = 0.0;
        _937 = 0.0;
    }
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _963 = fma(_620, cbModelParam._m0[30u].z, fma(_616, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _612));
        float _967 = fma(_620, cbModelParam._m0[31u].z, fma(_616, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _612));
        float _971 = fma(_620, cbModelParam._m0[32u].z, fma(_616, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _612));
        float _994 = _612 + _376;
        float _995 = _616 + _377;
        float _996 = _620 + _378;
        float _1006 = fma(_996, cbModelParam._m0[30u].z, fma(_995, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _994)) - _963;
        float _1007 = fma(_996, cbModelParam._m0[31u].z, fma(_995, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _994)) - _967;
        float _1008 = fma(_996, cbModelParam._m0[32u].z, fma(_995, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _994)) - _971;
        float _1012 = inversesqrt(dot(vec3(_1006, _1007, _1008), vec3(_1006, _1007, _1008)));
        float _1025 = ((_1012 * _1006) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_963 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1026 = ((_1012 * _1007) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_967 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1027 = ((_1012 * _1008) / cbModelParam._m0[35u].z) + ((((((_971 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1029 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1025, _1026, _1027), 0.0);
        vec4 _1036 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1025, _1026, _1027), 0.0);
        vec4 _1043 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1025, _1026, _1027), 0.0);
        vec4 _1050 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1025, _1026, _1027), 0.0);
        float _1062 = exp2((_1029.w + (-0.5)) * 20.0) * 2.0;
        float _1063 = _1062 * (_1029.x + (-0.5));
        float _1064 = _1062 * (_1029.y + (-0.5));
        float _1065 = _1062 * (_1029.z + (-0.5));
        float _1072 = exp2((_1036.w + (-0.5)) * 20.0) * 2.0;
        float _1073 = _1072 * (_1036.x + (-0.5));
        float _1074 = _1072 * (_1036.y + (-0.5));
        float _1075 = _1072 * (_1036.z + (-0.5));
        float _1082 = exp2((_1043.w + (-0.5)) * 20.0) * 2.0;
        float _1083 = _1082 * (_1043.x + (-0.5));
        float _1084 = _1082 * (_1043.y + (-0.5));
        float _1085 = _1082 * (_1043.z + (-0.5));
        float _1092 = exp2((_1050.w + (-0.5)) * 20.0) * 2.0;
        float _1093 = _1092 * (_1050.x + (-0.5));
        float _1094 = _1092 * (_1050.y + (-0.5));
        float _1095 = _1092 * (_1050.z + (-0.5));
        float _1096 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1097 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1098 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1099 = _1063 * 0.5;
        float _1100 = _1073 * 0.5;
        float _1101 = _1083 * 0.5;
        float _1102 = dot(vec3(_1099, _1100, _1101), vec3(_1099, _1100, _1101));
        float _1107 = (_1102 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1102);
        float _1115 = (dot(vec3(_376, _377, _378), vec3(_1107 * _1099, _1107 * _1100, _1107 * _1101)) + 1.0) * 0.5;
        float _3817 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1124 = sqrt(((_1100 * _1100) + (_1099 * _1099)) + (_1101 * _1101)) / (_1096 + 9.9999997473787516355514526367188e-06);
        float _3828 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1125 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
        float _1126 = _1125 * 2.0;
        float _1130 = (1.0 - _1125) / (_1125 + 1.0);
        float _3839 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1131 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
        float _1140 = ((((1.0 - _1131) * (_1126 + 2.0)) * exp2(log2(isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0))) * (_1126 + 1.0))) + _1131) * _1096;
        float _1141 = _1064 * 0.5;
        float _1142 = _1074 * 0.5;
        float _1143 = _1084 * 0.5;
        float _1144 = dot(vec3(_1141, _1142, _1143), vec3(_1141, _1142, _1143));
        float _1149 = (_1144 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1144);
        float _1157 = (dot(vec3(_376, _377, _378), vec3(_1149 * _1141, _1149 * _1142, _1149 * _1143)) + 1.0) * 0.5;
        float _3850 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1166 = sqrt(((_1142 * _1142) + (_1141 * _1141)) + (_1143 * _1143)) / (_1097 + 9.9999997473787516355514526367188e-06);
        float _3861 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1167 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
        float _1168 = _1167 * 2.0;
        float _1172 = (1.0 - _1167) / (_1167 + 1.0);
        float _3872 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1173 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
        float _1182 = ((((1.0 - _1173) * (_1168 + 2.0)) * exp2(log2(isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0))) * (_1168 + 1.0))) + _1173) * _1097;
        float _1183 = _1065 * 0.5;
        float _1184 = _1075 * 0.5;
        float _1185 = _1085 * 0.5;
        float _1186 = dot(vec3(_1183, _1184, _1185), vec3(_1183, _1184, _1185));
        float _1191 = (_1186 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1186);
        float _1199 = (dot(vec3(_376, _377, _378), vec3(_1191 * _1183, _1191 * _1184, _1191 * _1185)) + 1.0) * 0.5;
        float _3883 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1208 = sqrt(((_1184 * _1184) + (_1183 * _1183)) + (_1185 * _1185)) / (_1098 + 9.9999997473787516355514526367188e-06);
        float _3894 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1209 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
        float _1210 = _1209 * 2.0;
        float _1214 = (1.0 - _1209) / (_1209 + 1.0);
        float _3905 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1215 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _1224 = ((((1.0 - _1215) * (_1210 + 2.0)) * exp2(log2(isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0))) * (_1210 + 1.0))) + _1215) * _1098;
        _1232 = _1065;
        _1233 = _1064;
        _1234 = _1063;
        _1235 = _1075;
        _1236 = _1074;
        _1237 = _1073;
        _1238 = _1085;
        _1239 = _1084;
        _1240 = _1083;
        _1241 = _1098;
        _1242 = _1097;
        _1243 = _1096;
        _1244 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0)));
        _1245 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0)));
        _1246 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0)));
    }
    else
    {
        _1232 = _923;
        _1233 = _923;
        _1234 = _923;
        _1235 = _923;
        _1236 = _923;
        _1237 = _923;
        _1238 = _923;
        _1239 = _923;
        _1240 = _923;
        _1241 = _923;
        _1242 = _923;
        _1243 = _923;
        _1244 = 0.0;
        _1245 = 0.0;
        _1246 = 0.0;
    }
    float _1256 = (cbModelParam._m0[1u].x * (_1244 - _935)) + _935;
    float _1257 = (cbModelParam._m0[1u].x * (_1245 - _936)) + _936;
    float _1258 = (cbModelParam._m0[1u].x * (_1246 - _937)) + _937;
    float _1279 = fma(_1258, cbSceneParam._m0[89u].z, fma(_1257, cbSceneParam._m0[89u].y, _1256 * cbSceneParam._m0[89u].x));
    float _1282 = fma(_1258, cbSceneParam._m0[90u].z, fma(_1257, cbSceneParam._m0[90u].y, _1256 * cbSceneParam._m0[90u].x));
    float _1285 = fma(_1258, cbSceneParam._m0[91u].z, fma(_1257, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1256));
    float _1300 = _556 * 0.5;
    float _1301 = _557 * 0.5;
    float _1302 = _558 * 0.5;
    float _1303 = dot(vec4(_1300, _1301, _1302, 1.0), vec4(_1234, _1237, _1240, _1243));
    float _1306 = dot(vec4(_1300, _1301, _1302, 1.0), vec4(_1233, _1236, _1239, _1242));
    float _1309 = dot(vec4(_1300, _1301, _1302, 1.0), vec4(_1232, _1235, _1238, _1241));
    float _1343;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1316 = dot(vec4(_1300, _1301, _1302, 1.0), vec4(_922, _926, _929, _932));
        float _1320 = dot(vec4(_1300, _1301, _1302, 1.0), vec4(_924, _927, _930, _933));
        float _1324 = dot(vec4(_1300, _1301, _1302, 1.0), vec4(_925, _928, _931, _934));
        float _1331 = dot(vec4(cbModelParam._m0[39u]), vec4(_1300, _1301, _1302, 1.0));
        _1343 = dot(vec3(isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0)), isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0)), isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1331) ? 0.0 : (isnan(0.0) ? _1331 : max(0.0, _1331))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1343 = 1.0;
    }
    float _1354;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1345 = dot(vec4(cbModelParam._m0[40u]), vec4(_1300, _1301, _1302, 1.0));
        _1354 = dot(vec3(isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0)), isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0)), isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1345) ? 0.0 : (isnan(0.0) ? _1345 : max(0.0, _1345))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1354 = 1.0;
    }
    float _1358 = (_1354 * cbModelParam._m0[1u].x) + (_1343 * (1.0 - cbModelParam._m0[1u].x));
    float _1368 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _379);
    float _1369 = isnan(_1368) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1368 : min(cbModelParam._m0[25u].z, _1368));
    float _1450;
    float _1452;
    float _1454;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1417 = fma(_620, cbModelParam._m0[13u].z, fma(_616, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _612)) + cbModelParam._m0[13u].w;
        float _1421 = fma(_620, cbModelParam._m0[14u].z, fma(_616, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _612)) + cbModelParam._m0[14u].w;
        float _1425 = fma(_620, cbModelParam._m0[15u].z, fma(_616, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _612)) + cbModelParam._m0[15u].w;
        float _1428 = fma(_558, cbModelParam._m0[13u].z, fma(_557, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _556));
        float _1431 = fma(_558, cbModelParam._m0[14u].z, fma(_557, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _556));
        float _1434 = fma(_558, cbModelParam._m0[15u].z, fma(_557, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _556));
        float _1462;
        if (_1428 > 0.0)
        {
            _1462 = abs((1.0 - _1417) / _1428);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1428 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1417 + 1.0) / _1428);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1462 = frontier_phi_16_14_ladder;
        }
        float _1637;
        if (_1431 > 0.0)
        {
            _1637 = abs((1.0 - _1421) / _1431);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1431 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1421 + 1.0) / _1431);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1637 = frontier_phi_25_21_ladder;
        }
        float _1933;
        if (_1434 > 0.0)
        {
            _1933 = abs((1.0 - _1425) / _1434);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1434 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1425 + 1.0) / _1434);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1933 = frontier_phi_37_32_ladder;
        }
        float _1935 = isnan(_1637) ? _1462 : (isnan(_1462) ? _1637 : min(_1462, _1637));
        float _1936 = isnan(_1933) ? _1935 : (isnan(_1935) ? _1933 : min(_1935, _1933));
        float _1940 = (_1936 * _1428) + _1417;
        float _1941 = (_1936 * _1431) + _1421;
        float _1942 = (_1936 * _1434) + _1425;
        float _1943 = _1936 * 9.9999997473787516355514526367188e-05;
        float _1945 = (-1.0) - _1943;
        float _1947 = _1943 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1942 > _1947) || ((_1942 < _1945) || ((_1941 > _1947) || ((_1941 < _1945) || ((_1940 < _1945) || (_1940 > _1947))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2087 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1942, cbModelParam._m0[9u].z, fma(_1941, cbModelParam._m0[9u].y, _1940 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1942, cbModelParam._m0[10u].z, fma(_1941, cbModelParam._m0[10u].y, _1940 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1942, cbModelParam._m0[11u].z, fma(_1941, cbModelParam._m0[11u].y, _1940 * cbModelParam._m0[11u].x))), _1369);
            frontier_phi_15_37_ladder = _2087.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2087.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2087.z * cbModelParam._m0[1u].y;
        }
        _1450 = frontier_phi_15_37_ladder_1;
        _1452 = frontier_phi_15_37_ladder;
        _1454 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1438 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_556, _557, _558), _1369);
        _1450 = _1438.x * cbModelParam._m0[1u].y;
        _1452 = _1438.y * cbModelParam._m0[1u].y;
        _1454 = _1438.z * cbModelParam._m0[1u].y;
    }
    float _1458 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _379);
    float _1459 = isnan(_1458) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1458 : min(cbModelParam._m0[25u].w, _1458));
    float _1552;
    float _1554;
    float _1556;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1516 = fma(_620, cbModelParam._m0[21u].z, fma(_616, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _612)) + cbModelParam._m0[21u].w;
        float _1520 = fma(_620, cbModelParam._m0[22u].z, fma(_616, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _612)) + cbModelParam._m0[22u].w;
        float _1524 = fma(_620, cbModelParam._m0[23u].z, fma(_616, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _612)) + cbModelParam._m0[23u].w;
        float _1527 = fma(_558, cbModelParam._m0[21u].z, fma(_557, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _556));
        float _1530 = fma(_558, cbModelParam._m0[22u].z, fma(_557, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _556));
        float _1533 = fma(_558, cbModelParam._m0[23u].z, fma(_557, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _556));
        float _1642;
        if (_1527 > 0.0)
        {
            _1642 = abs((1.0 - _1516) / _1527);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1527 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1516 + 1.0) / _1527);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1642 = frontier_phi_27_23_ladder;
        }
        float _1960;
        if (_1530 > 0.0)
        {
            _1960 = abs((1.0 - _1520) / _1530);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1530 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1520 + 1.0) / _1530);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1960 = frontier_phi_39_34_ladder;
        }
        float _2298;
        if (_1533 > 0.0)
        {
            _2298 = abs((1.0 - _1524) / _1533);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1533 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1524 + 1.0) / _1533);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2298 = frontier_phi_49_46_ladder;
        }
        float _2300 = isnan(_1960) ? _1642 : (isnan(_1642) ? _1960 : min(_1642, _1960));
        float _2301 = isnan(_2298) ? _2300 : (isnan(_2300) ? _2298 : min(_2300, _2298));
        float _2305 = (_2301 * _1527) + _1516;
        float _2306 = (_2301 * _1530) + _1520;
        float _2307 = (_2301 * _1533) + _1524;
        float _2308 = _2301 * 9.9999997473787516355514526367188e-05;
        float _2309 = (-1.0) - _2308;
        float _2311 = _2308 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2307 > _2311) || ((_2307 < _2309) || ((_2306 > _2311) || ((_2306 < _2309) || ((_2305 < _2309) || (_2305 > _2311))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2429 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2307, cbModelParam._m0[17u].z, fma(_2306, cbModelParam._m0[17u].y, _2305 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2307, cbModelParam._m0[18u].z, fma(_2306, cbModelParam._m0[18u].y, _2305 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2307, cbModelParam._m0[19u].z, fma(_2306, cbModelParam._m0[19u].y, _2305 * cbModelParam._m0[19u].x))), _1459);
            frontier_phi_24_49_ladder = _2429.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2429.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2429.x * cbModelParam._m0[1u].z;
        }
        _1552 = frontier_phi_24_49_ladder_2;
        _1554 = frontier_phi_24_49_ladder_1;
        _1556 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1536 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_556, _557, _558), _1459);
        _1552 = _1536.x * cbModelParam._m0[1u].z;
        _1554 = _1536.y * cbModelParam._m0[1u].z;
        _1556 = _1536.z * cbModelParam._m0[1u].z;
    }
    float _1569 = (((_583 * _533) + _584) * _548) * ((cbModelParam._m0[1u].w * (_1552 - _1450)) + _1450);
    float _1571 = (((_583 * _535) + _584) * _548) * ((cbModelParam._m0[1u].w * (_1554 - _1452)) + _1452);
    float _1573 = (((_583 * _536) + _584) * _548) * ((cbModelParam._m0[1u].w * (_1556 - _1454)) + _1454);
    float _1576 = fma(_1573, cbSceneParam._m0[89u].z, fma(_1571, cbSceneParam._m0[89u].y, _1569 * cbSceneParam._m0[89u].x));
    float _1579 = fma(_1573, cbSceneParam._m0[90u].z, fma(_1571, cbSceneParam._m0[90u].y, _1569 * cbSceneParam._m0[90u].x));
    float _1582 = fma(_1573, cbSceneParam._m0[91u].z, fma(_1571, cbSceneParam._m0[91u].y, _1569 * cbSceneParam._m0[91u].x));
    float _1616 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1620 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1624 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1628 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1629 = _1616 / _1628;
    float _1630 = _1620 / _1628;
    float _1631 = _1624 / _1628;
    float _1778;
    float _1779;
    float _1780;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1658 = ((uint(_1631 > cbSceneParam._m0[59u].y) + uint(_1631 > cbSceneParam._m0[59u].x)) + uint(_1631 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1659 = _1658 + 43u;
        uint _1667 = _1658 + 44u;
        uint _1675 = _1658 + 45u;
        uint _1683 = _1658 + 46u;
        float _1694 = fma(_1628, cbSceneParam._m0[_1659].w, fma(_1624, cbSceneParam._m0[_1659].z, fma(_1620, cbSceneParam._m0[_1659].y, _1616 * cbSceneParam._m0[_1659].x)));
        float _1698 = fma(_1628, cbSceneParam._m0[_1667].w, fma(_1624, cbSceneParam._m0[_1667].z, fma(_1620, cbSceneParam._m0[_1667].y, _1616 * cbSceneParam._m0[_1667].x)));
        float _1706 = fma(_1628, cbSceneParam._m0[_1683].w, fma(_1624, cbSceneParam._m0[_1683].z, fma(_1620, cbSceneParam._m0[_1683].y, _1616 * cbSceneParam._m0[_1683].x)));
        float _1711 = cbSceneParam._m0[33u].z * _1706;
        float _1713 = cbSceneParam._m0[33u].w * _1706;
        float _1716 = fma(_1628, cbSceneParam._m0[_1675].w, fma(_1624, cbSceneParam._m0[_1675].z, fma(_1620, cbSceneParam._m0[_1675].y, _1616 * cbSceneParam._m0[_1675].x))) / _1706;
        float _1764 = (cbSceneParam._m0[33u].x - sqrt(((_1630 * _1630) + (_1629 * _1629)) + (_1631 * _1631))) * cbSceneParam._m0[33u].y;
        float _4031 = isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0));
        float _1771 = (isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1711 + _1694) / _1706, (_1713 + _1698) / _1706), _1716), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1713 + _1694) / _1706, (_1698 - _1711) / _1706), _1716), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1694 - _1711) / _1706, (_1698 - _1713) / _1706), _1716), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1694 - _1713) / _1706, (_1711 + _1698) / _1706), _1716), 0.0)).x), vec4(0.25)));
        _1778 = 1.0 - (_1771 * cbSceneParam._m0[34u].x);
        _1779 = 1.0 - (_1771 * cbSceneParam._m0[34u].y);
        _1780 = 1.0 - (_1771 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1778 = 1.0;
        _1779 = 1.0;
        _1780 = 1.0;
    }
    float _1844;
    float _1846;
    float _1848;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1832 = fma(_1628, cbSceneParam._m0[63u].w, fma(_1624, cbSceneParam._m0[63u].z, fma(_1620, cbSceneParam._m0[63u].y, _1616 * cbSceneParam._m0[63u].x)));
        float _1833 = fma(_1628, cbSceneParam._m0[60u].w, fma(_1624, cbSceneParam._m0[60u].z, fma(_1620, cbSceneParam._m0[60u].y, _1616 * cbSceneParam._m0[60u].x))) / _1832;
        float _1834 = fma(_1628, cbSceneParam._m0[61u].w, fma(_1624, cbSceneParam._m0[61u].z, fma(_1620, cbSceneParam._m0[61u].y, _1616 * cbSceneParam._m0[61u].x))) / _1832;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1833 >= cbSceneParam._m0[64u].x) && (_1834 >= cbSceneParam._m0[64u].y)) && (_1833 <= cbSceneParam._m0[64u].z)) && (_1834 <= cbSceneParam._m0[64u].w))
        {
            float _1973 = fma(_1628, cbSceneParam._m0[62u].w, fma(_1624, cbSceneParam._m0[62u].z, fma(_1620, cbSceneParam._m0[62u].y, _1616 * cbSceneParam._m0[62u].x))) / _1832;
            float _1977 = isnan(cbSceneParam._m0[41u].w) ? _1973 : (isnan(_1973) ? cbSceneParam._m0[41u].w : max(_1973, cbSceneParam._m0[41u].w));
            float _2020 = (cbSceneParam._m0[33u].x - sqrt(((_1630 * _1630) + (_1629 * _1629)) + (_1631 * _1631))) * cbSceneParam._m0[33u].y;
            float _4047 = isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0));
            float _2027 = (isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1833, cbSceneParam._m0[33u].w + _1834), _1977), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1833, _1834 - cbSceneParam._m0[33u].z), _1977), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1833 - cbSceneParam._m0[33u].z, _1834 - cbSceneParam._m0[33u].w), _1977), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1833 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1834), _1977), 0.0)).x), vec4(0.25)));
            float _2031 = 1.0 - (_2027 * cbSceneParam._m0[34u].x);
            float _2032 = 1.0 - (_2027 * cbSceneParam._m0[34u].y);
            float _2033 = 1.0 - (_2027 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2032) ? _1779 : (isnan(_1779) ? _2032 : min(_1779, _2032));
            frontier_phi_36_35_ladder_1 = isnan(_2033) ? _1780 : (isnan(_1780) ? _2033 : min(_1780, _2033));
            frontier_phi_36_35_ladder_2 = isnan(_2031) ? _1778 : (isnan(_1778) ? _2031 : min(_1778, _2031));
        }
        else
        {
            frontier_phi_36_35_ladder = _1779;
            frontier_phi_36_35_ladder_1 = _1780;
            frontier_phi_36_35_ladder_2 = _1778;
        }
        _1844 = frontier_phi_36_35_ladder_2;
        _1846 = frontier_phi_36_35_ladder;
        _1848 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _1844 = _1778;
        _1846 = _1779;
        _1848 = _1780;
    }
    uvec4 _1853 = floatBitsToUint(cbInstanceData._m0[_507 + 5u]);
    uint _1855 = _1853.x * 14u;
    uint _1856 = _1855 + 13u;
    float _1863 = _548 + (-1.0);
    float _1868 = (cbLight._m0[_1856].x * _1863) + 1.0;
    float _1869 = (cbLight._m0[_1856].y * _1863) + 1.0;
    float _1870 = (cbLight._m0[_1856].z * _1863) + 1.0;
    float _1871 = (cbLight._m0[_1856].w * _1863) + 1.0;
    uint _1872 = _1855 + 5u;
    float _1878 = isnan(1.0) ? _1869 : (isnan(_1869) ? 1.0 : min(_1869, 1.0));
    uint _1882 = _1855 + 4u;
    float _1892 = isnan(1.0) ? _1868 : (isnan(_1868) ? 1.0 : min(_1868, 1.0));
    uint _1896 = _1855 | 1u;
    float _1907 = dot(vec3(cbLight._m0[_1855].xyz), vec3(_376, _377, _378));
    float _1910 = dot(vec3(cbLight._m0[_1896].xyz), vec3(_376, _377, _378));
    float _4083 = isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0));
    float _4094 = isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0));
    float _1915 = (isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0))) * 0.3183098733425140380859375;
    float _1917 = (isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0))) * 0.3183098733425140380859375;
    float _1924 = ((cbLight._m0[_1872].x * _1878) * _1917) + (((cbLight._m0[_1882].x * _1844) * _1892) * _1915);
    float _1925 = ((_1878 * cbLight._m0[_1872].y) * _1917) + (((cbLight._m0[_1882].y * _1846) * _1892) * _1915);
    float _1926 = ((_1878 * cbLight._m0[_1872].z) * _1917) + (((cbLight._m0[_1882].z * _1848) * _1892) * _1915);
    uvec4 _1930 = floatBitsToUint(cbLight._m0[_1855 + 12u]);
    bool _1932 = _1930.x == 0u;
    float _2034;
    float _2036;
    float _2038;
    if (_1932)
    {
        _2034 = _1924;
        _2036 = _1925;
        _2038 = _1926;
    }
    else
    {
        uint _2042 = _1855 + 6u;
        float _2058 = (dot(vec3(cbLight._m0[_1855 + 2u].xyz), vec3(_376, _377, _378)) * 0.5) + 0.5;
        float _2059 = _2058 * _2058;
        float _4105 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
        float _2060 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
        float _2061 = isnan(1.0) ? _1870 : (isnan(_1870) ? 1.0 : min(_1870, 1.0));
        _2034 = (((cbLight._m0[_2042].x * 0.3183098733425140380859375) * _2060) * _2061) + _1924;
        _2036 = (((cbLight._m0[_2042].y * 0.3183098733425140380859375) * _2060) * _2061) + _1925;
        _2038 = (((cbLight._m0[_2042].z * 0.3183098733425140380859375) * _2060) * _2061) + _1926;
    }
    bool _2041 = _1930.y == 0u;
    float _2096;
    float _2098;
    float _2100;
    if (_2041)
    {
        _2096 = _2034;
        _2098 = _2036;
        _2100 = _2038;
    }
    else
    {
        uint _2269 = _1855 + 7u;
        float _2285 = (dot(vec3(cbLight._m0[_1855 + 3u].xyz), vec3(_376, _377, _378)) * 0.5) + 0.5;
        float _2286 = _2285 * _2285;
        float _4121 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
        float _2287 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
        float _2288 = isnan(1.0) ? _1871 : (isnan(_1871) ? 1.0 : min(_1871, 1.0));
        _2096 = (((cbLight._m0[_2269].x * 0.3183098733425140380859375) * _2287) * _2288) + _2034;
        _2098 = (((cbLight._m0[_2269].y * 0.3183098733425140380859375) * _2287) * _2288) + _2036;
        _2100 = (((cbLight._m0[_2269].z * 0.3183098733425140380859375) * _2287) * _2288) + _2038;
    }
    uint _2103 = _1855 + 8u;
    float _2116 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1855].w)) * _379) * 0.949999988079071044921875);
    float _2117 = _2116 * _2116;
    float _2118 = cbLight._m0[_1855].x + _458;
    float _2119 = cbLight._m0[_1855].y + _459;
    float _2120 = cbLight._m0[_1855].z + _460;
    float _2124 = inversesqrt(dot(vec3(_2118, _2119, _2120), vec3(_2118, _2119, _2120)));
    float _2125 = _2124 * _2118;
    float _2126 = _2124 * _2119;
    float _2127 = _2124 * _2120;
    float _2128 = dot(vec3(_376, _377, _378), vec3(cbLight._m0[_1855].xyz));
    float _4137 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
    float _2131 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
    float _4148 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _2132 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
    float _2133 = dot(vec3(_376, _377, _378), vec3(_2125, _2126, _2127));
    float _4159 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
    float _2136 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
    float _2137 = dot(vec3(cbLight._m0[_1855].xyz), vec3(_2125, _2126, _2127));
    float _4170 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
    float _2141 = _2117 * _2117;
    float _2145 = ((_2136 * _2136) * (_2141 + (-1.0))) + 1.0;
    float _2153 = exp2(log2(1.0 - (isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0)))) * 5.0);
    float _2154 = 0.959999978542327880859375 - _530;
    float _2156 = 0.959999978542327880859375 - _531;
    float _2157 = 0.959999978542327880859375 - _532;
    float _2164 = 1.0 - _2117;
    float _2175 = (0.5 / (((_2132 * ((_2131 * _2164) + _2117)) + 9.9999999392252902907785028219223e-09) + (((_2132 * _2164) + _2117) * _2131))) * _2131;
    float _4181 = isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0));
    float _2177 = (isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0))) * (_2141 / ((_2145 * _2145) * 3.141590118408203125));
    uint _2191 = _1855 + 9u;
    float _2202 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1896].w)) * _379) * 0.949999988079071044921875);
    float _2203 = _2202 * _2202;
    float _2204 = cbLight._m0[_1896].x + _458;
    float _2205 = cbLight._m0[_1896].y + _459;
    float _2206 = cbLight._m0[_1896].z + _460;
    float _2210 = inversesqrt(dot(vec3(_2204, _2205, _2206), vec3(_2204, _2205, _2206)));
    float _2211 = _2210 * _2204;
    float _2212 = _2210 * _2205;
    float _2213 = _2210 * _2206;
    float _2214 = dot(vec3(_376, _377, _378), vec3(cbLight._m0[_1896].xyz));
    float _4192 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
    float _2217 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
    float _2218 = dot(vec3(_376, _377, _378), vec3(_2211, _2212, _2213));
    float _4203 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
    float _2221 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
    float _2222 = dot(vec3(cbLight._m0[_1896].xyz), vec3(_2211, _2212, _2213));
    float _4214 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
    float _2226 = _2203 * _2203;
    float _2230 = ((_2221 * _2221) * (_2226 + (-1.0))) + 1.0;
    float _2237 = exp2(log2(1.0 - (isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0)))) * 5.0);
    float _2244 = 1.0 - _2203;
    float _2254 = (0.5 / (((_2132 * ((_2217 * _2244) + _2203)) + 9.9999999392252902907785028219223e-09) + (((_2132 * _2244) + _2203) * _2217))) * _2217;
    float _4225 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
    float _2256 = (isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0))) * (_2226 / ((_2230 * _2230) * 3.141590118408203125));
    float _2266 = (((((_2237 * _2154) + _533) * cbLight._m0[_2191].x) * _2256) * _1878) + ((((cbLight._m0[_2103].x * _1844) * ((_2153 * _2154) + _533)) * _2177) * _1892);
    float _2267 = (((((_2237 * _2156) + _535) * cbLight._m0[_2191].y) * _2256) * _1878) + ((((cbLight._m0[_2103].y * _1846) * ((_2153 * _2156) + _535)) * _2177) * _1892);
    float _2268 = (((((_2237 * _2157) + _536) * cbLight._m0[_2191].z) * _2256) * _1878) + ((((cbLight._m0[_2103].z * _1848) * ((_2153 * _2157) + _536)) * _2177) * _1892);
    float _2324;
    float _2326;
    float _2328;
    if (_1932)
    {
        _2324 = _2266;
        _2326 = _2267;
        _2328 = _2268;
    }
    else
    {
        uint _2330 = _1855 + 2u;
        uint _2334 = _1855 + 10u;
        float _2348 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2330].w)) * _379) * 0.949999988079071044921875);
        float _2349 = _2348 * _2348;
        float _2350 = cbLight._m0[_2330].x + _458;
        float _2351 = cbLight._m0[_2330].y + _459;
        float _2352 = cbLight._m0[_2330].z + _460;
        float _2356 = inversesqrt(dot(vec3(_2350, _2351, _2352), vec3(_2350, _2351, _2352)));
        float _2357 = _2356 * _2350;
        float _2358 = _2356 * _2351;
        float _2359 = _2356 * _2352;
        float _2360 = dot(vec3(_376, _377, _378), vec3(cbLight._m0[_2330].xyz));
        float _4236 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
        float _2363 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
        float _2364 = dot(vec3(_376, _377, _378), vec3(_2357, _2358, _2359));
        float _4247 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
        float _2367 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
        float _2368 = dot(vec3(cbLight._m0[_2330].xyz), vec3(_2357, _2358, _2359));
        float _4258 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
        float _2372 = _2349 * _2349;
        float _2376 = ((_2367 * _2367) * (_2372 + (-1.0))) + 1.0;
        float _2383 = exp2(log2(1.0 - (isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0)))) * 5.0);
        float _2390 = 1.0 - _2349;
        float _2400 = (0.5 / (((_2132 * ((_2363 * _2390) + _2349)) + 9.9999999392252902907785028219223e-09) + (((_2132 * _2390) + _2349) * _2363))) * _2363;
        float _4269 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
        float _2402 = (isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0))) * (_2372 / ((_2376 * _2376) * 3.141590118408203125));
        float _2403 = isnan(1.0) ? _1870 : (isnan(_1870) ? 1.0 : min(_1870, 1.0));
        _2324 = (((((_2383 * _2154) + _533) * cbLight._m0[_2334].x) * _2402) * _2403) + _2266;
        _2326 = (((((_2383 * _2156) + _535) * cbLight._m0[_2334].y) * _2402) * _2403) + _2267;
        _2328 = (((((_2383 * _2157) + _536) * cbLight._m0[_2334].z) * _2402) * _2403) + _2268;
    }
    float _2434;
    float _2436;
    float _2438;
    if (_2041)
    {
        _2434 = _2324;
        _2436 = _2326;
        _2438 = _2328;
    }
    else
    {
        uint _2445 = _1855 + 3u;
        uint _2449 = _1855 + 11u;
        float _2463 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2445].w)) * _379) * 0.949999988079071044921875);
        float _2464 = _2463 * _2463;
        float _2465 = cbLight._m0[_2445].x + _458;
        float _2466 = cbLight._m0[_2445].y + _459;
        float _2467 = cbLight._m0[_2445].z + _460;
        float _2471 = inversesqrt(dot(vec3(_2465, _2466, _2467), vec3(_2465, _2466, _2467)));
        float _2472 = _2471 * _2465;
        float _2473 = _2471 * _2466;
        float _2474 = _2471 * _2467;
        float _2475 = dot(vec3(_376, _377, _378), vec3(cbLight._m0[_2445].xyz));
        float _4285 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
        float _2478 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
        float _2479 = dot(vec3(_376, _377, _378), vec3(_2472, _2473, _2474));
        float _4296 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
        float _2482 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
        float _2483 = dot(vec3(cbLight._m0[_2445].xyz), vec3(_2472, _2473, _2474));
        float _4307 = isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0));
        float _2487 = _2464 * _2464;
        float _2491 = ((_2482 * _2482) * (_2487 + (-1.0))) + 1.0;
        float _2498 = exp2(log2(1.0 - (isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0)))) * 5.0);
        float _2505 = 1.0 - _2464;
        float _2515 = (0.5 / (((_2132 * ((_2478 * _2505) + _2464)) + 9.9999999392252902907785028219223e-09) + (((_2132 * _2505) + _2464) * _2478))) * _2478;
        float _4318 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
        float _2517 = (isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0))) * (_2487 / ((_2491 * _2491) * 3.141590118408203125));
        float _2518 = isnan(1.0) ? _1871 : (isnan(_1871) ? 1.0 : min(_1871, 1.0));
        _2434 = (((((_2498 * _2154) + _533) * cbLight._m0[_2449].x) * _2517) * _2518) + _2324;
        _2436 = (((((_2498 * _2156) + _535) * cbLight._m0[_2449].y) * _2517) * _2518) + _2326;
        _2438 = (((((_2498 * _2157) + _536) * cbLight._m0[_2449].z) * _2517) * _2518) + _2328;
    }
    float _2583;
    float _2585;
    float _2587;
    float _2589;
    float _2591;
    float _2593;
    if (_1853.y == 0u)
    {
        uvec4 _2539 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2540 = _2539.x;
        uint _2551 = uint((float(_2539.y) * floor(float(uint(cbSceneParam._m0[85u].y * _467) / _2540))) + floor(float(uint(cbSceneParam._m0[85u].x * _466) / _2540)));
        float _2561 = (log2(_1631 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2562 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0));
        uint _2565 = uint(isnan(14.0) ? _2562 : (isnan(_2562) ? 14.0 : min(_2562, 14.0)));
        uvec4 _2570 = texelFetch(g_lightClusterGridBuffer, int(((_2565 << 2u) + (_2551 << 6u)) >> 2u));
        uint _2571 = _2570.x;
        uint _2572 = _2539.z;
        float _2650;
        float _2652;
        float _2654;
        float _2656;
        float _2658;
        float _2660;
        if (((((1u << ((_2572 >> 4u) & 15u)) + 4294967295u) & _2571) == 0u) || ((_2572 & 240u) == 0u))
        {
            _2650 = 0.0;
            _2652 = 0.0;
            _2654 = 0.0;
            _2656 = 0.0;
            _2658 = 0.0;
            _2660 = 0.0;
        }
        else
        {
            float _2651;
            float _2653;
            float _2655;
            float _2657;
            float _2659;
            float _2661;
            float _2794 = 0.0;
            float _2795 = 0.0;
            float _2796 = 0.0;
            float _2797 = 0.0;
            float _2798 = 0.0;
            float _2799 = 0.0;
            uint _2800 = 0u;
            uint _2809;
            bool _2810;
            for (;;)
            {
                _2809 = texelFetch(g_lightClassification, int((((_2565 << 5u) + (_2551 << 9u)) + (_2800 << 2u)) >> 2u)).x;
                _2810 = _2809 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2810)
                {
                    frontier_phi_68_pred = _2799;
                    frontier_phi_68_pred_1 = _2798;
                    frontier_phi_68_pred_2 = _2797;
                    frontier_phi_68_pred_3 = _2795;
                    frontier_phi_68_pred_4 = _2794;
                    frontier_phi_68_pred_5 = _2796;
                }
                else
                {
                    float _2918;
                    float _2919;
                    float _2920;
                    float _2921;
                    float _2922;
                    float _2923;
                    uint _2924;
                    _2918 = _2794;
                    _2919 = _2795;
                    _2920 = _2796;
                    _2921 = _2797;
                    _2922 = _2798;
                    _2923 = _2799;
                    _2924 = _2809;
                    float _2850;
                    float _2851;
                    float _2852;
                    float _2853;
                    float _2854;
                    float _2855;
                    for (;;)
                    {
                        uint _2928 = uint(findLSB(_2924)) + (_2800 << 5u);
                        uint _2925 = (_2924 + 4294967295u) & _2924;
                        uint _2930 = _2928 * 48u;
                        vec4 _2944 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2930)).x, texelFetch(g_PointLightRenderingBuffer, int(_2930 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2930 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2930 + 3u)).x));
                        uint _2950 = (_2928 * 48u) + 4u;
                        vec4 _2963 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2950)).x, texelFetch(g_PointLightRenderingBuffer, int(_2950 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2950 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2950 + 3u)).x));
                        uint _2969 = (_2928 * 48u) + 8u;
                        vec3 _2980 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2969)).x, texelFetch(g_PointLightRenderingBuffer, int(_2969 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2969 + 2u)).x));
                        float _2984 = _2944.x - _1629;
                        float _2985 = _2944.y - _1630;
                        float _2986 = _2944.z - _1631;
                        float _2987 = dot(vec3(_2984, _2985, _2986), vec3(_2984, _2985, _2986));
                        float _2990 = inversesqrt(_2987);
                        float _2991 = _2990 * _2984;
                        float _2992 = _2990 * _2985;
                        float _2993 = _2990 * _2986;
                        float _2994 = dot(vec3(_488, _491, _494), vec3(_2991, _2992, _2993));
                        float _2999 = 1.0 - (_2987 * _2944.w);
                        float _4344 = isnan(0.0) ? _2999 : (isnan(_2999) ? 0.0 : max(_2999, 0.0));
                        float _3000 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
                        float _3001 = sqrt(_2987) * _2963.w;
                        float _3004 = 1.39999997615814208984375 / (_3001 + 1.39999997615814208984375);
                        float _3005 = _3004 * _3004;
                        float _3008 = ((1.0 - _3005) * _2994) + _3005;
                        float _3011 = _3001 * _3001;
                        float _3015 = ((isnan(0.0) ? _3008 : (isnan(_3008) ? 0.0 : max(_3008, 0.0))) * _3000) / ((_3011 * 0.699999988079071044921875) + 1.0);
                        float _3019 = (-0.0) - _1629;
                        float _3020 = (-0.0) - _1630;
                        float _3021 = (-0.0) - _1631;
                        float _3025 = inversesqrt(dot(vec3(_3019, _3020, _3021), vec3(_3019, _3020, _3021)));
                        float _3026 = _3025 * _3019;
                        float _3027 = _3025 * _3020;
                        float _3028 = _3025 * _3021;
                        float _3035 = exp2(log2(1.0 / ((_3011 * 3.5) + 5.0)) * 0.25);
                        float _3036 = 1.0 - _564;
                        float _3043 = sqrt(1.0 - ((1.0 - (_3036 * _3036)) * (1.0 - (_3035 * _3035))));
                        float _3044 = _3043 * _3043;
                        float _3045 = _3044 * _3044;
                        float _3046 = _3026 + _2991;
                        float _3047 = _3027 + _2992;
                        float _3048 = _3028 + _2993;
                        float _3052 = inversesqrt(dot(vec3(_3046, _3047, _3048), vec3(_3046, _3047, _3048)));
                        float _3056 = dot(vec3(_488, _491, _494), vec3(_3026, _3027, _3028));
                        float _4360 = isnan(0.0) ? _3056 : (isnan(_3056) ? 0.0 : max(_3056, 0.0));
                        float _3059 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
                        float _3060 = dot(vec3(_488, _491, _494), vec3(_3052 * _3046, _3052 * _3047, _3052 * _3048));
                        float _4371 = isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : max(_3060, 0.0));
                        float _3063 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
                        float _3067 = ((_3063 * _3063) * (_3045 + (-1.0))) + 1.0;
                        float _3068 = _3004 * _3044;
                        float _3069 = _3068 * _3068;
                        float _3072 = ((1.0 - _3069) * _2994) + _3069;
                        float _4382 = isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0));
                        float _3073 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
                        float _3074 = 1.0 - _3044;
                        float _3084 = (0.5 / (((_3073 * ((_3059 * _3074) + _3044)) + 9.9999999392252902907785028219223e-09) + (((_3073 * _3074) + _3044) * _3059))) * _3073;
                        float _4393 = isnan(0.0) ? _3084 : (isnan(_3084) ? 0.0 : max(_3084, 0.0));
                        float _3095 = (((_3045 * 3.1415927410125732421875) * (isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0)))) / ((_3067 * _3067) * ((_3011 * 2.1991131305694580078125) + 3.141590118408203125))) * _3000;
                        _2853 = (_3015 * _2963.x) + _2921;
                        _2854 = (_3015 * _2963.y) + _2922;
                        _2855 = (_3015 * _2963.z) + _2923;
                        _2850 = (_3095 * _2980.x) + _2918;
                        _2851 = (_3095 * _2980.y) + _2919;
                        _2852 = (_3095 * _2980.z) + _2920;
                        if (_2925 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2918 = _2850;
                            _2919 = _2851;
                            _2920 = _2852;
                            _2921 = _2853;
                            _2922 = _2854;
                            _2923 = _2855;
                            _2924 = _2925;
                        }
                    }
                    frontier_phi_68_pred = _2855;
                    frontier_phi_68_pred_1 = _2854;
                    frontier_phi_68_pred_2 = _2853;
                    frontier_phi_68_pred_3 = _2851;
                    frontier_phi_68_pred_4 = _2850;
                    frontier_phi_68_pred_5 = _2852;
                }
                _2661 = frontier_phi_68_pred;
                _2659 = frontier_phi_68_pred_1;
                _2657 = frontier_phi_68_pred_2;
                _2653 = frontier_phi_68_pred_3;
                _2651 = frontier_phi_68_pred_4;
                _2655 = frontier_phi_68_pred_5;
                uint _2801 = _2800 + 1u;
                if (_2801 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2794 = _2651;
                    _2795 = _2653;
                    _2796 = _2655;
                    _2797 = _2657;
                    _2798 = _2659;
                    _2799 = _2661;
                    _2800 = _2801;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2650 = _2651;
            _2652 = _2653;
            _2654 = _2655;
            _2656 = _2657;
            _2658 = _2659;
            _2660 = _2661;
        }
        uvec4 _2664 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2665 = _2664.z;
        uint _2667 = (_2665 >> 8u) & 15u;
        float _2762;
        float _2764;
        float _2766;
        float _2768;
        float _2770;
        float _2772;
        if (((4294967295u << _2667) & _2571) == 0u)
        {
            _2762 = _2650;
            _2764 = _2652;
            _2766 = _2654;
            _2768 = _2656;
            _2770 = _2658;
            _2772 = _2660;
        }
        else
        {
            float _2787 = inversesqrt(dot(vec3(_1629, _1630, _1631), vec3(_1629, _1630, _1631)));
            float _2788 = _2787 * _1629;
            float _2789 = _2787 * _1630;
            float _2790 = _2787 * _1631;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2667 < ((_2665 >> 12u) & 15u))
            {
                float _2763;
                float _2765;
                float _2767;
                float _2769;
                float _2771;
                float _2773;
                float _2901 = _2650;
                float _2902 = _2652;
                float _2903 = _2654;
                float _2904 = _2656;
                float _2905 = _2658;
                float _2906 = _2660;
                uint _2907 = _2667;
                uint _2916;
                bool _2917;
                for (;;)
                {
                    _2916 = texelFetch(g_lightClassification, int((((_2565 << 5u) + (_2551 << 9u)) + (_2907 << 2u)) >> 2u)).x;
                    _2917 = _2916 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_2917)
                    {
                        frontier_phi_74_pred = _2903;
                        frontier_phi_74_pred_1 = _2902;
                        frontier_phi_74_pred_2 = _2901;
                        frontier_phi_74_pred_3 = _2906;
                        frontier_phi_74_pred_4 = _2905;
                        frontier_phi_74_pred_5 = _2904;
                    }
                    else
                    {
                        float _3100;
                        float _3101;
                        float _3102;
                        float _3103;
                        float _3104;
                        float _3105;
                        float _3396;
                        float _3397;
                        float _3398;
                        float _3399;
                        float _3400;
                        float _3401;
                        float _3113 = _2901;
                        float _3114 = _2902;
                        float _3115 = _2903;
                        float _3116 = _2904;
                        float _3117 = _2905;
                        float _3118 = _2906;
                        uint _3119 = _2916;
                        uint _3120;
                        vec4 _3145;
                        float _3146;
                        vec4 _3161;
                        vec3 _3173;
                        vec4 _3189;
                        vec4 _3205;
                        float _3252;
                        bool _3253;
                        for (;;)
                        {
                            uint _3130 = ((_2907 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3119));
                            _3120 = (_3119 + 4294967295u) & _3119;
                            uint _3132 = _3130 * 40u;
                            _3145 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3132)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 3u)).x));
                            _3146 = _3145.w;
                            uint _3148 = (_3130 * 40u) + 4u;
                            _3161 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3148)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 3u)).x));
                            uint _3163 = (_3130 * 40u) + 8u;
                            _3173 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3163)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 2u)).x));
                            uint _3176 = (_3130 * 40u) + 16u;
                            _3189 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3176)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 3u)).x));
                            uint _3192 = (_3130 * 40u) + 20u;
                            _3205 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3192)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3192 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3192 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3192 + 3u)).x));
                            uint _3208 = (_3130 * 40u) + 24u;
                            vec4 _3221 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3208)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3208 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3208 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3208 + 3u)).x));
                            uint _3227 = (_3130 * 40u) + 28u;
                            vec4 _3240 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3227)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 3u)).x));
                            _3252 = fma(_1631, _3240.z, fma(_1630, _3240.y, _3240.x * _1629)) + _3240.w;
                            _3253 = !((fma(_1631, _3221.z, fma(_1630, _3221.y, _3221.x * _1629)) + _3221.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3253)
                            {
                                float _3280 = _3145.x - _1629;
                                float _3281 = _3145.y - _1630;
                                float _3282 = _3145.z - _1631;
                                float _3283 = dot(vec3(_3280, _3281, _3282), vec3(_3280, _3281, _3282));
                                float _3286 = inversesqrt(_3283);
                                float _3287 = _3286 * _3280;
                                float _3288 = _3286 * _3281;
                                float _3289 = _3286 * _3282;
                                float _3293 = 1.0 - (_3283 / (_3146 * _3146));
                                float _4404 = isnan(0.0) ? _3293 : (isnan(_3293) ? 0.0 : max(_3293, 0.0));
                                float _3294 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
                                float _3298 = sqrt(_3283) * _3161.w;
                                float _3300 = 1.39999997615814208984375 / (_3298 + 1.39999997615814208984375);
                                float _3301 = _3300 * _3300;
                                float _3304 = ((1.0 - _3301) * dot(vec3(_3287, _3288, _3289), vec3(_488, _491, _494))) + _3301;
                                float _3307 = _3298 * _3298;
                                float _3311 = (fma(_1631, _3189.z, fma(_1630, _3189.y, _3189.x * _1629)) + _3189.w) / _3252;
                                float _3312 = (fma(_1631, _3205.z, fma(_1630, _3205.y, _3205.x * _1629)) + _3205.w) / _3252;
                                float _3316 = 1.0 - dot(vec2(_3311, _3312), vec2(_3311, _3312));
                                float _4420 = isnan(0.0) ? _3316 : (isnan(_3316) ? 0.0 : max(_3316, 0.0));
                                float _3317 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
                                float _3318 = _3317 * (((isnan(0.0) ? _3304 : (isnan(_3304) ? 0.0 : max(_3304, 0.0))) * _3294) / ((_3307 * 0.699999988079071044921875) + 1.0));
                                float _3330 = exp2(log2(1.0 / ((_3307 * 3.5) + 5.0)) * 0.25);
                                float _3331 = 1.0 - _564;
                                float _3338 = sqrt(1.0 - ((1.0 - (_3331 * _3331)) * (1.0 - (_3330 * _3330))));
                                float _3339 = _3338 * _3338;
                                float _3340 = _3339 * _3339;
                                float _3341 = _3287 - _2788;
                                float _3342 = _3288 - _2789;
                                float _3343 = _3289 - _2790;
                                float _3347 = inversesqrt(dot(vec3(_3341, _3342, _3343), vec3(_3341, _3342, _3343)));
                                float _3351 = dot(vec3(_488, _491, _494), vec3((-0.0) - _2788, (-0.0) - _2789, (-0.0) - _2790));
                                float _4431 = isnan(0.0) ? _3351 : (isnan(_3351) ? 0.0 : max(_3351, 0.0));
                                float _3354 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
                                float _3355 = dot(vec3(_488, _491, _494), vec3(_3347 * _3341, _3347 * _3342, _3347 * _3343));
                                float _4442 = isnan(0.0) ? _3355 : (isnan(_3355) ? 0.0 : max(_3355, 0.0));
                                float _3358 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
                                float _3362 = ((_3358 * _3358) * (_3340 + (-1.0))) + 1.0;
                                float _3363 = _3300 * _3339;
                                float _3364 = _3363 * _3363;
                                float _3370 = ((1.0 - _3364) * dot(vec3(_488, _491, _494), vec3(_3287, _3288, _3289))) + _3364;
                                float _4453 = isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : max(_3370, 0.0));
                                float _3371 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
                                float _3372 = 1.0 - _3339;
                                float _3382 = (0.5 / (((_3371 * ((_3354 * _3372) + _3339)) + 9.9999999392252902907785028219223e-09) + (((_3371 * _3372) + _3339) * _3354))) * _3371;
                                float _4464 = isnan(0.0) ? _3382 : (isnan(_3382) ? 0.0 : max(_3382, 0.0));
                                float _3392 = (_3317 * _3294) * (((_3340 * 3.1415927410125732421875) * (isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0)))) / ((_3362 * _3362) * ((_3307 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3392 * _3173.z;
                                frontier_phi_80_pred_1 = _3392 * _3173.y;
                                frontier_phi_80_pred_2 = _3392 * _3173.x;
                                frontier_phi_80_pred_3 = _3318 * _3161.z;
                                frontier_phi_80_pred_4 = _3318 * _3161.y;
                                frontier_phi_80_pred_5 = _3318 * _3161.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3398 = frontier_phi_80_pred;
                            _3397 = frontier_phi_80_pred_1;
                            _3396 = frontier_phi_80_pred_2;
                            _3401 = frontier_phi_80_pred_3;
                            _3400 = frontier_phi_80_pred_4;
                            _3399 = frontier_phi_80_pred_5;
                            _3103 = _3399 + _3116;
                            _3104 = _3400 + _3117;
                            _3105 = _3401 + _3118;
                            _3100 = _3396 + _3113;
                            _3101 = _3397 + _3114;
                            _3102 = _3398 + _3115;
                            if (_3120 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3113 = _3100;
                                _3114 = _3101;
                                _3115 = _3102;
                                _3116 = _3103;
                                _3117 = _3104;
                                _3118 = _3105;
                                _3119 = _3120;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3102;
                        frontier_phi_74_pred_1 = _3101;
                        frontier_phi_74_pred_2 = _3100;
                        frontier_phi_74_pred_3 = _3105;
                        frontier_phi_74_pred_4 = _3104;
                        frontier_phi_74_pred_5 = _3103;
                    }
                    _2767 = frontier_phi_74_pred;
                    _2765 = frontier_phi_74_pred_1;
                    _2763 = frontier_phi_74_pred_2;
                    _2773 = frontier_phi_74_pred_3;
                    _2771 = frontier_phi_74_pred_4;
                    _2769 = frontier_phi_74_pred_5;
                    uint _2908 = _2907 + 1u;
                    if (_2908 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2901 = _2763;
                        _2902 = _2765;
                        _2903 = _2767;
                        _2904 = _2769;
                        _2905 = _2771;
                        _2906 = _2773;
                        _2907 = _2908;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2771;
                frontier_phi_62_63_ladder_1 = _2769;
                frontier_phi_62_63_ladder_2 = _2767;
                frontier_phi_62_63_ladder_3 = _2773;
                frontier_phi_62_63_ladder_4 = _2765;
                frontier_phi_62_63_ladder_5 = _2763;
            }
            else
            {
                frontier_phi_62_63_ladder = _2658;
                frontier_phi_62_63_ladder_1 = _2656;
                frontier_phi_62_63_ladder_2 = _2654;
                frontier_phi_62_63_ladder_3 = _2660;
                frontier_phi_62_63_ladder_4 = _2652;
                frontier_phi_62_63_ladder_5 = _2650;
            }
            _2762 = frontier_phi_62_63_ladder_5;
            _2764 = frontier_phi_62_63_ladder_4;
            _2766 = frontier_phi_62_63_ladder_2;
            _2768 = frontier_phi_62_63_ladder_1;
            _2770 = frontier_phi_62_63_ladder;
            _2772 = frontier_phi_62_63_ladder_3;
        }
        float _2777 = isnan(1.0) ? _548 : (isnan(_548) ? 1.0 : min(_548, 1.0));
        _2583 = (_2777 * _2768) + _2096;
        _2585 = (_2777 * _2770) + _2098;
        _2587 = (_2777 * _2772) + _2100;
        _2589 = ((_2762 * _533) * _2777) + _2434;
        _2591 = ((_2764 * _535) * _2777) + _2436;
        _2593 = ((_2766 * _536) * _2777) + _2438;
    }
    else
    {
        _2583 = _2096;
        _2585 = _2098;
        _2587 = _2100;
        _2589 = _2434;
        _2591 = _2436;
        _2593 = _2438;
    }
    float _4480 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _4491 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _4502 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    uint _2613 = _507 + 6u;
    float _2621 = _466 / cbSceneParam._m0[86u].x;
    float _2622 = _467 / cbSceneParam._m0[86u].y;
    vec4 _2636 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2621, _2622, (log2((isnan(cbSceneParam._m0[77u].w) ? _399 : (isnan(_399) ? cbSceneParam._m0[77u].w : min(_399, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2638 = _2636.x;
    float _2639 = _2636.y;
    float _2640 = _2636.z;
    float _2641 = _2636.w;
    float _2712;
    float _2714;
    float _2716;
    float _2718;
    if (_399 > cbSceneParam._m0[78u].w)
    {
        float _2675 = isnan(_399) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _399 : min(cbSceneParam._m0[80u].w, _399));
        float _2676 = _2675 / _399;
        float _2687 = _2676 * _451;
        float _2688 = _452 * _2676;
        float _2689 = (-0.0) - _2688;
        float _2690 = _2676 * _453;
        float _2692 = (cbSceneParam._m0[77u].w * _2689) / _2675;
        float _2693 = _2692 + cbSceneParam._m0[79u].w;
        float _2694 = cbSceneParam._m0[79u].w - _2688;
        float _2700 = sqrt(((_2687 * _2687) + (_2688 * _2688)) + (_2690 * _2690));
        float _2703 = (1.0 - (cbSceneParam._m0[77u].w / _2675)) * _2700;
        float _2708 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2710 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2863;
        if (abs((_2689 - _2692) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2863 = ((((_2693 > 0.0) ? exp2(_2708 * _2693) : (2.0 - exp2(_2710 * _2693))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2703;
        }
        else
        {
            float _2823 = 1.0 / cbSceneParam._m0[80u].x;
            float _2824 = isnan(_2694) ? _2693 : (isnan(_2693) ? _2694 : max(_2693, _2694));
            float _2825 = isnan(_2694) ? _2693 : (isnan(_2693) ? _2694 : min(_2693, _2694));
            float _2834 = isnan(0.0) ? _2824 : (isnan(_2824) ? 0.0 : min(_2824, 0.0));
            float _2835 = isnan(0.0) ? _2825 : (isnan(_2825) ? 0.0 : min(_2825, 0.0));
            _2863 = ((abs(_2700 / _2689) * cbSceneParam._m0[80u].y) * ((((_2834 - _2835) * 2.0) - ((exp2(_2708 * (isnan(0.0) ? _2824 : (isnan(_2824) ? 0.0 : max(_2824, 0.0)))) - exp2(_2708 * (isnan(0.0) ? _2825 : (isnan(_2825) ? 0.0 : max(_2825, 0.0))))) * _2823)) - ((exp2(_2710 * _2834) - exp2(_2710 * _2835)) * _2823))) + (_2703 * cbSceneParam._m0[80u].z);
        }
        vec4 _2865 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2621, _2622, 1.0), 0.0);
        float _2874 = exp2((_2863 * (-1.44269502162933349609375)) * (1.0 - _2865.w));
        float _2875 = log2(_2874);
        float _2891 = log2(_2641);
        _2712 = (exp2(_2891 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2875 * cbSceneParam._m0[78u].x)) * _2865.x) / cbSceneParam._m0[78u].x)) + _2638;
        _2714 = (exp2(_2891 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2875 * cbSceneParam._m0[78u].y)) * _2865.y) / cbSceneParam._m0[78u].y)) + _2639;
        _2716 = (exp2(_2891 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2875 * cbSceneParam._m0[78u].z)) * _2865.z) / cbSceneParam._m0[78u].z)) + _2640;
        _2718 = _2874 * _2641;
    }
    else
    {
        _2712 = _2638;
        _2714 = _2639;
        _2716 = _2640;
        _2718 = _2641;
    }
    float _2730 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2731 = _2730 == 3.0;
    float _2732 = log2(_2718);
    float _2739 = exp2(_2732 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0))) * (_2583 + ((isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0))) * _548))) + ((_2589 + ((isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0))) * _1358)) * cbPerFrame._m0[3u].x));
    float _2740 = exp2(_2732 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0))) * (_2585 + ((isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0))) * _548))) + ((_2591 + ((isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0))) * _1358)) * cbPerFrame._m0[3u].x));
    float _2741 = exp2(_2732 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0))) * (_2587 + ((isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0))) * _548))) + ((_2593 + ((isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0))) * _1358)) * cbPerFrame._m0[3u].x));
    float _2750 = (_2730 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2750 * (_2731 ? _2739 : (_2739 + (cbSceneParam._m0[72u].w * _2712)));
    SV_Target.y = _2750 * (_2731 ? _2740 : (_2740 + (cbSceneParam._m0[72u].w * _2714)));
    SV_Target.z = _2750 * (_2731 ? _2741 : (_2741 + (cbSceneParam._m0[72u].w * _2716)));
    SV_Target.w = cbInstanceData._m0[_2613].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2613].w;
}


