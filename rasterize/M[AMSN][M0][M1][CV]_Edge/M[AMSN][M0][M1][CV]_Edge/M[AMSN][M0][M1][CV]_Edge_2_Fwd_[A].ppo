#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _963;
float _3330;
float _3331;
float _3332;
float _3333;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _192 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _193 = _192 * _184;
    float _194 = _192 * _185;
    float _195 = _192 * _186;
    float _199 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _200 = _199 * NORMAL.x;
    float _201 = _199 * NORMAL.y;
    float _202 = _199 * NORMAL.z;
    float _206 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _207 = _206 * TANGENT.x;
    float _208 = _206 * TANGENT.y;
    float _209 = _206 * TANGENT.z;
    float _214;
    float _215;
    float _216;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _214 = (-0.0) - _200;
        _215 = (-0.0) - _201;
        _216 = (-0.0) - _202;
    }
    else
    {
        _214 = _200;
        _215 = _201;
        _216 = _202;
    }
    vec4 _242 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _248 = _242.w;
    float _249 = _242.x * cbMtdParam._m0[9u].x;
    float _250 = _242.y * cbMtdParam._m0[9u].y;
    float _251 = _242.z * cbMtdParam._m0[9u].z;
    vec4 _269 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _273 = _269.z;
    float _277 = (_269.x * 2.0) + (-1.0);
    float _279 = (_269.y * 2.0) + (-1.0);
    float _280 = dot(vec2(_277, _279), vec2(_277, _279));
    float _3342 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _286 = sqrt(1.0 - (isnan(1.0) ? _3342 : (isnan(_3342) ? 1.0 : min(_3342, 1.0))));
    float _289 = fma(_286, _214, fma(_279, _207, _277 * _193));
    float _292 = fma(_286, _215, fma(_279, _208, _277 * _194));
    float _295 = fma(_286, _216, fma(_279, _209, _277 * _195));
    float _299 = inversesqrt(dot(vec3(_289, _292, _295), vec3(_289, _292, _295)));
    float _328 = (cbMtdParam._m0[12u].x + dot(vec4(_299 * _289, _299 * _292, _299 * _295, 0.0), vec4(cbMtdParam._m0[13u].xyz, 0.0))) - (texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w)).x * cbMtdParam._m0[12u].y);
    float _3353 = isnan(0.0) ? _328 : (isnan(_328) ? 0.0 : max(_328, 0.0));
    float _329 = isnan(1.0) ? _3353 : (isnan(_3353) ? 1.0 : min(_3353, 1.0));
    float _336 = (_329 * (cbMtdParam._m0[10u].x - _249)) + _249;
    float _337 = (_329 * (cbMtdParam._m0[10u].y - _250)) + _250;
    float _338 = (_329 * (cbMtdParam._m0[10u].z - _251)) + _251;
    vec4 _350 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _357 = (_350.x * 2.0) + (-1.0);
    float _358 = (_350.y * 2.0) + (-1.0);
    float _359 = dot(vec2(_357, _358), vec2(_357, _358));
    float _3364 = isnan(0.0) ? _359 : (isnan(_359) ? 0.0 : max(_359, 0.0));
    float _367 = ((_350.z - _273) * _329) + _273;
    float _379 = (((_357 - _277) + (cbMtdParam._m0[12u].w * _277)) * _329) + _277;
    float _380 = (((_358 - _279) + (cbMtdParam._m0[12u].w * _279)) * _329) + _279;
    float _381 = ((sqrt(1.0 - (isnan(1.0) ? _3364 : (isnan(_3364) ? 1.0 : min(_3364, 1.0)))) - _286) * _329) + _286;
    float _384 = fma(_381, _214, fma(_380, _207, _379 * _193));
    float _387 = fma(_381, _215, fma(_380, _208, _379 * _194));
    float _390 = fma(_381, _216, fma(_380, _209, _379 * _195));
    float _394 = inversesqrt(dot(vec3(_384, _387, _390), vec3(_384, _387, _390)));
    float _395 = _394 * _384;
    float _396 = _394 * _387;
    float _397 = _394 * _390;
    float _3375 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _398 = isnan(1.0) ? _3375 : (isnan(_3375) ? 1.0 : min(_3375, 1.0));
    float _3386 = isnan(0.0) ? _336 : (isnan(_336) ? 0.0 : max(_336, 0.0));
    float _3397 = isnan(0.0) ? _337 : (isnan(_337) ? 0.0 : max(_337, 0.0));
    float _3408 = isnan(0.0) ? _338 : (isnan(_338) ? 0.0 : max(_338, 0.0));
    float _417 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _459 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _469 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _459);
    float _470 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _459);
    float _471 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _459);
    float _475 = inversesqrt(dot(vec3(_469, _470, _471), vec3(_469, _470, _471)));
    float _476 = _469 * _475;
    float _477 = _470 * _475;
    float _478 = _471 * _475;
    vec4 _483 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _485 = _483.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _642 = sqrt(((_469 * _469) + (_470 * _470)) + (_471 * _471));
        float _648 = (cbMatDynParam._m0[5u].x * _642) + cbMatDynParam._m0[5u].y;
        float _3419 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
        float _649 = isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0));
        float _653 = (cbMatDynParam._m0[5u].z * _642) + cbMatDynParam._m0[5u].w;
        float _3430 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0))) - _649)) + _649) < ((_485 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _497 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _498 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _518 = fma(_397, cbSceneParam._m0[5u].z, fma(_396, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _395));
    float _521 = fma(_397, cbSceneParam._m0[6u].z, fma(_396, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _395));
    float _524 = fma(_397, cbSceneParam._m0[7u].z, fma(_396, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _395));
    uint _537 = uint(roundEven(NORMAL.w)) * 13u;
    uint _538 = _537 + 9u;
    uint _539 = _538 + uint(cbMatDynParam._m0[0u].w);
    float _545 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3386 : (isnan(_3386) ? 1.0 : min(_3386, 1.0)))) * cbInstanceData._m0[_539].x;
    float _546 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0)))) * cbInstanceData._m0[_539].y;
    float _547 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0)))) * cbInstanceData._m0[_539].z;
    float _3441 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _548 = isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0));
    float _3452 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _549 = isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0));
    float _3463 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _550 = isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0));
    vec4 _559 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _497, cbSceneParam._m0[86u].y * _498));
    float _562 = _559.x * TEXCOORD_3.w;
    float _563 = dot(vec3(_395, _396, _397), vec3(_476, _477, _478));
    float _566 = _563 * 2.0;
    float _570 = (_566 * _395) - _476;
    float _571 = (_566 * _396) - _477;
    float _572 = (_566 * _397) - _478;
    float _576 = abs(dot(vec3(_476, _477, _478), vec3(_395, _396, _397)));
    float _3474 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _578 = sqrt(_398);
    float _591 = exp2((_578 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_578 * 3.0));
    float _623 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _627 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _631 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _962;
    float _964;
    float _965;
    float _966;
    float _967;
    float _968;
    float _969;
    float _970;
    float _971;
    float _972;
    float _973;
    float _974;
    float _975;
    float _976;
    float _977;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _687 = fma(_631, cbModelParam._m0[26u].z, fma(_627, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _623));
        float _691 = fma(_631, cbModelParam._m0[27u].z, fma(_627, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _623));
        float _695 = fma(_631, cbModelParam._m0[28u].z, fma(_627, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _623));
        float _720 = _623 + _395;
        float _721 = _627 + _396;
        float _722 = _631 + _397;
        float _732 = fma(_722, cbModelParam._m0[26u].z, fma(_721, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _720)) - _687;
        float _733 = fma(_722, cbModelParam._m0[27u].z, fma(_721, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _720)) - _691;
        float _734 = fma(_722, cbModelParam._m0[28u].z, fma(_721, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _720)) - _695;
        float _738 = inversesqrt(dot(vec3(_732, _733, _734), vec3(_732, _733, _734)));
        float _751 = ((_738 * _732) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_687 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _752 = ((_738 * _733) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_691 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _753 = ((_738 * _734) / cbModelParam._m0[34u].z) + ((((((_695 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _756 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_751, _752, _753), 0.0);
        vec4 _763 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_751, _752, _753), 0.0);
        vec4 _770 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_751, _752, _753), 0.0);
        vec4 _777 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_751, _752, _753), 0.0);
        float _790 = exp2((_756.w + (-0.5)) * 20.0) * 2.0;
        float _791 = _790 * (_756.x + (-0.5));
        float _792 = _790 * (_756.y + (-0.5));
        float _793 = _790 * (_756.z + (-0.5));
        float _800 = exp2((_763.w + (-0.5)) * 20.0) * 2.0;
        float _801 = _800 * (_763.x + (-0.5));
        float _802 = _800 * (_763.y + (-0.5));
        float _803 = _800 * (_763.z + (-0.5));
        float _810 = exp2((_770.w + (-0.5)) * 20.0) * 2.0;
        float _811 = _810 * (_770.x + (-0.5));
        float _812 = _810 * (_770.y + (-0.5));
        float _813 = _810 * (_770.z + (-0.5));
        float _820 = exp2((_777.w + (-0.5)) * 20.0) * 2.0;
        float _821 = _820 * (_777.x + (-0.5));
        float _822 = _820 * (_777.y + (-0.5));
        float _823 = _820 * (_777.z + (-0.5));
        float _824 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
        float _825 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
        float _826 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
        float _827 = _791 * 0.5;
        float _828 = _801 * 0.5;
        float _829 = _811 * 0.5;
        float _830 = dot(vec3(_827, _828, _829), vec3(_827, _828, _829));
        float _835 = (_830 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_830);
        float _844 = (dot(vec3(_395, _396, _397), vec3(_835 * _827, _835 * _828, _835 * _829)) + 1.0) * 0.5;
        float _3500 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
        float _854 = sqrt(((_828 * _828) + (_827 * _827)) + (_829 * _829)) / (_824 + 9.9999997473787516355514526367188e-06);
        float _3511 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
        float _855 = isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0));
        float _856 = _855 * 2.0;
        float _860 = (1.0 - _855) / (_855 + 1.0);
        float _3522 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
        float _861 = isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0));
        float _870 = ((((1.0 - _861) * (_856 + 2.0)) * exp2(log2(isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0))) * (_856 + 1.0))) + _861) * _824;
        float _871 = _792 * 0.5;
        float _872 = _802 * 0.5;
        float _873 = _812 * 0.5;
        float _874 = dot(vec3(_871, _872, _873), vec3(_871, _872, _873));
        float _879 = (_874 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_874);
        float _887 = (dot(vec3(_395, _396, _397), vec3(_879 * _871, _879 * _872, _879 * _873)) + 1.0) * 0.5;
        float _3533 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
        float _896 = sqrt(((_872 * _872) + (_871 * _871)) + (_873 * _873)) / (_825 + 9.9999997473787516355514526367188e-06);
        float _3544 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
        float _897 = isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0));
        float _898 = _897 * 2.0;
        float _902 = (1.0 - _897) / (_897 + 1.0);
        float _3555 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
        float _903 = isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0));
        float _912 = ((((1.0 - _903) * (_898 + 2.0)) * exp2(log2(isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0))) * (_898 + 1.0))) + _903) * _825;
        float _913 = _793 * 0.5;
        float _914 = _803 * 0.5;
        float _915 = _813 * 0.5;
        float _916 = dot(vec3(_913, _914, _915), vec3(_913, _914, _915));
        float _921 = (_916 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_916);
        float _929 = (dot(vec3(_395, _396, _397), vec3(_921 * _913, _921 * _914, _921 * _915)) + 1.0) * 0.5;
        float _3566 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
        float _938 = sqrt(((_914 * _914) + (_913 * _913)) + (_915 * _915)) / (_826 + 9.9999997473787516355514526367188e-06);
        float _3577 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _939 = isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0));
        float _940 = _939 * 2.0;
        float _944 = (1.0 - _939) / (_939 + 1.0);
        float _3588 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _945 = isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0));
        float _954 = ((((1.0 - _945) * (_940 + 2.0)) * exp2(log2(isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0))) * (_940 + 1.0))) + _945) * _826;
        _962 = _793;
        _964 = _792;
        _965 = _791;
        _966 = _803;
        _967 = _802;
        _968 = _801;
        _969 = _813;
        _970 = _812;
        _971 = _811;
        _972 = _826;
        _973 = _825;
        _974 = _824;
        _975 = cbModelParam._m0[36u].z * (isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0)));
        _976 = cbModelParam._m0[36u].z * (isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0)));
        _977 = cbModelParam._m0[36u].z * (isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0)));
    }
    else
    {
        _962 = _963;
        _964 = _963;
        _965 = _963;
        _966 = _963;
        _967 = _963;
        _968 = _963;
        _969 = _963;
        _970 = _963;
        _971 = _963;
        _972 = _963;
        _973 = _963;
        _974 = _963;
        _975 = 0.0;
        _976 = 0.0;
        _977 = 0.0;
    }
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1006 = fma(_631, cbModelParam._m0[30u].z, fma(_627, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _623));
        float _1010 = fma(_631, cbModelParam._m0[31u].z, fma(_627, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _623));
        float _1014 = fma(_631, cbModelParam._m0[32u].z, fma(_627, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _623));
        float _1037 = _623 + _395;
        float _1038 = _627 + _396;
        float _1039 = _631 + _397;
        float _1049 = fma(_1039, cbModelParam._m0[30u].z, fma(_1038, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1037)) - _1006;
        float _1050 = fma(_1039, cbModelParam._m0[31u].z, fma(_1038, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1037)) - _1010;
        float _1051 = fma(_1039, cbModelParam._m0[32u].z, fma(_1038, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1037)) - _1014;
        float _1055 = inversesqrt(dot(vec3(_1049, _1050, _1051), vec3(_1049, _1050, _1051)));
        float _1068 = ((_1055 * _1049) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1006 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1069 = ((_1055 * _1050) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1010 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1070 = ((_1055 * _1051) / cbModelParam._m0[35u].z) + ((((((_1014 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1072 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1068, _1069, _1070), 0.0);
        vec4 _1079 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1068, _1069, _1070), 0.0);
        vec4 _1086 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1068, _1069, _1070), 0.0);
        vec4 _1093 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1068, _1069, _1070), 0.0);
        float _1105 = exp2((_1072.w + (-0.5)) * 20.0) * 2.0;
        float _1106 = _1105 * (_1072.x + (-0.5));
        float _1107 = _1105 * (_1072.y + (-0.5));
        float _1108 = _1105 * (_1072.z + (-0.5));
        float _1115 = exp2((_1079.w + (-0.5)) * 20.0) * 2.0;
        float _1116 = _1115 * (_1079.x + (-0.5));
        float _1117 = _1115 * (_1079.y + (-0.5));
        float _1118 = _1115 * (_1079.z + (-0.5));
        float _1125 = exp2((_1086.w + (-0.5)) * 20.0) * 2.0;
        float _1126 = _1125 * (_1086.x + (-0.5));
        float _1127 = _1125 * (_1086.y + (-0.5));
        float _1128 = _1125 * (_1086.z + (-0.5));
        float _1135 = exp2((_1093.w + (-0.5)) * 20.0) * 2.0;
        float _1136 = _1135 * (_1093.x + (-0.5));
        float _1137 = _1135 * (_1093.y + (-0.5));
        float _1138 = _1135 * (_1093.z + (-0.5));
        float _1139 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1140 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1141 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1142 = _1106 * 0.5;
        float _1143 = _1116 * 0.5;
        float _1144 = _1126 * 0.5;
        float _1145 = dot(vec3(_1142, _1143, _1144), vec3(_1142, _1143, _1144));
        float _1150 = (_1145 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1145);
        float _1158 = (dot(vec3(_395, _396, _397), vec3(_1150 * _1142, _1150 * _1143, _1150 * _1144)) + 1.0) * 0.5;
        float _3629 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1167 = sqrt(((_1143 * _1143) + (_1142 * _1142)) + (_1144 * _1144)) / (_1139 + 9.9999997473787516355514526367188e-06);
        float _3640 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1168 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
        float _1169 = _1168 * 2.0;
        float _1173 = (1.0 - _1168) / (_1168 + 1.0);
        float _3651 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1174 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
        float _1183 = ((((1.0 - _1174) * (_1169 + 2.0)) * exp2(log2(isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0))) * (_1169 + 1.0))) + _1174) * _1139;
        float _1184 = _1107 * 0.5;
        float _1185 = _1117 * 0.5;
        float _1186 = _1127 * 0.5;
        float _1187 = dot(vec3(_1184, _1185, _1186), vec3(_1184, _1185, _1186));
        float _1192 = (_1187 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1187);
        float _1200 = (dot(vec3(_395, _396, _397), vec3(_1192 * _1184, _1192 * _1185, _1192 * _1186)) + 1.0) * 0.5;
        float _3662 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1209 = sqrt(((_1185 * _1185) + (_1184 * _1184)) + (_1186 * _1186)) / (_1140 + 9.9999997473787516355514526367188e-06);
        float _3673 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1210 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
        float _1211 = _1210 * 2.0;
        float _1215 = (1.0 - _1210) / (_1210 + 1.0);
        float _3684 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1216 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
        float _1225 = ((((1.0 - _1216) * (_1211 + 2.0)) * exp2(log2(isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0))) * (_1211 + 1.0))) + _1216) * _1140;
        float _1226 = _1108 * 0.5;
        float _1227 = _1118 * 0.5;
        float _1228 = _1128 * 0.5;
        float _1229 = dot(vec3(_1226, _1227, _1228), vec3(_1226, _1227, _1228));
        float _1234 = (_1229 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1229);
        float _1242 = (dot(vec3(_395, _396, _397), vec3(_1234 * _1226, _1234 * _1227, _1234 * _1228)) + 1.0) * 0.5;
        float _3695 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1251 = sqrt(((_1227 * _1227) + (_1226 * _1226)) + (_1228 * _1228)) / (_1141 + 9.9999997473787516355514526367188e-06);
        float _3706 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1252 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
        float _1253 = _1252 * 2.0;
        float _1257 = (1.0 - _1252) / (_1252 + 1.0);
        float _3717 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1258 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
        float _1267 = ((((1.0 - _1258) * (_1253 + 2.0)) * exp2(log2(isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0))) * (_1253 + 1.0))) + _1258) * _1141;
        _1275 = _1108;
        _1276 = _1107;
        _1277 = _1106;
        _1278 = _1118;
        _1279 = _1117;
        _1280 = _1116;
        _1281 = _1128;
        _1282 = _1127;
        _1283 = _1126;
        _1284 = _1141;
        _1285 = _1140;
        _1286 = _1139;
        _1287 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0)));
        _1288 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0)));
        _1289 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0)));
    }
    else
    {
        _1275 = _963;
        _1276 = _963;
        _1277 = _963;
        _1278 = _963;
        _1279 = _963;
        _1280 = _963;
        _1281 = _963;
        _1282 = _963;
        _1283 = _963;
        _1284 = _963;
        _1285 = _963;
        _1286 = _963;
        _1287 = 0.0;
        _1288 = 0.0;
        _1289 = 0.0;
    }
    float _1299 = (cbModelParam._m0[1u].x * (_1287 - _975)) + _975;
    float _1300 = (cbModelParam._m0[1u].x * (_1288 - _976)) + _976;
    float _1301 = (cbModelParam._m0[1u].x * (_1289 - _977)) + _977;
    float _1322 = fma(_1301, cbSceneParam._m0[89u].z, fma(_1300, cbSceneParam._m0[89u].y, _1299 * cbSceneParam._m0[89u].x));
    float _1325 = fma(_1301, cbSceneParam._m0[90u].z, fma(_1300, cbSceneParam._m0[90u].y, _1299 * cbSceneParam._m0[90u].x));
    float _1328 = fma(_1301, cbSceneParam._m0[91u].z, fma(_1300, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1299));
    float _1343 = _570 * 0.5;
    float _1344 = _571 * 0.5;
    float _1345 = _572 * 0.5;
    float _1346 = dot(vec4(_1343, _1344, _1345, 1.0), vec4(_1277, _1280, _1283, _1286));
    float _1349 = dot(vec4(_1343, _1344, _1345, 1.0), vec4(_1276, _1279, _1282, _1285));
    float _1352 = dot(vec4(_1343, _1344, _1345, 1.0), vec4(_1275, _1278, _1281, _1284));
    float _1386;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1359 = dot(vec4(_1343, _1344, _1345, 1.0), vec4(_962, _966, _969, _972));
        float _1363 = dot(vec4(_1343, _1344, _1345, 1.0), vec4(_964, _967, _970, _973));
        float _1367 = dot(vec4(_1343, _1344, _1345, 1.0), vec4(_965, _968, _971, _974));
        float _1374 = dot(vec4(cbModelParam._m0[39u]), vec4(_1343, _1344, _1345, 1.0));
        _1386 = dot(vec3(isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0)), isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0)), isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1374) ? 0.0 : (isnan(0.0) ? _1374 : max(0.0, _1374))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1386 = 1.0;
    }
    float _1397;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1388 = dot(vec4(cbModelParam._m0[40u]), vec4(_1343, _1344, _1345, 1.0));
        _1397 = dot(vec3(isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0)), isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0)), isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1388) ? 0.0 : (isnan(0.0) ? _1388 : max(0.0, _1388))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1397 = 1.0;
    }
    float _1401 = (_1397 * cbModelParam._m0[1u].x) + (_1386 * (1.0 - cbModelParam._m0[1u].x));
    float _1411 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _398);
    float _1412 = isnan(_1411) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1411 : min(cbModelParam._m0[25u].z, _1411));
    float _1493;
    float _1495;
    float _1497;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1460 = fma(_631, cbModelParam._m0[13u].z, fma(_627, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _623)) + cbModelParam._m0[13u].w;
        float _1464 = fma(_631, cbModelParam._m0[14u].z, fma(_627, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _623)) + cbModelParam._m0[14u].w;
        float _1468 = fma(_631, cbModelParam._m0[15u].z, fma(_627, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _623)) + cbModelParam._m0[15u].w;
        float _1471 = fma(_572, cbModelParam._m0[13u].z, fma(_571, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _570));
        float _1474 = fma(_572, cbModelParam._m0[14u].z, fma(_571, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _570));
        float _1477 = fma(_572, cbModelParam._m0[15u].z, fma(_571, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _570));
        float _1505;
        if (_1471 > 0.0)
        {
            _1505 = abs((1.0 - _1460) / _1471);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1471 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1460 + 1.0) / _1471);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1505 = frontier_phi_19_17_ladder;
        }
        float _1709;
        if (_1474 > 0.0)
        {
            _1709 = abs((1.0 - _1464) / _1474);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1474 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1464 + 1.0) / _1474);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1709 = frontier_phi_28_24_ladder;
        }
        float _1952;
        if (_1477 > 0.0)
        {
            _1952 = abs((1.0 - _1468) / _1477);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1477 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1468 + 1.0) / _1477);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1952 = frontier_phi_40_35_ladder;
        }
        float _1954 = isnan(_1709) ? _1505 : (isnan(_1505) ? _1709 : min(_1505, _1709));
        float _1955 = isnan(_1952) ? _1954 : (isnan(_1954) ? _1952 : min(_1954, _1952));
        float _1959 = (_1955 * _1471) + _1460;
        float _1960 = (_1955 * _1474) + _1464;
        float _1961 = (_1955 * _1477) + _1468;
        float _1962 = _1955 * 9.9999997473787516355514526367188e-05;
        float _1964 = (-1.0) - _1962;
        float _1966 = _1962 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1961 > _1966) || ((_1961 < _1964) || ((_1960 > _1966) || ((_1960 < _1964) || ((_1959 < _1964) || (_1959 > _1966))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2085 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1961, cbModelParam._m0[9u].z, fma(_1960, cbModelParam._m0[9u].y, _1959 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1961, cbModelParam._m0[10u].z, fma(_1960, cbModelParam._m0[10u].y, _1959 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1961, cbModelParam._m0[11u].z, fma(_1960, cbModelParam._m0[11u].y, _1959 * cbModelParam._m0[11u].x))), _1412);
            frontier_phi_18_40_ladder = _2085.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2085.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2085.x * cbModelParam._m0[1u].y;
        }
        _1493 = frontier_phi_18_40_ladder_2;
        _1495 = frontier_phi_18_40_ladder_1;
        _1497 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1481 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_570, _571, _572), _1412);
        _1493 = _1481.x * cbModelParam._m0[1u].y;
        _1495 = _1481.y * cbModelParam._m0[1u].y;
        _1497 = _1481.z * cbModelParam._m0[1u].y;
    }
    float _1501 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _398);
    float _1502 = isnan(_1501) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1501 : min(cbModelParam._m0[25u].w, _1501));
    float _1595;
    float _1597;
    float _1599;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1559 = fma(_631, cbModelParam._m0[21u].z, fma(_627, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _623)) + cbModelParam._m0[21u].w;
        float _1563 = fma(_631, cbModelParam._m0[22u].z, fma(_627, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _623)) + cbModelParam._m0[22u].w;
        float _1567 = fma(_631, cbModelParam._m0[23u].z, fma(_627, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _623)) + cbModelParam._m0[23u].w;
        float _1570 = fma(_572, cbModelParam._m0[21u].z, fma(_571, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _570));
        float _1573 = fma(_572, cbModelParam._m0[22u].z, fma(_571, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _570));
        float _1576 = fma(_572, cbModelParam._m0[23u].z, fma(_571, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _570));
        float _1714;
        if (_1570 > 0.0)
        {
            _1714 = abs((1.0 - _1559) / _1570);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1570 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1559 + 1.0) / _1570);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1714 = frontier_phi_30_26_ladder;
        }
        float _1979;
        if (_1573 > 0.0)
        {
            _1979 = abs((1.0 - _1563) / _1573);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1573 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1563 + 1.0) / _1573);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1979 = frontier_phi_42_37_ladder;
        }
        float _2184;
        if (_1576 > 0.0)
        {
            _2184 = abs((1.0 - _1567) / _1576);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1576 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1567 + 1.0) / _1576);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2184 = frontier_phi_51_48_ladder;
        }
        float _2186 = isnan(_1979) ? _1714 : (isnan(_1714) ? _1979 : min(_1714, _1979));
        float _2187 = isnan(_2184) ? _2186 : (isnan(_2186) ? _2184 : min(_2186, _2184));
        float _2191 = (_2187 * _1570) + _1559;
        float _2192 = (_2187 * _1573) + _1563;
        float _2193 = (_2187 * _1576) + _1567;
        float _2194 = _2187 * 9.9999997473787516355514526367188e-05;
        float _2195 = (-1.0) - _2194;
        float _2197 = _2194 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2193 > _2197) || ((_2193 < _2195) || ((_2192 > _2197) || ((_2192 < _2195) || ((_2191 < _2195) || (_2191 > _2197))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2391 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2193, cbModelParam._m0[17u].z, fma(_2192, cbModelParam._m0[17u].y, _2191 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2193, cbModelParam._m0[18u].z, fma(_2192, cbModelParam._m0[18u].y, _2191 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2193, cbModelParam._m0[19u].z, fma(_2192, cbModelParam._m0[19u].y, _2191 * cbModelParam._m0[19u].x))), _1502);
            frontier_phi_27_51_ladder = _2391.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2391.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2391.x * cbModelParam._m0[1u].z;
        }
        _1595 = frontier_phi_27_51_ladder_2;
        _1597 = frontier_phi_27_51_ladder_1;
        _1599 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1579 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_570, _571, _572), _1502);
        _1595 = _1579.x * cbModelParam._m0[1u].z;
        _1597 = _1579.y * cbModelParam._m0[1u].z;
        _1599 = _1579.z * cbModelParam._m0[1u].z;
    }
    float _1611 = ((((1.0 - _591) * ((_578 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_591 * _578)) * _562;
    float _1612 = _1611 * ((cbModelParam._m0[1u].w * (_1595 - _1493)) + _1493);
    float _1613 = _1611 * ((cbModelParam._m0[1u].w * (_1597 - _1495)) + _1495);
    float _1614 = _1611 * ((cbModelParam._m0[1u].w * (_1599 - _1497)) + _1497);
    float _1617 = fma(_1614, cbSceneParam._m0[89u].z, fma(_1613, cbSceneParam._m0[89u].y, _1612 * cbSceneParam._m0[89u].x));
    float _1620 = fma(_1614, cbSceneParam._m0[90u].z, fma(_1613, cbSceneParam._m0[90u].y, _1612 * cbSceneParam._m0[90u].x));
    float _1623 = fma(_1614, cbSceneParam._m0[91u].z, fma(_1613, cbSceneParam._m0[91u].y, _1612 * cbSceneParam._m0[91u].x));
    uvec4 _1633 = floatBitsToUint(cbInstanceData._m0[_537 + 5u]);
    uint _1635 = _1633.x * 14u;
    uint _1636 = _1635 + 13u;
    float _1643 = _562 + (-1.0);
    float _1648 = (cbLight._m0[_1636].x * _1643) + 1.0;
    float _1649 = (cbLight._m0[_1636].y * _1643) + 1.0;
    float _1650 = (cbLight._m0[_1636].z * _1643) + 1.0;
    float _1651 = (cbLight._m0[_1636].w * _1643) + 1.0;
    uint _1652 = _1635 + 5u;
    float _1658 = isnan(1.0) ? _1649 : (isnan(_1649) ? 1.0 : min(_1649, 1.0));
    uint _1662 = _1635 + 4u;
    float _1668 = isnan(1.0) ? _1648 : (isnan(_1648) ? 1.0 : min(_1648, 1.0));
    uint _1672 = _1635 | 1u;
    float _1683 = dot(vec3(cbLight._m0[_1635].xyz), vec3(_395, _396, _397));
    float _1686 = dot(vec3(cbLight._m0[_1672].xyz), vec3(_395, _396, _397));
    float _3853 = isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0));
    float _3864 = isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0));
    float _1691 = (isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0))) * 0.3183098733425140380859375;
    float _1693 = (isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0))) * 0.3183098733425140380859375;
    float _1700 = ((cbLight._m0[_1652].x * _1658) * _1693) + ((cbLight._m0[_1662].x * _1668) * _1691);
    float _1701 = ((_1658 * cbLight._m0[_1652].y) * _1693) + ((_1668 * cbLight._m0[_1662].y) * _1691);
    float _1702 = ((_1658 * cbLight._m0[_1652].z) * _1693) + ((_1668 * cbLight._m0[_1662].z) * _1691);
    uvec4 _1706 = floatBitsToUint(cbLight._m0[_1635 + 12u]);
    bool _1708 = _1706.x == 0u;
    float _1719;
    float _1721;
    float _1723;
    if (_1708)
    {
        _1719 = _1700;
        _1721 = _1701;
        _1723 = _1702;
    }
    else
    {
        uint _1727 = _1635 + 6u;
        float _1743 = (dot(vec3(cbLight._m0[_1635 + 2u].xyz), vec3(_395, _396, _397)) * 0.5) + 0.5;
        float _1744 = _1743 * _1743;
        float _3875 = isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0));
        float _1745 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
        float _1746 = isnan(1.0) ? _1650 : (isnan(_1650) ? 1.0 : min(_1650, 1.0));
        _1719 = (((cbLight._m0[_1727].x * 0.3183098733425140380859375) * _1745) * _1746) + _1700;
        _1721 = (((cbLight._m0[_1727].y * 0.3183098733425140380859375) * _1745) * _1746) + _1701;
        _1723 = (((cbLight._m0[_1727].z * 0.3183098733425140380859375) * _1745) * _1746) + _1702;
    }
    bool _1726 = _1706.y == 0u;
    float _1764;
    float _1766;
    float _1768;
    if (_1726)
    {
        _1764 = _1719;
        _1766 = _1721;
        _1768 = _1723;
    }
    else
    {
        uint _1923 = _1635 + 7u;
        float _1939 = (dot(vec3(cbLight._m0[_1635 + 3u].xyz), vec3(_395, _396, _397)) * 0.5) + 0.5;
        float _1940 = _1939 * _1939;
        float _3891 = isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0));
        float _1941 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
        float _1942 = isnan(1.0) ? _1651 : (isnan(_1651) ? 1.0 : min(_1651, 1.0));
        _1764 = (((cbLight._m0[_1923].x * 0.3183098733425140380859375) * _1941) * _1942) + _1719;
        _1766 = (((cbLight._m0[_1923].y * 0.3183098733425140380859375) * _1941) * _1942) + _1721;
        _1768 = (((cbLight._m0[_1923].z * 0.3183098733425140380859375) * _1941) * _1942) + _1723;
    }
    uint _1771 = _1635 + 8u;
    float _1784 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1635].w)) * _398) * 0.949999988079071044921875);
    float _1785 = _1784 * _1784;
    float _1786 = cbLight._m0[_1635].x + _476;
    float _1787 = cbLight._m0[_1635].y + _477;
    float _1788 = cbLight._m0[_1635].z + _478;
    float _1792 = inversesqrt(dot(vec3(_1786, _1787, _1788), vec3(_1786, _1787, _1788)));
    float _1793 = _1792 * _1786;
    float _1794 = _1792 * _1787;
    float _1795 = _1792 * _1788;
    float _1796 = dot(vec3(_395, _396, _397), vec3(cbLight._m0[_1635].xyz));
    float _3907 = isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0));
    float _1799 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
    float _3918 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _1800 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
    float _1801 = dot(vec3(_395, _396, _397), vec3(_1793, _1794, _1795));
    float _3929 = isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0));
    float _1804 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
    float _1805 = dot(vec3(cbLight._m0[_1635].xyz), vec3(_1793, _1794, _1795));
    float _3940 = isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0));
    float _1809 = _1785 * _1785;
    float _1813 = ((_1804 * _1804) * (_1809 + (-1.0))) + 1.0;
    float _1824 = (exp2(log2(1.0 - (isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1825 = 1.0 - _1785;
    float _1836 = (0.5 / (((_1800 * ((_1799 * _1825) + _1785)) + 9.9999999392252902907785028219223e-09) + (((_1800 * _1825) + _1785) * _1799))) * _1799;
    float _3951 = isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0));
    float _1838 = (isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0))) * (_1809 / ((_1813 * _1813) * 3.141590118408203125));
    uint _1849 = _1635 + 9u;
    float _1860 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1672].w)) * _398) * 0.949999988079071044921875);
    float _1861 = _1860 * _1860;
    float _1862 = cbLight._m0[_1672].x + _476;
    float _1863 = cbLight._m0[_1672].y + _477;
    float _1864 = cbLight._m0[_1672].z + _478;
    float _1868 = inversesqrt(dot(vec3(_1862, _1863, _1864), vec3(_1862, _1863, _1864)));
    float _1869 = _1868 * _1862;
    float _1870 = _1868 * _1863;
    float _1871 = _1868 * _1864;
    float _1872 = dot(vec3(_395, _396, _397), vec3(cbLight._m0[_1672].xyz));
    float _3962 = isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0));
    float _1875 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
    float _1876 = dot(vec3(_395, _396, _397), vec3(_1869, _1870, _1871));
    float _3973 = isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0));
    float _1879 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
    float _1880 = dot(vec3(cbLight._m0[_1672].xyz), vec3(_1869, _1870, _1871));
    float _3984 = isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0));
    float _1884 = _1861 * _1861;
    float _1888 = ((_1879 * _1879) * (_1884 + (-1.0))) + 1.0;
    float _1897 = (exp2(log2(1.0 - (isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1898 = 1.0 - _1861;
    float _1908 = (0.5 / (((_1800 * ((_1875 * _1898) + _1861)) + 9.9999999392252902907785028219223e-09) + (((_1800 * _1898) + _1861) * _1875))) * _1875;
    float _3995 = isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0));
    float _1910 = (isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0))) * (_1884 / ((_1888 * _1888) * 3.141590118408203125));
    float _1920 = (((_1897 * cbLight._m0[_1849].x) * _1910) * _1658) + (((_1824 * cbLight._m0[_1771].x) * _1838) * _1668);
    float _1921 = (((_1897 * cbLight._m0[_1849].y) * _1910) * _1658) + (((_1824 * cbLight._m0[_1771].y) * _1838) * _1668);
    float _1922 = (((_1897 * cbLight._m0[_1849].z) * _1910) * _1658) + (((_1824 * cbLight._m0[_1771].z) * _1838) * _1668);
    float _1984;
    float _1986;
    float _1988;
    if (_1708)
    {
        _1984 = _1920;
        _1986 = _1921;
        _1988 = _1922;
    }
    else
    {
        uint _1990 = _1635 + 2u;
        uint _1994 = _1635 + 10u;
        float _2008 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1990].w)) * _398) * 0.949999988079071044921875);
        float _2009 = _2008 * _2008;
        float _2010 = cbLight._m0[_1990].x + _476;
        float _2011 = cbLight._m0[_1990].y + _477;
        float _2012 = cbLight._m0[_1990].z + _478;
        float _2016 = inversesqrt(dot(vec3(_2010, _2011, _2012), vec3(_2010, _2011, _2012)));
        float _2017 = _2016 * _2010;
        float _2018 = _2016 * _2011;
        float _2019 = _2016 * _2012;
        float _2020 = dot(vec3(_395, _396, _397), vec3(cbLight._m0[_1990].xyz));
        float _4006 = isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0));
        float _2023 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
        float _2024 = dot(vec3(_395, _396, _397), vec3(_2017, _2018, _2019));
        float _4017 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
        float _2027 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
        float _2028 = dot(vec3(cbLight._m0[_1990].xyz), vec3(_2017, _2018, _2019));
        float _4028 = isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0));
        float _2032 = _2009 * _2009;
        float _2036 = ((_2027 * _2027) * (_2032 + (-1.0))) + 1.0;
        float _2045 = (exp2(log2(1.0 - (isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2046 = 1.0 - _2009;
        float _2056 = (0.5 / (((_1800 * ((_2023 * _2046) + _2009)) + 9.9999999392252902907785028219223e-09) + (((_1800 * _2046) + _2009) * _2023))) * _2023;
        float _4039 = isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0));
        float _2058 = (isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0))) * (_2032 / ((_2036 * _2036) * 3.141590118408203125));
        float _2059 = isnan(1.0) ? _1650 : (isnan(_1650) ? 1.0 : min(_1650, 1.0));
        _1984 = (((_2045 * cbLight._m0[_1994].x) * _2058) * _2059) + _1920;
        _1986 = (((_2045 * cbLight._m0[_1994].y) * _2058) * _2059) + _1921;
        _1988 = (((_2045 * cbLight._m0[_1994].z) * _2058) * _2059) + _1922;
    }
    float _2094;
    float _2096;
    float _2098;
    if (_1726)
    {
        _2094 = _1984;
        _2096 = _1986;
        _2098 = _1988;
    }
    else
    {
        uint _2105 = _1635 + 3u;
        uint _2109 = _1635 + 11u;
        float _2123 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2105].w)) * _398) * 0.949999988079071044921875);
        float _2124 = _2123 * _2123;
        float _2125 = cbLight._m0[_2105].x + _476;
        float _2126 = cbLight._m0[_2105].y + _477;
        float _2127 = cbLight._m0[_2105].z + _478;
        float _2131 = inversesqrt(dot(vec3(_2125, _2126, _2127), vec3(_2125, _2126, _2127)));
        float _2132 = _2131 * _2125;
        float _2133 = _2131 * _2126;
        float _2134 = _2131 * _2127;
        float _2135 = dot(vec3(_395, _396, _397), vec3(cbLight._m0[_2105].xyz));
        float _4055 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
        float _2138 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
        float _2139 = dot(vec3(_395, _396, _397), vec3(_2132, _2133, _2134));
        float _4066 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
        float _2142 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
        float _2143 = dot(vec3(cbLight._m0[_2105].xyz), vec3(_2132, _2133, _2134));
        float _4077 = isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0));
        float _2147 = _2124 * _2124;
        float _2151 = ((_2142 * _2142) * (_2147 + (-1.0))) + 1.0;
        float _2160 = (exp2(log2(1.0 - (isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2161 = 1.0 - _2124;
        float _2171 = (0.5 / (((_1800 * ((_2138 * _2161) + _2124)) + 9.9999999392252902907785028219223e-09) + (((_1800 * _2161) + _2124) * _2138))) * _2138;
        float _4088 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
        float _2173 = (isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0))) * (_2147 / ((_2151 * _2151) * 3.141590118408203125));
        float _2174 = isnan(1.0) ? _1651 : (isnan(_1651) ? 1.0 : min(_1651, 1.0));
        _2094 = (((_2160 * cbLight._m0[_2109].x) * _2173) * _2174) + _1984;
        _2096 = (((_2160 * cbLight._m0[_2109].y) * _2173) * _2174) + _1986;
        _2098 = (((_2160 * cbLight._m0[_2109].z) * _2173) * _2174) + _1988;
    }
    float _2308;
    float _2310;
    float _2312;
    float _2314;
    float _2316;
    float _2318;
    if (_1633.y == 0u)
    {
        float _2249 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2250 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2249;
        float _2251 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2249;
        float _2252 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2249;
        uvec4 _2264 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2265 = _2264.x;
        uint _2276 = uint((float(_2264.y) * floor(float(uint(cbSceneParam._m0[85u].y * _498) / _2265))) + floor(float(uint(cbSceneParam._m0[85u].x * _497) / _2265)));
        float _2286 = (log2(_2252 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2287 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
        uint _2290 = uint(isnan(14.0) ? _2287 : (isnan(_2287) ? 14.0 : min(_2287, 14.0)));
        uvec4 _2295 = texelFetch(g_lightClusterGridBuffer, int(((_2290 << 2u) + (_2276 << 6u)) >> 2u));
        uint _2296 = _2295.x;
        uint _2297 = _2264.z;
        float _2396;
        float _2398;
        float _2400;
        float _2402;
        float _2404;
        float _2406;
        if (((((1u << ((_2297 >> 4u) & 15u)) + 4294967295u) & _2296) == 0u) || ((_2297 & 240u) == 0u))
        {
            _2396 = 0.0;
            _2398 = 0.0;
            _2400 = 0.0;
            _2402 = 0.0;
            _2404 = 0.0;
            _2406 = 0.0;
        }
        else
        {
            float _2397;
            float _2399;
            float _2401;
            float _2403;
            float _2405;
            float _2407;
            float _2548 = 0.0;
            float _2549 = 0.0;
            float _2550 = 0.0;
            float _2551 = 0.0;
            float _2552 = 0.0;
            float _2553 = 0.0;
            uint _2554 = 0u;
            uint _2563;
            bool _2564;
            for (;;)
            {
                _2563 = texelFetch(g_lightClassification, int((((_2290 << 5u) + (_2276 << 9u)) + (_2554 << 2u)) >> 2u)).x;
                _2564 = _2563 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2564)
                {
                    frontier_phi_68_pred = _2550;
                    frontier_phi_68_pred_1 = _2553;
                    frontier_phi_68_pred_2 = _2552;
                    frontier_phi_68_pred_3 = _2551;
                    frontier_phi_68_pred_4 = _2549;
                    frontier_phi_68_pred_5 = _2548;
                }
                else
                {
                    float _2693;
                    float _2694;
                    float _2695;
                    float _2696;
                    float _2697;
                    float _2698;
                    uint _2699;
                    _2693 = _2548;
                    _2694 = _2549;
                    _2695 = _2550;
                    _2696 = _2551;
                    _2697 = _2552;
                    _2698 = _2553;
                    _2699 = _2563;
                    float _2620;
                    float _2621;
                    float _2622;
                    float _2623;
                    float _2624;
                    float _2625;
                    for (;;)
                    {
                        uint _2703 = uint(findLSB(_2699)) + (_2554 << 5u);
                        uint _2700 = (_2699 + 4294967295u) & _2699;
                        uint _2705 = _2703 * 48u;
                        vec4 _2719 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2705)).x, texelFetch(g_PointLightRenderingBuffer, int(_2705 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2705 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2705 + 3u)).x));
                        uint _2725 = (_2703 * 48u) + 4u;
                        vec4 _2738 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2725)).x, texelFetch(g_PointLightRenderingBuffer, int(_2725 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2725 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2725 + 3u)).x));
                        uint _2744 = (_2703 * 48u) + 8u;
                        vec3 _2755 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2744)).x, texelFetch(g_PointLightRenderingBuffer, int(_2744 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2744 + 2u)).x));
                        float _2759 = _2719.x - _2250;
                        float _2760 = _2719.y - _2251;
                        float _2761 = _2719.z - _2252;
                        float _2762 = dot(vec3(_2759, _2760, _2761), vec3(_2759, _2760, _2761));
                        float _2765 = inversesqrt(_2762);
                        float _2766 = _2765 * _2759;
                        float _2767 = _2765 * _2760;
                        float _2768 = _2765 * _2761;
                        float _2769 = dot(vec3(_518, _521, _524), vec3(_2766, _2767, _2768));
                        float _2774 = 1.0 - (_2762 * _2719.w);
                        float _4114 = isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : max(_2774, 0.0));
                        float _2775 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
                        float _2776 = sqrt(_2762) * _2738.w;
                        float _2779 = 1.39999997615814208984375 / (_2776 + 1.39999997615814208984375);
                        float _2780 = _2779 * _2779;
                        float _2783 = ((1.0 - _2780) * _2769) + _2780;
                        float _2786 = _2776 * _2776;
                        float _2790 = ((isnan(0.0) ? _2783 : (isnan(_2783) ? 0.0 : max(_2783, 0.0))) * _2775) / ((_2786 * 0.699999988079071044921875) + 1.0);
                        float _2794 = (-0.0) - _2250;
                        float _2795 = (-0.0) - _2251;
                        float _2796 = (-0.0) - _2252;
                        float _2800 = inversesqrt(dot(vec3(_2794, _2795, _2796), vec3(_2794, _2795, _2796)));
                        float _2801 = _2800 * _2794;
                        float _2802 = _2800 * _2795;
                        float _2803 = _2800 * _2796;
                        float _2811 = exp2(log2(1.0 / ((_2786 * 3.5) + 5.0)) * 0.25);
                        float _2812 = 1.0 - _578;
                        float _2819 = sqrt(1.0 - ((1.0 - (_2812 * _2812)) * (1.0 - (_2811 * _2811))));
                        float _2820 = _2819 * _2819;
                        float _2821 = _2820 * _2820;
                        float _2822 = _2801 + _2766;
                        float _2823 = _2802 + _2767;
                        float _2824 = _2803 + _2768;
                        float _2828 = inversesqrt(dot(vec3(_2822, _2823, _2824), vec3(_2822, _2823, _2824)));
                        float _2832 = dot(vec3(_518, _521, _524), vec3(_2801, _2802, _2803));
                        float _4130 = isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : max(_2832, 0.0));
                        float _2835 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
                        float _2836 = dot(vec3(_518, _521, _524), vec3(_2828 * _2822, _2828 * _2823, _2828 * _2824));
                        float _4141 = isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : max(_2836, 0.0));
                        float _2839 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
                        float _2843 = ((_2839 * _2839) * (_2821 + (-1.0))) + 1.0;
                        float _2844 = _2779 * _2820;
                        float _2845 = _2844 * _2844;
                        float _2848 = ((1.0 - _2845) * _2769) + _2845;
                        float _4152 = isnan(0.0) ? _2848 : (isnan(_2848) ? 0.0 : max(_2848, 0.0));
                        float _2849 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
                        float _2850 = 1.0 - _2820;
                        float _2860 = (0.5 / (((_2849 * ((_2835 * _2850) + _2820)) + 9.9999999392252902907785028219223e-09) + (((_2849 * _2850) + _2820) * _2835))) * _2849;
                        float _4163 = isnan(0.0) ? _2860 : (isnan(_2860) ? 0.0 : max(_2860, 0.0));
                        float _2871 = (((_2821 * 3.1415927410125732421875) * (isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0)))) / ((_2843 * _2843) * ((_2786 * 2.1991131305694580078125) + 3.141590118408203125))) * _2775;
                        _2623 = (_2790 * _2738.x) + _2696;
                        _2624 = (_2790 * _2738.y) + _2697;
                        _2625 = (_2790 * _2738.z) + _2698;
                        _2620 = (_2871 * _2755.x) + _2693;
                        _2621 = (_2871 * _2755.y) + _2694;
                        _2622 = (_2871 * _2755.z) + _2695;
                        if (_2700 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2693 = _2620;
                            _2694 = _2621;
                            _2695 = _2622;
                            _2696 = _2623;
                            _2697 = _2624;
                            _2698 = _2625;
                            _2699 = _2700;
                        }
                    }
                    frontier_phi_68_pred = _2622;
                    frontier_phi_68_pred_1 = _2625;
                    frontier_phi_68_pred_2 = _2624;
                    frontier_phi_68_pred_3 = _2623;
                    frontier_phi_68_pred_4 = _2621;
                    frontier_phi_68_pred_5 = _2620;
                }
                _2401 = frontier_phi_68_pred;
                _2407 = frontier_phi_68_pred_1;
                _2405 = frontier_phi_68_pred_2;
                _2403 = frontier_phi_68_pred_3;
                _2399 = frontier_phi_68_pred_4;
                _2397 = frontier_phi_68_pred_5;
                uint _2555 = _2554 + 1u;
                if (_2555 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2548 = _2397;
                    _2549 = _2399;
                    _2550 = _2401;
                    _2551 = _2403;
                    _2552 = _2405;
                    _2553 = _2407;
                    _2554 = _2555;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2396 = _2397;
            _2398 = _2399;
            _2400 = _2401;
            _2402 = _2403;
            _2404 = _2405;
            _2406 = _2407;
        }
        uvec4 _2410 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2411 = _2410.z;
        uint _2413 = (_2411 >> 8u) & 15u;
        float _2516;
        float _2518;
        float _2520;
        float _2522;
        float _2524;
        float _2526;
        if (((4294967295u << _2413) & _2296) == 0u)
        {
            _2516 = _2396;
            _2518 = _2398;
            _2520 = _2400;
            _2522 = _2402;
            _2524 = _2404;
            _2526 = _2406;
        }
        else
        {
            float _2541 = inversesqrt(dot(vec3(_2250, _2251, _2252), vec3(_2250, _2251, _2252)));
            float _2542 = _2541 * _2250;
            float _2543 = _2541 * _2251;
            float _2544 = _2541 * _2252;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2413 < ((_2411 >> 12u) & 15u))
            {
                float _2517;
                float _2519;
                float _2521;
                float _2523;
                float _2525;
                float _2527;
                float _2676 = _2396;
                float _2677 = _2398;
                float _2678 = _2400;
                float _2679 = _2402;
                float _2680 = _2404;
                float _2681 = _2406;
                uint _2682 = _2413;
                uint _2691;
                bool _2692;
                for (;;)
                {
                    _2691 = texelFetch(g_lightClassification, int((((_2290 << 5u) + (_2276 << 9u)) + (_2682 << 2u)) >> 2u)).x;
                    _2692 = _2691 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2692)
                    {
                        frontier_phi_79_pred = _2681;
                        frontier_phi_79_pred_1 = _2680;
                        frontier_phi_79_pred_2 = _2679;
                        frontier_phi_79_pred_3 = _2678;
                        frontier_phi_79_pred_4 = _2677;
                        frontier_phi_79_pred_5 = _2676;
                    }
                    else
                    {
                        float _2885;
                        float _2886;
                        float _2887;
                        float _2888;
                        float _2889;
                        float _2890;
                        float _3181;
                        float _3182;
                        float _3183;
                        float _3184;
                        float _3185;
                        float _3186;
                        float _2898 = _2676;
                        float _2899 = _2677;
                        float _2900 = _2678;
                        float _2901 = _2679;
                        float _2902 = _2680;
                        float _2903 = _2681;
                        uint _2904 = _2691;
                        uint _2905;
                        vec4 _2930;
                        float _2931;
                        vec4 _2946;
                        vec3 _2958;
                        vec4 _2974;
                        vec4 _2990;
                        float _3037;
                        bool _3038;
                        for (;;)
                        {
                            uint _2915 = ((_2682 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2904));
                            _2905 = (_2904 + 4294967295u) & _2904;
                            uint _2917 = _2915 * 40u;
                            _2930 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2917)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2917 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2917 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2917 + 3u)).x));
                            _2931 = _2930.w;
                            uint _2933 = (_2915 * 40u) + 4u;
                            _2946 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2933)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2933 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2933 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2933 + 3u)).x));
                            uint _2948 = (_2915 * 40u) + 8u;
                            _2958 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2948)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2948 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2948 + 2u)).x));
                            uint _2961 = (_2915 * 40u) + 16u;
                            _2974 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2961)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2961 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2961 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2961 + 3u)).x));
                            uint _2977 = (_2915 * 40u) + 20u;
                            _2990 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2977)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2977 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2977 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2977 + 3u)).x));
                            uint _2993 = (_2915 * 40u) + 24u;
                            vec4 _3006 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2993)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2993 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2993 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2993 + 3u)).x));
                            uint _3012 = (_2915 * 40u) + 28u;
                            vec4 _3025 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3012)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3012 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3012 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3012 + 3u)).x));
                            _3037 = fma(_2252, _3025.z, fma(_2251, _3025.y, _3025.x * _2250)) + _3025.w;
                            _3038 = !((fma(_2252, _3006.z, fma(_2251, _3006.y, _3006.x * _2250)) + _3006.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3038)
                            {
                                float _3065 = _2930.x - _2250;
                                float _3066 = _2930.y - _2251;
                                float _3067 = _2930.z - _2252;
                                float _3068 = dot(vec3(_3065, _3066, _3067), vec3(_3065, _3066, _3067));
                                float _3071 = inversesqrt(_3068);
                                float _3072 = _3071 * _3065;
                                float _3073 = _3071 * _3066;
                                float _3074 = _3071 * _3067;
                                float _3078 = 1.0 - (_3068 / (_2931 * _2931));
                                float _4174 = isnan(0.0) ? _3078 : (isnan(_3078) ? 0.0 : max(_3078, 0.0));
                                float _3079 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
                                float _3083 = sqrt(_3068) * _2946.w;
                                float _3085 = 1.39999997615814208984375 / (_3083 + 1.39999997615814208984375);
                                float _3086 = _3085 * _3085;
                                float _3089 = ((1.0 - _3086) * dot(vec3(_3072, _3073, _3074), vec3(_518, _521, _524))) + _3086;
                                float _3092 = _3083 * _3083;
                                float _3096 = (fma(_2252, _2974.z, fma(_2251, _2974.y, _2974.x * _2250)) + _2974.w) / _3037;
                                float _3097 = (fma(_2252, _2990.z, fma(_2251, _2990.y, _2990.x * _2250)) + _2990.w) / _3037;
                                float _3101 = 1.0 - dot(vec2(_3096, _3097), vec2(_3096, _3097));
                                float _4190 = isnan(0.0) ? _3101 : (isnan(_3101) ? 0.0 : max(_3101, 0.0));
                                float _3102 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
                                float _3103 = _3102 * (((isnan(0.0) ? _3089 : (isnan(_3089) ? 0.0 : max(_3089, 0.0))) * _3079) / ((_3092 * 0.699999988079071044921875) + 1.0));
                                float _3115 = exp2(log2(1.0 / ((_3092 * 3.5) + 5.0)) * 0.25);
                                float _3116 = 1.0 - _578;
                                float _3123 = sqrt(1.0 - ((1.0 - (_3116 * _3116)) * (1.0 - (_3115 * _3115))));
                                float _3124 = _3123 * _3123;
                                float _3125 = _3124 * _3124;
                                float _3126 = _3072 - _2542;
                                float _3127 = _3073 - _2543;
                                float _3128 = _3074 - _2544;
                                float _3132 = inversesqrt(dot(vec3(_3126, _3127, _3128), vec3(_3126, _3127, _3128)));
                                float _3136 = dot(vec3(_518, _521, _524), vec3((-0.0) - _2542, (-0.0) - _2543, (-0.0) - _2544));
                                float _4201 = isnan(0.0) ? _3136 : (isnan(_3136) ? 0.0 : max(_3136, 0.0));
                                float _3139 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
                                float _3140 = dot(vec3(_518, _521, _524), vec3(_3132 * _3126, _3132 * _3127, _3132 * _3128));
                                float _4212 = isnan(0.0) ? _3140 : (isnan(_3140) ? 0.0 : max(_3140, 0.0));
                                float _3143 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
                                float _3147 = ((_3143 * _3143) * (_3125 + (-1.0))) + 1.0;
                                float _3148 = _3085 * _3124;
                                float _3149 = _3148 * _3148;
                                float _3155 = ((1.0 - _3149) * dot(vec3(_518, _521, _524), vec3(_3072, _3073, _3074))) + _3149;
                                float _4223 = isnan(0.0) ? _3155 : (isnan(_3155) ? 0.0 : max(_3155, 0.0));
                                float _3156 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
                                float _3157 = 1.0 - _3124;
                                float _3167 = (0.5 / (((_3156 * ((_3139 * _3157) + _3124)) + 9.9999999392252902907785028219223e-09) + (((_3156 * _3157) + _3124) * _3139))) * _3156;
                                float _4234 = isnan(0.0) ? _3167 : (isnan(_3167) ? 0.0 : max(_3167, 0.0));
                                float _3177 = (_3102 * _3079) * (((_3125 * 3.1415927410125732421875) * (isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0)))) / ((_3147 * _3147) * ((_3092 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3103 * _2946.z;
                                frontier_phi_85_pred_1 = _3103 * _2946.y;
                                frontier_phi_85_pred_2 = _3103 * _2946.x;
                                frontier_phi_85_pred_3 = _3177 * _2958.z;
                                frontier_phi_85_pred_4 = _3177 * _2958.y;
                                frontier_phi_85_pred_5 = _3177 * _2958.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3186 = frontier_phi_85_pred;
                            _3185 = frontier_phi_85_pred_1;
                            _3184 = frontier_phi_85_pred_2;
                            _3183 = frontier_phi_85_pred_3;
                            _3182 = frontier_phi_85_pred_4;
                            _3181 = frontier_phi_85_pred_5;
                            _2888 = _3184 + _2901;
                            _2889 = _3185 + _2902;
                            _2890 = _3186 + _2903;
                            _2885 = _3181 + _2898;
                            _2886 = _3182 + _2899;
                            _2887 = _3183 + _2900;
                            if (_2905 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2898 = _2885;
                                _2899 = _2886;
                                _2900 = _2887;
                                _2901 = _2888;
                                _2902 = _2889;
                                _2903 = _2890;
                                _2904 = _2905;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2890;
                        frontier_phi_79_pred_1 = _2889;
                        frontier_phi_79_pred_2 = _2888;
                        frontier_phi_79_pred_3 = _2887;
                        frontier_phi_79_pred_4 = _2886;
                        frontier_phi_79_pred_5 = _2885;
                    }
                    _2527 = frontier_phi_79_pred;
                    _2525 = frontier_phi_79_pred_1;
                    _2523 = frontier_phi_79_pred_2;
                    _2521 = frontier_phi_79_pred_3;
                    _2519 = frontier_phi_79_pred_4;
                    _2517 = frontier_phi_79_pred_5;
                    uint _2683 = _2682 + 1u;
                    if (_2683 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2676 = _2517;
                        _2677 = _2519;
                        _2678 = _2521;
                        _2679 = _2523;
                        _2680 = _2525;
                        _2681 = _2527;
                        _2682 = _2683;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2523;
                frontier_phi_60_61_ladder_1 = _2527;
                frontier_phi_60_61_ladder_2 = _2525;
                frontier_phi_60_61_ladder_3 = _2521;
                frontier_phi_60_61_ladder_4 = _2519;
                frontier_phi_60_61_ladder_5 = _2517;
            }
            else
            {
                frontier_phi_60_61_ladder = _2402;
                frontier_phi_60_61_ladder_1 = _2406;
                frontier_phi_60_61_ladder_2 = _2404;
                frontier_phi_60_61_ladder_3 = _2400;
                frontier_phi_60_61_ladder_4 = _2398;
                frontier_phi_60_61_ladder_5 = _2396;
            }
            _2516 = frontier_phi_60_61_ladder_5;
            _2518 = frontier_phi_60_61_ladder_4;
            _2520 = frontier_phi_60_61_ladder_3;
            _2522 = frontier_phi_60_61_ladder;
            _2524 = frontier_phi_60_61_ladder_2;
            _2526 = frontier_phi_60_61_ladder_1;
        }
        float _2531 = isnan(1.0) ? _562 : (isnan(_562) ? 1.0 : min(_562, 1.0));
        _2308 = (_2531 * _2522) + _1764;
        _2310 = (_2531 * _2524) + _1766;
        _2312 = (_2531 * _2526) + _1768;
        _2314 = ((_2516 * 0.039999999105930328369140625) * _2531) + _2094;
        _2316 = ((_2518 * 0.039999999105930328369140625) * _2531) + _2096;
        _2318 = ((_2520 * 0.039999999105930328369140625) * _2531) + _2098;
    }
    else
    {
        _2308 = _1764;
        _2310 = _1766;
        _2312 = _1768;
        _2314 = _2094;
        _2316 = _2096;
        _2318 = _2098;
    }
    float _4250 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _4261 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _4272 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _2335 = ((isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0))) * (_2308 + ((isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0))) * _562))) + ((_2314 + ((isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0))) * _1401)) * cbPerFrame._m0[3u].x);
    float _2336 = ((isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0))) * (_2310 + ((isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0))) * _562))) + ((_2316 + ((isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0))) * _1401)) * cbPerFrame._m0[3u].x);
    float _2337 = ((isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0))) * (_2312 + ((isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0))) * _562))) + ((_2318 + ((isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0))) * _1401)) * cbPerFrame._m0[3u].x);
    uint _2338 = _537 + 6u;
    float _2346 = _497 / cbSceneParam._m0[86u].x;
    float _2347 = _498 / cbSceneParam._m0[86u].y;
    vec4 _2361 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2346, _2347, (log2((isnan(cbSceneParam._m0[77u].w) ? _417 : (isnan(_417) ? cbSceneParam._m0[77u].w : min(_417, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2363 = _2361.x;
    float _2364 = _2361.y;
    float _2365 = _2361.z;
    float _2366 = _2361.w;
    float _2458;
    float _2460;
    float _2462;
    float _2464;
    if (_417 > cbSceneParam._m0[78u].w)
    {
        float _2421 = isnan(_417) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _417 : min(cbSceneParam._m0[80u].w, _417));
        float _2422 = _2421 / _417;
        float _2433 = _2422 * _469;
        float _2434 = _470 * _2422;
        float _2435 = (-0.0) - _2434;
        float _2436 = _2422 * _471;
        float _2438 = (cbSceneParam._m0[77u].w * _2435) / _2421;
        float _2439 = _2438 + cbSceneParam._m0[79u].w;
        float _2440 = cbSceneParam._m0[79u].w - _2434;
        float _2446 = sqrt(((_2433 * _2433) + (_2434 * _2434)) + (_2436 * _2436));
        float _2449 = (1.0 - (cbSceneParam._m0[77u].w / _2421)) * _2446;
        float _2454 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2456 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2633;
        if (abs((_2435 - _2438) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2633 = ((((_2439 > 0.0) ? exp2(_2454 * _2439) : (2.0 - exp2(_2456 * _2439))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2449;
        }
        else
        {
            float _2577 = 1.0 / cbSceneParam._m0[80u].x;
            float _2578 = isnan(_2440) ? _2439 : (isnan(_2439) ? _2440 : max(_2439, _2440));
            float _2579 = isnan(_2440) ? _2439 : (isnan(_2439) ? _2440 : min(_2439, _2440));
            float _2588 = isnan(0.0) ? _2578 : (isnan(_2578) ? 0.0 : min(_2578, 0.0));
            float _2589 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : min(_2579, 0.0));
            _2633 = ((abs(_2446 / _2435) * cbSceneParam._m0[80u].y) * ((((_2588 - _2589) * 2.0) - ((exp2(_2454 * (isnan(0.0) ? _2578 : (isnan(_2578) ? 0.0 : max(_2578, 0.0)))) - exp2(_2454 * (isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0))))) * _2577)) - ((exp2(_2456 * _2588) - exp2(_2456 * _2589)) * _2577))) + (_2449 * cbSceneParam._m0[80u].z);
        }
        vec4 _2635 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2346, _2347, 1.0), 0.0);
        float _2644 = exp2((_2633 * (-1.44269502162933349609375)) * (1.0 - _2635.w));
        float _2645 = log2(_2644);
        float _2661 = log2(_2366);
        _2458 = (exp2(_2661 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2645 * cbSceneParam._m0[78u].x)) * _2635.x) / cbSceneParam._m0[78u].x)) + _2363;
        _2460 = (exp2(_2661 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2645 * cbSceneParam._m0[78u].y)) * _2635.y) / cbSceneParam._m0[78u].y)) + _2364;
        _2462 = (exp2(_2661 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2645 * cbSceneParam._m0[78u].z)) * _2635.z) / cbSceneParam._m0[78u].z)) + _2365;
        _2464 = _2644 * _2366;
    }
    else
    {
        _2458 = _2363;
        _2460 = _2364;
        _2462 = _2365;
        _2464 = _2366;
    }
    bool _2671;
    vec4 _2474;
    vec4 _2496;
    float _2498;
    float _2502;
    float _2503;
    float _2504;
    float _2505;
    bool _2515;
    for (;;)
    {
        _2474 = cbMatDynParam._m0[0u];
        float _2476 = roundEven(_2474.y);
        bool _2477 = _2476 == 3.0;
        float _2478 = log2(_2464);
        float _2485 = exp2(_2478 * cbSceneParam._m0[78u].x) * _2335;
        float _2486 = exp2(_2478 * cbSceneParam._m0[78u].y) * _2336;
        float _2487 = exp2(_2478 * cbSceneParam._m0[78u].z) * _2337;
        float _2494 = _485 + (-0.5);
        _2496 = cbMtdParam._m0[1u];
        _2498 = _2496.y * _2494;
        float _2501 = (_2476 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2502 = _2501 * (_2477 ? _2485 : (_2485 + (cbSceneParam._m0[72u].w * _2458)));
        _2503 = _2501 * (_2477 ? _2486 : (_2486 + (cbSceneParam._m0[72u].w * _2460)));
        _2504 = _2501 * (_2477 ? _2487 : (_2487 + (cbSceneParam._m0[72u].w * _2462)));
        _2505 = _2494 * 0.999000012874603271484375;
        _2515 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2515)
        {
            if ((cbInstanceData._m0[_537 + 7u].x + _2505) < 0.5)
            {
                _2671 = true;
                break;
            }
        }
        uint _2612 = _538 + uint(_2474.w);
        if ((cbInstanceData._m0[_2612].w < 1.0) && ((cbInstanceData._m0[_2612].w + _2505) < 0.5))
        {
            _2671 = true;
            break;
        }
        if ((_2498 + _248) < _2496.x)
        {
            _2671 = true;
            break;
        }
        _2671 = false;
        break;
    }
    float _2876;
    if (_2671)
    {
        discard_state = true;
        _2876 = 0.0;
    }
    else
    {
        _2876 = cbInstanceData._m0[_2338].w;
    }
    SV_Target.x = _2502;
    SV_Target.y = _2503;
    SV_Target.z = _2504;
    SV_Target.w = _2876;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2338].w;
    discard_exit();
}


