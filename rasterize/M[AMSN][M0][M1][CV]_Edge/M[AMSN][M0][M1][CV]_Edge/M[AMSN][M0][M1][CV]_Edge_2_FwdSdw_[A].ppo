#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _967;
float _3617;
float _3618;
float _3619;
float _3620;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _196 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _197 = _196 * _188;
    float _198 = _196 * _189;
    float _199 = _196 * _190;
    float _203 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _204 = _203 * NORMAL.x;
    float _205 = _203 * NORMAL.y;
    float _206 = _203 * NORMAL.z;
    float _210 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _211 = _210 * TANGENT.x;
    float _212 = _210 * TANGENT.y;
    float _213 = _210 * TANGENT.z;
    float _218;
    float _219;
    float _220;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _218 = (-0.0) - _204;
        _219 = (-0.0) - _205;
        _220 = (-0.0) - _206;
    }
    else
    {
        _218 = _204;
        _219 = _205;
        _220 = _206;
    }
    vec4 _246 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _252 = _246.w;
    float _253 = _246.x * cbMtdParam._m0[9u].x;
    float _254 = _246.y * cbMtdParam._m0[9u].y;
    float _255 = _246.z * cbMtdParam._m0[9u].z;
    vec4 _273 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _277 = _273.z;
    float _281 = (_273.x * 2.0) + (-1.0);
    float _283 = (_273.y * 2.0) + (-1.0);
    float _284 = dot(vec2(_281, _283), vec2(_281, _283));
    float _3629 = isnan(0.0) ? _284 : (isnan(_284) ? 0.0 : max(_284, 0.0));
    float _290 = sqrt(1.0 - (isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0))));
    float _293 = fma(_290, _218, fma(_283, _211, _281 * _197));
    float _296 = fma(_290, _219, fma(_283, _212, _281 * _198));
    float _299 = fma(_290, _220, fma(_283, _213, _281 * _199));
    float _303 = inversesqrt(dot(vec3(_293, _296, _299), vec3(_293, _296, _299)));
    float _332 = (cbMtdParam._m0[12u].x + dot(vec4(_303 * _293, _303 * _296, _303 * _299, 0.0), vec4(cbMtdParam._m0[13u].xyz, 0.0))) - (texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w)).x * cbMtdParam._m0[12u].y);
    float _3640 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    float _333 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
    float _340 = (_333 * (cbMtdParam._m0[10u].x - _253)) + _253;
    float _341 = (_333 * (cbMtdParam._m0[10u].y - _254)) + _254;
    float _342 = (_333 * (cbMtdParam._m0[10u].z - _255)) + _255;
    vec4 _354 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _361 = (_354.x * 2.0) + (-1.0);
    float _362 = (_354.y * 2.0) + (-1.0);
    float _363 = dot(vec2(_361, _362), vec2(_361, _362));
    float _3651 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    float _371 = ((_354.z - _277) * _333) + _277;
    float _383 = (((_361 - _281) + (cbMtdParam._m0[12u].w * _281)) * _333) + _281;
    float _384 = (((_362 - _283) + (cbMtdParam._m0[12u].w * _283)) * _333) + _283;
    float _385 = ((sqrt(1.0 - (isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0)))) - _290) * _333) + _290;
    float _388 = fma(_385, _218, fma(_384, _211, _383 * _197));
    float _391 = fma(_385, _219, fma(_384, _212, _383 * _198));
    float _394 = fma(_385, _220, fma(_384, _213, _383 * _199));
    float _398 = inversesqrt(dot(vec3(_388, _391, _394), vec3(_388, _391, _394)));
    float _399 = _398 * _388;
    float _400 = _398 * _391;
    float _401 = _398 * _394;
    float _3662 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _402 = isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0));
    float _3673 = isnan(0.0) ? _340 : (isnan(_340) ? 0.0 : max(_340, 0.0));
    float _3684 = isnan(0.0) ? _341 : (isnan(_341) ? 0.0 : max(_341, 0.0));
    float _3695 = isnan(0.0) ? _342 : (isnan(_342) ? 0.0 : max(_342, 0.0));
    float _421 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _463 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _473 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _463);
    float _474 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _463);
    float _475 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _463);
    float _479 = inversesqrt(dot(vec3(_473, _474, _475), vec3(_473, _474, _475)));
    float _480 = _473 * _479;
    float _481 = _474 * _479;
    float _482 = _475 * _479;
    vec4 _487 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _489 = _487.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _646 = sqrt(((_473 * _473) + (_474 * _474)) + (_475 * _475));
        float _652 = (cbMatDynParam._m0[5u].x * _646) + cbMatDynParam._m0[5u].y;
        float _3706 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
        float _653 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
        float _657 = (cbMatDynParam._m0[5u].z * _646) + cbMatDynParam._m0[5u].w;
        float _3717 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0))) - _653)) + _653) < ((_489 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _501 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _502 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _522 = fma(_401, cbSceneParam._m0[5u].z, fma(_400, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _399));
    float _525 = fma(_401, cbSceneParam._m0[6u].z, fma(_400, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _399));
    float _528 = fma(_401, cbSceneParam._m0[7u].z, fma(_400, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _399));
    uint _541 = uint(roundEven(NORMAL.w)) * 13u;
    uint _542 = _541 + 9u;
    uint _543 = _542 + uint(cbMatDynParam._m0[0u].w);
    float _549 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0)))) * cbInstanceData._m0[_543].x;
    float _550 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0)))) * cbInstanceData._m0[_543].y;
    float _551 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0)))) * cbInstanceData._m0[_543].z;
    float _3728 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _552 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
    float _3739 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _553 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
    float _3750 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
    float _554 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
    vec4 _563 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _501, cbSceneParam._m0[86u].y * _502));
    float _566 = _563.x * TEXCOORD_3.w;
    float _567 = dot(vec3(_399, _400, _401), vec3(_480, _481, _482));
    float _570 = _567 * 2.0;
    float _574 = (_570 * _399) - _480;
    float _575 = (_570 * _400) - _481;
    float _576 = (_570 * _401) - _482;
    float _580 = abs(dot(vec3(_480, _481, _482), vec3(_399, _400, _401)));
    float _3761 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _582 = sqrt(_402);
    float _595 = exp2((_582 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_582 * 3.0));
    float _627 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _631 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _635 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _966;
    float _968;
    float _969;
    float _970;
    float _971;
    float _972;
    float _973;
    float _974;
    float _975;
    float _976;
    float _977;
    float _978;
    float _979;
    float _980;
    float _981;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _691 = fma(_635, cbModelParam._m0[26u].z, fma(_631, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _627));
        float _695 = fma(_635, cbModelParam._m0[27u].z, fma(_631, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _627));
        float _699 = fma(_635, cbModelParam._m0[28u].z, fma(_631, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _627));
        float _724 = _627 + _399;
        float _725 = _631 + _400;
        float _726 = _635 + _401;
        float _736 = fma(_726, cbModelParam._m0[26u].z, fma(_725, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _724)) - _691;
        float _737 = fma(_726, cbModelParam._m0[27u].z, fma(_725, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _724)) - _695;
        float _738 = fma(_726, cbModelParam._m0[28u].z, fma(_725, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _724)) - _699;
        float _742 = inversesqrt(dot(vec3(_736, _737, _738), vec3(_736, _737, _738)));
        float _755 = ((_742 * _736) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_691 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _756 = ((_742 * _737) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_695 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _757 = ((_742 * _738) / cbModelParam._m0[34u].z) + ((((((_699 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _760 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_755, _756, _757), 0.0);
        vec4 _767 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_755, _756, _757), 0.0);
        vec4 _774 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_755, _756, _757), 0.0);
        vec4 _781 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_755, _756, _757), 0.0);
        float _794 = exp2((_760.w + (-0.5)) * 20.0) * 2.0;
        float _795 = _794 * (_760.x + (-0.5));
        float _796 = _794 * (_760.y + (-0.5));
        float _797 = _794 * (_760.z + (-0.5));
        float _804 = exp2((_767.w + (-0.5)) * 20.0) * 2.0;
        float _805 = _804 * (_767.x + (-0.5));
        float _806 = _804 * (_767.y + (-0.5));
        float _807 = _804 * (_767.z + (-0.5));
        float _814 = exp2((_774.w + (-0.5)) * 20.0) * 2.0;
        float _815 = _814 * (_774.x + (-0.5));
        float _816 = _814 * (_774.y + (-0.5));
        float _817 = _814 * (_774.z + (-0.5));
        float _824 = exp2((_781.w + (-0.5)) * 20.0) * 2.0;
        float _825 = _824 * (_781.x + (-0.5));
        float _826 = _824 * (_781.y + (-0.5));
        float _827 = _824 * (_781.z + (-0.5));
        float _828 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
        float _829 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
        float _830 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
        float _831 = _795 * 0.5;
        float _832 = _805 * 0.5;
        float _833 = _815 * 0.5;
        float _834 = dot(vec3(_831, _832, _833), vec3(_831, _832, _833));
        float _839 = (_834 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_834);
        float _848 = (dot(vec3(_399, _400, _401), vec3(_839 * _831, _839 * _832, _839 * _833)) + 1.0) * 0.5;
        float _3787 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
        float _858 = sqrt(((_832 * _832) + (_831 * _831)) + (_833 * _833)) / (_828 + 9.9999997473787516355514526367188e-06);
        float _3798 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
        float _859 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
        float _860 = _859 * 2.0;
        float _864 = (1.0 - _859) / (_859 + 1.0);
        float _3809 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
        float _865 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
        float _874 = ((((1.0 - _865) * (_860 + 2.0)) * exp2(log2(isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0))) * (_860 + 1.0))) + _865) * _828;
        float _875 = _796 * 0.5;
        float _876 = _806 * 0.5;
        float _877 = _816 * 0.5;
        float _878 = dot(vec3(_875, _876, _877), vec3(_875, _876, _877));
        float _883 = (_878 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_878);
        float _891 = (dot(vec3(_399, _400, _401), vec3(_883 * _875, _883 * _876, _883 * _877)) + 1.0) * 0.5;
        float _3820 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
        float _900 = sqrt(((_876 * _876) + (_875 * _875)) + (_877 * _877)) / (_829 + 9.9999997473787516355514526367188e-06);
        float _3831 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
        float _901 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
        float _902 = _901 * 2.0;
        float _906 = (1.0 - _901) / (_901 + 1.0);
        float _3842 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
        float _907 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
        float _916 = ((((1.0 - _907) * (_902 + 2.0)) * exp2(log2(isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0))) * (_902 + 1.0))) + _907) * _829;
        float _917 = _797 * 0.5;
        float _918 = _807 * 0.5;
        float _919 = _817 * 0.5;
        float _920 = dot(vec3(_917, _918, _919), vec3(_917, _918, _919));
        float _925 = (_920 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_920);
        float _933 = (dot(vec3(_399, _400, _401), vec3(_925 * _917, _925 * _918, _925 * _919)) + 1.0) * 0.5;
        float _3853 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
        float _942 = sqrt(((_918 * _918) + (_917 * _917)) + (_919 * _919)) / (_830 + 9.9999997473787516355514526367188e-06);
        float _3864 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _943 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
        float _944 = _943 * 2.0;
        float _948 = (1.0 - _943) / (_943 + 1.0);
        float _3875 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _949 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
        float _958 = ((((1.0 - _949) * (_944 + 2.0)) * exp2(log2(isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0))) * (_944 + 1.0))) + _949) * _830;
        _966 = _797;
        _968 = _796;
        _969 = _795;
        _970 = _807;
        _971 = _806;
        _972 = _805;
        _973 = _817;
        _974 = _816;
        _975 = _815;
        _976 = _830;
        _977 = _829;
        _978 = _828;
        _979 = cbModelParam._m0[36u].z * (isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0)));
        _980 = cbModelParam._m0[36u].z * (isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0)));
        _981 = cbModelParam._m0[36u].z * (isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0)));
    }
    else
    {
        _966 = _967;
        _968 = _967;
        _969 = _967;
        _970 = _967;
        _971 = _967;
        _972 = _967;
        _973 = _967;
        _974 = _967;
        _975 = _967;
        _976 = _967;
        _977 = _967;
        _978 = _967;
        _979 = 0.0;
        _980 = 0.0;
        _981 = 0.0;
    }
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1010 = fma(_635, cbModelParam._m0[30u].z, fma(_631, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _627));
        float _1014 = fma(_635, cbModelParam._m0[31u].z, fma(_631, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _627));
        float _1018 = fma(_635, cbModelParam._m0[32u].z, fma(_631, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _627));
        float _1041 = _627 + _399;
        float _1042 = _631 + _400;
        float _1043 = _635 + _401;
        float _1053 = fma(_1043, cbModelParam._m0[30u].z, fma(_1042, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1041)) - _1010;
        float _1054 = fma(_1043, cbModelParam._m0[31u].z, fma(_1042, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1041)) - _1014;
        float _1055 = fma(_1043, cbModelParam._m0[32u].z, fma(_1042, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1041)) - _1018;
        float _1059 = inversesqrt(dot(vec3(_1053, _1054, _1055), vec3(_1053, _1054, _1055)));
        float _1072 = ((_1059 * _1053) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1010 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1073 = ((_1059 * _1054) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1014 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1074 = ((_1059 * _1055) / cbModelParam._m0[35u].z) + ((((((_1018 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1076 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1072, _1073, _1074), 0.0);
        vec4 _1083 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1072, _1073, _1074), 0.0);
        vec4 _1090 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1072, _1073, _1074), 0.0);
        vec4 _1097 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1072, _1073, _1074), 0.0);
        float _1109 = exp2((_1076.w + (-0.5)) * 20.0) * 2.0;
        float _1110 = _1109 * (_1076.x + (-0.5));
        float _1111 = _1109 * (_1076.y + (-0.5));
        float _1112 = _1109 * (_1076.z + (-0.5));
        float _1119 = exp2((_1083.w + (-0.5)) * 20.0) * 2.0;
        float _1120 = _1119 * (_1083.x + (-0.5));
        float _1121 = _1119 * (_1083.y + (-0.5));
        float _1122 = _1119 * (_1083.z + (-0.5));
        float _1129 = exp2((_1090.w + (-0.5)) * 20.0) * 2.0;
        float _1130 = _1129 * (_1090.x + (-0.5));
        float _1131 = _1129 * (_1090.y + (-0.5));
        float _1132 = _1129 * (_1090.z + (-0.5));
        float _1139 = exp2((_1097.w + (-0.5)) * 20.0) * 2.0;
        float _1140 = _1139 * (_1097.x + (-0.5));
        float _1141 = _1139 * (_1097.y + (-0.5));
        float _1142 = _1139 * (_1097.z + (-0.5));
        float _1143 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1144 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1145 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1146 = _1110 * 0.5;
        float _1147 = _1120 * 0.5;
        float _1148 = _1130 * 0.5;
        float _1149 = dot(vec3(_1146, _1147, _1148), vec3(_1146, _1147, _1148));
        float _1154 = (_1149 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1149);
        float _1162 = (dot(vec3(_399, _400, _401), vec3(_1154 * _1146, _1154 * _1147, _1154 * _1148)) + 1.0) * 0.5;
        float _3916 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1171 = sqrt(((_1147 * _1147) + (_1146 * _1146)) + (_1148 * _1148)) / (_1143 + 9.9999997473787516355514526367188e-06);
        float _3927 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1172 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
        float _1173 = _1172 * 2.0;
        float _1177 = (1.0 - _1172) / (_1172 + 1.0);
        float _3938 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1178 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
        float _1187 = ((((1.0 - _1178) * (_1173 + 2.0)) * exp2(log2(isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0))) * (_1173 + 1.0))) + _1178) * _1143;
        float _1188 = _1111 * 0.5;
        float _1189 = _1121 * 0.5;
        float _1190 = _1131 * 0.5;
        float _1191 = dot(vec3(_1188, _1189, _1190), vec3(_1188, _1189, _1190));
        float _1196 = (_1191 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1191);
        float _1204 = (dot(vec3(_399, _400, _401), vec3(_1196 * _1188, _1196 * _1189, _1196 * _1190)) + 1.0) * 0.5;
        float _3949 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1213 = sqrt(((_1189 * _1189) + (_1188 * _1188)) + (_1190 * _1190)) / (_1144 + 9.9999997473787516355514526367188e-06);
        float _3960 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1214 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
        float _1215 = _1214 * 2.0;
        float _1219 = (1.0 - _1214) / (_1214 + 1.0);
        float _3971 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1220 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
        float _1229 = ((((1.0 - _1220) * (_1215 + 2.0)) * exp2(log2(isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0))) * (_1215 + 1.0))) + _1220) * _1144;
        float _1230 = _1112 * 0.5;
        float _1231 = _1122 * 0.5;
        float _1232 = _1132 * 0.5;
        float _1233 = dot(vec3(_1230, _1231, _1232), vec3(_1230, _1231, _1232));
        float _1238 = (_1233 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1233);
        float _1246 = (dot(vec3(_399, _400, _401), vec3(_1238 * _1230, _1238 * _1231, _1238 * _1232)) + 1.0) * 0.5;
        float _3982 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1255 = sqrt(((_1231 * _1231) + (_1230 * _1230)) + (_1232 * _1232)) / (_1145 + 9.9999997473787516355514526367188e-06);
        float _3993 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1256 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
        float _1257 = _1256 * 2.0;
        float _1261 = (1.0 - _1256) / (_1256 + 1.0);
        float _4004 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1262 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
        float _1271 = ((((1.0 - _1262) * (_1257 + 2.0)) * exp2(log2(isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0))) * (_1257 + 1.0))) + _1262) * _1145;
        _1279 = _1112;
        _1280 = _1111;
        _1281 = _1110;
        _1282 = _1122;
        _1283 = _1121;
        _1284 = _1120;
        _1285 = _1132;
        _1286 = _1131;
        _1287 = _1130;
        _1288 = _1145;
        _1289 = _1144;
        _1290 = _1143;
        _1291 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0)));
        _1292 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0)));
        _1293 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0)));
    }
    else
    {
        _1279 = _967;
        _1280 = _967;
        _1281 = _967;
        _1282 = _967;
        _1283 = _967;
        _1284 = _967;
        _1285 = _967;
        _1286 = _967;
        _1287 = _967;
        _1288 = _967;
        _1289 = _967;
        _1290 = _967;
        _1291 = 0.0;
        _1292 = 0.0;
        _1293 = 0.0;
    }
    float _1303 = (cbModelParam._m0[1u].x * (_1291 - _979)) + _979;
    float _1304 = (cbModelParam._m0[1u].x * (_1292 - _980)) + _980;
    float _1305 = (cbModelParam._m0[1u].x * (_1293 - _981)) + _981;
    float _1326 = fma(_1305, cbSceneParam._m0[89u].z, fma(_1304, cbSceneParam._m0[89u].y, _1303 * cbSceneParam._m0[89u].x));
    float _1329 = fma(_1305, cbSceneParam._m0[90u].z, fma(_1304, cbSceneParam._m0[90u].y, _1303 * cbSceneParam._m0[90u].x));
    float _1332 = fma(_1305, cbSceneParam._m0[91u].z, fma(_1304, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1303));
    float _1347 = _574 * 0.5;
    float _1348 = _575 * 0.5;
    float _1349 = _576 * 0.5;
    float _1350 = dot(vec4(_1347, _1348, _1349, 1.0), vec4(_1281, _1284, _1287, _1290));
    float _1353 = dot(vec4(_1347, _1348, _1349, 1.0), vec4(_1280, _1283, _1286, _1289));
    float _1356 = dot(vec4(_1347, _1348, _1349, 1.0), vec4(_1279, _1282, _1285, _1288));
    float _1390;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1363 = dot(vec4(_1347, _1348, _1349, 1.0), vec4(_966, _970, _973, _976));
        float _1367 = dot(vec4(_1347, _1348, _1349, 1.0), vec4(_968, _971, _974, _977));
        float _1371 = dot(vec4(_1347, _1348, _1349, 1.0), vec4(_969, _972, _975, _978));
        float _1378 = dot(vec4(cbModelParam._m0[39u]), vec4(_1347, _1348, _1349, 1.0));
        _1390 = dot(vec3(isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0)), isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0)), isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1378) ? 0.0 : (isnan(0.0) ? _1378 : max(0.0, _1378))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1390 = 1.0;
    }
    float _1401;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1392 = dot(vec4(cbModelParam._m0[40u]), vec4(_1347, _1348, _1349, 1.0));
        _1401 = dot(vec3(isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0)), isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0)), isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1392) ? 0.0 : (isnan(0.0) ? _1392 : max(0.0, _1392))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1401 = 1.0;
    }
    float _1405 = (_1401 * cbModelParam._m0[1u].x) + (_1390 * (1.0 - cbModelParam._m0[1u].x));
    float _1415 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _402);
    float _1416 = isnan(_1415) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1415 : min(cbModelParam._m0[25u].z, _1415));
    float _1497;
    float _1499;
    float _1501;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1464 = fma(_635, cbModelParam._m0[13u].z, fma(_631, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _627)) + cbModelParam._m0[13u].w;
        float _1468 = fma(_635, cbModelParam._m0[14u].z, fma(_631, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _627)) + cbModelParam._m0[14u].w;
        float _1472 = fma(_635, cbModelParam._m0[15u].z, fma(_631, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _627)) + cbModelParam._m0[15u].w;
        float _1475 = fma(_576, cbModelParam._m0[13u].z, fma(_575, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _574));
        float _1478 = fma(_576, cbModelParam._m0[14u].z, fma(_575, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _574));
        float _1481 = fma(_576, cbModelParam._m0[15u].z, fma(_575, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _574));
        float _1509;
        if (_1475 > 0.0)
        {
            _1509 = abs((1.0 - _1464) / _1475);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1475 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1464 + 1.0) / _1475);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1509 = frontier_phi_19_17_ladder;
        }
        float _1682;
        if (_1478 > 0.0)
        {
            _1682 = abs((1.0 - _1468) / _1478);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1478 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1468 + 1.0) / _1478);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1682 = frontier_phi_28_24_ladder;
        }
        float _1977;
        if (_1481 > 0.0)
        {
            _1977 = abs((1.0 - _1472) / _1481);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1481 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1472 + 1.0) / _1481);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1977 = frontier_phi_40_35_ladder;
        }
        float _1979 = isnan(_1682) ? _1509 : (isnan(_1509) ? _1682 : min(_1509, _1682));
        float _1980 = isnan(_1977) ? _1979 : (isnan(_1979) ? _1977 : min(_1979, _1977));
        float _1984 = (_1980 * _1475) + _1464;
        float _1985 = (_1980 * _1478) + _1468;
        float _1986 = (_1980 * _1481) + _1472;
        float _1987 = _1980 * 9.9999997473787516355514526367188e-05;
        float _1989 = (-1.0) - _1987;
        float _1991 = _1987 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1986 > _1991) || ((_1986 < _1989) || ((_1985 > _1991) || ((_1985 < _1989) || ((_1984 < _1989) || (_1984 > _1991))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2131 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1986, cbModelParam._m0[9u].z, fma(_1985, cbModelParam._m0[9u].y, _1984 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1986, cbModelParam._m0[10u].z, fma(_1985, cbModelParam._m0[10u].y, _1984 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1986, cbModelParam._m0[11u].z, fma(_1985, cbModelParam._m0[11u].y, _1984 * cbModelParam._m0[11u].x))), _1416);
            frontier_phi_18_40_ladder = _2131.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2131.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2131.x * cbModelParam._m0[1u].y;
        }
        _1497 = frontier_phi_18_40_ladder_2;
        _1499 = frontier_phi_18_40_ladder_1;
        _1501 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1485 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_574, _575, _576), _1416);
        _1497 = _1485.x * cbModelParam._m0[1u].y;
        _1499 = _1485.y * cbModelParam._m0[1u].y;
        _1501 = _1485.z * cbModelParam._m0[1u].y;
    }
    float _1505 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _402);
    float _1506 = isnan(_1505) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1505 : min(cbModelParam._m0[25u].w, _1505));
    float _1599;
    float _1601;
    float _1603;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1563 = fma(_635, cbModelParam._m0[21u].z, fma(_631, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _627)) + cbModelParam._m0[21u].w;
        float _1567 = fma(_635, cbModelParam._m0[22u].z, fma(_631, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _627)) + cbModelParam._m0[22u].w;
        float _1571 = fma(_635, cbModelParam._m0[23u].z, fma(_631, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _627)) + cbModelParam._m0[23u].w;
        float _1574 = fma(_576, cbModelParam._m0[21u].z, fma(_575, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _574));
        float _1577 = fma(_576, cbModelParam._m0[22u].z, fma(_575, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _574));
        float _1580 = fma(_576, cbModelParam._m0[23u].z, fma(_575, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _574));
        float _1687;
        if (_1574 > 0.0)
        {
            _1687 = abs((1.0 - _1563) / _1574);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1574 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1563 + 1.0) / _1574);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1687 = frontier_phi_30_26_ladder;
        }
        float _2004;
        if (_1577 > 0.0)
        {
            _2004 = abs((1.0 - _1567) / _1577);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1577 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1567 + 1.0) / _1577);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2004 = frontier_phi_42_37_ladder;
        }
        float _2331;
        if (_1580 > 0.0)
        {
            _2331 = abs((1.0 - _1571) / _1580);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1580 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1571 + 1.0) / _1580);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2331 = frontier_phi_52_49_ladder;
        }
        float _2333 = isnan(_2004) ? _1687 : (isnan(_1687) ? _2004 : min(_1687, _2004));
        float _2334 = isnan(_2331) ? _2333 : (isnan(_2333) ? _2331 : min(_2333, _2331));
        float _2338 = (_2334 * _1574) + _1563;
        float _2339 = (_2334 * _1577) + _1567;
        float _2340 = (_2334 * _1580) + _1571;
        float _2341 = _2334 * 9.9999997473787516355514526367188e-05;
        float _2342 = (-1.0) - _2341;
        float _2344 = _2341 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2340 > _2344) || ((_2340 < _2342) || ((_2339 > _2344) || ((_2339 < _2342) || ((_2338 < _2342) || (_2338 > _2344))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2458 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2340, cbModelParam._m0[17u].z, fma(_2339, cbModelParam._m0[17u].y, _2338 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2340, cbModelParam._m0[18u].z, fma(_2339, cbModelParam._m0[18u].y, _2338 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2340, cbModelParam._m0[19u].z, fma(_2339, cbModelParam._m0[19u].y, _2338 * cbModelParam._m0[19u].x))), _1506);
            frontier_phi_27_52_ladder = _2458.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2458.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2458.x * cbModelParam._m0[1u].z;
        }
        _1599 = frontier_phi_27_52_ladder_2;
        _1601 = frontier_phi_27_52_ladder_1;
        _1603 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1583 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_574, _575, _576), _1506);
        _1599 = _1583.x * cbModelParam._m0[1u].z;
        _1601 = _1583.y * cbModelParam._m0[1u].z;
        _1603 = _1583.z * cbModelParam._m0[1u].z;
    }
    float _1615 = ((((1.0 - _595) * ((_582 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_595 * _582)) * _566;
    float _1616 = _1615 * ((cbModelParam._m0[1u].w * (_1599 - _1497)) + _1497);
    float _1617 = _1615 * ((cbModelParam._m0[1u].w * (_1601 - _1499)) + _1499);
    float _1618 = _1615 * ((cbModelParam._m0[1u].w * (_1603 - _1501)) + _1501);
    float _1621 = fma(_1618, cbSceneParam._m0[89u].z, fma(_1617, cbSceneParam._m0[89u].y, _1616 * cbSceneParam._m0[89u].x));
    float _1624 = fma(_1618, cbSceneParam._m0[90u].z, fma(_1617, cbSceneParam._m0[90u].y, _1616 * cbSceneParam._m0[90u].x));
    float _1627 = fma(_1618, cbSceneParam._m0[91u].z, fma(_1617, cbSceneParam._m0[91u].y, _1616 * cbSceneParam._m0[91u].x));
    float _1661 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1665 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1669 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1673 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1674 = _1661 / _1673;
    float _1675 = _1665 / _1673;
    float _1676 = _1669 / _1673;
    float _1823;
    float _1824;
    float _1825;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1703 = ((uint(_1676 > cbSceneParam._m0[59u].y) + uint(_1676 > cbSceneParam._m0[59u].x)) + uint(_1676 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1704 = _1703 + 43u;
        uint _1712 = _1703 + 44u;
        uint _1720 = _1703 + 45u;
        uint _1728 = _1703 + 46u;
        float _1739 = fma(_1673, cbSceneParam._m0[_1704].w, fma(_1669, cbSceneParam._m0[_1704].z, fma(_1665, cbSceneParam._m0[_1704].y, _1661 * cbSceneParam._m0[_1704].x)));
        float _1743 = fma(_1673, cbSceneParam._m0[_1712].w, fma(_1669, cbSceneParam._m0[_1712].z, fma(_1665, cbSceneParam._m0[_1712].y, _1661 * cbSceneParam._m0[_1712].x)));
        float _1751 = fma(_1673, cbSceneParam._m0[_1728].w, fma(_1669, cbSceneParam._m0[_1728].z, fma(_1665, cbSceneParam._m0[_1728].y, _1661 * cbSceneParam._m0[_1728].x)));
        float _1756 = cbSceneParam._m0[33u].z * _1751;
        float _1758 = cbSceneParam._m0[33u].w * _1751;
        float _1761 = fma(_1673, cbSceneParam._m0[_1720].w, fma(_1669, cbSceneParam._m0[_1720].z, fma(_1665, cbSceneParam._m0[_1720].y, _1661 * cbSceneParam._m0[_1720].x))) / _1751;
        float _1809 = (cbSceneParam._m0[33u].x - sqrt(((_1675 * _1675) + (_1674 * _1674)) + (_1676 * _1676))) * cbSceneParam._m0[33u].y;
        float _4130 = isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0));
        float _1816 = (isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1756 + _1739) / _1751, (_1758 + _1743) / _1751), _1761), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1758 + _1739) / _1751, (_1743 - _1756) / _1751), _1761), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1739 - _1756) / _1751, (_1743 - _1758) / _1751), _1761), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1739 - _1758) / _1751, (_1756 + _1743) / _1751), _1761), 0.0)).x), vec4(0.25)));
        _1823 = 1.0 - (_1816 * cbSceneParam._m0[34u].x);
        _1824 = 1.0 - (_1816 * cbSceneParam._m0[34u].y);
        _1825 = 1.0 - (_1816 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1823 = 1.0;
        _1824 = 1.0;
        _1825 = 1.0;
    }
    float _1889;
    float _1891;
    float _1893;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1877 = fma(_1673, cbSceneParam._m0[63u].w, fma(_1669, cbSceneParam._m0[63u].z, fma(_1665, cbSceneParam._m0[63u].y, _1661 * cbSceneParam._m0[63u].x)));
        float _1878 = fma(_1673, cbSceneParam._m0[60u].w, fma(_1669, cbSceneParam._m0[60u].z, fma(_1665, cbSceneParam._m0[60u].y, _1661 * cbSceneParam._m0[60u].x))) / _1877;
        float _1879 = fma(_1673, cbSceneParam._m0[61u].w, fma(_1669, cbSceneParam._m0[61u].z, fma(_1665, cbSceneParam._m0[61u].y, _1661 * cbSceneParam._m0[61u].x))) / _1877;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1878 >= cbSceneParam._m0[64u].x) && (_1879 >= cbSceneParam._m0[64u].y)) && (_1878 <= cbSceneParam._m0[64u].z)) && (_1879 <= cbSceneParam._m0[64u].w))
        {
            float _2017 = fma(_1673, cbSceneParam._m0[62u].w, fma(_1669, cbSceneParam._m0[62u].z, fma(_1665, cbSceneParam._m0[62u].y, _1661 * cbSceneParam._m0[62u].x))) / _1877;
            float _2021 = isnan(cbSceneParam._m0[41u].w) ? _2017 : (isnan(_2017) ? cbSceneParam._m0[41u].w : max(_2017, cbSceneParam._m0[41u].w));
            float _2064 = (cbSceneParam._m0[33u].x - sqrt(((_1675 * _1675) + (_1674 * _1674)) + (_1676 * _1676))) * cbSceneParam._m0[33u].y;
            float _4146 = isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0));
            float _2071 = (isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1878, cbSceneParam._m0[33u].w + _1879), _2021), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1878, _1879 - cbSceneParam._m0[33u].z), _2021), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1878 - cbSceneParam._m0[33u].z, _1879 - cbSceneParam._m0[33u].w), _2021), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1878 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1879), _2021), 0.0)).x), vec4(0.25)));
            float _2075 = 1.0 - (_2071 * cbSceneParam._m0[34u].x);
            float _2076 = 1.0 - (_2071 * cbSceneParam._m0[34u].y);
            float _2077 = 1.0 - (_2071 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2076) ? _1824 : (isnan(_1824) ? _2076 : min(_1824, _2076));
            frontier_phi_39_38_ladder_1 = isnan(_2075) ? _1823 : (isnan(_1823) ? _2075 : min(_1823, _2075));
            frontier_phi_39_38_ladder_2 = isnan(_2077) ? _1825 : (isnan(_1825) ? _2077 : min(_1825, _2077));
        }
        else
        {
            frontier_phi_39_38_ladder = _1824;
            frontier_phi_39_38_ladder_1 = _1823;
            frontier_phi_39_38_ladder_2 = _1825;
        }
        _1889 = frontier_phi_39_38_ladder_1;
        _1891 = frontier_phi_39_38_ladder;
        _1893 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _1889 = _1823;
        _1891 = _1824;
        _1893 = _1825;
    }
    uvec4 _1898 = floatBitsToUint(cbInstanceData._m0[_541 + 5u]);
    uint _1900 = _1898.x * 14u;
    uint _1901 = _1900 + 13u;
    float _1908 = _566 + (-1.0);
    float _1913 = (cbLight._m0[_1901].x * _1908) + 1.0;
    float _1914 = (cbLight._m0[_1901].y * _1908) + 1.0;
    float _1915 = (cbLight._m0[_1901].z * _1908) + 1.0;
    float _1916 = (cbLight._m0[_1901].w * _1908) + 1.0;
    uint _1917 = _1900 + 5u;
    float _1923 = isnan(1.0) ? _1914 : (isnan(_1914) ? 1.0 : min(_1914, 1.0));
    uint _1927 = _1900 + 4u;
    float _1936 = isnan(1.0) ? _1913 : (isnan(_1913) ? 1.0 : min(_1913, 1.0));
    uint _1940 = _1900 | 1u;
    float _1951 = dot(vec3(cbLight._m0[_1900].xyz), vec3(_399, _400, _401));
    float _1954 = dot(vec3(cbLight._m0[_1940].xyz), vec3(_399, _400, _401));
    float _4182 = isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0));
    float _4193 = isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0));
    float _1959 = (isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0))) * 0.3183098733425140380859375;
    float _1961 = (isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0))) * 0.3183098733425140380859375;
    float _1968 = ((cbLight._m0[_1917].x * _1923) * _1961) + (((cbLight._m0[_1927].x * _1889) * _1936) * _1959);
    float _1969 = ((_1923 * cbLight._m0[_1917].y) * _1961) + (((cbLight._m0[_1927].y * _1891) * _1936) * _1959);
    float _1970 = ((_1923 * cbLight._m0[_1917].z) * _1961) + (((cbLight._m0[_1927].z * _1893) * _1936) * _1959);
    uvec4 _1974 = floatBitsToUint(cbLight._m0[_1900 + 12u]);
    bool _1976 = _1974.x == 0u;
    float _2078;
    float _2080;
    float _2082;
    if (_1976)
    {
        _2078 = _1968;
        _2080 = _1969;
        _2082 = _1970;
    }
    else
    {
        uint _2086 = _1900 + 6u;
        float _2102 = (dot(vec3(cbLight._m0[_1900 + 2u].xyz), vec3(_399, _400, _401)) * 0.5) + 0.5;
        float _2103 = _2102 * _2102;
        float _4204 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
        float _2104 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
        float _2105 = isnan(1.0) ? _1915 : (isnan(_1915) ? 1.0 : min(_1915, 1.0));
        _2078 = (((cbLight._m0[_2086].x * 0.3183098733425140380859375) * _2104) * _2105) + _1968;
        _2080 = (((cbLight._m0[_2086].y * 0.3183098733425140380859375) * _2104) * _2105) + _1969;
        _2082 = (((cbLight._m0[_2086].z * 0.3183098733425140380859375) * _2104) * _2105) + _1970;
    }
    bool _2085 = _1974.y == 0u;
    float _2140;
    float _2142;
    float _2144;
    if (_2085)
    {
        _2140 = _2078;
        _2142 = _2080;
        _2144 = _2082;
    }
    else
    {
        uint _2302 = _1900 + 7u;
        float _2318 = (dot(vec3(cbLight._m0[_1900 + 3u].xyz), vec3(_399, _400, _401)) * 0.5) + 0.5;
        float _2319 = _2318 * _2318;
        float _4220 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
        float _2320 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
        float _2321 = isnan(1.0) ? _1916 : (isnan(_1916) ? 1.0 : min(_1916, 1.0));
        _2140 = (((cbLight._m0[_2302].x * 0.3183098733425140380859375) * _2320) * _2321) + _2078;
        _2142 = (((cbLight._m0[_2302].y * 0.3183098733425140380859375) * _2320) * _2321) + _2080;
        _2144 = (((cbLight._m0[_2302].z * 0.3183098733425140380859375) * _2320) * _2321) + _2082;
    }
    uint _2147 = _1900 + 8u;
    float _2160 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1900].w)) * _402) * 0.949999988079071044921875);
    float _2161 = _2160 * _2160;
    float _2162 = cbLight._m0[_1900].x + _480;
    float _2163 = cbLight._m0[_1900].y + _481;
    float _2164 = cbLight._m0[_1900].z + _482;
    float _2168 = inversesqrt(dot(vec3(_2162, _2163, _2164), vec3(_2162, _2163, _2164)));
    float _2169 = _2168 * _2162;
    float _2170 = _2168 * _2163;
    float _2171 = _2168 * _2164;
    float _2172 = dot(vec3(_399, _400, _401), vec3(cbLight._m0[_1900].xyz));
    float _4236 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
    float _2175 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
    float _4247 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _2176 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
    float _2177 = dot(vec3(_399, _400, _401), vec3(_2169, _2170, _2171));
    float _4258 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
    float _2180 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
    float _2181 = dot(vec3(cbLight._m0[_1900].xyz), vec3(_2169, _2170, _2171));
    float _4269 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
    float _2185 = _2161 * _2161;
    float _2189 = ((_2180 * _2180) * (_2185 + (-1.0))) + 1.0;
    float _2200 = (exp2(log2(1.0 - (isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2201 = 1.0 - _2161;
    float _2212 = (0.5 / (((_2176 * ((_2175 * _2201) + _2161)) + 9.9999999392252902907785028219223e-09) + (((_2176 * _2201) + _2161) * _2175))) * _2175;
    float _4280 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
    float _2214 = (isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0))) * (_2185 / ((_2189 * _2189) * 3.141590118408203125));
    uint _2228 = _1900 + 9u;
    float _2239 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1940].w)) * _402) * 0.949999988079071044921875);
    float _2240 = _2239 * _2239;
    float _2241 = cbLight._m0[_1940].x + _480;
    float _2242 = cbLight._m0[_1940].y + _481;
    float _2243 = cbLight._m0[_1940].z + _482;
    float _2247 = inversesqrt(dot(vec3(_2241, _2242, _2243), vec3(_2241, _2242, _2243)));
    float _2248 = _2247 * _2241;
    float _2249 = _2247 * _2242;
    float _2250 = _2247 * _2243;
    float _2251 = dot(vec3(_399, _400, _401), vec3(cbLight._m0[_1940].xyz));
    float _4291 = isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0));
    float _2254 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
    float _2255 = dot(vec3(_399, _400, _401), vec3(_2248, _2249, _2250));
    float _4302 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
    float _2258 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
    float _2259 = dot(vec3(cbLight._m0[_1940].xyz), vec3(_2248, _2249, _2250));
    float _4313 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
    float _2263 = _2240 * _2240;
    float _2267 = ((_2258 * _2258) * (_2263 + (-1.0))) + 1.0;
    float _2276 = (exp2(log2(1.0 - (isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2277 = 1.0 - _2240;
    float _2287 = (0.5 / (((_2176 * ((_2254 * _2277) + _2240)) + 9.9999999392252902907785028219223e-09) + (((_2176 * _2277) + _2240) * _2254))) * _2254;
    float _4324 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
    float _2289 = (isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0))) * (_2263 / ((_2267 * _2267) * 3.141590118408203125));
    float _2299 = (((_2276 * cbLight._m0[_2228].x) * _2289) * _1923) + ((((cbLight._m0[_2147].x * _1889) * _2200) * _2214) * _1936);
    float _2300 = (((_2276 * cbLight._m0[_2228].y) * _2289) * _1923) + ((((cbLight._m0[_2147].y * _1891) * _2200) * _2214) * _1936);
    float _2301 = (((_2276 * cbLight._m0[_2228].z) * _2289) * _1923) + ((((cbLight._m0[_2147].z * _1893) * _2200) * _2214) * _1936);
    float _2357;
    float _2359;
    float _2361;
    if (_1976)
    {
        _2357 = _2299;
        _2359 = _2300;
        _2361 = _2301;
    }
    else
    {
        uint _2363 = _1900 + 2u;
        uint _2367 = _1900 + 10u;
        float _2381 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2363].w)) * _402) * 0.949999988079071044921875);
        float _2382 = _2381 * _2381;
        float _2383 = cbLight._m0[_2363].x + _480;
        float _2384 = cbLight._m0[_2363].y + _481;
        float _2385 = cbLight._m0[_2363].z + _482;
        float _2389 = inversesqrt(dot(vec3(_2383, _2384, _2385), vec3(_2383, _2384, _2385)));
        float _2390 = _2389 * _2383;
        float _2391 = _2389 * _2384;
        float _2392 = _2389 * _2385;
        float _2393 = dot(vec3(_399, _400, _401), vec3(cbLight._m0[_2363].xyz));
        float _4335 = isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0));
        float _2396 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
        float _2397 = dot(vec3(_399, _400, _401), vec3(_2390, _2391, _2392));
        float _4346 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
        float _2400 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
        float _2401 = dot(vec3(cbLight._m0[_2363].xyz), vec3(_2390, _2391, _2392));
        float _4357 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
        float _2405 = _2382 * _2382;
        float _2409 = ((_2400 * _2400) * (_2405 + (-1.0))) + 1.0;
        float _2418 = (exp2(log2(1.0 - (isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2419 = 1.0 - _2382;
        float _2429 = (0.5 / (((_2176 * ((_2396 * _2419) + _2382)) + 9.9999999392252902907785028219223e-09) + (((_2176 * _2419) + _2382) * _2396))) * _2396;
        float _4368 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
        float _2431 = (isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0))) * (_2405 / ((_2409 * _2409) * 3.141590118408203125));
        float _2432 = isnan(1.0) ? _1915 : (isnan(_1915) ? 1.0 : min(_1915, 1.0));
        _2357 = (((_2418 * cbLight._m0[_2367].x) * _2431) * _2432) + _2299;
        _2359 = (((_2418 * cbLight._m0[_2367].y) * _2431) * _2432) + _2300;
        _2361 = (((_2418 * cbLight._m0[_2367].z) * _2431) * _2432) + _2301;
    }
    float _2463;
    float _2465;
    float _2467;
    if (_2085)
    {
        _2463 = _2357;
        _2465 = _2359;
        _2467 = _2361;
    }
    else
    {
        uint _2474 = _1900 + 3u;
        uint _2478 = _1900 + 11u;
        float _2492 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2474].w)) * _402) * 0.949999988079071044921875);
        float _2493 = _2492 * _2492;
        float _2494 = cbLight._m0[_2474].x + _480;
        float _2495 = cbLight._m0[_2474].y + _481;
        float _2496 = cbLight._m0[_2474].z + _482;
        float _2500 = inversesqrt(dot(vec3(_2494, _2495, _2496), vec3(_2494, _2495, _2496)));
        float _2501 = _2500 * _2494;
        float _2502 = _2500 * _2495;
        float _2503 = _2500 * _2496;
        float _2504 = dot(vec3(_399, _400, _401), vec3(cbLight._m0[_2474].xyz));
        float _4384 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
        float _2507 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
        float _2508 = dot(vec3(_399, _400, _401), vec3(_2501, _2502, _2503));
        float _4395 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
        float _2511 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
        float _2512 = dot(vec3(cbLight._m0[_2474].xyz), vec3(_2501, _2502, _2503));
        float _4406 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
        float _2516 = _2493 * _2493;
        float _2520 = ((_2511 * _2511) * (_2516 + (-1.0))) + 1.0;
        float _2529 = (exp2(log2(1.0 - (isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2530 = 1.0 - _2493;
        float _2540 = (0.5 / (((_2176 * ((_2507 * _2530) + _2493)) + 9.9999999392252902907785028219223e-09) + (((_2176 * _2530) + _2493) * _2507))) * _2507;
        float _4417 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
        float _2542 = (isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0))) * (_2516 / ((_2520 * _2520) * 3.141590118408203125));
        float _2543 = isnan(1.0) ? _1916 : (isnan(_1916) ? 1.0 : min(_1916, 1.0));
        _2463 = (((_2529 * cbLight._m0[_2478].x) * _2542) * _2543) + _2357;
        _2465 = (((_2529 * cbLight._m0[_2478].y) * _2542) * _2543) + _2359;
        _2467 = (((_2529 * cbLight._m0[_2478].z) * _2542) * _2543) + _2361;
    }
    float _2608;
    float _2610;
    float _2612;
    float _2614;
    float _2616;
    float _2618;
    if (_1898.y == 0u)
    {
        uvec4 _2564 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2565 = _2564.x;
        uint _2576 = uint((float(_2564.y) * floor(float(uint(cbSceneParam._m0[85u].y * _502) / _2565))) + floor(float(uint(cbSceneParam._m0[85u].x * _501) / _2565)));
        float _2586 = (log2(_1676 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2587 = isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0));
        uint _2590 = uint(isnan(14.0) ? _2587 : (isnan(_2587) ? 14.0 : min(_2587, 14.0)));
        uvec4 _2595 = texelFetch(g_lightClusterGridBuffer, int(((_2590 << 2u) + (_2576 << 6u)) >> 2u));
        uint _2596 = _2595.x;
        uint _2597 = _2564.z;
        float _2675;
        float _2677;
        float _2679;
        float _2681;
        float _2683;
        float _2685;
        if (((((1u << ((_2597 >> 4u) & 15u)) + 4294967295u) & _2596) == 0u) || ((_2597 & 240u) == 0u))
        {
            _2675 = 0.0;
            _2677 = 0.0;
            _2679 = 0.0;
            _2681 = 0.0;
            _2683 = 0.0;
            _2685 = 0.0;
        }
        else
        {
            float _2676;
            float _2678;
            float _2680;
            float _2682;
            float _2684;
            float _2686;
            float _2827 = 0.0;
            float _2828 = 0.0;
            float _2829 = 0.0;
            float _2830 = 0.0;
            float _2831 = 0.0;
            float _2832 = 0.0;
            uint _2833 = 0u;
            uint _2842;
            bool _2843;
            for (;;)
            {
                _2842 = texelFetch(g_lightClassification, int((((_2590 << 5u) + (_2576 << 9u)) + (_2833 << 2u)) >> 2u)).x;
                _2843 = _2842 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_2843)
                {
                    frontier_phi_73_pred = _2832;
                    frontier_phi_73_pred_1 = _2831;
                    frontier_phi_73_pred_2 = _2830;
                    frontier_phi_73_pred_3 = _2829;
                    frontier_phi_73_pred_4 = _2828;
                    frontier_phi_73_pred_5 = _2827;
                }
                else
                {
                    float _2972;
                    float _2973;
                    float _2974;
                    float _2975;
                    float _2976;
                    float _2977;
                    uint _2978;
                    _2972 = _2827;
                    _2973 = _2828;
                    _2974 = _2829;
                    _2975 = _2830;
                    _2976 = _2831;
                    _2977 = _2832;
                    _2978 = _2842;
                    float _2899;
                    float _2900;
                    float _2901;
                    float _2902;
                    float _2903;
                    float _2904;
                    for (;;)
                    {
                        uint _2982 = uint(findLSB(_2978)) + (_2833 << 5u);
                        uint _2979 = (_2978 + 4294967295u) & _2978;
                        uint _2984 = _2982 * 48u;
                        vec4 _2998 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2984)).x, texelFetch(g_PointLightRenderingBuffer, int(_2984 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2984 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2984 + 3u)).x));
                        uint _3004 = (_2982 * 48u) + 4u;
                        vec4 _3017 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3004)).x, texelFetch(g_PointLightRenderingBuffer, int(_3004 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3004 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3004 + 3u)).x));
                        uint _3023 = (_2982 * 48u) + 8u;
                        vec3 _3034 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3023)).x, texelFetch(g_PointLightRenderingBuffer, int(_3023 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3023 + 2u)).x));
                        float _3038 = _2998.x - _1674;
                        float _3039 = _2998.y - _1675;
                        float _3040 = _2998.z - _1676;
                        float _3041 = dot(vec3(_3038, _3039, _3040), vec3(_3038, _3039, _3040));
                        float _3044 = inversesqrt(_3041);
                        float _3045 = _3044 * _3038;
                        float _3046 = _3044 * _3039;
                        float _3047 = _3044 * _3040;
                        float _3048 = dot(vec3(_522, _525, _528), vec3(_3045, _3046, _3047));
                        float _3053 = 1.0 - (_3041 * _2998.w);
                        float _4443 = isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : max(_3053, 0.0));
                        float _3054 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
                        float _3055 = sqrt(_3041) * _3017.w;
                        float _3058 = 1.39999997615814208984375 / (_3055 + 1.39999997615814208984375);
                        float _3059 = _3058 * _3058;
                        float _3062 = ((1.0 - _3059) * _3048) + _3059;
                        float _3065 = _3055 * _3055;
                        float _3069 = ((isnan(0.0) ? _3062 : (isnan(_3062) ? 0.0 : max(_3062, 0.0))) * _3054) / ((_3065 * 0.699999988079071044921875) + 1.0);
                        float _3073 = (-0.0) - _1674;
                        float _3074 = (-0.0) - _1675;
                        float _3075 = (-0.0) - _1676;
                        float _3079 = inversesqrt(dot(vec3(_3073, _3074, _3075), vec3(_3073, _3074, _3075)));
                        float _3080 = _3079 * _3073;
                        float _3081 = _3079 * _3074;
                        float _3082 = _3079 * _3075;
                        float _3089 = exp2(log2(1.0 / ((_3065 * 3.5) + 5.0)) * 0.25);
                        float _3090 = 1.0 - _582;
                        float _3097 = sqrt(1.0 - ((1.0 - (_3090 * _3090)) * (1.0 - (_3089 * _3089))));
                        float _3098 = _3097 * _3097;
                        float _3099 = _3098 * _3098;
                        float _3100 = _3080 + _3045;
                        float _3101 = _3081 + _3046;
                        float _3102 = _3082 + _3047;
                        float _3106 = inversesqrt(dot(vec3(_3100, _3101, _3102), vec3(_3100, _3101, _3102)));
                        float _3110 = dot(vec3(_522, _525, _528), vec3(_3080, _3081, _3082));
                        float _4459 = isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : max(_3110, 0.0));
                        float _3113 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
                        float _3114 = dot(vec3(_522, _525, _528), vec3(_3106 * _3100, _3106 * _3101, _3106 * _3102));
                        float _4470 = isnan(0.0) ? _3114 : (isnan(_3114) ? 0.0 : max(_3114, 0.0));
                        float _3117 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
                        float _3121 = ((_3117 * _3117) * (_3099 + (-1.0))) + 1.0;
                        float _3122 = _3058 * _3098;
                        float _3123 = _3122 * _3122;
                        float _3126 = ((1.0 - _3123) * _3048) + _3123;
                        float _4481 = isnan(0.0) ? _3126 : (isnan(_3126) ? 0.0 : max(_3126, 0.0));
                        float _3127 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
                        float _3128 = 1.0 - _3098;
                        float _3138 = (0.5 / (((_3127 * ((_3113 * _3128) + _3098)) + 9.9999999392252902907785028219223e-09) + (((_3127 * _3128) + _3098) * _3113))) * _3127;
                        float _4492 = isnan(0.0) ? _3138 : (isnan(_3138) ? 0.0 : max(_3138, 0.0));
                        float _3149 = (((_3099 * 3.1415927410125732421875) * (isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0)))) / ((_3121 * _3121) * ((_3065 * 2.1991131305694580078125) + 3.141590118408203125))) * _3054;
                        _2902 = (_3069 * _3017.x) + _2975;
                        _2903 = (_3069 * _3017.y) + _2976;
                        _2904 = (_3069 * _3017.z) + _2977;
                        _2899 = (_3149 * _3034.x) + _2972;
                        _2900 = (_3149 * _3034.y) + _2973;
                        _2901 = (_3149 * _3034.z) + _2974;
                        if (_2979 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2972 = _2899;
                            _2973 = _2900;
                            _2974 = _2901;
                            _2975 = _2902;
                            _2976 = _2903;
                            _2977 = _2904;
                            _2978 = _2979;
                        }
                    }
                    frontier_phi_73_pred = _2904;
                    frontier_phi_73_pred_1 = _2903;
                    frontier_phi_73_pred_2 = _2902;
                    frontier_phi_73_pred_3 = _2901;
                    frontier_phi_73_pred_4 = _2900;
                    frontier_phi_73_pred_5 = _2899;
                }
                _2686 = frontier_phi_73_pred;
                _2684 = frontier_phi_73_pred_1;
                _2682 = frontier_phi_73_pred_2;
                _2680 = frontier_phi_73_pred_3;
                _2678 = frontier_phi_73_pred_4;
                _2676 = frontier_phi_73_pred_5;
                uint _2834 = _2833 + 1u;
                if (_2834 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2827 = _2676;
                    _2828 = _2678;
                    _2829 = _2680;
                    _2830 = _2682;
                    _2831 = _2684;
                    _2832 = _2686;
                    _2833 = _2834;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2675 = _2676;
            _2677 = _2678;
            _2679 = _2680;
            _2681 = _2682;
            _2683 = _2684;
            _2685 = _2686;
        }
        uvec4 _2689 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2690 = _2689.z;
        uint _2692 = (_2690 >> 8u) & 15u;
        float _2795;
        float _2797;
        float _2799;
        float _2801;
        float _2803;
        float _2805;
        if (((4294967295u << _2692) & _2596) == 0u)
        {
            _2795 = _2675;
            _2797 = _2677;
            _2799 = _2679;
            _2801 = _2681;
            _2803 = _2683;
            _2805 = _2685;
        }
        else
        {
            float _2820 = inversesqrt(dot(vec3(_1674, _1675, _1676), vec3(_1674, _1675, _1676)));
            float _2821 = _2820 * _1674;
            float _2822 = _2820 * _1675;
            float _2823 = _2820 * _1676;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2692 < ((_2690 >> 12u) & 15u))
            {
                float _2796;
                float _2798;
                float _2800;
                float _2802;
                float _2804;
                float _2806;
                float _2955 = _2675;
                float _2956 = _2677;
                float _2957 = _2679;
                float _2958 = _2681;
                float _2959 = _2683;
                float _2960 = _2685;
                uint _2961 = _2692;
                uint _2970;
                bool _2971;
                for (;;)
                {
                    _2970 = texelFetch(g_lightClassification, int((((_2590 << 5u) + (_2576 << 9u)) + (_2961 << 2u)) >> 2u)).x;
                    _2971 = _2970 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_2971)
                    {
                        frontier_phi_84_pred = _2959;
                        frontier_phi_84_pred_1 = _2958;
                        frontier_phi_84_pred_2 = _2957;
                        frontier_phi_84_pred_3 = _2956;
                        frontier_phi_84_pred_4 = _2955;
                        frontier_phi_84_pred_5 = _2960;
                    }
                    else
                    {
                        float _3163;
                        float _3164;
                        float _3165;
                        float _3166;
                        float _3167;
                        float _3168;
                        float _3459;
                        float _3460;
                        float _3461;
                        float _3462;
                        float _3463;
                        float _3464;
                        float _3176 = _2955;
                        float _3177 = _2956;
                        float _3178 = _2957;
                        float _3179 = _2958;
                        float _3180 = _2959;
                        float _3181 = _2960;
                        uint _3182 = _2970;
                        uint _3183;
                        vec4 _3208;
                        float _3209;
                        vec4 _3224;
                        vec3 _3236;
                        vec4 _3252;
                        vec4 _3268;
                        float _3315;
                        bool _3316;
                        for (;;)
                        {
                            uint _3193 = ((_2961 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3182));
                            _3183 = (_3182 + 4294967295u) & _3182;
                            uint _3195 = _3193 * 40u;
                            _3208 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3195)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 3u)).x));
                            _3209 = _3208.w;
                            uint _3211 = (_3193 * 40u) + 4u;
                            _3224 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3211)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 3u)).x));
                            uint _3226 = (_3193 * 40u) + 8u;
                            _3236 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3226)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3226 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3226 + 2u)).x));
                            uint _3239 = (_3193 * 40u) + 16u;
                            _3252 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3239)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3239 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3239 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3239 + 3u)).x));
                            uint _3255 = (_3193 * 40u) + 20u;
                            _3268 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3255)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3255 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3255 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3255 + 3u)).x));
                            uint _3271 = (_3193 * 40u) + 24u;
                            vec4 _3284 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3271)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 3u)).x));
                            uint _3290 = (_3193 * 40u) + 28u;
                            vec4 _3303 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3290)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3290 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3290 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3290 + 3u)).x));
                            _3315 = fma(_1676, _3303.z, fma(_1675, _3303.y, _3303.x * _1674)) + _3303.w;
                            _3316 = !((fma(_1676, _3284.z, fma(_1675, _3284.y, _3284.x * _1674)) + _3284.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3316)
                            {
                                float _3343 = _3208.x - _1674;
                                float _3344 = _3208.y - _1675;
                                float _3345 = _3208.z - _1676;
                                float _3346 = dot(vec3(_3343, _3344, _3345), vec3(_3343, _3344, _3345));
                                float _3349 = inversesqrt(_3346);
                                float _3350 = _3349 * _3343;
                                float _3351 = _3349 * _3344;
                                float _3352 = _3349 * _3345;
                                float _3356 = 1.0 - (_3346 / (_3209 * _3209));
                                float _4503 = isnan(0.0) ? _3356 : (isnan(_3356) ? 0.0 : max(_3356, 0.0));
                                float _3357 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
                                float _3361 = sqrt(_3346) * _3224.w;
                                float _3363 = 1.39999997615814208984375 / (_3361 + 1.39999997615814208984375);
                                float _3364 = _3363 * _3363;
                                float _3367 = ((1.0 - _3364) * dot(vec3(_3350, _3351, _3352), vec3(_522, _525, _528))) + _3364;
                                float _3370 = _3361 * _3361;
                                float _3374 = (fma(_1676, _3252.z, fma(_1675, _3252.y, _3252.x * _1674)) + _3252.w) / _3315;
                                float _3375 = (fma(_1676, _3268.z, fma(_1675, _3268.y, _3268.x * _1674)) + _3268.w) / _3315;
                                float _3379 = 1.0 - dot(vec2(_3374, _3375), vec2(_3374, _3375));
                                float _4519 = isnan(0.0) ? _3379 : (isnan(_3379) ? 0.0 : max(_3379, 0.0));
                                float _3380 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
                                float _3381 = _3380 * (((isnan(0.0) ? _3367 : (isnan(_3367) ? 0.0 : max(_3367, 0.0))) * _3357) / ((_3370 * 0.699999988079071044921875) + 1.0));
                                float _3393 = exp2(log2(1.0 / ((_3370 * 3.5) + 5.0)) * 0.25);
                                float _3394 = 1.0 - _582;
                                float _3401 = sqrt(1.0 - ((1.0 - (_3394 * _3394)) * (1.0 - (_3393 * _3393))));
                                float _3402 = _3401 * _3401;
                                float _3403 = _3402 * _3402;
                                float _3404 = _3350 - _2821;
                                float _3405 = _3351 - _2822;
                                float _3406 = _3352 - _2823;
                                float _3410 = inversesqrt(dot(vec3(_3404, _3405, _3406), vec3(_3404, _3405, _3406)));
                                float _3414 = dot(vec3(_522, _525, _528), vec3((-0.0) - _2821, (-0.0) - _2822, (-0.0) - _2823));
                                float _4530 = isnan(0.0) ? _3414 : (isnan(_3414) ? 0.0 : max(_3414, 0.0));
                                float _3417 = isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0));
                                float _3418 = dot(vec3(_522, _525, _528), vec3(_3410 * _3404, _3410 * _3405, _3410 * _3406));
                                float _4541 = isnan(0.0) ? _3418 : (isnan(_3418) ? 0.0 : max(_3418, 0.0));
                                float _3421 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
                                float _3425 = ((_3421 * _3421) * (_3403 + (-1.0))) + 1.0;
                                float _3426 = _3363 * _3402;
                                float _3427 = _3426 * _3426;
                                float _3433 = ((1.0 - _3427) * dot(vec3(_522, _525, _528), vec3(_3350, _3351, _3352))) + _3427;
                                float _4552 = isnan(0.0) ? _3433 : (isnan(_3433) ? 0.0 : max(_3433, 0.0));
                                float _3434 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
                                float _3435 = 1.0 - _3402;
                                float _3445 = (0.5 / (((_3434 * ((_3417 * _3435) + _3402)) + 9.9999999392252902907785028219223e-09) + (((_3434 * _3435) + _3402) * _3417))) * _3434;
                                float _4563 = isnan(0.0) ? _3445 : (isnan(_3445) ? 0.0 : max(_3445, 0.0));
                                float _3455 = (_3380 * _3357) * (((_3403 * 3.1415927410125732421875) * (isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0)))) / ((_3425 * _3425) * ((_3370 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3381 * _3224.y;
                                frontier_phi_90_pred_1 = _3381 * _3224.x;
                                frontier_phi_90_pred_2 = _3455 * _3236.z;
                                frontier_phi_90_pred_3 = _3455 * _3236.y;
                                frontier_phi_90_pred_4 = _3455 * _3236.x;
                                frontier_phi_90_pred_5 = _3381 * _3224.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3463 = frontier_phi_90_pred;
                            _3462 = frontier_phi_90_pred_1;
                            _3461 = frontier_phi_90_pred_2;
                            _3460 = frontier_phi_90_pred_3;
                            _3459 = frontier_phi_90_pred_4;
                            _3464 = frontier_phi_90_pred_5;
                            _3166 = _3462 + _3179;
                            _3167 = _3463 + _3180;
                            _3168 = _3464 + _3181;
                            _3163 = _3459 + _3176;
                            _3164 = _3460 + _3177;
                            _3165 = _3461 + _3178;
                            if (_3183 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3176 = _3163;
                                _3177 = _3164;
                                _3178 = _3165;
                                _3179 = _3166;
                                _3180 = _3167;
                                _3181 = _3168;
                                _3182 = _3183;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3167;
                        frontier_phi_84_pred_1 = _3166;
                        frontier_phi_84_pred_2 = _3165;
                        frontier_phi_84_pred_3 = _3164;
                        frontier_phi_84_pred_4 = _3163;
                        frontier_phi_84_pred_5 = _3168;
                    }
                    _2804 = frontier_phi_84_pred;
                    _2802 = frontier_phi_84_pred_1;
                    _2800 = frontier_phi_84_pred_2;
                    _2798 = frontier_phi_84_pred_3;
                    _2796 = frontier_phi_84_pred_4;
                    _2806 = frontier_phi_84_pred_5;
                    uint _2962 = _2961 + 1u;
                    if (_2962 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2955 = _2796;
                        _2956 = _2798;
                        _2957 = _2800;
                        _2958 = _2802;
                        _2959 = _2804;
                        _2960 = _2806;
                        _2961 = _2962;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2806;
                frontier_phi_65_66_ladder_1 = _2802;
                frontier_phi_65_66_ladder_2 = _2804;
                frontier_phi_65_66_ladder_3 = _2798;
                frontier_phi_65_66_ladder_4 = _2796;
                frontier_phi_65_66_ladder_5 = _2800;
            }
            else
            {
                frontier_phi_65_66_ladder = _2685;
                frontier_phi_65_66_ladder_1 = _2681;
                frontier_phi_65_66_ladder_2 = _2683;
                frontier_phi_65_66_ladder_3 = _2677;
                frontier_phi_65_66_ladder_4 = _2675;
                frontier_phi_65_66_ladder_5 = _2679;
            }
            _2795 = frontier_phi_65_66_ladder_4;
            _2797 = frontier_phi_65_66_ladder_3;
            _2799 = frontier_phi_65_66_ladder_5;
            _2801 = frontier_phi_65_66_ladder_1;
            _2803 = frontier_phi_65_66_ladder_2;
            _2805 = frontier_phi_65_66_ladder;
        }
        float _2810 = isnan(1.0) ? _566 : (isnan(_566) ? 1.0 : min(_566, 1.0));
        _2608 = (_2810 * _2801) + _2140;
        _2610 = (_2810 * _2803) + _2142;
        _2612 = (_2810 * _2805) + _2144;
        _2614 = ((_2795 * 0.039999999105930328369140625) * _2810) + _2463;
        _2616 = ((_2797 * 0.039999999105930328369140625) * _2810) + _2465;
        _2618 = ((_2799 * 0.039999999105930328369140625) * _2810) + _2467;
    }
    else
    {
        _2608 = _2140;
        _2610 = _2142;
        _2612 = _2144;
        _2614 = _2463;
        _2616 = _2465;
        _2618 = _2467;
    }
    float _4579 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    float _4590 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
    float _4601 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _2635 = ((isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0))) * (_2608 + ((isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0))) * _566))) + ((_2614 + ((isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0))) * _1405)) * cbPerFrame._m0[3u].x);
    float _2636 = ((isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0))) * (_2610 + ((isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0))) * _566))) + ((_2616 + ((isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0))) * _1405)) * cbPerFrame._m0[3u].x);
    float _2637 = ((isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0))) * (_2612 + ((isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0))) * _566))) + ((_2618 + ((isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0))) * _1405)) * cbPerFrame._m0[3u].x);
    uint _2638 = _541 + 6u;
    float _2646 = _501 / cbSceneParam._m0[86u].x;
    float _2647 = _502 / cbSceneParam._m0[86u].y;
    vec4 _2661 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2646, _2647, (log2((isnan(cbSceneParam._m0[77u].w) ? _421 : (isnan(_421) ? cbSceneParam._m0[77u].w : min(_421, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2663 = _2661.x;
    float _2664 = _2661.y;
    float _2665 = _2661.z;
    float _2666 = _2661.w;
    float _2737;
    float _2739;
    float _2741;
    float _2743;
    if (_421 > cbSceneParam._m0[78u].w)
    {
        float _2700 = isnan(_421) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _421 : min(cbSceneParam._m0[80u].w, _421));
        float _2701 = _2700 / _421;
        float _2712 = _2701 * _473;
        float _2713 = _474 * _2701;
        float _2714 = (-0.0) - _2713;
        float _2715 = _2701 * _475;
        float _2717 = (cbSceneParam._m0[77u].w * _2714) / _2700;
        float _2718 = _2717 + cbSceneParam._m0[79u].w;
        float _2719 = cbSceneParam._m0[79u].w - _2713;
        float _2725 = sqrt(((_2712 * _2712) + (_2713 * _2713)) + (_2715 * _2715));
        float _2728 = (1.0 - (cbSceneParam._m0[77u].w / _2700)) * _2725;
        float _2733 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2735 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2912;
        if (abs((_2714 - _2717) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2912 = ((((_2718 > 0.0) ? exp2(_2733 * _2718) : (2.0 - exp2(_2735 * _2718))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2728;
        }
        else
        {
            float _2856 = 1.0 / cbSceneParam._m0[80u].x;
            float _2857 = isnan(_2719) ? _2718 : (isnan(_2718) ? _2719 : max(_2718, _2719));
            float _2858 = isnan(_2719) ? _2718 : (isnan(_2718) ? _2719 : min(_2718, _2719));
            float _2867 = isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : min(_2857, 0.0));
            float _2868 = isnan(0.0) ? _2858 : (isnan(_2858) ? 0.0 : min(_2858, 0.0));
            _2912 = ((abs(_2725 / _2714) * cbSceneParam._m0[80u].y) * ((((_2867 - _2868) * 2.0) - ((exp2(_2733 * (isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : max(_2857, 0.0)))) - exp2(_2733 * (isnan(0.0) ? _2858 : (isnan(_2858) ? 0.0 : max(_2858, 0.0))))) * _2856)) - ((exp2(_2735 * _2867) - exp2(_2735 * _2868)) * _2856))) + (_2728 * cbSceneParam._m0[80u].z);
        }
        vec4 _2914 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2646, _2647, 1.0), 0.0);
        float _2923 = exp2((_2912 * (-1.44269502162933349609375)) * (1.0 - _2914.w));
        float _2924 = log2(_2923);
        float _2940 = log2(_2666);
        _2737 = (exp2(_2940 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2924 * cbSceneParam._m0[78u].x)) * _2914.x) / cbSceneParam._m0[78u].x)) + _2663;
        _2739 = (exp2(_2940 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2924 * cbSceneParam._m0[78u].y)) * _2914.y) / cbSceneParam._m0[78u].y)) + _2664;
        _2741 = (exp2(_2940 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2924 * cbSceneParam._m0[78u].z)) * _2914.z) / cbSceneParam._m0[78u].z)) + _2665;
        _2743 = _2923 * _2666;
    }
    else
    {
        _2737 = _2663;
        _2739 = _2664;
        _2741 = _2665;
        _2743 = _2666;
    }
    bool _2950;
    vec4 _2753;
    vec4 _2775;
    float _2777;
    float _2781;
    float _2782;
    float _2783;
    float _2784;
    bool _2794;
    for (;;)
    {
        _2753 = cbMatDynParam._m0[0u];
        float _2755 = roundEven(_2753.y);
        bool _2756 = _2755 == 3.0;
        float _2757 = log2(_2743);
        float _2764 = exp2(_2757 * cbSceneParam._m0[78u].x) * _2635;
        float _2765 = exp2(_2757 * cbSceneParam._m0[78u].y) * _2636;
        float _2766 = exp2(_2757 * cbSceneParam._m0[78u].z) * _2637;
        float _2773 = _489 + (-0.5);
        _2775 = cbMtdParam._m0[1u];
        _2777 = _2775.y * _2773;
        float _2780 = (_2755 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2781 = _2780 * (_2756 ? _2764 : (_2764 + (cbSceneParam._m0[72u].w * _2737)));
        _2782 = _2780 * (_2756 ? _2765 : (_2765 + (cbSceneParam._m0[72u].w * _2739)));
        _2783 = _2780 * (_2756 ? _2766 : (_2766 + (cbSceneParam._m0[72u].w * _2741)));
        _2784 = _2773 * 0.999000012874603271484375;
        _2794 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2794)
        {
            if ((cbInstanceData._m0[_541 + 7u].x + _2784) < 0.5)
            {
                _2950 = true;
                break;
            }
        }
        uint _2891 = _542 + uint(_2753.w);
        if ((cbInstanceData._m0[_2891].w < 1.0) && ((cbInstanceData._m0[_2891].w + _2784) < 0.5))
        {
            _2950 = true;
            break;
        }
        if ((_2777 + _252) < _2775.x)
        {
            _2950 = true;
            break;
        }
        _2950 = false;
        break;
    }
    float _3154;
    if (_2950)
    {
        discard_state = true;
        _3154 = 0.0;
    }
    else
    {
        _3154 = cbInstanceData._m0[_2638].w;
    }
    SV_Target.x = _2781;
    SV_Target.y = _2782;
    SV_Target.z = _2783;
    SV_Target.w = _3154;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2638].w;
    discard_exit();
}


