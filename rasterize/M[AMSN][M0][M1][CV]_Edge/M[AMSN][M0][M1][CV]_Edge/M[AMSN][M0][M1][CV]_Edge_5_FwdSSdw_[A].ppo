#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _948;
float _3339;
float _3340;
float _3341;
float _3342;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _196 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _203 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _204 = _203 * NORMAL.x;
    float _205 = _203 * NORMAL.y;
    float _206 = _203 * NORMAL.z;
    float _210 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _218;
    float _219;
    float _220;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _218 = (-0.0) - _204;
        _219 = (-0.0) - _205;
        _220 = (-0.0) - _206;
    }
    else
    {
        _218 = _204;
        _219 = _205;
        _220 = _206;
    }
    vec4 _246 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _252 = _246.w;
    float _253 = _246.x * cbMtdParam._m0[9u].x;
    float _254 = _246.y * cbMtdParam._m0[9u].y;
    float _255 = _246.z * cbMtdParam._m0[9u].z;
    vec4 _267 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _271 = _267.z;
    float _275 = (_267.x * 2.0) + (-1.0);
    float _277 = (_267.y * 2.0) + (-1.0);
    float _278 = dot(vec2(_275, _277), vec2(_275, _277));
    float _3351 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _284 = sqrt(1.0 - (isnan(1.0) ? _3351 : (isnan(_3351) ? 1.0 : min(_3351, 1.0))));
    float _313 = (TEXCOORD_3.x - ((cbMtdParam._m0[12u].y * (1.0 - TEXCOORD_3.x)) * ((texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w)).x * cbMtdParam._m0[12u].y) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[12u].z + 1.0);
    float _3362 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _314 = isnan(1.0) ? _3362 : (isnan(_3362) ? 1.0 : min(_3362, 1.0));
    float _321 = (_314 * (cbMtdParam._m0[10u].x - _253)) + _253;
    float _322 = (_314 * (cbMtdParam._m0[10u].y - _254)) + _254;
    float _323 = (_314 * (cbMtdParam._m0[10u].z - _255)) + _255;
    vec4 _335 = texture(sampler2D(M_AMSN_M0_M1_CV_Edge_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _342 = (_335.x * 2.0) + (-1.0);
    float _343 = (_335.y * 2.0) + (-1.0);
    float _344 = dot(vec2(_342, _343), vec2(_342, _343));
    float _3373 = isnan(0.0) ? _344 : (isnan(_344) ? 0.0 : max(_344, 0.0));
    float _352 = (_314 * (_335.z - _271)) + _271;
    float _364 = (((_342 - _275) + (cbMtdParam._m0[12u].w * _275)) * _314) + _275;
    float _365 = (((_343 - _277) + (cbMtdParam._m0[12u].w * _277)) * _314) + _277;
    float _366 = (_314 * (sqrt(1.0 - (isnan(1.0) ? _3373 : (isnan(_3373) ? 1.0 : min(_3373, 1.0)))) - _284)) + _284;
    float _369 = fma(_366, _218, fma(_365, _210 * TANGENT.x, (_196 * _188) * _364));
    float _372 = fma(_366, _219, fma(_365, _210 * TANGENT.y, (_196 * _189) * _364));
    float _375 = fma(_366, _220, fma(_365, _210 * TANGENT.z, (_196 * _190) * _364));
    float _379 = inversesqrt(dot(vec3(_369, _372, _375), vec3(_369, _372, _375)));
    float _380 = _379 * _369;
    float _381 = _379 * _372;
    float _382 = _379 * _375;
    float _3384 = isnan(0.0) ? _352 : (isnan(_352) ? 0.0 : max(_352, 0.0));
    float _383 = isnan(1.0) ? _3384 : (isnan(_3384) ? 1.0 : min(_3384, 1.0));
    float _3395 = isnan(0.0) ? _321 : (isnan(_321) ? 0.0 : max(_321, 0.0));
    float _3406 = isnan(0.0) ? _322 : (isnan(_322) ? 0.0 : max(_322, 0.0));
    float _3417 = isnan(0.0) ? _323 : (isnan(_323) ? 0.0 : max(_323, 0.0));
    float _402 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _444 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _454 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _444);
    float _455 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _444);
    float _456 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _444);
    float _460 = inversesqrt(dot(vec3(_454, _455, _456), vec3(_454, _455, _456)));
    float _461 = _454 * _460;
    float _462 = _455 * _460;
    float _463 = _456 * _460;
    vec4 _468 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _470 = _468.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _628 = sqrt(((_454 * _454) + (_455 * _455)) + (_456 * _456));
        float _634 = (cbMatDynParam._m0[5u].x * _628) + cbMatDynParam._m0[5u].y;
        float _3428 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
        float _635 = isnan(1.0) ? _3428 : (isnan(_3428) ? 1.0 : min(_3428, 1.0));
        float _639 = (cbMatDynParam._m0[5u].z * _628) + cbMatDynParam._m0[5u].w;
        float _3439 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3439 : (isnan(_3439) ? 1.0 : min(_3439, 1.0))) - _635)) + _635) < ((_470 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _482 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _483 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _503 = fma(_382, cbSceneParam._m0[5u].z, fma(_381, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _380));
    float _506 = fma(_382, cbSceneParam._m0[6u].z, fma(_381, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _380));
    float _509 = fma(_382, cbSceneParam._m0[7u].z, fma(_381, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _380));
    uint _522 = uint(roundEven(NORMAL.w)) * 13u;
    uint _524 = _522 + 9u;
    uint _525 = _524 + uint(cbMatDynParam._m0[0u].w);
    float _531 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3395 : (isnan(_3395) ? 1.0 : min(_3395, 1.0)))) * cbInstanceData._m0[_525].x;
    float _532 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3406 : (isnan(_3406) ? 1.0 : min(_3406, 1.0)))) * cbInstanceData._m0[_525].y;
    float _533 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3417 : (isnan(_3417) ? 1.0 : min(_3417, 1.0)))) * cbInstanceData._m0[_525].z;
    float _3450 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _534 = isnan(1.0) ? _3450 : (isnan(_3450) ? 1.0 : min(_3450, 1.0));
    float _3461 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _535 = isnan(1.0) ? _3461 : (isnan(_3461) ? 1.0 : min(_3461, 1.0));
    float _3472 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _536 = isnan(1.0) ? _3472 : (isnan(_3472) ? 1.0 : min(_3472, 1.0));
    vec4 _545 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _482, cbSceneParam._m0[86u].y * _483));
    float _548 = _545.x * TEXCOORD_3.w;
    float _549 = dot(vec3(_380, _381, _382), vec3(_461, _462, _463));
    float _552 = _549 * 2.0;
    float _556 = (_552 * _380) - _461;
    float _557 = (_552 * _381) - _462;
    float _558 = (_552 * _382) - _463;
    float _562 = abs(dot(vec3(_461, _462, _463), vec3(_380, _381, _382)));
    float _3483 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _564 = sqrt(_383);
    float _577 = exp2((_564 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3483 : (isnan(_3483) ? 1.0 : min(_3483, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_564 * 3.0));
    float _609 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _613 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _617 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _947;
    float _949;
    float _950;
    float _951;
    float _952;
    float _953;
    float _954;
    float _955;
    float _956;
    float _957;
    float _958;
    float _959;
    float _960;
    float _961;
    float _962;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _672 = fma(_617, cbModelParam._m0[26u].z, fma(_613, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _609));
        float _676 = fma(_617, cbModelParam._m0[27u].z, fma(_613, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _609));
        float _680 = fma(_617, cbModelParam._m0[28u].z, fma(_613, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _609));
        float _705 = _609 + _380;
        float _706 = _613 + _381;
        float _707 = _617 + _382;
        float _717 = fma(_707, cbModelParam._m0[26u].z, fma(_706, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _705)) - _672;
        float _718 = fma(_707, cbModelParam._m0[27u].z, fma(_706, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _705)) - _676;
        float _719 = fma(_707, cbModelParam._m0[28u].z, fma(_706, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _705)) - _680;
        float _723 = inversesqrt(dot(vec3(_717, _718, _719), vec3(_717, _718, _719)));
        float _736 = ((_723 * _717) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_672 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _737 = ((_723 * _718) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_676 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _738 = ((_723 * _719) / cbModelParam._m0[34u].z) + ((((((_680 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _741 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_736, _737, _738), 0.0);
        vec4 _748 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_736, _737, _738), 0.0);
        vec4 _755 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_736, _737, _738), 0.0);
        vec4 _762 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_736, _737, _738), 0.0);
        float _775 = exp2((_741.w + (-0.5)) * 20.0) * 2.0;
        float _776 = _775 * (_741.x + (-0.5));
        float _777 = _775 * (_741.y + (-0.5));
        float _778 = _775 * (_741.z + (-0.5));
        float _785 = exp2((_748.w + (-0.5)) * 20.0) * 2.0;
        float _786 = _785 * (_748.x + (-0.5));
        float _787 = _785 * (_748.y + (-0.5));
        float _788 = _785 * (_748.z + (-0.5));
        float _795 = exp2((_755.w + (-0.5)) * 20.0) * 2.0;
        float _796 = _795 * (_755.x + (-0.5));
        float _797 = _795 * (_755.y + (-0.5));
        float _798 = _795 * (_755.z + (-0.5));
        float _805 = exp2((_762.w + (-0.5)) * 20.0) * 2.0;
        float _806 = _805 * (_762.x + (-0.5));
        float _807 = _805 * (_762.y + (-0.5));
        float _808 = _805 * (_762.z + (-0.5));
        float _809 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
        float _810 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
        float _811 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
        float _812 = _776 * 0.5;
        float _813 = _786 * 0.5;
        float _814 = _796 * 0.5;
        float _815 = dot(vec3(_812, _813, _814), vec3(_812, _813, _814));
        float _820 = (_815 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_815);
        float _829 = (dot(vec3(_380, _381, _382), vec3(_820 * _812, _820 * _813, _820 * _814)) + 1.0) * 0.5;
        float _3509 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
        float _839 = sqrt(((_813 * _813) + (_812 * _812)) + (_814 * _814)) / (_809 + 9.9999997473787516355514526367188e-06);
        float _3520 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
        float _840 = isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0));
        float _841 = _840 * 2.0;
        float _845 = (1.0 - _840) / (_840 + 1.0);
        float _3531 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
        float _846 = isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0));
        float _855 = ((((1.0 - _846) * (_841 + 2.0)) * exp2(log2(isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0))) * (_841 + 1.0))) + _846) * _809;
        float _856 = _777 * 0.5;
        float _857 = _787 * 0.5;
        float _858 = _797 * 0.5;
        float _859 = dot(vec3(_856, _857, _858), vec3(_856, _857, _858));
        float _864 = (_859 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_859);
        float _872 = (dot(vec3(_380, _381, _382), vec3(_864 * _856, _864 * _857, _864 * _858)) + 1.0) * 0.5;
        float _3542 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
        float _881 = sqrt(((_857 * _857) + (_856 * _856)) + (_858 * _858)) / (_810 + 9.9999997473787516355514526367188e-06);
        float _3553 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
        float _882 = isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0));
        float _883 = _882 * 2.0;
        float _887 = (1.0 - _882) / (_882 + 1.0);
        float _3564 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
        float _888 = isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0));
        float _897 = ((((1.0 - _888) * (_883 + 2.0)) * exp2(log2(isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0))) * (_883 + 1.0))) + _888) * _810;
        float _898 = _778 * 0.5;
        float _899 = _788 * 0.5;
        float _900 = _798 * 0.5;
        float _901 = dot(vec3(_898, _899, _900), vec3(_898, _899, _900));
        float _906 = (_901 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_901);
        float _914 = (dot(vec3(_380, _381, _382), vec3(_906 * _898, _906 * _899, _906 * _900)) + 1.0) * 0.5;
        float _3575 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
        float _923 = sqrt(((_899 * _899) + (_898 * _898)) + (_900 * _900)) / (_811 + 9.9999997473787516355514526367188e-06);
        float _3586 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
        float _924 = isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0));
        float _925 = _924 * 2.0;
        float _929 = (1.0 - _924) / (_924 + 1.0);
        float _3597 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
        float _930 = isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0));
        float _939 = ((((1.0 - _930) * (_925 + 2.0)) * exp2(log2(isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0))) * (_925 + 1.0))) + _930) * _811;
        _947 = _778;
        _949 = _777;
        _950 = _776;
        _951 = _788;
        _952 = _787;
        _953 = _786;
        _954 = _798;
        _955 = _797;
        _956 = _796;
        _957 = _811;
        _958 = _810;
        _959 = _809;
        _960 = cbModelParam._m0[36u].z * (isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0)));
        _961 = cbModelParam._m0[36u].z * (isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0)));
        _962 = cbModelParam._m0[36u].z * (isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0)));
    }
    else
    {
        _947 = _948;
        _949 = _948;
        _950 = _948;
        _951 = _948;
        _952 = _948;
        _953 = _948;
        _954 = _948;
        _955 = _948;
        _956 = _948;
        _957 = _948;
        _958 = _948;
        _959 = _948;
        _960 = 0.0;
        _961 = 0.0;
        _962 = 0.0;
    }
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _991 = fma(_617, cbModelParam._m0[30u].z, fma(_613, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _609));
        float _995 = fma(_617, cbModelParam._m0[31u].z, fma(_613, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _609));
        float _999 = fma(_617, cbModelParam._m0[32u].z, fma(_613, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _609));
        float _1022 = _609 + _380;
        float _1023 = _613 + _381;
        float _1024 = _617 + _382;
        float _1034 = fma(_1024, cbModelParam._m0[30u].z, fma(_1023, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1022)) - _991;
        float _1035 = fma(_1024, cbModelParam._m0[31u].z, fma(_1023, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1022)) - _995;
        float _1036 = fma(_1024, cbModelParam._m0[32u].z, fma(_1023, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1022)) - _999;
        float _1040 = inversesqrt(dot(vec3(_1034, _1035, _1036), vec3(_1034, _1035, _1036)));
        float _1053 = ((_1040 * _1034) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_991 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1054 = ((_1040 * _1035) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_995 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1055 = ((_1040 * _1036) / cbModelParam._m0[35u].z) + ((((((_999 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1057 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1053, _1054, _1055), 0.0);
        vec4 _1064 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1053, _1054, _1055), 0.0);
        vec4 _1071 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1053, _1054, _1055), 0.0);
        vec4 _1078 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1053, _1054, _1055), 0.0);
        float _1090 = exp2((_1057.w + (-0.5)) * 20.0) * 2.0;
        float _1091 = _1090 * (_1057.x + (-0.5));
        float _1092 = _1090 * (_1057.y + (-0.5));
        float _1093 = _1090 * (_1057.z + (-0.5));
        float _1100 = exp2((_1064.w + (-0.5)) * 20.0) * 2.0;
        float _1101 = _1100 * (_1064.x + (-0.5));
        float _1102 = _1100 * (_1064.y + (-0.5));
        float _1103 = _1100 * (_1064.z + (-0.5));
        float _1110 = exp2((_1071.w + (-0.5)) * 20.0) * 2.0;
        float _1111 = _1110 * (_1071.x + (-0.5));
        float _1112 = _1110 * (_1071.y + (-0.5));
        float _1113 = _1110 * (_1071.z + (-0.5));
        float _1120 = exp2((_1078.w + (-0.5)) * 20.0) * 2.0;
        float _1121 = _1120 * (_1078.x + (-0.5));
        float _1122 = _1120 * (_1078.y + (-0.5));
        float _1123 = _1120 * (_1078.z + (-0.5));
        float _1124 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1125 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1126 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1127 = _1091 * 0.5;
        float _1128 = _1101 * 0.5;
        float _1129 = _1111 * 0.5;
        float _1130 = dot(vec3(_1127, _1128, _1129), vec3(_1127, _1128, _1129));
        float _1135 = (_1130 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1130);
        float _1143 = (dot(vec3(_380, _381, _382), vec3(_1135 * _1127, _1135 * _1128, _1135 * _1129)) + 1.0) * 0.5;
        float _3638 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1152 = sqrt(((_1128 * _1128) + (_1127 * _1127)) + (_1129 * _1129)) / (_1124 + 9.9999997473787516355514526367188e-06);
        float _3649 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1153 = isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0));
        float _1154 = _1153 * 2.0;
        float _1158 = (1.0 - _1153) / (_1153 + 1.0);
        float _3660 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1159 = isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0));
        float _1168 = ((((1.0 - _1159) * (_1154 + 2.0)) * exp2(log2(isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0))) * (_1154 + 1.0))) + _1159) * _1124;
        float _1169 = _1092 * 0.5;
        float _1170 = _1102 * 0.5;
        float _1171 = _1112 * 0.5;
        float _1172 = dot(vec3(_1169, _1170, _1171), vec3(_1169, _1170, _1171));
        float _1177 = (_1172 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1172);
        float _1185 = (dot(vec3(_380, _381, _382), vec3(_1177 * _1169, _1177 * _1170, _1177 * _1171)) + 1.0) * 0.5;
        float _3671 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1194 = sqrt(((_1170 * _1170) + (_1169 * _1169)) + (_1171 * _1171)) / (_1125 + 9.9999997473787516355514526367188e-06);
        float _3682 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1195 = isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0));
        float _1196 = _1195 * 2.0;
        float _1200 = (1.0 - _1195) / (_1195 + 1.0);
        float _3693 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1201 = isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0));
        float _1210 = ((((1.0 - _1201) * (_1196 + 2.0)) * exp2(log2(isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0))) * (_1196 + 1.0))) + _1201) * _1125;
        float _1211 = _1093 * 0.5;
        float _1212 = _1103 * 0.5;
        float _1213 = _1113 * 0.5;
        float _1214 = dot(vec3(_1211, _1212, _1213), vec3(_1211, _1212, _1213));
        float _1219 = (_1214 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1214);
        float _1227 = (dot(vec3(_380, _381, _382), vec3(_1219 * _1211, _1219 * _1212, _1219 * _1213)) + 1.0) * 0.5;
        float _3704 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1236 = sqrt(((_1212 * _1212) + (_1211 * _1211)) + (_1213 * _1213)) / (_1126 + 9.9999997473787516355514526367188e-06);
        float _3715 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1237 = isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0));
        float _1238 = _1237 * 2.0;
        float _1242 = (1.0 - _1237) / (_1237 + 1.0);
        float _3726 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1243 = isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0));
        float _1252 = ((((1.0 - _1243) * (_1238 + 2.0)) * exp2(log2(isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0))) * (_1238 + 1.0))) + _1243) * _1126;
        _1260 = _1093;
        _1261 = _1092;
        _1262 = _1091;
        _1263 = _1103;
        _1264 = _1102;
        _1265 = _1101;
        _1266 = _1113;
        _1267 = _1112;
        _1268 = _1111;
        _1269 = _1126;
        _1270 = _1125;
        _1271 = _1124;
        _1272 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0)));
        _1273 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0)));
        _1274 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0)));
    }
    else
    {
        _1260 = _948;
        _1261 = _948;
        _1262 = _948;
        _1263 = _948;
        _1264 = _948;
        _1265 = _948;
        _1266 = _948;
        _1267 = _948;
        _1268 = _948;
        _1269 = _948;
        _1270 = _948;
        _1271 = _948;
        _1272 = 0.0;
        _1273 = 0.0;
        _1274 = 0.0;
    }
    float _1284 = (cbModelParam._m0[1u].x * (_1272 - _960)) + _960;
    float _1285 = (cbModelParam._m0[1u].x * (_1273 - _961)) + _961;
    float _1286 = (cbModelParam._m0[1u].x * (_1274 - _962)) + _962;
    float _1307 = fma(_1286, cbSceneParam._m0[89u].z, fma(_1285, cbSceneParam._m0[89u].y, _1284 * cbSceneParam._m0[89u].x));
    float _1310 = fma(_1286, cbSceneParam._m0[90u].z, fma(_1285, cbSceneParam._m0[90u].y, _1284 * cbSceneParam._m0[90u].x));
    float _1313 = fma(_1286, cbSceneParam._m0[91u].z, fma(_1285, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1284));
    float _1328 = _556 * 0.5;
    float _1329 = _557 * 0.5;
    float _1330 = _558 * 0.5;
    float _1331 = dot(vec4(_1328, _1329, _1330, 1.0), vec4(_1262, _1265, _1268, _1271));
    float _1334 = dot(vec4(_1328, _1329, _1330, 1.0), vec4(_1261, _1264, _1267, _1270));
    float _1337 = dot(vec4(_1328, _1329, _1330, 1.0), vec4(_1260, _1263, _1266, _1269));
    float _1371;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1344 = dot(vec4(_1328, _1329, _1330, 1.0), vec4(_947, _951, _954, _957));
        float _1348 = dot(vec4(_1328, _1329, _1330, 1.0), vec4(_949, _952, _955, _958));
        float _1352 = dot(vec4(_1328, _1329, _1330, 1.0), vec4(_950, _953, _956, _959));
        float _1359 = dot(vec4(cbModelParam._m0[39u]), vec4(_1328, _1329, _1330, 1.0));
        _1371 = dot(vec3(isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0)), isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0)), isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1359) ? 0.0 : (isnan(0.0) ? _1359 : max(0.0, _1359))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1371 = 1.0;
    }
    float _1382;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1373 = dot(vec4(cbModelParam._m0[40u]), vec4(_1328, _1329, _1330, 1.0));
        _1382 = dot(vec3(isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0)), isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0)), isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1373) ? 0.0 : (isnan(0.0) ? _1373 : max(0.0, _1373))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1382 = 1.0;
    }
    float _1386 = (_1382 * cbModelParam._m0[1u].x) + (_1371 * (1.0 - cbModelParam._m0[1u].x));
    float _1396 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _383);
    float _1397 = isnan(_1396) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1396 : min(cbModelParam._m0[25u].z, _1396));
    float _1478;
    float _1480;
    float _1482;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1445 = fma(_617, cbModelParam._m0[13u].z, fma(_613, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _609)) + cbModelParam._m0[13u].w;
        float _1449 = fma(_617, cbModelParam._m0[14u].z, fma(_613, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _609)) + cbModelParam._m0[14u].w;
        float _1453 = fma(_617, cbModelParam._m0[15u].z, fma(_613, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _609)) + cbModelParam._m0[15u].w;
        float _1456 = fma(_558, cbModelParam._m0[13u].z, fma(_557, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _556));
        float _1459 = fma(_558, cbModelParam._m0[14u].z, fma(_557, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _556));
        float _1462 = fma(_558, cbModelParam._m0[15u].z, fma(_557, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _556));
        float _1490;
        if (_1456 > 0.0)
        {
            _1490 = abs((1.0 - _1445) / _1456);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1456 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1445 + 1.0) / _1456);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1490 = frontier_phi_19_17_ladder;
        }
        float _1715;
        if (_1459 > 0.0)
        {
            _1715 = abs((1.0 - _1449) / _1459);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1459 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1449 + 1.0) / _1459);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1715 = frontier_phi_28_24_ladder;
        }
        float _1961;
        if (_1462 > 0.0)
        {
            _1961 = abs((1.0 - _1453) / _1462);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1462 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1453 + 1.0) / _1462);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1961 = frontier_phi_40_35_ladder;
        }
        float _1963 = isnan(_1715) ? _1490 : (isnan(_1490) ? _1715 : min(_1490, _1715));
        float _1964 = isnan(_1961) ? _1963 : (isnan(_1963) ? _1961 : min(_1963, _1961));
        float _1968 = (_1964 * _1456) + _1445;
        float _1969 = (_1964 * _1459) + _1449;
        float _1970 = (_1964 * _1462) + _1453;
        float _1971 = _1964 * 9.9999997473787516355514526367188e-05;
        float _1973 = (-1.0) - _1971;
        float _1975 = _1971 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1970 > _1975) || ((_1970 < _1973) || ((_1969 > _1975) || ((_1969 < _1973) || ((_1968 < _1973) || (_1968 > _1975))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2094 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1970, cbModelParam._m0[9u].z, fma(_1969, cbModelParam._m0[9u].y, _1968 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1970, cbModelParam._m0[10u].z, fma(_1969, cbModelParam._m0[10u].y, _1968 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1970, cbModelParam._m0[11u].z, fma(_1969, cbModelParam._m0[11u].y, _1968 * cbModelParam._m0[11u].x))), _1397);
            frontier_phi_18_40_ladder = _2094.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2094.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2094.x * cbModelParam._m0[1u].y;
        }
        _1478 = frontier_phi_18_40_ladder_2;
        _1480 = frontier_phi_18_40_ladder_1;
        _1482 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1466 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_556, _557, _558), _1397);
        _1478 = _1466.x * cbModelParam._m0[1u].y;
        _1480 = _1466.y * cbModelParam._m0[1u].y;
        _1482 = _1466.z * cbModelParam._m0[1u].y;
    }
    float _1486 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _383);
    float _1487 = isnan(_1486) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1486 : min(cbModelParam._m0[25u].w, _1486));
    float _1580;
    float _1582;
    float _1584;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1544 = fma(_617, cbModelParam._m0[21u].z, fma(_613, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _609)) + cbModelParam._m0[21u].w;
        float _1548 = fma(_617, cbModelParam._m0[22u].z, fma(_613, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _609)) + cbModelParam._m0[22u].w;
        float _1552 = fma(_617, cbModelParam._m0[23u].z, fma(_613, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _609)) + cbModelParam._m0[23u].w;
        float _1555 = fma(_558, cbModelParam._m0[21u].z, fma(_557, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _556));
        float _1558 = fma(_558, cbModelParam._m0[22u].z, fma(_557, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _556));
        float _1561 = fma(_558, cbModelParam._m0[23u].z, fma(_557, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _556));
        float _1720;
        if (_1555 > 0.0)
        {
            _1720 = abs((1.0 - _1544) / _1555);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1555 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1544 + 1.0) / _1555);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1720 = frontier_phi_30_26_ladder;
        }
        float _1988;
        if (_1558 > 0.0)
        {
            _1988 = abs((1.0 - _1548) / _1558);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1558 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1548 + 1.0) / _1558);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1988 = frontier_phi_42_37_ladder;
        }
        float _2193;
        if (_1561 > 0.0)
        {
            _2193 = abs((1.0 - _1552) / _1561);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1561 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1552 + 1.0) / _1561);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2193 = frontier_phi_51_48_ladder;
        }
        float _2195 = isnan(_1988) ? _1720 : (isnan(_1720) ? _1988 : min(_1720, _1988));
        float _2196 = isnan(_2193) ? _2195 : (isnan(_2195) ? _2193 : min(_2195, _2193));
        float _2200 = (_2196 * _1555) + _1544;
        float _2201 = (_2196 * _1558) + _1548;
        float _2202 = (_2196 * _1561) + _1552;
        float _2203 = _2196 * 9.9999997473787516355514526367188e-05;
        float _2204 = (-1.0) - _2203;
        float _2206 = _2203 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2202 > _2206) || ((_2202 < _2204) || ((_2201 > _2206) || ((_2201 < _2204) || ((_2200 < _2204) || (_2200 > _2206))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2400 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2202, cbModelParam._m0[17u].z, fma(_2201, cbModelParam._m0[17u].y, _2200 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2202, cbModelParam._m0[18u].z, fma(_2201, cbModelParam._m0[18u].y, _2200 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2202, cbModelParam._m0[19u].z, fma(_2201, cbModelParam._m0[19u].y, _2200 * cbModelParam._m0[19u].x))), _1487);
            frontier_phi_27_51_ladder = _2400.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2400.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2400.x * cbModelParam._m0[1u].z;
        }
        _1580 = frontier_phi_27_51_ladder_2;
        _1582 = frontier_phi_27_51_ladder_1;
        _1584 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1564 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_556, _557, _558), _1487);
        _1580 = _1564.x * cbModelParam._m0[1u].z;
        _1582 = _1564.y * cbModelParam._m0[1u].z;
        _1584 = _1564.z * cbModelParam._m0[1u].z;
    }
    float _1596 = ((((1.0 - _577) * ((_564 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_577 * _564)) * _548;
    float _1597 = _1596 * ((cbModelParam._m0[1u].w * (_1580 - _1478)) + _1478);
    float _1598 = _1596 * ((cbModelParam._m0[1u].w * (_1582 - _1480)) + _1480);
    float _1599 = _1596 * ((cbModelParam._m0[1u].w * (_1584 - _1482)) + _1482);
    float _1602 = fma(_1599, cbSceneParam._m0[89u].z, fma(_1598, cbSceneParam._m0[89u].y, _1597 * cbSceneParam._m0[89u].x));
    float _1605 = fma(_1599, cbSceneParam._m0[90u].z, fma(_1598, cbSceneParam._m0[90u].y, _1597 * cbSceneParam._m0[90u].x));
    float _1608 = fma(_1599, cbSceneParam._m0[91u].z, fma(_1598, cbSceneParam._m0[91u].y, _1597 * cbSceneParam._m0[91u].x));
    vec4 _1616 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_482, _483));
    float _1618 = _1616.w;
    float _1630 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1618);
    float _1631 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1618);
    float _1632 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1618);
    uvec4 _1636 = floatBitsToUint(cbInstanceData._m0[_522 + 5u]);
    uint _1638 = _1636.x * 14u;
    uint _1639 = _1638 + 13u;
    float _1646 = _548 + (-1.0);
    float _1651 = (cbLight._m0[_1639].x * _1646) + 1.0;
    float _1652 = (cbLight._m0[_1639].y * _1646) + 1.0;
    float _1653 = (cbLight._m0[_1639].z * _1646) + 1.0;
    float _1654 = (cbLight._m0[_1639].w * _1646) + 1.0;
    uint _1655 = _1638 + 5u;
    float _1661 = isnan(1.0) ? _1652 : (isnan(_1652) ? 1.0 : min(_1652, 1.0));
    uint _1665 = _1638 + 4u;
    float _1674 = isnan(1.0) ? _1651 : (isnan(_1651) ? 1.0 : min(_1651, 1.0));
    uint _1678 = _1638 | 1u;
    float _1689 = dot(vec3(cbLight._m0[_1638].xyz), vec3(_380, _381, _382));
    float _1692 = dot(vec3(cbLight._m0[_1678].xyz), vec3(_380, _381, _382));
    float _3862 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
    float _3873 = isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0));
    float _1697 = (isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0))) * 0.3183098733425140380859375;
    float _1699 = (isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0))) * 0.3183098733425140380859375;
    float _1706 = ((cbLight._m0[_1655].x * _1661) * _1699) + (((cbLight._m0[_1665].x * _1630) * _1674) * _1697);
    float _1707 = ((_1661 * cbLight._m0[_1655].y) * _1699) + (((cbLight._m0[_1665].y * _1631) * _1674) * _1697);
    float _1708 = ((_1661 * cbLight._m0[_1655].z) * _1699) + (((cbLight._m0[_1665].z * _1632) * _1674) * _1697);
    uvec4 _1712 = floatBitsToUint(cbLight._m0[_1638 + 12u]);
    bool _1714 = _1712.x == 0u;
    float _1725;
    float _1727;
    float _1729;
    if (_1714)
    {
        _1725 = _1706;
        _1727 = _1707;
        _1729 = _1708;
    }
    else
    {
        uint _1733 = _1638 + 6u;
        float _1749 = (dot(vec3(cbLight._m0[_1638 + 2u].xyz), vec3(_380, _381, _382)) * 0.5) + 0.5;
        float _1750 = _1749 * _1749;
        float _3884 = isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0));
        float _1751 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
        float _1752 = isnan(1.0) ? _1653 : (isnan(_1653) ? 1.0 : min(_1653, 1.0));
        _1725 = (((cbLight._m0[_1733].x * 0.3183098733425140380859375) * _1751) * _1752) + _1706;
        _1727 = (((cbLight._m0[_1733].y * 0.3183098733425140380859375) * _1751) * _1752) + _1707;
        _1729 = (((cbLight._m0[_1733].z * 0.3183098733425140380859375) * _1751) * _1752) + _1708;
    }
    bool _1732 = _1712.y == 0u;
    float _1770;
    float _1772;
    float _1774;
    if (_1732)
    {
        _1770 = _1725;
        _1772 = _1727;
        _1774 = _1729;
    }
    else
    {
        uint _1932 = _1638 + 7u;
        float _1948 = (dot(vec3(cbLight._m0[_1638 + 3u].xyz), vec3(_380, _381, _382)) * 0.5) + 0.5;
        float _1949 = _1948 * _1948;
        float _3900 = isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0));
        float _1950 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
        float _1951 = isnan(1.0) ? _1654 : (isnan(_1654) ? 1.0 : min(_1654, 1.0));
        _1770 = (((cbLight._m0[_1932].x * 0.3183098733425140380859375) * _1950) * _1951) + _1725;
        _1772 = (((cbLight._m0[_1932].y * 0.3183098733425140380859375) * _1950) * _1951) + _1727;
        _1774 = (((cbLight._m0[_1932].z * 0.3183098733425140380859375) * _1950) * _1951) + _1729;
    }
    uint _1777 = _1638 + 8u;
    float _1790 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1638].w)) * _383) * 0.949999988079071044921875);
    float _1791 = _1790 * _1790;
    float _1792 = cbLight._m0[_1638].x + _461;
    float _1793 = cbLight._m0[_1638].y + _462;
    float _1794 = cbLight._m0[_1638].z + _463;
    float _1798 = inversesqrt(dot(vec3(_1792, _1793, _1794), vec3(_1792, _1793, _1794)));
    float _1799 = _1798 * _1792;
    float _1800 = _1798 * _1793;
    float _1801 = _1798 * _1794;
    float _1802 = dot(vec3(_380, _381, _382), vec3(cbLight._m0[_1638].xyz));
    float _3916 = isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0));
    float _1805 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
    float _3927 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _1806 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
    float _1807 = dot(vec3(_380, _381, _382), vec3(_1799, _1800, _1801));
    float _3938 = isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0));
    float _1810 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
    float _1811 = dot(vec3(cbLight._m0[_1638].xyz), vec3(_1799, _1800, _1801));
    float _3949 = isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0));
    float _1815 = _1791 * _1791;
    float _1819 = ((_1810 * _1810) * (_1815 + (-1.0))) + 1.0;
    float _1830 = (exp2(log2(1.0 - (isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1831 = 1.0 - _1791;
    float _1842 = (0.5 / (((_1806 * ((_1805 * _1831) + _1791)) + 9.9999999392252902907785028219223e-09) + (((_1806 * _1831) + _1791) * _1805))) * _1805;
    float _3960 = isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0));
    float _1844 = (isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0))) * (_1815 / ((_1819 * _1819) * 3.141590118408203125));
    uint _1858 = _1638 + 9u;
    float _1869 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1678].w)) * _383) * 0.949999988079071044921875);
    float _1870 = _1869 * _1869;
    float _1871 = cbLight._m0[_1678].x + _461;
    float _1872 = cbLight._m0[_1678].y + _462;
    float _1873 = cbLight._m0[_1678].z + _463;
    float _1877 = inversesqrt(dot(vec3(_1871, _1872, _1873), vec3(_1871, _1872, _1873)));
    float _1878 = _1877 * _1871;
    float _1879 = _1877 * _1872;
    float _1880 = _1877 * _1873;
    float _1881 = dot(vec3(_380, _381, _382), vec3(cbLight._m0[_1678].xyz));
    float _3971 = isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0));
    float _1884 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
    float _1885 = dot(vec3(_380, _381, _382), vec3(_1878, _1879, _1880));
    float _3982 = isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0));
    float _1888 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
    float _1889 = dot(vec3(cbLight._m0[_1678].xyz), vec3(_1878, _1879, _1880));
    float _3993 = isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0));
    float _1893 = _1870 * _1870;
    float _1897 = ((_1888 * _1888) * (_1893 + (-1.0))) + 1.0;
    float _1906 = (exp2(log2(1.0 - (isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1907 = 1.0 - _1870;
    float _1917 = (0.5 / (((_1806 * ((_1884 * _1907) + _1870)) + 9.9999999392252902907785028219223e-09) + (((_1806 * _1907) + _1870) * _1884))) * _1884;
    float _4004 = isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0));
    float _1919 = (isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0))) * (_1893 / ((_1897 * _1897) * 3.141590118408203125));
    float _1929 = (((_1906 * cbLight._m0[_1858].x) * _1919) * _1661) + ((((cbLight._m0[_1777].x * _1630) * _1830) * _1844) * _1674);
    float _1930 = (((_1906 * cbLight._m0[_1858].y) * _1919) * _1661) + ((((cbLight._m0[_1777].y * _1631) * _1830) * _1844) * _1674);
    float _1931 = (((_1906 * cbLight._m0[_1858].z) * _1919) * _1661) + ((((cbLight._m0[_1777].z * _1632) * _1830) * _1844) * _1674);
    float _1993;
    float _1995;
    float _1997;
    if (_1714)
    {
        _1993 = _1929;
        _1995 = _1930;
        _1997 = _1931;
    }
    else
    {
        uint _1999 = _1638 + 2u;
        uint _2003 = _1638 + 10u;
        float _2017 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1999].w)) * _383) * 0.949999988079071044921875);
        float _2018 = _2017 * _2017;
        float _2019 = cbLight._m0[_1999].x + _461;
        float _2020 = cbLight._m0[_1999].y + _462;
        float _2021 = cbLight._m0[_1999].z + _463;
        float _2025 = inversesqrt(dot(vec3(_2019, _2020, _2021), vec3(_2019, _2020, _2021)));
        float _2026 = _2025 * _2019;
        float _2027 = _2025 * _2020;
        float _2028 = _2025 * _2021;
        float _2029 = dot(vec3(_380, _381, _382), vec3(cbLight._m0[_1999].xyz));
        float _4015 = isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0));
        float _2032 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
        float _2033 = dot(vec3(_380, _381, _382), vec3(_2026, _2027, _2028));
        float _4026 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
        float _2036 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
        float _2037 = dot(vec3(cbLight._m0[_1999].xyz), vec3(_2026, _2027, _2028));
        float _4037 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
        float _2041 = _2018 * _2018;
        float _2045 = ((_2036 * _2036) * (_2041 + (-1.0))) + 1.0;
        float _2054 = (exp2(log2(1.0 - (isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2055 = 1.0 - _2018;
        float _2065 = (0.5 / (((_1806 * ((_2032 * _2055) + _2018)) + 9.9999999392252902907785028219223e-09) + (((_1806 * _2055) + _2018) * _2032))) * _2032;
        float _4048 = isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0));
        float _2067 = (isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0))) * (_2041 / ((_2045 * _2045) * 3.141590118408203125));
        float _2068 = isnan(1.0) ? _1653 : (isnan(_1653) ? 1.0 : min(_1653, 1.0));
        _1993 = (((_2054 * cbLight._m0[_2003].x) * _2067) * _2068) + _1929;
        _1995 = (((_2054 * cbLight._m0[_2003].y) * _2067) * _2068) + _1930;
        _1997 = (((_2054 * cbLight._m0[_2003].z) * _2067) * _2068) + _1931;
    }
    float _2103;
    float _2105;
    float _2107;
    if (_1732)
    {
        _2103 = _1993;
        _2105 = _1995;
        _2107 = _1997;
    }
    else
    {
        uint _2114 = _1638 + 3u;
        uint _2118 = _1638 + 11u;
        float _2132 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2114].w)) * _383) * 0.949999988079071044921875);
        float _2133 = _2132 * _2132;
        float _2134 = cbLight._m0[_2114].x + _461;
        float _2135 = cbLight._m0[_2114].y + _462;
        float _2136 = cbLight._m0[_2114].z + _463;
        float _2140 = inversesqrt(dot(vec3(_2134, _2135, _2136), vec3(_2134, _2135, _2136)));
        float _2141 = _2140 * _2134;
        float _2142 = _2140 * _2135;
        float _2143 = _2140 * _2136;
        float _2144 = dot(vec3(_380, _381, _382), vec3(cbLight._m0[_2114].xyz));
        float _4064 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
        float _2147 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
        float _2148 = dot(vec3(_380, _381, _382), vec3(_2141, _2142, _2143));
        float _4075 = isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0));
        float _2151 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
        float _2152 = dot(vec3(cbLight._m0[_2114].xyz), vec3(_2141, _2142, _2143));
        float _4086 = isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0));
        float _2156 = _2133 * _2133;
        float _2160 = ((_2151 * _2151) * (_2156 + (-1.0))) + 1.0;
        float _2169 = (exp2(log2(1.0 - (isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2170 = 1.0 - _2133;
        float _2180 = (0.5 / (((_1806 * ((_2147 * _2170) + _2133)) + 9.9999999392252902907785028219223e-09) + (((_1806 * _2170) + _2133) * _2147))) * _2147;
        float _4097 = isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0));
        float _2182 = (isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0))) * (_2156 / ((_2160 * _2160) * 3.141590118408203125));
        float _2183 = isnan(1.0) ? _1654 : (isnan(_1654) ? 1.0 : min(_1654, 1.0));
        _2103 = (((_2169 * cbLight._m0[_2118].x) * _2182) * _2183) + _1993;
        _2105 = (((_2169 * cbLight._m0[_2118].y) * _2182) * _2183) + _1995;
        _2107 = (((_2169 * cbLight._m0[_2118].z) * _2182) * _2183) + _1997;
    }
    float _2317;
    float _2319;
    float _2321;
    float _2323;
    float _2325;
    float _2327;
    if (_1636.y == 0u)
    {
        float _2258 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2259 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2258;
        float _2260 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2258;
        float _2261 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2258;
        uvec4 _2273 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2274 = _2273.x;
        uint _2285 = uint((float(_2273.y) * floor(float(uint(cbSceneParam._m0[85u].y * _483) / _2274))) + floor(float(uint(cbSceneParam._m0[85u].x * _482) / _2274)));
        float _2295 = (log2(_2261 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2296 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
        uint _2299 = uint(isnan(14.0) ? _2296 : (isnan(_2296) ? 14.0 : min(_2296, 14.0)));
        uvec4 _2304 = texelFetch(g_lightClusterGridBuffer, int(((_2299 << 2u) + (_2285 << 6u)) >> 2u));
        uint _2305 = _2304.x;
        uint _2306 = _2273.z;
        float _2405;
        float _2407;
        float _2409;
        float _2411;
        float _2413;
        float _2415;
        if (((((1u << ((_2306 >> 4u) & 15u)) + 4294967295u) & _2305) == 0u) || ((_2306 & 240u) == 0u))
        {
            _2405 = 0.0;
            _2407 = 0.0;
            _2409 = 0.0;
            _2411 = 0.0;
            _2413 = 0.0;
            _2415 = 0.0;
        }
        else
        {
            float _2406;
            float _2408;
            float _2410;
            float _2412;
            float _2414;
            float _2416;
            float _2557 = 0.0;
            float _2558 = 0.0;
            float _2559 = 0.0;
            float _2560 = 0.0;
            float _2561 = 0.0;
            float _2562 = 0.0;
            uint _2563 = 0u;
            uint _2572;
            bool _2573;
            for (;;)
            {
                _2572 = texelFetch(g_lightClassification, int((((_2299 << 5u) + (_2285 << 9u)) + (_2563 << 2u)) >> 2u)).x;
                _2573 = _2572 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2573)
                {
                    frontier_phi_68_pred = _2559;
                    frontier_phi_68_pred_1 = _2562;
                    frontier_phi_68_pred_2 = _2561;
                    frontier_phi_68_pred_3 = _2560;
                    frontier_phi_68_pred_4 = _2558;
                    frontier_phi_68_pred_5 = _2557;
                }
                else
                {
                    float _2702;
                    float _2703;
                    float _2704;
                    float _2705;
                    float _2706;
                    float _2707;
                    uint _2708;
                    _2702 = _2557;
                    _2703 = _2558;
                    _2704 = _2559;
                    _2705 = _2560;
                    _2706 = _2561;
                    _2707 = _2562;
                    _2708 = _2572;
                    float _2629;
                    float _2630;
                    float _2631;
                    float _2632;
                    float _2633;
                    float _2634;
                    for (;;)
                    {
                        uint _2712 = uint(findLSB(_2708)) + (_2563 << 5u);
                        uint _2709 = (_2708 + 4294967295u) & _2708;
                        uint _2714 = _2712 * 48u;
                        vec4 _2728 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2714)).x, texelFetch(g_PointLightRenderingBuffer, int(_2714 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2714 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2714 + 3u)).x));
                        uint _2734 = (_2712 * 48u) + 4u;
                        vec4 _2747 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2734)).x, texelFetch(g_PointLightRenderingBuffer, int(_2734 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2734 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2734 + 3u)).x));
                        uint _2753 = (_2712 * 48u) + 8u;
                        vec3 _2764 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2753)).x, texelFetch(g_PointLightRenderingBuffer, int(_2753 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2753 + 2u)).x));
                        float _2768 = _2728.x - _2259;
                        float _2769 = _2728.y - _2260;
                        float _2770 = _2728.z - _2261;
                        float _2771 = dot(vec3(_2768, _2769, _2770), vec3(_2768, _2769, _2770));
                        float _2774 = inversesqrt(_2771);
                        float _2775 = _2774 * _2768;
                        float _2776 = _2774 * _2769;
                        float _2777 = _2774 * _2770;
                        float _2778 = dot(vec3(_503, _506, _509), vec3(_2775, _2776, _2777));
                        float _2783 = 1.0 - (_2771 * _2728.w);
                        float _4123 = isnan(0.0) ? _2783 : (isnan(_2783) ? 0.0 : max(_2783, 0.0));
                        float _2784 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
                        float _2785 = sqrt(_2771) * _2747.w;
                        float _2788 = 1.39999997615814208984375 / (_2785 + 1.39999997615814208984375);
                        float _2789 = _2788 * _2788;
                        float _2792 = ((1.0 - _2789) * _2778) + _2789;
                        float _2795 = _2785 * _2785;
                        float _2799 = ((isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0))) * _2784) / ((_2795 * 0.699999988079071044921875) + 1.0);
                        float _2803 = (-0.0) - _2259;
                        float _2804 = (-0.0) - _2260;
                        float _2805 = (-0.0) - _2261;
                        float _2809 = inversesqrt(dot(vec3(_2803, _2804, _2805), vec3(_2803, _2804, _2805)));
                        float _2810 = _2809 * _2803;
                        float _2811 = _2809 * _2804;
                        float _2812 = _2809 * _2805;
                        float _2820 = exp2(log2(1.0 / ((_2795 * 3.5) + 5.0)) * 0.25);
                        float _2821 = 1.0 - _564;
                        float _2828 = sqrt(1.0 - ((1.0 - (_2821 * _2821)) * (1.0 - (_2820 * _2820))));
                        float _2829 = _2828 * _2828;
                        float _2830 = _2829 * _2829;
                        float _2831 = _2810 + _2775;
                        float _2832 = _2811 + _2776;
                        float _2833 = _2812 + _2777;
                        float _2837 = inversesqrt(dot(vec3(_2831, _2832, _2833), vec3(_2831, _2832, _2833)));
                        float _2841 = dot(vec3(_503, _506, _509), vec3(_2810, _2811, _2812));
                        float _4139 = isnan(0.0) ? _2841 : (isnan(_2841) ? 0.0 : max(_2841, 0.0));
                        float _2844 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
                        float _2845 = dot(vec3(_503, _506, _509), vec3(_2837 * _2831, _2837 * _2832, _2837 * _2833));
                        float _4150 = isnan(0.0) ? _2845 : (isnan(_2845) ? 0.0 : max(_2845, 0.0));
                        float _2848 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
                        float _2852 = ((_2848 * _2848) * (_2830 + (-1.0))) + 1.0;
                        float _2853 = _2788 * _2829;
                        float _2854 = _2853 * _2853;
                        float _2857 = ((1.0 - _2854) * _2778) + _2854;
                        float _4161 = isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : max(_2857, 0.0));
                        float _2858 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
                        float _2859 = 1.0 - _2829;
                        float _2869 = (0.5 / (((_2858 * ((_2844 * _2859) + _2829)) + 9.9999999392252902907785028219223e-09) + (((_2858 * _2859) + _2829) * _2844))) * _2858;
                        float _4172 = isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : max(_2869, 0.0));
                        float _2880 = (((_2830 * 3.1415927410125732421875) * (isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0)))) / ((_2852 * _2852) * ((_2795 * 2.1991131305694580078125) + 3.141590118408203125))) * _2784;
                        _2632 = (_2799 * _2747.x) + _2705;
                        _2633 = (_2799 * _2747.y) + _2706;
                        _2634 = (_2799 * _2747.z) + _2707;
                        _2629 = (_2880 * _2764.x) + _2702;
                        _2630 = (_2880 * _2764.y) + _2703;
                        _2631 = (_2880 * _2764.z) + _2704;
                        if (_2709 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2702 = _2629;
                            _2703 = _2630;
                            _2704 = _2631;
                            _2705 = _2632;
                            _2706 = _2633;
                            _2707 = _2634;
                            _2708 = _2709;
                        }
                    }
                    frontier_phi_68_pred = _2631;
                    frontier_phi_68_pred_1 = _2634;
                    frontier_phi_68_pred_2 = _2633;
                    frontier_phi_68_pred_3 = _2632;
                    frontier_phi_68_pred_4 = _2630;
                    frontier_phi_68_pred_5 = _2629;
                }
                _2410 = frontier_phi_68_pred;
                _2416 = frontier_phi_68_pred_1;
                _2414 = frontier_phi_68_pred_2;
                _2412 = frontier_phi_68_pred_3;
                _2408 = frontier_phi_68_pred_4;
                _2406 = frontier_phi_68_pred_5;
                uint _2564 = _2563 + 1u;
                if (_2564 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2557 = _2406;
                    _2558 = _2408;
                    _2559 = _2410;
                    _2560 = _2412;
                    _2561 = _2414;
                    _2562 = _2416;
                    _2563 = _2564;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2405 = _2406;
            _2407 = _2408;
            _2409 = _2410;
            _2411 = _2412;
            _2413 = _2414;
            _2415 = _2416;
        }
        uvec4 _2419 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2420 = _2419.z;
        uint _2422 = (_2420 >> 8u) & 15u;
        float _2525;
        float _2527;
        float _2529;
        float _2531;
        float _2533;
        float _2535;
        if (((4294967295u << _2422) & _2305) == 0u)
        {
            _2525 = _2405;
            _2527 = _2407;
            _2529 = _2409;
            _2531 = _2411;
            _2533 = _2413;
            _2535 = _2415;
        }
        else
        {
            float _2550 = inversesqrt(dot(vec3(_2259, _2260, _2261), vec3(_2259, _2260, _2261)));
            float _2551 = _2550 * _2259;
            float _2552 = _2550 * _2260;
            float _2553 = _2550 * _2261;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2422 < ((_2420 >> 12u) & 15u))
            {
                float _2526;
                float _2528;
                float _2530;
                float _2532;
                float _2534;
                float _2536;
                float _2685 = _2405;
                float _2686 = _2407;
                float _2687 = _2409;
                float _2688 = _2411;
                float _2689 = _2413;
                float _2690 = _2415;
                uint _2691 = _2422;
                uint _2700;
                bool _2701;
                for (;;)
                {
                    _2700 = texelFetch(g_lightClassification, int((((_2299 << 5u) + (_2285 << 9u)) + (_2691 << 2u)) >> 2u)).x;
                    _2701 = _2700 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2701)
                    {
                        frontier_phi_79_pred = _2690;
                        frontier_phi_79_pred_1 = _2689;
                        frontier_phi_79_pred_2 = _2688;
                        frontier_phi_79_pred_3 = _2687;
                        frontier_phi_79_pred_4 = _2686;
                        frontier_phi_79_pred_5 = _2685;
                    }
                    else
                    {
                        float _2894;
                        float _2895;
                        float _2896;
                        float _2897;
                        float _2898;
                        float _2899;
                        float _3190;
                        float _3191;
                        float _3192;
                        float _3193;
                        float _3194;
                        float _3195;
                        float _2907 = _2685;
                        float _2908 = _2686;
                        float _2909 = _2687;
                        float _2910 = _2688;
                        float _2911 = _2689;
                        float _2912 = _2690;
                        uint _2913 = _2700;
                        uint _2914;
                        vec4 _2939;
                        float _2940;
                        vec4 _2955;
                        vec3 _2967;
                        vec4 _2983;
                        vec4 _2999;
                        float _3046;
                        bool _3047;
                        for (;;)
                        {
                            uint _2924 = ((_2691 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2913));
                            _2914 = (_2913 + 4294967295u) & _2913;
                            uint _2926 = _2924 * 40u;
                            _2939 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2926)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2926 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2926 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2926 + 3u)).x));
                            _2940 = _2939.w;
                            uint _2942 = (_2924 * 40u) + 4u;
                            _2955 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2942)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2942 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2942 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2942 + 3u)).x));
                            uint _2957 = (_2924 * 40u) + 8u;
                            _2967 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2957)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 2u)).x));
                            uint _2970 = (_2924 * 40u) + 16u;
                            _2983 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2970)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 3u)).x));
                            uint _2986 = (_2924 * 40u) + 20u;
                            _2999 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2986)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 3u)).x));
                            uint _3002 = (_2924 * 40u) + 24u;
                            vec4 _3015 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3002)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 3u)).x));
                            uint _3021 = (_2924 * 40u) + 28u;
                            vec4 _3034 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3021)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3021 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3021 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3021 + 3u)).x));
                            _3046 = fma(_2261, _3034.z, fma(_2260, _3034.y, _3034.x * _2259)) + _3034.w;
                            _3047 = !((fma(_2261, _3015.z, fma(_2260, _3015.y, _3015.x * _2259)) + _3015.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3047)
                            {
                                float _3074 = _2939.x - _2259;
                                float _3075 = _2939.y - _2260;
                                float _3076 = _2939.z - _2261;
                                float _3077 = dot(vec3(_3074, _3075, _3076), vec3(_3074, _3075, _3076));
                                float _3080 = inversesqrt(_3077);
                                float _3081 = _3080 * _3074;
                                float _3082 = _3080 * _3075;
                                float _3083 = _3080 * _3076;
                                float _3087 = 1.0 - (_3077 / (_2940 * _2940));
                                float _4183 = isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : max(_3087, 0.0));
                                float _3088 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
                                float _3092 = sqrt(_3077) * _2955.w;
                                float _3094 = 1.39999997615814208984375 / (_3092 + 1.39999997615814208984375);
                                float _3095 = _3094 * _3094;
                                float _3098 = ((1.0 - _3095) * dot(vec3(_3081, _3082, _3083), vec3(_503, _506, _509))) + _3095;
                                float _3101 = _3092 * _3092;
                                float _3105 = (fma(_2261, _2983.z, fma(_2260, _2983.y, _2983.x * _2259)) + _2983.w) / _3046;
                                float _3106 = (fma(_2261, _2999.z, fma(_2260, _2999.y, _2999.x * _2259)) + _2999.w) / _3046;
                                float _3110 = 1.0 - dot(vec2(_3105, _3106), vec2(_3105, _3106));
                                float _4199 = isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : max(_3110, 0.0));
                                float _3111 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
                                float _3112 = _3111 * (((isnan(0.0) ? _3098 : (isnan(_3098) ? 0.0 : max(_3098, 0.0))) * _3088) / ((_3101 * 0.699999988079071044921875) + 1.0));
                                float _3124 = exp2(log2(1.0 / ((_3101 * 3.5) + 5.0)) * 0.25);
                                float _3125 = 1.0 - _564;
                                float _3132 = sqrt(1.0 - ((1.0 - (_3125 * _3125)) * (1.0 - (_3124 * _3124))));
                                float _3133 = _3132 * _3132;
                                float _3134 = _3133 * _3133;
                                float _3135 = _3081 - _2551;
                                float _3136 = _3082 - _2552;
                                float _3137 = _3083 - _2553;
                                float _3141 = inversesqrt(dot(vec3(_3135, _3136, _3137), vec3(_3135, _3136, _3137)));
                                float _3145 = dot(vec3(_503, _506, _509), vec3((-0.0) - _2551, (-0.0) - _2552, (-0.0) - _2553));
                                float _4210 = isnan(0.0) ? _3145 : (isnan(_3145) ? 0.0 : max(_3145, 0.0));
                                float _3148 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
                                float _3149 = dot(vec3(_503, _506, _509), vec3(_3141 * _3135, _3141 * _3136, _3141 * _3137));
                                float _4221 = isnan(0.0) ? _3149 : (isnan(_3149) ? 0.0 : max(_3149, 0.0));
                                float _3152 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
                                float _3156 = ((_3152 * _3152) * (_3134 + (-1.0))) + 1.0;
                                float _3157 = _3094 * _3133;
                                float _3158 = _3157 * _3157;
                                float _3164 = ((1.0 - _3158) * dot(vec3(_503, _506, _509), vec3(_3081, _3082, _3083))) + _3158;
                                float _4232 = isnan(0.0) ? _3164 : (isnan(_3164) ? 0.0 : max(_3164, 0.0));
                                float _3165 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
                                float _3166 = 1.0 - _3133;
                                float _3176 = (0.5 / (((_3165 * ((_3148 * _3166) + _3133)) + 9.9999999392252902907785028219223e-09) + (((_3165 * _3166) + _3133) * _3148))) * _3165;
                                float _4243 = isnan(0.0) ? _3176 : (isnan(_3176) ? 0.0 : max(_3176, 0.0));
                                float _3186 = (_3111 * _3088) * (((_3134 * 3.1415927410125732421875) * (isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0)))) / ((_3156 * _3156) * ((_3101 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3112 * _2955.z;
                                frontier_phi_85_pred_1 = _3112 * _2955.y;
                                frontier_phi_85_pred_2 = _3112 * _2955.x;
                                frontier_phi_85_pred_3 = _3186 * _2967.z;
                                frontier_phi_85_pred_4 = _3186 * _2967.y;
                                frontier_phi_85_pred_5 = _3186 * _2967.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3195 = frontier_phi_85_pred;
                            _3194 = frontier_phi_85_pred_1;
                            _3193 = frontier_phi_85_pred_2;
                            _3192 = frontier_phi_85_pred_3;
                            _3191 = frontier_phi_85_pred_4;
                            _3190 = frontier_phi_85_pred_5;
                            _2897 = _3193 + _2910;
                            _2898 = _3194 + _2911;
                            _2899 = _3195 + _2912;
                            _2894 = _3190 + _2907;
                            _2895 = _3191 + _2908;
                            _2896 = _3192 + _2909;
                            if (_2914 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2907 = _2894;
                                _2908 = _2895;
                                _2909 = _2896;
                                _2910 = _2897;
                                _2911 = _2898;
                                _2912 = _2899;
                                _2913 = _2914;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2899;
                        frontier_phi_79_pred_1 = _2898;
                        frontier_phi_79_pred_2 = _2897;
                        frontier_phi_79_pred_3 = _2896;
                        frontier_phi_79_pred_4 = _2895;
                        frontier_phi_79_pred_5 = _2894;
                    }
                    _2536 = frontier_phi_79_pred;
                    _2534 = frontier_phi_79_pred_1;
                    _2532 = frontier_phi_79_pred_2;
                    _2530 = frontier_phi_79_pred_3;
                    _2528 = frontier_phi_79_pred_4;
                    _2526 = frontier_phi_79_pred_5;
                    uint _2692 = _2691 + 1u;
                    if (_2692 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2685 = _2526;
                        _2686 = _2528;
                        _2687 = _2530;
                        _2688 = _2532;
                        _2689 = _2534;
                        _2690 = _2536;
                        _2691 = _2692;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2532;
                frontier_phi_60_61_ladder_1 = _2536;
                frontier_phi_60_61_ladder_2 = _2534;
                frontier_phi_60_61_ladder_3 = _2530;
                frontier_phi_60_61_ladder_4 = _2528;
                frontier_phi_60_61_ladder_5 = _2526;
            }
            else
            {
                frontier_phi_60_61_ladder = _2411;
                frontier_phi_60_61_ladder_1 = _2415;
                frontier_phi_60_61_ladder_2 = _2413;
                frontier_phi_60_61_ladder_3 = _2409;
                frontier_phi_60_61_ladder_4 = _2407;
                frontier_phi_60_61_ladder_5 = _2405;
            }
            _2525 = frontier_phi_60_61_ladder_5;
            _2527 = frontier_phi_60_61_ladder_4;
            _2529 = frontier_phi_60_61_ladder_3;
            _2531 = frontier_phi_60_61_ladder;
            _2533 = frontier_phi_60_61_ladder_2;
            _2535 = frontier_phi_60_61_ladder_1;
        }
        float _2540 = isnan(1.0) ? _548 : (isnan(_548) ? 1.0 : min(_548, 1.0));
        _2317 = (_2540 * _2531) + _1770;
        _2319 = (_2540 * _2533) + _1772;
        _2321 = (_2540 * _2535) + _1774;
        _2323 = ((_2525 * 0.039999999105930328369140625) * _2540) + _2103;
        _2325 = ((_2527 * 0.039999999105930328369140625) * _2540) + _2105;
        _2327 = ((_2529 * 0.039999999105930328369140625) * _2540) + _2107;
    }
    else
    {
        _2317 = _1770;
        _2319 = _1772;
        _2321 = _1774;
        _2323 = _2103;
        _2325 = _2105;
        _2327 = _2107;
    }
    float _4259 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _4270 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _4281 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    float _2344 = ((isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0))) * (_2317 + ((isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0))) * _548))) + ((_2323 + ((isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0))) * _1386)) * cbPerFrame._m0[3u].x);
    float _2345 = ((isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0))) * (_2319 + ((isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0))) * _548))) + ((_2325 + ((isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0))) * _1386)) * cbPerFrame._m0[3u].x);
    float _2346 = ((isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0))) * (_2321 + ((isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0))) * _548))) + ((_2327 + ((isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0))) * _1386)) * cbPerFrame._m0[3u].x);
    uint _2347 = _522 + 6u;
    float _2355 = _482 / cbSceneParam._m0[86u].x;
    float _2356 = _483 / cbSceneParam._m0[86u].y;
    vec4 _2370 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2355, _2356, (log2((isnan(cbSceneParam._m0[77u].w) ? _402 : (isnan(_402) ? cbSceneParam._m0[77u].w : min(_402, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2372 = _2370.x;
    float _2373 = _2370.y;
    float _2374 = _2370.z;
    float _2375 = _2370.w;
    float _2467;
    float _2469;
    float _2471;
    float _2473;
    if (_402 > cbSceneParam._m0[78u].w)
    {
        float _2430 = isnan(_402) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _402 : min(cbSceneParam._m0[80u].w, _402));
        float _2431 = _2430 / _402;
        float _2442 = _2431 * _454;
        float _2443 = _455 * _2431;
        float _2444 = (-0.0) - _2443;
        float _2445 = _2431 * _456;
        float _2447 = (cbSceneParam._m0[77u].w * _2444) / _2430;
        float _2448 = _2447 + cbSceneParam._m0[79u].w;
        float _2449 = cbSceneParam._m0[79u].w - _2443;
        float _2455 = sqrt(((_2442 * _2442) + (_2443 * _2443)) + (_2445 * _2445));
        float _2458 = (1.0 - (cbSceneParam._m0[77u].w / _2430)) * _2455;
        float _2463 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2465 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2642;
        if (abs((_2444 - _2447) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2642 = ((((_2448 > 0.0) ? exp2(_2463 * _2448) : (2.0 - exp2(_2465 * _2448))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2458;
        }
        else
        {
            float _2586 = 1.0 / cbSceneParam._m0[80u].x;
            float _2587 = isnan(_2449) ? _2448 : (isnan(_2448) ? _2449 : max(_2448, _2449));
            float _2588 = isnan(_2449) ? _2448 : (isnan(_2448) ? _2449 : min(_2448, _2449));
            float _2597 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : min(_2587, 0.0));
            float _2598 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : min(_2588, 0.0));
            _2642 = ((abs(_2455 / _2444) * cbSceneParam._m0[80u].y) * ((((_2597 - _2598) * 2.0) - ((exp2(_2463 * (isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0)))) - exp2(_2463 * (isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0))))) * _2586)) - ((exp2(_2465 * _2597) - exp2(_2465 * _2598)) * _2586))) + (_2458 * cbSceneParam._m0[80u].z);
        }
        vec4 _2644 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2355, _2356, 1.0), 0.0);
        float _2653 = exp2((_2642 * (-1.44269502162933349609375)) * (1.0 - _2644.w));
        float _2654 = log2(_2653);
        float _2670 = log2(_2375);
        _2467 = (exp2(_2670 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2654 * cbSceneParam._m0[78u].x)) * _2644.x) / cbSceneParam._m0[78u].x)) + _2372;
        _2469 = (exp2(_2670 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2654 * cbSceneParam._m0[78u].y)) * _2644.y) / cbSceneParam._m0[78u].y)) + _2373;
        _2471 = (exp2(_2670 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2654 * cbSceneParam._m0[78u].z)) * _2644.z) / cbSceneParam._m0[78u].z)) + _2374;
        _2473 = _2653 * _2375;
    }
    else
    {
        _2467 = _2372;
        _2469 = _2373;
        _2471 = _2374;
        _2473 = _2375;
    }
    bool _2680;
    vec4 _2483;
    vec4 _2505;
    float _2507;
    float _2511;
    float _2512;
    float _2513;
    float _2514;
    bool _2524;
    for (;;)
    {
        _2483 = cbMatDynParam._m0[0u];
        float _2485 = roundEven(_2483.y);
        bool _2486 = _2485 == 3.0;
        float _2487 = log2(_2473);
        float _2494 = exp2(_2487 * cbSceneParam._m0[78u].x) * _2344;
        float _2495 = exp2(_2487 * cbSceneParam._m0[78u].y) * _2345;
        float _2496 = exp2(_2487 * cbSceneParam._m0[78u].z) * _2346;
        float _2503 = _470 + (-0.5);
        _2505 = cbMtdParam._m0[1u];
        _2507 = _2505.y * _2503;
        float _2510 = (_2485 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2511 = _2510 * (_2486 ? _2494 : (_2494 + (cbSceneParam._m0[72u].w * _2467)));
        _2512 = _2510 * (_2486 ? _2495 : (_2495 + (cbSceneParam._m0[72u].w * _2469)));
        _2513 = _2510 * (_2486 ? _2496 : (_2496 + (cbSceneParam._m0[72u].w * _2471)));
        _2514 = _2503 * 0.999000012874603271484375;
        _2524 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2524)
        {
            if ((cbInstanceData._m0[_522 + 7u].x + _2514) < 0.5)
            {
                _2680 = true;
                break;
            }
        }
        uint _2621 = _524 + uint(_2483.w);
        if ((cbInstanceData._m0[_2621].w < 1.0) && ((cbInstanceData._m0[_2621].w + _2514) < 0.5))
        {
            _2680 = true;
            break;
        }
        if ((_2507 + _252) < _2505.x)
        {
            _2680 = true;
            break;
        }
        _2680 = false;
        break;
    }
    float _2885;
    if (_2680)
    {
        discard_state = true;
        _2885 = 0.0;
    }
    else
    {
        _2885 = cbInstanceData._m0[_2347].w;
    }
    SV_Target.x = _2511;
    SV_Target.y = _2512;
    SV_Target.z = _2513;
    SV_Target.w = _2885;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2347].w;
    discard_exit();
}


