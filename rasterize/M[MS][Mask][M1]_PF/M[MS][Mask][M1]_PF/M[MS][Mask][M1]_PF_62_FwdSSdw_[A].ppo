#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1401;
float _3804;
float _3805;
float _3806;
float _3807;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _224 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _225 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _226 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _232 = inversesqrt(dot(vec3(_224, _225, _226), vec3(_224, _225, _226)));
    float _239 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _246 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _252 = uint(roundEven(NORMAL.w)) * 13u;
    uint _258 = _252 + 1u;
    uint _262 = _252 + 2u;
    float _271 = sqrt(((cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x)) + (cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x));
    float _272 = _271 * TEXCOORD.z;
    float _273 = _271 * TEXCOORD.w;
    vec4 _292 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _316 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _321 = _316.x * cbMtdParam._m0[11u].x;
    float _322 = _316.y * cbMtdParam._m0[11u].y;
    float _323 = _316.z * cbMtdParam._m0[11u].z;
    vec4 _342 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _272) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _273) + cbTextureTilingScale._m0[5u].w));
    vec4 _362 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _396 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[27u].x * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].y * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _398 = _396.x;
    float _410 = dot(vec4(_398, _396.yzw), vec4(cbMtdParam._m0[28u].w, cbMtdParam._m0[29u].xy, 0.0));
    float _427 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _362.x) * 2.0) - ((((_398 - _410) * cbMtdParam._m0[23u].w) + _410) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3816 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _428 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
    float _435 = (_428 * ((_342.x * cbMtdParam._m0[12u].x) - _321)) + _321;
    float _436 = (_428 * ((_342.y * cbMtdParam._m0[12u].y) - _322)) + _322;
    float _437 = (_428 * ((_342.z * cbMtdParam._m0[12u].z) - _323)) + _323;
    vec4 _454 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _272) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _273) + cbTextureTilingScale._m0[3u].w));
    vec4 _476 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].z * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].w * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _478 = _476.x;
    float _488 = dot(vec4(_478, _476.yzw), vec4(cbMtdParam._m0[30u].yzw, 0.0));
    float _502 = ((cbMtdParam._m0[25u].z * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _362.y) * 2.0) - ((((_478 - _488) * cbMtdParam._m0[23u].w) + _488) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3827 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _503 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
    float _516 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _292.x) * ((_503 * ((_454.x * cbMtdParam._m0[13u].x) - _435)) + _435);
    float _519 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _292.y) * ((_503 * ((_454.y * cbMtdParam._m0[13u].y) - _436)) + _436);
    float _522 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _292.z) * ((_503 * ((_454.z * cbMtdParam._m0[13u].z) - _437)) + _437);
    vec4 _540 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _272) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _273) + cbTextureTilingScale._m0[4u].w));
    vec4 _557 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _559 = _557.x;
    float _560 = _557.y;
    float _561 = _557.z;
    float _568 = ((_540.x - _559) * _428) + _559;
    float _569 = ((_540.y - _560) * _428) + _560;
    float _570 = ((_540.z - _561) * _428) + _561;
    vec4 _582 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _272) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _273) + cbTextureTilingScale._m0[2u].w));
    float _595 = ((_582.z - _570) * _503) + _570;
    float _598 = ((((_582.x - _568) * _503) + _568) * 2.0) + (-1.0);
    float _600 = ((((_582.y - _569) * _503) + _569) * 2.0) + (-1.0);
    float _601 = dot(vec2(_598, _600), vec2(_598, _600));
    float _3838 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _606 = sqrt(1.0 - (isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0))));
    vec4 _620 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _645 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _272) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _273) + cbTextureTilingScale._m0[11u].w));
    float _647 = _645.x;
    float _648 = 1.0 - _647;
    float _664 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_647 - _648) * cbMtdParam._m0[24u].z) + _648) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3849 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _665 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
    float _672 = (_665 * (cbMtdParam._m0[17u].x - _516)) + _516;
    float _673 = (_665 * (cbMtdParam._m0[17u].y - _519)) + _519;
    float _674 = (_665 * (cbMtdParam._m0[17u].z - _522)) + _522;
    vec4 _700 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _702 = _700.x;
    float _719 = ((texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _272) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _273) + cbTextureTilingScale._m0[9u].w)).x - _702) * _428) + _702;
    float _736 = ((texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _272) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _273) + cbTextureTilingScale._m0[21u].w)).x - _719) * _503) + _719;
    float _740 = ((texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _736) * cbMtdParam._m0[19u].z) + _736;
    float _742 = _740 - (_740 * _665);
    float _746 = (cbMtdParam._m0[19u].w * (_620.z - _595)) + _595;
    vec4 _759 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _272) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _273) + cbTextureTilingScale._m0[15u].w));
    float _766 = (_759.x * 2.0) + (-1.0);
    float _767 = (_759.y * 2.0) + (-1.0);
    float _768 = dot(vec2(_766, _767), vec2(_766, _767));
    float _3860 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _776 = (_665 * (_759.z - _746)) + _746;
    float _779 = (((_620.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w) + _598;
    float _780 = (((_620.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w) + _600;
    float _792 = (((_766 - _779) + (cbMtdParam._m0[21u].x * _779)) * _665) + _779;
    float _793 = (((_767 - _780) + (cbMtdParam._m0[21u].x * _780)) * _665) + _780;
    float _794 = (_665 * (sqrt(1.0 - (isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0)))) - _606)) + _606;
    float _796 = cbMtdParam._m0[22u].x + _620.w;
    float _798 = gl_FragCoord.x * 0.125;
    float _800 = gl_FragCoord.y * 0.125;
    float _810 = fma(_794, _239 * NORMAL.x, fma(_793, _246 * TANGENT.x, (_232 * _224) * _792));
    float _813 = fma(_794, _239 * NORMAL.y, fma(_793, _246 * TANGENT.y, (_232 * _225) * _792));
    float _816 = fma(_794, _239 * NORMAL.z, fma(_793, _246 * TANGENT.z, (_232 * _226) * _792));
    float _820 = inversesqrt(dot(vec3(_810, _813, _816), vec3(_810, _813, _816)));
    float _821 = _820 * _810;
    float _822 = _820 * _813;
    float _823 = _820 * _816;
    float _3871 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    float _824 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
    float _3882 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
    float _3893 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _3904 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _3915 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _3926 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _829 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
    if (!(cbMtdParam._m0[25u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_798, _800)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _847 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _888 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _898 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _888);
    float _899 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _888);
    float _900 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _888);
    float _904 = inversesqrt(dot(vec3(_898, _899, _900), vec3(_898, _899, _900)));
    float _905 = _898 * _904;
    float _906 = _899 * _904;
    float _907 = _900 * _904;
    vec4 _909 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_798, _800));
    float _911 = _909.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1083 = sqrt(((_898 * _898) + (_899 * _899)) + (_900 * _900));
        float _1089 = (cbMatDynParam._m0[5u].x * _1083) + cbMatDynParam._m0[5u].y;
        float _3937 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1090 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
        float _1094 = (cbMatDynParam._m0[5u].z * _1083) + cbMatDynParam._m0[5u].w;
        float _3948 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0))) - _1090)) + _1090) < ((_911 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _922 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _923 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _941 = fma(_823, cbSceneParam._m0[5u].z, fma(_822, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _821));
    float _944 = fma(_823, cbSceneParam._m0[6u].z, fma(_822, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _821));
    float _947 = fma(_823, cbSceneParam._m0[7u].z, fma(_822, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _821));
    uint _960 = _252 + 9u;
    uint _961 = _960 + uint(cbMatDynParam._m0[0u].w);
    float _967 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0)))) * cbInstanceData._m0[_961].x;
    float _968 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0)))) * cbInstanceData._m0[_961].y;
    float _969 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0)))) * cbInstanceData._m0[_961].z;
    float _3959 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
    float _970 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
    float _3970 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
    float _971 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
    float _3981 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
    float _972 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
    float _973 = 1.0 - _829;
    float _974 = _970 * _973;
    float _975 = _971 * _973;
    float _976 = _972 * _973;
    float _981 = (_970 + (-0.039999999105930328369140625)) * _829;
    float _982 = (_971 + (-0.039999999105930328369140625)) * _829;
    float _983 = (_972 + (-0.039999999105930328369140625)) * _829;
    float _984 = _981 + 0.039999999105930328369140625;
    float _986 = _982 + 0.039999999105930328369140625;
    float _987 = _983 + 0.039999999105930328369140625;
    vec4 _996 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _922, cbSceneParam._m0[86u].y * _923));
    float _1000 = ((isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0))) * TEXCOORD_5.w) * _996.x;
    float _1001 = dot(vec3(_821, _822, _823), vec3(_905, _906, _907));
    float _1004 = _1001 * 2.0;
    float _1008 = (_1004 * _821) - _905;
    float _1009 = (_1004 * _822) - _906;
    float _1010 = (_1004 * _823) - _907;
    float _1014 = abs(dot(vec3(_905, _906, _907), vec3(_821, _822, _823)));
    float _3992 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
    float _1016 = sqrt(_824);
    float _1029 = exp2((_1016 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1016 * 3.0));
    float _1035 = (1.0 - _1029) * ((_1016 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1036 = _1029 * _1016;
    float _1064 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1068 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1072 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1400;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1125 = fma(_1072, cbModelParam._m0[26u].z, fma(_1068, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1064));
        float _1129 = fma(_1072, cbModelParam._m0[27u].z, fma(_1068, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1064));
        float _1133 = fma(_1072, cbModelParam._m0[28u].z, fma(_1068, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1064));
        float _1158 = _1064 + _821;
        float _1159 = _1068 + _822;
        float _1160 = _1072 + _823;
        float _1170 = fma(_1160, cbModelParam._m0[26u].z, fma(_1159, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1158)) - _1125;
        float _1171 = fma(_1160, cbModelParam._m0[27u].z, fma(_1159, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1158)) - _1129;
        float _1172 = fma(_1160, cbModelParam._m0[28u].z, fma(_1159, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1158)) - _1133;
        float _1176 = inversesqrt(dot(vec3(_1170, _1171, _1172), vec3(_1170, _1171, _1172)));
        float _1189 = ((_1176 * _1170) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1125 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1190 = ((_1176 * _1171) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1129 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1191 = ((_1176 * _1172) / cbModelParam._m0[34u].z) + ((((((_1133 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1194 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1189, _1190, _1191), 0.0);
        vec4 _1201 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1189, _1190, _1191), 0.0);
        vec4 _1208 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1189, _1190, _1191), 0.0);
        vec4 _1215 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1189, _1190, _1191), 0.0);
        float _1228 = exp2((_1194.w + (-0.5)) * 20.0) * 2.0;
        float _1229 = _1228 * (_1194.x + (-0.5));
        float _1230 = _1228 * (_1194.y + (-0.5));
        float _1231 = _1228 * (_1194.z + (-0.5));
        float _1238 = exp2((_1201.w + (-0.5)) * 20.0) * 2.0;
        float _1239 = _1238 * (_1201.x + (-0.5));
        float _1240 = _1238 * (_1201.y + (-0.5));
        float _1241 = _1238 * (_1201.z + (-0.5));
        float _1248 = exp2((_1208.w + (-0.5)) * 20.0) * 2.0;
        float _1249 = _1248 * (_1208.x + (-0.5));
        float _1250 = _1248 * (_1208.y + (-0.5));
        float _1251 = _1248 * (_1208.z + (-0.5));
        float _1258 = exp2((_1215.w + (-0.5)) * 20.0) * 2.0;
        float _1259 = _1258 * (_1215.x + (-0.5));
        float _1260 = _1258 * (_1215.y + (-0.5));
        float _1261 = _1258 * (_1215.z + (-0.5));
        float _1262 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1263 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1264 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1265 = _1229 * 0.5;
        float _1266 = _1239 * 0.5;
        float _1267 = _1249 * 0.5;
        float _1268 = dot(vec3(_1265, _1266, _1267), vec3(_1265, _1266, _1267));
        float _1273 = (_1268 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1268);
        float _1282 = (dot(vec3(_821, _822, _823), vec3(_1273 * _1265, _1273 * _1266, _1273 * _1267)) + 1.0) * 0.5;
        float _4018 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1292 = sqrt(((_1266 * _1266) + (_1265 * _1265)) + (_1267 * _1267)) / (_1262 + 9.9999997473787516355514526367188e-06);
        float _4029 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1293 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
        float _1294 = _1293 * 2.0;
        float _1298 = (1.0 - _1293) / (_1293 + 1.0);
        float _4040 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1299 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _1308 = ((((1.0 - _1299) * (_1294 + 2.0)) * exp2(log2(isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0))) * (_1294 + 1.0))) + _1299) * _1262;
        float _1309 = _1230 * 0.5;
        float _1310 = _1240 * 0.5;
        float _1311 = _1250 * 0.5;
        float _1312 = dot(vec3(_1309, _1310, _1311), vec3(_1309, _1310, _1311));
        float _1317 = (_1312 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1312);
        float _1325 = (dot(vec3(_821, _822, _823), vec3(_1317 * _1309, _1317 * _1310, _1317 * _1311)) + 1.0) * 0.5;
        float _4051 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1334 = sqrt(((_1310 * _1310) + (_1309 * _1309)) + (_1311 * _1311)) / (_1263 + 9.9999997473787516355514526367188e-06);
        float _4062 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1335 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
        float _1336 = _1335 * 2.0;
        float _1340 = (1.0 - _1335) / (_1335 + 1.0);
        float _4073 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1341 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
        float _1350 = ((((1.0 - _1341) * (_1336 + 2.0)) * exp2(log2(isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0))) * (_1336 + 1.0))) + _1341) * _1263;
        float _1351 = _1231 * 0.5;
        float _1352 = _1241 * 0.5;
        float _1353 = _1251 * 0.5;
        float _1354 = dot(vec3(_1351, _1352, _1353), vec3(_1351, _1352, _1353));
        float _1359 = (_1354 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1354);
        float _1367 = (dot(vec3(_821, _822, _823), vec3(_1359 * _1351, _1359 * _1352, _1359 * _1353)) + 1.0) * 0.5;
        float _4084 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1376 = sqrt(((_1352 * _1352) + (_1351 * _1351)) + (_1353 * _1353)) / (_1264 + 9.9999997473787516355514526367188e-06);
        float _4095 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1377 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
        float _1378 = _1377 * 2.0;
        float _1382 = (1.0 - _1377) / (_1377 + 1.0);
        float _4106 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1383 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
        float _1392 = ((((1.0 - _1383) * (_1378 + 2.0)) * exp2(log2(isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0))) * (_1378 + 1.0))) + _1383) * _1264;
        _1400 = _1231;
        _1402 = _1230;
        _1403 = _1229;
        _1404 = _1241;
        _1405 = _1240;
        _1406 = _1239;
        _1407 = _1251;
        _1408 = _1250;
        _1409 = _1249;
        _1410 = _1264;
        _1411 = _1263;
        _1412 = _1262;
        _1413 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0)));
        _1414 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0)));
        _1415 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0)));
    }
    else
    {
        _1400 = _1401;
        _1402 = _1401;
        _1403 = _1401;
        _1404 = _1401;
        _1405 = _1401;
        _1406 = _1401;
        _1407 = _1401;
        _1408 = _1401;
        _1409 = _1401;
        _1410 = _1401;
        _1411 = _1401;
        _1412 = _1401;
        _1413 = 0.0;
        _1414 = 0.0;
        _1415 = 0.0;
    }
    float _1708;
    float _1709;
    float _1710;
    float _1711;
    float _1712;
    float _1713;
    float _1714;
    float _1715;
    float _1716;
    float _1717;
    float _1718;
    float _1719;
    float _1720;
    float _1721;
    float _1722;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1439 = fma(_1072, cbModelParam._m0[30u].z, fma(_1068, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1064));
        float _1443 = fma(_1072, cbModelParam._m0[31u].z, fma(_1068, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1064));
        float _1447 = fma(_1072, cbModelParam._m0[32u].z, fma(_1068, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1064));
        float _1470 = _1064 + _821;
        float _1471 = _1068 + _822;
        float _1472 = _1072 + _823;
        float _1482 = fma(_1472, cbModelParam._m0[30u].z, fma(_1471, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1470)) - _1439;
        float _1483 = fma(_1472, cbModelParam._m0[31u].z, fma(_1471, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1470)) - _1443;
        float _1484 = fma(_1472, cbModelParam._m0[32u].z, fma(_1471, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1470)) - _1447;
        float _1488 = inversesqrt(dot(vec3(_1482, _1483, _1484), vec3(_1482, _1483, _1484)));
        float _1501 = ((_1488 * _1482) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1439 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1502 = ((_1488 * _1483) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1443 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1503 = ((_1488 * _1484) / cbModelParam._m0[35u].z) + ((((((_1447 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1505 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1501, _1502, _1503), 0.0);
        vec4 _1512 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1501, _1502, _1503), 0.0);
        vec4 _1519 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1501, _1502, _1503), 0.0);
        vec4 _1526 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1501, _1502, _1503), 0.0);
        float _1538 = exp2((_1505.w + (-0.5)) * 20.0) * 2.0;
        float _1539 = _1538 * (_1505.x + (-0.5));
        float _1540 = _1538 * (_1505.y + (-0.5));
        float _1541 = _1538 * (_1505.z + (-0.5));
        float _1548 = exp2((_1512.w + (-0.5)) * 20.0) * 2.0;
        float _1549 = _1548 * (_1512.x + (-0.5));
        float _1550 = _1548 * (_1512.y + (-0.5));
        float _1551 = _1548 * (_1512.z + (-0.5));
        float _1558 = exp2((_1519.w + (-0.5)) * 20.0) * 2.0;
        float _1559 = _1558 * (_1519.x + (-0.5));
        float _1560 = _1558 * (_1519.y + (-0.5));
        float _1561 = _1558 * (_1519.z + (-0.5));
        float _1568 = exp2((_1526.w + (-0.5)) * 20.0) * 2.0;
        float _1569 = _1568 * (_1526.x + (-0.5));
        float _1570 = _1568 * (_1526.y + (-0.5));
        float _1571 = _1568 * (_1526.z + (-0.5));
        float _1572 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1573 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1574 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1575 = _1539 * 0.5;
        float _1576 = _1549 * 0.5;
        float _1577 = _1559 * 0.5;
        float _1578 = dot(vec3(_1575, _1576, _1577), vec3(_1575, _1576, _1577));
        float _1583 = (_1578 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1578);
        float _1591 = (dot(vec3(_821, _822, _823), vec3(_1583 * _1575, _1583 * _1576, _1583 * _1577)) + 1.0) * 0.5;
        float _4147 = isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0));
        float _1600 = sqrt(((_1576 * _1576) + (_1575 * _1575)) + (_1577 * _1577)) / (_1572 + 9.9999997473787516355514526367188e-06);
        float _4158 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
        float _1601 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
        float _1602 = _1601 * 2.0;
        float _1606 = (1.0 - _1601) / (_1601 + 1.0);
        float _4169 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
        float _1607 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
        float _1616 = ((((1.0 - _1607) * (_1602 + 2.0)) * exp2(log2(isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0))) * (_1602 + 1.0))) + _1607) * _1572;
        float _1617 = _1540 * 0.5;
        float _1618 = _1550 * 0.5;
        float _1619 = _1560 * 0.5;
        float _1620 = dot(vec3(_1617, _1618, _1619), vec3(_1617, _1618, _1619));
        float _1625 = (_1620 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1620);
        float _1633 = (dot(vec3(_821, _822, _823), vec3(_1625 * _1617, _1625 * _1618, _1625 * _1619)) + 1.0) * 0.5;
        float _4180 = isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0));
        float _1642 = sqrt(((_1618 * _1618) + (_1617 * _1617)) + (_1619 * _1619)) / (_1573 + 9.9999997473787516355514526367188e-06);
        float _4191 = isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0));
        float _1643 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
        float _1644 = _1643 * 2.0;
        float _1648 = (1.0 - _1643) / (_1643 + 1.0);
        float _4202 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
        float _1649 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
        float _1658 = ((((1.0 - _1649) * (_1644 + 2.0)) * exp2(log2(isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0))) * (_1644 + 1.0))) + _1649) * _1573;
        float _1659 = _1541 * 0.5;
        float _1660 = _1551 * 0.5;
        float _1661 = _1561 * 0.5;
        float _1662 = dot(vec3(_1659, _1660, _1661), vec3(_1659, _1660, _1661));
        float _1667 = (_1662 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1662);
        float _1675 = (dot(vec3(_821, _822, _823), vec3(_1667 * _1659, _1667 * _1660, _1667 * _1661)) + 1.0) * 0.5;
        float _4213 = isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0));
        float _1684 = sqrt(((_1660 * _1660) + (_1659 * _1659)) + (_1661 * _1661)) / (_1574 + 9.9999997473787516355514526367188e-06);
        float _4224 = isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0));
        float _1685 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
        float _1686 = _1685 * 2.0;
        float _1690 = (1.0 - _1685) / (_1685 + 1.0);
        float _4235 = isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0));
        float _1691 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
        float _1700 = ((((1.0 - _1691) * (_1686 + 2.0)) * exp2(log2(isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0))) * (_1686 + 1.0))) + _1691) * _1574;
        _1708 = _1541;
        _1709 = _1540;
        _1710 = _1539;
        _1711 = _1551;
        _1712 = _1550;
        _1713 = _1549;
        _1714 = _1561;
        _1715 = _1560;
        _1716 = _1559;
        _1717 = _1574;
        _1718 = _1573;
        _1719 = _1572;
        _1720 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0)));
        _1721 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0)));
        _1722 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0)));
    }
    else
    {
        _1708 = _1401;
        _1709 = _1401;
        _1710 = _1401;
        _1711 = _1401;
        _1712 = _1401;
        _1713 = _1401;
        _1714 = _1401;
        _1715 = _1401;
        _1716 = _1401;
        _1717 = _1401;
        _1718 = _1401;
        _1719 = _1401;
        _1720 = 0.0;
        _1721 = 0.0;
        _1722 = 0.0;
    }
    float _1732 = (cbModelParam._m0[1u].x * (_1720 - _1413)) + _1413;
    float _1733 = (cbModelParam._m0[1u].x * (_1721 - _1414)) + _1414;
    float _1734 = (cbModelParam._m0[1u].x * (_1722 - _1415)) + _1415;
    float _1755 = fma(_1734, cbSceneParam._m0[89u].z, fma(_1733, cbSceneParam._m0[89u].y, _1732 * cbSceneParam._m0[89u].x));
    float _1758 = fma(_1734, cbSceneParam._m0[90u].z, fma(_1733, cbSceneParam._m0[90u].y, _1732 * cbSceneParam._m0[90u].x));
    float _1761 = fma(_1734, cbSceneParam._m0[91u].z, fma(_1733, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1732));
    float _1776 = _1008 * 0.5;
    float _1777 = _1009 * 0.5;
    float _1778 = _1010 * 0.5;
    float _1779 = dot(vec4(_1776, _1777, _1778, 1.0), vec4(_1710, _1713, _1716, _1719));
    float _1782 = dot(vec4(_1776, _1777, _1778, 1.0), vec4(_1709, _1712, _1715, _1718));
    float _1785 = dot(vec4(_1776, _1777, _1778, 1.0), vec4(_1708, _1711, _1714, _1717));
    float _1819;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1792 = dot(vec4(_1776, _1777, _1778, 1.0), vec4(_1400, _1404, _1407, _1410));
        float _1796 = dot(vec4(_1776, _1777, _1778, 1.0), vec4(_1402, _1405, _1408, _1411));
        float _1800 = dot(vec4(_1776, _1777, _1778, 1.0), vec4(_1403, _1406, _1409, _1412));
        float _1807 = dot(vec4(cbModelParam._m0[39u]), vec4(_1776, _1777, _1778, 1.0));
        _1819 = dot(vec3(isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0)), isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0)), isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1807) ? 0.0 : (isnan(0.0) ? _1807 : max(0.0, _1807))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1819 = 1.0;
    }
    float _1830;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1821 = dot(vec4(cbModelParam._m0[40u]), vec4(_1776, _1777, _1778, 1.0));
        _1830 = dot(vec3(isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0)), isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0)), isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1821) ? 0.0 : (isnan(0.0) ? _1821 : max(0.0, _1821))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1830 = 1.0;
    }
    float _1834 = (_1830 * cbModelParam._m0[1u].x) + (_1819 * (1.0 - cbModelParam._m0[1u].x));
    float _1844 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _824);
    float _1845 = isnan(_1844) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1844 : min(cbModelParam._m0[25u].z, _1844));
    float _1926;
    float _1928;
    float _1930;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1893 = fma(_1072, cbModelParam._m0[13u].z, fma(_1068, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1064)) + cbModelParam._m0[13u].w;
        float _1897 = fma(_1072, cbModelParam._m0[14u].z, fma(_1068, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1064)) + cbModelParam._m0[14u].w;
        float _1901 = fma(_1072, cbModelParam._m0[15u].z, fma(_1068, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1064)) + cbModelParam._m0[15u].w;
        float _1904 = fma(_1010, cbModelParam._m0[13u].z, fma(_1009, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1008));
        float _1907 = fma(_1010, cbModelParam._m0[14u].z, fma(_1009, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1008));
        float _1910 = fma(_1010, cbModelParam._m0[15u].z, fma(_1009, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1008));
        float _1938;
        if (_1904 > 0.0)
        {
            _1938 = abs((1.0 - _1893) / _1904);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1904 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1893 + 1.0) / _1904);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1938 = frontier_phi_19_17_ladder;
        }
        float _2162;
        if (_1907 > 0.0)
        {
            _2162 = abs((1.0 - _1897) / _1907);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1907 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1897 + 1.0) / _1907);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2162 = frontier_phi_28_24_ladder;
        }
        float _2419;
        if (_1910 > 0.0)
        {
            _2419 = abs((1.0 - _1901) / _1910);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1910 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1901 + 1.0) / _1910);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2419 = frontier_phi_40_35_ladder;
        }
        float _2421 = isnan(_2162) ? _1938 : (isnan(_1938) ? _2162 : min(_1938, _2162));
        float _2422 = isnan(_2419) ? _2421 : (isnan(_2421) ? _2419 : min(_2421, _2419));
        float _2426 = (_2422 * _1904) + _1893;
        float _2427 = (_2422 * _1907) + _1897;
        float _2428 = (_2422 * _1910) + _1901;
        float _2429 = _2422 * 9.9999997473787516355514526367188e-05;
        float _2431 = (-1.0) - _2429;
        float _2433 = _2429 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2428 > _2433) || ((_2428 < _2431) || ((_2427 > _2433) || ((_2427 < _2431) || ((_2426 < _2431) || (_2426 > _2433))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2556 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2428, cbModelParam._m0[9u].z, fma(_2427, cbModelParam._m0[9u].y, _2426 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2428, cbModelParam._m0[10u].z, fma(_2427, cbModelParam._m0[10u].y, _2426 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2428, cbModelParam._m0[11u].z, fma(_2427, cbModelParam._m0[11u].y, _2426 * cbModelParam._m0[11u].x))), _1845);
            frontier_phi_18_40_ladder = _2556.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2556.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2556.x * cbModelParam._m0[1u].y;
        }
        _1926 = frontier_phi_18_40_ladder_2;
        _1928 = frontier_phi_18_40_ladder_1;
        _1930 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1914 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1008, _1009, _1010), _1845);
        _1926 = _1914.x * cbModelParam._m0[1u].y;
        _1928 = _1914.y * cbModelParam._m0[1u].y;
        _1930 = _1914.z * cbModelParam._m0[1u].y;
    }
    float _1934 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _824);
    float _1935 = isnan(_1934) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1934 : min(cbModelParam._m0[25u].w, _1934));
    float _2025;
    float _2027;
    float _2029;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1989 = fma(_1072, cbModelParam._m0[21u].z, fma(_1068, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1064)) + cbModelParam._m0[21u].w;
        float _1993 = fma(_1072, cbModelParam._m0[22u].z, fma(_1068, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1064)) + cbModelParam._m0[22u].w;
        float _1997 = fma(_1072, cbModelParam._m0[23u].z, fma(_1068, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1064)) + cbModelParam._m0[23u].w;
        float _2000 = fma(_1010, cbModelParam._m0[21u].z, fma(_1009, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1008));
        float _2003 = fma(_1010, cbModelParam._m0[22u].z, fma(_1009, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1008));
        float _2006 = fma(_1010, cbModelParam._m0[23u].z, fma(_1009, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1008));
        float _2167;
        if (_2000 > 0.0)
        {
            _2167 = abs((1.0 - _1989) / _2000);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_2000 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1989 + 1.0) / _2000);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2167 = frontier_phi_30_26_ladder;
        }
        float _2446;
        if (_2003 > 0.0)
        {
            _2446 = abs((1.0 - _1993) / _2003);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_2003 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1993 + 1.0) / _2003);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2446 = frontier_phi_42_37_ladder;
        }
        float _2659;
        if (_2006 > 0.0)
        {
            _2659 = abs((1.0 - _1997) / _2006);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_2006 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1997 + 1.0) / _2006);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2659 = frontier_phi_51_48_ladder;
        }
        float _2661 = isnan(_2446) ? _2167 : (isnan(_2167) ? _2446 : min(_2167, _2446));
        float _2662 = isnan(_2659) ? _2661 : (isnan(_2661) ? _2659 : min(_2661, _2659));
        float _2666 = (_2662 * _2000) + _1989;
        float _2667 = (_2662 * _2003) + _1993;
        float _2668 = (_2662 * _2006) + _1997;
        float _2669 = _2662 * 9.9999997473787516355514526367188e-05;
        float _2670 = (-1.0) - _2669;
        float _2672 = _2669 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2668 > _2672) || ((_2668 < _2670) || ((_2667 > _2672) || ((_2667 < _2670) || ((_2666 < _2670) || (_2666 > _2672))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2867 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2668, cbModelParam._m0[17u].z, fma(_2667, cbModelParam._m0[17u].y, _2666 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2668, cbModelParam._m0[18u].z, fma(_2667, cbModelParam._m0[18u].y, _2666 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2668, cbModelParam._m0[19u].z, fma(_2667, cbModelParam._m0[19u].y, _2666 * cbModelParam._m0[19u].x))), _1935);
            frontier_phi_27_51_ladder = _2867.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2867.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2867.x * cbModelParam._m0[1u].z;
        }
        _2025 = frontier_phi_27_51_ladder_2;
        _2027 = frontier_phi_27_51_ladder_1;
        _2029 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _2009 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1008, _1009, _1010), _1935);
        _2025 = _2009.x * cbModelParam._m0[1u].z;
        _2027 = _2009.y * cbModelParam._m0[1u].z;
        _2029 = _2009.z * cbModelParam._m0[1u].z;
    }
    float _2042 = (((_1035 * _984) + _1036) * _1000) * ((cbModelParam._m0[1u].w * (_2025 - _1926)) + _1926);
    float _2044 = (((_1035 * _986) + _1036) * _1000) * ((cbModelParam._m0[1u].w * (_2027 - _1928)) + _1928);
    float _2046 = (((_1035 * _987) + _1036) * _1000) * ((cbModelParam._m0[1u].w * (_2029 - _1930)) + _1930);
    float _2049 = fma(_2046, cbSceneParam._m0[89u].z, fma(_2044, cbSceneParam._m0[89u].y, _2042 * cbSceneParam._m0[89u].x));
    float _2052 = fma(_2046, cbSceneParam._m0[90u].z, fma(_2044, cbSceneParam._m0[90u].y, _2042 * cbSceneParam._m0[90u].x));
    float _2055 = fma(_2046, cbSceneParam._m0[91u].z, fma(_2044, cbSceneParam._m0[91u].y, _2042 * cbSceneParam._m0[91u].x));
    vec4 _2063 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_922, _923));
    float _2065 = _2063.w;
    float _2077 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2065);
    float _2078 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2065);
    float _2079 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2065);
    uvec4 _2083 = floatBitsToUint(cbInstanceData._m0[_252 + 5u]);
    uint _2085 = _2083.x * 14u;
    uint _2086 = _2085 + 13u;
    float _2093 = _1000 + (-1.0);
    float _2098 = (cbLight._m0[_2086].x * _2093) + 1.0;
    float _2099 = (cbLight._m0[_2086].y * _2093) + 1.0;
    float _2100 = (cbLight._m0[_2086].z * _2093) + 1.0;
    float _2101 = (cbLight._m0[_2086].w * _2093) + 1.0;
    uint _2102 = _2085 + 5u;
    float _2108 = isnan(1.0) ? _2099 : (isnan(_2099) ? 1.0 : min(_2099, 1.0));
    uint _2112 = _2085 + 4u;
    float _2121 = isnan(1.0) ? _2098 : (isnan(_2098) ? 1.0 : min(_2098, 1.0));
    uint _2125 = _2085 | 1u;
    float _2136 = dot(vec3(cbLight._m0[_2085].xyz), vec3(_821, _822, _823));
    float _2139 = dot(vec3(cbLight._m0[_2125].xyz), vec3(_821, _822, _823));
    float _4371 = isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0));
    float _4382 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
    float _2144 = (isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0))) * 0.3183098733425140380859375;
    float _2146 = (isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0))) * 0.3183098733425140380859375;
    float _2153 = ((cbLight._m0[_2102].x * _2108) * _2146) + (((cbLight._m0[_2112].x * _2077) * _2121) * _2144);
    float _2154 = ((_2108 * cbLight._m0[_2102].y) * _2146) + (((cbLight._m0[_2112].y * _2078) * _2121) * _2144);
    float _2155 = ((_2108 * cbLight._m0[_2102].z) * _2146) + (((cbLight._m0[_2112].z * _2079) * _2121) * _2144);
    uvec4 _2159 = floatBitsToUint(cbLight._m0[_2085 + 12u]);
    bool _2161 = _2159.x == 0u;
    float _2172;
    float _2174;
    float _2176;
    if (_2161)
    {
        _2172 = _2153;
        _2174 = _2154;
        _2176 = _2155;
    }
    else
    {
        uint _2180 = _2085 + 6u;
        float _2196 = (dot(vec3(cbLight._m0[_2085 + 2u].xyz), vec3(_821, _822, _823)) * 0.5) + 0.5;
        float _2197 = _2196 * _2196;
        float _4393 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
        float _2198 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
        float _2199 = isnan(1.0) ? _2100 : (isnan(_2100) ? 1.0 : min(_2100, 1.0));
        _2172 = (((cbLight._m0[_2180].x * 0.3183098733425140380859375) * _2198) * _2199) + _2153;
        _2174 = (((cbLight._m0[_2180].y * 0.3183098733425140380859375) * _2198) * _2199) + _2154;
        _2176 = (((cbLight._m0[_2180].z * 0.3183098733425140380859375) * _2198) * _2199) + _2155;
    }
    bool _2179 = _2159.y == 0u;
    float _2217;
    float _2219;
    float _2221;
    if (_2179)
    {
        _2217 = _2172;
        _2219 = _2174;
        _2221 = _2176;
    }
    else
    {
        uint _2390 = _2085 + 7u;
        float _2406 = (dot(vec3(cbLight._m0[_2085 + 3u].xyz), vec3(_821, _822, _823)) * 0.5) + 0.5;
        float _2407 = _2406 * _2406;
        float _4409 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
        float _2408 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
        float _2409 = isnan(1.0) ? _2101 : (isnan(_2101) ? 1.0 : min(_2101, 1.0));
        _2217 = (((cbLight._m0[_2390].x * 0.3183098733425140380859375) * _2408) * _2409) + _2172;
        _2219 = (((cbLight._m0[_2390].y * 0.3183098733425140380859375) * _2408) * _2409) + _2174;
        _2221 = (((cbLight._m0[_2390].z * 0.3183098733425140380859375) * _2408) * _2409) + _2176;
    }
    uint _2224 = _2085 + 8u;
    float _2237 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2085].w)) * _824) * 0.949999988079071044921875);
    float _2238 = _2237 * _2237;
    float _2239 = cbLight._m0[_2085].x + _905;
    float _2240 = cbLight._m0[_2085].y + _906;
    float _2241 = cbLight._m0[_2085].z + _907;
    float _2245 = inversesqrt(dot(vec3(_2239, _2240, _2241), vec3(_2239, _2240, _2241)));
    float _2246 = _2245 * _2239;
    float _2247 = _2245 * _2240;
    float _2248 = _2245 * _2241;
    float _2249 = dot(vec3(_821, _822, _823), vec3(cbLight._m0[_2085].xyz));
    float _4425 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
    float _2252 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
    float _4436 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
    float _2253 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
    float _2254 = dot(vec3(_821, _822, _823), vec3(_2246, _2247, _2248));
    float _4447 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
    float _2257 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
    float _2258 = dot(vec3(cbLight._m0[_2085].xyz), vec3(_2246, _2247, _2248));
    float _4458 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
    float _2262 = _2238 * _2238;
    float _2266 = ((_2257 * _2257) * (_2262 + (-1.0))) + 1.0;
    float _2274 = exp2(log2(1.0 - (isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0)))) * 5.0);
    float _2275 = 0.959999978542327880859375 - _981;
    float _2277 = 0.959999978542327880859375 - _982;
    float _2278 = 0.959999978542327880859375 - _983;
    float _2285 = 1.0 - _2238;
    float _2296 = (0.5 / (((_2253 * ((_2252 * _2285) + _2238)) + 9.9999999392252902907785028219223e-09) + (((_2253 * _2285) + _2238) * _2252))) * _2252;
    float _4469 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
    float _2298 = (isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0))) * (_2262 / ((_2266 * _2266) * 3.141590118408203125));
    uint _2312 = _2085 + 9u;
    float _2323 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2125].w)) * _824) * 0.949999988079071044921875);
    float _2324 = _2323 * _2323;
    float _2325 = cbLight._m0[_2125].x + _905;
    float _2326 = cbLight._m0[_2125].y + _906;
    float _2327 = cbLight._m0[_2125].z + _907;
    float _2331 = inversesqrt(dot(vec3(_2325, _2326, _2327), vec3(_2325, _2326, _2327)));
    float _2332 = _2331 * _2325;
    float _2333 = _2331 * _2326;
    float _2334 = _2331 * _2327;
    float _2335 = dot(vec3(_821, _822, _823), vec3(cbLight._m0[_2125].xyz));
    float _4480 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
    float _2338 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
    float _2339 = dot(vec3(_821, _822, _823), vec3(_2332, _2333, _2334));
    float _4491 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
    float _2342 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
    float _2343 = dot(vec3(cbLight._m0[_2125].xyz), vec3(_2332, _2333, _2334));
    float _4502 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
    float _2347 = _2324 * _2324;
    float _2351 = ((_2342 * _2342) * (_2347 + (-1.0))) + 1.0;
    float _2358 = exp2(log2(1.0 - (isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0)))) * 5.0);
    float _2365 = 1.0 - _2324;
    float _2375 = (0.5 / (((_2253 * ((_2338 * _2365) + _2324)) + 9.9999999392252902907785028219223e-09) + (((_2253 * _2365) + _2324) * _2338))) * _2338;
    float _4513 = isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0));
    float _2377 = (isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0))) * (_2347 / ((_2351 * _2351) * 3.141590118408203125));
    float _2387 = (((((_2358 * _2275) + _984) * cbLight._m0[_2312].x) * _2377) * _2108) + ((((cbLight._m0[_2224].x * _2077) * ((_2274 * _2275) + _984)) * _2298) * _2121);
    float _2388 = (((((_2358 * _2277) + _986) * cbLight._m0[_2312].y) * _2377) * _2108) + ((((cbLight._m0[_2224].y * _2078) * ((_2274 * _2277) + _986)) * _2298) * _2121);
    float _2389 = (((((_2358 * _2278) + _987) * cbLight._m0[_2312].z) * _2377) * _2108) + ((((cbLight._m0[_2224].z * _2079) * ((_2274 * _2278) + _987)) * _2298) * _2121);
    float _2451;
    float _2453;
    float _2455;
    if (_2161)
    {
        _2451 = _2387;
        _2453 = _2388;
        _2455 = _2389;
    }
    else
    {
        uint _2457 = _2085 + 2u;
        uint _2461 = _2085 + 10u;
        float _2475 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2457].w)) * _824) * 0.949999988079071044921875);
        float _2476 = _2475 * _2475;
        float _2477 = cbLight._m0[_2457].x + _905;
        float _2478 = cbLight._m0[_2457].y + _906;
        float _2479 = cbLight._m0[_2457].z + _907;
        float _2483 = inversesqrt(dot(vec3(_2477, _2478, _2479), vec3(_2477, _2478, _2479)));
        float _2484 = _2483 * _2477;
        float _2485 = _2483 * _2478;
        float _2486 = _2483 * _2479;
        float _2487 = dot(vec3(_821, _822, _823), vec3(cbLight._m0[_2457].xyz));
        float _4524 = isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0));
        float _2490 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
        float _2491 = dot(vec3(_821, _822, _823), vec3(_2484, _2485, _2486));
        float _4535 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0));
        float _2494 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
        float _2495 = dot(vec3(cbLight._m0[_2457].xyz), vec3(_2484, _2485, _2486));
        float _4546 = isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : max(_2495, 0.0));
        float _2499 = _2476 * _2476;
        float _2503 = ((_2494 * _2494) * (_2499 + (-1.0))) + 1.0;
        float _2510 = exp2(log2(1.0 - (isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0)))) * 5.0);
        float _2517 = 1.0 - _2476;
        float _2527 = (0.5 / (((_2253 * ((_2490 * _2517) + _2476)) + 9.9999999392252902907785028219223e-09) + (((_2253 * _2517) + _2476) * _2490))) * _2490;
        float _4557 = isnan(0.0) ? _2527 : (isnan(_2527) ? 0.0 : max(_2527, 0.0));
        float _2529 = (isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0))) * (_2499 / ((_2503 * _2503) * 3.141590118408203125));
        float _2530 = isnan(1.0) ? _2100 : (isnan(_2100) ? 1.0 : min(_2100, 1.0));
        _2451 = (((((_2510 * _2275) + _984) * cbLight._m0[_2461].x) * _2529) * _2530) + _2387;
        _2453 = (((((_2510 * _2277) + _986) * cbLight._m0[_2461].y) * _2529) * _2530) + _2388;
        _2455 = (((((_2510 * _2278) + _987) * cbLight._m0[_2461].z) * _2529) * _2530) + _2389;
    }
    float _2565;
    float _2567;
    float _2569;
    if (_2179)
    {
        _2565 = _2451;
        _2567 = _2453;
        _2569 = _2455;
    }
    else
    {
        uint _2576 = _2085 + 3u;
        uint _2580 = _2085 + 11u;
        float _2594 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2576].w)) * _824) * 0.949999988079071044921875);
        float _2595 = _2594 * _2594;
        float _2596 = cbLight._m0[_2576].x + _905;
        float _2597 = cbLight._m0[_2576].y + _906;
        float _2598 = cbLight._m0[_2576].z + _907;
        float _2602 = inversesqrt(dot(vec3(_2596, _2597, _2598), vec3(_2596, _2597, _2598)));
        float _2603 = _2602 * _2596;
        float _2604 = _2602 * _2597;
        float _2605 = _2602 * _2598;
        float _2606 = dot(vec3(_821, _822, _823), vec3(cbLight._m0[_2576].xyz));
        float _4573 = isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : max(_2606, 0.0));
        float _2609 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
        float _2610 = dot(vec3(_821, _822, _823), vec3(_2603, _2604, _2605));
        float _4584 = isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : max(_2610, 0.0));
        float _2613 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
        float _2614 = dot(vec3(cbLight._m0[_2576].xyz), vec3(_2603, _2604, _2605));
        float _4595 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0));
        float _2618 = _2595 * _2595;
        float _2622 = ((_2613 * _2613) * (_2618 + (-1.0))) + 1.0;
        float _2629 = exp2(log2(1.0 - (isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0)))) * 5.0);
        float _2636 = 1.0 - _2595;
        float _2646 = (0.5 / (((_2253 * ((_2609 * _2636) + _2595)) + 9.9999999392252902907785028219223e-09) + (((_2253 * _2636) + _2595) * _2609))) * _2609;
        float _4606 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0));
        float _2648 = (isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0))) * (_2618 / ((_2622 * _2622) * 3.141590118408203125));
        float _2649 = isnan(1.0) ? _2101 : (isnan(_2101) ? 1.0 : min(_2101, 1.0));
        _2565 = (((((_2629 * _2275) + _984) * cbLight._m0[_2580].x) * _2648) * _2649) + _2451;
        _2567 = (((((_2629 * _2277) + _986) * cbLight._m0[_2580].y) * _2648) * _2649) + _2453;
        _2569 = (((((_2629 * _2278) + _987) * cbLight._m0[_2580].z) * _2648) * _2649) + _2455;
    }
    float _2784;
    float _2786;
    float _2788;
    float _2790;
    float _2792;
    float _2794;
    if (_2083.y == 0u)
    {
        float _2724 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2725 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2724;
        float _2726 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2724;
        float _2727 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2724;
        uvec4 _2739 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2740 = _2739.x;
        uint _2751 = uint((float(_2739.y) * floor(float(uint(cbSceneParam._m0[85u].y * _923) / _2740))) + floor(float(uint(cbSceneParam._m0[85u].x * _922) / _2740)));
        float _2761 = (log2(_2727 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2762 = isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : max(_2761, 0.0));
        uint _2765 = uint(isnan(14.0) ? _2762 : (isnan(_2762) ? 14.0 : min(_2762, 14.0)));
        uvec4 _2770 = texelFetch(g_lightClusterGridBuffer, int(((_2765 << 2u) + (_2751 << 6u)) >> 2u));
        uint _2771 = _2770.x;
        uint _2772 = _2739.z;
        float _2872;
        float _2874;
        float _2876;
        float _2878;
        float _2880;
        float _2882;
        if (((((1u << ((_2772 >> 4u) & 15u)) + 4294967295u) & _2771) == 0u) || ((_2772 & 240u) == 0u))
        {
            _2872 = 0.0;
            _2874 = 0.0;
            _2876 = 0.0;
            _2878 = 0.0;
            _2880 = 0.0;
            _2882 = 0.0;
        }
        else
        {
            float _2873;
            float _2875;
            float _2877;
            float _2879;
            float _2881;
            float _2883;
            float _3025 = 0.0;
            float _3026 = 0.0;
            float _3027 = 0.0;
            float _3028 = 0.0;
            float _3029 = 0.0;
            float _3030 = 0.0;
            uint _3031 = 0u;
            uint _3040;
            bool _3041;
            for (;;)
            {
                _3040 = texelFetch(g_lightClassification, int((((_2765 << 5u) + (_2751 << 9u)) + (_3031 << 2u)) >> 2u)).x;
                _3041 = _3040 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3041)
                {
                    frontier_phi_68_pred = _3025;
                    frontier_phi_68_pred_1 = _3030;
                    frontier_phi_68_pred_2 = _3029;
                    frontier_phi_68_pred_3 = _3028;
                    frontier_phi_68_pred_4 = _3027;
                    frontier_phi_68_pred_5 = _3026;
                }
                else
                {
                    float _3170;
                    float _3171;
                    float _3172;
                    float _3173;
                    float _3174;
                    float _3175;
                    uint _3176;
                    _3170 = _3025;
                    _3171 = _3026;
                    _3172 = _3027;
                    _3173 = _3028;
                    _3174 = _3029;
                    _3175 = _3030;
                    _3176 = _3040;
                    float _3097;
                    float _3098;
                    float _3099;
                    float _3100;
                    float _3101;
                    float _3102;
                    for (;;)
                    {
                        uint _3180 = uint(findLSB(_3176)) + (_3031 << 5u);
                        uint _3177 = (_3176 + 4294967295u) & _3176;
                        uint _3182 = _3180 * 48u;
                        vec4 _3196 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3182)).x, texelFetch(g_PointLightRenderingBuffer, int(_3182 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3182 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3182 + 3u)).x));
                        uint _3202 = (_3180 * 48u) + 4u;
                        vec4 _3215 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3202)).x, texelFetch(g_PointLightRenderingBuffer, int(_3202 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3202 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3202 + 3u)).x));
                        uint _3221 = (_3180 * 48u) + 8u;
                        vec3 _3232 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3221)).x, texelFetch(g_PointLightRenderingBuffer, int(_3221 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3221 + 2u)).x));
                        float _3236 = _3196.x - _2725;
                        float _3237 = _3196.y - _2726;
                        float _3238 = _3196.z - _2727;
                        float _3239 = dot(vec3(_3236, _3237, _3238), vec3(_3236, _3237, _3238));
                        float _3242 = inversesqrt(_3239);
                        float _3243 = _3242 * _3236;
                        float _3244 = _3242 * _3237;
                        float _3245 = _3242 * _3238;
                        float _3246 = dot(vec3(_941, _944, _947), vec3(_3243, _3244, _3245));
                        float _3251 = 1.0 - (_3239 * _3196.w);
                        float _4632 = isnan(0.0) ? _3251 : (isnan(_3251) ? 0.0 : max(_3251, 0.0));
                        float _3252 = isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0));
                        float _3253 = sqrt(_3239) * _3215.w;
                        float _3256 = 1.39999997615814208984375 / (_3253 + 1.39999997615814208984375);
                        float _3257 = _3256 * _3256;
                        float _3260 = ((1.0 - _3257) * _3246) + _3257;
                        float _3263 = _3253 * _3253;
                        float _3267 = ((isnan(0.0) ? _3260 : (isnan(_3260) ? 0.0 : max(_3260, 0.0))) * _3252) / ((_3263 * 0.699999988079071044921875) + 1.0);
                        float _3271 = (-0.0) - _2725;
                        float _3272 = (-0.0) - _2726;
                        float _3273 = (-0.0) - _2727;
                        float _3277 = inversesqrt(dot(vec3(_3271, _3272, _3273), vec3(_3271, _3272, _3273)));
                        float _3278 = _3277 * _3271;
                        float _3279 = _3277 * _3272;
                        float _3280 = _3277 * _3273;
                        float _3288 = exp2(log2(1.0 / ((_3263 * 3.5) + 5.0)) * 0.25);
                        float _3289 = 1.0 - _1016;
                        float _3296 = sqrt(1.0 - ((1.0 - (_3289 * _3289)) * (1.0 - (_3288 * _3288))));
                        float _3297 = _3296 * _3296;
                        float _3298 = _3297 * _3297;
                        float _3299 = _3278 + _3243;
                        float _3300 = _3279 + _3244;
                        float _3301 = _3280 + _3245;
                        float _3305 = inversesqrt(dot(vec3(_3299, _3300, _3301), vec3(_3299, _3300, _3301)));
                        float _3309 = dot(vec3(_941, _944, _947), vec3(_3278, _3279, _3280));
                        float _4648 = isnan(0.0) ? _3309 : (isnan(_3309) ? 0.0 : max(_3309, 0.0));
                        float _3312 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
                        float _3313 = dot(vec3(_941, _944, _947), vec3(_3305 * _3299, _3305 * _3300, _3305 * _3301));
                        float _4659 = isnan(0.0) ? _3313 : (isnan(_3313) ? 0.0 : max(_3313, 0.0));
                        float _3316 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
                        float _3320 = ((_3316 * _3316) * (_3298 + (-1.0))) + 1.0;
                        float _3321 = _3256 * _3297;
                        float _3322 = _3321 * _3321;
                        float _3325 = ((1.0 - _3322) * _3246) + _3322;
                        float _4670 = isnan(0.0) ? _3325 : (isnan(_3325) ? 0.0 : max(_3325, 0.0));
                        float _3326 = isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0));
                        float _3327 = 1.0 - _3297;
                        float _3337 = (0.5 / (((_3326 * ((_3312 * _3327) + _3297)) + 9.9999999392252902907785028219223e-09) + (((_3326 * _3327) + _3297) * _3312))) * _3326;
                        float _4681 = isnan(0.0) ? _3337 : (isnan(_3337) ? 0.0 : max(_3337, 0.0));
                        float _3348 = (((_3298 * 3.1415927410125732421875) * (isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0)))) / ((_3320 * _3320) * ((_3263 * 2.1991131305694580078125) + 3.141590118408203125))) * _3252;
                        _3100 = (_3267 * _3215.x) + _3173;
                        _3101 = (_3267 * _3215.y) + _3174;
                        _3102 = (_3267 * _3215.z) + _3175;
                        _3097 = (_3348 * _3232.x) + _3170;
                        _3098 = (_3348 * _3232.y) + _3171;
                        _3099 = (_3348 * _3232.z) + _3172;
                        if (_3177 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3170 = _3097;
                            _3171 = _3098;
                            _3172 = _3099;
                            _3173 = _3100;
                            _3174 = _3101;
                            _3175 = _3102;
                            _3176 = _3177;
                        }
                    }
                    frontier_phi_68_pred = _3097;
                    frontier_phi_68_pred_1 = _3102;
                    frontier_phi_68_pred_2 = _3101;
                    frontier_phi_68_pred_3 = _3100;
                    frontier_phi_68_pred_4 = _3099;
                    frontier_phi_68_pred_5 = _3098;
                }
                _2873 = frontier_phi_68_pred;
                _2883 = frontier_phi_68_pred_1;
                _2881 = frontier_phi_68_pred_2;
                _2879 = frontier_phi_68_pred_3;
                _2877 = frontier_phi_68_pred_4;
                _2875 = frontier_phi_68_pred_5;
                uint _3032 = _3031 + 1u;
                if (_3032 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3025 = _2873;
                    _3026 = _2875;
                    _3027 = _2877;
                    _3028 = _2879;
                    _3029 = _2881;
                    _3030 = _2883;
                    _3031 = _3032;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2872 = _2873;
            _2874 = _2875;
            _2876 = _2877;
            _2878 = _2879;
            _2880 = _2881;
            _2882 = _2883;
        }
        uvec4 _2886 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2887 = _2886.z;
        uint _2889 = (_2887 >> 8u) & 15u;
        float _2993;
        float _2995;
        float _2997;
        float _2999;
        float _3001;
        float _3003;
        if (((4294967295u << _2889) & _2771) == 0u)
        {
            _2993 = _2872;
            _2995 = _2874;
            _2997 = _2876;
            _2999 = _2878;
            _3001 = _2880;
            _3003 = _2882;
        }
        else
        {
            float _3018 = inversesqrt(dot(vec3(_2725, _2726, _2727), vec3(_2725, _2726, _2727)));
            float _3019 = _3018 * _2725;
            float _3020 = _3018 * _2726;
            float _3021 = _3018 * _2727;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2889 < ((_2887 >> 12u) & 15u))
            {
                float _2994;
                float _2996;
                float _2998;
                float _3000;
                float _3002;
                float _3004;
                float _3153 = _2872;
                float _3154 = _2874;
                float _3155 = _2876;
                float _3156 = _2878;
                float _3157 = _2880;
                float _3158 = _2882;
                uint _3159 = _2889;
                uint _3168;
                bool _3169;
                for (;;)
                {
                    _3168 = texelFetch(g_lightClassification, int((((_2765 << 5u) + (_2751 << 9u)) + (_3159 << 2u)) >> 2u)).x;
                    _3169 = _3168 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3169)
                    {
                        frontier_phi_79_pred = _3158;
                        frontier_phi_79_pred_1 = _3157;
                        frontier_phi_79_pred_2 = _3156;
                        frontier_phi_79_pred_3 = _3155;
                        frontier_phi_79_pred_4 = _3154;
                        frontier_phi_79_pred_5 = _3153;
                    }
                    else
                    {
                        float _3362;
                        float _3363;
                        float _3364;
                        float _3365;
                        float _3366;
                        float _3367;
                        float _3655;
                        float _3656;
                        float _3657;
                        float _3658;
                        float _3659;
                        float _3660;
                        float _3375 = _3153;
                        float _3376 = _3154;
                        float _3377 = _3155;
                        float _3378 = _3156;
                        float _3379 = _3157;
                        float _3380 = _3158;
                        uint _3381 = _3168;
                        uint _3382;
                        vec4 _3407;
                        float _3408;
                        vec4 _3423;
                        vec3 _3435;
                        vec4 _3450;
                        vec4 _3465;
                        float _3511;
                        bool _3512;
                        for (;;)
                        {
                            uint _3392 = ((_3159 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3381));
                            _3382 = (_3381 + 4294967295u) & _3381;
                            uint _3394 = _3392 * 40u;
                            _3407 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3394)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 3u)).x));
                            _3408 = _3407.w;
                            uint _3410 = (_3392 * 40u) + 4u;
                            _3423 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3410)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 3u)).x));
                            uint _3425 = (_3392 * 40u) + 8u;
                            _3435 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3425)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 2u)).x));
                            uint _3437 = (_3392 * 40u) + 16u;
                            _3450 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3437)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 3u)).x));
                            uint _3452 = (_3392 * 40u) + 20u;
                            _3465 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3452)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 3u)).x));
                            uint _3467 = (_3392 * 40u) + 24u;
                            vec4 _3480 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3467)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 3u)).x));
                            uint _3486 = (_3392 * 40u) + 28u;
                            vec4 _3499 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3486)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3486 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3486 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3486 + 3u)).x));
                            _3511 = fma(_2727, _3499.z, fma(_2726, _3499.y, _3499.x * _2725)) + _3499.w;
                            _3512 = !((fma(_2727, _3480.z, fma(_2726, _3480.y, _3480.x * _2725)) + _3480.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3512)
                            {
                                float _3539 = _3407.x - _2725;
                                float _3540 = _3407.y - _2726;
                                float _3541 = _3407.z - _2727;
                                float _3542 = dot(vec3(_3539, _3540, _3541), vec3(_3539, _3540, _3541));
                                float _3545 = inversesqrt(_3542);
                                float _3546 = _3545 * _3539;
                                float _3547 = _3545 * _3540;
                                float _3548 = _3545 * _3541;
                                float _3552 = 1.0 - (_3542 / (_3408 * _3408));
                                float _4692 = isnan(0.0) ? _3552 : (isnan(_3552) ? 0.0 : max(_3552, 0.0));
                                float _3553 = isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0));
                                float _3557 = sqrt(_3542) * _3423.w;
                                float _3559 = 1.39999997615814208984375 / (_3557 + 1.39999997615814208984375);
                                float _3560 = _3559 * _3559;
                                float _3563 = ((1.0 - _3560) * dot(vec3(_3546, _3547, _3548), vec3(_941, _944, _947))) + _3560;
                                float _3566 = _3557 * _3557;
                                float _3570 = (fma(_2727, _3450.z, fma(_2726, _3450.y, _3450.x * _2725)) + _3450.w) / _3511;
                                float _3571 = (fma(_2727, _3465.z, fma(_2726, _3465.y, _3465.x * _2725)) + _3465.w) / _3511;
                                float _3575 = 1.0 - dot(vec2(_3570, _3571), vec2(_3570, _3571));
                                float _4708 = isnan(0.0) ? _3575 : (isnan(_3575) ? 0.0 : max(_3575, 0.0));
                                float _3576 = isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0));
                                float _3577 = _3576 * (((isnan(0.0) ? _3563 : (isnan(_3563) ? 0.0 : max(_3563, 0.0))) * _3553) / ((_3566 * 0.699999988079071044921875) + 1.0));
                                float _3589 = exp2(log2(1.0 / ((_3566 * 3.5) + 5.0)) * 0.25);
                                float _3590 = 1.0 - _1016;
                                float _3597 = sqrt(1.0 - ((1.0 - (_3590 * _3590)) * (1.0 - (_3589 * _3589))));
                                float _3598 = _3597 * _3597;
                                float _3599 = _3598 * _3598;
                                float _3600 = _3546 - _3019;
                                float _3601 = _3547 - _3020;
                                float _3602 = _3548 - _3021;
                                float _3606 = inversesqrt(dot(vec3(_3600, _3601, _3602), vec3(_3600, _3601, _3602)));
                                float _3610 = dot(vec3(_941, _944, _947), vec3((-0.0) - _3019, (-0.0) - _3020, (-0.0) - _3021));
                                float _4719 = isnan(0.0) ? _3610 : (isnan(_3610) ? 0.0 : max(_3610, 0.0));
                                float _3613 = isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0));
                                float _3614 = dot(vec3(_941, _944, _947), vec3(_3606 * _3600, _3606 * _3601, _3606 * _3602));
                                float _4730 = isnan(0.0) ? _3614 : (isnan(_3614) ? 0.0 : max(_3614, 0.0));
                                float _3617 = isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0));
                                float _3621 = ((_3617 * _3617) * (_3599 + (-1.0))) + 1.0;
                                float _3622 = _3559 * _3598;
                                float _3623 = _3622 * _3622;
                                float _3629 = ((1.0 - _3623) * dot(vec3(_941, _944, _947), vec3(_3546, _3547, _3548))) + _3623;
                                float _4741 = isnan(0.0) ? _3629 : (isnan(_3629) ? 0.0 : max(_3629, 0.0));
                                float _3630 = isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0));
                                float _3631 = 1.0 - _3598;
                                float _3641 = (0.5 / (((_3630 * ((_3613 * _3631) + _3598)) + 9.9999999392252902907785028219223e-09) + (((_3630 * _3631) + _3598) * _3613))) * _3630;
                                float _4752 = isnan(0.0) ? _3641 : (isnan(_3641) ? 0.0 : max(_3641, 0.0));
                                float _3651 = (_3576 * _3553) * (((_3599 * 3.1415927410125732421875) * (isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0)))) / ((_3621 * _3621) * ((_3566 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3577 * _3423.y;
                                frontier_phi_85_pred_1 = _3577 * _3423.x;
                                frontier_phi_85_pred_2 = _3651 * _3435.z;
                                frontier_phi_85_pred_3 = _3651 * _3435.y;
                                frontier_phi_85_pred_4 = _3651 * _3435.x;
                                frontier_phi_85_pred_5 = _3577 * _3423.z;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3659 = frontier_phi_85_pred;
                            _3658 = frontier_phi_85_pred_1;
                            _3657 = frontier_phi_85_pred_2;
                            _3656 = frontier_phi_85_pred_3;
                            _3655 = frontier_phi_85_pred_4;
                            _3660 = frontier_phi_85_pred_5;
                            _3365 = _3658 + _3378;
                            _3366 = _3659 + _3379;
                            _3367 = _3660 + _3380;
                            _3362 = _3655 + _3375;
                            _3363 = _3656 + _3376;
                            _3364 = _3657 + _3377;
                            if (_3382 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3375 = _3362;
                                _3376 = _3363;
                                _3377 = _3364;
                                _3378 = _3365;
                                _3379 = _3366;
                                _3380 = _3367;
                                _3381 = _3382;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3367;
                        frontier_phi_79_pred_1 = _3366;
                        frontier_phi_79_pred_2 = _3365;
                        frontier_phi_79_pred_3 = _3364;
                        frontier_phi_79_pred_4 = _3363;
                        frontier_phi_79_pred_5 = _3362;
                    }
                    _3004 = frontier_phi_79_pred;
                    _3002 = frontier_phi_79_pred_1;
                    _3000 = frontier_phi_79_pred_2;
                    _2998 = frontier_phi_79_pred_3;
                    _2996 = frontier_phi_79_pred_4;
                    _2994 = frontier_phi_79_pred_5;
                    uint _3160 = _3159 + 1u;
                    if (_3160 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3153 = _2994;
                        _3154 = _2996;
                        _3155 = _2998;
                        _3156 = _3000;
                        _3157 = _3002;
                        _3158 = _3004;
                        _3159 = _3160;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2998;
                frontier_phi_60_61_ladder_1 = _3004;
                frontier_phi_60_61_ladder_2 = _3002;
                frontier_phi_60_61_ladder_3 = _3000;
                frontier_phi_60_61_ladder_4 = _2996;
                frontier_phi_60_61_ladder_5 = _2994;
            }
            else
            {
                frontier_phi_60_61_ladder = _2876;
                frontier_phi_60_61_ladder_1 = _2882;
                frontier_phi_60_61_ladder_2 = _2880;
                frontier_phi_60_61_ladder_3 = _2878;
                frontier_phi_60_61_ladder_4 = _2874;
                frontier_phi_60_61_ladder_5 = _2872;
            }
            _2993 = frontier_phi_60_61_ladder_5;
            _2995 = frontier_phi_60_61_ladder_4;
            _2997 = frontier_phi_60_61_ladder;
            _2999 = frontier_phi_60_61_ladder_3;
            _3001 = frontier_phi_60_61_ladder_2;
            _3003 = frontier_phi_60_61_ladder_1;
        }
        float _3008 = isnan(1.0) ? _1000 : (isnan(_1000) ? 1.0 : min(_1000, 1.0));
        _2784 = (_3008 * _2999) + _2217;
        _2786 = (_3008 * _3001) + _2219;
        _2788 = (_3008 * _3003) + _2221;
        _2790 = ((_2993 * _984) * _3008) + _2565;
        _2792 = ((_2995 * _986) * _3008) + _2567;
        _2794 = ((_2997 * _987) * _3008) + _2569;
    }
    else
    {
        _2784 = _2217;
        _2786 = _2219;
        _2788 = _2221;
        _2790 = _2565;
        _2792 = _2567;
        _2794 = _2569;
    }
    float _4768 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
    float _4779 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
    float _4790 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
    float _2811 = ((isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0))) * (_2784 + ((isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0))) * _1000))) + ((_2790 + ((isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0))) * _1834)) * cbPerFrame._m0[3u].x);
    float _2812 = ((isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0))) * (_2786 + ((isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0))) * _1000))) + ((_2792 + ((isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0))) * _1834)) * cbPerFrame._m0[3u].x);
    float _2813 = ((isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0))) * (_2788 + ((isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0))) * _1000))) + ((_2794 + ((isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0))) * _1834)) * cbPerFrame._m0[3u].x);
    uint _2814 = _252 + 6u;
    float _2822 = _922 / cbSceneParam._m0[86u].x;
    float _2823 = _923 / cbSceneParam._m0[86u].y;
    vec4 _2837 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2822, _2823, (log2((isnan(cbSceneParam._m0[77u].w) ? _847 : (isnan(_847) ? cbSceneParam._m0[77u].w : min(_847, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2839 = _2837.x;
    float _2840 = _2837.y;
    float _2841 = _2837.z;
    float _2842 = _2837.w;
    float _2935;
    float _2937;
    float _2939;
    float _2941;
    if (_847 > cbSceneParam._m0[78u].w)
    {
        float _2897 = isnan(_847) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _847 : min(cbSceneParam._m0[80u].w, _847));
        float _2898 = _2897 / _847;
        float _2909 = _2898 * _898;
        float _2910 = _899 * _2898;
        float _2911 = (-0.0) - _2910;
        float _2913 = _2898 * _900;
        float _2915 = (cbSceneParam._m0[77u].w * _2911) / _2897;
        float _2916 = _2915 + cbSceneParam._m0[79u].w;
        float _2917 = cbSceneParam._m0[79u].w - _2910;
        float _2923 = sqrt(((_2909 * _2909) + (_2910 * _2910)) + (_2913 * _2913));
        float _2926 = (1.0 - (cbSceneParam._m0[77u].w / _2897)) * _2923;
        float _2931 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2933 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3110;
        if (abs((_2911 - _2915) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3110 = ((((_2916 > 0.0) ? exp2(_2931 * _2916) : (2.0 - exp2(_2933 * _2916))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2926;
        }
        else
        {
            float _3054 = 1.0 / cbSceneParam._m0[80u].x;
            float _3055 = isnan(_2917) ? _2916 : (isnan(_2916) ? _2917 : max(_2916, _2917));
            float _3056 = isnan(_2917) ? _2916 : (isnan(_2916) ? _2917 : min(_2916, _2917));
            float _3065 = isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : min(_3055, 0.0));
            float _3066 = isnan(0.0) ? _3056 : (isnan(_3056) ? 0.0 : min(_3056, 0.0));
            _3110 = ((abs(_2923 / _2911) * cbSceneParam._m0[80u].y) * ((((_3065 - _3066) * 2.0) - ((exp2(_2931 * (isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : max(_3055, 0.0)))) - exp2(_2931 * (isnan(0.0) ? _3056 : (isnan(_3056) ? 0.0 : max(_3056, 0.0))))) * _3054)) - ((exp2(_2933 * _3065) - exp2(_2933 * _3066)) * _3054))) + (_2926 * cbSceneParam._m0[80u].z);
        }
        vec4 _3112 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2822, _2823, 1.0), 0.0);
        float _3121 = exp2((_3110 * (-1.44269502162933349609375)) * (1.0 - _3112.w));
        float _3122 = log2(_3121);
        float _3138 = log2(_2842);
        _2935 = (exp2(_3138 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3122 * cbSceneParam._m0[78u].x)) * _3112.x) / cbSceneParam._m0[78u].x)) + _2839;
        _2937 = (exp2(_3138 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3122 * cbSceneParam._m0[78u].y)) * _3112.y) / cbSceneParam._m0[78u].y)) + _2840;
        _2939 = (exp2(_3138 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3122 * cbSceneParam._m0[78u].z)) * _3112.z) / cbSceneParam._m0[78u].z)) + _2841;
        _2941 = _3121 * _2842;
    }
    else
    {
        _2935 = _2839;
        _2937 = _2840;
        _2939 = _2841;
        _2941 = _2842;
    }
    bool _3148;
    vec4 _2951;
    vec4 _2973;
    float _2975;
    float _2979;
    float _2980;
    float _2981;
    float _2982;
    bool _2992;
    for (;;)
    {
        _2951 = cbMatDynParam._m0[0u];
        float _2953 = roundEven(_2951.y);
        bool _2954 = _2953 == 3.0;
        float _2955 = log2(_2941);
        float _2962 = exp2(_2955 * cbSceneParam._m0[78u].x) * _2811;
        float _2963 = exp2(_2955 * cbSceneParam._m0[78u].y) * _2812;
        float _2964 = exp2(_2955 * cbSceneParam._m0[78u].z) * _2813;
        float _2971 = _911 + (-0.5);
        _2973 = cbMtdParam._m0[1u];
        _2975 = _2973.y * _2971;
        float _2978 = (_2953 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2979 = _2978 * (_2954 ? _2962 : (_2962 + (cbSceneParam._m0[72u].w * _2935)));
        _2980 = _2978 * (_2954 ? _2963 : (_2963 + (cbSceneParam._m0[72u].w * _2937)));
        _2981 = _2978 * (_2954 ? _2964 : (_2964 + (cbSceneParam._m0[72u].w * _2939)));
        _2982 = _2971 * 0.999000012874603271484375;
        _2992 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2992)
        {
            if ((cbInstanceData._m0[_252 + 7u].x + _2982) < 0.5)
            {
                _3148 = true;
                break;
            }
        }
        uint _3089 = _960 + uint(_2951.w);
        if ((cbInstanceData._m0[_3089].w < 1.0) && ((cbInstanceData._m0[_3089].w + _2982) < 0.5))
        {
            _3148 = true;
            break;
        }
        if ((_2975 + 1.0) < _2973.x)
        {
            _3148 = true;
            break;
        }
        _3148 = false;
        break;
    }
    float _3353;
    if (_3148)
    {
        discard_state = true;
        _3353 = 0.0;
    }
    else
    {
        _3353 = cbInstanceData._m0[_2814].w;
    }
    SV_Target.x = _2979;
    SV_Target.y = _2980;
    SV_Target.z = _2981;
    SV_Target.w = _3353;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2814].w;
    discard_exit();
}


