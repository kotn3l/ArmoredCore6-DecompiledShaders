#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1440;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _231 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _232 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _233 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _239 = inversesqrt(dot(vec3(_231, _232, _233), vec3(_231, _232, _233)));
    float _246 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _253 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _267 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _269 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3790 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _3801 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _3812 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    uint _280 = uint(roundEven(NORMAL.w)) * 13u;
    uint _285 = _280 + 1u;
    uint _289 = _280 + 2u;
    float _298 = sqrt(((cbInstanceData._m0[_285].x * cbInstanceData._m0[_285].x) + (cbInstanceData._m0[_280].x * cbInstanceData._m0[_280].x)) + (cbInstanceData._m0[_289].x * cbInstanceData._m0[_289].x));
    float _299 = _298 * TEXCOORD.z;
    float _300 = _298 * TEXCOORD.w;
    vec4 _313 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _299) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _300) + cbTextureTilingScale._m0[13u].w));
    vec4 _336 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _362 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _367 = _362.x * cbMtdParam._m0[11u].x;
    float _368 = _362.y * cbMtdParam._m0[11u].y;
    float _369 = _362.z * cbMtdParam._m0[11u].z;
    vec4 _388 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _299) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _300) + cbTextureTilingScale._m0[5u].w));
    vec4 _407 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _437 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[27u].x * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].y * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _439 = _437.x;
    float _451 = dot(vec4(_439, _437.yzw), vec4(cbMtdParam._m0[28u].w, cbMtdParam._m0[29u].xy, 0.0));
    float _468 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _407.x) * 2.0) - ((((_439 - _451) * cbMtdParam._m0[23u].w) + _451) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3823 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _469 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
    float _476 = (_469 * ((_388.x * cbMtdParam._m0[12u].x) - _367)) + _367;
    float _477 = (_469 * ((_388.y * cbMtdParam._m0[12u].y) - _368)) + _368;
    float _478 = (_469 * ((_388.z * cbMtdParam._m0[12u].z) - _369)) + _369;
    vec4 _495 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _299) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _300) + cbTextureTilingScale._m0[3u].w));
    vec4 _517 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].z * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].w * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _519 = _517.x;
    float _529 = dot(vec4(_519, _517.yzw), vec4(cbMtdParam._m0[30u].yzw, 0.0));
    float _543 = ((cbMtdParam._m0[25u].z * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _407.y) * 2.0) - ((((_519 - _529) * cbMtdParam._m0[23u].w) + _529) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3834 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _544 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
    float _554 = (_336.x * cbMtdParam._m0[9u].x) * ((_544 * ((_495.x * cbMtdParam._m0[13u].x) - _476)) + _476);
    float _555 = (_336.y * cbMtdParam._m0[9u].y) * ((_544 * ((_495.y * cbMtdParam._m0[13u].y) - _477)) + _477);
    float _556 = (_336.z * cbMtdParam._m0[9u].z) * ((_544 * ((_495.z * cbMtdParam._m0[13u].z) - _478)) + _478);
    float _560 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _313.x) * _554;
    float _563 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _313.y) * _555;
    float _566 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _313.z) * _556;
    float _574 = (((_554 - _560) * (isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0)))) + _560) * 4.55000019073486328125;
    float _576 = (((_555 - _563) * (isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0)))) + _563) * 4.55000019073486328125;
    float _578 = (((_556 - _566) * (isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0)))) + _566) * 4.55000019073486328125;
    vec4 _595 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _299) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _300) + cbTextureTilingScale._m0[20u].w));
    vec4 _618 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _299) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _300) + cbTextureTilingScale._m0[4u].w));
    vec4 _635 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _637 = _635.x;
    float _638 = _635.y;
    float _639 = _635.z;
    float _646 = ((_618.x - _637) * _469) + _637;
    float _647 = ((_618.y - _638) * _469) + _638;
    float _648 = ((_618.z - _639) * _469) + _639;
    vec4 _660 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _299) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _300) + cbTextureTilingScale._m0[2u].w));
    float _673 = ((_660.z - _648) * _544) + _648;
    float _676 = ((((_660.x - _646) * _544) + _646) * 2.0) + (-1.0);
    float _677 = ((((_660.y - _647) * _544) + _647) * 2.0) + (-1.0);
    float _678 = dot(vec2(_676, _677), vec2(_676, _677));
    float _3845 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _683 = sqrt(1.0 - (isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0))));
    vec4 _697 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _722 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _299) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _300) + cbTextureTilingScale._m0[11u].w));
    float _724 = _722.x;
    float _725 = 1.0 - _724;
    float _741 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_724 - _725) * cbMtdParam._m0[24u].z) + _725) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3856 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _742 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
    float _749 = (_742 * (cbMtdParam._m0[17u].x - _574)) + _574;
    float _750 = (_742 * (cbMtdParam._m0[17u].y - _576)) + _576;
    float _751 = (_742 * (cbMtdParam._m0[17u].z - _578)) + _578;
    vec4 _777 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _779 = _777.x;
    float _796 = ((texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _299) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _300) + cbTextureTilingScale._m0[9u].w)).x - _779) * _469) + _779;
    float _813 = ((texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _299) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _300) + cbTextureTilingScale._m0[21u].w)).x - _796) * _544) + _796;
    float _817 = ((texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _813) * cbMtdParam._m0[19u].z) + _813;
    float _819 = _817 - (_817 * _742);
    float _824 = (((_595.z - _673) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _673;
    float _828 = ((_697.z - _824) * cbMtdParam._m0[19u].w) + _824;
    vec4 _841 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _299) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _300) + cbTextureTilingScale._m0[15u].w));
    float _848 = (_841.x * 2.0) + (-1.0);
    float _849 = (_841.y * 2.0) + (-1.0);
    float _850 = dot(vec2(_848, _849), vec2(_848, _849));
    float _3867 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
    float _858 = (_742 * (_841.z - _828)) + _828;
    float _867 = (_676 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_595.x * 2.0) + (-1.0)))) + (((_697.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w);
    float _868 = (_677 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_595.y * 2.0) + (-1.0)))) + (((_697.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w);
    float _880 = (((_848 - _867) + (cbMtdParam._m0[21u].x * _867)) * _742) + _867;
    float _881 = (((_849 - _868) + (cbMtdParam._m0[21u].x * _868)) * _742) + _868;
    float _882 = (_742 * (sqrt(1.0 - (isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0)))) - _683)) + _683;
    float _886 = cbMtdParam._m0[22u].x + _697.w;
    float _889 = fma(_882, _246 * NORMAL.x, fma(_881, _253 * TANGENT.x, (_239 * _231) * _880));
    float _892 = fma(_882, _246 * NORMAL.y, fma(_881, _253 * TANGENT.y, (_239 * _232) * _880));
    float _895 = fma(_882, _246 * NORMAL.z, fma(_881, _253 * TANGENT.z, (_239 * _233) * _880));
    float _899 = inversesqrt(dot(vec3(_889, _892, _895), vec3(_889, _892, _895)));
    float _900 = _899 * _889;
    float _901 = _899 * _892;
    float _902 = _899 * _895;
    float _3878 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
    float _903 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
    float _3889 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    float _3900 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _3911 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
    float _3922 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _3933 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
    float _908 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
    float _922 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _963 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _973 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _963);
    float _974 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _963);
    float _975 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _963);
    float _979 = inversesqrt(dot(vec3(_973, _974, _975), vec3(_973, _974, _975)));
    float _980 = _973 * _979;
    float _981 = _974 * _979;
    float _982 = _975 * _979;
    float _988 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _989 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1007 = fma(_902, cbSceneParam._m0[5u].z, fma(_901, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _900));
    float _1010 = fma(_902, cbSceneParam._m0[6u].z, fma(_901, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _900));
    float _1013 = fma(_902, cbSceneParam._m0[7u].z, fma(_901, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _900));
    uint _1027 = (_280 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1033 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0)))) * cbInstanceData._m0[_1027].x;
    float _1034 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0)))) * cbInstanceData._m0[_1027].y;
    float _1035 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0)))) * cbInstanceData._m0[_1027].z;
    float _3944 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
    float _1036 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
    float _3955 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
    float _1037 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
    float _3966 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
    float _1038 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
    float _1039 = 1.0 - _908;
    float _1040 = _1036 * _1039;
    float _1041 = _1037 * _1039;
    float _1042 = _1038 * _1039;
    float _1047 = (_1036 + (-0.039999999105930328369140625)) * _908;
    float _1048 = (_1037 + (-0.039999999105930328369140625)) * _908;
    float _1049 = (_1038 + (-0.039999999105930328369140625)) * _908;
    float _1050 = _1047 + 0.039999999105930328369140625;
    float _1052 = _1048 + 0.039999999105930328369140625;
    float _1053 = _1049 + 0.039999999105930328369140625;
    vec4 _1062 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _988, cbSceneParam._m0[86u].y * _989));
    float _1066 = ((isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0))) * TEXCOORD_5.w) * _1062.x;
    float _1067 = dot(vec3(_900, _901, _902), vec3(_980, _981, _982));
    float _1070 = _1067 * 2.0;
    float _1074 = (_1070 * _900) - _980;
    float _1075 = (_1070 * _901) - _981;
    float _1076 = (_1070 * _902) - _982;
    float _1080 = abs(dot(vec3(_980, _981, _982), vec3(_900, _901, _902)));
    float _3977 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
    float _1082 = sqrt(_903);
    float _1095 = exp2((_1082 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1082 * 3.0));
    float _1101 = (1.0 - _1095) * ((_1082 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1102 = _1095 * _1082;
    float _1130 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1134 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1138 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1439;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1164 = fma(_1138, cbModelParam._m0[26u].z, fma(_1134, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1130));
        float _1168 = fma(_1138, cbModelParam._m0[27u].z, fma(_1134, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1130));
        float _1172 = fma(_1138, cbModelParam._m0[28u].z, fma(_1134, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1130));
        float _1197 = _1130 + _900;
        float _1198 = _1134 + _901;
        float _1199 = _1138 + _902;
        float _1209 = fma(_1199, cbModelParam._m0[26u].z, fma(_1198, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1197)) - _1164;
        float _1210 = fma(_1199, cbModelParam._m0[27u].z, fma(_1198, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1197)) - _1168;
        float _1211 = fma(_1199, cbModelParam._m0[28u].z, fma(_1198, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1197)) - _1172;
        float _1215 = inversesqrt(dot(vec3(_1209, _1210, _1211), vec3(_1209, _1210, _1211)));
        float _1228 = ((_1215 * _1209) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1164 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1229 = ((_1215 * _1210) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1168 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1230 = ((_1215 * _1211) / cbModelParam._m0[34u].z) + ((((((_1172 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1233 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1228, _1229, _1230), 0.0);
        vec4 _1240 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1228, _1229, _1230), 0.0);
        vec4 _1247 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1228, _1229, _1230), 0.0);
        vec4 _1254 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1228, _1229, _1230), 0.0);
        float _1267 = exp2((_1233.w + (-0.5)) * 20.0) * 2.0;
        float _1268 = _1267 * (_1233.x + (-0.5));
        float _1269 = _1267 * (_1233.y + (-0.5));
        float _1270 = _1267 * (_1233.z + (-0.5));
        float _1277 = exp2((_1240.w + (-0.5)) * 20.0) * 2.0;
        float _1278 = _1277 * (_1240.x + (-0.5));
        float _1279 = _1277 * (_1240.y + (-0.5));
        float _1280 = _1277 * (_1240.z + (-0.5));
        float _1287 = exp2((_1247.w + (-0.5)) * 20.0) * 2.0;
        float _1288 = _1287 * (_1247.x + (-0.5));
        float _1289 = _1287 * (_1247.y + (-0.5));
        float _1290 = _1287 * (_1247.z + (-0.5));
        float _1297 = exp2((_1254.w + (-0.5)) * 20.0) * 2.0;
        float _1298 = _1297 * (_1254.x + (-0.5));
        float _1299 = _1297 * (_1254.y + (-0.5));
        float _1300 = _1297 * (_1254.z + (-0.5));
        float _1301 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1302 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1303 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1304 = _1268 * 0.5;
        float _1305 = _1278 * 0.5;
        float _1306 = _1288 * 0.5;
        float _1307 = dot(vec3(_1304, _1305, _1306), vec3(_1304, _1305, _1306));
        float _1312 = (_1307 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1307);
        float _1321 = (dot(vec3(_900, _901, _902), vec3(_1312 * _1304, _1312 * _1305, _1312 * _1306)) + 1.0) * 0.5;
        float _4003 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1331 = sqrt(((_1305 * _1305) + (_1304 * _1304)) + (_1306 * _1306)) / (_1301 + 9.9999997473787516355514526367188e-06);
        float _4014 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1332 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
        float _1333 = _1332 * 2.0;
        float _1337 = (1.0 - _1332) / (_1332 + 1.0);
        float _4025 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1338 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
        float _1347 = ((((1.0 - _1338) * (_1333 + 2.0)) * exp2(log2(isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0))) * (_1333 + 1.0))) + _1338) * _1301;
        float _1348 = _1269 * 0.5;
        float _1349 = _1279 * 0.5;
        float _1350 = _1289 * 0.5;
        float _1351 = dot(vec3(_1348, _1349, _1350), vec3(_1348, _1349, _1350));
        float _1356 = (_1351 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1351);
        float _1364 = (dot(vec3(_900, _901, _902), vec3(_1356 * _1348, _1356 * _1349, _1356 * _1350)) + 1.0) * 0.5;
        float _4036 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1373 = sqrt(((_1349 * _1349) + (_1348 * _1348)) + (_1350 * _1350)) / (_1302 + 9.9999997473787516355514526367188e-06);
        float _4047 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1374 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
        float _1375 = _1374 * 2.0;
        float _1379 = (1.0 - _1374) / (_1374 + 1.0);
        float _4058 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1380 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
        float _1389 = ((((1.0 - _1380) * (_1375 + 2.0)) * exp2(log2(isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0))) * (_1375 + 1.0))) + _1380) * _1302;
        float _1390 = _1270 * 0.5;
        float _1391 = _1280 * 0.5;
        float _1392 = _1290 * 0.5;
        float _1393 = dot(vec3(_1390, _1391, _1392), vec3(_1390, _1391, _1392));
        float _1398 = (_1393 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1393);
        float _1406 = (dot(vec3(_900, _901, _902), vec3(_1398 * _1390, _1398 * _1391, _1398 * _1392)) + 1.0) * 0.5;
        float _4069 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1415 = sqrt(((_1391 * _1391) + (_1390 * _1390)) + (_1392 * _1392)) / (_1303 + 9.9999997473787516355514526367188e-06);
        float _4080 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1416 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
        float _1417 = _1416 * 2.0;
        float _1421 = (1.0 - _1416) / (_1416 + 1.0);
        float _4091 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1422 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
        float _1431 = ((((1.0 - _1422) * (_1417 + 2.0)) * exp2(log2(isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0))) * (_1417 + 1.0))) + _1422) * _1303;
        _1439 = _1270;
        _1441 = _1269;
        _1442 = _1268;
        _1443 = _1280;
        _1444 = _1279;
        _1445 = _1278;
        _1446 = _1290;
        _1447 = _1289;
        _1448 = _1288;
        _1449 = _1303;
        _1450 = _1302;
        _1451 = _1301;
        _1452 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0)));
        _1453 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0)));
        _1454 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0)));
    }
    else
    {
        _1439 = _1440;
        _1441 = _1440;
        _1442 = _1440;
        _1443 = _1440;
        _1444 = _1440;
        _1445 = _1440;
        _1446 = _1440;
        _1447 = _1440;
        _1448 = _1440;
        _1449 = _1440;
        _1450 = _1440;
        _1451 = _1440;
        _1452 = 0.0;
        _1453 = 0.0;
        _1454 = 0.0;
    }
    float _1747;
    float _1748;
    float _1749;
    float _1750;
    float _1751;
    float _1752;
    float _1753;
    float _1754;
    float _1755;
    float _1756;
    float _1757;
    float _1758;
    float _1759;
    float _1760;
    float _1761;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1478 = fma(_1138, cbModelParam._m0[30u].z, fma(_1134, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1130));
        float _1482 = fma(_1138, cbModelParam._m0[31u].z, fma(_1134, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1130));
        float _1486 = fma(_1138, cbModelParam._m0[32u].z, fma(_1134, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1130));
        float _1509 = _1130 + _900;
        float _1510 = _1134 + _901;
        float _1511 = _1138 + _902;
        float _1521 = fma(_1511, cbModelParam._m0[30u].z, fma(_1510, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1509)) - _1478;
        float _1522 = fma(_1511, cbModelParam._m0[31u].z, fma(_1510, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1509)) - _1482;
        float _1523 = fma(_1511, cbModelParam._m0[32u].z, fma(_1510, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1509)) - _1486;
        float _1527 = inversesqrt(dot(vec3(_1521, _1522, _1523), vec3(_1521, _1522, _1523)));
        float _1540 = ((_1527 * _1521) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1478 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1541 = ((_1527 * _1522) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1482 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1542 = ((_1527 * _1523) / cbModelParam._m0[35u].z) + ((((((_1486 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1544 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1540, _1541, _1542), 0.0);
        vec4 _1551 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1540, _1541, _1542), 0.0);
        vec4 _1558 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1540, _1541, _1542), 0.0);
        vec4 _1565 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1540, _1541, _1542), 0.0);
        float _1577 = exp2((_1544.w + (-0.5)) * 20.0) * 2.0;
        float _1578 = _1577 * (_1544.x + (-0.5));
        float _1579 = _1577 * (_1544.y + (-0.5));
        float _1580 = _1577 * (_1544.z + (-0.5));
        float _1587 = exp2((_1551.w + (-0.5)) * 20.0) * 2.0;
        float _1588 = _1587 * (_1551.x + (-0.5));
        float _1589 = _1587 * (_1551.y + (-0.5));
        float _1590 = _1587 * (_1551.z + (-0.5));
        float _1597 = exp2((_1558.w + (-0.5)) * 20.0) * 2.0;
        float _1598 = _1597 * (_1558.x + (-0.5));
        float _1599 = _1597 * (_1558.y + (-0.5));
        float _1600 = _1597 * (_1558.z + (-0.5));
        float _1607 = exp2((_1565.w + (-0.5)) * 20.0) * 2.0;
        float _1608 = _1607 * (_1565.x + (-0.5));
        float _1609 = _1607 * (_1565.y + (-0.5));
        float _1610 = _1607 * (_1565.z + (-0.5));
        float _1611 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
        float _1612 = isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0));
        float _1613 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
        float _1614 = _1578 * 0.5;
        float _1615 = _1588 * 0.5;
        float _1616 = _1598 * 0.5;
        float _1617 = dot(vec3(_1614, _1615, _1616), vec3(_1614, _1615, _1616));
        float _1622 = (_1617 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1617);
        float _1630 = (dot(vec3(_900, _901, _902), vec3(_1622 * _1614, _1622 * _1615, _1622 * _1616)) + 1.0) * 0.5;
        float _4132 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1639 = sqrt(((_1615 * _1615) + (_1614 * _1614)) + (_1616 * _1616)) / (_1611 + 9.9999997473787516355514526367188e-06);
        float _4143 = isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0));
        float _1640 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
        float _1641 = _1640 * 2.0;
        float _1645 = (1.0 - _1640) / (_1640 + 1.0);
        float _4154 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
        float _1646 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
        float _1655 = ((((1.0 - _1646) * (_1641 + 2.0)) * exp2(log2(isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0))) * (_1641 + 1.0))) + _1646) * _1611;
        float _1656 = _1579 * 0.5;
        float _1657 = _1589 * 0.5;
        float _1658 = _1599 * 0.5;
        float _1659 = dot(vec3(_1656, _1657, _1658), vec3(_1656, _1657, _1658));
        float _1664 = (_1659 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1659);
        float _1672 = (dot(vec3(_900, _901, _902), vec3(_1664 * _1656, _1664 * _1657, _1664 * _1658)) + 1.0) * 0.5;
        float _4165 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
        float _1681 = sqrt(((_1657 * _1657) + (_1656 * _1656)) + (_1658 * _1658)) / (_1612 + 9.9999997473787516355514526367188e-06);
        float _4176 = isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0));
        float _1682 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
        float _1683 = _1682 * 2.0;
        float _1687 = (1.0 - _1682) / (_1682 + 1.0);
        float _4187 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
        float _1688 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
        float _1697 = ((((1.0 - _1688) * (_1683 + 2.0)) * exp2(log2(isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0))) * (_1683 + 1.0))) + _1688) * _1612;
        float _1698 = _1580 * 0.5;
        float _1699 = _1590 * 0.5;
        float _1700 = _1600 * 0.5;
        float _1701 = dot(vec3(_1698, _1699, _1700), vec3(_1698, _1699, _1700));
        float _1706 = (_1701 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1701);
        float _1714 = (dot(vec3(_900, _901, _902), vec3(_1706 * _1698, _1706 * _1699, _1706 * _1700)) + 1.0) * 0.5;
        float _4198 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
        float _1723 = sqrt(((_1699 * _1699) + (_1698 * _1698)) + (_1700 * _1700)) / (_1613 + 9.9999997473787516355514526367188e-06);
        float _4209 = isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0));
        float _1724 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
        float _1725 = _1724 * 2.0;
        float _1729 = (1.0 - _1724) / (_1724 + 1.0);
        float _4220 = isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0));
        float _1730 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
        float _1739 = ((((1.0 - _1730) * (_1725 + 2.0)) * exp2(log2(isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0))) * (_1725 + 1.0))) + _1730) * _1613;
        _1747 = _1580;
        _1748 = _1579;
        _1749 = _1578;
        _1750 = _1590;
        _1751 = _1589;
        _1752 = _1588;
        _1753 = _1600;
        _1754 = _1599;
        _1755 = _1598;
        _1756 = _1613;
        _1757 = _1612;
        _1758 = _1611;
        _1759 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0)));
        _1760 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0)));
        _1761 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0)));
    }
    else
    {
        _1747 = _1440;
        _1748 = _1440;
        _1749 = _1440;
        _1750 = _1440;
        _1751 = _1440;
        _1752 = _1440;
        _1753 = _1440;
        _1754 = _1440;
        _1755 = _1440;
        _1756 = _1440;
        _1757 = _1440;
        _1758 = _1440;
        _1759 = 0.0;
        _1760 = 0.0;
        _1761 = 0.0;
    }
    float _1771 = (cbModelParam._m0[1u].x * (_1759 - _1452)) + _1452;
    float _1772 = (cbModelParam._m0[1u].x * (_1760 - _1453)) + _1453;
    float _1773 = (cbModelParam._m0[1u].x * (_1761 - _1454)) + _1454;
    float _1794 = fma(_1773, cbSceneParam._m0[89u].z, fma(_1772, cbSceneParam._m0[89u].y, _1771 * cbSceneParam._m0[89u].x));
    float _1797 = fma(_1773, cbSceneParam._m0[90u].z, fma(_1772, cbSceneParam._m0[90u].y, _1771 * cbSceneParam._m0[90u].x));
    float _1800 = fma(_1773, cbSceneParam._m0[91u].z, fma(_1772, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1771));
    float _1815 = _1074 * 0.5;
    float _1816 = _1075 * 0.5;
    float _1817 = _1076 * 0.5;
    float _1818 = dot(vec4(_1815, _1816, _1817, 1.0), vec4(_1749, _1752, _1755, _1758));
    float _1821 = dot(vec4(_1815, _1816, _1817, 1.0), vec4(_1748, _1751, _1754, _1757));
    float _1824 = dot(vec4(_1815, _1816, _1817, 1.0), vec4(_1747, _1750, _1753, _1756));
    float _1858;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1831 = dot(vec4(_1815, _1816, _1817, 1.0), vec4(_1439, _1443, _1446, _1449));
        float _1835 = dot(vec4(_1815, _1816, _1817, 1.0), vec4(_1441, _1444, _1447, _1450));
        float _1839 = dot(vec4(_1815, _1816, _1817, 1.0), vec4(_1442, _1445, _1448, _1451));
        float _1846 = dot(vec4(cbModelParam._m0[39u]), vec4(_1815, _1816, _1817, 1.0));
        _1858 = dot(vec3(isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0)), isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0)), isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1846) ? 0.0 : (isnan(0.0) ? _1846 : max(0.0, _1846))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1858 = 1.0;
    }
    float _1869;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1860 = dot(vec4(cbModelParam._m0[40u]), vec4(_1815, _1816, _1817, 1.0));
        _1869 = dot(vec3(isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0)), isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0)), isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1860) ? 0.0 : (isnan(0.0) ? _1860 : max(0.0, _1860))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1869 = 1.0;
    }
    float _1873 = (_1869 * cbModelParam._m0[1u].x) + (_1858 * (1.0 - cbModelParam._m0[1u].x));
    float _1883 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _903);
    float _1884 = isnan(_1883) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1883 : min(cbModelParam._m0[25u].z, _1883));
    float _1965;
    float _1967;
    float _1969;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1932 = fma(_1138, cbModelParam._m0[13u].z, fma(_1134, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1130)) + cbModelParam._m0[13u].w;
        float _1936 = fma(_1138, cbModelParam._m0[14u].z, fma(_1134, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1130)) + cbModelParam._m0[14u].w;
        float _1940 = fma(_1138, cbModelParam._m0[15u].z, fma(_1134, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1130)) + cbModelParam._m0[15u].w;
        float _1943 = fma(_1076, cbModelParam._m0[13u].z, fma(_1075, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1074));
        float _1946 = fma(_1076, cbModelParam._m0[14u].z, fma(_1075, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1074));
        float _1949 = fma(_1076, cbModelParam._m0[15u].z, fma(_1075, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1074));
        float _1977;
        if (_1943 > 0.0)
        {
            _1977 = abs((1.0 - _1932) / _1943);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1943 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1932 + 1.0) / _1943);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1977 = frontier_phi_14_12_ladder;
        }
        float _2201;
        if (_1946 > 0.0)
        {
            _2201 = abs((1.0 - _1936) / _1946);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1946 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1936 + 1.0) / _1946);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2201 = frontier_phi_23_19_ladder;
        }
        float _2458;
        if (_1949 > 0.0)
        {
            _2458 = abs((1.0 - _1940) / _1949);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1949 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1940 + 1.0) / _1949);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2458 = frontier_phi_35_30_ladder;
        }
        float _2460 = isnan(_2201) ? _1977 : (isnan(_1977) ? _2201 : min(_1977, _2201));
        float _2461 = isnan(_2458) ? _2460 : (isnan(_2460) ? _2458 : min(_2460, _2458));
        float _2465 = (_2461 * _1943) + _1932;
        float _2466 = (_2461 * _1946) + _1936;
        float _2467 = (_2461 * _1949) + _1940;
        float _2468 = _2461 * 9.9999997473787516355514526367188e-05;
        float _2470 = (-1.0) - _2468;
        float _2472 = _2468 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2467 > _2472) || ((_2467 < _2470) || ((_2466 > _2472) || ((_2466 < _2470) || ((_2465 < _2470) || (_2465 > _2472))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2595 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2467, cbModelParam._m0[9u].z, fma(_2466, cbModelParam._m0[9u].y, _2465 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2467, cbModelParam._m0[10u].z, fma(_2466, cbModelParam._m0[10u].y, _2465 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2467, cbModelParam._m0[11u].z, fma(_2466, cbModelParam._m0[11u].y, _2465 * cbModelParam._m0[11u].x))), _1884);
            frontier_phi_13_35_ladder = _2595.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2595.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2595.x * cbModelParam._m0[1u].y;
        }
        _1965 = frontier_phi_13_35_ladder_2;
        _1967 = frontier_phi_13_35_ladder_1;
        _1969 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1953 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1074, _1075, _1076), _1884);
        _1965 = _1953.x * cbModelParam._m0[1u].y;
        _1967 = _1953.y * cbModelParam._m0[1u].y;
        _1969 = _1953.z * cbModelParam._m0[1u].y;
    }
    float _1973 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _903);
    float _1974 = isnan(_1973) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1973 : min(cbModelParam._m0[25u].w, _1973));
    float _2064;
    float _2066;
    float _2068;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2028 = fma(_1138, cbModelParam._m0[21u].z, fma(_1134, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1130)) + cbModelParam._m0[21u].w;
        float _2032 = fma(_1138, cbModelParam._m0[22u].z, fma(_1134, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1130)) + cbModelParam._m0[22u].w;
        float _2036 = fma(_1138, cbModelParam._m0[23u].z, fma(_1134, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1130)) + cbModelParam._m0[23u].w;
        float _2039 = fma(_1076, cbModelParam._m0[21u].z, fma(_1075, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1074));
        float _2042 = fma(_1076, cbModelParam._m0[22u].z, fma(_1075, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1074));
        float _2045 = fma(_1076, cbModelParam._m0[23u].z, fma(_1075, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1074));
        float _2206;
        if (_2039 > 0.0)
        {
            _2206 = abs((1.0 - _2028) / _2039);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2039 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2028 + 1.0) / _2039);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2206 = frontier_phi_25_21_ladder;
        }
        float _2485;
        if (_2042 > 0.0)
        {
            _2485 = abs((1.0 - _2032) / _2042);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2042 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2032 + 1.0) / _2042);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2485 = frontier_phi_37_32_ladder;
        }
        float _2698;
        if (_2045 > 0.0)
        {
            _2698 = abs((1.0 - _2036) / _2045);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2045 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2036 + 1.0) / _2045);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2698 = frontier_phi_46_43_ladder;
        }
        float _2700 = isnan(_2485) ? _2206 : (isnan(_2206) ? _2485 : min(_2206, _2485));
        float _2701 = isnan(_2698) ? _2700 : (isnan(_2700) ? _2698 : min(_2700, _2698));
        float _2705 = (_2701 * _2039) + _2028;
        float _2706 = (_2701 * _2042) + _2032;
        float _2707 = (_2701 * _2045) + _2036;
        float _2708 = _2701 * 9.9999997473787516355514526367188e-05;
        float _2709 = (-1.0) - _2708;
        float _2711 = _2708 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2707 > _2711) || ((_2707 < _2709) || ((_2706 > _2711) || ((_2706 < _2709) || ((_2705 < _2709) || (_2705 > _2711))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2906 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2707, cbModelParam._m0[17u].z, fma(_2706, cbModelParam._m0[17u].y, _2705 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2707, cbModelParam._m0[18u].z, fma(_2706, cbModelParam._m0[18u].y, _2705 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2707, cbModelParam._m0[19u].z, fma(_2706, cbModelParam._m0[19u].y, _2705 * cbModelParam._m0[19u].x))), _1974);
            frontier_phi_22_46_ladder = _2906.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2906.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2906.x * cbModelParam._m0[1u].z;
        }
        _2064 = frontier_phi_22_46_ladder_2;
        _2066 = frontier_phi_22_46_ladder_1;
        _2068 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2048 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1074, _1075, _1076), _1974);
        _2064 = _2048.x * cbModelParam._m0[1u].z;
        _2066 = _2048.y * cbModelParam._m0[1u].z;
        _2068 = _2048.z * cbModelParam._m0[1u].z;
    }
    float _2081 = (((_1101 * _1050) + _1102) * _1066) * ((cbModelParam._m0[1u].w * (_2064 - _1965)) + _1965);
    float _2083 = (((_1101 * _1052) + _1102) * _1066) * ((cbModelParam._m0[1u].w * (_2066 - _1967)) + _1967);
    float _2085 = (((_1101 * _1053) + _1102) * _1066) * ((cbModelParam._m0[1u].w * (_2068 - _1969)) + _1969);
    float _2088 = fma(_2085, cbSceneParam._m0[89u].z, fma(_2083, cbSceneParam._m0[89u].y, _2081 * cbSceneParam._m0[89u].x));
    float _2091 = fma(_2085, cbSceneParam._m0[90u].z, fma(_2083, cbSceneParam._m0[90u].y, _2081 * cbSceneParam._m0[90u].x));
    float _2094 = fma(_2085, cbSceneParam._m0[91u].z, fma(_2083, cbSceneParam._m0[91u].y, _2081 * cbSceneParam._m0[91u].x));
    vec4 _2102 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_988, _989));
    float _2104 = _2102.w;
    float _2116 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2104);
    float _2117 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2104);
    float _2118 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2104);
    uvec4 _2122 = floatBitsToUint(cbInstanceData._m0[_280 + 5u]);
    uint _2124 = _2122.x * 14u;
    uint _2125 = _2124 + 13u;
    float _2132 = _1066 + (-1.0);
    float _2137 = (cbLight._m0[_2125].x * _2132) + 1.0;
    float _2138 = (cbLight._m0[_2125].y * _2132) + 1.0;
    float _2139 = (cbLight._m0[_2125].z * _2132) + 1.0;
    float _2140 = (cbLight._m0[_2125].w * _2132) + 1.0;
    uint _2141 = _2124 + 5u;
    float _2147 = isnan(1.0) ? _2138 : (isnan(_2138) ? 1.0 : min(_2138, 1.0));
    uint _2151 = _2124 + 4u;
    float _2160 = isnan(1.0) ? _2137 : (isnan(_2137) ? 1.0 : min(_2137, 1.0));
    uint _2164 = _2124 | 1u;
    float _2175 = dot(vec3(cbLight._m0[_2124].xyz), vec3(_900, _901, _902));
    float _2178 = dot(vec3(cbLight._m0[_2164].xyz), vec3(_900, _901, _902));
    float _4356 = isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0));
    float _4367 = isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0));
    float _2183 = (isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0))) * 0.3183098733425140380859375;
    float _2185 = (isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0))) * 0.3183098733425140380859375;
    float _2192 = ((cbLight._m0[_2141].x * _2147) * _2185) + (((cbLight._m0[_2151].x * _2116) * _2160) * _2183);
    float _2193 = ((_2147 * cbLight._m0[_2141].y) * _2185) + (((cbLight._m0[_2151].y * _2117) * _2160) * _2183);
    float _2194 = ((_2147 * cbLight._m0[_2141].z) * _2185) + (((cbLight._m0[_2151].z * _2118) * _2160) * _2183);
    uvec4 _2198 = floatBitsToUint(cbLight._m0[_2124 + 12u]);
    bool _2200 = _2198.x == 0u;
    float _2211;
    float _2213;
    float _2215;
    if (_2200)
    {
        _2211 = _2192;
        _2213 = _2193;
        _2215 = _2194;
    }
    else
    {
        uint _2219 = _2124 + 6u;
        float _2235 = (dot(vec3(cbLight._m0[_2124 + 2u].xyz), vec3(_900, _901, _902)) * 0.5) + 0.5;
        float _2236 = _2235 * _2235;
        float _4378 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
        float _2237 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
        float _2238 = isnan(1.0) ? _2139 : (isnan(_2139) ? 1.0 : min(_2139, 1.0));
        _2211 = (((cbLight._m0[_2219].x * 0.3183098733425140380859375) * _2237) * _2238) + _2192;
        _2213 = (((cbLight._m0[_2219].y * 0.3183098733425140380859375) * _2237) * _2238) + _2193;
        _2215 = (((cbLight._m0[_2219].z * 0.3183098733425140380859375) * _2237) * _2238) + _2194;
    }
    bool _2218 = _2198.y == 0u;
    float _2256;
    float _2258;
    float _2260;
    if (_2218)
    {
        _2256 = _2211;
        _2258 = _2213;
        _2260 = _2215;
    }
    else
    {
        uint _2429 = _2124 + 7u;
        float _2445 = (dot(vec3(cbLight._m0[_2124 + 3u].xyz), vec3(_900, _901, _902)) * 0.5) + 0.5;
        float _2446 = _2445 * _2445;
        float _4394 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
        float _2447 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
        float _2448 = isnan(1.0) ? _2140 : (isnan(_2140) ? 1.0 : min(_2140, 1.0));
        _2256 = (((cbLight._m0[_2429].x * 0.3183098733425140380859375) * _2447) * _2448) + _2211;
        _2258 = (((cbLight._m0[_2429].y * 0.3183098733425140380859375) * _2447) * _2448) + _2213;
        _2260 = (((cbLight._m0[_2429].z * 0.3183098733425140380859375) * _2447) * _2448) + _2215;
    }
    uint _2263 = _2124 + 8u;
    float _2276 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2124].w)) * _903) * 0.949999988079071044921875);
    float _2277 = _2276 * _2276;
    float _2278 = cbLight._m0[_2124].x + _980;
    float _2279 = cbLight._m0[_2124].y + _981;
    float _2280 = cbLight._m0[_2124].z + _982;
    float _2284 = inversesqrt(dot(vec3(_2278, _2279, _2280), vec3(_2278, _2279, _2280)));
    float _2285 = _2284 * _2278;
    float _2286 = _2284 * _2279;
    float _2287 = _2284 * _2280;
    float _2288 = dot(vec3(_900, _901, _902), vec3(cbLight._m0[_2124].xyz));
    float _4410 = isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0));
    float _2291 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
    float _4421 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
    float _2292 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
    float _2293 = dot(vec3(_900, _901, _902), vec3(_2285, _2286, _2287));
    float _4432 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
    float _2296 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
    float _2297 = dot(vec3(cbLight._m0[_2124].xyz), vec3(_2285, _2286, _2287));
    float _4443 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
    float _2301 = _2277 * _2277;
    float _2305 = ((_2296 * _2296) * (_2301 + (-1.0))) + 1.0;
    float _2313 = exp2(log2(1.0 - (isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0)))) * 5.0);
    float _2314 = 0.959999978542327880859375 - _1047;
    float _2316 = 0.959999978542327880859375 - _1048;
    float _2317 = 0.959999978542327880859375 - _1049;
    float _2324 = 1.0 - _2277;
    float _2335 = (0.5 / (((_2292 * ((_2291 * _2324) + _2277)) + 9.9999999392252902907785028219223e-09) + (((_2292 * _2324) + _2277) * _2291))) * _2291;
    float _4454 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
    float _2337 = (isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0))) * (_2301 / ((_2305 * _2305) * 3.141590118408203125));
    uint _2351 = _2124 + 9u;
    float _2362 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2164].w)) * _903) * 0.949999988079071044921875);
    float _2363 = _2362 * _2362;
    float _2364 = cbLight._m0[_2164].x + _980;
    float _2365 = cbLight._m0[_2164].y + _981;
    float _2366 = cbLight._m0[_2164].z + _982;
    float _2370 = inversesqrt(dot(vec3(_2364, _2365, _2366), vec3(_2364, _2365, _2366)));
    float _2371 = _2370 * _2364;
    float _2372 = _2370 * _2365;
    float _2373 = _2370 * _2366;
    float _2374 = dot(vec3(_900, _901, _902), vec3(cbLight._m0[_2164].xyz));
    float _4465 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
    float _2377 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
    float _2378 = dot(vec3(_900, _901, _902), vec3(_2371, _2372, _2373));
    float _4476 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
    float _2381 = isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0));
    float _2382 = dot(vec3(cbLight._m0[_2164].xyz), vec3(_2371, _2372, _2373));
    float _4487 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
    float _2386 = _2363 * _2363;
    float _2390 = ((_2381 * _2381) * (_2386 + (-1.0))) + 1.0;
    float _2397 = exp2(log2(1.0 - (isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0)))) * 5.0);
    float _2404 = 1.0 - _2363;
    float _2414 = (0.5 / (((_2292 * ((_2377 * _2404) + _2363)) + 9.9999999392252902907785028219223e-09) + (((_2292 * _2404) + _2363) * _2377))) * _2377;
    float _4498 = isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : max(_2414, 0.0));
    float _2416 = (isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0))) * (_2386 / ((_2390 * _2390) * 3.141590118408203125));
    float _2426 = (((((_2397 * _2314) + _1050) * cbLight._m0[_2351].x) * _2416) * _2147) + ((((cbLight._m0[_2263].x * _2116) * ((_2313 * _2314) + _1050)) * _2337) * _2160);
    float _2427 = (((((_2397 * _2316) + _1052) * cbLight._m0[_2351].y) * _2416) * _2147) + ((((cbLight._m0[_2263].y * _2117) * ((_2313 * _2316) + _1052)) * _2337) * _2160);
    float _2428 = (((((_2397 * _2317) + _1053) * cbLight._m0[_2351].z) * _2416) * _2147) + ((((cbLight._m0[_2263].z * _2118) * ((_2313 * _2317) + _1053)) * _2337) * _2160);
    float _2490;
    float _2492;
    float _2494;
    if (_2200)
    {
        _2490 = _2426;
        _2492 = _2427;
        _2494 = _2428;
    }
    else
    {
        uint _2496 = _2124 + 2u;
        uint _2500 = _2124 + 10u;
        float _2514 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2496].w)) * _903) * 0.949999988079071044921875);
        float _2515 = _2514 * _2514;
        float _2516 = cbLight._m0[_2496].x + _980;
        float _2517 = cbLight._m0[_2496].y + _981;
        float _2518 = cbLight._m0[_2496].z + _982;
        float _2522 = inversesqrt(dot(vec3(_2516, _2517, _2518), vec3(_2516, _2517, _2518)));
        float _2523 = _2522 * _2516;
        float _2524 = _2522 * _2517;
        float _2525 = _2522 * _2518;
        float _2526 = dot(vec3(_900, _901, _902), vec3(cbLight._m0[_2496].xyz));
        float _4509 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0));
        float _2529 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
        float _2530 = dot(vec3(_900, _901, _902), vec3(_2523, _2524, _2525));
        float _4520 = isnan(0.0) ? _2530 : (isnan(_2530) ? 0.0 : max(_2530, 0.0));
        float _2533 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
        float _2534 = dot(vec3(cbLight._m0[_2496].xyz), vec3(_2523, _2524, _2525));
        float _4531 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
        float _2538 = _2515 * _2515;
        float _2542 = ((_2533 * _2533) * (_2538 + (-1.0))) + 1.0;
        float _2549 = exp2(log2(1.0 - (isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0)))) * 5.0);
        float _2556 = 1.0 - _2515;
        float _2566 = (0.5 / (((_2292 * ((_2529 * _2556) + _2515)) + 9.9999999392252902907785028219223e-09) + (((_2292 * _2556) + _2515) * _2529))) * _2529;
        float _4542 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0));
        float _2568 = (isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0))) * (_2538 / ((_2542 * _2542) * 3.141590118408203125));
        float _2569 = isnan(1.0) ? _2139 : (isnan(_2139) ? 1.0 : min(_2139, 1.0));
        _2490 = (((((_2549 * _2314) + _1050) * cbLight._m0[_2500].x) * _2568) * _2569) + _2426;
        _2492 = (((((_2549 * _2316) + _1052) * cbLight._m0[_2500].y) * _2568) * _2569) + _2427;
        _2494 = (((((_2549 * _2317) + _1053) * cbLight._m0[_2500].z) * _2568) * _2569) + _2428;
    }
    float _2604;
    float _2606;
    float _2608;
    if (_2218)
    {
        _2604 = _2490;
        _2606 = _2492;
        _2608 = _2494;
    }
    else
    {
        uint _2615 = _2124 + 3u;
        uint _2619 = _2124 + 11u;
        float _2633 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2615].w)) * _903) * 0.949999988079071044921875);
        float _2634 = _2633 * _2633;
        float _2635 = cbLight._m0[_2615].x + _980;
        float _2636 = cbLight._m0[_2615].y + _981;
        float _2637 = cbLight._m0[_2615].z + _982;
        float _2641 = inversesqrt(dot(vec3(_2635, _2636, _2637), vec3(_2635, _2636, _2637)));
        float _2642 = _2641 * _2635;
        float _2643 = _2641 * _2636;
        float _2644 = _2641 * _2637;
        float _2645 = dot(vec3(_900, _901, _902), vec3(cbLight._m0[_2615].xyz));
        float _4558 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0));
        float _2648 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
        float _2649 = dot(vec3(_900, _901, _902), vec3(_2642, _2643, _2644));
        float _4569 = isnan(0.0) ? _2649 : (isnan(_2649) ? 0.0 : max(_2649, 0.0));
        float _2652 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
        float _2653 = dot(vec3(cbLight._m0[_2615].xyz), vec3(_2642, _2643, _2644));
        float _4580 = isnan(0.0) ? _2653 : (isnan(_2653) ? 0.0 : max(_2653, 0.0));
        float _2657 = _2634 * _2634;
        float _2661 = ((_2652 * _2652) * (_2657 + (-1.0))) + 1.0;
        float _2668 = exp2(log2(1.0 - (isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0)))) * 5.0);
        float _2675 = 1.0 - _2634;
        float _2685 = (0.5 / (((_2292 * ((_2648 * _2675) + _2634)) + 9.9999999392252902907785028219223e-09) + (((_2292 * _2675) + _2634) * _2648))) * _2648;
        float _4591 = isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : max(_2685, 0.0));
        float _2687 = (isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0))) * (_2657 / ((_2661 * _2661) * 3.141590118408203125));
        float _2688 = isnan(1.0) ? _2140 : (isnan(_2140) ? 1.0 : min(_2140, 1.0));
        _2604 = (((((_2668 * _2314) + _1050) * cbLight._m0[_2619].x) * _2687) * _2688) + _2490;
        _2606 = (((((_2668 * _2316) + _1052) * cbLight._m0[_2619].y) * _2687) * _2688) + _2492;
        _2608 = (((((_2668 * _2317) + _1053) * cbLight._m0[_2619].z) * _2687) * _2688) + _2494;
    }
    float _2823;
    float _2825;
    float _2827;
    float _2829;
    float _2831;
    float _2833;
    if (_2122.y == 0u)
    {
        float _2763 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2764 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2763;
        float _2765 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2763;
        float _2766 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2763;
        uvec4 _2778 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2779 = _2778.x;
        uint _2790 = uint((float(_2778.y) * floor(float(uint(cbSceneParam._m0[85u].y * _989) / _2779))) + floor(float(uint(cbSceneParam._m0[85u].x * _988) / _2779)));
        float _2800 = (log2(_2766 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2801 = isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0));
        uint _2804 = uint(isnan(14.0) ? _2801 : (isnan(_2801) ? 14.0 : min(_2801, 14.0)));
        uvec4 _2809 = texelFetch(g_lightClusterGridBuffer, int(((_2804 << 2u) + (_2790 << 6u)) >> 2u));
        uint _2810 = _2809.x;
        uint _2811 = _2778.z;
        float _2911;
        float _2913;
        float _2915;
        float _2917;
        float _2919;
        float _2921;
        if (((((1u << ((_2811 >> 4u) & 15u)) + 4294967295u) & _2810) == 0u) || ((_2811 & 240u) == 0u))
        {
            _2911 = 0.0;
            _2913 = 0.0;
            _2915 = 0.0;
            _2917 = 0.0;
            _2919 = 0.0;
            _2921 = 0.0;
        }
        else
        {
            float _2912;
            float _2914;
            float _2916;
            float _2918;
            float _2920;
            float _2922;
            float _3056 = 0.0;
            float _3057 = 0.0;
            float _3058 = 0.0;
            float _3059 = 0.0;
            float _3060 = 0.0;
            float _3061 = 0.0;
            uint _3062 = 0u;
            uint _3071;
            bool _3072;
            for (;;)
            {
                _3071 = texelFetch(g_lightClassification, int((((_2804 << 5u) + (_2790 << 9u)) + (_3062 << 2u)) >> 2u)).x;
                _3072 = _3071 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3072)
                {
                    frontier_phi_61_pred = _3056;
                    frontier_phi_61_pred_1 = _3061;
                    frontier_phi_61_pred_2 = _3060;
                    frontier_phi_61_pred_3 = _3059;
                    frontier_phi_61_pred_4 = _3058;
                    frontier_phi_61_pred_5 = _3057;
                }
                else
                {
                    float _3180;
                    float _3181;
                    float _3182;
                    float _3183;
                    float _3184;
                    float _3185;
                    uint _3186;
                    _3180 = _3056;
                    _3181 = _3057;
                    _3182 = _3058;
                    _3183 = _3059;
                    _3184 = _3060;
                    _3185 = _3061;
                    _3186 = _3071;
                    float _3112;
                    float _3113;
                    float _3114;
                    float _3115;
                    float _3116;
                    float _3117;
                    for (;;)
                    {
                        uint _3190 = uint(findLSB(_3186)) + (_3062 << 5u);
                        uint _3187 = (_3186 + 4294967295u) & _3186;
                        uint _3192 = _3190 * 48u;
                        vec4 _3206 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3192)).x, texelFetch(g_PointLightRenderingBuffer, int(_3192 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3192 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3192 + 3u)).x));
                        uint _3212 = (_3190 * 48u) + 4u;
                        vec4 _3225 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3212)).x, texelFetch(g_PointLightRenderingBuffer, int(_3212 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3212 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3212 + 3u)).x));
                        uint _3231 = (_3190 * 48u) + 8u;
                        vec3 _3242 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3231)).x, texelFetch(g_PointLightRenderingBuffer, int(_3231 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3231 + 2u)).x));
                        float _3246 = _3206.x - _2764;
                        float _3247 = _3206.y - _2765;
                        float _3248 = _3206.z - _2766;
                        float _3249 = dot(vec3(_3246, _3247, _3248), vec3(_3246, _3247, _3248));
                        float _3252 = inversesqrt(_3249);
                        float _3253 = _3252 * _3246;
                        float _3254 = _3252 * _3247;
                        float _3255 = _3252 * _3248;
                        float _3256 = dot(vec3(_1007, _1010, _1013), vec3(_3253, _3254, _3255));
                        float _3261 = 1.0 - (_3249 * _3206.w);
                        float _4617 = isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : max(_3261, 0.0));
                        float _3262 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
                        float _3263 = sqrt(_3249) * _3225.w;
                        float _3266 = 1.39999997615814208984375 / (_3263 + 1.39999997615814208984375);
                        float _3267 = _3266 * _3266;
                        float _3270 = ((1.0 - _3267) * _3256) + _3267;
                        float _3273 = _3263 * _3263;
                        float _3277 = ((isnan(0.0) ? _3270 : (isnan(_3270) ? 0.0 : max(_3270, 0.0))) * _3262) / ((_3273 * 0.699999988079071044921875) + 1.0);
                        float _3281 = (-0.0) - _2764;
                        float _3282 = (-0.0) - _2765;
                        float _3283 = (-0.0) - _2766;
                        float _3287 = inversesqrt(dot(vec3(_3281, _3282, _3283), vec3(_3281, _3282, _3283)));
                        float _3288 = _3287 * _3281;
                        float _3289 = _3287 * _3282;
                        float _3290 = _3287 * _3283;
                        float _3298 = exp2(log2(1.0 / ((_3273 * 3.5) + 5.0)) * 0.25);
                        float _3299 = 1.0 - _1082;
                        float _3306 = sqrt(1.0 - ((1.0 - (_3299 * _3299)) * (1.0 - (_3298 * _3298))));
                        float _3307 = _3306 * _3306;
                        float _3308 = _3307 * _3307;
                        float _3309 = _3288 + _3253;
                        float _3310 = _3289 + _3254;
                        float _3311 = _3290 + _3255;
                        float _3315 = inversesqrt(dot(vec3(_3309, _3310, _3311), vec3(_3309, _3310, _3311)));
                        float _3319 = dot(vec3(_1007, _1010, _1013), vec3(_3288, _3289, _3290));
                        float _4633 = isnan(0.0) ? _3319 : (isnan(_3319) ? 0.0 : max(_3319, 0.0));
                        float _3322 = isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0));
                        float _3323 = dot(vec3(_1007, _1010, _1013), vec3(_3315 * _3309, _3315 * _3310, _3315 * _3311));
                        float _4644 = isnan(0.0) ? _3323 : (isnan(_3323) ? 0.0 : max(_3323, 0.0));
                        float _3326 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
                        float _3330 = ((_3326 * _3326) * (_3308 + (-1.0))) + 1.0;
                        float _3331 = _3266 * _3307;
                        float _3332 = _3331 * _3331;
                        float _3335 = ((1.0 - _3332) * _3256) + _3332;
                        float _4655 = isnan(0.0) ? _3335 : (isnan(_3335) ? 0.0 : max(_3335, 0.0));
                        float _3336 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
                        float _3337 = 1.0 - _3307;
                        float _3347 = (0.5 / (((_3336 * ((_3322 * _3337) + _3307)) + 9.9999999392252902907785028219223e-09) + (((_3336 * _3337) + _3307) * _3322))) * _3336;
                        float _4666 = isnan(0.0) ? _3347 : (isnan(_3347) ? 0.0 : max(_3347, 0.0));
                        float _3358 = (((_3308 * 3.1415927410125732421875) * (isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0)))) / ((_3330 * _3330) * ((_3273 * 2.1991131305694580078125) + 3.141590118408203125))) * _3262;
                        _3115 = (_3277 * _3225.x) + _3183;
                        _3116 = (_3277 * _3225.y) + _3184;
                        _3117 = (_3277 * _3225.z) + _3185;
                        _3112 = (_3358 * _3242.x) + _3180;
                        _3113 = (_3358 * _3242.y) + _3181;
                        _3114 = (_3358 * _3242.z) + _3182;
                        if (_3187 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3180 = _3112;
                            _3181 = _3113;
                            _3182 = _3114;
                            _3183 = _3115;
                            _3184 = _3116;
                            _3185 = _3117;
                            _3186 = _3187;
                        }
                    }
                    frontier_phi_61_pred = _3112;
                    frontier_phi_61_pred_1 = _3117;
                    frontier_phi_61_pred_2 = _3116;
                    frontier_phi_61_pred_3 = _3115;
                    frontier_phi_61_pred_4 = _3114;
                    frontier_phi_61_pred_5 = _3113;
                }
                _2912 = frontier_phi_61_pred;
                _2922 = frontier_phi_61_pred_1;
                _2920 = frontier_phi_61_pred_2;
                _2918 = frontier_phi_61_pred_3;
                _2916 = frontier_phi_61_pred_4;
                _2914 = frontier_phi_61_pred_5;
                uint _3063 = _3062 + 1u;
                if (_3063 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3056 = _2912;
                    _3057 = _2914;
                    _3058 = _2916;
                    _3059 = _2918;
                    _3060 = _2920;
                    _3061 = _2922;
                    _3062 = _3063;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2911 = _2912;
            _2913 = _2914;
            _2915 = _2916;
            _2917 = _2918;
            _2919 = _2920;
            _2921 = _2922;
        }
        uvec4 _2925 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2926 = _2925.z;
        uint _2928 = (_2926 >> 8u) & 15u;
        float _3024;
        float _3026;
        float _3028;
        float _3030;
        float _3032;
        float _3034;
        if (((4294967295u << _2928) & _2810) == 0u)
        {
            _3024 = _2911;
            _3026 = _2913;
            _3028 = _2915;
            _3030 = _2917;
            _3032 = _2919;
            _3034 = _2921;
        }
        else
        {
            float _3049 = inversesqrt(dot(vec3(_2764, _2765, _2766), vec3(_2764, _2765, _2766)));
            float _3050 = _3049 * _2764;
            float _3051 = _3049 * _2765;
            float _3052 = _3049 * _2766;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2928 < ((_2926 >> 12u) & 15u))
            {
                float _3025;
                float _3027;
                float _3029;
                float _3031;
                float _3033;
                float _3035;
                float _3163 = _2911;
                float _3164 = _2913;
                float _3165 = _2915;
                float _3166 = _2917;
                float _3167 = _2919;
                float _3168 = _2921;
                uint _3169 = _2928;
                uint _3178;
                bool _3179;
                for (;;)
                {
                    _3178 = texelFetch(g_lightClassification, int((((_2804 << 5u) + (_2790 << 9u)) + (_3169 << 2u)) >> 2u)).x;
                    _3179 = _3178 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3179)
                    {
                        frontier_phi_67_pred = _3166;
                        frontier_phi_67_pred_1 = _3167;
                        frontier_phi_67_pred_2 = _3168;
                        frontier_phi_67_pred_3 = _3165;
                        frontier_phi_67_pred_4 = _3164;
                        frontier_phi_67_pred_5 = _3163;
                    }
                    else
                    {
                        float _3363;
                        float _3364;
                        float _3365;
                        float _3366;
                        float _3367;
                        float _3368;
                        float _3656;
                        float _3657;
                        float _3658;
                        float _3659;
                        float _3660;
                        float _3661;
                        float _3376 = _3163;
                        float _3377 = _3164;
                        float _3378 = _3165;
                        float _3379 = _3166;
                        float _3380 = _3167;
                        float _3381 = _3168;
                        uint _3382 = _3178;
                        uint _3383;
                        vec4 _3408;
                        float _3409;
                        vec4 _3424;
                        vec3 _3436;
                        vec4 _3451;
                        vec4 _3466;
                        float _3512;
                        bool _3513;
                        for (;;)
                        {
                            uint _3393 = ((_3169 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3382));
                            _3383 = (_3382 + 4294967295u) & _3382;
                            uint _3395 = _3393 * 40u;
                            _3408 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3395)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 3u)).x));
                            _3409 = _3408.w;
                            uint _3411 = (_3393 * 40u) + 4u;
                            _3424 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3411)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 3u)).x));
                            uint _3426 = (_3393 * 40u) + 8u;
                            _3436 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3426)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 2u)).x));
                            uint _3438 = (_3393 * 40u) + 16u;
                            _3451 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3438)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 3u)).x));
                            uint _3453 = (_3393 * 40u) + 20u;
                            _3466 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3453)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 3u)).x));
                            uint _3468 = (_3393 * 40u) + 24u;
                            vec4 _3481 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3468)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 3u)).x));
                            uint _3487 = (_3393 * 40u) + 28u;
                            vec4 _3500 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3487)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 3u)).x));
                            _3512 = fma(_2766, _3500.z, fma(_2765, _3500.y, _3500.x * _2764)) + _3500.w;
                            _3513 = !((fma(_2766, _3481.z, fma(_2765, _3481.y, _3481.x * _2764)) + _3481.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3513)
                            {
                                float _3540 = _3408.x - _2764;
                                float _3541 = _3408.y - _2765;
                                float _3542 = _3408.z - _2766;
                                float _3543 = dot(vec3(_3540, _3541, _3542), vec3(_3540, _3541, _3542));
                                float _3546 = inversesqrt(_3543);
                                float _3547 = _3546 * _3540;
                                float _3548 = _3546 * _3541;
                                float _3549 = _3546 * _3542;
                                float _3553 = 1.0 - (_3543 / (_3409 * _3409));
                                float _4677 = isnan(0.0) ? _3553 : (isnan(_3553) ? 0.0 : max(_3553, 0.0));
                                float _3554 = isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0));
                                float _3558 = sqrt(_3543) * _3424.w;
                                float _3560 = 1.39999997615814208984375 / (_3558 + 1.39999997615814208984375);
                                float _3561 = _3560 * _3560;
                                float _3564 = ((1.0 - _3561) * dot(vec3(_3547, _3548, _3549), vec3(_1007, _1010, _1013))) + _3561;
                                float _3567 = _3558 * _3558;
                                float _3571 = (fma(_2766, _3451.z, fma(_2765, _3451.y, _3451.x * _2764)) + _3451.w) / _3512;
                                float _3572 = (fma(_2766, _3466.z, fma(_2765, _3466.y, _3466.x * _2764)) + _3466.w) / _3512;
                                float _3576 = 1.0 - dot(vec2(_3571, _3572), vec2(_3571, _3572));
                                float _4693 = isnan(0.0) ? _3576 : (isnan(_3576) ? 0.0 : max(_3576, 0.0));
                                float _3577 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
                                float _3578 = _3577 * (((isnan(0.0) ? _3564 : (isnan(_3564) ? 0.0 : max(_3564, 0.0))) * _3554) / ((_3567 * 0.699999988079071044921875) + 1.0));
                                float _3590 = exp2(log2(1.0 / ((_3567 * 3.5) + 5.0)) * 0.25);
                                float _3591 = 1.0 - _1082;
                                float _3598 = sqrt(1.0 - ((1.0 - (_3591 * _3591)) * (1.0 - (_3590 * _3590))));
                                float _3599 = _3598 * _3598;
                                float _3600 = _3599 * _3599;
                                float _3601 = _3547 - _3050;
                                float _3602 = _3548 - _3051;
                                float _3603 = _3549 - _3052;
                                float _3607 = inversesqrt(dot(vec3(_3601, _3602, _3603), vec3(_3601, _3602, _3603)));
                                float _3611 = dot(vec3(_1007, _1010, _1013), vec3((-0.0) - _3050, (-0.0) - _3051, (-0.0) - _3052));
                                float _4704 = isnan(0.0) ? _3611 : (isnan(_3611) ? 0.0 : max(_3611, 0.0));
                                float _3614 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
                                float _3615 = dot(vec3(_1007, _1010, _1013), vec3(_3607 * _3601, _3607 * _3602, _3607 * _3603));
                                float _4715 = isnan(0.0) ? _3615 : (isnan(_3615) ? 0.0 : max(_3615, 0.0));
                                float _3618 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
                                float _3622 = ((_3618 * _3618) * (_3600 + (-1.0))) + 1.0;
                                float _3623 = _3560 * _3599;
                                float _3624 = _3623 * _3623;
                                float _3630 = ((1.0 - _3624) * dot(vec3(_1007, _1010, _1013), vec3(_3547, _3548, _3549))) + _3624;
                                float _4726 = isnan(0.0) ? _3630 : (isnan(_3630) ? 0.0 : max(_3630, 0.0));
                                float _3631 = isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0));
                                float _3632 = 1.0 - _3599;
                                float _3642 = (0.5 / (((_3631 * ((_3614 * _3632) + _3599)) + 9.9999999392252902907785028219223e-09) + (((_3631 * _3632) + _3599) * _3614))) * _3631;
                                float _4737 = isnan(0.0) ? _3642 : (isnan(_3642) ? 0.0 : max(_3642, 0.0));
                                float _3652 = (_3577 * _3554) * (((_3600 * 3.1415927410125732421875) * (isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0)))) / ((_3622 * _3622) * ((_3567 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3652 * _3436.x;
                                frontier_phi_73_pred_1 = _3652 * _3436.y;
                                frontier_phi_73_pred_2 = _3578 * _3424.z;
                                frontier_phi_73_pred_3 = _3578 * _3424.y;
                                frontier_phi_73_pred_4 = _3578 * _3424.x;
                                frontier_phi_73_pred_5 = _3652 * _3436.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3656 = frontier_phi_73_pred;
                            _3657 = frontier_phi_73_pred_1;
                            _3661 = frontier_phi_73_pred_2;
                            _3660 = frontier_phi_73_pred_3;
                            _3659 = frontier_phi_73_pred_4;
                            _3658 = frontier_phi_73_pred_5;
                            _3366 = _3659 + _3379;
                            _3367 = _3660 + _3380;
                            _3368 = _3661 + _3381;
                            _3363 = _3656 + _3376;
                            _3364 = _3657 + _3377;
                            _3365 = _3658 + _3378;
                            if (_3383 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3376 = _3363;
                                _3377 = _3364;
                                _3378 = _3365;
                                _3379 = _3366;
                                _3380 = _3367;
                                _3381 = _3368;
                                _3382 = _3383;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3366;
                        frontier_phi_67_pred_1 = _3367;
                        frontier_phi_67_pred_2 = _3368;
                        frontier_phi_67_pred_3 = _3365;
                        frontier_phi_67_pred_4 = _3364;
                        frontier_phi_67_pred_5 = _3363;
                    }
                    _3031 = frontier_phi_67_pred;
                    _3033 = frontier_phi_67_pred_1;
                    _3035 = frontier_phi_67_pred_2;
                    _3029 = frontier_phi_67_pred_3;
                    _3027 = frontier_phi_67_pred_4;
                    _3025 = frontier_phi_67_pred_5;
                    uint _3170 = _3169 + 1u;
                    if (_3170 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3163 = _3025;
                        _3164 = _3027;
                        _3165 = _3029;
                        _3166 = _3031;
                        _3167 = _3033;
                        _3168 = _3035;
                        _3169 = _3170;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3033;
                frontier_phi_55_56_ladder_1 = _3035;
                frontier_phi_55_56_ladder_2 = _3031;
                frontier_phi_55_56_ladder_3 = _3029;
                frontier_phi_55_56_ladder_4 = _3027;
                frontier_phi_55_56_ladder_5 = _3025;
            }
            else
            {
                frontier_phi_55_56_ladder = _2919;
                frontier_phi_55_56_ladder_1 = _2921;
                frontier_phi_55_56_ladder_2 = _2917;
                frontier_phi_55_56_ladder_3 = _2915;
                frontier_phi_55_56_ladder_4 = _2913;
                frontier_phi_55_56_ladder_5 = _2911;
            }
            _3024 = frontier_phi_55_56_ladder_5;
            _3026 = frontier_phi_55_56_ladder_4;
            _3028 = frontier_phi_55_56_ladder_3;
            _3030 = frontier_phi_55_56_ladder_2;
            _3032 = frontier_phi_55_56_ladder;
            _3034 = frontier_phi_55_56_ladder_1;
        }
        float _3039 = isnan(1.0) ? _1066 : (isnan(_1066) ? 1.0 : min(_1066, 1.0));
        _2823 = (_3039 * _3030) + _2256;
        _2825 = (_3039 * _3032) + _2258;
        _2827 = (_3039 * _3034) + _2260;
        _2829 = ((_3024 * _1050) * _3039) + _2604;
        _2831 = ((_3026 * _1052) * _3039) + _2606;
        _2833 = ((_3028 * _1053) * _3039) + _2608;
    }
    else
    {
        _2823 = _2256;
        _2825 = _2258;
        _2827 = _2260;
        _2829 = _2604;
        _2831 = _2606;
        _2833 = _2608;
    }
    float _4753 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
    float _4764 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
    float _4775 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
    uint _2853 = _280 + 6u;
    float _2861 = _988 / cbSceneParam._m0[86u].x;
    float _2862 = _989 / cbSceneParam._m0[86u].y;
    vec4 _2876 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2861, _2862, (log2((isnan(cbSceneParam._m0[77u].w) ? _922 : (isnan(_922) ? cbSceneParam._m0[77u].w : min(_922, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2878 = _2876.x;
    float _2879 = _2876.y;
    float _2880 = _2876.z;
    float _2881 = _2876.w;
    float _2974;
    float _2976;
    float _2978;
    float _2980;
    if (_922 > cbSceneParam._m0[78u].w)
    {
        float _2936 = isnan(_922) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _922 : min(cbSceneParam._m0[80u].w, _922));
        float _2937 = _2936 / _922;
        float _2948 = _2937 * _973;
        float _2949 = _974 * _2937;
        float _2950 = (-0.0) - _2949;
        float _2952 = _2937 * _975;
        float _2954 = (cbSceneParam._m0[77u].w * _2950) / _2936;
        float _2955 = _2954 + cbSceneParam._m0[79u].w;
        float _2956 = cbSceneParam._m0[79u].w - _2949;
        float _2962 = sqrt(((_2948 * _2948) + (_2949 * _2949)) + (_2952 * _2952));
        float _2965 = (1.0 - (cbSceneParam._m0[77u].w / _2936)) * _2962;
        float _2970 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2972 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3125;
        if (abs((_2950 - _2954) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3125 = ((((_2955 > 0.0) ? exp2(_2970 * _2955) : (2.0 - exp2(_2972 * _2955))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2965;
        }
        else
        {
            float _3085 = 1.0 / cbSceneParam._m0[80u].x;
            float _3086 = isnan(_2956) ? _2955 : (isnan(_2955) ? _2956 : max(_2955, _2956));
            float _3087 = isnan(_2956) ? _2955 : (isnan(_2955) ? _2956 : min(_2955, _2956));
            float _3096 = isnan(0.0) ? _3086 : (isnan(_3086) ? 0.0 : min(_3086, 0.0));
            float _3097 = isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : min(_3087, 0.0));
            _3125 = ((abs(_2962 / _2950) * cbSceneParam._m0[80u].y) * ((((_3096 - _3097) * 2.0) - ((exp2(_2970 * (isnan(0.0) ? _3086 : (isnan(_3086) ? 0.0 : max(_3086, 0.0)))) - exp2(_2970 * (isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : max(_3087, 0.0))))) * _3085)) - ((exp2(_2972 * _3096) - exp2(_2972 * _3097)) * _3085))) + (_2965 * cbSceneParam._m0[80u].z);
        }
        vec4 _3127 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2861, _2862, 1.0), 0.0);
        float _3136 = exp2((_3125 * (-1.44269502162933349609375)) * (1.0 - _3127.w));
        float _3137 = log2(_3136);
        float _3153 = log2(_2881);
        _2974 = (exp2(_3153 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3137 * cbSceneParam._m0[78u].x)) * _3127.x) / cbSceneParam._m0[78u].x)) + _2878;
        _2976 = (exp2(_3153 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3137 * cbSceneParam._m0[78u].y)) * _3127.y) / cbSceneParam._m0[78u].y)) + _2879;
        _2978 = (exp2(_3153 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3137 * cbSceneParam._m0[78u].z)) * _3127.z) / cbSceneParam._m0[78u].z)) + _2880;
        _2980 = _3136 * _2881;
    }
    else
    {
        _2974 = _2878;
        _2976 = _2879;
        _2978 = _2880;
        _2980 = _2881;
    }
    float _2992 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2993 = _2992 == 3.0;
    float _2994 = log2(_2980);
    float _3001 = exp2(_2994 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0))) * (_2823 + ((isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0))) * _1066))) + ((_2829 + ((isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0))) * _1873)) * cbPerFrame._m0[3u].x));
    float _3002 = exp2(_2994 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0))) * (_2825 + ((isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0))) * _1066))) + ((_2831 + ((isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0))) * _1873)) * cbPerFrame._m0[3u].x));
    float _3003 = exp2(_2994 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0))) * (_2827 + ((isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0))) * _1066))) + ((_2833 + ((isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0))) * _1873)) * cbPerFrame._m0[3u].x));
    float _3012 = (_2992 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3012 * (_2993 ? _3001 : (_3001 + (cbSceneParam._m0[72u].w * _2974)));
    SV_Target.y = _3012 * (_2993 ? _3002 : (_3002 + (cbSceneParam._m0[72u].w * _2976)));
    SV_Target.z = _3012 * (_2993 ? _3003 : (_3003 + (cbSceneParam._m0[72u].w * _2978)));
    SV_Target.w = cbInstanceData._m0[_2853].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2853].w;
}


