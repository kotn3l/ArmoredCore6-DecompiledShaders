#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1403;
float _4065;
float _4066;
float _4067;
float _4068;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _226 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _227 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _228 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _234 = inversesqrt(dot(vec3(_226, _227, _228), vec3(_226, _227, _228)));
    float _241 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _248 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _254 = uint(roundEven(NORMAL.w)) * 13u;
    uint _260 = _254 + 1u;
    uint _264 = _254 + 2u;
    float _273 = sqrt(((cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x) + (cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x)) + (cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x));
    float _274 = _273 * TEXCOORD.z;
    float _275 = _273 * TEXCOORD.w;
    vec4 _294 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _318 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _323 = _318.x * cbMtdParam._m0[11u].x;
    float _324 = _318.y * cbMtdParam._m0[11u].y;
    float _325 = _318.z * cbMtdParam._m0[11u].z;
    vec4 _344 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _274) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _275) + cbTextureTilingScale._m0[5u].w));
    vec4 _364 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _398 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[27u].x * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].y * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _400 = _398.x;
    float _412 = dot(vec4(_400, _398.yzw), vec4(cbMtdParam._m0[28u].w, cbMtdParam._m0[29u].xy, 0.0));
    float _429 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _364.x) * 2.0) - ((((_400 - _412) * cbMtdParam._m0[23u].w) + _412) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4077 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _430 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
    float _437 = (_430 * ((_344.x * cbMtdParam._m0[12u].x) - _323)) + _323;
    float _438 = (_430 * ((_344.y * cbMtdParam._m0[12u].y) - _324)) + _324;
    float _439 = (_430 * ((_344.z * cbMtdParam._m0[12u].z) - _325)) + _325;
    vec4 _456 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _274) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _275) + cbTextureTilingScale._m0[3u].w));
    vec4 _478 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].z * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].w * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _480 = _478.x;
    float _490 = dot(vec4(_480, _478.yzw), vec4(cbMtdParam._m0[30u].yzw, 0.0));
    float _504 = ((cbMtdParam._m0[25u].z * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _364.y) * 2.0) - ((((_480 - _490) * cbMtdParam._m0[23u].w) + _490) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4088 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _505 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
    float _518 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _294.x) * ((_505 * ((_456.x * cbMtdParam._m0[13u].x) - _437)) + _437);
    float _521 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _294.y) * ((_505 * ((_456.y * cbMtdParam._m0[13u].y) - _438)) + _438);
    float _524 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _294.z) * ((_505 * ((_456.z * cbMtdParam._m0[13u].z) - _439)) + _439);
    vec4 _542 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _274) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _275) + cbTextureTilingScale._m0[4u].w));
    vec4 _559 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _561 = _559.x;
    float _562 = _559.y;
    float _563 = _559.z;
    float _570 = ((_542.x - _561) * _430) + _561;
    float _571 = ((_542.y - _562) * _430) + _562;
    float _572 = ((_542.z - _563) * _430) + _563;
    vec4 _584 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _274) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _275) + cbTextureTilingScale._m0[2u].w));
    float _597 = ((_584.z - _572) * _505) + _572;
    float _600 = ((((_584.x - _570) * _505) + _570) * 2.0) + (-1.0);
    float _602 = ((((_584.y - _571) * _505) + _571) * 2.0) + (-1.0);
    float _603 = dot(vec2(_600, _602), vec2(_600, _602));
    float _4099 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _608 = sqrt(1.0 - (isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0))));
    vec4 _622 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _647 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _274) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _275) + cbTextureTilingScale._m0[11u].w));
    float _649 = _647.x;
    float _650 = 1.0 - _649;
    float _666 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_649 - _650) * cbMtdParam._m0[24u].z) + _650) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4110 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _667 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
    float _674 = (_667 * (cbMtdParam._m0[17u].x - _518)) + _518;
    float _675 = (_667 * (cbMtdParam._m0[17u].y - _521)) + _521;
    float _676 = (_667 * (cbMtdParam._m0[17u].z - _524)) + _524;
    vec4 _702 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _704 = _702.x;
    float _721 = ((texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _274) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _275) + cbTextureTilingScale._m0[9u].w)).x - _704) * _430) + _704;
    float _738 = ((texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _274) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _275) + cbTextureTilingScale._m0[21u].w)).x - _721) * _505) + _721;
    float _742 = ((texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _738) * cbMtdParam._m0[19u].z) + _738;
    float _744 = _742 - (_742 * _667);
    float _748 = (cbMtdParam._m0[19u].w * (_622.z - _597)) + _597;
    vec4 _761 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _274) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _275) + cbTextureTilingScale._m0[15u].w));
    float _768 = (_761.x * 2.0) + (-1.0);
    float _769 = (_761.y * 2.0) + (-1.0);
    float _770 = dot(vec2(_768, _769), vec2(_768, _769));
    float _4121 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _778 = (_667 * (_761.z - _748)) + _748;
    float _781 = (((_622.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w) + _600;
    float _782 = (((_622.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w) + _602;
    float _794 = (((_768 - _781) + (cbMtdParam._m0[21u].x * _781)) * _667) + _781;
    float _795 = (((_769 - _782) + (cbMtdParam._m0[21u].x * _782)) * _667) + _782;
    float _796 = (_667 * (sqrt(1.0 - (isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0)))) - _608)) + _608;
    float _798 = cbMtdParam._m0[22u].x + _622.w;
    float _800 = gl_FragCoord.x * 0.125;
    float _802 = gl_FragCoord.y * 0.125;
    float _812 = fma(_796, _241 * NORMAL.x, fma(_795, _248 * TANGENT.x, (_234 * _226) * _794));
    float _815 = fma(_796, _241 * NORMAL.y, fma(_795, _248 * TANGENT.y, (_234 * _227) * _794));
    float _818 = fma(_796, _241 * NORMAL.z, fma(_795, _248 * TANGENT.z, (_234 * _228) * _794));
    float _822 = inversesqrt(dot(vec3(_812, _815, _818), vec3(_812, _815, _818)));
    float _823 = _822 * _812;
    float _824 = _822 * _815;
    float _825 = _822 * _818;
    float _4132 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _826 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
    float _4143 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
    float _4154 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _4165 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _4176 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
    float _4187 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _831 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
    if (!(cbMtdParam._m0[25u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_800, _802)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _849 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _890 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _900 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _890);
    float _901 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _890);
    float _902 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _890);
    float _906 = inversesqrt(dot(vec3(_900, _901, _902), vec3(_900, _901, _902)));
    float _907 = _900 * _906;
    float _908 = _901 * _906;
    float _909 = _902 * _906;
    vec4 _911 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_800, _802));
    float _913 = _911.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1085 = sqrt(((_900 * _900) + (_901 * _901)) + (_902 * _902));
        float _1091 = (cbMatDynParam._m0[5u].x * _1085) + cbMatDynParam._m0[5u].y;
        float _4198 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1092 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
        float _1096 = (cbMatDynParam._m0[5u].z * _1085) + cbMatDynParam._m0[5u].w;
        float _4209 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0))) - _1092)) + _1092) < ((_913 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _924 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _925 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _943 = fma(_825, cbSceneParam._m0[5u].z, fma(_824, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _823));
    float _946 = fma(_825, cbSceneParam._m0[6u].z, fma(_824, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _823));
    float _949 = fma(_825, cbSceneParam._m0[7u].z, fma(_824, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _823));
    uint _962 = _254 + 9u;
    uint _963 = _962 + uint(cbMatDynParam._m0[0u].w);
    float _969 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0)))) * cbInstanceData._m0[_963].x;
    float _970 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0)))) * cbInstanceData._m0[_963].y;
    float _971 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0)))) * cbInstanceData._m0[_963].z;
    float _4220 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
    float _972 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
    float _4231 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
    float _973 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
    float _4242 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
    float _974 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
    float _975 = 1.0 - _831;
    float _976 = _972 * _975;
    float _977 = _973 * _975;
    float _978 = _974 * _975;
    float _983 = (_972 + (-0.039999999105930328369140625)) * _831;
    float _984 = (_973 + (-0.039999999105930328369140625)) * _831;
    float _985 = (_974 + (-0.039999999105930328369140625)) * _831;
    float _986 = _983 + 0.039999999105930328369140625;
    float _988 = _984 + 0.039999999105930328369140625;
    float _989 = _985 + 0.039999999105930328369140625;
    vec4 _998 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _924, cbSceneParam._m0[86u].y * _925));
    float _1002 = ((isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0))) * TEXCOORD_5.w) * _998.x;
    float _1003 = dot(vec3(_823, _824, _825), vec3(_907, _908, _909));
    float _1006 = _1003 * 2.0;
    float _1010 = (_1006 * _823) - _907;
    float _1011 = (_1006 * _824) - _908;
    float _1012 = (_1006 * _825) - _909;
    float _1016 = abs(dot(vec3(_907, _908, _909), vec3(_823, _824, _825)));
    float _4253 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
    float _1018 = sqrt(_826);
    float _1031 = exp2((_1018 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1018 * 3.0));
    float _1037 = (1.0 - _1031) * ((_1018 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1038 = _1031 * _1018;
    float _1066 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1070 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1074 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1402;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1127 = fma(_1074, cbModelParam._m0[26u].z, fma(_1070, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1066));
        float _1131 = fma(_1074, cbModelParam._m0[27u].z, fma(_1070, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1066));
        float _1135 = fma(_1074, cbModelParam._m0[28u].z, fma(_1070, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1066));
        float _1160 = _1066 + _823;
        float _1161 = _1070 + _824;
        float _1162 = _1074 + _825;
        float _1172 = fma(_1162, cbModelParam._m0[26u].z, fma(_1161, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1160)) - _1127;
        float _1173 = fma(_1162, cbModelParam._m0[27u].z, fma(_1161, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1160)) - _1131;
        float _1174 = fma(_1162, cbModelParam._m0[28u].z, fma(_1161, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1160)) - _1135;
        float _1178 = inversesqrt(dot(vec3(_1172, _1173, _1174), vec3(_1172, _1173, _1174)));
        float _1191 = ((_1178 * _1172) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1127 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1192 = ((_1178 * _1173) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1131 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1193 = ((_1178 * _1174) / cbModelParam._m0[34u].z) + ((((((_1135 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1196 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1191, _1192, _1193), 0.0);
        vec4 _1203 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1191, _1192, _1193), 0.0);
        vec4 _1210 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1191, _1192, _1193), 0.0);
        vec4 _1217 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1191, _1192, _1193), 0.0);
        float _1230 = exp2((_1196.w + (-0.5)) * 20.0) * 2.0;
        float _1231 = _1230 * (_1196.x + (-0.5));
        float _1232 = _1230 * (_1196.y + (-0.5));
        float _1233 = _1230 * (_1196.z + (-0.5));
        float _1240 = exp2((_1203.w + (-0.5)) * 20.0) * 2.0;
        float _1241 = _1240 * (_1203.x + (-0.5));
        float _1242 = _1240 * (_1203.y + (-0.5));
        float _1243 = _1240 * (_1203.z + (-0.5));
        float _1250 = exp2((_1210.w + (-0.5)) * 20.0) * 2.0;
        float _1251 = _1250 * (_1210.x + (-0.5));
        float _1252 = _1250 * (_1210.y + (-0.5));
        float _1253 = _1250 * (_1210.z + (-0.5));
        float _1260 = exp2((_1217.w + (-0.5)) * 20.0) * 2.0;
        float _1261 = _1260 * (_1217.x + (-0.5));
        float _1262 = _1260 * (_1217.y + (-0.5));
        float _1263 = _1260 * (_1217.z + (-0.5));
        float _1264 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1265 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1266 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1267 = _1231 * 0.5;
        float _1268 = _1241 * 0.5;
        float _1269 = _1251 * 0.5;
        float _1270 = dot(vec3(_1267, _1268, _1269), vec3(_1267, _1268, _1269));
        float _1275 = (_1270 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1270);
        float _1284 = (dot(vec3(_823, _824, _825), vec3(_1275 * _1267, _1275 * _1268, _1275 * _1269)) + 1.0) * 0.5;
        float _4279 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1294 = sqrt(((_1268 * _1268) + (_1267 * _1267)) + (_1269 * _1269)) / (_1264 + 9.9999997473787516355514526367188e-06);
        float _4290 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1295 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
        float _1296 = _1295 * 2.0;
        float _1300 = (1.0 - _1295) / (_1295 + 1.0);
        float _4301 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1301 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
        float _1310 = ((((1.0 - _1301) * (_1296 + 2.0)) * exp2(log2(isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0))) * (_1296 + 1.0))) + _1301) * _1264;
        float _1311 = _1232 * 0.5;
        float _1312 = _1242 * 0.5;
        float _1313 = _1252 * 0.5;
        float _1314 = dot(vec3(_1311, _1312, _1313), vec3(_1311, _1312, _1313));
        float _1319 = (_1314 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1314);
        float _1327 = (dot(vec3(_823, _824, _825), vec3(_1319 * _1311, _1319 * _1312, _1319 * _1313)) + 1.0) * 0.5;
        float _4312 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1336 = sqrt(((_1312 * _1312) + (_1311 * _1311)) + (_1313 * _1313)) / (_1265 + 9.9999997473787516355514526367188e-06);
        float _4323 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1337 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
        float _1338 = _1337 * 2.0;
        float _1342 = (1.0 - _1337) / (_1337 + 1.0);
        float _4334 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1343 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
        float _1352 = ((((1.0 - _1343) * (_1338 + 2.0)) * exp2(log2(isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0))) * (_1338 + 1.0))) + _1343) * _1265;
        float _1353 = _1233 * 0.5;
        float _1354 = _1243 * 0.5;
        float _1355 = _1253 * 0.5;
        float _1356 = dot(vec3(_1353, _1354, _1355), vec3(_1353, _1354, _1355));
        float _1361 = (_1356 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1356);
        float _1369 = (dot(vec3(_823, _824, _825), vec3(_1361 * _1353, _1361 * _1354, _1361 * _1355)) + 1.0) * 0.5;
        float _4345 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1378 = sqrt(((_1354 * _1354) + (_1353 * _1353)) + (_1355 * _1355)) / (_1266 + 9.9999997473787516355514526367188e-06);
        float _4356 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1379 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
        float _1380 = _1379 * 2.0;
        float _1384 = (1.0 - _1379) / (_1379 + 1.0);
        float _4367 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1385 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
        float _1394 = ((((1.0 - _1385) * (_1380 + 2.0)) * exp2(log2(isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0))) * (_1380 + 1.0))) + _1385) * _1266;
        _1402 = _1233;
        _1404 = _1232;
        _1405 = _1231;
        _1406 = _1243;
        _1407 = _1242;
        _1408 = _1241;
        _1409 = _1253;
        _1410 = _1252;
        _1411 = _1251;
        _1412 = _1266;
        _1413 = _1265;
        _1414 = _1264;
        _1415 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0)));
        _1416 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0)));
        _1417 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0)));
    }
    else
    {
        _1402 = _1403;
        _1404 = _1403;
        _1405 = _1403;
        _1406 = _1403;
        _1407 = _1403;
        _1408 = _1403;
        _1409 = _1403;
        _1410 = _1403;
        _1411 = _1403;
        _1412 = _1403;
        _1413 = _1403;
        _1414 = _1403;
        _1415 = 0.0;
        _1416 = 0.0;
        _1417 = 0.0;
    }
    float _1710;
    float _1711;
    float _1712;
    float _1713;
    float _1714;
    float _1715;
    float _1716;
    float _1717;
    float _1718;
    float _1719;
    float _1720;
    float _1721;
    float _1722;
    float _1723;
    float _1724;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1441 = fma(_1074, cbModelParam._m0[30u].z, fma(_1070, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1066));
        float _1445 = fma(_1074, cbModelParam._m0[31u].z, fma(_1070, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1066));
        float _1449 = fma(_1074, cbModelParam._m0[32u].z, fma(_1070, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1066));
        float _1472 = _1066 + _823;
        float _1473 = _1070 + _824;
        float _1474 = _1074 + _825;
        float _1484 = fma(_1474, cbModelParam._m0[30u].z, fma(_1473, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1472)) - _1441;
        float _1485 = fma(_1474, cbModelParam._m0[31u].z, fma(_1473, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1472)) - _1445;
        float _1486 = fma(_1474, cbModelParam._m0[32u].z, fma(_1473, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1472)) - _1449;
        float _1490 = inversesqrt(dot(vec3(_1484, _1485, _1486), vec3(_1484, _1485, _1486)));
        float _1503 = ((_1490 * _1484) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1441 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1504 = ((_1490 * _1485) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1445 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1505 = ((_1490 * _1486) / cbModelParam._m0[35u].z) + ((((((_1449 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1507 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1503, _1504, _1505), 0.0);
        vec4 _1514 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1503, _1504, _1505), 0.0);
        vec4 _1521 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1503, _1504, _1505), 0.0);
        vec4 _1528 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1503, _1504, _1505), 0.0);
        float _1540 = exp2((_1507.w + (-0.5)) * 20.0) * 2.0;
        float _1541 = _1540 * (_1507.x + (-0.5));
        float _1542 = _1540 * (_1507.y + (-0.5));
        float _1543 = _1540 * (_1507.z + (-0.5));
        float _1550 = exp2((_1514.w + (-0.5)) * 20.0) * 2.0;
        float _1551 = _1550 * (_1514.x + (-0.5));
        float _1552 = _1550 * (_1514.y + (-0.5));
        float _1553 = _1550 * (_1514.z + (-0.5));
        float _1560 = exp2((_1521.w + (-0.5)) * 20.0) * 2.0;
        float _1561 = _1560 * (_1521.x + (-0.5));
        float _1562 = _1560 * (_1521.y + (-0.5));
        float _1563 = _1560 * (_1521.z + (-0.5));
        float _1570 = exp2((_1528.w + (-0.5)) * 20.0) * 2.0;
        float _1571 = _1570 * (_1528.x + (-0.5));
        float _1572 = _1570 * (_1528.y + (-0.5));
        float _1573 = _1570 * (_1528.z + (-0.5));
        float _1574 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1575 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
        float _1576 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1577 = _1541 * 0.5;
        float _1578 = _1551 * 0.5;
        float _1579 = _1561 * 0.5;
        float _1580 = dot(vec3(_1577, _1578, _1579), vec3(_1577, _1578, _1579));
        float _1585 = (_1580 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1580);
        float _1593 = (dot(vec3(_823, _824, _825), vec3(_1585 * _1577, _1585 * _1578, _1585 * _1579)) + 1.0) * 0.5;
        float _4408 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
        float _1602 = sqrt(((_1578 * _1578) + (_1577 * _1577)) + (_1579 * _1579)) / (_1574 + 9.9999997473787516355514526367188e-06);
        float _4419 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
        float _1603 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
        float _1604 = _1603 * 2.0;
        float _1608 = (1.0 - _1603) / (_1603 + 1.0);
        float _4430 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
        float _1609 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
        float _1618 = ((((1.0 - _1609) * (_1604 + 2.0)) * exp2(log2(isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0))) * (_1604 + 1.0))) + _1609) * _1574;
        float _1619 = _1542 * 0.5;
        float _1620 = _1552 * 0.5;
        float _1621 = _1562 * 0.5;
        float _1622 = dot(vec3(_1619, _1620, _1621), vec3(_1619, _1620, _1621));
        float _1627 = (_1622 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1622);
        float _1635 = (dot(vec3(_823, _824, _825), vec3(_1627 * _1619, _1627 * _1620, _1627 * _1621)) + 1.0) * 0.5;
        float _4441 = isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0));
        float _1644 = sqrt(((_1620 * _1620) + (_1619 * _1619)) + (_1621 * _1621)) / (_1575 + 9.9999997473787516355514526367188e-06);
        float _4452 = isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0));
        float _1645 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
        float _1646 = _1645 * 2.0;
        float _1650 = (1.0 - _1645) / (_1645 + 1.0);
        float _4463 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
        float _1651 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
        float _1660 = ((((1.0 - _1651) * (_1646 + 2.0)) * exp2(log2(isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0))) * (_1646 + 1.0))) + _1651) * _1575;
        float _1661 = _1543 * 0.5;
        float _1662 = _1553 * 0.5;
        float _1663 = _1563 * 0.5;
        float _1664 = dot(vec3(_1661, _1662, _1663), vec3(_1661, _1662, _1663));
        float _1669 = (_1664 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1664);
        float _1677 = (dot(vec3(_823, _824, _825), vec3(_1669 * _1661, _1669 * _1662, _1669 * _1663)) + 1.0) * 0.5;
        float _4474 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
        float _1686 = sqrt(((_1662 * _1662) + (_1661 * _1661)) + (_1663 * _1663)) / (_1576 + 9.9999997473787516355514526367188e-06);
        float _4485 = isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0));
        float _1687 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
        float _1688 = _1687 * 2.0;
        float _1692 = (1.0 - _1687) / (_1687 + 1.0);
        float _4496 = isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0));
        float _1693 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
        float _1702 = ((((1.0 - _1693) * (_1688 + 2.0)) * exp2(log2(isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0))) * (_1688 + 1.0))) + _1693) * _1576;
        _1710 = _1543;
        _1711 = _1542;
        _1712 = _1541;
        _1713 = _1553;
        _1714 = _1552;
        _1715 = _1551;
        _1716 = _1563;
        _1717 = _1562;
        _1718 = _1561;
        _1719 = _1576;
        _1720 = _1575;
        _1721 = _1574;
        _1722 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0)));
        _1723 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0)));
        _1724 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0)));
    }
    else
    {
        _1710 = _1403;
        _1711 = _1403;
        _1712 = _1403;
        _1713 = _1403;
        _1714 = _1403;
        _1715 = _1403;
        _1716 = _1403;
        _1717 = _1403;
        _1718 = _1403;
        _1719 = _1403;
        _1720 = _1403;
        _1721 = _1403;
        _1722 = 0.0;
        _1723 = 0.0;
        _1724 = 0.0;
    }
    float _1734 = (cbModelParam._m0[1u].x * (_1722 - _1415)) + _1415;
    float _1735 = (cbModelParam._m0[1u].x * (_1723 - _1416)) + _1416;
    float _1736 = (cbModelParam._m0[1u].x * (_1724 - _1417)) + _1417;
    float _1757 = fma(_1736, cbSceneParam._m0[89u].z, fma(_1735, cbSceneParam._m0[89u].y, _1734 * cbSceneParam._m0[89u].x));
    float _1760 = fma(_1736, cbSceneParam._m0[90u].z, fma(_1735, cbSceneParam._m0[90u].y, _1734 * cbSceneParam._m0[90u].x));
    float _1763 = fma(_1736, cbSceneParam._m0[91u].z, fma(_1735, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1734));
    float _1778 = _1010 * 0.5;
    float _1779 = _1011 * 0.5;
    float _1780 = _1012 * 0.5;
    float _1781 = dot(vec4(_1778, _1779, _1780, 1.0), vec4(_1712, _1715, _1718, _1721));
    float _1784 = dot(vec4(_1778, _1779, _1780, 1.0), vec4(_1711, _1714, _1717, _1720));
    float _1787 = dot(vec4(_1778, _1779, _1780, 1.0), vec4(_1710, _1713, _1716, _1719));
    float _1821;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1794 = dot(vec4(_1778, _1779, _1780, 1.0), vec4(_1402, _1406, _1409, _1412));
        float _1798 = dot(vec4(_1778, _1779, _1780, 1.0), vec4(_1404, _1407, _1410, _1413));
        float _1802 = dot(vec4(_1778, _1779, _1780, 1.0), vec4(_1405, _1408, _1411, _1414));
        float _1809 = dot(vec4(cbModelParam._m0[39u]), vec4(_1778, _1779, _1780, 1.0));
        _1821 = dot(vec3(isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0)), isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0)), isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1809) ? 0.0 : (isnan(0.0) ? _1809 : max(0.0, _1809))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1821 = 1.0;
    }
    float _1832;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1823 = dot(vec4(cbModelParam._m0[40u]), vec4(_1778, _1779, _1780, 1.0));
        _1832 = dot(vec3(isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0)), isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0)), isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1823) ? 0.0 : (isnan(0.0) ? _1823 : max(0.0, _1823))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1832 = 1.0;
    }
    float _1836 = (_1832 * cbModelParam._m0[1u].x) + (_1821 * (1.0 - cbModelParam._m0[1u].x));
    float _1846 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _826);
    float _1847 = isnan(_1846) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1846 : min(cbModelParam._m0[25u].z, _1846));
    float _1928;
    float _1930;
    float _1932;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1895 = fma(_1074, cbModelParam._m0[13u].z, fma(_1070, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1066)) + cbModelParam._m0[13u].w;
        float _1899 = fma(_1074, cbModelParam._m0[14u].z, fma(_1070, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1066)) + cbModelParam._m0[14u].w;
        float _1903 = fma(_1074, cbModelParam._m0[15u].z, fma(_1070, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1066)) + cbModelParam._m0[15u].w;
        float _1906 = fma(_1012, cbModelParam._m0[13u].z, fma(_1011, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1010));
        float _1909 = fma(_1012, cbModelParam._m0[14u].z, fma(_1011, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1010));
        float _1912 = fma(_1012, cbModelParam._m0[15u].z, fma(_1011, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1010));
        float _1940;
        if (_1906 > 0.0)
        {
            _1940 = abs((1.0 - _1895) / _1906);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1906 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1895 + 1.0) / _1906);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1940 = frontier_phi_19_17_ladder;
        }
        float _2112;
        if (_1909 > 0.0)
        {
            _2112 = abs((1.0 - _1899) / _1909);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1909 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1899 + 1.0) / _1909);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2112 = frontier_phi_28_24_ladder;
        }
        float _2407;
        if (_1912 > 0.0)
        {
            _2407 = abs((1.0 - _1903) / _1912);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1912 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1903 + 1.0) / _1912);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2407 = frontier_phi_40_35_ladder;
        }
        float _2409 = isnan(_2112) ? _1940 : (isnan(_1940) ? _2112 : min(_1940, _2112));
        float _2410 = isnan(_2407) ? _2409 : (isnan(_2409) ? _2407 : min(_2409, _2407));
        float _2414 = (_2410 * _1906) + _1895;
        float _2415 = (_2410 * _1909) + _1899;
        float _2416 = (_2410 * _1912) + _1903;
        float _2417 = _2410 * 9.9999997473787516355514526367188e-05;
        float _2419 = (-1.0) - _2417;
        float _2421 = _2417 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2416 > _2421) || ((_2416 < _2419) || ((_2415 > _2421) || ((_2415 < _2419) || ((_2414 < _2419) || (_2414 > _2421))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2561 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2416, cbModelParam._m0[9u].z, fma(_2415, cbModelParam._m0[9u].y, _2414 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2416, cbModelParam._m0[10u].z, fma(_2415, cbModelParam._m0[10u].y, _2414 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2416, cbModelParam._m0[11u].z, fma(_2415, cbModelParam._m0[11u].y, _2414 * cbModelParam._m0[11u].x))), _1847);
            frontier_phi_18_40_ladder = _2561.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2561.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2561.x * cbModelParam._m0[1u].y;
        }
        _1928 = frontier_phi_18_40_ladder_2;
        _1930 = frontier_phi_18_40_ladder_1;
        _1932 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1916 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1010, _1011, _1012), _1847);
        _1928 = _1916.x * cbModelParam._m0[1u].y;
        _1930 = _1916.y * cbModelParam._m0[1u].y;
        _1932 = _1916.z * cbModelParam._m0[1u].y;
    }
    float _1936 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _826);
    float _1937 = isnan(_1936) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1936 : min(cbModelParam._m0[25u].w, _1936));
    float _2027;
    float _2029;
    float _2031;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1991 = fma(_1074, cbModelParam._m0[21u].z, fma(_1070, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1066)) + cbModelParam._m0[21u].w;
        float _1995 = fma(_1074, cbModelParam._m0[22u].z, fma(_1070, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1066)) + cbModelParam._m0[22u].w;
        float _1999 = fma(_1074, cbModelParam._m0[23u].z, fma(_1070, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1066)) + cbModelParam._m0[23u].w;
        float _2002 = fma(_1012, cbModelParam._m0[21u].z, fma(_1011, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1010));
        float _2005 = fma(_1012, cbModelParam._m0[22u].z, fma(_1011, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1010));
        float _2008 = fma(_1012, cbModelParam._m0[23u].z, fma(_1011, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1010));
        float _2117;
        if (_2002 > 0.0)
        {
            _2117 = abs((1.0 - _1991) / _2002);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_2002 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1991 + 1.0) / _2002);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2117 = frontier_phi_30_26_ladder;
        }
        float _2434;
        if (_2005 > 0.0)
        {
            _2434 = abs((1.0 - _1995) / _2005);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_2005 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1995 + 1.0) / _2005);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2434 = frontier_phi_42_37_ladder;
        }
        float _2772;
        if (_2008 > 0.0)
        {
            _2772 = abs((1.0 - _1999) / _2008);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_2008 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1999 + 1.0) / _2008);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2772 = frontier_phi_52_49_ladder;
        }
        float _2774 = isnan(_2434) ? _2117 : (isnan(_2117) ? _2434 : min(_2117, _2434));
        float _2775 = isnan(_2772) ? _2774 : (isnan(_2774) ? _2772 : min(_2774, _2772));
        float _2779 = (_2775 * _2002) + _1991;
        float _2780 = (_2775 * _2005) + _1995;
        float _2781 = (_2775 * _2008) + _1999;
        float _2782 = _2775 * 9.9999997473787516355514526367188e-05;
        float _2783 = (-1.0) - _2782;
        float _2785 = _2782 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2781 > _2785) || ((_2781 < _2783) || ((_2780 > _2785) || ((_2780 < _2783) || ((_2779 < _2783) || (_2779 > _2785))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2903 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2781, cbModelParam._m0[17u].z, fma(_2780, cbModelParam._m0[17u].y, _2779 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2781, cbModelParam._m0[18u].z, fma(_2780, cbModelParam._m0[18u].y, _2779 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2781, cbModelParam._m0[19u].z, fma(_2780, cbModelParam._m0[19u].y, _2779 * cbModelParam._m0[19u].x))), _1937);
            frontier_phi_27_52_ladder = _2903.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2903.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2903.x * cbModelParam._m0[1u].z;
        }
        _2027 = frontier_phi_27_52_ladder_2;
        _2029 = frontier_phi_27_52_ladder_1;
        _2031 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _2011 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1010, _1011, _1012), _1937);
        _2027 = _2011.x * cbModelParam._m0[1u].z;
        _2029 = _2011.y * cbModelParam._m0[1u].z;
        _2031 = _2011.z * cbModelParam._m0[1u].z;
    }
    float _2044 = (((_1037 * _986) + _1038) * _1002) * ((cbModelParam._m0[1u].w * (_2027 - _1928)) + _1928);
    float _2046 = (((_1037 * _988) + _1038) * _1002) * ((cbModelParam._m0[1u].w * (_2029 - _1930)) + _1930);
    float _2048 = (((_1037 * _989) + _1038) * _1002) * ((cbModelParam._m0[1u].w * (_2031 - _1932)) + _1932);
    float _2051 = fma(_2048, cbSceneParam._m0[89u].z, fma(_2046, cbSceneParam._m0[89u].y, _2044 * cbSceneParam._m0[89u].x));
    float _2054 = fma(_2048, cbSceneParam._m0[90u].z, fma(_2046, cbSceneParam._m0[90u].y, _2044 * cbSceneParam._m0[90u].x));
    float _2057 = fma(_2048, cbSceneParam._m0[91u].z, fma(_2046, cbSceneParam._m0[91u].y, _2044 * cbSceneParam._m0[91u].x));
    float _2091 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2095 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2099 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2103 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2104 = _2091 / _2103;
    float _2105 = _2095 / _2103;
    float _2106 = _2099 / _2103;
    float _2253;
    float _2254;
    float _2255;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2133 = ((uint(_2106 > cbSceneParam._m0[59u].y) + uint(_2106 > cbSceneParam._m0[59u].x)) + uint(_2106 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2134 = _2133 + 43u;
        uint _2142 = _2133 + 44u;
        uint _2150 = _2133 + 45u;
        uint _2158 = _2133 + 46u;
        float _2169 = fma(_2103, cbSceneParam._m0[_2134].w, fma(_2099, cbSceneParam._m0[_2134].z, fma(_2095, cbSceneParam._m0[_2134].y, _2091 * cbSceneParam._m0[_2134].x)));
        float _2173 = fma(_2103, cbSceneParam._m0[_2142].w, fma(_2099, cbSceneParam._m0[_2142].z, fma(_2095, cbSceneParam._m0[_2142].y, _2091 * cbSceneParam._m0[_2142].x)));
        float _2181 = fma(_2103, cbSceneParam._m0[_2158].w, fma(_2099, cbSceneParam._m0[_2158].z, fma(_2095, cbSceneParam._m0[_2158].y, _2091 * cbSceneParam._m0[_2158].x)));
        float _2186 = cbSceneParam._m0[33u].z * _2181;
        float _2188 = cbSceneParam._m0[33u].w * _2181;
        float _2191 = fma(_2103, cbSceneParam._m0[_2150].w, fma(_2099, cbSceneParam._m0[_2150].z, fma(_2095, cbSceneParam._m0[_2150].y, _2091 * cbSceneParam._m0[_2150].x))) / _2181;
        float _2239 = (cbSceneParam._m0[33u].x - sqrt(((_2105 * _2105) + (_2104 * _2104)) + (_2106 * _2106))) * cbSceneParam._m0[33u].y;
        float _4622 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
        float _2246 = (isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2186 + _2169) / _2181, (_2188 + _2173) / _2181), _2191), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2188 + _2169) / _2181, (_2173 - _2186) / _2181), _2191), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2169 - _2186) / _2181, (_2173 - _2188) / _2181), _2191), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2169 - _2188) / _2181, (_2186 + _2173) / _2181), _2191), 0.0)).x), vec4(0.25)));
        _2253 = 1.0 - (_2246 * cbSceneParam._m0[34u].x);
        _2254 = 1.0 - (_2246 * cbSceneParam._m0[34u].y);
        _2255 = 1.0 - (_2246 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2253 = 1.0;
        _2254 = 1.0;
        _2255 = 1.0;
    }
    float _2319;
    float _2321;
    float _2323;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2307 = fma(_2103, cbSceneParam._m0[63u].w, fma(_2099, cbSceneParam._m0[63u].z, fma(_2095, cbSceneParam._m0[63u].y, _2091 * cbSceneParam._m0[63u].x)));
        float _2308 = fma(_2103, cbSceneParam._m0[60u].w, fma(_2099, cbSceneParam._m0[60u].z, fma(_2095, cbSceneParam._m0[60u].y, _2091 * cbSceneParam._m0[60u].x))) / _2307;
        float _2309 = fma(_2103, cbSceneParam._m0[61u].w, fma(_2099, cbSceneParam._m0[61u].z, fma(_2095, cbSceneParam._m0[61u].y, _2091 * cbSceneParam._m0[61u].x))) / _2307;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2308 >= cbSceneParam._m0[64u].x) && (_2309 >= cbSceneParam._m0[64u].y)) && (_2308 <= cbSceneParam._m0[64u].z)) && (_2309 <= cbSceneParam._m0[64u].w))
        {
            float _2447 = fma(_2103, cbSceneParam._m0[62u].w, fma(_2099, cbSceneParam._m0[62u].z, fma(_2095, cbSceneParam._m0[62u].y, _2091 * cbSceneParam._m0[62u].x))) / _2307;
            float _2451 = isnan(cbSceneParam._m0[41u].w) ? _2447 : (isnan(_2447) ? cbSceneParam._m0[41u].w : max(_2447, cbSceneParam._m0[41u].w));
            float _2494 = (cbSceneParam._m0[33u].x - sqrt(((_2105 * _2105) + (_2104 * _2104)) + (_2106 * _2106))) * cbSceneParam._m0[33u].y;
            float _4638 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
            float _2501 = (isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2308, cbSceneParam._m0[33u].w + _2309), _2451), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2308, _2309 - cbSceneParam._m0[33u].z), _2451), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2308 - cbSceneParam._m0[33u].z, _2309 - cbSceneParam._m0[33u].w), _2451), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2308 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2309), _2451), 0.0)).x), vec4(0.25)));
            float _2505 = 1.0 - (_2501 * cbSceneParam._m0[34u].x);
            float _2506 = 1.0 - (_2501 * cbSceneParam._m0[34u].y);
            float _2507 = 1.0 - (_2501 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2507) ? _2255 : (isnan(_2255) ? _2507 : min(_2255, _2507));
            frontier_phi_39_38_ladder_1 = isnan(_2506) ? _2254 : (isnan(_2254) ? _2506 : min(_2254, _2506));
            frontier_phi_39_38_ladder_2 = isnan(_2505) ? _2253 : (isnan(_2253) ? _2505 : min(_2253, _2505));
        }
        else
        {
            frontier_phi_39_38_ladder = _2255;
            frontier_phi_39_38_ladder_1 = _2254;
            frontier_phi_39_38_ladder_2 = _2253;
        }
        _2319 = frontier_phi_39_38_ladder_2;
        _2321 = frontier_phi_39_38_ladder_1;
        _2323 = frontier_phi_39_38_ladder;
    }
    else
    {
        _2319 = _2253;
        _2321 = _2254;
        _2323 = _2255;
    }
    uvec4 _2328 = floatBitsToUint(cbInstanceData._m0[_254 + 5u]);
    uint _2330 = _2328.x * 14u;
    uint _2331 = _2330 + 13u;
    float _2338 = _1002 + (-1.0);
    float _2343 = (cbLight._m0[_2331].x * _2338) + 1.0;
    float _2344 = (cbLight._m0[_2331].y * _2338) + 1.0;
    float _2345 = (cbLight._m0[_2331].z * _2338) + 1.0;
    float _2346 = (cbLight._m0[_2331].w * _2338) + 1.0;
    uint _2347 = _2330 + 5u;
    float _2353 = isnan(1.0) ? _2344 : (isnan(_2344) ? 1.0 : min(_2344, 1.0));
    uint _2357 = _2330 + 4u;
    float _2366 = isnan(1.0) ? _2343 : (isnan(_2343) ? 1.0 : min(_2343, 1.0));
    uint _2370 = _2330 | 1u;
    float _2381 = dot(vec3(cbLight._m0[_2330].xyz), vec3(_823, _824, _825));
    float _2384 = dot(vec3(cbLight._m0[_2370].xyz), vec3(_823, _824, _825));
    float _4674 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
    float _4685 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
    float _2389 = (isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0))) * 0.3183098733425140380859375;
    float _2391 = (isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0))) * 0.3183098733425140380859375;
    float _2398 = ((cbLight._m0[_2347].x * _2353) * _2391) + (((cbLight._m0[_2357].x * _2319) * _2366) * _2389);
    float _2399 = ((_2353 * cbLight._m0[_2347].y) * _2391) + (((cbLight._m0[_2357].y * _2321) * _2366) * _2389);
    float _2400 = ((_2353 * cbLight._m0[_2347].z) * _2391) + (((cbLight._m0[_2357].z * _2323) * _2366) * _2389);
    uvec4 _2404 = floatBitsToUint(cbLight._m0[_2330 + 12u]);
    bool _2406 = _2404.x == 0u;
    float _2508;
    float _2510;
    float _2512;
    if (_2406)
    {
        _2508 = _2398;
        _2510 = _2399;
        _2512 = _2400;
    }
    else
    {
        uint _2516 = _2330 + 6u;
        float _2532 = (dot(vec3(cbLight._m0[_2330 + 2u].xyz), vec3(_823, _824, _825)) * 0.5) + 0.5;
        float _2533 = _2532 * _2532;
        float _4696 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
        float _2534 = isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0));
        float _2535 = isnan(1.0) ? _2345 : (isnan(_2345) ? 1.0 : min(_2345, 1.0));
        _2508 = (((cbLight._m0[_2516].x * 0.3183098733425140380859375) * _2534) * _2535) + _2398;
        _2510 = (((cbLight._m0[_2516].y * 0.3183098733425140380859375) * _2534) * _2535) + _2399;
        _2512 = (((cbLight._m0[_2516].z * 0.3183098733425140380859375) * _2534) * _2535) + _2400;
    }
    bool _2515 = _2404.y == 0u;
    float _2570;
    float _2572;
    float _2574;
    if (_2515)
    {
        _2570 = _2508;
        _2572 = _2510;
        _2574 = _2512;
    }
    else
    {
        uint _2743 = _2330 + 7u;
        float _2759 = (dot(vec3(cbLight._m0[_2330 + 3u].xyz), vec3(_823, _824, _825)) * 0.5) + 0.5;
        float _2760 = _2759 * _2759;
        float _4712 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0));
        float _2761 = isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0));
        float _2762 = isnan(1.0) ? _2346 : (isnan(_2346) ? 1.0 : min(_2346, 1.0));
        _2570 = (((cbLight._m0[_2743].x * 0.3183098733425140380859375) * _2761) * _2762) + _2508;
        _2572 = (((cbLight._m0[_2743].y * 0.3183098733425140380859375) * _2761) * _2762) + _2510;
        _2574 = (((cbLight._m0[_2743].z * 0.3183098733425140380859375) * _2761) * _2762) + _2512;
    }
    uint _2577 = _2330 + 8u;
    float _2590 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2330].w)) * _826) * 0.949999988079071044921875);
    float _2591 = _2590 * _2590;
    float _2592 = cbLight._m0[_2330].x + _907;
    float _2593 = cbLight._m0[_2330].y + _908;
    float _2594 = cbLight._m0[_2330].z + _909;
    float _2598 = inversesqrt(dot(vec3(_2592, _2593, _2594), vec3(_2592, _2593, _2594)));
    float _2599 = _2598 * _2592;
    float _2600 = _2598 * _2593;
    float _2601 = _2598 * _2594;
    float _2602 = dot(vec3(_823, _824, _825), vec3(cbLight._m0[_2330].xyz));
    float _4728 = isnan(0.0) ? _2602 : (isnan(_2602) ? 0.0 : max(_2602, 0.0));
    float _2605 = isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0));
    float _4739 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
    float _2606 = isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0));
    float _2607 = dot(vec3(_823, _824, _825), vec3(_2599, _2600, _2601));
    float _4750 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0));
    float _2610 = isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0));
    float _2611 = dot(vec3(cbLight._m0[_2330].xyz), vec3(_2599, _2600, _2601));
    float _4761 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0));
    float _2615 = _2591 * _2591;
    float _2619 = ((_2610 * _2610) * (_2615 + (-1.0))) + 1.0;
    float _2627 = exp2(log2(1.0 - (isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0)))) * 5.0);
    float _2628 = 0.959999978542327880859375 - _983;
    float _2630 = 0.959999978542327880859375 - _984;
    float _2631 = 0.959999978542327880859375 - _985;
    float _2638 = 1.0 - _2591;
    float _2649 = (0.5 / (((_2606 * ((_2605 * _2638) + _2591)) + 9.9999999392252902907785028219223e-09) + (((_2606 * _2638) + _2591) * _2605))) * _2605;
    float _4772 = isnan(0.0) ? _2649 : (isnan(_2649) ? 0.0 : max(_2649, 0.0));
    float _2651 = (isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0))) * (_2615 / ((_2619 * _2619) * 3.141590118408203125));
    uint _2665 = _2330 + 9u;
    float _2676 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2370].w)) * _826) * 0.949999988079071044921875);
    float _2677 = _2676 * _2676;
    float _2678 = cbLight._m0[_2370].x + _907;
    float _2679 = cbLight._m0[_2370].y + _908;
    float _2680 = cbLight._m0[_2370].z + _909;
    float _2684 = inversesqrt(dot(vec3(_2678, _2679, _2680), vec3(_2678, _2679, _2680)));
    float _2685 = _2684 * _2678;
    float _2686 = _2684 * _2679;
    float _2687 = _2684 * _2680;
    float _2688 = dot(vec3(_823, _824, _825), vec3(cbLight._m0[_2370].xyz));
    float _4783 = isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : max(_2688, 0.0));
    float _2691 = isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0));
    float _2692 = dot(vec3(_823, _824, _825), vec3(_2685, _2686, _2687));
    float _4794 = isnan(0.0) ? _2692 : (isnan(_2692) ? 0.0 : max(_2692, 0.0));
    float _2695 = isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0));
    float _2696 = dot(vec3(cbLight._m0[_2370].xyz), vec3(_2685, _2686, _2687));
    float _4805 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0));
    float _2700 = _2677 * _2677;
    float _2704 = ((_2695 * _2695) * (_2700 + (-1.0))) + 1.0;
    float _2711 = exp2(log2(1.0 - (isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0)))) * 5.0);
    float _2718 = 1.0 - _2677;
    float _2728 = (0.5 / (((_2606 * ((_2691 * _2718) + _2677)) + 9.9999999392252902907785028219223e-09) + (((_2606 * _2718) + _2677) * _2691))) * _2691;
    float _4816 = isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : max(_2728, 0.0));
    float _2730 = (isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0))) * (_2700 / ((_2704 * _2704) * 3.141590118408203125));
    float _2740 = (((((_2711 * _2628) + _986) * cbLight._m0[_2665].x) * _2730) * _2353) + ((((cbLight._m0[_2577].x * _2319) * ((_2627 * _2628) + _986)) * _2651) * _2366);
    float _2741 = (((((_2711 * _2630) + _988) * cbLight._m0[_2665].y) * _2730) * _2353) + ((((cbLight._m0[_2577].y * _2321) * ((_2627 * _2630) + _988)) * _2651) * _2366);
    float _2742 = (((((_2711 * _2631) + _989) * cbLight._m0[_2665].z) * _2730) * _2353) + ((((cbLight._m0[_2577].z * _2323) * ((_2627 * _2631) + _989)) * _2651) * _2366);
    float _2798;
    float _2800;
    float _2802;
    if (_2406)
    {
        _2798 = _2740;
        _2800 = _2741;
        _2802 = _2742;
    }
    else
    {
        uint _2804 = _2330 + 2u;
        uint _2808 = _2330 + 10u;
        float _2822 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2804].w)) * _826) * 0.949999988079071044921875);
        float _2823 = _2822 * _2822;
        float _2824 = cbLight._m0[_2804].x + _907;
        float _2825 = cbLight._m0[_2804].y + _908;
        float _2826 = cbLight._m0[_2804].z + _909;
        float _2830 = inversesqrt(dot(vec3(_2824, _2825, _2826), vec3(_2824, _2825, _2826)));
        float _2831 = _2830 * _2824;
        float _2832 = _2830 * _2825;
        float _2833 = _2830 * _2826;
        float _2834 = dot(vec3(_823, _824, _825), vec3(cbLight._m0[_2804].xyz));
        float _4827 = isnan(0.0) ? _2834 : (isnan(_2834) ? 0.0 : max(_2834, 0.0));
        float _2837 = isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0));
        float _2838 = dot(vec3(_823, _824, _825), vec3(_2831, _2832, _2833));
        float _4838 = isnan(0.0) ? _2838 : (isnan(_2838) ? 0.0 : max(_2838, 0.0));
        float _2841 = isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0));
        float _2842 = dot(vec3(cbLight._m0[_2804].xyz), vec3(_2831, _2832, _2833));
        float _4849 = isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : max(_2842, 0.0));
        float _2846 = _2823 * _2823;
        float _2850 = ((_2841 * _2841) * (_2846 + (-1.0))) + 1.0;
        float _2857 = exp2(log2(1.0 - (isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0)))) * 5.0);
        float _2864 = 1.0 - _2823;
        float _2874 = (0.5 / (((_2606 * ((_2837 * _2864) + _2823)) + 9.9999999392252902907785028219223e-09) + (((_2606 * _2864) + _2823) * _2837))) * _2837;
        float _4860 = isnan(0.0) ? _2874 : (isnan(_2874) ? 0.0 : max(_2874, 0.0));
        float _2876 = (isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0))) * (_2846 / ((_2850 * _2850) * 3.141590118408203125));
        float _2877 = isnan(1.0) ? _2345 : (isnan(_2345) ? 1.0 : min(_2345, 1.0));
        _2798 = (((((_2857 * _2628) + _986) * cbLight._m0[_2808].x) * _2876) * _2877) + _2740;
        _2800 = (((((_2857 * _2630) + _988) * cbLight._m0[_2808].y) * _2876) * _2877) + _2741;
        _2802 = (((((_2857 * _2631) + _989) * cbLight._m0[_2808].z) * _2876) * _2877) + _2742;
    }
    float _2908;
    float _2910;
    float _2912;
    if (_2515)
    {
        _2908 = _2798;
        _2910 = _2800;
        _2912 = _2802;
    }
    else
    {
        uint _2919 = _2330 + 3u;
        uint _2923 = _2330 + 11u;
        float _2937 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2919].w)) * _826) * 0.949999988079071044921875);
        float _2938 = _2937 * _2937;
        float _2939 = cbLight._m0[_2919].x + _907;
        float _2940 = cbLight._m0[_2919].y + _908;
        float _2941 = cbLight._m0[_2919].z + _909;
        float _2945 = inversesqrt(dot(vec3(_2939, _2940, _2941), vec3(_2939, _2940, _2941)));
        float _2946 = _2945 * _2939;
        float _2947 = _2945 * _2940;
        float _2948 = _2945 * _2941;
        float _2949 = dot(vec3(_823, _824, _825), vec3(cbLight._m0[_2919].xyz));
        float _4876 = isnan(0.0) ? _2949 : (isnan(_2949) ? 0.0 : max(_2949, 0.0));
        float _2952 = isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0));
        float _2953 = dot(vec3(_823, _824, _825), vec3(_2946, _2947, _2948));
        float _4887 = isnan(0.0) ? _2953 : (isnan(_2953) ? 0.0 : max(_2953, 0.0));
        float _2956 = isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0));
        float _2957 = dot(vec3(cbLight._m0[_2919].xyz), vec3(_2946, _2947, _2948));
        float _4898 = isnan(0.0) ? _2957 : (isnan(_2957) ? 0.0 : max(_2957, 0.0));
        float _2961 = _2938 * _2938;
        float _2965 = ((_2956 * _2956) * (_2961 + (-1.0))) + 1.0;
        float _2972 = exp2(log2(1.0 - (isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0)))) * 5.0);
        float _2979 = 1.0 - _2938;
        float _2989 = (0.5 / (((_2606 * ((_2952 * _2979) + _2938)) + 9.9999999392252902907785028219223e-09) + (((_2606 * _2979) + _2938) * _2952))) * _2952;
        float _4909 = isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : max(_2989, 0.0));
        float _2991 = (isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0))) * (_2961 / ((_2965 * _2965) * 3.141590118408203125));
        float _2992 = isnan(1.0) ? _2346 : (isnan(_2346) ? 1.0 : min(_2346, 1.0));
        _2908 = (((((_2972 * _2628) + _986) * cbLight._m0[_2923].x) * _2991) * _2992) + _2798;
        _2910 = (((((_2972 * _2630) + _988) * cbLight._m0[_2923].y) * _2991) * _2992) + _2800;
        _2912 = (((((_2972 * _2631) + _989) * cbLight._m0[_2923].z) * _2991) * _2992) + _2802;
    }
    float _3058;
    float _3060;
    float _3062;
    float _3064;
    float _3066;
    float _3068;
    if (_2328.y == 0u)
    {
        uvec4 _3013 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3014 = _3013.x;
        uint _3025 = uint((float(_3013.y) * floor(float(uint(cbSceneParam._m0[85u].y * _925) / _3014))) + floor(float(uint(cbSceneParam._m0[85u].x * _924) / _3014)));
        float _3035 = (log2(_2106 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3036 = isnan(0.0) ? _3035 : (isnan(_3035) ? 0.0 : max(_3035, 0.0));
        uint _3039 = uint(isnan(14.0) ? _3036 : (isnan(_3036) ? 14.0 : min(_3036, 14.0)));
        uvec4 _3044 = texelFetch(g_lightClusterGridBuffer, int(((_3039 << 2u) + (_3025 << 6u)) >> 2u));
        uint _3045 = _3044.x;
        uint _3046 = _3013.z;
        float _3125;
        float _3127;
        float _3129;
        float _3131;
        float _3133;
        float _3135;
        if (((((1u << ((_3046 >> 4u) & 15u)) + 4294967295u) & _3045) == 0u) || ((_3046 & 240u) == 0u))
        {
            _3125 = 0.0;
            _3127 = 0.0;
            _3129 = 0.0;
            _3131 = 0.0;
            _3133 = 0.0;
            _3135 = 0.0;
        }
        else
        {
            float _3126;
            float _3128;
            float _3130;
            float _3132;
            float _3134;
            float _3136;
            float _3278 = 0.0;
            float _3279 = 0.0;
            float _3280 = 0.0;
            float _3281 = 0.0;
            float _3282 = 0.0;
            float _3283 = 0.0;
            uint _3284 = 0u;
            uint _3293;
            bool _3294;
            for (;;)
            {
                _3293 = texelFetch(g_lightClassification, int((((_3039 << 5u) + (_3025 << 9u)) + (_3284 << 2u)) >> 2u)).x;
                _3294 = _3293 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3294)
                {
                    frontier_phi_73_pred = _3283;
                    frontier_phi_73_pred_1 = _3282;
                    frontier_phi_73_pred_2 = _3281;
                    frontier_phi_73_pred_3 = _3280;
                    frontier_phi_73_pred_4 = _3279;
                    frontier_phi_73_pred_5 = _3278;
                }
                else
                {
                    float _3423;
                    float _3424;
                    float _3425;
                    float _3426;
                    float _3427;
                    float _3428;
                    uint _3429;
                    _3423 = _3278;
                    _3424 = _3279;
                    _3425 = _3280;
                    _3426 = _3281;
                    _3427 = _3282;
                    _3428 = _3283;
                    _3429 = _3293;
                    float _3350;
                    float _3351;
                    float _3352;
                    float _3353;
                    float _3354;
                    float _3355;
                    for (;;)
                    {
                        uint _3433 = uint(findLSB(_3429)) + (_3284 << 5u);
                        uint _3430 = (_3429 + 4294967295u) & _3429;
                        uint _3435 = _3433 * 48u;
                        vec4 _3449 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3435)).x, texelFetch(g_PointLightRenderingBuffer, int(_3435 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3435 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3435 + 3u)).x));
                        uint _3455 = (_3433 * 48u) + 4u;
                        vec4 _3468 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3455)).x, texelFetch(g_PointLightRenderingBuffer, int(_3455 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3455 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3455 + 3u)).x));
                        uint _3474 = (_3433 * 48u) + 8u;
                        vec3 _3485 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3474)).x, texelFetch(g_PointLightRenderingBuffer, int(_3474 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3474 + 2u)).x));
                        float _3489 = _3449.x - _2104;
                        float _3490 = _3449.y - _2105;
                        float _3491 = _3449.z - _2106;
                        float _3492 = dot(vec3(_3489, _3490, _3491), vec3(_3489, _3490, _3491));
                        float _3495 = inversesqrt(_3492);
                        float _3496 = _3495 * _3489;
                        float _3497 = _3495 * _3490;
                        float _3498 = _3495 * _3491;
                        float _3499 = dot(vec3(_943, _946, _949), vec3(_3496, _3497, _3498));
                        float _3504 = 1.0 - (_3492 * _3449.w);
                        float _4935 = isnan(0.0) ? _3504 : (isnan(_3504) ? 0.0 : max(_3504, 0.0));
                        float _3505 = isnan(1.0) ? _4935 : (isnan(_4935) ? 1.0 : min(_4935, 1.0));
                        float _3506 = sqrt(_3492) * _3468.w;
                        float _3509 = 1.39999997615814208984375 / (_3506 + 1.39999997615814208984375);
                        float _3510 = _3509 * _3509;
                        float _3513 = ((1.0 - _3510) * _3499) + _3510;
                        float _3516 = _3506 * _3506;
                        float _3520 = ((isnan(0.0) ? _3513 : (isnan(_3513) ? 0.0 : max(_3513, 0.0))) * _3505) / ((_3516 * 0.699999988079071044921875) + 1.0);
                        float _3524 = (-0.0) - _2104;
                        float _3525 = (-0.0) - _2105;
                        float _3526 = (-0.0) - _2106;
                        float _3530 = inversesqrt(dot(vec3(_3524, _3525, _3526), vec3(_3524, _3525, _3526)));
                        float _3531 = _3530 * _3524;
                        float _3532 = _3530 * _3525;
                        float _3533 = _3530 * _3526;
                        float _3540 = exp2(log2(1.0 / ((_3516 * 3.5) + 5.0)) * 0.25);
                        float _3541 = 1.0 - _1018;
                        float _3548 = sqrt(1.0 - ((1.0 - (_3541 * _3541)) * (1.0 - (_3540 * _3540))));
                        float _3549 = _3548 * _3548;
                        float _3550 = _3549 * _3549;
                        float _3551 = _3531 + _3496;
                        float _3552 = _3532 + _3497;
                        float _3553 = _3533 + _3498;
                        float _3557 = inversesqrt(dot(vec3(_3551, _3552, _3553), vec3(_3551, _3552, _3553)));
                        float _3561 = dot(vec3(_943, _946, _949), vec3(_3531, _3532, _3533));
                        float _4951 = isnan(0.0) ? _3561 : (isnan(_3561) ? 0.0 : max(_3561, 0.0));
                        float _3564 = isnan(1.0) ? _4951 : (isnan(_4951) ? 1.0 : min(_4951, 1.0));
                        float _3565 = dot(vec3(_943, _946, _949), vec3(_3557 * _3551, _3557 * _3552, _3557 * _3553));
                        float _4962 = isnan(0.0) ? _3565 : (isnan(_3565) ? 0.0 : max(_3565, 0.0));
                        float _3568 = isnan(1.0) ? _4962 : (isnan(_4962) ? 1.0 : min(_4962, 1.0));
                        float _3572 = ((_3568 * _3568) * (_3550 + (-1.0))) + 1.0;
                        float _3573 = _3509 * _3549;
                        float _3574 = _3573 * _3573;
                        float _3577 = ((1.0 - _3574) * _3499) + _3574;
                        float _4973 = isnan(0.0) ? _3577 : (isnan(_3577) ? 0.0 : max(_3577, 0.0));
                        float _3578 = isnan(1.0) ? _4973 : (isnan(_4973) ? 1.0 : min(_4973, 1.0));
                        float _3579 = 1.0 - _3549;
                        float _3589 = (0.5 / (((_3578 * ((_3564 * _3579) + _3549)) + 9.9999999392252902907785028219223e-09) + (((_3578 * _3579) + _3549) * _3564))) * _3578;
                        float _4984 = isnan(0.0) ? _3589 : (isnan(_3589) ? 0.0 : max(_3589, 0.0));
                        float _3600 = (((_3550 * 3.1415927410125732421875) * (isnan(1.0) ? _4984 : (isnan(_4984) ? 1.0 : min(_4984, 1.0)))) / ((_3572 * _3572) * ((_3516 * 2.1991131305694580078125) + 3.141590118408203125))) * _3505;
                        _3353 = (_3520 * _3468.x) + _3426;
                        _3354 = (_3520 * _3468.y) + _3427;
                        _3355 = (_3520 * _3468.z) + _3428;
                        _3350 = (_3600 * _3485.x) + _3423;
                        _3351 = (_3600 * _3485.y) + _3424;
                        _3352 = (_3600 * _3485.z) + _3425;
                        if (_3430 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3423 = _3350;
                            _3424 = _3351;
                            _3425 = _3352;
                            _3426 = _3353;
                            _3427 = _3354;
                            _3428 = _3355;
                            _3429 = _3430;
                        }
                    }
                    frontier_phi_73_pred = _3355;
                    frontier_phi_73_pred_1 = _3354;
                    frontier_phi_73_pred_2 = _3353;
                    frontier_phi_73_pred_3 = _3352;
                    frontier_phi_73_pred_4 = _3351;
                    frontier_phi_73_pred_5 = _3350;
                }
                _3136 = frontier_phi_73_pred;
                _3134 = frontier_phi_73_pred_1;
                _3132 = frontier_phi_73_pred_2;
                _3130 = frontier_phi_73_pred_3;
                _3128 = frontier_phi_73_pred_4;
                _3126 = frontier_phi_73_pred_5;
                uint _3285 = _3284 + 1u;
                if (_3285 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3278 = _3126;
                    _3279 = _3128;
                    _3280 = _3130;
                    _3281 = _3132;
                    _3282 = _3134;
                    _3283 = _3136;
                    _3284 = _3285;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3125 = _3126;
            _3127 = _3128;
            _3129 = _3130;
            _3131 = _3132;
            _3133 = _3134;
            _3135 = _3136;
        }
        uvec4 _3139 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3140 = _3139.z;
        uint _3142 = (_3140 >> 8u) & 15u;
        float _3246;
        float _3248;
        float _3250;
        float _3252;
        float _3254;
        float _3256;
        if (((4294967295u << _3142) & _3045) == 0u)
        {
            _3246 = _3125;
            _3248 = _3127;
            _3250 = _3129;
            _3252 = _3131;
            _3254 = _3133;
            _3256 = _3135;
        }
        else
        {
            float _3271 = inversesqrt(dot(vec3(_2104, _2105, _2106), vec3(_2104, _2105, _2106)));
            float _3272 = _3271 * _2104;
            float _3273 = _3271 * _2105;
            float _3274 = _3271 * _2106;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_3142 < ((_3140 >> 12u) & 15u))
            {
                float _3247;
                float _3249;
                float _3251;
                float _3253;
                float _3255;
                float _3257;
                float _3406 = _3125;
                float _3407 = _3127;
                float _3408 = _3129;
                float _3409 = _3131;
                float _3410 = _3133;
                float _3411 = _3135;
                uint _3412 = _3142;
                uint _3421;
                bool _3422;
                for (;;)
                {
                    _3421 = texelFetch(g_lightClassification, int((((_3039 << 5u) + (_3025 << 9u)) + (_3412 << 2u)) >> 2u)).x;
                    _3422 = _3421 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3422)
                    {
                        frontier_phi_84_pred = _3411;
                        frontier_phi_84_pred_1 = _3410;
                        frontier_phi_84_pred_2 = _3409;
                        frontier_phi_84_pred_3 = _3408;
                        frontier_phi_84_pred_4 = _3407;
                        frontier_phi_84_pred_5 = _3406;
                    }
                    else
                    {
                        float _3614;
                        float _3615;
                        float _3616;
                        float _3617;
                        float _3618;
                        float _3619;
                        float _3907;
                        float _3908;
                        float _3909;
                        float _3910;
                        float _3911;
                        float _3912;
                        float _3627 = _3406;
                        float _3628 = _3407;
                        float _3629 = _3408;
                        float _3630 = _3409;
                        float _3631 = _3410;
                        float _3632 = _3411;
                        uint _3633 = _3421;
                        uint _3634;
                        vec4 _3659;
                        float _3660;
                        vec4 _3675;
                        vec3 _3687;
                        vec4 _3702;
                        vec4 _3717;
                        float _3763;
                        bool _3764;
                        for (;;)
                        {
                            uint _3644 = ((_3412 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3633));
                            _3634 = (_3633 + 4294967295u) & _3633;
                            uint _3646 = _3644 * 40u;
                            _3659 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3646)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3646 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3646 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3646 + 3u)).x));
                            _3660 = _3659.w;
                            uint _3662 = (_3644 * 40u) + 4u;
                            _3675 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3662)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3662 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3662 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3662 + 3u)).x));
                            uint _3677 = (_3644 * 40u) + 8u;
                            _3687 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3677)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3677 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3677 + 2u)).x));
                            uint _3689 = (_3644 * 40u) + 16u;
                            _3702 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3689)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3689 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3689 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3689 + 3u)).x));
                            uint _3704 = (_3644 * 40u) + 20u;
                            _3717 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3704)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3704 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3704 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3704 + 3u)).x));
                            uint _3719 = (_3644 * 40u) + 24u;
                            vec4 _3732 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3719)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3719 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3719 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3719 + 3u)).x));
                            uint _3738 = (_3644 * 40u) + 28u;
                            vec4 _3751 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3738)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3738 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3738 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3738 + 3u)).x));
                            _3763 = fma(_2106, _3751.z, fma(_2105, _3751.y, _3751.x * _2104)) + _3751.w;
                            _3764 = !((fma(_2106, _3732.z, fma(_2105, _3732.y, _3732.x * _2104)) + _3732.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3764)
                            {
                                float _3791 = _3659.x - _2104;
                                float _3792 = _3659.y - _2105;
                                float _3793 = _3659.z - _2106;
                                float _3794 = dot(vec3(_3791, _3792, _3793), vec3(_3791, _3792, _3793));
                                float _3797 = inversesqrt(_3794);
                                float _3798 = _3797 * _3791;
                                float _3799 = _3797 * _3792;
                                float _3800 = _3797 * _3793;
                                float _3804 = 1.0 - (_3794 / (_3660 * _3660));
                                float _4995 = isnan(0.0) ? _3804 : (isnan(_3804) ? 0.0 : max(_3804, 0.0));
                                float _3805 = isnan(1.0) ? _4995 : (isnan(_4995) ? 1.0 : min(_4995, 1.0));
                                float _3809 = sqrt(_3794) * _3675.w;
                                float _3811 = 1.39999997615814208984375 / (_3809 + 1.39999997615814208984375);
                                float _3812 = _3811 * _3811;
                                float _3815 = ((1.0 - _3812) * dot(vec3(_3798, _3799, _3800), vec3(_943, _946, _949))) + _3812;
                                float _3818 = _3809 * _3809;
                                float _3822 = (fma(_2106, _3702.z, fma(_2105, _3702.y, _3702.x * _2104)) + _3702.w) / _3763;
                                float _3823 = (fma(_2106, _3717.z, fma(_2105, _3717.y, _3717.x * _2104)) + _3717.w) / _3763;
                                float _3827 = 1.0 - dot(vec2(_3822, _3823), vec2(_3822, _3823));
                                float _5011 = isnan(0.0) ? _3827 : (isnan(_3827) ? 0.0 : max(_3827, 0.0));
                                float _3828 = isnan(1.0) ? _5011 : (isnan(_5011) ? 1.0 : min(_5011, 1.0));
                                float _3829 = _3828 * (((isnan(0.0) ? _3815 : (isnan(_3815) ? 0.0 : max(_3815, 0.0))) * _3805) / ((_3818 * 0.699999988079071044921875) + 1.0));
                                float _3841 = exp2(log2(1.0 / ((_3818 * 3.5) + 5.0)) * 0.25);
                                float _3842 = 1.0 - _1018;
                                float _3849 = sqrt(1.0 - ((1.0 - (_3842 * _3842)) * (1.0 - (_3841 * _3841))));
                                float _3850 = _3849 * _3849;
                                float _3851 = _3850 * _3850;
                                float _3852 = _3798 - _3272;
                                float _3853 = _3799 - _3273;
                                float _3854 = _3800 - _3274;
                                float _3858 = inversesqrt(dot(vec3(_3852, _3853, _3854), vec3(_3852, _3853, _3854)));
                                float _3862 = dot(vec3(_943, _946, _949), vec3((-0.0) - _3272, (-0.0) - _3273, (-0.0) - _3274));
                                float _5022 = isnan(0.0) ? _3862 : (isnan(_3862) ? 0.0 : max(_3862, 0.0));
                                float _3865 = isnan(1.0) ? _5022 : (isnan(_5022) ? 1.0 : min(_5022, 1.0));
                                float _3866 = dot(vec3(_943, _946, _949), vec3(_3858 * _3852, _3858 * _3853, _3858 * _3854));
                                float _5033 = isnan(0.0) ? _3866 : (isnan(_3866) ? 0.0 : max(_3866, 0.0));
                                float _3869 = isnan(1.0) ? _5033 : (isnan(_5033) ? 1.0 : min(_5033, 1.0));
                                float _3873 = ((_3869 * _3869) * (_3851 + (-1.0))) + 1.0;
                                float _3874 = _3811 * _3850;
                                float _3875 = _3874 * _3874;
                                float _3881 = ((1.0 - _3875) * dot(vec3(_943, _946, _949), vec3(_3798, _3799, _3800))) + _3875;
                                float _5044 = isnan(0.0) ? _3881 : (isnan(_3881) ? 0.0 : max(_3881, 0.0));
                                float _3882 = isnan(1.0) ? _5044 : (isnan(_5044) ? 1.0 : min(_5044, 1.0));
                                float _3883 = 1.0 - _3850;
                                float _3893 = (0.5 / (((_3882 * ((_3865 * _3883) + _3850)) + 9.9999999392252902907785028219223e-09) + (((_3882 * _3883) + _3850) * _3865))) * _3882;
                                float _5055 = isnan(0.0) ? _3893 : (isnan(_3893) ? 0.0 : max(_3893, 0.0));
                                float _3903 = (_3828 * _3805) * (((_3851 * 3.1415927410125732421875) * (isnan(1.0) ? _5055 : (isnan(_5055) ? 1.0 : min(_5055, 1.0)))) / ((_3873 * _3873) * ((_3818 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3829 * _3675.z;
                                frontier_phi_90_pred_1 = _3829 * _3675.y;
                                frontier_phi_90_pred_2 = _3829 * _3675.x;
                                frontier_phi_90_pred_3 = _3903 * _3687.z;
                                frontier_phi_90_pred_4 = _3903 * _3687.y;
                                frontier_phi_90_pred_5 = _3903 * _3687.x;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3912 = frontier_phi_90_pred;
                            _3911 = frontier_phi_90_pred_1;
                            _3910 = frontier_phi_90_pred_2;
                            _3909 = frontier_phi_90_pred_3;
                            _3908 = frontier_phi_90_pred_4;
                            _3907 = frontier_phi_90_pred_5;
                            _3617 = _3910 + _3630;
                            _3618 = _3911 + _3631;
                            _3619 = _3912 + _3632;
                            _3614 = _3907 + _3627;
                            _3615 = _3908 + _3628;
                            _3616 = _3909 + _3629;
                            if (_3634 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3627 = _3614;
                                _3628 = _3615;
                                _3629 = _3616;
                                _3630 = _3617;
                                _3631 = _3618;
                                _3632 = _3619;
                                _3633 = _3634;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3619;
                        frontier_phi_84_pred_1 = _3618;
                        frontier_phi_84_pred_2 = _3617;
                        frontier_phi_84_pred_3 = _3616;
                        frontier_phi_84_pred_4 = _3615;
                        frontier_phi_84_pred_5 = _3614;
                    }
                    _3257 = frontier_phi_84_pred;
                    _3255 = frontier_phi_84_pred_1;
                    _3253 = frontier_phi_84_pred_2;
                    _3251 = frontier_phi_84_pred_3;
                    _3249 = frontier_phi_84_pred_4;
                    _3247 = frontier_phi_84_pred_5;
                    uint _3413 = _3412 + 1u;
                    if (_3413 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3406 = _3247;
                        _3407 = _3249;
                        _3408 = _3251;
                        _3409 = _3253;
                        _3410 = _3255;
                        _3411 = _3257;
                        _3412 = _3413;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _3253;
                frontier_phi_65_66_ladder_1 = _3257;
                frontier_phi_65_66_ladder_2 = _3255;
                frontier_phi_65_66_ladder_3 = _3251;
                frontier_phi_65_66_ladder_4 = _3249;
                frontier_phi_65_66_ladder_5 = _3247;
            }
            else
            {
                frontier_phi_65_66_ladder = _3131;
                frontier_phi_65_66_ladder_1 = _3135;
                frontier_phi_65_66_ladder_2 = _3133;
                frontier_phi_65_66_ladder_3 = _3129;
                frontier_phi_65_66_ladder_4 = _3127;
                frontier_phi_65_66_ladder_5 = _3125;
            }
            _3246 = frontier_phi_65_66_ladder_5;
            _3248 = frontier_phi_65_66_ladder_4;
            _3250 = frontier_phi_65_66_ladder_3;
            _3252 = frontier_phi_65_66_ladder;
            _3254 = frontier_phi_65_66_ladder_2;
            _3256 = frontier_phi_65_66_ladder_1;
        }
        float _3261 = isnan(1.0) ? _1002 : (isnan(_1002) ? 1.0 : min(_1002, 1.0));
        _3058 = (_3261 * _3252) + _2570;
        _3060 = (_3261 * _3254) + _2572;
        _3062 = (_3261 * _3256) + _2574;
        _3064 = ((_3246 * _986) * _3261) + _2908;
        _3066 = ((_3248 * _988) * _3261) + _2910;
        _3068 = ((_3250 * _989) * _3261) + _2912;
    }
    else
    {
        _3058 = _2570;
        _3060 = _2572;
        _3062 = _2574;
        _3064 = _2908;
        _3066 = _2910;
        _3068 = _2912;
    }
    float _5071 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
    float _5082 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
    float _5093 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
    float _3085 = ((isnan(1.0) ? _5071 : (isnan(_5071) ? 1.0 : min(_5071, 1.0))) * (_3058 + ((isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0))) * _1002))) + ((_3064 + ((isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0))) * _1836)) * cbPerFrame._m0[3u].x);
    float _3086 = ((isnan(1.0) ? _5082 : (isnan(_5082) ? 1.0 : min(_5082, 1.0))) * (_3060 + ((isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0))) * _1002))) + ((_3066 + ((isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0))) * _1836)) * cbPerFrame._m0[3u].x);
    float _3087 = ((isnan(1.0) ? _5093 : (isnan(_5093) ? 1.0 : min(_5093, 1.0))) * (_3062 + ((isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0))) * _1002))) + ((_3068 + ((isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0))) * _1836)) * cbPerFrame._m0[3u].x);
    uint _3088 = _254 + 6u;
    float _3096 = _924 / cbSceneParam._m0[86u].x;
    float _3097 = _925 / cbSceneParam._m0[86u].y;
    vec4 _3111 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3096, _3097, (log2((isnan(cbSceneParam._m0[77u].w) ? _849 : (isnan(_849) ? cbSceneParam._m0[77u].w : min(_849, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3113 = _3111.x;
    float _3114 = _3111.y;
    float _3115 = _3111.z;
    float _3116 = _3111.w;
    float _3188;
    float _3190;
    float _3192;
    float _3194;
    if (_849 > cbSceneParam._m0[78u].w)
    {
        float _3150 = isnan(_849) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _849 : min(cbSceneParam._m0[80u].w, _849));
        float _3151 = _3150 / _849;
        float _3162 = _3151 * _900;
        float _3163 = _901 * _3151;
        float _3164 = (-0.0) - _3163;
        float _3166 = _3151 * _902;
        float _3168 = (cbSceneParam._m0[77u].w * _3164) / _3150;
        float _3169 = _3168 + cbSceneParam._m0[79u].w;
        float _3170 = cbSceneParam._m0[79u].w - _3163;
        float _3176 = sqrt(((_3162 * _3162) + (_3163 * _3163)) + (_3166 * _3166));
        float _3179 = (1.0 - (cbSceneParam._m0[77u].w / _3150)) * _3176;
        float _3184 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3186 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3363;
        if (abs((_3164 - _3168) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3363 = ((((_3169 > 0.0) ? exp2(_3184 * _3169) : (2.0 - exp2(_3186 * _3169))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3179;
        }
        else
        {
            float _3307 = 1.0 / cbSceneParam._m0[80u].x;
            float _3308 = isnan(_3170) ? _3169 : (isnan(_3169) ? _3170 : max(_3169, _3170));
            float _3309 = isnan(_3170) ? _3169 : (isnan(_3169) ? _3170 : min(_3169, _3170));
            float _3318 = isnan(0.0) ? _3308 : (isnan(_3308) ? 0.0 : min(_3308, 0.0));
            float _3319 = isnan(0.0) ? _3309 : (isnan(_3309) ? 0.0 : min(_3309, 0.0));
            _3363 = ((abs(_3176 / _3164) * cbSceneParam._m0[80u].y) * ((((_3318 - _3319) * 2.0) - ((exp2(_3184 * (isnan(0.0) ? _3308 : (isnan(_3308) ? 0.0 : max(_3308, 0.0)))) - exp2(_3184 * (isnan(0.0) ? _3309 : (isnan(_3309) ? 0.0 : max(_3309, 0.0))))) * _3307)) - ((exp2(_3186 * _3318) - exp2(_3186 * _3319)) * _3307))) + (_3179 * cbSceneParam._m0[80u].z);
        }
        vec4 _3365 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3096, _3097, 1.0), 0.0);
        float _3374 = exp2((_3363 * (-1.44269502162933349609375)) * (1.0 - _3365.w));
        float _3375 = log2(_3374);
        float _3391 = log2(_3116);
        _3188 = (exp2(_3391 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3375 * cbSceneParam._m0[78u].x)) * _3365.x) / cbSceneParam._m0[78u].x)) + _3113;
        _3190 = (exp2(_3391 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3375 * cbSceneParam._m0[78u].y)) * _3365.y) / cbSceneParam._m0[78u].y)) + _3114;
        _3192 = (exp2(_3391 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3375 * cbSceneParam._m0[78u].z)) * _3365.z) / cbSceneParam._m0[78u].z)) + _3115;
        _3194 = _3374 * _3116;
    }
    else
    {
        _3188 = _3113;
        _3190 = _3114;
        _3192 = _3115;
        _3194 = _3116;
    }
    bool _3401;
    vec4 _3204;
    vec4 _3226;
    float _3228;
    float _3232;
    float _3233;
    float _3234;
    float _3235;
    bool _3245;
    for (;;)
    {
        _3204 = cbMatDynParam._m0[0u];
        float _3206 = roundEven(_3204.y);
        bool _3207 = _3206 == 3.0;
        float _3208 = log2(_3194);
        float _3215 = exp2(_3208 * cbSceneParam._m0[78u].x) * _3085;
        float _3216 = exp2(_3208 * cbSceneParam._m0[78u].y) * _3086;
        float _3217 = exp2(_3208 * cbSceneParam._m0[78u].z) * _3087;
        float _3224 = _913 + (-0.5);
        _3226 = cbMtdParam._m0[1u];
        _3228 = _3226.y * _3224;
        float _3231 = (_3206 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3232 = _3231 * (_3207 ? _3215 : (_3215 + (cbSceneParam._m0[72u].w * _3188)));
        _3233 = _3231 * (_3207 ? _3216 : (_3216 + (cbSceneParam._m0[72u].w * _3190)));
        _3234 = _3231 * (_3207 ? _3217 : (_3217 + (cbSceneParam._m0[72u].w * _3192)));
        _3235 = _3224 * 0.999000012874603271484375;
        _3245 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3245)
        {
            if ((cbInstanceData._m0[_254 + 7u].x + _3235) < 0.5)
            {
                _3401 = true;
                break;
            }
        }
        uint _3342 = _962 + uint(_3204.w);
        if ((cbInstanceData._m0[_3342].w < 1.0) && ((cbInstanceData._m0[_3342].w + _3235) < 0.5))
        {
            _3401 = true;
            break;
        }
        if ((_3228 + 1.0) < _3226.x)
        {
            _3401 = true;
            break;
        }
        _3401 = false;
        break;
    }
    float _3605;
    if (_3401)
    {
        discard_state = true;
        _3605 = 0.0;
    }
    else
    {
        _3605 = cbInstanceData._m0[_3088].w;
    }
    SV_Target.x = _3232;
    SV_Target.y = _3233;
    SV_Target.z = _3234;
    SV_Target.w = _3605;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3088].w;
    discard_exit();
}


