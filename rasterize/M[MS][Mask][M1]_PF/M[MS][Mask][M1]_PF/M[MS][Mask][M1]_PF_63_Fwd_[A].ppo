#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1461;
float _3840;
float _3841;
float _3842;
float _3843;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _231 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _232 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _233 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _239 = inversesqrt(dot(vec3(_231, _232, _233), vec3(_231, _232, _233)));
    float _246 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _253 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _267 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _269 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3852 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _3863 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _3874 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    uint _280 = uint(roundEven(NORMAL.w)) * 13u;
    uint _285 = _280 + 1u;
    uint _289 = _280 + 2u;
    float _298 = sqrt(((cbInstanceData._m0[_285].x * cbInstanceData._m0[_285].x) + (cbInstanceData._m0[_280].x * cbInstanceData._m0[_280].x)) + (cbInstanceData._m0[_289].x * cbInstanceData._m0[_289].x));
    float _299 = _298 * TEXCOORD.z;
    float _300 = _298 * TEXCOORD.w;
    vec4 _313 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _299) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _300) + cbTextureTilingScale._m0[13u].w));
    vec4 _337 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _342 = _337.x * cbMtdParam._m0[11u].x;
    float _343 = _337.y * cbMtdParam._m0[11u].y;
    float _344 = _337.z * cbMtdParam._m0[11u].z;
    vec4 _363 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _299) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _300) + cbTextureTilingScale._m0[5u].w));
    vec4 _382 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _412 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[27u].x * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].y * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _414 = _412.x;
    float _426 = dot(vec4(_414, _412.yzw), vec4(cbMtdParam._m0[28u].w, cbMtdParam._m0[29u].xy, 0.0));
    float _443 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _382.x) * 2.0) - ((((_414 - _426) * cbMtdParam._m0[23u].w) + _426) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3885 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _444 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
    float _451 = (_444 * ((_363.x * cbMtdParam._m0[12u].x) - _342)) + _342;
    float _452 = (_444 * ((_363.y * cbMtdParam._m0[12u].y) - _343)) + _343;
    float _453 = (_444 * ((_363.z * cbMtdParam._m0[12u].z) - _344)) + _344;
    vec4 _470 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _299) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _300) + cbTextureTilingScale._m0[3u].w));
    vec4 _492 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].z * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].w * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _494 = _492.x;
    float _504 = dot(vec4(_494, _492.yzw), vec4(cbMtdParam._m0[30u].yzw, 0.0));
    float _518 = ((cbMtdParam._m0[25u].z * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _382.y) * 2.0) - ((((_494 - _504) * cbMtdParam._m0[23u].w) + _504) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3896 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _519 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
    float _526 = (_519 * ((_470.x * cbMtdParam._m0[13u].x) - _451)) + _451;
    float _527 = (_519 * ((_470.y * cbMtdParam._m0[13u].y) - _452)) + _452;
    float _528 = (_519 * ((_470.z * cbMtdParam._m0[13u].z) - _453)) + _453;
    float _532 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _313.x) * _526;
    float _535 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _313.y) * _527;
    float _538 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _313.z) * _528;
    float _545 = ((_526 - _532) * (isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0)))) + _532;
    float _546 = ((_527 - _535) * (isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0)))) + _535;
    float _547 = ((_528 - _538) * (isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0)))) + _538;
    vec4 _564 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _299) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _300) + cbTextureTilingScale._m0[20u].w));
    vec4 _587 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _299) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _300) + cbTextureTilingScale._m0[4u].w));
    vec4 _604 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _606 = _604.x;
    float _607 = _604.y;
    float _608 = _604.z;
    float _615 = ((_587.x - _606) * _444) + _606;
    float _616 = ((_587.y - _607) * _444) + _607;
    float _617 = ((_587.z - _608) * _444) + _608;
    vec4 _629 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _299) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _300) + cbTextureTilingScale._m0[2u].w));
    float _642 = ((_629.z - _617) * _519) + _617;
    float _645 = ((((_629.x - _615) * _519) + _615) * 2.0) + (-1.0);
    float _646 = ((((_629.y - _616) * _519) + _616) * 2.0) + (-1.0);
    float _647 = dot(vec2(_645, _646), vec2(_645, _646));
    float _3907 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _652 = sqrt(1.0 - (isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0))));
    vec4 _666 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _691 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _299) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _300) + cbTextureTilingScale._m0[11u].w));
    float _693 = _691.x;
    float _694 = 1.0 - _693;
    float _710 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_693 - _694) * cbMtdParam._m0[24u].z) + _694) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3918 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
    float _711 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
    float _718 = (_711 * (cbMtdParam._m0[17u].x - _545)) + _545;
    float _719 = (_711 * (cbMtdParam._m0[17u].y - _546)) + _546;
    float _720 = (_711 * (cbMtdParam._m0[17u].z - _547)) + _547;
    vec4 _746 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _748 = _746.x;
    float _766 = ((texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _299) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _300) + cbTextureTilingScale._m0[9u].w)).x - _748) * _444) + _748;
    float _783 = ((texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _299) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _300) + cbTextureTilingScale._m0[21u].w)).x - _766) * _519) + _766;
    float _787 = ((texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _783) * cbMtdParam._m0[19u].z) + _783;
    float _789 = _787 - (_787 * _711);
    float _794 = (((_564.z - _642) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _642;
    float _798 = ((_666.z - _794) * cbMtdParam._m0[19u].w) + _794;
    vec4 _811 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _299) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _300) + cbTextureTilingScale._m0[15u].w));
    float _818 = (_811.x * 2.0) + (-1.0);
    float _819 = (_811.y * 2.0) + (-1.0);
    float _820 = dot(vec2(_818, _819), vec2(_818, _819));
    float _3929 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
    float _828 = (_711 * (_811.z - _798)) + _798;
    float _837 = (_645 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_564.x * 2.0) + (-1.0)))) + (((_666.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w);
    float _838 = (_646 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_564.y * 2.0) + (-1.0)))) + (((_666.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w);
    float _850 = (((_818 - _837) + (cbMtdParam._m0[21u].x * _837)) * _711) + _837;
    float _851 = (((_819 - _838) + (cbMtdParam._m0[21u].x * _838)) * _711) + _838;
    float _852 = (_711 * (sqrt(1.0 - (isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0)))) - _652)) + _652;
    float _856 = cbMtdParam._m0[22u].x + _666.w;
    float _858 = gl_FragCoord.x * 0.125;
    float _860 = gl_FragCoord.y * 0.125;
    float _870 = fma(_852, _246 * NORMAL.x, fma(_851, _253 * TANGENT.x, (_239 * _231) * _850));
    float _873 = fma(_852, _246 * NORMAL.y, fma(_851, _253 * TANGENT.y, (_239 * _232) * _850));
    float _876 = fma(_852, _246 * NORMAL.z, fma(_851, _253 * TANGENT.z, (_239 * _233) * _850));
    float _880 = inversesqrt(dot(vec3(_870, _873, _876), vec3(_870, _873, _876)));
    float _881 = _880 * _870;
    float _882 = _880 * _873;
    float _883 = _880 * _876;
    float _3940 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
    float _884 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
    float _3951 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
    float _3962 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
    float _3973 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
    float _3984 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
    float _3995 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
    float _889 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
    if (!(cbMtdParam._m0[25u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_858, _860)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _907 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _948 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _958 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _948);
    float _959 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _948);
    float _960 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _948);
    float _964 = inversesqrt(dot(vec3(_958, _959, _960), vec3(_958, _959, _960)));
    float _965 = _958 * _964;
    float _966 = _959 * _964;
    float _967 = _960 * _964;
    vec4 _969 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_858, _860));
    float _971 = _969.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1143 = sqrt(((_958 * _958) + (_959 * _959)) + (_960 * _960));
        float _1149 = (cbMatDynParam._m0[5u].x * _1143) + cbMatDynParam._m0[5u].y;
        float _4006 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1150 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
        float _1154 = (cbMatDynParam._m0[5u].z * _1143) + cbMatDynParam._m0[5u].w;
        float _4017 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0))) - _1150)) + _1150) < ((_971 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _982 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _983 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1001 = fma(_883, cbSceneParam._m0[5u].z, fma(_882, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _881));
    float _1004 = fma(_883, cbSceneParam._m0[6u].z, fma(_882, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _881));
    float _1007 = fma(_883, cbSceneParam._m0[7u].z, fma(_882, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _881));
    uint _1020 = _280 + 9u;
    uint _1021 = _1020 + uint(cbMatDynParam._m0[0u].w);
    float _1027 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0)))) * cbInstanceData._m0[_1021].x;
    float _1028 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0)))) * cbInstanceData._m0[_1021].y;
    float _1029 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0)))) * cbInstanceData._m0[_1021].z;
    float _4028 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
    float _1030 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
    float _4039 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
    float _1031 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
    float _4050 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
    float _1032 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
    float _1033 = 1.0 - _889;
    float _1034 = _1030 * _1033;
    float _1035 = _1031 * _1033;
    float _1036 = _1032 * _1033;
    float _1041 = (_1030 + (-0.039999999105930328369140625)) * _889;
    float _1042 = (_1031 + (-0.039999999105930328369140625)) * _889;
    float _1043 = (_1032 + (-0.039999999105930328369140625)) * _889;
    float _1044 = _1041 + 0.039999999105930328369140625;
    float _1046 = _1042 + 0.039999999105930328369140625;
    float _1047 = _1043 + 0.039999999105930328369140625;
    vec4 _1056 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _982, cbSceneParam._m0[86u].y * _983));
    float _1060 = ((isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0))) * TEXCOORD_5.w) * _1056.x;
    float _1061 = dot(vec3(_881, _882, _883), vec3(_965, _966, _967));
    float _1064 = _1061 * 2.0;
    float _1068 = (_1064 * _881) - _965;
    float _1069 = (_1064 * _882) - _966;
    float _1070 = (_1064 * _883) - _967;
    float _1074 = abs(dot(vec3(_965, _966, _967), vec3(_881, _882, _883)));
    float _4061 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
    float _1076 = sqrt(_884);
    float _1089 = exp2((_1076 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1076 * 3.0));
    float _1095 = (1.0 - _1089) * ((_1076 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1096 = _1089 * _1076;
    float _1124 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1128 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1132 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1460;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1185 = fma(_1132, cbModelParam._m0[26u].z, fma(_1128, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1124));
        float _1189 = fma(_1132, cbModelParam._m0[27u].z, fma(_1128, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1124));
        float _1193 = fma(_1132, cbModelParam._m0[28u].z, fma(_1128, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1124));
        float _1218 = _1124 + _881;
        float _1219 = _1128 + _882;
        float _1220 = _1132 + _883;
        float _1230 = fma(_1220, cbModelParam._m0[26u].z, fma(_1219, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1218)) - _1185;
        float _1231 = fma(_1220, cbModelParam._m0[27u].z, fma(_1219, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1218)) - _1189;
        float _1232 = fma(_1220, cbModelParam._m0[28u].z, fma(_1219, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1218)) - _1193;
        float _1236 = inversesqrt(dot(vec3(_1230, _1231, _1232), vec3(_1230, _1231, _1232)));
        float _1249 = ((_1236 * _1230) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1185 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1250 = ((_1236 * _1231) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1189 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1251 = ((_1236 * _1232) / cbModelParam._m0[34u].z) + ((((((_1193 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1254 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1249, _1250, _1251), 0.0);
        vec4 _1261 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1249, _1250, _1251), 0.0);
        vec4 _1268 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1249, _1250, _1251), 0.0);
        vec4 _1275 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1249, _1250, _1251), 0.0);
        float _1288 = exp2((_1254.w + (-0.5)) * 20.0) * 2.0;
        float _1289 = _1288 * (_1254.x + (-0.5));
        float _1290 = _1288 * (_1254.y + (-0.5));
        float _1291 = _1288 * (_1254.z + (-0.5));
        float _1298 = exp2((_1261.w + (-0.5)) * 20.0) * 2.0;
        float _1299 = _1298 * (_1261.x + (-0.5));
        float _1300 = _1298 * (_1261.y + (-0.5));
        float _1301 = _1298 * (_1261.z + (-0.5));
        float _1308 = exp2((_1268.w + (-0.5)) * 20.0) * 2.0;
        float _1309 = _1308 * (_1268.x + (-0.5));
        float _1310 = _1308 * (_1268.y + (-0.5));
        float _1311 = _1308 * (_1268.z + (-0.5));
        float _1318 = exp2((_1275.w + (-0.5)) * 20.0) * 2.0;
        float _1319 = _1318 * (_1275.x + (-0.5));
        float _1320 = _1318 * (_1275.y + (-0.5));
        float _1321 = _1318 * (_1275.z + (-0.5));
        float _1322 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1323 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1324 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1325 = _1289 * 0.5;
        float _1326 = _1299 * 0.5;
        float _1327 = _1309 * 0.5;
        float _1328 = dot(vec3(_1325, _1326, _1327), vec3(_1325, _1326, _1327));
        float _1333 = (_1328 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1328);
        float _1342 = (dot(vec3(_881, _882, _883), vec3(_1333 * _1325, _1333 * _1326, _1333 * _1327)) + 1.0) * 0.5;
        float _4087 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1352 = sqrt(((_1326 * _1326) + (_1325 * _1325)) + (_1327 * _1327)) / (_1322 + 9.9999997473787516355514526367188e-06);
        float _4098 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1353 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
        float _1354 = _1353 * 2.0;
        float _1358 = (1.0 - _1353) / (_1353 + 1.0);
        float _4109 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1359 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
        float _1368 = ((((1.0 - _1359) * (_1354 + 2.0)) * exp2(log2(isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0))) * (_1354 + 1.0))) + _1359) * _1322;
        float _1369 = _1290 * 0.5;
        float _1370 = _1300 * 0.5;
        float _1371 = _1310 * 0.5;
        float _1372 = dot(vec3(_1369, _1370, _1371), vec3(_1369, _1370, _1371));
        float _1377 = (_1372 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1372);
        float _1385 = (dot(vec3(_881, _882, _883), vec3(_1377 * _1369, _1377 * _1370, _1377 * _1371)) + 1.0) * 0.5;
        float _4120 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1394 = sqrt(((_1370 * _1370) + (_1369 * _1369)) + (_1371 * _1371)) / (_1323 + 9.9999997473787516355514526367188e-06);
        float _4131 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1395 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
        float _1396 = _1395 * 2.0;
        float _1400 = (1.0 - _1395) / (_1395 + 1.0);
        float _4142 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1401 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
        float _1410 = ((((1.0 - _1401) * (_1396 + 2.0)) * exp2(log2(isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0))) * (_1396 + 1.0))) + _1401) * _1323;
        float _1411 = _1291 * 0.5;
        float _1412 = _1301 * 0.5;
        float _1413 = _1311 * 0.5;
        float _1414 = dot(vec3(_1411, _1412, _1413), vec3(_1411, _1412, _1413));
        float _1419 = (_1414 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1414);
        float _1427 = (dot(vec3(_881, _882, _883), vec3(_1419 * _1411, _1419 * _1412, _1419 * _1413)) + 1.0) * 0.5;
        float _4153 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1436 = sqrt(((_1412 * _1412) + (_1411 * _1411)) + (_1413 * _1413)) / (_1324 + 9.9999997473787516355514526367188e-06);
        float _4164 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1437 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
        float _1438 = _1437 * 2.0;
        float _1442 = (1.0 - _1437) / (_1437 + 1.0);
        float _4175 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1443 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
        float _1452 = ((((1.0 - _1443) * (_1438 + 2.0)) * exp2(log2(isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0))) * (_1438 + 1.0))) + _1443) * _1324;
        _1460 = _1291;
        _1462 = _1290;
        _1463 = _1289;
        _1464 = _1301;
        _1465 = _1300;
        _1466 = _1299;
        _1467 = _1311;
        _1468 = _1310;
        _1469 = _1309;
        _1470 = _1324;
        _1471 = _1323;
        _1472 = _1322;
        _1473 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0)));
        _1474 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0)));
        _1475 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0)));
    }
    else
    {
        _1460 = _1461;
        _1462 = _1461;
        _1463 = _1461;
        _1464 = _1461;
        _1465 = _1461;
        _1466 = _1461;
        _1467 = _1461;
        _1468 = _1461;
        _1469 = _1461;
        _1470 = _1461;
        _1471 = _1461;
        _1472 = _1461;
        _1473 = 0.0;
        _1474 = 0.0;
        _1475 = 0.0;
    }
    float _1768;
    float _1769;
    float _1770;
    float _1771;
    float _1772;
    float _1773;
    float _1774;
    float _1775;
    float _1776;
    float _1777;
    float _1778;
    float _1779;
    float _1780;
    float _1781;
    float _1782;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1499 = fma(_1132, cbModelParam._m0[30u].z, fma(_1128, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1124));
        float _1503 = fma(_1132, cbModelParam._m0[31u].z, fma(_1128, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1124));
        float _1507 = fma(_1132, cbModelParam._m0[32u].z, fma(_1128, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1124));
        float _1530 = _1124 + _881;
        float _1531 = _1128 + _882;
        float _1532 = _1132 + _883;
        float _1542 = fma(_1532, cbModelParam._m0[30u].z, fma(_1531, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1530)) - _1499;
        float _1543 = fma(_1532, cbModelParam._m0[31u].z, fma(_1531, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1530)) - _1503;
        float _1544 = fma(_1532, cbModelParam._m0[32u].z, fma(_1531, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1530)) - _1507;
        float _1548 = inversesqrt(dot(vec3(_1542, _1543, _1544), vec3(_1542, _1543, _1544)));
        float _1561 = ((_1548 * _1542) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1499 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1562 = ((_1548 * _1543) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1503 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1563 = ((_1548 * _1544) / cbModelParam._m0[35u].z) + ((((((_1507 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1565 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1561, _1562, _1563), 0.0);
        vec4 _1572 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1561, _1562, _1563), 0.0);
        vec4 _1579 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1561, _1562, _1563), 0.0);
        vec4 _1586 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1561, _1562, _1563), 0.0);
        float _1598 = exp2((_1565.w + (-0.5)) * 20.0) * 2.0;
        float _1599 = _1598 * (_1565.x + (-0.5));
        float _1600 = _1598 * (_1565.y + (-0.5));
        float _1601 = _1598 * (_1565.z + (-0.5));
        float _1608 = exp2((_1572.w + (-0.5)) * 20.0) * 2.0;
        float _1609 = _1608 * (_1572.x + (-0.5));
        float _1610 = _1608 * (_1572.y + (-0.5));
        float _1611 = _1608 * (_1572.z + (-0.5));
        float _1618 = exp2((_1579.w + (-0.5)) * 20.0) * 2.0;
        float _1619 = _1618 * (_1579.x + (-0.5));
        float _1620 = _1618 * (_1579.y + (-0.5));
        float _1621 = _1618 * (_1579.z + (-0.5));
        float _1628 = exp2((_1586.w + (-0.5)) * 20.0) * 2.0;
        float _1629 = _1628 * (_1586.x + (-0.5));
        float _1630 = _1628 * (_1586.y + (-0.5));
        float _1631 = _1628 * (_1586.z + (-0.5));
        float _1632 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
        float _1633 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1634 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
        float _1635 = _1599 * 0.5;
        float _1636 = _1609 * 0.5;
        float _1637 = _1619 * 0.5;
        float _1638 = dot(vec3(_1635, _1636, _1637), vec3(_1635, _1636, _1637));
        float _1643 = (_1638 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1638);
        float _1651 = (dot(vec3(_881, _882, _883), vec3(_1643 * _1635, _1643 * _1636, _1643 * _1637)) + 1.0) * 0.5;
        float _4216 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
        float _1660 = sqrt(((_1636 * _1636) + (_1635 * _1635)) + (_1637 * _1637)) / (_1632 + 9.9999997473787516355514526367188e-06);
        float _4227 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
        float _1661 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
        float _1662 = _1661 * 2.0;
        float _1666 = (1.0 - _1661) / (_1661 + 1.0);
        float _4238 = isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0));
        float _1667 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
        float _1676 = ((((1.0 - _1667) * (_1662 + 2.0)) * exp2(log2(isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0))) * (_1662 + 1.0))) + _1667) * _1632;
        float _1677 = _1600 * 0.5;
        float _1678 = _1610 * 0.5;
        float _1679 = _1620 * 0.5;
        float _1680 = dot(vec3(_1677, _1678, _1679), vec3(_1677, _1678, _1679));
        float _1685 = (_1680 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1680);
        float _1693 = (dot(vec3(_881, _882, _883), vec3(_1685 * _1677, _1685 * _1678, _1685 * _1679)) + 1.0) * 0.5;
        float _4249 = isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0));
        float _1702 = sqrt(((_1678 * _1678) + (_1677 * _1677)) + (_1679 * _1679)) / (_1633 + 9.9999997473787516355514526367188e-06);
        float _4260 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
        float _1703 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
        float _1704 = _1703 * 2.0;
        float _1708 = (1.0 - _1703) / (_1703 + 1.0);
        float _4271 = isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0));
        float _1709 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
        float _1718 = ((((1.0 - _1709) * (_1704 + 2.0)) * exp2(log2(isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0))) * (_1704 + 1.0))) + _1709) * _1633;
        float _1719 = _1601 * 0.5;
        float _1720 = _1611 * 0.5;
        float _1721 = _1621 * 0.5;
        float _1722 = dot(vec3(_1719, _1720, _1721), vec3(_1719, _1720, _1721));
        float _1727 = (_1722 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1722);
        float _1735 = (dot(vec3(_881, _882, _883), vec3(_1727 * _1719, _1727 * _1720, _1727 * _1721)) + 1.0) * 0.5;
        float _4282 = isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0));
        float _1744 = sqrt(((_1720 * _1720) + (_1719 * _1719)) + (_1721 * _1721)) / (_1634 + 9.9999997473787516355514526367188e-06);
        float _4293 = isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0));
        float _1745 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
        float _1746 = _1745 * 2.0;
        float _1750 = (1.0 - _1745) / (_1745 + 1.0);
        float _4304 = isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0));
        float _1751 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
        float _1760 = ((((1.0 - _1751) * (_1746 + 2.0)) * exp2(log2(isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0))) * (_1746 + 1.0))) + _1751) * _1634;
        _1768 = _1601;
        _1769 = _1600;
        _1770 = _1599;
        _1771 = _1611;
        _1772 = _1610;
        _1773 = _1609;
        _1774 = _1621;
        _1775 = _1620;
        _1776 = _1619;
        _1777 = _1634;
        _1778 = _1633;
        _1779 = _1632;
        _1780 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0)));
        _1781 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0)));
        _1782 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0)));
    }
    else
    {
        _1768 = _1461;
        _1769 = _1461;
        _1770 = _1461;
        _1771 = _1461;
        _1772 = _1461;
        _1773 = _1461;
        _1774 = _1461;
        _1775 = _1461;
        _1776 = _1461;
        _1777 = _1461;
        _1778 = _1461;
        _1779 = _1461;
        _1780 = 0.0;
        _1781 = 0.0;
        _1782 = 0.0;
    }
    float _1792 = (cbModelParam._m0[1u].x * (_1780 - _1473)) + _1473;
    float _1793 = (cbModelParam._m0[1u].x * (_1781 - _1474)) + _1474;
    float _1794 = (cbModelParam._m0[1u].x * (_1782 - _1475)) + _1475;
    float _1815 = fma(_1794, cbSceneParam._m0[89u].z, fma(_1793, cbSceneParam._m0[89u].y, _1792 * cbSceneParam._m0[89u].x));
    float _1818 = fma(_1794, cbSceneParam._m0[90u].z, fma(_1793, cbSceneParam._m0[90u].y, _1792 * cbSceneParam._m0[90u].x));
    float _1821 = fma(_1794, cbSceneParam._m0[91u].z, fma(_1793, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1792));
    float _1836 = _1068 * 0.5;
    float _1837 = _1069 * 0.5;
    float _1838 = _1070 * 0.5;
    float _1839 = dot(vec4(_1836, _1837, _1838, 1.0), vec4(_1770, _1773, _1776, _1779));
    float _1842 = dot(vec4(_1836, _1837, _1838, 1.0), vec4(_1769, _1772, _1775, _1778));
    float _1845 = dot(vec4(_1836, _1837, _1838, 1.0), vec4(_1768, _1771, _1774, _1777));
    float _1879;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1852 = dot(vec4(_1836, _1837, _1838, 1.0), vec4(_1460, _1464, _1467, _1470));
        float _1856 = dot(vec4(_1836, _1837, _1838, 1.0), vec4(_1462, _1465, _1468, _1471));
        float _1860 = dot(vec4(_1836, _1837, _1838, 1.0), vec4(_1463, _1466, _1469, _1472));
        float _1867 = dot(vec4(cbModelParam._m0[39u]), vec4(_1836, _1837, _1838, 1.0));
        _1879 = dot(vec3(isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0)), isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0)), isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1867) ? 0.0 : (isnan(0.0) ? _1867 : max(0.0, _1867))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1879 = 1.0;
    }
    float _1890;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1881 = dot(vec4(cbModelParam._m0[40u]), vec4(_1836, _1837, _1838, 1.0));
        _1890 = dot(vec3(isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0)), isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0)), isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1881) ? 0.0 : (isnan(0.0) ? _1881 : max(0.0, _1881))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1890 = 1.0;
    }
    float _1894 = (_1890 * cbModelParam._m0[1u].x) + (_1879 * (1.0 - cbModelParam._m0[1u].x));
    float _1904 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _884);
    float _1905 = isnan(_1904) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1904 : min(cbModelParam._m0[25u].z, _1904));
    float _1986;
    float _1988;
    float _1990;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1953 = fma(_1132, cbModelParam._m0[13u].z, fma(_1128, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1124)) + cbModelParam._m0[13u].w;
        float _1957 = fma(_1132, cbModelParam._m0[14u].z, fma(_1128, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1124)) + cbModelParam._m0[14u].w;
        float _1961 = fma(_1132, cbModelParam._m0[15u].z, fma(_1128, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1124)) + cbModelParam._m0[15u].w;
        float _1964 = fma(_1070, cbModelParam._m0[13u].z, fma(_1069, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1068));
        float _1967 = fma(_1070, cbModelParam._m0[14u].z, fma(_1069, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1068));
        float _1970 = fma(_1070, cbModelParam._m0[15u].z, fma(_1069, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1068));
        float _1998;
        if (_1964 > 0.0)
        {
            _1998 = abs((1.0 - _1953) / _1964);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1964 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1953 + 1.0) / _1964);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1998 = frontier_phi_19_17_ladder;
        }
        float _2201;
        if (_1967 > 0.0)
        {
            _2201 = abs((1.0 - _1957) / _1967);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1967 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1957 + 1.0) / _1967);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2201 = frontier_phi_28_24_ladder;
        }
        float _2455;
        if (_1970 > 0.0)
        {
            _2455 = abs((1.0 - _1961) / _1970);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1970 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1961 + 1.0) / _1970);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2455 = frontier_phi_40_35_ladder;
        }
        float _2457 = isnan(_2201) ? _1998 : (isnan(_1998) ? _2201 : min(_1998, _2201));
        float _2458 = isnan(_2455) ? _2457 : (isnan(_2457) ? _2455 : min(_2457, _2455));
        float _2462 = (_2458 * _1964) + _1953;
        float _2463 = (_2458 * _1967) + _1957;
        float _2464 = (_2458 * _1970) + _1961;
        float _2465 = _2458 * 9.9999997473787516355514526367188e-05;
        float _2467 = (-1.0) - _2465;
        float _2469 = _2465 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2464 > _2469) || ((_2464 < _2467) || ((_2463 > _2469) || ((_2463 < _2467) || ((_2462 < _2467) || (_2462 > _2469))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2592 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2464, cbModelParam._m0[9u].z, fma(_2463, cbModelParam._m0[9u].y, _2462 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2464, cbModelParam._m0[10u].z, fma(_2463, cbModelParam._m0[10u].y, _2462 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2464, cbModelParam._m0[11u].z, fma(_2463, cbModelParam._m0[11u].y, _2462 * cbModelParam._m0[11u].x))), _1905);
            frontier_phi_18_40_ladder = _2592.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2592.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2592.x * cbModelParam._m0[1u].y;
        }
        _1986 = frontier_phi_18_40_ladder_2;
        _1988 = frontier_phi_18_40_ladder_1;
        _1990 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1974 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1068, _1069, _1070), _1905);
        _1986 = _1974.x * cbModelParam._m0[1u].y;
        _1988 = _1974.y * cbModelParam._m0[1u].y;
        _1990 = _1974.z * cbModelParam._m0[1u].y;
    }
    float _1994 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _884);
    float _1995 = isnan(_1994) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1994 : min(cbModelParam._m0[25u].w, _1994));
    float _2085;
    float _2087;
    float _2089;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2049 = fma(_1132, cbModelParam._m0[21u].z, fma(_1128, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1124)) + cbModelParam._m0[21u].w;
        float _2053 = fma(_1132, cbModelParam._m0[22u].z, fma(_1128, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1124)) + cbModelParam._m0[22u].w;
        float _2057 = fma(_1132, cbModelParam._m0[23u].z, fma(_1128, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1124)) + cbModelParam._m0[23u].w;
        float _2060 = fma(_1070, cbModelParam._m0[21u].z, fma(_1069, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1068));
        float _2063 = fma(_1070, cbModelParam._m0[22u].z, fma(_1069, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1068));
        float _2066 = fma(_1070, cbModelParam._m0[23u].z, fma(_1069, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1068));
        float _2206;
        if (_2060 > 0.0)
        {
            _2206 = abs((1.0 - _2049) / _2060);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_2060 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_2049 + 1.0) / _2060);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2206 = frontier_phi_30_26_ladder;
        }
        float _2482;
        if (_2063 > 0.0)
        {
            _2482 = abs((1.0 - _2053) / _2063);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_2063 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_2053 + 1.0) / _2063);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2482 = frontier_phi_42_37_ladder;
        }
        float _2695;
        if (_2066 > 0.0)
        {
            _2695 = abs((1.0 - _2057) / _2066);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_2066 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_2057 + 1.0) / _2066);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2695 = frontier_phi_51_48_ladder;
        }
        float _2697 = isnan(_2482) ? _2206 : (isnan(_2206) ? _2482 : min(_2206, _2482));
        float _2698 = isnan(_2695) ? _2697 : (isnan(_2697) ? _2695 : min(_2697, _2695));
        float _2702 = (_2698 * _2060) + _2049;
        float _2703 = (_2698 * _2063) + _2053;
        float _2704 = (_2698 * _2066) + _2057;
        float _2705 = _2698 * 9.9999997473787516355514526367188e-05;
        float _2706 = (-1.0) - _2705;
        float _2708 = _2705 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2704 > _2708) || ((_2704 < _2706) || ((_2703 > _2708) || ((_2703 < _2706) || ((_2702 < _2706) || (_2702 > _2708))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2903 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2704, cbModelParam._m0[17u].z, fma(_2703, cbModelParam._m0[17u].y, _2702 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2704, cbModelParam._m0[18u].z, fma(_2703, cbModelParam._m0[18u].y, _2702 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2704, cbModelParam._m0[19u].z, fma(_2703, cbModelParam._m0[19u].y, _2702 * cbModelParam._m0[19u].x))), _1995);
            frontier_phi_27_51_ladder = _2903.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2903.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2903.x * cbModelParam._m0[1u].z;
        }
        _2085 = frontier_phi_27_51_ladder_2;
        _2087 = frontier_phi_27_51_ladder_1;
        _2089 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _2069 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1068, _1069, _1070), _1995);
        _2085 = _2069.x * cbModelParam._m0[1u].z;
        _2087 = _2069.y * cbModelParam._m0[1u].z;
        _2089 = _2069.z * cbModelParam._m0[1u].z;
    }
    float _2102 = (((_1095 * _1044) + _1096) * _1060) * ((cbModelParam._m0[1u].w * (_2085 - _1986)) + _1986);
    float _2104 = (((_1095 * _1046) + _1096) * _1060) * ((cbModelParam._m0[1u].w * (_2087 - _1988)) + _1988);
    float _2106 = (((_1095 * _1047) + _1096) * _1060) * ((cbModelParam._m0[1u].w * (_2089 - _1990)) + _1990);
    float _2109 = fma(_2106, cbSceneParam._m0[89u].z, fma(_2104, cbSceneParam._m0[89u].y, _2102 * cbSceneParam._m0[89u].x));
    float _2112 = fma(_2106, cbSceneParam._m0[90u].z, fma(_2104, cbSceneParam._m0[90u].y, _2102 * cbSceneParam._m0[90u].x));
    float _2115 = fma(_2106, cbSceneParam._m0[91u].z, fma(_2104, cbSceneParam._m0[91u].y, _2102 * cbSceneParam._m0[91u].x));
    uvec4 _2125 = floatBitsToUint(cbInstanceData._m0[_280 + 5u]);
    uint _2127 = _2125.x * 14u;
    uint _2128 = _2127 + 13u;
    float _2135 = _1060 + (-1.0);
    float _2140 = (cbLight._m0[_2128].x * _2135) + 1.0;
    float _2141 = (cbLight._m0[_2128].y * _2135) + 1.0;
    float _2142 = (cbLight._m0[_2128].z * _2135) + 1.0;
    float _2143 = (cbLight._m0[_2128].w * _2135) + 1.0;
    uint _2144 = _2127 + 5u;
    float _2150 = isnan(1.0) ? _2141 : (isnan(_2141) ? 1.0 : min(_2141, 1.0));
    uint _2154 = _2127 + 4u;
    float _2160 = isnan(1.0) ? _2140 : (isnan(_2140) ? 1.0 : min(_2140, 1.0));
    uint _2164 = _2127 | 1u;
    float _2175 = dot(vec3(cbLight._m0[_2127].xyz), vec3(_881, _882, _883));
    float _2178 = dot(vec3(cbLight._m0[_2164].xyz), vec3(_881, _882, _883));
    float _4440 = isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0));
    float _4451 = isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0));
    float _2183 = (isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0))) * 0.3183098733425140380859375;
    float _2185 = (isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0))) * 0.3183098733425140380859375;
    float _2192 = ((cbLight._m0[_2144].x * _2150) * _2185) + ((cbLight._m0[_2154].x * _2160) * _2183);
    float _2193 = ((_2150 * cbLight._m0[_2144].y) * _2185) + ((_2160 * cbLight._m0[_2154].y) * _2183);
    float _2194 = ((_2150 * cbLight._m0[_2144].z) * _2185) + ((_2160 * cbLight._m0[_2154].z) * _2183);
    uvec4 _2198 = floatBitsToUint(cbLight._m0[_2127 + 12u]);
    bool _2200 = _2198.x == 0u;
    float _2211;
    float _2213;
    float _2215;
    if (_2200)
    {
        _2211 = _2192;
        _2213 = _2193;
        _2215 = _2194;
    }
    else
    {
        uint _2219 = _2127 + 6u;
        float _2235 = (dot(vec3(cbLight._m0[_2127 + 2u].xyz), vec3(_881, _882, _883)) * 0.5) + 0.5;
        float _2236 = _2235 * _2235;
        float _4462 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
        float _2237 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
        float _2238 = isnan(1.0) ? _2142 : (isnan(_2142) ? 1.0 : min(_2142, 1.0));
        _2211 = (((cbLight._m0[_2219].x * 0.3183098733425140380859375) * _2237) * _2238) + _2192;
        _2213 = (((cbLight._m0[_2219].y * 0.3183098733425140380859375) * _2237) * _2238) + _2193;
        _2215 = (((cbLight._m0[_2219].z * 0.3183098733425140380859375) * _2237) * _2238) + _2194;
    }
    bool _2218 = _2198.y == 0u;
    float _2256;
    float _2258;
    float _2260;
    if (_2218)
    {
        _2256 = _2211;
        _2258 = _2213;
        _2260 = _2215;
    }
    else
    {
        uint _2426 = _2127 + 7u;
        float _2442 = (dot(vec3(cbLight._m0[_2127 + 3u].xyz), vec3(_881, _882, _883)) * 0.5) + 0.5;
        float _2443 = _2442 * _2442;
        float _4478 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
        float _2444 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
        float _2445 = isnan(1.0) ? _2143 : (isnan(_2143) ? 1.0 : min(_2143, 1.0));
        _2256 = (((cbLight._m0[_2426].x * 0.3183098733425140380859375) * _2444) * _2445) + _2211;
        _2258 = (((cbLight._m0[_2426].y * 0.3183098733425140380859375) * _2444) * _2445) + _2213;
        _2260 = (((cbLight._m0[_2426].z * 0.3183098733425140380859375) * _2444) * _2445) + _2215;
    }
    uint _2263 = _2127 + 8u;
    float _2276 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2127].w)) * _884) * 0.949999988079071044921875);
    float _2277 = _2276 * _2276;
    float _2278 = cbLight._m0[_2127].x + _965;
    float _2279 = cbLight._m0[_2127].y + _966;
    float _2280 = cbLight._m0[_2127].z + _967;
    float _2284 = inversesqrt(dot(vec3(_2278, _2279, _2280), vec3(_2278, _2279, _2280)));
    float _2285 = _2284 * _2278;
    float _2286 = _2284 * _2279;
    float _2287 = _2284 * _2280;
    float _2288 = dot(vec3(_881, _882, _883), vec3(cbLight._m0[_2127].xyz));
    float _4494 = isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0));
    float _2291 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
    float _4505 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
    float _2292 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
    float _2293 = dot(vec3(_881, _882, _883), vec3(_2285, _2286, _2287));
    float _4516 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
    float _2296 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
    float _2297 = dot(vec3(cbLight._m0[_2127].xyz), vec3(_2285, _2286, _2287));
    float _4527 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
    float _2301 = _2277 * _2277;
    float _2305 = ((_2296 * _2296) * (_2301 + (-1.0))) + 1.0;
    float _2313 = exp2(log2(1.0 - (isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0)))) * 5.0);
    float _2314 = 0.959999978542327880859375 - _1041;
    float _2316 = 0.959999978542327880859375 - _1042;
    float _2317 = 0.959999978542327880859375 - _1043;
    float _2324 = 1.0 - _2277;
    float _2335 = (0.5 / (((_2292 * ((_2291 * _2324) + _2277)) + 9.9999999392252902907785028219223e-09) + (((_2292 * _2324) + _2277) * _2291))) * _2291;
    float _4538 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
    float _2337 = (isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0))) * (_2301 / ((_2305 * _2305) * 3.141590118408203125));
    uint _2348 = _2127 + 9u;
    float _2359 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2164].w)) * _884) * 0.949999988079071044921875);
    float _2360 = _2359 * _2359;
    float _2361 = cbLight._m0[_2164].x + _965;
    float _2362 = cbLight._m0[_2164].y + _966;
    float _2363 = cbLight._m0[_2164].z + _967;
    float _2367 = inversesqrt(dot(vec3(_2361, _2362, _2363), vec3(_2361, _2362, _2363)));
    float _2368 = _2367 * _2361;
    float _2369 = _2367 * _2362;
    float _2370 = _2367 * _2363;
    float _2371 = dot(vec3(_881, _882, _883), vec3(cbLight._m0[_2164].xyz));
    float _4549 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
    float _2374 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
    float _2375 = dot(vec3(_881, _882, _883), vec3(_2368, _2369, _2370));
    float _4560 = isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0));
    float _2378 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
    float _2379 = dot(vec3(cbLight._m0[_2164].xyz), vec3(_2368, _2369, _2370));
    float _4571 = isnan(0.0) ? _2379 : (isnan(_2379) ? 0.0 : max(_2379, 0.0));
    float _2383 = _2360 * _2360;
    float _2387 = ((_2378 * _2378) * (_2383 + (-1.0))) + 1.0;
    float _2394 = exp2(log2(1.0 - (isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0)))) * 5.0);
    float _2401 = 1.0 - _2360;
    float _2411 = (0.5 / (((_2292 * ((_2374 * _2401) + _2360)) + 9.9999999392252902907785028219223e-09) + (((_2292 * _2401) + _2360) * _2374))) * _2374;
    float _4582 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0));
    float _2413 = (isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0))) * (_2383 / ((_2387 * _2387) * 3.141590118408203125));
    float _2423 = (((((_2394 * _2314) + _1044) * cbLight._m0[_2348].x) * _2413) * _2150) + (((((_2313 * _2314) + _1044) * cbLight._m0[_2263].x) * _2337) * _2160);
    float _2424 = (((((_2394 * _2316) + _1046) * cbLight._m0[_2348].y) * _2413) * _2150) + (((((_2313 * _2316) + _1046) * cbLight._m0[_2263].y) * _2337) * _2160);
    float _2425 = (((((_2394 * _2317) + _1047) * cbLight._m0[_2348].z) * _2413) * _2150) + (((((_2313 * _2317) + _1047) * cbLight._m0[_2263].z) * _2337) * _2160);
    float _2487;
    float _2489;
    float _2491;
    if (_2200)
    {
        _2487 = _2423;
        _2489 = _2424;
        _2491 = _2425;
    }
    else
    {
        uint _2493 = _2127 + 2u;
        uint _2497 = _2127 + 10u;
        float _2511 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2493].w)) * _884) * 0.949999988079071044921875);
        float _2512 = _2511 * _2511;
        float _2513 = cbLight._m0[_2493].x + _965;
        float _2514 = cbLight._m0[_2493].y + _966;
        float _2515 = cbLight._m0[_2493].z + _967;
        float _2519 = inversesqrt(dot(vec3(_2513, _2514, _2515), vec3(_2513, _2514, _2515)));
        float _2520 = _2519 * _2513;
        float _2521 = _2519 * _2514;
        float _2522 = _2519 * _2515;
        float _2523 = dot(vec3(_881, _882, _883), vec3(cbLight._m0[_2493].xyz));
        float _4593 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
        float _2526 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
        float _2527 = dot(vec3(_881, _882, _883), vec3(_2520, _2521, _2522));
        float _4604 = isnan(0.0) ? _2527 : (isnan(_2527) ? 0.0 : max(_2527, 0.0));
        float _2530 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
        float _2531 = dot(vec3(cbLight._m0[_2493].xyz), vec3(_2520, _2521, _2522));
        float _4615 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0));
        float _2535 = _2512 * _2512;
        float _2539 = ((_2530 * _2530) * (_2535 + (-1.0))) + 1.0;
        float _2546 = exp2(log2(1.0 - (isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0)))) * 5.0);
        float _2553 = 1.0 - _2512;
        float _2563 = (0.5 / (((_2292 * ((_2526 * _2553) + _2512)) + 9.9999999392252902907785028219223e-09) + (((_2292 * _2553) + _2512) * _2526))) * _2526;
        float _4626 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0));
        float _2565 = (isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0))) * (_2535 / ((_2539 * _2539) * 3.141590118408203125));
        float _2566 = isnan(1.0) ? _2142 : (isnan(_2142) ? 1.0 : min(_2142, 1.0));
        _2487 = (((((_2546 * _2314) + _1044) * cbLight._m0[_2497].x) * _2565) * _2566) + _2423;
        _2489 = (((((_2546 * _2316) + _1046) * cbLight._m0[_2497].y) * _2565) * _2566) + _2424;
        _2491 = (((((_2546 * _2317) + _1047) * cbLight._m0[_2497].z) * _2565) * _2566) + _2425;
    }
    float _2601;
    float _2603;
    float _2605;
    if (_2218)
    {
        _2601 = _2487;
        _2603 = _2489;
        _2605 = _2491;
    }
    else
    {
        uint _2612 = _2127 + 3u;
        uint _2616 = _2127 + 11u;
        float _2630 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2612].w)) * _884) * 0.949999988079071044921875);
        float _2631 = _2630 * _2630;
        float _2632 = cbLight._m0[_2612].x + _965;
        float _2633 = cbLight._m0[_2612].y + _966;
        float _2634 = cbLight._m0[_2612].z + _967;
        float _2638 = inversesqrt(dot(vec3(_2632, _2633, _2634), vec3(_2632, _2633, _2634)));
        float _2639 = _2638 * _2632;
        float _2640 = _2638 * _2633;
        float _2641 = _2638 * _2634;
        float _2642 = dot(vec3(_881, _882, _883), vec3(cbLight._m0[_2612].xyz));
        float _4642 = isnan(0.0) ? _2642 : (isnan(_2642) ? 0.0 : max(_2642, 0.0));
        float _2645 = isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0));
        float _2646 = dot(vec3(_881, _882, _883), vec3(_2639, _2640, _2641));
        float _4653 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0));
        float _2649 = isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0));
        float _2650 = dot(vec3(cbLight._m0[_2612].xyz), vec3(_2639, _2640, _2641));
        float _4664 = isnan(0.0) ? _2650 : (isnan(_2650) ? 0.0 : max(_2650, 0.0));
        float _2654 = _2631 * _2631;
        float _2658 = ((_2649 * _2649) * (_2654 + (-1.0))) + 1.0;
        float _2665 = exp2(log2(1.0 - (isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0)))) * 5.0);
        float _2672 = 1.0 - _2631;
        float _2682 = (0.5 / (((_2292 * ((_2645 * _2672) + _2631)) + 9.9999999392252902907785028219223e-09) + (((_2292 * _2672) + _2631) * _2645))) * _2645;
        float _4675 = isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : max(_2682, 0.0));
        float _2684 = (isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0))) * (_2654 / ((_2658 * _2658) * 3.141590118408203125));
        float _2685 = isnan(1.0) ? _2143 : (isnan(_2143) ? 1.0 : min(_2143, 1.0));
        _2601 = (((((_2665 * _2314) + _1044) * cbLight._m0[_2616].x) * _2684) * _2685) + _2487;
        _2603 = (((((_2665 * _2316) + _1046) * cbLight._m0[_2616].y) * _2684) * _2685) + _2489;
        _2605 = (((((_2665 * _2317) + _1047) * cbLight._m0[_2616].z) * _2684) * _2685) + _2491;
    }
    float _2820;
    float _2822;
    float _2824;
    float _2826;
    float _2828;
    float _2830;
    if (_2125.y == 0u)
    {
        float _2760 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2761 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2760;
        float _2762 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2760;
        float _2763 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2760;
        uvec4 _2775 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2776 = _2775.x;
        uint _2787 = uint((float(_2775.y) * floor(float(uint(cbSceneParam._m0[85u].y * _983) / _2776))) + floor(float(uint(cbSceneParam._m0[85u].x * _982) / _2776)));
        float _2797 = (log2(_2763 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2798 = isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : max(_2797, 0.0));
        uint _2801 = uint(isnan(14.0) ? _2798 : (isnan(_2798) ? 14.0 : min(_2798, 14.0)));
        uvec4 _2806 = texelFetch(g_lightClusterGridBuffer, int(((_2801 << 2u) + (_2787 << 6u)) >> 2u));
        uint _2807 = _2806.x;
        uint _2808 = _2775.z;
        float _2908;
        float _2910;
        float _2912;
        float _2914;
        float _2916;
        float _2918;
        if (((((1u << ((_2808 >> 4u) & 15u)) + 4294967295u) & _2807) == 0u) || ((_2808 & 240u) == 0u))
        {
            _2908 = 0.0;
            _2910 = 0.0;
            _2912 = 0.0;
            _2914 = 0.0;
            _2916 = 0.0;
            _2918 = 0.0;
        }
        else
        {
            float _2909;
            float _2911;
            float _2913;
            float _2915;
            float _2917;
            float _2919;
            float _3061 = 0.0;
            float _3062 = 0.0;
            float _3063 = 0.0;
            float _3064 = 0.0;
            float _3065 = 0.0;
            float _3066 = 0.0;
            uint _3067 = 0u;
            uint _3076;
            bool _3077;
            for (;;)
            {
                _3076 = texelFetch(g_lightClassification, int((((_2801 << 5u) + (_2787 << 9u)) + (_3067 << 2u)) >> 2u)).x;
                _3077 = _3076 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3077)
                {
                    frontier_phi_68_pred = _3061;
                    frontier_phi_68_pred_1 = _3066;
                    frontier_phi_68_pred_2 = _3065;
                    frontier_phi_68_pred_3 = _3064;
                    frontier_phi_68_pred_4 = _3063;
                    frontier_phi_68_pred_5 = _3062;
                }
                else
                {
                    float _3206;
                    float _3207;
                    float _3208;
                    float _3209;
                    float _3210;
                    float _3211;
                    uint _3212;
                    _3206 = _3061;
                    _3207 = _3062;
                    _3208 = _3063;
                    _3209 = _3064;
                    _3210 = _3065;
                    _3211 = _3066;
                    _3212 = _3076;
                    float _3133;
                    float _3134;
                    float _3135;
                    float _3136;
                    float _3137;
                    float _3138;
                    for (;;)
                    {
                        uint _3216 = uint(findLSB(_3212)) + (_3067 << 5u);
                        uint _3213 = (_3212 + 4294967295u) & _3212;
                        uint _3218 = _3216 * 48u;
                        vec4 _3232 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3218)).x, texelFetch(g_PointLightRenderingBuffer, int(_3218 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3218 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3218 + 3u)).x));
                        uint _3238 = (_3216 * 48u) + 4u;
                        vec4 _3251 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3238)).x, texelFetch(g_PointLightRenderingBuffer, int(_3238 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3238 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3238 + 3u)).x));
                        uint _3257 = (_3216 * 48u) + 8u;
                        vec3 _3268 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3257)).x, texelFetch(g_PointLightRenderingBuffer, int(_3257 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3257 + 2u)).x));
                        float _3272 = _3232.x - _2761;
                        float _3273 = _3232.y - _2762;
                        float _3274 = _3232.z - _2763;
                        float _3275 = dot(vec3(_3272, _3273, _3274), vec3(_3272, _3273, _3274));
                        float _3278 = inversesqrt(_3275);
                        float _3279 = _3278 * _3272;
                        float _3280 = _3278 * _3273;
                        float _3281 = _3278 * _3274;
                        float _3282 = dot(vec3(_1001, _1004, _1007), vec3(_3279, _3280, _3281));
                        float _3287 = 1.0 - (_3275 * _3232.w);
                        float _4701 = isnan(0.0) ? _3287 : (isnan(_3287) ? 0.0 : max(_3287, 0.0));
                        float _3288 = isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0));
                        float _3289 = sqrt(_3275) * _3251.w;
                        float _3292 = 1.39999997615814208984375 / (_3289 + 1.39999997615814208984375);
                        float _3293 = _3292 * _3292;
                        float _3296 = ((1.0 - _3293) * _3282) + _3293;
                        float _3299 = _3289 * _3289;
                        float _3303 = ((isnan(0.0) ? _3296 : (isnan(_3296) ? 0.0 : max(_3296, 0.0))) * _3288) / ((_3299 * 0.699999988079071044921875) + 1.0);
                        float _3307 = (-0.0) - _2761;
                        float _3308 = (-0.0) - _2762;
                        float _3309 = (-0.0) - _2763;
                        float _3313 = inversesqrt(dot(vec3(_3307, _3308, _3309), vec3(_3307, _3308, _3309)));
                        float _3314 = _3313 * _3307;
                        float _3315 = _3313 * _3308;
                        float _3316 = _3313 * _3309;
                        float _3324 = exp2(log2(1.0 / ((_3299 * 3.5) + 5.0)) * 0.25);
                        float _3325 = 1.0 - _1076;
                        float _3332 = sqrt(1.0 - ((1.0 - (_3325 * _3325)) * (1.0 - (_3324 * _3324))));
                        float _3333 = _3332 * _3332;
                        float _3334 = _3333 * _3333;
                        float _3335 = _3314 + _3279;
                        float _3336 = _3315 + _3280;
                        float _3337 = _3316 + _3281;
                        float _3341 = inversesqrt(dot(vec3(_3335, _3336, _3337), vec3(_3335, _3336, _3337)));
                        float _3345 = dot(vec3(_1001, _1004, _1007), vec3(_3314, _3315, _3316));
                        float _4717 = isnan(0.0) ? _3345 : (isnan(_3345) ? 0.0 : max(_3345, 0.0));
                        float _3348 = isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0));
                        float _3349 = dot(vec3(_1001, _1004, _1007), vec3(_3341 * _3335, _3341 * _3336, _3341 * _3337));
                        float _4728 = isnan(0.0) ? _3349 : (isnan(_3349) ? 0.0 : max(_3349, 0.0));
                        float _3352 = isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0));
                        float _3356 = ((_3352 * _3352) * (_3334 + (-1.0))) + 1.0;
                        float _3357 = _3292 * _3333;
                        float _3358 = _3357 * _3357;
                        float _3361 = ((1.0 - _3358) * _3282) + _3358;
                        float _4739 = isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : max(_3361, 0.0));
                        float _3362 = isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0));
                        float _3363 = 1.0 - _3333;
                        float _3373 = (0.5 / (((_3362 * ((_3348 * _3363) + _3333)) + 9.9999999392252902907785028219223e-09) + (((_3362 * _3363) + _3333) * _3348))) * _3362;
                        float _4750 = isnan(0.0) ? _3373 : (isnan(_3373) ? 0.0 : max(_3373, 0.0));
                        float _3384 = (((_3334 * 3.1415927410125732421875) * (isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0)))) / ((_3356 * _3356) * ((_3299 * 2.1991131305694580078125) + 3.141590118408203125))) * _3288;
                        _3136 = (_3303 * _3251.x) + _3209;
                        _3137 = (_3303 * _3251.y) + _3210;
                        _3138 = (_3303 * _3251.z) + _3211;
                        _3133 = (_3384 * _3268.x) + _3206;
                        _3134 = (_3384 * _3268.y) + _3207;
                        _3135 = (_3384 * _3268.z) + _3208;
                        if (_3213 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3206 = _3133;
                            _3207 = _3134;
                            _3208 = _3135;
                            _3209 = _3136;
                            _3210 = _3137;
                            _3211 = _3138;
                            _3212 = _3213;
                        }
                    }
                    frontier_phi_68_pred = _3133;
                    frontier_phi_68_pred_1 = _3138;
                    frontier_phi_68_pred_2 = _3137;
                    frontier_phi_68_pred_3 = _3136;
                    frontier_phi_68_pred_4 = _3135;
                    frontier_phi_68_pred_5 = _3134;
                }
                _2909 = frontier_phi_68_pred;
                _2919 = frontier_phi_68_pred_1;
                _2917 = frontier_phi_68_pred_2;
                _2915 = frontier_phi_68_pred_3;
                _2913 = frontier_phi_68_pred_4;
                _2911 = frontier_phi_68_pred_5;
                uint _3068 = _3067 + 1u;
                if (_3068 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3061 = _2909;
                    _3062 = _2911;
                    _3063 = _2913;
                    _3064 = _2915;
                    _3065 = _2917;
                    _3066 = _2919;
                    _3067 = _3068;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2908 = _2909;
            _2910 = _2911;
            _2912 = _2913;
            _2914 = _2915;
            _2916 = _2917;
            _2918 = _2919;
        }
        uvec4 _2922 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2923 = _2922.z;
        uint _2925 = (_2923 >> 8u) & 15u;
        float _3029;
        float _3031;
        float _3033;
        float _3035;
        float _3037;
        float _3039;
        if (((4294967295u << _2925) & _2807) == 0u)
        {
            _3029 = _2908;
            _3031 = _2910;
            _3033 = _2912;
            _3035 = _2914;
            _3037 = _2916;
            _3039 = _2918;
        }
        else
        {
            float _3054 = inversesqrt(dot(vec3(_2761, _2762, _2763), vec3(_2761, _2762, _2763)));
            float _3055 = _3054 * _2761;
            float _3056 = _3054 * _2762;
            float _3057 = _3054 * _2763;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2925 < ((_2923 >> 12u) & 15u))
            {
                float _3030;
                float _3032;
                float _3034;
                float _3036;
                float _3038;
                float _3040;
                float _3189 = _2908;
                float _3190 = _2910;
                float _3191 = _2912;
                float _3192 = _2914;
                float _3193 = _2916;
                float _3194 = _2918;
                uint _3195 = _2925;
                uint _3204;
                bool _3205;
                for (;;)
                {
                    _3204 = texelFetch(g_lightClassification, int((((_2801 << 5u) + (_2787 << 9u)) + (_3195 << 2u)) >> 2u)).x;
                    _3205 = _3204 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3205)
                    {
                        frontier_phi_79_pred = _3194;
                        frontier_phi_79_pred_1 = _3193;
                        frontier_phi_79_pred_2 = _3192;
                        frontier_phi_79_pred_3 = _3191;
                        frontier_phi_79_pred_4 = _3190;
                        frontier_phi_79_pred_5 = _3189;
                    }
                    else
                    {
                        float _3398;
                        float _3399;
                        float _3400;
                        float _3401;
                        float _3402;
                        float _3403;
                        float _3691;
                        float _3692;
                        float _3693;
                        float _3694;
                        float _3695;
                        float _3696;
                        float _3411 = _3189;
                        float _3412 = _3190;
                        float _3413 = _3191;
                        float _3414 = _3192;
                        float _3415 = _3193;
                        float _3416 = _3194;
                        uint _3417 = _3204;
                        uint _3418;
                        vec4 _3443;
                        float _3444;
                        vec4 _3459;
                        vec3 _3471;
                        vec4 _3486;
                        vec4 _3501;
                        float _3547;
                        bool _3548;
                        for (;;)
                        {
                            uint _3428 = ((_3195 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3417));
                            _3418 = (_3417 + 4294967295u) & _3417;
                            uint _3430 = _3428 * 40u;
                            _3443 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3430)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 3u)).x));
                            _3444 = _3443.w;
                            uint _3446 = (_3428 * 40u) + 4u;
                            _3459 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3446)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 3u)).x));
                            uint _3461 = (_3428 * 40u) + 8u;
                            _3471 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3461)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 2u)).x));
                            uint _3473 = (_3428 * 40u) + 16u;
                            _3486 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3473)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 3u)).x));
                            uint _3488 = (_3428 * 40u) + 20u;
                            _3501 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3488)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3488 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3488 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3488 + 3u)).x));
                            uint _3503 = (_3428 * 40u) + 24u;
                            vec4 _3516 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3503)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 3u)).x));
                            uint _3522 = (_3428 * 40u) + 28u;
                            vec4 _3535 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3522)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 3u)).x));
                            _3547 = fma(_2763, _3535.z, fma(_2762, _3535.y, _3535.x * _2761)) + _3535.w;
                            _3548 = !((fma(_2763, _3516.z, fma(_2762, _3516.y, _3516.x * _2761)) + _3516.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3548)
                            {
                                float _3575 = _3443.x - _2761;
                                float _3576 = _3443.y - _2762;
                                float _3577 = _3443.z - _2763;
                                float _3578 = dot(vec3(_3575, _3576, _3577), vec3(_3575, _3576, _3577));
                                float _3581 = inversesqrt(_3578);
                                float _3582 = _3581 * _3575;
                                float _3583 = _3581 * _3576;
                                float _3584 = _3581 * _3577;
                                float _3588 = 1.0 - (_3578 / (_3444 * _3444));
                                float _4761 = isnan(0.0) ? _3588 : (isnan(_3588) ? 0.0 : max(_3588, 0.0));
                                float _3589 = isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0));
                                float _3593 = sqrt(_3578) * _3459.w;
                                float _3595 = 1.39999997615814208984375 / (_3593 + 1.39999997615814208984375);
                                float _3596 = _3595 * _3595;
                                float _3599 = ((1.0 - _3596) * dot(vec3(_3582, _3583, _3584), vec3(_1001, _1004, _1007))) + _3596;
                                float _3602 = _3593 * _3593;
                                float _3606 = (fma(_2763, _3486.z, fma(_2762, _3486.y, _3486.x * _2761)) + _3486.w) / _3547;
                                float _3607 = (fma(_2763, _3501.z, fma(_2762, _3501.y, _3501.x * _2761)) + _3501.w) / _3547;
                                float _3611 = 1.0 - dot(vec2(_3606, _3607), vec2(_3606, _3607));
                                float _4777 = isnan(0.0) ? _3611 : (isnan(_3611) ? 0.0 : max(_3611, 0.0));
                                float _3612 = isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0));
                                float _3613 = _3612 * (((isnan(0.0) ? _3599 : (isnan(_3599) ? 0.0 : max(_3599, 0.0))) * _3589) / ((_3602 * 0.699999988079071044921875) + 1.0));
                                float _3625 = exp2(log2(1.0 / ((_3602 * 3.5) + 5.0)) * 0.25);
                                float _3626 = 1.0 - _1076;
                                float _3633 = sqrt(1.0 - ((1.0 - (_3626 * _3626)) * (1.0 - (_3625 * _3625))));
                                float _3634 = _3633 * _3633;
                                float _3635 = _3634 * _3634;
                                float _3636 = _3582 - _3055;
                                float _3637 = _3583 - _3056;
                                float _3638 = _3584 - _3057;
                                float _3642 = inversesqrt(dot(vec3(_3636, _3637, _3638), vec3(_3636, _3637, _3638)));
                                float _3646 = dot(vec3(_1001, _1004, _1007), vec3((-0.0) - _3055, (-0.0) - _3056, (-0.0) - _3057));
                                float _4788 = isnan(0.0) ? _3646 : (isnan(_3646) ? 0.0 : max(_3646, 0.0));
                                float _3649 = isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0));
                                float _3650 = dot(vec3(_1001, _1004, _1007), vec3(_3642 * _3636, _3642 * _3637, _3642 * _3638));
                                float _4799 = isnan(0.0) ? _3650 : (isnan(_3650) ? 0.0 : max(_3650, 0.0));
                                float _3653 = isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0));
                                float _3657 = ((_3653 * _3653) * (_3635 + (-1.0))) + 1.0;
                                float _3658 = _3595 * _3634;
                                float _3659 = _3658 * _3658;
                                float _3665 = ((1.0 - _3659) * dot(vec3(_1001, _1004, _1007), vec3(_3582, _3583, _3584))) + _3659;
                                float _4810 = isnan(0.0) ? _3665 : (isnan(_3665) ? 0.0 : max(_3665, 0.0));
                                float _3666 = isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0));
                                float _3667 = 1.0 - _3634;
                                float _3677 = (0.5 / (((_3666 * ((_3649 * _3667) + _3634)) + 9.9999999392252902907785028219223e-09) + (((_3666 * _3667) + _3634) * _3649))) * _3666;
                                float _4821 = isnan(0.0) ? _3677 : (isnan(_3677) ? 0.0 : max(_3677, 0.0));
                                float _3687 = (_3612 * _3589) * (((_3635 * 3.1415927410125732421875) * (isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0)))) / ((_3657 * _3657) * ((_3602 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3613 * _3459.y;
                                frontier_phi_85_pred_1 = _3613 * _3459.x;
                                frontier_phi_85_pred_2 = _3687 * _3471.z;
                                frontier_phi_85_pred_3 = _3687 * _3471.y;
                                frontier_phi_85_pred_4 = _3687 * _3471.x;
                                frontier_phi_85_pred_5 = _3613 * _3459.z;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3695 = frontier_phi_85_pred;
                            _3694 = frontier_phi_85_pred_1;
                            _3693 = frontier_phi_85_pred_2;
                            _3692 = frontier_phi_85_pred_3;
                            _3691 = frontier_phi_85_pred_4;
                            _3696 = frontier_phi_85_pred_5;
                            _3401 = _3694 + _3414;
                            _3402 = _3695 + _3415;
                            _3403 = _3696 + _3416;
                            _3398 = _3691 + _3411;
                            _3399 = _3692 + _3412;
                            _3400 = _3693 + _3413;
                            if (_3418 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3411 = _3398;
                                _3412 = _3399;
                                _3413 = _3400;
                                _3414 = _3401;
                                _3415 = _3402;
                                _3416 = _3403;
                                _3417 = _3418;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3403;
                        frontier_phi_79_pred_1 = _3402;
                        frontier_phi_79_pred_2 = _3401;
                        frontier_phi_79_pred_3 = _3400;
                        frontier_phi_79_pred_4 = _3399;
                        frontier_phi_79_pred_5 = _3398;
                    }
                    _3040 = frontier_phi_79_pred;
                    _3038 = frontier_phi_79_pred_1;
                    _3036 = frontier_phi_79_pred_2;
                    _3034 = frontier_phi_79_pred_3;
                    _3032 = frontier_phi_79_pred_4;
                    _3030 = frontier_phi_79_pred_5;
                    uint _3196 = _3195 + 1u;
                    if (_3196 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3189 = _3030;
                        _3190 = _3032;
                        _3191 = _3034;
                        _3192 = _3036;
                        _3193 = _3038;
                        _3194 = _3040;
                        _3195 = _3196;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3034;
                frontier_phi_60_61_ladder_1 = _3040;
                frontier_phi_60_61_ladder_2 = _3038;
                frontier_phi_60_61_ladder_3 = _3036;
                frontier_phi_60_61_ladder_4 = _3032;
                frontier_phi_60_61_ladder_5 = _3030;
            }
            else
            {
                frontier_phi_60_61_ladder = _2912;
                frontier_phi_60_61_ladder_1 = _2918;
                frontier_phi_60_61_ladder_2 = _2916;
                frontier_phi_60_61_ladder_3 = _2914;
                frontier_phi_60_61_ladder_4 = _2910;
                frontier_phi_60_61_ladder_5 = _2908;
            }
            _3029 = frontier_phi_60_61_ladder_5;
            _3031 = frontier_phi_60_61_ladder_4;
            _3033 = frontier_phi_60_61_ladder;
            _3035 = frontier_phi_60_61_ladder_3;
            _3037 = frontier_phi_60_61_ladder_2;
            _3039 = frontier_phi_60_61_ladder_1;
        }
        float _3044 = isnan(1.0) ? _1060 : (isnan(_1060) ? 1.0 : min(_1060, 1.0));
        _2820 = (_3044 * _3035) + _2256;
        _2822 = (_3044 * _3037) + _2258;
        _2824 = (_3044 * _3039) + _2260;
        _2826 = ((_3029 * _1044) * _3044) + _2601;
        _2828 = ((_3031 * _1046) * _3044) + _2603;
        _2830 = ((_3033 * _1047) * _3044) + _2605;
    }
    else
    {
        _2820 = _2256;
        _2822 = _2258;
        _2824 = _2260;
        _2826 = _2601;
        _2828 = _2603;
        _2830 = _2605;
    }
    float _4837 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
    float _4848 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
    float _4859 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
    float _2847 = ((isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0))) * (_2820 + ((isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0))) * _1060))) + ((_2826 + ((isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0))) * _1894)) * cbPerFrame._m0[3u].x);
    float _2848 = ((isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0))) * (_2822 + ((isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0))) * _1060))) + ((_2828 + ((isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0))) * _1894)) * cbPerFrame._m0[3u].x);
    float _2849 = ((isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0))) * (_2824 + ((isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0))) * _1060))) + ((_2830 + ((isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0))) * _1894)) * cbPerFrame._m0[3u].x);
    uint _2850 = _280 + 6u;
    float _2858 = _982 / cbSceneParam._m0[86u].x;
    float _2859 = _983 / cbSceneParam._m0[86u].y;
    vec4 _2873 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2858, _2859, (log2((isnan(cbSceneParam._m0[77u].w) ? _907 : (isnan(_907) ? cbSceneParam._m0[77u].w : min(_907, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2875 = _2873.x;
    float _2876 = _2873.y;
    float _2877 = _2873.z;
    float _2878 = _2873.w;
    float _2971;
    float _2973;
    float _2975;
    float _2977;
    if (_907 > cbSceneParam._m0[78u].w)
    {
        float _2933 = isnan(_907) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _907 : min(cbSceneParam._m0[80u].w, _907));
        float _2934 = _2933 / _907;
        float _2945 = _2934 * _958;
        float _2946 = _959 * _2934;
        float _2947 = (-0.0) - _2946;
        float _2949 = _2934 * _960;
        float _2951 = (cbSceneParam._m0[77u].w * _2947) / _2933;
        float _2952 = _2951 + cbSceneParam._m0[79u].w;
        float _2953 = cbSceneParam._m0[79u].w - _2946;
        float _2959 = sqrt(((_2945 * _2945) + (_2946 * _2946)) + (_2949 * _2949));
        float _2962 = (1.0 - (cbSceneParam._m0[77u].w / _2933)) * _2959;
        float _2967 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2969 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3146;
        if (abs((_2947 - _2951) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3146 = ((((_2952 > 0.0) ? exp2(_2967 * _2952) : (2.0 - exp2(_2969 * _2952))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2962;
        }
        else
        {
            float _3090 = 1.0 / cbSceneParam._m0[80u].x;
            float _3091 = isnan(_2953) ? _2952 : (isnan(_2952) ? _2953 : max(_2952, _2953));
            float _3092 = isnan(_2953) ? _2952 : (isnan(_2952) ? _2953 : min(_2952, _2953));
            float _3101 = isnan(0.0) ? _3091 : (isnan(_3091) ? 0.0 : min(_3091, 0.0));
            float _3102 = isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : min(_3092, 0.0));
            _3146 = ((abs(_2959 / _2947) * cbSceneParam._m0[80u].y) * ((((_3101 - _3102) * 2.0) - ((exp2(_2967 * (isnan(0.0) ? _3091 : (isnan(_3091) ? 0.0 : max(_3091, 0.0)))) - exp2(_2967 * (isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : max(_3092, 0.0))))) * _3090)) - ((exp2(_2969 * _3101) - exp2(_2969 * _3102)) * _3090))) + (_2962 * cbSceneParam._m0[80u].z);
        }
        vec4 _3148 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2858, _2859, 1.0), 0.0);
        float _3157 = exp2((_3146 * (-1.44269502162933349609375)) * (1.0 - _3148.w));
        float _3158 = log2(_3157);
        float _3174 = log2(_2878);
        _2971 = (exp2(_3174 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3158 * cbSceneParam._m0[78u].x)) * _3148.x) / cbSceneParam._m0[78u].x)) + _2875;
        _2973 = (exp2(_3174 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3158 * cbSceneParam._m0[78u].y)) * _3148.y) / cbSceneParam._m0[78u].y)) + _2876;
        _2975 = (exp2(_3174 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3158 * cbSceneParam._m0[78u].z)) * _3148.z) / cbSceneParam._m0[78u].z)) + _2877;
        _2977 = _3157 * _2878;
    }
    else
    {
        _2971 = _2875;
        _2973 = _2876;
        _2975 = _2877;
        _2977 = _2878;
    }
    bool _3184;
    vec4 _2987;
    vec4 _3009;
    float _3011;
    float _3015;
    float _3016;
    float _3017;
    float _3018;
    bool _3028;
    for (;;)
    {
        _2987 = cbMatDynParam._m0[0u];
        float _2989 = roundEven(_2987.y);
        bool _2990 = _2989 == 3.0;
        float _2991 = log2(_2977);
        float _2998 = exp2(_2991 * cbSceneParam._m0[78u].x) * _2847;
        float _2999 = exp2(_2991 * cbSceneParam._m0[78u].y) * _2848;
        float _3000 = exp2(_2991 * cbSceneParam._m0[78u].z) * _2849;
        float _3007 = _971 + (-0.5);
        _3009 = cbMtdParam._m0[1u];
        _3011 = _3009.y * _3007;
        float _3014 = (_2989 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3015 = _3014 * (_2990 ? _2998 : (_2998 + (cbSceneParam._m0[72u].w * _2971)));
        _3016 = _3014 * (_2990 ? _2999 : (_2999 + (cbSceneParam._m0[72u].w * _2973)));
        _3017 = _3014 * (_2990 ? _3000 : (_3000 + (cbSceneParam._m0[72u].w * _2975)));
        _3018 = _3007 * 0.999000012874603271484375;
        _3028 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3028)
        {
            if ((cbInstanceData._m0[_280 + 7u].x + _3018) < 0.5)
            {
                _3184 = true;
                break;
            }
        }
        uint _3125 = _1020 + uint(_2987.w);
        if ((cbInstanceData._m0[_3125].w < 1.0) && ((cbInstanceData._m0[_3125].w + _3018) < 0.5))
        {
            _3184 = true;
            break;
        }
        if ((_3011 + 1.0) < _3009.x)
        {
            _3184 = true;
            break;
        }
        _3184 = false;
        break;
    }
    float _3389;
    if (_3184)
    {
        discard_state = true;
        _3389 = 0.0;
    }
    else
    {
        _3389 = cbInstanceData._m0[_2850].w;
    }
    SV_Target.x = _3015;
    SV_Target.y = _3016;
    SV_Target.z = _3017;
    SV_Target.w = _3389;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2850].w;
    discard_exit();
}


