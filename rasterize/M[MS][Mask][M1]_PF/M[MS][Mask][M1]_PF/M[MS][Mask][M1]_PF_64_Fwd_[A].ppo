#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1493;
float _3872;
float _3873;
float _3874;
float _3875;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _233 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _234 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _235 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _241 = inversesqrt(dot(vec3(_233, _234, _235), vec3(_233, _234, _235)));
    float _248 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _255 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _269 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _271 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3884 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _3895 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    float _3906 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    uint _282 = uint(roundEven(NORMAL.w)) * 13u;
    uint _287 = _282 + 1u;
    uint _291 = _282 + 2u;
    float _300 = sqrt(((cbInstanceData._m0[_287].x * cbInstanceData._m0[_287].x) + (cbInstanceData._m0[_282].x * cbInstanceData._m0[_282].x)) + (cbInstanceData._m0[_291].x * cbInstanceData._m0[_291].x));
    float _301 = _300 * TEXCOORD.z;
    float _302 = _300 * TEXCOORD.w;
    vec4 _315 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _301) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _302) + cbTextureTilingScale._m0[13u].w));
    vec4 _338 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _364 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _369 = _364.x * cbMtdParam._m0[11u].x;
    float _370 = _364.y * cbMtdParam._m0[11u].y;
    float _371 = _364.z * cbMtdParam._m0[11u].z;
    vec4 _390 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _301) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _302) + cbTextureTilingScale._m0[5u].w));
    vec4 _409 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _439 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[27u].x * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].y * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _441 = _439.x;
    float _453 = dot(vec4(_441, _439.yzw), vec4(cbMtdParam._m0[28u].w, cbMtdParam._m0[29u].xy, 0.0));
    float _470 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _409.x) * 2.0) - ((((_441 - _453) * cbMtdParam._m0[23u].w) + _453) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3917 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _471 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
    float _478 = (_471 * ((_390.x * cbMtdParam._m0[12u].x) - _369)) + _369;
    float _479 = (_471 * ((_390.y * cbMtdParam._m0[12u].y) - _370)) + _370;
    float _480 = (_471 * ((_390.z * cbMtdParam._m0[12u].z) - _371)) + _371;
    vec4 _497 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _301) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _302) + cbTextureTilingScale._m0[3u].w));
    vec4 _519 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].z * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].w * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _521 = _519.x;
    float _531 = dot(vec4(_521, _519.yzw), vec4(cbMtdParam._m0[30u].yzw, 0.0));
    float _545 = ((cbMtdParam._m0[25u].z * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _409.y) * 2.0) - ((((_521 - _531) * cbMtdParam._m0[23u].w) + _531) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3928 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _546 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
    float _556 = (_338.x * cbMtdParam._m0[9u].x) * ((_546 * ((_497.x * cbMtdParam._m0[13u].x) - _478)) + _478);
    float _557 = (_338.y * cbMtdParam._m0[9u].y) * ((_546 * ((_497.y * cbMtdParam._m0[13u].y) - _479)) + _479);
    float _558 = (_338.z * cbMtdParam._m0[9u].z) * ((_546 * ((_497.z * cbMtdParam._m0[13u].z) - _480)) + _480);
    float _562 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _315.x) * _556;
    float _565 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _315.y) * _557;
    float _568 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _315.z) * _558;
    float _576 = (((_556 - _562) * (isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0)))) + _562) * 4.55000019073486328125;
    float _578 = (((_557 - _565) * (isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0)))) + _565) * 4.55000019073486328125;
    float _580 = (((_558 - _568) * (isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0)))) + _568) * 4.55000019073486328125;
    vec4 _597 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _301) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _302) + cbTextureTilingScale._m0[20u].w));
    vec4 _620 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _301) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _302) + cbTextureTilingScale._m0[4u].w));
    vec4 _637 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _639 = _637.x;
    float _640 = _637.y;
    float _641 = _637.z;
    float _648 = ((_620.x - _639) * _471) + _639;
    float _649 = ((_620.y - _640) * _471) + _640;
    float _650 = ((_620.z - _641) * _471) + _641;
    vec4 _662 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _301) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _302) + cbTextureTilingScale._m0[2u].w));
    float _675 = ((_662.z - _650) * _546) + _650;
    float _678 = ((((_662.x - _648) * _546) + _648) * 2.0) + (-1.0);
    float _679 = ((((_662.y - _649) * _546) + _649) * 2.0) + (-1.0);
    float _680 = dot(vec2(_678, _679), vec2(_678, _679));
    float _3939 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _685 = sqrt(1.0 - (isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0))));
    vec4 _699 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _724 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _301) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _302) + cbTextureTilingScale._m0[11u].w));
    float _726 = _724.x;
    float _727 = 1.0 - _726;
    float _743 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_726 - _727) * cbMtdParam._m0[24u].z) + _727) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3950 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _744 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
    float _751 = (_744 * (cbMtdParam._m0[17u].x - _576)) + _576;
    float _752 = (_744 * (cbMtdParam._m0[17u].y - _578)) + _578;
    float _753 = (_744 * (cbMtdParam._m0[17u].z - _580)) + _580;
    vec4 _779 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _781 = _779.x;
    float _798 = ((texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _301) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _302) + cbTextureTilingScale._m0[9u].w)).x - _781) * _471) + _781;
    float _815 = ((texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _301) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _302) + cbTextureTilingScale._m0[21u].w)).x - _798) * _546) + _798;
    float _819 = ((texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _815) * cbMtdParam._m0[19u].z) + _815;
    float _821 = _819 - (_819 * _744);
    float _826 = (((_597.z - _675) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _675;
    float _830 = ((_699.z - _826) * cbMtdParam._m0[19u].w) + _826;
    vec4 _843 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _301) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _302) + cbTextureTilingScale._m0[15u].w));
    float _850 = (_843.x * 2.0) + (-1.0);
    float _851 = (_843.y * 2.0) + (-1.0);
    float _852 = dot(vec2(_850, _851), vec2(_850, _851));
    float _3961 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
    float _860 = (_744 * (_843.z - _830)) + _830;
    float _869 = (_678 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_597.x * 2.0) + (-1.0)))) + (((_699.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w);
    float _870 = (_679 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_597.y * 2.0) + (-1.0)))) + (((_699.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w);
    float _882 = (((_850 - _869) + (cbMtdParam._m0[21u].x * _869)) * _744) + _869;
    float _883 = (((_851 - _870) + (cbMtdParam._m0[21u].x * _870)) * _744) + _870;
    float _884 = (_744 * (sqrt(1.0 - (isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0)))) - _685)) + _685;
    float _888 = cbMtdParam._m0[22u].x + _699.w;
    float _890 = gl_FragCoord.x * 0.125;
    float _892 = gl_FragCoord.y * 0.125;
    float _902 = fma(_884, _248 * NORMAL.x, fma(_883, _255 * TANGENT.x, (_241 * _233) * _882));
    float _905 = fma(_884, _248 * NORMAL.y, fma(_883, _255 * TANGENT.y, (_241 * _234) * _882));
    float _908 = fma(_884, _248 * NORMAL.z, fma(_883, _255 * TANGENT.z, (_241 * _235) * _882));
    float _912 = inversesqrt(dot(vec3(_902, _905, _908), vec3(_902, _905, _908)));
    float _913 = _912 * _902;
    float _914 = _912 * _905;
    float _915 = _912 * _908;
    float _3972 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
    float _916 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
    float _3983 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
    float _3994 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _4005 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
    float _4016 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _4027 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
    float _921 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
    if (!(cbMtdParam._m0[25u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_890, _892)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _939 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _980 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _990 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _980);
    float _991 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _980);
    float _992 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _980);
    float _996 = inversesqrt(dot(vec3(_990, _991, _992), vec3(_990, _991, _992)));
    float _997 = _990 * _996;
    float _998 = _991 * _996;
    float _999 = _992 * _996;
    vec4 _1001 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_890, _892));
    float _1003 = _1001.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1175 = sqrt(((_990 * _990) + (_991 * _991)) + (_992 * _992));
        float _1181 = (cbMatDynParam._m0[5u].x * _1175) + cbMatDynParam._m0[5u].y;
        float _4038 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1182 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _1186 = (cbMatDynParam._m0[5u].z * _1175) + cbMatDynParam._m0[5u].w;
        float _4049 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0))) - _1182)) + _1182) < ((_1003 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1014 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1015 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1033 = fma(_915, cbSceneParam._m0[5u].z, fma(_914, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _913));
    float _1036 = fma(_915, cbSceneParam._m0[6u].z, fma(_914, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _913));
    float _1039 = fma(_915, cbSceneParam._m0[7u].z, fma(_914, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _913));
    uint _1052 = _282 + 9u;
    uint _1053 = _1052 + uint(cbMatDynParam._m0[0u].w);
    float _1059 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0)))) * cbInstanceData._m0[_1053].x;
    float _1060 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0)))) * cbInstanceData._m0[_1053].y;
    float _1061 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0)))) * cbInstanceData._m0[_1053].z;
    float _4060 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
    float _1062 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
    float _4071 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
    float _1063 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
    float _4082 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
    float _1064 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
    float _1065 = 1.0 - _921;
    float _1066 = _1062 * _1065;
    float _1067 = _1063 * _1065;
    float _1068 = _1064 * _1065;
    float _1073 = (_1062 + (-0.039999999105930328369140625)) * _921;
    float _1074 = (_1063 + (-0.039999999105930328369140625)) * _921;
    float _1075 = (_1064 + (-0.039999999105930328369140625)) * _921;
    float _1076 = _1073 + 0.039999999105930328369140625;
    float _1078 = _1074 + 0.039999999105930328369140625;
    float _1079 = _1075 + 0.039999999105930328369140625;
    vec4 _1088 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1014, cbSceneParam._m0[86u].y * _1015));
    float _1092 = ((isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0))) * TEXCOORD_5.w) * _1088.x;
    float _1093 = dot(vec3(_913, _914, _915), vec3(_997, _998, _999));
    float _1096 = _1093 * 2.0;
    float _1100 = (_1096 * _913) - _997;
    float _1101 = (_1096 * _914) - _998;
    float _1102 = (_1096 * _915) - _999;
    float _1106 = abs(dot(vec3(_997, _998, _999), vec3(_913, _914, _915)));
    float _4093 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
    float _1108 = sqrt(_916);
    float _1121 = exp2((_1108 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1108 * 3.0));
    float _1127 = (1.0 - _1121) * ((_1108 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1128 = _1121 * _1108;
    float _1156 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1160 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1164 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1492;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1217 = fma(_1164, cbModelParam._m0[26u].z, fma(_1160, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1156));
        float _1221 = fma(_1164, cbModelParam._m0[27u].z, fma(_1160, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1156));
        float _1225 = fma(_1164, cbModelParam._m0[28u].z, fma(_1160, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1156));
        float _1250 = _1156 + _913;
        float _1251 = _1160 + _914;
        float _1252 = _1164 + _915;
        float _1262 = fma(_1252, cbModelParam._m0[26u].z, fma(_1251, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1250)) - _1217;
        float _1263 = fma(_1252, cbModelParam._m0[27u].z, fma(_1251, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1250)) - _1221;
        float _1264 = fma(_1252, cbModelParam._m0[28u].z, fma(_1251, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1250)) - _1225;
        float _1268 = inversesqrt(dot(vec3(_1262, _1263, _1264), vec3(_1262, _1263, _1264)));
        float _1281 = ((_1268 * _1262) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1217 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1282 = ((_1268 * _1263) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1221 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1283 = ((_1268 * _1264) / cbModelParam._m0[34u].z) + ((((((_1225 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1286 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1281, _1282, _1283), 0.0);
        vec4 _1293 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1281, _1282, _1283), 0.0);
        vec4 _1300 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1281, _1282, _1283), 0.0);
        vec4 _1307 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1281, _1282, _1283), 0.0);
        float _1320 = exp2((_1286.w + (-0.5)) * 20.0) * 2.0;
        float _1321 = _1320 * (_1286.x + (-0.5));
        float _1322 = _1320 * (_1286.y + (-0.5));
        float _1323 = _1320 * (_1286.z + (-0.5));
        float _1330 = exp2((_1293.w + (-0.5)) * 20.0) * 2.0;
        float _1331 = _1330 * (_1293.x + (-0.5));
        float _1332 = _1330 * (_1293.y + (-0.5));
        float _1333 = _1330 * (_1293.z + (-0.5));
        float _1340 = exp2((_1300.w + (-0.5)) * 20.0) * 2.0;
        float _1341 = _1340 * (_1300.x + (-0.5));
        float _1342 = _1340 * (_1300.y + (-0.5));
        float _1343 = _1340 * (_1300.z + (-0.5));
        float _1350 = exp2((_1307.w + (-0.5)) * 20.0) * 2.0;
        float _1351 = _1350 * (_1307.x + (-0.5));
        float _1352 = _1350 * (_1307.y + (-0.5));
        float _1353 = _1350 * (_1307.z + (-0.5));
        float _1354 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1355 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1356 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1357 = _1321 * 0.5;
        float _1358 = _1331 * 0.5;
        float _1359 = _1341 * 0.5;
        float _1360 = dot(vec3(_1357, _1358, _1359), vec3(_1357, _1358, _1359));
        float _1365 = (_1360 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1360);
        float _1374 = (dot(vec3(_913, _914, _915), vec3(_1365 * _1357, _1365 * _1358, _1365 * _1359)) + 1.0) * 0.5;
        float _4119 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1384 = sqrt(((_1358 * _1358) + (_1357 * _1357)) + (_1359 * _1359)) / (_1354 + 9.9999997473787516355514526367188e-06);
        float _4130 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1385 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
        float _1386 = _1385 * 2.0;
        float _1390 = (1.0 - _1385) / (_1385 + 1.0);
        float _4141 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1391 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
        float _1400 = ((((1.0 - _1391) * (_1386 + 2.0)) * exp2(log2(isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0))) * (_1386 + 1.0))) + _1391) * _1354;
        float _1401 = _1322 * 0.5;
        float _1402 = _1332 * 0.5;
        float _1403 = _1342 * 0.5;
        float _1404 = dot(vec3(_1401, _1402, _1403), vec3(_1401, _1402, _1403));
        float _1409 = (_1404 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1404);
        float _1417 = (dot(vec3(_913, _914, _915), vec3(_1409 * _1401, _1409 * _1402, _1409 * _1403)) + 1.0) * 0.5;
        float _4152 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1426 = sqrt(((_1402 * _1402) + (_1401 * _1401)) + (_1403 * _1403)) / (_1355 + 9.9999997473787516355514526367188e-06);
        float _4163 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1427 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
        float _1428 = _1427 * 2.0;
        float _1432 = (1.0 - _1427) / (_1427 + 1.0);
        float _4174 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1433 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
        float _1442 = ((((1.0 - _1433) * (_1428 + 2.0)) * exp2(log2(isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0))) * (_1428 + 1.0))) + _1433) * _1355;
        float _1443 = _1323 * 0.5;
        float _1444 = _1333 * 0.5;
        float _1445 = _1343 * 0.5;
        float _1446 = dot(vec3(_1443, _1444, _1445), vec3(_1443, _1444, _1445));
        float _1451 = (_1446 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1446);
        float _1459 = (dot(vec3(_913, _914, _915), vec3(_1451 * _1443, _1451 * _1444, _1451 * _1445)) + 1.0) * 0.5;
        float _4185 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1468 = sqrt(((_1444 * _1444) + (_1443 * _1443)) + (_1445 * _1445)) / (_1356 + 9.9999997473787516355514526367188e-06);
        float _4196 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1469 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _1470 = _1469 * 2.0;
        float _1474 = (1.0 - _1469) / (_1469 + 1.0);
        float _4207 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1475 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
        float _1484 = ((((1.0 - _1475) * (_1470 + 2.0)) * exp2(log2(isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0))) * (_1470 + 1.0))) + _1475) * _1356;
        _1492 = _1323;
        _1494 = _1322;
        _1495 = _1321;
        _1496 = _1333;
        _1497 = _1332;
        _1498 = _1331;
        _1499 = _1343;
        _1500 = _1342;
        _1501 = _1341;
        _1502 = _1356;
        _1503 = _1355;
        _1504 = _1354;
        _1505 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0)));
        _1506 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0)));
        _1507 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0)));
    }
    else
    {
        _1492 = _1493;
        _1494 = _1493;
        _1495 = _1493;
        _1496 = _1493;
        _1497 = _1493;
        _1498 = _1493;
        _1499 = _1493;
        _1500 = _1493;
        _1501 = _1493;
        _1502 = _1493;
        _1503 = _1493;
        _1504 = _1493;
        _1505 = 0.0;
        _1506 = 0.0;
        _1507 = 0.0;
    }
    float _1800;
    float _1801;
    float _1802;
    float _1803;
    float _1804;
    float _1805;
    float _1806;
    float _1807;
    float _1808;
    float _1809;
    float _1810;
    float _1811;
    float _1812;
    float _1813;
    float _1814;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1531 = fma(_1164, cbModelParam._m0[30u].z, fma(_1160, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1156));
        float _1535 = fma(_1164, cbModelParam._m0[31u].z, fma(_1160, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1156));
        float _1539 = fma(_1164, cbModelParam._m0[32u].z, fma(_1160, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1156));
        float _1562 = _1156 + _913;
        float _1563 = _1160 + _914;
        float _1564 = _1164 + _915;
        float _1574 = fma(_1564, cbModelParam._m0[30u].z, fma(_1563, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1562)) - _1531;
        float _1575 = fma(_1564, cbModelParam._m0[31u].z, fma(_1563, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1562)) - _1535;
        float _1576 = fma(_1564, cbModelParam._m0[32u].z, fma(_1563, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1562)) - _1539;
        float _1580 = inversesqrt(dot(vec3(_1574, _1575, _1576), vec3(_1574, _1575, _1576)));
        float _1593 = ((_1580 * _1574) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1531 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1594 = ((_1580 * _1575) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1535 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1595 = ((_1580 * _1576) / cbModelParam._m0[35u].z) + ((((((_1539 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1597 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1593, _1594, _1595), 0.0);
        vec4 _1604 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1593, _1594, _1595), 0.0);
        vec4 _1611 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1593, _1594, _1595), 0.0);
        vec4 _1618 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1593, _1594, _1595), 0.0);
        float _1630 = exp2((_1597.w + (-0.5)) * 20.0) * 2.0;
        float _1631 = _1630 * (_1597.x + (-0.5));
        float _1632 = _1630 * (_1597.y + (-0.5));
        float _1633 = _1630 * (_1597.z + (-0.5));
        float _1640 = exp2((_1604.w + (-0.5)) * 20.0) * 2.0;
        float _1641 = _1640 * (_1604.x + (-0.5));
        float _1642 = _1640 * (_1604.y + (-0.5));
        float _1643 = _1640 * (_1604.z + (-0.5));
        float _1650 = exp2((_1611.w + (-0.5)) * 20.0) * 2.0;
        float _1651 = _1650 * (_1611.x + (-0.5));
        float _1652 = _1650 * (_1611.y + (-0.5));
        float _1653 = _1650 * (_1611.z + (-0.5));
        float _1660 = exp2((_1618.w + (-0.5)) * 20.0) * 2.0;
        float _1661 = _1660 * (_1618.x + (-0.5));
        float _1662 = _1660 * (_1618.y + (-0.5));
        float _1663 = _1660 * (_1618.z + (-0.5));
        float _1664 = isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0));
        float _1665 = isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0));
        float _1666 = isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0));
        float _1667 = _1631 * 0.5;
        float _1668 = _1641 * 0.5;
        float _1669 = _1651 * 0.5;
        float _1670 = dot(vec3(_1667, _1668, _1669), vec3(_1667, _1668, _1669));
        float _1675 = (_1670 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1670);
        float _1683 = (dot(vec3(_913, _914, _915), vec3(_1675 * _1667, _1675 * _1668, _1675 * _1669)) + 1.0) * 0.5;
        float _4248 = isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0));
        float _1692 = sqrt(((_1668 * _1668) + (_1667 * _1667)) + (_1669 * _1669)) / (_1664 + 9.9999997473787516355514526367188e-06);
        float _4259 = isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0));
        float _1693 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
        float _1694 = _1693 * 2.0;
        float _1698 = (1.0 - _1693) / (_1693 + 1.0);
        float _4270 = isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0));
        float _1699 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
        float _1708 = ((((1.0 - _1699) * (_1694 + 2.0)) * exp2(log2(isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0))) * (_1694 + 1.0))) + _1699) * _1664;
        float _1709 = _1632 * 0.5;
        float _1710 = _1642 * 0.5;
        float _1711 = _1652 * 0.5;
        float _1712 = dot(vec3(_1709, _1710, _1711), vec3(_1709, _1710, _1711));
        float _1717 = (_1712 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1712);
        float _1725 = (dot(vec3(_913, _914, _915), vec3(_1717 * _1709, _1717 * _1710, _1717 * _1711)) + 1.0) * 0.5;
        float _4281 = isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0));
        float _1734 = sqrt(((_1710 * _1710) + (_1709 * _1709)) + (_1711 * _1711)) / (_1665 + 9.9999997473787516355514526367188e-06);
        float _4292 = isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0));
        float _1735 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
        float _1736 = _1735 * 2.0;
        float _1740 = (1.0 - _1735) / (_1735 + 1.0);
        float _4303 = isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0));
        float _1741 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
        float _1750 = ((((1.0 - _1741) * (_1736 + 2.0)) * exp2(log2(isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0))) * (_1736 + 1.0))) + _1741) * _1665;
        float _1751 = _1633 * 0.5;
        float _1752 = _1643 * 0.5;
        float _1753 = _1653 * 0.5;
        float _1754 = dot(vec3(_1751, _1752, _1753), vec3(_1751, _1752, _1753));
        float _1759 = (_1754 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1754);
        float _1767 = (dot(vec3(_913, _914, _915), vec3(_1759 * _1751, _1759 * _1752, _1759 * _1753)) + 1.0) * 0.5;
        float _4314 = isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0));
        float _1776 = sqrt(((_1752 * _1752) + (_1751 * _1751)) + (_1753 * _1753)) / (_1666 + 9.9999997473787516355514526367188e-06);
        float _4325 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
        float _1777 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
        float _1778 = _1777 * 2.0;
        float _1782 = (1.0 - _1777) / (_1777 + 1.0);
        float _4336 = isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0));
        float _1783 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
        float _1792 = ((((1.0 - _1783) * (_1778 + 2.0)) * exp2(log2(isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0))) * (_1778 + 1.0))) + _1783) * _1666;
        _1800 = _1633;
        _1801 = _1632;
        _1802 = _1631;
        _1803 = _1643;
        _1804 = _1642;
        _1805 = _1641;
        _1806 = _1653;
        _1807 = _1652;
        _1808 = _1651;
        _1809 = _1666;
        _1810 = _1665;
        _1811 = _1664;
        _1812 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0)));
        _1813 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0)));
        _1814 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0)));
    }
    else
    {
        _1800 = _1493;
        _1801 = _1493;
        _1802 = _1493;
        _1803 = _1493;
        _1804 = _1493;
        _1805 = _1493;
        _1806 = _1493;
        _1807 = _1493;
        _1808 = _1493;
        _1809 = _1493;
        _1810 = _1493;
        _1811 = _1493;
        _1812 = 0.0;
        _1813 = 0.0;
        _1814 = 0.0;
    }
    float _1824 = (cbModelParam._m0[1u].x * (_1812 - _1505)) + _1505;
    float _1825 = (cbModelParam._m0[1u].x * (_1813 - _1506)) + _1506;
    float _1826 = (cbModelParam._m0[1u].x * (_1814 - _1507)) + _1507;
    float _1847 = fma(_1826, cbSceneParam._m0[89u].z, fma(_1825, cbSceneParam._m0[89u].y, _1824 * cbSceneParam._m0[89u].x));
    float _1850 = fma(_1826, cbSceneParam._m0[90u].z, fma(_1825, cbSceneParam._m0[90u].y, _1824 * cbSceneParam._m0[90u].x));
    float _1853 = fma(_1826, cbSceneParam._m0[91u].z, fma(_1825, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1824));
    float _1868 = _1100 * 0.5;
    float _1869 = _1101 * 0.5;
    float _1870 = _1102 * 0.5;
    float _1871 = dot(vec4(_1868, _1869, _1870, 1.0), vec4(_1802, _1805, _1808, _1811));
    float _1874 = dot(vec4(_1868, _1869, _1870, 1.0), vec4(_1801, _1804, _1807, _1810));
    float _1877 = dot(vec4(_1868, _1869, _1870, 1.0), vec4(_1800, _1803, _1806, _1809));
    float _1911;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1884 = dot(vec4(_1868, _1869, _1870, 1.0), vec4(_1492, _1496, _1499, _1502));
        float _1888 = dot(vec4(_1868, _1869, _1870, 1.0), vec4(_1494, _1497, _1500, _1503));
        float _1892 = dot(vec4(_1868, _1869, _1870, 1.0), vec4(_1495, _1498, _1501, _1504));
        float _1899 = dot(vec4(cbModelParam._m0[39u]), vec4(_1868, _1869, _1870, 1.0));
        _1911 = dot(vec3(isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0)), isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0)), isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1899) ? 0.0 : (isnan(0.0) ? _1899 : max(0.0, _1899))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1911 = 1.0;
    }
    float _1922;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1913 = dot(vec4(cbModelParam._m0[40u]), vec4(_1868, _1869, _1870, 1.0));
        _1922 = dot(vec3(isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0)), isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0)), isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1913) ? 0.0 : (isnan(0.0) ? _1913 : max(0.0, _1913))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1922 = 1.0;
    }
    float _1926 = (_1922 * cbModelParam._m0[1u].x) + (_1911 * (1.0 - cbModelParam._m0[1u].x));
    float _1936 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _916);
    float _1937 = isnan(_1936) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1936 : min(cbModelParam._m0[25u].z, _1936));
    float _2018;
    float _2020;
    float _2022;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1985 = fma(_1164, cbModelParam._m0[13u].z, fma(_1160, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1156)) + cbModelParam._m0[13u].w;
        float _1989 = fma(_1164, cbModelParam._m0[14u].z, fma(_1160, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1156)) + cbModelParam._m0[14u].w;
        float _1993 = fma(_1164, cbModelParam._m0[15u].z, fma(_1160, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1156)) + cbModelParam._m0[15u].w;
        float _1996 = fma(_1102, cbModelParam._m0[13u].z, fma(_1101, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1100));
        float _1999 = fma(_1102, cbModelParam._m0[14u].z, fma(_1101, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1100));
        float _2002 = fma(_1102, cbModelParam._m0[15u].z, fma(_1101, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1100));
        float _2030;
        if (_1996 > 0.0)
        {
            _2030 = abs((1.0 - _1985) / _1996);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1996 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1985 + 1.0) / _1996);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _2030 = frontier_phi_19_17_ladder;
        }
        float _2233;
        if (_1999 > 0.0)
        {
            _2233 = abs((1.0 - _1989) / _1999);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1999 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1989 + 1.0) / _1999);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2233 = frontier_phi_28_24_ladder;
        }
        float _2487;
        if (_2002 > 0.0)
        {
            _2487 = abs((1.0 - _1993) / _2002);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2002 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1993 + 1.0) / _2002);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2487 = frontier_phi_40_35_ladder;
        }
        float _2489 = isnan(_2233) ? _2030 : (isnan(_2030) ? _2233 : min(_2030, _2233));
        float _2490 = isnan(_2487) ? _2489 : (isnan(_2489) ? _2487 : min(_2489, _2487));
        float _2494 = (_2490 * _1996) + _1985;
        float _2495 = (_2490 * _1999) + _1989;
        float _2496 = (_2490 * _2002) + _1993;
        float _2497 = _2490 * 9.9999997473787516355514526367188e-05;
        float _2499 = (-1.0) - _2497;
        float _2501 = _2497 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2496 > _2501) || ((_2496 < _2499) || ((_2495 > _2501) || ((_2495 < _2499) || ((_2494 < _2499) || (_2494 > _2501))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2624 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2496, cbModelParam._m0[9u].z, fma(_2495, cbModelParam._m0[9u].y, _2494 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2496, cbModelParam._m0[10u].z, fma(_2495, cbModelParam._m0[10u].y, _2494 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2496, cbModelParam._m0[11u].z, fma(_2495, cbModelParam._m0[11u].y, _2494 * cbModelParam._m0[11u].x))), _1937);
            frontier_phi_18_40_ladder = _2624.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2624.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2624.x * cbModelParam._m0[1u].y;
        }
        _2018 = frontier_phi_18_40_ladder_2;
        _2020 = frontier_phi_18_40_ladder_1;
        _2022 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _2006 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1100, _1101, _1102), _1937);
        _2018 = _2006.x * cbModelParam._m0[1u].y;
        _2020 = _2006.y * cbModelParam._m0[1u].y;
        _2022 = _2006.z * cbModelParam._m0[1u].y;
    }
    float _2026 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _916);
    float _2027 = isnan(_2026) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2026 : min(cbModelParam._m0[25u].w, _2026));
    float _2117;
    float _2119;
    float _2121;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2081 = fma(_1164, cbModelParam._m0[21u].z, fma(_1160, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1156)) + cbModelParam._m0[21u].w;
        float _2085 = fma(_1164, cbModelParam._m0[22u].z, fma(_1160, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1156)) + cbModelParam._m0[22u].w;
        float _2089 = fma(_1164, cbModelParam._m0[23u].z, fma(_1160, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1156)) + cbModelParam._m0[23u].w;
        float _2092 = fma(_1102, cbModelParam._m0[21u].z, fma(_1101, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1100));
        float _2095 = fma(_1102, cbModelParam._m0[22u].z, fma(_1101, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1100));
        float _2098 = fma(_1102, cbModelParam._m0[23u].z, fma(_1101, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1100));
        float _2238;
        if (_2092 > 0.0)
        {
            _2238 = abs((1.0 - _2081) / _2092);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_2092 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_2081 + 1.0) / _2092);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2238 = frontier_phi_30_26_ladder;
        }
        float _2514;
        if (_2095 > 0.0)
        {
            _2514 = abs((1.0 - _2085) / _2095);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_2095 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_2085 + 1.0) / _2095);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2514 = frontier_phi_42_37_ladder;
        }
        float _2727;
        if (_2098 > 0.0)
        {
            _2727 = abs((1.0 - _2089) / _2098);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_2098 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_2089 + 1.0) / _2098);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2727 = frontier_phi_51_48_ladder;
        }
        float _2729 = isnan(_2514) ? _2238 : (isnan(_2238) ? _2514 : min(_2238, _2514));
        float _2730 = isnan(_2727) ? _2729 : (isnan(_2729) ? _2727 : min(_2729, _2727));
        float _2734 = (_2730 * _2092) + _2081;
        float _2735 = (_2730 * _2095) + _2085;
        float _2736 = (_2730 * _2098) + _2089;
        float _2737 = _2730 * 9.9999997473787516355514526367188e-05;
        float _2738 = (-1.0) - _2737;
        float _2740 = _2737 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2736 > _2740) || ((_2736 < _2738) || ((_2735 > _2740) || ((_2735 < _2738) || ((_2734 < _2738) || (_2734 > _2740))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2935 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2736, cbModelParam._m0[17u].z, fma(_2735, cbModelParam._m0[17u].y, _2734 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2736, cbModelParam._m0[18u].z, fma(_2735, cbModelParam._m0[18u].y, _2734 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2736, cbModelParam._m0[19u].z, fma(_2735, cbModelParam._m0[19u].y, _2734 * cbModelParam._m0[19u].x))), _2027);
            frontier_phi_27_51_ladder = _2935.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2935.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2935.x * cbModelParam._m0[1u].z;
        }
        _2117 = frontier_phi_27_51_ladder_2;
        _2119 = frontier_phi_27_51_ladder_1;
        _2121 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _2101 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1100, _1101, _1102), _2027);
        _2117 = _2101.x * cbModelParam._m0[1u].z;
        _2119 = _2101.y * cbModelParam._m0[1u].z;
        _2121 = _2101.z * cbModelParam._m0[1u].z;
    }
    float _2134 = (((_1127 * _1076) + _1128) * _1092) * ((cbModelParam._m0[1u].w * (_2117 - _2018)) + _2018);
    float _2136 = (((_1127 * _1078) + _1128) * _1092) * ((cbModelParam._m0[1u].w * (_2119 - _2020)) + _2020);
    float _2138 = (((_1127 * _1079) + _1128) * _1092) * ((cbModelParam._m0[1u].w * (_2121 - _2022)) + _2022);
    float _2141 = fma(_2138, cbSceneParam._m0[89u].z, fma(_2136, cbSceneParam._m0[89u].y, _2134 * cbSceneParam._m0[89u].x));
    float _2144 = fma(_2138, cbSceneParam._m0[90u].z, fma(_2136, cbSceneParam._m0[90u].y, _2134 * cbSceneParam._m0[90u].x));
    float _2147 = fma(_2138, cbSceneParam._m0[91u].z, fma(_2136, cbSceneParam._m0[91u].y, _2134 * cbSceneParam._m0[91u].x));
    uvec4 _2157 = floatBitsToUint(cbInstanceData._m0[_282 + 5u]);
    uint _2159 = _2157.x * 14u;
    uint _2160 = _2159 + 13u;
    float _2167 = _1092 + (-1.0);
    float _2172 = (cbLight._m0[_2160].x * _2167) + 1.0;
    float _2173 = (cbLight._m0[_2160].y * _2167) + 1.0;
    float _2174 = (cbLight._m0[_2160].z * _2167) + 1.0;
    float _2175 = (cbLight._m0[_2160].w * _2167) + 1.0;
    uint _2176 = _2159 + 5u;
    float _2182 = isnan(1.0) ? _2173 : (isnan(_2173) ? 1.0 : min(_2173, 1.0));
    uint _2186 = _2159 + 4u;
    float _2192 = isnan(1.0) ? _2172 : (isnan(_2172) ? 1.0 : min(_2172, 1.0));
    uint _2196 = _2159 | 1u;
    float _2207 = dot(vec3(cbLight._m0[_2159].xyz), vec3(_913, _914, _915));
    float _2210 = dot(vec3(cbLight._m0[_2196].xyz), vec3(_913, _914, _915));
    float _4472 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
    float _4483 = isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0));
    float _2215 = (isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0))) * 0.3183098733425140380859375;
    float _2217 = (isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0))) * 0.3183098733425140380859375;
    float _2224 = ((cbLight._m0[_2176].x * _2182) * _2217) + ((cbLight._m0[_2186].x * _2192) * _2215);
    float _2225 = ((_2182 * cbLight._m0[_2176].y) * _2217) + ((_2192 * cbLight._m0[_2186].y) * _2215);
    float _2226 = ((_2182 * cbLight._m0[_2176].z) * _2217) + ((_2192 * cbLight._m0[_2186].z) * _2215);
    uvec4 _2230 = floatBitsToUint(cbLight._m0[_2159 + 12u]);
    bool _2232 = _2230.x == 0u;
    float _2243;
    float _2245;
    float _2247;
    if (_2232)
    {
        _2243 = _2224;
        _2245 = _2225;
        _2247 = _2226;
    }
    else
    {
        uint _2251 = _2159 + 6u;
        float _2267 = (dot(vec3(cbLight._m0[_2159 + 2u].xyz), vec3(_913, _914, _915)) * 0.5) + 0.5;
        float _2268 = _2267 * _2267;
        float _4494 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
        float _2269 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
        float _2270 = isnan(1.0) ? _2174 : (isnan(_2174) ? 1.0 : min(_2174, 1.0));
        _2243 = (((cbLight._m0[_2251].x * 0.3183098733425140380859375) * _2269) * _2270) + _2224;
        _2245 = (((cbLight._m0[_2251].y * 0.3183098733425140380859375) * _2269) * _2270) + _2225;
        _2247 = (((cbLight._m0[_2251].z * 0.3183098733425140380859375) * _2269) * _2270) + _2226;
    }
    bool _2250 = _2230.y == 0u;
    float _2288;
    float _2290;
    float _2292;
    if (_2250)
    {
        _2288 = _2243;
        _2290 = _2245;
        _2292 = _2247;
    }
    else
    {
        uint _2458 = _2159 + 7u;
        float _2474 = (dot(vec3(cbLight._m0[_2159 + 3u].xyz), vec3(_913, _914, _915)) * 0.5) + 0.5;
        float _2475 = _2474 * _2474;
        float _4510 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
        float _2476 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
        float _2477 = isnan(1.0) ? _2175 : (isnan(_2175) ? 1.0 : min(_2175, 1.0));
        _2288 = (((cbLight._m0[_2458].x * 0.3183098733425140380859375) * _2476) * _2477) + _2243;
        _2290 = (((cbLight._m0[_2458].y * 0.3183098733425140380859375) * _2476) * _2477) + _2245;
        _2292 = (((cbLight._m0[_2458].z * 0.3183098733425140380859375) * _2476) * _2477) + _2247;
    }
    uint _2295 = _2159 + 8u;
    float _2308 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2159].w)) * _916) * 0.949999988079071044921875);
    float _2309 = _2308 * _2308;
    float _2310 = cbLight._m0[_2159].x + _997;
    float _2311 = cbLight._m0[_2159].y + _998;
    float _2312 = cbLight._m0[_2159].z + _999;
    float _2316 = inversesqrt(dot(vec3(_2310, _2311, _2312), vec3(_2310, _2311, _2312)));
    float _2317 = _2316 * _2310;
    float _2318 = _2316 * _2311;
    float _2319 = _2316 * _2312;
    float _2320 = dot(vec3(_913, _914, _915), vec3(cbLight._m0[_2159].xyz));
    float _4526 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0));
    float _2323 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
    float _4537 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
    float _2324 = isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0));
    float _2325 = dot(vec3(_913, _914, _915), vec3(_2317, _2318, _2319));
    float _4548 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
    float _2328 = isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0));
    float _2329 = dot(vec3(cbLight._m0[_2159].xyz), vec3(_2317, _2318, _2319));
    float _4559 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
    float _2333 = _2309 * _2309;
    float _2337 = ((_2328 * _2328) * (_2333 + (-1.0))) + 1.0;
    float _2345 = exp2(log2(1.0 - (isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0)))) * 5.0);
    float _2346 = 0.959999978542327880859375 - _1073;
    float _2348 = 0.959999978542327880859375 - _1074;
    float _2349 = 0.959999978542327880859375 - _1075;
    float _2356 = 1.0 - _2309;
    float _2367 = (0.5 / (((_2324 * ((_2323 * _2356) + _2309)) + 9.9999999392252902907785028219223e-09) + (((_2324 * _2356) + _2309) * _2323))) * _2323;
    float _4570 = isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : max(_2367, 0.0));
    float _2369 = (isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0))) * (_2333 / ((_2337 * _2337) * 3.141590118408203125));
    uint _2380 = _2159 + 9u;
    float _2391 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2196].w)) * _916) * 0.949999988079071044921875);
    float _2392 = _2391 * _2391;
    float _2393 = cbLight._m0[_2196].x + _997;
    float _2394 = cbLight._m0[_2196].y + _998;
    float _2395 = cbLight._m0[_2196].z + _999;
    float _2399 = inversesqrt(dot(vec3(_2393, _2394, _2395), vec3(_2393, _2394, _2395)));
    float _2400 = _2399 * _2393;
    float _2401 = _2399 * _2394;
    float _2402 = _2399 * _2395;
    float _2403 = dot(vec3(_913, _914, _915), vec3(cbLight._m0[_2196].xyz));
    float _4581 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
    float _2406 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
    float _2407 = dot(vec3(_913, _914, _915), vec3(_2400, _2401, _2402));
    float _4592 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
    float _2410 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
    float _2411 = dot(vec3(cbLight._m0[_2196].xyz), vec3(_2400, _2401, _2402));
    float _4603 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0));
    float _2415 = _2392 * _2392;
    float _2419 = ((_2410 * _2410) * (_2415 + (-1.0))) + 1.0;
    float _2426 = exp2(log2(1.0 - (isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0)))) * 5.0);
    float _2433 = 1.0 - _2392;
    float _2443 = (0.5 / (((_2324 * ((_2406 * _2433) + _2392)) + 9.9999999392252902907785028219223e-09) + (((_2324 * _2433) + _2392) * _2406))) * _2406;
    float _4614 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
    float _2445 = (isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0))) * (_2415 / ((_2419 * _2419) * 3.141590118408203125));
    float _2455 = (((((_2426 * _2346) + _1076) * cbLight._m0[_2380].x) * _2445) * _2182) + (((((_2345 * _2346) + _1076) * cbLight._m0[_2295].x) * _2369) * _2192);
    float _2456 = (((((_2426 * _2348) + _1078) * cbLight._m0[_2380].y) * _2445) * _2182) + (((((_2345 * _2348) + _1078) * cbLight._m0[_2295].y) * _2369) * _2192);
    float _2457 = (((((_2426 * _2349) + _1079) * cbLight._m0[_2380].z) * _2445) * _2182) + (((((_2345 * _2349) + _1079) * cbLight._m0[_2295].z) * _2369) * _2192);
    float _2519;
    float _2521;
    float _2523;
    if (_2232)
    {
        _2519 = _2455;
        _2521 = _2456;
        _2523 = _2457;
    }
    else
    {
        uint _2525 = _2159 + 2u;
        uint _2529 = _2159 + 10u;
        float _2543 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2525].w)) * _916) * 0.949999988079071044921875);
        float _2544 = _2543 * _2543;
        float _2545 = cbLight._m0[_2525].x + _997;
        float _2546 = cbLight._m0[_2525].y + _998;
        float _2547 = cbLight._m0[_2525].z + _999;
        float _2551 = inversesqrt(dot(vec3(_2545, _2546, _2547), vec3(_2545, _2546, _2547)));
        float _2552 = _2551 * _2545;
        float _2553 = _2551 * _2546;
        float _2554 = _2551 * _2547;
        float _2555 = dot(vec3(_913, _914, _915), vec3(cbLight._m0[_2525].xyz));
        float _4625 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0));
        float _2558 = isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0));
        float _2559 = dot(vec3(_913, _914, _915), vec3(_2552, _2553, _2554));
        float _4636 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0));
        float _2562 = isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0));
        float _2563 = dot(vec3(cbLight._m0[_2525].xyz), vec3(_2552, _2553, _2554));
        float _4647 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0));
        float _2567 = _2544 * _2544;
        float _2571 = ((_2562 * _2562) * (_2567 + (-1.0))) + 1.0;
        float _2578 = exp2(log2(1.0 - (isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0)))) * 5.0);
        float _2585 = 1.0 - _2544;
        float _2595 = (0.5 / (((_2324 * ((_2558 * _2585) + _2544)) + 9.9999999392252902907785028219223e-09) + (((_2324 * _2585) + _2544) * _2558))) * _2558;
        float _4658 = isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0));
        float _2597 = (isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0))) * (_2567 / ((_2571 * _2571) * 3.141590118408203125));
        float _2598 = isnan(1.0) ? _2174 : (isnan(_2174) ? 1.0 : min(_2174, 1.0));
        _2519 = (((((_2578 * _2346) + _1076) * cbLight._m0[_2529].x) * _2597) * _2598) + _2455;
        _2521 = (((((_2578 * _2348) + _1078) * cbLight._m0[_2529].y) * _2597) * _2598) + _2456;
        _2523 = (((((_2578 * _2349) + _1079) * cbLight._m0[_2529].z) * _2597) * _2598) + _2457;
    }
    float _2633;
    float _2635;
    float _2637;
    if (_2250)
    {
        _2633 = _2519;
        _2635 = _2521;
        _2637 = _2523;
    }
    else
    {
        uint _2644 = _2159 + 3u;
        uint _2648 = _2159 + 11u;
        float _2662 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2644].w)) * _916) * 0.949999988079071044921875);
        float _2663 = _2662 * _2662;
        float _2664 = cbLight._m0[_2644].x + _997;
        float _2665 = cbLight._m0[_2644].y + _998;
        float _2666 = cbLight._m0[_2644].z + _999;
        float _2670 = inversesqrt(dot(vec3(_2664, _2665, _2666), vec3(_2664, _2665, _2666)));
        float _2671 = _2670 * _2664;
        float _2672 = _2670 * _2665;
        float _2673 = _2670 * _2666;
        float _2674 = dot(vec3(_913, _914, _915), vec3(cbLight._m0[_2644].xyz));
        float _4674 = isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0));
        float _2677 = isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0));
        float _2678 = dot(vec3(_913, _914, _915), vec3(_2671, _2672, _2673));
        float _4685 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0));
        float _2681 = isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0));
        float _2682 = dot(vec3(cbLight._m0[_2644].xyz), vec3(_2671, _2672, _2673));
        float _4696 = isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : max(_2682, 0.0));
        float _2686 = _2663 * _2663;
        float _2690 = ((_2681 * _2681) * (_2686 + (-1.0))) + 1.0;
        float _2697 = exp2(log2(1.0 - (isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0)))) * 5.0);
        float _2704 = 1.0 - _2663;
        float _2714 = (0.5 / (((_2324 * ((_2677 * _2704) + _2663)) + 9.9999999392252902907785028219223e-09) + (((_2324 * _2704) + _2663) * _2677))) * _2677;
        float _4707 = isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0));
        float _2716 = (isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0))) * (_2686 / ((_2690 * _2690) * 3.141590118408203125));
        float _2717 = isnan(1.0) ? _2175 : (isnan(_2175) ? 1.0 : min(_2175, 1.0));
        _2633 = (((((_2697 * _2346) + _1076) * cbLight._m0[_2648].x) * _2716) * _2717) + _2519;
        _2635 = (((((_2697 * _2348) + _1078) * cbLight._m0[_2648].y) * _2716) * _2717) + _2521;
        _2637 = (((((_2697 * _2349) + _1079) * cbLight._m0[_2648].z) * _2716) * _2717) + _2523;
    }
    float _2852;
    float _2854;
    float _2856;
    float _2858;
    float _2860;
    float _2862;
    if (_2157.y == 0u)
    {
        float _2792 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2793 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2792;
        float _2794 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2792;
        float _2795 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2792;
        uvec4 _2807 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2808 = _2807.x;
        uint _2819 = uint((float(_2807.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1015) / _2808))) + floor(float(uint(cbSceneParam._m0[85u].x * _1014) / _2808)));
        float _2829 = (log2(_2795 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2830 = isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : max(_2829, 0.0));
        uint _2833 = uint(isnan(14.0) ? _2830 : (isnan(_2830) ? 14.0 : min(_2830, 14.0)));
        uvec4 _2838 = texelFetch(g_lightClusterGridBuffer, int(((_2833 << 2u) + (_2819 << 6u)) >> 2u));
        uint _2839 = _2838.x;
        uint _2840 = _2807.z;
        float _2940;
        float _2942;
        float _2944;
        float _2946;
        float _2948;
        float _2950;
        if (((((1u << ((_2840 >> 4u) & 15u)) + 4294967295u) & _2839) == 0u) || ((_2840 & 240u) == 0u))
        {
            _2940 = 0.0;
            _2942 = 0.0;
            _2944 = 0.0;
            _2946 = 0.0;
            _2948 = 0.0;
            _2950 = 0.0;
        }
        else
        {
            float _2941;
            float _2943;
            float _2945;
            float _2947;
            float _2949;
            float _2951;
            float _3093 = 0.0;
            float _3094 = 0.0;
            float _3095 = 0.0;
            float _3096 = 0.0;
            float _3097 = 0.0;
            float _3098 = 0.0;
            uint _3099 = 0u;
            uint _3108;
            bool _3109;
            for (;;)
            {
                _3108 = texelFetch(g_lightClassification, int((((_2833 << 5u) + (_2819 << 9u)) + (_3099 << 2u)) >> 2u)).x;
                _3109 = _3108 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3109)
                {
                    frontier_phi_68_pred = _3093;
                    frontier_phi_68_pred_1 = _3098;
                    frontier_phi_68_pred_2 = _3097;
                    frontier_phi_68_pred_3 = _3096;
                    frontier_phi_68_pred_4 = _3095;
                    frontier_phi_68_pred_5 = _3094;
                }
                else
                {
                    float _3238;
                    float _3239;
                    float _3240;
                    float _3241;
                    float _3242;
                    float _3243;
                    uint _3244;
                    _3238 = _3093;
                    _3239 = _3094;
                    _3240 = _3095;
                    _3241 = _3096;
                    _3242 = _3097;
                    _3243 = _3098;
                    _3244 = _3108;
                    float _3165;
                    float _3166;
                    float _3167;
                    float _3168;
                    float _3169;
                    float _3170;
                    for (;;)
                    {
                        uint _3248 = uint(findLSB(_3244)) + (_3099 << 5u);
                        uint _3245 = (_3244 + 4294967295u) & _3244;
                        uint _3250 = _3248 * 48u;
                        vec4 _3264 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3250)).x, texelFetch(g_PointLightRenderingBuffer, int(_3250 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3250 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3250 + 3u)).x));
                        uint _3270 = (_3248 * 48u) + 4u;
                        vec4 _3283 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3270)).x, texelFetch(g_PointLightRenderingBuffer, int(_3270 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3270 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3270 + 3u)).x));
                        uint _3289 = (_3248 * 48u) + 8u;
                        vec3 _3300 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3289)).x, texelFetch(g_PointLightRenderingBuffer, int(_3289 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3289 + 2u)).x));
                        float _3304 = _3264.x - _2793;
                        float _3305 = _3264.y - _2794;
                        float _3306 = _3264.z - _2795;
                        float _3307 = dot(vec3(_3304, _3305, _3306), vec3(_3304, _3305, _3306));
                        float _3310 = inversesqrt(_3307);
                        float _3311 = _3310 * _3304;
                        float _3312 = _3310 * _3305;
                        float _3313 = _3310 * _3306;
                        float _3314 = dot(vec3(_1033, _1036, _1039), vec3(_3311, _3312, _3313));
                        float _3319 = 1.0 - (_3307 * _3264.w);
                        float _4733 = isnan(0.0) ? _3319 : (isnan(_3319) ? 0.0 : max(_3319, 0.0));
                        float _3320 = isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0));
                        float _3321 = sqrt(_3307) * _3283.w;
                        float _3324 = 1.39999997615814208984375 / (_3321 + 1.39999997615814208984375);
                        float _3325 = _3324 * _3324;
                        float _3328 = ((1.0 - _3325) * _3314) + _3325;
                        float _3331 = _3321 * _3321;
                        float _3335 = ((isnan(0.0) ? _3328 : (isnan(_3328) ? 0.0 : max(_3328, 0.0))) * _3320) / ((_3331 * 0.699999988079071044921875) + 1.0);
                        float _3339 = (-0.0) - _2793;
                        float _3340 = (-0.0) - _2794;
                        float _3341 = (-0.0) - _2795;
                        float _3345 = inversesqrt(dot(vec3(_3339, _3340, _3341), vec3(_3339, _3340, _3341)));
                        float _3346 = _3345 * _3339;
                        float _3347 = _3345 * _3340;
                        float _3348 = _3345 * _3341;
                        float _3356 = exp2(log2(1.0 / ((_3331 * 3.5) + 5.0)) * 0.25);
                        float _3357 = 1.0 - _1108;
                        float _3364 = sqrt(1.0 - ((1.0 - (_3357 * _3357)) * (1.0 - (_3356 * _3356))));
                        float _3365 = _3364 * _3364;
                        float _3366 = _3365 * _3365;
                        float _3367 = _3346 + _3311;
                        float _3368 = _3347 + _3312;
                        float _3369 = _3348 + _3313;
                        float _3373 = inversesqrt(dot(vec3(_3367, _3368, _3369), vec3(_3367, _3368, _3369)));
                        float _3377 = dot(vec3(_1033, _1036, _1039), vec3(_3346, _3347, _3348));
                        float _4749 = isnan(0.0) ? _3377 : (isnan(_3377) ? 0.0 : max(_3377, 0.0));
                        float _3380 = isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0));
                        float _3381 = dot(vec3(_1033, _1036, _1039), vec3(_3373 * _3367, _3373 * _3368, _3373 * _3369));
                        float _4760 = isnan(0.0) ? _3381 : (isnan(_3381) ? 0.0 : max(_3381, 0.0));
                        float _3384 = isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0));
                        float _3388 = ((_3384 * _3384) * (_3366 + (-1.0))) + 1.0;
                        float _3389 = _3324 * _3365;
                        float _3390 = _3389 * _3389;
                        float _3393 = ((1.0 - _3390) * _3314) + _3390;
                        float _4771 = isnan(0.0) ? _3393 : (isnan(_3393) ? 0.0 : max(_3393, 0.0));
                        float _3394 = isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0));
                        float _3395 = 1.0 - _3365;
                        float _3405 = (0.5 / (((_3394 * ((_3380 * _3395) + _3365)) + 9.9999999392252902907785028219223e-09) + (((_3394 * _3395) + _3365) * _3380))) * _3394;
                        float _4782 = isnan(0.0) ? _3405 : (isnan(_3405) ? 0.0 : max(_3405, 0.0));
                        float _3416 = (((_3366 * 3.1415927410125732421875) * (isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0)))) / ((_3388 * _3388) * ((_3331 * 2.1991131305694580078125) + 3.141590118408203125))) * _3320;
                        _3168 = (_3335 * _3283.x) + _3241;
                        _3169 = (_3335 * _3283.y) + _3242;
                        _3170 = (_3335 * _3283.z) + _3243;
                        _3165 = (_3416 * _3300.x) + _3238;
                        _3166 = (_3416 * _3300.y) + _3239;
                        _3167 = (_3416 * _3300.z) + _3240;
                        if (_3245 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3238 = _3165;
                            _3239 = _3166;
                            _3240 = _3167;
                            _3241 = _3168;
                            _3242 = _3169;
                            _3243 = _3170;
                            _3244 = _3245;
                        }
                    }
                    frontier_phi_68_pred = _3165;
                    frontier_phi_68_pred_1 = _3170;
                    frontier_phi_68_pred_2 = _3169;
                    frontier_phi_68_pred_3 = _3168;
                    frontier_phi_68_pred_4 = _3167;
                    frontier_phi_68_pred_5 = _3166;
                }
                _2941 = frontier_phi_68_pred;
                _2951 = frontier_phi_68_pred_1;
                _2949 = frontier_phi_68_pred_2;
                _2947 = frontier_phi_68_pred_3;
                _2945 = frontier_phi_68_pred_4;
                _2943 = frontier_phi_68_pred_5;
                uint _3100 = _3099 + 1u;
                if (_3100 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3093 = _2941;
                    _3094 = _2943;
                    _3095 = _2945;
                    _3096 = _2947;
                    _3097 = _2949;
                    _3098 = _2951;
                    _3099 = _3100;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2940 = _2941;
            _2942 = _2943;
            _2944 = _2945;
            _2946 = _2947;
            _2948 = _2949;
            _2950 = _2951;
        }
        uvec4 _2954 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2955 = _2954.z;
        uint _2957 = (_2955 >> 8u) & 15u;
        float _3061;
        float _3063;
        float _3065;
        float _3067;
        float _3069;
        float _3071;
        if (((4294967295u << _2957) & _2839) == 0u)
        {
            _3061 = _2940;
            _3063 = _2942;
            _3065 = _2944;
            _3067 = _2946;
            _3069 = _2948;
            _3071 = _2950;
        }
        else
        {
            float _3086 = inversesqrt(dot(vec3(_2793, _2794, _2795), vec3(_2793, _2794, _2795)));
            float _3087 = _3086 * _2793;
            float _3088 = _3086 * _2794;
            float _3089 = _3086 * _2795;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2957 < ((_2955 >> 12u) & 15u))
            {
                float _3062;
                float _3064;
                float _3066;
                float _3068;
                float _3070;
                float _3072;
                float _3221 = _2940;
                float _3222 = _2942;
                float _3223 = _2944;
                float _3224 = _2946;
                float _3225 = _2948;
                float _3226 = _2950;
                uint _3227 = _2957;
                uint _3236;
                bool _3237;
                for (;;)
                {
                    _3236 = texelFetch(g_lightClassification, int((((_2833 << 5u) + (_2819 << 9u)) + (_3227 << 2u)) >> 2u)).x;
                    _3237 = _3236 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3237)
                    {
                        frontier_phi_79_pred = _3226;
                        frontier_phi_79_pred_1 = _3225;
                        frontier_phi_79_pred_2 = _3224;
                        frontier_phi_79_pred_3 = _3223;
                        frontier_phi_79_pred_4 = _3222;
                        frontier_phi_79_pred_5 = _3221;
                    }
                    else
                    {
                        float _3430;
                        float _3431;
                        float _3432;
                        float _3433;
                        float _3434;
                        float _3435;
                        float _3723;
                        float _3724;
                        float _3725;
                        float _3726;
                        float _3727;
                        float _3728;
                        float _3443 = _3221;
                        float _3444 = _3222;
                        float _3445 = _3223;
                        float _3446 = _3224;
                        float _3447 = _3225;
                        float _3448 = _3226;
                        uint _3449 = _3236;
                        uint _3450;
                        vec4 _3475;
                        float _3476;
                        vec4 _3491;
                        vec3 _3503;
                        vec4 _3518;
                        vec4 _3533;
                        float _3579;
                        bool _3580;
                        for (;;)
                        {
                            uint _3460 = ((_3227 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3449));
                            _3450 = (_3449 + 4294967295u) & _3449;
                            uint _3462 = _3460 * 40u;
                            _3475 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3462)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 3u)).x));
                            _3476 = _3475.w;
                            uint _3478 = (_3460 * 40u) + 4u;
                            _3491 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3478)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3478 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3478 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3478 + 3u)).x));
                            uint _3493 = (_3460 * 40u) + 8u;
                            _3503 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3493)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3493 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3493 + 2u)).x));
                            uint _3505 = (_3460 * 40u) + 16u;
                            _3518 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3505)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 3u)).x));
                            uint _3520 = (_3460 * 40u) + 20u;
                            _3533 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3520)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 3u)).x));
                            uint _3535 = (_3460 * 40u) + 24u;
                            vec4 _3548 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3535)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3535 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3535 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3535 + 3u)).x));
                            uint _3554 = (_3460 * 40u) + 28u;
                            vec4 _3567 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3554)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 3u)).x));
                            _3579 = fma(_2795, _3567.z, fma(_2794, _3567.y, _3567.x * _2793)) + _3567.w;
                            _3580 = !((fma(_2795, _3548.z, fma(_2794, _3548.y, _3548.x * _2793)) + _3548.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3580)
                            {
                                float _3607 = _3475.x - _2793;
                                float _3608 = _3475.y - _2794;
                                float _3609 = _3475.z - _2795;
                                float _3610 = dot(vec3(_3607, _3608, _3609), vec3(_3607, _3608, _3609));
                                float _3613 = inversesqrt(_3610);
                                float _3614 = _3613 * _3607;
                                float _3615 = _3613 * _3608;
                                float _3616 = _3613 * _3609;
                                float _3620 = 1.0 - (_3610 / (_3476 * _3476));
                                float _4793 = isnan(0.0) ? _3620 : (isnan(_3620) ? 0.0 : max(_3620, 0.0));
                                float _3621 = isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0));
                                float _3625 = sqrt(_3610) * _3491.w;
                                float _3627 = 1.39999997615814208984375 / (_3625 + 1.39999997615814208984375);
                                float _3628 = _3627 * _3627;
                                float _3631 = ((1.0 - _3628) * dot(vec3(_3614, _3615, _3616), vec3(_1033, _1036, _1039))) + _3628;
                                float _3634 = _3625 * _3625;
                                float _3638 = (fma(_2795, _3518.z, fma(_2794, _3518.y, _3518.x * _2793)) + _3518.w) / _3579;
                                float _3639 = (fma(_2795, _3533.z, fma(_2794, _3533.y, _3533.x * _2793)) + _3533.w) / _3579;
                                float _3643 = 1.0 - dot(vec2(_3638, _3639), vec2(_3638, _3639));
                                float _4809 = isnan(0.0) ? _3643 : (isnan(_3643) ? 0.0 : max(_3643, 0.0));
                                float _3644 = isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0));
                                float _3645 = _3644 * (((isnan(0.0) ? _3631 : (isnan(_3631) ? 0.0 : max(_3631, 0.0))) * _3621) / ((_3634 * 0.699999988079071044921875) + 1.0));
                                float _3657 = exp2(log2(1.0 / ((_3634 * 3.5) + 5.0)) * 0.25);
                                float _3658 = 1.0 - _1108;
                                float _3665 = sqrt(1.0 - ((1.0 - (_3658 * _3658)) * (1.0 - (_3657 * _3657))));
                                float _3666 = _3665 * _3665;
                                float _3667 = _3666 * _3666;
                                float _3668 = _3614 - _3087;
                                float _3669 = _3615 - _3088;
                                float _3670 = _3616 - _3089;
                                float _3674 = inversesqrt(dot(vec3(_3668, _3669, _3670), vec3(_3668, _3669, _3670)));
                                float _3678 = dot(vec3(_1033, _1036, _1039), vec3((-0.0) - _3087, (-0.0) - _3088, (-0.0) - _3089));
                                float _4820 = isnan(0.0) ? _3678 : (isnan(_3678) ? 0.0 : max(_3678, 0.0));
                                float _3681 = isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0));
                                float _3682 = dot(vec3(_1033, _1036, _1039), vec3(_3674 * _3668, _3674 * _3669, _3674 * _3670));
                                float _4831 = isnan(0.0) ? _3682 : (isnan(_3682) ? 0.0 : max(_3682, 0.0));
                                float _3685 = isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0));
                                float _3689 = ((_3685 * _3685) * (_3667 + (-1.0))) + 1.0;
                                float _3690 = _3627 * _3666;
                                float _3691 = _3690 * _3690;
                                float _3697 = ((1.0 - _3691) * dot(vec3(_1033, _1036, _1039), vec3(_3614, _3615, _3616))) + _3691;
                                float _4842 = isnan(0.0) ? _3697 : (isnan(_3697) ? 0.0 : max(_3697, 0.0));
                                float _3698 = isnan(1.0) ? _4842 : (isnan(_4842) ? 1.0 : min(_4842, 1.0));
                                float _3699 = 1.0 - _3666;
                                float _3709 = (0.5 / (((_3698 * ((_3681 * _3699) + _3666)) + 9.9999999392252902907785028219223e-09) + (((_3698 * _3699) + _3666) * _3681))) * _3698;
                                float _4853 = isnan(0.0) ? _3709 : (isnan(_3709) ? 0.0 : max(_3709, 0.0));
                                float _3719 = (_3644 * _3621) * (((_3667 * 3.1415927410125732421875) * (isnan(1.0) ? _4853 : (isnan(_4853) ? 1.0 : min(_4853, 1.0)))) / ((_3689 * _3689) * ((_3634 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3645 * _3491.y;
                                frontier_phi_85_pred_1 = _3645 * _3491.x;
                                frontier_phi_85_pred_2 = _3719 * _3503.z;
                                frontier_phi_85_pred_3 = _3719 * _3503.y;
                                frontier_phi_85_pred_4 = _3719 * _3503.x;
                                frontier_phi_85_pred_5 = _3645 * _3491.z;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3727 = frontier_phi_85_pred;
                            _3726 = frontier_phi_85_pred_1;
                            _3725 = frontier_phi_85_pred_2;
                            _3724 = frontier_phi_85_pred_3;
                            _3723 = frontier_phi_85_pred_4;
                            _3728 = frontier_phi_85_pred_5;
                            _3433 = _3726 + _3446;
                            _3434 = _3727 + _3447;
                            _3435 = _3728 + _3448;
                            _3430 = _3723 + _3443;
                            _3431 = _3724 + _3444;
                            _3432 = _3725 + _3445;
                            if (_3450 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3443 = _3430;
                                _3444 = _3431;
                                _3445 = _3432;
                                _3446 = _3433;
                                _3447 = _3434;
                                _3448 = _3435;
                                _3449 = _3450;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3435;
                        frontier_phi_79_pred_1 = _3434;
                        frontier_phi_79_pred_2 = _3433;
                        frontier_phi_79_pred_3 = _3432;
                        frontier_phi_79_pred_4 = _3431;
                        frontier_phi_79_pred_5 = _3430;
                    }
                    _3072 = frontier_phi_79_pred;
                    _3070 = frontier_phi_79_pred_1;
                    _3068 = frontier_phi_79_pred_2;
                    _3066 = frontier_phi_79_pred_3;
                    _3064 = frontier_phi_79_pred_4;
                    _3062 = frontier_phi_79_pred_5;
                    uint _3228 = _3227 + 1u;
                    if (_3228 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3221 = _3062;
                        _3222 = _3064;
                        _3223 = _3066;
                        _3224 = _3068;
                        _3225 = _3070;
                        _3226 = _3072;
                        _3227 = _3228;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3066;
                frontier_phi_60_61_ladder_1 = _3072;
                frontier_phi_60_61_ladder_2 = _3070;
                frontier_phi_60_61_ladder_3 = _3068;
                frontier_phi_60_61_ladder_4 = _3064;
                frontier_phi_60_61_ladder_5 = _3062;
            }
            else
            {
                frontier_phi_60_61_ladder = _2944;
                frontier_phi_60_61_ladder_1 = _2950;
                frontier_phi_60_61_ladder_2 = _2948;
                frontier_phi_60_61_ladder_3 = _2946;
                frontier_phi_60_61_ladder_4 = _2942;
                frontier_phi_60_61_ladder_5 = _2940;
            }
            _3061 = frontier_phi_60_61_ladder_5;
            _3063 = frontier_phi_60_61_ladder_4;
            _3065 = frontier_phi_60_61_ladder;
            _3067 = frontier_phi_60_61_ladder_3;
            _3069 = frontier_phi_60_61_ladder_2;
            _3071 = frontier_phi_60_61_ladder_1;
        }
        float _3076 = isnan(1.0) ? _1092 : (isnan(_1092) ? 1.0 : min(_1092, 1.0));
        _2852 = (_3076 * _3067) + _2288;
        _2854 = (_3076 * _3069) + _2290;
        _2856 = (_3076 * _3071) + _2292;
        _2858 = ((_3061 * _1076) * _3076) + _2633;
        _2860 = ((_3063 * _1078) * _3076) + _2635;
        _2862 = ((_3065 * _1079) * _3076) + _2637;
    }
    else
    {
        _2852 = _2288;
        _2854 = _2290;
        _2856 = _2292;
        _2858 = _2633;
        _2860 = _2635;
        _2862 = _2637;
    }
    float _4869 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
    float _4880 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
    float _4891 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
    float _2879 = ((isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0))) * (_2852 + ((isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0))) * _1092))) + ((_2858 + ((isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0))) * _1926)) * cbPerFrame._m0[3u].x);
    float _2880 = ((isnan(1.0) ? _4880 : (isnan(_4880) ? 1.0 : min(_4880, 1.0))) * (_2854 + ((isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0))) * _1092))) + ((_2860 + ((isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0))) * _1926)) * cbPerFrame._m0[3u].x);
    float _2881 = ((isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0))) * (_2856 + ((isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0))) * _1092))) + ((_2862 + ((isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0))) * _1926)) * cbPerFrame._m0[3u].x);
    uint _2882 = _282 + 6u;
    float _2890 = _1014 / cbSceneParam._m0[86u].x;
    float _2891 = _1015 / cbSceneParam._m0[86u].y;
    vec4 _2905 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2890, _2891, (log2((isnan(cbSceneParam._m0[77u].w) ? _939 : (isnan(_939) ? cbSceneParam._m0[77u].w : min(_939, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2907 = _2905.x;
    float _2908 = _2905.y;
    float _2909 = _2905.z;
    float _2910 = _2905.w;
    float _3003;
    float _3005;
    float _3007;
    float _3009;
    if (_939 > cbSceneParam._m0[78u].w)
    {
        float _2965 = isnan(_939) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _939 : min(cbSceneParam._m0[80u].w, _939));
        float _2966 = _2965 / _939;
        float _2977 = _2966 * _990;
        float _2978 = _991 * _2966;
        float _2979 = (-0.0) - _2978;
        float _2981 = _2966 * _992;
        float _2983 = (cbSceneParam._m0[77u].w * _2979) / _2965;
        float _2984 = _2983 + cbSceneParam._m0[79u].w;
        float _2985 = cbSceneParam._m0[79u].w - _2978;
        float _2991 = sqrt(((_2977 * _2977) + (_2978 * _2978)) + (_2981 * _2981));
        float _2994 = (1.0 - (cbSceneParam._m0[77u].w / _2965)) * _2991;
        float _2999 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3001 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3178;
        if (abs((_2979 - _2983) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3178 = ((((_2984 > 0.0) ? exp2(_2999 * _2984) : (2.0 - exp2(_3001 * _2984))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2994;
        }
        else
        {
            float _3122 = 1.0 / cbSceneParam._m0[80u].x;
            float _3123 = isnan(_2985) ? _2984 : (isnan(_2984) ? _2985 : max(_2984, _2985));
            float _3124 = isnan(_2985) ? _2984 : (isnan(_2984) ? _2985 : min(_2984, _2985));
            float _3133 = isnan(0.0) ? _3123 : (isnan(_3123) ? 0.0 : min(_3123, 0.0));
            float _3134 = isnan(0.0) ? _3124 : (isnan(_3124) ? 0.0 : min(_3124, 0.0));
            _3178 = ((abs(_2991 / _2979) * cbSceneParam._m0[80u].y) * ((((_3133 - _3134) * 2.0) - ((exp2(_2999 * (isnan(0.0) ? _3123 : (isnan(_3123) ? 0.0 : max(_3123, 0.0)))) - exp2(_2999 * (isnan(0.0) ? _3124 : (isnan(_3124) ? 0.0 : max(_3124, 0.0))))) * _3122)) - ((exp2(_3001 * _3133) - exp2(_3001 * _3134)) * _3122))) + (_2994 * cbSceneParam._m0[80u].z);
        }
        vec4 _3180 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2890, _2891, 1.0), 0.0);
        float _3189 = exp2((_3178 * (-1.44269502162933349609375)) * (1.0 - _3180.w));
        float _3190 = log2(_3189);
        float _3206 = log2(_2910);
        _3003 = (exp2(_3206 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3190 * cbSceneParam._m0[78u].x)) * _3180.x) / cbSceneParam._m0[78u].x)) + _2907;
        _3005 = (exp2(_3206 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3190 * cbSceneParam._m0[78u].y)) * _3180.y) / cbSceneParam._m0[78u].y)) + _2908;
        _3007 = (exp2(_3206 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3190 * cbSceneParam._m0[78u].z)) * _3180.z) / cbSceneParam._m0[78u].z)) + _2909;
        _3009 = _3189 * _2910;
    }
    else
    {
        _3003 = _2907;
        _3005 = _2908;
        _3007 = _2909;
        _3009 = _2910;
    }
    bool _3216;
    vec4 _3019;
    vec4 _3041;
    float _3043;
    float _3047;
    float _3048;
    float _3049;
    float _3050;
    bool _3060;
    for (;;)
    {
        _3019 = cbMatDynParam._m0[0u];
        float _3021 = roundEven(_3019.y);
        bool _3022 = _3021 == 3.0;
        float _3023 = log2(_3009);
        float _3030 = exp2(_3023 * cbSceneParam._m0[78u].x) * _2879;
        float _3031 = exp2(_3023 * cbSceneParam._m0[78u].y) * _2880;
        float _3032 = exp2(_3023 * cbSceneParam._m0[78u].z) * _2881;
        float _3039 = _1003 + (-0.5);
        _3041 = cbMtdParam._m0[1u];
        _3043 = _3041.y * _3039;
        float _3046 = (_3021 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3047 = _3046 * (_3022 ? _3030 : (_3030 + (cbSceneParam._m0[72u].w * _3003)));
        _3048 = _3046 * (_3022 ? _3031 : (_3031 + (cbSceneParam._m0[72u].w * _3005)));
        _3049 = _3046 * (_3022 ? _3032 : (_3032 + (cbSceneParam._m0[72u].w * _3007)));
        _3050 = _3039 * 0.999000012874603271484375;
        _3060 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3060)
        {
            if ((cbInstanceData._m0[_282 + 7u].x + _3050) < 0.5)
            {
                _3216 = true;
                break;
            }
        }
        uint _3157 = _1052 + uint(_3019.w);
        if ((cbInstanceData._m0[_3157].w < 1.0) && ((cbInstanceData._m0[_3157].w + _3050) < 0.5))
        {
            _3216 = true;
            break;
        }
        if ((_3043 + 1.0) < _3041.x)
        {
            _3216 = true;
            break;
        }
        _3216 = false;
        break;
    }
    float _3421;
    if (_3216)
    {
        discard_state = true;
        _3421 = 0.0;
    }
    else
    {
        _3421 = cbInstanceData._m0[_2882].w;
    }
    SV_Target.x = _3047;
    SV_Target.y = _3048;
    SV_Target.z = _3049;
    SV_Target.w = _3421;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2882].w;
    discard_exit();
}


