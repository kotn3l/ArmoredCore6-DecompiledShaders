#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1315;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _220 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _221 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _222 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _228 = inversesqrt(dot(vec3(_220, _221, _222), vec3(_220, _221, _222)));
    float _235 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _242 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _248 = uint(roundEven(NORMAL.w)) * 13u;
    uint _254 = _248 + 1u;
    uint _258 = _248 + 2u;
    float _267 = sqrt(((cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x) + (cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x)) + (cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x));
    float _268 = _267 * TEXCOORD.z;
    float _269 = _267 * TEXCOORD.w;
    vec4 _289 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _295 = _289.x * cbMtdParam._m0[11u].x;
    float _296 = _289.y * cbMtdParam._m0[11u].y;
    float _297 = _289.z * cbMtdParam._m0[11u].z;
    vec4 _316 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _268) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _269) + cbTextureTilingScale._m0[5u].w));
    vec4 _336 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _370 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[27u].x * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].y * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _372 = _370.x;
    float _384 = dot(vec4(_372, _370.yzw), vec4(cbMtdParam._m0[28u].w, cbMtdParam._m0[29u].xy, 0.0));
    float _401 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _336.x) * 2.0) - ((((_372 - _384) * cbMtdParam._m0[23u].w) + _384) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3924 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _402 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
    float _409 = (_402 * ((_316.x * cbMtdParam._m0[12u].x) - _295)) + _295;
    float _410 = (_402 * ((_316.y * cbMtdParam._m0[12u].y) - _296)) + _296;
    float _411 = (_402 * ((_316.z * cbMtdParam._m0[12u].z) - _297)) + _297;
    vec4 _428 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _268) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _269) + cbTextureTilingScale._m0[3u].w));
    vec4 _450 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].z * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].w * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _452 = _450.x;
    float _462 = dot(vec4(_452, _450.yzw), vec4(cbMtdParam._m0[30u].yzw, 0.0));
    float _476 = ((cbMtdParam._m0[25u].z * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _336.y) * 2.0) - ((((_452 - _462) * cbMtdParam._m0[23u].w) + _462) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3935 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _477 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
    float _484 = (_477 * ((_428.x * cbMtdParam._m0[13u].x) - _409)) + _409;
    float _485 = (_477 * ((_428.y * cbMtdParam._m0[13u].y) - _410)) + _410;
    float _486 = (_477 * ((_428.z * cbMtdParam._m0[13u].z) - _411)) + _411;
    vec4 _504 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _268) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _269) + cbTextureTilingScale._m0[4u].w));
    vec4 _521 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _523 = _521.x;
    float _524 = _521.y;
    float _525 = _521.z;
    float _532 = ((_504.x - _523) * _402) + _523;
    float _533 = ((_504.y - _524) * _402) + _524;
    float _534 = ((_504.z - _525) * _402) + _525;
    vec4 _546 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _268) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _269) + cbTextureTilingScale._m0[2u].w));
    float _559 = ((_546.z - _534) * _477) + _534;
    float _562 = ((((_546.x - _532) * _477) + _532) * 2.0) + (-1.0);
    float _564 = ((((_546.y - _533) * _477) + _533) * 2.0) + (-1.0);
    float _565 = dot(vec2(_562, _564), vec2(_562, _564));
    float _3946 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _570 = sqrt(1.0 - (isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0))));
    vec4 _584 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _609 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _268) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _269) + cbTextureTilingScale._m0[11u].w));
    float _611 = _609.x;
    float _612 = 1.0 - _611;
    float _628 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_611 - _612) * cbMtdParam._m0[24u].z) + _612) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3957 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _629 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
    float _636 = (_629 * (cbMtdParam._m0[17u].x - _484)) + _484;
    float _637 = (_629 * (cbMtdParam._m0[17u].y - _485)) + _485;
    float _638 = (_629 * (cbMtdParam._m0[17u].z - _486)) + _486;
    vec4 _664 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _666 = _664.x;
    float _684 = ((texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _268) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _269) + cbTextureTilingScale._m0[9u].w)).x - _666) * _402) + _666;
    float _701 = ((texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _268) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _269) + cbTextureTilingScale._m0[21u].w)).x - _684) * _477) + _684;
    float _705 = ((texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _701) * cbMtdParam._m0[19u].z) + _701;
    float _707 = _705 - (_705 * _629);
    float _711 = (cbMtdParam._m0[19u].w * (_584.z - _559)) + _559;
    vec4 _724 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _268) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _269) + cbTextureTilingScale._m0[15u].w));
    float _731 = (_724.x * 2.0) + (-1.0);
    float _732 = (_724.y * 2.0) + (-1.0);
    float _733 = dot(vec2(_731, _732), vec2(_731, _732));
    float _3968 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _741 = (_629 * (_724.z - _711)) + _711;
    float _744 = (((_584.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w) + _562;
    float _745 = (((_584.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w) + _564;
    float _757 = (((_731 - _744) + (cbMtdParam._m0[21u].x * _744)) * _629) + _744;
    float _758 = (((_732 - _745) + (cbMtdParam._m0[21u].x * _745)) * _629) + _745;
    float _759 = (_629 * (sqrt(1.0 - (isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0)))) - _570)) + _570;
    float _761 = cbMtdParam._m0[22u].x + _584.w;
    float _764 = fma(_759, _235 * NORMAL.x, fma(_758, _242 * TANGENT.x, (_228 * _220) * _757));
    float _767 = fma(_759, _235 * NORMAL.y, fma(_758, _242 * TANGENT.y, (_228 * _221) * _757));
    float _770 = fma(_759, _235 * NORMAL.z, fma(_758, _242 * TANGENT.z, (_228 * _222) * _757));
    float _774 = inversesqrt(dot(vec3(_764, _767, _770), vec3(_764, _767, _770)));
    float _775 = _774 * _764;
    float _776 = _774 * _767;
    float _777 = _774 * _770;
    float _3979 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _778 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
    float _3990 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _4001 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _4012 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _4023 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _4034 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _783 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
    float _797 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _838 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _848 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _838);
    float _849 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _838);
    float _850 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _838);
    float _854 = inversesqrt(dot(vec3(_848, _849, _850), vec3(_848, _849, _850)));
    float _855 = _848 * _854;
    float _856 = _849 * _854;
    float _857 = _850 * _854;
    float _863 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _864 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _882 = fma(_777, cbSceneParam._m0[5u].z, fma(_776, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _775));
    float _885 = fma(_777, cbSceneParam._m0[6u].z, fma(_776, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _775));
    float _888 = fma(_777, cbSceneParam._m0[7u].z, fma(_776, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _775));
    uint _902 = (_248 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _908 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0)))) * cbInstanceData._m0[_902].x;
    float _909 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0)))) * cbInstanceData._m0[_902].y;
    float _910 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0)))) * cbInstanceData._m0[_902].z;
    float _4045 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
    float _911 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
    float _4056 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
    float _912 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
    float _4067 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
    float _913 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
    float _914 = 1.0 - _783;
    float _915 = _911 * _914;
    float _916 = _912 * _914;
    float _917 = _913 * _914;
    float _922 = (_911 + (-0.039999999105930328369140625)) * _783;
    float _923 = (_912 + (-0.039999999105930328369140625)) * _783;
    float _924 = (_913 + (-0.039999999105930328369140625)) * _783;
    float _925 = _922 + 0.039999999105930328369140625;
    float _927 = _923 + 0.039999999105930328369140625;
    float _928 = _924 + 0.039999999105930328369140625;
    vec4 _937 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _863, cbSceneParam._m0[86u].y * _864));
    float _941 = ((isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))) * TEXCOORD_5.w) * _937.x;
    float _942 = dot(vec3(_775, _776, _777), vec3(_855, _856, _857));
    float _945 = _942 * 2.0;
    float _949 = (_945 * _775) - _855;
    float _950 = (_945 * _776) - _856;
    float _951 = (_945 * _777) - _857;
    float _955 = abs(dot(vec3(_855, _856, _857), vec3(_775, _776, _777)));
    float _4078 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
    float _957 = sqrt(_778);
    float _970 = exp2((_957 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_957 * 3.0));
    float _976 = (1.0 - _970) * ((_957 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _977 = _970 * _957;
    float _1005 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1009 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1013 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1314;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1039 = fma(_1013, cbModelParam._m0[26u].z, fma(_1009, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1005));
        float _1043 = fma(_1013, cbModelParam._m0[27u].z, fma(_1009, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1005));
        float _1047 = fma(_1013, cbModelParam._m0[28u].z, fma(_1009, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1005));
        float _1072 = _1005 + _775;
        float _1073 = _1009 + _776;
        float _1074 = _1013 + _777;
        float _1084 = fma(_1074, cbModelParam._m0[26u].z, fma(_1073, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1072)) - _1039;
        float _1085 = fma(_1074, cbModelParam._m0[27u].z, fma(_1073, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1072)) - _1043;
        float _1086 = fma(_1074, cbModelParam._m0[28u].z, fma(_1073, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1072)) - _1047;
        float _1090 = inversesqrt(dot(vec3(_1084, _1085, _1086), vec3(_1084, _1085, _1086)));
        float _1103 = ((_1090 * _1084) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1039 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1104 = ((_1090 * _1085) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1043 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1105 = ((_1090 * _1086) / cbModelParam._m0[34u].z) + ((((((_1047 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1108 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1103, _1104, _1105), 0.0);
        vec4 _1115 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1103, _1104, _1105), 0.0);
        vec4 _1122 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1103, _1104, _1105), 0.0);
        vec4 _1129 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1103, _1104, _1105), 0.0);
        float _1142 = exp2((_1108.w + (-0.5)) * 20.0) * 2.0;
        float _1143 = _1142 * (_1108.x + (-0.5));
        float _1144 = _1142 * (_1108.y + (-0.5));
        float _1145 = _1142 * (_1108.z + (-0.5));
        float _1152 = exp2((_1115.w + (-0.5)) * 20.0) * 2.0;
        float _1153 = _1152 * (_1115.x + (-0.5));
        float _1154 = _1152 * (_1115.y + (-0.5));
        float _1155 = _1152 * (_1115.z + (-0.5));
        float _1162 = exp2((_1122.w + (-0.5)) * 20.0) * 2.0;
        float _1163 = _1162 * (_1122.x + (-0.5));
        float _1164 = _1162 * (_1122.y + (-0.5));
        float _1165 = _1162 * (_1122.z + (-0.5));
        float _1172 = exp2((_1129.w + (-0.5)) * 20.0) * 2.0;
        float _1173 = _1172 * (_1129.x + (-0.5));
        float _1174 = _1172 * (_1129.y + (-0.5));
        float _1175 = _1172 * (_1129.z + (-0.5));
        float _1176 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1177 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1178 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1179 = _1143 * 0.5;
        float _1180 = _1153 * 0.5;
        float _1181 = _1163 * 0.5;
        float _1182 = dot(vec3(_1179, _1180, _1181), vec3(_1179, _1180, _1181));
        float _1187 = (_1182 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1182);
        float _1196 = (dot(vec3(_775, _776, _777), vec3(_1187 * _1179, _1187 * _1180, _1187 * _1181)) + 1.0) * 0.5;
        float _4104 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1206 = sqrt(((_1180 * _1180) + (_1179 * _1179)) + (_1181 * _1181)) / (_1176 + 9.9999997473787516355514526367188e-06);
        float _4115 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1207 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
        float _1208 = _1207 * 2.0;
        float _1212 = (1.0 - _1207) / (_1207 + 1.0);
        float _4126 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1213 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
        float _1222 = ((((1.0 - _1213) * (_1208 + 2.0)) * exp2(log2(isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0))) * (_1208 + 1.0))) + _1213) * _1176;
        float _1223 = _1144 * 0.5;
        float _1224 = _1154 * 0.5;
        float _1225 = _1164 * 0.5;
        float _1226 = dot(vec3(_1223, _1224, _1225), vec3(_1223, _1224, _1225));
        float _1231 = (_1226 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1226);
        float _1239 = (dot(vec3(_775, _776, _777), vec3(_1231 * _1223, _1231 * _1224, _1231 * _1225)) + 1.0) * 0.5;
        float _4137 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1248 = sqrt(((_1224 * _1224) + (_1223 * _1223)) + (_1225 * _1225)) / (_1177 + 9.9999997473787516355514526367188e-06);
        float _4148 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1249 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
        float _1250 = _1249 * 2.0;
        float _1254 = (1.0 - _1249) / (_1249 + 1.0);
        float _4159 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1255 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
        float _1264 = ((((1.0 - _1255) * (_1250 + 2.0)) * exp2(log2(isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0))) * (_1250 + 1.0))) + _1255) * _1177;
        float _1265 = _1145 * 0.5;
        float _1266 = _1155 * 0.5;
        float _1267 = _1165 * 0.5;
        float _1268 = dot(vec3(_1265, _1266, _1267), vec3(_1265, _1266, _1267));
        float _1273 = (_1268 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1268);
        float _1281 = (dot(vec3(_775, _776, _777), vec3(_1273 * _1265, _1273 * _1266, _1273 * _1267)) + 1.0) * 0.5;
        float _4170 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1290 = sqrt(((_1266 * _1266) + (_1265 * _1265)) + (_1267 * _1267)) / (_1178 + 9.9999997473787516355514526367188e-06);
        float _4181 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1291 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
        float _1292 = _1291 * 2.0;
        float _1296 = (1.0 - _1291) / (_1291 + 1.0);
        float _4192 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1297 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
        float _1306 = ((((1.0 - _1297) * (_1292 + 2.0)) * exp2(log2(isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0))) * (_1292 + 1.0))) + _1297) * _1178;
        _1314 = _1145;
        _1316 = _1144;
        _1317 = _1143;
        _1318 = _1155;
        _1319 = _1154;
        _1320 = _1153;
        _1321 = _1165;
        _1322 = _1164;
        _1323 = _1163;
        _1324 = _1178;
        _1325 = _1177;
        _1326 = _1176;
        _1327 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0)));
        _1328 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0)));
        _1329 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0)));
    }
    else
    {
        _1314 = _1315;
        _1316 = _1315;
        _1317 = _1315;
        _1318 = _1315;
        _1319 = _1315;
        _1320 = _1315;
        _1321 = _1315;
        _1322 = _1315;
        _1323 = _1315;
        _1324 = _1315;
        _1325 = _1315;
        _1326 = _1315;
        _1327 = 0.0;
        _1328 = 0.0;
        _1329 = 0.0;
    }
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1353 = fma(_1013, cbModelParam._m0[30u].z, fma(_1009, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1005));
        float _1357 = fma(_1013, cbModelParam._m0[31u].z, fma(_1009, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1005));
        float _1361 = fma(_1013, cbModelParam._m0[32u].z, fma(_1009, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1005));
        float _1384 = _1005 + _775;
        float _1385 = _1009 + _776;
        float _1386 = _1013 + _777;
        float _1396 = fma(_1386, cbModelParam._m0[30u].z, fma(_1385, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1384)) - _1353;
        float _1397 = fma(_1386, cbModelParam._m0[31u].z, fma(_1385, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1384)) - _1357;
        float _1398 = fma(_1386, cbModelParam._m0[32u].z, fma(_1385, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1384)) - _1361;
        float _1402 = inversesqrt(dot(vec3(_1396, _1397, _1398), vec3(_1396, _1397, _1398)));
        float _1415 = ((_1402 * _1396) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1353 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1416 = ((_1402 * _1397) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1357 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1417 = ((_1402 * _1398) / cbModelParam._m0[35u].z) + ((((((_1361 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1419 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1415, _1416, _1417), 0.0);
        vec4 _1426 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1415, _1416, _1417), 0.0);
        vec4 _1433 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1415, _1416, _1417), 0.0);
        vec4 _1440 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1415, _1416, _1417), 0.0);
        float _1452 = exp2((_1419.w + (-0.5)) * 20.0) * 2.0;
        float _1453 = _1452 * (_1419.x + (-0.5));
        float _1454 = _1452 * (_1419.y + (-0.5));
        float _1455 = _1452 * (_1419.z + (-0.5));
        float _1462 = exp2((_1426.w + (-0.5)) * 20.0) * 2.0;
        float _1463 = _1462 * (_1426.x + (-0.5));
        float _1464 = _1462 * (_1426.y + (-0.5));
        float _1465 = _1462 * (_1426.z + (-0.5));
        float _1472 = exp2((_1433.w + (-0.5)) * 20.0) * 2.0;
        float _1473 = _1472 * (_1433.x + (-0.5));
        float _1474 = _1472 * (_1433.y + (-0.5));
        float _1475 = _1472 * (_1433.z + (-0.5));
        float _1482 = exp2((_1440.w + (-0.5)) * 20.0) * 2.0;
        float _1483 = _1482 * (_1440.x + (-0.5));
        float _1484 = _1482 * (_1440.y + (-0.5));
        float _1485 = _1482 * (_1440.z + (-0.5));
        float _1486 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1487 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1488 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1489 = _1453 * 0.5;
        float _1490 = _1463 * 0.5;
        float _1491 = _1473 * 0.5;
        float _1492 = dot(vec3(_1489, _1490, _1491), vec3(_1489, _1490, _1491));
        float _1497 = (_1492 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1492);
        float _1505 = (dot(vec3(_775, _776, _777), vec3(_1497 * _1489, _1497 * _1490, _1497 * _1491)) + 1.0) * 0.5;
        float _4233 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1514 = sqrt(((_1490 * _1490) + (_1489 * _1489)) + (_1491 * _1491)) / (_1486 + 9.9999997473787516355514526367188e-06);
        float _4244 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
        float _1515 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
        float _1516 = _1515 * 2.0;
        float _1520 = (1.0 - _1515) / (_1515 + 1.0);
        float _4255 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1521 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
        float _1530 = ((((1.0 - _1521) * (_1516 + 2.0)) * exp2(log2(isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0))) * (_1516 + 1.0))) + _1521) * _1486;
        float _1531 = _1454 * 0.5;
        float _1532 = _1464 * 0.5;
        float _1533 = _1474 * 0.5;
        float _1534 = dot(vec3(_1531, _1532, _1533), vec3(_1531, _1532, _1533));
        float _1539 = (_1534 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1534);
        float _1547 = (dot(vec3(_775, _776, _777), vec3(_1539 * _1531, _1539 * _1532, _1539 * _1533)) + 1.0) * 0.5;
        float _4266 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1556 = sqrt(((_1532 * _1532) + (_1531 * _1531)) + (_1533 * _1533)) / (_1487 + 9.9999997473787516355514526367188e-06);
        float _4277 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1557 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
        float _1558 = _1557 * 2.0;
        float _1562 = (1.0 - _1557) / (_1557 + 1.0);
        float _4288 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
        float _1563 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
        float _1572 = ((((1.0 - _1563) * (_1558 + 2.0)) * exp2(log2(isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0))) * (_1558 + 1.0))) + _1563) * _1487;
        float _1573 = _1455 * 0.5;
        float _1574 = _1465 * 0.5;
        float _1575 = _1475 * 0.5;
        float _1576 = dot(vec3(_1573, _1574, _1575), vec3(_1573, _1574, _1575));
        float _1581 = (_1576 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1576);
        float _1589 = (dot(vec3(_775, _776, _777), vec3(_1581 * _1573, _1581 * _1574, _1581 * _1575)) + 1.0) * 0.5;
        float _4299 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
        float _1598 = sqrt(((_1574 * _1574) + (_1573 * _1573)) + (_1575 * _1575)) / (_1488 + 9.9999997473787516355514526367188e-06);
        float _4310 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
        float _1599 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
        float _1600 = _1599 * 2.0;
        float _1604 = (1.0 - _1599) / (_1599 + 1.0);
        float _4321 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
        float _1605 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
        float _1614 = ((((1.0 - _1605) * (_1600 + 2.0)) * exp2(log2(isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0))) * (_1600 + 1.0))) + _1605) * _1488;
        _1622 = _1455;
        _1623 = _1454;
        _1624 = _1453;
        _1625 = _1465;
        _1626 = _1464;
        _1627 = _1463;
        _1628 = _1475;
        _1629 = _1474;
        _1630 = _1473;
        _1631 = _1488;
        _1632 = _1487;
        _1633 = _1486;
        _1634 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0)));
        _1635 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0)));
        _1636 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0)));
    }
    else
    {
        _1622 = _1315;
        _1623 = _1315;
        _1624 = _1315;
        _1625 = _1315;
        _1626 = _1315;
        _1627 = _1315;
        _1628 = _1315;
        _1629 = _1315;
        _1630 = _1315;
        _1631 = _1315;
        _1632 = _1315;
        _1633 = _1315;
        _1634 = 0.0;
        _1635 = 0.0;
        _1636 = 0.0;
    }
    float _1646 = (cbModelParam._m0[1u].x * (_1634 - _1327)) + _1327;
    float _1647 = (cbModelParam._m0[1u].x * (_1635 - _1328)) + _1328;
    float _1648 = (cbModelParam._m0[1u].x * (_1636 - _1329)) + _1329;
    float _1669 = fma(_1648, cbSceneParam._m0[89u].z, fma(_1647, cbSceneParam._m0[89u].y, _1646 * cbSceneParam._m0[89u].x));
    float _1672 = fma(_1648, cbSceneParam._m0[90u].z, fma(_1647, cbSceneParam._m0[90u].y, _1646 * cbSceneParam._m0[90u].x));
    float _1675 = fma(_1648, cbSceneParam._m0[91u].z, fma(_1647, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1646));
    float _1690 = _949 * 0.5;
    float _1691 = _950 * 0.5;
    float _1692 = _951 * 0.5;
    float _1693 = dot(vec4(_1690, _1691, _1692, 1.0), vec4(_1624, _1627, _1630, _1633));
    float _1696 = dot(vec4(_1690, _1691, _1692, 1.0), vec4(_1623, _1626, _1629, _1632));
    float _1699 = dot(vec4(_1690, _1691, _1692, 1.0), vec4(_1622, _1625, _1628, _1631));
    float _1733;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1706 = dot(vec4(_1690, _1691, _1692, 1.0), vec4(_1314, _1318, _1321, _1324));
        float _1710 = dot(vec4(_1690, _1691, _1692, 1.0), vec4(_1316, _1319, _1322, _1325));
        float _1714 = dot(vec4(_1690, _1691, _1692, 1.0), vec4(_1317, _1320, _1323, _1326));
        float _1721 = dot(vec4(cbModelParam._m0[39u]), vec4(_1690, _1691, _1692, 1.0));
        _1733 = dot(vec3(isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0)), isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0)), isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1721) ? 0.0 : (isnan(0.0) ? _1721 : max(0.0, _1721))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1733 = 1.0;
    }
    float _1744;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1735 = dot(vec4(cbModelParam._m0[40u]), vec4(_1690, _1691, _1692, 1.0));
        _1744 = dot(vec3(isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0)), isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0)), isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1735) ? 0.0 : (isnan(0.0) ? _1735 : max(0.0, _1735))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1744 = 1.0;
    }
    float _1748 = (_1744 * cbModelParam._m0[1u].x) + (_1733 * (1.0 - cbModelParam._m0[1u].x));
    float _1758 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _778);
    float _1759 = isnan(_1758) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1758 : min(cbModelParam._m0[25u].z, _1758));
    float _1840;
    float _1842;
    float _1844;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1807 = fma(_1013, cbModelParam._m0[13u].z, fma(_1009, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1005)) + cbModelParam._m0[13u].w;
        float _1811 = fma(_1013, cbModelParam._m0[14u].z, fma(_1009, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1005)) + cbModelParam._m0[14u].w;
        float _1815 = fma(_1013, cbModelParam._m0[15u].z, fma(_1009, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1005)) + cbModelParam._m0[15u].w;
        float _1818 = fma(_951, cbModelParam._m0[13u].z, fma(_950, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _949));
        float _1821 = fma(_951, cbModelParam._m0[14u].z, fma(_950, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _949));
        float _1824 = fma(_951, cbModelParam._m0[15u].z, fma(_950, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _949));
        float _1852;
        if (_1818 > 0.0)
        {
            _1852 = abs((1.0 - _1807) / _1818);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1818 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1807 + 1.0) / _1818);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1852 = frontier_phi_14_12_ladder;
        }
        float _2024;
        if (_1821 > 0.0)
        {
            _2024 = abs((1.0 - _1811) / _1821);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1821 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1811 + 1.0) / _1821);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2024 = frontier_phi_23_19_ladder;
        }
        float _2319;
        if (_1824 > 0.0)
        {
            _2319 = abs((1.0 - _1815) / _1824);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1824 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1815 + 1.0) / _1824);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2319 = frontier_phi_35_30_ladder;
        }
        float _2321 = isnan(_2024) ? _1852 : (isnan(_1852) ? _2024 : min(_1852, _2024));
        float _2322 = isnan(_2319) ? _2321 : (isnan(_2321) ? _2319 : min(_2321, _2319));
        float _2326 = (_2322 * _1818) + _1807;
        float _2327 = (_2322 * _1821) + _1811;
        float _2328 = (_2322 * _1824) + _1815;
        float _2329 = _2322 * 9.9999997473787516355514526367188e-05;
        float _2331 = (-1.0) - _2329;
        float _2333 = _2329 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2328 > _2333) || ((_2328 < _2331) || ((_2327 > _2333) || ((_2327 < _2331) || ((_2326 < _2331) || (_2326 > _2333))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2473 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2328, cbModelParam._m0[9u].z, fma(_2327, cbModelParam._m0[9u].y, _2326 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2328, cbModelParam._m0[10u].z, fma(_2327, cbModelParam._m0[10u].y, _2326 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2328, cbModelParam._m0[11u].z, fma(_2327, cbModelParam._m0[11u].y, _2326 * cbModelParam._m0[11u].x))), _1759);
            frontier_phi_13_35_ladder = _2473.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2473.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2473.x * cbModelParam._m0[1u].y;
        }
        _1840 = frontier_phi_13_35_ladder_2;
        _1842 = frontier_phi_13_35_ladder_1;
        _1844 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1828 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_949, _950, _951), _1759);
        _1840 = _1828.x * cbModelParam._m0[1u].y;
        _1842 = _1828.y * cbModelParam._m0[1u].y;
        _1844 = _1828.z * cbModelParam._m0[1u].y;
    }
    float _1848 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _778);
    float _1849 = isnan(_1848) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1848 : min(cbModelParam._m0[25u].w, _1848));
    float _1939;
    float _1941;
    float _1943;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1903 = fma(_1013, cbModelParam._m0[21u].z, fma(_1009, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1005)) + cbModelParam._m0[21u].w;
        float _1907 = fma(_1013, cbModelParam._m0[22u].z, fma(_1009, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1005)) + cbModelParam._m0[22u].w;
        float _1911 = fma(_1013, cbModelParam._m0[23u].z, fma(_1009, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1005)) + cbModelParam._m0[23u].w;
        float _1914 = fma(_951, cbModelParam._m0[21u].z, fma(_950, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _949));
        float _1917 = fma(_951, cbModelParam._m0[22u].z, fma(_950, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _949));
        float _1920 = fma(_951, cbModelParam._m0[23u].z, fma(_950, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _949));
        float _2029;
        if (_1914 > 0.0)
        {
            _2029 = abs((1.0 - _1903) / _1914);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1914 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1903 + 1.0) / _1914);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2029 = frontier_phi_25_21_ladder;
        }
        float _2346;
        if (_1917 > 0.0)
        {
            _2346 = abs((1.0 - _1907) / _1917);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1917 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1907 + 1.0) / _1917);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2346 = frontier_phi_37_32_ladder;
        }
        float _2684;
        if (_1920 > 0.0)
        {
            _2684 = abs((1.0 - _1911) / _1920);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1920 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1911 + 1.0) / _1920);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2684 = frontier_phi_47_44_ladder;
        }
        float _2686 = isnan(_2346) ? _2029 : (isnan(_2029) ? _2346 : min(_2029, _2346));
        float _2687 = isnan(_2684) ? _2686 : (isnan(_2686) ? _2684 : min(_2686, _2684));
        float _2691 = (_2687 * _1914) + _1903;
        float _2692 = (_2687 * _1917) + _1907;
        float _2693 = (_2687 * _1920) + _1911;
        float _2694 = _2687 * 9.9999997473787516355514526367188e-05;
        float _2695 = (-1.0) - _2694;
        float _2697 = _2694 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2693 > _2697) || ((_2693 < _2695) || ((_2692 > _2697) || ((_2692 < _2695) || ((_2691 < _2695) || (_2691 > _2697))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2815 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2693, cbModelParam._m0[17u].z, fma(_2692, cbModelParam._m0[17u].y, _2691 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2693, cbModelParam._m0[18u].z, fma(_2692, cbModelParam._m0[18u].y, _2691 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2693, cbModelParam._m0[19u].z, fma(_2692, cbModelParam._m0[19u].y, _2691 * cbModelParam._m0[19u].x))), _1849);
            frontier_phi_22_47_ladder = _2815.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2815.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2815.x * cbModelParam._m0[1u].z;
        }
        _1939 = frontier_phi_22_47_ladder_2;
        _1941 = frontier_phi_22_47_ladder_1;
        _1943 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1923 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_949, _950, _951), _1849);
        _1939 = _1923.x * cbModelParam._m0[1u].z;
        _1941 = _1923.y * cbModelParam._m0[1u].z;
        _1943 = _1923.z * cbModelParam._m0[1u].z;
    }
    float _1956 = (((_976 * _925) + _977) * _941) * ((cbModelParam._m0[1u].w * (_1939 - _1840)) + _1840);
    float _1958 = (((_976 * _927) + _977) * _941) * ((cbModelParam._m0[1u].w * (_1941 - _1842)) + _1842);
    float _1960 = (((_976 * _928) + _977) * _941) * ((cbModelParam._m0[1u].w * (_1943 - _1844)) + _1844);
    float _1963 = fma(_1960, cbSceneParam._m0[89u].z, fma(_1958, cbSceneParam._m0[89u].y, _1956 * cbSceneParam._m0[89u].x));
    float _1966 = fma(_1960, cbSceneParam._m0[90u].z, fma(_1958, cbSceneParam._m0[90u].y, _1956 * cbSceneParam._m0[90u].x));
    float _1969 = fma(_1960, cbSceneParam._m0[91u].z, fma(_1958, cbSceneParam._m0[91u].y, _1956 * cbSceneParam._m0[91u].x));
    float _2003 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2007 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2011 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2015 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2016 = _2003 / _2015;
    float _2017 = _2007 / _2015;
    float _2018 = _2011 / _2015;
    float _2165;
    float _2166;
    float _2167;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2045 = ((uint(_2018 > cbSceneParam._m0[59u].y) + uint(_2018 > cbSceneParam._m0[59u].x)) + uint(_2018 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2046 = _2045 + 43u;
        uint _2054 = _2045 + 44u;
        uint _2062 = _2045 + 45u;
        uint _2070 = _2045 + 46u;
        float _2081 = fma(_2015, cbSceneParam._m0[_2046].w, fma(_2011, cbSceneParam._m0[_2046].z, fma(_2007, cbSceneParam._m0[_2046].y, _2003 * cbSceneParam._m0[_2046].x)));
        float _2085 = fma(_2015, cbSceneParam._m0[_2054].w, fma(_2011, cbSceneParam._m0[_2054].z, fma(_2007, cbSceneParam._m0[_2054].y, _2003 * cbSceneParam._m0[_2054].x)));
        float _2093 = fma(_2015, cbSceneParam._m0[_2070].w, fma(_2011, cbSceneParam._m0[_2070].z, fma(_2007, cbSceneParam._m0[_2070].y, _2003 * cbSceneParam._m0[_2070].x)));
        float _2098 = cbSceneParam._m0[33u].z * _2093;
        float _2100 = cbSceneParam._m0[33u].w * _2093;
        float _2103 = fma(_2015, cbSceneParam._m0[_2062].w, fma(_2011, cbSceneParam._m0[_2062].z, fma(_2007, cbSceneParam._m0[_2062].y, _2003 * cbSceneParam._m0[_2062].x))) / _2093;
        float _2151 = (cbSceneParam._m0[33u].x - sqrt(((_2017 * _2017) + (_2016 * _2016)) + (_2018 * _2018))) * cbSceneParam._m0[33u].y;
        float _4447 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
        float _2158 = (isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2098 + _2081) / _2093, (_2100 + _2085) / _2093), _2103), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2100 + _2081) / _2093, (_2085 - _2098) / _2093), _2103), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2081 - _2098) / _2093, (_2085 - _2100) / _2093), _2103), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2081 - _2100) / _2093, (_2098 + _2085) / _2093), _2103), 0.0)).x), vec4(0.25)));
        _2165 = 1.0 - (_2158 * cbSceneParam._m0[34u].x);
        _2166 = 1.0 - (_2158 * cbSceneParam._m0[34u].y);
        _2167 = 1.0 - (_2158 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2165 = 1.0;
        _2166 = 1.0;
        _2167 = 1.0;
    }
    float _2231;
    float _2233;
    float _2235;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2219 = fma(_2015, cbSceneParam._m0[63u].w, fma(_2011, cbSceneParam._m0[63u].z, fma(_2007, cbSceneParam._m0[63u].y, _2003 * cbSceneParam._m0[63u].x)));
        float _2220 = fma(_2015, cbSceneParam._m0[60u].w, fma(_2011, cbSceneParam._m0[60u].z, fma(_2007, cbSceneParam._m0[60u].y, _2003 * cbSceneParam._m0[60u].x))) / _2219;
        float _2221 = fma(_2015, cbSceneParam._m0[61u].w, fma(_2011, cbSceneParam._m0[61u].z, fma(_2007, cbSceneParam._m0[61u].y, _2003 * cbSceneParam._m0[61u].x))) / _2219;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2220 >= cbSceneParam._m0[64u].x) && (_2221 >= cbSceneParam._m0[64u].y)) && (_2220 <= cbSceneParam._m0[64u].z)) && (_2221 <= cbSceneParam._m0[64u].w))
        {
            float _2359 = fma(_2015, cbSceneParam._m0[62u].w, fma(_2011, cbSceneParam._m0[62u].z, fma(_2007, cbSceneParam._m0[62u].y, _2003 * cbSceneParam._m0[62u].x))) / _2219;
            float _2363 = isnan(cbSceneParam._m0[41u].w) ? _2359 : (isnan(_2359) ? cbSceneParam._m0[41u].w : max(_2359, cbSceneParam._m0[41u].w));
            float _2406 = (cbSceneParam._m0[33u].x - sqrt(((_2017 * _2017) + (_2016 * _2016)) + (_2018 * _2018))) * cbSceneParam._m0[33u].y;
            float _4463 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
            float _2413 = (isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2220, cbSceneParam._m0[33u].w + _2221), _2363), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2220, _2221 - cbSceneParam._m0[33u].z), _2363), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2220 - cbSceneParam._m0[33u].z, _2221 - cbSceneParam._m0[33u].w), _2363), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2220 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2221), _2363), 0.0)).x), vec4(0.25)));
            float _2417 = 1.0 - (_2413 * cbSceneParam._m0[34u].x);
            float _2418 = 1.0 - (_2413 * cbSceneParam._m0[34u].y);
            float _2419 = 1.0 - (_2413 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2419) ? _2167 : (isnan(_2167) ? _2419 : min(_2167, _2419));
            frontier_phi_34_33_ladder_1 = isnan(_2418) ? _2166 : (isnan(_2166) ? _2418 : min(_2166, _2418));
            frontier_phi_34_33_ladder_2 = isnan(_2417) ? _2165 : (isnan(_2165) ? _2417 : min(_2165, _2417));
        }
        else
        {
            frontier_phi_34_33_ladder = _2167;
            frontier_phi_34_33_ladder_1 = _2166;
            frontier_phi_34_33_ladder_2 = _2165;
        }
        _2231 = frontier_phi_34_33_ladder_2;
        _2233 = frontier_phi_34_33_ladder_1;
        _2235 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2231 = _2165;
        _2233 = _2166;
        _2235 = _2167;
    }
    uvec4 _2240 = floatBitsToUint(cbInstanceData._m0[_248 + 5u]);
    uint _2242 = _2240.x * 14u;
    uint _2243 = _2242 + 13u;
    float _2250 = _941 + (-1.0);
    float _2255 = (cbLight._m0[_2243].x * _2250) + 1.0;
    float _2256 = (cbLight._m0[_2243].y * _2250) + 1.0;
    float _2257 = (cbLight._m0[_2243].z * _2250) + 1.0;
    float _2258 = (cbLight._m0[_2243].w * _2250) + 1.0;
    uint _2259 = _2242 + 5u;
    float _2265 = isnan(1.0) ? _2256 : (isnan(_2256) ? 1.0 : min(_2256, 1.0));
    uint _2269 = _2242 + 4u;
    float _2278 = isnan(1.0) ? _2255 : (isnan(_2255) ? 1.0 : min(_2255, 1.0));
    uint _2282 = _2242 | 1u;
    float _2293 = dot(vec3(cbLight._m0[_2242].xyz), vec3(_775, _776, _777));
    float _2296 = dot(vec3(cbLight._m0[_2282].xyz), vec3(_775, _776, _777));
    float _4499 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
    float _4510 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
    float _2301 = (isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0))) * 0.3183098733425140380859375;
    float _2303 = (isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0))) * 0.3183098733425140380859375;
    float _2310 = ((cbLight._m0[_2259].x * _2265) * _2303) + (((cbLight._m0[_2269].x * _2231) * _2278) * _2301);
    float _2311 = ((_2265 * cbLight._m0[_2259].y) * _2303) + (((cbLight._m0[_2269].y * _2233) * _2278) * _2301);
    float _2312 = ((_2265 * cbLight._m0[_2259].z) * _2303) + (((cbLight._m0[_2269].z * _2235) * _2278) * _2301);
    uvec4 _2316 = floatBitsToUint(cbLight._m0[_2242 + 12u]);
    bool _2318 = _2316.x == 0u;
    float _2420;
    float _2422;
    float _2424;
    if (_2318)
    {
        _2420 = _2310;
        _2422 = _2311;
        _2424 = _2312;
    }
    else
    {
        uint _2428 = _2242 + 6u;
        float _2444 = (dot(vec3(cbLight._m0[_2242 + 2u].xyz), vec3(_775, _776, _777)) * 0.5) + 0.5;
        float _2445 = _2444 * _2444;
        float _4521 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
        float _2446 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
        float _2447 = isnan(1.0) ? _2257 : (isnan(_2257) ? 1.0 : min(_2257, 1.0));
        _2420 = (((cbLight._m0[_2428].x * 0.3183098733425140380859375) * _2446) * _2447) + _2310;
        _2422 = (((cbLight._m0[_2428].y * 0.3183098733425140380859375) * _2446) * _2447) + _2311;
        _2424 = (((cbLight._m0[_2428].z * 0.3183098733425140380859375) * _2446) * _2447) + _2312;
    }
    bool _2427 = _2316.y == 0u;
    float _2482;
    float _2484;
    float _2486;
    if (_2427)
    {
        _2482 = _2420;
        _2484 = _2422;
        _2486 = _2424;
    }
    else
    {
        uint _2655 = _2242 + 7u;
        float _2671 = (dot(vec3(cbLight._m0[_2242 + 3u].xyz), vec3(_775, _776, _777)) * 0.5) + 0.5;
        float _2672 = _2671 * _2671;
        float _4537 = isnan(0.0) ? _2672 : (isnan(_2672) ? 0.0 : max(_2672, 0.0));
        float _2673 = isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0));
        float _2674 = isnan(1.0) ? _2258 : (isnan(_2258) ? 1.0 : min(_2258, 1.0));
        _2482 = (((cbLight._m0[_2655].x * 0.3183098733425140380859375) * _2673) * _2674) + _2420;
        _2484 = (((cbLight._m0[_2655].y * 0.3183098733425140380859375) * _2673) * _2674) + _2422;
        _2486 = (((cbLight._m0[_2655].z * 0.3183098733425140380859375) * _2673) * _2674) + _2424;
    }
    uint _2489 = _2242 + 8u;
    float _2502 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2242].w)) * _778) * 0.949999988079071044921875);
    float _2503 = _2502 * _2502;
    float _2504 = cbLight._m0[_2242].x + _855;
    float _2505 = cbLight._m0[_2242].y + _856;
    float _2506 = cbLight._m0[_2242].z + _857;
    float _2510 = inversesqrt(dot(vec3(_2504, _2505, _2506), vec3(_2504, _2505, _2506)));
    float _2511 = _2510 * _2504;
    float _2512 = _2510 * _2505;
    float _2513 = _2510 * _2506;
    float _2514 = dot(vec3(_775, _776, _777), vec3(cbLight._m0[_2242].xyz));
    float _4553 = isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : max(_2514, 0.0));
    float _2517 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
    float _4564 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
    float _2518 = isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0));
    float _2519 = dot(vec3(_775, _776, _777), vec3(_2511, _2512, _2513));
    float _4575 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0));
    float _2522 = isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0));
    float _2523 = dot(vec3(cbLight._m0[_2242].xyz), vec3(_2511, _2512, _2513));
    float _4586 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
    float _2527 = _2503 * _2503;
    float _2531 = ((_2522 * _2522) * (_2527 + (-1.0))) + 1.0;
    float _2539 = exp2(log2(1.0 - (isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0)))) * 5.0);
    float _2540 = 0.959999978542327880859375 - _922;
    float _2542 = 0.959999978542327880859375 - _923;
    float _2543 = 0.959999978542327880859375 - _924;
    float _2550 = 1.0 - _2503;
    float _2561 = (0.5 / (((_2518 * ((_2517 * _2550) + _2503)) + 9.9999999392252902907785028219223e-09) + (((_2518 * _2550) + _2503) * _2517))) * _2517;
    float _4597 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0));
    float _2563 = (isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0))) * (_2527 / ((_2531 * _2531) * 3.141590118408203125));
    uint _2577 = _2242 + 9u;
    float _2588 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2282].w)) * _778) * 0.949999988079071044921875);
    float _2589 = _2588 * _2588;
    float _2590 = cbLight._m0[_2282].x + _855;
    float _2591 = cbLight._m0[_2282].y + _856;
    float _2592 = cbLight._m0[_2282].z + _857;
    float _2596 = inversesqrt(dot(vec3(_2590, _2591, _2592), vec3(_2590, _2591, _2592)));
    float _2597 = _2596 * _2590;
    float _2598 = _2596 * _2591;
    float _2599 = _2596 * _2592;
    float _2600 = dot(vec3(_775, _776, _777), vec3(cbLight._m0[_2282].xyz));
    float _4608 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0));
    float _2603 = isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0));
    float _2604 = dot(vec3(_775, _776, _777), vec3(_2597, _2598, _2599));
    float _4619 = isnan(0.0) ? _2604 : (isnan(_2604) ? 0.0 : max(_2604, 0.0));
    float _2607 = isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0));
    float _2608 = dot(vec3(cbLight._m0[_2282].xyz), vec3(_2597, _2598, _2599));
    float _4630 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0));
    float _2612 = _2589 * _2589;
    float _2616 = ((_2607 * _2607) * (_2612 + (-1.0))) + 1.0;
    float _2623 = exp2(log2(1.0 - (isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0)))) * 5.0);
    float _2630 = 1.0 - _2589;
    float _2640 = (0.5 / (((_2518 * ((_2603 * _2630) + _2589)) + 9.9999999392252902907785028219223e-09) + (((_2518 * _2630) + _2589) * _2603))) * _2603;
    float _4641 = isnan(0.0) ? _2640 : (isnan(_2640) ? 0.0 : max(_2640, 0.0));
    float _2642 = (isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0))) * (_2612 / ((_2616 * _2616) * 3.141590118408203125));
    float _2652 = (((((_2623 * _2540) + _925) * cbLight._m0[_2577].x) * _2642) * _2265) + ((((cbLight._m0[_2489].x * _2231) * ((_2539 * _2540) + _925)) * _2563) * _2278);
    float _2653 = (((((_2623 * _2542) + _927) * cbLight._m0[_2577].y) * _2642) * _2265) + ((((cbLight._m0[_2489].y * _2233) * ((_2539 * _2542) + _927)) * _2563) * _2278);
    float _2654 = (((((_2623 * _2543) + _928) * cbLight._m0[_2577].z) * _2642) * _2265) + ((((cbLight._m0[_2489].z * _2235) * ((_2539 * _2543) + _928)) * _2563) * _2278);
    float _2710;
    float _2712;
    float _2714;
    if (_2318)
    {
        _2710 = _2652;
        _2712 = _2653;
        _2714 = _2654;
    }
    else
    {
        uint _2716 = _2242 + 2u;
        uint _2720 = _2242 + 10u;
        float _2734 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2716].w)) * _778) * 0.949999988079071044921875);
        float _2735 = _2734 * _2734;
        float _2736 = cbLight._m0[_2716].x + _855;
        float _2737 = cbLight._m0[_2716].y + _856;
        float _2738 = cbLight._m0[_2716].z + _857;
        float _2742 = inversesqrt(dot(vec3(_2736, _2737, _2738), vec3(_2736, _2737, _2738)));
        float _2743 = _2742 * _2736;
        float _2744 = _2742 * _2737;
        float _2745 = _2742 * _2738;
        float _2746 = dot(vec3(_775, _776, _777), vec3(cbLight._m0[_2716].xyz));
        float _4652 = isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : max(_2746, 0.0));
        float _2749 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
        float _2750 = dot(vec3(_775, _776, _777), vec3(_2743, _2744, _2745));
        float _4663 = isnan(0.0) ? _2750 : (isnan(_2750) ? 0.0 : max(_2750, 0.0));
        float _2753 = isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0));
        float _2754 = dot(vec3(cbLight._m0[_2716].xyz), vec3(_2743, _2744, _2745));
        float _4674 = isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0));
        float _2758 = _2735 * _2735;
        float _2762 = ((_2753 * _2753) * (_2758 + (-1.0))) + 1.0;
        float _2769 = exp2(log2(1.0 - (isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0)))) * 5.0);
        float _2776 = 1.0 - _2735;
        float _2786 = (0.5 / (((_2518 * ((_2749 * _2776) + _2735)) + 9.9999999392252902907785028219223e-09) + (((_2518 * _2776) + _2735) * _2749))) * _2749;
        float _4685 = isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0));
        float _2788 = (isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0))) * (_2758 / ((_2762 * _2762) * 3.141590118408203125));
        float _2789 = isnan(1.0) ? _2257 : (isnan(_2257) ? 1.0 : min(_2257, 1.0));
        _2710 = (((((_2769 * _2540) + _925) * cbLight._m0[_2720].x) * _2788) * _2789) + _2652;
        _2712 = (((((_2769 * _2542) + _927) * cbLight._m0[_2720].y) * _2788) * _2789) + _2653;
        _2714 = (((((_2769 * _2543) + _928) * cbLight._m0[_2720].z) * _2788) * _2789) + _2654;
    }
    float _2820;
    float _2822;
    float _2824;
    if (_2427)
    {
        _2820 = _2710;
        _2822 = _2712;
        _2824 = _2714;
    }
    else
    {
        uint _2831 = _2242 + 3u;
        uint _2835 = _2242 + 11u;
        float _2849 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2831].w)) * _778) * 0.949999988079071044921875);
        float _2850 = _2849 * _2849;
        float _2851 = cbLight._m0[_2831].x + _855;
        float _2852 = cbLight._m0[_2831].y + _856;
        float _2853 = cbLight._m0[_2831].z + _857;
        float _2857 = inversesqrt(dot(vec3(_2851, _2852, _2853), vec3(_2851, _2852, _2853)));
        float _2858 = _2857 * _2851;
        float _2859 = _2857 * _2852;
        float _2860 = _2857 * _2853;
        float _2861 = dot(vec3(_775, _776, _777), vec3(cbLight._m0[_2831].xyz));
        float _4701 = isnan(0.0) ? _2861 : (isnan(_2861) ? 0.0 : max(_2861, 0.0));
        float _2864 = isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0));
        float _2865 = dot(vec3(_775, _776, _777), vec3(_2858, _2859, _2860));
        float _4712 = isnan(0.0) ? _2865 : (isnan(_2865) ? 0.0 : max(_2865, 0.0));
        float _2868 = isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0));
        float _2869 = dot(vec3(cbLight._m0[_2831].xyz), vec3(_2858, _2859, _2860));
        float _4723 = isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : max(_2869, 0.0));
        float _2873 = _2850 * _2850;
        float _2877 = ((_2868 * _2868) * (_2873 + (-1.0))) + 1.0;
        float _2884 = exp2(log2(1.0 - (isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0)))) * 5.0);
        float _2891 = 1.0 - _2850;
        float _2901 = (0.5 / (((_2518 * ((_2864 * _2891) + _2850)) + 9.9999999392252902907785028219223e-09) + (((_2518 * _2891) + _2850) * _2864))) * _2864;
        float _4734 = isnan(0.0) ? _2901 : (isnan(_2901) ? 0.0 : max(_2901, 0.0));
        float _2903 = (isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0))) * (_2873 / ((_2877 * _2877) * 3.141590118408203125));
        float _2904 = isnan(1.0) ? _2258 : (isnan(_2258) ? 1.0 : min(_2258, 1.0));
        _2820 = (((((_2884 * _2540) + _925) * cbLight._m0[_2835].x) * _2903) * _2904) + _2710;
        _2822 = (((((_2884 * _2542) + _927) * cbLight._m0[_2835].y) * _2903) * _2904) + _2712;
        _2824 = (((((_2884 * _2543) + _928) * cbLight._m0[_2835].z) * _2903) * _2904) + _2714;
    }
    float _2970;
    float _2972;
    float _2974;
    float _2976;
    float _2978;
    float _2980;
    if (_2240.y == 0u)
    {
        uvec4 _2925 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2926 = _2925.x;
        uint _2937 = uint((float(_2925.y) * floor(float(uint(cbSceneParam._m0[85u].y * _864) / _2926))) + floor(float(uint(cbSceneParam._m0[85u].x * _863) / _2926)));
        float _2947 = (log2(_2018 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2948 = isnan(0.0) ? _2947 : (isnan(_2947) ? 0.0 : max(_2947, 0.0));
        uint _2951 = uint(isnan(14.0) ? _2948 : (isnan(_2948) ? 14.0 : min(_2948, 14.0)));
        uvec4 _2956 = texelFetch(g_lightClusterGridBuffer, int(((_2951 << 2u) + (_2937 << 6u)) >> 2u));
        uint _2957 = _2956.x;
        uint _2958 = _2925.z;
        float _3037;
        float _3039;
        float _3041;
        float _3043;
        float _3045;
        float _3047;
        if (((((1u << ((_2958 >> 4u) & 15u)) + 4294967295u) & _2957) == 0u) || ((_2958 & 240u) == 0u))
        {
            _3037 = 0.0;
            _3039 = 0.0;
            _3041 = 0.0;
            _3043 = 0.0;
            _3045 = 0.0;
            _3047 = 0.0;
        }
        else
        {
            float _3038;
            float _3040;
            float _3042;
            float _3044;
            float _3046;
            float _3048;
            float _3182 = 0.0;
            float _3183 = 0.0;
            float _3184 = 0.0;
            float _3185 = 0.0;
            float _3186 = 0.0;
            float _3187 = 0.0;
            uint _3188 = 0u;
            uint _3197;
            bool _3198;
            for (;;)
            {
                _3197 = texelFetch(g_lightClassification, int((((_2951 << 5u) + (_2937 << 9u)) + (_3188 << 2u)) >> 2u)).x;
                _3198 = _3197 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3198)
                {
                    frontier_phi_66_pred = _3187;
                    frontier_phi_66_pred_1 = _3186;
                    frontier_phi_66_pred_2 = _3185;
                    frontier_phi_66_pred_3 = _3184;
                    frontier_phi_66_pred_4 = _3183;
                    frontier_phi_66_pred_5 = _3182;
                }
                else
                {
                    float _3306;
                    float _3307;
                    float _3308;
                    float _3309;
                    float _3310;
                    float _3311;
                    uint _3312;
                    _3306 = _3182;
                    _3307 = _3183;
                    _3308 = _3184;
                    _3309 = _3185;
                    _3310 = _3186;
                    _3311 = _3187;
                    _3312 = _3197;
                    float _3238;
                    float _3239;
                    float _3240;
                    float _3241;
                    float _3242;
                    float _3243;
                    for (;;)
                    {
                        uint _3316 = uint(findLSB(_3312)) + (_3188 << 5u);
                        uint _3313 = (_3312 + 4294967295u) & _3312;
                        uint _3318 = _3316 * 48u;
                        vec4 _3332 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3318)).x, texelFetch(g_PointLightRenderingBuffer, int(_3318 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3318 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3318 + 3u)).x));
                        uint _3338 = (_3316 * 48u) + 4u;
                        vec4 _3351 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3338)).x, texelFetch(g_PointLightRenderingBuffer, int(_3338 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3338 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3338 + 3u)).x));
                        uint _3357 = (_3316 * 48u) + 8u;
                        vec3 _3368 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3357)).x, texelFetch(g_PointLightRenderingBuffer, int(_3357 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3357 + 2u)).x));
                        float _3372 = _3332.x - _2016;
                        float _3373 = _3332.y - _2017;
                        float _3374 = _3332.z - _2018;
                        float _3375 = dot(vec3(_3372, _3373, _3374), vec3(_3372, _3373, _3374));
                        float _3378 = inversesqrt(_3375);
                        float _3379 = _3378 * _3372;
                        float _3380 = _3378 * _3373;
                        float _3381 = _3378 * _3374;
                        float _3382 = dot(vec3(_882, _885, _888), vec3(_3379, _3380, _3381));
                        float _3387 = 1.0 - (_3375 * _3332.w);
                        float _4760 = isnan(0.0) ? _3387 : (isnan(_3387) ? 0.0 : max(_3387, 0.0));
                        float _3388 = isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0));
                        float _3389 = sqrt(_3375) * _3351.w;
                        float _3392 = 1.39999997615814208984375 / (_3389 + 1.39999997615814208984375);
                        float _3393 = _3392 * _3392;
                        float _3396 = ((1.0 - _3393) * _3382) + _3393;
                        float _3399 = _3389 * _3389;
                        float _3403 = ((isnan(0.0) ? _3396 : (isnan(_3396) ? 0.0 : max(_3396, 0.0))) * _3388) / ((_3399 * 0.699999988079071044921875) + 1.0);
                        float _3407 = (-0.0) - _2016;
                        float _3408 = (-0.0) - _2017;
                        float _3409 = (-0.0) - _2018;
                        float _3413 = inversesqrt(dot(vec3(_3407, _3408, _3409), vec3(_3407, _3408, _3409)));
                        float _3414 = _3413 * _3407;
                        float _3415 = _3413 * _3408;
                        float _3416 = _3413 * _3409;
                        float _3423 = exp2(log2(1.0 / ((_3399 * 3.5) + 5.0)) * 0.25);
                        float _3424 = 1.0 - _957;
                        float _3431 = sqrt(1.0 - ((1.0 - (_3424 * _3424)) * (1.0 - (_3423 * _3423))));
                        float _3432 = _3431 * _3431;
                        float _3433 = _3432 * _3432;
                        float _3434 = _3414 + _3379;
                        float _3435 = _3415 + _3380;
                        float _3436 = _3416 + _3381;
                        float _3440 = inversesqrt(dot(vec3(_3434, _3435, _3436), vec3(_3434, _3435, _3436)));
                        float _3444 = dot(vec3(_882, _885, _888), vec3(_3414, _3415, _3416));
                        float _4776 = isnan(0.0) ? _3444 : (isnan(_3444) ? 0.0 : max(_3444, 0.0));
                        float _3447 = isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0));
                        float _3448 = dot(vec3(_882, _885, _888), vec3(_3440 * _3434, _3440 * _3435, _3440 * _3436));
                        float _4787 = isnan(0.0) ? _3448 : (isnan(_3448) ? 0.0 : max(_3448, 0.0));
                        float _3451 = isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0));
                        float _3455 = ((_3451 * _3451) * (_3433 + (-1.0))) + 1.0;
                        float _3456 = _3392 * _3432;
                        float _3457 = _3456 * _3456;
                        float _3460 = ((1.0 - _3457) * _3382) + _3457;
                        float _4798 = isnan(0.0) ? _3460 : (isnan(_3460) ? 0.0 : max(_3460, 0.0));
                        float _3461 = isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0));
                        float _3462 = 1.0 - _3432;
                        float _3472 = (0.5 / (((_3461 * ((_3447 * _3462) + _3432)) + 9.9999999392252902907785028219223e-09) + (((_3461 * _3462) + _3432) * _3447))) * _3461;
                        float _4809 = isnan(0.0) ? _3472 : (isnan(_3472) ? 0.0 : max(_3472, 0.0));
                        float _3483 = (((_3433 * 3.1415927410125732421875) * (isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0)))) / ((_3455 * _3455) * ((_3399 * 2.1991131305694580078125) + 3.141590118408203125))) * _3388;
                        _3241 = (_3403 * _3351.x) + _3309;
                        _3242 = (_3403 * _3351.y) + _3310;
                        _3243 = (_3403 * _3351.z) + _3311;
                        _3238 = (_3483 * _3368.x) + _3306;
                        _3239 = (_3483 * _3368.y) + _3307;
                        _3240 = (_3483 * _3368.z) + _3308;
                        if (_3313 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3306 = _3238;
                            _3307 = _3239;
                            _3308 = _3240;
                            _3309 = _3241;
                            _3310 = _3242;
                            _3311 = _3243;
                            _3312 = _3313;
                        }
                    }
                    frontier_phi_66_pred = _3243;
                    frontier_phi_66_pred_1 = _3242;
                    frontier_phi_66_pred_2 = _3241;
                    frontier_phi_66_pred_3 = _3240;
                    frontier_phi_66_pred_4 = _3239;
                    frontier_phi_66_pred_5 = _3238;
                }
                _3048 = frontier_phi_66_pred;
                _3046 = frontier_phi_66_pred_1;
                _3044 = frontier_phi_66_pred_2;
                _3042 = frontier_phi_66_pred_3;
                _3040 = frontier_phi_66_pred_4;
                _3038 = frontier_phi_66_pred_5;
                uint _3189 = _3188 + 1u;
                if (_3189 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3182 = _3038;
                    _3183 = _3040;
                    _3184 = _3042;
                    _3185 = _3044;
                    _3186 = _3046;
                    _3187 = _3048;
                    _3188 = _3189;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3037 = _3038;
            _3039 = _3040;
            _3041 = _3042;
            _3043 = _3044;
            _3045 = _3046;
            _3047 = _3048;
        }
        uvec4 _3051 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3052 = _3051.z;
        uint _3054 = (_3052 >> 8u) & 15u;
        float _3150;
        float _3152;
        float _3154;
        float _3156;
        float _3158;
        float _3160;
        if (((4294967295u << _3054) & _2957) == 0u)
        {
            _3150 = _3037;
            _3152 = _3039;
            _3154 = _3041;
            _3156 = _3043;
            _3158 = _3045;
            _3160 = _3047;
        }
        else
        {
            float _3175 = inversesqrt(dot(vec3(_2016, _2017, _2018), vec3(_2016, _2017, _2018)));
            float _3176 = _3175 * _2016;
            float _3177 = _3175 * _2017;
            float _3178 = _3175 * _2018;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3054 < ((_3052 >> 12u) & 15u))
            {
                float _3151;
                float _3153;
                float _3155;
                float _3157;
                float _3159;
                float _3161;
                float _3289 = _3037;
                float _3290 = _3039;
                float _3291 = _3041;
                float _3292 = _3043;
                float _3293 = _3045;
                float _3294 = _3047;
                uint _3295 = _3054;
                uint _3304;
                bool _3305;
                for (;;)
                {
                    _3304 = texelFetch(g_lightClassification, int((((_2951 << 5u) + (_2937 << 9u)) + (_3295 << 2u)) >> 2u)).x;
                    _3305 = _3304 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3305)
                    {
                        frontier_phi_72_pred = _3294;
                        frontier_phi_72_pred_1 = _3293;
                        frontier_phi_72_pred_2 = _3292;
                        frontier_phi_72_pred_3 = _3291;
                        frontier_phi_72_pred_4 = _3290;
                        frontier_phi_72_pred_5 = _3289;
                    }
                    else
                    {
                        float _3488;
                        float _3489;
                        float _3490;
                        float _3491;
                        float _3492;
                        float _3493;
                        float _3781;
                        float _3782;
                        float _3783;
                        float _3784;
                        float _3785;
                        float _3786;
                        float _3501 = _3289;
                        float _3502 = _3290;
                        float _3503 = _3291;
                        float _3504 = _3292;
                        float _3505 = _3293;
                        float _3506 = _3294;
                        uint _3507 = _3304;
                        uint _3508;
                        vec4 _3533;
                        float _3534;
                        vec4 _3549;
                        vec3 _3561;
                        vec4 _3576;
                        vec4 _3591;
                        float _3637;
                        bool _3638;
                        for (;;)
                        {
                            uint _3518 = ((_3295 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3507));
                            _3508 = (_3507 + 4294967295u) & _3507;
                            uint _3520 = _3518 * 40u;
                            _3533 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3520)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 3u)).x));
                            _3534 = _3533.w;
                            uint _3536 = (_3518 * 40u) + 4u;
                            _3549 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3536)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3536 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3536 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3536 + 3u)).x));
                            uint _3551 = (_3518 * 40u) + 8u;
                            _3561 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3551)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3551 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3551 + 2u)).x));
                            uint _3563 = (_3518 * 40u) + 16u;
                            _3576 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3563)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3563 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3563 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3563 + 3u)).x));
                            uint _3578 = (_3518 * 40u) + 20u;
                            _3591 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3578)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 3u)).x));
                            uint _3593 = (_3518 * 40u) + 24u;
                            vec4 _3606 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3593)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3593 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3593 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3593 + 3u)).x));
                            uint _3612 = (_3518 * 40u) + 28u;
                            vec4 _3625 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3612)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3612 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3612 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3612 + 3u)).x));
                            _3637 = fma(_2018, _3625.z, fma(_2017, _3625.y, _3625.x * _2016)) + _3625.w;
                            _3638 = !((fma(_2018, _3606.z, fma(_2017, _3606.y, _3606.x * _2016)) + _3606.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3638)
                            {
                                float _3665 = _3533.x - _2016;
                                float _3666 = _3533.y - _2017;
                                float _3667 = _3533.z - _2018;
                                float _3668 = dot(vec3(_3665, _3666, _3667), vec3(_3665, _3666, _3667));
                                float _3671 = inversesqrt(_3668);
                                float _3672 = _3671 * _3665;
                                float _3673 = _3671 * _3666;
                                float _3674 = _3671 * _3667;
                                float _3678 = 1.0 - (_3668 / (_3534 * _3534));
                                float _4820 = isnan(0.0) ? _3678 : (isnan(_3678) ? 0.0 : max(_3678, 0.0));
                                float _3679 = isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0));
                                float _3683 = sqrt(_3668) * _3549.w;
                                float _3685 = 1.39999997615814208984375 / (_3683 + 1.39999997615814208984375);
                                float _3686 = _3685 * _3685;
                                float _3689 = ((1.0 - _3686) * dot(vec3(_3672, _3673, _3674), vec3(_882, _885, _888))) + _3686;
                                float _3692 = _3683 * _3683;
                                float _3696 = (fma(_2018, _3576.z, fma(_2017, _3576.y, _3576.x * _2016)) + _3576.w) / _3637;
                                float _3697 = (fma(_2018, _3591.z, fma(_2017, _3591.y, _3591.x * _2016)) + _3591.w) / _3637;
                                float _3701 = 1.0 - dot(vec2(_3696, _3697), vec2(_3696, _3697));
                                float _4836 = isnan(0.0) ? _3701 : (isnan(_3701) ? 0.0 : max(_3701, 0.0));
                                float _3702 = isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0));
                                float _3703 = _3702 * (((isnan(0.0) ? _3689 : (isnan(_3689) ? 0.0 : max(_3689, 0.0))) * _3679) / ((_3692 * 0.699999988079071044921875) + 1.0));
                                float _3715 = exp2(log2(1.0 / ((_3692 * 3.5) + 5.0)) * 0.25);
                                float _3716 = 1.0 - _957;
                                float _3723 = sqrt(1.0 - ((1.0 - (_3716 * _3716)) * (1.0 - (_3715 * _3715))));
                                float _3724 = _3723 * _3723;
                                float _3725 = _3724 * _3724;
                                float _3726 = _3672 - _3176;
                                float _3727 = _3673 - _3177;
                                float _3728 = _3674 - _3178;
                                float _3732 = inversesqrt(dot(vec3(_3726, _3727, _3728), vec3(_3726, _3727, _3728)));
                                float _3736 = dot(vec3(_882, _885, _888), vec3((-0.0) - _3176, (-0.0) - _3177, (-0.0) - _3178));
                                float _4847 = isnan(0.0) ? _3736 : (isnan(_3736) ? 0.0 : max(_3736, 0.0));
                                float _3739 = isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0));
                                float _3740 = dot(vec3(_882, _885, _888), vec3(_3732 * _3726, _3732 * _3727, _3732 * _3728));
                                float _4858 = isnan(0.0) ? _3740 : (isnan(_3740) ? 0.0 : max(_3740, 0.0));
                                float _3743 = isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0));
                                float _3747 = ((_3743 * _3743) * (_3725 + (-1.0))) + 1.0;
                                float _3748 = _3685 * _3724;
                                float _3749 = _3748 * _3748;
                                float _3755 = ((1.0 - _3749) * dot(vec3(_882, _885, _888), vec3(_3672, _3673, _3674))) + _3749;
                                float _4869 = isnan(0.0) ? _3755 : (isnan(_3755) ? 0.0 : max(_3755, 0.0));
                                float _3756 = isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0));
                                float _3757 = 1.0 - _3724;
                                float _3767 = (0.5 / (((_3756 * ((_3739 * _3757) + _3724)) + 9.9999999392252902907785028219223e-09) + (((_3756 * _3757) + _3724) * _3739))) * _3756;
                                float _4880 = isnan(0.0) ? _3767 : (isnan(_3767) ? 0.0 : max(_3767, 0.0));
                                float _3777 = (_3702 * _3679) * (((_3725 * 3.1415927410125732421875) * (isnan(1.0) ? _4880 : (isnan(_4880) ? 1.0 : min(_4880, 1.0)))) / ((_3747 * _3747) * ((_3692 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3703 * _3549.y;
                                frontier_phi_78_pred_1 = _3703 * _3549.x;
                                frontier_phi_78_pred_2 = _3777 * _3561.z;
                                frontier_phi_78_pred_3 = _3777 * _3561.y;
                                frontier_phi_78_pred_4 = _3777 * _3561.x;
                                frontier_phi_78_pred_5 = _3703 * _3549.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3785 = frontier_phi_78_pred;
                            _3784 = frontier_phi_78_pred_1;
                            _3783 = frontier_phi_78_pred_2;
                            _3782 = frontier_phi_78_pred_3;
                            _3781 = frontier_phi_78_pred_4;
                            _3786 = frontier_phi_78_pred_5;
                            _3491 = _3784 + _3504;
                            _3492 = _3785 + _3505;
                            _3493 = _3786 + _3506;
                            _3488 = _3781 + _3501;
                            _3489 = _3782 + _3502;
                            _3490 = _3783 + _3503;
                            if (_3508 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3501 = _3488;
                                _3502 = _3489;
                                _3503 = _3490;
                                _3504 = _3491;
                                _3505 = _3492;
                                _3506 = _3493;
                                _3507 = _3508;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3493;
                        frontier_phi_72_pred_1 = _3492;
                        frontier_phi_72_pred_2 = _3491;
                        frontier_phi_72_pred_3 = _3490;
                        frontier_phi_72_pred_4 = _3489;
                        frontier_phi_72_pred_5 = _3488;
                    }
                    _3161 = frontier_phi_72_pred;
                    _3159 = frontier_phi_72_pred_1;
                    _3157 = frontier_phi_72_pred_2;
                    _3155 = frontier_phi_72_pred_3;
                    _3153 = frontier_phi_72_pred_4;
                    _3151 = frontier_phi_72_pred_5;
                    uint _3296 = _3295 + 1u;
                    if (_3296 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3289 = _3151;
                        _3290 = _3153;
                        _3291 = _3155;
                        _3292 = _3157;
                        _3293 = _3159;
                        _3294 = _3161;
                        _3295 = _3296;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3161;
                frontier_phi_60_61_ladder_1 = _3159;
                frontier_phi_60_61_ladder_2 = _3155;
                frontier_phi_60_61_ladder_3 = _3153;
                frontier_phi_60_61_ladder_4 = _3151;
                frontier_phi_60_61_ladder_5 = _3157;
            }
            else
            {
                frontier_phi_60_61_ladder = _3047;
                frontier_phi_60_61_ladder_1 = _3045;
                frontier_phi_60_61_ladder_2 = _3041;
                frontier_phi_60_61_ladder_3 = _3039;
                frontier_phi_60_61_ladder_4 = _3037;
                frontier_phi_60_61_ladder_5 = _3043;
            }
            _3150 = frontier_phi_60_61_ladder_4;
            _3152 = frontier_phi_60_61_ladder_3;
            _3154 = frontier_phi_60_61_ladder_2;
            _3156 = frontier_phi_60_61_ladder_5;
            _3158 = frontier_phi_60_61_ladder_1;
            _3160 = frontier_phi_60_61_ladder;
        }
        float _3165 = isnan(1.0) ? _941 : (isnan(_941) ? 1.0 : min(_941, 1.0));
        _2970 = (_3165 * _3156) + _2482;
        _2972 = (_3165 * _3158) + _2484;
        _2974 = (_3165 * _3160) + _2486;
        _2976 = ((_3150 * _925) * _3165) + _2820;
        _2978 = ((_3152 * _927) * _3165) + _2822;
        _2980 = ((_3154 * _928) * _3165) + _2824;
    }
    else
    {
        _2970 = _2482;
        _2972 = _2484;
        _2974 = _2486;
        _2976 = _2820;
        _2978 = _2822;
        _2980 = _2824;
    }
    float _4896 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
    float _4907 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
    float _4918 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
    uint _3000 = _248 + 6u;
    float _3008 = _863 / cbSceneParam._m0[86u].x;
    float _3009 = _864 / cbSceneParam._m0[86u].y;
    vec4 _3023 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3008, _3009, (log2((isnan(cbSceneParam._m0[77u].w) ? _797 : (isnan(_797) ? cbSceneParam._m0[77u].w : min(_797, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3025 = _3023.x;
    float _3026 = _3023.y;
    float _3027 = _3023.z;
    float _3028 = _3023.w;
    float _3100;
    float _3102;
    float _3104;
    float _3106;
    if (_797 > cbSceneParam._m0[78u].w)
    {
        float _3062 = isnan(_797) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _797 : min(cbSceneParam._m0[80u].w, _797));
        float _3063 = _3062 / _797;
        float _3074 = _3063 * _848;
        float _3075 = _849 * _3063;
        float _3076 = (-0.0) - _3075;
        float _3078 = _3063 * _850;
        float _3080 = (cbSceneParam._m0[77u].w * _3076) / _3062;
        float _3081 = _3080 + cbSceneParam._m0[79u].w;
        float _3082 = cbSceneParam._m0[79u].w - _3075;
        float _3088 = sqrt(((_3074 * _3074) + (_3075 * _3075)) + (_3078 * _3078));
        float _3091 = (1.0 - (cbSceneParam._m0[77u].w / _3062)) * _3088;
        float _3096 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3098 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3251;
        if (abs((_3076 - _3080) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3251 = ((((_3081 > 0.0) ? exp2(_3096 * _3081) : (2.0 - exp2(_3098 * _3081))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3091;
        }
        else
        {
            float _3211 = 1.0 / cbSceneParam._m0[80u].x;
            float _3212 = isnan(_3082) ? _3081 : (isnan(_3081) ? _3082 : max(_3081, _3082));
            float _3213 = isnan(_3082) ? _3081 : (isnan(_3081) ? _3082 : min(_3081, _3082));
            float _3222 = isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : min(_3212, 0.0));
            float _3223 = isnan(0.0) ? _3213 : (isnan(_3213) ? 0.0 : min(_3213, 0.0));
            _3251 = ((abs(_3088 / _3076) * cbSceneParam._m0[80u].y) * ((((_3222 - _3223) * 2.0) - ((exp2(_3096 * (isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : max(_3212, 0.0)))) - exp2(_3096 * (isnan(0.0) ? _3213 : (isnan(_3213) ? 0.0 : max(_3213, 0.0))))) * _3211)) - ((exp2(_3098 * _3222) - exp2(_3098 * _3223)) * _3211))) + (_3091 * cbSceneParam._m0[80u].z);
        }
        vec4 _3253 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3008, _3009, 1.0), 0.0);
        float _3262 = exp2((_3251 * (-1.44269502162933349609375)) * (1.0 - _3253.w));
        float _3263 = log2(_3262);
        float _3279 = log2(_3028);
        _3100 = (exp2(_3279 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3263 * cbSceneParam._m0[78u].x)) * _3253.x) / cbSceneParam._m0[78u].x)) + _3025;
        _3102 = (exp2(_3279 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3263 * cbSceneParam._m0[78u].y)) * _3253.y) / cbSceneParam._m0[78u].y)) + _3026;
        _3104 = (exp2(_3279 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3263 * cbSceneParam._m0[78u].z)) * _3253.z) / cbSceneParam._m0[78u].z)) + _3027;
        _3106 = _3262 * _3028;
    }
    else
    {
        _3100 = _3025;
        _3102 = _3026;
        _3104 = _3027;
        _3106 = _3028;
    }
    float _3118 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3119 = _3118 == 3.0;
    float _3120 = log2(_3106);
    float _3127 = exp2(_3120 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4896 : (isnan(_4896) ? 1.0 : min(_4896, 1.0))) * (_2970 + ((isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0))) * _941))) + ((_2976 + ((isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0))) * _1748)) * cbPerFrame._m0[3u].x));
    float _3128 = exp2(_3120 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4907 : (isnan(_4907) ? 1.0 : min(_4907, 1.0))) * (_2972 + ((isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0))) * _941))) + ((_2978 + ((isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0))) * _1748)) * cbPerFrame._m0[3u].x));
    float _3129 = exp2(_3120 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4918 : (isnan(_4918) ? 1.0 : min(_4918, 1.0))) * (_2974 + ((isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0))) * _941))) + ((_2980 + ((isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0))) * _1748)) * cbPerFrame._m0[3u].x));
    float _3138 = (_3118 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3138 * (_3119 ? _3127 : (_3127 + (cbSceneParam._m0[72u].w * _3100)));
    SV_Target.y = _3138 * (_3119 ? _3128 : (_3128 + (cbSceneParam._m0[72u].w * _3102)));
    SV_Target.z = _3138 * (_3119 ? _3129 : (_3129 + (cbSceneParam._m0[72u].w * _3104)));
    SV_Target.w = cbInstanceData._m0[_3000].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3000].w;
}


