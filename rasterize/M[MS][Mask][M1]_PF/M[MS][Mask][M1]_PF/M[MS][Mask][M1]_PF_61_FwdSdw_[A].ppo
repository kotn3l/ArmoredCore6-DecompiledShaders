#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1370;
float _4032;
float _4033;
float _4034;
float _4035;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _224 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _225 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _226 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _232 = inversesqrt(dot(vec3(_224, _225, _226), vec3(_224, _225, _226)));
    float _239 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _246 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _252 = uint(roundEven(NORMAL.w)) * 13u;
    uint _258 = _252 + 1u;
    uint _262 = _252 + 2u;
    float _271 = sqrt(((cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x)) + (cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x));
    float _272 = _271 * TEXCOORD.z;
    float _273 = _271 * TEXCOORD.w;
    vec4 _293 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _299 = _293.x * cbMtdParam._m0[11u].x;
    float _300 = _293.y * cbMtdParam._m0[11u].y;
    float _301 = _293.z * cbMtdParam._m0[11u].z;
    vec4 _320 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _272) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _273) + cbTextureTilingScale._m0[5u].w));
    vec4 _340 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _374 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[27u].x * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].y * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _376 = _374.x;
    float _388 = dot(vec4(_376, _374.yzw), vec4(cbMtdParam._m0[28u].w, cbMtdParam._m0[29u].xy, 0.0));
    float _405 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _340.x) * 2.0) - ((((_376 - _388) * cbMtdParam._m0[23u].w) + _388) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4044 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _406 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
    float _413 = (_406 * ((_320.x * cbMtdParam._m0[12u].x) - _299)) + _299;
    float _414 = (_406 * ((_320.y * cbMtdParam._m0[12u].y) - _300)) + _300;
    float _415 = (_406 * ((_320.z * cbMtdParam._m0[12u].z) - _301)) + _301;
    vec4 _432 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _272) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _273) + cbTextureTilingScale._m0[3u].w));
    vec4 _454 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].z * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].w * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _456 = _454.x;
    float _466 = dot(vec4(_456, _454.yzw), vec4(cbMtdParam._m0[30u].yzw, 0.0));
    float _480 = ((cbMtdParam._m0[25u].z * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _340.y) * 2.0) - ((((_456 - _466) * cbMtdParam._m0[23u].w) + _466) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4055 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _481 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
    float _488 = (_481 * ((_432.x * cbMtdParam._m0[13u].x) - _413)) + _413;
    float _489 = (_481 * ((_432.y * cbMtdParam._m0[13u].y) - _414)) + _414;
    float _490 = (_481 * ((_432.z * cbMtdParam._m0[13u].z) - _415)) + _415;
    vec4 _508 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _272) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _273) + cbTextureTilingScale._m0[4u].w));
    vec4 _525 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _527 = _525.x;
    float _528 = _525.y;
    float _529 = _525.z;
    float _536 = ((_508.x - _527) * _406) + _527;
    float _537 = ((_508.y - _528) * _406) + _528;
    float _538 = ((_508.z - _529) * _406) + _529;
    vec4 _550 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _272) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _273) + cbTextureTilingScale._m0[2u].w));
    float _563 = ((_550.z - _538) * _481) + _538;
    float _566 = ((((_550.x - _536) * _481) + _536) * 2.0) + (-1.0);
    float _568 = ((((_550.y - _537) * _481) + _537) * 2.0) + (-1.0);
    float _569 = dot(vec2(_566, _568), vec2(_566, _568));
    float _4066 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _574 = sqrt(1.0 - (isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0))));
    vec4 _588 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _613 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _272) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _273) + cbTextureTilingScale._m0[11u].w));
    float _615 = _613.x;
    float _616 = 1.0 - _615;
    float _632 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_615 - _616) * cbMtdParam._m0[24u].z) + _616) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4077 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _633 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
    float _640 = (_633 * (cbMtdParam._m0[17u].x - _488)) + _488;
    float _641 = (_633 * (cbMtdParam._m0[17u].y - _489)) + _489;
    float _642 = (_633 * (cbMtdParam._m0[17u].z - _490)) + _490;
    vec4 _668 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _670 = _668.x;
    float _688 = ((texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _272) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _273) + cbTextureTilingScale._m0[9u].w)).x - _670) * _406) + _670;
    float _705 = ((texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _272) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _273) + cbTextureTilingScale._m0[21u].w)).x - _688) * _481) + _688;
    float _709 = ((texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _705) * cbMtdParam._m0[19u].z) + _705;
    float _711 = _709 - (_709 * _633);
    float _715 = (cbMtdParam._m0[19u].w * (_588.z - _563)) + _563;
    vec4 _728 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _272) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _273) + cbTextureTilingScale._m0[15u].w));
    float _735 = (_728.x * 2.0) + (-1.0);
    float _736 = (_728.y * 2.0) + (-1.0);
    float _737 = dot(vec2(_735, _736), vec2(_735, _736));
    float _4088 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _745 = (_633 * (_728.z - _715)) + _715;
    float _748 = (((_588.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w) + _566;
    float _749 = (((_588.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w) + _568;
    float _761 = (((_735 - _748) + (cbMtdParam._m0[21u].x * _748)) * _633) + _748;
    float _762 = (((_736 - _749) + (cbMtdParam._m0[21u].x * _749)) * _633) + _749;
    float _763 = (_633 * (sqrt(1.0 - (isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0)))) - _574)) + _574;
    float _765 = cbMtdParam._m0[22u].x + _588.w;
    float _767 = gl_FragCoord.x * 0.125;
    float _769 = gl_FragCoord.y * 0.125;
    float _779 = fma(_763, _239 * NORMAL.x, fma(_762, _246 * TANGENT.x, (_232 * _224) * _761));
    float _782 = fma(_763, _239 * NORMAL.y, fma(_762, _246 * TANGENT.y, (_232 * _225) * _761));
    float _785 = fma(_763, _239 * NORMAL.z, fma(_762, _246 * TANGENT.z, (_232 * _226) * _761));
    float _789 = inversesqrt(dot(vec3(_779, _782, _785), vec3(_779, _782, _785)));
    float _790 = _789 * _779;
    float _791 = _789 * _782;
    float _792 = _789 * _785;
    float _4099 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _793 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
    float _4110 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _4121 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _4132 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _4143 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _4154 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _798 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
    if (!(cbMtdParam._m0[25u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_767, _769)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _816 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _857 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _867 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _857);
    float _868 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _857);
    float _869 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _857);
    float _873 = inversesqrt(dot(vec3(_867, _868, _869), vec3(_867, _868, _869)));
    float _874 = _867 * _873;
    float _875 = _868 * _873;
    float _876 = _869 * _873;
    vec4 _878 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_767, _769));
    float _880 = _878.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1052 = sqrt(((_867 * _867) + (_868 * _868)) + (_869 * _869));
        float _1058 = (cbMatDynParam._m0[5u].x * _1052) + cbMatDynParam._m0[5u].y;
        float _4165 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1059 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
        float _1063 = (cbMatDynParam._m0[5u].z * _1052) + cbMatDynParam._m0[5u].w;
        float _4176 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0))) - _1059)) + _1059) < ((_880 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _891 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _892 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _910 = fma(_792, cbSceneParam._m0[5u].z, fma(_791, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _790));
    float _913 = fma(_792, cbSceneParam._m0[6u].z, fma(_791, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _790));
    float _916 = fma(_792, cbSceneParam._m0[7u].z, fma(_791, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _790));
    uint _929 = _252 + 9u;
    uint _930 = _929 + uint(cbMatDynParam._m0[0u].w);
    float _936 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0)))) * cbInstanceData._m0[_930].x;
    float _937 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0)))) * cbInstanceData._m0[_930].y;
    float _938 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0)))) * cbInstanceData._m0[_930].z;
    float _4187 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
    float _939 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
    float _4198 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
    float _940 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
    float _4209 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
    float _941 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
    float _942 = 1.0 - _798;
    float _943 = _939 * _942;
    float _944 = _940 * _942;
    float _945 = _941 * _942;
    float _950 = (_939 + (-0.039999999105930328369140625)) * _798;
    float _951 = (_940 + (-0.039999999105930328369140625)) * _798;
    float _952 = (_941 + (-0.039999999105930328369140625)) * _798;
    float _953 = _950 + 0.039999999105930328369140625;
    float _955 = _951 + 0.039999999105930328369140625;
    float _956 = _952 + 0.039999999105930328369140625;
    vec4 _965 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _891, cbSceneParam._m0[86u].y * _892));
    float _969 = ((isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0))) * TEXCOORD_5.w) * _965.x;
    float _970 = dot(vec3(_790, _791, _792), vec3(_874, _875, _876));
    float _973 = _970 * 2.0;
    float _977 = (_973 * _790) - _874;
    float _978 = (_973 * _791) - _875;
    float _979 = (_973 * _792) - _876;
    float _983 = abs(dot(vec3(_874, _875, _876), vec3(_790, _791, _792)));
    float _4220 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
    float _985 = sqrt(_793);
    float _998 = exp2((_985 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_985 * 3.0));
    float _1004 = (1.0 - _998) * ((_985 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1005 = _998 * _985;
    float _1033 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1037 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1041 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1369;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1094 = fma(_1041, cbModelParam._m0[26u].z, fma(_1037, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1033));
        float _1098 = fma(_1041, cbModelParam._m0[27u].z, fma(_1037, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1033));
        float _1102 = fma(_1041, cbModelParam._m0[28u].z, fma(_1037, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1033));
        float _1127 = _1033 + _790;
        float _1128 = _1037 + _791;
        float _1129 = _1041 + _792;
        float _1139 = fma(_1129, cbModelParam._m0[26u].z, fma(_1128, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1127)) - _1094;
        float _1140 = fma(_1129, cbModelParam._m0[27u].z, fma(_1128, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1127)) - _1098;
        float _1141 = fma(_1129, cbModelParam._m0[28u].z, fma(_1128, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1127)) - _1102;
        float _1145 = inversesqrt(dot(vec3(_1139, _1140, _1141), vec3(_1139, _1140, _1141)));
        float _1158 = ((_1145 * _1139) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1094 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1159 = ((_1145 * _1140) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1098 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1160 = ((_1145 * _1141) / cbModelParam._m0[34u].z) + ((((((_1102 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1163 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1158, _1159, _1160), 0.0);
        vec4 _1170 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1158, _1159, _1160), 0.0);
        vec4 _1177 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1158, _1159, _1160), 0.0);
        vec4 _1184 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1158, _1159, _1160), 0.0);
        float _1197 = exp2((_1163.w + (-0.5)) * 20.0) * 2.0;
        float _1198 = _1197 * (_1163.x + (-0.5));
        float _1199 = _1197 * (_1163.y + (-0.5));
        float _1200 = _1197 * (_1163.z + (-0.5));
        float _1207 = exp2((_1170.w + (-0.5)) * 20.0) * 2.0;
        float _1208 = _1207 * (_1170.x + (-0.5));
        float _1209 = _1207 * (_1170.y + (-0.5));
        float _1210 = _1207 * (_1170.z + (-0.5));
        float _1217 = exp2((_1177.w + (-0.5)) * 20.0) * 2.0;
        float _1218 = _1217 * (_1177.x + (-0.5));
        float _1219 = _1217 * (_1177.y + (-0.5));
        float _1220 = _1217 * (_1177.z + (-0.5));
        float _1227 = exp2((_1184.w + (-0.5)) * 20.0) * 2.0;
        float _1228 = _1227 * (_1184.x + (-0.5));
        float _1229 = _1227 * (_1184.y + (-0.5));
        float _1230 = _1227 * (_1184.z + (-0.5));
        float _1231 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1232 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1233 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1234 = _1198 * 0.5;
        float _1235 = _1208 * 0.5;
        float _1236 = _1218 * 0.5;
        float _1237 = dot(vec3(_1234, _1235, _1236), vec3(_1234, _1235, _1236));
        float _1242 = (_1237 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1237);
        float _1251 = (dot(vec3(_790, _791, _792), vec3(_1242 * _1234, _1242 * _1235, _1242 * _1236)) + 1.0) * 0.5;
        float _4246 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1261 = sqrt(((_1235 * _1235) + (_1234 * _1234)) + (_1236 * _1236)) / (_1231 + 9.9999997473787516355514526367188e-06);
        float _4257 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1262 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
        float _1263 = _1262 * 2.0;
        float _1267 = (1.0 - _1262) / (_1262 + 1.0);
        float _4268 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1268 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
        float _1277 = ((((1.0 - _1268) * (_1263 + 2.0)) * exp2(log2(isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0))) * (_1263 + 1.0))) + _1268) * _1231;
        float _1278 = _1199 * 0.5;
        float _1279 = _1209 * 0.5;
        float _1280 = _1219 * 0.5;
        float _1281 = dot(vec3(_1278, _1279, _1280), vec3(_1278, _1279, _1280));
        float _1286 = (_1281 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1281);
        float _1294 = (dot(vec3(_790, _791, _792), vec3(_1286 * _1278, _1286 * _1279, _1286 * _1280)) + 1.0) * 0.5;
        float _4279 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1303 = sqrt(((_1279 * _1279) + (_1278 * _1278)) + (_1280 * _1280)) / (_1232 + 9.9999997473787516355514526367188e-06);
        float _4290 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1304 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
        float _1305 = _1304 * 2.0;
        float _1309 = (1.0 - _1304) / (_1304 + 1.0);
        float _4301 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1310 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
        float _1319 = ((((1.0 - _1310) * (_1305 + 2.0)) * exp2(log2(isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0))) * (_1305 + 1.0))) + _1310) * _1232;
        float _1320 = _1200 * 0.5;
        float _1321 = _1210 * 0.5;
        float _1322 = _1220 * 0.5;
        float _1323 = dot(vec3(_1320, _1321, _1322), vec3(_1320, _1321, _1322));
        float _1328 = (_1323 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1323);
        float _1336 = (dot(vec3(_790, _791, _792), vec3(_1328 * _1320, _1328 * _1321, _1328 * _1322)) + 1.0) * 0.5;
        float _4312 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1345 = sqrt(((_1321 * _1321) + (_1320 * _1320)) + (_1322 * _1322)) / (_1233 + 9.9999997473787516355514526367188e-06);
        float _4323 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1346 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
        float _1347 = _1346 * 2.0;
        float _1351 = (1.0 - _1346) / (_1346 + 1.0);
        float _4334 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1352 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
        float _1361 = ((((1.0 - _1352) * (_1347 + 2.0)) * exp2(log2(isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0))) * (_1347 + 1.0))) + _1352) * _1233;
        _1369 = _1200;
        _1371 = _1199;
        _1372 = _1198;
        _1373 = _1210;
        _1374 = _1209;
        _1375 = _1208;
        _1376 = _1220;
        _1377 = _1219;
        _1378 = _1218;
        _1379 = _1233;
        _1380 = _1232;
        _1381 = _1231;
        _1382 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0)));
        _1383 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0)));
        _1384 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0)));
    }
    else
    {
        _1369 = _1370;
        _1371 = _1370;
        _1372 = _1370;
        _1373 = _1370;
        _1374 = _1370;
        _1375 = _1370;
        _1376 = _1370;
        _1377 = _1370;
        _1378 = _1370;
        _1379 = _1370;
        _1380 = _1370;
        _1381 = _1370;
        _1382 = 0.0;
        _1383 = 0.0;
        _1384 = 0.0;
    }
    float _1677;
    float _1678;
    float _1679;
    float _1680;
    float _1681;
    float _1682;
    float _1683;
    float _1684;
    float _1685;
    float _1686;
    float _1687;
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1408 = fma(_1041, cbModelParam._m0[30u].z, fma(_1037, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1033));
        float _1412 = fma(_1041, cbModelParam._m0[31u].z, fma(_1037, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1033));
        float _1416 = fma(_1041, cbModelParam._m0[32u].z, fma(_1037, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1033));
        float _1439 = _1033 + _790;
        float _1440 = _1037 + _791;
        float _1441 = _1041 + _792;
        float _1451 = fma(_1441, cbModelParam._m0[30u].z, fma(_1440, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1439)) - _1408;
        float _1452 = fma(_1441, cbModelParam._m0[31u].z, fma(_1440, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1439)) - _1412;
        float _1453 = fma(_1441, cbModelParam._m0[32u].z, fma(_1440, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1439)) - _1416;
        float _1457 = inversesqrt(dot(vec3(_1451, _1452, _1453), vec3(_1451, _1452, _1453)));
        float _1470 = ((_1457 * _1451) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1408 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1471 = ((_1457 * _1452) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1412 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1472 = ((_1457 * _1453) / cbModelParam._m0[35u].z) + ((((((_1416 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1474 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1470, _1471, _1472), 0.0);
        vec4 _1481 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1470, _1471, _1472), 0.0);
        vec4 _1488 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1470, _1471, _1472), 0.0);
        vec4 _1495 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1470, _1471, _1472), 0.0);
        float _1507 = exp2((_1474.w + (-0.5)) * 20.0) * 2.0;
        float _1508 = _1507 * (_1474.x + (-0.5));
        float _1509 = _1507 * (_1474.y + (-0.5));
        float _1510 = _1507 * (_1474.z + (-0.5));
        float _1517 = exp2((_1481.w + (-0.5)) * 20.0) * 2.0;
        float _1518 = _1517 * (_1481.x + (-0.5));
        float _1519 = _1517 * (_1481.y + (-0.5));
        float _1520 = _1517 * (_1481.z + (-0.5));
        float _1527 = exp2((_1488.w + (-0.5)) * 20.0) * 2.0;
        float _1528 = _1527 * (_1488.x + (-0.5));
        float _1529 = _1527 * (_1488.y + (-0.5));
        float _1530 = _1527 * (_1488.z + (-0.5));
        float _1537 = exp2((_1495.w + (-0.5)) * 20.0) * 2.0;
        float _1538 = _1537 * (_1495.x + (-0.5));
        float _1539 = _1537 * (_1495.y + (-0.5));
        float _1540 = _1537 * (_1495.z + (-0.5));
        float _1541 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1542 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        float _1543 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1544 = _1508 * 0.5;
        float _1545 = _1518 * 0.5;
        float _1546 = _1528 * 0.5;
        float _1547 = dot(vec3(_1544, _1545, _1546), vec3(_1544, _1545, _1546));
        float _1552 = (_1547 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1547);
        float _1560 = (dot(vec3(_790, _791, _792), vec3(_1552 * _1544, _1552 * _1545, _1552 * _1546)) + 1.0) * 0.5;
        float _4375 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
        float _1569 = sqrt(((_1545 * _1545) + (_1544 * _1544)) + (_1546 * _1546)) / (_1541 + 9.9999997473787516355514526367188e-06);
        float _4386 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1570 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
        float _1571 = _1570 * 2.0;
        float _1575 = (1.0 - _1570) / (_1570 + 1.0);
        float _4397 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1576 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
        float _1585 = ((((1.0 - _1576) * (_1571 + 2.0)) * exp2(log2(isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0))) * (_1571 + 1.0))) + _1576) * _1541;
        float _1586 = _1509 * 0.5;
        float _1587 = _1519 * 0.5;
        float _1588 = _1529 * 0.5;
        float _1589 = dot(vec3(_1586, _1587, _1588), vec3(_1586, _1587, _1588));
        float _1594 = (_1589 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1589);
        float _1602 = (dot(vec3(_790, _791, _792), vec3(_1594 * _1586, _1594 * _1587, _1594 * _1588)) + 1.0) * 0.5;
        float _4408 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
        float _1611 = sqrt(((_1587 * _1587) + (_1586 * _1586)) + (_1588 * _1588)) / (_1542 + 9.9999997473787516355514526367188e-06);
        float _4419 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
        float _1612 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
        float _1613 = _1612 * 2.0;
        float _1617 = (1.0 - _1612) / (_1612 + 1.0);
        float _4430 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
        float _1618 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
        float _1627 = ((((1.0 - _1618) * (_1613 + 2.0)) * exp2(log2(isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0))) * (_1613 + 1.0))) + _1618) * _1542;
        float _1628 = _1510 * 0.5;
        float _1629 = _1520 * 0.5;
        float _1630 = _1530 * 0.5;
        float _1631 = dot(vec3(_1628, _1629, _1630), vec3(_1628, _1629, _1630));
        float _1636 = (_1631 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1631);
        float _1644 = (dot(vec3(_790, _791, _792), vec3(_1636 * _1628, _1636 * _1629, _1636 * _1630)) + 1.0) * 0.5;
        float _4441 = isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0));
        float _1653 = sqrt(((_1629 * _1629) + (_1628 * _1628)) + (_1630 * _1630)) / (_1543 + 9.9999997473787516355514526367188e-06);
        float _4452 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
        float _1654 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
        float _1655 = _1654 * 2.0;
        float _1659 = (1.0 - _1654) / (_1654 + 1.0);
        float _4463 = isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0));
        float _1660 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
        float _1669 = ((((1.0 - _1660) * (_1655 + 2.0)) * exp2(log2(isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0))) * (_1655 + 1.0))) + _1660) * _1543;
        _1677 = _1510;
        _1678 = _1509;
        _1679 = _1508;
        _1680 = _1520;
        _1681 = _1519;
        _1682 = _1518;
        _1683 = _1530;
        _1684 = _1529;
        _1685 = _1528;
        _1686 = _1543;
        _1687 = _1542;
        _1688 = _1541;
        _1689 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0)));
        _1690 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0)));
        _1691 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0)));
    }
    else
    {
        _1677 = _1370;
        _1678 = _1370;
        _1679 = _1370;
        _1680 = _1370;
        _1681 = _1370;
        _1682 = _1370;
        _1683 = _1370;
        _1684 = _1370;
        _1685 = _1370;
        _1686 = _1370;
        _1687 = _1370;
        _1688 = _1370;
        _1689 = 0.0;
        _1690 = 0.0;
        _1691 = 0.0;
    }
    float _1701 = (cbModelParam._m0[1u].x * (_1689 - _1382)) + _1382;
    float _1702 = (cbModelParam._m0[1u].x * (_1690 - _1383)) + _1383;
    float _1703 = (cbModelParam._m0[1u].x * (_1691 - _1384)) + _1384;
    float _1724 = fma(_1703, cbSceneParam._m0[89u].z, fma(_1702, cbSceneParam._m0[89u].y, _1701 * cbSceneParam._m0[89u].x));
    float _1727 = fma(_1703, cbSceneParam._m0[90u].z, fma(_1702, cbSceneParam._m0[90u].y, _1701 * cbSceneParam._m0[90u].x));
    float _1730 = fma(_1703, cbSceneParam._m0[91u].z, fma(_1702, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1701));
    float _1745 = _977 * 0.5;
    float _1746 = _978 * 0.5;
    float _1747 = _979 * 0.5;
    float _1748 = dot(vec4(_1745, _1746, _1747, 1.0), vec4(_1679, _1682, _1685, _1688));
    float _1751 = dot(vec4(_1745, _1746, _1747, 1.0), vec4(_1678, _1681, _1684, _1687));
    float _1754 = dot(vec4(_1745, _1746, _1747, 1.0), vec4(_1677, _1680, _1683, _1686));
    float _1788;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1761 = dot(vec4(_1745, _1746, _1747, 1.0), vec4(_1369, _1373, _1376, _1379));
        float _1765 = dot(vec4(_1745, _1746, _1747, 1.0), vec4(_1371, _1374, _1377, _1380));
        float _1769 = dot(vec4(_1745, _1746, _1747, 1.0), vec4(_1372, _1375, _1378, _1381));
        float _1776 = dot(vec4(cbModelParam._m0[39u]), vec4(_1745, _1746, _1747, 1.0));
        _1788 = dot(vec3(isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0)), isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0)), isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1776) ? 0.0 : (isnan(0.0) ? _1776 : max(0.0, _1776))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1788 = 1.0;
    }
    float _1799;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1790 = dot(vec4(cbModelParam._m0[40u]), vec4(_1745, _1746, _1747, 1.0));
        _1799 = dot(vec3(isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0)), isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0)), isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1790) ? 0.0 : (isnan(0.0) ? _1790 : max(0.0, _1790))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1799 = 1.0;
    }
    float _1803 = (_1799 * cbModelParam._m0[1u].x) + (_1788 * (1.0 - cbModelParam._m0[1u].x));
    float _1813 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _793);
    float _1814 = isnan(_1813) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1813 : min(cbModelParam._m0[25u].z, _1813));
    float _1895;
    float _1897;
    float _1899;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1862 = fma(_1041, cbModelParam._m0[13u].z, fma(_1037, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1033)) + cbModelParam._m0[13u].w;
        float _1866 = fma(_1041, cbModelParam._m0[14u].z, fma(_1037, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1033)) + cbModelParam._m0[14u].w;
        float _1870 = fma(_1041, cbModelParam._m0[15u].z, fma(_1037, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1033)) + cbModelParam._m0[15u].w;
        float _1873 = fma(_979, cbModelParam._m0[13u].z, fma(_978, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _977));
        float _1876 = fma(_979, cbModelParam._m0[14u].z, fma(_978, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _977));
        float _1879 = fma(_979, cbModelParam._m0[15u].z, fma(_978, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _977));
        float _1907;
        if (_1873 > 0.0)
        {
            _1907 = abs((1.0 - _1862) / _1873);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1873 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1862 + 1.0) / _1873);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1907 = frontier_phi_19_17_ladder;
        }
        float _2079;
        if (_1876 > 0.0)
        {
            _2079 = abs((1.0 - _1866) / _1876);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1876 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1866 + 1.0) / _1876);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2079 = frontier_phi_28_24_ladder;
        }
        float _2374;
        if (_1879 > 0.0)
        {
            _2374 = abs((1.0 - _1870) / _1879);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1879 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1870 + 1.0) / _1879);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2374 = frontier_phi_40_35_ladder;
        }
        float _2376 = isnan(_2079) ? _1907 : (isnan(_1907) ? _2079 : min(_1907, _2079));
        float _2377 = isnan(_2374) ? _2376 : (isnan(_2376) ? _2374 : min(_2376, _2374));
        float _2381 = (_2377 * _1873) + _1862;
        float _2382 = (_2377 * _1876) + _1866;
        float _2383 = (_2377 * _1879) + _1870;
        float _2384 = _2377 * 9.9999997473787516355514526367188e-05;
        float _2386 = (-1.0) - _2384;
        float _2388 = _2384 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2383 > _2388) || ((_2383 < _2386) || ((_2382 > _2388) || ((_2382 < _2386) || ((_2381 < _2386) || (_2381 > _2388))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2528 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2383, cbModelParam._m0[9u].z, fma(_2382, cbModelParam._m0[9u].y, _2381 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2383, cbModelParam._m0[10u].z, fma(_2382, cbModelParam._m0[10u].y, _2381 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2383, cbModelParam._m0[11u].z, fma(_2382, cbModelParam._m0[11u].y, _2381 * cbModelParam._m0[11u].x))), _1814);
            frontier_phi_18_40_ladder = _2528.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2528.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2528.x * cbModelParam._m0[1u].y;
        }
        _1895 = frontier_phi_18_40_ladder_2;
        _1897 = frontier_phi_18_40_ladder_1;
        _1899 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1883 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_977, _978, _979), _1814);
        _1895 = _1883.x * cbModelParam._m0[1u].y;
        _1897 = _1883.y * cbModelParam._m0[1u].y;
        _1899 = _1883.z * cbModelParam._m0[1u].y;
    }
    float _1903 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _793);
    float _1904 = isnan(_1903) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1903 : min(cbModelParam._m0[25u].w, _1903));
    float _1994;
    float _1996;
    float _1998;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1958 = fma(_1041, cbModelParam._m0[21u].z, fma(_1037, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1033)) + cbModelParam._m0[21u].w;
        float _1962 = fma(_1041, cbModelParam._m0[22u].z, fma(_1037, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1033)) + cbModelParam._m0[22u].w;
        float _1966 = fma(_1041, cbModelParam._m0[23u].z, fma(_1037, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1033)) + cbModelParam._m0[23u].w;
        float _1969 = fma(_979, cbModelParam._m0[21u].z, fma(_978, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _977));
        float _1972 = fma(_979, cbModelParam._m0[22u].z, fma(_978, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _977));
        float _1975 = fma(_979, cbModelParam._m0[23u].z, fma(_978, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _977));
        float _2084;
        if (_1969 > 0.0)
        {
            _2084 = abs((1.0 - _1958) / _1969);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1969 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1958 + 1.0) / _1969);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2084 = frontier_phi_30_26_ladder;
        }
        float _2401;
        if (_1972 > 0.0)
        {
            _2401 = abs((1.0 - _1962) / _1972);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1972 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1962 + 1.0) / _1972);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2401 = frontier_phi_42_37_ladder;
        }
        float _2739;
        if (_1975 > 0.0)
        {
            _2739 = abs((1.0 - _1966) / _1975);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1975 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1966 + 1.0) / _1975);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2739 = frontier_phi_52_49_ladder;
        }
        float _2741 = isnan(_2401) ? _2084 : (isnan(_2084) ? _2401 : min(_2084, _2401));
        float _2742 = isnan(_2739) ? _2741 : (isnan(_2741) ? _2739 : min(_2741, _2739));
        float _2746 = (_2742 * _1969) + _1958;
        float _2747 = (_2742 * _1972) + _1962;
        float _2748 = (_2742 * _1975) + _1966;
        float _2749 = _2742 * 9.9999997473787516355514526367188e-05;
        float _2750 = (-1.0) - _2749;
        float _2752 = _2749 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2748 > _2752) || ((_2748 < _2750) || ((_2747 > _2752) || ((_2747 < _2750) || ((_2746 < _2750) || (_2746 > _2752))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2870 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2748, cbModelParam._m0[17u].z, fma(_2747, cbModelParam._m0[17u].y, _2746 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2748, cbModelParam._m0[18u].z, fma(_2747, cbModelParam._m0[18u].y, _2746 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2748, cbModelParam._m0[19u].z, fma(_2747, cbModelParam._m0[19u].y, _2746 * cbModelParam._m0[19u].x))), _1904);
            frontier_phi_27_52_ladder = _2870.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2870.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2870.x * cbModelParam._m0[1u].z;
        }
        _1994 = frontier_phi_27_52_ladder_2;
        _1996 = frontier_phi_27_52_ladder_1;
        _1998 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1978 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_977, _978, _979), _1904);
        _1994 = _1978.x * cbModelParam._m0[1u].z;
        _1996 = _1978.y * cbModelParam._m0[1u].z;
        _1998 = _1978.z * cbModelParam._m0[1u].z;
    }
    float _2011 = (((_1004 * _953) + _1005) * _969) * ((cbModelParam._m0[1u].w * (_1994 - _1895)) + _1895);
    float _2013 = (((_1004 * _955) + _1005) * _969) * ((cbModelParam._m0[1u].w * (_1996 - _1897)) + _1897);
    float _2015 = (((_1004 * _956) + _1005) * _969) * ((cbModelParam._m0[1u].w * (_1998 - _1899)) + _1899);
    float _2018 = fma(_2015, cbSceneParam._m0[89u].z, fma(_2013, cbSceneParam._m0[89u].y, _2011 * cbSceneParam._m0[89u].x));
    float _2021 = fma(_2015, cbSceneParam._m0[90u].z, fma(_2013, cbSceneParam._m0[90u].y, _2011 * cbSceneParam._m0[90u].x));
    float _2024 = fma(_2015, cbSceneParam._m0[91u].z, fma(_2013, cbSceneParam._m0[91u].y, _2011 * cbSceneParam._m0[91u].x));
    float _2058 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2062 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2066 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2070 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2071 = _2058 / _2070;
    float _2072 = _2062 / _2070;
    float _2073 = _2066 / _2070;
    float _2220;
    float _2221;
    float _2222;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2100 = ((uint(_2073 > cbSceneParam._m0[59u].y) + uint(_2073 > cbSceneParam._m0[59u].x)) + uint(_2073 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2101 = _2100 + 43u;
        uint _2109 = _2100 + 44u;
        uint _2117 = _2100 + 45u;
        uint _2125 = _2100 + 46u;
        float _2136 = fma(_2070, cbSceneParam._m0[_2101].w, fma(_2066, cbSceneParam._m0[_2101].z, fma(_2062, cbSceneParam._m0[_2101].y, _2058 * cbSceneParam._m0[_2101].x)));
        float _2140 = fma(_2070, cbSceneParam._m0[_2109].w, fma(_2066, cbSceneParam._m0[_2109].z, fma(_2062, cbSceneParam._m0[_2109].y, _2058 * cbSceneParam._m0[_2109].x)));
        float _2148 = fma(_2070, cbSceneParam._m0[_2125].w, fma(_2066, cbSceneParam._m0[_2125].z, fma(_2062, cbSceneParam._m0[_2125].y, _2058 * cbSceneParam._m0[_2125].x)));
        float _2153 = cbSceneParam._m0[33u].z * _2148;
        float _2155 = cbSceneParam._m0[33u].w * _2148;
        float _2158 = fma(_2070, cbSceneParam._m0[_2117].w, fma(_2066, cbSceneParam._m0[_2117].z, fma(_2062, cbSceneParam._m0[_2117].y, _2058 * cbSceneParam._m0[_2117].x))) / _2148;
        float _2206 = (cbSceneParam._m0[33u].x - sqrt(((_2072 * _2072) + (_2071 * _2071)) + (_2073 * _2073))) * cbSceneParam._m0[33u].y;
        float _4589 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
        float _2213 = (isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2153 + _2136) / _2148, (_2155 + _2140) / _2148), _2158), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2155 + _2136) / _2148, (_2140 - _2153) / _2148), _2158), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2136 - _2153) / _2148, (_2140 - _2155) / _2148), _2158), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2136 - _2155) / _2148, (_2153 + _2140) / _2148), _2158), 0.0)).x), vec4(0.25)));
        _2220 = 1.0 - (_2213 * cbSceneParam._m0[34u].x);
        _2221 = 1.0 - (_2213 * cbSceneParam._m0[34u].y);
        _2222 = 1.0 - (_2213 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2220 = 1.0;
        _2221 = 1.0;
        _2222 = 1.0;
    }
    float _2286;
    float _2288;
    float _2290;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2274 = fma(_2070, cbSceneParam._m0[63u].w, fma(_2066, cbSceneParam._m0[63u].z, fma(_2062, cbSceneParam._m0[63u].y, _2058 * cbSceneParam._m0[63u].x)));
        float _2275 = fma(_2070, cbSceneParam._m0[60u].w, fma(_2066, cbSceneParam._m0[60u].z, fma(_2062, cbSceneParam._m0[60u].y, _2058 * cbSceneParam._m0[60u].x))) / _2274;
        float _2276 = fma(_2070, cbSceneParam._m0[61u].w, fma(_2066, cbSceneParam._m0[61u].z, fma(_2062, cbSceneParam._m0[61u].y, _2058 * cbSceneParam._m0[61u].x))) / _2274;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2275 >= cbSceneParam._m0[64u].x) && (_2276 >= cbSceneParam._m0[64u].y)) && (_2275 <= cbSceneParam._m0[64u].z)) && (_2276 <= cbSceneParam._m0[64u].w))
        {
            float _2414 = fma(_2070, cbSceneParam._m0[62u].w, fma(_2066, cbSceneParam._m0[62u].z, fma(_2062, cbSceneParam._m0[62u].y, _2058 * cbSceneParam._m0[62u].x))) / _2274;
            float _2418 = isnan(cbSceneParam._m0[41u].w) ? _2414 : (isnan(_2414) ? cbSceneParam._m0[41u].w : max(_2414, cbSceneParam._m0[41u].w));
            float _2461 = (cbSceneParam._m0[33u].x - sqrt(((_2072 * _2072) + (_2071 * _2071)) + (_2073 * _2073))) * cbSceneParam._m0[33u].y;
            float _4605 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
            float _2468 = (isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2275, cbSceneParam._m0[33u].w + _2276), _2418), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2275, _2276 - cbSceneParam._m0[33u].z), _2418), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2275 - cbSceneParam._m0[33u].z, _2276 - cbSceneParam._m0[33u].w), _2418), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2275 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2276), _2418), 0.0)).x), vec4(0.25)));
            float _2472 = 1.0 - (_2468 * cbSceneParam._m0[34u].x);
            float _2473 = 1.0 - (_2468 * cbSceneParam._m0[34u].y);
            float _2474 = 1.0 - (_2468 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2474) ? _2222 : (isnan(_2222) ? _2474 : min(_2222, _2474));
            frontier_phi_39_38_ladder_1 = isnan(_2473) ? _2221 : (isnan(_2221) ? _2473 : min(_2221, _2473));
            frontier_phi_39_38_ladder_2 = isnan(_2472) ? _2220 : (isnan(_2220) ? _2472 : min(_2220, _2472));
        }
        else
        {
            frontier_phi_39_38_ladder = _2222;
            frontier_phi_39_38_ladder_1 = _2221;
            frontier_phi_39_38_ladder_2 = _2220;
        }
        _2286 = frontier_phi_39_38_ladder_2;
        _2288 = frontier_phi_39_38_ladder_1;
        _2290 = frontier_phi_39_38_ladder;
    }
    else
    {
        _2286 = _2220;
        _2288 = _2221;
        _2290 = _2222;
    }
    uvec4 _2295 = floatBitsToUint(cbInstanceData._m0[_252 + 5u]);
    uint _2297 = _2295.x * 14u;
    uint _2298 = _2297 + 13u;
    float _2305 = _969 + (-1.0);
    float _2310 = (cbLight._m0[_2298].x * _2305) + 1.0;
    float _2311 = (cbLight._m0[_2298].y * _2305) + 1.0;
    float _2312 = (cbLight._m0[_2298].z * _2305) + 1.0;
    float _2313 = (cbLight._m0[_2298].w * _2305) + 1.0;
    uint _2314 = _2297 + 5u;
    float _2320 = isnan(1.0) ? _2311 : (isnan(_2311) ? 1.0 : min(_2311, 1.0));
    uint _2324 = _2297 + 4u;
    float _2333 = isnan(1.0) ? _2310 : (isnan(_2310) ? 1.0 : min(_2310, 1.0));
    uint _2337 = _2297 | 1u;
    float _2348 = dot(vec3(cbLight._m0[_2297].xyz), vec3(_790, _791, _792));
    float _2351 = dot(vec3(cbLight._m0[_2337].xyz), vec3(_790, _791, _792));
    float _4641 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
    float _4652 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
    float _2356 = (isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0))) * 0.3183098733425140380859375;
    float _2358 = (isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0))) * 0.3183098733425140380859375;
    float _2365 = ((cbLight._m0[_2314].x * _2320) * _2358) + (((cbLight._m0[_2324].x * _2286) * _2333) * _2356);
    float _2366 = ((_2320 * cbLight._m0[_2314].y) * _2358) + (((cbLight._m0[_2324].y * _2288) * _2333) * _2356);
    float _2367 = ((_2320 * cbLight._m0[_2314].z) * _2358) + (((cbLight._m0[_2324].z * _2290) * _2333) * _2356);
    uvec4 _2371 = floatBitsToUint(cbLight._m0[_2297 + 12u]);
    bool _2373 = _2371.x == 0u;
    float _2475;
    float _2477;
    float _2479;
    if (_2373)
    {
        _2475 = _2365;
        _2477 = _2366;
        _2479 = _2367;
    }
    else
    {
        uint _2483 = _2297 + 6u;
        float _2499 = (dot(vec3(cbLight._m0[_2297 + 2u].xyz), vec3(_790, _791, _792)) * 0.5) + 0.5;
        float _2500 = _2499 * _2499;
        float _4663 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0));
        float _2501 = isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0));
        float _2502 = isnan(1.0) ? _2312 : (isnan(_2312) ? 1.0 : min(_2312, 1.0));
        _2475 = (((cbLight._m0[_2483].x * 0.3183098733425140380859375) * _2501) * _2502) + _2365;
        _2477 = (((cbLight._m0[_2483].y * 0.3183098733425140380859375) * _2501) * _2502) + _2366;
        _2479 = (((cbLight._m0[_2483].z * 0.3183098733425140380859375) * _2501) * _2502) + _2367;
    }
    bool _2482 = _2371.y == 0u;
    float _2537;
    float _2539;
    float _2541;
    if (_2482)
    {
        _2537 = _2475;
        _2539 = _2477;
        _2541 = _2479;
    }
    else
    {
        uint _2710 = _2297 + 7u;
        float _2726 = (dot(vec3(cbLight._m0[_2297 + 3u].xyz), vec3(_790, _791, _792)) * 0.5) + 0.5;
        float _2727 = _2726 * _2726;
        float _4679 = isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : max(_2727, 0.0));
        float _2728 = isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0));
        float _2729 = isnan(1.0) ? _2313 : (isnan(_2313) ? 1.0 : min(_2313, 1.0));
        _2537 = (((cbLight._m0[_2710].x * 0.3183098733425140380859375) * _2728) * _2729) + _2475;
        _2539 = (((cbLight._m0[_2710].y * 0.3183098733425140380859375) * _2728) * _2729) + _2477;
        _2541 = (((cbLight._m0[_2710].z * 0.3183098733425140380859375) * _2728) * _2729) + _2479;
    }
    uint _2544 = _2297 + 8u;
    float _2557 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2297].w)) * _793) * 0.949999988079071044921875);
    float _2558 = _2557 * _2557;
    float _2559 = cbLight._m0[_2297].x + _874;
    float _2560 = cbLight._m0[_2297].y + _875;
    float _2561 = cbLight._m0[_2297].z + _876;
    float _2565 = inversesqrt(dot(vec3(_2559, _2560, _2561), vec3(_2559, _2560, _2561)));
    float _2566 = _2565 * _2559;
    float _2567 = _2565 * _2560;
    float _2568 = _2565 * _2561;
    float _2569 = dot(vec3(_790, _791, _792), vec3(cbLight._m0[_2297].xyz));
    float _4695 = isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0));
    float _2572 = isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0));
    float _4706 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
    float _2573 = isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0));
    float _2574 = dot(vec3(_790, _791, _792), vec3(_2566, _2567, _2568));
    float _4717 = isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0));
    float _2577 = isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0));
    float _2578 = dot(vec3(cbLight._m0[_2297].xyz), vec3(_2566, _2567, _2568));
    float _4728 = isnan(0.0) ? _2578 : (isnan(_2578) ? 0.0 : max(_2578, 0.0));
    float _2582 = _2558 * _2558;
    float _2586 = ((_2577 * _2577) * (_2582 + (-1.0))) + 1.0;
    float _2594 = exp2(log2(1.0 - (isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0)))) * 5.0);
    float _2595 = 0.959999978542327880859375 - _950;
    float _2597 = 0.959999978542327880859375 - _951;
    float _2598 = 0.959999978542327880859375 - _952;
    float _2605 = 1.0 - _2558;
    float _2616 = (0.5 / (((_2573 * ((_2572 * _2605) + _2558)) + 9.9999999392252902907785028219223e-09) + (((_2573 * _2605) + _2558) * _2572))) * _2572;
    float _4739 = isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0));
    float _2618 = (isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0))) * (_2582 / ((_2586 * _2586) * 3.141590118408203125));
    uint _2632 = _2297 + 9u;
    float _2643 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2337].w)) * _793) * 0.949999988079071044921875);
    float _2644 = _2643 * _2643;
    float _2645 = cbLight._m0[_2337].x + _874;
    float _2646 = cbLight._m0[_2337].y + _875;
    float _2647 = cbLight._m0[_2337].z + _876;
    float _2651 = inversesqrt(dot(vec3(_2645, _2646, _2647), vec3(_2645, _2646, _2647)));
    float _2652 = _2651 * _2645;
    float _2653 = _2651 * _2646;
    float _2654 = _2651 * _2647;
    float _2655 = dot(vec3(_790, _791, _792), vec3(cbLight._m0[_2337].xyz));
    float _4750 = isnan(0.0) ? _2655 : (isnan(_2655) ? 0.0 : max(_2655, 0.0));
    float _2658 = isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0));
    float _2659 = dot(vec3(_790, _791, _792), vec3(_2652, _2653, _2654));
    float _4761 = isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : max(_2659, 0.0));
    float _2662 = isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0));
    float _2663 = dot(vec3(cbLight._m0[_2337].xyz), vec3(_2652, _2653, _2654));
    float _4772 = isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : max(_2663, 0.0));
    float _2667 = _2644 * _2644;
    float _2671 = ((_2662 * _2662) * (_2667 + (-1.0))) + 1.0;
    float _2678 = exp2(log2(1.0 - (isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0)))) * 5.0);
    float _2685 = 1.0 - _2644;
    float _2695 = (0.5 / (((_2573 * ((_2658 * _2685) + _2644)) + 9.9999999392252902907785028219223e-09) + (((_2573 * _2685) + _2644) * _2658))) * _2658;
    float _4783 = isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : max(_2695, 0.0));
    float _2697 = (isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0))) * (_2667 / ((_2671 * _2671) * 3.141590118408203125));
    float _2707 = (((((_2678 * _2595) + _953) * cbLight._m0[_2632].x) * _2697) * _2320) + ((((cbLight._m0[_2544].x * _2286) * ((_2594 * _2595) + _953)) * _2618) * _2333);
    float _2708 = (((((_2678 * _2597) + _955) * cbLight._m0[_2632].y) * _2697) * _2320) + ((((cbLight._m0[_2544].y * _2288) * ((_2594 * _2597) + _955)) * _2618) * _2333);
    float _2709 = (((((_2678 * _2598) + _956) * cbLight._m0[_2632].z) * _2697) * _2320) + ((((cbLight._m0[_2544].z * _2290) * ((_2594 * _2598) + _956)) * _2618) * _2333);
    float _2765;
    float _2767;
    float _2769;
    if (_2373)
    {
        _2765 = _2707;
        _2767 = _2708;
        _2769 = _2709;
    }
    else
    {
        uint _2771 = _2297 + 2u;
        uint _2775 = _2297 + 10u;
        float _2789 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2771].w)) * _793) * 0.949999988079071044921875);
        float _2790 = _2789 * _2789;
        float _2791 = cbLight._m0[_2771].x + _874;
        float _2792 = cbLight._m0[_2771].y + _875;
        float _2793 = cbLight._m0[_2771].z + _876;
        float _2797 = inversesqrt(dot(vec3(_2791, _2792, _2793), vec3(_2791, _2792, _2793)));
        float _2798 = _2797 * _2791;
        float _2799 = _2797 * _2792;
        float _2800 = _2797 * _2793;
        float _2801 = dot(vec3(_790, _791, _792), vec3(cbLight._m0[_2771].xyz));
        float _4794 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0));
        float _2804 = isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0));
        float _2805 = dot(vec3(_790, _791, _792), vec3(_2798, _2799, _2800));
        float _4805 = isnan(0.0) ? _2805 : (isnan(_2805) ? 0.0 : max(_2805, 0.0));
        float _2808 = isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0));
        float _2809 = dot(vec3(cbLight._m0[_2771].xyz), vec3(_2798, _2799, _2800));
        float _4816 = isnan(0.0) ? _2809 : (isnan(_2809) ? 0.0 : max(_2809, 0.0));
        float _2813 = _2790 * _2790;
        float _2817 = ((_2808 * _2808) * (_2813 + (-1.0))) + 1.0;
        float _2824 = exp2(log2(1.0 - (isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0)))) * 5.0);
        float _2831 = 1.0 - _2790;
        float _2841 = (0.5 / (((_2573 * ((_2804 * _2831) + _2790)) + 9.9999999392252902907785028219223e-09) + (((_2573 * _2831) + _2790) * _2804))) * _2804;
        float _4827 = isnan(0.0) ? _2841 : (isnan(_2841) ? 0.0 : max(_2841, 0.0));
        float _2843 = (isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0))) * (_2813 / ((_2817 * _2817) * 3.141590118408203125));
        float _2844 = isnan(1.0) ? _2312 : (isnan(_2312) ? 1.0 : min(_2312, 1.0));
        _2765 = (((((_2824 * _2595) + _953) * cbLight._m0[_2775].x) * _2843) * _2844) + _2707;
        _2767 = (((((_2824 * _2597) + _955) * cbLight._m0[_2775].y) * _2843) * _2844) + _2708;
        _2769 = (((((_2824 * _2598) + _956) * cbLight._m0[_2775].z) * _2843) * _2844) + _2709;
    }
    float _2875;
    float _2877;
    float _2879;
    if (_2482)
    {
        _2875 = _2765;
        _2877 = _2767;
        _2879 = _2769;
    }
    else
    {
        uint _2886 = _2297 + 3u;
        uint _2890 = _2297 + 11u;
        float _2904 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2886].w)) * _793) * 0.949999988079071044921875);
        float _2905 = _2904 * _2904;
        float _2906 = cbLight._m0[_2886].x + _874;
        float _2907 = cbLight._m0[_2886].y + _875;
        float _2908 = cbLight._m0[_2886].z + _876;
        float _2912 = inversesqrt(dot(vec3(_2906, _2907, _2908), vec3(_2906, _2907, _2908)));
        float _2913 = _2912 * _2906;
        float _2914 = _2912 * _2907;
        float _2915 = _2912 * _2908;
        float _2916 = dot(vec3(_790, _791, _792), vec3(cbLight._m0[_2886].xyz));
        float _4843 = isnan(0.0) ? _2916 : (isnan(_2916) ? 0.0 : max(_2916, 0.0));
        float _2919 = isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0));
        float _2920 = dot(vec3(_790, _791, _792), vec3(_2913, _2914, _2915));
        float _4854 = isnan(0.0) ? _2920 : (isnan(_2920) ? 0.0 : max(_2920, 0.0));
        float _2923 = isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0));
        float _2924 = dot(vec3(cbLight._m0[_2886].xyz), vec3(_2913, _2914, _2915));
        float _4865 = isnan(0.0) ? _2924 : (isnan(_2924) ? 0.0 : max(_2924, 0.0));
        float _2928 = _2905 * _2905;
        float _2932 = ((_2923 * _2923) * (_2928 + (-1.0))) + 1.0;
        float _2939 = exp2(log2(1.0 - (isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0)))) * 5.0);
        float _2946 = 1.0 - _2905;
        float _2956 = (0.5 / (((_2573 * ((_2919 * _2946) + _2905)) + 9.9999999392252902907785028219223e-09) + (((_2573 * _2946) + _2905) * _2919))) * _2919;
        float _4876 = isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : max(_2956, 0.0));
        float _2958 = (isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0))) * (_2928 / ((_2932 * _2932) * 3.141590118408203125));
        float _2959 = isnan(1.0) ? _2313 : (isnan(_2313) ? 1.0 : min(_2313, 1.0));
        _2875 = (((((_2939 * _2595) + _953) * cbLight._m0[_2890].x) * _2958) * _2959) + _2765;
        _2877 = (((((_2939 * _2597) + _955) * cbLight._m0[_2890].y) * _2958) * _2959) + _2767;
        _2879 = (((((_2939 * _2598) + _956) * cbLight._m0[_2890].z) * _2958) * _2959) + _2769;
    }
    float _3025;
    float _3027;
    float _3029;
    float _3031;
    float _3033;
    float _3035;
    if (_2295.y == 0u)
    {
        uvec4 _2980 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2981 = _2980.x;
        uint _2992 = uint((float(_2980.y) * floor(float(uint(cbSceneParam._m0[85u].y * _892) / _2981))) + floor(float(uint(cbSceneParam._m0[85u].x * _891) / _2981)));
        float _3002 = (log2(_2073 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3003 = isnan(0.0) ? _3002 : (isnan(_3002) ? 0.0 : max(_3002, 0.0));
        uint _3006 = uint(isnan(14.0) ? _3003 : (isnan(_3003) ? 14.0 : min(_3003, 14.0)));
        uvec4 _3011 = texelFetch(g_lightClusterGridBuffer, int(((_3006 << 2u) + (_2992 << 6u)) >> 2u));
        uint _3012 = _3011.x;
        uint _3013 = _2980.z;
        float _3092;
        float _3094;
        float _3096;
        float _3098;
        float _3100;
        float _3102;
        if (((((1u << ((_3013 >> 4u) & 15u)) + 4294967295u) & _3012) == 0u) || ((_3013 & 240u) == 0u))
        {
            _3092 = 0.0;
            _3094 = 0.0;
            _3096 = 0.0;
            _3098 = 0.0;
            _3100 = 0.0;
            _3102 = 0.0;
        }
        else
        {
            float _3093;
            float _3095;
            float _3097;
            float _3099;
            float _3101;
            float _3103;
            float _3245 = 0.0;
            float _3246 = 0.0;
            float _3247 = 0.0;
            float _3248 = 0.0;
            float _3249 = 0.0;
            float _3250 = 0.0;
            uint _3251 = 0u;
            uint _3260;
            bool _3261;
            for (;;)
            {
                _3260 = texelFetch(g_lightClassification, int((((_3006 << 5u) + (_2992 << 9u)) + (_3251 << 2u)) >> 2u)).x;
                _3261 = _3260 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3261)
                {
                    frontier_phi_73_pred = _3250;
                    frontier_phi_73_pred_1 = _3249;
                    frontier_phi_73_pred_2 = _3248;
                    frontier_phi_73_pred_3 = _3247;
                    frontier_phi_73_pred_4 = _3246;
                    frontier_phi_73_pred_5 = _3245;
                }
                else
                {
                    float _3390;
                    float _3391;
                    float _3392;
                    float _3393;
                    float _3394;
                    float _3395;
                    uint _3396;
                    _3390 = _3245;
                    _3391 = _3246;
                    _3392 = _3247;
                    _3393 = _3248;
                    _3394 = _3249;
                    _3395 = _3250;
                    _3396 = _3260;
                    float _3317;
                    float _3318;
                    float _3319;
                    float _3320;
                    float _3321;
                    float _3322;
                    for (;;)
                    {
                        uint _3400 = uint(findLSB(_3396)) + (_3251 << 5u);
                        uint _3397 = (_3396 + 4294967295u) & _3396;
                        uint _3402 = _3400 * 48u;
                        vec4 _3416 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3402)).x, texelFetch(g_PointLightRenderingBuffer, int(_3402 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3402 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3402 + 3u)).x));
                        uint _3422 = (_3400 * 48u) + 4u;
                        vec4 _3435 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3422)).x, texelFetch(g_PointLightRenderingBuffer, int(_3422 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3422 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3422 + 3u)).x));
                        uint _3441 = (_3400 * 48u) + 8u;
                        vec3 _3452 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3441)).x, texelFetch(g_PointLightRenderingBuffer, int(_3441 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3441 + 2u)).x));
                        float _3456 = _3416.x - _2071;
                        float _3457 = _3416.y - _2072;
                        float _3458 = _3416.z - _2073;
                        float _3459 = dot(vec3(_3456, _3457, _3458), vec3(_3456, _3457, _3458));
                        float _3462 = inversesqrt(_3459);
                        float _3463 = _3462 * _3456;
                        float _3464 = _3462 * _3457;
                        float _3465 = _3462 * _3458;
                        float _3466 = dot(vec3(_910, _913, _916), vec3(_3463, _3464, _3465));
                        float _3471 = 1.0 - (_3459 * _3416.w);
                        float _4902 = isnan(0.0) ? _3471 : (isnan(_3471) ? 0.0 : max(_3471, 0.0));
                        float _3472 = isnan(1.0) ? _4902 : (isnan(_4902) ? 1.0 : min(_4902, 1.0));
                        float _3473 = sqrt(_3459) * _3435.w;
                        float _3476 = 1.39999997615814208984375 / (_3473 + 1.39999997615814208984375);
                        float _3477 = _3476 * _3476;
                        float _3480 = ((1.0 - _3477) * _3466) + _3477;
                        float _3483 = _3473 * _3473;
                        float _3487 = ((isnan(0.0) ? _3480 : (isnan(_3480) ? 0.0 : max(_3480, 0.0))) * _3472) / ((_3483 * 0.699999988079071044921875) + 1.0);
                        float _3491 = (-0.0) - _2071;
                        float _3492 = (-0.0) - _2072;
                        float _3493 = (-0.0) - _2073;
                        float _3497 = inversesqrt(dot(vec3(_3491, _3492, _3493), vec3(_3491, _3492, _3493)));
                        float _3498 = _3497 * _3491;
                        float _3499 = _3497 * _3492;
                        float _3500 = _3497 * _3493;
                        float _3507 = exp2(log2(1.0 / ((_3483 * 3.5) + 5.0)) * 0.25);
                        float _3508 = 1.0 - _985;
                        float _3515 = sqrt(1.0 - ((1.0 - (_3508 * _3508)) * (1.0 - (_3507 * _3507))));
                        float _3516 = _3515 * _3515;
                        float _3517 = _3516 * _3516;
                        float _3518 = _3498 + _3463;
                        float _3519 = _3499 + _3464;
                        float _3520 = _3500 + _3465;
                        float _3524 = inversesqrt(dot(vec3(_3518, _3519, _3520), vec3(_3518, _3519, _3520)));
                        float _3528 = dot(vec3(_910, _913, _916), vec3(_3498, _3499, _3500));
                        float _4918 = isnan(0.0) ? _3528 : (isnan(_3528) ? 0.0 : max(_3528, 0.0));
                        float _3531 = isnan(1.0) ? _4918 : (isnan(_4918) ? 1.0 : min(_4918, 1.0));
                        float _3532 = dot(vec3(_910, _913, _916), vec3(_3524 * _3518, _3524 * _3519, _3524 * _3520));
                        float _4929 = isnan(0.0) ? _3532 : (isnan(_3532) ? 0.0 : max(_3532, 0.0));
                        float _3535 = isnan(1.0) ? _4929 : (isnan(_4929) ? 1.0 : min(_4929, 1.0));
                        float _3539 = ((_3535 * _3535) * (_3517 + (-1.0))) + 1.0;
                        float _3540 = _3476 * _3516;
                        float _3541 = _3540 * _3540;
                        float _3544 = ((1.0 - _3541) * _3466) + _3541;
                        float _4940 = isnan(0.0) ? _3544 : (isnan(_3544) ? 0.0 : max(_3544, 0.0));
                        float _3545 = isnan(1.0) ? _4940 : (isnan(_4940) ? 1.0 : min(_4940, 1.0));
                        float _3546 = 1.0 - _3516;
                        float _3556 = (0.5 / (((_3545 * ((_3531 * _3546) + _3516)) + 9.9999999392252902907785028219223e-09) + (((_3545 * _3546) + _3516) * _3531))) * _3545;
                        float _4951 = isnan(0.0) ? _3556 : (isnan(_3556) ? 0.0 : max(_3556, 0.0));
                        float _3567 = (((_3517 * 3.1415927410125732421875) * (isnan(1.0) ? _4951 : (isnan(_4951) ? 1.0 : min(_4951, 1.0)))) / ((_3539 * _3539) * ((_3483 * 2.1991131305694580078125) + 3.141590118408203125))) * _3472;
                        _3320 = (_3487 * _3435.x) + _3393;
                        _3321 = (_3487 * _3435.y) + _3394;
                        _3322 = (_3487 * _3435.z) + _3395;
                        _3317 = (_3567 * _3452.x) + _3390;
                        _3318 = (_3567 * _3452.y) + _3391;
                        _3319 = (_3567 * _3452.z) + _3392;
                        if (_3397 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3390 = _3317;
                            _3391 = _3318;
                            _3392 = _3319;
                            _3393 = _3320;
                            _3394 = _3321;
                            _3395 = _3322;
                            _3396 = _3397;
                        }
                    }
                    frontier_phi_73_pred = _3322;
                    frontier_phi_73_pred_1 = _3321;
                    frontier_phi_73_pred_2 = _3320;
                    frontier_phi_73_pred_3 = _3319;
                    frontier_phi_73_pred_4 = _3318;
                    frontier_phi_73_pred_5 = _3317;
                }
                _3103 = frontier_phi_73_pred;
                _3101 = frontier_phi_73_pred_1;
                _3099 = frontier_phi_73_pred_2;
                _3097 = frontier_phi_73_pred_3;
                _3095 = frontier_phi_73_pred_4;
                _3093 = frontier_phi_73_pred_5;
                uint _3252 = _3251 + 1u;
                if (_3252 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3245 = _3093;
                    _3246 = _3095;
                    _3247 = _3097;
                    _3248 = _3099;
                    _3249 = _3101;
                    _3250 = _3103;
                    _3251 = _3252;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3092 = _3093;
            _3094 = _3095;
            _3096 = _3097;
            _3098 = _3099;
            _3100 = _3101;
            _3102 = _3103;
        }
        uvec4 _3106 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3107 = _3106.z;
        uint _3109 = (_3107 >> 8u) & 15u;
        float _3213;
        float _3215;
        float _3217;
        float _3219;
        float _3221;
        float _3223;
        if (((4294967295u << _3109) & _3012) == 0u)
        {
            _3213 = _3092;
            _3215 = _3094;
            _3217 = _3096;
            _3219 = _3098;
            _3221 = _3100;
            _3223 = _3102;
        }
        else
        {
            float _3238 = inversesqrt(dot(vec3(_2071, _2072, _2073), vec3(_2071, _2072, _2073)));
            float _3239 = _3238 * _2071;
            float _3240 = _3238 * _2072;
            float _3241 = _3238 * _2073;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_3109 < ((_3107 >> 12u) & 15u))
            {
                float _3214;
                float _3216;
                float _3218;
                float _3220;
                float _3222;
                float _3224;
                float _3373 = _3092;
                float _3374 = _3094;
                float _3375 = _3096;
                float _3376 = _3098;
                float _3377 = _3100;
                float _3378 = _3102;
                uint _3379 = _3109;
                uint _3388;
                bool _3389;
                for (;;)
                {
                    _3388 = texelFetch(g_lightClassification, int((((_3006 << 5u) + (_2992 << 9u)) + (_3379 << 2u)) >> 2u)).x;
                    _3389 = _3388 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3389)
                    {
                        frontier_phi_84_pred = _3378;
                        frontier_phi_84_pred_1 = _3377;
                        frontier_phi_84_pred_2 = _3376;
                        frontier_phi_84_pred_3 = _3375;
                        frontier_phi_84_pred_4 = _3374;
                        frontier_phi_84_pred_5 = _3373;
                    }
                    else
                    {
                        float _3581;
                        float _3582;
                        float _3583;
                        float _3584;
                        float _3585;
                        float _3586;
                        float _3874;
                        float _3875;
                        float _3876;
                        float _3877;
                        float _3878;
                        float _3879;
                        float _3594 = _3373;
                        float _3595 = _3374;
                        float _3596 = _3375;
                        float _3597 = _3376;
                        float _3598 = _3377;
                        float _3599 = _3378;
                        uint _3600 = _3388;
                        uint _3601;
                        vec4 _3626;
                        float _3627;
                        vec4 _3642;
                        vec3 _3654;
                        vec4 _3669;
                        vec4 _3684;
                        float _3730;
                        bool _3731;
                        for (;;)
                        {
                            uint _3611 = ((_3379 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3600));
                            _3601 = (_3600 + 4294967295u) & _3600;
                            uint _3613 = _3611 * 40u;
                            _3626 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3613)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3613 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3613 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3613 + 3u)).x));
                            _3627 = _3626.w;
                            uint _3629 = (_3611 * 40u) + 4u;
                            _3642 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3629)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3629 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3629 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3629 + 3u)).x));
                            uint _3644 = (_3611 * 40u) + 8u;
                            _3654 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3644)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3644 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3644 + 2u)).x));
                            uint _3656 = (_3611 * 40u) + 16u;
                            _3669 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3656)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3656 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3656 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3656 + 3u)).x));
                            uint _3671 = (_3611 * 40u) + 20u;
                            _3684 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3671)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3671 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3671 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3671 + 3u)).x));
                            uint _3686 = (_3611 * 40u) + 24u;
                            vec4 _3699 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3686)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3686 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3686 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3686 + 3u)).x));
                            uint _3705 = (_3611 * 40u) + 28u;
                            vec4 _3718 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3705)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3705 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3705 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3705 + 3u)).x));
                            _3730 = fma(_2073, _3718.z, fma(_2072, _3718.y, _3718.x * _2071)) + _3718.w;
                            _3731 = !((fma(_2073, _3699.z, fma(_2072, _3699.y, _3699.x * _2071)) + _3699.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3731)
                            {
                                float _3758 = _3626.x - _2071;
                                float _3759 = _3626.y - _2072;
                                float _3760 = _3626.z - _2073;
                                float _3761 = dot(vec3(_3758, _3759, _3760), vec3(_3758, _3759, _3760));
                                float _3764 = inversesqrt(_3761);
                                float _3765 = _3764 * _3758;
                                float _3766 = _3764 * _3759;
                                float _3767 = _3764 * _3760;
                                float _3771 = 1.0 - (_3761 / (_3627 * _3627));
                                float _4962 = isnan(0.0) ? _3771 : (isnan(_3771) ? 0.0 : max(_3771, 0.0));
                                float _3772 = isnan(1.0) ? _4962 : (isnan(_4962) ? 1.0 : min(_4962, 1.0));
                                float _3776 = sqrt(_3761) * _3642.w;
                                float _3778 = 1.39999997615814208984375 / (_3776 + 1.39999997615814208984375);
                                float _3779 = _3778 * _3778;
                                float _3782 = ((1.0 - _3779) * dot(vec3(_3765, _3766, _3767), vec3(_910, _913, _916))) + _3779;
                                float _3785 = _3776 * _3776;
                                float _3789 = (fma(_2073, _3669.z, fma(_2072, _3669.y, _3669.x * _2071)) + _3669.w) / _3730;
                                float _3790 = (fma(_2073, _3684.z, fma(_2072, _3684.y, _3684.x * _2071)) + _3684.w) / _3730;
                                float _3794 = 1.0 - dot(vec2(_3789, _3790), vec2(_3789, _3790));
                                float _4978 = isnan(0.0) ? _3794 : (isnan(_3794) ? 0.0 : max(_3794, 0.0));
                                float _3795 = isnan(1.0) ? _4978 : (isnan(_4978) ? 1.0 : min(_4978, 1.0));
                                float _3796 = _3795 * (((isnan(0.0) ? _3782 : (isnan(_3782) ? 0.0 : max(_3782, 0.0))) * _3772) / ((_3785 * 0.699999988079071044921875) + 1.0));
                                float _3808 = exp2(log2(1.0 / ((_3785 * 3.5) + 5.0)) * 0.25);
                                float _3809 = 1.0 - _985;
                                float _3816 = sqrt(1.0 - ((1.0 - (_3809 * _3809)) * (1.0 - (_3808 * _3808))));
                                float _3817 = _3816 * _3816;
                                float _3818 = _3817 * _3817;
                                float _3819 = _3765 - _3239;
                                float _3820 = _3766 - _3240;
                                float _3821 = _3767 - _3241;
                                float _3825 = inversesqrt(dot(vec3(_3819, _3820, _3821), vec3(_3819, _3820, _3821)));
                                float _3829 = dot(vec3(_910, _913, _916), vec3((-0.0) - _3239, (-0.0) - _3240, (-0.0) - _3241));
                                float _4989 = isnan(0.0) ? _3829 : (isnan(_3829) ? 0.0 : max(_3829, 0.0));
                                float _3832 = isnan(1.0) ? _4989 : (isnan(_4989) ? 1.0 : min(_4989, 1.0));
                                float _3833 = dot(vec3(_910, _913, _916), vec3(_3825 * _3819, _3825 * _3820, _3825 * _3821));
                                float _5000 = isnan(0.0) ? _3833 : (isnan(_3833) ? 0.0 : max(_3833, 0.0));
                                float _3836 = isnan(1.0) ? _5000 : (isnan(_5000) ? 1.0 : min(_5000, 1.0));
                                float _3840 = ((_3836 * _3836) * (_3818 + (-1.0))) + 1.0;
                                float _3841 = _3778 * _3817;
                                float _3842 = _3841 * _3841;
                                float _3848 = ((1.0 - _3842) * dot(vec3(_910, _913, _916), vec3(_3765, _3766, _3767))) + _3842;
                                float _5011 = isnan(0.0) ? _3848 : (isnan(_3848) ? 0.0 : max(_3848, 0.0));
                                float _3849 = isnan(1.0) ? _5011 : (isnan(_5011) ? 1.0 : min(_5011, 1.0));
                                float _3850 = 1.0 - _3817;
                                float _3860 = (0.5 / (((_3849 * ((_3832 * _3850) + _3817)) + 9.9999999392252902907785028219223e-09) + (((_3849 * _3850) + _3817) * _3832))) * _3849;
                                float _5022 = isnan(0.0) ? _3860 : (isnan(_3860) ? 0.0 : max(_3860, 0.0));
                                float _3870 = (_3795 * _3772) * (((_3818 * 3.1415927410125732421875) * (isnan(1.0) ? _5022 : (isnan(_5022) ? 1.0 : min(_5022, 1.0)))) / ((_3840 * _3840) * ((_3785 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3796 * _3642.z;
                                frontier_phi_90_pred_1 = _3796 * _3642.y;
                                frontier_phi_90_pred_2 = _3796 * _3642.x;
                                frontier_phi_90_pred_3 = _3870 * _3654.z;
                                frontier_phi_90_pred_4 = _3870 * _3654.y;
                                frontier_phi_90_pred_5 = _3870 * _3654.x;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3879 = frontier_phi_90_pred;
                            _3878 = frontier_phi_90_pred_1;
                            _3877 = frontier_phi_90_pred_2;
                            _3876 = frontier_phi_90_pred_3;
                            _3875 = frontier_phi_90_pred_4;
                            _3874 = frontier_phi_90_pred_5;
                            _3584 = _3877 + _3597;
                            _3585 = _3878 + _3598;
                            _3586 = _3879 + _3599;
                            _3581 = _3874 + _3594;
                            _3582 = _3875 + _3595;
                            _3583 = _3876 + _3596;
                            if (_3601 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3594 = _3581;
                                _3595 = _3582;
                                _3596 = _3583;
                                _3597 = _3584;
                                _3598 = _3585;
                                _3599 = _3586;
                                _3600 = _3601;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3586;
                        frontier_phi_84_pred_1 = _3585;
                        frontier_phi_84_pred_2 = _3584;
                        frontier_phi_84_pred_3 = _3583;
                        frontier_phi_84_pred_4 = _3582;
                        frontier_phi_84_pred_5 = _3581;
                    }
                    _3224 = frontier_phi_84_pred;
                    _3222 = frontier_phi_84_pred_1;
                    _3220 = frontier_phi_84_pred_2;
                    _3218 = frontier_phi_84_pred_3;
                    _3216 = frontier_phi_84_pred_4;
                    _3214 = frontier_phi_84_pred_5;
                    uint _3380 = _3379 + 1u;
                    if (_3380 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3373 = _3214;
                        _3374 = _3216;
                        _3375 = _3218;
                        _3376 = _3220;
                        _3377 = _3222;
                        _3378 = _3224;
                        _3379 = _3380;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _3220;
                frontier_phi_65_66_ladder_1 = _3224;
                frontier_phi_65_66_ladder_2 = _3222;
                frontier_phi_65_66_ladder_3 = _3218;
                frontier_phi_65_66_ladder_4 = _3216;
                frontier_phi_65_66_ladder_5 = _3214;
            }
            else
            {
                frontier_phi_65_66_ladder = _3098;
                frontier_phi_65_66_ladder_1 = _3102;
                frontier_phi_65_66_ladder_2 = _3100;
                frontier_phi_65_66_ladder_3 = _3096;
                frontier_phi_65_66_ladder_4 = _3094;
                frontier_phi_65_66_ladder_5 = _3092;
            }
            _3213 = frontier_phi_65_66_ladder_5;
            _3215 = frontier_phi_65_66_ladder_4;
            _3217 = frontier_phi_65_66_ladder_3;
            _3219 = frontier_phi_65_66_ladder;
            _3221 = frontier_phi_65_66_ladder_2;
            _3223 = frontier_phi_65_66_ladder_1;
        }
        float _3228 = isnan(1.0) ? _969 : (isnan(_969) ? 1.0 : min(_969, 1.0));
        _3025 = (_3228 * _3219) + _2537;
        _3027 = (_3228 * _3221) + _2539;
        _3029 = (_3228 * _3223) + _2541;
        _3031 = ((_3213 * _953) * _3228) + _2875;
        _3033 = ((_3215 * _955) * _3228) + _2877;
        _3035 = ((_3217 * _956) * _3228) + _2879;
    }
    else
    {
        _3025 = _2537;
        _3027 = _2539;
        _3029 = _2541;
        _3031 = _2875;
        _3033 = _2877;
        _3035 = _2879;
    }
    float _5038 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
    float _5049 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
    float _5060 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
    float _3052 = ((isnan(1.0) ? _5038 : (isnan(_5038) ? 1.0 : min(_5038, 1.0))) * (_3025 + ((isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0))) * _969))) + ((_3031 + ((isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0))) * _1803)) * cbPerFrame._m0[3u].x);
    float _3053 = ((isnan(1.0) ? _5049 : (isnan(_5049) ? 1.0 : min(_5049, 1.0))) * (_3027 + ((isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0))) * _969))) + ((_3033 + ((isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0))) * _1803)) * cbPerFrame._m0[3u].x);
    float _3054 = ((isnan(1.0) ? _5060 : (isnan(_5060) ? 1.0 : min(_5060, 1.0))) * (_3029 + ((isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0))) * _969))) + ((_3035 + ((isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0))) * _1803)) * cbPerFrame._m0[3u].x);
    uint _3055 = _252 + 6u;
    float _3063 = _891 / cbSceneParam._m0[86u].x;
    float _3064 = _892 / cbSceneParam._m0[86u].y;
    vec4 _3078 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3063, _3064, (log2((isnan(cbSceneParam._m0[77u].w) ? _816 : (isnan(_816) ? cbSceneParam._m0[77u].w : min(_816, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3080 = _3078.x;
    float _3081 = _3078.y;
    float _3082 = _3078.z;
    float _3083 = _3078.w;
    float _3155;
    float _3157;
    float _3159;
    float _3161;
    if (_816 > cbSceneParam._m0[78u].w)
    {
        float _3117 = isnan(_816) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _816 : min(cbSceneParam._m0[80u].w, _816));
        float _3118 = _3117 / _816;
        float _3129 = _3118 * _867;
        float _3130 = _868 * _3118;
        float _3131 = (-0.0) - _3130;
        float _3133 = _3118 * _869;
        float _3135 = (cbSceneParam._m0[77u].w * _3131) / _3117;
        float _3136 = _3135 + cbSceneParam._m0[79u].w;
        float _3137 = cbSceneParam._m0[79u].w - _3130;
        float _3143 = sqrt(((_3129 * _3129) + (_3130 * _3130)) + (_3133 * _3133));
        float _3146 = (1.0 - (cbSceneParam._m0[77u].w / _3117)) * _3143;
        float _3151 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3153 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3330;
        if (abs((_3131 - _3135) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3330 = ((((_3136 > 0.0) ? exp2(_3151 * _3136) : (2.0 - exp2(_3153 * _3136))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3146;
        }
        else
        {
            float _3274 = 1.0 / cbSceneParam._m0[80u].x;
            float _3275 = isnan(_3137) ? _3136 : (isnan(_3136) ? _3137 : max(_3136, _3137));
            float _3276 = isnan(_3137) ? _3136 : (isnan(_3136) ? _3137 : min(_3136, _3137));
            float _3285 = isnan(0.0) ? _3275 : (isnan(_3275) ? 0.0 : min(_3275, 0.0));
            float _3286 = isnan(0.0) ? _3276 : (isnan(_3276) ? 0.0 : min(_3276, 0.0));
            _3330 = ((abs(_3143 / _3131) * cbSceneParam._m0[80u].y) * ((((_3285 - _3286) * 2.0) - ((exp2(_3151 * (isnan(0.0) ? _3275 : (isnan(_3275) ? 0.0 : max(_3275, 0.0)))) - exp2(_3151 * (isnan(0.0) ? _3276 : (isnan(_3276) ? 0.0 : max(_3276, 0.0))))) * _3274)) - ((exp2(_3153 * _3285) - exp2(_3153 * _3286)) * _3274))) + (_3146 * cbSceneParam._m0[80u].z);
        }
        vec4 _3332 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3063, _3064, 1.0), 0.0);
        float _3341 = exp2((_3330 * (-1.44269502162933349609375)) * (1.0 - _3332.w));
        float _3342 = log2(_3341);
        float _3358 = log2(_3083);
        _3155 = (exp2(_3358 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3342 * cbSceneParam._m0[78u].x)) * _3332.x) / cbSceneParam._m0[78u].x)) + _3080;
        _3157 = (exp2(_3358 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3342 * cbSceneParam._m0[78u].y)) * _3332.y) / cbSceneParam._m0[78u].y)) + _3081;
        _3159 = (exp2(_3358 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3342 * cbSceneParam._m0[78u].z)) * _3332.z) / cbSceneParam._m0[78u].z)) + _3082;
        _3161 = _3341 * _3083;
    }
    else
    {
        _3155 = _3080;
        _3157 = _3081;
        _3159 = _3082;
        _3161 = _3083;
    }
    bool _3368;
    vec4 _3171;
    vec4 _3193;
    float _3195;
    float _3199;
    float _3200;
    float _3201;
    float _3202;
    bool _3212;
    for (;;)
    {
        _3171 = cbMatDynParam._m0[0u];
        float _3173 = roundEven(_3171.y);
        bool _3174 = _3173 == 3.0;
        float _3175 = log2(_3161);
        float _3182 = exp2(_3175 * cbSceneParam._m0[78u].x) * _3052;
        float _3183 = exp2(_3175 * cbSceneParam._m0[78u].y) * _3053;
        float _3184 = exp2(_3175 * cbSceneParam._m0[78u].z) * _3054;
        float _3191 = _880 + (-0.5);
        _3193 = cbMtdParam._m0[1u];
        _3195 = _3193.y * _3191;
        float _3198 = (_3173 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3199 = _3198 * (_3174 ? _3182 : (_3182 + (cbSceneParam._m0[72u].w * _3155)));
        _3200 = _3198 * (_3174 ? _3183 : (_3183 + (cbSceneParam._m0[72u].w * _3157)));
        _3201 = _3198 * (_3174 ? _3184 : (_3184 + (cbSceneParam._m0[72u].w * _3159)));
        _3202 = _3191 * 0.999000012874603271484375;
        _3212 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3212)
        {
            if ((cbInstanceData._m0[_252 + 7u].x + _3202) < 0.5)
            {
                _3368 = true;
                break;
            }
        }
        uint _3309 = _929 + uint(_3171.w);
        if ((cbInstanceData._m0[_3309].w < 1.0) && ((cbInstanceData._m0[_3309].w + _3202) < 0.5))
        {
            _3368 = true;
            break;
        }
        if ((_3195 + 1.0) < _3193.x)
        {
            _3368 = true;
            break;
        }
        _3368 = false;
        break;
    }
    float _3572;
    if (_3368)
    {
        discard_state = true;
        _3572 = 0.0;
    }
    else
    {
        _3572 = cbInstanceData._m0[_3055].w;
    }
    SV_Target.x = _3199;
    SV_Target.y = _3200;
    SV_Target.z = _3201;
    SV_Target.w = _3572;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3055].w;
    discard_exit();
}


