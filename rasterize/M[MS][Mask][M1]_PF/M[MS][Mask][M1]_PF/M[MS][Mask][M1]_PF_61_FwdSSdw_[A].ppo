#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1368;
float _3771;
float _3772;
float _3773;
float _3774;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _222 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _223 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _224 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _230 = inversesqrt(dot(vec3(_222, _223, _224), vec3(_222, _223, _224)));
    float _237 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _244 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _250 = uint(roundEven(NORMAL.w)) * 13u;
    uint _256 = _250 + 1u;
    uint _260 = _250 + 2u;
    float _269 = sqrt(((cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x) + (cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x)) + (cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x));
    float _270 = _269 * TEXCOORD.z;
    float _271 = _269 * TEXCOORD.w;
    vec4 _291 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _297 = _291.x * cbMtdParam._m0[11u].x;
    float _298 = _291.y * cbMtdParam._m0[11u].y;
    float _299 = _291.z * cbMtdParam._m0[11u].z;
    vec4 _318 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _270) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _271) + cbTextureTilingScale._m0[5u].w));
    vec4 _338 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _372 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[27u].x * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].y * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _374 = _372.x;
    float _386 = dot(vec4(_374, _372.yzw), vec4(cbMtdParam._m0[28u].w, cbMtdParam._m0[29u].xy, 0.0));
    float _403 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _338.x) * 2.0) - ((((_374 - _386) * cbMtdParam._m0[23u].w) + _386) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3783 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _404 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
    float _411 = (_404 * ((_318.x * cbMtdParam._m0[12u].x) - _297)) + _297;
    float _412 = (_404 * ((_318.y * cbMtdParam._m0[12u].y) - _298)) + _298;
    float _413 = (_404 * ((_318.z * cbMtdParam._m0[12u].z) - _299)) + _299;
    vec4 _430 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _270) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _271) + cbTextureTilingScale._m0[3u].w));
    vec4 _452 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].z * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].w * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _454 = _452.x;
    float _464 = dot(vec4(_454, _452.yzw), vec4(cbMtdParam._m0[30u].yzw, 0.0));
    float _478 = ((cbMtdParam._m0[25u].z * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _338.y) * 2.0) - ((((_454 - _464) * cbMtdParam._m0[23u].w) + _464) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3794 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _479 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
    float _486 = (_479 * ((_430.x * cbMtdParam._m0[13u].x) - _411)) + _411;
    float _487 = (_479 * ((_430.y * cbMtdParam._m0[13u].y) - _412)) + _412;
    float _488 = (_479 * ((_430.z * cbMtdParam._m0[13u].z) - _413)) + _413;
    vec4 _506 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _270) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _271) + cbTextureTilingScale._m0[4u].w));
    vec4 _523 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _525 = _523.x;
    float _526 = _523.y;
    float _527 = _523.z;
    float _534 = ((_506.x - _525) * _404) + _525;
    float _535 = ((_506.y - _526) * _404) + _526;
    float _536 = ((_506.z - _527) * _404) + _527;
    vec4 _548 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _270) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _271) + cbTextureTilingScale._m0[2u].w));
    float _561 = ((_548.z - _536) * _479) + _536;
    float _564 = ((((_548.x - _534) * _479) + _534) * 2.0) + (-1.0);
    float _566 = ((((_548.y - _535) * _479) + _535) * 2.0) + (-1.0);
    float _567 = dot(vec2(_564, _566), vec2(_564, _566));
    float _3805 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _572 = sqrt(1.0 - (isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0))));
    vec4 _586 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _611 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _270) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _271) + cbTextureTilingScale._m0[11u].w));
    float _613 = _611.x;
    float _614 = 1.0 - _613;
    float _630 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_613 - _614) * cbMtdParam._m0[24u].z) + _614) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3816 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _631 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
    float _638 = (_631 * (cbMtdParam._m0[17u].x - _486)) + _486;
    float _639 = (_631 * (cbMtdParam._m0[17u].y - _487)) + _487;
    float _640 = (_631 * (cbMtdParam._m0[17u].z - _488)) + _488;
    vec4 _666 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _668 = _666.x;
    float _686 = ((texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _270) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _271) + cbTextureTilingScale._m0[9u].w)).x - _668) * _404) + _668;
    float _703 = ((texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _270) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _271) + cbTextureTilingScale._m0[21u].w)).x - _686) * _479) + _686;
    float _707 = ((texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _703) * cbMtdParam._m0[19u].z) + _703;
    float _709 = _707 - (_707 * _631);
    float _713 = (cbMtdParam._m0[19u].w * (_586.z - _561)) + _561;
    vec4 _726 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _270) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _271) + cbTextureTilingScale._m0[15u].w));
    float _733 = (_726.x * 2.0) + (-1.0);
    float _734 = (_726.y * 2.0) + (-1.0);
    float _735 = dot(vec2(_733, _734), vec2(_733, _734));
    float _3827 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
    float _743 = (_631 * (_726.z - _713)) + _713;
    float _746 = (((_586.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w) + _564;
    float _747 = (((_586.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w) + _566;
    float _759 = (((_733 - _746) + (cbMtdParam._m0[21u].x * _746)) * _631) + _746;
    float _760 = (((_734 - _747) + (cbMtdParam._m0[21u].x * _747)) * _631) + _747;
    float _761 = (_631 * (sqrt(1.0 - (isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0)))) - _572)) + _572;
    float _763 = cbMtdParam._m0[22u].x + _586.w;
    float _765 = gl_FragCoord.x * 0.125;
    float _767 = gl_FragCoord.y * 0.125;
    float _777 = fma(_761, _237 * NORMAL.x, fma(_760, _244 * TANGENT.x, (_230 * _222) * _759));
    float _780 = fma(_761, _237 * NORMAL.y, fma(_760, _244 * TANGENT.y, (_230 * _223) * _759));
    float _783 = fma(_761, _237 * NORMAL.z, fma(_760, _244 * TANGENT.z, (_230 * _224) * _759));
    float _787 = inversesqrt(dot(vec3(_777, _780, _783), vec3(_777, _780, _783)));
    float _788 = _787 * _777;
    float _789 = _787 * _780;
    float _790 = _787 * _783;
    float _3838 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _791 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
    float _3849 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _3860 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _3871 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _3882 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _3893 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _796 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
    if (!(cbMtdParam._m0[25u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_765, _767)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _814 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _855 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _865 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _855);
    float _866 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _855);
    float _867 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _855);
    float _871 = inversesqrt(dot(vec3(_865, _866, _867), vec3(_865, _866, _867)));
    float _872 = _865 * _871;
    float _873 = _866 * _871;
    float _874 = _867 * _871;
    vec4 _876 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_765, _767));
    float _878 = _876.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1050 = sqrt(((_865 * _865) + (_866 * _866)) + (_867 * _867));
        float _1056 = (cbMatDynParam._m0[5u].x * _1050) + cbMatDynParam._m0[5u].y;
        float _3904 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1057 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
        float _1061 = (cbMatDynParam._m0[5u].z * _1050) + cbMatDynParam._m0[5u].w;
        float _3915 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0))) - _1057)) + _1057) < ((_878 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _889 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _890 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _908 = fma(_790, cbSceneParam._m0[5u].z, fma(_789, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _788));
    float _911 = fma(_790, cbSceneParam._m0[6u].z, fma(_789, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _788));
    float _914 = fma(_790, cbSceneParam._m0[7u].z, fma(_789, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _788));
    uint _927 = _250 + 9u;
    uint _928 = _927 + uint(cbMatDynParam._m0[0u].w);
    float _934 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0)))) * cbInstanceData._m0[_928].x;
    float _935 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0)))) * cbInstanceData._m0[_928].y;
    float _936 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0)))) * cbInstanceData._m0[_928].z;
    float _3926 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
    float _937 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
    float _3937 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
    float _938 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
    float _3948 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
    float _939 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
    float _940 = 1.0 - _796;
    float _941 = _937 * _940;
    float _942 = _938 * _940;
    float _943 = _939 * _940;
    float _948 = (_937 + (-0.039999999105930328369140625)) * _796;
    float _949 = (_938 + (-0.039999999105930328369140625)) * _796;
    float _950 = (_939 + (-0.039999999105930328369140625)) * _796;
    float _951 = _948 + 0.039999999105930328369140625;
    float _953 = _949 + 0.039999999105930328369140625;
    float _954 = _950 + 0.039999999105930328369140625;
    vec4 _963 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _889, cbSceneParam._m0[86u].y * _890));
    float _967 = ((isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0))) * TEXCOORD_5.w) * _963.x;
    float _968 = dot(vec3(_788, _789, _790), vec3(_872, _873, _874));
    float _971 = _968 * 2.0;
    float _975 = (_971 * _788) - _872;
    float _976 = (_971 * _789) - _873;
    float _977 = (_971 * _790) - _874;
    float _981 = abs(dot(vec3(_872, _873, _874), vec3(_788, _789, _790)));
    float _3959 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
    float _983 = sqrt(_791);
    float _996 = exp2((_983 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_983 * 3.0));
    float _1002 = (1.0 - _996) * ((_983 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1003 = _996 * _983;
    float _1031 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1035 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1039 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1367;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1092 = fma(_1039, cbModelParam._m0[26u].z, fma(_1035, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1031));
        float _1096 = fma(_1039, cbModelParam._m0[27u].z, fma(_1035, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1031));
        float _1100 = fma(_1039, cbModelParam._m0[28u].z, fma(_1035, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1031));
        float _1125 = _1031 + _788;
        float _1126 = _1035 + _789;
        float _1127 = _1039 + _790;
        float _1137 = fma(_1127, cbModelParam._m0[26u].z, fma(_1126, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1125)) - _1092;
        float _1138 = fma(_1127, cbModelParam._m0[27u].z, fma(_1126, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1125)) - _1096;
        float _1139 = fma(_1127, cbModelParam._m0[28u].z, fma(_1126, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1125)) - _1100;
        float _1143 = inversesqrt(dot(vec3(_1137, _1138, _1139), vec3(_1137, _1138, _1139)));
        float _1156 = ((_1143 * _1137) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1092 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1157 = ((_1143 * _1138) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1096 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1158 = ((_1143 * _1139) / cbModelParam._m0[34u].z) + ((((((_1100 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1161 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1156, _1157, _1158), 0.0);
        vec4 _1168 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1156, _1157, _1158), 0.0);
        vec4 _1175 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1156, _1157, _1158), 0.0);
        vec4 _1182 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1156, _1157, _1158), 0.0);
        float _1195 = exp2((_1161.w + (-0.5)) * 20.0) * 2.0;
        float _1196 = _1195 * (_1161.x + (-0.5));
        float _1197 = _1195 * (_1161.y + (-0.5));
        float _1198 = _1195 * (_1161.z + (-0.5));
        float _1205 = exp2((_1168.w + (-0.5)) * 20.0) * 2.0;
        float _1206 = _1205 * (_1168.x + (-0.5));
        float _1207 = _1205 * (_1168.y + (-0.5));
        float _1208 = _1205 * (_1168.z + (-0.5));
        float _1215 = exp2((_1175.w + (-0.5)) * 20.0) * 2.0;
        float _1216 = _1215 * (_1175.x + (-0.5));
        float _1217 = _1215 * (_1175.y + (-0.5));
        float _1218 = _1215 * (_1175.z + (-0.5));
        float _1225 = exp2((_1182.w + (-0.5)) * 20.0) * 2.0;
        float _1226 = _1225 * (_1182.x + (-0.5));
        float _1227 = _1225 * (_1182.y + (-0.5));
        float _1228 = _1225 * (_1182.z + (-0.5));
        float _1229 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1230 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1231 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1232 = _1196 * 0.5;
        float _1233 = _1206 * 0.5;
        float _1234 = _1216 * 0.5;
        float _1235 = dot(vec3(_1232, _1233, _1234), vec3(_1232, _1233, _1234));
        float _1240 = (_1235 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1235);
        float _1249 = (dot(vec3(_788, _789, _790), vec3(_1240 * _1232, _1240 * _1233, _1240 * _1234)) + 1.0) * 0.5;
        float _3985 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1259 = sqrt(((_1233 * _1233) + (_1232 * _1232)) + (_1234 * _1234)) / (_1229 + 9.9999997473787516355514526367188e-06);
        float _3996 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1260 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
        float _1261 = _1260 * 2.0;
        float _1265 = (1.0 - _1260) / (_1260 + 1.0);
        float _4007 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _1275 = ((((1.0 - _1266) * (_1261 + 2.0)) * exp2(log2(isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0))) * (_1261 + 1.0))) + _1266) * _1229;
        float _1276 = _1197 * 0.5;
        float _1277 = _1207 * 0.5;
        float _1278 = _1217 * 0.5;
        float _1279 = dot(vec3(_1276, _1277, _1278), vec3(_1276, _1277, _1278));
        float _1284 = (_1279 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1279);
        float _1292 = (dot(vec3(_788, _789, _790), vec3(_1284 * _1276, _1284 * _1277, _1284 * _1278)) + 1.0) * 0.5;
        float _4018 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1301 = sqrt(((_1277 * _1277) + (_1276 * _1276)) + (_1278 * _1278)) / (_1230 + 9.9999997473787516355514526367188e-06);
        float _4029 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1302 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
        float _1303 = _1302 * 2.0;
        float _1307 = (1.0 - _1302) / (_1302 + 1.0);
        float _4040 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1308 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _1317 = ((((1.0 - _1308) * (_1303 + 2.0)) * exp2(log2(isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0))) * (_1303 + 1.0))) + _1308) * _1230;
        float _1318 = _1198 * 0.5;
        float _1319 = _1208 * 0.5;
        float _1320 = _1218 * 0.5;
        float _1321 = dot(vec3(_1318, _1319, _1320), vec3(_1318, _1319, _1320));
        float _1326 = (_1321 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1321);
        float _1334 = (dot(vec3(_788, _789, _790), vec3(_1326 * _1318, _1326 * _1319, _1326 * _1320)) + 1.0) * 0.5;
        float _4051 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1343 = sqrt(((_1319 * _1319) + (_1318 * _1318)) + (_1320 * _1320)) / (_1231 + 9.9999997473787516355514526367188e-06);
        float _4062 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1344 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
        float _1345 = _1344 * 2.0;
        float _1349 = (1.0 - _1344) / (_1344 + 1.0);
        float _4073 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1350 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
        float _1359 = ((((1.0 - _1350) * (_1345 + 2.0)) * exp2(log2(isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0))) * (_1345 + 1.0))) + _1350) * _1231;
        _1367 = _1198;
        _1369 = _1197;
        _1370 = _1196;
        _1371 = _1208;
        _1372 = _1207;
        _1373 = _1206;
        _1374 = _1218;
        _1375 = _1217;
        _1376 = _1216;
        _1377 = _1231;
        _1378 = _1230;
        _1379 = _1229;
        _1380 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0)));
        _1381 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0)));
        _1382 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0)));
    }
    else
    {
        _1367 = _1368;
        _1369 = _1368;
        _1370 = _1368;
        _1371 = _1368;
        _1372 = _1368;
        _1373 = _1368;
        _1374 = _1368;
        _1375 = _1368;
        _1376 = _1368;
        _1377 = _1368;
        _1378 = _1368;
        _1379 = _1368;
        _1380 = 0.0;
        _1381 = 0.0;
        _1382 = 0.0;
    }
    float _1675;
    float _1676;
    float _1677;
    float _1678;
    float _1679;
    float _1680;
    float _1681;
    float _1682;
    float _1683;
    float _1684;
    float _1685;
    float _1686;
    float _1687;
    float _1688;
    float _1689;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1406 = fma(_1039, cbModelParam._m0[30u].z, fma(_1035, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1031));
        float _1410 = fma(_1039, cbModelParam._m0[31u].z, fma(_1035, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1031));
        float _1414 = fma(_1039, cbModelParam._m0[32u].z, fma(_1035, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1031));
        float _1437 = _1031 + _788;
        float _1438 = _1035 + _789;
        float _1439 = _1039 + _790;
        float _1449 = fma(_1439, cbModelParam._m0[30u].z, fma(_1438, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1437)) - _1406;
        float _1450 = fma(_1439, cbModelParam._m0[31u].z, fma(_1438, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1437)) - _1410;
        float _1451 = fma(_1439, cbModelParam._m0[32u].z, fma(_1438, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1437)) - _1414;
        float _1455 = inversesqrt(dot(vec3(_1449, _1450, _1451), vec3(_1449, _1450, _1451)));
        float _1468 = ((_1455 * _1449) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1406 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1469 = ((_1455 * _1450) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1410 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1470 = ((_1455 * _1451) / cbModelParam._m0[35u].z) + ((((((_1414 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1472 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1468, _1469, _1470), 0.0);
        vec4 _1479 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1468, _1469, _1470), 0.0);
        vec4 _1486 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1468, _1469, _1470), 0.0);
        vec4 _1493 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1468, _1469, _1470), 0.0);
        float _1505 = exp2((_1472.w + (-0.5)) * 20.0) * 2.0;
        float _1506 = _1505 * (_1472.x + (-0.5));
        float _1507 = _1505 * (_1472.y + (-0.5));
        float _1508 = _1505 * (_1472.z + (-0.5));
        float _1515 = exp2((_1479.w + (-0.5)) * 20.0) * 2.0;
        float _1516 = _1515 * (_1479.x + (-0.5));
        float _1517 = _1515 * (_1479.y + (-0.5));
        float _1518 = _1515 * (_1479.z + (-0.5));
        float _1525 = exp2((_1486.w + (-0.5)) * 20.0) * 2.0;
        float _1526 = _1525 * (_1486.x + (-0.5));
        float _1527 = _1525 * (_1486.y + (-0.5));
        float _1528 = _1525 * (_1486.z + (-0.5));
        float _1535 = exp2((_1493.w + (-0.5)) * 20.0) * 2.0;
        float _1536 = _1535 * (_1493.x + (-0.5));
        float _1537 = _1535 * (_1493.y + (-0.5));
        float _1538 = _1535 * (_1493.z + (-0.5));
        float _1539 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1540 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1541 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1542 = _1506 * 0.5;
        float _1543 = _1516 * 0.5;
        float _1544 = _1526 * 0.5;
        float _1545 = dot(vec3(_1542, _1543, _1544), vec3(_1542, _1543, _1544));
        float _1550 = (_1545 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1545);
        float _1558 = (dot(vec3(_788, _789, _790), vec3(_1550 * _1542, _1550 * _1543, _1550 * _1544)) + 1.0) * 0.5;
        float _4114 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
        float _1567 = sqrt(((_1543 * _1543) + (_1542 * _1542)) + (_1544 * _1544)) / (_1539 + 9.9999997473787516355514526367188e-06);
        float _4125 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
        float _1568 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
        float _1569 = _1568 * 2.0;
        float _1573 = (1.0 - _1568) / (_1568 + 1.0);
        float _4136 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1574 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
        float _1583 = ((((1.0 - _1574) * (_1569 + 2.0)) * exp2(log2(isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0))) * (_1569 + 1.0))) + _1574) * _1539;
        float _1584 = _1507 * 0.5;
        float _1585 = _1517 * 0.5;
        float _1586 = _1527 * 0.5;
        float _1587 = dot(vec3(_1584, _1585, _1586), vec3(_1584, _1585, _1586));
        float _1592 = (_1587 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1587);
        float _1600 = (dot(vec3(_788, _789, _790), vec3(_1592 * _1584, _1592 * _1585, _1592 * _1586)) + 1.0) * 0.5;
        float _4147 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
        float _1609 = sqrt(((_1585 * _1585) + (_1584 * _1584)) + (_1586 * _1586)) / (_1540 + 9.9999997473787516355514526367188e-06);
        float _4158 = isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0));
        float _1610 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
        float _1611 = _1610 * 2.0;
        float _1615 = (1.0 - _1610) / (_1610 + 1.0);
        float _4169 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
        float _1616 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
        float _1625 = ((((1.0 - _1616) * (_1611 + 2.0)) * exp2(log2(isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0))) * (_1611 + 1.0))) + _1616) * _1540;
        float _1626 = _1508 * 0.5;
        float _1627 = _1518 * 0.5;
        float _1628 = _1528 * 0.5;
        float _1629 = dot(vec3(_1626, _1627, _1628), vec3(_1626, _1627, _1628));
        float _1634 = (_1629 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1629);
        float _1642 = (dot(vec3(_788, _789, _790), vec3(_1634 * _1626, _1634 * _1627, _1634 * _1628)) + 1.0) * 0.5;
        float _4180 = isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0));
        float _1651 = sqrt(((_1627 * _1627) + (_1626 * _1626)) + (_1628 * _1628)) / (_1541 + 9.9999997473787516355514526367188e-06);
        float _4191 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
        float _1652 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
        float _1653 = _1652 * 2.0;
        float _1657 = (1.0 - _1652) / (_1652 + 1.0);
        float _4202 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
        float _1658 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
        float _1667 = ((((1.0 - _1658) * (_1653 + 2.0)) * exp2(log2(isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0))) * (_1653 + 1.0))) + _1658) * _1541;
        _1675 = _1508;
        _1676 = _1507;
        _1677 = _1506;
        _1678 = _1518;
        _1679 = _1517;
        _1680 = _1516;
        _1681 = _1528;
        _1682 = _1527;
        _1683 = _1526;
        _1684 = _1541;
        _1685 = _1540;
        _1686 = _1539;
        _1687 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0)));
        _1688 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0)));
        _1689 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0)));
    }
    else
    {
        _1675 = _1368;
        _1676 = _1368;
        _1677 = _1368;
        _1678 = _1368;
        _1679 = _1368;
        _1680 = _1368;
        _1681 = _1368;
        _1682 = _1368;
        _1683 = _1368;
        _1684 = _1368;
        _1685 = _1368;
        _1686 = _1368;
        _1687 = 0.0;
        _1688 = 0.0;
        _1689 = 0.0;
    }
    float _1699 = (cbModelParam._m0[1u].x * (_1687 - _1380)) + _1380;
    float _1700 = (cbModelParam._m0[1u].x * (_1688 - _1381)) + _1381;
    float _1701 = (cbModelParam._m0[1u].x * (_1689 - _1382)) + _1382;
    float _1722 = fma(_1701, cbSceneParam._m0[89u].z, fma(_1700, cbSceneParam._m0[89u].y, _1699 * cbSceneParam._m0[89u].x));
    float _1725 = fma(_1701, cbSceneParam._m0[90u].z, fma(_1700, cbSceneParam._m0[90u].y, _1699 * cbSceneParam._m0[90u].x));
    float _1728 = fma(_1701, cbSceneParam._m0[91u].z, fma(_1700, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1699));
    float _1743 = _975 * 0.5;
    float _1744 = _976 * 0.5;
    float _1745 = _977 * 0.5;
    float _1746 = dot(vec4(_1743, _1744, _1745, 1.0), vec4(_1677, _1680, _1683, _1686));
    float _1749 = dot(vec4(_1743, _1744, _1745, 1.0), vec4(_1676, _1679, _1682, _1685));
    float _1752 = dot(vec4(_1743, _1744, _1745, 1.0), vec4(_1675, _1678, _1681, _1684));
    float _1786;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1759 = dot(vec4(_1743, _1744, _1745, 1.0), vec4(_1367, _1371, _1374, _1377));
        float _1763 = dot(vec4(_1743, _1744, _1745, 1.0), vec4(_1369, _1372, _1375, _1378));
        float _1767 = dot(vec4(_1743, _1744, _1745, 1.0), vec4(_1370, _1373, _1376, _1379));
        float _1774 = dot(vec4(cbModelParam._m0[39u]), vec4(_1743, _1744, _1745, 1.0));
        _1786 = dot(vec3(isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0)), isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0)), isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1774) ? 0.0 : (isnan(0.0) ? _1774 : max(0.0, _1774))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1786 = 1.0;
    }
    float _1797;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1788 = dot(vec4(cbModelParam._m0[40u]), vec4(_1743, _1744, _1745, 1.0));
        _1797 = dot(vec3(isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0)), isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0)), isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1788) ? 0.0 : (isnan(0.0) ? _1788 : max(0.0, _1788))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1797 = 1.0;
    }
    float _1801 = (_1797 * cbModelParam._m0[1u].x) + (_1786 * (1.0 - cbModelParam._m0[1u].x));
    float _1811 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _791);
    float _1812 = isnan(_1811) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1811 : min(cbModelParam._m0[25u].z, _1811));
    float _1893;
    float _1895;
    float _1897;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1860 = fma(_1039, cbModelParam._m0[13u].z, fma(_1035, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1031)) + cbModelParam._m0[13u].w;
        float _1864 = fma(_1039, cbModelParam._m0[14u].z, fma(_1035, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1031)) + cbModelParam._m0[14u].w;
        float _1868 = fma(_1039, cbModelParam._m0[15u].z, fma(_1035, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1031)) + cbModelParam._m0[15u].w;
        float _1871 = fma(_977, cbModelParam._m0[13u].z, fma(_976, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _975));
        float _1874 = fma(_977, cbModelParam._m0[14u].z, fma(_976, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _975));
        float _1877 = fma(_977, cbModelParam._m0[15u].z, fma(_976, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _975));
        float _1905;
        if (_1871 > 0.0)
        {
            _1905 = abs((1.0 - _1860) / _1871);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1871 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1860 + 1.0) / _1871);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1905 = frontier_phi_19_17_ladder;
        }
        float _2129;
        if (_1874 > 0.0)
        {
            _2129 = abs((1.0 - _1864) / _1874);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1874 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1864 + 1.0) / _1874);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2129 = frontier_phi_28_24_ladder;
        }
        float _2386;
        if (_1877 > 0.0)
        {
            _2386 = abs((1.0 - _1868) / _1877);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1877 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1868 + 1.0) / _1877);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2386 = frontier_phi_40_35_ladder;
        }
        float _2388 = isnan(_2129) ? _1905 : (isnan(_1905) ? _2129 : min(_1905, _2129));
        float _2389 = isnan(_2386) ? _2388 : (isnan(_2388) ? _2386 : min(_2388, _2386));
        float _2393 = (_2389 * _1871) + _1860;
        float _2394 = (_2389 * _1874) + _1864;
        float _2395 = (_2389 * _1877) + _1868;
        float _2396 = _2389 * 9.9999997473787516355514526367188e-05;
        float _2398 = (-1.0) - _2396;
        float _2400 = _2396 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2395 > _2400) || ((_2395 < _2398) || ((_2394 > _2400) || ((_2394 < _2398) || ((_2393 < _2398) || (_2393 > _2400))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2523 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2395, cbModelParam._m0[9u].z, fma(_2394, cbModelParam._m0[9u].y, _2393 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2395, cbModelParam._m0[10u].z, fma(_2394, cbModelParam._m0[10u].y, _2393 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2395, cbModelParam._m0[11u].z, fma(_2394, cbModelParam._m0[11u].y, _2393 * cbModelParam._m0[11u].x))), _1812);
            frontier_phi_18_40_ladder = _2523.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2523.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2523.x * cbModelParam._m0[1u].y;
        }
        _1893 = frontier_phi_18_40_ladder_2;
        _1895 = frontier_phi_18_40_ladder_1;
        _1897 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1881 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_975, _976, _977), _1812);
        _1893 = _1881.x * cbModelParam._m0[1u].y;
        _1895 = _1881.y * cbModelParam._m0[1u].y;
        _1897 = _1881.z * cbModelParam._m0[1u].y;
    }
    float _1901 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _791);
    float _1902 = isnan(_1901) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1901 : min(cbModelParam._m0[25u].w, _1901));
    float _1992;
    float _1994;
    float _1996;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1956 = fma(_1039, cbModelParam._m0[21u].z, fma(_1035, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1031)) + cbModelParam._m0[21u].w;
        float _1960 = fma(_1039, cbModelParam._m0[22u].z, fma(_1035, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1031)) + cbModelParam._m0[22u].w;
        float _1964 = fma(_1039, cbModelParam._m0[23u].z, fma(_1035, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1031)) + cbModelParam._m0[23u].w;
        float _1967 = fma(_977, cbModelParam._m0[21u].z, fma(_976, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _975));
        float _1970 = fma(_977, cbModelParam._m0[22u].z, fma(_976, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _975));
        float _1973 = fma(_977, cbModelParam._m0[23u].z, fma(_976, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _975));
        float _2134;
        if (_1967 > 0.0)
        {
            _2134 = abs((1.0 - _1956) / _1967);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1967 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1956 + 1.0) / _1967);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2134 = frontier_phi_30_26_ladder;
        }
        float _2413;
        if (_1970 > 0.0)
        {
            _2413 = abs((1.0 - _1960) / _1970);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1970 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1960 + 1.0) / _1970);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2413 = frontier_phi_42_37_ladder;
        }
        float _2626;
        if (_1973 > 0.0)
        {
            _2626 = abs((1.0 - _1964) / _1973);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1973 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1964 + 1.0) / _1973);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2626 = frontier_phi_51_48_ladder;
        }
        float _2628 = isnan(_2413) ? _2134 : (isnan(_2134) ? _2413 : min(_2134, _2413));
        float _2629 = isnan(_2626) ? _2628 : (isnan(_2628) ? _2626 : min(_2628, _2626));
        float _2633 = (_2629 * _1967) + _1956;
        float _2634 = (_2629 * _1970) + _1960;
        float _2635 = (_2629 * _1973) + _1964;
        float _2636 = _2629 * 9.9999997473787516355514526367188e-05;
        float _2637 = (-1.0) - _2636;
        float _2639 = _2636 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2635 > _2639) || ((_2635 < _2637) || ((_2634 > _2639) || ((_2634 < _2637) || ((_2633 < _2637) || (_2633 > _2639))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2834 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2635, cbModelParam._m0[17u].z, fma(_2634, cbModelParam._m0[17u].y, _2633 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2635, cbModelParam._m0[18u].z, fma(_2634, cbModelParam._m0[18u].y, _2633 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2635, cbModelParam._m0[19u].z, fma(_2634, cbModelParam._m0[19u].y, _2633 * cbModelParam._m0[19u].x))), _1902);
            frontier_phi_27_51_ladder = _2834.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2834.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2834.x * cbModelParam._m0[1u].z;
        }
        _1992 = frontier_phi_27_51_ladder_2;
        _1994 = frontier_phi_27_51_ladder_1;
        _1996 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1976 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_975, _976, _977), _1902);
        _1992 = _1976.x * cbModelParam._m0[1u].z;
        _1994 = _1976.y * cbModelParam._m0[1u].z;
        _1996 = _1976.z * cbModelParam._m0[1u].z;
    }
    float _2009 = (((_1002 * _951) + _1003) * _967) * ((cbModelParam._m0[1u].w * (_1992 - _1893)) + _1893);
    float _2011 = (((_1002 * _953) + _1003) * _967) * ((cbModelParam._m0[1u].w * (_1994 - _1895)) + _1895);
    float _2013 = (((_1002 * _954) + _1003) * _967) * ((cbModelParam._m0[1u].w * (_1996 - _1897)) + _1897);
    float _2016 = fma(_2013, cbSceneParam._m0[89u].z, fma(_2011, cbSceneParam._m0[89u].y, _2009 * cbSceneParam._m0[89u].x));
    float _2019 = fma(_2013, cbSceneParam._m0[90u].z, fma(_2011, cbSceneParam._m0[90u].y, _2009 * cbSceneParam._m0[90u].x));
    float _2022 = fma(_2013, cbSceneParam._m0[91u].z, fma(_2011, cbSceneParam._m0[91u].y, _2009 * cbSceneParam._m0[91u].x));
    vec4 _2030 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_889, _890));
    float _2032 = _2030.w;
    float _2044 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2032);
    float _2045 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2032);
    float _2046 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2032);
    uvec4 _2050 = floatBitsToUint(cbInstanceData._m0[_250 + 5u]);
    uint _2052 = _2050.x * 14u;
    uint _2053 = _2052 + 13u;
    float _2060 = _967 + (-1.0);
    float _2065 = (cbLight._m0[_2053].x * _2060) + 1.0;
    float _2066 = (cbLight._m0[_2053].y * _2060) + 1.0;
    float _2067 = (cbLight._m0[_2053].z * _2060) + 1.0;
    float _2068 = (cbLight._m0[_2053].w * _2060) + 1.0;
    uint _2069 = _2052 + 5u;
    float _2075 = isnan(1.0) ? _2066 : (isnan(_2066) ? 1.0 : min(_2066, 1.0));
    uint _2079 = _2052 + 4u;
    float _2088 = isnan(1.0) ? _2065 : (isnan(_2065) ? 1.0 : min(_2065, 1.0));
    uint _2092 = _2052 | 1u;
    float _2103 = dot(vec3(cbLight._m0[_2052].xyz), vec3(_788, _789, _790));
    float _2106 = dot(vec3(cbLight._m0[_2092].xyz), vec3(_788, _789, _790));
    float _4338 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
    float _4349 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
    float _2111 = (isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0))) * 0.3183098733425140380859375;
    float _2113 = (isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0))) * 0.3183098733425140380859375;
    float _2120 = ((cbLight._m0[_2069].x * _2075) * _2113) + (((cbLight._m0[_2079].x * _2044) * _2088) * _2111);
    float _2121 = ((_2075 * cbLight._m0[_2069].y) * _2113) + (((cbLight._m0[_2079].y * _2045) * _2088) * _2111);
    float _2122 = ((_2075 * cbLight._m0[_2069].z) * _2113) + (((cbLight._m0[_2079].z * _2046) * _2088) * _2111);
    uvec4 _2126 = floatBitsToUint(cbLight._m0[_2052 + 12u]);
    bool _2128 = _2126.x == 0u;
    float _2139;
    float _2141;
    float _2143;
    if (_2128)
    {
        _2139 = _2120;
        _2141 = _2121;
        _2143 = _2122;
    }
    else
    {
        uint _2147 = _2052 + 6u;
        float _2163 = (dot(vec3(cbLight._m0[_2052 + 2u].xyz), vec3(_788, _789, _790)) * 0.5) + 0.5;
        float _2164 = _2163 * _2163;
        float _4360 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
        float _2165 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
        float _2166 = isnan(1.0) ? _2067 : (isnan(_2067) ? 1.0 : min(_2067, 1.0));
        _2139 = (((cbLight._m0[_2147].x * 0.3183098733425140380859375) * _2165) * _2166) + _2120;
        _2141 = (((cbLight._m0[_2147].y * 0.3183098733425140380859375) * _2165) * _2166) + _2121;
        _2143 = (((cbLight._m0[_2147].z * 0.3183098733425140380859375) * _2165) * _2166) + _2122;
    }
    bool _2146 = _2126.y == 0u;
    float _2184;
    float _2186;
    float _2188;
    if (_2146)
    {
        _2184 = _2139;
        _2186 = _2141;
        _2188 = _2143;
    }
    else
    {
        uint _2357 = _2052 + 7u;
        float _2373 = (dot(vec3(cbLight._m0[_2052 + 3u].xyz), vec3(_788, _789, _790)) * 0.5) + 0.5;
        float _2374 = _2373 * _2373;
        float _4376 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
        float _2375 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
        float _2376 = isnan(1.0) ? _2068 : (isnan(_2068) ? 1.0 : min(_2068, 1.0));
        _2184 = (((cbLight._m0[_2357].x * 0.3183098733425140380859375) * _2375) * _2376) + _2139;
        _2186 = (((cbLight._m0[_2357].y * 0.3183098733425140380859375) * _2375) * _2376) + _2141;
        _2188 = (((cbLight._m0[_2357].z * 0.3183098733425140380859375) * _2375) * _2376) + _2143;
    }
    uint _2191 = _2052 + 8u;
    float _2204 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2052].w)) * _791) * 0.949999988079071044921875);
    float _2205 = _2204 * _2204;
    float _2206 = cbLight._m0[_2052].x + _872;
    float _2207 = cbLight._m0[_2052].y + _873;
    float _2208 = cbLight._m0[_2052].z + _874;
    float _2212 = inversesqrt(dot(vec3(_2206, _2207, _2208), vec3(_2206, _2207, _2208)));
    float _2213 = _2212 * _2206;
    float _2214 = _2212 * _2207;
    float _2215 = _2212 * _2208;
    float _2216 = dot(vec3(_788, _789, _790), vec3(cbLight._m0[_2052].xyz));
    float _4392 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
    float _2219 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
    float _4403 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
    float _2220 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
    float _2221 = dot(vec3(_788, _789, _790), vec3(_2213, _2214, _2215));
    float _4414 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
    float _2224 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
    float _2225 = dot(vec3(cbLight._m0[_2052].xyz), vec3(_2213, _2214, _2215));
    float _4425 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
    float _2229 = _2205 * _2205;
    float _2233 = ((_2224 * _2224) * (_2229 + (-1.0))) + 1.0;
    float _2241 = exp2(log2(1.0 - (isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0)))) * 5.0);
    float _2242 = 0.959999978542327880859375 - _948;
    float _2244 = 0.959999978542327880859375 - _949;
    float _2245 = 0.959999978542327880859375 - _950;
    float _2252 = 1.0 - _2205;
    float _2263 = (0.5 / (((_2220 * ((_2219 * _2252) + _2205)) + 9.9999999392252902907785028219223e-09) + (((_2220 * _2252) + _2205) * _2219))) * _2219;
    float _4436 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
    float _2265 = (isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0))) * (_2229 / ((_2233 * _2233) * 3.141590118408203125));
    uint _2279 = _2052 + 9u;
    float _2290 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2092].w)) * _791) * 0.949999988079071044921875);
    float _2291 = _2290 * _2290;
    float _2292 = cbLight._m0[_2092].x + _872;
    float _2293 = cbLight._m0[_2092].y + _873;
    float _2294 = cbLight._m0[_2092].z + _874;
    float _2298 = inversesqrt(dot(vec3(_2292, _2293, _2294), vec3(_2292, _2293, _2294)));
    float _2299 = _2298 * _2292;
    float _2300 = _2298 * _2293;
    float _2301 = _2298 * _2294;
    float _2302 = dot(vec3(_788, _789, _790), vec3(cbLight._m0[_2092].xyz));
    float _4447 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
    float _2305 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
    float _2306 = dot(vec3(_788, _789, _790), vec3(_2299, _2300, _2301));
    float _4458 = isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : max(_2306, 0.0));
    float _2309 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
    float _2310 = dot(vec3(cbLight._m0[_2092].xyz), vec3(_2299, _2300, _2301));
    float _4469 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
    float _2314 = _2291 * _2291;
    float _2318 = ((_2309 * _2309) * (_2314 + (-1.0))) + 1.0;
    float _2325 = exp2(log2(1.0 - (isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0)))) * 5.0);
    float _2332 = 1.0 - _2291;
    float _2342 = (0.5 / (((_2220 * ((_2305 * _2332) + _2291)) + 9.9999999392252902907785028219223e-09) + (((_2220 * _2332) + _2291) * _2305))) * _2305;
    float _4480 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
    float _2344 = (isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0))) * (_2314 / ((_2318 * _2318) * 3.141590118408203125));
    float _2354 = (((((_2325 * _2242) + _951) * cbLight._m0[_2279].x) * _2344) * _2075) + ((((cbLight._m0[_2191].x * _2044) * ((_2241 * _2242) + _951)) * _2265) * _2088);
    float _2355 = (((((_2325 * _2244) + _953) * cbLight._m0[_2279].y) * _2344) * _2075) + ((((cbLight._m0[_2191].y * _2045) * ((_2241 * _2244) + _953)) * _2265) * _2088);
    float _2356 = (((((_2325 * _2245) + _954) * cbLight._m0[_2279].z) * _2344) * _2075) + ((((cbLight._m0[_2191].z * _2046) * ((_2241 * _2245) + _954)) * _2265) * _2088);
    float _2418;
    float _2420;
    float _2422;
    if (_2128)
    {
        _2418 = _2354;
        _2420 = _2355;
        _2422 = _2356;
    }
    else
    {
        uint _2424 = _2052 + 2u;
        uint _2428 = _2052 + 10u;
        float _2442 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2424].w)) * _791) * 0.949999988079071044921875);
        float _2443 = _2442 * _2442;
        float _2444 = cbLight._m0[_2424].x + _872;
        float _2445 = cbLight._m0[_2424].y + _873;
        float _2446 = cbLight._m0[_2424].z + _874;
        float _2450 = inversesqrt(dot(vec3(_2444, _2445, _2446), vec3(_2444, _2445, _2446)));
        float _2451 = _2450 * _2444;
        float _2452 = _2450 * _2445;
        float _2453 = _2450 * _2446;
        float _2454 = dot(vec3(_788, _789, _790), vec3(cbLight._m0[_2424].xyz));
        float _4491 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
        float _2457 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
        float _2458 = dot(vec3(_788, _789, _790), vec3(_2451, _2452, _2453));
        float _4502 = isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0));
        float _2461 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
        float _2462 = dot(vec3(cbLight._m0[_2424].xyz), vec3(_2451, _2452, _2453));
        float _4513 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
        float _2466 = _2443 * _2443;
        float _2470 = ((_2461 * _2461) * (_2466 + (-1.0))) + 1.0;
        float _2477 = exp2(log2(1.0 - (isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0)))) * 5.0);
        float _2484 = 1.0 - _2443;
        float _2494 = (0.5 / (((_2220 * ((_2457 * _2484) + _2443)) + 9.9999999392252902907785028219223e-09) + (((_2220 * _2484) + _2443) * _2457))) * _2457;
        float _4524 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
        float _2496 = (isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0))) * (_2466 / ((_2470 * _2470) * 3.141590118408203125));
        float _2497 = isnan(1.0) ? _2067 : (isnan(_2067) ? 1.0 : min(_2067, 1.0));
        _2418 = (((((_2477 * _2242) + _951) * cbLight._m0[_2428].x) * _2496) * _2497) + _2354;
        _2420 = (((((_2477 * _2244) + _953) * cbLight._m0[_2428].y) * _2496) * _2497) + _2355;
        _2422 = (((((_2477 * _2245) + _954) * cbLight._m0[_2428].z) * _2496) * _2497) + _2356;
    }
    float _2532;
    float _2534;
    float _2536;
    if (_2146)
    {
        _2532 = _2418;
        _2534 = _2420;
        _2536 = _2422;
    }
    else
    {
        uint _2543 = _2052 + 3u;
        uint _2547 = _2052 + 11u;
        float _2561 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2543].w)) * _791) * 0.949999988079071044921875);
        float _2562 = _2561 * _2561;
        float _2563 = cbLight._m0[_2543].x + _872;
        float _2564 = cbLight._m0[_2543].y + _873;
        float _2565 = cbLight._m0[_2543].z + _874;
        float _2569 = inversesqrt(dot(vec3(_2563, _2564, _2565), vec3(_2563, _2564, _2565)));
        float _2570 = _2569 * _2563;
        float _2571 = _2569 * _2564;
        float _2572 = _2569 * _2565;
        float _2573 = dot(vec3(_788, _789, _790), vec3(cbLight._m0[_2543].xyz));
        float _4540 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
        float _2576 = isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0));
        float _2577 = dot(vec3(_788, _789, _790), vec3(_2570, _2571, _2572));
        float _4551 = isnan(0.0) ? _2577 : (isnan(_2577) ? 0.0 : max(_2577, 0.0));
        float _2580 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
        float _2581 = dot(vec3(cbLight._m0[_2543].xyz), vec3(_2570, _2571, _2572));
        float _4562 = isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0));
        float _2585 = _2562 * _2562;
        float _2589 = ((_2580 * _2580) * (_2585 + (-1.0))) + 1.0;
        float _2596 = exp2(log2(1.0 - (isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0)))) * 5.0);
        float _2603 = 1.0 - _2562;
        float _2613 = (0.5 / (((_2220 * ((_2576 * _2603) + _2562)) + 9.9999999392252902907785028219223e-09) + (((_2220 * _2603) + _2562) * _2576))) * _2576;
        float _4573 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
        float _2615 = (isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0))) * (_2585 / ((_2589 * _2589) * 3.141590118408203125));
        float _2616 = isnan(1.0) ? _2068 : (isnan(_2068) ? 1.0 : min(_2068, 1.0));
        _2532 = (((((_2596 * _2242) + _951) * cbLight._m0[_2547].x) * _2615) * _2616) + _2418;
        _2534 = (((((_2596 * _2244) + _953) * cbLight._m0[_2547].y) * _2615) * _2616) + _2420;
        _2536 = (((((_2596 * _2245) + _954) * cbLight._m0[_2547].z) * _2615) * _2616) + _2422;
    }
    float _2751;
    float _2753;
    float _2755;
    float _2757;
    float _2759;
    float _2761;
    if (_2050.y == 0u)
    {
        float _2691 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2692 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2691;
        float _2693 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2691;
        float _2694 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2691;
        uvec4 _2706 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2707 = _2706.x;
        uint _2718 = uint((float(_2706.y) * floor(float(uint(cbSceneParam._m0[85u].y * _890) / _2707))) + floor(float(uint(cbSceneParam._m0[85u].x * _889) / _2707)));
        float _2728 = (log2(_2694 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2729 = isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : max(_2728, 0.0));
        uint _2732 = uint(isnan(14.0) ? _2729 : (isnan(_2729) ? 14.0 : min(_2729, 14.0)));
        uvec4 _2737 = texelFetch(g_lightClusterGridBuffer, int(((_2732 << 2u) + (_2718 << 6u)) >> 2u));
        uint _2738 = _2737.x;
        uint _2739 = _2706.z;
        float _2839;
        float _2841;
        float _2843;
        float _2845;
        float _2847;
        float _2849;
        if (((((1u << ((_2739 >> 4u) & 15u)) + 4294967295u) & _2738) == 0u) || ((_2739 & 240u) == 0u))
        {
            _2839 = 0.0;
            _2841 = 0.0;
            _2843 = 0.0;
            _2845 = 0.0;
            _2847 = 0.0;
            _2849 = 0.0;
        }
        else
        {
            float _2840;
            float _2842;
            float _2844;
            float _2846;
            float _2848;
            float _2850;
            float _2992 = 0.0;
            float _2993 = 0.0;
            float _2994 = 0.0;
            float _2995 = 0.0;
            float _2996 = 0.0;
            float _2997 = 0.0;
            uint _2998 = 0u;
            uint _3007;
            bool _3008;
            for (;;)
            {
                _3007 = texelFetch(g_lightClassification, int((((_2732 << 5u) + (_2718 << 9u)) + (_2998 << 2u)) >> 2u)).x;
                _3008 = _3007 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3008)
                {
                    frontier_phi_68_pred = _2992;
                    frontier_phi_68_pred_1 = _2997;
                    frontier_phi_68_pred_2 = _2996;
                    frontier_phi_68_pred_3 = _2995;
                    frontier_phi_68_pred_4 = _2994;
                    frontier_phi_68_pred_5 = _2993;
                }
                else
                {
                    float _3137;
                    float _3138;
                    float _3139;
                    float _3140;
                    float _3141;
                    float _3142;
                    uint _3143;
                    _3137 = _2992;
                    _3138 = _2993;
                    _3139 = _2994;
                    _3140 = _2995;
                    _3141 = _2996;
                    _3142 = _2997;
                    _3143 = _3007;
                    float _3064;
                    float _3065;
                    float _3066;
                    float _3067;
                    float _3068;
                    float _3069;
                    for (;;)
                    {
                        uint _3147 = uint(findLSB(_3143)) + (_2998 << 5u);
                        uint _3144 = (_3143 + 4294967295u) & _3143;
                        uint _3149 = _3147 * 48u;
                        vec4 _3163 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3149)).x, texelFetch(g_PointLightRenderingBuffer, int(_3149 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3149 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3149 + 3u)).x));
                        uint _3169 = (_3147 * 48u) + 4u;
                        vec4 _3182 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3169)).x, texelFetch(g_PointLightRenderingBuffer, int(_3169 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3169 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3169 + 3u)).x));
                        uint _3188 = (_3147 * 48u) + 8u;
                        vec3 _3199 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3188)).x, texelFetch(g_PointLightRenderingBuffer, int(_3188 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3188 + 2u)).x));
                        float _3203 = _3163.x - _2692;
                        float _3204 = _3163.y - _2693;
                        float _3205 = _3163.z - _2694;
                        float _3206 = dot(vec3(_3203, _3204, _3205), vec3(_3203, _3204, _3205));
                        float _3209 = inversesqrt(_3206);
                        float _3210 = _3209 * _3203;
                        float _3211 = _3209 * _3204;
                        float _3212 = _3209 * _3205;
                        float _3213 = dot(vec3(_908, _911, _914), vec3(_3210, _3211, _3212));
                        float _3218 = 1.0 - (_3206 * _3163.w);
                        float _4599 = isnan(0.0) ? _3218 : (isnan(_3218) ? 0.0 : max(_3218, 0.0));
                        float _3219 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
                        float _3220 = sqrt(_3206) * _3182.w;
                        float _3223 = 1.39999997615814208984375 / (_3220 + 1.39999997615814208984375);
                        float _3224 = _3223 * _3223;
                        float _3227 = ((1.0 - _3224) * _3213) + _3224;
                        float _3230 = _3220 * _3220;
                        float _3234 = ((isnan(0.0) ? _3227 : (isnan(_3227) ? 0.0 : max(_3227, 0.0))) * _3219) / ((_3230 * 0.699999988079071044921875) + 1.0);
                        float _3238 = (-0.0) - _2692;
                        float _3239 = (-0.0) - _2693;
                        float _3240 = (-0.0) - _2694;
                        float _3244 = inversesqrt(dot(vec3(_3238, _3239, _3240), vec3(_3238, _3239, _3240)));
                        float _3245 = _3244 * _3238;
                        float _3246 = _3244 * _3239;
                        float _3247 = _3244 * _3240;
                        float _3255 = exp2(log2(1.0 / ((_3230 * 3.5) + 5.0)) * 0.25);
                        float _3256 = 1.0 - _983;
                        float _3263 = sqrt(1.0 - ((1.0 - (_3256 * _3256)) * (1.0 - (_3255 * _3255))));
                        float _3264 = _3263 * _3263;
                        float _3265 = _3264 * _3264;
                        float _3266 = _3245 + _3210;
                        float _3267 = _3246 + _3211;
                        float _3268 = _3247 + _3212;
                        float _3272 = inversesqrt(dot(vec3(_3266, _3267, _3268), vec3(_3266, _3267, _3268)));
                        float _3276 = dot(vec3(_908, _911, _914), vec3(_3245, _3246, _3247));
                        float _4615 = isnan(0.0) ? _3276 : (isnan(_3276) ? 0.0 : max(_3276, 0.0));
                        float _3279 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
                        float _3280 = dot(vec3(_908, _911, _914), vec3(_3272 * _3266, _3272 * _3267, _3272 * _3268));
                        float _4626 = isnan(0.0) ? _3280 : (isnan(_3280) ? 0.0 : max(_3280, 0.0));
                        float _3283 = isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0));
                        float _3287 = ((_3283 * _3283) * (_3265 + (-1.0))) + 1.0;
                        float _3288 = _3223 * _3264;
                        float _3289 = _3288 * _3288;
                        float _3292 = ((1.0 - _3289) * _3213) + _3289;
                        float _4637 = isnan(0.0) ? _3292 : (isnan(_3292) ? 0.0 : max(_3292, 0.0));
                        float _3293 = isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0));
                        float _3294 = 1.0 - _3264;
                        float _3304 = (0.5 / (((_3293 * ((_3279 * _3294) + _3264)) + 9.9999999392252902907785028219223e-09) + (((_3293 * _3294) + _3264) * _3279))) * _3293;
                        float _4648 = isnan(0.0) ? _3304 : (isnan(_3304) ? 0.0 : max(_3304, 0.0));
                        float _3315 = (((_3265 * 3.1415927410125732421875) * (isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0)))) / ((_3287 * _3287) * ((_3230 * 2.1991131305694580078125) + 3.141590118408203125))) * _3219;
                        _3067 = (_3234 * _3182.x) + _3140;
                        _3068 = (_3234 * _3182.y) + _3141;
                        _3069 = (_3234 * _3182.z) + _3142;
                        _3064 = (_3315 * _3199.x) + _3137;
                        _3065 = (_3315 * _3199.y) + _3138;
                        _3066 = (_3315 * _3199.z) + _3139;
                        if (_3144 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3137 = _3064;
                            _3138 = _3065;
                            _3139 = _3066;
                            _3140 = _3067;
                            _3141 = _3068;
                            _3142 = _3069;
                            _3143 = _3144;
                        }
                    }
                    frontier_phi_68_pred = _3064;
                    frontier_phi_68_pred_1 = _3069;
                    frontier_phi_68_pred_2 = _3068;
                    frontier_phi_68_pred_3 = _3067;
                    frontier_phi_68_pred_4 = _3066;
                    frontier_phi_68_pred_5 = _3065;
                }
                _2840 = frontier_phi_68_pred;
                _2850 = frontier_phi_68_pred_1;
                _2848 = frontier_phi_68_pred_2;
                _2846 = frontier_phi_68_pred_3;
                _2844 = frontier_phi_68_pred_4;
                _2842 = frontier_phi_68_pred_5;
                uint _2999 = _2998 + 1u;
                if (_2999 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2992 = _2840;
                    _2993 = _2842;
                    _2994 = _2844;
                    _2995 = _2846;
                    _2996 = _2848;
                    _2997 = _2850;
                    _2998 = _2999;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2839 = _2840;
            _2841 = _2842;
            _2843 = _2844;
            _2845 = _2846;
            _2847 = _2848;
            _2849 = _2850;
        }
        uvec4 _2853 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2854 = _2853.z;
        uint _2856 = (_2854 >> 8u) & 15u;
        float _2960;
        float _2962;
        float _2964;
        float _2966;
        float _2968;
        float _2970;
        if (((4294967295u << _2856) & _2738) == 0u)
        {
            _2960 = _2839;
            _2962 = _2841;
            _2964 = _2843;
            _2966 = _2845;
            _2968 = _2847;
            _2970 = _2849;
        }
        else
        {
            float _2985 = inversesqrt(dot(vec3(_2692, _2693, _2694), vec3(_2692, _2693, _2694)));
            float _2986 = _2985 * _2692;
            float _2987 = _2985 * _2693;
            float _2988 = _2985 * _2694;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2856 < ((_2854 >> 12u) & 15u))
            {
                float _2961;
                float _2963;
                float _2965;
                float _2967;
                float _2969;
                float _2971;
                float _3120 = _2839;
                float _3121 = _2841;
                float _3122 = _2843;
                float _3123 = _2845;
                float _3124 = _2847;
                float _3125 = _2849;
                uint _3126 = _2856;
                uint _3135;
                bool _3136;
                for (;;)
                {
                    _3135 = texelFetch(g_lightClassification, int((((_2732 << 5u) + (_2718 << 9u)) + (_3126 << 2u)) >> 2u)).x;
                    _3136 = _3135 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3136)
                    {
                        frontier_phi_79_pred = _3125;
                        frontier_phi_79_pred_1 = _3124;
                        frontier_phi_79_pred_2 = _3123;
                        frontier_phi_79_pred_3 = _3122;
                        frontier_phi_79_pred_4 = _3121;
                        frontier_phi_79_pred_5 = _3120;
                    }
                    else
                    {
                        float _3329;
                        float _3330;
                        float _3331;
                        float _3332;
                        float _3333;
                        float _3334;
                        float _3622;
                        float _3623;
                        float _3624;
                        float _3625;
                        float _3626;
                        float _3627;
                        float _3342 = _3120;
                        float _3343 = _3121;
                        float _3344 = _3122;
                        float _3345 = _3123;
                        float _3346 = _3124;
                        float _3347 = _3125;
                        uint _3348 = _3135;
                        uint _3349;
                        vec4 _3374;
                        float _3375;
                        vec4 _3390;
                        vec3 _3402;
                        vec4 _3417;
                        vec4 _3432;
                        float _3478;
                        bool _3479;
                        for (;;)
                        {
                            uint _3359 = ((_3126 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3348));
                            _3349 = (_3348 + 4294967295u) & _3348;
                            uint _3361 = _3359 * 40u;
                            _3374 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3361)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 3u)).x));
                            _3375 = _3374.w;
                            uint _3377 = (_3359 * 40u) + 4u;
                            _3390 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3377)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 3u)).x));
                            uint _3392 = (_3359 * 40u) + 8u;
                            _3402 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3392)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 2u)).x));
                            uint _3404 = (_3359 * 40u) + 16u;
                            _3417 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3404)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 3u)).x));
                            uint _3419 = (_3359 * 40u) + 20u;
                            _3432 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3419)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 3u)).x));
                            uint _3434 = (_3359 * 40u) + 24u;
                            vec4 _3447 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3434)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 3u)).x));
                            uint _3453 = (_3359 * 40u) + 28u;
                            vec4 _3466 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3453)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 3u)).x));
                            _3478 = fma(_2694, _3466.z, fma(_2693, _3466.y, _3466.x * _2692)) + _3466.w;
                            _3479 = !((fma(_2694, _3447.z, fma(_2693, _3447.y, _3447.x * _2692)) + _3447.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3479)
                            {
                                float _3506 = _3374.x - _2692;
                                float _3507 = _3374.y - _2693;
                                float _3508 = _3374.z - _2694;
                                float _3509 = dot(vec3(_3506, _3507, _3508), vec3(_3506, _3507, _3508));
                                float _3512 = inversesqrt(_3509);
                                float _3513 = _3512 * _3506;
                                float _3514 = _3512 * _3507;
                                float _3515 = _3512 * _3508;
                                float _3519 = 1.0 - (_3509 / (_3375 * _3375));
                                float _4659 = isnan(0.0) ? _3519 : (isnan(_3519) ? 0.0 : max(_3519, 0.0));
                                float _3520 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
                                float _3524 = sqrt(_3509) * _3390.w;
                                float _3526 = 1.39999997615814208984375 / (_3524 + 1.39999997615814208984375);
                                float _3527 = _3526 * _3526;
                                float _3530 = ((1.0 - _3527) * dot(vec3(_3513, _3514, _3515), vec3(_908, _911, _914))) + _3527;
                                float _3533 = _3524 * _3524;
                                float _3537 = (fma(_2694, _3417.z, fma(_2693, _3417.y, _3417.x * _2692)) + _3417.w) / _3478;
                                float _3538 = (fma(_2694, _3432.z, fma(_2693, _3432.y, _3432.x * _2692)) + _3432.w) / _3478;
                                float _3542 = 1.0 - dot(vec2(_3537, _3538), vec2(_3537, _3538));
                                float _4675 = isnan(0.0) ? _3542 : (isnan(_3542) ? 0.0 : max(_3542, 0.0));
                                float _3543 = isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0));
                                float _3544 = _3543 * (((isnan(0.0) ? _3530 : (isnan(_3530) ? 0.0 : max(_3530, 0.0))) * _3520) / ((_3533 * 0.699999988079071044921875) + 1.0));
                                float _3556 = exp2(log2(1.0 / ((_3533 * 3.5) + 5.0)) * 0.25);
                                float _3557 = 1.0 - _983;
                                float _3564 = sqrt(1.0 - ((1.0 - (_3557 * _3557)) * (1.0 - (_3556 * _3556))));
                                float _3565 = _3564 * _3564;
                                float _3566 = _3565 * _3565;
                                float _3567 = _3513 - _2986;
                                float _3568 = _3514 - _2987;
                                float _3569 = _3515 - _2988;
                                float _3573 = inversesqrt(dot(vec3(_3567, _3568, _3569), vec3(_3567, _3568, _3569)));
                                float _3577 = dot(vec3(_908, _911, _914), vec3((-0.0) - _2986, (-0.0) - _2987, (-0.0) - _2988));
                                float _4686 = isnan(0.0) ? _3577 : (isnan(_3577) ? 0.0 : max(_3577, 0.0));
                                float _3580 = isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0));
                                float _3581 = dot(vec3(_908, _911, _914), vec3(_3573 * _3567, _3573 * _3568, _3573 * _3569));
                                float _4697 = isnan(0.0) ? _3581 : (isnan(_3581) ? 0.0 : max(_3581, 0.0));
                                float _3584 = isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0));
                                float _3588 = ((_3584 * _3584) * (_3566 + (-1.0))) + 1.0;
                                float _3589 = _3526 * _3565;
                                float _3590 = _3589 * _3589;
                                float _3596 = ((1.0 - _3590) * dot(vec3(_908, _911, _914), vec3(_3513, _3514, _3515))) + _3590;
                                float _4708 = isnan(0.0) ? _3596 : (isnan(_3596) ? 0.0 : max(_3596, 0.0));
                                float _3597 = isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0));
                                float _3598 = 1.0 - _3565;
                                float _3608 = (0.5 / (((_3597 * ((_3580 * _3598) + _3565)) + 9.9999999392252902907785028219223e-09) + (((_3597 * _3598) + _3565) * _3580))) * _3597;
                                float _4719 = isnan(0.0) ? _3608 : (isnan(_3608) ? 0.0 : max(_3608, 0.0));
                                float _3618 = (_3543 * _3520) * (((_3566 * 3.1415927410125732421875) * (isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0)))) / ((_3588 * _3588) * ((_3533 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3544 * _3390.y;
                                frontier_phi_85_pred_1 = _3544 * _3390.x;
                                frontier_phi_85_pred_2 = _3618 * _3402.z;
                                frontier_phi_85_pred_3 = _3618 * _3402.y;
                                frontier_phi_85_pred_4 = _3618 * _3402.x;
                                frontier_phi_85_pred_5 = _3544 * _3390.z;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3626 = frontier_phi_85_pred;
                            _3625 = frontier_phi_85_pred_1;
                            _3624 = frontier_phi_85_pred_2;
                            _3623 = frontier_phi_85_pred_3;
                            _3622 = frontier_phi_85_pred_4;
                            _3627 = frontier_phi_85_pred_5;
                            _3332 = _3625 + _3345;
                            _3333 = _3626 + _3346;
                            _3334 = _3627 + _3347;
                            _3329 = _3622 + _3342;
                            _3330 = _3623 + _3343;
                            _3331 = _3624 + _3344;
                            if (_3349 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3342 = _3329;
                                _3343 = _3330;
                                _3344 = _3331;
                                _3345 = _3332;
                                _3346 = _3333;
                                _3347 = _3334;
                                _3348 = _3349;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3334;
                        frontier_phi_79_pred_1 = _3333;
                        frontier_phi_79_pred_2 = _3332;
                        frontier_phi_79_pred_3 = _3331;
                        frontier_phi_79_pred_4 = _3330;
                        frontier_phi_79_pred_5 = _3329;
                    }
                    _2971 = frontier_phi_79_pred;
                    _2969 = frontier_phi_79_pred_1;
                    _2967 = frontier_phi_79_pred_2;
                    _2965 = frontier_phi_79_pred_3;
                    _2963 = frontier_phi_79_pred_4;
                    _2961 = frontier_phi_79_pred_5;
                    uint _3127 = _3126 + 1u;
                    if (_3127 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3120 = _2961;
                        _3121 = _2963;
                        _3122 = _2965;
                        _3123 = _2967;
                        _3124 = _2969;
                        _3125 = _2971;
                        _3126 = _3127;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2965;
                frontier_phi_60_61_ladder_1 = _2971;
                frontier_phi_60_61_ladder_2 = _2969;
                frontier_phi_60_61_ladder_3 = _2967;
                frontier_phi_60_61_ladder_4 = _2963;
                frontier_phi_60_61_ladder_5 = _2961;
            }
            else
            {
                frontier_phi_60_61_ladder = _2843;
                frontier_phi_60_61_ladder_1 = _2849;
                frontier_phi_60_61_ladder_2 = _2847;
                frontier_phi_60_61_ladder_3 = _2845;
                frontier_phi_60_61_ladder_4 = _2841;
                frontier_phi_60_61_ladder_5 = _2839;
            }
            _2960 = frontier_phi_60_61_ladder_5;
            _2962 = frontier_phi_60_61_ladder_4;
            _2964 = frontier_phi_60_61_ladder;
            _2966 = frontier_phi_60_61_ladder_3;
            _2968 = frontier_phi_60_61_ladder_2;
            _2970 = frontier_phi_60_61_ladder_1;
        }
        float _2975 = isnan(1.0) ? _967 : (isnan(_967) ? 1.0 : min(_967, 1.0));
        _2751 = (_2975 * _2966) + _2184;
        _2753 = (_2975 * _2968) + _2186;
        _2755 = (_2975 * _2970) + _2188;
        _2757 = ((_2960 * _951) * _2975) + _2532;
        _2759 = ((_2962 * _953) * _2975) + _2534;
        _2761 = ((_2964 * _954) * _2975) + _2536;
    }
    else
    {
        _2751 = _2184;
        _2753 = _2186;
        _2755 = _2188;
        _2757 = _2532;
        _2759 = _2534;
        _2761 = _2536;
    }
    float _4735 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
    float _4746 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
    float _4757 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
    float _2778 = ((isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0))) * (_2751 + ((isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0))) * _967))) + ((_2757 + ((isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0))) * _1801)) * cbPerFrame._m0[3u].x);
    float _2779 = ((isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0))) * (_2753 + ((isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0))) * _967))) + ((_2759 + ((isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0))) * _1801)) * cbPerFrame._m0[3u].x);
    float _2780 = ((isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0))) * (_2755 + ((isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0))) * _967))) + ((_2761 + ((isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0))) * _1801)) * cbPerFrame._m0[3u].x);
    uint _2781 = _250 + 6u;
    float _2789 = _889 / cbSceneParam._m0[86u].x;
    float _2790 = _890 / cbSceneParam._m0[86u].y;
    vec4 _2804 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2789, _2790, (log2((isnan(cbSceneParam._m0[77u].w) ? _814 : (isnan(_814) ? cbSceneParam._m0[77u].w : min(_814, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2806 = _2804.x;
    float _2807 = _2804.y;
    float _2808 = _2804.z;
    float _2809 = _2804.w;
    float _2902;
    float _2904;
    float _2906;
    float _2908;
    if (_814 > cbSceneParam._m0[78u].w)
    {
        float _2864 = isnan(_814) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _814 : min(cbSceneParam._m0[80u].w, _814));
        float _2865 = _2864 / _814;
        float _2876 = _2865 * _865;
        float _2877 = _866 * _2865;
        float _2878 = (-0.0) - _2877;
        float _2880 = _2865 * _867;
        float _2882 = (cbSceneParam._m0[77u].w * _2878) / _2864;
        float _2883 = _2882 + cbSceneParam._m0[79u].w;
        float _2884 = cbSceneParam._m0[79u].w - _2877;
        float _2890 = sqrt(((_2876 * _2876) + (_2877 * _2877)) + (_2880 * _2880));
        float _2893 = (1.0 - (cbSceneParam._m0[77u].w / _2864)) * _2890;
        float _2898 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2900 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3077;
        if (abs((_2878 - _2882) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3077 = ((((_2883 > 0.0) ? exp2(_2898 * _2883) : (2.0 - exp2(_2900 * _2883))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2893;
        }
        else
        {
            float _3021 = 1.0 / cbSceneParam._m0[80u].x;
            float _3022 = isnan(_2884) ? _2883 : (isnan(_2883) ? _2884 : max(_2883, _2884));
            float _3023 = isnan(_2884) ? _2883 : (isnan(_2883) ? _2884 : min(_2883, _2884));
            float _3032 = isnan(0.0) ? _3022 : (isnan(_3022) ? 0.0 : min(_3022, 0.0));
            float _3033 = isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : min(_3023, 0.0));
            _3077 = ((abs(_2890 / _2878) * cbSceneParam._m0[80u].y) * ((((_3032 - _3033) * 2.0) - ((exp2(_2898 * (isnan(0.0) ? _3022 : (isnan(_3022) ? 0.0 : max(_3022, 0.0)))) - exp2(_2898 * (isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : max(_3023, 0.0))))) * _3021)) - ((exp2(_2900 * _3032) - exp2(_2900 * _3033)) * _3021))) + (_2893 * cbSceneParam._m0[80u].z);
        }
        vec4 _3079 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2789, _2790, 1.0), 0.0);
        float _3088 = exp2((_3077 * (-1.44269502162933349609375)) * (1.0 - _3079.w));
        float _3089 = log2(_3088);
        float _3105 = log2(_2809);
        _2902 = (exp2(_3105 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3089 * cbSceneParam._m0[78u].x)) * _3079.x) / cbSceneParam._m0[78u].x)) + _2806;
        _2904 = (exp2(_3105 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3089 * cbSceneParam._m0[78u].y)) * _3079.y) / cbSceneParam._m0[78u].y)) + _2807;
        _2906 = (exp2(_3105 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3089 * cbSceneParam._m0[78u].z)) * _3079.z) / cbSceneParam._m0[78u].z)) + _2808;
        _2908 = _3088 * _2809;
    }
    else
    {
        _2902 = _2806;
        _2904 = _2807;
        _2906 = _2808;
        _2908 = _2809;
    }
    bool _3115;
    vec4 _2918;
    vec4 _2940;
    float _2942;
    float _2946;
    float _2947;
    float _2948;
    float _2949;
    bool _2959;
    for (;;)
    {
        _2918 = cbMatDynParam._m0[0u];
        float _2920 = roundEven(_2918.y);
        bool _2921 = _2920 == 3.0;
        float _2922 = log2(_2908);
        float _2929 = exp2(_2922 * cbSceneParam._m0[78u].x) * _2778;
        float _2930 = exp2(_2922 * cbSceneParam._m0[78u].y) * _2779;
        float _2931 = exp2(_2922 * cbSceneParam._m0[78u].z) * _2780;
        float _2938 = _878 + (-0.5);
        _2940 = cbMtdParam._m0[1u];
        _2942 = _2940.y * _2938;
        float _2945 = (_2920 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2946 = _2945 * (_2921 ? _2929 : (_2929 + (cbSceneParam._m0[72u].w * _2902)));
        _2947 = _2945 * (_2921 ? _2930 : (_2930 + (cbSceneParam._m0[72u].w * _2904)));
        _2948 = _2945 * (_2921 ? _2931 : (_2931 + (cbSceneParam._m0[72u].w * _2906)));
        _2949 = _2938 * 0.999000012874603271484375;
        _2959 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2959)
        {
            if ((cbInstanceData._m0[_250 + 7u].x + _2949) < 0.5)
            {
                _3115 = true;
                break;
            }
        }
        uint _3056 = _927 + uint(_2918.w);
        if ((cbInstanceData._m0[_3056].w < 1.0) && ((cbInstanceData._m0[_3056].w + _2949) < 0.5))
        {
            _3115 = true;
            break;
        }
        if ((_2942 + 1.0) < _2940.x)
        {
            _3115 = true;
            break;
        }
        _3115 = false;
        break;
    }
    float _3320;
    if (_3115)
    {
        discard_state = true;
        _3320 = 0.0;
    }
    else
    {
        _3320 = cbInstanceData._m0[_2781].w;
    }
    SV_Target.x = _2946;
    SV_Target.y = _2947;
    SV_Target.z = _2948;
    SV_Target.w = _3320;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2781].w;
    discard_exit();
}


