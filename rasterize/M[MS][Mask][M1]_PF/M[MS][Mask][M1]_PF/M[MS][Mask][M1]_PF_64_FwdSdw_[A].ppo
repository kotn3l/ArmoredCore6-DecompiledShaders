#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1497;
float _4159;
float _4160;
float _4161;
float _4162;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _237 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _238 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _239 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _245 = inversesqrt(dot(vec3(_237, _238, _239), vec3(_237, _238, _239)));
    float _252 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _259 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _273 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _275 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _276 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4171 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    float _4182 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    float _4193 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    uint _286 = uint(roundEven(NORMAL.w)) * 13u;
    uint _291 = _286 + 1u;
    uint _295 = _286 + 2u;
    float _304 = sqrt(((cbInstanceData._m0[_291].x * cbInstanceData._m0[_291].x) + (cbInstanceData._m0[_286].x * cbInstanceData._m0[_286].x)) + (cbInstanceData._m0[_295].x * cbInstanceData._m0[_295].x));
    float _305 = _304 * TEXCOORD.z;
    float _306 = _304 * TEXCOORD.w;
    vec4 _319 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _305) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _306) + cbTextureTilingScale._m0[13u].w));
    vec4 _342 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _368 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _373 = _368.x * cbMtdParam._m0[11u].x;
    float _374 = _368.y * cbMtdParam._m0[11u].y;
    float _375 = _368.z * cbMtdParam._m0[11u].z;
    vec4 _394 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _305) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _306) + cbTextureTilingScale._m0[5u].w));
    vec4 _413 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _443 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[27u].x * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].y * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _445 = _443.x;
    float _457 = dot(vec4(_445, _443.yzw), vec4(cbMtdParam._m0[28u].w, cbMtdParam._m0[29u].xy, 0.0));
    float _474 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _413.x) * 2.0) - ((((_445 - _457) * cbMtdParam._m0[23u].w) + _457) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4204 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _475 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
    float _482 = (_475 * ((_394.x * cbMtdParam._m0[12u].x) - _373)) + _373;
    float _483 = (_475 * ((_394.y * cbMtdParam._m0[12u].y) - _374)) + _374;
    float _484 = (_475 * ((_394.z * cbMtdParam._m0[12u].z) - _375)) + _375;
    vec4 _501 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _305) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _306) + cbTextureTilingScale._m0[3u].w));
    vec4 _523 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].z * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].w * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _525 = _523.x;
    float _535 = dot(vec4(_525, _523.yzw), vec4(cbMtdParam._m0[30u].yzw, 0.0));
    float _549 = ((cbMtdParam._m0[25u].z * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _413.y) * 2.0) - ((((_525 - _535) * cbMtdParam._m0[23u].w) + _535) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4215 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _550 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
    float _560 = (_342.x * cbMtdParam._m0[9u].x) * ((_550 * ((_501.x * cbMtdParam._m0[13u].x) - _482)) + _482);
    float _561 = (_342.y * cbMtdParam._m0[9u].y) * ((_550 * ((_501.y * cbMtdParam._m0[13u].y) - _483)) + _483);
    float _562 = (_342.z * cbMtdParam._m0[9u].z) * ((_550 * ((_501.z * cbMtdParam._m0[13u].z) - _484)) + _484);
    float _566 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _319.x) * _560;
    float _569 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _319.y) * _561;
    float _572 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _319.z) * _562;
    float _580 = (((_560 - _566) * (isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0)))) + _566) * 4.55000019073486328125;
    float _582 = (((_561 - _569) * (isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0)))) + _569) * 4.55000019073486328125;
    float _584 = (((_562 - _572) * (isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0)))) + _572) * 4.55000019073486328125;
    vec4 _601 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _305) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _306) + cbTextureTilingScale._m0[20u].w));
    vec4 _624 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _305) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _306) + cbTextureTilingScale._m0[4u].w));
    vec4 _641 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _643 = _641.x;
    float _644 = _641.y;
    float _645 = _641.z;
    float _652 = ((_624.x - _643) * _475) + _643;
    float _653 = ((_624.y - _644) * _475) + _644;
    float _654 = ((_624.z - _645) * _475) + _645;
    vec4 _666 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _305) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _306) + cbTextureTilingScale._m0[2u].w));
    float _679 = ((_666.z - _654) * _550) + _654;
    float _682 = ((((_666.x - _652) * _550) + _652) * 2.0) + (-1.0);
    float _683 = ((((_666.y - _653) * _550) + _653) * 2.0) + (-1.0);
    float _684 = dot(vec2(_682, _683), vec2(_682, _683));
    float _4226 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _689 = sqrt(1.0 - (isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0))));
    vec4 _703 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _728 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _305) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _306) + cbTextureTilingScale._m0[11u].w));
    float _730 = _728.x;
    float _731 = 1.0 - _730;
    float _747 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_730 - _731) * cbMtdParam._m0[24u].z) + _731) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4237 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _748 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
    float _755 = (_748 * (cbMtdParam._m0[17u].x - _580)) + _580;
    float _756 = (_748 * (cbMtdParam._m0[17u].y - _582)) + _582;
    float _757 = (_748 * (cbMtdParam._m0[17u].z - _584)) + _584;
    vec4 _783 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _785 = _783.x;
    float _802 = ((texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _305) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _306) + cbTextureTilingScale._m0[9u].w)).x - _785) * _475) + _785;
    float _819 = ((texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _305) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _306) + cbTextureTilingScale._m0[21u].w)).x - _802) * _550) + _802;
    float _823 = ((texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _819) * cbMtdParam._m0[19u].z) + _819;
    float _825 = _823 - (_823 * _748);
    float _830 = (((_601.z - _679) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _679;
    float _834 = ((_703.z - _830) * cbMtdParam._m0[19u].w) + _830;
    vec4 _847 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _305) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _306) + cbTextureTilingScale._m0[15u].w));
    float _854 = (_847.x * 2.0) + (-1.0);
    float _855 = (_847.y * 2.0) + (-1.0);
    float _856 = dot(vec2(_854, _855), vec2(_854, _855));
    float _4248 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
    float _864 = (_748 * (_847.z - _834)) + _834;
    float _873 = (_682 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_601.x * 2.0) + (-1.0)))) + (((_703.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w);
    float _874 = (_683 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_601.y * 2.0) + (-1.0)))) + (((_703.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w);
    float _886 = (((_854 - _873) + (cbMtdParam._m0[21u].x * _873)) * _748) + _873;
    float _887 = (((_855 - _874) + (cbMtdParam._m0[21u].x * _874)) * _748) + _874;
    float _888 = (_748 * (sqrt(1.0 - (isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0)))) - _689)) + _689;
    float _892 = cbMtdParam._m0[22u].x + _703.w;
    float _894 = gl_FragCoord.x * 0.125;
    float _896 = gl_FragCoord.y * 0.125;
    float _906 = fma(_888, _252 * NORMAL.x, fma(_887, _259 * TANGENT.x, (_245 * _237) * _886));
    float _909 = fma(_888, _252 * NORMAL.y, fma(_887, _259 * TANGENT.y, (_245 * _238) * _886));
    float _912 = fma(_888, _252 * NORMAL.z, fma(_887, _259 * TANGENT.z, (_245 * _239) * _886));
    float _916 = inversesqrt(dot(vec3(_906, _909, _912), vec3(_906, _909, _912)));
    float _917 = _916 * _906;
    float _918 = _916 * _909;
    float _919 = _916 * _912;
    float _4259 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
    float _920 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
    float _4270 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
    float _4281 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _4292 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _4303 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _4314 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
    float _925 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
    if (!(cbMtdParam._m0[25u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_894, _896)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _943 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _984 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _994 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _984);
    float _995 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _984);
    float _996 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _984);
    float _1000 = inversesqrt(dot(vec3(_994, _995, _996), vec3(_994, _995, _996)));
    float _1001 = _994 * _1000;
    float _1002 = _995 * _1000;
    float _1003 = _996 * _1000;
    vec4 _1005 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_894, _896));
    float _1007 = _1005.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1179 = sqrt(((_994 * _994) + (_995 * _995)) + (_996 * _996));
        float _1185 = (cbMatDynParam._m0[5u].x * _1179) + cbMatDynParam._m0[5u].y;
        float _4325 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1186 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
        float _1190 = (cbMatDynParam._m0[5u].z * _1179) + cbMatDynParam._m0[5u].w;
        float _4336 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0))) - _1186)) + _1186) < ((_1007 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1018 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1019 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1037 = fma(_919, cbSceneParam._m0[5u].z, fma(_918, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _917));
    float _1040 = fma(_919, cbSceneParam._m0[6u].z, fma(_918, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _917));
    float _1043 = fma(_919, cbSceneParam._m0[7u].z, fma(_918, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _917));
    uint _1056 = _286 + 9u;
    uint _1057 = _1056 + uint(cbMatDynParam._m0[0u].w);
    float _1063 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0)))) * cbInstanceData._m0[_1057].x;
    float _1064 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0)))) * cbInstanceData._m0[_1057].y;
    float _1065 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0)))) * cbInstanceData._m0[_1057].z;
    float _4347 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
    float _1066 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
    float _4358 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
    float _1067 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
    float _4369 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
    float _1068 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
    float _1069 = 1.0 - _925;
    float _1070 = _1066 * _1069;
    float _1071 = _1067 * _1069;
    float _1072 = _1068 * _1069;
    float _1077 = (_1066 + (-0.039999999105930328369140625)) * _925;
    float _1078 = (_1067 + (-0.039999999105930328369140625)) * _925;
    float _1079 = (_1068 + (-0.039999999105930328369140625)) * _925;
    float _1080 = _1077 + 0.039999999105930328369140625;
    float _1082 = _1078 + 0.039999999105930328369140625;
    float _1083 = _1079 + 0.039999999105930328369140625;
    vec4 _1092 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1018, cbSceneParam._m0[86u].y * _1019));
    float _1096 = ((isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0))) * TEXCOORD_5.w) * _1092.x;
    float _1097 = dot(vec3(_917, _918, _919), vec3(_1001, _1002, _1003));
    float _1100 = _1097 * 2.0;
    float _1104 = (_1100 * _917) - _1001;
    float _1105 = (_1100 * _918) - _1002;
    float _1106 = (_1100 * _919) - _1003;
    float _1110 = abs(dot(vec3(_1001, _1002, _1003), vec3(_917, _918, _919)));
    float _4380 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
    float _1112 = sqrt(_920);
    float _1125 = exp2((_1112 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1112 * 3.0));
    float _1131 = (1.0 - _1125) * ((_1112 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1132 = _1125 * _1112;
    float _1160 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1164 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1168 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1496;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1221 = fma(_1168, cbModelParam._m0[26u].z, fma(_1164, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1160));
        float _1225 = fma(_1168, cbModelParam._m0[27u].z, fma(_1164, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1160));
        float _1229 = fma(_1168, cbModelParam._m0[28u].z, fma(_1164, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1160));
        float _1254 = _1160 + _917;
        float _1255 = _1164 + _918;
        float _1256 = _1168 + _919;
        float _1266 = fma(_1256, cbModelParam._m0[26u].z, fma(_1255, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1254)) - _1221;
        float _1267 = fma(_1256, cbModelParam._m0[27u].z, fma(_1255, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1254)) - _1225;
        float _1268 = fma(_1256, cbModelParam._m0[28u].z, fma(_1255, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1254)) - _1229;
        float _1272 = inversesqrt(dot(vec3(_1266, _1267, _1268), vec3(_1266, _1267, _1268)));
        float _1285 = ((_1272 * _1266) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1221 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1286 = ((_1272 * _1267) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1225 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1287 = ((_1272 * _1268) / cbModelParam._m0[34u].z) + ((((((_1229 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1290 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1285, _1286, _1287), 0.0);
        vec4 _1297 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1285, _1286, _1287), 0.0);
        vec4 _1304 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1285, _1286, _1287), 0.0);
        vec4 _1311 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1285, _1286, _1287), 0.0);
        float _1324 = exp2((_1290.w + (-0.5)) * 20.0) * 2.0;
        float _1325 = _1324 * (_1290.x + (-0.5));
        float _1326 = _1324 * (_1290.y + (-0.5));
        float _1327 = _1324 * (_1290.z + (-0.5));
        float _1334 = exp2((_1297.w + (-0.5)) * 20.0) * 2.0;
        float _1335 = _1334 * (_1297.x + (-0.5));
        float _1336 = _1334 * (_1297.y + (-0.5));
        float _1337 = _1334 * (_1297.z + (-0.5));
        float _1344 = exp2((_1304.w + (-0.5)) * 20.0) * 2.0;
        float _1345 = _1344 * (_1304.x + (-0.5));
        float _1346 = _1344 * (_1304.y + (-0.5));
        float _1347 = _1344 * (_1304.z + (-0.5));
        float _1354 = exp2((_1311.w + (-0.5)) * 20.0) * 2.0;
        float _1355 = _1354 * (_1311.x + (-0.5));
        float _1356 = _1354 * (_1311.y + (-0.5));
        float _1357 = _1354 * (_1311.z + (-0.5));
        float _1358 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1359 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1360 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1361 = _1325 * 0.5;
        float _1362 = _1335 * 0.5;
        float _1363 = _1345 * 0.5;
        float _1364 = dot(vec3(_1361, _1362, _1363), vec3(_1361, _1362, _1363));
        float _1369 = (_1364 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1364);
        float _1378 = (dot(vec3(_917, _918, _919), vec3(_1369 * _1361, _1369 * _1362, _1369 * _1363)) + 1.0) * 0.5;
        float _4406 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1388 = sqrt(((_1362 * _1362) + (_1361 * _1361)) + (_1363 * _1363)) / (_1358 + 9.9999997473787516355514526367188e-06);
        float _4417 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1389 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
        float _1390 = _1389 * 2.0;
        float _1394 = (1.0 - _1389) / (_1389 + 1.0);
        float _4428 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1395 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
        float _1404 = ((((1.0 - _1395) * (_1390 + 2.0)) * exp2(log2(isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0))) * (_1390 + 1.0))) + _1395) * _1358;
        float _1405 = _1326 * 0.5;
        float _1406 = _1336 * 0.5;
        float _1407 = _1346 * 0.5;
        float _1408 = dot(vec3(_1405, _1406, _1407), vec3(_1405, _1406, _1407));
        float _1413 = (_1408 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1408);
        float _1421 = (dot(vec3(_917, _918, _919), vec3(_1413 * _1405, _1413 * _1406, _1413 * _1407)) + 1.0) * 0.5;
        float _4439 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1430 = sqrt(((_1406 * _1406) + (_1405 * _1405)) + (_1407 * _1407)) / (_1359 + 9.9999997473787516355514526367188e-06);
        float _4450 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1431 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
        float _1432 = _1431 * 2.0;
        float _1436 = (1.0 - _1431) / (_1431 + 1.0);
        float _4461 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1437 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
        float _1446 = ((((1.0 - _1437) * (_1432 + 2.0)) * exp2(log2(isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0))) * (_1432 + 1.0))) + _1437) * _1359;
        float _1447 = _1327 * 0.5;
        float _1448 = _1337 * 0.5;
        float _1449 = _1347 * 0.5;
        float _1450 = dot(vec3(_1447, _1448, _1449), vec3(_1447, _1448, _1449));
        float _1455 = (_1450 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1450);
        float _1463 = (dot(vec3(_917, _918, _919), vec3(_1455 * _1447, _1455 * _1448, _1455 * _1449)) + 1.0) * 0.5;
        float _4472 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1472 = sqrt(((_1448 * _1448) + (_1447 * _1447)) + (_1449 * _1449)) / (_1360 + 9.9999997473787516355514526367188e-06);
        float _4483 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1473 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
        float _1474 = _1473 * 2.0;
        float _1478 = (1.0 - _1473) / (_1473 + 1.0);
        float _4494 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1479 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
        float _1488 = ((((1.0 - _1479) * (_1474 + 2.0)) * exp2(log2(isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0))) * (_1474 + 1.0))) + _1479) * _1360;
        _1496 = _1327;
        _1498 = _1326;
        _1499 = _1325;
        _1500 = _1337;
        _1501 = _1336;
        _1502 = _1335;
        _1503 = _1347;
        _1504 = _1346;
        _1505 = _1345;
        _1506 = _1360;
        _1507 = _1359;
        _1508 = _1358;
        _1509 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0)));
        _1510 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0)));
        _1511 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0)));
    }
    else
    {
        _1496 = _1497;
        _1498 = _1497;
        _1499 = _1497;
        _1500 = _1497;
        _1501 = _1497;
        _1502 = _1497;
        _1503 = _1497;
        _1504 = _1497;
        _1505 = _1497;
        _1506 = _1497;
        _1507 = _1497;
        _1508 = _1497;
        _1509 = 0.0;
        _1510 = 0.0;
        _1511 = 0.0;
    }
    float _1804;
    float _1805;
    float _1806;
    float _1807;
    float _1808;
    float _1809;
    float _1810;
    float _1811;
    float _1812;
    float _1813;
    float _1814;
    float _1815;
    float _1816;
    float _1817;
    float _1818;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1535 = fma(_1168, cbModelParam._m0[30u].z, fma(_1164, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1160));
        float _1539 = fma(_1168, cbModelParam._m0[31u].z, fma(_1164, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1160));
        float _1543 = fma(_1168, cbModelParam._m0[32u].z, fma(_1164, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1160));
        float _1566 = _1160 + _917;
        float _1567 = _1164 + _918;
        float _1568 = _1168 + _919;
        float _1578 = fma(_1568, cbModelParam._m0[30u].z, fma(_1567, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1566)) - _1535;
        float _1579 = fma(_1568, cbModelParam._m0[31u].z, fma(_1567, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1566)) - _1539;
        float _1580 = fma(_1568, cbModelParam._m0[32u].z, fma(_1567, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1566)) - _1543;
        float _1584 = inversesqrt(dot(vec3(_1578, _1579, _1580), vec3(_1578, _1579, _1580)));
        float _1597 = ((_1584 * _1578) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1535 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1598 = ((_1584 * _1579) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1539 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1599 = ((_1584 * _1580) / cbModelParam._m0[35u].z) + ((((((_1543 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1601 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1597, _1598, _1599), 0.0);
        vec4 _1608 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1597, _1598, _1599), 0.0);
        vec4 _1615 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1597, _1598, _1599), 0.0);
        vec4 _1622 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1597, _1598, _1599), 0.0);
        float _1634 = exp2((_1601.w + (-0.5)) * 20.0) * 2.0;
        float _1635 = _1634 * (_1601.x + (-0.5));
        float _1636 = _1634 * (_1601.y + (-0.5));
        float _1637 = _1634 * (_1601.z + (-0.5));
        float _1644 = exp2((_1608.w + (-0.5)) * 20.0) * 2.0;
        float _1645 = _1644 * (_1608.x + (-0.5));
        float _1646 = _1644 * (_1608.y + (-0.5));
        float _1647 = _1644 * (_1608.z + (-0.5));
        float _1654 = exp2((_1615.w + (-0.5)) * 20.0) * 2.0;
        float _1655 = _1654 * (_1615.x + (-0.5));
        float _1656 = _1654 * (_1615.y + (-0.5));
        float _1657 = _1654 * (_1615.z + (-0.5));
        float _1664 = exp2((_1622.w + (-0.5)) * 20.0) * 2.0;
        float _1665 = _1664 * (_1622.x + (-0.5));
        float _1666 = _1664 * (_1622.y + (-0.5));
        float _1667 = _1664 * (_1622.z + (-0.5));
        float _1668 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
        float _1669 = isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0));
        float _1670 = isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0));
        float _1671 = _1635 * 0.5;
        float _1672 = _1645 * 0.5;
        float _1673 = _1655 * 0.5;
        float _1674 = dot(vec3(_1671, _1672, _1673), vec3(_1671, _1672, _1673));
        float _1679 = (_1674 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1674);
        float _1687 = (dot(vec3(_917, _918, _919), vec3(_1679 * _1671, _1679 * _1672, _1679 * _1673)) + 1.0) * 0.5;
        float _4535 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
        float _1696 = sqrt(((_1672 * _1672) + (_1671 * _1671)) + (_1673 * _1673)) / (_1668 + 9.9999997473787516355514526367188e-06);
        float _4546 = isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0));
        float _1697 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
        float _1698 = _1697 * 2.0;
        float _1702 = (1.0 - _1697) / (_1697 + 1.0);
        float _4557 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
        float _1703 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
        float _1712 = ((((1.0 - _1703) * (_1698 + 2.0)) * exp2(log2(isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0))) * (_1698 + 1.0))) + _1703) * _1668;
        float _1713 = _1636 * 0.5;
        float _1714 = _1646 * 0.5;
        float _1715 = _1656 * 0.5;
        float _1716 = dot(vec3(_1713, _1714, _1715), vec3(_1713, _1714, _1715));
        float _1721 = (_1716 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1716);
        float _1729 = (dot(vec3(_917, _918, _919), vec3(_1721 * _1713, _1721 * _1714, _1721 * _1715)) + 1.0) * 0.5;
        float _4568 = isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0));
        float _1738 = sqrt(((_1714 * _1714) + (_1713 * _1713)) + (_1715 * _1715)) / (_1669 + 9.9999997473787516355514526367188e-06);
        float _4579 = isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0));
        float _1739 = isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0));
        float _1740 = _1739 * 2.0;
        float _1744 = (1.0 - _1739) / (_1739 + 1.0);
        float _4590 = isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0));
        float _1745 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
        float _1754 = ((((1.0 - _1745) * (_1740 + 2.0)) * exp2(log2(isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0))) * (_1740 + 1.0))) + _1745) * _1669;
        float _1755 = _1637 * 0.5;
        float _1756 = _1647 * 0.5;
        float _1757 = _1657 * 0.5;
        float _1758 = dot(vec3(_1755, _1756, _1757), vec3(_1755, _1756, _1757));
        float _1763 = (_1758 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1758);
        float _1771 = (dot(vec3(_917, _918, _919), vec3(_1763 * _1755, _1763 * _1756, _1763 * _1757)) + 1.0) * 0.5;
        float _4601 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
        float _1780 = sqrt(((_1756 * _1756) + (_1755 * _1755)) + (_1757 * _1757)) / (_1670 + 9.9999997473787516355514526367188e-06);
        float _4612 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
        float _1781 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
        float _1782 = _1781 * 2.0;
        float _1786 = (1.0 - _1781) / (_1781 + 1.0);
        float _4623 = isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0));
        float _1787 = isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0));
        float _1796 = ((((1.0 - _1787) * (_1782 + 2.0)) * exp2(log2(isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0))) * (_1782 + 1.0))) + _1787) * _1670;
        _1804 = _1637;
        _1805 = _1636;
        _1806 = _1635;
        _1807 = _1647;
        _1808 = _1646;
        _1809 = _1645;
        _1810 = _1657;
        _1811 = _1656;
        _1812 = _1655;
        _1813 = _1670;
        _1814 = _1669;
        _1815 = _1668;
        _1816 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0)));
        _1817 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0)));
        _1818 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0)));
    }
    else
    {
        _1804 = _1497;
        _1805 = _1497;
        _1806 = _1497;
        _1807 = _1497;
        _1808 = _1497;
        _1809 = _1497;
        _1810 = _1497;
        _1811 = _1497;
        _1812 = _1497;
        _1813 = _1497;
        _1814 = _1497;
        _1815 = _1497;
        _1816 = 0.0;
        _1817 = 0.0;
        _1818 = 0.0;
    }
    float _1828 = (cbModelParam._m0[1u].x * (_1816 - _1509)) + _1509;
    float _1829 = (cbModelParam._m0[1u].x * (_1817 - _1510)) + _1510;
    float _1830 = (cbModelParam._m0[1u].x * (_1818 - _1511)) + _1511;
    float _1851 = fma(_1830, cbSceneParam._m0[89u].z, fma(_1829, cbSceneParam._m0[89u].y, _1828 * cbSceneParam._m0[89u].x));
    float _1854 = fma(_1830, cbSceneParam._m0[90u].z, fma(_1829, cbSceneParam._m0[90u].y, _1828 * cbSceneParam._m0[90u].x));
    float _1857 = fma(_1830, cbSceneParam._m0[91u].z, fma(_1829, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1828));
    float _1872 = _1104 * 0.5;
    float _1873 = _1105 * 0.5;
    float _1874 = _1106 * 0.5;
    float _1875 = dot(vec4(_1872, _1873, _1874, 1.0), vec4(_1806, _1809, _1812, _1815));
    float _1878 = dot(vec4(_1872, _1873, _1874, 1.0), vec4(_1805, _1808, _1811, _1814));
    float _1881 = dot(vec4(_1872, _1873, _1874, 1.0), vec4(_1804, _1807, _1810, _1813));
    float _1915;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1888 = dot(vec4(_1872, _1873, _1874, 1.0), vec4(_1496, _1500, _1503, _1506));
        float _1892 = dot(vec4(_1872, _1873, _1874, 1.0), vec4(_1498, _1501, _1504, _1507));
        float _1896 = dot(vec4(_1872, _1873, _1874, 1.0), vec4(_1499, _1502, _1505, _1508));
        float _1903 = dot(vec4(cbModelParam._m0[39u]), vec4(_1872, _1873, _1874, 1.0));
        _1915 = dot(vec3(isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0)), isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0)), isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1903) ? 0.0 : (isnan(0.0) ? _1903 : max(0.0, _1903))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1915 = 1.0;
    }
    float _1926;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1917 = dot(vec4(cbModelParam._m0[40u]), vec4(_1872, _1873, _1874, 1.0));
        _1926 = dot(vec3(isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0)), isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0)), isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1917) ? 0.0 : (isnan(0.0) ? _1917 : max(0.0, _1917))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1926 = 1.0;
    }
    float _1930 = (_1926 * cbModelParam._m0[1u].x) + (_1915 * (1.0 - cbModelParam._m0[1u].x));
    float _1940 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _920);
    float _1941 = isnan(_1940) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1940 : min(cbModelParam._m0[25u].z, _1940));
    float _2022;
    float _2024;
    float _2026;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1989 = fma(_1168, cbModelParam._m0[13u].z, fma(_1164, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1160)) + cbModelParam._m0[13u].w;
        float _1993 = fma(_1168, cbModelParam._m0[14u].z, fma(_1164, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1160)) + cbModelParam._m0[14u].w;
        float _1997 = fma(_1168, cbModelParam._m0[15u].z, fma(_1164, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1160)) + cbModelParam._m0[15u].w;
        float _2000 = fma(_1106, cbModelParam._m0[13u].z, fma(_1105, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1104));
        float _2003 = fma(_1106, cbModelParam._m0[14u].z, fma(_1105, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1104));
        float _2006 = fma(_1106, cbModelParam._m0[15u].z, fma(_1105, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1104));
        float _2034;
        if (_2000 > 0.0)
        {
            _2034 = abs((1.0 - _1989) / _2000);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_2000 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1989 + 1.0) / _2000);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _2034 = frontier_phi_19_17_ladder;
        }
        float _2206;
        if (_2003 > 0.0)
        {
            _2206 = abs((1.0 - _1993) / _2003);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2003 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1993 + 1.0) / _2003);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2206 = frontier_phi_28_24_ladder;
        }
        float _2501;
        if (_2006 > 0.0)
        {
            _2501 = abs((1.0 - _1997) / _2006);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2006 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1997 + 1.0) / _2006);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2501 = frontier_phi_40_35_ladder;
        }
        float _2503 = isnan(_2206) ? _2034 : (isnan(_2034) ? _2206 : min(_2034, _2206));
        float _2504 = isnan(_2501) ? _2503 : (isnan(_2503) ? _2501 : min(_2503, _2501));
        float _2508 = (_2504 * _2000) + _1989;
        float _2509 = (_2504 * _2003) + _1993;
        float _2510 = (_2504 * _2006) + _1997;
        float _2511 = _2504 * 9.9999997473787516355514526367188e-05;
        float _2513 = (-1.0) - _2511;
        float _2515 = _2511 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2510 > _2515) || ((_2510 < _2513) || ((_2509 > _2515) || ((_2509 < _2513) || ((_2508 < _2513) || (_2508 > _2515))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2655 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2510, cbModelParam._m0[9u].z, fma(_2509, cbModelParam._m0[9u].y, _2508 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2510, cbModelParam._m0[10u].z, fma(_2509, cbModelParam._m0[10u].y, _2508 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2510, cbModelParam._m0[11u].z, fma(_2509, cbModelParam._m0[11u].y, _2508 * cbModelParam._m0[11u].x))), _1941);
            frontier_phi_18_40_ladder = _2655.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2655.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2655.x * cbModelParam._m0[1u].y;
        }
        _2022 = frontier_phi_18_40_ladder_2;
        _2024 = frontier_phi_18_40_ladder_1;
        _2026 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _2010 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1104, _1105, _1106), _1941);
        _2022 = _2010.x * cbModelParam._m0[1u].y;
        _2024 = _2010.y * cbModelParam._m0[1u].y;
        _2026 = _2010.z * cbModelParam._m0[1u].y;
    }
    float _2030 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _920);
    float _2031 = isnan(_2030) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2030 : min(cbModelParam._m0[25u].w, _2030));
    float _2121;
    float _2123;
    float _2125;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2085 = fma(_1168, cbModelParam._m0[21u].z, fma(_1164, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1160)) + cbModelParam._m0[21u].w;
        float _2089 = fma(_1168, cbModelParam._m0[22u].z, fma(_1164, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1160)) + cbModelParam._m0[22u].w;
        float _2093 = fma(_1168, cbModelParam._m0[23u].z, fma(_1164, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1160)) + cbModelParam._m0[23u].w;
        float _2096 = fma(_1106, cbModelParam._m0[21u].z, fma(_1105, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1104));
        float _2099 = fma(_1106, cbModelParam._m0[22u].z, fma(_1105, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1104));
        float _2102 = fma(_1106, cbModelParam._m0[23u].z, fma(_1105, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1104));
        float _2211;
        if (_2096 > 0.0)
        {
            _2211 = abs((1.0 - _2085) / _2096);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_2096 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_2085 + 1.0) / _2096);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2211 = frontier_phi_30_26_ladder;
        }
        float _2528;
        if (_2099 > 0.0)
        {
            _2528 = abs((1.0 - _2089) / _2099);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_2099 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_2089 + 1.0) / _2099);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2528 = frontier_phi_42_37_ladder;
        }
        float _2866;
        if (_2102 > 0.0)
        {
            _2866 = abs((1.0 - _2093) / _2102);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_2102 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_2093 + 1.0) / _2102);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2866 = frontier_phi_52_49_ladder;
        }
        float _2868 = isnan(_2528) ? _2211 : (isnan(_2211) ? _2528 : min(_2211, _2528));
        float _2869 = isnan(_2866) ? _2868 : (isnan(_2868) ? _2866 : min(_2868, _2866));
        float _2873 = (_2869 * _2096) + _2085;
        float _2874 = (_2869 * _2099) + _2089;
        float _2875 = (_2869 * _2102) + _2093;
        float _2876 = _2869 * 9.9999997473787516355514526367188e-05;
        float _2877 = (-1.0) - _2876;
        float _2879 = _2876 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2875 > _2879) || ((_2875 < _2877) || ((_2874 > _2879) || ((_2874 < _2877) || ((_2873 < _2877) || (_2873 > _2879))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2997 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2875, cbModelParam._m0[17u].z, fma(_2874, cbModelParam._m0[17u].y, _2873 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2875, cbModelParam._m0[18u].z, fma(_2874, cbModelParam._m0[18u].y, _2873 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2875, cbModelParam._m0[19u].z, fma(_2874, cbModelParam._m0[19u].y, _2873 * cbModelParam._m0[19u].x))), _2031);
            frontier_phi_27_52_ladder = _2997.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2997.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2997.x * cbModelParam._m0[1u].z;
        }
        _2121 = frontier_phi_27_52_ladder_2;
        _2123 = frontier_phi_27_52_ladder_1;
        _2125 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _2105 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1104, _1105, _1106), _2031);
        _2121 = _2105.x * cbModelParam._m0[1u].z;
        _2123 = _2105.y * cbModelParam._m0[1u].z;
        _2125 = _2105.z * cbModelParam._m0[1u].z;
    }
    float _2138 = (((_1131 * _1080) + _1132) * _1096) * ((cbModelParam._m0[1u].w * (_2121 - _2022)) + _2022);
    float _2140 = (((_1131 * _1082) + _1132) * _1096) * ((cbModelParam._m0[1u].w * (_2123 - _2024)) + _2024);
    float _2142 = (((_1131 * _1083) + _1132) * _1096) * ((cbModelParam._m0[1u].w * (_2125 - _2026)) + _2026);
    float _2145 = fma(_2142, cbSceneParam._m0[89u].z, fma(_2140, cbSceneParam._m0[89u].y, _2138 * cbSceneParam._m0[89u].x));
    float _2148 = fma(_2142, cbSceneParam._m0[90u].z, fma(_2140, cbSceneParam._m0[90u].y, _2138 * cbSceneParam._m0[90u].x));
    float _2151 = fma(_2142, cbSceneParam._m0[91u].z, fma(_2140, cbSceneParam._m0[91u].y, _2138 * cbSceneParam._m0[91u].x));
    float _2185 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2189 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2193 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2197 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2198 = _2185 / _2197;
    float _2199 = _2189 / _2197;
    float _2200 = _2193 / _2197;
    float _2347;
    float _2348;
    float _2349;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2227 = ((uint(_2200 > cbSceneParam._m0[59u].y) + uint(_2200 > cbSceneParam._m0[59u].x)) + uint(_2200 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2228 = _2227 + 43u;
        uint _2236 = _2227 + 44u;
        uint _2244 = _2227 + 45u;
        uint _2252 = _2227 + 46u;
        float _2263 = fma(_2197, cbSceneParam._m0[_2228].w, fma(_2193, cbSceneParam._m0[_2228].z, fma(_2189, cbSceneParam._m0[_2228].y, _2185 * cbSceneParam._m0[_2228].x)));
        float _2267 = fma(_2197, cbSceneParam._m0[_2236].w, fma(_2193, cbSceneParam._m0[_2236].z, fma(_2189, cbSceneParam._m0[_2236].y, _2185 * cbSceneParam._m0[_2236].x)));
        float _2275 = fma(_2197, cbSceneParam._m0[_2252].w, fma(_2193, cbSceneParam._m0[_2252].z, fma(_2189, cbSceneParam._m0[_2252].y, _2185 * cbSceneParam._m0[_2252].x)));
        float _2280 = cbSceneParam._m0[33u].z * _2275;
        float _2282 = cbSceneParam._m0[33u].w * _2275;
        float _2285 = fma(_2197, cbSceneParam._m0[_2244].w, fma(_2193, cbSceneParam._m0[_2244].z, fma(_2189, cbSceneParam._m0[_2244].y, _2185 * cbSceneParam._m0[_2244].x))) / _2275;
        float _2333 = (cbSceneParam._m0[33u].x - sqrt(((_2199 * _2199) + (_2198 * _2198)) + (_2200 * _2200))) * cbSceneParam._m0[33u].y;
        float _4749 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
        float _2340 = (isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2280 + _2263) / _2275, (_2282 + _2267) / _2275), _2285), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2282 + _2263) / _2275, (_2267 - _2280) / _2275), _2285), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2263 - _2280) / _2275, (_2267 - _2282) / _2275), _2285), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2263 - _2282) / _2275, (_2280 + _2267) / _2275), _2285), 0.0)).x), vec4(0.25)));
        _2347 = 1.0 - (_2340 * cbSceneParam._m0[34u].x);
        _2348 = 1.0 - (_2340 * cbSceneParam._m0[34u].y);
        _2349 = 1.0 - (_2340 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2347 = 1.0;
        _2348 = 1.0;
        _2349 = 1.0;
    }
    float _2413;
    float _2415;
    float _2417;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2401 = fma(_2197, cbSceneParam._m0[63u].w, fma(_2193, cbSceneParam._m0[63u].z, fma(_2189, cbSceneParam._m0[63u].y, _2185 * cbSceneParam._m0[63u].x)));
        float _2402 = fma(_2197, cbSceneParam._m0[60u].w, fma(_2193, cbSceneParam._m0[60u].z, fma(_2189, cbSceneParam._m0[60u].y, _2185 * cbSceneParam._m0[60u].x))) / _2401;
        float _2403 = fma(_2197, cbSceneParam._m0[61u].w, fma(_2193, cbSceneParam._m0[61u].z, fma(_2189, cbSceneParam._m0[61u].y, _2185 * cbSceneParam._m0[61u].x))) / _2401;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2402 >= cbSceneParam._m0[64u].x) && (_2403 >= cbSceneParam._m0[64u].y)) && (_2402 <= cbSceneParam._m0[64u].z)) && (_2403 <= cbSceneParam._m0[64u].w))
        {
            float _2541 = fma(_2197, cbSceneParam._m0[62u].w, fma(_2193, cbSceneParam._m0[62u].z, fma(_2189, cbSceneParam._m0[62u].y, _2185 * cbSceneParam._m0[62u].x))) / _2401;
            float _2545 = isnan(cbSceneParam._m0[41u].w) ? _2541 : (isnan(_2541) ? cbSceneParam._m0[41u].w : max(_2541, cbSceneParam._m0[41u].w));
            float _2588 = (cbSceneParam._m0[33u].x - sqrt(((_2199 * _2199) + (_2198 * _2198)) + (_2200 * _2200))) * cbSceneParam._m0[33u].y;
            float _4765 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0));
            float _2595 = (isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2402, cbSceneParam._m0[33u].w + _2403), _2545), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2402, _2403 - cbSceneParam._m0[33u].z), _2545), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2402 - cbSceneParam._m0[33u].z, _2403 - cbSceneParam._m0[33u].w), _2545), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2402 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2403), _2545), 0.0)).x), vec4(0.25)));
            float _2599 = 1.0 - (_2595 * cbSceneParam._m0[34u].x);
            float _2600 = 1.0 - (_2595 * cbSceneParam._m0[34u].y);
            float _2601 = 1.0 - (_2595 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2601) ? _2349 : (isnan(_2349) ? _2601 : min(_2349, _2601));
            frontier_phi_39_38_ladder_1 = isnan(_2600) ? _2348 : (isnan(_2348) ? _2600 : min(_2348, _2600));
            frontier_phi_39_38_ladder_2 = isnan(_2599) ? _2347 : (isnan(_2347) ? _2599 : min(_2347, _2599));
        }
        else
        {
            frontier_phi_39_38_ladder = _2349;
            frontier_phi_39_38_ladder_1 = _2348;
            frontier_phi_39_38_ladder_2 = _2347;
        }
        _2413 = frontier_phi_39_38_ladder_2;
        _2415 = frontier_phi_39_38_ladder_1;
        _2417 = frontier_phi_39_38_ladder;
    }
    else
    {
        _2413 = _2347;
        _2415 = _2348;
        _2417 = _2349;
    }
    uvec4 _2422 = floatBitsToUint(cbInstanceData._m0[_286 + 5u]);
    uint _2424 = _2422.x * 14u;
    uint _2425 = _2424 + 13u;
    float _2432 = _1096 + (-1.0);
    float _2437 = (cbLight._m0[_2425].x * _2432) + 1.0;
    float _2438 = (cbLight._m0[_2425].y * _2432) + 1.0;
    float _2439 = (cbLight._m0[_2425].z * _2432) + 1.0;
    float _2440 = (cbLight._m0[_2425].w * _2432) + 1.0;
    uint _2441 = _2424 + 5u;
    float _2447 = isnan(1.0) ? _2438 : (isnan(_2438) ? 1.0 : min(_2438, 1.0));
    uint _2451 = _2424 + 4u;
    float _2460 = isnan(1.0) ? _2437 : (isnan(_2437) ? 1.0 : min(_2437, 1.0));
    uint _2464 = _2424 | 1u;
    float _2475 = dot(vec3(cbLight._m0[_2424].xyz), vec3(_917, _918, _919));
    float _2478 = dot(vec3(cbLight._m0[_2464].xyz), vec3(_917, _918, _919));
    float _4801 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
    float _4812 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
    float _2483 = (isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0))) * 0.3183098733425140380859375;
    float _2485 = (isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0))) * 0.3183098733425140380859375;
    float _2492 = ((cbLight._m0[_2441].x * _2447) * _2485) + (((cbLight._m0[_2451].x * _2413) * _2460) * _2483);
    float _2493 = ((_2447 * cbLight._m0[_2441].y) * _2485) + (((cbLight._m0[_2451].y * _2415) * _2460) * _2483);
    float _2494 = ((_2447 * cbLight._m0[_2441].z) * _2485) + (((cbLight._m0[_2451].z * _2417) * _2460) * _2483);
    uvec4 _2498 = floatBitsToUint(cbLight._m0[_2424 + 12u]);
    bool _2500 = _2498.x == 0u;
    float _2602;
    float _2604;
    float _2606;
    if (_2500)
    {
        _2602 = _2492;
        _2604 = _2493;
        _2606 = _2494;
    }
    else
    {
        uint _2610 = _2424 + 6u;
        float _2626 = (dot(vec3(cbLight._m0[_2424 + 2u].xyz), vec3(_917, _918, _919)) * 0.5) + 0.5;
        float _2627 = _2626 * _2626;
        float _4823 = isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0));
        float _2628 = isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0));
        float _2629 = isnan(1.0) ? _2439 : (isnan(_2439) ? 1.0 : min(_2439, 1.0));
        _2602 = (((cbLight._m0[_2610].x * 0.3183098733425140380859375) * _2628) * _2629) + _2492;
        _2604 = (((cbLight._m0[_2610].y * 0.3183098733425140380859375) * _2628) * _2629) + _2493;
        _2606 = (((cbLight._m0[_2610].z * 0.3183098733425140380859375) * _2628) * _2629) + _2494;
    }
    bool _2609 = _2498.y == 0u;
    float _2664;
    float _2666;
    float _2668;
    if (_2609)
    {
        _2664 = _2602;
        _2666 = _2604;
        _2668 = _2606;
    }
    else
    {
        uint _2837 = _2424 + 7u;
        float _2853 = (dot(vec3(cbLight._m0[_2424 + 3u].xyz), vec3(_917, _918, _919)) * 0.5) + 0.5;
        float _2854 = _2853 * _2853;
        float _4839 = isnan(0.0) ? _2854 : (isnan(_2854) ? 0.0 : max(_2854, 0.0));
        float _2855 = isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0));
        float _2856 = isnan(1.0) ? _2440 : (isnan(_2440) ? 1.0 : min(_2440, 1.0));
        _2664 = (((cbLight._m0[_2837].x * 0.3183098733425140380859375) * _2855) * _2856) + _2602;
        _2666 = (((cbLight._m0[_2837].y * 0.3183098733425140380859375) * _2855) * _2856) + _2604;
        _2668 = (((cbLight._m0[_2837].z * 0.3183098733425140380859375) * _2855) * _2856) + _2606;
    }
    uint _2671 = _2424 + 8u;
    float _2684 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2424].w)) * _920) * 0.949999988079071044921875);
    float _2685 = _2684 * _2684;
    float _2686 = cbLight._m0[_2424].x + _1001;
    float _2687 = cbLight._m0[_2424].y + _1002;
    float _2688 = cbLight._m0[_2424].z + _1003;
    float _2692 = inversesqrt(dot(vec3(_2686, _2687, _2688), vec3(_2686, _2687, _2688)));
    float _2693 = _2692 * _2686;
    float _2694 = _2692 * _2687;
    float _2695 = _2692 * _2688;
    float _2696 = dot(vec3(_917, _918, _919), vec3(cbLight._m0[_2424].xyz));
    float _4855 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0));
    float _2699 = isnan(1.0) ? _4855 : (isnan(_4855) ? 1.0 : min(_4855, 1.0));
    float _4866 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
    float _2700 = isnan(1.0) ? _4866 : (isnan(_4866) ? 1.0 : min(_4866, 1.0));
    float _2701 = dot(vec3(_917, _918, _919), vec3(_2693, _2694, _2695));
    float _4877 = isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0));
    float _2704 = isnan(1.0) ? _4877 : (isnan(_4877) ? 1.0 : min(_4877, 1.0));
    float _2705 = dot(vec3(cbLight._m0[_2424].xyz), vec3(_2693, _2694, _2695));
    float _4888 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0));
    float _2709 = _2685 * _2685;
    float _2713 = ((_2704 * _2704) * (_2709 + (-1.0))) + 1.0;
    float _2721 = exp2(log2(1.0 - (isnan(1.0) ? _4888 : (isnan(_4888) ? 1.0 : min(_4888, 1.0)))) * 5.0);
    float _2722 = 0.959999978542327880859375 - _1077;
    float _2724 = 0.959999978542327880859375 - _1078;
    float _2725 = 0.959999978542327880859375 - _1079;
    float _2732 = 1.0 - _2685;
    float _2743 = (0.5 / (((_2700 * ((_2699 * _2732) + _2685)) + 9.9999999392252902907785028219223e-09) + (((_2700 * _2732) + _2685) * _2699))) * _2699;
    float _4899 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0));
    float _2745 = (isnan(1.0) ? _4899 : (isnan(_4899) ? 1.0 : min(_4899, 1.0))) * (_2709 / ((_2713 * _2713) * 3.141590118408203125));
    uint _2759 = _2424 + 9u;
    float _2770 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2464].w)) * _920) * 0.949999988079071044921875);
    float _2771 = _2770 * _2770;
    float _2772 = cbLight._m0[_2464].x + _1001;
    float _2773 = cbLight._m0[_2464].y + _1002;
    float _2774 = cbLight._m0[_2464].z + _1003;
    float _2778 = inversesqrt(dot(vec3(_2772, _2773, _2774), vec3(_2772, _2773, _2774)));
    float _2779 = _2778 * _2772;
    float _2780 = _2778 * _2773;
    float _2781 = _2778 * _2774;
    float _2782 = dot(vec3(_917, _918, _919), vec3(cbLight._m0[_2464].xyz));
    float _4910 = isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0));
    float _2785 = isnan(1.0) ? _4910 : (isnan(_4910) ? 1.0 : min(_4910, 1.0));
    float _2786 = dot(vec3(_917, _918, _919), vec3(_2779, _2780, _2781));
    float _4921 = isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0));
    float _2789 = isnan(1.0) ? _4921 : (isnan(_4921) ? 1.0 : min(_4921, 1.0));
    float _2790 = dot(vec3(cbLight._m0[_2464].xyz), vec3(_2779, _2780, _2781));
    float _4932 = isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0));
    float _2794 = _2771 * _2771;
    float _2798 = ((_2789 * _2789) * (_2794 + (-1.0))) + 1.0;
    float _2805 = exp2(log2(1.0 - (isnan(1.0) ? _4932 : (isnan(_4932) ? 1.0 : min(_4932, 1.0)))) * 5.0);
    float _2812 = 1.0 - _2771;
    float _2822 = (0.5 / (((_2700 * ((_2785 * _2812) + _2771)) + 9.9999999392252902907785028219223e-09) + (((_2700 * _2812) + _2771) * _2785))) * _2785;
    float _4943 = isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0));
    float _2824 = (isnan(1.0) ? _4943 : (isnan(_4943) ? 1.0 : min(_4943, 1.0))) * (_2794 / ((_2798 * _2798) * 3.141590118408203125));
    float _2834 = (((((_2805 * _2722) + _1080) * cbLight._m0[_2759].x) * _2824) * _2447) + ((((cbLight._m0[_2671].x * _2413) * ((_2721 * _2722) + _1080)) * _2745) * _2460);
    float _2835 = (((((_2805 * _2724) + _1082) * cbLight._m0[_2759].y) * _2824) * _2447) + ((((cbLight._m0[_2671].y * _2415) * ((_2721 * _2724) + _1082)) * _2745) * _2460);
    float _2836 = (((((_2805 * _2725) + _1083) * cbLight._m0[_2759].z) * _2824) * _2447) + ((((cbLight._m0[_2671].z * _2417) * ((_2721 * _2725) + _1083)) * _2745) * _2460);
    float _2892;
    float _2894;
    float _2896;
    if (_2500)
    {
        _2892 = _2834;
        _2894 = _2835;
        _2896 = _2836;
    }
    else
    {
        uint _2898 = _2424 + 2u;
        uint _2902 = _2424 + 10u;
        float _2916 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2898].w)) * _920) * 0.949999988079071044921875);
        float _2917 = _2916 * _2916;
        float _2918 = cbLight._m0[_2898].x + _1001;
        float _2919 = cbLight._m0[_2898].y + _1002;
        float _2920 = cbLight._m0[_2898].z + _1003;
        float _2924 = inversesqrt(dot(vec3(_2918, _2919, _2920), vec3(_2918, _2919, _2920)));
        float _2925 = _2924 * _2918;
        float _2926 = _2924 * _2919;
        float _2927 = _2924 * _2920;
        float _2928 = dot(vec3(_917, _918, _919), vec3(cbLight._m0[_2898].xyz));
        float _4954 = isnan(0.0) ? _2928 : (isnan(_2928) ? 0.0 : max(_2928, 0.0));
        float _2931 = isnan(1.0) ? _4954 : (isnan(_4954) ? 1.0 : min(_4954, 1.0));
        float _2932 = dot(vec3(_917, _918, _919), vec3(_2925, _2926, _2927));
        float _4965 = isnan(0.0) ? _2932 : (isnan(_2932) ? 0.0 : max(_2932, 0.0));
        float _2935 = isnan(1.0) ? _4965 : (isnan(_4965) ? 1.0 : min(_4965, 1.0));
        float _2936 = dot(vec3(cbLight._m0[_2898].xyz), vec3(_2925, _2926, _2927));
        float _4976 = isnan(0.0) ? _2936 : (isnan(_2936) ? 0.0 : max(_2936, 0.0));
        float _2940 = _2917 * _2917;
        float _2944 = ((_2935 * _2935) * (_2940 + (-1.0))) + 1.0;
        float _2951 = exp2(log2(1.0 - (isnan(1.0) ? _4976 : (isnan(_4976) ? 1.0 : min(_4976, 1.0)))) * 5.0);
        float _2958 = 1.0 - _2917;
        float _2968 = (0.5 / (((_2700 * ((_2931 * _2958) + _2917)) + 9.9999999392252902907785028219223e-09) + (((_2700 * _2958) + _2917) * _2931))) * _2931;
        float _4987 = isnan(0.0) ? _2968 : (isnan(_2968) ? 0.0 : max(_2968, 0.0));
        float _2970 = (isnan(1.0) ? _4987 : (isnan(_4987) ? 1.0 : min(_4987, 1.0))) * (_2940 / ((_2944 * _2944) * 3.141590118408203125));
        float _2971 = isnan(1.0) ? _2439 : (isnan(_2439) ? 1.0 : min(_2439, 1.0));
        _2892 = (((((_2951 * _2722) + _1080) * cbLight._m0[_2902].x) * _2970) * _2971) + _2834;
        _2894 = (((((_2951 * _2724) + _1082) * cbLight._m0[_2902].y) * _2970) * _2971) + _2835;
        _2896 = (((((_2951 * _2725) + _1083) * cbLight._m0[_2902].z) * _2970) * _2971) + _2836;
    }
    float _3002;
    float _3004;
    float _3006;
    if (_2609)
    {
        _3002 = _2892;
        _3004 = _2894;
        _3006 = _2896;
    }
    else
    {
        uint _3013 = _2424 + 3u;
        uint _3017 = _2424 + 11u;
        float _3031 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3013].w)) * _920) * 0.949999988079071044921875);
        float _3032 = _3031 * _3031;
        float _3033 = cbLight._m0[_3013].x + _1001;
        float _3034 = cbLight._m0[_3013].y + _1002;
        float _3035 = cbLight._m0[_3013].z + _1003;
        float _3039 = inversesqrt(dot(vec3(_3033, _3034, _3035), vec3(_3033, _3034, _3035)));
        float _3040 = _3039 * _3033;
        float _3041 = _3039 * _3034;
        float _3042 = _3039 * _3035;
        float _3043 = dot(vec3(_917, _918, _919), vec3(cbLight._m0[_3013].xyz));
        float _5003 = isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : max(_3043, 0.0));
        float _3046 = isnan(1.0) ? _5003 : (isnan(_5003) ? 1.0 : min(_5003, 1.0));
        float _3047 = dot(vec3(_917, _918, _919), vec3(_3040, _3041, _3042));
        float _5014 = isnan(0.0) ? _3047 : (isnan(_3047) ? 0.0 : max(_3047, 0.0));
        float _3050 = isnan(1.0) ? _5014 : (isnan(_5014) ? 1.0 : min(_5014, 1.0));
        float _3051 = dot(vec3(cbLight._m0[_3013].xyz), vec3(_3040, _3041, _3042));
        float _5025 = isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : max(_3051, 0.0));
        float _3055 = _3032 * _3032;
        float _3059 = ((_3050 * _3050) * (_3055 + (-1.0))) + 1.0;
        float _3066 = exp2(log2(1.0 - (isnan(1.0) ? _5025 : (isnan(_5025) ? 1.0 : min(_5025, 1.0)))) * 5.0);
        float _3073 = 1.0 - _3032;
        float _3083 = (0.5 / (((_2700 * ((_3046 * _3073) + _3032)) + 9.9999999392252902907785028219223e-09) + (((_2700 * _3073) + _3032) * _3046))) * _3046;
        float _5036 = isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : max(_3083, 0.0));
        float _3085 = (isnan(1.0) ? _5036 : (isnan(_5036) ? 1.0 : min(_5036, 1.0))) * (_3055 / ((_3059 * _3059) * 3.141590118408203125));
        float _3086 = isnan(1.0) ? _2440 : (isnan(_2440) ? 1.0 : min(_2440, 1.0));
        _3002 = (((((_3066 * _2722) + _1080) * cbLight._m0[_3017].x) * _3085) * _3086) + _2892;
        _3004 = (((((_3066 * _2724) + _1082) * cbLight._m0[_3017].y) * _3085) * _3086) + _2894;
        _3006 = (((((_3066 * _2725) + _1083) * cbLight._m0[_3017].z) * _3085) * _3086) + _2896;
    }
    float _3152;
    float _3154;
    float _3156;
    float _3158;
    float _3160;
    float _3162;
    if (_2422.y == 0u)
    {
        uvec4 _3107 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3108 = _3107.x;
        uint _3119 = uint((float(_3107.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1019) / _3108))) + floor(float(uint(cbSceneParam._m0[85u].x * _1018) / _3108)));
        float _3129 = (log2(_2200 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3130 = isnan(0.0) ? _3129 : (isnan(_3129) ? 0.0 : max(_3129, 0.0));
        uint _3133 = uint(isnan(14.0) ? _3130 : (isnan(_3130) ? 14.0 : min(_3130, 14.0)));
        uvec4 _3138 = texelFetch(g_lightClusterGridBuffer, int(((_3133 << 2u) + (_3119 << 6u)) >> 2u));
        uint _3139 = _3138.x;
        uint _3140 = _3107.z;
        float _3219;
        float _3221;
        float _3223;
        float _3225;
        float _3227;
        float _3229;
        if (((((1u << ((_3140 >> 4u) & 15u)) + 4294967295u) & _3139) == 0u) || ((_3140 & 240u) == 0u))
        {
            _3219 = 0.0;
            _3221 = 0.0;
            _3223 = 0.0;
            _3225 = 0.0;
            _3227 = 0.0;
            _3229 = 0.0;
        }
        else
        {
            float _3220;
            float _3222;
            float _3224;
            float _3226;
            float _3228;
            float _3230;
            float _3372 = 0.0;
            float _3373 = 0.0;
            float _3374 = 0.0;
            float _3375 = 0.0;
            float _3376 = 0.0;
            float _3377 = 0.0;
            uint _3378 = 0u;
            uint _3387;
            bool _3388;
            for (;;)
            {
                _3387 = texelFetch(g_lightClassification, int((((_3133 << 5u) + (_3119 << 9u)) + (_3378 << 2u)) >> 2u)).x;
                _3388 = _3387 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3388)
                {
                    frontier_phi_73_pred = _3377;
                    frontier_phi_73_pred_1 = _3376;
                    frontier_phi_73_pred_2 = _3375;
                    frontier_phi_73_pred_3 = _3374;
                    frontier_phi_73_pred_4 = _3373;
                    frontier_phi_73_pred_5 = _3372;
                }
                else
                {
                    float _3517;
                    float _3518;
                    float _3519;
                    float _3520;
                    float _3521;
                    float _3522;
                    uint _3523;
                    _3517 = _3372;
                    _3518 = _3373;
                    _3519 = _3374;
                    _3520 = _3375;
                    _3521 = _3376;
                    _3522 = _3377;
                    _3523 = _3387;
                    float _3444;
                    float _3445;
                    float _3446;
                    float _3447;
                    float _3448;
                    float _3449;
                    for (;;)
                    {
                        uint _3527 = uint(findLSB(_3523)) + (_3378 << 5u);
                        uint _3524 = (_3523 + 4294967295u) & _3523;
                        uint _3529 = _3527 * 48u;
                        vec4 _3543 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3529)).x, texelFetch(g_PointLightRenderingBuffer, int(_3529 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3529 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3529 + 3u)).x));
                        uint _3549 = (_3527 * 48u) + 4u;
                        vec4 _3562 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3549)).x, texelFetch(g_PointLightRenderingBuffer, int(_3549 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3549 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3549 + 3u)).x));
                        uint _3568 = (_3527 * 48u) + 8u;
                        vec3 _3579 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3568)).x, texelFetch(g_PointLightRenderingBuffer, int(_3568 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3568 + 2u)).x));
                        float _3583 = _3543.x - _2198;
                        float _3584 = _3543.y - _2199;
                        float _3585 = _3543.z - _2200;
                        float _3586 = dot(vec3(_3583, _3584, _3585), vec3(_3583, _3584, _3585));
                        float _3589 = inversesqrt(_3586);
                        float _3590 = _3589 * _3583;
                        float _3591 = _3589 * _3584;
                        float _3592 = _3589 * _3585;
                        float _3593 = dot(vec3(_1037, _1040, _1043), vec3(_3590, _3591, _3592));
                        float _3598 = 1.0 - (_3586 * _3543.w);
                        float _5062 = isnan(0.0) ? _3598 : (isnan(_3598) ? 0.0 : max(_3598, 0.0));
                        float _3599 = isnan(1.0) ? _5062 : (isnan(_5062) ? 1.0 : min(_5062, 1.0));
                        float _3600 = sqrt(_3586) * _3562.w;
                        float _3603 = 1.39999997615814208984375 / (_3600 + 1.39999997615814208984375);
                        float _3604 = _3603 * _3603;
                        float _3607 = ((1.0 - _3604) * _3593) + _3604;
                        float _3610 = _3600 * _3600;
                        float _3614 = ((isnan(0.0) ? _3607 : (isnan(_3607) ? 0.0 : max(_3607, 0.0))) * _3599) / ((_3610 * 0.699999988079071044921875) + 1.0);
                        float _3618 = (-0.0) - _2198;
                        float _3619 = (-0.0) - _2199;
                        float _3620 = (-0.0) - _2200;
                        float _3624 = inversesqrt(dot(vec3(_3618, _3619, _3620), vec3(_3618, _3619, _3620)));
                        float _3625 = _3624 * _3618;
                        float _3626 = _3624 * _3619;
                        float _3627 = _3624 * _3620;
                        float _3634 = exp2(log2(1.0 / ((_3610 * 3.5) + 5.0)) * 0.25);
                        float _3635 = 1.0 - _1112;
                        float _3642 = sqrt(1.0 - ((1.0 - (_3635 * _3635)) * (1.0 - (_3634 * _3634))));
                        float _3643 = _3642 * _3642;
                        float _3644 = _3643 * _3643;
                        float _3645 = _3625 + _3590;
                        float _3646 = _3626 + _3591;
                        float _3647 = _3627 + _3592;
                        float _3651 = inversesqrt(dot(vec3(_3645, _3646, _3647), vec3(_3645, _3646, _3647)));
                        float _3655 = dot(vec3(_1037, _1040, _1043), vec3(_3625, _3626, _3627));
                        float _5078 = isnan(0.0) ? _3655 : (isnan(_3655) ? 0.0 : max(_3655, 0.0));
                        float _3658 = isnan(1.0) ? _5078 : (isnan(_5078) ? 1.0 : min(_5078, 1.0));
                        float _3659 = dot(vec3(_1037, _1040, _1043), vec3(_3651 * _3645, _3651 * _3646, _3651 * _3647));
                        float _5089 = isnan(0.0) ? _3659 : (isnan(_3659) ? 0.0 : max(_3659, 0.0));
                        float _3662 = isnan(1.0) ? _5089 : (isnan(_5089) ? 1.0 : min(_5089, 1.0));
                        float _3666 = ((_3662 * _3662) * (_3644 + (-1.0))) + 1.0;
                        float _3667 = _3603 * _3643;
                        float _3668 = _3667 * _3667;
                        float _3671 = ((1.0 - _3668) * _3593) + _3668;
                        float _5100 = isnan(0.0) ? _3671 : (isnan(_3671) ? 0.0 : max(_3671, 0.0));
                        float _3672 = isnan(1.0) ? _5100 : (isnan(_5100) ? 1.0 : min(_5100, 1.0));
                        float _3673 = 1.0 - _3643;
                        float _3683 = (0.5 / (((_3672 * ((_3658 * _3673) + _3643)) + 9.9999999392252902907785028219223e-09) + (((_3672 * _3673) + _3643) * _3658))) * _3672;
                        float _5111 = isnan(0.0) ? _3683 : (isnan(_3683) ? 0.0 : max(_3683, 0.0));
                        float _3694 = (((_3644 * 3.1415927410125732421875) * (isnan(1.0) ? _5111 : (isnan(_5111) ? 1.0 : min(_5111, 1.0)))) / ((_3666 * _3666) * ((_3610 * 2.1991131305694580078125) + 3.141590118408203125))) * _3599;
                        _3447 = (_3614 * _3562.x) + _3520;
                        _3448 = (_3614 * _3562.y) + _3521;
                        _3449 = (_3614 * _3562.z) + _3522;
                        _3444 = (_3694 * _3579.x) + _3517;
                        _3445 = (_3694 * _3579.y) + _3518;
                        _3446 = (_3694 * _3579.z) + _3519;
                        if (_3524 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3517 = _3444;
                            _3518 = _3445;
                            _3519 = _3446;
                            _3520 = _3447;
                            _3521 = _3448;
                            _3522 = _3449;
                            _3523 = _3524;
                        }
                    }
                    frontier_phi_73_pred = _3449;
                    frontier_phi_73_pred_1 = _3448;
                    frontier_phi_73_pred_2 = _3447;
                    frontier_phi_73_pred_3 = _3446;
                    frontier_phi_73_pred_4 = _3445;
                    frontier_phi_73_pred_5 = _3444;
                }
                _3230 = frontier_phi_73_pred;
                _3228 = frontier_phi_73_pred_1;
                _3226 = frontier_phi_73_pred_2;
                _3224 = frontier_phi_73_pred_3;
                _3222 = frontier_phi_73_pred_4;
                _3220 = frontier_phi_73_pred_5;
                uint _3379 = _3378 + 1u;
                if (_3379 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3372 = _3220;
                    _3373 = _3222;
                    _3374 = _3224;
                    _3375 = _3226;
                    _3376 = _3228;
                    _3377 = _3230;
                    _3378 = _3379;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3219 = _3220;
            _3221 = _3222;
            _3223 = _3224;
            _3225 = _3226;
            _3227 = _3228;
            _3229 = _3230;
        }
        uvec4 _3233 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3234 = _3233.z;
        uint _3236 = (_3234 >> 8u) & 15u;
        float _3340;
        float _3342;
        float _3344;
        float _3346;
        float _3348;
        float _3350;
        if (((4294967295u << _3236) & _3139) == 0u)
        {
            _3340 = _3219;
            _3342 = _3221;
            _3344 = _3223;
            _3346 = _3225;
            _3348 = _3227;
            _3350 = _3229;
        }
        else
        {
            float _3365 = inversesqrt(dot(vec3(_2198, _2199, _2200), vec3(_2198, _2199, _2200)));
            float _3366 = _3365 * _2198;
            float _3367 = _3365 * _2199;
            float _3368 = _3365 * _2200;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_3236 < ((_3234 >> 12u) & 15u))
            {
                float _3341;
                float _3343;
                float _3345;
                float _3347;
                float _3349;
                float _3351;
                float _3500 = _3219;
                float _3501 = _3221;
                float _3502 = _3223;
                float _3503 = _3225;
                float _3504 = _3227;
                float _3505 = _3229;
                uint _3506 = _3236;
                uint _3515;
                bool _3516;
                for (;;)
                {
                    _3515 = texelFetch(g_lightClassification, int((((_3133 << 5u) + (_3119 << 9u)) + (_3506 << 2u)) >> 2u)).x;
                    _3516 = _3515 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3516)
                    {
                        frontier_phi_84_pred = _3505;
                        frontier_phi_84_pred_1 = _3504;
                        frontier_phi_84_pred_2 = _3503;
                        frontier_phi_84_pred_3 = _3502;
                        frontier_phi_84_pred_4 = _3501;
                        frontier_phi_84_pred_5 = _3500;
                    }
                    else
                    {
                        float _3708;
                        float _3709;
                        float _3710;
                        float _3711;
                        float _3712;
                        float _3713;
                        float _4001;
                        float _4002;
                        float _4003;
                        float _4004;
                        float _4005;
                        float _4006;
                        float _3721 = _3500;
                        float _3722 = _3501;
                        float _3723 = _3502;
                        float _3724 = _3503;
                        float _3725 = _3504;
                        float _3726 = _3505;
                        uint _3727 = _3515;
                        uint _3728;
                        vec4 _3753;
                        float _3754;
                        vec4 _3769;
                        vec3 _3781;
                        vec4 _3796;
                        vec4 _3811;
                        float _3857;
                        bool _3858;
                        for (;;)
                        {
                            uint _3738 = ((_3506 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3727));
                            _3728 = (_3727 + 4294967295u) & _3727;
                            uint _3740 = _3738 * 40u;
                            _3753 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3740)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3740 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3740 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3740 + 3u)).x));
                            _3754 = _3753.w;
                            uint _3756 = (_3738 * 40u) + 4u;
                            _3769 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3756)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3756 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3756 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3756 + 3u)).x));
                            uint _3771 = (_3738 * 40u) + 8u;
                            _3781 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3771)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3771 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3771 + 2u)).x));
                            uint _3783 = (_3738 * 40u) + 16u;
                            _3796 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3783)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3783 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3783 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3783 + 3u)).x));
                            uint _3798 = (_3738 * 40u) + 20u;
                            _3811 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3798)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3798 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3798 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3798 + 3u)).x));
                            uint _3813 = (_3738 * 40u) + 24u;
                            vec4 _3826 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3813)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3813 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3813 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3813 + 3u)).x));
                            uint _3832 = (_3738 * 40u) + 28u;
                            vec4 _3845 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3832)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3832 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3832 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3832 + 3u)).x));
                            _3857 = fma(_2200, _3845.z, fma(_2199, _3845.y, _3845.x * _2198)) + _3845.w;
                            _3858 = !((fma(_2200, _3826.z, fma(_2199, _3826.y, _3826.x * _2198)) + _3826.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3858)
                            {
                                float _3885 = _3753.x - _2198;
                                float _3886 = _3753.y - _2199;
                                float _3887 = _3753.z - _2200;
                                float _3888 = dot(vec3(_3885, _3886, _3887), vec3(_3885, _3886, _3887));
                                float _3891 = inversesqrt(_3888);
                                float _3892 = _3891 * _3885;
                                float _3893 = _3891 * _3886;
                                float _3894 = _3891 * _3887;
                                float _3898 = 1.0 - (_3888 / (_3754 * _3754));
                                float _5122 = isnan(0.0) ? _3898 : (isnan(_3898) ? 0.0 : max(_3898, 0.0));
                                float _3899 = isnan(1.0) ? _5122 : (isnan(_5122) ? 1.0 : min(_5122, 1.0));
                                float _3903 = sqrt(_3888) * _3769.w;
                                float _3905 = 1.39999997615814208984375 / (_3903 + 1.39999997615814208984375);
                                float _3906 = _3905 * _3905;
                                float _3909 = ((1.0 - _3906) * dot(vec3(_3892, _3893, _3894), vec3(_1037, _1040, _1043))) + _3906;
                                float _3912 = _3903 * _3903;
                                float _3916 = (fma(_2200, _3796.z, fma(_2199, _3796.y, _3796.x * _2198)) + _3796.w) / _3857;
                                float _3917 = (fma(_2200, _3811.z, fma(_2199, _3811.y, _3811.x * _2198)) + _3811.w) / _3857;
                                float _3921 = 1.0 - dot(vec2(_3916, _3917), vec2(_3916, _3917));
                                float _5138 = isnan(0.0) ? _3921 : (isnan(_3921) ? 0.0 : max(_3921, 0.0));
                                float _3922 = isnan(1.0) ? _5138 : (isnan(_5138) ? 1.0 : min(_5138, 1.0));
                                float _3923 = _3922 * (((isnan(0.0) ? _3909 : (isnan(_3909) ? 0.0 : max(_3909, 0.0))) * _3899) / ((_3912 * 0.699999988079071044921875) + 1.0));
                                float _3935 = exp2(log2(1.0 / ((_3912 * 3.5) + 5.0)) * 0.25);
                                float _3936 = 1.0 - _1112;
                                float _3943 = sqrt(1.0 - ((1.0 - (_3936 * _3936)) * (1.0 - (_3935 * _3935))));
                                float _3944 = _3943 * _3943;
                                float _3945 = _3944 * _3944;
                                float _3946 = _3892 - _3366;
                                float _3947 = _3893 - _3367;
                                float _3948 = _3894 - _3368;
                                float _3952 = inversesqrt(dot(vec3(_3946, _3947, _3948), vec3(_3946, _3947, _3948)));
                                float _3956 = dot(vec3(_1037, _1040, _1043), vec3((-0.0) - _3366, (-0.0) - _3367, (-0.0) - _3368));
                                float _5149 = isnan(0.0) ? _3956 : (isnan(_3956) ? 0.0 : max(_3956, 0.0));
                                float _3959 = isnan(1.0) ? _5149 : (isnan(_5149) ? 1.0 : min(_5149, 1.0));
                                float _3960 = dot(vec3(_1037, _1040, _1043), vec3(_3952 * _3946, _3952 * _3947, _3952 * _3948));
                                float _5160 = isnan(0.0) ? _3960 : (isnan(_3960) ? 0.0 : max(_3960, 0.0));
                                float _3963 = isnan(1.0) ? _5160 : (isnan(_5160) ? 1.0 : min(_5160, 1.0));
                                float _3967 = ((_3963 * _3963) * (_3945 + (-1.0))) + 1.0;
                                float _3968 = _3905 * _3944;
                                float _3969 = _3968 * _3968;
                                float _3975 = ((1.0 - _3969) * dot(vec3(_1037, _1040, _1043), vec3(_3892, _3893, _3894))) + _3969;
                                float _5171 = isnan(0.0) ? _3975 : (isnan(_3975) ? 0.0 : max(_3975, 0.0));
                                float _3976 = isnan(1.0) ? _5171 : (isnan(_5171) ? 1.0 : min(_5171, 1.0));
                                float _3977 = 1.0 - _3944;
                                float _3987 = (0.5 / (((_3976 * ((_3959 * _3977) + _3944)) + 9.9999999392252902907785028219223e-09) + (((_3976 * _3977) + _3944) * _3959))) * _3976;
                                float _5182 = isnan(0.0) ? _3987 : (isnan(_3987) ? 0.0 : max(_3987, 0.0));
                                float _3997 = (_3922 * _3899) * (((_3945 * 3.1415927410125732421875) * (isnan(1.0) ? _5182 : (isnan(_5182) ? 1.0 : min(_5182, 1.0)))) / ((_3967 * _3967) * ((_3912 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3923 * _3769.z;
                                frontier_phi_90_pred_1 = _3923 * _3769.y;
                                frontier_phi_90_pred_2 = _3923 * _3769.x;
                                frontier_phi_90_pred_3 = _3997 * _3781.z;
                                frontier_phi_90_pred_4 = _3997 * _3781.y;
                                frontier_phi_90_pred_5 = _3997 * _3781.x;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _4006 = frontier_phi_90_pred;
                            _4005 = frontier_phi_90_pred_1;
                            _4004 = frontier_phi_90_pred_2;
                            _4003 = frontier_phi_90_pred_3;
                            _4002 = frontier_phi_90_pred_4;
                            _4001 = frontier_phi_90_pred_5;
                            _3711 = _4004 + _3724;
                            _3712 = _4005 + _3725;
                            _3713 = _4006 + _3726;
                            _3708 = _4001 + _3721;
                            _3709 = _4002 + _3722;
                            _3710 = _4003 + _3723;
                            if (_3728 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3721 = _3708;
                                _3722 = _3709;
                                _3723 = _3710;
                                _3724 = _3711;
                                _3725 = _3712;
                                _3726 = _3713;
                                _3727 = _3728;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3713;
                        frontier_phi_84_pred_1 = _3712;
                        frontier_phi_84_pred_2 = _3711;
                        frontier_phi_84_pred_3 = _3710;
                        frontier_phi_84_pred_4 = _3709;
                        frontier_phi_84_pred_5 = _3708;
                    }
                    _3351 = frontier_phi_84_pred;
                    _3349 = frontier_phi_84_pred_1;
                    _3347 = frontier_phi_84_pred_2;
                    _3345 = frontier_phi_84_pred_3;
                    _3343 = frontier_phi_84_pred_4;
                    _3341 = frontier_phi_84_pred_5;
                    uint _3507 = _3506 + 1u;
                    if (_3507 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3500 = _3341;
                        _3501 = _3343;
                        _3502 = _3345;
                        _3503 = _3347;
                        _3504 = _3349;
                        _3505 = _3351;
                        _3506 = _3507;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _3347;
                frontier_phi_65_66_ladder_1 = _3351;
                frontier_phi_65_66_ladder_2 = _3349;
                frontier_phi_65_66_ladder_3 = _3345;
                frontier_phi_65_66_ladder_4 = _3343;
                frontier_phi_65_66_ladder_5 = _3341;
            }
            else
            {
                frontier_phi_65_66_ladder = _3225;
                frontier_phi_65_66_ladder_1 = _3229;
                frontier_phi_65_66_ladder_2 = _3227;
                frontier_phi_65_66_ladder_3 = _3223;
                frontier_phi_65_66_ladder_4 = _3221;
                frontier_phi_65_66_ladder_5 = _3219;
            }
            _3340 = frontier_phi_65_66_ladder_5;
            _3342 = frontier_phi_65_66_ladder_4;
            _3344 = frontier_phi_65_66_ladder_3;
            _3346 = frontier_phi_65_66_ladder;
            _3348 = frontier_phi_65_66_ladder_2;
            _3350 = frontier_phi_65_66_ladder_1;
        }
        float _3355 = isnan(1.0) ? _1096 : (isnan(_1096) ? 1.0 : min(_1096, 1.0));
        _3152 = (_3355 * _3346) + _2664;
        _3154 = (_3355 * _3348) + _2666;
        _3156 = (_3355 * _3350) + _2668;
        _3158 = ((_3340 * _1080) * _3355) + _3002;
        _3160 = ((_3342 * _1082) * _3355) + _3004;
        _3162 = ((_3344 * _1083) * _3355) + _3006;
    }
    else
    {
        _3152 = _2664;
        _3154 = _2666;
        _3156 = _2668;
        _3158 = _3002;
        _3160 = _3004;
        _3162 = _3006;
    }
    float _5198 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
    float _5209 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
    float _5220 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
    float _3179 = ((isnan(1.0) ? _5198 : (isnan(_5198) ? 1.0 : min(_5198, 1.0))) * (_3152 + ((isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0))) * _1096))) + ((_3158 + ((isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0))) * _1930)) * cbPerFrame._m0[3u].x);
    float _3180 = ((isnan(1.0) ? _5209 : (isnan(_5209) ? 1.0 : min(_5209, 1.0))) * (_3154 + ((isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0))) * _1096))) + ((_3160 + ((isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0))) * _1930)) * cbPerFrame._m0[3u].x);
    float _3181 = ((isnan(1.0) ? _5220 : (isnan(_5220) ? 1.0 : min(_5220, 1.0))) * (_3156 + ((isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0))) * _1096))) + ((_3162 + ((isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0))) * _1930)) * cbPerFrame._m0[3u].x);
    uint _3182 = _286 + 6u;
    float _3190 = _1018 / cbSceneParam._m0[86u].x;
    float _3191 = _1019 / cbSceneParam._m0[86u].y;
    vec4 _3205 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3190, _3191, (log2((isnan(cbSceneParam._m0[77u].w) ? _943 : (isnan(_943) ? cbSceneParam._m0[77u].w : min(_943, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3207 = _3205.x;
    float _3208 = _3205.y;
    float _3209 = _3205.z;
    float _3210 = _3205.w;
    float _3282;
    float _3284;
    float _3286;
    float _3288;
    if (_943 > cbSceneParam._m0[78u].w)
    {
        float _3244 = isnan(_943) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _943 : min(cbSceneParam._m0[80u].w, _943));
        float _3245 = _3244 / _943;
        float _3256 = _3245 * _994;
        float _3257 = _995 * _3245;
        float _3258 = (-0.0) - _3257;
        float _3260 = _3245 * _996;
        float _3262 = (cbSceneParam._m0[77u].w * _3258) / _3244;
        float _3263 = _3262 + cbSceneParam._m0[79u].w;
        float _3264 = cbSceneParam._m0[79u].w - _3257;
        float _3270 = sqrt(((_3256 * _3256) + (_3257 * _3257)) + (_3260 * _3260));
        float _3273 = (1.0 - (cbSceneParam._m0[77u].w / _3244)) * _3270;
        float _3278 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3280 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3457;
        if (abs((_3258 - _3262) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3457 = ((((_3263 > 0.0) ? exp2(_3278 * _3263) : (2.0 - exp2(_3280 * _3263))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3273;
        }
        else
        {
            float _3401 = 1.0 / cbSceneParam._m0[80u].x;
            float _3402 = isnan(_3264) ? _3263 : (isnan(_3263) ? _3264 : max(_3263, _3264));
            float _3403 = isnan(_3264) ? _3263 : (isnan(_3263) ? _3264 : min(_3263, _3264));
            float _3412 = isnan(0.0) ? _3402 : (isnan(_3402) ? 0.0 : min(_3402, 0.0));
            float _3413 = isnan(0.0) ? _3403 : (isnan(_3403) ? 0.0 : min(_3403, 0.0));
            _3457 = ((abs(_3270 / _3258) * cbSceneParam._m0[80u].y) * ((((_3412 - _3413) * 2.0) - ((exp2(_3278 * (isnan(0.0) ? _3402 : (isnan(_3402) ? 0.0 : max(_3402, 0.0)))) - exp2(_3278 * (isnan(0.0) ? _3403 : (isnan(_3403) ? 0.0 : max(_3403, 0.0))))) * _3401)) - ((exp2(_3280 * _3412) - exp2(_3280 * _3413)) * _3401))) + (_3273 * cbSceneParam._m0[80u].z);
        }
        vec4 _3459 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3190, _3191, 1.0), 0.0);
        float _3468 = exp2((_3457 * (-1.44269502162933349609375)) * (1.0 - _3459.w));
        float _3469 = log2(_3468);
        float _3485 = log2(_3210);
        _3282 = (exp2(_3485 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3469 * cbSceneParam._m0[78u].x)) * _3459.x) / cbSceneParam._m0[78u].x)) + _3207;
        _3284 = (exp2(_3485 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3469 * cbSceneParam._m0[78u].y)) * _3459.y) / cbSceneParam._m0[78u].y)) + _3208;
        _3286 = (exp2(_3485 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3469 * cbSceneParam._m0[78u].z)) * _3459.z) / cbSceneParam._m0[78u].z)) + _3209;
        _3288 = _3468 * _3210;
    }
    else
    {
        _3282 = _3207;
        _3284 = _3208;
        _3286 = _3209;
        _3288 = _3210;
    }
    bool _3495;
    vec4 _3298;
    vec4 _3320;
    float _3322;
    float _3326;
    float _3327;
    float _3328;
    float _3329;
    bool _3339;
    for (;;)
    {
        _3298 = cbMatDynParam._m0[0u];
        float _3300 = roundEven(_3298.y);
        bool _3301 = _3300 == 3.0;
        float _3302 = log2(_3288);
        float _3309 = exp2(_3302 * cbSceneParam._m0[78u].x) * _3179;
        float _3310 = exp2(_3302 * cbSceneParam._m0[78u].y) * _3180;
        float _3311 = exp2(_3302 * cbSceneParam._m0[78u].z) * _3181;
        float _3318 = _1007 + (-0.5);
        _3320 = cbMtdParam._m0[1u];
        _3322 = _3320.y * _3318;
        float _3325 = (_3300 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3326 = _3325 * (_3301 ? _3309 : (_3309 + (cbSceneParam._m0[72u].w * _3282)));
        _3327 = _3325 * (_3301 ? _3310 : (_3310 + (cbSceneParam._m0[72u].w * _3284)));
        _3328 = _3325 * (_3301 ? _3311 : (_3311 + (cbSceneParam._m0[72u].w * _3286)));
        _3329 = _3318 * 0.999000012874603271484375;
        _3339 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3339)
        {
            if ((cbInstanceData._m0[_286 + 7u].x + _3329) < 0.5)
            {
                _3495 = true;
                break;
            }
        }
        uint _3436 = _1056 + uint(_3298.w);
        if ((cbInstanceData._m0[_3436].w < 1.0) && ((cbInstanceData._m0[_3436].w + _3329) < 0.5))
        {
            _3495 = true;
            break;
        }
        if ((_3322 + 1.0) < _3320.x)
        {
            _3495 = true;
            break;
        }
        _3495 = false;
        break;
    }
    float _3699;
    if (_3495)
    {
        discard_state = true;
        _3699 = 0.0;
    }
    else
    {
        _3699 = cbInstanceData._m0[_3182].w;
    }
    SV_Target.x = _3326;
    SV_Target.y = _3327;
    SV_Target.z = _3328;
    SV_Target.w = _3699;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3182].w;
    discard_exit();
}


