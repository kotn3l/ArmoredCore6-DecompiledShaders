#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1465;
float _4127;
float _4128;
float _4129;
float _4130;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _235 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _236 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _237 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _243 = inversesqrt(dot(vec3(_235, _236, _237), vec3(_235, _236, _237)));
    float _250 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _257 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _271 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _273 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _274 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4139 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    float _4150 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    float _4161 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    uint _284 = uint(roundEven(NORMAL.w)) * 13u;
    uint _289 = _284 + 1u;
    uint _293 = _284 + 2u;
    float _302 = sqrt(((cbInstanceData._m0[_289].x * cbInstanceData._m0[_289].x) + (cbInstanceData._m0[_284].x * cbInstanceData._m0[_284].x)) + (cbInstanceData._m0[_293].x * cbInstanceData._m0[_293].x));
    float _303 = _302 * TEXCOORD.z;
    float _304 = _302 * TEXCOORD.w;
    vec4 _317 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _303) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _304) + cbTextureTilingScale._m0[13u].w));
    vec4 _341 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _346 = _341.x * cbMtdParam._m0[11u].x;
    float _347 = _341.y * cbMtdParam._m0[11u].y;
    float _348 = _341.z * cbMtdParam._m0[11u].z;
    vec4 _367 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _303) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _304) + cbTextureTilingScale._m0[5u].w));
    vec4 _386 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _416 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[27u].x * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].y * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _418 = _416.x;
    float _430 = dot(vec4(_418, _416.yzw), vec4(cbMtdParam._m0[28u].w, cbMtdParam._m0[29u].xy, 0.0));
    float _447 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _386.x) * 2.0) - ((((_418 - _430) * cbMtdParam._m0[23u].w) + _430) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4172 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _448 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
    float _455 = (_448 * ((_367.x * cbMtdParam._m0[12u].x) - _346)) + _346;
    float _456 = (_448 * ((_367.y * cbMtdParam._m0[12u].y) - _347)) + _347;
    float _457 = (_448 * ((_367.z * cbMtdParam._m0[12u].z) - _348)) + _348;
    vec4 _474 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _303) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _304) + cbTextureTilingScale._m0[3u].w));
    vec4 _496 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].z * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].w * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _498 = _496.x;
    float _508 = dot(vec4(_498, _496.yzw), vec4(cbMtdParam._m0[30u].yzw, 0.0));
    float _522 = ((cbMtdParam._m0[25u].z * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _386.y) * 2.0) - ((((_498 - _508) * cbMtdParam._m0[23u].w) + _508) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4183 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _523 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
    float _530 = (_523 * ((_474.x * cbMtdParam._m0[13u].x) - _455)) + _455;
    float _531 = (_523 * ((_474.y * cbMtdParam._m0[13u].y) - _456)) + _456;
    float _532 = (_523 * ((_474.z * cbMtdParam._m0[13u].z) - _457)) + _457;
    float _536 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _317.x) * _530;
    float _539 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _317.y) * _531;
    float _542 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _317.z) * _532;
    float _549 = ((_530 - _536) * (isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0)))) + _536;
    float _550 = ((_531 - _539) * (isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0)))) + _539;
    float _551 = ((_532 - _542) * (isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0)))) + _542;
    vec4 _568 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _303) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _304) + cbTextureTilingScale._m0[20u].w));
    vec4 _591 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _303) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _304) + cbTextureTilingScale._m0[4u].w));
    vec4 _608 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _610 = _608.x;
    float _611 = _608.y;
    float _612 = _608.z;
    float _619 = ((_591.x - _610) * _448) + _610;
    float _620 = ((_591.y - _611) * _448) + _611;
    float _621 = ((_591.z - _612) * _448) + _612;
    vec4 _633 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _303) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _304) + cbTextureTilingScale._m0[2u].w));
    float _646 = ((_633.z - _621) * _523) + _621;
    float _649 = ((((_633.x - _619) * _523) + _619) * 2.0) + (-1.0);
    float _650 = ((((_633.y - _620) * _523) + _620) * 2.0) + (-1.0);
    float _651 = dot(vec2(_649, _650), vec2(_649, _650));
    float _4194 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _656 = sqrt(1.0 - (isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0))));
    vec4 _670 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _695 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _303) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _304) + cbTextureTilingScale._m0[11u].w));
    float _697 = _695.x;
    float _698 = 1.0 - _697;
    float _714 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_697 - _698) * cbMtdParam._m0[24u].z) + _698) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4205 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
    float _715 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
    float _722 = (_715 * (cbMtdParam._m0[17u].x - _549)) + _549;
    float _723 = (_715 * (cbMtdParam._m0[17u].y - _550)) + _550;
    float _724 = (_715 * (cbMtdParam._m0[17u].z - _551)) + _551;
    vec4 _750 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _752 = _750.x;
    float _770 = ((texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _303) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _304) + cbTextureTilingScale._m0[9u].w)).x - _752) * _448) + _752;
    float _787 = ((texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _303) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _304) + cbTextureTilingScale._m0[21u].w)).x - _770) * _523) + _770;
    float _791 = ((texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _787) * cbMtdParam._m0[19u].z) + _787;
    float _793 = _791 - (_791 * _715);
    float _798 = (((_568.z - _646) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _646;
    float _802 = ((_670.z - _798) * cbMtdParam._m0[19u].w) + _798;
    vec4 _815 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _303) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _304) + cbTextureTilingScale._m0[15u].w));
    float _822 = (_815.x * 2.0) + (-1.0);
    float _823 = (_815.y * 2.0) + (-1.0);
    float _824 = dot(vec2(_822, _823), vec2(_822, _823));
    float _4216 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
    float _832 = (_715 * (_815.z - _802)) + _802;
    float _841 = (_649 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_568.x * 2.0) + (-1.0)))) + (((_670.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w);
    float _842 = (_650 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_568.y * 2.0) + (-1.0)))) + (((_670.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w);
    float _854 = (((_822 - _841) + (cbMtdParam._m0[21u].x * _841)) * _715) + _841;
    float _855 = (((_823 - _842) + (cbMtdParam._m0[21u].x * _842)) * _715) + _842;
    float _856 = (_715 * (sqrt(1.0 - (isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0)))) - _656)) + _656;
    float _860 = cbMtdParam._m0[22u].x + _670.w;
    float _862 = gl_FragCoord.x * 0.125;
    float _864 = gl_FragCoord.y * 0.125;
    float _874 = fma(_856, _250 * NORMAL.x, fma(_855, _257 * TANGENT.x, (_243 * _235) * _854));
    float _877 = fma(_856, _250 * NORMAL.y, fma(_855, _257 * TANGENT.y, (_243 * _236) * _854));
    float _880 = fma(_856, _250 * NORMAL.z, fma(_855, _257 * TANGENT.z, (_243 * _237) * _854));
    float _884 = inversesqrt(dot(vec3(_874, _877, _880), vec3(_874, _877, _880)));
    float _885 = _884 * _874;
    float _886 = _884 * _877;
    float _887 = _884 * _880;
    float _4227 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
    float _888 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
    float _4238 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
    float _4249 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _4260 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _4271 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    float _4282 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
    float _893 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
    if (!(cbMtdParam._m0[25u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_862, _864)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _911 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _952 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _962 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _952);
    float _963 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _952);
    float _964 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _952);
    float _968 = inversesqrt(dot(vec3(_962, _963, _964), vec3(_962, _963, _964)));
    float _969 = _962 * _968;
    float _970 = _963 * _968;
    float _971 = _964 * _968;
    vec4 _973 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_862, _864));
    float _975 = _973.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1147 = sqrt(((_962 * _962) + (_963 * _963)) + (_964 * _964));
        float _1153 = (cbMatDynParam._m0[5u].x * _1147) + cbMatDynParam._m0[5u].y;
        float _4293 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1154 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
        float _1158 = (cbMatDynParam._m0[5u].z * _1147) + cbMatDynParam._m0[5u].w;
        float _4304 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0))) - _1154)) + _1154) < ((_975 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _986 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _987 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1005 = fma(_887, cbSceneParam._m0[5u].z, fma(_886, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _885));
    float _1008 = fma(_887, cbSceneParam._m0[6u].z, fma(_886, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _885));
    float _1011 = fma(_887, cbSceneParam._m0[7u].z, fma(_886, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _885));
    uint _1024 = _284 + 9u;
    uint _1025 = _1024 + uint(cbMatDynParam._m0[0u].w);
    float _1031 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0)))) * cbInstanceData._m0[_1025].x;
    float _1032 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0)))) * cbInstanceData._m0[_1025].y;
    float _1033 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0)))) * cbInstanceData._m0[_1025].z;
    float _4315 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
    float _1034 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
    float _4326 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
    float _1035 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
    float _4337 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
    float _1036 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
    float _1037 = 1.0 - _893;
    float _1038 = _1034 * _1037;
    float _1039 = _1035 * _1037;
    float _1040 = _1036 * _1037;
    float _1045 = (_1034 + (-0.039999999105930328369140625)) * _893;
    float _1046 = (_1035 + (-0.039999999105930328369140625)) * _893;
    float _1047 = (_1036 + (-0.039999999105930328369140625)) * _893;
    float _1048 = _1045 + 0.039999999105930328369140625;
    float _1050 = _1046 + 0.039999999105930328369140625;
    float _1051 = _1047 + 0.039999999105930328369140625;
    vec4 _1060 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _986, cbSceneParam._m0[86u].y * _987));
    float _1064 = ((isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0))) * TEXCOORD_5.w) * _1060.x;
    float _1065 = dot(vec3(_885, _886, _887), vec3(_969, _970, _971));
    float _1068 = _1065 * 2.0;
    float _1072 = (_1068 * _885) - _969;
    float _1073 = (_1068 * _886) - _970;
    float _1074 = (_1068 * _887) - _971;
    float _1078 = abs(dot(vec3(_969, _970, _971), vec3(_885, _886, _887)));
    float _4348 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
    float _1080 = sqrt(_888);
    float _1093 = exp2((_1080 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1080 * 3.0));
    float _1099 = (1.0 - _1093) * ((_1080 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1100 = _1093 * _1080;
    float _1128 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1132 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1136 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1464;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1189 = fma(_1136, cbModelParam._m0[26u].z, fma(_1132, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1128));
        float _1193 = fma(_1136, cbModelParam._m0[27u].z, fma(_1132, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1128));
        float _1197 = fma(_1136, cbModelParam._m0[28u].z, fma(_1132, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1128));
        float _1222 = _1128 + _885;
        float _1223 = _1132 + _886;
        float _1224 = _1136 + _887;
        float _1234 = fma(_1224, cbModelParam._m0[26u].z, fma(_1223, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1222)) - _1189;
        float _1235 = fma(_1224, cbModelParam._m0[27u].z, fma(_1223, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1222)) - _1193;
        float _1236 = fma(_1224, cbModelParam._m0[28u].z, fma(_1223, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1222)) - _1197;
        float _1240 = inversesqrt(dot(vec3(_1234, _1235, _1236), vec3(_1234, _1235, _1236)));
        float _1253 = ((_1240 * _1234) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1189 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1254 = ((_1240 * _1235) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1193 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1255 = ((_1240 * _1236) / cbModelParam._m0[34u].z) + ((((((_1197 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1258 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1253, _1254, _1255), 0.0);
        vec4 _1265 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1253, _1254, _1255), 0.0);
        vec4 _1272 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1253, _1254, _1255), 0.0);
        vec4 _1279 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1253, _1254, _1255), 0.0);
        float _1292 = exp2((_1258.w + (-0.5)) * 20.0) * 2.0;
        float _1293 = _1292 * (_1258.x + (-0.5));
        float _1294 = _1292 * (_1258.y + (-0.5));
        float _1295 = _1292 * (_1258.z + (-0.5));
        float _1302 = exp2((_1265.w + (-0.5)) * 20.0) * 2.0;
        float _1303 = _1302 * (_1265.x + (-0.5));
        float _1304 = _1302 * (_1265.y + (-0.5));
        float _1305 = _1302 * (_1265.z + (-0.5));
        float _1312 = exp2((_1272.w + (-0.5)) * 20.0) * 2.0;
        float _1313 = _1312 * (_1272.x + (-0.5));
        float _1314 = _1312 * (_1272.y + (-0.5));
        float _1315 = _1312 * (_1272.z + (-0.5));
        float _1322 = exp2((_1279.w + (-0.5)) * 20.0) * 2.0;
        float _1323 = _1322 * (_1279.x + (-0.5));
        float _1324 = _1322 * (_1279.y + (-0.5));
        float _1325 = _1322 * (_1279.z + (-0.5));
        float _1326 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1327 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1328 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1329 = _1293 * 0.5;
        float _1330 = _1303 * 0.5;
        float _1331 = _1313 * 0.5;
        float _1332 = dot(vec3(_1329, _1330, _1331), vec3(_1329, _1330, _1331));
        float _1337 = (_1332 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1332);
        float _1346 = (dot(vec3(_885, _886, _887), vec3(_1337 * _1329, _1337 * _1330, _1337 * _1331)) + 1.0) * 0.5;
        float _4374 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1356 = sqrt(((_1330 * _1330) + (_1329 * _1329)) + (_1331 * _1331)) / (_1326 + 9.9999997473787516355514526367188e-06);
        float _4385 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1357 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
        float _1358 = _1357 * 2.0;
        float _1362 = (1.0 - _1357) / (_1357 + 1.0);
        float _4396 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1363 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
        float _1372 = ((((1.0 - _1363) * (_1358 + 2.0)) * exp2(log2(isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0))) * (_1358 + 1.0))) + _1363) * _1326;
        float _1373 = _1294 * 0.5;
        float _1374 = _1304 * 0.5;
        float _1375 = _1314 * 0.5;
        float _1376 = dot(vec3(_1373, _1374, _1375), vec3(_1373, _1374, _1375));
        float _1381 = (_1376 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1376);
        float _1389 = (dot(vec3(_885, _886, _887), vec3(_1381 * _1373, _1381 * _1374, _1381 * _1375)) + 1.0) * 0.5;
        float _4407 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1398 = sqrt(((_1374 * _1374) + (_1373 * _1373)) + (_1375 * _1375)) / (_1327 + 9.9999997473787516355514526367188e-06);
        float _4418 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1399 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
        float _1400 = _1399 * 2.0;
        float _1404 = (1.0 - _1399) / (_1399 + 1.0);
        float _4429 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1405 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
        float _1414 = ((((1.0 - _1405) * (_1400 + 2.0)) * exp2(log2(isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0))) * (_1400 + 1.0))) + _1405) * _1327;
        float _1415 = _1295 * 0.5;
        float _1416 = _1305 * 0.5;
        float _1417 = _1315 * 0.5;
        float _1418 = dot(vec3(_1415, _1416, _1417), vec3(_1415, _1416, _1417));
        float _1423 = (_1418 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1418);
        float _1431 = (dot(vec3(_885, _886, _887), vec3(_1423 * _1415, _1423 * _1416, _1423 * _1417)) + 1.0) * 0.5;
        float _4440 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1440 = sqrt(((_1416 * _1416) + (_1415 * _1415)) + (_1417 * _1417)) / (_1328 + 9.9999997473787516355514526367188e-06);
        float _4451 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1441 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
        float _1442 = _1441 * 2.0;
        float _1446 = (1.0 - _1441) / (_1441 + 1.0);
        float _4462 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1447 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
        float _1456 = ((((1.0 - _1447) * (_1442 + 2.0)) * exp2(log2(isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0))) * (_1442 + 1.0))) + _1447) * _1328;
        _1464 = _1295;
        _1466 = _1294;
        _1467 = _1293;
        _1468 = _1305;
        _1469 = _1304;
        _1470 = _1303;
        _1471 = _1315;
        _1472 = _1314;
        _1473 = _1313;
        _1474 = _1328;
        _1475 = _1327;
        _1476 = _1326;
        _1477 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0)));
        _1478 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0)));
        _1479 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0)));
    }
    else
    {
        _1464 = _1465;
        _1466 = _1465;
        _1467 = _1465;
        _1468 = _1465;
        _1469 = _1465;
        _1470 = _1465;
        _1471 = _1465;
        _1472 = _1465;
        _1473 = _1465;
        _1474 = _1465;
        _1475 = _1465;
        _1476 = _1465;
        _1477 = 0.0;
        _1478 = 0.0;
        _1479 = 0.0;
    }
    float _1772;
    float _1773;
    float _1774;
    float _1775;
    float _1776;
    float _1777;
    float _1778;
    float _1779;
    float _1780;
    float _1781;
    float _1782;
    float _1783;
    float _1784;
    float _1785;
    float _1786;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1503 = fma(_1136, cbModelParam._m0[30u].z, fma(_1132, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1128));
        float _1507 = fma(_1136, cbModelParam._m0[31u].z, fma(_1132, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1128));
        float _1511 = fma(_1136, cbModelParam._m0[32u].z, fma(_1132, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1128));
        float _1534 = _1128 + _885;
        float _1535 = _1132 + _886;
        float _1536 = _1136 + _887;
        float _1546 = fma(_1536, cbModelParam._m0[30u].z, fma(_1535, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1534)) - _1503;
        float _1547 = fma(_1536, cbModelParam._m0[31u].z, fma(_1535, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1534)) - _1507;
        float _1548 = fma(_1536, cbModelParam._m0[32u].z, fma(_1535, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1534)) - _1511;
        float _1552 = inversesqrt(dot(vec3(_1546, _1547, _1548), vec3(_1546, _1547, _1548)));
        float _1565 = ((_1552 * _1546) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1503 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1566 = ((_1552 * _1547) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1507 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1567 = ((_1552 * _1548) / cbModelParam._m0[35u].z) + ((((((_1511 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1569 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1565, _1566, _1567), 0.0);
        vec4 _1576 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1565, _1566, _1567), 0.0);
        vec4 _1583 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1565, _1566, _1567), 0.0);
        vec4 _1590 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1565, _1566, _1567), 0.0);
        float _1602 = exp2((_1569.w + (-0.5)) * 20.0) * 2.0;
        float _1603 = _1602 * (_1569.x + (-0.5));
        float _1604 = _1602 * (_1569.y + (-0.5));
        float _1605 = _1602 * (_1569.z + (-0.5));
        float _1612 = exp2((_1576.w + (-0.5)) * 20.0) * 2.0;
        float _1613 = _1612 * (_1576.x + (-0.5));
        float _1614 = _1612 * (_1576.y + (-0.5));
        float _1615 = _1612 * (_1576.z + (-0.5));
        float _1622 = exp2((_1583.w + (-0.5)) * 20.0) * 2.0;
        float _1623 = _1622 * (_1583.x + (-0.5));
        float _1624 = _1622 * (_1583.y + (-0.5));
        float _1625 = _1622 * (_1583.z + (-0.5));
        float _1632 = exp2((_1590.w + (-0.5)) * 20.0) * 2.0;
        float _1633 = _1632 * (_1590.x + (-0.5));
        float _1634 = _1632 * (_1590.y + (-0.5));
        float _1635 = _1632 * (_1590.z + (-0.5));
        float _1636 = isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0));
        float _1637 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
        float _1638 = isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0));
        float _1639 = _1603 * 0.5;
        float _1640 = _1613 * 0.5;
        float _1641 = _1623 * 0.5;
        float _1642 = dot(vec3(_1639, _1640, _1641), vec3(_1639, _1640, _1641));
        float _1647 = (_1642 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1642);
        float _1655 = (dot(vec3(_885, _886, _887), vec3(_1647 * _1639, _1647 * _1640, _1647 * _1641)) + 1.0) * 0.5;
        float _4503 = isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0));
        float _1664 = sqrt(((_1640 * _1640) + (_1639 * _1639)) + (_1641 * _1641)) / (_1636 + 9.9999997473787516355514526367188e-06);
        float _4514 = isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0));
        float _1665 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
        float _1666 = _1665 * 2.0;
        float _1670 = (1.0 - _1665) / (_1665 + 1.0);
        float _4525 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
        float _1671 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
        float _1680 = ((((1.0 - _1671) * (_1666 + 2.0)) * exp2(log2(isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0))) * (_1666 + 1.0))) + _1671) * _1636;
        float _1681 = _1604 * 0.5;
        float _1682 = _1614 * 0.5;
        float _1683 = _1624 * 0.5;
        float _1684 = dot(vec3(_1681, _1682, _1683), vec3(_1681, _1682, _1683));
        float _1689 = (_1684 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1684);
        float _1697 = (dot(vec3(_885, _886, _887), vec3(_1689 * _1681, _1689 * _1682, _1689 * _1683)) + 1.0) * 0.5;
        float _4536 = isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0));
        float _1706 = sqrt(((_1682 * _1682) + (_1681 * _1681)) + (_1683 * _1683)) / (_1637 + 9.9999997473787516355514526367188e-06);
        float _4547 = isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0));
        float _1707 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
        float _1708 = _1707 * 2.0;
        float _1712 = (1.0 - _1707) / (_1707 + 1.0);
        float _4558 = isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0));
        float _1713 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
        float _1722 = ((((1.0 - _1713) * (_1708 + 2.0)) * exp2(log2(isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0))) * (_1708 + 1.0))) + _1713) * _1637;
        float _1723 = _1605 * 0.5;
        float _1724 = _1615 * 0.5;
        float _1725 = _1625 * 0.5;
        float _1726 = dot(vec3(_1723, _1724, _1725), vec3(_1723, _1724, _1725));
        float _1731 = (_1726 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1726);
        float _1739 = (dot(vec3(_885, _886, _887), vec3(_1731 * _1723, _1731 * _1724, _1731 * _1725)) + 1.0) * 0.5;
        float _4569 = isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0));
        float _1748 = sqrt(((_1724 * _1724) + (_1723 * _1723)) + (_1725 * _1725)) / (_1638 + 9.9999997473787516355514526367188e-06);
        float _4580 = isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0));
        float _1749 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
        float _1750 = _1749 * 2.0;
        float _1754 = (1.0 - _1749) / (_1749 + 1.0);
        float _4591 = isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0));
        float _1755 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
        float _1764 = ((((1.0 - _1755) * (_1750 + 2.0)) * exp2(log2(isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0))) * (_1750 + 1.0))) + _1755) * _1638;
        _1772 = _1605;
        _1773 = _1604;
        _1774 = _1603;
        _1775 = _1615;
        _1776 = _1614;
        _1777 = _1613;
        _1778 = _1625;
        _1779 = _1624;
        _1780 = _1623;
        _1781 = _1638;
        _1782 = _1637;
        _1783 = _1636;
        _1784 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0)));
        _1785 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0)));
        _1786 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0)));
    }
    else
    {
        _1772 = _1465;
        _1773 = _1465;
        _1774 = _1465;
        _1775 = _1465;
        _1776 = _1465;
        _1777 = _1465;
        _1778 = _1465;
        _1779 = _1465;
        _1780 = _1465;
        _1781 = _1465;
        _1782 = _1465;
        _1783 = _1465;
        _1784 = 0.0;
        _1785 = 0.0;
        _1786 = 0.0;
    }
    float _1796 = (cbModelParam._m0[1u].x * (_1784 - _1477)) + _1477;
    float _1797 = (cbModelParam._m0[1u].x * (_1785 - _1478)) + _1478;
    float _1798 = (cbModelParam._m0[1u].x * (_1786 - _1479)) + _1479;
    float _1819 = fma(_1798, cbSceneParam._m0[89u].z, fma(_1797, cbSceneParam._m0[89u].y, _1796 * cbSceneParam._m0[89u].x));
    float _1822 = fma(_1798, cbSceneParam._m0[90u].z, fma(_1797, cbSceneParam._m0[90u].y, _1796 * cbSceneParam._m0[90u].x));
    float _1825 = fma(_1798, cbSceneParam._m0[91u].z, fma(_1797, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1796));
    float _1840 = _1072 * 0.5;
    float _1841 = _1073 * 0.5;
    float _1842 = _1074 * 0.5;
    float _1843 = dot(vec4(_1840, _1841, _1842, 1.0), vec4(_1774, _1777, _1780, _1783));
    float _1846 = dot(vec4(_1840, _1841, _1842, 1.0), vec4(_1773, _1776, _1779, _1782));
    float _1849 = dot(vec4(_1840, _1841, _1842, 1.0), vec4(_1772, _1775, _1778, _1781));
    float _1883;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1856 = dot(vec4(_1840, _1841, _1842, 1.0), vec4(_1464, _1468, _1471, _1474));
        float _1860 = dot(vec4(_1840, _1841, _1842, 1.0), vec4(_1466, _1469, _1472, _1475));
        float _1864 = dot(vec4(_1840, _1841, _1842, 1.0), vec4(_1467, _1470, _1473, _1476));
        float _1871 = dot(vec4(cbModelParam._m0[39u]), vec4(_1840, _1841, _1842, 1.0));
        _1883 = dot(vec3(isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0)), isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0)), isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1871) ? 0.0 : (isnan(0.0) ? _1871 : max(0.0, _1871))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1883 = 1.0;
    }
    float _1894;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1885 = dot(vec4(cbModelParam._m0[40u]), vec4(_1840, _1841, _1842, 1.0));
        _1894 = dot(vec3(isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0)), isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0)), isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1885) ? 0.0 : (isnan(0.0) ? _1885 : max(0.0, _1885))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1894 = 1.0;
    }
    float _1898 = (_1894 * cbModelParam._m0[1u].x) + (_1883 * (1.0 - cbModelParam._m0[1u].x));
    float _1908 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _888);
    float _1909 = isnan(_1908) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1908 : min(cbModelParam._m0[25u].z, _1908));
    float _1990;
    float _1992;
    float _1994;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1957 = fma(_1136, cbModelParam._m0[13u].z, fma(_1132, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1128)) + cbModelParam._m0[13u].w;
        float _1961 = fma(_1136, cbModelParam._m0[14u].z, fma(_1132, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1128)) + cbModelParam._m0[14u].w;
        float _1965 = fma(_1136, cbModelParam._m0[15u].z, fma(_1132, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1128)) + cbModelParam._m0[15u].w;
        float _1968 = fma(_1074, cbModelParam._m0[13u].z, fma(_1073, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1072));
        float _1971 = fma(_1074, cbModelParam._m0[14u].z, fma(_1073, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1072));
        float _1974 = fma(_1074, cbModelParam._m0[15u].z, fma(_1073, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1072));
        float _2002;
        if (_1968 > 0.0)
        {
            _2002 = abs((1.0 - _1957) / _1968);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1968 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1957 + 1.0) / _1968);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _2002 = frontier_phi_19_17_ladder;
        }
        float _2174;
        if (_1971 > 0.0)
        {
            _2174 = abs((1.0 - _1961) / _1971);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1971 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1961 + 1.0) / _1971);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2174 = frontier_phi_28_24_ladder;
        }
        float _2469;
        if (_1974 > 0.0)
        {
            _2469 = abs((1.0 - _1965) / _1974);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1974 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1965 + 1.0) / _1974);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2469 = frontier_phi_40_35_ladder;
        }
        float _2471 = isnan(_2174) ? _2002 : (isnan(_2002) ? _2174 : min(_2002, _2174));
        float _2472 = isnan(_2469) ? _2471 : (isnan(_2471) ? _2469 : min(_2471, _2469));
        float _2476 = (_2472 * _1968) + _1957;
        float _2477 = (_2472 * _1971) + _1961;
        float _2478 = (_2472 * _1974) + _1965;
        float _2479 = _2472 * 9.9999997473787516355514526367188e-05;
        float _2481 = (-1.0) - _2479;
        float _2483 = _2479 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2478 > _2483) || ((_2478 < _2481) || ((_2477 > _2483) || ((_2477 < _2481) || ((_2476 < _2481) || (_2476 > _2483))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2623 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2478, cbModelParam._m0[9u].z, fma(_2477, cbModelParam._m0[9u].y, _2476 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2478, cbModelParam._m0[10u].z, fma(_2477, cbModelParam._m0[10u].y, _2476 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2478, cbModelParam._m0[11u].z, fma(_2477, cbModelParam._m0[11u].y, _2476 * cbModelParam._m0[11u].x))), _1909);
            frontier_phi_18_40_ladder = _2623.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2623.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2623.x * cbModelParam._m0[1u].y;
        }
        _1990 = frontier_phi_18_40_ladder_2;
        _1992 = frontier_phi_18_40_ladder_1;
        _1994 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1978 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1072, _1073, _1074), _1909);
        _1990 = _1978.x * cbModelParam._m0[1u].y;
        _1992 = _1978.y * cbModelParam._m0[1u].y;
        _1994 = _1978.z * cbModelParam._m0[1u].y;
    }
    float _1998 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _888);
    float _1999 = isnan(_1998) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1998 : min(cbModelParam._m0[25u].w, _1998));
    float _2089;
    float _2091;
    float _2093;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2053 = fma(_1136, cbModelParam._m0[21u].z, fma(_1132, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1128)) + cbModelParam._m0[21u].w;
        float _2057 = fma(_1136, cbModelParam._m0[22u].z, fma(_1132, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1128)) + cbModelParam._m0[22u].w;
        float _2061 = fma(_1136, cbModelParam._m0[23u].z, fma(_1132, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1128)) + cbModelParam._m0[23u].w;
        float _2064 = fma(_1074, cbModelParam._m0[21u].z, fma(_1073, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1072));
        float _2067 = fma(_1074, cbModelParam._m0[22u].z, fma(_1073, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1072));
        float _2070 = fma(_1074, cbModelParam._m0[23u].z, fma(_1073, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1072));
        float _2179;
        if (_2064 > 0.0)
        {
            _2179 = abs((1.0 - _2053) / _2064);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_2064 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_2053 + 1.0) / _2064);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2179 = frontier_phi_30_26_ladder;
        }
        float _2496;
        if (_2067 > 0.0)
        {
            _2496 = abs((1.0 - _2057) / _2067);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_2067 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_2057 + 1.0) / _2067);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2496 = frontier_phi_42_37_ladder;
        }
        float _2834;
        if (_2070 > 0.0)
        {
            _2834 = abs((1.0 - _2061) / _2070);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_2070 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_2061 + 1.0) / _2070);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2834 = frontier_phi_52_49_ladder;
        }
        float _2836 = isnan(_2496) ? _2179 : (isnan(_2179) ? _2496 : min(_2179, _2496));
        float _2837 = isnan(_2834) ? _2836 : (isnan(_2836) ? _2834 : min(_2836, _2834));
        float _2841 = (_2837 * _2064) + _2053;
        float _2842 = (_2837 * _2067) + _2057;
        float _2843 = (_2837 * _2070) + _2061;
        float _2844 = _2837 * 9.9999997473787516355514526367188e-05;
        float _2845 = (-1.0) - _2844;
        float _2847 = _2844 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2843 > _2847) || ((_2843 < _2845) || ((_2842 > _2847) || ((_2842 < _2845) || ((_2841 < _2845) || (_2841 > _2847))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2965 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2843, cbModelParam._m0[17u].z, fma(_2842, cbModelParam._m0[17u].y, _2841 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2843, cbModelParam._m0[18u].z, fma(_2842, cbModelParam._m0[18u].y, _2841 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2843, cbModelParam._m0[19u].z, fma(_2842, cbModelParam._m0[19u].y, _2841 * cbModelParam._m0[19u].x))), _1999);
            frontier_phi_27_52_ladder = _2965.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2965.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2965.x * cbModelParam._m0[1u].z;
        }
        _2089 = frontier_phi_27_52_ladder_2;
        _2091 = frontier_phi_27_52_ladder_1;
        _2093 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _2073 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1072, _1073, _1074), _1999);
        _2089 = _2073.x * cbModelParam._m0[1u].z;
        _2091 = _2073.y * cbModelParam._m0[1u].z;
        _2093 = _2073.z * cbModelParam._m0[1u].z;
    }
    float _2106 = (((_1099 * _1048) + _1100) * _1064) * ((cbModelParam._m0[1u].w * (_2089 - _1990)) + _1990);
    float _2108 = (((_1099 * _1050) + _1100) * _1064) * ((cbModelParam._m0[1u].w * (_2091 - _1992)) + _1992);
    float _2110 = (((_1099 * _1051) + _1100) * _1064) * ((cbModelParam._m0[1u].w * (_2093 - _1994)) + _1994);
    float _2113 = fma(_2110, cbSceneParam._m0[89u].z, fma(_2108, cbSceneParam._m0[89u].y, _2106 * cbSceneParam._m0[89u].x));
    float _2116 = fma(_2110, cbSceneParam._m0[90u].z, fma(_2108, cbSceneParam._m0[90u].y, _2106 * cbSceneParam._m0[90u].x));
    float _2119 = fma(_2110, cbSceneParam._m0[91u].z, fma(_2108, cbSceneParam._m0[91u].y, _2106 * cbSceneParam._m0[91u].x));
    float _2153 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2157 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2161 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2165 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2166 = _2153 / _2165;
    float _2167 = _2157 / _2165;
    float _2168 = _2161 / _2165;
    float _2315;
    float _2316;
    float _2317;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2195 = ((uint(_2168 > cbSceneParam._m0[59u].y) + uint(_2168 > cbSceneParam._m0[59u].x)) + uint(_2168 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2196 = _2195 + 43u;
        uint _2204 = _2195 + 44u;
        uint _2212 = _2195 + 45u;
        uint _2220 = _2195 + 46u;
        float _2231 = fma(_2165, cbSceneParam._m0[_2196].w, fma(_2161, cbSceneParam._m0[_2196].z, fma(_2157, cbSceneParam._m0[_2196].y, _2153 * cbSceneParam._m0[_2196].x)));
        float _2235 = fma(_2165, cbSceneParam._m0[_2204].w, fma(_2161, cbSceneParam._m0[_2204].z, fma(_2157, cbSceneParam._m0[_2204].y, _2153 * cbSceneParam._m0[_2204].x)));
        float _2243 = fma(_2165, cbSceneParam._m0[_2220].w, fma(_2161, cbSceneParam._m0[_2220].z, fma(_2157, cbSceneParam._m0[_2220].y, _2153 * cbSceneParam._m0[_2220].x)));
        float _2248 = cbSceneParam._m0[33u].z * _2243;
        float _2250 = cbSceneParam._m0[33u].w * _2243;
        float _2253 = fma(_2165, cbSceneParam._m0[_2212].w, fma(_2161, cbSceneParam._m0[_2212].z, fma(_2157, cbSceneParam._m0[_2212].y, _2153 * cbSceneParam._m0[_2212].x))) / _2243;
        float _2301 = (cbSceneParam._m0[33u].x - sqrt(((_2167 * _2167) + (_2166 * _2166)) + (_2168 * _2168))) * cbSceneParam._m0[33u].y;
        float _4717 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
        float _2308 = (isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2248 + _2231) / _2243, (_2250 + _2235) / _2243), _2253), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2250 + _2231) / _2243, (_2235 - _2248) / _2243), _2253), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2231 - _2248) / _2243, (_2235 - _2250) / _2243), _2253), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2231 - _2250) / _2243, (_2248 + _2235) / _2243), _2253), 0.0)).x), vec4(0.25)));
        _2315 = 1.0 - (_2308 * cbSceneParam._m0[34u].x);
        _2316 = 1.0 - (_2308 * cbSceneParam._m0[34u].y);
        _2317 = 1.0 - (_2308 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2315 = 1.0;
        _2316 = 1.0;
        _2317 = 1.0;
    }
    float _2381;
    float _2383;
    float _2385;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2369 = fma(_2165, cbSceneParam._m0[63u].w, fma(_2161, cbSceneParam._m0[63u].z, fma(_2157, cbSceneParam._m0[63u].y, _2153 * cbSceneParam._m0[63u].x)));
        float _2370 = fma(_2165, cbSceneParam._m0[60u].w, fma(_2161, cbSceneParam._m0[60u].z, fma(_2157, cbSceneParam._m0[60u].y, _2153 * cbSceneParam._m0[60u].x))) / _2369;
        float _2371 = fma(_2165, cbSceneParam._m0[61u].w, fma(_2161, cbSceneParam._m0[61u].z, fma(_2157, cbSceneParam._m0[61u].y, _2153 * cbSceneParam._m0[61u].x))) / _2369;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2370 >= cbSceneParam._m0[64u].x) && (_2371 >= cbSceneParam._m0[64u].y)) && (_2370 <= cbSceneParam._m0[64u].z)) && (_2371 <= cbSceneParam._m0[64u].w))
        {
            float _2509 = fma(_2165, cbSceneParam._m0[62u].w, fma(_2161, cbSceneParam._m0[62u].z, fma(_2157, cbSceneParam._m0[62u].y, _2153 * cbSceneParam._m0[62u].x))) / _2369;
            float _2513 = isnan(cbSceneParam._m0[41u].w) ? _2509 : (isnan(_2509) ? cbSceneParam._m0[41u].w : max(_2509, cbSceneParam._m0[41u].w));
            float _2556 = (cbSceneParam._m0[33u].x - sqrt(((_2167 * _2167) + (_2166 * _2166)) + (_2168 * _2168))) * cbSceneParam._m0[33u].y;
            float _4733 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0));
            float _2563 = (isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2370, cbSceneParam._m0[33u].w + _2371), _2513), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2370, _2371 - cbSceneParam._m0[33u].z), _2513), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2370 - cbSceneParam._m0[33u].z, _2371 - cbSceneParam._m0[33u].w), _2513), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2370 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2371), _2513), 0.0)).x), vec4(0.25)));
            float _2567 = 1.0 - (_2563 * cbSceneParam._m0[34u].x);
            float _2568 = 1.0 - (_2563 * cbSceneParam._m0[34u].y);
            float _2569 = 1.0 - (_2563 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2569) ? _2317 : (isnan(_2317) ? _2569 : min(_2317, _2569));
            frontier_phi_39_38_ladder_1 = isnan(_2568) ? _2316 : (isnan(_2316) ? _2568 : min(_2316, _2568));
            frontier_phi_39_38_ladder_2 = isnan(_2567) ? _2315 : (isnan(_2315) ? _2567 : min(_2315, _2567));
        }
        else
        {
            frontier_phi_39_38_ladder = _2317;
            frontier_phi_39_38_ladder_1 = _2316;
            frontier_phi_39_38_ladder_2 = _2315;
        }
        _2381 = frontier_phi_39_38_ladder_2;
        _2383 = frontier_phi_39_38_ladder_1;
        _2385 = frontier_phi_39_38_ladder;
    }
    else
    {
        _2381 = _2315;
        _2383 = _2316;
        _2385 = _2317;
    }
    uvec4 _2390 = floatBitsToUint(cbInstanceData._m0[_284 + 5u]);
    uint _2392 = _2390.x * 14u;
    uint _2393 = _2392 + 13u;
    float _2400 = _1064 + (-1.0);
    float _2405 = (cbLight._m0[_2393].x * _2400) + 1.0;
    float _2406 = (cbLight._m0[_2393].y * _2400) + 1.0;
    float _2407 = (cbLight._m0[_2393].z * _2400) + 1.0;
    float _2408 = (cbLight._m0[_2393].w * _2400) + 1.0;
    uint _2409 = _2392 + 5u;
    float _2415 = isnan(1.0) ? _2406 : (isnan(_2406) ? 1.0 : min(_2406, 1.0));
    uint _2419 = _2392 + 4u;
    float _2428 = isnan(1.0) ? _2405 : (isnan(_2405) ? 1.0 : min(_2405, 1.0));
    uint _2432 = _2392 | 1u;
    float _2443 = dot(vec3(cbLight._m0[_2392].xyz), vec3(_885, _886, _887));
    float _2446 = dot(vec3(cbLight._m0[_2432].xyz), vec3(_885, _886, _887));
    float _4769 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
    float _4780 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
    float _2451 = (isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0))) * 0.3183098733425140380859375;
    float _2453 = (isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0))) * 0.3183098733425140380859375;
    float _2460 = ((cbLight._m0[_2409].x * _2415) * _2453) + (((cbLight._m0[_2419].x * _2381) * _2428) * _2451);
    float _2461 = ((_2415 * cbLight._m0[_2409].y) * _2453) + (((cbLight._m0[_2419].y * _2383) * _2428) * _2451);
    float _2462 = ((_2415 * cbLight._m0[_2409].z) * _2453) + (((cbLight._m0[_2419].z * _2385) * _2428) * _2451);
    uvec4 _2466 = floatBitsToUint(cbLight._m0[_2392 + 12u]);
    bool _2468 = _2466.x == 0u;
    float _2570;
    float _2572;
    float _2574;
    if (_2468)
    {
        _2570 = _2460;
        _2572 = _2461;
        _2574 = _2462;
    }
    else
    {
        uint _2578 = _2392 + 6u;
        float _2594 = (dot(vec3(cbLight._m0[_2392 + 2u].xyz), vec3(_885, _886, _887)) * 0.5) + 0.5;
        float _2595 = _2594 * _2594;
        float _4791 = isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0));
        float _2596 = isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0));
        float _2597 = isnan(1.0) ? _2407 : (isnan(_2407) ? 1.0 : min(_2407, 1.0));
        _2570 = (((cbLight._m0[_2578].x * 0.3183098733425140380859375) * _2596) * _2597) + _2460;
        _2572 = (((cbLight._m0[_2578].y * 0.3183098733425140380859375) * _2596) * _2597) + _2461;
        _2574 = (((cbLight._m0[_2578].z * 0.3183098733425140380859375) * _2596) * _2597) + _2462;
    }
    bool _2577 = _2466.y == 0u;
    float _2632;
    float _2634;
    float _2636;
    if (_2577)
    {
        _2632 = _2570;
        _2634 = _2572;
        _2636 = _2574;
    }
    else
    {
        uint _2805 = _2392 + 7u;
        float _2821 = (dot(vec3(cbLight._m0[_2392 + 3u].xyz), vec3(_885, _886, _887)) * 0.5) + 0.5;
        float _2822 = _2821 * _2821;
        float _4807 = isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0));
        float _2823 = isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0));
        float _2824 = isnan(1.0) ? _2408 : (isnan(_2408) ? 1.0 : min(_2408, 1.0));
        _2632 = (((cbLight._m0[_2805].x * 0.3183098733425140380859375) * _2823) * _2824) + _2570;
        _2634 = (((cbLight._m0[_2805].y * 0.3183098733425140380859375) * _2823) * _2824) + _2572;
        _2636 = (((cbLight._m0[_2805].z * 0.3183098733425140380859375) * _2823) * _2824) + _2574;
    }
    uint _2639 = _2392 + 8u;
    float _2652 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2392].w)) * _888) * 0.949999988079071044921875);
    float _2653 = _2652 * _2652;
    float _2654 = cbLight._m0[_2392].x + _969;
    float _2655 = cbLight._m0[_2392].y + _970;
    float _2656 = cbLight._m0[_2392].z + _971;
    float _2660 = inversesqrt(dot(vec3(_2654, _2655, _2656), vec3(_2654, _2655, _2656)));
    float _2661 = _2660 * _2654;
    float _2662 = _2660 * _2655;
    float _2663 = _2660 * _2656;
    float _2664 = dot(vec3(_885, _886, _887), vec3(cbLight._m0[_2392].xyz));
    float _4823 = isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : max(_2664, 0.0));
    float _2667 = isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0));
    float _4834 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
    float _2668 = isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0));
    float _2669 = dot(vec3(_885, _886, _887), vec3(_2661, _2662, _2663));
    float _4845 = isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0));
    float _2672 = isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0));
    float _2673 = dot(vec3(cbLight._m0[_2392].xyz), vec3(_2661, _2662, _2663));
    float _4856 = isnan(0.0) ? _2673 : (isnan(_2673) ? 0.0 : max(_2673, 0.0));
    float _2677 = _2653 * _2653;
    float _2681 = ((_2672 * _2672) * (_2677 + (-1.0))) + 1.0;
    float _2689 = exp2(log2(1.0 - (isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0)))) * 5.0);
    float _2690 = 0.959999978542327880859375 - _1045;
    float _2692 = 0.959999978542327880859375 - _1046;
    float _2693 = 0.959999978542327880859375 - _1047;
    float _2700 = 1.0 - _2653;
    float _2711 = (0.5 / (((_2668 * ((_2667 * _2700) + _2653)) + 9.9999999392252902907785028219223e-09) + (((_2668 * _2700) + _2653) * _2667))) * _2667;
    float _4867 = isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0));
    float _2713 = (isnan(1.0) ? _4867 : (isnan(_4867) ? 1.0 : min(_4867, 1.0))) * (_2677 / ((_2681 * _2681) * 3.141590118408203125));
    uint _2727 = _2392 + 9u;
    float _2738 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2432].w)) * _888) * 0.949999988079071044921875);
    float _2739 = _2738 * _2738;
    float _2740 = cbLight._m0[_2432].x + _969;
    float _2741 = cbLight._m0[_2432].y + _970;
    float _2742 = cbLight._m0[_2432].z + _971;
    float _2746 = inversesqrt(dot(vec3(_2740, _2741, _2742), vec3(_2740, _2741, _2742)));
    float _2747 = _2746 * _2740;
    float _2748 = _2746 * _2741;
    float _2749 = _2746 * _2742;
    float _2750 = dot(vec3(_885, _886, _887), vec3(cbLight._m0[_2432].xyz));
    float _4878 = isnan(0.0) ? _2750 : (isnan(_2750) ? 0.0 : max(_2750, 0.0));
    float _2753 = isnan(1.0) ? _4878 : (isnan(_4878) ? 1.0 : min(_4878, 1.0));
    float _2754 = dot(vec3(_885, _886, _887), vec3(_2747, _2748, _2749));
    float _4889 = isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0));
    float _2757 = isnan(1.0) ? _4889 : (isnan(_4889) ? 1.0 : min(_4889, 1.0));
    float _2758 = dot(vec3(cbLight._m0[_2432].xyz), vec3(_2747, _2748, _2749));
    float _4900 = isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : max(_2758, 0.0));
    float _2762 = _2739 * _2739;
    float _2766 = ((_2757 * _2757) * (_2762 + (-1.0))) + 1.0;
    float _2773 = exp2(log2(1.0 - (isnan(1.0) ? _4900 : (isnan(_4900) ? 1.0 : min(_4900, 1.0)))) * 5.0);
    float _2780 = 1.0 - _2739;
    float _2790 = (0.5 / (((_2668 * ((_2753 * _2780) + _2739)) + 9.9999999392252902907785028219223e-09) + (((_2668 * _2780) + _2739) * _2753))) * _2753;
    float _4911 = isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0));
    float _2792 = (isnan(1.0) ? _4911 : (isnan(_4911) ? 1.0 : min(_4911, 1.0))) * (_2762 / ((_2766 * _2766) * 3.141590118408203125));
    float _2802 = (((((_2773 * _2690) + _1048) * cbLight._m0[_2727].x) * _2792) * _2415) + ((((cbLight._m0[_2639].x * _2381) * ((_2689 * _2690) + _1048)) * _2713) * _2428);
    float _2803 = (((((_2773 * _2692) + _1050) * cbLight._m0[_2727].y) * _2792) * _2415) + ((((cbLight._m0[_2639].y * _2383) * ((_2689 * _2692) + _1050)) * _2713) * _2428);
    float _2804 = (((((_2773 * _2693) + _1051) * cbLight._m0[_2727].z) * _2792) * _2415) + ((((cbLight._m0[_2639].z * _2385) * ((_2689 * _2693) + _1051)) * _2713) * _2428);
    float _2860;
    float _2862;
    float _2864;
    if (_2468)
    {
        _2860 = _2802;
        _2862 = _2803;
        _2864 = _2804;
    }
    else
    {
        uint _2866 = _2392 + 2u;
        uint _2870 = _2392 + 10u;
        float _2884 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2866].w)) * _888) * 0.949999988079071044921875);
        float _2885 = _2884 * _2884;
        float _2886 = cbLight._m0[_2866].x + _969;
        float _2887 = cbLight._m0[_2866].y + _970;
        float _2888 = cbLight._m0[_2866].z + _971;
        float _2892 = inversesqrt(dot(vec3(_2886, _2887, _2888), vec3(_2886, _2887, _2888)));
        float _2893 = _2892 * _2886;
        float _2894 = _2892 * _2887;
        float _2895 = _2892 * _2888;
        float _2896 = dot(vec3(_885, _886, _887), vec3(cbLight._m0[_2866].xyz));
        float _4922 = isnan(0.0) ? _2896 : (isnan(_2896) ? 0.0 : max(_2896, 0.0));
        float _2899 = isnan(1.0) ? _4922 : (isnan(_4922) ? 1.0 : min(_4922, 1.0));
        float _2900 = dot(vec3(_885, _886, _887), vec3(_2893, _2894, _2895));
        float _4933 = isnan(0.0) ? _2900 : (isnan(_2900) ? 0.0 : max(_2900, 0.0));
        float _2903 = isnan(1.0) ? _4933 : (isnan(_4933) ? 1.0 : min(_4933, 1.0));
        float _2904 = dot(vec3(cbLight._m0[_2866].xyz), vec3(_2893, _2894, _2895));
        float _4944 = isnan(0.0) ? _2904 : (isnan(_2904) ? 0.0 : max(_2904, 0.0));
        float _2908 = _2885 * _2885;
        float _2912 = ((_2903 * _2903) * (_2908 + (-1.0))) + 1.0;
        float _2919 = exp2(log2(1.0 - (isnan(1.0) ? _4944 : (isnan(_4944) ? 1.0 : min(_4944, 1.0)))) * 5.0);
        float _2926 = 1.0 - _2885;
        float _2936 = (0.5 / (((_2668 * ((_2899 * _2926) + _2885)) + 9.9999999392252902907785028219223e-09) + (((_2668 * _2926) + _2885) * _2899))) * _2899;
        float _4955 = isnan(0.0) ? _2936 : (isnan(_2936) ? 0.0 : max(_2936, 0.0));
        float _2938 = (isnan(1.0) ? _4955 : (isnan(_4955) ? 1.0 : min(_4955, 1.0))) * (_2908 / ((_2912 * _2912) * 3.141590118408203125));
        float _2939 = isnan(1.0) ? _2407 : (isnan(_2407) ? 1.0 : min(_2407, 1.0));
        _2860 = (((((_2919 * _2690) + _1048) * cbLight._m0[_2870].x) * _2938) * _2939) + _2802;
        _2862 = (((((_2919 * _2692) + _1050) * cbLight._m0[_2870].y) * _2938) * _2939) + _2803;
        _2864 = (((((_2919 * _2693) + _1051) * cbLight._m0[_2870].z) * _2938) * _2939) + _2804;
    }
    float _2970;
    float _2972;
    float _2974;
    if (_2577)
    {
        _2970 = _2860;
        _2972 = _2862;
        _2974 = _2864;
    }
    else
    {
        uint _2981 = _2392 + 3u;
        uint _2985 = _2392 + 11u;
        float _2999 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2981].w)) * _888) * 0.949999988079071044921875);
        float _3000 = _2999 * _2999;
        float _3001 = cbLight._m0[_2981].x + _969;
        float _3002 = cbLight._m0[_2981].y + _970;
        float _3003 = cbLight._m0[_2981].z + _971;
        float _3007 = inversesqrt(dot(vec3(_3001, _3002, _3003), vec3(_3001, _3002, _3003)));
        float _3008 = _3007 * _3001;
        float _3009 = _3007 * _3002;
        float _3010 = _3007 * _3003;
        float _3011 = dot(vec3(_885, _886, _887), vec3(cbLight._m0[_2981].xyz));
        float _4971 = isnan(0.0) ? _3011 : (isnan(_3011) ? 0.0 : max(_3011, 0.0));
        float _3014 = isnan(1.0) ? _4971 : (isnan(_4971) ? 1.0 : min(_4971, 1.0));
        float _3015 = dot(vec3(_885, _886, _887), vec3(_3008, _3009, _3010));
        float _4982 = isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : max(_3015, 0.0));
        float _3018 = isnan(1.0) ? _4982 : (isnan(_4982) ? 1.0 : min(_4982, 1.0));
        float _3019 = dot(vec3(cbLight._m0[_2981].xyz), vec3(_3008, _3009, _3010));
        float _4993 = isnan(0.0) ? _3019 : (isnan(_3019) ? 0.0 : max(_3019, 0.0));
        float _3023 = _3000 * _3000;
        float _3027 = ((_3018 * _3018) * (_3023 + (-1.0))) + 1.0;
        float _3034 = exp2(log2(1.0 - (isnan(1.0) ? _4993 : (isnan(_4993) ? 1.0 : min(_4993, 1.0)))) * 5.0);
        float _3041 = 1.0 - _3000;
        float _3051 = (0.5 / (((_2668 * ((_3014 * _3041) + _3000)) + 9.9999999392252902907785028219223e-09) + (((_2668 * _3041) + _3000) * _3014))) * _3014;
        float _5004 = isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : max(_3051, 0.0));
        float _3053 = (isnan(1.0) ? _5004 : (isnan(_5004) ? 1.0 : min(_5004, 1.0))) * (_3023 / ((_3027 * _3027) * 3.141590118408203125));
        float _3054 = isnan(1.0) ? _2408 : (isnan(_2408) ? 1.0 : min(_2408, 1.0));
        _2970 = (((((_3034 * _2690) + _1048) * cbLight._m0[_2985].x) * _3053) * _3054) + _2860;
        _2972 = (((((_3034 * _2692) + _1050) * cbLight._m0[_2985].y) * _3053) * _3054) + _2862;
        _2974 = (((((_3034 * _2693) + _1051) * cbLight._m0[_2985].z) * _3053) * _3054) + _2864;
    }
    float _3120;
    float _3122;
    float _3124;
    float _3126;
    float _3128;
    float _3130;
    if (_2390.y == 0u)
    {
        uvec4 _3075 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3076 = _3075.x;
        uint _3087 = uint((float(_3075.y) * floor(float(uint(cbSceneParam._m0[85u].y * _987) / _3076))) + floor(float(uint(cbSceneParam._m0[85u].x * _986) / _3076)));
        float _3097 = (log2(_2168 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3098 = isnan(0.0) ? _3097 : (isnan(_3097) ? 0.0 : max(_3097, 0.0));
        uint _3101 = uint(isnan(14.0) ? _3098 : (isnan(_3098) ? 14.0 : min(_3098, 14.0)));
        uvec4 _3106 = texelFetch(g_lightClusterGridBuffer, int(((_3101 << 2u) + (_3087 << 6u)) >> 2u));
        uint _3107 = _3106.x;
        uint _3108 = _3075.z;
        float _3187;
        float _3189;
        float _3191;
        float _3193;
        float _3195;
        float _3197;
        if (((((1u << ((_3108 >> 4u) & 15u)) + 4294967295u) & _3107) == 0u) || ((_3108 & 240u) == 0u))
        {
            _3187 = 0.0;
            _3189 = 0.0;
            _3191 = 0.0;
            _3193 = 0.0;
            _3195 = 0.0;
            _3197 = 0.0;
        }
        else
        {
            float _3188;
            float _3190;
            float _3192;
            float _3194;
            float _3196;
            float _3198;
            float _3340 = 0.0;
            float _3341 = 0.0;
            float _3342 = 0.0;
            float _3343 = 0.0;
            float _3344 = 0.0;
            float _3345 = 0.0;
            uint _3346 = 0u;
            uint _3355;
            bool _3356;
            for (;;)
            {
                _3355 = texelFetch(g_lightClassification, int((((_3101 << 5u) + (_3087 << 9u)) + (_3346 << 2u)) >> 2u)).x;
                _3356 = _3355 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3356)
                {
                    frontier_phi_73_pred = _3345;
                    frontier_phi_73_pred_1 = _3344;
                    frontier_phi_73_pred_2 = _3343;
                    frontier_phi_73_pred_3 = _3342;
                    frontier_phi_73_pred_4 = _3341;
                    frontier_phi_73_pred_5 = _3340;
                }
                else
                {
                    float _3485;
                    float _3486;
                    float _3487;
                    float _3488;
                    float _3489;
                    float _3490;
                    uint _3491;
                    _3485 = _3340;
                    _3486 = _3341;
                    _3487 = _3342;
                    _3488 = _3343;
                    _3489 = _3344;
                    _3490 = _3345;
                    _3491 = _3355;
                    float _3412;
                    float _3413;
                    float _3414;
                    float _3415;
                    float _3416;
                    float _3417;
                    for (;;)
                    {
                        uint _3495 = uint(findLSB(_3491)) + (_3346 << 5u);
                        uint _3492 = (_3491 + 4294967295u) & _3491;
                        uint _3497 = _3495 * 48u;
                        vec4 _3511 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3497)).x, texelFetch(g_PointLightRenderingBuffer, int(_3497 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3497 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3497 + 3u)).x));
                        uint _3517 = (_3495 * 48u) + 4u;
                        vec4 _3530 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3517)).x, texelFetch(g_PointLightRenderingBuffer, int(_3517 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3517 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3517 + 3u)).x));
                        uint _3536 = (_3495 * 48u) + 8u;
                        vec3 _3547 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3536)).x, texelFetch(g_PointLightRenderingBuffer, int(_3536 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3536 + 2u)).x));
                        float _3551 = _3511.x - _2166;
                        float _3552 = _3511.y - _2167;
                        float _3553 = _3511.z - _2168;
                        float _3554 = dot(vec3(_3551, _3552, _3553), vec3(_3551, _3552, _3553));
                        float _3557 = inversesqrt(_3554);
                        float _3558 = _3557 * _3551;
                        float _3559 = _3557 * _3552;
                        float _3560 = _3557 * _3553;
                        float _3561 = dot(vec3(_1005, _1008, _1011), vec3(_3558, _3559, _3560));
                        float _3566 = 1.0 - (_3554 * _3511.w);
                        float _5030 = isnan(0.0) ? _3566 : (isnan(_3566) ? 0.0 : max(_3566, 0.0));
                        float _3567 = isnan(1.0) ? _5030 : (isnan(_5030) ? 1.0 : min(_5030, 1.0));
                        float _3568 = sqrt(_3554) * _3530.w;
                        float _3571 = 1.39999997615814208984375 / (_3568 + 1.39999997615814208984375);
                        float _3572 = _3571 * _3571;
                        float _3575 = ((1.0 - _3572) * _3561) + _3572;
                        float _3578 = _3568 * _3568;
                        float _3582 = ((isnan(0.0) ? _3575 : (isnan(_3575) ? 0.0 : max(_3575, 0.0))) * _3567) / ((_3578 * 0.699999988079071044921875) + 1.0);
                        float _3586 = (-0.0) - _2166;
                        float _3587 = (-0.0) - _2167;
                        float _3588 = (-0.0) - _2168;
                        float _3592 = inversesqrt(dot(vec3(_3586, _3587, _3588), vec3(_3586, _3587, _3588)));
                        float _3593 = _3592 * _3586;
                        float _3594 = _3592 * _3587;
                        float _3595 = _3592 * _3588;
                        float _3602 = exp2(log2(1.0 / ((_3578 * 3.5) + 5.0)) * 0.25);
                        float _3603 = 1.0 - _1080;
                        float _3610 = sqrt(1.0 - ((1.0 - (_3603 * _3603)) * (1.0 - (_3602 * _3602))));
                        float _3611 = _3610 * _3610;
                        float _3612 = _3611 * _3611;
                        float _3613 = _3593 + _3558;
                        float _3614 = _3594 + _3559;
                        float _3615 = _3595 + _3560;
                        float _3619 = inversesqrt(dot(vec3(_3613, _3614, _3615), vec3(_3613, _3614, _3615)));
                        float _3623 = dot(vec3(_1005, _1008, _1011), vec3(_3593, _3594, _3595));
                        float _5046 = isnan(0.0) ? _3623 : (isnan(_3623) ? 0.0 : max(_3623, 0.0));
                        float _3626 = isnan(1.0) ? _5046 : (isnan(_5046) ? 1.0 : min(_5046, 1.0));
                        float _3627 = dot(vec3(_1005, _1008, _1011), vec3(_3619 * _3613, _3619 * _3614, _3619 * _3615));
                        float _5057 = isnan(0.0) ? _3627 : (isnan(_3627) ? 0.0 : max(_3627, 0.0));
                        float _3630 = isnan(1.0) ? _5057 : (isnan(_5057) ? 1.0 : min(_5057, 1.0));
                        float _3634 = ((_3630 * _3630) * (_3612 + (-1.0))) + 1.0;
                        float _3635 = _3571 * _3611;
                        float _3636 = _3635 * _3635;
                        float _3639 = ((1.0 - _3636) * _3561) + _3636;
                        float _5068 = isnan(0.0) ? _3639 : (isnan(_3639) ? 0.0 : max(_3639, 0.0));
                        float _3640 = isnan(1.0) ? _5068 : (isnan(_5068) ? 1.0 : min(_5068, 1.0));
                        float _3641 = 1.0 - _3611;
                        float _3651 = (0.5 / (((_3640 * ((_3626 * _3641) + _3611)) + 9.9999999392252902907785028219223e-09) + (((_3640 * _3641) + _3611) * _3626))) * _3640;
                        float _5079 = isnan(0.0) ? _3651 : (isnan(_3651) ? 0.0 : max(_3651, 0.0));
                        float _3662 = (((_3612 * 3.1415927410125732421875) * (isnan(1.0) ? _5079 : (isnan(_5079) ? 1.0 : min(_5079, 1.0)))) / ((_3634 * _3634) * ((_3578 * 2.1991131305694580078125) + 3.141590118408203125))) * _3567;
                        _3415 = (_3582 * _3530.x) + _3488;
                        _3416 = (_3582 * _3530.y) + _3489;
                        _3417 = (_3582 * _3530.z) + _3490;
                        _3412 = (_3662 * _3547.x) + _3485;
                        _3413 = (_3662 * _3547.y) + _3486;
                        _3414 = (_3662 * _3547.z) + _3487;
                        if (_3492 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3485 = _3412;
                            _3486 = _3413;
                            _3487 = _3414;
                            _3488 = _3415;
                            _3489 = _3416;
                            _3490 = _3417;
                            _3491 = _3492;
                        }
                    }
                    frontier_phi_73_pred = _3417;
                    frontier_phi_73_pred_1 = _3416;
                    frontier_phi_73_pred_2 = _3415;
                    frontier_phi_73_pred_3 = _3414;
                    frontier_phi_73_pred_4 = _3413;
                    frontier_phi_73_pred_5 = _3412;
                }
                _3198 = frontier_phi_73_pred;
                _3196 = frontier_phi_73_pred_1;
                _3194 = frontier_phi_73_pred_2;
                _3192 = frontier_phi_73_pred_3;
                _3190 = frontier_phi_73_pred_4;
                _3188 = frontier_phi_73_pred_5;
                uint _3347 = _3346 + 1u;
                if (_3347 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3340 = _3188;
                    _3341 = _3190;
                    _3342 = _3192;
                    _3343 = _3194;
                    _3344 = _3196;
                    _3345 = _3198;
                    _3346 = _3347;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3187 = _3188;
            _3189 = _3190;
            _3191 = _3192;
            _3193 = _3194;
            _3195 = _3196;
            _3197 = _3198;
        }
        uvec4 _3201 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3202 = _3201.z;
        uint _3204 = (_3202 >> 8u) & 15u;
        float _3308;
        float _3310;
        float _3312;
        float _3314;
        float _3316;
        float _3318;
        if (((4294967295u << _3204) & _3107) == 0u)
        {
            _3308 = _3187;
            _3310 = _3189;
            _3312 = _3191;
            _3314 = _3193;
            _3316 = _3195;
            _3318 = _3197;
        }
        else
        {
            float _3333 = inversesqrt(dot(vec3(_2166, _2167, _2168), vec3(_2166, _2167, _2168)));
            float _3334 = _3333 * _2166;
            float _3335 = _3333 * _2167;
            float _3336 = _3333 * _2168;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_3204 < ((_3202 >> 12u) & 15u))
            {
                float _3309;
                float _3311;
                float _3313;
                float _3315;
                float _3317;
                float _3319;
                float _3468 = _3187;
                float _3469 = _3189;
                float _3470 = _3191;
                float _3471 = _3193;
                float _3472 = _3195;
                float _3473 = _3197;
                uint _3474 = _3204;
                uint _3483;
                bool _3484;
                for (;;)
                {
                    _3483 = texelFetch(g_lightClassification, int((((_3101 << 5u) + (_3087 << 9u)) + (_3474 << 2u)) >> 2u)).x;
                    _3484 = _3483 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3484)
                    {
                        frontier_phi_84_pred = _3473;
                        frontier_phi_84_pred_1 = _3472;
                        frontier_phi_84_pred_2 = _3471;
                        frontier_phi_84_pred_3 = _3470;
                        frontier_phi_84_pred_4 = _3469;
                        frontier_phi_84_pred_5 = _3468;
                    }
                    else
                    {
                        float _3676;
                        float _3677;
                        float _3678;
                        float _3679;
                        float _3680;
                        float _3681;
                        float _3969;
                        float _3970;
                        float _3971;
                        float _3972;
                        float _3973;
                        float _3974;
                        float _3689 = _3468;
                        float _3690 = _3469;
                        float _3691 = _3470;
                        float _3692 = _3471;
                        float _3693 = _3472;
                        float _3694 = _3473;
                        uint _3695 = _3483;
                        uint _3696;
                        vec4 _3721;
                        float _3722;
                        vec4 _3737;
                        vec3 _3749;
                        vec4 _3764;
                        vec4 _3779;
                        float _3825;
                        bool _3826;
                        for (;;)
                        {
                            uint _3706 = ((_3474 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3695));
                            _3696 = (_3695 + 4294967295u) & _3695;
                            uint _3708 = _3706 * 40u;
                            _3721 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3708)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3708 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3708 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3708 + 3u)).x));
                            _3722 = _3721.w;
                            uint _3724 = (_3706 * 40u) + 4u;
                            _3737 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3724)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3724 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3724 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3724 + 3u)).x));
                            uint _3739 = (_3706 * 40u) + 8u;
                            _3749 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3739)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3739 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3739 + 2u)).x));
                            uint _3751 = (_3706 * 40u) + 16u;
                            _3764 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3751)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3751 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3751 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3751 + 3u)).x));
                            uint _3766 = (_3706 * 40u) + 20u;
                            _3779 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3766)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3766 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3766 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3766 + 3u)).x));
                            uint _3781 = (_3706 * 40u) + 24u;
                            vec4 _3794 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3781)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3781 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3781 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3781 + 3u)).x));
                            uint _3800 = (_3706 * 40u) + 28u;
                            vec4 _3813 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3800)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3800 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3800 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3800 + 3u)).x));
                            _3825 = fma(_2168, _3813.z, fma(_2167, _3813.y, _3813.x * _2166)) + _3813.w;
                            _3826 = !((fma(_2168, _3794.z, fma(_2167, _3794.y, _3794.x * _2166)) + _3794.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3826)
                            {
                                float _3853 = _3721.x - _2166;
                                float _3854 = _3721.y - _2167;
                                float _3855 = _3721.z - _2168;
                                float _3856 = dot(vec3(_3853, _3854, _3855), vec3(_3853, _3854, _3855));
                                float _3859 = inversesqrt(_3856);
                                float _3860 = _3859 * _3853;
                                float _3861 = _3859 * _3854;
                                float _3862 = _3859 * _3855;
                                float _3866 = 1.0 - (_3856 / (_3722 * _3722));
                                float _5090 = isnan(0.0) ? _3866 : (isnan(_3866) ? 0.0 : max(_3866, 0.0));
                                float _3867 = isnan(1.0) ? _5090 : (isnan(_5090) ? 1.0 : min(_5090, 1.0));
                                float _3871 = sqrt(_3856) * _3737.w;
                                float _3873 = 1.39999997615814208984375 / (_3871 + 1.39999997615814208984375);
                                float _3874 = _3873 * _3873;
                                float _3877 = ((1.0 - _3874) * dot(vec3(_3860, _3861, _3862), vec3(_1005, _1008, _1011))) + _3874;
                                float _3880 = _3871 * _3871;
                                float _3884 = (fma(_2168, _3764.z, fma(_2167, _3764.y, _3764.x * _2166)) + _3764.w) / _3825;
                                float _3885 = (fma(_2168, _3779.z, fma(_2167, _3779.y, _3779.x * _2166)) + _3779.w) / _3825;
                                float _3889 = 1.0 - dot(vec2(_3884, _3885), vec2(_3884, _3885));
                                float _5106 = isnan(0.0) ? _3889 : (isnan(_3889) ? 0.0 : max(_3889, 0.0));
                                float _3890 = isnan(1.0) ? _5106 : (isnan(_5106) ? 1.0 : min(_5106, 1.0));
                                float _3891 = _3890 * (((isnan(0.0) ? _3877 : (isnan(_3877) ? 0.0 : max(_3877, 0.0))) * _3867) / ((_3880 * 0.699999988079071044921875) + 1.0));
                                float _3903 = exp2(log2(1.0 / ((_3880 * 3.5) + 5.0)) * 0.25);
                                float _3904 = 1.0 - _1080;
                                float _3911 = sqrt(1.0 - ((1.0 - (_3904 * _3904)) * (1.0 - (_3903 * _3903))));
                                float _3912 = _3911 * _3911;
                                float _3913 = _3912 * _3912;
                                float _3914 = _3860 - _3334;
                                float _3915 = _3861 - _3335;
                                float _3916 = _3862 - _3336;
                                float _3920 = inversesqrt(dot(vec3(_3914, _3915, _3916), vec3(_3914, _3915, _3916)));
                                float _3924 = dot(vec3(_1005, _1008, _1011), vec3((-0.0) - _3334, (-0.0) - _3335, (-0.0) - _3336));
                                float _5117 = isnan(0.0) ? _3924 : (isnan(_3924) ? 0.0 : max(_3924, 0.0));
                                float _3927 = isnan(1.0) ? _5117 : (isnan(_5117) ? 1.0 : min(_5117, 1.0));
                                float _3928 = dot(vec3(_1005, _1008, _1011), vec3(_3920 * _3914, _3920 * _3915, _3920 * _3916));
                                float _5128 = isnan(0.0) ? _3928 : (isnan(_3928) ? 0.0 : max(_3928, 0.0));
                                float _3931 = isnan(1.0) ? _5128 : (isnan(_5128) ? 1.0 : min(_5128, 1.0));
                                float _3935 = ((_3931 * _3931) * (_3913 + (-1.0))) + 1.0;
                                float _3936 = _3873 * _3912;
                                float _3937 = _3936 * _3936;
                                float _3943 = ((1.0 - _3937) * dot(vec3(_1005, _1008, _1011), vec3(_3860, _3861, _3862))) + _3937;
                                float _5139 = isnan(0.0) ? _3943 : (isnan(_3943) ? 0.0 : max(_3943, 0.0));
                                float _3944 = isnan(1.0) ? _5139 : (isnan(_5139) ? 1.0 : min(_5139, 1.0));
                                float _3945 = 1.0 - _3912;
                                float _3955 = (0.5 / (((_3944 * ((_3927 * _3945) + _3912)) + 9.9999999392252902907785028219223e-09) + (((_3944 * _3945) + _3912) * _3927))) * _3944;
                                float _5150 = isnan(0.0) ? _3955 : (isnan(_3955) ? 0.0 : max(_3955, 0.0));
                                float _3965 = (_3890 * _3867) * (((_3913 * 3.1415927410125732421875) * (isnan(1.0) ? _5150 : (isnan(_5150) ? 1.0 : min(_5150, 1.0)))) / ((_3935 * _3935) * ((_3880 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3891 * _3737.z;
                                frontier_phi_90_pred_1 = _3891 * _3737.y;
                                frontier_phi_90_pred_2 = _3891 * _3737.x;
                                frontier_phi_90_pred_3 = _3965 * _3749.z;
                                frontier_phi_90_pred_4 = _3965 * _3749.y;
                                frontier_phi_90_pred_5 = _3965 * _3749.x;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3974 = frontier_phi_90_pred;
                            _3973 = frontier_phi_90_pred_1;
                            _3972 = frontier_phi_90_pred_2;
                            _3971 = frontier_phi_90_pred_3;
                            _3970 = frontier_phi_90_pred_4;
                            _3969 = frontier_phi_90_pred_5;
                            _3679 = _3972 + _3692;
                            _3680 = _3973 + _3693;
                            _3681 = _3974 + _3694;
                            _3676 = _3969 + _3689;
                            _3677 = _3970 + _3690;
                            _3678 = _3971 + _3691;
                            if (_3696 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3689 = _3676;
                                _3690 = _3677;
                                _3691 = _3678;
                                _3692 = _3679;
                                _3693 = _3680;
                                _3694 = _3681;
                                _3695 = _3696;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3681;
                        frontier_phi_84_pred_1 = _3680;
                        frontier_phi_84_pred_2 = _3679;
                        frontier_phi_84_pred_3 = _3678;
                        frontier_phi_84_pred_4 = _3677;
                        frontier_phi_84_pred_5 = _3676;
                    }
                    _3319 = frontier_phi_84_pred;
                    _3317 = frontier_phi_84_pred_1;
                    _3315 = frontier_phi_84_pred_2;
                    _3313 = frontier_phi_84_pred_3;
                    _3311 = frontier_phi_84_pred_4;
                    _3309 = frontier_phi_84_pred_5;
                    uint _3475 = _3474 + 1u;
                    if (_3475 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3468 = _3309;
                        _3469 = _3311;
                        _3470 = _3313;
                        _3471 = _3315;
                        _3472 = _3317;
                        _3473 = _3319;
                        _3474 = _3475;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _3315;
                frontier_phi_65_66_ladder_1 = _3319;
                frontier_phi_65_66_ladder_2 = _3317;
                frontier_phi_65_66_ladder_3 = _3313;
                frontier_phi_65_66_ladder_4 = _3311;
                frontier_phi_65_66_ladder_5 = _3309;
            }
            else
            {
                frontier_phi_65_66_ladder = _3193;
                frontier_phi_65_66_ladder_1 = _3197;
                frontier_phi_65_66_ladder_2 = _3195;
                frontier_phi_65_66_ladder_3 = _3191;
                frontier_phi_65_66_ladder_4 = _3189;
                frontier_phi_65_66_ladder_5 = _3187;
            }
            _3308 = frontier_phi_65_66_ladder_5;
            _3310 = frontier_phi_65_66_ladder_4;
            _3312 = frontier_phi_65_66_ladder_3;
            _3314 = frontier_phi_65_66_ladder;
            _3316 = frontier_phi_65_66_ladder_2;
            _3318 = frontier_phi_65_66_ladder_1;
        }
        float _3323 = isnan(1.0) ? _1064 : (isnan(_1064) ? 1.0 : min(_1064, 1.0));
        _3120 = (_3323 * _3314) + _2632;
        _3122 = (_3323 * _3316) + _2634;
        _3124 = (_3323 * _3318) + _2636;
        _3126 = ((_3308 * _1048) * _3323) + _2970;
        _3128 = ((_3310 * _1050) * _3323) + _2972;
        _3130 = ((_3312 * _1051) * _3323) + _2974;
    }
    else
    {
        _3120 = _2632;
        _3122 = _2634;
        _3124 = _2636;
        _3126 = _2970;
        _3128 = _2972;
        _3130 = _2974;
    }
    float _5166 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
    float _5177 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
    float _5188 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
    float _3147 = ((isnan(1.0) ? _5166 : (isnan(_5166) ? 1.0 : min(_5166, 1.0))) * (_3120 + ((isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0))) * _1064))) + ((_3126 + ((isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0))) * _1898)) * cbPerFrame._m0[3u].x);
    float _3148 = ((isnan(1.0) ? _5177 : (isnan(_5177) ? 1.0 : min(_5177, 1.0))) * (_3122 + ((isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0))) * _1064))) + ((_3128 + ((isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0))) * _1898)) * cbPerFrame._m0[3u].x);
    float _3149 = ((isnan(1.0) ? _5188 : (isnan(_5188) ? 1.0 : min(_5188, 1.0))) * (_3124 + ((isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0))) * _1064))) + ((_3130 + ((isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0))) * _1898)) * cbPerFrame._m0[3u].x);
    uint _3150 = _284 + 6u;
    float _3158 = _986 / cbSceneParam._m0[86u].x;
    float _3159 = _987 / cbSceneParam._m0[86u].y;
    vec4 _3173 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3158, _3159, (log2((isnan(cbSceneParam._m0[77u].w) ? _911 : (isnan(_911) ? cbSceneParam._m0[77u].w : min(_911, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3175 = _3173.x;
    float _3176 = _3173.y;
    float _3177 = _3173.z;
    float _3178 = _3173.w;
    float _3250;
    float _3252;
    float _3254;
    float _3256;
    if (_911 > cbSceneParam._m0[78u].w)
    {
        float _3212 = isnan(_911) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _911 : min(cbSceneParam._m0[80u].w, _911));
        float _3213 = _3212 / _911;
        float _3224 = _3213 * _962;
        float _3225 = _963 * _3213;
        float _3226 = (-0.0) - _3225;
        float _3228 = _3213 * _964;
        float _3230 = (cbSceneParam._m0[77u].w * _3226) / _3212;
        float _3231 = _3230 + cbSceneParam._m0[79u].w;
        float _3232 = cbSceneParam._m0[79u].w - _3225;
        float _3238 = sqrt(((_3224 * _3224) + (_3225 * _3225)) + (_3228 * _3228));
        float _3241 = (1.0 - (cbSceneParam._m0[77u].w / _3212)) * _3238;
        float _3246 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3248 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3425;
        if (abs((_3226 - _3230) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3425 = ((((_3231 > 0.0) ? exp2(_3246 * _3231) : (2.0 - exp2(_3248 * _3231))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3241;
        }
        else
        {
            float _3369 = 1.0 / cbSceneParam._m0[80u].x;
            float _3370 = isnan(_3232) ? _3231 : (isnan(_3231) ? _3232 : max(_3231, _3232));
            float _3371 = isnan(_3232) ? _3231 : (isnan(_3231) ? _3232 : min(_3231, _3232));
            float _3380 = isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : min(_3370, 0.0));
            float _3381 = isnan(0.0) ? _3371 : (isnan(_3371) ? 0.0 : min(_3371, 0.0));
            _3425 = ((abs(_3238 / _3226) * cbSceneParam._m0[80u].y) * ((((_3380 - _3381) * 2.0) - ((exp2(_3246 * (isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : max(_3370, 0.0)))) - exp2(_3246 * (isnan(0.0) ? _3371 : (isnan(_3371) ? 0.0 : max(_3371, 0.0))))) * _3369)) - ((exp2(_3248 * _3380) - exp2(_3248 * _3381)) * _3369))) + (_3241 * cbSceneParam._m0[80u].z);
        }
        vec4 _3427 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3158, _3159, 1.0), 0.0);
        float _3436 = exp2((_3425 * (-1.44269502162933349609375)) * (1.0 - _3427.w));
        float _3437 = log2(_3436);
        float _3453 = log2(_3178);
        _3250 = (exp2(_3453 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3437 * cbSceneParam._m0[78u].x)) * _3427.x) / cbSceneParam._m0[78u].x)) + _3175;
        _3252 = (exp2(_3453 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3437 * cbSceneParam._m0[78u].y)) * _3427.y) / cbSceneParam._m0[78u].y)) + _3176;
        _3254 = (exp2(_3453 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3437 * cbSceneParam._m0[78u].z)) * _3427.z) / cbSceneParam._m0[78u].z)) + _3177;
        _3256 = _3436 * _3178;
    }
    else
    {
        _3250 = _3175;
        _3252 = _3176;
        _3254 = _3177;
        _3256 = _3178;
    }
    bool _3463;
    vec4 _3266;
    vec4 _3288;
    float _3290;
    float _3294;
    float _3295;
    float _3296;
    float _3297;
    bool _3307;
    for (;;)
    {
        _3266 = cbMatDynParam._m0[0u];
        float _3268 = roundEven(_3266.y);
        bool _3269 = _3268 == 3.0;
        float _3270 = log2(_3256);
        float _3277 = exp2(_3270 * cbSceneParam._m0[78u].x) * _3147;
        float _3278 = exp2(_3270 * cbSceneParam._m0[78u].y) * _3148;
        float _3279 = exp2(_3270 * cbSceneParam._m0[78u].z) * _3149;
        float _3286 = _975 + (-0.5);
        _3288 = cbMtdParam._m0[1u];
        _3290 = _3288.y * _3286;
        float _3293 = (_3268 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3294 = _3293 * (_3269 ? _3277 : (_3277 + (cbSceneParam._m0[72u].w * _3250)));
        _3295 = _3293 * (_3269 ? _3278 : (_3278 + (cbSceneParam._m0[72u].w * _3252)));
        _3296 = _3293 * (_3269 ? _3279 : (_3279 + (cbSceneParam._m0[72u].w * _3254)));
        _3297 = _3286 * 0.999000012874603271484375;
        _3307 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3307)
        {
            if ((cbInstanceData._m0[_284 + 7u].x + _3297) < 0.5)
            {
                _3463 = true;
                break;
            }
        }
        uint _3404 = _1024 + uint(_3266.w);
        if ((cbInstanceData._m0[_3404].w < 1.0) && ((cbInstanceData._m0[_3404].w + _3297) < 0.5))
        {
            _3463 = true;
            break;
        }
        if ((_3290 + 1.0) < _3288.x)
        {
            _3463 = true;
            break;
        }
        _3463 = false;
        break;
    }
    float _3667;
    if (_3463)
    {
        discard_state = true;
        _3667 = 0.0;
    }
    else
    {
        _3667 = cbInstanceData._m0[_3150].w;
    }
    SV_Target.x = _3294;
    SV_Target.y = _3295;
    SV_Target.z = _3296;
    SV_Target.w = _3667;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3150].w;
    discard_exit();
}


