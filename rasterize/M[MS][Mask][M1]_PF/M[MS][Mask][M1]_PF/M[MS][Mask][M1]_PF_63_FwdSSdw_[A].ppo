#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1463;
float _3866;
float _3867;
float _3868;
float _3869;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _233 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _234 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _235 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _241 = inversesqrt(dot(vec3(_233, _234, _235), vec3(_233, _234, _235)));
    float _248 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _255 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _269 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _271 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3878 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _3889 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    float _3900 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    uint _282 = uint(roundEven(NORMAL.w)) * 13u;
    uint _287 = _282 + 1u;
    uint _291 = _282 + 2u;
    float _300 = sqrt(((cbInstanceData._m0[_287].x * cbInstanceData._m0[_287].x) + (cbInstanceData._m0[_282].x * cbInstanceData._m0[_282].x)) + (cbInstanceData._m0[_291].x * cbInstanceData._m0[_291].x));
    float _301 = _300 * TEXCOORD.z;
    float _302 = _300 * TEXCOORD.w;
    vec4 _315 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _301) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _302) + cbTextureTilingScale._m0[13u].w));
    vec4 _339 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _344 = _339.x * cbMtdParam._m0[11u].x;
    float _345 = _339.y * cbMtdParam._m0[11u].y;
    float _346 = _339.z * cbMtdParam._m0[11u].z;
    vec4 _365 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _301) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _302) + cbTextureTilingScale._m0[5u].w));
    vec4 _384 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _414 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[27u].x * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].y * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _416 = _414.x;
    float _428 = dot(vec4(_416, _414.yzw), vec4(cbMtdParam._m0[28u].w, cbMtdParam._m0[29u].xy, 0.0));
    float _445 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _384.x) * 2.0) - ((((_416 - _428) * cbMtdParam._m0[23u].w) + _428) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3911 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _446 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
    float _453 = (_446 * ((_365.x * cbMtdParam._m0[12u].x) - _344)) + _344;
    float _454 = (_446 * ((_365.y * cbMtdParam._m0[12u].y) - _345)) + _345;
    float _455 = (_446 * ((_365.z * cbMtdParam._m0[12u].z) - _346)) + _346;
    vec4 _472 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _301) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _302) + cbTextureTilingScale._m0[3u].w));
    vec4 _494 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].z * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].w * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _496 = _494.x;
    float _506 = dot(vec4(_496, _494.yzw), vec4(cbMtdParam._m0[30u].yzw, 0.0));
    float _520 = ((cbMtdParam._m0[25u].z * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _384.y) * 2.0) - ((((_496 - _506) * cbMtdParam._m0[23u].w) + _506) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3922 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _521 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
    float _528 = (_521 * ((_472.x * cbMtdParam._m0[13u].x) - _453)) + _453;
    float _529 = (_521 * ((_472.y * cbMtdParam._m0[13u].y) - _454)) + _454;
    float _530 = (_521 * ((_472.z * cbMtdParam._m0[13u].z) - _455)) + _455;
    float _534 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _315.x) * _528;
    float _537 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _315.y) * _529;
    float _540 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _315.z) * _530;
    float _547 = ((_528 - _534) * (isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0)))) + _534;
    float _548 = ((_529 - _537) * (isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0)))) + _537;
    float _549 = ((_530 - _540) * (isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0)))) + _540;
    vec4 _566 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _301) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _302) + cbTextureTilingScale._m0[20u].w));
    vec4 _589 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _301) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _302) + cbTextureTilingScale._m0[4u].w));
    vec4 _606 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _608 = _606.x;
    float _609 = _606.y;
    float _610 = _606.z;
    float _617 = ((_589.x - _608) * _446) + _608;
    float _618 = ((_589.y - _609) * _446) + _609;
    float _619 = ((_589.z - _610) * _446) + _610;
    vec4 _631 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _301) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _302) + cbTextureTilingScale._m0[2u].w));
    float _644 = ((_631.z - _619) * _521) + _619;
    float _647 = ((((_631.x - _617) * _521) + _617) * 2.0) + (-1.0);
    float _648 = ((((_631.y - _618) * _521) + _618) * 2.0) + (-1.0);
    float _649 = dot(vec2(_647, _648), vec2(_647, _648));
    float _3933 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _654 = sqrt(1.0 - (isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0))));
    vec4 _668 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _693 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _301) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _302) + cbTextureTilingScale._m0[11u].w));
    float _695 = _693.x;
    float _696 = 1.0 - _695;
    float _712 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_695 - _696) * cbMtdParam._m0[24u].z) + _696) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3944 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _713 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
    float _720 = (_713 * (cbMtdParam._m0[17u].x - _547)) + _547;
    float _721 = (_713 * (cbMtdParam._m0[17u].y - _548)) + _548;
    float _722 = (_713 * (cbMtdParam._m0[17u].z - _549)) + _549;
    vec4 _748 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _750 = _748.x;
    float _768 = ((texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _301) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _302) + cbTextureTilingScale._m0[9u].w)).x - _750) * _446) + _750;
    float _785 = ((texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _301) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _302) + cbTextureTilingScale._m0[21u].w)).x - _768) * _521) + _768;
    float _789 = ((texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _785) * cbMtdParam._m0[19u].z) + _785;
    float _791 = _789 - (_789 * _713);
    float _796 = (((_566.z - _644) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _644;
    float _800 = ((_668.z - _796) * cbMtdParam._m0[19u].w) + _796;
    vec4 _813 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _301) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _302) + cbTextureTilingScale._m0[15u].w));
    float _820 = (_813.x * 2.0) + (-1.0);
    float _821 = (_813.y * 2.0) + (-1.0);
    float _822 = dot(vec2(_820, _821), vec2(_820, _821));
    float _3955 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
    float _830 = (_713 * (_813.z - _800)) + _800;
    float _839 = (_647 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_566.x * 2.0) + (-1.0)))) + (((_668.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w);
    float _840 = (_648 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_566.y * 2.0) + (-1.0)))) + (((_668.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w);
    float _852 = (((_820 - _839) + (cbMtdParam._m0[21u].x * _839)) * _713) + _839;
    float _853 = (((_821 - _840) + (cbMtdParam._m0[21u].x * _840)) * _713) + _840;
    float _854 = (_713 * (sqrt(1.0 - (isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0)))) - _654)) + _654;
    float _858 = cbMtdParam._m0[22u].x + _668.w;
    float _860 = gl_FragCoord.x * 0.125;
    float _862 = gl_FragCoord.y * 0.125;
    float _872 = fma(_854, _248 * NORMAL.x, fma(_853, _255 * TANGENT.x, (_241 * _233) * _852));
    float _875 = fma(_854, _248 * NORMAL.y, fma(_853, _255 * TANGENT.y, (_241 * _234) * _852));
    float _878 = fma(_854, _248 * NORMAL.z, fma(_853, _255 * TANGENT.z, (_241 * _235) * _852));
    float _882 = inversesqrt(dot(vec3(_872, _875, _878), vec3(_872, _875, _878)));
    float _883 = _882 * _872;
    float _884 = _882 * _875;
    float _885 = _882 * _878;
    float _3966 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
    float _886 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
    float _3977 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
    float _3988 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
    float _3999 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
    float _4010 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _4021 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
    float _891 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
    if (!(cbMtdParam._m0[25u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_860, _862)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _909 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _950 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _960 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _950);
    float _961 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _950);
    float _962 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _950);
    float _966 = inversesqrt(dot(vec3(_960, _961, _962), vec3(_960, _961, _962)));
    float _967 = _960 * _966;
    float _968 = _961 * _966;
    float _969 = _962 * _966;
    vec4 _971 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_860, _862));
    float _973 = _971.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1145 = sqrt(((_960 * _960) + (_961 * _961)) + (_962 * _962));
        float _1151 = (cbMatDynParam._m0[5u].x * _1145) + cbMatDynParam._m0[5u].y;
        float _4032 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1152 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
        float _1156 = (cbMatDynParam._m0[5u].z * _1145) + cbMatDynParam._m0[5u].w;
        float _4043 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0))) - _1152)) + _1152) < ((_973 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _984 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _985 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1003 = fma(_885, cbSceneParam._m0[5u].z, fma(_884, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _883));
    float _1006 = fma(_885, cbSceneParam._m0[6u].z, fma(_884, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _883));
    float _1009 = fma(_885, cbSceneParam._m0[7u].z, fma(_884, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _883));
    uint _1022 = _282 + 9u;
    uint _1023 = _1022 + uint(cbMatDynParam._m0[0u].w);
    float _1029 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0)))) * cbInstanceData._m0[_1023].x;
    float _1030 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0)))) * cbInstanceData._m0[_1023].y;
    float _1031 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0)))) * cbInstanceData._m0[_1023].z;
    float _4054 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
    float _1032 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
    float _4065 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
    float _1033 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
    float _4076 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
    float _1034 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
    float _1035 = 1.0 - _891;
    float _1036 = _1032 * _1035;
    float _1037 = _1033 * _1035;
    float _1038 = _1034 * _1035;
    float _1043 = (_1032 + (-0.039999999105930328369140625)) * _891;
    float _1044 = (_1033 + (-0.039999999105930328369140625)) * _891;
    float _1045 = (_1034 + (-0.039999999105930328369140625)) * _891;
    float _1046 = _1043 + 0.039999999105930328369140625;
    float _1048 = _1044 + 0.039999999105930328369140625;
    float _1049 = _1045 + 0.039999999105930328369140625;
    vec4 _1058 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _984, cbSceneParam._m0[86u].y * _985));
    float _1062 = ((isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0))) * TEXCOORD_5.w) * _1058.x;
    float _1063 = dot(vec3(_883, _884, _885), vec3(_967, _968, _969));
    float _1066 = _1063 * 2.0;
    float _1070 = (_1066 * _883) - _967;
    float _1071 = (_1066 * _884) - _968;
    float _1072 = (_1066 * _885) - _969;
    float _1076 = abs(dot(vec3(_967, _968, _969), vec3(_883, _884, _885)));
    float _4087 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
    float _1078 = sqrt(_886);
    float _1091 = exp2((_1078 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1078 * 3.0));
    float _1097 = (1.0 - _1091) * ((_1078 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1098 = _1091 * _1078;
    float _1126 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1130 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1134 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1462;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1187 = fma(_1134, cbModelParam._m0[26u].z, fma(_1130, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1126));
        float _1191 = fma(_1134, cbModelParam._m0[27u].z, fma(_1130, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1126));
        float _1195 = fma(_1134, cbModelParam._m0[28u].z, fma(_1130, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1126));
        float _1220 = _1126 + _883;
        float _1221 = _1130 + _884;
        float _1222 = _1134 + _885;
        float _1232 = fma(_1222, cbModelParam._m0[26u].z, fma(_1221, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1220)) - _1187;
        float _1233 = fma(_1222, cbModelParam._m0[27u].z, fma(_1221, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1220)) - _1191;
        float _1234 = fma(_1222, cbModelParam._m0[28u].z, fma(_1221, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1220)) - _1195;
        float _1238 = inversesqrt(dot(vec3(_1232, _1233, _1234), vec3(_1232, _1233, _1234)));
        float _1251 = ((_1238 * _1232) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1187 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1252 = ((_1238 * _1233) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1191 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1253 = ((_1238 * _1234) / cbModelParam._m0[34u].z) + ((((((_1195 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1256 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1251, _1252, _1253), 0.0);
        vec4 _1263 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1251, _1252, _1253), 0.0);
        vec4 _1270 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1251, _1252, _1253), 0.0);
        vec4 _1277 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1251, _1252, _1253), 0.0);
        float _1290 = exp2((_1256.w + (-0.5)) * 20.0) * 2.0;
        float _1291 = _1290 * (_1256.x + (-0.5));
        float _1292 = _1290 * (_1256.y + (-0.5));
        float _1293 = _1290 * (_1256.z + (-0.5));
        float _1300 = exp2((_1263.w + (-0.5)) * 20.0) * 2.0;
        float _1301 = _1300 * (_1263.x + (-0.5));
        float _1302 = _1300 * (_1263.y + (-0.5));
        float _1303 = _1300 * (_1263.z + (-0.5));
        float _1310 = exp2((_1270.w + (-0.5)) * 20.0) * 2.0;
        float _1311 = _1310 * (_1270.x + (-0.5));
        float _1312 = _1310 * (_1270.y + (-0.5));
        float _1313 = _1310 * (_1270.z + (-0.5));
        float _1320 = exp2((_1277.w + (-0.5)) * 20.0) * 2.0;
        float _1321 = _1320 * (_1277.x + (-0.5));
        float _1322 = _1320 * (_1277.y + (-0.5));
        float _1323 = _1320 * (_1277.z + (-0.5));
        float _1324 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1325 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1326 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1327 = _1291 * 0.5;
        float _1328 = _1301 * 0.5;
        float _1329 = _1311 * 0.5;
        float _1330 = dot(vec3(_1327, _1328, _1329), vec3(_1327, _1328, _1329));
        float _1335 = (_1330 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1330);
        float _1344 = (dot(vec3(_883, _884, _885), vec3(_1335 * _1327, _1335 * _1328, _1335 * _1329)) + 1.0) * 0.5;
        float _4113 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1354 = sqrt(((_1328 * _1328) + (_1327 * _1327)) + (_1329 * _1329)) / (_1324 + 9.9999997473787516355514526367188e-06);
        float _4124 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1355 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
        float _1356 = _1355 * 2.0;
        float _1360 = (1.0 - _1355) / (_1355 + 1.0);
        float _4135 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1361 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
        float _1370 = ((((1.0 - _1361) * (_1356 + 2.0)) * exp2(log2(isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0))) * (_1356 + 1.0))) + _1361) * _1324;
        float _1371 = _1292 * 0.5;
        float _1372 = _1302 * 0.5;
        float _1373 = _1312 * 0.5;
        float _1374 = dot(vec3(_1371, _1372, _1373), vec3(_1371, _1372, _1373));
        float _1379 = (_1374 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1374);
        float _1387 = (dot(vec3(_883, _884, _885), vec3(_1379 * _1371, _1379 * _1372, _1379 * _1373)) + 1.0) * 0.5;
        float _4146 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1396 = sqrt(((_1372 * _1372) + (_1371 * _1371)) + (_1373 * _1373)) / (_1325 + 9.9999997473787516355514526367188e-06);
        float _4157 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1397 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
        float _1398 = _1397 * 2.0;
        float _1402 = (1.0 - _1397) / (_1397 + 1.0);
        float _4168 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1403 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
        float _1412 = ((((1.0 - _1403) * (_1398 + 2.0)) * exp2(log2(isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0))) * (_1398 + 1.0))) + _1403) * _1325;
        float _1413 = _1293 * 0.5;
        float _1414 = _1303 * 0.5;
        float _1415 = _1313 * 0.5;
        float _1416 = dot(vec3(_1413, _1414, _1415), vec3(_1413, _1414, _1415));
        float _1421 = (_1416 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1416);
        float _1429 = (dot(vec3(_883, _884, _885), vec3(_1421 * _1413, _1421 * _1414, _1421 * _1415)) + 1.0) * 0.5;
        float _4179 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1438 = sqrt(((_1414 * _1414) + (_1413 * _1413)) + (_1415 * _1415)) / (_1326 + 9.9999997473787516355514526367188e-06);
        float _4190 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1439 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
        float _1440 = _1439 * 2.0;
        float _1444 = (1.0 - _1439) / (_1439 + 1.0);
        float _4201 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1445 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
        float _1454 = ((((1.0 - _1445) * (_1440 + 2.0)) * exp2(log2(isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0))) * (_1440 + 1.0))) + _1445) * _1326;
        _1462 = _1293;
        _1464 = _1292;
        _1465 = _1291;
        _1466 = _1303;
        _1467 = _1302;
        _1468 = _1301;
        _1469 = _1313;
        _1470 = _1312;
        _1471 = _1311;
        _1472 = _1326;
        _1473 = _1325;
        _1474 = _1324;
        _1475 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0)));
        _1476 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0)));
        _1477 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0)));
    }
    else
    {
        _1462 = _1463;
        _1464 = _1463;
        _1465 = _1463;
        _1466 = _1463;
        _1467 = _1463;
        _1468 = _1463;
        _1469 = _1463;
        _1470 = _1463;
        _1471 = _1463;
        _1472 = _1463;
        _1473 = _1463;
        _1474 = _1463;
        _1475 = 0.0;
        _1476 = 0.0;
        _1477 = 0.0;
    }
    float _1770;
    float _1771;
    float _1772;
    float _1773;
    float _1774;
    float _1775;
    float _1776;
    float _1777;
    float _1778;
    float _1779;
    float _1780;
    float _1781;
    float _1782;
    float _1783;
    float _1784;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1501 = fma(_1134, cbModelParam._m0[30u].z, fma(_1130, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1126));
        float _1505 = fma(_1134, cbModelParam._m0[31u].z, fma(_1130, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1126));
        float _1509 = fma(_1134, cbModelParam._m0[32u].z, fma(_1130, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1126));
        float _1532 = _1126 + _883;
        float _1533 = _1130 + _884;
        float _1534 = _1134 + _885;
        float _1544 = fma(_1534, cbModelParam._m0[30u].z, fma(_1533, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1532)) - _1501;
        float _1545 = fma(_1534, cbModelParam._m0[31u].z, fma(_1533, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1532)) - _1505;
        float _1546 = fma(_1534, cbModelParam._m0[32u].z, fma(_1533, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1532)) - _1509;
        float _1550 = inversesqrt(dot(vec3(_1544, _1545, _1546), vec3(_1544, _1545, _1546)));
        float _1563 = ((_1550 * _1544) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1501 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1564 = ((_1550 * _1545) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1505 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1565 = ((_1550 * _1546) / cbModelParam._m0[35u].z) + ((((((_1509 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1567 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1563, _1564, _1565), 0.0);
        vec4 _1574 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1563, _1564, _1565), 0.0);
        vec4 _1581 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1563, _1564, _1565), 0.0);
        vec4 _1588 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1563, _1564, _1565), 0.0);
        float _1600 = exp2((_1567.w + (-0.5)) * 20.0) * 2.0;
        float _1601 = _1600 * (_1567.x + (-0.5));
        float _1602 = _1600 * (_1567.y + (-0.5));
        float _1603 = _1600 * (_1567.z + (-0.5));
        float _1610 = exp2((_1574.w + (-0.5)) * 20.0) * 2.0;
        float _1611 = _1610 * (_1574.x + (-0.5));
        float _1612 = _1610 * (_1574.y + (-0.5));
        float _1613 = _1610 * (_1574.z + (-0.5));
        float _1620 = exp2((_1581.w + (-0.5)) * 20.0) * 2.0;
        float _1621 = _1620 * (_1581.x + (-0.5));
        float _1622 = _1620 * (_1581.y + (-0.5));
        float _1623 = _1620 * (_1581.z + (-0.5));
        float _1630 = exp2((_1588.w + (-0.5)) * 20.0) * 2.0;
        float _1631 = _1630 * (_1588.x + (-0.5));
        float _1632 = _1630 * (_1588.y + (-0.5));
        float _1633 = _1630 * (_1588.z + (-0.5));
        float _1634 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
        float _1635 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
        float _1636 = isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0));
        float _1637 = _1601 * 0.5;
        float _1638 = _1611 * 0.5;
        float _1639 = _1621 * 0.5;
        float _1640 = dot(vec3(_1637, _1638, _1639), vec3(_1637, _1638, _1639));
        float _1645 = (_1640 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1640);
        float _1653 = (dot(vec3(_883, _884, _885), vec3(_1645 * _1637, _1645 * _1638, _1645 * _1639)) + 1.0) * 0.5;
        float _4242 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
        float _1662 = sqrt(((_1638 * _1638) + (_1637 * _1637)) + (_1639 * _1639)) / (_1634 + 9.9999997473787516355514526367188e-06);
        float _4253 = isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0));
        float _1663 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
        float _1664 = _1663 * 2.0;
        float _1668 = (1.0 - _1663) / (_1663 + 1.0);
        float _4264 = isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0));
        float _1669 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
        float _1678 = ((((1.0 - _1669) * (_1664 + 2.0)) * exp2(log2(isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0))) * (_1664 + 1.0))) + _1669) * _1634;
        float _1679 = _1602 * 0.5;
        float _1680 = _1612 * 0.5;
        float _1681 = _1622 * 0.5;
        float _1682 = dot(vec3(_1679, _1680, _1681), vec3(_1679, _1680, _1681));
        float _1687 = (_1682 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1682);
        float _1695 = (dot(vec3(_883, _884, _885), vec3(_1687 * _1679, _1687 * _1680, _1687 * _1681)) + 1.0) * 0.5;
        float _4275 = isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0));
        float _1704 = sqrt(((_1680 * _1680) + (_1679 * _1679)) + (_1681 * _1681)) / (_1635 + 9.9999997473787516355514526367188e-06);
        float _4286 = isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0));
        float _1705 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
        float _1706 = _1705 * 2.0;
        float _1710 = (1.0 - _1705) / (_1705 + 1.0);
        float _4297 = isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0));
        float _1711 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
        float _1720 = ((((1.0 - _1711) * (_1706 + 2.0)) * exp2(log2(isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0))) * (_1706 + 1.0))) + _1711) * _1635;
        float _1721 = _1603 * 0.5;
        float _1722 = _1613 * 0.5;
        float _1723 = _1623 * 0.5;
        float _1724 = dot(vec3(_1721, _1722, _1723), vec3(_1721, _1722, _1723));
        float _1729 = (_1724 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1724);
        float _1737 = (dot(vec3(_883, _884, _885), vec3(_1729 * _1721, _1729 * _1722, _1729 * _1723)) + 1.0) * 0.5;
        float _4308 = isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0));
        float _1746 = sqrt(((_1722 * _1722) + (_1721 * _1721)) + (_1723 * _1723)) / (_1636 + 9.9999997473787516355514526367188e-06);
        float _4319 = isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0));
        float _1747 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
        float _1748 = _1747 * 2.0;
        float _1752 = (1.0 - _1747) / (_1747 + 1.0);
        float _4330 = isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0));
        float _1753 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
        float _1762 = ((((1.0 - _1753) * (_1748 + 2.0)) * exp2(log2(isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0))) * (_1748 + 1.0))) + _1753) * _1636;
        _1770 = _1603;
        _1771 = _1602;
        _1772 = _1601;
        _1773 = _1613;
        _1774 = _1612;
        _1775 = _1611;
        _1776 = _1623;
        _1777 = _1622;
        _1778 = _1621;
        _1779 = _1636;
        _1780 = _1635;
        _1781 = _1634;
        _1782 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0)));
        _1783 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0)));
        _1784 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0)));
    }
    else
    {
        _1770 = _1463;
        _1771 = _1463;
        _1772 = _1463;
        _1773 = _1463;
        _1774 = _1463;
        _1775 = _1463;
        _1776 = _1463;
        _1777 = _1463;
        _1778 = _1463;
        _1779 = _1463;
        _1780 = _1463;
        _1781 = _1463;
        _1782 = 0.0;
        _1783 = 0.0;
        _1784 = 0.0;
    }
    float _1794 = (cbModelParam._m0[1u].x * (_1782 - _1475)) + _1475;
    float _1795 = (cbModelParam._m0[1u].x * (_1783 - _1476)) + _1476;
    float _1796 = (cbModelParam._m0[1u].x * (_1784 - _1477)) + _1477;
    float _1817 = fma(_1796, cbSceneParam._m0[89u].z, fma(_1795, cbSceneParam._m0[89u].y, _1794 * cbSceneParam._m0[89u].x));
    float _1820 = fma(_1796, cbSceneParam._m0[90u].z, fma(_1795, cbSceneParam._m0[90u].y, _1794 * cbSceneParam._m0[90u].x));
    float _1823 = fma(_1796, cbSceneParam._m0[91u].z, fma(_1795, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1794));
    float _1838 = _1070 * 0.5;
    float _1839 = _1071 * 0.5;
    float _1840 = _1072 * 0.5;
    float _1841 = dot(vec4(_1838, _1839, _1840, 1.0), vec4(_1772, _1775, _1778, _1781));
    float _1844 = dot(vec4(_1838, _1839, _1840, 1.0), vec4(_1771, _1774, _1777, _1780));
    float _1847 = dot(vec4(_1838, _1839, _1840, 1.0), vec4(_1770, _1773, _1776, _1779));
    float _1881;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1854 = dot(vec4(_1838, _1839, _1840, 1.0), vec4(_1462, _1466, _1469, _1472));
        float _1858 = dot(vec4(_1838, _1839, _1840, 1.0), vec4(_1464, _1467, _1470, _1473));
        float _1862 = dot(vec4(_1838, _1839, _1840, 1.0), vec4(_1465, _1468, _1471, _1474));
        float _1869 = dot(vec4(cbModelParam._m0[39u]), vec4(_1838, _1839, _1840, 1.0));
        _1881 = dot(vec3(isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0)), isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0)), isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1869) ? 0.0 : (isnan(0.0) ? _1869 : max(0.0, _1869))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1881 = 1.0;
    }
    float _1892;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1883 = dot(vec4(cbModelParam._m0[40u]), vec4(_1838, _1839, _1840, 1.0));
        _1892 = dot(vec3(isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0)), isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0)), isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1883) ? 0.0 : (isnan(0.0) ? _1883 : max(0.0, _1883))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1892 = 1.0;
    }
    float _1896 = (_1892 * cbModelParam._m0[1u].x) + (_1881 * (1.0 - cbModelParam._m0[1u].x));
    float _1906 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _886);
    float _1907 = isnan(_1906) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1906 : min(cbModelParam._m0[25u].z, _1906));
    float _1988;
    float _1990;
    float _1992;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1955 = fma(_1134, cbModelParam._m0[13u].z, fma(_1130, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1126)) + cbModelParam._m0[13u].w;
        float _1959 = fma(_1134, cbModelParam._m0[14u].z, fma(_1130, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1126)) + cbModelParam._m0[14u].w;
        float _1963 = fma(_1134, cbModelParam._m0[15u].z, fma(_1130, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1126)) + cbModelParam._m0[15u].w;
        float _1966 = fma(_1072, cbModelParam._m0[13u].z, fma(_1071, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1070));
        float _1969 = fma(_1072, cbModelParam._m0[14u].z, fma(_1071, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1070));
        float _1972 = fma(_1072, cbModelParam._m0[15u].z, fma(_1071, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1070));
        float _2000;
        if (_1966 > 0.0)
        {
            _2000 = abs((1.0 - _1955) / _1966);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1966 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1955 + 1.0) / _1966);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _2000 = frontier_phi_19_17_ladder;
        }
        float _2224;
        if (_1969 > 0.0)
        {
            _2224 = abs((1.0 - _1959) / _1969);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1969 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1959 + 1.0) / _1969);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2224 = frontier_phi_28_24_ladder;
        }
        float _2481;
        if (_1972 > 0.0)
        {
            _2481 = abs((1.0 - _1963) / _1972);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1972 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1963 + 1.0) / _1972);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2481 = frontier_phi_40_35_ladder;
        }
        float _2483 = isnan(_2224) ? _2000 : (isnan(_2000) ? _2224 : min(_2000, _2224));
        float _2484 = isnan(_2481) ? _2483 : (isnan(_2483) ? _2481 : min(_2483, _2481));
        float _2488 = (_2484 * _1966) + _1955;
        float _2489 = (_2484 * _1969) + _1959;
        float _2490 = (_2484 * _1972) + _1963;
        float _2491 = _2484 * 9.9999997473787516355514526367188e-05;
        float _2493 = (-1.0) - _2491;
        float _2495 = _2491 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2490 > _2495) || ((_2490 < _2493) || ((_2489 > _2495) || ((_2489 < _2493) || ((_2488 < _2493) || (_2488 > _2495))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2618 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2490, cbModelParam._m0[9u].z, fma(_2489, cbModelParam._m0[9u].y, _2488 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2490, cbModelParam._m0[10u].z, fma(_2489, cbModelParam._m0[10u].y, _2488 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2490, cbModelParam._m0[11u].z, fma(_2489, cbModelParam._m0[11u].y, _2488 * cbModelParam._m0[11u].x))), _1907);
            frontier_phi_18_40_ladder = _2618.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2618.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2618.x * cbModelParam._m0[1u].y;
        }
        _1988 = frontier_phi_18_40_ladder_2;
        _1990 = frontier_phi_18_40_ladder_1;
        _1992 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1976 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1070, _1071, _1072), _1907);
        _1988 = _1976.x * cbModelParam._m0[1u].y;
        _1990 = _1976.y * cbModelParam._m0[1u].y;
        _1992 = _1976.z * cbModelParam._m0[1u].y;
    }
    float _1996 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _886);
    float _1997 = isnan(_1996) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1996 : min(cbModelParam._m0[25u].w, _1996));
    float _2087;
    float _2089;
    float _2091;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2051 = fma(_1134, cbModelParam._m0[21u].z, fma(_1130, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1126)) + cbModelParam._m0[21u].w;
        float _2055 = fma(_1134, cbModelParam._m0[22u].z, fma(_1130, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1126)) + cbModelParam._m0[22u].w;
        float _2059 = fma(_1134, cbModelParam._m0[23u].z, fma(_1130, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1126)) + cbModelParam._m0[23u].w;
        float _2062 = fma(_1072, cbModelParam._m0[21u].z, fma(_1071, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1070));
        float _2065 = fma(_1072, cbModelParam._m0[22u].z, fma(_1071, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1070));
        float _2068 = fma(_1072, cbModelParam._m0[23u].z, fma(_1071, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1070));
        float _2229;
        if (_2062 > 0.0)
        {
            _2229 = abs((1.0 - _2051) / _2062);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_2062 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_2051 + 1.0) / _2062);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2229 = frontier_phi_30_26_ladder;
        }
        float _2508;
        if (_2065 > 0.0)
        {
            _2508 = abs((1.0 - _2055) / _2065);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_2065 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_2055 + 1.0) / _2065);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2508 = frontier_phi_42_37_ladder;
        }
        float _2721;
        if (_2068 > 0.0)
        {
            _2721 = abs((1.0 - _2059) / _2068);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_2068 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_2059 + 1.0) / _2068);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2721 = frontier_phi_51_48_ladder;
        }
        float _2723 = isnan(_2508) ? _2229 : (isnan(_2229) ? _2508 : min(_2229, _2508));
        float _2724 = isnan(_2721) ? _2723 : (isnan(_2723) ? _2721 : min(_2723, _2721));
        float _2728 = (_2724 * _2062) + _2051;
        float _2729 = (_2724 * _2065) + _2055;
        float _2730 = (_2724 * _2068) + _2059;
        float _2731 = _2724 * 9.9999997473787516355514526367188e-05;
        float _2732 = (-1.0) - _2731;
        float _2734 = _2731 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2730 > _2734) || ((_2730 < _2732) || ((_2729 > _2734) || ((_2729 < _2732) || ((_2728 < _2732) || (_2728 > _2734))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2929 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2730, cbModelParam._m0[17u].z, fma(_2729, cbModelParam._m0[17u].y, _2728 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2730, cbModelParam._m0[18u].z, fma(_2729, cbModelParam._m0[18u].y, _2728 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2730, cbModelParam._m0[19u].z, fma(_2729, cbModelParam._m0[19u].y, _2728 * cbModelParam._m0[19u].x))), _1997);
            frontier_phi_27_51_ladder = _2929.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2929.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2929.x * cbModelParam._m0[1u].z;
        }
        _2087 = frontier_phi_27_51_ladder_2;
        _2089 = frontier_phi_27_51_ladder_1;
        _2091 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _2071 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1070, _1071, _1072), _1997);
        _2087 = _2071.x * cbModelParam._m0[1u].z;
        _2089 = _2071.y * cbModelParam._m0[1u].z;
        _2091 = _2071.z * cbModelParam._m0[1u].z;
    }
    float _2104 = (((_1097 * _1046) + _1098) * _1062) * ((cbModelParam._m0[1u].w * (_2087 - _1988)) + _1988);
    float _2106 = (((_1097 * _1048) + _1098) * _1062) * ((cbModelParam._m0[1u].w * (_2089 - _1990)) + _1990);
    float _2108 = (((_1097 * _1049) + _1098) * _1062) * ((cbModelParam._m0[1u].w * (_2091 - _1992)) + _1992);
    float _2111 = fma(_2108, cbSceneParam._m0[89u].z, fma(_2106, cbSceneParam._m0[89u].y, _2104 * cbSceneParam._m0[89u].x));
    float _2114 = fma(_2108, cbSceneParam._m0[90u].z, fma(_2106, cbSceneParam._m0[90u].y, _2104 * cbSceneParam._m0[90u].x));
    float _2117 = fma(_2108, cbSceneParam._m0[91u].z, fma(_2106, cbSceneParam._m0[91u].y, _2104 * cbSceneParam._m0[91u].x));
    vec4 _2125 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_984, _985));
    float _2127 = _2125.w;
    float _2139 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2127);
    float _2140 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2127);
    float _2141 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2127);
    uvec4 _2145 = floatBitsToUint(cbInstanceData._m0[_282 + 5u]);
    uint _2147 = _2145.x * 14u;
    uint _2148 = _2147 + 13u;
    float _2155 = _1062 + (-1.0);
    float _2160 = (cbLight._m0[_2148].x * _2155) + 1.0;
    float _2161 = (cbLight._m0[_2148].y * _2155) + 1.0;
    float _2162 = (cbLight._m0[_2148].z * _2155) + 1.0;
    float _2163 = (cbLight._m0[_2148].w * _2155) + 1.0;
    uint _2164 = _2147 + 5u;
    float _2170 = isnan(1.0) ? _2161 : (isnan(_2161) ? 1.0 : min(_2161, 1.0));
    uint _2174 = _2147 + 4u;
    float _2183 = isnan(1.0) ? _2160 : (isnan(_2160) ? 1.0 : min(_2160, 1.0));
    uint _2187 = _2147 | 1u;
    float _2198 = dot(vec3(cbLight._m0[_2147].xyz), vec3(_883, _884, _885));
    float _2201 = dot(vec3(cbLight._m0[_2187].xyz), vec3(_883, _884, _885));
    float _4466 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0));
    float _4477 = isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0));
    float _2206 = (isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0))) * 0.3183098733425140380859375;
    float _2208 = (isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0))) * 0.3183098733425140380859375;
    float _2215 = ((cbLight._m0[_2164].x * _2170) * _2208) + (((cbLight._m0[_2174].x * _2139) * _2183) * _2206);
    float _2216 = ((_2170 * cbLight._m0[_2164].y) * _2208) + (((cbLight._m0[_2174].y * _2140) * _2183) * _2206);
    float _2217 = ((_2170 * cbLight._m0[_2164].z) * _2208) + (((cbLight._m0[_2174].z * _2141) * _2183) * _2206);
    uvec4 _2221 = floatBitsToUint(cbLight._m0[_2147 + 12u]);
    bool _2223 = _2221.x == 0u;
    float _2234;
    float _2236;
    float _2238;
    if (_2223)
    {
        _2234 = _2215;
        _2236 = _2216;
        _2238 = _2217;
    }
    else
    {
        uint _2242 = _2147 + 6u;
        float _2258 = (dot(vec3(cbLight._m0[_2147 + 2u].xyz), vec3(_883, _884, _885)) * 0.5) + 0.5;
        float _2259 = _2258 * _2258;
        float _4488 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
        float _2260 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
        float _2261 = isnan(1.0) ? _2162 : (isnan(_2162) ? 1.0 : min(_2162, 1.0));
        _2234 = (((cbLight._m0[_2242].x * 0.3183098733425140380859375) * _2260) * _2261) + _2215;
        _2236 = (((cbLight._m0[_2242].y * 0.3183098733425140380859375) * _2260) * _2261) + _2216;
        _2238 = (((cbLight._m0[_2242].z * 0.3183098733425140380859375) * _2260) * _2261) + _2217;
    }
    bool _2241 = _2221.y == 0u;
    float _2279;
    float _2281;
    float _2283;
    if (_2241)
    {
        _2279 = _2234;
        _2281 = _2236;
        _2283 = _2238;
    }
    else
    {
        uint _2452 = _2147 + 7u;
        float _2468 = (dot(vec3(cbLight._m0[_2147 + 3u].xyz), vec3(_883, _884, _885)) * 0.5) + 0.5;
        float _2469 = _2468 * _2468;
        float _4504 = isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0));
        float _2470 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
        float _2471 = isnan(1.0) ? _2163 : (isnan(_2163) ? 1.0 : min(_2163, 1.0));
        _2279 = (((cbLight._m0[_2452].x * 0.3183098733425140380859375) * _2470) * _2471) + _2234;
        _2281 = (((cbLight._m0[_2452].y * 0.3183098733425140380859375) * _2470) * _2471) + _2236;
        _2283 = (((cbLight._m0[_2452].z * 0.3183098733425140380859375) * _2470) * _2471) + _2238;
    }
    uint _2286 = _2147 + 8u;
    float _2299 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2147].w)) * _886) * 0.949999988079071044921875);
    float _2300 = _2299 * _2299;
    float _2301 = cbLight._m0[_2147].x + _967;
    float _2302 = cbLight._m0[_2147].y + _968;
    float _2303 = cbLight._m0[_2147].z + _969;
    float _2307 = inversesqrt(dot(vec3(_2301, _2302, _2303), vec3(_2301, _2302, _2303)));
    float _2308 = _2307 * _2301;
    float _2309 = _2307 * _2302;
    float _2310 = _2307 * _2303;
    float _2311 = dot(vec3(_883, _884, _885), vec3(cbLight._m0[_2147].xyz));
    float _4520 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
    float _2314 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
    float _4531 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
    float _2315 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
    float _2316 = dot(vec3(_883, _884, _885), vec3(_2308, _2309, _2310));
    float _4542 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
    float _2319 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
    float _2320 = dot(vec3(cbLight._m0[_2147].xyz), vec3(_2308, _2309, _2310));
    float _4553 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0));
    float _2324 = _2300 * _2300;
    float _2328 = ((_2319 * _2319) * (_2324 + (-1.0))) + 1.0;
    float _2336 = exp2(log2(1.0 - (isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0)))) * 5.0);
    float _2337 = 0.959999978542327880859375 - _1043;
    float _2339 = 0.959999978542327880859375 - _1044;
    float _2340 = 0.959999978542327880859375 - _1045;
    float _2347 = 1.0 - _2300;
    float _2358 = (0.5 / (((_2315 * ((_2314 * _2347) + _2300)) + 9.9999999392252902907785028219223e-09) + (((_2315 * _2347) + _2300) * _2314))) * _2314;
    float _4564 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0));
    float _2360 = (isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0))) * (_2324 / ((_2328 * _2328) * 3.141590118408203125));
    uint _2374 = _2147 + 9u;
    float _2385 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2187].w)) * _886) * 0.949999988079071044921875);
    float _2386 = _2385 * _2385;
    float _2387 = cbLight._m0[_2187].x + _967;
    float _2388 = cbLight._m0[_2187].y + _968;
    float _2389 = cbLight._m0[_2187].z + _969;
    float _2393 = inversesqrt(dot(vec3(_2387, _2388, _2389), vec3(_2387, _2388, _2389)));
    float _2394 = _2393 * _2387;
    float _2395 = _2393 * _2388;
    float _2396 = _2393 * _2389;
    float _2397 = dot(vec3(_883, _884, _885), vec3(cbLight._m0[_2187].xyz));
    float _4575 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
    float _2400 = isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0));
    float _2401 = dot(vec3(_883, _884, _885), vec3(_2394, _2395, _2396));
    float _4586 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
    float _2404 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
    float _2405 = dot(vec3(cbLight._m0[_2187].xyz), vec3(_2394, _2395, _2396));
    float _4597 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
    float _2409 = _2386 * _2386;
    float _2413 = ((_2404 * _2404) * (_2409 + (-1.0))) + 1.0;
    float _2420 = exp2(log2(1.0 - (isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0)))) * 5.0);
    float _2427 = 1.0 - _2386;
    float _2437 = (0.5 / (((_2315 * ((_2400 * _2427) + _2386)) + 9.9999999392252902907785028219223e-09) + (((_2315 * _2427) + _2386) * _2400))) * _2400;
    float _4608 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
    float _2439 = (isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0))) * (_2409 / ((_2413 * _2413) * 3.141590118408203125));
    float _2449 = (((((_2420 * _2337) + _1046) * cbLight._m0[_2374].x) * _2439) * _2170) + ((((cbLight._m0[_2286].x * _2139) * ((_2336 * _2337) + _1046)) * _2360) * _2183);
    float _2450 = (((((_2420 * _2339) + _1048) * cbLight._m0[_2374].y) * _2439) * _2170) + ((((cbLight._m0[_2286].y * _2140) * ((_2336 * _2339) + _1048)) * _2360) * _2183);
    float _2451 = (((((_2420 * _2340) + _1049) * cbLight._m0[_2374].z) * _2439) * _2170) + ((((cbLight._m0[_2286].z * _2141) * ((_2336 * _2340) + _1049)) * _2360) * _2183);
    float _2513;
    float _2515;
    float _2517;
    if (_2223)
    {
        _2513 = _2449;
        _2515 = _2450;
        _2517 = _2451;
    }
    else
    {
        uint _2519 = _2147 + 2u;
        uint _2523 = _2147 + 10u;
        float _2537 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2519].w)) * _886) * 0.949999988079071044921875);
        float _2538 = _2537 * _2537;
        float _2539 = cbLight._m0[_2519].x + _967;
        float _2540 = cbLight._m0[_2519].y + _968;
        float _2541 = cbLight._m0[_2519].z + _969;
        float _2545 = inversesqrt(dot(vec3(_2539, _2540, _2541), vec3(_2539, _2540, _2541)));
        float _2546 = _2545 * _2539;
        float _2547 = _2545 * _2540;
        float _2548 = _2545 * _2541;
        float _2549 = dot(vec3(_883, _884, _885), vec3(cbLight._m0[_2519].xyz));
        float _4619 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
        float _2552 = isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0));
        float _2553 = dot(vec3(_883, _884, _885), vec3(_2546, _2547, _2548));
        float _4630 = isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0));
        float _2556 = isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0));
        float _2557 = dot(vec3(cbLight._m0[_2519].xyz), vec3(_2546, _2547, _2548));
        float _4641 = isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0));
        float _2561 = _2538 * _2538;
        float _2565 = ((_2556 * _2556) * (_2561 + (-1.0))) + 1.0;
        float _2572 = exp2(log2(1.0 - (isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0)))) * 5.0);
        float _2579 = 1.0 - _2538;
        float _2589 = (0.5 / (((_2315 * ((_2552 * _2579) + _2538)) + 9.9999999392252902907785028219223e-09) + (((_2315 * _2579) + _2538) * _2552))) * _2552;
        float _4652 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0));
        float _2591 = (isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0))) * (_2561 / ((_2565 * _2565) * 3.141590118408203125));
        float _2592 = isnan(1.0) ? _2162 : (isnan(_2162) ? 1.0 : min(_2162, 1.0));
        _2513 = (((((_2572 * _2337) + _1046) * cbLight._m0[_2523].x) * _2591) * _2592) + _2449;
        _2515 = (((((_2572 * _2339) + _1048) * cbLight._m0[_2523].y) * _2591) * _2592) + _2450;
        _2517 = (((((_2572 * _2340) + _1049) * cbLight._m0[_2523].z) * _2591) * _2592) + _2451;
    }
    float _2627;
    float _2629;
    float _2631;
    if (_2241)
    {
        _2627 = _2513;
        _2629 = _2515;
        _2631 = _2517;
    }
    else
    {
        uint _2638 = _2147 + 3u;
        uint _2642 = _2147 + 11u;
        float _2656 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2638].w)) * _886) * 0.949999988079071044921875);
        float _2657 = _2656 * _2656;
        float _2658 = cbLight._m0[_2638].x + _967;
        float _2659 = cbLight._m0[_2638].y + _968;
        float _2660 = cbLight._m0[_2638].z + _969;
        float _2664 = inversesqrt(dot(vec3(_2658, _2659, _2660), vec3(_2658, _2659, _2660)));
        float _2665 = _2664 * _2658;
        float _2666 = _2664 * _2659;
        float _2667 = _2664 * _2660;
        float _2668 = dot(vec3(_883, _884, _885), vec3(cbLight._m0[_2638].xyz));
        float _4668 = isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : max(_2668, 0.0));
        float _2671 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
        float _2672 = dot(vec3(_883, _884, _885), vec3(_2665, _2666, _2667));
        float _4679 = isnan(0.0) ? _2672 : (isnan(_2672) ? 0.0 : max(_2672, 0.0));
        float _2675 = isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0));
        float _2676 = dot(vec3(cbLight._m0[_2638].xyz), vec3(_2665, _2666, _2667));
        float _4690 = isnan(0.0) ? _2676 : (isnan(_2676) ? 0.0 : max(_2676, 0.0));
        float _2680 = _2657 * _2657;
        float _2684 = ((_2675 * _2675) * (_2680 + (-1.0))) + 1.0;
        float _2691 = exp2(log2(1.0 - (isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0)))) * 5.0);
        float _2698 = 1.0 - _2657;
        float _2708 = (0.5 / (((_2315 * ((_2671 * _2698) + _2657)) + 9.9999999392252902907785028219223e-09) + (((_2315 * _2698) + _2657) * _2671))) * _2671;
        float _4701 = isnan(0.0) ? _2708 : (isnan(_2708) ? 0.0 : max(_2708, 0.0));
        float _2710 = (isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0))) * (_2680 / ((_2684 * _2684) * 3.141590118408203125));
        float _2711 = isnan(1.0) ? _2163 : (isnan(_2163) ? 1.0 : min(_2163, 1.0));
        _2627 = (((((_2691 * _2337) + _1046) * cbLight._m0[_2642].x) * _2710) * _2711) + _2513;
        _2629 = (((((_2691 * _2339) + _1048) * cbLight._m0[_2642].y) * _2710) * _2711) + _2515;
        _2631 = (((((_2691 * _2340) + _1049) * cbLight._m0[_2642].z) * _2710) * _2711) + _2517;
    }
    float _2846;
    float _2848;
    float _2850;
    float _2852;
    float _2854;
    float _2856;
    if (_2145.y == 0u)
    {
        float _2786 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2787 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2786;
        float _2788 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2786;
        float _2789 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2786;
        uvec4 _2801 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2802 = _2801.x;
        uint _2813 = uint((float(_2801.y) * floor(float(uint(cbSceneParam._m0[85u].y * _985) / _2802))) + floor(float(uint(cbSceneParam._m0[85u].x * _984) / _2802)));
        float _2823 = (log2(_2789 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2824 = isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : max(_2823, 0.0));
        uint _2827 = uint(isnan(14.0) ? _2824 : (isnan(_2824) ? 14.0 : min(_2824, 14.0)));
        uvec4 _2832 = texelFetch(g_lightClusterGridBuffer, int(((_2827 << 2u) + (_2813 << 6u)) >> 2u));
        uint _2833 = _2832.x;
        uint _2834 = _2801.z;
        float _2934;
        float _2936;
        float _2938;
        float _2940;
        float _2942;
        float _2944;
        if (((((1u << ((_2834 >> 4u) & 15u)) + 4294967295u) & _2833) == 0u) || ((_2834 & 240u) == 0u))
        {
            _2934 = 0.0;
            _2936 = 0.0;
            _2938 = 0.0;
            _2940 = 0.0;
            _2942 = 0.0;
            _2944 = 0.0;
        }
        else
        {
            float _2935;
            float _2937;
            float _2939;
            float _2941;
            float _2943;
            float _2945;
            float _3087 = 0.0;
            float _3088 = 0.0;
            float _3089 = 0.0;
            float _3090 = 0.0;
            float _3091 = 0.0;
            float _3092 = 0.0;
            uint _3093 = 0u;
            uint _3102;
            bool _3103;
            for (;;)
            {
                _3102 = texelFetch(g_lightClassification, int((((_2827 << 5u) + (_2813 << 9u)) + (_3093 << 2u)) >> 2u)).x;
                _3103 = _3102 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3103)
                {
                    frontier_phi_68_pred = _3087;
                    frontier_phi_68_pred_1 = _3092;
                    frontier_phi_68_pred_2 = _3091;
                    frontier_phi_68_pred_3 = _3090;
                    frontier_phi_68_pred_4 = _3089;
                    frontier_phi_68_pred_5 = _3088;
                }
                else
                {
                    float _3232;
                    float _3233;
                    float _3234;
                    float _3235;
                    float _3236;
                    float _3237;
                    uint _3238;
                    _3232 = _3087;
                    _3233 = _3088;
                    _3234 = _3089;
                    _3235 = _3090;
                    _3236 = _3091;
                    _3237 = _3092;
                    _3238 = _3102;
                    float _3159;
                    float _3160;
                    float _3161;
                    float _3162;
                    float _3163;
                    float _3164;
                    for (;;)
                    {
                        uint _3242 = uint(findLSB(_3238)) + (_3093 << 5u);
                        uint _3239 = (_3238 + 4294967295u) & _3238;
                        uint _3244 = _3242 * 48u;
                        vec4 _3258 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3244)).x, texelFetch(g_PointLightRenderingBuffer, int(_3244 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3244 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3244 + 3u)).x));
                        uint _3264 = (_3242 * 48u) + 4u;
                        vec4 _3277 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3264)).x, texelFetch(g_PointLightRenderingBuffer, int(_3264 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3264 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3264 + 3u)).x));
                        uint _3283 = (_3242 * 48u) + 8u;
                        vec3 _3294 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3283)).x, texelFetch(g_PointLightRenderingBuffer, int(_3283 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3283 + 2u)).x));
                        float _3298 = _3258.x - _2787;
                        float _3299 = _3258.y - _2788;
                        float _3300 = _3258.z - _2789;
                        float _3301 = dot(vec3(_3298, _3299, _3300), vec3(_3298, _3299, _3300));
                        float _3304 = inversesqrt(_3301);
                        float _3305 = _3304 * _3298;
                        float _3306 = _3304 * _3299;
                        float _3307 = _3304 * _3300;
                        float _3308 = dot(vec3(_1003, _1006, _1009), vec3(_3305, _3306, _3307));
                        float _3313 = 1.0 - (_3301 * _3258.w);
                        float _4727 = isnan(0.0) ? _3313 : (isnan(_3313) ? 0.0 : max(_3313, 0.0));
                        float _3314 = isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0));
                        float _3315 = sqrt(_3301) * _3277.w;
                        float _3318 = 1.39999997615814208984375 / (_3315 + 1.39999997615814208984375);
                        float _3319 = _3318 * _3318;
                        float _3322 = ((1.0 - _3319) * _3308) + _3319;
                        float _3325 = _3315 * _3315;
                        float _3329 = ((isnan(0.0) ? _3322 : (isnan(_3322) ? 0.0 : max(_3322, 0.0))) * _3314) / ((_3325 * 0.699999988079071044921875) + 1.0);
                        float _3333 = (-0.0) - _2787;
                        float _3334 = (-0.0) - _2788;
                        float _3335 = (-0.0) - _2789;
                        float _3339 = inversesqrt(dot(vec3(_3333, _3334, _3335), vec3(_3333, _3334, _3335)));
                        float _3340 = _3339 * _3333;
                        float _3341 = _3339 * _3334;
                        float _3342 = _3339 * _3335;
                        float _3350 = exp2(log2(1.0 / ((_3325 * 3.5) + 5.0)) * 0.25);
                        float _3351 = 1.0 - _1078;
                        float _3358 = sqrt(1.0 - ((1.0 - (_3351 * _3351)) * (1.0 - (_3350 * _3350))));
                        float _3359 = _3358 * _3358;
                        float _3360 = _3359 * _3359;
                        float _3361 = _3340 + _3305;
                        float _3362 = _3341 + _3306;
                        float _3363 = _3342 + _3307;
                        float _3367 = inversesqrt(dot(vec3(_3361, _3362, _3363), vec3(_3361, _3362, _3363)));
                        float _3371 = dot(vec3(_1003, _1006, _1009), vec3(_3340, _3341, _3342));
                        float _4743 = isnan(0.0) ? _3371 : (isnan(_3371) ? 0.0 : max(_3371, 0.0));
                        float _3374 = isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0));
                        float _3375 = dot(vec3(_1003, _1006, _1009), vec3(_3367 * _3361, _3367 * _3362, _3367 * _3363));
                        float _4754 = isnan(0.0) ? _3375 : (isnan(_3375) ? 0.0 : max(_3375, 0.0));
                        float _3378 = isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0));
                        float _3382 = ((_3378 * _3378) * (_3360 + (-1.0))) + 1.0;
                        float _3383 = _3318 * _3359;
                        float _3384 = _3383 * _3383;
                        float _3387 = ((1.0 - _3384) * _3308) + _3384;
                        float _4765 = isnan(0.0) ? _3387 : (isnan(_3387) ? 0.0 : max(_3387, 0.0));
                        float _3388 = isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0));
                        float _3389 = 1.0 - _3359;
                        float _3399 = (0.5 / (((_3388 * ((_3374 * _3389) + _3359)) + 9.9999999392252902907785028219223e-09) + (((_3388 * _3389) + _3359) * _3374))) * _3388;
                        float _4776 = isnan(0.0) ? _3399 : (isnan(_3399) ? 0.0 : max(_3399, 0.0));
                        float _3410 = (((_3360 * 3.1415927410125732421875) * (isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0)))) / ((_3382 * _3382) * ((_3325 * 2.1991131305694580078125) + 3.141590118408203125))) * _3314;
                        _3162 = (_3329 * _3277.x) + _3235;
                        _3163 = (_3329 * _3277.y) + _3236;
                        _3164 = (_3329 * _3277.z) + _3237;
                        _3159 = (_3410 * _3294.x) + _3232;
                        _3160 = (_3410 * _3294.y) + _3233;
                        _3161 = (_3410 * _3294.z) + _3234;
                        if (_3239 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3232 = _3159;
                            _3233 = _3160;
                            _3234 = _3161;
                            _3235 = _3162;
                            _3236 = _3163;
                            _3237 = _3164;
                            _3238 = _3239;
                        }
                    }
                    frontier_phi_68_pred = _3159;
                    frontier_phi_68_pred_1 = _3164;
                    frontier_phi_68_pred_2 = _3163;
                    frontier_phi_68_pred_3 = _3162;
                    frontier_phi_68_pred_4 = _3161;
                    frontier_phi_68_pred_5 = _3160;
                }
                _2935 = frontier_phi_68_pred;
                _2945 = frontier_phi_68_pred_1;
                _2943 = frontier_phi_68_pred_2;
                _2941 = frontier_phi_68_pred_3;
                _2939 = frontier_phi_68_pred_4;
                _2937 = frontier_phi_68_pred_5;
                uint _3094 = _3093 + 1u;
                if (_3094 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3087 = _2935;
                    _3088 = _2937;
                    _3089 = _2939;
                    _3090 = _2941;
                    _3091 = _2943;
                    _3092 = _2945;
                    _3093 = _3094;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2934 = _2935;
            _2936 = _2937;
            _2938 = _2939;
            _2940 = _2941;
            _2942 = _2943;
            _2944 = _2945;
        }
        uvec4 _2948 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2949 = _2948.z;
        uint _2951 = (_2949 >> 8u) & 15u;
        float _3055;
        float _3057;
        float _3059;
        float _3061;
        float _3063;
        float _3065;
        if (((4294967295u << _2951) & _2833) == 0u)
        {
            _3055 = _2934;
            _3057 = _2936;
            _3059 = _2938;
            _3061 = _2940;
            _3063 = _2942;
            _3065 = _2944;
        }
        else
        {
            float _3080 = inversesqrt(dot(vec3(_2787, _2788, _2789), vec3(_2787, _2788, _2789)));
            float _3081 = _3080 * _2787;
            float _3082 = _3080 * _2788;
            float _3083 = _3080 * _2789;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2951 < ((_2949 >> 12u) & 15u))
            {
                float _3056;
                float _3058;
                float _3060;
                float _3062;
                float _3064;
                float _3066;
                float _3215 = _2934;
                float _3216 = _2936;
                float _3217 = _2938;
                float _3218 = _2940;
                float _3219 = _2942;
                float _3220 = _2944;
                uint _3221 = _2951;
                uint _3230;
                bool _3231;
                for (;;)
                {
                    _3230 = texelFetch(g_lightClassification, int((((_2827 << 5u) + (_2813 << 9u)) + (_3221 << 2u)) >> 2u)).x;
                    _3231 = _3230 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3231)
                    {
                        frontier_phi_79_pred = _3220;
                        frontier_phi_79_pred_1 = _3219;
                        frontier_phi_79_pred_2 = _3218;
                        frontier_phi_79_pred_3 = _3217;
                        frontier_phi_79_pred_4 = _3216;
                        frontier_phi_79_pred_5 = _3215;
                    }
                    else
                    {
                        float _3424;
                        float _3425;
                        float _3426;
                        float _3427;
                        float _3428;
                        float _3429;
                        float _3717;
                        float _3718;
                        float _3719;
                        float _3720;
                        float _3721;
                        float _3722;
                        float _3437 = _3215;
                        float _3438 = _3216;
                        float _3439 = _3217;
                        float _3440 = _3218;
                        float _3441 = _3219;
                        float _3442 = _3220;
                        uint _3443 = _3230;
                        uint _3444;
                        vec4 _3469;
                        float _3470;
                        vec4 _3485;
                        vec3 _3497;
                        vec4 _3512;
                        vec4 _3527;
                        float _3573;
                        bool _3574;
                        for (;;)
                        {
                            uint _3454 = ((_3221 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3443));
                            _3444 = (_3443 + 4294967295u) & _3443;
                            uint _3456 = _3454 * 40u;
                            _3469 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3456)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 3u)).x));
                            _3470 = _3469.w;
                            uint _3472 = (_3454 * 40u) + 4u;
                            _3485 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3472)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 3u)).x));
                            uint _3487 = (_3454 * 40u) + 8u;
                            _3497 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3487)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 2u)).x));
                            uint _3499 = (_3454 * 40u) + 16u;
                            _3512 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3499)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 3u)).x));
                            uint _3514 = (_3454 * 40u) + 20u;
                            _3527 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3514)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3514 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3514 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3514 + 3u)).x));
                            uint _3529 = (_3454 * 40u) + 24u;
                            vec4 _3542 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3529)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3529 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3529 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3529 + 3u)).x));
                            uint _3548 = (_3454 * 40u) + 28u;
                            vec4 _3561 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3548)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3548 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3548 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3548 + 3u)).x));
                            _3573 = fma(_2789, _3561.z, fma(_2788, _3561.y, _3561.x * _2787)) + _3561.w;
                            _3574 = !((fma(_2789, _3542.z, fma(_2788, _3542.y, _3542.x * _2787)) + _3542.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3574)
                            {
                                float _3601 = _3469.x - _2787;
                                float _3602 = _3469.y - _2788;
                                float _3603 = _3469.z - _2789;
                                float _3604 = dot(vec3(_3601, _3602, _3603), vec3(_3601, _3602, _3603));
                                float _3607 = inversesqrt(_3604);
                                float _3608 = _3607 * _3601;
                                float _3609 = _3607 * _3602;
                                float _3610 = _3607 * _3603;
                                float _3614 = 1.0 - (_3604 / (_3470 * _3470));
                                float _4787 = isnan(0.0) ? _3614 : (isnan(_3614) ? 0.0 : max(_3614, 0.0));
                                float _3615 = isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0));
                                float _3619 = sqrt(_3604) * _3485.w;
                                float _3621 = 1.39999997615814208984375 / (_3619 + 1.39999997615814208984375);
                                float _3622 = _3621 * _3621;
                                float _3625 = ((1.0 - _3622) * dot(vec3(_3608, _3609, _3610), vec3(_1003, _1006, _1009))) + _3622;
                                float _3628 = _3619 * _3619;
                                float _3632 = (fma(_2789, _3512.z, fma(_2788, _3512.y, _3512.x * _2787)) + _3512.w) / _3573;
                                float _3633 = (fma(_2789, _3527.z, fma(_2788, _3527.y, _3527.x * _2787)) + _3527.w) / _3573;
                                float _3637 = 1.0 - dot(vec2(_3632, _3633), vec2(_3632, _3633));
                                float _4803 = isnan(0.0) ? _3637 : (isnan(_3637) ? 0.0 : max(_3637, 0.0));
                                float _3638 = isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0));
                                float _3639 = _3638 * (((isnan(0.0) ? _3625 : (isnan(_3625) ? 0.0 : max(_3625, 0.0))) * _3615) / ((_3628 * 0.699999988079071044921875) + 1.0));
                                float _3651 = exp2(log2(1.0 / ((_3628 * 3.5) + 5.0)) * 0.25);
                                float _3652 = 1.0 - _1078;
                                float _3659 = sqrt(1.0 - ((1.0 - (_3652 * _3652)) * (1.0 - (_3651 * _3651))));
                                float _3660 = _3659 * _3659;
                                float _3661 = _3660 * _3660;
                                float _3662 = _3608 - _3081;
                                float _3663 = _3609 - _3082;
                                float _3664 = _3610 - _3083;
                                float _3668 = inversesqrt(dot(vec3(_3662, _3663, _3664), vec3(_3662, _3663, _3664)));
                                float _3672 = dot(vec3(_1003, _1006, _1009), vec3((-0.0) - _3081, (-0.0) - _3082, (-0.0) - _3083));
                                float _4814 = isnan(0.0) ? _3672 : (isnan(_3672) ? 0.0 : max(_3672, 0.0));
                                float _3675 = isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0));
                                float _3676 = dot(vec3(_1003, _1006, _1009), vec3(_3668 * _3662, _3668 * _3663, _3668 * _3664));
                                float _4825 = isnan(0.0) ? _3676 : (isnan(_3676) ? 0.0 : max(_3676, 0.0));
                                float _3679 = isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0));
                                float _3683 = ((_3679 * _3679) * (_3661 + (-1.0))) + 1.0;
                                float _3684 = _3621 * _3660;
                                float _3685 = _3684 * _3684;
                                float _3691 = ((1.0 - _3685) * dot(vec3(_1003, _1006, _1009), vec3(_3608, _3609, _3610))) + _3685;
                                float _4836 = isnan(0.0) ? _3691 : (isnan(_3691) ? 0.0 : max(_3691, 0.0));
                                float _3692 = isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0));
                                float _3693 = 1.0 - _3660;
                                float _3703 = (0.5 / (((_3692 * ((_3675 * _3693) + _3660)) + 9.9999999392252902907785028219223e-09) + (((_3692 * _3693) + _3660) * _3675))) * _3692;
                                float _4847 = isnan(0.0) ? _3703 : (isnan(_3703) ? 0.0 : max(_3703, 0.0));
                                float _3713 = (_3638 * _3615) * (((_3661 * 3.1415927410125732421875) * (isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0)))) / ((_3683 * _3683) * ((_3628 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3639 * _3485.y;
                                frontier_phi_85_pred_1 = _3639 * _3485.x;
                                frontier_phi_85_pred_2 = _3713 * _3497.z;
                                frontier_phi_85_pred_3 = _3713 * _3497.y;
                                frontier_phi_85_pred_4 = _3713 * _3497.x;
                                frontier_phi_85_pred_5 = _3639 * _3485.z;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3721 = frontier_phi_85_pred;
                            _3720 = frontier_phi_85_pred_1;
                            _3719 = frontier_phi_85_pred_2;
                            _3718 = frontier_phi_85_pred_3;
                            _3717 = frontier_phi_85_pred_4;
                            _3722 = frontier_phi_85_pred_5;
                            _3427 = _3720 + _3440;
                            _3428 = _3721 + _3441;
                            _3429 = _3722 + _3442;
                            _3424 = _3717 + _3437;
                            _3425 = _3718 + _3438;
                            _3426 = _3719 + _3439;
                            if (_3444 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3437 = _3424;
                                _3438 = _3425;
                                _3439 = _3426;
                                _3440 = _3427;
                                _3441 = _3428;
                                _3442 = _3429;
                                _3443 = _3444;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3429;
                        frontier_phi_79_pred_1 = _3428;
                        frontier_phi_79_pred_2 = _3427;
                        frontier_phi_79_pred_3 = _3426;
                        frontier_phi_79_pred_4 = _3425;
                        frontier_phi_79_pred_5 = _3424;
                    }
                    _3066 = frontier_phi_79_pred;
                    _3064 = frontier_phi_79_pred_1;
                    _3062 = frontier_phi_79_pred_2;
                    _3060 = frontier_phi_79_pred_3;
                    _3058 = frontier_phi_79_pred_4;
                    _3056 = frontier_phi_79_pred_5;
                    uint _3222 = _3221 + 1u;
                    if (_3222 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3215 = _3056;
                        _3216 = _3058;
                        _3217 = _3060;
                        _3218 = _3062;
                        _3219 = _3064;
                        _3220 = _3066;
                        _3221 = _3222;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3060;
                frontier_phi_60_61_ladder_1 = _3066;
                frontier_phi_60_61_ladder_2 = _3064;
                frontier_phi_60_61_ladder_3 = _3062;
                frontier_phi_60_61_ladder_4 = _3058;
                frontier_phi_60_61_ladder_5 = _3056;
            }
            else
            {
                frontier_phi_60_61_ladder = _2938;
                frontier_phi_60_61_ladder_1 = _2944;
                frontier_phi_60_61_ladder_2 = _2942;
                frontier_phi_60_61_ladder_3 = _2940;
                frontier_phi_60_61_ladder_4 = _2936;
                frontier_phi_60_61_ladder_5 = _2934;
            }
            _3055 = frontier_phi_60_61_ladder_5;
            _3057 = frontier_phi_60_61_ladder_4;
            _3059 = frontier_phi_60_61_ladder;
            _3061 = frontier_phi_60_61_ladder_3;
            _3063 = frontier_phi_60_61_ladder_2;
            _3065 = frontier_phi_60_61_ladder_1;
        }
        float _3070 = isnan(1.0) ? _1062 : (isnan(_1062) ? 1.0 : min(_1062, 1.0));
        _2846 = (_3070 * _3061) + _2279;
        _2848 = (_3070 * _3063) + _2281;
        _2850 = (_3070 * _3065) + _2283;
        _2852 = ((_3055 * _1046) * _3070) + _2627;
        _2854 = ((_3057 * _1048) * _3070) + _2629;
        _2856 = ((_3059 * _1049) * _3070) + _2631;
    }
    else
    {
        _2846 = _2279;
        _2848 = _2281;
        _2850 = _2283;
        _2852 = _2627;
        _2854 = _2629;
        _2856 = _2631;
    }
    float _4863 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
    float _4874 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
    float _4885 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
    float _2873 = ((isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0))) * (_2846 + ((isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0))) * _1062))) + ((_2852 + ((isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0))) * _1896)) * cbPerFrame._m0[3u].x);
    float _2874 = ((isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0))) * (_2848 + ((isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0))) * _1062))) + ((_2854 + ((isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0))) * _1896)) * cbPerFrame._m0[3u].x);
    float _2875 = ((isnan(1.0) ? _4885 : (isnan(_4885) ? 1.0 : min(_4885, 1.0))) * (_2850 + ((isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0))) * _1062))) + ((_2856 + ((isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0))) * _1896)) * cbPerFrame._m0[3u].x);
    uint _2876 = _282 + 6u;
    float _2884 = _984 / cbSceneParam._m0[86u].x;
    float _2885 = _985 / cbSceneParam._m0[86u].y;
    vec4 _2899 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2884, _2885, (log2((isnan(cbSceneParam._m0[77u].w) ? _909 : (isnan(_909) ? cbSceneParam._m0[77u].w : min(_909, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2901 = _2899.x;
    float _2902 = _2899.y;
    float _2903 = _2899.z;
    float _2904 = _2899.w;
    float _2997;
    float _2999;
    float _3001;
    float _3003;
    if (_909 > cbSceneParam._m0[78u].w)
    {
        float _2959 = isnan(_909) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _909 : min(cbSceneParam._m0[80u].w, _909));
        float _2960 = _2959 / _909;
        float _2971 = _2960 * _960;
        float _2972 = _961 * _2960;
        float _2973 = (-0.0) - _2972;
        float _2975 = _2960 * _962;
        float _2977 = (cbSceneParam._m0[77u].w * _2973) / _2959;
        float _2978 = _2977 + cbSceneParam._m0[79u].w;
        float _2979 = cbSceneParam._m0[79u].w - _2972;
        float _2985 = sqrt(((_2971 * _2971) + (_2972 * _2972)) + (_2975 * _2975));
        float _2988 = (1.0 - (cbSceneParam._m0[77u].w / _2959)) * _2985;
        float _2993 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2995 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3172;
        if (abs((_2973 - _2977) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3172 = ((((_2978 > 0.0) ? exp2(_2993 * _2978) : (2.0 - exp2(_2995 * _2978))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2988;
        }
        else
        {
            float _3116 = 1.0 / cbSceneParam._m0[80u].x;
            float _3117 = isnan(_2979) ? _2978 : (isnan(_2978) ? _2979 : max(_2978, _2979));
            float _3118 = isnan(_2979) ? _2978 : (isnan(_2978) ? _2979 : min(_2978, _2979));
            float _3127 = isnan(0.0) ? _3117 : (isnan(_3117) ? 0.0 : min(_3117, 0.0));
            float _3128 = isnan(0.0) ? _3118 : (isnan(_3118) ? 0.0 : min(_3118, 0.0));
            _3172 = ((abs(_2985 / _2973) * cbSceneParam._m0[80u].y) * ((((_3127 - _3128) * 2.0) - ((exp2(_2993 * (isnan(0.0) ? _3117 : (isnan(_3117) ? 0.0 : max(_3117, 0.0)))) - exp2(_2993 * (isnan(0.0) ? _3118 : (isnan(_3118) ? 0.0 : max(_3118, 0.0))))) * _3116)) - ((exp2(_2995 * _3127) - exp2(_2995 * _3128)) * _3116))) + (_2988 * cbSceneParam._m0[80u].z);
        }
        vec4 _3174 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2884, _2885, 1.0), 0.0);
        float _3183 = exp2((_3172 * (-1.44269502162933349609375)) * (1.0 - _3174.w));
        float _3184 = log2(_3183);
        float _3200 = log2(_2904);
        _2997 = (exp2(_3200 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3184 * cbSceneParam._m0[78u].x)) * _3174.x) / cbSceneParam._m0[78u].x)) + _2901;
        _2999 = (exp2(_3200 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3184 * cbSceneParam._m0[78u].y)) * _3174.y) / cbSceneParam._m0[78u].y)) + _2902;
        _3001 = (exp2(_3200 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3184 * cbSceneParam._m0[78u].z)) * _3174.z) / cbSceneParam._m0[78u].z)) + _2903;
        _3003 = _3183 * _2904;
    }
    else
    {
        _2997 = _2901;
        _2999 = _2902;
        _3001 = _2903;
        _3003 = _2904;
    }
    bool _3210;
    vec4 _3013;
    vec4 _3035;
    float _3037;
    float _3041;
    float _3042;
    float _3043;
    float _3044;
    bool _3054;
    for (;;)
    {
        _3013 = cbMatDynParam._m0[0u];
        float _3015 = roundEven(_3013.y);
        bool _3016 = _3015 == 3.0;
        float _3017 = log2(_3003);
        float _3024 = exp2(_3017 * cbSceneParam._m0[78u].x) * _2873;
        float _3025 = exp2(_3017 * cbSceneParam._m0[78u].y) * _2874;
        float _3026 = exp2(_3017 * cbSceneParam._m0[78u].z) * _2875;
        float _3033 = _973 + (-0.5);
        _3035 = cbMtdParam._m0[1u];
        _3037 = _3035.y * _3033;
        float _3040 = (_3015 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3041 = _3040 * (_3016 ? _3024 : (_3024 + (cbSceneParam._m0[72u].w * _2997)));
        _3042 = _3040 * (_3016 ? _3025 : (_3025 + (cbSceneParam._m0[72u].w * _2999)));
        _3043 = _3040 * (_3016 ? _3026 : (_3026 + (cbSceneParam._m0[72u].w * _3001)));
        _3044 = _3033 * 0.999000012874603271484375;
        _3054 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3054)
        {
            if ((cbInstanceData._m0[_282 + 7u].x + _3044) < 0.5)
            {
                _3210 = true;
                break;
            }
        }
        uint _3151 = _1022 + uint(_3013.w);
        if ((cbInstanceData._m0[_3151].w < 1.0) && ((cbInstanceData._m0[_3151].w + _3044) < 0.5))
        {
            _3210 = true;
            break;
        }
        if ((_3037 + 1.0) < _3035.x)
        {
            _3210 = true;
            break;
        }
        _3210 = false;
        break;
    }
    float _3415;
    if (_3210)
    {
        discard_state = true;
        _3415 = 0.0;
    }
    else
    {
        _3415 = cbInstanceData._m0[_2876].w;
    }
    SV_Target.x = _3041;
    SV_Target.y = _3042;
    SV_Target.z = _3043;
    SV_Target.w = _3415;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2876].w;
    discard_exit();
}


