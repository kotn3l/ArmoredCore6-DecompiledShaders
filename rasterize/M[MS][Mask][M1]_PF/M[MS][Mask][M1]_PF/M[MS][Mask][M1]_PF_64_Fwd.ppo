#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_PF_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1438;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _229 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _230 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _231 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _237 = inversesqrt(dot(vec3(_229, _230, _231), vec3(_229, _230, _231)));
    float _244 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _251 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _265 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _267 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _268 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3764 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    float _3775 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _3786 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    uint _278 = uint(roundEven(NORMAL.w)) * 13u;
    uint _283 = _278 + 1u;
    uint _287 = _278 + 2u;
    float _296 = sqrt(((cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x) + (cbInstanceData._m0[_278].x * cbInstanceData._m0[_278].x)) + (cbInstanceData._m0[_287].x * cbInstanceData._m0[_287].x));
    float _297 = _296 * TEXCOORD.z;
    float _298 = _296 * TEXCOORD.w;
    vec4 _311 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _297) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _298) + cbTextureTilingScale._m0[13u].w));
    vec4 _334 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _360 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _365 = _360.x * cbMtdParam._m0[11u].x;
    float _366 = _360.y * cbMtdParam._m0[11u].y;
    float _367 = _360.z * cbMtdParam._m0[11u].z;
    vec4 _386 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _297) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _298) + cbTextureTilingScale._m0[5u].w));
    vec4 _405 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _435 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[27u].x * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].y * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _437 = _435.x;
    float _449 = dot(vec4(_437, _435.yzw), vec4(cbMtdParam._m0[28u].w, cbMtdParam._m0[29u].xy, 0.0));
    float _466 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _405.x) * 2.0) - ((((_437 - _449) * cbMtdParam._m0[23u].w) + _449) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3797 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _467 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
    float _474 = (_467 * ((_386.x * cbMtdParam._m0[12u].x) - _365)) + _365;
    float _475 = (_467 * ((_386.y * cbMtdParam._m0[12u].y) - _366)) + _366;
    float _476 = (_467 * ((_386.z * cbMtdParam._m0[12u].z) - _367)) + _367;
    vec4 _493 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _297) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _298) + cbTextureTilingScale._m0[3u].w));
    vec4 _515 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].z * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].w * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _517 = _515.x;
    float _527 = dot(vec4(_517, _515.yzw), vec4(cbMtdParam._m0[30u].yzw, 0.0));
    float _541 = ((cbMtdParam._m0[25u].z * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _405.y) * 2.0) - ((((_517 - _527) * cbMtdParam._m0[23u].w) + _527) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3808 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _542 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
    float _552 = (_334.x * cbMtdParam._m0[9u].x) * ((_542 * ((_493.x * cbMtdParam._m0[13u].x) - _474)) + _474);
    float _553 = (_334.y * cbMtdParam._m0[9u].y) * ((_542 * ((_493.y * cbMtdParam._m0[13u].y) - _475)) + _475);
    float _554 = (_334.z * cbMtdParam._m0[9u].z) * ((_542 * ((_493.z * cbMtdParam._m0[13u].z) - _476)) + _476);
    float _558 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _311.x) * _552;
    float _561 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _311.y) * _553;
    float _564 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _311.z) * _554;
    float _572 = (((_552 - _558) * (isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0)))) + _558) * 4.55000019073486328125;
    float _574 = (((_553 - _561) * (isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0)))) + _561) * 4.55000019073486328125;
    float _576 = (((_554 - _564) * (isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0)))) + _564) * 4.55000019073486328125;
    vec4 _593 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _297) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _298) + cbTextureTilingScale._m0[20u].w));
    vec4 _616 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _297) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _298) + cbTextureTilingScale._m0[4u].w));
    vec4 _633 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _635 = _633.x;
    float _636 = _633.y;
    float _637 = _633.z;
    float _644 = ((_616.x - _635) * _467) + _635;
    float _645 = ((_616.y - _636) * _467) + _636;
    float _646 = ((_616.z - _637) * _467) + _637;
    vec4 _658 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _297) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _298) + cbTextureTilingScale._m0[2u].w));
    float _671 = ((_658.z - _646) * _542) + _646;
    float _674 = ((((_658.x - _644) * _542) + _644) * 2.0) + (-1.0);
    float _675 = ((((_658.y - _645) * _542) + _645) * 2.0) + (-1.0);
    float _676 = dot(vec2(_674, _675), vec2(_674, _675));
    float _3819 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
    float _681 = sqrt(1.0 - (isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0))));
    vec4 _695 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _720 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _297) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _298) + cbTextureTilingScale._m0[11u].w));
    float _722 = _720.x;
    float _723 = 1.0 - _722;
    float _739 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_722 - _723) * cbMtdParam._m0[24u].z) + _723) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3830 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _740 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
    float _747 = (_740 * (cbMtdParam._m0[17u].x - _572)) + _572;
    float _748 = (_740 * (cbMtdParam._m0[17u].y - _574)) + _574;
    float _749 = (_740 * (cbMtdParam._m0[17u].z - _576)) + _576;
    vec4 _775 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _777 = _775.x;
    float _794 = ((texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _297) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _298) + cbTextureTilingScale._m0[9u].w)).x - _777) * _467) + _777;
    float _811 = ((texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _297) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _298) + cbTextureTilingScale._m0[21u].w)).x - _794) * _542) + _794;
    float _815 = ((texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _811) * cbMtdParam._m0[19u].z) + _811;
    float _817 = _815 - (_815 * _740);
    float _822 = (((_593.z - _671) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _671;
    float _826 = ((_695.z - _822) * cbMtdParam._m0[19u].w) + _822;
    vec4 _839 = texture(sampler2D(M_MS_Mask_M1_PF_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _297) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _298) + cbTextureTilingScale._m0[15u].w));
    float _846 = (_839.x * 2.0) + (-1.0);
    float _847 = (_839.y * 2.0) + (-1.0);
    float _848 = dot(vec2(_846, _847), vec2(_846, _847));
    float _3841 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    float _856 = (_740 * (_839.z - _826)) + _826;
    float _865 = (_674 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_593.x * 2.0) + (-1.0)))) + (((_695.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w);
    float _866 = (_675 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_593.y * 2.0) + (-1.0)))) + (((_695.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w);
    float _878 = (((_846 - _865) + (cbMtdParam._m0[21u].x * _865)) * _740) + _865;
    float _879 = (((_847 - _866) + (cbMtdParam._m0[21u].x * _866)) * _740) + _866;
    float _880 = (_740 * (sqrt(1.0 - (isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0)))) - _681)) + _681;
    float _884 = cbMtdParam._m0[22u].x + _695.w;
    float _887 = fma(_880, _244 * NORMAL.x, fma(_879, _251 * TANGENT.x, (_237 * _229) * _878));
    float _890 = fma(_880, _244 * NORMAL.y, fma(_879, _251 * TANGENT.y, (_237 * _230) * _878));
    float _893 = fma(_880, _244 * NORMAL.z, fma(_879, _251 * TANGENT.z, (_237 * _231) * _878));
    float _897 = inversesqrt(dot(vec3(_887, _890, _893), vec3(_887, _890, _893)));
    float _898 = _897 * _887;
    float _899 = _897 * _890;
    float _900 = _897 * _893;
    float _3852 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
    float _901 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
    float _3863 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
    float _3874 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _3885 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
    float _3896 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _3907 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
    float _906 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
    float _920 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _961 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _971 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _961);
    float _972 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _961);
    float _973 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _961);
    float _977 = inversesqrt(dot(vec3(_971, _972, _973), vec3(_971, _972, _973)));
    float _978 = _971 * _977;
    float _979 = _972 * _977;
    float _980 = _973 * _977;
    float _986 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _987 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1005 = fma(_900, cbSceneParam._m0[5u].z, fma(_899, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _898));
    float _1008 = fma(_900, cbSceneParam._m0[6u].z, fma(_899, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _898));
    float _1011 = fma(_900, cbSceneParam._m0[7u].z, fma(_899, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _898));
    uint _1025 = (_278 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1031 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0)))) * cbInstanceData._m0[_1025].x;
    float _1032 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0)))) * cbInstanceData._m0[_1025].y;
    float _1033 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0)))) * cbInstanceData._m0[_1025].z;
    float _3918 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
    float _1034 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
    float _3929 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
    float _1035 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
    float _3940 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
    float _1036 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
    float _1037 = 1.0 - _906;
    float _1038 = _1034 * _1037;
    float _1039 = _1035 * _1037;
    float _1040 = _1036 * _1037;
    float _1045 = (_1034 + (-0.039999999105930328369140625)) * _906;
    float _1046 = (_1035 + (-0.039999999105930328369140625)) * _906;
    float _1047 = (_1036 + (-0.039999999105930328369140625)) * _906;
    float _1048 = _1045 + 0.039999999105930328369140625;
    float _1050 = _1046 + 0.039999999105930328369140625;
    float _1051 = _1047 + 0.039999999105930328369140625;
    vec4 _1060 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _986, cbSceneParam._m0[86u].y * _987));
    float _1064 = ((isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0))) * TEXCOORD_5.w) * _1060.x;
    float _1065 = dot(vec3(_898, _899, _900), vec3(_978, _979, _980));
    float _1068 = _1065 * 2.0;
    float _1072 = (_1068 * _898) - _978;
    float _1073 = (_1068 * _899) - _979;
    float _1074 = (_1068 * _900) - _980;
    float _1078 = abs(dot(vec3(_978, _979, _980), vec3(_898, _899, _900)));
    float _3951 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
    float _1080 = sqrt(_901);
    float _1093 = exp2((_1080 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1080 * 3.0));
    float _1099 = (1.0 - _1093) * ((_1080 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1100 = _1093 * _1080;
    float _1128 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1132 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1136 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1437;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1162 = fma(_1136, cbModelParam._m0[26u].z, fma(_1132, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1128));
        float _1166 = fma(_1136, cbModelParam._m0[27u].z, fma(_1132, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1128));
        float _1170 = fma(_1136, cbModelParam._m0[28u].z, fma(_1132, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1128));
        float _1195 = _1128 + _898;
        float _1196 = _1132 + _899;
        float _1197 = _1136 + _900;
        float _1207 = fma(_1197, cbModelParam._m0[26u].z, fma(_1196, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1195)) - _1162;
        float _1208 = fma(_1197, cbModelParam._m0[27u].z, fma(_1196, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1195)) - _1166;
        float _1209 = fma(_1197, cbModelParam._m0[28u].z, fma(_1196, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1195)) - _1170;
        float _1213 = inversesqrt(dot(vec3(_1207, _1208, _1209), vec3(_1207, _1208, _1209)));
        float _1226 = ((_1213 * _1207) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1162 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1227 = ((_1213 * _1208) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1166 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1228 = ((_1213 * _1209) / cbModelParam._m0[34u].z) + ((((((_1170 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1231 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1226, _1227, _1228), 0.0);
        vec4 _1238 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1226, _1227, _1228), 0.0);
        vec4 _1245 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1226, _1227, _1228), 0.0);
        vec4 _1252 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1226, _1227, _1228), 0.0);
        float _1265 = exp2((_1231.w + (-0.5)) * 20.0) * 2.0;
        float _1266 = _1265 * (_1231.x + (-0.5));
        float _1267 = _1265 * (_1231.y + (-0.5));
        float _1268 = _1265 * (_1231.z + (-0.5));
        float _1275 = exp2((_1238.w + (-0.5)) * 20.0) * 2.0;
        float _1276 = _1275 * (_1238.x + (-0.5));
        float _1277 = _1275 * (_1238.y + (-0.5));
        float _1278 = _1275 * (_1238.z + (-0.5));
        float _1285 = exp2((_1245.w + (-0.5)) * 20.0) * 2.0;
        float _1286 = _1285 * (_1245.x + (-0.5));
        float _1287 = _1285 * (_1245.y + (-0.5));
        float _1288 = _1285 * (_1245.z + (-0.5));
        float _1295 = exp2((_1252.w + (-0.5)) * 20.0) * 2.0;
        float _1296 = _1295 * (_1252.x + (-0.5));
        float _1297 = _1295 * (_1252.y + (-0.5));
        float _1298 = _1295 * (_1252.z + (-0.5));
        float _1299 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1300 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1301 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1302 = _1266 * 0.5;
        float _1303 = _1276 * 0.5;
        float _1304 = _1286 * 0.5;
        float _1305 = dot(vec3(_1302, _1303, _1304), vec3(_1302, _1303, _1304));
        float _1310 = (_1305 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1305);
        float _1319 = (dot(vec3(_898, _899, _900), vec3(_1310 * _1302, _1310 * _1303, _1310 * _1304)) + 1.0) * 0.5;
        float _3977 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1329 = sqrt(((_1303 * _1303) + (_1302 * _1302)) + (_1304 * _1304)) / (_1299 + 9.9999997473787516355514526367188e-06);
        float _3988 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1330 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
        float _1331 = _1330 * 2.0;
        float _1335 = (1.0 - _1330) / (_1330 + 1.0);
        float _3999 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1336 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
        float _1345 = ((((1.0 - _1336) * (_1331 + 2.0)) * exp2(log2(isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0))) * (_1331 + 1.0))) + _1336) * _1299;
        float _1346 = _1267 * 0.5;
        float _1347 = _1277 * 0.5;
        float _1348 = _1287 * 0.5;
        float _1349 = dot(vec3(_1346, _1347, _1348), vec3(_1346, _1347, _1348));
        float _1354 = (_1349 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1349);
        float _1362 = (dot(vec3(_898, _899, _900), vec3(_1354 * _1346, _1354 * _1347, _1354 * _1348)) + 1.0) * 0.5;
        float _4010 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1371 = sqrt(((_1347 * _1347) + (_1346 * _1346)) + (_1348 * _1348)) / (_1300 + 9.9999997473787516355514526367188e-06);
        float _4021 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1372 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
        float _1373 = _1372 * 2.0;
        float _1377 = (1.0 - _1372) / (_1372 + 1.0);
        float _4032 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1378 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
        float _1387 = ((((1.0 - _1378) * (_1373 + 2.0)) * exp2(log2(isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0))) * (_1373 + 1.0))) + _1378) * _1300;
        float _1388 = _1268 * 0.5;
        float _1389 = _1278 * 0.5;
        float _1390 = _1288 * 0.5;
        float _1391 = dot(vec3(_1388, _1389, _1390), vec3(_1388, _1389, _1390));
        float _1396 = (_1391 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1391);
        float _1404 = (dot(vec3(_898, _899, _900), vec3(_1396 * _1388, _1396 * _1389, _1396 * _1390)) + 1.0) * 0.5;
        float _4043 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1413 = sqrt(((_1389 * _1389) + (_1388 * _1388)) + (_1390 * _1390)) / (_1301 + 9.9999997473787516355514526367188e-06);
        float _4054 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1414 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _1415 = _1414 * 2.0;
        float _1419 = (1.0 - _1414) / (_1414 + 1.0);
        float _4065 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1420 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
        float _1429 = ((((1.0 - _1420) * (_1415 + 2.0)) * exp2(log2(isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0))) * (_1415 + 1.0))) + _1420) * _1301;
        _1437 = _1268;
        _1439 = _1267;
        _1440 = _1266;
        _1441 = _1278;
        _1442 = _1277;
        _1443 = _1276;
        _1444 = _1288;
        _1445 = _1287;
        _1446 = _1286;
        _1447 = _1301;
        _1448 = _1300;
        _1449 = _1299;
        _1450 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0)));
        _1451 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0)));
        _1452 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0)));
    }
    else
    {
        _1437 = _1438;
        _1439 = _1438;
        _1440 = _1438;
        _1441 = _1438;
        _1442 = _1438;
        _1443 = _1438;
        _1444 = _1438;
        _1445 = _1438;
        _1446 = _1438;
        _1447 = _1438;
        _1448 = _1438;
        _1449 = _1438;
        _1450 = 0.0;
        _1451 = 0.0;
        _1452 = 0.0;
    }
    float _1745;
    float _1746;
    float _1747;
    float _1748;
    float _1749;
    float _1750;
    float _1751;
    float _1752;
    float _1753;
    float _1754;
    float _1755;
    float _1756;
    float _1757;
    float _1758;
    float _1759;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1476 = fma(_1136, cbModelParam._m0[30u].z, fma(_1132, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1128));
        float _1480 = fma(_1136, cbModelParam._m0[31u].z, fma(_1132, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1128));
        float _1484 = fma(_1136, cbModelParam._m0[32u].z, fma(_1132, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1128));
        float _1507 = _1128 + _898;
        float _1508 = _1132 + _899;
        float _1509 = _1136 + _900;
        float _1519 = fma(_1509, cbModelParam._m0[30u].z, fma(_1508, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1507)) - _1476;
        float _1520 = fma(_1509, cbModelParam._m0[31u].z, fma(_1508, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1507)) - _1480;
        float _1521 = fma(_1509, cbModelParam._m0[32u].z, fma(_1508, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1507)) - _1484;
        float _1525 = inversesqrt(dot(vec3(_1519, _1520, _1521), vec3(_1519, _1520, _1521)));
        float _1538 = ((_1525 * _1519) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1476 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1539 = ((_1525 * _1520) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1480 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1540 = ((_1525 * _1521) / cbModelParam._m0[35u].z) + ((((((_1484 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1542 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1538, _1539, _1540), 0.0);
        vec4 _1549 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1538, _1539, _1540), 0.0);
        vec4 _1556 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1538, _1539, _1540), 0.0);
        vec4 _1563 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1538, _1539, _1540), 0.0);
        float _1575 = exp2((_1542.w + (-0.5)) * 20.0) * 2.0;
        float _1576 = _1575 * (_1542.x + (-0.5));
        float _1577 = _1575 * (_1542.y + (-0.5));
        float _1578 = _1575 * (_1542.z + (-0.5));
        float _1585 = exp2((_1549.w + (-0.5)) * 20.0) * 2.0;
        float _1586 = _1585 * (_1549.x + (-0.5));
        float _1587 = _1585 * (_1549.y + (-0.5));
        float _1588 = _1585 * (_1549.z + (-0.5));
        float _1595 = exp2((_1556.w + (-0.5)) * 20.0) * 2.0;
        float _1596 = _1595 * (_1556.x + (-0.5));
        float _1597 = _1595 * (_1556.y + (-0.5));
        float _1598 = _1595 * (_1556.z + (-0.5));
        float _1605 = exp2((_1563.w + (-0.5)) * 20.0) * 2.0;
        float _1606 = _1605 * (_1563.x + (-0.5));
        float _1607 = _1605 * (_1563.y + (-0.5));
        float _1608 = _1605 * (_1563.z + (-0.5));
        float _1609 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
        float _1610 = isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0));
        float _1611 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
        float _1612 = _1576 * 0.5;
        float _1613 = _1586 * 0.5;
        float _1614 = _1596 * 0.5;
        float _1615 = dot(vec3(_1612, _1613, _1614), vec3(_1612, _1613, _1614));
        float _1620 = (_1615 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1615);
        float _1628 = (dot(vec3(_898, _899, _900), vec3(_1620 * _1612, _1620 * _1613, _1620 * _1614)) + 1.0) * 0.5;
        float _4106 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
        float _1637 = sqrt(((_1613 * _1613) + (_1612 * _1612)) + (_1614 * _1614)) / (_1609 + 9.9999997473787516355514526367188e-06);
        float _4117 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
        float _1638 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
        float _1639 = _1638 * 2.0;
        float _1643 = (1.0 - _1638) / (_1638 + 1.0);
        float _4128 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
        float _1644 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
        float _1653 = ((((1.0 - _1644) * (_1639 + 2.0)) * exp2(log2(isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0))) * (_1639 + 1.0))) + _1644) * _1609;
        float _1654 = _1577 * 0.5;
        float _1655 = _1587 * 0.5;
        float _1656 = _1597 * 0.5;
        float _1657 = dot(vec3(_1654, _1655, _1656), vec3(_1654, _1655, _1656));
        float _1662 = (_1657 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1657);
        float _1670 = (dot(vec3(_898, _899, _900), vec3(_1662 * _1654, _1662 * _1655, _1662 * _1656)) + 1.0) * 0.5;
        float _4139 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
        float _1679 = sqrt(((_1655 * _1655) + (_1654 * _1654)) + (_1656 * _1656)) / (_1610 + 9.9999997473787516355514526367188e-06);
        float _4150 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
        float _1680 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
        float _1681 = _1680 * 2.0;
        float _1685 = (1.0 - _1680) / (_1680 + 1.0);
        float _4161 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
        float _1686 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
        float _1695 = ((((1.0 - _1686) * (_1681 + 2.0)) * exp2(log2(isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0))) * (_1681 + 1.0))) + _1686) * _1610;
        float _1696 = _1578 * 0.5;
        float _1697 = _1588 * 0.5;
        float _1698 = _1598 * 0.5;
        float _1699 = dot(vec3(_1696, _1697, _1698), vec3(_1696, _1697, _1698));
        float _1704 = (_1699 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1699);
        float _1712 = (dot(vec3(_898, _899, _900), vec3(_1704 * _1696, _1704 * _1697, _1704 * _1698)) + 1.0) * 0.5;
        float _4172 = isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0));
        float _1721 = sqrt(((_1697 * _1697) + (_1696 * _1696)) + (_1698 * _1698)) / (_1611 + 9.9999997473787516355514526367188e-06);
        float _4183 = isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0));
        float _1722 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
        float _1723 = _1722 * 2.0;
        float _1727 = (1.0 - _1722) / (_1722 + 1.0);
        float _4194 = isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0));
        float _1728 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
        float _1737 = ((((1.0 - _1728) * (_1723 + 2.0)) * exp2(log2(isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0))) * (_1723 + 1.0))) + _1728) * _1611;
        _1745 = _1578;
        _1746 = _1577;
        _1747 = _1576;
        _1748 = _1588;
        _1749 = _1587;
        _1750 = _1586;
        _1751 = _1598;
        _1752 = _1597;
        _1753 = _1596;
        _1754 = _1611;
        _1755 = _1610;
        _1756 = _1609;
        _1757 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0)));
        _1758 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0)));
        _1759 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0)));
    }
    else
    {
        _1745 = _1438;
        _1746 = _1438;
        _1747 = _1438;
        _1748 = _1438;
        _1749 = _1438;
        _1750 = _1438;
        _1751 = _1438;
        _1752 = _1438;
        _1753 = _1438;
        _1754 = _1438;
        _1755 = _1438;
        _1756 = _1438;
        _1757 = 0.0;
        _1758 = 0.0;
        _1759 = 0.0;
    }
    float _1769 = (cbModelParam._m0[1u].x * (_1757 - _1450)) + _1450;
    float _1770 = (cbModelParam._m0[1u].x * (_1758 - _1451)) + _1451;
    float _1771 = (cbModelParam._m0[1u].x * (_1759 - _1452)) + _1452;
    float _1792 = fma(_1771, cbSceneParam._m0[89u].z, fma(_1770, cbSceneParam._m0[89u].y, _1769 * cbSceneParam._m0[89u].x));
    float _1795 = fma(_1771, cbSceneParam._m0[90u].z, fma(_1770, cbSceneParam._m0[90u].y, _1769 * cbSceneParam._m0[90u].x));
    float _1798 = fma(_1771, cbSceneParam._m0[91u].z, fma(_1770, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1769));
    float _1813 = _1072 * 0.5;
    float _1814 = _1073 * 0.5;
    float _1815 = _1074 * 0.5;
    float _1816 = dot(vec4(_1813, _1814, _1815, 1.0), vec4(_1747, _1750, _1753, _1756));
    float _1819 = dot(vec4(_1813, _1814, _1815, 1.0), vec4(_1746, _1749, _1752, _1755));
    float _1822 = dot(vec4(_1813, _1814, _1815, 1.0), vec4(_1745, _1748, _1751, _1754));
    float _1856;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1829 = dot(vec4(_1813, _1814, _1815, 1.0), vec4(_1437, _1441, _1444, _1447));
        float _1833 = dot(vec4(_1813, _1814, _1815, 1.0), vec4(_1439, _1442, _1445, _1448));
        float _1837 = dot(vec4(_1813, _1814, _1815, 1.0), vec4(_1440, _1443, _1446, _1449));
        float _1844 = dot(vec4(cbModelParam._m0[39u]), vec4(_1813, _1814, _1815, 1.0));
        _1856 = dot(vec3(isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0)), isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0)), isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1844) ? 0.0 : (isnan(0.0) ? _1844 : max(0.0, _1844))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1856 = 1.0;
    }
    float _1867;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1858 = dot(vec4(cbModelParam._m0[40u]), vec4(_1813, _1814, _1815, 1.0));
        _1867 = dot(vec3(isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0)), isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0)), isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1858) ? 0.0 : (isnan(0.0) ? _1858 : max(0.0, _1858))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1867 = 1.0;
    }
    float _1871 = (_1867 * cbModelParam._m0[1u].x) + (_1856 * (1.0 - cbModelParam._m0[1u].x));
    float _1881 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _901);
    float _1882 = isnan(_1881) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1881 : min(cbModelParam._m0[25u].z, _1881));
    float _1963;
    float _1965;
    float _1967;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1930 = fma(_1136, cbModelParam._m0[13u].z, fma(_1132, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1128)) + cbModelParam._m0[13u].w;
        float _1934 = fma(_1136, cbModelParam._m0[14u].z, fma(_1132, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1128)) + cbModelParam._m0[14u].w;
        float _1938 = fma(_1136, cbModelParam._m0[15u].z, fma(_1132, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1128)) + cbModelParam._m0[15u].w;
        float _1941 = fma(_1074, cbModelParam._m0[13u].z, fma(_1073, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1072));
        float _1944 = fma(_1074, cbModelParam._m0[14u].z, fma(_1073, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1072));
        float _1947 = fma(_1074, cbModelParam._m0[15u].z, fma(_1073, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1072));
        float _1975;
        if (_1941 > 0.0)
        {
            _1975 = abs((1.0 - _1930) / _1941);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1941 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1930 + 1.0) / _1941);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1975 = frontier_phi_14_12_ladder;
        }
        float _2178;
        if (_1944 > 0.0)
        {
            _2178 = abs((1.0 - _1934) / _1944);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1944 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1934 + 1.0) / _1944);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2178 = frontier_phi_23_19_ladder;
        }
        float _2432;
        if (_1947 > 0.0)
        {
            _2432 = abs((1.0 - _1938) / _1947);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1947 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1938 + 1.0) / _1947);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2432 = frontier_phi_35_30_ladder;
        }
        float _2434 = isnan(_2178) ? _1975 : (isnan(_1975) ? _2178 : min(_1975, _2178));
        float _2435 = isnan(_2432) ? _2434 : (isnan(_2434) ? _2432 : min(_2434, _2432));
        float _2439 = (_2435 * _1941) + _1930;
        float _2440 = (_2435 * _1944) + _1934;
        float _2441 = (_2435 * _1947) + _1938;
        float _2442 = _2435 * 9.9999997473787516355514526367188e-05;
        float _2444 = (-1.0) - _2442;
        float _2446 = _2442 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2441 > _2446) || ((_2441 < _2444) || ((_2440 > _2446) || ((_2440 < _2444) || ((_2439 < _2444) || (_2439 > _2446))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2569 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2441, cbModelParam._m0[9u].z, fma(_2440, cbModelParam._m0[9u].y, _2439 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2441, cbModelParam._m0[10u].z, fma(_2440, cbModelParam._m0[10u].y, _2439 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2441, cbModelParam._m0[11u].z, fma(_2440, cbModelParam._m0[11u].y, _2439 * cbModelParam._m0[11u].x))), _1882);
            frontier_phi_13_35_ladder = _2569.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2569.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2569.x * cbModelParam._m0[1u].y;
        }
        _1963 = frontier_phi_13_35_ladder_2;
        _1965 = frontier_phi_13_35_ladder_1;
        _1967 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1951 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1072, _1073, _1074), _1882);
        _1963 = _1951.x * cbModelParam._m0[1u].y;
        _1965 = _1951.y * cbModelParam._m0[1u].y;
        _1967 = _1951.z * cbModelParam._m0[1u].y;
    }
    float _1971 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _901);
    float _1972 = isnan(_1971) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1971 : min(cbModelParam._m0[25u].w, _1971));
    float _2062;
    float _2064;
    float _2066;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2026 = fma(_1136, cbModelParam._m0[21u].z, fma(_1132, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1128)) + cbModelParam._m0[21u].w;
        float _2030 = fma(_1136, cbModelParam._m0[22u].z, fma(_1132, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1128)) + cbModelParam._m0[22u].w;
        float _2034 = fma(_1136, cbModelParam._m0[23u].z, fma(_1132, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1128)) + cbModelParam._m0[23u].w;
        float _2037 = fma(_1074, cbModelParam._m0[21u].z, fma(_1073, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1072));
        float _2040 = fma(_1074, cbModelParam._m0[22u].z, fma(_1073, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1072));
        float _2043 = fma(_1074, cbModelParam._m0[23u].z, fma(_1073, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1072));
        float _2183;
        if (_2037 > 0.0)
        {
            _2183 = abs((1.0 - _2026) / _2037);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2037 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2026 + 1.0) / _2037);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2183 = frontier_phi_25_21_ladder;
        }
        float _2459;
        if (_2040 > 0.0)
        {
            _2459 = abs((1.0 - _2030) / _2040);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2040 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2030 + 1.0) / _2040);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2459 = frontier_phi_37_32_ladder;
        }
        float _2672;
        if (_2043 > 0.0)
        {
            _2672 = abs((1.0 - _2034) / _2043);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2043 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2034 + 1.0) / _2043);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2672 = frontier_phi_46_43_ladder;
        }
        float _2674 = isnan(_2459) ? _2183 : (isnan(_2183) ? _2459 : min(_2183, _2459));
        float _2675 = isnan(_2672) ? _2674 : (isnan(_2674) ? _2672 : min(_2674, _2672));
        float _2679 = (_2675 * _2037) + _2026;
        float _2680 = (_2675 * _2040) + _2030;
        float _2681 = (_2675 * _2043) + _2034;
        float _2682 = _2675 * 9.9999997473787516355514526367188e-05;
        float _2683 = (-1.0) - _2682;
        float _2685 = _2682 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2681 > _2685) || ((_2681 < _2683) || ((_2680 > _2685) || ((_2680 < _2683) || ((_2679 < _2683) || (_2679 > _2685))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2880 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2681, cbModelParam._m0[17u].z, fma(_2680, cbModelParam._m0[17u].y, _2679 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2681, cbModelParam._m0[18u].z, fma(_2680, cbModelParam._m0[18u].y, _2679 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2681, cbModelParam._m0[19u].z, fma(_2680, cbModelParam._m0[19u].y, _2679 * cbModelParam._m0[19u].x))), _1972);
            frontier_phi_22_46_ladder = _2880.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2880.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2880.x * cbModelParam._m0[1u].z;
        }
        _2062 = frontier_phi_22_46_ladder_2;
        _2064 = frontier_phi_22_46_ladder_1;
        _2066 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2046 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1072, _1073, _1074), _1972);
        _2062 = _2046.x * cbModelParam._m0[1u].z;
        _2064 = _2046.y * cbModelParam._m0[1u].z;
        _2066 = _2046.z * cbModelParam._m0[1u].z;
    }
    float _2079 = (((_1099 * _1048) + _1100) * _1064) * ((cbModelParam._m0[1u].w * (_2062 - _1963)) + _1963);
    float _2081 = (((_1099 * _1050) + _1100) * _1064) * ((cbModelParam._m0[1u].w * (_2064 - _1965)) + _1965);
    float _2083 = (((_1099 * _1051) + _1100) * _1064) * ((cbModelParam._m0[1u].w * (_2066 - _1967)) + _1967);
    float _2086 = fma(_2083, cbSceneParam._m0[89u].z, fma(_2081, cbSceneParam._m0[89u].y, _2079 * cbSceneParam._m0[89u].x));
    float _2089 = fma(_2083, cbSceneParam._m0[90u].z, fma(_2081, cbSceneParam._m0[90u].y, _2079 * cbSceneParam._m0[90u].x));
    float _2092 = fma(_2083, cbSceneParam._m0[91u].z, fma(_2081, cbSceneParam._m0[91u].y, _2079 * cbSceneParam._m0[91u].x));
    uvec4 _2102 = floatBitsToUint(cbInstanceData._m0[_278 + 5u]);
    uint _2104 = _2102.x * 14u;
    uint _2105 = _2104 + 13u;
    float _2112 = _1064 + (-1.0);
    float _2117 = (cbLight._m0[_2105].x * _2112) + 1.0;
    float _2118 = (cbLight._m0[_2105].y * _2112) + 1.0;
    float _2119 = (cbLight._m0[_2105].z * _2112) + 1.0;
    float _2120 = (cbLight._m0[_2105].w * _2112) + 1.0;
    uint _2121 = _2104 + 5u;
    float _2127 = isnan(1.0) ? _2118 : (isnan(_2118) ? 1.0 : min(_2118, 1.0));
    uint _2131 = _2104 + 4u;
    float _2137 = isnan(1.0) ? _2117 : (isnan(_2117) ? 1.0 : min(_2117, 1.0));
    uint _2141 = _2104 | 1u;
    float _2152 = dot(vec3(cbLight._m0[_2104].xyz), vec3(_898, _899, _900));
    float _2155 = dot(vec3(cbLight._m0[_2141].xyz), vec3(_898, _899, _900));
    float _4330 = isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0));
    float _4341 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
    float _2160 = (isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0))) * 0.3183098733425140380859375;
    float _2162 = (isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0))) * 0.3183098733425140380859375;
    float _2169 = ((cbLight._m0[_2121].x * _2127) * _2162) + ((cbLight._m0[_2131].x * _2137) * _2160);
    float _2170 = ((_2127 * cbLight._m0[_2121].y) * _2162) + ((_2137 * cbLight._m0[_2131].y) * _2160);
    float _2171 = ((_2127 * cbLight._m0[_2121].z) * _2162) + ((_2137 * cbLight._m0[_2131].z) * _2160);
    uvec4 _2175 = floatBitsToUint(cbLight._m0[_2104 + 12u]);
    bool _2177 = _2175.x == 0u;
    float _2188;
    float _2190;
    float _2192;
    if (_2177)
    {
        _2188 = _2169;
        _2190 = _2170;
        _2192 = _2171;
    }
    else
    {
        uint _2196 = _2104 + 6u;
        float _2212 = (dot(vec3(cbLight._m0[_2104 + 2u].xyz), vec3(_898, _899, _900)) * 0.5) + 0.5;
        float _2213 = _2212 * _2212;
        float _4352 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
        float _2214 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
        float _2215 = isnan(1.0) ? _2119 : (isnan(_2119) ? 1.0 : min(_2119, 1.0));
        _2188 = (((cbLight._m0[_2196].x * 0.3183098733425140380859375) * _2214) * _2215) + _2169;
        _2190 = (((cbLight._m0[_2196].y * 0.3183098733425140380859375) * _2214) * _2215) + _2170;
        _2192 = (((cbLight._m0[_2196].z * 0.3183098733425140380859375) * _2214) * _2215) + _2171;
    }
    bool _2195 = _2175.y == 0u;
    float _2233;
    float _2235;
    float _2237;
    if (_2195)
    {
        _2233 = _2188;
        _2235 = _2190;
        _2237 = _2192;
    }
    else
    {
        uint _2403 = _2104 + 7u;
        float _2419 = (dot(vec3(cbLight._m0[_2104 + 3u].xyz), vec3(_898, _899, _900)) * 0.5) + 0.5;
        float _2420 = _2419 * _2419;
        float _4368 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
        float _2421 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
        float _2422 = isnan(1.0) ? _2120 : (isnan(_2120) ? 1.0 : min(_2120, 1.0));
        _2233 = (((cbLight._m0[_2403].x * 0.3183098733425140380859375) * _2421) * _2422) + _2188;
        _2235 = (((cbLight._m0[_2403].y * 0.3183098733425140380859375) * _2421) * _2422) + _2190;
        _2237 = (((cbLight._m0[_2403].z * 0.3183098733425140380859375) * _2421) * _2422) + _2192;
    }
    uint _2240 = _2104 + 8u;
    float _2253 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2104].w)) * _901) * 0.949999988079071044921875);
    float _2254 = _2253 * _2253;
    float _2255 = cbLight._m0[_2104].x + _978;
    float _2256 = cbLight._m0[_2104].y + _979;
    float _2257 = cbLight._m0[_2104].z + _980;
    float _2261 = inversesqrt(dot(vec3(_2255, _2256, _2257), vec3(_2255, _2256, _2257)));
    float _2262 = _2261 * _2255;
    float _2263 = _2261 * _2256;
    float _2264 = _2261 * _2257;
    float _2265 = dot(vec3(_898, _899, _900), vec3(cbLight._m0[_2104].xyz));
    float _4384 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
    float _2268 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
    float _4395 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
    float _2269 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
    float _2270 = dot(vec3(_898, _899, _900), vec3(_2262, _2263, _2264));
    float _4406 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
    float _2273 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
    float _2274 = dot(vec3(cbLight._m0[_2104].xyz), vec3(_2262, _2263, _2264));
    float _4417 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
    float _2278 = _2254 * _2254;
    float _2282 = ((_2273 * _2273) * (_2278 + (-1.0))) + 1.0;
    float _2290 = exp2(log2(1.0 - (isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0)))) * 5.0);
    float _2291 = 0.959999978542327880859375 - _1045;
    float _2293 = 0.959999978542327880859375 - _1046;
    float _2294 = 0.959999978542327880859375 - _1047;
    float _2301 = 1.0 - _2254;
    float _2312 = (0.5 / (((_2269 * ((_2268 * _2301) + _2254)) + 9.9999999392252902907785028219223e-09) + (((_2269 * _2301) + _2254) * _2268))) * _2268;
    float _4428 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
    float _2314 = (isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0))) * (_2278 / ((_2282 * _2282) * 3.141590118408203125));
    uint _2325 = _2104 + 9u;
    float _2336 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2141].w)) * _901) * 0.949999988079071044921875);
    float _2337 = _2336 * _2336;
    float _2338 = cbLight._m0[_2141].x + _978;
    float _2339 = cbLight._m0[_2141].y + _979;
    float _2340 = cbLight._m0[_2141].z + _980;
    float _2344 = inversesqrt(dot(vec3(_2338, _2339, _2340), vec3(_2338, _2339, _2340)));
    float _2345 = _2344 * _2338;
    float _2346 = _2344 * _2339;
    float _2347 = _2344 * _2340;
    float _2348 = dot(vec3(_898, _899, _900), vec3(cbLight._m0[_2141].xyz));
    float _4439 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
    float _2351 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
    float _2352 = dot(vec3(_898, _899, _900), vec3(_2345, _2346, _2347));
    float _4450 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
    float _2355 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
    float _2356 = dot(vec3(cbLight._m0[_2141].xyz), vec3(_2345, _2346, _2347));
    float _4461 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
    float _2360 = _2337 * _2337;
    float _2364 = ((_2355 * _2355) * (_2360 + (-1.0))) + 1.0;
    float _2371 = exp2(log2(1.0 - (isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0)))) * 5.0);
    float _2378 = 1.0 - _2337;
    float _2388 = (0.5 / (((_2269 * ((_2351 * _2378) + _2337)) + 9.9999999392252902907785028219223e-09) + (((_2269 * _2378) + _2337) * _2351))) * _2351;
    float _4472 = isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0));
    float _2390 = (isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0))) * (_2360 / ((_2364 * _2364) * 3.141590118408203125));
    float _2400 = (((((_2371 * _2291) + _1048) * cbLight._m0[_2325].x) * _2390) * _2127) + (((((_2290 * _2291) + _1048) * cbLight._m0[_2240].x) * _2314) * _2137);
    float _2401 = (((((_2371 * _2293) + _1050) * cbLight._m0[_2325].y) * _2390) * _2127) + (((((_2290 * _2293) + _1050) * cbLight._m0[_2240].y) * _2314) * _2137);
    float _2402 = (((((_2371 * _2294) + _1051) * cbLight._m0[_2325].z) * _2390) * _2127) + (((((_2290 * _2294) + _1051) * cbLight._m0[_2240].z) * _2314) * _2137);
    float _2464;
    float _2466;
    float _2468;
    if (_2177)
    {
        _2464 = _2400;
        _2466 = _2401;
        _2468 = _2402;
    }
    else
    {
        uint _2470 = _2104 + 2u;
        uint _2474 = _2104 + 10u;
        float _2488 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2470].w)) * _901) * 0.949999988079071044921875);
        float _2489 = _2488 * _2488;
        float _2490 = cbLight._m0[_2470].x + _978;
        float _2491 = cbLight._m0[_2470].y + _979;
        float _2492 = cbLight._m0[_2470].z + _980;
        float _2496 = inversesqrt(dot(vec3(_2490, _2491, _2492), vec3(_2490, _2491, _2492)));
        float _2497 = _2496 * _2490;
        float _2498 = _2496 * _2491;
        float _2499 = _2496 * _2492;
        float _2500 = dot(vec3(_898, _899, _900), vec3(cbLight._m0[_2470].xyz));
        float _4483 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0));
        float _2503 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
        float _2504 = dot(vec3(_898, _899, _900), vec3(_2497, _2498, _2499));
        float _4494 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
        float _2507 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
        float _2508 = dot(vec3(cbLight._m0[_2470].xyz), vec3(_2497, _2498, _2499));
        float _4505 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
        float _2512 = _2489 * _2489;
        float _2516 = ((_2507 * _2507) * (_2512 + (-1.0))) + 1.0;
        float _2523 = exp2(log2(1.0 - (isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0)))) * 5.0);
        float _2530 = 1.0 - _2489;
        float _2540 = (0.5 / (((_2269 * ((_2503 * _2530) + _2489)) + 9.9999999392252902907785028219223e-09) + (((_2269 * _2530) + _2489) * _2503))) * _2503;
        float _4516 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
        float _2542 = (isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0))) * (_2512 / ((_2516 * _2516) * 3.141590118408203125));
        float _2543 = isnan(1.0) ? _2119 : (isnan(_2119) ? 1.0 : min(_2119, 1.0));
        _2464 = (((((_2523 * _2291) + _1048) * cbLight._m0[_2474].x) * _2542) * _2543) + _2400;
        _2466 = (((((_2523 * _2293) + _1050) * cbLight._m0[_2474].y) * _2542) * _2543) + _2401;
        _2468 = (((((_2523 * _2294) + _1051) * cbLight._m0[_2474].z) * _2542) * _2543) + _2402;
    }
    float _2578;
    float _2580;
    float _2582;
    if (_2195)
    {
        _2578 = _2464;
        _2580 = _2466;
        _2582 = _2468;
    }
    else
    {
        uint _2589 = _2104 + 3u;
        uint _2593 = _2104 + 11u;
        float _2607 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2589].w)) * _901) * 0.949999988079071044921875);
        float _2608 = _2607 * _2607;
        float _2609 = cbLight._m0[_2589].x + _978;
        float _2610 = cbLight._m0[_2589].y + _979;
        float _2611 = cbLight._m0[_2589].z + _980;
        float _2615 = inversesqrt(dot(vec3(_2609, _2610, _2611), vec3(_2609, _2610, _2611)));
        float _2616 = _2615 * _2609;
        float _2617 = _2615 * _2610;
        float _2618 = _2615 * _2611;
        float _2619 = dot(vec3(_898, _899, _900), vec3(cbLight._m0[_2589].xyz));
        float _4532 = isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0));
        float _2622 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
        float _2623 = dot(vec3(_898, _899, _900), vec3(_2616, _2617, _2618));
        float _4543 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0));
        float _2626 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
        float _2627 = dot(vec3(cbLight._m0[_2589].xyz), vec3(_2616, _2617, _2618));
        float _4554 = isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0));
        float _2631 = _2608 * _2608;
        float _2635 = ((_2626 * _2626) * (_2631 + (-1.0))) + 1.0;
        float _2642 = exp2(log2(1.0 - (isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0)))) * 5.0);
        float _2649 = 1.0 - _2608;
        float _2659 = (0.5 / (((_2269 * ((_2622 * _2649) + _2608)) + 9.9999999392252902907785028219223e-09) + (((_2269 * _2649) + _2608) * _2622))) * _2622;
        float _4565 = isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : max(_2659, 0.0));
        float _2661 = (isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0))) * (_2631 / ((_2635 * _2635) * 3.141590118408203125));
        float _2662 = isnan(1.0) ? _2120 : (isnan(_2120) ? 1.0 : min(_2120, 1.0));
        _2578 = (((((_2642 * _2291) + _1048) * cbLight._m0[_2593].x) * _2661) * _2662) + _2464;
        _2580 = (((((_2642 * _2293) + _1050) * cbLight._m0[_2593].y) * _2661) * _2662) + _2466;
        _2582 = (((((_2642 * _2294) + _1051) * cbLight._m0[_2593].z) * _2661) * _2662) + _2468;
    }
    float _2797;
    float _2799;
    float _2801;
    float _2803;
    float _2805;
    float _2807;
    if (_2102.y == 0u)
    {
        float _2737 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2738 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2737;
        float _2739 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2737;
        float _2740 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2737;
        uvec4 _2752 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2753 = _2752.x;
        uint _2764 = uint((float(_2752.y) * floor(float(uint(cbSceneParam._m0[85u].y * _987) / _2753))) + floor(float(uint(cbSceneParam._m0[85u].x * _986) / _2753)));
        float _2774 = (log2(_2740 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2775 = isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : max(_2774, 0.0));
        uint _2778 = uint(isnan(14.0) ? _2775 : (isnan(_2775) ? 14.0 : min(_2775, 14.0)));
        uvec4 _2783 = texelFetch(g_lightClusterGridBuffer, int(((_2778 << 2u) + (_2764 << 6u)) >> 2u));
        uint _2784 = _2783.x;
        uint _2785 = _2752.z;
        float _2885;
        float _2887;
        float _2889;
        float _2891;
        float _2893;
        float _2895;
        if (((((1u << ((_2785 >> 4u) & 15u)) + 4294967295u) & _2784) == 0u) || ((_2785 & 240u) == 0u))
        {
            _2885 = 0.0;
            _2887 = 0.0;
            _2889 = 0.0;
            _2891 = 0.0;
            _2893 = 0.0;
            _2895 = 0.0;
        }
        else
        {
            float _2886;
            float _2888;
            float _2890;
            float _2892;
            float _2894;
            float _2896;
            float _3030 = 0.0;
            float _3031 = 0.0;
            float _3032 = 0.0;
            float _3033 = 0.0;
            float _3034 = 0.0;
            float _3035 = 0.0;
            uint _3036 = 0u;
            uint _3045;
            bool _3046;
            for (;;)
            {
                _3045 = texelFetch(g_lightClassification, int((((_2778 << 5u) + (_2764 << 9u)) + (_3036 << 2u)) >> 2u)).x;
                _3046 = _3045 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3046)
                {
                    frontier_phi_61_pred = _3030;
                    frontier_phi_61_pred_1 = _3035;
                    frontier_phi_61_pred_2 = _3034;
                    frontier_phi_61_pred_3 = _3033;
                    frontier_phi_61_pred_4 = _3032;
                    frontier_phi_61_pred_5 = _3031;
                }
                else
                {
                    float _3154;
                    float _3155;
                    float _3156;
                    float _3157;
                    float _3158;
                    float _3159;
                    uint _3160;
                    _3154 = _3030;
                    _3155 = _3031;
                    _3156 = _3032;
                    _3157 = _3033;
                    _3158 = _3034;
                    _3159 = _3035;
                    _3160 = _3045;
                    float _3086;
                    float _3087;
                    float _3088;
                    float _3089;
                    float _3090;
                    float _3091;
                    for (;;)
                    {
                        uint _3164 = uint(findLSB(_3160)) + (_3036 << 5u);
                        uint _3161 = (_3160 + 4294967295u) & _3160;
                        uint _3166 = _3164 * 48u;
                        vec4 _3180 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3166)).x, texelFetch(g_PointLightRenderingBuffer, int(_3166 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3166 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3166 + 3u)).x));
                        uint _3186 = (_3164 * 48u) + 4u;
                        vec4 _3199 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3186)).x, texelFetch(g_PointLightRenderingBuffer, int(_3186 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3186 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3186 + 3u)).x));
                        uint _3205 = (_3164 * 48u) + 8u;
                        vec3 _3216 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3205)).x, texelFetch(g_PointLightRenderingBuffer, int(_3205 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3205 + 2u)).x));
                        float _3220 = _3180.x - _2738;
                        float _3221 = _3180.y - _2739;
                        float _3222 = _3180.z - _2740;
                        float _3223 = dot(vec3(_3220, _3221, _3222), vec3(_3220, _3221, _3222));
                        float _3226 = inversesqrt(_3223);
                        float _3227 = _3226 * _3220;
                        float _3228 = _3226 * _3221;
                        float _3229 = _3226 * _3222;
                        float _3230 = dot(vec3(_1005, _1008, _1011), vec3(_3227, _3228, _3229));
                        float _3235 = 1.0 - (_3223 * _3180.w);
                        float _4591 = isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : max(_3235, 0.0));
                        float _3236 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
                        float _3237 = sqrt(_3223) * _3199.w;
                        float _3240 = 1.39999997615814208984375 / (_3237 + 1.39999997615814208984375);
                        float _3241 = _3240 * _3240;
                        float _3244 = ((1.0 - _3241) * _3230) + _3241;
                        float _3247 = _3237 * _3237;
                        float _3251 = ((isnan(0.0) ? _3244 : (isnan(_3244) ? 0.0 : max(_3244, 0.0))) * _3236) / ((_3247 * 0.699999988079071044921875) + 1.0);
                        float _3255 = (-0.0) - _2738;
                        float _3256 = (-0.0) - _2739;
                        float _3257 = (-0.0) - _2740;
                        float _3261 = inversesqrt(dot(vec3(_3255, _3256, _3257), vec3(_3255, _3256, _3257)));
                        float _3262 = _3261 * _3255;
                        float _3263 = _3261 * _3256;
                        float _3264 = _3261 * _3257;
                        float _3272 = exp2(log2(1.0 / ((_3247 * 3.5) + 5.0)) * 0.25);
                        float _3273 = 1.0 - _1080;
                        float _3280 = sqrt(1.0 - ((1.0 - (_3273 * _3273)) * (1.0 - (_3272 * _3272))));
                        float _3281 = _3280 * _3280;
                        float _3282 = _3281 * _3281;
                        float _3283 = _3262 + _3227;
                        float _3284 = _3263 + _3228;
                        float _3285 = _3264 + _3229;
                        float _3289 = inversesqrt(dot(vec3(_3283, _3284, _3285), vec3(_3283, _3284, _3285)));
                        float _3293 = dot(vec3(_1005, _1008, _1011), vec3(_3262, _3263, _3264));
                        float _4607 = isnan(0.0) ? _3293 : (isnan(_3293) ? 0.0 : max(_3293, 0.0));
                        float _3296 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
                        float _3297 = dot(vec3(_1005, _1008, _1011), vec3(_3289 * _3283, _3289 * _3284, _3289 * _3285));
                        float _4618 = isnan(0.0) ? _3297 : (isnan(_3297) ? 0.0 : max(_3297, 0.0));
                        float _3300 = isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0));
                        float _3304 = ((_3300 * _3300) * (_3282 + (-1.0))) + 1.0;
                        float _3305 = _3240 * _3281;
                        float _3306 = _3305 * _3305;
                        float _3309 = ((1.0 - _3306) * _3230) + _3306;
                        float _4629 = isnan(0.0) ? _3309 : (isnan(_3309) ? 0.0 : max(_3309, 0.0));
                        float _3310 = isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0));
                        float _3311 = 1.0 - _3281;
                        float _3321 = (0.5 / (((_3310 * ((_3296 * _3311) + _3281)) + 9.9999999392252902907785028219223e-09) + (((_3310 * _3311) + _3281) * _3296))) * _3310;
                        float _4640 = isnan(0.0) ? _3321 : (isnan(_3321) ? 0.0 : max(_3321, 0.0));
                        float _3332 = (((_3282 * 3.1415927410125732421875) * (isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0)))) / ((_3304 * _3304) * ((_3247 * 2.1991131305694580078125) + 3.141590118408203125))) * _3236;
                        _3089 = (_3251 * _3199.x) + _3157;
                        _3090 = (_3251 * _3199.y) + _3158;
                        _3091 = (_3251 * _3199.z) + _3159;
                        _3086 = (_3332 * _3216.x) + _3154;
                        _3087 = (_3332 * _3216.y) + _3155;
                        _3088 = (_3332 * _3216.z) + _3156;
                        if (_3161 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3154 = _3086;
                            _3155 = _3087;
                            _3156 = _3088;
                            _3157 = _3089;
                            _3158 = _3090;
                            _3159 = _3091;
                            _3160 = _3161;
                        }
                    }
                    frontier_phi_61_pred = _3086;
                    frontier_phi_61_pred_1 = _3091;
                    frontier_phi_61_pred_2 = _3090;
                    frontier_phi_61_pred_3 = _3089;
                    frontier_phi_61_pred_4 = _3088;
                    frontier_phi_61_pred_5 = _3087;
                }
                _2886 = frontier_phi_61_pred;
                _2896 = frontier_phi_61_pred_1;
                _2894 = frontier_phi_61_pred_2;
                _2892 = frontier_phi_61_pred_3;
                _2890 = frontier_phi_61_pred_4;
                _2888 = frontier_phi_61_pred_5;
                uint _3037 = _3036 + 1u;
                if (_3037 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3030 = _2886;
                    _3031 = _2888;
                    _3032 = _2890;
                    _3033 = _2892;
                    _3034 = _2894;
                    _3035 = _2896;
                    _3036 = _3037;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2885 = _2886;
            _2887 = _2888;
            _2889 = _2890;
            _2891 = _2892;
            _2893 = _2894;
            _2895 = _2896;
        }
        uvec4 _2899 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2900 = _2899.z;
        uint _2902 = (_2900 >> 8u) & 15u;
        float _2998;
        float _3000;
        float _3002;
        float _3004;
        float _3006;
        float _3008;
        if (((4294967295u << _2902) & _2784) == 0u)
        {
            _2998 = _2885;
            _3000 = _2887;
            _3002 = _2889;
            _3004 = _2891;
            _3006 = _2893;
            _3008 = _2895;
        }
        else
        {
            float _3023 = inversesqrt(dot(vec3(_2738, _2739, _2740), vec3(_2738, _2739, _2740)));
            float _3024 = _3023 * _2738;
            float _3025 = _3023 * _2739;
            float _3026 = _3023 * _2740;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2902 < ((_2900 >> 12u) & 15u))
            {
                float _2999;
                float _3001;
                float _3003;
                float _3005;
                float _3007;
                float _3009;
                float _3137 = _2885;
                float _3138 = _2887;
                float _3139 = _2889;
                float _3140 = _2891;
                float _3141 = _2893;
                float _3142 = _2895;
                uint _3143 = _2902;
                uint _3152;
                bool _3153;
                for (;;)
                {
                    _3152 = texelFetch(g_lightClassification, int((((_2778 << 5u) + (_2764 << 9u)) + (_3143 << 2u)) >> 2u)).x;
                    _3153 = _3152 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3153)
                    {
                        frontier_phi_67_pred = _3140;
                        frontier_phi_67_pred_1 = _3141;
                        frontier_phi_67_pred_2 = _3142;
                        frontier_phi_67_pred_3 = _3139;
                        frontier_phi_67_pred_4 = _3138;
                        frontier_phi_67_pred_5 = _3137;
                    }
                    else
                    {
                        float _3337;
                        float _3338;
                        float _3339;
                        float _3340;
                        float _3341;
                        float _3342;
                        float _3630;
                        float _3631;
                        float _3632;
                        float _3633;
                        float _3634;
                        float _3635;
                        float _3350 = _3137;
                        float _3351 = _3138;
                        float _3352 = _3139;
                        float _3353 = _3140;
                        float _3354 = _3141;
                        float _3355 = _3142;
                        uint _3356 = _3152;
                        uint _3357;
                        vec4 _3382;
                        float _3383;
                        vec4 _3398;
                        vec3 _3410;
                        vec4 _3425;
                        vec4 _3440;
                        float _3486;
                        bool _3487;
                        for (;;)
                        {
                            uint _3367 = ((_3143 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3356));
                            _3357 = (_3356 + 4294967295u) & _3356;
                            uint _3369 = _3367 * 40u;
                            _3382 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3369)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 3u)).x));
                            _3383 = _3382.w;
                            uint _3385 = (_3367 * 40u) + 4u;
                            _3398 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3385)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 3u)).x));
                            uint _3400 = (_3367 * 40u) + 8u;
                            _3410 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3400)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 2u)).x));
                            uint _3412 = (_3367 * 40u) + 16u;
                            _3425 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3412)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 3u)).x));
                            uint _3427 = (_3367 * 40u) + 20u;
                            _3440 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3427)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 3u)).x));
                            uint _3442 = (_3367 * 40u) + 24u;
                            vec4 _3455 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3442)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 3u)).x));
                            uint _3461 = (_3367 * 40u) + 28u;
                            vec4 _3474 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3461)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 3u)).x));
                            _3486 = fma(_2740, _3474.z, fma(_2739, _3474.y, _3474.x * _2738)) + _3474.w;
                            _3487 = !((fma(_2740, _3455.z, fma(_2739, _3455.y, _3455.x * _2738)) + _3455.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3487)
                            {
                                float _3514 = _3382.x - _2738;
                                float _3515 = _3382.y - _2739;
                                float _3516 = _3382.z - _2740;
                                float _3517 = dot(vec3(_3514, _3515, _3516), vec3(_3514, _3515, _3516));
                                float _3520 = inversesqrt(_3517);
                                float _3521 = _3520 * _3514;
                                float _3522 = _3520 * _3515;
                                float _3523 = _3520 * _3516;
                                float _3527 = 1.0 - (_3517 / (_3383 * _3383));
                                float _4651 = isnan(0.0) ? _3527 : (isnan(_3527) ? 0.0 : max(_3527, 0.0));
                                float _3528 = isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0));
                                float _3532 = sqrt(_3517) * _3398.w;
                                float _3534 = 1.39999997615814208984375 / (_3532 + 1.39999997615814208984375);
                                float _3535 = _3534 * _3534;
                                float _3538 = ((1.0 - _3535) * dot(vec3(_3521, _3522, _3523), vec3(_1005, _1008, _1011))) + _3535;
                                float _3541 = _3532 * _3532;
                                float _3545 = (fma(_2740, _3425.z, fma(_2739, _3425.y, _3425.x * _2738)) + _3425.w) / _3486;
                                float _3546 = (fma(_2740, _3440.z, fma(_2739, _3440.y, _3440.x * _2738)) + _3440.w) / _3486;
                                float _3550 = 1.0 - dot(vec2(_3545, _3546), vec2(_3545, _3546));
                                float _4667 = isnan(0.0) ? _3550 : (isnan(_3550) ? 0.0 : max(_3550, 0.0));
                                float _3551 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
                                float _3552 = _3551 * (((isnan(0.0) ? _3538 : (isnan(_3538) ? 0.0 : max(_3538, 0.0))) * _3528) / ((_3541 * 0.699999988079071044921875) + 1.0));
                                float _3564 = exp2(log2(1.0 / ((_3541 * 3.5) + 5.0)) * 0.25);
                                float _3565 = 1.0 - _1080;
                                float _3572 = sqrt(1.0 - ((1.0 - (_3565 * _3565)) * (1.0 - (_3564 * _3564))));
                                float _3573 = _3572 * _3572;
                                float _3574 = _3573 * _3573;
                                float _3575 = _3521 - _3024;
                                float _3576 = _3522 - _3025;
                                float _3577 = _3523 - _3026;
                                float _3581 = inversesqrt(dot(vec3(_3575, _3576, _3577), vec3(_3575, _3576, _3577)));
                                float _3585 = dot(vec3(_1005, _1008, _1011), vec3((-0.0) - _3024, (-0.0) - _3025, (-0.0) - _3026));
                                float _4678 = isnan(0.0) ? _3585 : (isnan(_3585) ? 0.0 : max(_3585, 0.0));
                                float _3588 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
                                float _3589 = dot(vec3(_1005, _1008, _1011), vec3(_3581 * _3575, _3581 * _3576, _3581 * _3577));
                                float _4689 = isnan(0.0) ? _3589 : (isnan(_3589) ? 0.0 : max(_3589, 0.0));
                                float _3592 = isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0));
                                float _3596 = ((_3592 * _3592) * (_3574 + (-1.0))) + 1.0;
                                float _3597 = _3534 * _3573;
                                float _3598 = _3597 * _3597;
                                float _3604 = ((1.0 - _3598) * dot(vec3(_1005, _1008, _1011), vec3(_3521, _3522, _3523))) + _3598;
                                float _4700 = isnan(0.0) ? _3604 : (isnan(_3604) ? 0.0 : max(_3604, 0.0));
                                float _3605 = isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0));
                                float _3606 = 1.0 - _3573;
                                float _3616 = (0.5 / (((_3605 * ((_3588 * _3606) + _3573)) + 9.9999999392252902907785028219223e-09) + (((_3605 * _3606) + _3573) * _3588))) * _3605;
                                float _4711 = isnan(0.0) ? _3616 : (isnan(_3616) ? 0.0 : max(_3616, 0.0));
                                float _3626 = (_3551 * _3528) * (((_3574 * 3.1415927410125732421875) * (isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0)))) / ((_3596 * _3596) * ((_3541 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3626 * _3410.x;
                                frontier_phi_73_pred_1 = _3626 * _3410.y;
                                frontier_phi_73_pred_2 = _3552 * _3398.z;
                                frontier_phi_73_pred_3 = _3552 * _3398.y;
                                frontier_phi_73_pred_4 = _3552 * _3398.x;
                                frontier_phi_73_pred_5 = _3626 * _3410.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3630 = frontier_phi_73_pred;
                            _3631 = frontier_phi_73_pred_1;
                            _3635 = frontier_phi_73_pred_2;
                            _3634 = frontier_phi_73_pred_3;
                            _3633 = frontier_phi_73_pred_4;
                            _3632 = frontier_phi_73_pred_5;
                            _3340 = _3633 + _3353;
                            _3341 = _3634 + _3354;
                            _3342 = _3635 + _3355;
                            _3337 = _3630 + _3350;
                            _3338 = _3631 + _3351;
                            _3339 = _3632 + _3352;
                            if (_3357 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3350 = _3337;
                                _3351 = _3338;
                                _3352 = _3339;
                                _3353 = _3340;
                                _3354 = _3341;
                                _3355 = _3342;
                                _3356 = _3357;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3340;
                        frontier_phi_67_pred_1 = _3341;
                        frontier_phi_67_pred_2 = _3342;
                        frontier_phi_67_pred_3 = _3339;
                        frontier_phi_67_pred_4 = _3338;
                        frontier_phi_67_pred_5 = _3337;
                    }
                    _3005 = frontier_phi_67_pred;
                    _3007 = frontier_phi_67_pred_1;
                    _3009 = frontier_phi_67_pred_2;
                    _3003 = frontier_phi_67_pred_3;
                    _3001 = frontier_phi_67_pred_4;
                    _2999 = frontier_phi_67_pred_5;
                    uint _3144 = _3143 + 1u;
                    if (_3144 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3137 = _2999;
                        _3138 = _3001;
                        _3139 = _3003;
                        _3140 = _3005;
                        _3141 = _3007;
                        _3142 = _3009;
                        _3143 = _3144;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3007;
                frontier_phi_55_56_ladder_1 = _3009;
                frontier_phi_55_56_ladder_2 = _3005;
                frontier_phi_55_56_ladder_3 = _3003;
                frontier_phi_55_56_ladder_4 = _3001;
                frontier_phi_55_56_ladder_5 = _2999;
            }
            else
            {
                frontier_phi_55_56_ladder = _2893;
                frontier_phi_55_56_ladder_1 = _2895;
                frontier_phi_55_56_ladder_2 = _2891;
                frontier_phi_55_56_ladder_3 = _2889;
                frontier_phi_55_56_ladder_4 = _2887;
                frontier_phi_55_56_ladder_5 = _2885;
            }
            _2998 = frontier_phi_55_56_ladder_5;
            _3000 = frontier_phi_55_56_ladder_4;
            _3002 = frontier_phi_55_56_ladder_3;
            _3004 = frontier_phi_55_56_ladder_2;
            _3006 = frontier_phi_55_56_ladder;
            _3008 = frontier_phi_55_56_ladder_1;
        }
        float _3013 = isnan(1.0) ? _1064 : (isnan(_1064) ? 1.0 : min(_1064, 1.0));
        _2797 = (_3013 * _3004) + _2233;
        _2799 = (_3013 * _3006) + _2235;
        _2801 = (_3013 * _3008) + _2237;
        _2803 = ((_2998 * _1048) * _3013) + _2578;
        _2805 = ((_3000 * _1050) * _3013) + _2580;
        _2807 = ((_3002 * _1051) * _3013) + _2582;
    }
    else
    {
        _2797 = _2233;
        _2799 = _2235;
        _2801 = _2237;
        _2803 = _2578;
        _2805 = _2580;
        _2807 = _2582;
    }
    float _4727 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
    float _4738 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
    float _4749 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
    uint _2827 = _278 + 6u;
    float _2835 = _986 / cbSceneParam._m0[86u].x;
    float _2836 = _987 / cbSceneParam._m0[86u].y;
    vec4 _2850 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2835, _2836, (log2((isnan(cbSceneParam._m0[77u].w) ? _920 : (isnan(_920) ? cbSceneParam._m0[77u].w : min(_920, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2852 = _2850.x;
    float _2853 = _2850.y;
    float _2854 = _2850.z;
    float _2855 = _2850.w;
    float _2948;
    float _2950;
    float _2952;
    float _2954;
    if (_920 > cbSceneParam._m0[78u].w)
    {
        float _2910 = isnan(_920) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _920 : min(cbSceneParam._m0[80u].w, _920));
        float _2911 = _2910 / _920;
        float _2922 = _2911 * _971;
        float _2923 = _972 * _2911;
        float _2924 = (-0.0) - _2923;
        float _2926 = _2911 * _973;
        float _2928 = (cbSceneParam._m0[77u].w * _2924) / _2910;
        float _2929 = _2928 + cbSceneParam._m0[79u].w;
        float _2930 = cbSceneParam._m0[79u].w - _2923;
        float _2936 = sqrt(((_2922 * _2922) + (_2923 * _2923)) + (_2926 * _2926));
        float _2939 = (1.0 - (cbSceneParam._m0[77u].w / _2910)) * _2936;
        float _2944 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2946 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3099;
        if (abs((_2924 - _2928) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3099 = ((((_2929 > 0.0) ? exp2(_2944 * _2929) : (2.0 - exp2(_2946 * _2929))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2939;
        }
        else
        {
            float _3059 = 1.0 / cbSceneParam._m0[80u].x;
            float _3060 = isnan(_2930) ? _2929 : (isnan(_2929) ? _2930 : max(_2929, _2930));
            float _3061 = isnan(_2930) ? _2929 : (isnan(_2929) ? _2930 : min(_2929, _2930));
            float _3070 = isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : min(_3060, 0.0));
            float _3071 = isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : min(_3061, 0.0));
            _3099 = ((abs(_2936 / _2924) * cbSceneParam._m0[80u].y) * ((((_3070 - _3071) * 2.0) - ((exp2(_2944 * (isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : max(_3060, 0.0)))) - exp2(_2944 * (isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : max(_3061, 0.0))))) * _3059)) - ((exp2(_2946 * _3070) - exp2(_2946 * _3071)) * _3059))) + (_2939 * cbSceneParam._m0[80u].z);
        }
        vec4 _3101 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2835, _2836, 1.0), 0.0);
        float _3110 = exp2((_3099 * (-1.44269502162933349609375)) * (1.0 - _3101.w));
        float _3111 = log2(_3110);
        float _3127 = log2(_2855);
        _2948 = (exp2(_3127 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3111 * cbSceneParam._m0[78u].x)) * _3101.x) / cbSceneParam._m0[78u].x)) + _2852;
        _2950 = (exp2(_3127 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3111 * cbSceneParam._m0[78u].y)) * _3101.y) / cbSceneParam._m0[78u].y)) + _2853;
        _2952 = (exp2(_3127 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3111 * cbSceneParam._m0[78u].z)) * _3101.z) / cbSceneParam._m0[78u].z)) + _2854;
        _2954 = _3110 * _2855;
    }
    else
    {
        _2948 = _2852;
        _2950 = _2853;
        _2952 = _2854;
        _2954 = _2855;
    }
    float _2966 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2967 = _2966 == 3.0;
    float _2968 = log2(_2954);
    float _2975 = exp2(_2968 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0))) * (_2797 + ((isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0))) * _1064))) + ((_2803 + ((isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0))) * _1871)) * cbPerFrame._m0[3u].x));
    float _2976 = exp2(_2968 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0))) * (_2799 + ((isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0))) * _1064))) + ((_2805 + ((isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0))) * _1871)) * cbPerFrame._m0[3u].x));
    float _2977 = exp2(_2968 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0))) * (_2801 + ((isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0))) * _1064))) + ((_2807 + ((isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0))) * _1871)) * cbPerFrame._m0[3u].x));
    float _2986 = (_2966 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2986 * (_2967 ? _2975 : (_2975 + (cbSceneParam._m0[72u].w * _2948)));
    SV_Target.y = _2986 * (_2967 ? _2976 : (_2976 + (cbSceneParam._m0[72u].w * _2950)));
    SV_Target.z = _2986 * (_2967 ? _2977 : (_2977 + (cbSceneParam._m0[72u].w * _2952)));
    SV_Target.w = cbInstanceData._m0[_2827].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2827].w;
}


