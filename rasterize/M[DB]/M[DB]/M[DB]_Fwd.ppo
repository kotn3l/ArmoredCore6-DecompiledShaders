#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_DB_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_DB_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _801;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _174 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _175 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _176 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _181 = inversesqrt(dot(vec3(_174, _175, _176), vec3(_174, _175, _176)));
    float _188 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _195 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _218 = texture(sampler2D(M_DB_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _224 = _218.x * cbMtdParam._m0[9u].x;
    float _225 = _218.y * cbMtdParam._m0[9u].y;
    float _226 = _218.z * cbMtdParam._m0[9u].z;
    vec4 _242 = texture(sampler2D(M_DB_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _246 = _242.z;
    float _250 = (_242.x * 2.0) + (-1.0);
    float _252 = (_242.y * 2.0) + (-1.0);
    float _253 = dot(vec2(_250, _252), vec2(_250, _252));
    float _3119 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    float _259 = sqrt(1.0 - (isnan(1.0) ? _3119 : (isnan(_3119) ? 1.0 : min(_3119, 1.0))));
    float _262 = fma(_259, _188 * NORMAL.x, fma(_252, _195 * TANGENT.x, (_181 * _174) * _250));
    float _265 = fma(_259, _188 * NORMAL.y, fma(_252, _195 * TANGENT.y, (_181 * _175) * _250));
    float _268 = fma(_259, _188 * NORMAL.z, fma(_252, _195 * TANGENT.z, (_181 * _176) * _250));
    float _272 = inversesqrt(dot(vec3(_262, _265, _268), vec3(_262, _265, _268)));
    float _273 = _272 * _262;
    float _274 = _272 * _265;
    float _275 = _272 * _268;
    float _3130 = isnan(0.0) ? cbMtdParam._m0[10u].w : (isnan(cbMtdParam._m0[10u].w) ? 0.0 : max(cbMtdParam._m0[10u].w, 0.0));
    float _276 = isnan(1.0) ? _3130 : (isnan(_3130) ? 1.0 : min(_3130, 1.0));
    float _3141 = isnan(0.0) ? _246 : (isnan(_246) ? 0.0 : max(_246, 0.0));
    float _277 = isnan(1.0) ? _3141 : (isnan(_3141) ? 1.0 : min(_3141, 1.0));
    float _3152 = isnan(0.0) ? _224 : (isnan(_224) ? 0.0 : max(_224, 0.0));
    float _3163 = isnan(0.0) ? _225 : (isnan(_225) ? 0.0 : max(_225, 0.0));
    float _3174 = isnan(0.0) ? _226 : (isnan(_226) ? 0.0 : max(_226, 0.0));
    float _296 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _337 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _347 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _337);
    float _348 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _337);
    float _349 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _337);
    float _353 = inversesqrt(dot(vec3(_347, _348, _349), vec3(_347, _348, _349)));
    float _354 = _347 * _353;
    float _355 = _348 * _353;
    float _356 = _349 * _353;
    float _362 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _363 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _384 = fma(_275, cbSceneParam._m0[5u].z, fma(_274, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _273));
    float _387 = fma(_275, cbSceneParam._m0[6u].z, fma(_274, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _273));
    float _390 = fma(_275, cbSceneParam._m0[7u].z, fma(_274, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _273));
    uint _403 = uint(roundEven(NORMAL.w)) * 13u;
    uint _406 = (_403 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _412 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3152 : (isnan(_3152) ? 1.0 : min(_3152, 1.0)))) * cbInstanceData._m0[_406].x;
    float _413 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3163 : (isnan(_3163) ? 1.0 : min(_3163, 1.0)))) * cbInstanceData._m0[_406].y;
    float _414 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3174 : (isnan(_3174) ? 1.0 : min(_3174, 1.0)))) * cbInstanceData._m0[_406].z;
    float _3185 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
    float _415 = isnan(1.0) ? _3185 : (isnan(_3185) ? 1.0 : min(_3185, 1.0));
    float _3196 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _416 = isnan(1.0) ? _3196 : (isnan(_3196) ? 1.0 : min(_3196, 1.0));
    float _3207 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _417 = isnan(1.0) ? _3207 : (isnan(_3207) ? 1.0 : min(_3207, 1.0));
    vec4 _426 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _362, cbSceneParam._m0[86u].y * _363));
    float _429 = _426.x * TEXCOORD.z;
    float _430 = dot(vec3(_273, _274, _275), vec3(_354, _355, _356));
    float _433 = _430 * 2.0;
    float _437 = (_433 * _273) - _354;
    float _438 = (_433 * _274) - _355;
    float _439 = (_433 * _275) - _356;
    float _443 = abs(dot(vec3(_354, _355, _356), vec3(_273, _274, _275)));
    float _3218 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _445 = sqrt(_277);
    float _458 = exp2((_445 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3218 : (isnan(_3218) ? 1.0 : min(_3218, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_445 * 3.0));
    float _490 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _494 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _498 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _800;
    float _802;
    float _803;
    float _804;
    float _805;
    float _806;
    float _807;
    float _808;
    float _809;
    float _810;
    float _811;
    float _812;
    float _813;
    float _814;
    float _815;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _525 = fma(_498, cbModelParam._m0[26u].z, fma(_494, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _490));
        float _529 = fma(_498, cbModelParam._m0[27u].z, fma(_494, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _490));
        float _533 = fma(_498, cbModelParam._m0[28u].z, fma(_494, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _490));
        float _558 = _490 + _273;
        float _559 = _494 + _274;
        float _560 = _498 + _275;
        float _570 = fma(_560, cbModelParam._m0[26u].z, fma(_559, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _558)) - _525;
        float _571 = fma(_560, cbModelParam._m0[27u].z, fma(_559, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _558)) - _529;
        float _572 = fma(_560, cbModelParam._m0[28u].z, fma(_559, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _558)) - _533;
        float _576 = inversesqrt(dot(vec3(_570, _571, _572), vec3(_570, _571, _572)));
        float _589 = ((_576 * _570) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_525 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _590 = ((_576 * _571) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_529 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _591 = ((_576 * _572) / cbModelParam._m0[34u].z) + ((((((_533 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _594 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_589, _590, _591), 0.0);
        vec4 _601 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_589, _590, _591), 0.0);
        vec4 _608 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_589, _590, _591), 0.0);
        vec4 _615 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_589, _590, _591), 0.0);
        float _628 = exp2((_594.w + (-0.5)) * 20.0) * 2.0;
        float _629 = _628 * (_594.x + (-0.5));
        float _630 = _628 * (_594.y + (-0.5));
        float _631 = _628 * (_594.z + (-0.5));
        float _638 = exp2((_601.w + (-0.5)) * 20.0) * 2.0;
        float _639 = _638 * (_601.x + (-0.5));
        float _640 = _638 * (_601.y + (-0.5));
        float _641 = _638 * (_601.z + (-0.5));
        float _648 = exp2((_608.w + (-0.5)) * 20.0) * 2.0;
        float _649 = _648 * (_608.x + (-0.5));
        float _650 = _648 * (_608.y + (-0.5));
        float _651 = _648 * (_608.z + (-0.5));
        float _658 = exp2((_615.w + (-0.5)) * 20.0) * 2.0;
        float _659 = _658 * (_615.x + (-0.5));
        float _660 = _658 * (_615.y + (-0.5));
        float _661 = _658 * (_615.z + (-0.5));
        float _662 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
        float _663 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
        float _664 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
        float _665 = _629 * 0.5;
        float _666 = _639 * 0.5;
        float _667 = _649 * 0.5;
        float _668 = dot(vec3(_665, _666, _667), vec3(_665, _666, _667));
        float _673 = (_668 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_668);
        float _682 = (dot(vec3(_273, _274, _275), vec3(_673 * _665, _673 * _666, _673 * _667)) + 1.0) * 0.5;
        float _3244 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
        float _692 = sqrt(((_666 * _666) + (_665 * _665)) + (_667 * _667)) / (_662 + 9.9999997473787516355514526367188e-06);
        float _3255 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
        float _693 = isnan(1.0) ? _3255 : (isnan(_3255) ? 1.0 : min(_3255, 1.0));
        float _694 = _693 * 2.0;
        float _698 = (1.0 - _693) / (_693 + 1.0);
        float _3266 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
        float _699 = isnan(1.0) ? _3266 : (isnan(_3266) ? 1.0 : min(_3266, 1.0));
        float _708 = ((((1.0 - _699) * (_694 + 2.0)) * exp2(log2(isnan(1.0) ? _3244 : (isnan(_3244) ? 1.0 : min(_3244, 1.0))) * (_694 + 1.0))) + _699) * _662;
        float _709 = _630 * 0.5;
        float _710 = _640 * 0.5;
        float _711 = _650 * 0.5;
        float _712 = dot(vec3(_709, _710, _711), vec3(_709, _710, _711));
        float _717 = (_712 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_712);
        float _725 = (dot(vec3(_273, _274, _275), vec3(_717 * _709, _717 * _710, _717 * _711)) + 1.0) * 0.5;
        float _3277 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
        float _734 = sqrt(((_710 * _710) + (_709 * _709)) + (_711 * _711)) / (_663 + 9.9999997473787516355514526367188e-06);
        float _3288 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
        float _735 = isnan(1.0) ? _3288 : (isnan(_3288) ? 1.0 : min(_3288, 1.0));
        float _736 = _735 * 2.0;
        float _740 = (1.0 - _735) / (_735 + 1.0);
        float _3299 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
        float _741 = isnan(1.0) ? _3299 : (isnan(_3299) ? 1.0 : min(_3299, 1.0));
        float _750 = ((((1.0 - _741) * (_736 + 2.0)) * exp2(log2(isnan(1.0) ? _3277 : (isnan(_3277) ? 1.0 : min(_3277, 1.0))) * (_736 + 1.0))) + _741) * _663;
        float _751 = _631 * 0.5;
        float _752 = _641 * 0.5;
        float _753 = _651 * 0.5;
        float _754 = dot(vec3(_751, _752, _753), vec3(_751, _752, _753));
        float _759 = (_754 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_754);
        float _767 = (dot(vec3(_273, _274, _275), vec3(_759 * _751, _759 * _752, _759 * _753)) + 1.0) * 0.5;
        float _3310 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
        float _776 = sqrt(((_752 * _752) + (_751 * _751)) + (_753 * _753)) / (_664 + 9.9999997473787516355514526367188e-06);
        float _3321 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
        float _777 = isnan(1.0) ? _3321 : (isnan(_3321) ? 1.0 : min(_3321, 1.0));
        float _778 = _777 * 2.0;
        float _782 = (1.0 - _777) / (_777 + 1.0);
        float _3332 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
        float _783 = isnan(1.0) ? _3332 : (isnan(_3332) ? 1.0 : min(_3332, 1.0));
        float _792 = ((((1.0 - _783) * (_778 + 2.0)) * exp2(log2(isnan(1.0) ? _3310 : (isnan(_3310) ? 1.0 : min(_3310, 1.0))) * (_778 + 1.0))) + _783) * _664;
        _800 = _631;
        _802 = _630;
        _803 = _629;
        _804 = _641;
        _805 = _640;
        _806 = _639;
        _807 = _651;
        _808 = _650;
        _809 = _649;
        _810 = _664;
        _811 = _663;
        _812 = _662;
        _813 = cbModelParam._m0[36u].z * (isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0)));
        _814 = cbModelParam._m0[36u].z * (isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0)));
        _815 = cbModelParam._m0[36u].z * (isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0)));
    }
    else
    {
        _800 = _801;
        _802 = _801;
        _803 = _801;
        _804 = _801;
        _805 = _801;
        _806 = _801;
        _807 = _801;
        _808 = _801;
        _809 = _801;
        _810 = _801;
        _811 = _801;
        _812 = _801;
        _813 = 0.0;
        _814 = 0.0;
        _815 = 0.0;
    }
    float _1110;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _841 = fma(_498, cbModelParam._m0[30u].z, fma(_494, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _490));
        float _845 = fma(_498, cbModelParam._m0[31u].z, fma(_494, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _490));
        float _849 = fma(_498, cbModelParam._m0[32u].z, fma(_494, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _490));
        float _872 = _490 + _273;
        float _873 = _494 + _274;
        float _874 = _498 + _275;
        float _884 = fma(_874, cbModelParam._m0[30u].z, fma(_873, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _872)) - _841;
        float _885 = fma(_874, cbModelParam._m0[31u].z, fma(_873, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _872)) - _845;
        float _886 = fma(_874, cbModelParam._m0[32u].z, fma(_873, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _872)) - _849;
        float _890 = inversesqrt(dot(vec3(_884, _885, _886), vec3(_884, _885, _886)));
        float _903 = ((_890 * _884) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_841 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _904 = ((_890 * _885) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_845 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _905 = ((_890 * _886) / cbModelParam._m0[35u].z) + ((((((_849 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _907 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_903, _904, _905), 0.0);
        vec4 _914 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_903, _904, _905), 0.0);
        vec4 _921 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_903, _904, _905), 0.0);
        vec4 _928 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_903, _904, _905), 0.0);
        float _940 = exp2((_907.w + (-0.5)) * 20.0) * 2.0;
        float _941 = _940 * (_907.x + (-0.5));
        float _942 = _940 * (_907.y + (-0.5));
        float _943 = _940 * (_907.z + (-0.5));
        float _950 = exp2((_914.w + (-0.5)) * 20.0) * 2.0;
        float _951 = _950 * (_914.x + (-0.5));
        float _952 = _950 * (_914.y + (-0.5));
        float _953 = _950 * (_914.z + (-0.5));
        float _960 = exp2((_921.w + (-0.5)) * 20.0) * 2.0;
        float _961 = _960 * (_921.x + (-0.5));
        float _962 = _960 * (_921.y + (-0.5));
        float _963 = _960 * (_921.z + (-0.5));
        float _970 = exp2((_928.w + (-0.5)) * 20.0) * 2.0;
        float _971 = _970 * (_928.x + (-0.5));
        float _972 = _970 * (_928.y + (-0.5));
        float _973 = _970 * (_928.z + (-0.5));
        float _974 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _975 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _976 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _977 = _941 * 0.5;
        float _978 = _951 * 0.5;
        float _979 = _961 * 0.5;
        float _980 = dot(vec3(_977, _978, _979), vec3(_977, _978, _979));
        float _985 = (_980 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_980);
        float _993 = (dot(vec3(_273, _274, _275), vec3(_985 * _977, _985 * _978, _985 * _979)) + 1.0) * 0.5;
        float _3373 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _1002 = sqrt(((_978 * _978) + (_977 * _977)) + (_979 * _979)) / (_974 + 9.9999997473787516355514526367188e-06);
        float _3384 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1003 = isnan(1.0) ? _3384 : (isnan(_3384) ? 1.0 : min(_3384, 1.0));
        float _1004 = _1003 * 2.0;
        float _1008 = (1.0 - _1003) / (_1003 + 1.0);
        float _3395 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1009 = isnan(1.0) ? _3395 : (isnan(_3395) ? 1.0 : min(_3395, 1.0));
        float _1018 = ((((1.0 - _1009) * (_1004 + 2.0)) * exp2(log2(isnan(1.0) ? _3373 : (isnan(_3373) ? 1.0 : min(_3373, 1.0))) * (_1004 + 1.0))) + _1009) * _974;
        float _1019 = _942 * 0.5;
        float _1020 = _952 * 0.5;
        float _1021 = _962 * 0.5;
        float _1022 = dot(vec3(_1019, _1020, _1021), vec3(_1019, _1020, _1021));
        float _1027 = (_1022 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1022);
        float _1035 = (dot(vec3(_273, _274, _275), vec3(_1027 * _1019, _1027 * _1020, _1027 * _1021)) + 1.0) * 0.5;
        float _3406 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1044 = sqrt(((_1020 * _1020) + (_1019 * _1019)) + (_1021 * _1021)) / (_975 + 9.9999997473787516355514526367188e-06);
        float _3417 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1045 = isnan(1.0) ? _3417 : (isnan(_3417) ? 1.0 : min(_3417, 1.0));
        float _1046 = _1045 * 2.0;
        float _1050 = (1.0 - _1045) / (_1045 + 1.0);
        float _3428 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1051 = isnan(1.0) ? _3428 : (isnan(_3428) ? 1.0 : min(_3428, 1.0));
        float _1060 = ((((1.0 - _1051) * (_1046 + 2.0)) * exp2(log2(isnan(1.0) ? _3406 : (isnan(_3406) ? 1.0 : min(_3406, 1.0))) * (_1046 + 1.0))) + _1051) * _975;
        float _1061 = _943 * 0.5;
        float _1062 = _953 * 0.5;
        float _1063 = _963 * 0.5;
        float _1064 = dot(vec3(_1061, _1062, _1063), vec3(_1061, _1062, _1063));
        float _1069 = (_1064 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1064);
        float _1077 = (dot(vec3(_273, _274, _275), vec3(_1069 * _1061, _1069 * _1062, _1069 * _1063)) + 1.0) * 0.5;
        float _3439 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1086 = sqrt(((_1062 * _1062) + (_1061 * _1061)) + (_1063 * _1063)) / (_976 + 9.9999997473787516355514526367188e-06);
        float _3450 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1087 = isnan(1.0) ? _3450 : (isnan(_3450) ? 1.0 : min(_3450, 1.0));
        float _1088 = _1087 * 2.0;
        float _1092 = (1.0 - _1087) / (_1087 + 1.0);
        float _3461 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1093 = isnan(1.0) ? _3461 : (isnan(_3461) ? 1.0 : min(_3461, 1.0));
        float _1102 = ((((1.0 - _1093) * (_1088 + 2.0)) * exp2(log2(isnan(1.0) ? _3439 : (isnan(_3439) ? 1.0 : min(_3439, 1.0))) * (_1088 + 1.0))) + _1093) * _976;
        _1110 = _943;
        _1111 = _942;
        _1112 = _941;
        _1113 = _953;
        _1114 = _952;
        _1115 = _951;
        _1116 = _963;
        _1117 = _962;
        _1118 = _961;
        _1119 = _976;
        _1120 = _975;
        _1121 = _974;
        _1122 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0)));
        _1123 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0)));
        _1124 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0)));
    }
    else
    {
        _1110 = _801;
        _1111 = _801;
        _1112 = _801;
        _1113 = _801;
        _1114 = _801;
        _1115 = _801;
        _1116 = _801;
        _1117 = _801;
        _1118 = _801;
        _1119 = _801;
        _1120 = _801;
        _1121 = _801;
        _1122 = 0.0;
        _1123 = 0.0;
        _1124 = 0.0;
    }
    float _1134 = (cbModelParam._m0[1u].x * (_1122 - _813)) + _813;
    float _1135 = (cbModelParam._m0[1u].x * (_1123 - _814)) + _814;
    float _1136 = (cbModelParam._m0[1u].x * (_1124 - _815)) + _815;
    float _1157 = fma(_1136, cbSceneParam._m0[89u].z, fma(_1135, cbSceneParam._m0[89u].y, _1134 * cbSceneParam._m0[89u].x));
    float _1160 = fma(_1136, cbSceneParam._m0[90u].z, fma(_1135, cbSceneParam._m0[90u].y, _1134 * cbSceneParam._m0[90u].x));
    float _1163 = fma(_1136, cbSceneParam._m0[91u].z, fma(_1135, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1134));
    float _1178 = _437 * 0.5;
    float _1179 = _438 * 0.5;
    float _1180 = _439 * 0.5;
    float _1181 = dot(vec4(_1178, _1179, _1180, 1.0), vec4(_1112, _1115, _1118, _1121));
    float _1184 = dot(vec4(_1178, _1179, _1180, 1.0), vec4(_1111, _1114, _1117, _1120));
    float _1187 = dot(vec4(_1178, _1179, _1180, 1.0), vec4(_1110, _1113, _1116, _1119));
    float _1221;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1194 = dot(vec4(_1178, _1179, _1180, 1.0), vec4(_800, _804, _807, _810));
        float _1198 = dot(vec4(_1178, _1179, _1180, 1.0), vec4(_802, _805, _808, _811));
        float _1202 = dot(vec4(_1178, _1179, _1180, 1.0), vec4(_803, _806, _809, _812));
        float _1209 = dot(vec4(cbModelParam._m0[39u]), vec4(_1178, _1179, _1180, 1.0));
        _1221 = dot(vec3(isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0)), isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0)), isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1209) ? 0.0 : (isnan(0.0) ? _1209 : max(0.0, _1209))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1221 = 1.0;
    }
    float _1232;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1223 = dot(vec4(cbModelParam._m0[40u]), vec4(_1178, _1179, _1180, 1.0));
        _1232 = dot(vec3(isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0)), isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0)), isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1223) ? 0.0 : (isnan(0.0) ? _1223 : max(0.0, _1223))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1232 = 1.0;
    }
    float _1236 = (_1232 * cbModelParam._m0[1u].x) + (_1221 * (1.0 - cbModelParam._m0[1u].x));
    float _1246 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _277);
    float _1247 = isnan(_1246) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1246 : min(cbModelParam._m0[25u].z, _1246));
    float _1329;
    float _1331;
    float _1333;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1296 = fma(_498, cbModelParam._m0[13u].z, fma(_494, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _490)) + cbModelParam._m0[13u].w;
        float _1300 = fma(_498, cbModelParam._m0[14u].z, fma(_494, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _490)) + cbModelParam._m0[14u].w;
        float _1304 = fma(_498, cbModelParam._m0[15u].z, fma(_494, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _490)) + cbModelParam._m0[15u].w;
        float _1307 = fma(_439, cbModelParam._m0[13u].z, fma(_438, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _437));
        float _1310 = fma(_439, cbModelParam._m0[14u].z, fma(_438, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _437));
        float _1313 = fma(_439, cbModelParam._m0[15u].z, fma(_438, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _437));
        float _1341;
        if (_1307 > 0.0)
        {
            _1341 = abs((1.0 - _1296) / _1307);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1307 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1296 + 1.0) / _1307);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1341 = frontier_phi_14_12_ladder;
        }
        float _1547;
        if (_1310 > 0.0)
        {
            _1547 = abs((1.0 - _1300) / _1310);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1310 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1300 + 1.0) / _1310);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1547 = frontier_phi_23_19_ladder;
        }
        float _1790;
        if (_1313 > 0.0)
        {
            _1790 = abs((1.0 - _1304) / _1313);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1313 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1304 + 1.0) / _1313);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1790 = frontier_phi_35_30_ladder;
        }
        float _1792 = isnan(_1547) ? _1341 : (isnan(_1341) ? _1547 : min(_1341, _1547));
        float _1793 = isnan(_1790) ? _1792 : (isnan(_1792) ? _1790 : min(_1792, _1790));
        float _1797 = (_1793 * _1307) + _1296;
        float _1798 = (_1793 * _1310) + _1300;
        float _1799 = (_1793 * _1313) + _1304;
        float _1800 = _1793 * 9.9999997473787516355514526367188e-05;
        float _1802 = (-1.0) - _1800;
        float _1804 = _1800 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1799 > _1804) || ((_1799 < _1802) || ((_1798 > _1804) || ((_1798 < _1802) || ((_1797 < _1802) || (_1797 > _1804))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1923 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1799, cbModelParam._m0[9u].z, fma(_1798, cbModelParam._m0[9u].y, _1797 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1799, cbModelParam._m0[10u].z, fma(_1798, cbModelParam._m0[10u].y, _1797 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1799, cbModelParam._m0[11u].z, fma(_1798, cbModelParam._m0[11u].y, _1797 * cbModelParam._m0[11u].x))), _1247);
            frontier_phi_13_35_ladder = _1923.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1923.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1923.x * cbModelParam._m0[1u].y;
        }
        _1329 = frontier_phi_13_35_ladder_2;
        _1331 = frontier_phi_13_35_ladder_1;
        _1333 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1317 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_437, _438, _439), _1247);
        _1329 = _1317.x * cbModelParam._m0[1u].y;
        _1331 = _1317.y * cbModelParam._m0[1u].y;
        _1333 = _1317.z * cbModelParam._m0[1u].y;
    }
    float _1337 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _277);
    float _1338 = isnan(_1337) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1337 : min(cbModelParam._m0[25u].w, _1337));
    float _1431;
    float _1433;
    float _1435;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1395 = fma(_498, cbModelParam._m0[21u].z, fma(_494, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _490)) + cbModelParam._m0[21u].w;
        float _1399 = fma(_498, cbModelParam._m0[22u].z, fma(_494, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _490)) + cbModelParam._m0[22u].w;
        float _1403 = fma(_498, cbModelParam._m0[23u].z, fma(_494, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _490)) + cbModelParam._m0[23u].w;
        float _1406 = fma(_439, cbModelParam._m0[21u].z, fma(_438, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _437));
        float _1409 = fma(_439, cbModelParam._m0[22u].z, fma(_438, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _437));
        float _1412 = fma(_439, cbModelParam._m0[23u].z, fma(_438, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _437));
        float _1552;
        if (_1406 > 0.0)
        {
            _1552 = abs((1.0 - _1395) / _1406);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1406 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1395 + 1.0) / _1406);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1552 = frontier_phi_25_21_ladder;
        }
        float _1817;
        if (_1409 > 0.0)
        {
            _1817 = abs((1.0 - _1399) / _1409);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1409 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1399 + 1.0) / _1409);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1817 = frontier_phi_37_32_ladder;
        }
        float _2022;
        if (_1412 > 0.0)
        {
            _2022 = abs((1.0 - _1403) / _1412);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1412 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1403 + 1.0) / _1412);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2022 = frontier_phi_46_43_ladder;
        }
        float _2024 = isnan(_1817) ? _1552 : (isnan(_1552) ? _1817 : min(_1552, _1817));
        float _2025 = isnan(_2022) ? _2024 : (isnan(_2024) ? _2022 : min(_2024, _2022));
        float _2029 = (_2025 * _1406) + _1395;
        float _2030 = (_2025 * _1409) + _1399;
        float _2031 = (_2025 * _1412) + _1403;
        float _2032 = _2025 * 9.9999997473787516355514526367188e-05;
        float _2033 = (-1.0) - _2032;
        float _2035 = _2032 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2031 > _2035) || ((_2031 < _2033) || ((_2030 > _2035) || ((_2030 < _2033) || ((_2029 < _2033) || (_2029 > _2035))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2232 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2031, cbModelParam._m0[17u].z, fma(_2030, cbModelParam._m0[17u].y, _2029 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2031, cbModelParam._m0[18u].z, fma(_2030, cbModelParam._m0[18u].y, _2029 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2031, cbModelParam._m0[19u].z, fma(_2030, cbModelParam._m0[19u].y, _2029 * cbModelParam._m0[19u].x))), _1338);
            frontier_phi_22_46_ladder = _2232.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2232.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2232.x * cbModelParam._m0[1u].z;
        }
        _1431 = frontier_phi_22_46_ladder_2;
        _1433 = frontier_phi_22_46_ladder_1;
        _1435 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1415 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_437, _438, _439), _1338);
        _1431 = _1415.x * cbModelParam._m0[1u].z;
        _1433 = _1415.y * cbModelParam._m0[1u].z;
        _1435 = _1415.z * cbModelParam._m0[1u].z;
    }
    float _1447 = ((((1.0 - _458) * ((_445 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_458 * _445)) * _429;
    float _1448 = _1447 * ((cbModelParam._m0[1u].w * (_1431 - _1329)) + _1329);
    float _1449 = _1447 * ((cbModelParam._m0[1u].w * (_1433 - _1331)) + _1331);
    float _1450 = _1447 * ((cbModelParam._m0[1u].w * (_1435 - _1333)) + _1333);
    float _1453 = fma(_1450, cbSceneParam._m0[89u].z, fma(_1449, cbSceneParam._m0[89u].y, _1448 * cbSceneParam._m0[89u].x));
    float _1456 = fma(_1450, cbSceneParam._m0[90u].z, fma(_1449, cbSceneParam._m0[90u].y, _1448 * cbSceneParam._m0[90u].x));
    float _1459 = fma(_1450, cbSceneParam._m0[91u].z, fma(_1449, cbSceneParam._m0[91u].y, _1448 * cbSceneParam._m0[91u].x));
    uvec4 _1469 = floatBitsToUint(cbInstanceData._m0[_403 + 5u]);
    uint _1471 = _1469.x * 14u;
    uint _1472 = _1471 + 13u;
    float _1479 = _429 + (-1.0);
    float _1484 = (cbLight._m0[_1472].x * _1479) + 1.0;
    float _1485 = (cbLight._m0[_1472].y * _1479) + 1.0;
    float _1486 = (cbLight._m0[_1472].z * _1479) + 1.0;
    float _1487 = (cbLight._m0[_1472].w * _1479) + 1.0;
    uint _1488 = _1471 + 5u;
    float _1494 = isnan(1.0) ? _1485 : (isnan(_1485) ? 1.0 : min(_1485, 1.0));
    uint _1498 = _1471 + 4u;
    float _1505 = isnan(1.0) ? _1484 : (isnan(_1484) ? 1.0 : min(_1484, 1.0));
    uint _1509 = _1471 | 1u;
    float _1520 = dot(vec3(cbLight._m0[_1471].xyz), vec3(_273, _274, _275));
    float _1523 = dot(vec3(cbLight._m0[_1509].xyz), vec3(_273, _274, _275));
    float _3597 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
    float _3608 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
    float _1528 = (isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0))) * 0.3183098733425140380859375;
    float _1530 = (isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0))) * 0.3183098733425140380859375;
    float _1537 = ((cbLight._m0[_1488].x * _1494) * _1530) + ((cbLight._m0[_1498].x * _1505) * _1528);
    float _1538 = ((_1494 * cbLight._m0[_1488].y) * _1530) + ((_1505 * cbLight._m0[_1498].y) * _1528);
    float _1539 = ((_1494 * cbLight._m0[_1488].z) * _1530) + ((_1505 * cbLight._m0[_1498].z) * _1528);
    uvec4 _1544 = floatBitsToUint(cbLight._m0[_1471 + 12u]);
    bool _1546 = _1544.x == 0u;
    float _1557;
    float _1559;
    float _1561;
    if (_1546)
    {
        _1557 = _1537;
        _1559 = _1538;
        _1561 = _1539;
    }
    else
    {
        uint _1565 = _1471 + 6u;
        float _1581 = (dot(vec3(cbLight._m0[_1471 + 2u].xyz), vec3(_273, _274, _275)) * 0.5) + 0.5;
        float _1582 = _1581 * _1581;
        float _3619 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1583 = isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0));
        float _1584 = isnan(1.0) ? _1486 : (isnan(_1486) ? 1.0 : min(_1486, 1.0));
        _1557 = (((cbLight._m0[_1565].x * 0.3183098733425140380859375) * _1583) * _1584) + _1537;
        _1559 = (((cbLight._m0[_1565].y * 0.3183098733425140380859375) * _1583) * _1584) + _1538;
        _1561 = (((cbLight._m0[_1565].z * 0.3183098733425140380859375) * _1583) * _1584) + _1539;
    }
    bool _1564 = _1544.y == 0u;
    float _1602;
    float _1604;
    float _1606;
    if (_1564)
    {
        _1602 = _1557;
        _1604 = _1559;
        _1606 = _1561;
    }
    else
    {
        uint _1761 = _1471 + 7u;
        float _1777 = (dot(vec3(cbLight._m0[_1471 + 3u].xyz), vec3(_273, _274, _275)) * 0.5) + 0.5;
        float _1778 = _1777 * _1777;
        float _3635 = isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0));
        float _1779 = isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0));
        float _1780 = isnan(1.0) ? _1487 : (isnan(_1487) ? 1.0 : min(_1487, 1.0));
        _1602 = (((cbLight._m0[_1761].x * 0.3183098733425140380859375) * _1779) * _1780) + _1557;
        _1604 = (((cbLight._m0[_1761].y * 0.3183098733425140380859375) * _1779) * _1780) + _1559;
        _1606 = (((cbLight._m0[_1761].z * 0.3183098733425140380859375) * _1779) * _1780) + _1561;
    }
    uint _1609 = _1471 + 8u;
    float _1622 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1471].w)) * _277) * 0.949999988079071044921875);
    float _1623 = _1622 * _1622;
    float _1624 = cbLight._m0[_1471].x + _354;
    float _1625 = cbLight._m0[_1471].y + _355;
    float _1626 = cbLight._m0[_1471].z + _356;
    float _1630 = inversesqrt(dot(vec3(_1624, _1625, _1626), vec3(_1624, _1625, _1626)));
    float _1631 = _1630 * _1624;
    float _1632 = _1630 * _1625;
    float _1633 = _1630 * _1626;
    float _1634 = dot(vec3(_273, _274, _275), vec3(cbLight._m0[_1471].xyz));
    float _3651 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
    float _1637 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
    float _3662 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _1638 = isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0));
    float _1639 = dot(vec3(_273, _274, _275), vec3(_1631, _1632, _1633));
    float _3673 = isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0));
    float _1642 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
    float _1643 = dot(vec3(cbLight._m0[_1471].xyz), vec3(_1631, _1632, _1633));
    float _3684 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
    float _1647 = _1623 * _1623;
    float _1651 = ((_1642 * _1642) * (_1647 + (-1.0))) + 1.0;
    float _1662 = (exp2(log2(1.0 - (isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1663 = 1.0 - _1623;
    float _1674 = (0.5 / (((_1638 * ((_1637 * _1663) + _1623)) + 9.9999999392252902907785028219223e-09) + (((_1638 * _1663) + _1623) * _1637))) * _1637;
    float _3695 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
    float _1676 = (isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0))) * (_1647 / ((_1651 * _1651) * 3.141590118408203125));
    uint _1687 = _1471 + 9u;
    float _1698 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1509].w)) * _277) * 0.949999988079071044921875);
    float _1699 = _1698 * _1698;
    float _1700 = cbLight._m0[_1509].x + _354;
    float _1701 = cbLight._m0[_1509].y + _355;
    float _1702 = cbLight._m0[_1509].z + _356;
    float _1706 = inversesqrt(dot(vec3(_1700, _1701, _1702), vec3(_1700, _1701, _1702)));
    float _1707 = _1706 * _1700;
    float _1708 = _1706 * _1701;
    float _1709 = _1706 * _1702;
    float _1710 = dot(vec3(_273, _274, _275), vec3(cbLight._m0[_1509].xyz));
    float _3706 = isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0));
    float _1713 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
    float _1714 = dot(vec3(_273, _274, _275), vec3(_1707, _1708, _1709));
    float _3717 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
    float _1717 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
    float _1718 = dot(vec3(cbLight._m0[_1509].xyz), vec3(_1707, _1708, _1709));
    float _3728 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
    float _1722 = _1699 * _1699;
    float _1726 = ((_1717 * _1717) * (_1722 + (-1.0))) + 1.0;
    float _1735 = (exp2(log2(1.0 - (isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1736 = 1.0 - _1699;
    float _1746 = (0.5 / (((_1638 * ((_1713 * _1736) + _1699)) + 9.9999999392252902907785028219223e-09) + (((_1638 * _1736) + _1699) * _1713))) * _1713;
    float _3739 = isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0));
    float _1748 = (isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0))) * (_1722 / ((_1726 * _1726) * 3.141590118408203125));
    float _1758 = (((_1735 * cbLight._m0[_1687].x) * _1748) * _1494) + (((_1662 * cbLight._m0[_1609].x) * _1676) * _1505);
    float _1759 = (((_1735 * cbLight._m0[_1687].y) * _1748) * _1494) + (((_1662 * cbLight._m0[_1609].y) * _1676) * _1505);
    float _1760 = (((_1735 * cbLight._m0[_1687].z) * _1748) * _1494) + (((_1662 * cbLight._m0[_1609].z) * _1676) * _1505);
    float _1822;
    float _1824;
    float _1826;
    if (_1546)
    {
        _1822 = _1758;
        _1824 = _1759;
        _1826 = _1760;
    }
    else
    {
        uint _1828 = _1471 + 2u;
        uint _1832 = _1471 + 10u;
        float _1846 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1828].w)) * _277) * 0.949999988079071044921875);
        float _1847 = _1846 * _1846;
        float _1848 = cbLight._m0[_1828].x + _354;
        float _1849 = cbLight._m0[_1828].y + _355;
        float _1850 = cbLight._m0[_1828].z + _356;
        float _1854 = inversesqrt(dot(vec3(_1848, _1849, _1850), vec3(_1848, _1849, _1850)));
        float _1855 = _1854 * _1848;
        float _1856 = _1854 * _1849;
        float _1857 = _1854 * _1850;
        float _1858 = dot(vec3(_273, _274, _275), vec3(cbLight._m0[_1828].xyz));
        float _3750 = isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0));
        float _1861 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
        float _1862 = dot(vec3(_273, _274, _275), vec3(_1855, _1856, _1857));
        float _3761 = isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0));
        float _1865 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
        float _1866 = dot(vec3(cbLight._m0[_1828].xyz), vec3(_1855, _1856, _1857));
        float _3772 = isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0));
        float _1870 = _1847 * _1847;
        float _1874 = ((_1865 * _1865) * (_1870 + (-1.0))) + 1.0;
        float _1883 = (exp2(log2(1.0 - (isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1884 = 1.0 - _1847;
        float _1894 = (0.5 / (((_1638 * ((_1861 * _1884) + _1847)) + 9.9999999392252902907785028219223e-09) + (((_1638 * _1884) + _1847) * _1861))) * _1861;
        float _3783 = isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0));
        float _1896 = (isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0))) * (_1870 / ((_1874 * _1874) * 3.141590118408203125));
        float _1897 = isnan(1.0) ? _1486 : (isnan(_1486) ? 1.0 : min(_1486, 1.0));
        _1822 = (((_1883 * cbLight._m0[_1832].x) * _1896) * _1897) + _1758;
        _1824 = (((_1883 * cbLight._m0[_1832].y) * _1896) * _1897) + _1759;
        _1826 = (((_1883 * cbLight._m0[_1832].z) * _1896) * _1897) + _1760;
    }
    float _1932;
    float _1934;
    float _1936;
    if (_1564)
    {
        _1932 = _1822;
        _1934 = _1824;
        _1936 = _1826;
    }
    else
    {
        uint _1943 = _1471 + 3u;
        uint _1947 = _1471 + 11u;
        float _1961 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1943].w)) * _277) * 0.949999988079071044921875);
        float _1962 = _1961 * _1961;
        float _1963 = cbLight._m0[_1943].x + _354;
        float _1964 = cbLight._m0[_1943].y + _355;
        float _1965 = cbLight._m0[_1943].z + _356;
        float _1969 = inversesqrt(dot(vec3(_1963, _1964, _1965), vec3(_1963, _1964, _1965)));
        float _1970 = _1969 * _1963;
        float _1971 = _1969 * _1964;
        float _1972 = _1969 * _1965;
        float _1973 = dot(vec3(_273, _274, _275), vec3(cbLight._m0[_1943].xyz));
        float _3799 = isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0));
        float _1976 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
        float _1977 = dot(vec3(_273, _274, _275), vec3(_1970, _1971, _1972));
        float _3810 = isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0));
        float _1980 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
        float _1981 = dot(vec3(cbLight._m0[_1943].xyz), vec3(_1970, _1971, _1972));
        float _3821 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
        float _1985 = _1962 * _1962;
        float _1989 = ((_1980 * _1980) * (_1985 + (-1.0))) + 1.0;
        float _1998 = (exp2(log2(1.0 - (isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1999 = 1.0 - _1962;
        float _2009 = (0.5 / (((_1638 * ((_1976 * _1999) + _1962)) + 9.9999999392252902907785028219223e-09) + (((_1638 * _1999) + _1962) * _1976))) * _1976;
        float _3832 = isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0));
        float _2011 = (isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0))) * (_1985 / ((_1989 * _1989) * 3.141590118408203125));
        float _2012 = isnan(1.0) ? _1487 : (isnan(_1487) ? 1.0 : min(_1487, 1.0));
        _1932 = (((_1998 * cbLight._m0[_1947].x) * _2011) * _2012) + _1822;
        _1934 = (((_1998 * cbLight._m0[_1947].y) * _2011) * _2012) + _1824;
        _1936 = (((_1998 * cbLight._m0[_1947].z) * _2011) * _2012) + _1826;
    }
    float _2147;
    float _2149;
    float _2151;
    float _2153;
    float _2155;
    float _2157;
    if (_1469.y == 0u)
    {
        float _2087 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2088 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2087;
        float _2089 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2087;
        float _2090 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2087;
        uvec4 _2102 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2103 = _2102.x;
        uint _2114 = uint((float(_2102.y) * floor(float(uint(cbSceneParam._m0[85u].y * _363) / _2103))) + floor(float(uint(cbSceneParam._m0[85u].x * _362) / _2103)));
        float _2124 = (log2(_2090 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2125 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
        uint _2128 = uint(isnan(14.0) ? _2125 : (isnan(_2125) ? 14.0 : min(_2125, 14.0)));
        uvec4 _2133 = texelFetch(g_lightClusterGridBuffer, int(((_2128 << 2u) + (_2114 << 6u)) >> 2u));
        uint _2134 = _2133.x;
        uint _2135 = _2102.z;
        float _2237;
        float _2239;
        float _2241;
        float _2243;
        float _2245;
        float _2247;
        if (((((1u << ((_2135 >> 4u) & 15u)) + 4294967295u) & _2134) == 0u) || ((_2135 & 240u) == 0u))
        {
            _2237 = 0.0;
            _2239 = 0.0;
            _2241 = 0.0;
            _2243 = 0.0;
            _2245 = 0.0;
            _2247 = 0.0;
        }
        else
        {
            float _2238;
            float _2240;
            float _2242;
            float _2244;
            float _2246;
            float _2248;
            float _2382 = 0.0;
            float _2383 = 0.0;
            float _2384 = 0.0;
            float _2385 = 0.0;
            float _2386 = 0.0;
            float _2387 = 0.0;
            uint _2388 = 0u;
            uint _2397;
            bool _2398;
            for (;;)
            {
                _2397 = texelFetch(g_lightClassification, int((((_2128 << 5u) + (_2114 << 9u)) + (_2388 << 2u)) >> 2u)).x;
                _2398 = _2397 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2398)
                {
                    frontier_phi_61_pred = _2382;
                    frontier_phi_61_pred_1 = _2387;
                    frontier_phi_61_pred_2 = _2386;
                    frontier_phi_61_pred_3 = _2385;
                    frontier_phi_61_pred_4 = _2384;
                    frontier_phi_61_pred_5 = _2383;
                }
                else
                {
                    float _2506;
                    float _2507;
                    float _2508;
                    float _2509;
                    float _2510;
                    float _2511;
                    uint _2512;
                    _2506 = _2382;
                    _2507 = _2383;
                    _2508 = _2384;
                    _2509 = _2385;
                    _2510 = _2386;
                    _2511 = _2387;
                    _2512 = _2397;
                    float _2438;
                    float _2439;
                    float _2440;
                    float _2441;
                    float _2442;
                    float _2443;
                    for (;;)
                    {
                        uint _2516 = uint(findLSB(_2512)) + (_2388 << 5u);
                        uint _2513 = (_2512 + 4294967295u) & _2512;
                        uint _2518 = _2516 * 48u;
                        vec4 _2532 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2518)).x, texelFetch(g_PointLightRenderingBuffer, int(_2518 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2518 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2518 + 3u)).x));
                        uint _2538 = (_2516 * 48u) + 4u;
                        vec4 _2551 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2538)).x, texelFetch(g_PointLightRenderingBuffer, int(_2538 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2538 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2538 + 3u)).x));
                        uint _2557 = (_2516 * 48u) + 8u;
                        vec3 _2568 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2557)).x, texelFetch(g_PointLightRenderingBuffer, int(_2557 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2557 + 2u)).x));
                        float _2572 = _2532.x - _2088;
                        float _2573 = _2532.y - _2089;
                        float _2574 = _2532.z - _2090;
                        float _2575 = dot(vec3(_2572, _2573, _2574), vec3(_2572, _2573, _2574));
                        float _2578 = inversesqrt(_2575);
                        float _2579 = _2578 * _2572;
                        float _2580 = _2578 * _2573;
                        float _2581 = _2578 * _2574;
                        float _2582 = dot(vec3(_384, _387, _390), vec3(_2579, _2580, _2581));
                        float _2587 = 1.0 - (_2575 * _2532.w);
                        float _3858 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
                        float _2588 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
                        float _2589 = sqrt(_2575) * _2551.w;
                        float _2592 = 1.39999997615814208984375 / (_2589 + 1.39999997615814208984375);
                        float _2593 = _2592 * _2592;
                        float _2596 = ((1.0 - _2593) * _2582) + _2593;
                        float _2599 = _2589 * _2589;
                        float _2603 = ((isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0))) * _2588) / ((_2599 * 0.699999988079071044921875) + 1.0);
                        float _2607 = (-0.0) - _2088;
                        float _2608 = (-0.0) - _2089;
                        float _2609 = (-0.0) - _2090;
                        float _2613 = inversesqrt(dot(vec3(_2607, _2608, _2609), vec3(_2607, _2608, _2609)));
                        float _2614 = _2613 * _2607;
                        float _2615 = _2613 * _2608;
                        float _2616 = _2613 * _2609;
                        float _2624 = exp2(log2(1.0 / ((_2599 * 3.5) + 5.0)) * 0.25);
                        float _2625 = 1.0 - _445;
                        float _2632 = sqrt(1.0 - ((1.0 - (_2625 * _2625)) * (1.0 - (_2624 * _2624))));
                        float _2633 = _2632 * _2632;
                        float _2634 = _2633 * _2633;
                        float _2635 = _2614 + _2579;
                        float _2636 = _2615 + _2580;
                        float _2637 = _2616 + _2581;
                        float _2641 = inversesqrt(dot(vec3(_2635, _2636, _2637), vec3(_2635, _2636, _2637)));
                        float _2645 = dot(vec3(_384, _387, _390), vec3(_2614, _2615, _2616));
                        float _3874 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0));
                        float _2648 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
                        float _2649 = dot(vec3(_384, _387, _390), vec3(_2641 * _2635, _2641 * _2636, _2641 * _2637));
                        float _3885 = isnan(0.0) ? _2649 : (isnan(_2649) ? 0.0 : max(_2649, 0.0));
                        float _2652 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
                        float _2656 = ((_2652 * _2652) * (_2634 + (-1.0))) + 1.0;
                        float _2657 = _2592 * _2633;
                        float _2658 = _2657 * _2657;
                        float _2661 = ((1.0 - _2658) * _2582) + _2658;
                        float _3896 = isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : max(_2661, 0.0));
                        float _2662 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
                        float _2663 = 1.0 - _2633;
                        float _2673 = (0.5 / (((_2662 * ((_2648 * _2663) + _2633)) + 9.9999999392252902907785028219223e-09) + (((_2662 * _2663) + _2633) * _2648))) * _2662;
                        float _3907 = isnan(0.0) ? _2673 : (isnan(_2673) ? 0.0 : max(_2673, 0.0));
                        float _2684 = (((_2634 * 3.1415927410125732421875) * (isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0)))) / ((_2656 * _2656) * ((_2599 * 2.1991131305694580078125) + 3.141590118408203125))) * _2588;
                        _2441 = (_2603 * _2551.x) + _2509;
                        _2442 = (_2603 * _2551.y) + _2510;
                        _2443 = (_2603 * _2551.z) + _2511;
                        _2438 = (_2684 * _2568.x) + _2506;
                        _2439 = (_2684 * _2568.y) + _2507;
                        _2440 = (_2684 * _2568.z) + _2508;
                        if (_2513 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2506 = _2438;
                            _2507 = _2439;
                            _2508 = _2440;
                            _2509 = _2441;
                            _2510 = _2442;
                            _2511 = _2443;
                            _2512 = _2513;
                        }
                    }
                    frontier_phi_61_pred = _2438;
                    frontier_phi_61_pred_1 = _2443;
                    frontier_phi_61_pred_2 = _2442;
                    frontier_phi_61_pred_3 = _2441;
                    frontier_phi_61_pred_4 = _2440;
                    frontier_phi_61_pred_5 = _2439;
                }
                _2238 = frontier_phi_61_pred;
                _2248 = frontier_phi_61_pred_1;
                _2246 = frontier_phi_61_pred_2;
                _2244 = frontier_phi_61_pred_3;
                _2242 = frontier_phi_61_pred_4;
                _2240 = frontier_phi_61_pred_5;
                uint _2389 = _2388 + 1u;
                if (_2389 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2382 = _2238;
                    _2383 = _2240;
                    _2384 = _2242;
                    _2385 = _2244;
                    _2386 = _2246;
                    _2387 = _2248;
                    _2388 = _2389;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2237 = _2238;
            _2239 = _2240;
            _2241 = _2242;
            _2243 = _2244;
            _2245 = _2246;
            _2247 = _2248;
        }
        uvec4 _2251 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2252 = _2251.z;
        uint _2254 = (_2252 >> 8u) & 15u;
        float _2350;
        float _2352;
        float _2354;
        float _2356;
        float _2358;
        float _2360;
        if (((4294967295u << _2254) & _2134) == 0u)
        {
            _2350 = _2237;
            _2352 = _2239;
            _2354 = _2241;
            _2356 = _2243;
            _2358 = _2245;
            _2360 = _2247;
        }
        else
        {
            float _2375 = inversesqrt(dot(vec3(_2088, _2089, _2090), vec3(_2088, _2089, _2090)));
            float _2376 = _2375 * _2088;
            float _2377 = _2375 * _2089;
            float _2378 = _2375 * _2090;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2254 < ((_2252 >> 12u) & 15u))
            {
                float _2351;
                float _2353;
                float _2355;
                float _2357;
                float _2359;
                float _2361;
                float _2489 = _2237;
                float _2490 = _2239;
                float _2491 = _2241;
                float _2492 = _2243;
                float _2493 = _2245;
                float _2494 = _2247;
                uint _2495 = _2254;
                uint _2504;
                bool _2505;
                for (;;)
                {
                    _2504 = texelFetch(g_lightClassification, int((((_2128 << 5u) + (_2114 << 9u)) + (_2495 << 2u)) >> 2u)).x;
                    _2505 = _2504 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2505)
                    {
                        frontier_phi_67_pred = _2492;
                        frontier_phi_67_pred_1 = _2493;
                        frontier_phi_67_pred_2 = _2494;
                        frontier_phi_67_pred_3 = _2491;
                        frontier_phi_67_pred_4 = _2490;
                        frontier_phi_67_pred_5 = _2489;
                    }
                    else
                    {
                        float _2689;
                        float _2690;
                        float _2691;
                        float _2692;
                        float _2693;
                        float _2694;
                        float _2985;
                        float _2986;
                        float _2987;
                        float _2988;
                        float _2989;
                        float _2990;
                        float _2702 = _2489;
                        float _2703 = _2490;
                        float _2704 = _2491;
                        float _2705 = _2492;
                        float _2706 = _2493;
                        float _2707 = _2494;
                        uint _2708 = _2504;
                        uint _2709;
                        vec4 _2734;
                        float _2735;
                        vec4 _2750;
                        vec3 _2762;
                        vec4 _2778;
                        vec4 _2794;
                        float _2841;
                        bool _2842;
                        for (;;)
                        {
                            uint _2719 = ((_2495 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2708));
                            _2709 = (_2708 + 4294967295u) & _2708;
                            uint _2721 = _2719 * 40u;
                            _2734 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2721)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2721 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2721 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2721 + 3u)).x));
                            _2735 = _2734.w;
                            uint _2737 = (_2719 * 40u) + 4u;
                            _2750 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2737)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2737 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2737 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2737 + 3u)).x));
                            uint _2752 = (_2719 * 40u) + 8u;
                            _2762 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2752)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2752 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2752 + 2u)).x));
                            uint _2765 = (_2719 * 40u) + 16u;
                            _2778 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2765)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2765 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2765 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2765 + 3u)).x));
                            uint _2781 = (_2719 * 40u) + 20u;
                            _2794 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2781)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2781 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2781 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2781 + 3u)).x));
                            uint _2797 = (_2719 * 40u) + 24u;
                            vec4 _2810 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2797)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2797 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2797 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2797 + 3u)).x));
                            uint _2816 = (_2719 * 40u) + 28u;
                            vec4 _2829 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2816)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2816 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2816 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2816 + 3u)).x));
                            _2841 = fma(_2090, _2829.z, fma(_2089, _2829.y, _2829.x * _2088)) + _2829.w;
                            _2842 = !((fma(_2090, _2810.z, fma(_2089, _2810.y, _2810.x * _2088)) + _2810.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2842)
                            {
                                float _2869 = _2734.x - _2088;
                                float _2870 = _2734.y - _2089;
                                float _2871 = _2734.z - _2090;
                                float _2872 = dot(vec3(_2869, _2870, _2871), vec3(_2869, _2870, _2871));
                                float _2875 = inversesqrt(_2872);
                                float _2876 = _2875 * _2869;
                                float _2877 = _2875 * _2870;
                                float _2878 = _2875 * _2871;
                                float _2882 = 1.0 - (_2872 / (_2735 * _2735));
                                float _3918 = isnan(0.0) ? _2882 : (isnan(_2882) ? 0.0 : max(_2882, 0.0));
                                float _2883 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
                                float _2887 = sqrt(_2872) * _2750.w;
                                float _2889 = 1.39999997615814208984375 / (_2887 + 1.39999997615814208984375);
                                float _2890 = _2889 * _2889;
                                float _2893 = ((1.0 - _2890) * dot(vec3(_2876, _2877, _2878), vec3(_384, _387, _390))) + _2890;
                                float _2896 = _2887 * _2887;
                                float _2900 = (fma(_2090, _2778.z, fma(_2089, _2778.y, _2778.x * _2088)) + _2778.w) / _2841;
                                float _2901 = (fma(_2090, _2794.z, fma(_2089, _2794.y, _2794.x * _2088)) + _2794.w) / _2841;
                                float _2905 = 1.0 - dot(vec2(_2900, _2901), vec2(_2900, _2901));
                                float _3934 = isnan(0.0) ? _2905 : (isnan(_2905) ? 0.0 : max(_2905, 0.0));
                                float _2906 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
                                float _2907 = _2906 * (((isnan(0.0) ? _2893 : (isnan(_2893) ? 0.0 : max(_2893, 0.0))) * _2883) / ((_2896 * 0.699999988079071044921875) + 1.0));
                                float _2919 = exp2(log2(1.0 / ((_2896 * 3.5) + 5.0)) * 0.25);
                                float _2920 = 1.0 - _445;
                                float _2927 = sqrt(1.0 - ((1.0 - (_2920 * _2920)) * (1.0 - (_2919 * _2919))));
                                float _2928 = _2927 * _2927;
                                float _2929 = _2928 * _2928;
                                float _2930 = _2876 - _2376;
                                float _2931 = _2877 - _2377;
                                float _2932 = _2878 - _2378;
                                float _2936 = inversesqrt(dot(vec3(_2930, _2931, _2932), vec3(_2930, _2931, _2932)));
                                float _2940 = dot(vec3(_384, _387, _390), vec3((-0.0) - _2376, (-0.0) - _2377, (-0.0) - _2378));
                                float _3945 = isnan(0.0) ? _2940 : (isnan(_2940) ? 0.0 : max(_2940, 0.0));
                                float _2943 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
                                float _2944 = dot(vec3(_384, _387, _390), vec3(_2936 * _2930, _2936 * _2931, _2936 * _2932));
                                float _3956 = isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : max(_2944, 0.0));
                                float _2947 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
                                float _2951 = ((_2947 * _2947) * (_2929 + (-1.0))) + 1.0;
                                float _2952 = _2889 * _2928;
                                float _2953 = _2952 * _2952;
                                float _2959 = ((1.0 - _2953) * dot(vec3(_384, _387, _390), vec3(_2876, _2877, _2878))) + _2953;
                                float _3967 = isnan(0.0) ? _2959 : (isnan(_2959) ? 0.0 : max(_2959, 0.0));
                                float _2960 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
                                float _2961 = 1.0 - _2928;
                                float _2971 = (0.5 / (((_2960 * ((_2943 * _2961) + _2928)) + 9.9999999392252902907785028219223e-09) + (((_2960 * _2961) + _2928) * _2943))) * _2960;
                                float _3978 = isnan(0.0) ? _2971 : (isnan(_2971) ? 0.0 : max(_2971, 0.0));
                                float _2981 = (_2906 * _2883) * (((_2929 * 3.1415927410125732421875) * (isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0)))) / ((_2951 * _2951) * ((_2896 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _2981 * _2762.x;
                                frontier_phi_73_pred_1 = _2981 * _2762.y;
                                frontier_phi_73_pred_2 = _2907 * _2750.z;
                                frontier_phi_73_pred_3 = _2907 * _2750.y;
                                frontier_phi_73_pred_4 = _2907 * _2750.x;
                                frontier_phi_73_pred_5 = _2981 * _2762.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _2985 = frontier_phi_73_pred;
                            _2986 = frontier_phi_73_pred_1;
                            _2990 = frontier_phi_73_pred_2;
                            _2989 = frontier_phi_73_pred_3;
                            _2988 = frontier_phi_73_pred_4;
                            _2987 = frontier_phi_73_pred_5;
                            _2692 = _2988 + _2705;
                            _2693 = _2989 + _2706;
                            _2694 = _2990 + _2707;
                            _2689 = _2985 + _2702;
                            _2690 = _2986 + _2703;
                            _2691 = _2987 + _2704;
                            if (_2709 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2702 = _2689;
                                _2703 = _2690;
                                _2704 = _2691;
                                _2705 = _2692;
                                _2706 = _2693;
                                _2707 = _2694;
                                _2708 = _2709;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2692;
                        frontier_phi_67_pred_1 = _2693;
                        frontier_phi_67_pred_2 = _2694;
                        frontier_phi_67_pred_3 = _2691;
                        frontier_phi_67_pred_4 = _2690;
                        frontier_phi_67_pred_5 = _2689;
                    }
                    _2357 = frontier_phi_67_pred;
                    _2359 = frontier_phi_67_pred_1;
                    _2361 = frontier_phi_67_pred_2;
                    _2355 = frontier_phi_67_pred_3;
                    _2353 = frontier_phi_67_pred_4;
                    _2351 = frontier_phi_67_pred_5;
                    uint _2496 = _2495 + 1u;
                    if (_2496 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2489 = _2351;
                        _2490 = _2353;
                        _2491 = _2355;
                        _2492 = _2357;
                        _2493 = _2359;
                        _2494 = _2361;
                        _2495 = _2496;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2359;
                frontier_phi_55_56_ladder_1 = _2361;
                frontier_phi_55_56_ladder_2 = _2357;
                frontier_phi_55_56_ladder_3 = _2355;
                frontier_phi_55_56_ladder_4 = _2353;
                frontier_phi_55_56_ladder_5 = _2351;
            }
            else
            {
                frontier_phi_55_56_ladder = _2245;
                frontier_phi_55_56_ladder_1 = _2247;
                frontier_phi_55_56_ladder_2 = _2243;
                frontier_phi_55_56_ladder_3 = _2241;
                frontier_phi_55_56_ladder_4 = _2239;
                frontier_phi_55_56_ladder_5 = _2237;
            }
            _2350 = frontier_phi_55_56_ladder_5;
            _2352 = frontier_phi_55_56_ladder_4;
            _2354 = frontier_phi_55_56_ladder_3;
            _2356 = frontier_phi_55_56_ladder_2;
            _2358 = frontier_phi_55_56_ladder;
            _2360 = frontier_phi_55_56_ladder_1;
        }
        float _2365 = isnan(1.0) ? _429 : (isnan(_429) ? 1.0 : min(_429, 1.0));
        _2147 = (_2365 * _2356) + _1602;
        _2149 = (_2365 * _2358) + _1604;
        _2151 = (_2365 * _2360) + _1606;
        _2153 = ((_2350 * 0.039999999105930328369140625) * _2365) + _1932;
        _2155 = ((_2352 * 0.039999999105930328369140625) * _2365) + _1934;
        _2157 = ((_2354 * 0.039999999105930328369140625) * _2365) + _1936;
    }
    else
    {
        _2147 = _1602;
        _2149 = _1604;
        _2151 = _1606;
        _2153 = _1932;
        _2155 = _1934;
        _2157 = _1936;
    }
    float _3994 = isnan(0.0) ? _415 : (isnan(_415) ? 0.0 : max(_415, 0.0));
    float _4005 = isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0));
    float _4016 = isnan(0.0) ? _417 : (isnan(_417) ? 0.0 : max(_417, 0.0));
    float _4027 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _2182 = cbInstanceData._m0[_403 + 6u].w * (isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0)));
    float _2187 = _362 / cbSceneParam._m0[86u].x;
    float _2188 = _363 / cbSceneParam._m0[86u].y;
    vec4 _2202 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2187, _2188, (log2((isnan(cbSceneParam._m0[77u].w) ? _296 : (isnan(_296) ? cbSceneParam._m0[77u].w : min(_296, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2204 = _2202.x;
    float _2205 = _2202.y;
    float _2206 = _2202.z;
    float _2207 = _2202.w;
    float _2300;
    float _2302;
    float _2304;
    float _2306;
    if (_296 > cbSceneParam._m0[78u].w)
    {
        float _2262 = isnan(_296) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _296 : min(cbSceneParam._m0[80u].w, _296));
        float _2263 = _2262 / _296;
        float _2274 = _2263 * _347;
        float _2275 = _348 * _2263;
        float _2276 = (-0.0) - _2275;
        float _2278 = _2263 * _349;
        float _2280 = (cbSceneParam._m0[77u].w * _2276) / _2262;
        float _2281 = _2280 + cbSceneParam._m0[79u].w;
        float _2282 = cbSceneParam._m0[79u].w - _2275;
        float _2288 = sqrt(((_2274 * _2274) + (_2275 * _2275)) + (_2278 * _2278));
        float _2291 = (1.0 - (cbSceneParam._m0[77u].w / _2262)) * _2288;
        float _2296 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2298 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2451;
        if (abs((_2276 - _2280) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2451 = ((((_2281 > 0.0) ? exp2(_2296 * _2281) : (2.0 - exp2(_2298 * _2281))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2291;
        }
        else
        {
            float _2411 = 1.0 / cbSceneParam._m0[80u].x;
            float _2412 = isnan(_2282) ? _2281 : (isnan(_2281) ? _2282 : max(_2281, _2282));
            float _2413 = isnan(_2282) ? _2281 : (isnan(_2281) ? _2282 : min(_2281, _2282));
            float _2422 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : min(_2412, 0.0));
            float _2423 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : min(_2413, 0.0));
            _2451 = ((abs(_2288 / _2276) * cbSceneParam._m0[80u].y) * ((((_2422 - _2423) * 2.0) - ((exp2(_2296 * (isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0)))) - exp2(_2296 * (isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0))))) * _2411)) - ((exp2(_2298 * _2422) - exp2(_2298 * _2423)) * _2411))) + (_2291 * cbSceneParam._m0[80u].z);
        }
        vec4 _2453 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2187, _2188, 1.0), 0.0);
        float _2462 = exp2((_2451 * (-1.44269502162933349609375)) * (1.0 - _2453.w));
        float _2463 = log2(_2462);
        float _2479 = log2(_2207);
        _2300 = (exp2(_2479 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2463 * cbSceneParam._m0[78u].x)) * _2453.x) / cbSceneParam._m0[78u].x)) + _2204;
        _2302 = (exp2(_2479 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2463 * cbSceneParam._m0[78u].y)) * _2453.y) / cbSceneParam._m0[78u].y)) + _2205;
        _2304 = (exp2(_2479 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2463 * cbSceneParam._m0[78u].z)) * _2453.z) / cbSceneParam._m0[78u].z)) + _2206;
        _2306 = _2462 * _2207;
    }
    else
    {
        _2300 = _2204;
        _2302 = _2205;
        _2304 = _2206;
        _2306 = _2207;
    }
    float _2318 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2319 = _2318 == 3.0;
    float _2320 = log2(_2306);
    float _2327 = exp2(_2320 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0))) * (_2147 + ((isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0))) * _429))) + ((_2153 + ((isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0))) * _1236)) * cbPerFrame._m0[3u].x));
    float _2328 = exp2(_2320 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0))) * (_2149 + ((isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0))) * _429))) + ((_2155 + ((isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0))) * _1236)) * cbPerFrame._m0[3u].x));
    float _2329 = exp2(_2320 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0))) * (_2151 + ((isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0))) * _429))) + ((_2157 + ((isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0))) * _1236)) * cbPerFrame._m0[3u].x));
    float _2338 = (_2318 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2338 * (_2319 ? _2327 : (_2327 + (cbSceneParam._m0[72u].w * _2300)));
    SV_Target.y = _2338 * (_2319 ? _2328 : (_2328 + (cbSceneParam._m0[72u].w * _2302)));
    SV_Target.z = _2338 * (_2319 ? _2329 : (_2329 + (cbSceneParam._m0[72u].w * _2304)));
    SV_Target.w = _2182;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2182;
}


