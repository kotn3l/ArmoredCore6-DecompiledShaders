#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 0) uniform texture2D M_DB_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_DB_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;

layout(location = 1) in vec4 NORMAL;
layout(location = 2) in vec4 TANGENT;
layout(location = 3) in vec3 TEXCOORD;
layout(location = 3, component = 3) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
layout(location = 2) out vec4 SV_Target_2;
layout(location = 3) out vec4 SV_Target_3;
layout(location = 4) out vec4 SV_Target_4;
bool discard_state;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    SV_Target_2.x = 0.0;
    SV_Target_2.y = 0.0;
    SV_Target_2.z = 0.0;
    SV_Target_2.w = 0.0;
    SV_Target_3.x = 0.0;
    SV_Target_3.y = 0.0;
    SV_Target_3.z = 0.0;
    SV_Target_3.w = 0.0;
    SV_Target_4.x = 0.0;
    SV_Target_4.y = 0.0;
    SV_Target_4.z = 0.0;
    SV_Target_4.w = 0.0;
    float _129 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _130 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _131 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _136 = inversesqrt(dot(vec3(_129, _130, _131), vec3(_129, _130, _131)));
    float _143 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _150 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _173 = texture(sampler2D(M_DB_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _179 = _173.x * cbMtdParam._m0[9u].x;
    float _180 = _173.y * cbMtdParam._m0[9u].y;
    float _181 = _173.z * cbMtdParam._m0[9u].z;
    vec4 _197 = texture(sampler2D(M_DB_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _201 = _197.z;
    float _205 = (_197.x * 2.0) + (-1.0);
    float _207 = (_197.y * 2.0) + (-1.0);
    float _208 = dot(vec2(_205, _207), vec2(_205, _207));
    float _422 = isnan(0.0) ? _208 : (isnan(_208) ? 0.0 : max(_208, 0.0));
    float _214 = sqrt(1.0 - (isnan(1.0) ? _422 : (isnan(_422) ? 1.0 : min(_422, 1.0))));
    float _220 = fma(_214, _143 * NORMAL.x, fma(_207, _150 * TANGENT.x, (_136 * _129) * _205));
    float _223 = fma(_214, _143 * NORMAL.y, fma(_207, _150 * TANGENT.y, (_136 * _130) * _205));
    float _226 = fma(_214, _143 * NORMAL.z, fma(_207, _150 * TANGENT.z, (_136 * _131) * _205));
    float _230 = inversesqrt(dot(vec3(_220, _223, _226), vec3(_220, _223, _226)));
    float _433 = isnan(0.0) ? cbMtdParam._m0[10u].w : (isnan(cbMtdParam._m0[10u].w) ? 0.0 : max(cbMtdParam._m0[10u].w, 0.0));
    float _231 = isnan(1.0) ? _433 : (isnan(_433) ? 1.0 : min(_433, 1.0));
    float _444 = isnan(0.0) ? _201 : (isnan(_201) ? 0.0 : max(_201, 0.0));
    float _455 = isnan(0.0) ? _179 : (isnan(_179) ? 0.0 : max(_179, 0.0));
    float _233 = isnan(1.0) ? _455 : (isnan(_455) ? 1.0 : min(_455, 1.0));
    float _466 = isnan(0.0) ? _180 : (isnan(_180) ? 0.0 : max(_180, 0.0));
    float _234 = isnan(1.0) ? _466 : (isnan(_466) ? 1.0 : min(_466, 1.0));
    float _477 = isnan(0.0) ? _181 : (isnan(_181) ? 0.0 : max(_181, 0.0));
    float _235 = isnan(1.0) ? _477 : (isnan(_477) ? 1.0 : min(_477, 1.0));
    uint _237 = uint(roundEven(NORMAL.w));
    vec4 _242 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _244 = _242.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _312 = (cbMatDynParam._m0[5u].x * TEXCOORD_8) + cbMatDynParam._m0[5u].y;
        float _488 = isnan(0.0) ? _312 : (isnan(_312) ? 0.0 : max(_312, 0.0));
        float _313 = isnan(1.0) ? _488 : (isnan(_488) ? 1.0 : min(_488, 1.0));
        float _317 = (cbMatDynParam._m0[5u].z * TEXCOORD_8) + cbMatDynParam._m0[5u].w;
        float _499 = isnan(0.0) ? _317 : (isnan(_317) ? 0.0 : max(_317, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _499 : (isnan(_499) ? 1.0 : min(_499, 1.0))) - _313)) + _313) < ((_244 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    bool _346;
    uint _264;
    vec4 _269;
    float _276;
    float _277;
    float _278;
    float _284;
    float _285;
    float _286;
    float _287;
    vec4 _291;
    float _293;
    float _294;
    bool _305;
    for (;;)
    {
        _264 = _237 * 13u;
        _269 = cbInstanceData._m0[(_264 + 9u) + uint(cbMatDynParam._m0[0u].w)];
        float _273 = (cbMtdParam._m0[0u].x * _233) * _269.x;
        float _274 = (cbMtdParam._m0[0u].y * _234) * _269.y;
        float _275 = (cbMtdParam._m0[0u].z * _235) * _269.z;
        float _510 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
        _276 = isnan(1.0) ? _510 : (isnan(_510) ? 1.0 : min(_510, 1.0));
        float _521 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
        _277 = isnan(1.0) ? _521 : (isnan(_521) ? 1.0 : min(_521, 1.0));
        float _532 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
        _278 = isnan(1.0) ? _532 : (isnan(_532) ? 1.0 : min(_532, 1.0));
        float _543 = isnan(0.0) ? _231 : (isnan(_231) ? 0.0 : max(_231, 0.0));
        uint _280 = _264 + 6u;
        _284 = cbInstanceData._m0[_280].w * (isnan(1.0) ? _543 : (isnan(_543) ? 1.0 : min(_543, 1.0)));
        _285 = cbInstanceData._m0[_280].w * cbMtdParam._m0[10u].z;
        _286 = cbInstanceData._m0[_280].w * cbMtdParam._m0[10u].x;
        _287 = cbInstanceData._m0[_280].w * cbMtdParam._m0[10u].y;
        float _288 = _244 + (-0.5);
        _291 = cbMtdParam._m0[1u];
        _293 = _291.y * _288;
        _294 = _288 * 0.999000012874603271484375;
        _305 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_305)
        {
            if ((cbInstanceData._m0[_264 + 7u].x + _294) < 0.5)
            {
                _346 = true;
                break;
            }
        }
        if ((_269.w < 1.0) && ((_269.w + _294) < 0.5))
        {
            _346 = true;
            break;
        }
        if ((_293 + cbMtdParam._m0[10u].w) < _291.x)
        {
            _346 = true;
            break;
        }
        _346 = false;
        break;
    }
    if (_346)
    {
        discard_state = true;
    }
    float _373;
    float _374;
    float _375;
    float _376;
    if (cbMtdParam._m0[1u].z != 0.0)
    {
        _373 = _284;
        _374 = _287;
        _375 = _286;
        _376 = _285;
    }
    else
    {
        _373 = 0.0;
        _374 = float(floatBitsToUint(cbInstanceData._m0[_264 + 5u]).x) * 0.0039215688593685626983642578125;
        _375 = TEXCOORD.z;
        _376 = 0.0;
    }
    SV_Target.x = ((_220 * 0.5) * _230) + 0.500488758087158203125;
    SV_Target.y = ((_223 * 0.5) * _230) + 0.500488758087158203125;
    SV_Target.z = ((_226 * 0.5) * _230) + 0.500488758087158203125;
    SV_Target.w = _376;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = isnan(1.0) ? _444 : (isnan(_444) ? 1.0 : min(_444, 1.0));
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _375;
    SV_Target_2.x = _276;
    SV_Target_2.y = _277;
    SV_Target_2.z = _278;
    SV_Target_2.w = _374;
    SV_Target_3.x = 0.0;
    SV_Target_3.y = 0.0;
    SV_Target_3.z = 0.0;
    SV_Target_3.w = _373;
    SV_Target_4.x = 0.0;
    SV_Target_4.y = 0.0;
    SV_Target_4.z = 0.0;
    SV_Target_4.w = _373;
    discard_exit();
}


