#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_DB_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_DB_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _848;
float _3244;
float _3245;
float _3246;
float _3247;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _187 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _194 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _224 = texture(sampler2D(M_DB_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _230 = _224.x * cbMtdParam._m0[9u].x;
    float _231 = _224.y * cbMtdParam._m0[9u].y;
    float _232 = _224.z * cbMtdParam._m0[9u].z;
    vec4 _248 = texture(sampler2D(M_DB_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _252 = _248.z;
    float _256 = (_248.x * 2.0) + (-1.0);
    float _258 = (_248.y * 2.0) + (-1.0);
    float _259 = dot(vec2(_256, _258), vec2(_256, _258));
    float _3256 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _265 = sqrt(1.0 - (isnan(1.0) ? _3256 : (isnan(_3256) ? 1.0 : min(_3256, 1.0))));
    float _268 = fma(_265, _194 * NORMAL.x, fma(_258, _201 * TANGENT.x, (_187 * _180) * _256));
    float _271 = fma(_265, _194 * NORMAL.y, fma(_258, _201 * TANGENT.y, (_187 * _181) * _256));
    float _274 = fma(_265, _194 * NORMAL.z, fma(_258, _201 * TANGENT.z, (_187 * _182) * _256));
    float _278 = inversesqrt(dot(vec3(_268, _271, _274), vec3(_268, _271, _274)));
    float _279 = _278 * _268;
    float _280 = _278 * _271;
    float _281 = _278 * _274;
    float _3267 = isnan(0.0) ? cbMtdParam._m0[10u].w : (isnan(cbMtdParam._m0[10u].w) ? 0.0 : max(cbMtdParam._m0[10u].w, 0.0));
    float _282 = isnan(1.0) ? _3267 : (isnan(_3267) ? 1.0 : min(_3267, 1.0));
    float _3278 = isnan(0.0) ? _252 : (isnan(_252) ? 0.0 : max(_252, 0.0));
    float _283 = isnan(1.0) ? _3278 : (isnan(_3278) ? 1.0 : min(_3278, 1.0));
    float _3289 = isnan(0.0) ? _230 : (isnan(_230) ? 0.0 : max(_230, 0.0));
    float _3300 = isnan(0.0) ? _231 : (isnan(_231) ? 0.0 : max(_231, 0.0));
    float _3311 = isnan(0.0) ? _232 : (isnan(_232) ? 0.0 : max(_232, 0.0));
    float _302 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _343 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _353 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _343);
    float _354 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _343);
    float _355 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _343);
    float _359 = inversesqrt(dot(vec3(_353, _354, _355), vec3(_353, _354, _355)));
    float _360 = _353 * _359;
    float _361 = _354 * _359;
    float _362 = _355 * _359;
    vec4 _367 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _369 = _367.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _527 = sqrt(((_353 * _353) + (_354 * _354)) + (_355 * _355));
        float _533 = (cbMatDynParam._m0[5u].x * _527) + cbMatDynParam._m0[5u].y;
        float _3322 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
        float _534 = isnan(1.0) ? _3322 : (isnan(_3322) ? 1.0 : min(_3322, 1.0));
        float _538 = (cbMatDynParam._m0[5u].z * _527) + cbMatDynParam._m0[5u].w;
        float _3333 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3333 : (isnan(_3333) ? 1.0 : min(_3333, 1.0))) - _534)) + _534) < ((_369 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _381 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _382 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _402 = fma(_281, cbSceneParam._m0[5u].z, fma(_280, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _279));
    float _405 = fma(_281, cbSceneParam._m0[6u].z, fma(_280, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _279));
    float _408 = fma(_281, cbSceneParam._m0[7u].z, fma(_280, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _279));
    uint _421 = uint(roundEven(NORMAL.w)) * 13u;
    uint _423 = _421 + 9u;
    uint _424 = _423 + uint(cbMatDynParam._m0[0u].w);
    float _430 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3289 : (isnan(_3289) ? 1.0 : min(_3289, 1.0)))) * cbInstanceData._m0[_424].x;
    float _431 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3300 : (isnan(_3300) ? 1.0 : min(_3300, 1.0)))) * cbInstanceData._m0[_424].y;
    float _432 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3311 : (isnan(_3311) ? 1.0 : min(_3311, 1.0)))) * cbInstanceData._m0[_424].z;
    float _3344 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _433 = isnan(1.0) ? _3344 : (isnan(_3344) ? 1.0 : min(_3344, 1.0));
    float _3355 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _434 = isnan(1.0) ? _3355 : (isnan(_3355) ? 1.0 : min(_3355, 1.0));
    float _3366 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _435 = isnan(1.0) ? _3366 : (isnan(_3366) ? 1.0 : min(_3366, 1.0));
    vec4 _444 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _381, cbSceneParam._m0[86u].y * _382));
    float _447 = _444.x * TEXCOORD.z;
    float _448 = dot(vec3(_279, _280, _281), vec3(_360, _361, _362));
    float _451 = _448 * 2.0;
    float _455 = (_451 * _279) - _360;
    float _456 = (_451 * _280) - _361;
    float _457 = (_451 * _281) - _362;
    float _461 = abs(dot(vec3(_360, _361, _362), vec3(_279, _280, _281)));
    float _3377 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _463 = sqrt(_283);
    float _476 = exp2((_463 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3377 : (isnan(_3377) ? 1.0 : min(_3377, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_463 * 3.0));
    float _508 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _512 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _516 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _847;
    float _849;
    float _850;
    float _851;
    float _852;
    float _853;
    float _854;
    float _855;
    float _856;
    float _857;
    float _858;
    float _859;
    float _860;
    float _861;
    float _862;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _572 = fma(_516, cbModelParam._m0[26u].z, fma(_512, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _508));
        float _576 = fma(_516, cbModelParam._m0[27u].z, fma(_512, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _508));
        float _580 = fma(_516, cbModelParam._m0[28u].z, fma(_512, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _508));
        float _605 = _508 + _279;
        float _606 = _512 + _280;
        float _607 = _516 + _281;
        float _617 = fma(_607, cbModelParam._m0[26u].z, fma(_606, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _605)) - _572;
        float _618 = fma(_607, cbModelParam._m0[27u].z, fma(_606, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _605)) - _576;
        float _619 = fma(_607, cbModelParam._m0[28u].z, fma(_606, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _605)) - _580;
        float _623 = inversesqrt(dot(vec3(_617, _618, _619), vec3(_617, _618, _619)));
        float _636 = ((_623 * _617) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_572 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _637 = ((_623 * _618) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_576 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _638 = ((_623 * _619) / cbModelParam._m0[34u].z) + ((((((_580 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _641 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_636, _637, _638), 0.0);
        vec4 _648 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_636, _637, _638), 0.0);
        vec4 _655 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_636, _637, _638), 0.0);
        vec4 _662 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_636, _637, _638), 0.0);
        float _675 = exp2((_641.w + (-0.5)) * 20.0) * 2.0;
        float _676 = _675 * (_641.x + (-0.5));
        float _677 = _675 * (_641.y + (-0.5));
        float _678 = _675 * (_641.z + (-0.5));
        float _685 = exp2((_648.w + (-0.5)) * 20.0) * 2.0;
        float _686 = _685 * (_648.x + (-0.5));
        float _687 = _685 * (_648.y + (-0.5));
        float _688 = _685 * (_648.z + (-0.5));
        float _695 = exp2((_655.w + (-0.5)) * 20.0) * 2.0;
        float _696 = _695 * (_655.x + (-0.5));
        float _697 = _695 * (_655.y + (-0.5));
        float _698 = _695 * (_655.z + (-0.5));
        float _705 = exp2((_662.w + (-0.5)) * 20.0) * 2.0;
        float _706 = _705 * (_662.x + (-0.5));
        float _707 = _705 * (_662.y + (-0.5));
        float _708 = _705 * (_662.z + (-0.5));
        float _709 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
        float _710 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
        float _711 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
        float _712 = _676 * 0.5;
        float _713 = _686 * 0.5;
        float _714 = _696 * 0.5;
        float _715 = dot(vec3(_712, _713, _714), vec3(_712, _713, _714));
        float _720 = (_715 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_715);
        float _729 = (dot(vec3(_279, _280, _281), vec3(_720 * _712, _720 * _713, _720 * _714)) + 1.0) * 0.5;
        float _3403 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
        float _739 = sqrt(((_713 * _713) + (_712 * _712)) + (_714 * _714)) / (_709 + 9.9999997473787516355514526367188e-06);
        float _3414 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
        float _740 = isnan(1.0) ? _3414 : (isnan(_3414) ? 1.0 : min(_3414, 1.0));
        float _741 = _740 * 2.0;
        float _745 = (1.0 - _740) / (_740 + 1.0);
        float _3425 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
        float _746 = isnan(1.0) ? _3425 : (isnan(_3425) ? 1.0 : min(_3425, 1.0));
        float _755 = ((((1.0 - _746) * (_741 + 2.0)) * exp2(log2(isnan(1.0) ? _3403 : (isnan(_3403) ? 1.0 : min(_3403, 1.0))) * (_741 + 1.0))) + _746) * _709;
        float _756 = _677 * 0.5;
        float _757 = _687 * 0.5;
        float _758 = _697 * 0.5;
        float _759 = dot(vec3(_756, _757, _758), vec3(_756, _757, _758));
        float _764 = (_759 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_759);
        float _772 = (dot(vec3(_279, _280, _281), vec3(_764 * _756, _764 * _757, _764 * _758)) + 1.0) * 0.5;
        float _3436 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
        float _781 = sqrt(((_757 * _757) + (_756 * _756)) + (_758 * _758)) / (_710 + 9.9999997473787516355514526367188e-06);
        float _3447 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
        float _782 = isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0));
        float _783 = _782 * 2.0;
        float _787 = (1.0 - _782) / (_782 + 1.0);
        float _3458 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
        float _788 = isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0));
        float _797 = ((((1.0 - _788) * (_783 + 2.0)) * exp2(log2(isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0))) * (_783 + 1.0))) + _788) * _710;
        float _798 = _678 * 0.5;
        float _799 = _688 * 0.5;
        float _800 = _698 * 0.5;
        float _801 = dot(vec3(_798, _799, _800), vec3(_798, _799, _800));
        float _806 = (_801 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_801);
        float _814 = (dot(vec3(_279, _280, _281), vec3(_806 * _798, _806 * _799, _806 * _800)) + 1.0) * 0.5;
        float _3469 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
        float _823 = sqrt(((_799 * _799) + (_798 * _798)) + (_800 * _800)) / (_711 + 9.9999997473787516355514526367188e-06);
        float _3480 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
        float _824 = isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0));
        float _825 = _824 * 2.0;
        float _829 = (1.0 - _824) / (_824 + 1.0);
        float _3491 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
        float _830 = isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0));
        float _839 = ((((1.0 - _830) * (_825 + 2.0)) * exp2(log2(isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0))) * (_825 + 1.0))) + _830) * _711;
        _847 = _678;
        _849 = _677;
        _850 = _676;
        _851 = _688;
        _852 = _687;
        _853 = _686;
        _854 = _698;
        _855 = _697;
        _856 = _696;
        _857 = _711;
        _858 = _710;
        _859 = _709;
        _860 = cbModelParam._m0[36u].z * (isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0)));
        _861 = cbModelParam._m0[36u].z * (isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0)));
        _862 = cbModelParam._m0[36u].z * (isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0)));
    }
    else
    {
        _847 = _848;
        _849 = _848;
        _850 = _848;
        _851 = _848;
        _852 = _848;
        _853 = _848;
        _854 = _848;
        _855 = _848;
        _856 = _848;
        _857 = _848;
        _858 = _848;
        _859 = _848;
        _860 = 0.0;
        _861 = 0.0;
        _862 = 0.0;
    }
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _891 = fma(_516, cbModelParam._m0[30u].z, fma(_512, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _508));
        float _895 = fma(_516, cbModelParam._m0[31u].z, fma(_512, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _508));
        float _899 = fma(_516, cbModelParam._m0[32u].z, fma(_512, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _508));
        float _922 = _508 + _279;
        float _923 = _512 + _280;
        float _924 = _516 + _281;
        float _934 = fma(_924, cbModelParam._m0[30u].z, fma(_923, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _922)) - _891;
        float _935 = fma(_924, cbModelParam._m0[31u].z, fma(_923, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _922)) - _895;
        float _936 = fma(_924, cbModelParam._m0[32u].z, fma(_923, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _922)) - _899;
        float _940 = inversesqrt(dot(vec3(_934, _935, _936), vec3(_934, _935, _936)));
        float _953 = ((_940 * _934) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_891 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _954 = ((_940 * _935) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_895 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _955 = ((_940 * _936) / cbModelParam._m0[35u].z) + ((((((_899 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _957 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_953, _954, _955), 0.0);
        vec4 _964 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_953, _954, _955), 0.0);
        vec4 _971 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_953, _954, _955), 0.0);
        vec4 _978 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_953, _954, _955), 0.0);
        float _990 = exp2((_957.w + (-0.5)) * 20.0) * 2.0;
        float _991 = _990 * (_957.x + (-0.5));
        float _992 = _990 * (_957.y + (-0.5));
        float _993 = _990 * (_957.z + (-0.5));
        float _1000 = exp2((_964.w + (-0.5)) * 20.0) * 2.0;
        float _1001 = _1000 * (_964.x + (-0.5));
        float _1002 = _1000 * (_964.y + (-0.5));
        float _1003 = _1000 * (_964.z + (-0.5));
        float _1010 = exp2((_971.w + (-0.5)) * 20.0) * 2.0;
        float _1011 = _1010 * (_971.x + (-0.5));
        float _1012 = _1010 * (_971.y + (-0.5));
        float _1013 = _1010 * (_971.z + (-0.5));
        float _1020 = exp2((_978.w + (-0.5)) * 20.0) * 2.0;
        float _1021 = _1020 * (_978.x + (-0.5));
        float _1022 = _1020 * (_978.y + (-0.5));
        float _1023 = _1020 * (_978.z + (-0.5));
        float _1024 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1025 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1026 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1027 = _991 * 0.5;
        float _1028 = _1001 * 0.5;
        float _1029 = _1011 * 0.5;
        float _1030 = dot(vec3(_1027, _1028, _1029), vec3(_1027, _1028, _1029));
        float _1035 = (_1030 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1030);
        float _1043 = (dot(vec3(_279, _280, _281), vec3(_1035 * _1027, _1035 * _1028, _1035 * _1029)) + 1.0) * 0.5;
        float _3532 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1052 = sqrt(((_1028 * _1028) + (_1027 * _1027)) + (_1029 * _1029)) / (_1024 + 9.9999997473787516355514526367188e-06);
        float _3543 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1053 = isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0));
        float _1054 = _1053 * 2.0;
        float _1058 = (1.0 - _1053) / (_1053 + 1.0);
        float _3554 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1059 = isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0));
        float _1068 = ((((1.0 - _1059) * (_1054 + 2.0)) * exp2(log2(isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0))) * (_1054 + 1.0))) + _1059) * _1024;
        float _1069 = _992 * 0.5;
        float _1070 = _1002 * 0.5;
        float _1071 = _1012 * 0.5;
        float _1072 = dot(vec3(_1069, _1070, _1071), vec3(_1069, _1070, _1071));
        float _1077 = (_1072 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1072);
        float _1085 = (dot(vec3(_279, _280, _281), vec3(_1077 * _1069, _1077 * _1070, _1077 * _1071)) + 1.0) * 0.5;
        float _3565 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1094 = sqrt(((_1070 * _1070) + (_1069 * _1069)) + (_1071 * _1071)) / (_1025 + 9.9999997473787516355514526367188e-06);
        float _3576 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1095 = isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0));
        float _1096 = _1095 * 2.0;
        float _1100 = (1.0 - _1095) / (_1095 + 1.0);
        float _3587 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1101 = isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0));
        float _1110 = ((((1.0 - _1101) * (_1096 + 2.0)) * exp2(log2(isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0))) * (_1096 + 1.0))) + _1101) * _1025;
        float _1111 = _993 * 0.5;
        float _1112 = _1003 * 0.5;
        float _1113 = _1013 * 0.5;
        float _1114 = dot(vec3(_1111, _1112, _1113), vec3(_1111, _1112, _1113));
        float _1119 = (_1114 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1114);
        float _1127 = (dot(vec3(_279, _280, _281), vec3(_1119 * _1111, _1119 * _1112, _1119 * _1113)) + 1.0) * 0.5;
        float _3598 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1136 = sqrt(((_1112 * _1112) + (_1111 * _1111)) + (_1113 * _1113)) / (_1026 + 9.9999997473787516355514526367188e-06);
        float _3609 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1137 = isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0));
        float _1138 = _1137 * 2.0;
        float _1142 = (1.0 - _1137) / (_1137 + 1.0);
        float _3620 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1143 = isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0));
        float _1152 = ((((1.0 - _1143) * (_1138 + 2.0)) * exp2(log2(isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0))) * (_1138 + 1.0))) + _1143) * _1026;
        _1160 = _993;
        _1161 = _992;
        _1162 = _991;
        _1163 = _1003;
        _1164 = _1002;
        _1165 = _1001;
        _1166 = _1013;
        _1167 = _1012;
        _1168 = _1011;
        _1169 = _1026;
        _1170 = _1025;
        _1171 = _1024;
        _1172 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0)));
        _1173 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0)));
        _1174 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0)));
    }
    else
    {
        _1160 = _848;
        _1161 = _848;
        _1162 = _848;
        _1163 = _848;
        _1164 = _848;
        _1165 = _848;
        _1166 = _848;
        _1167 = _848;
        _1168 = _848;
        _1169 = _848;
        _1170 = _848;
        _1171 = _848;
        _1172 = 0.0;
        _1173 = 0.0;
        _1174 = 0.0;
    }
    float _1184 = (cbModelParam._m0[1u].x * (_1172 - _860)) + _860;
    float _1185 = (cbModelParam._m0[1u].x * (_1173 - _861)) + _861;
    float _1186 = (cbModelParam._m0[1u].x * (_1174 - _862)) + _862;
    float _1207 = fma(_1186, cbSceneParam._m0[89u].z, fma(_1185, cbSceneParam._m0[89u].y, _1184 * cbSceneParam._m0[89u].x));
    float _1210 = fma(_1186, cbSceneParam._m0[90u].z, fma(_1185, cbSceneParam._m0[90u].y, _1184 * cbSceneParam._m0[90u].x));
    float _1213 = fma(_1186, cbSceneParam._m0[91u].z, fma(_1185, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1184));
    float _1228 = _455 * 0.5;
    float _1229 = _456 * 0.5;
    float _1230 = _457 * 0.5;
    float _1231 = dot(vec4(_1228, _1229, _1230, 1.0), vec4(_1162, _1165, _1168, _1171));
    float _1234 = dot(vec4(_1228, _1229, _1230, 1.0), vec4(_1161, _1164, _1167, _1170));
    float _1237 = dot(vec4(_1228, _1229, _1230, 1.0), vec4(_1160, _1163, _1166, _1169));
    float _1271;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1244 = dot(vec4(_1228, _1229, _1230, 1.0), vec4(_847, _851, _854, _857));
        float _1248 = dot(vec4(_1228, _1229, _1230, 1.0), vec4(_849, _852, _855, _858));
        float _1252 = dot(vec4(_1228, _1229, _1230, 1.0), vec4(_850, _853, _856, _859));
        float _1259 = dot(vec4(cbModelParam._m0[39u]), vec4(_1228, _1229, _1230, 1.0));
        _1271 = dot(vec3(isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0)), isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0)), isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1259) ? 0.0 : (isnan(0.0) ? _1259 : max(0.0, _1259))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1271 = 1.0;
    }
    float _1282;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1273 = dot(vec4(cbModelParam._m0[40u]), vec4(_1228, _1229, _1230, 1.0));
        _1282 = dot(vec3(isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0)), isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0)), isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1273) ? 0.0 : (isnan(0.0) ? _1273 : max(0.0, _1273))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1282 = 1.0;
    }
    float _1286 = (_1282 * cbModelParam._m0[1u].x) + (_1271 * (1.0 - cbModelParam._m0[1u].x));
    float _1296 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _283);
    float _1297 = isnan(_1296) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1296 : min(cbModelParam._m0[25u].z, _1296));
    float _1379;
    float _1381;
    float _1383;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1346 = fma(_516, cbModelParam._m0[13u].z, fma(_512, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _508)) + cbModelParam._m0[13u].w;
        float _1350 = fma(_516, cbModelParam._m0[14u].z, fma(_512, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _508)) + cbModelParam._m0[14u].w;
        float _1354 = fma(_516, cbModelParam._m0[15u].z, fma(_512, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _508)) + cbModelParam._m0[15u].w;
        float _1357 = fma(_457, cbModelParam._m0[13u].z, fma(_456, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _455));
        float _1360 = fma(_457, cbModelParam._m0[14u].z, fma(_456, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _455));
        float _1363 = fma(_457, cbModelParam._m0[15u].z, fma(_456, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _455));
        float _1391;
        if (_1357 > 0.0)
        {
            _1391 = abs((1.0 - _1346) / _1357);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1357 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1346 + 1.0) / _1357);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1391 = frontier_phi_17_15_ladder;
        }
        float _1618;
        if (_1360 > 0.0)
        {
            _1618 = abs((1.0 - _1350) / _1360);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1360 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1350 + 1.0) / _1360);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1618 = frontier_phi_26_22_ladder;
        }
        float _1864;
        if (_1363 > 0.0)
        {
            _1864 = abs((1.0 - _1354) / _1363);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1363 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1354 + 1.0) / _1363);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1864 = frontier_phi_38_33_ladder;
        }
        float _1866 = isnan(_1618) ? _1391 : (isnan(_1391) ? _1618 : min(_1391, _1618));
        float _1867 = isnan(_1864) ? _1866 : (isnan(_1866) ? _1864 : min(_1866, _1864));
        float _1871 = (_1867 * _1357) + _1346;
        float _1872 = (_1867 * _1360) + _1350;
        float _1873 = (_1867 * _1363) + _1354;
        float _1874 = _1867 * 9.9999997473787516355514526367188e-05;
        float _1876 = (-1.0) - _1874;
        float _1878 = _1874 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1873 > _1878) || ((_1873 < _1876) || ((_1872 > _1878) || ((_1872 < _1876) || ((_1871 < _1876) || (_1871 > _1878))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1997 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1873, cbModelParam._m0[9u].z, fma(_1872, cbModelParam._m0[9u].y, _1871 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1873, cbModelParam._m0[10u].z, fma(_1872, cbModelParam._m0[10u].y, _1871 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1873, cbModelParam._m0[11u].z, fma(_1872, cbModelParam._m0[11u].y, _1871 * cbModelParam._m0[11u].x))), _1297);
            frontier_phi_16_38_ladder = _1997.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _1997.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _1997.x * cbModelParam._m0[1u].y;
        }
        _1379 = frontier_phi_16_38_ladder_2;
        _1381 = frontier_phi_16_38_ladder_1;
        _1383 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1367 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_455, _456, _457), _1297);
        _1379 = _1367.x * cbModelParam._m0[1u].y;
        _1381 = _1367.y * cbModelParam._m0[1u].y;
        _1383 = _1367.z * cbModelParam._m0[1u].y;
    }
    float _1387 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _283);
    float _1388 = isnan(_1387) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1387 : min(cbModelParam._m0[25u].w, _1387));
    float _1481;
    float _1483;
    float _1485;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1445 = fma(_516, cbModelParam._m0[21u].z, fma(_512, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _508)) + cbModelParam._m0[21u].w;
        float _1449 = fma(_516, cbModelParam._m0[22u].z, fma(_512, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _508)) + cbModelParam._m0[22u].w;
        float _1453 = fma(_516, cbModelParam._m0[23u].z, fma(_512, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _508)) + cbModelParam._m0[23u].w;
        float _1456 = fma(_457, cbModelParam._m0[21u].z, fma(_456, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _455));
        float _1459 = fma(_457, cbModelParam._m0[22u].z, fma(_456, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _455));
        float _1462 = fma(_457, cbModelParam._m0[23u].z, fma(_456, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _455));
        float _1623;
        if (_1456 > 0.0)
        {
            _1623 = abs((1.0 - _1445) / _1456);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1456 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1445 + 1.0) / _1456);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1623 = frontier_phi_28_24_ladder;
        }
        float _1891;
        if (_1459 > 0.0)
        {
            _1891 = abs((1.0 - _1449) / _1459);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1459 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1449 + 1.0) / _1459);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1891 = frontier_phi_40_35_ladder;
        }
        float _2096;
        if (_1462 > 0.0)
        {
            _2096 = abs((1.0 - _1453) / _1462);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1462 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1453 + 1.0) / _1462);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2096 = frontier_phi_49_46_ladder;
        }
        float _2098 = isnan(_1891) ? _1623 : (isnan(_1623) ? _1891 : min(_1623, _1891));
        float _2099 = isnan(_2096) ? _2098 : (isnan(_2098) ? _2096 : min(_2098, _2096));
        float _2103 = (_2099 * _1456) + _1445;
        float _2104 = (_2099 * _1459) + _1449;
        float _2105 = (_2099 * _1462) + _1453;
        float _2106 = _2099 * 9.9999997473787516355514526367188e-05;
        float _2107 = (-1.0) - _2106;
        float _2109 = _2106 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2105 > _2109) || ((_2105 < _2107) || ((_2104 > _2109) || ((_2104 < _2107) || ((_2103 < _2107) || (_2103 > _2109))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2306 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2105, cbModelParam._m0[17u].z, fma(_2104, cbModelParam._m0[17u].y, _2103 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2105, cbModelParam._m0[18u].z, fma(_2104, cbModelParam._m0[18u].y, _2103 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2105, cbModelParam._m0[19u].z, fma(_2104, cbModelParam._m0[19u].y, _2103 * cbModelParam._m0[19u].x))), _1388);
            frontier_phi_25_49_ladder = _2306.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2306.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2306.x * cbModelParam._m0[1u].z;
        }
        _1481 = frontier_phi_25_49_ladder_2;
        _1483 = frontier_phi_25_49_ladder_1;
        _1485 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1465 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_455, _456, _457), _1388);
        _1481 = _1465.x * cbModelParam._m0[1u].z;
        _1483 = _1465.y * cbModelParam._m0[1u].z;
        _1485 = _1465.z * cbModelParam._m0[1u].z;
    }
    float _1497 = ((((1.0 - _476) * ((_463 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_476 * _463)) * _447;
    float _1498 = _1497 * ((cbModelParam._m0[1u].w * (_1481 - _1379)) + _1379);
    float _1499 = _1497 * ((cbModelParam._m0[1u].w * (_1483 - _1381)) + _1381);
    float _1500 = _1497 * ((cbModelParam._m0[1u].w * (_1485 - _1383)) + _1383);
    float _1503 = fma(_1500, cbSceneParam._m0[89u].z, fma(_1499, cbSceneParam._m0[89u].y, _1498 * cbSceneParam._m0[89u].x));
    float _1506 = fma(_1500, cbSceneParam._m0[90u].z, fma(_1499, cbSceneParam._m0[90u].y, _1498 * cbSceneParam._m0[90u].x));
    float _1509 = fma(_1500, cbSceneParam._m0[91u].z, fma(_1499, cbSceneParam._m0[91u].y, _1498 * cbSceneParam._m0[91u].x));
    vec4 _1517 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_381, _382));
    float _1519 = _1517.w;
    float _1531 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1519);
    float _1532 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1519);
    float _1533 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1519);
    uvec4 _1537 = floatBitsToUint(cbInstanceData._m0[_421 + 5u]);
    uint _1539 = _1537.x * 14u;
    uint _1540 = _1539 + 13u;
    float _1547 = _447 + (-1.0);
    float _1552 = (cbLight._m0[_1540].x * _1547) + 1.0;
    float _1553 = (cbLight._m0[_1540].y * _1547) + 1.0;
    float _1554 = (cbLight._m0[_1540].z * _1547) + 1.0;
    float _1555 = (cbLight._m0[_1540].w * _1547) + 1.0;
    uint _1556 = _1539 + 5u;
    float _1562 = isnan(1.0) ? _1553 : (isnan(_1553) ? 1.0 : min(_1553, 1.0));
    uint _1566 = _1539 + 4u;
    float _1576 = isnan(1.0) ? _1552 : (isnan(_1552) ? 1.0 : min(_1552, 1.0));
    uint _1580 = _1539 | 1u;
    float _1591 = dot(vec3(cbLight._m0[_1539].xyz), vec3(_279, _280, _281));
    float _1594 = dot(vec3(cbLight._m0[_1580].xyz), vec3(_279, _280, _281));
    float _3756 = isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0));
    float _3767 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
    float _1599 = (isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0))) * 0.3183098733425140380859375;
    float _1601 = (isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0))) * 0.3183098733425140380859375;
    float _1608 = ((cbLight._m0[_1556].x * _1562) * _1601) + (((cbLight._m0[_1566].x * _1531) * _1576) * _1599);
    float _1609 = ((_1562 * cbLight._m0[_1556].y) * _1601) + (((cbLight._m0[_1566].y * _1532) * _1576) * _1599);
    float _1610 = ((_1562 * cbLight._m0[_1556].z) * _1601) + (((cbLight._m0[_1566].z * _1533) * _1576) * _1599);
    uvec4 _1615 = floatBitsToUint(cbLight._m0[_1539 + 12u]);
    bool _1617 = _1615.x == 0u;
    float _1628;
    float _1630;
    float _1632;
    if (_1617)
    {
        _1628 = _1608;
        _1630 = _1609;
        _1632 = _1610;
    }
    else
    {
        uint _1636 = _1539 + 6u;
        float _1652 = (dot(vec3(cbLight._m0[_1539 + 2u].xyz), vec3(_279, _280, _281)) * 0.5) + 0.5;
        float _1653 = _1652 * _1652;
        float _3778 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
        float _1654 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
        float _1655 = isnan(1.0) ? _1554 : (isnan(_1554) ? 1.0 : min(_1554, 1.0));
        _1628 = (((cbLight._m0[_1636].x * 0.3183098733425140380859375) * _1654) * _1655) + _1608;
        _1630 = (((cbLight._m0[_1636].y * 0.3183098733425140380859375) * _1654) * _1655) + _1609;
        _1632 = (((cbLight._m0[_1636].z * 0.3183098733425140380859375) * _1654) * _1655) + _1610;
    }
    bool _1635 = _1615.y == 0u;
    float _1673;
    float _1675;
    float _1677;
    if (_1635)
    {
        _1673 = _1628;
        _1675 = _1630;
        _1677 = _1632;
    }
    else
    {
        uint _1835 = _1539 + 7u;
        float _1851 = (dot(vec3(cbLight._m0[_1539 + 3u].xyz), vec3(_279, _280, _281)) * 0.5) + 0.5;
        float _1852 = _1851 * _1851;
        float _3794 = isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0));
        float _1853 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
        float _1854 = isnan(1.0) ? _1555 : (isnan(_1555) ? 1.0 : min(_1555, 1.0));
        _1673 = (((cbLight._m0[_1835].x * 0.3183098733425140380859375) * _1853) * _1854) + _1628;
        _1675 = (((cbLight._m0[_1835].y * 0.3183098733425140380859375) * _1853) * _1854) + _1630;
        _1677 = (((cbLight._m0[_1835].z * 0.3183098733425140380859375) * _1853) * _1854) + _1632;
    }
    uint _1680 = _1539 + 8u;
    float _1693 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1539].w)) * _283) * 0.949999988079071044921875);
    float _1694 = _1693 * _1693;
    float _1695 = cbLight._m0[_1539].x + _360;
    float _1696 = cbLight._m0[_1539].y + _361;
    float _1697 = cbLight._m0[_1539].z + _362;
    float _1701 = inversesqrt(dot(vec3(_1695, _1696, _1697), vec3(_1695, _1696, _1697)));
    float _1702 = _1701 * _1695;
    float _1703 = _1701 * _1696;
    float _1704 = _1701 * _1697;
    float _1705 = dot(vec3(_279, _280, _281), vec3(cbLight._m0[_1539].xyz));
    float _3810 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
    float _1708 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
    float _3821 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _1709 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
    float _1710 = dot(vec3(_279, _280, _281), vec3(_1702, _1703, _1704));
    float _3832 = isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0));
    float _1713 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
    float _1714 = dot(vec3(cbLight._m0[_1539].xyz), vec3(_1702, _1703, _1704));
    float _3843 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
    float _1718 = _1694 * _1694;
    float _1722 = ((_1713 * _1713) * (_1718 + (-1.0))) + 1.0;
    float _1733 = (exp2(log2(1.0 - (isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1734 = 1.0 - _1694;
    float _1745 = (0.5 / (((_1709 * ((_1708 * _1734) + _1694)) + 9.9999999392252902907785028219223e-09) + (((_1709 * _1734) + _1694) * _1708))) * _1708;
    float _3854 = isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0));
    float _1747 = (isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0))) * (_1718 / ((_1722 * _1722) * 3.141590118408203125));
    uint _1761 = _1539 + 9u;
    float _1772 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1580].w)) * _283) * 0.949999988079071044921875);
    float _1773 = _1772 * _1772;
    float _1774 = cbLight._m0[_1580].x + _360;
    float _1775 = cbLight._m0[_1580].y + _361;
    float _1776 = cbLight._m0[_1580].z + _362;
    float _1780 = inversesqrt(dot(vec3(_1774, _1775, _1776), vec3(_1774, _1775, _1776)));
    float _1781 = _1780 * _1774;
    float _1782 = _1780 * _1775;
    float _1783 = _1780 * _1776;
    float _1784 = dot(vec3(_279, _280, _281), vec3(cbLight._m0[_1580].xyz));
    float _3865 = isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0));
    float _1787 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
    float _1788 = dot(vec3(_279, _280, _281), vec3(_1781, _1782, _1783));
    float _3876 = isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0));
    float _1791 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
    float _1792 = dot(vec3(cbLight._m0[_1580].xyz), vec3(_1781, _1782, _1783));
    float _3887 = isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0));
    float _1796 = _1773 * _1773;
    float _1800 = ((_1791 * _1791) * (_1796 + (-1.0))) + 1.0;
    float _1809 = (exp2(log2(1.0 - (isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1810 = 1.0 - _1773;
    float _1820 = (0.5 / (((_1709 * ((_1787 * _1810) + _1773)) + 9.9999999392252902907785028219223e-09) + (((_1709 * _1810) + _1773) * _1787))) * _1787;
    float _3898 = isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0));
    float _1822 = (isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0))) * (_1796 / ((_1800 * _1800) * 3.141590118408203125));
    float _1832 = (((_1809 * cbLight._m0[_1761].x) * _1822) * _1562) + ((((cbLight._m0[_1680].x * _1531) * _1733) * _1747) * _1576);
    float _1833 = (((_1809 * cbLight._m0[_1761].y) * _1822) * _1562) + ((((cbLight._m0[_1680].y * _1532) * _1733) * _1747) * _1576);
    float _1834 = (((_1809 * cbLight._m0[_1761].z) * _1822) * _1562) + ((((cbLight._m0[_1680].z * _1533) * _1733) * _1747) * _1576);
    float _1896;
    float _1898;
    float _1900;
    if (_1617)
    {
        _1896 = _1832;
        _1898 = _1833;
        _1900 = _1834;
    }
    else
    {
        uint _1902 = _1539 + 2u;
        uint _1906 = _1539 + 10u;
        float _1920 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1902].w)) * _283) * 0.949999988079071044921875);
        float _1921 = _1920 * _1920;
        float _1922 = cbLight._m0[_1902].x + _360;
        float _1923 = cbLight._m0[_1902].y + _361;
        float _1924 = cbLight._m0[_1902].z + _362;
        float _1928 = inversesqrt(dot(vec3(_1922, _1923, _1924), vec3(_1922, _1923, _1924)));
        float _1929 = _1928 * _1922;
        float _1930 = _1928 * _1923;
        float _1931 = _1928 * _1924;
        float _1932 = dot(vec3(_279, _280, _281), vec3(cbLight._m0[_1902].xyz));
        float _3909 = isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0));
        float _1935 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
        float _1936 = dot(vec3(_279, _280, _281), vec3(_1929, _1930, _1931));
        float _3920 = isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0));
        float _1939 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
        float _1940 = dot(vec3(cbLight._m0[_1902].xyz), vec3(_1929, _1930, _1931));
        float _3931 = isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0));
        float _1944 = _1921 * _1921;
        float _1948 = ((_1939 * _1939) * (_1944 + (-1.0))) + 1.0;
        float _1957 = (exp2(log2(1.0 - (isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1958 = 1.0 - _1921;
        float _1968 = (0.5 / (((_1709 * ((_1935 * _1958) + _1921)) + 9.9999999392252902907785028219223e-09) + (((_1709 * _1958) + _1921) * _1935))) * _1935;
        float _3942 = isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0));
        float _1970 = (isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0))) * (_1944 / ((_1948 * _1948) * 3.141590118408203125));
        float _1971 = isnan(1.0) ? _1554 : (isnan(_1554) ? 1.0 : min(_1554, 1.0));
        _1896 = (((_1957 * cbLight._m0[_1906].x) * _1970) * _1971) + _1832;
        _1898 = (((_1957 * cbLight._m0[_1906].y) * _1970) * _1971) + _1833;
        _1900 = (((_1957 * cbLight._m0[_1906].z) * _1970) * _1971) + _1834;
    }
    float _2006;
    float _2008;
    float _2010;
    if (_1635)
    {
        _2006 = _1896;
        _2008 = _1898;
        _2010 = _1900;
    }
    else
    {
        uint _2017 = _1539 + 3u;
        uint _2021 = _1539 + 11u;
        float _2035 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2017].w)) * _283) * 0.949999988079071044921875);
        float _2036 = _2035 * _2035;
        float _2037 = cbLight._m0[_2017].x + _360;
        float _2038 = cbLight._m0[_2017].y + _361;
        float _2039 = cbLight._m0[_2017].z + _362;
        float _2043 = inversesqrt(dot(vec3(_2037, _2038, _2039), vec3(_2037, _2038, _2039)));
        float _2044 = _2043 * _2037;
        float _2045 = _2043 * _2038;
        float _2046 = _2043 * _2039;
        float _2047 = dot(vec3(_279, _280, _281), vec3(cbLight._m0[_2017].xyz));
        float _3958 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
        float _2050 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
        float _2051 = dot(vec3(_279, _280, _281), vec3(_2044, _2045, _2046));
        float _3969 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
        float _2054 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
        float _2055 = dot(vec3(cbLight._m0[_2017].xyz), vec3(_2044, _2045, _2046));
        float _3980 = isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0));
        float _2059 = _2036 * _2036;
        float _2063 = ((_2054 * _2054) * (_2059 + (-1.0))) + 1.0;
        float _2072 = (exp2(log2(1.0 - (isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2073 = 1.0 - _2036;
        float _2083 = (0.5 / (((_1709 * ((_2050 * _2073) + _2036)) + 9.9999999392252902907785028219223e-09) + (((_1709 * _2073) + _2036) * _2050))) * _2050;
        float _3991 = isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0));
        float _2085 = (isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0))) * (_2059 / ((_2063 * _2063) * 3.141590118408203125));
        float _2086 = isnan(1.0) ? _1555 : (isnan(_1555) ? 1.0 : min(_1555, 1.0));
        _2006 = (((_2072 * cbLight._m0[_2021].x) * _2085) * _2086) + _1896;
        _2008 = (((_2072 * cbLight._m0[_2021].y) * _2085) * _2086) + _1898;
        _2010 = (((_2072 * cbLight._m0[_2021].z) * _2085) * _2086) + _1900;
    }
    float _2221;
    float _2223;
    float _2225;
    float _2227;
    float _2229;
    float _2231;
    if (_1537.y == 0u)
    {
        float _2161 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2162 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2161;
        float _2163 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2161;
        float _2164 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2161;
        uvec4 _2176 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2177 = _2176.x;
        uint _2188 = uint((float(_2176.y) * floor(float(uint(cbSceneParam._m0[85u].y * _382) / _2177))) + floor(float(uint(cbSceneParam._m0[85u].x * _381) / _2177)));
        float _2198 = (log2(_2164 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2199 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0));
        uint _2202 = uint(isnan(14.0) ? _2199 : (isnan(_2199) ? 14.0 : min(_2199, 14.0)));
        uvec4 _2207 = texelFetch(g_lightClusterGridBuffer, int(((_2202 << 2u) + (_2188 << 6u)) >> 2u));
        uint _2208 = _2207.x;
        uint _2209 = _2176.z;
        float _2311;
        float _2313;
        float _2315;
        float _2317;
        float _2319;
        float _2321;
        if (((((1u << ((_2209 >> 4u) & 15u)) + 4294967295u) & _2208) == 0u) || ((_2209 & 240u) == 0u))
        {
            _2311 = 0.0;
            _2313 = 0.0;
            _2315 = 0.0;
            _2317 = 0.0;
            _2319 = 0.0;
            _2321 = 0.0;
        }
        else
        {
            float _2312;
            float _2314;
            float _2316;
            float _2318;
            float _2320;
            float _2322;
            float _2464 = 0.0;
            float _2465 = 0.0;
            float _2466 = 0.0;
            float _2467 = 0.0;
            float _2468 = 0.0;
            float _2469 = 0.0;
            uint _2470 = 0u;
            uint _2479;
            bool _2480;
            for (;;)
            {
                _2479 = texelFetch(g_lightClassification, int((((_2202 << 5u) + (_2188 << 9u)) + (_2470 << 2u)) >> 2u)).x;
                _2480 = _2479 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2480)
                {
                    frontier_phi_66_pred = _2464;
                    frontier_phi_66_pred_1 = _2469;
                    frontier_phi_66_pred_2 = _2468;
                    frontier_phi_66_pred_3 = _2467;
                    frontier_phi_66_pred_4 = _2466;
                    frontier_phi_66_pred_5 = _2465;
                }
                else
                {
                    float _2609;
                    float _2610;
                    float _2611;
                    float _2612;
                    float _2613;
                    float _2614;
                    uint _2615;
                    _2609 = _2464;
                    _2610 = _2465;
                    _2611 = _2466;
                    _2612 = _2467;
                    _2613 = _2468;
                    _2614 = _2469;
                    _2615 = _2479;
                    float _2536;
                    float _2537;
                    float _2538;
                    float _2539;
                    float _2540;
                    float _2541;
                    for (;;)
                    {
                        uint _2619 = uint(findLSB(_2615)) + (_2470 << 5u);
                        uint _2616 = (_2615 + 4294967295u) & _2615;
                        uint _2621 = _2619 * 48u;
                        vec4 _2635 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2621)).x, texelFetch(g_PointLightRenderingBuffer, int(_2621 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2621 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2621 + 3u)).x));
                        uint _2641 = (_2619 * 48u) + 4u;
                        vec4 _2654 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2641)).x, texelFetch(g_PointLightRenderingBuffer, int(_2641 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2641 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2641 + 3u)).x));
                        uint _2660 = (_2619 * 48u) + 8u;
                        vec3 _2671 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2660)).x, texelFetch(g_PointLightRenderingBuffer, int(_2660 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2660 + 2u)).x));
                        float _2675 = _2635.x - _2162;
                        float _2676 = _2635.y - _2163;
                        float _2677 = _2635.z - _2164;
                        float _2678 = dot(vec3(_2675, _2676, _2677), vec3(_2675, _2676, _2677));
                        float _2681 = inversesqrt(_2678);
                        float _2682 = _2681 * _2675;
                        float _2683 = _2681 * _2676;
                        float _2684 = _2681 * _2677;
                        float _2685 = dot(vec3(_402, _405, _408), vec3(_2682, _2683, _2684));
                        float _2690 = 1.0 - (_2678 * _2635.w);
                        float _4017 = isnan(0.0) ? _2690 : (isnan(_2690) ? 0.0 : max(_2690, 0.0));
                        float _2691 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
                        float _2692 = sqrt(_2678) * _2654.w;
                        float _2695 = 1.39999997615814208984375 / (_2692 + 1.39999997615814208984375);
                        float _2696 = _2695 * _2695;
                        float _2699 = ((1.0 - _2696) * _2685) + _2696;
                        float _2702 = _2692 * _2692;
                        float _2706 = ((isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : max(_2699, 0.0))) * _2691) / ((_2702 * 0.699999988079071044921875) + 1.0);
                        float _2710 = (-0.0) - _2162;
                        float _2711 = (-0.0) - _2163;
                        float _2712 = (-0.0) - _2164;
                        float _2716 = inversesqrt(dot(vec3(_2710, _2711, _2712), vec3(_2710, _2711, _2712)));
                        float _2717 = _2716 * _2710;
                        float _2718 = _2716 * _2711;
                        float _2719 = _2716 * _2712;
                        float _2727 = exp2(log2(1.0 / ((_2702 * 3.5) + 5.0)) * 0.25);
                        float _2728 = 1.0 - _463;
                        float _2735 = sqrt(1.0 - ((1.0 - (_2728 * _2728)) * (1.0 - (_2727 * _2727))));
                        float _2736 = _2735 * _2735;
                        float _2737 = _2736 * _2736;
                        float _2738 = _2717 + _2682;
                        float _2739 = _2718 + _2683;
                        float _2740 = _2719 + _2684;
                        float _2744 = inversesqrt(dot(vec3(_2738, _2739, _2740), vec3(_2738, _2739, _2740)));
                        float _2748 = dot(vec3(_402, _405, _408), vec3(_2717, _2718, _2719));
                        float _4033 = isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : max(_2748, 0.0));
                        float _2751 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
                        float _2752 = dot(vec3(_402, _405, _408), vec3(_2744 * _2738, _2744 * _2739, _2744 * _2740));
                        float _4044 = isnan(0.0) ? _2752 : (isnan(_2752) ? 0.0 : max(_2752, 0.0));
                        float _2755 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
                        float _2759 = ((_2755 * _2755) * (_2737 + (-1.0))) + 1.0;
                        float _2760 = _2695 * _2736;
                        float _2761 = _2760 * _2760;
                        float _2764 = ((1.0 - _2761) * _2685) + _2761;
                        float _4055 = isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0));
                        float _2765 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
                        float _2766 = 1.0 - _2736;
                        float _2776 = (0.5 / (((_2765 * ((_2751 * _2766) + _2736)) + 9.9999999392252902907785028219223e-09) + (((_2765 * _2766) + _2736) * _2751))) * _2765;
                        float _4066 = isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : max(_2776, 0.0));
                        float _2787 = (((_2737 * 3.1415927410125732421875) * (isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0)))) / ((_2759 * _2759) * ((_2702 * 2.1991131305694580078125) + 3.141590118408203125))) * _2691;
                        _2539 = (_2706 * _2654.x) + _2612;
                        _2540 = (_2706 * _2654.y) + _2613;
                        _2541 = (_2706 * _2654.z) + _2614;
                        _2536 = (_2787 * _2671.x) + _2609;
                        _2537 = (_2787 * _2671.y) + _2610;
                        _2538 = (_2787 * _2671.z) + _2611;
                        if (_2616 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2609 = _2536;
                            _2610 = _2537;
                            _2611 = _2538;
                            _2612 = _2539;
                            _2613 = _2540;
                            _2614 = _2541;
                            _2615 = _2616;
                        }
                    }
                    frontier_phi_66_pred = _2536;
                    frontier_phi_66_pred_1 = _2541;
                    frontier_phi_66_pred_2 = _2540;
                    frontier_phi_66_pred_3 = _2539;
                    frontier_phi_66_pred_4 = _2538;
                    frontier_phi_66_pred_5 = _2537;
                }
                _2312 = frontier_phi_66_pred;
                _2322 = frontier_phi_66_pred_1;
                _2320 = frontier_phi_66_pred_2;
                _2318 = frontier_phi_66_pred_3;
                _2316 = frontier_phi_66_pred_4;
                _2314 = frontier_phi_66_pred_5;
                uint _2471 = _2470 + 1u;
                if (_2471 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2464 = _2312;
                    _2465 = _2314;
                    _2466 = _2316;
                    _2467 = _2318;
                    _2468 = _2320;
                    _2469 = _2322;
                    _2470 = _2471;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2311 = _2312;
            _2313 = _2314;
            _2315 = _2316;
            _2317 = _2318;
            _2319 = _2320;
            _2321 = _2322;
        }
        uvec4 _2325 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2326 = _2325.z;
        uint _2328 = (_2326 >> 8u) & 15u;
        float _2432;
        float _2434;
        float _2436;
        float _2438;
        float _2440;
        float _2442;
        if (((4294967295u << _2328) & _2208) == 0u)
        {
            _2432 = _2311;
            _2434 = _2313;
            _2436 = _2315;
            _2438 = _2317;
            _2440 = _2319;
            _2442 = _2321;
        }
        else
        {
            float _2457 = inversesqrt(dot(vec3(_2162, _2163, _2164), vec3(_2162, _2163, _2164)));
            float _2458 = _2457 * _2162;
            float _2459 = _2457 * _2163;
            float _2460 = _2457 * _2164;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2328 < ((_2326 >> 12u) & 15u))
            {
                float _2433;
                float _2435;
                float _2437;
                float _2439;
                float _2441;
                float _2443;
                float _2592 = _2311;
                float _2593 = _2313;
                float _2594 = _2315;
                float _2595 = _2317;
                float _2596 = _2319;
                float _2597 = _2321;
                uint _2598 = _2328;
                uint _2607;
                bool _2608;
                for (;;)
                {
                    _2607 = texelFetch(g_lightClassification, int((((_2202 << 5u) + (_2188 << 9u)) + (_2598 << 2u)) >> 2u)).x;
                    _2608 = _2607 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2608)
                    {
                        frontier_phi_77_pred = _2597;
                        frontier_phi_77_pred_1 = _2596;
                        frontier_phi_77_pred_2 = _2595;
                        frontier_phi_77_pred_3 = _2594;
                        frontier_phi_77_pred_4 = _2593;
                        frontier_phi_77_pred_5 = _2592;
                    }
                    else
                    {
                        float _2801;
                        float _2802;
                        float _2803;
                        float _2804;
                        float _2805;
                        float _2806;
                        float _3097;
                        float _3098;
                        float _3099;
                        float _3100;
                        float _3101;
                        float _3102;
                        float _2814 = _2592;
                        float _2815 = _2593;
                        float _2816 = _2594;
                        float _2817 = _2595;
                        float _2818 = _2596;
                        float _2819 = _2597;
                        uint _2820 = _2607;
                        uint _2821;
                        vec4 _2846;
                        float _2847;
                        vec4 _2862;
                        vec3 _2874;
                        vec4 _2890;
                        vec4 _2906;
                        float _2953;
                        bool _2954;
                        for (;;)
                        {
                            uint _2831 = ((_2598 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2820));
                            _2821 = (_2820 + 4294967295u) & _2820;
                            uint _2833 = _2831 * 40u;
                            _2846 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2833)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2833 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2833 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2833 + 3u)).x));
                            _2847 = _2846.w;
                            uint _2849 = (_2831 * 40u) + 4u;
                            _2862 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2849)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2849 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2849 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2849 + 3u)).x));
                            uint _2864 = (_2831 * 40u) + 8u;
                            _2874 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2864)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2864 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2864 + 2u)).x));
                            uint _2877 = (_2831 * 40u) + 16u;
                            _2890 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2877)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2877 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2877 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2877 + 3u)).x));
                            uint _2893 = (_2831 * 40u) + 20u;
                            _2906 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2893)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2893 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2893 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2893 + 3u)).x));
                            uint _2909 = (_2831 * 40u) + 24u;
                            vec4 _2922 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2909)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2909 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2909 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2909 + 3u)).x));
                            uint _2928 = (_2831 * 40u) + 28u;
                            vec4 _2941 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2928)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2928 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2928 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2928 + 3u)).x));
                            _2953 = fma(_2164, _2941.z, fma(_2163, _2941.y, _2941.x * _2162)) + _2941.w;
                            _2954 = !((fma(_2164, _2922.z, fma(_2163, _2922.y, _2922.x * _2162)) + _2922.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2954)
                            {
                                float _2981 = _2846.x - _2162;
                                float _2982 = _2846.y - _2163;
                                float _2983 = _2846.z - _2164;
                                float _2984 = dot(vec3(_2981, _2982, _2983), vec3(_2981, _2982, _2983));
                                float _2987 = inversesqrt(_2984);
                                float _2988 = _2987 * _2981;
                                float _2989 = _2987 * _2982;
                                float _2990 = _2987 * _2983;
                                float _2994 = 1.0 - (_2984 / (_2847 * _2847));
                                float _4077 = isnan(0.0) ? _2994 : (isnan(_2994) ? 0.0 : max(_2994, 0.0));
                                float _2995 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
                                float _2999 = sqrt(_2984) * _2862.w;
                                float _3001 = 1.39999997615814208984375 / (_2999 + 1.39999997615814208984375);
                                float _3002 = _3001 * _3001;
                                float _3005 = ((1.0 - _3002) * dot(vec3(_2988, _2989, _2990), vec3(_402, _405, _408))) + _3002;
                                float _3008 = _2999 * _2999;
                                float _3012 = (fma(_2164, _2890.z, fma(_2163, _2890.y, _2890.x * _2162)) + _2890.w) / _2953;
                                float _3013 = (fma(_2164, _2906.z, fma(_2163, _2906.y, _2906.x * _2162)) + _2906.w) / _2953;
                                float _3017 = 1.0 - dot(vec2(_3012, _3013), vec2(_3012, _3013));
                                float _4093 = isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : max(_3017, 0.0));
                                float _3018 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
                                float _3019 = _3018 * (((isnan(0.0) ? _3005 : (isnan(_3005) ? 0.0 : max(_3005, 0.0))) * _2995) / ((_3008 * 0.699999988079071044921875) + 1.0));
                                float _3031 = exp2(log2(1.0 / ((_3008 * 3.5) + 5.0)) * 0.25);
                                float _3032 = 1.0 - _463;
                                float _3039 = sqrt(1.0 - ((1.0 - (_3032 * _3032)) * (1.0 - (_3031 * _3031))));
                                float _3040 = _3039 * _3039;
                                float _3041 = _3040 * _3040;
                                float _3042 = _2988 - _2458;
                                float _3043 = _2989 - _2459;
                                float _3044 = _2990 - _2460;
                                float _3048 = inversesqrt(dot(vec3(_3042, _3043, _3044), vec3(_3042, _3043, _3044)));
                                float _3052 = dot(vec3(_402, _405, _408), vec3((-0.0) - _2458, (-0.0) - _2459, (-0.0) - _2460));
                                float _4104 = isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : max(_3052, 0.0));
                                float _3055 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
                                float _3056 = dot(vec3(_402, _405, _408), vec3(_3048 * _3042, _3048 * _3043, _3048 * _3044));
                                float _4115 = isnan(0.0) ? _3056 : (isnan(_3056) ? 0.0 : max(_3056, 0.0));
                                float _3059 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
                                float _3063 = ((_3059 * _3059) * (_3041 + (-1.0))) + 1.0;
                                float _3064 = _3001 * _3040;
                                float _3065 = _3064 * _3064;
                                float _3071 = ((1.0 - _3065) * dot(vec3(_402, _405, _408), vec3(_2988, _2989, _2990))) + _3065;
                                float _4126 = isnan(0.0) ? _3071 : (isnan(_3071) ? 0.0 : max(_3071, 0.0));
                                float _3072 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
                                float _3073 = 1.0 - _3040;
                                float _3083 = (0.5 / (((_3072 * ((_3055 * _3073) + _3040)) + 9.9999999392252902907785028219223e-09) + (((_3072 * _3073) + _3040) * _3055))) * _3072;
                                float _4137 = isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : max(_3083, 0.0));
                                float _3093 = (_3018 * _2995) * (((_3041 * 3.1415927410125732421875) * (isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0)))) / ((_3063 * _3063) * ((_3008 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3019 * _2862.y;
                                frontier_phi_83_pred_1 = _3019 * _2862.x;
                                frontier_phi_83_pred_2 = _3093 * _2874.z;
                                frontier_phi_83_pred_3 = _3093 * _2874.y;
                                frontier_phi_83_pred_4 = _3093 * _2874.x;
                                frontier_phi_83_pred_5 = _3019 * _2862.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3101 = frontier_phi_83_pred;
                            _3100 = frontier_phi_83_pred_1;
                            _3099 = frontier_phi_83_pred_2;
                            _3098 = frontier_phi_83_pred_3;
                            _3097 = frontier_phi_83_pred_4;
                            _3102 = frontier_phi_83_pred_5;
                            _2804 = _3100 + _2817;
                            _2805 = _3101 + _2818;
                            _2806 = _3102 + _2819;
                            _2801 = _3097 + _2814;
                            _2802 = _3098 + _2815;
                            _2803 = _3099 + _2816;
                            if (_2821 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2814 = _2801;
                                _2815 = _2802;
                                _2816 = _2803;
                                _2817 = _2804;
                                _2818 = _2805;
                                _2819 = _2806;
                                _2820 = _2821;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2806;
                        frontier_phi_77_pred_1 = _2805;
                        frontier_phi_77_pred_2 = _2804;
                        frontier_phi_77_pred_3 = _2803;
                        frontier_phi_77_pred_4 = _2802;
                        frontier_phi_77_pred_5 = _2801;
                    }
                    _2443 = frontier_phi_77_pred;
                    _2441 = frontier_phi_77_pred_1;
                    _2439 = frontier_phi_77_pred_2;
                    _2437 = frontier_phi_77_pred_3;
                    _2435 = frontier_phi_77_pred_4;
                    _2433 = frontier_phi_77_pred_5;
                    uint _2599 = _2598 + 1u;
                    if (_2599 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2592 = _2433;
                        _2593 = _2435;
                        _2594 = _2437;
                        _2595 = _2439;
                        _2596 = _2441;
                        _2597 = _2443;
                        _2598 = _2599;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2437;
                frontier_phi_58_59_ladder_1 = _2443;
                frontier_phi_58_59_ladder_2 = _2441;
                frontier_phi_58_59_ladder_3 = _2439;
                frontier_phi_58_59_ladder_4 = _2435;
                frontier_phi_58_59_ladder_5 = _2433;
            }
            else
            {
                frontier_phi_58_59_ladder = _2315;
                frontier_phi_58_59_ladder_1 = _2321;
                frontier_phi_58_59_ladder_2 = _2319;
                frontier_phi_58_59_ladder_3 = _2317;
                frontier_phi_58_59_ladder_4 = _2313;
                frontier_phi_58_59_ladder_5 = _2311;
            }
            _2432 = frontier_phi_58_59_ladder_5;
            _2434 = frontier_phi_58_59_ladder_4;
            _2436 = frontier_phi_58_59_ladder;
            _2438 = frontier_phi_58_59_ladder_3;
            _2440 = frontier_phi_58_59_ladder_2;
            _2442 = frontier_phi_58_59_ladder_1;
        }
        float _2447 = isnan(1.0) ? _447 : (isnan(_447) ? 1.0 : min(_447, 1.0));
        _2221 = (_2447 * _2438) + _1673;
        _2223 = (_2447 * _2440) + _1675;
        _2225 = (_2447 * _2442) + _1677;
        _2227 = ((_2432 * 0.039999999105930328369140625) * _2447) + _2006;
        _2229 = ((_2434 * 0.039999999105930328369140625) * _2447) + _2008;
        _2231 = ((_2436 * 0.039999999105930328369140625) * _2447) + _2010;
    }
    else
    {
        _2221 = _1673;
        _2223 = _1675;
        _2225 = _1677;
        _2227 = _2006;
        _2229 = _2008;
        _2231 = _2010;
    }
    float _4153 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _4164 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _4175 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _4186 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    float _2249 = ((isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0))) * (_2221 + ((isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0))) * _447))) + ((_2227 + ((isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0))) * _1286)) * cbPerFrame._m0[3u].x);
    float _2250 = ((isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0))) * (_2223 + ((isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0))) * _447))) + ((_2229 + ((isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0))) * _1286)) * cbPerFrame._m0[3u].x);
    float _2251 = ((isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0))) * (_2225 + ((isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0))) * _447))) + ((_2231 + ((isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0))) * _1286)) * cbPerFrame._m0[3u].x);
    float _2256 = cbInstanceData._m0[_421 + 6u].w * (isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0)));
    float _2261 = _381 / cbSceneParam._m0[86u].x;
    float _2262 = _382 / cbSceneParam._m0[86u].y;
    vec4 _2276 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2261, _2262, (log2((isnan(cbSceneParam._m0[77u].w) ? _302 : (isnan(_302) ? cbSceneParam._m0[77u].w : min(_302, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2278 = _2276.x;
    float _2279 = _2276.y;
    float _2280 = _2276.z;
    float _2281 = _2276.w;
    float _2374;
    float _2376;
    float _2378;
    float _2380;
    if (_302 > cbSceneParam._m0[78u].w)
    {
        float _2336 = isnan(_302) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _302 : min(cbSceneParam._m0[80u].w, _302));
        float _2337 = _2336 / _302;
        float _2348 = _2337 * _353;
        float _2349 = _354 * _2337;
        float _2350 = (-0.0) - _2349;
        float _2352 = _2337 * _355;
        float _2354 = (cbSceneParam._m0[77u].w * _2350) / _2336;
        float _2355 = _2354 + cbSceneParam._m0[79u].w;
        float _2356 = cbSceneParam._m0[79u].w - _2349;
        float _2362 = sqrt(((_2348 * _2348) + (_2349 * _2349)) + (_2352 * _2352));
        float _2365 = (1.0 - (cbSceneParam._m0[77u].w / _2336)) * _2362;
        float _2370 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2372 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2549;
        if (abs((_2350 - _2354) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2549 = ((((_2355 > 0.0) ? exp2(_2370 * _2355) : (2.0 - exp2(_2372 * _2355))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2365;
        }
        else
        {
            float _2493 = 1.0 / cbSceneParam._m0[80u].x;
            float _2494 = isnan(_2356) ? _2355 : (isnan(_2355) ? _2356 : max(_2355, _2356));
            float _2495 = isnan(_2356) ? _2355 : (isnan(_2355) ? _2356 : min(_2355, _2356));
            float _2504 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : min(_2494, 0.0));
            float _2505 = isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : min(_2495, 0.0));
            _2549 = ((abs(_2362 / _2350) * cbSceneParam._m0[80u].y) * ((((_2504 - _2505) * 2.0) - ((exp2(_2370 * (isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0)))) - exp2(_2370 * (isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : max(_2495, 0.0))))) * _2493)) - ((exp2(_2372 * _2504) - exp2(_2372 * _2505)) * _2493))) + (_2365 * cbSceneParam._m0[80u].z);
        }
        vec4 _2551 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2261, _2262, 1.0), 0.0);
        float _2560 = exp2((_2549 * (-1.44269502162933349609375)) * (1.0 - _2551.w));
        float _2561 = log2(_2560);
        float _2577 = log2(_2281);
        _2374 = (exp2(_2577 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2561 * cbSceneParam._m0[78u].x)) * _2551.x) / cbSceneParam._m0[78u].x)) + _2278;
        _2376 = (exp2(_2577 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2561 * cbSceneParam._m0[78u].y)) * _2551.y) / cbSceneParam._m0[78u].y)) + _2279;
        _2378 = (exp2(_2577 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2561 * cbSceneParam._m0[78u].z)) * _2551.z) / cbSceneParam._m0[78u].z)) + _2280;
        _2380 = _2560 * _2281;
    }
    else
    {
        _2374 = _2278;
        _2376 = _2279;
        _2378 = _2280;
        _2380 = _2281;
    }
    bool _2587;
    vec4 _2390;
    vec4 _2412;
    float _2414;
    float _2418;
    float _2419;
    float _2420;
    float _2421;
    bool _2431;
    for (;;)
    {
        _2390 = cbMatDynParam._m0[0u];
        float _2392 = roundEven(_2390.y);
        bool _2393 = _2392 == 3.0;
        float _2394 = log2(_2380);
        float _2401 = exp2(_2394 * cbSceneParam._m0[78u].x) * _2249;
        float _2402 = exp2(_2394 * cbSceneParam._m0[78u].y) * _2250;
        float _2403 = exp2(_2394 * cbSceneParam._m0[78u].z) * _2251;
        float _2410 = _369 + (-0.5);
        _2412 = cbMtdParam._m0[1u];
        _2414 = _2412.y * _2410;
        float _2417 = (_2392 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2418 = _2417 * (_2393 ? _2401 : (_2401 + (cbSceneParam._m0[72u].w * _2374)));
        _2419 = _2417 * (_2393 ? _2402 : (_2402 + (cbSceneParam._m0[72u].w * _2376)));
        _2420 = _2417 * (_2393 ? _2403 : (_2403 + (cbSceneParam._m0[72u].w * _2378)));
        _2421 = _2410 * 0.999000012874603271484375;
        _2431 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2431)
        {
            if ((cbInstanceData._m0[_421 + 7u].x + _2421) < 0.5)
            {
                _2587 = true;
                break;
            }
        }
        uint _2528 = _423 + uint(_2390.w);
        if ((cbInstanceData._m0[_2528].w < 1.0) && ((cbInstanceData._m0[_2528].w + _2421) < 0.5))
        {
            _2587 = true;
            break;
        }
        if ((_2414 + cbMtdParam._m0[10u].w) < _2412.x)
        {
            _2587 = true;
            break;
        }
        _2587 = false;
        break;
    }
    float _2792;
    if (_2587)
    {
        discard_state = true;
        _2792 = 0.0;
    }
    else
    {
        _2792 = _2256;
    }
    SV_Target.x = _2418;
    SV_Target.y = _2419;
    SV_Target.z = _2420;
    SV_Target.w = _2792;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2256;
    discard_exit();
}


