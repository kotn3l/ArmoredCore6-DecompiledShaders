#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_AMSN_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_AMSN_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _877;
float _3292;
float _3293;
float _3294;
float _3295;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = _198 * NORMAL.x;
    float _200 = _198 * NORMAL.y;
    float _201 = _198 * NORMAL.z;
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _213;
    float _214;
    float _215;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _213 = (-0.0) - _199;
        _214 = (-0.0) - _200;
        _215 = (-0.0) - _201;
    }
    else
    {
        _213 = _199;
        _214 = _200;
        _215 = _201;
    }
    vec4 _235 = texture(sampler2D(P_AMSN_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _241 = _235.x * cbMtdParam._m0[9u].x;
    float _242 = _235.y * cbMtdParam._m0[9u].y;
    float _243 = _235.z * cbMtdParam._m0[9u].z;
    vec4 _259 = texture(sampler2D(P_AMSN_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _263 = _259.z;
    float _267 = (_259.x * 2.0) + (-1.0);
    float _269 = (_259.y * 2.0) + (-1.0);
    float _270 = dot(vec2(_267, _269), vec2(_267, _269));
    float _3304 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _276 = sqrt(1.0 - (isnan(1.0) ? _3304 : (isnan(_3304) ? 1.0 : min(_3304, 1.0))));
    float _279 = fma(_276, _213, fma(_269, _205 * TANGENT.x, (_191 * _184) * _267));
    float _282 = fma(_276, _214, fma(_269, _205 * TANGENT.y, (_191 * _185) * _267));
    float _285 = fma(_276, _215, fma(_269, _205 * TANGENT.z, (_191 * _186) * _267));
    float _289 = inversesqrt(dot(vec3(_279, _282, _285), vec3(_279, _282, _285)));
    float _290 = _289 * _279;
    float _291 = _289 * _282;
    float _292 = _289 * _285;
    float _3315 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    float _293 = isnan(1.0) ? _3315 : (isnan(_3315) ? 1.0 : min(_3315, 1.0));
    float _3326 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _3337 = isnan(0.0) ? _242 : (isnan(_242) ? 0.0 : max(_242, 0.0));
    float _3348 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _3359 = isnan(0.0) ? cbMtdParam._m0[10u].x : (isnan(cbMtdParam._m0[10u].x) ? 0.0 : max(cbMtdParam._m0[10u].x, 0.0));
    float _297 = isnan(1.0) ? _3359 : (isnan(_3359) ? 1.0 : min(_3359, 1.0));
    float _313 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _354 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _364 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _354);
    float _365 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _354);
    float _366 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _354);
    float _370 = inversesqrt(dot(vec3(_364, _365, _366), vec3(_364, _365, _366)));
    float _371 = _364 * _370;
    float _372 = _365 * _370;
    float _373 = _366 * _370;
    vec4 _378 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _380 = _378.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _556 = sqrt(((_364 * _364) + (_365 * _365)) + (_366 * _366));
        float _562 = (cbMatDynParam._m0[5u].x * _556) + cbMatDynParam._m0[5u].y;
        float _3370 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
        float _563 = isnan(1.0) ? _3370 : (isnan(_3370) ? 1.0 : min(_3370, 1.0));
        float _567 = (cbMatDynParam._m0[5u].z * _556) + cbMatDynParam._m0[5u].w;
        float _3381 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3381 : (isnan(_3381) ? 1.0 : min(_3381, 1.0))) - _563)) + _563) < ((_380 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _392 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _393 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _413 = fma(_292, cbSceneParam._m0[5u].z, fma(_291, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _290));
    float _416 = fma(_292, cbSceneParam._m0[6u].z, fma(_291, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _290));
    float _419 = fma(_292, cbSceneParam._m0[7u].z, fma(_291, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _290));
    uint _432 = uint(roundEven(NORMAL.w)) * 13u;
    uint _434 = _432 + 9u;
    uint _435 = _434 + uint(cbMatDynParam._m0[0u].w);
    float _441 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3326 : (isnan(_3326) ? 1.0 : min(_3326, 1.0)))) * cbInstanceData._m0[_435].x;
    float _442 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3337 : (isnan(_3337) ? 1.0 : min(_3337, 1.0)))) * cbInstanceData._m0[_435].y;
    float _443 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3348 : (isnan(_3348) ? 1.0 : min(_3348, 1.0)))) * cbInstanceData._m0[_435].z;
    float _3392 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _444 = isnan(1.0) ? _3392 : (isnan(_3392) ? 1.0 : min(_3392, 1.0));
    float _3403 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _445 = isnan(1.0) ? _3403 : (isnan(_3403) ? 1.0 : min(_3403, 1.0));
    float _3414 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _446 = isnan(1.0) ? _3414 : (isnan(_3414) ? 1.0 : min(_3414, 1.0));
    float _447 = 1.0 - _297;
    float _448 = _444 * _447;
    float _449 = _445 * _447;
    float _450 = _446 * _447;
    float _455 = (_444 + (-0.039999999105930328369140625)) * _297;
    float _456 = (_445 + (-0.039999999105930328369140625)) * _297;
    float _457 = (_446 + (-0.039999999105930328369140625)) * _297;
    float _458 = _455 + 0.039999999105930328369140625;
    float _460 = _456 + 0.039999999105930328369140625;
    float _461 = _457 + 0.039999999105930328369140625;
    vec4 _470 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _392, cbSceneParam._m0[86u].y * _393));
    float _473 = _470.x * TEXCOORD.z;
    float _474 = dot(vec3(_290, _291, _292), vec3(_371, _372, _373));
    float _477 = _474 * 2.0;
    float _481 = (_477 * _290) - _371;
    float _482 = (_477 * _291) - _372;
    float _483 = (_477 * _292) - _373;
    float _487 = abs(dot(vec3(_371, _372, _373), vec3(_290, _291, _292)));
    float _3425 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _489 = sqrt(_293);
    float _502 = exp2((_489 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3425 : (isnan(_3425) ? 1.0 : min(_3425, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_489 * 3.0));
    float _508 = (1.0 - _502) * ((_489 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _509 = _502 * _489;
    float _537 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _541 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _545 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _876;
    float _878;
    float _879;
    float _880;
    float _881;
    float _882;
    float _883;
    float _884;
    float _885;
    float _886;
    float _887;
    float _888;
    float _889;
    float _890;
    float _891;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _601 = fma(_545, cbModelParam._m0[26u].z, fma(_541, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _537));
        float _605 = fma(_545, cbModelParam._m0[27u].z, fma(_541, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _537));
        float _609 = fma(_545, cbModelParam._m0[28u].z, fma(_541, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _537));
        float _634 = _537 + _290;
        float _635 = _541 + _291;
        float _636 = _545 + _292;
        float _646 = fma(_636, cbModelParam._m0[26u].z, fma(_635, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _634)) - _601;
        float _647 = fma(_636, cbModelParam._m0[27u].z, fma(_635, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _634)) - _605;
        float _648 = fma(_636, cbModelParam._m0[28u].z, fma(_635, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _634)) - _609;
        float _652 = inversesqrt(dot(vec3(_646, _647, _648), vec3(_646, _647, _648)));
        float _665 = ((_652 * _646) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_601 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _666 = ((_652 * _647) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_605 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _667 = ((_652 * _648) / cbModelParam._m0[34u].z) + ((((((_609 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _670 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_665, _666, _667), 0.0);
        vec4 _677 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_665, _666, _667), 0.0);
        vec4 _684 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_665, _666, _667), 0.0);
        vec4 _691 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_665, _666, _667), 0.0);
        float _704 = exp2((_670.w + (-0.5)) * 20.0) * 2.0;
        float _705 = _704 * (_670.x + (-0.5));
        float _706 = _704 * (_670.y + (-0.5));
        float _707 = _704 * (_670.z + (-0.5));
        float _714 = exp2((_677.w + (-0.5)) * 20.0) * 2.0;
        float _715 = _714 * (_677.x + (-0.5));
        float _716 = _714 * (_677.y + (-0.5));
        float _717 = _714 * (_677.z + (-0.5));
        float _724 = exp2((_684.w + (-0.5)) * 20.0) * 2.0;
        float _725 = _724 * (_684.x + (-0.5));
        float _726 = _724 * (_684.y + (-0.5));
        float _727 = _724 * (_684.z + (-0.5));
        float _734 = exp2((_691.w + (-0.5)) * 20.0) * 2.0;
        float _735 = _734 * (_691.x + (-0.5));
        float _736 = _734 * (_691.y + (-0.5));
        float _737 = _734 * (_691.z + (-0.5));
        float _738 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
        float _739 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
        float _740 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
        float _741 = _705 * 0.5;
        float _742 = _715 * 0.5;
        float _743 = _725 * 0.5;
        float _744 = dot(vec3(_741, _742, _743), vec3(_741, _742, _743));
        float _749 = (_744 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_744);
        float _758 = (dot(vec3(_290, _291, _292), vec3(_749 * _741, _749 * _742, _749 * _743)) + 1.0) * 0.5;
        float _3451 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
        float _768 = sqrt(((_742 * _742) + (_741 * _741)) + (_743 * _743)) / (_738 + 9.9999997473787516355514526367188e-06);
        float _3462 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
        float _769 = isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0));
        float _770 = _769 * 2.0;
        float _774 = (1.0 - _769) / (_769 + 1.0);
        float _3473 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
        float _775 = isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0));
        float _784 = ((((1.0 - _775) * (_770 + 2.0)) * exp2(log2(isnan(1.0) ? _3451 : (isnan(_3451) ? 1.0 : min(_3451, 1.0))) * (_770 + 1.0))) + _775) * _738;
        float _785 = _706 * 0.5;
        float _786 = _716 * 0.5;
        float _787 = _726 * 0.5;
        float _788 = dot(vec3(_785, _786, _787), vec3(_785, _786, _787));
        float _793 = (_788 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_788);
        float _801 = (dot(vec3(_290, _291, _292), vec3(_793 * _785, _793 * _786, _793 * _787)) + 1.0) * 0.5;
        float _3484 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
        float _810 = sqrt(((_786 * _786) + (_785 * _785)) + (_787 * _787)) / (_739 + 9.9999997473787516355514526367188e-06);
        float _3495 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
        float _811 = isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0));
        float _812 = _811 * 2.0;
        float _816 = (1.0 - _811) / (_811 + 1.0);
        float _3506 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
        float _817 = isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0));
        float _826 = ((((1.0 - _817) * (_812 + 2.0)) * exp2(log2(isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0))) * (_812 + 1.0))) + _817) * _739;
        float _827 = _707 * 0.5;
        float _828 = _717 * 0.5;
        float _829 = _727 * 0.5;
        float _830 = dot(vec3(_827, _828, _829), vec3(_827, _828, _829));
        float _835 = (_830 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_830);
        float _843 = (dot(vec3(_290, _291, _292), vec3(_835 * _827, _835 * _828, _835 * _829)) + 1.0) * 0.5;
        float _3517 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
        float _852 = sqrt(((_828 * _828) + (_827 * _827)) + (_829 * _829)) / (_740 + 9.9999997473787516355514526367188e-06);
        float _3528 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
        float _853 = isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0));
        float _854 = _853 * 2.0;
        float _858 = (1.0 - _853) / (_853 + 1.0);
        float _3539 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
        float _859 = isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0));
        float _868 = ((((1.0 - _859) * (_854 + 2.0)) * exp2(log2(isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0))) * (_854 + 1.0))) + _859) * _740;
        _876 = _707;
        _878 = _706;
        _879 = _705;
        _880 = _717;
        _881 = _716;
        _882 = _715;
        _883 = _727;
        _884 = _726;
        _885 = _725;
        _886 = _740;
        _887 = _739;
        _888 = _738;
        _889 = cbModelParam._m0[36u].z * (isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0)));
        _890 = cbModelParam._m0[36u].z * (isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0)));
        _891 = cbModelParam._m0[36u].z * (isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0)));
    }
    else
    {
        _876 = _877;
        _878 = _877;
        _879 = _877;
        _880 = _877;
        _881 = _877;
        _882 = _877;
        _883 = _877;
        _884 = _877;
        _885 = _877;
        _886 = _877;
        _887 = _877;
        _888 = _877;
        _889 = 0.0;
        _890 = 0.0;
        _891 = 0.0;
    }
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _920 = fma(_545, cbModelParam._m0[30u].z, fma(_541, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _537));
        float _924 = fma(_545, cbModelParam._m0[31u].z, fma(_541, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _537));
        float _928 = fma(_545, cbModelParam._m0[32u].z, fma(_541, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _537));
        float _951 = _537 + _290;
        float _952 = _541 + _291;
        float _953 = _545 + _292;
        float _963 = fma(_953, cbModelParam._m0[30u].z, fma(_952, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _951)) - _920;
        float _964 = fma(_953, cbModelParam._m0[31u].z, fma(_952, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _951)) - _924;
        float _965 = fma(_953, cbModelParam._m0[32u].z, fma(_952, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _951)) - _928;
        float _969 = inversesqrt(dot(vec3(_963, _964, _965), vec3(_963, _964, _965)));
        float _982 = ((_969 * _963) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_920 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _983 = ((_969 * _964) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_924 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _984 = ((_969 * _965) / cbModelParam._m0[35u].z) + ((((((_928 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _986 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_982, _983, _984), 0.0);
        vec4 _993 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_982, _983, _984), 0.0);
        vec4 _1000 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_982, _983, _984), 0.0);
        vec4 _1007 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_982, _983, _984), 0.0);
        float _1019 = exp2((_986.w + (-0.5)) * 20.0) * 2.0;
        float _1020 = _1019 * (_986.x + (-0.5));
        float _1021 = _1019 * (_986.y + (-0.5));
        float _1022 = _1019 * (_986.z + (-0.5));
        float _1029 = exp2((_993.w + (-0.5)) * 20.0) * 2.0;
        float _1030 = _1029 * (_993.x + (-0.5));
        float _1031 = _1029 * (_993.y + (-0.5));
        float _1032 = _1029 * (_993.z + (-0.5));
        float _1039 = exp2((_1000.w + (-0.5)) * 20.0) * 2.0;
        float _1040 = _1039 * (_1000.x + (-0.5));
        float _1041 = _1039 * (_1000.y + (-0.5));
        float _1042 = _1039 * (_1000.z + (-0.5));
        float _1049 = exp2((_1007.w + (-0.5)) * 20.0) * 2.0;
        float _1050 = _1049 * (_1007.x + (-0.5));
        float _1051 = _1049 * (_1007.y + (-0.5));
        float _1052 = _1049 * (_1007.z + (-0.5));
        float _1053 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1054 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1055 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1056 = _1020 * 0.5;
        float _1057 = _1030 * 0.5;
        float _1058 = _1040 * 0.5;
        float _1059 = dot(vec3(_1056, _1057, _1058), vec3(_1056, _1057, _1058));
        float _1064 = (_1059 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1059);
        float _1072 = (dot(vec3(_290, _291, _292), vec3(_1064 * _1056, _1064 * _1057, _1064 * _1058)) + 1.0) * 0.5;
        float _3580 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1081 = sqrt(((_1057 * _1057) + (_1056 * _1056)) + (_1058 * _1058)) / (_1053 + 9.9999997473787516355514526367188e-06);
        float _3591 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1082 = isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0));
        float _1083 = _1082 * 2.0;
        float _1087 = (1.0 - _1082) / (_1082 + 1.0);
        float _3602 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1088 = isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0));
        float _1097 = ((((1.0 - _1088) * (_1083 + 2.0)) * exp2(log2(isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0))) * (_1083 + 1.0))) + _1088) * _1053;
        float _1098 = _1021 * 0.5;
        float _1099 = _1031 * 0.5;
        float _1100 = _1041 * 0.5;
        float _1101 = dot(vec3(_1098, _1099, _1100), vec3(_1098, _1099, _1100));
        float _1106 = (_1101 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1101);
        float _1114 = (dot(vec3(_290, _291, _292), vec3(_1106 * _1098, _1106 * _1099, _1106 * _1100)) + 1.0) * 0.5;
        float _3613 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1123 = sqrt(((_1099 * _1099) + (_1098 * _1098)) + (_1100 * _1100)) / (_1054 + 9.9999997473787516355514526367188e-06);
        float _3624 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1124 = isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0));
        float _1125 = _1124 * 2.0;
        float _1129 = (1.0 - _1124) / (_1124 + 1.0);
        float _3635 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1130 = isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0));
        float _1139 = ((((1.0 - _1130) * (_1125 + 2.0)) * exp2(log2(isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0))) * (_1125 + 1.0))) + _1130) * _1054;
        float _1140 = _1022 * 0.5;
        float _1141 = _1032 * 0.5;
        float _1142 = _1042 * 0.5;
        float _1143 = dot(vec3(_1140, _1141, _1142), vec3(_1140, _1141, _1142));
        float _1148 = (_1143 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1143);
        float _1156 = (dot(vec3(_290, _291, _292), vec3(_1148 * _1140, _1148 * _1141, _1148 * _1142)) + 1.0) * 0.5;
        float _3646 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1165 = sqrt(((_1141 * _1141) + (_1140 * _1140)) + (_1142 * _1142)) / (_1055 + 9.9999997473787516355514526367188e-06);
        float _3657 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1166 = isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0));
        float _1167 = _1166 * 2.0;
        float _1171 = (1.0 - _1166) / (_1166 + 1.0);
        float _3668 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1172 = isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0));
        float _1181 = ((((1.0 - _1172) * (_1167 + 2.0)) * exp2(log2(isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0))) * (_1167 + 1.0))) + _1172) * _1055;
        _1189 = _1022;
        _1190 = _1021;
        _1191 = _1020;
        _1192 = _1032;
        _1193 = _1031;
        _1194 = _1030;
        _1195 = _1042;
        _1196 = _1041;
        _1197 = _1040;
        _1198 = _1055;
        _1199 = _1054;
        _1200 = _1053;
        _1201 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0)));
        _1202 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0)));
        _1203 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0)));
    }
    else
    {
        _1189 = _877;
        _1190 = _877;
        _1191 = _877;
        _1192 = _877;
        _1193 = _877;
        _1194 = _877;
        _1195 = _877;
        _1196 = _877;
        _1197 = _877;
        _1198 = _877;
        _1199 = _877;
        _1200 = _877;
        _1201 = 0.0;
        _1202 = 0.0;
        _1203 = 0.0;
    }
    float _1213 = (cbModelParam._m0[1u].x * (_1201 - _889)) + _889;
    float _1214 = (cbModelParam._m0[1u].x * (_1202 - _890)) + _890;
    float _1215 = (cbModelParam._m0[1u].x * (_1203 - _891)) + _891;
    float _1236 = fma(_1215, cbSceneParam._m0[89u].z, fma(_1214, cbSceneParam._m0[89u].y, _1213 * cbSceneParam._m0[89u].x));
    float _1239 = fma(_1215, cbSceneParam._m0[90u].z, fma(_1214, cbSceneParam._m0[90u].y, _1213 * cbSceneParam._m0[90u].x));
    float _1242 = fma(_1215, cbSceneParam._m0[91u].z, fma(_1214, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1213));
    float _1257 = _481 * 0.5;
    float _1258 = _482 * 0.5;
    float _1259 = _483 * 0.5;
    float _1260 = dot(vec4(_1257, _1258, _1259, 1.0), vec4(_1191, _1194, _1197, _1200));
    float _1263 = dot(vec4(_1257, _1258, _1259, 1.0), vec4(_1190, _1193, _1196, _1199));
    float _1266 = dot(vec4(_1257, _1258, _1259, 1.0), vec4(_1189, _1192, _1195, _1198));
    float _1300;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1273 = dot(vec4(_1257, _1258, _1259, 1.0), vec4(_876, _880, _883, _886));
        float _1277 = dot(vec4(_1257, _1258, _1259, 1.0), vec4(_878, _881, _884, _887));
        float _1281 = dot(vec4(_1257, _1258, _1259, 1.0), vec4(_879, _882, _885, _888));
        float _1288 = dot(vec4(cbModelParam._m0[39u]), vec4(_1257, _1258, _1259, 1.0));
        _1300 = dot(vec3(isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0)), isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0)), isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1288) ? 0.0 : (isnan(0.0) ? _1288 : max(0.0, _1288))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1300 = 1.0;
    }
    float _1311;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1302 = dot(vec4(cbModelParam._m0[40u]), vec4(_1257, _1258, _1259, 1.0));
        _1311 = dot(vec3(isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0)), isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0)), isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1302) ? 0.0 : (isnan(0.0) ? _1302 : max(0.0, _1302))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1311 = 1.0;
    }
    float _1315 = (_1311 * cbModelParam._m0[1u].x) + (_1300 * (1.0 - cbModelParam._m0[1u].x));
    float _1325 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _293);
    float _1326 = isnan(_1325) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1325 : min(cbModelParam._m0[25u].z, _1325));
    float _1408;
    float _1410;
    float _1412;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1375 = fma(_545, cbModelParam._m0[13u].z, fma(_541, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _537)) + cbModelParam._m0[13u].w;
        float _1379 = fma(_545, cbModelParam._m0[14u].z, fma(_541, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _537)) + cbModelParam._m0[14u].w;
        float _1383 = fma(_545, cbModelParam._m0[15u].z, fma(_541, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _537)) + cbModelParam._m0[15u].w;
        float _1386 = fma(_483, cbModelParam._m0[13u].z, fma(_482, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _481));
        float _1389 = fma(_483, cbModelParam._m0[14u].z, fma(_482, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _481));
        float _1392 = fma(_483, cbModelParam._m0[15u].z, fma(_482, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _481));
        float _1420;
        if (_1386 > 0.0)
        {
            _1420 = abs((1.0 - _1375) / _1386);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1386 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1375 + 1.0) / _1386);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1420 = frontier_phi_19_17_ladder;
        }
        float _1649;
        if (_1389 > 0.0)
        {
            _1649 = abs((1.0 - _1379) / _1389);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1389 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1379 + 1.0) / _1389);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1649 = frontier_phi_28_24_ladder;
        }
        float _1906;
        if (_1392 > 0.0)
        {
            _1906 = abs((1.0 - _1383) / _1392);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1392 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1383 + 1.0) / _1392);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1906 = frontier_phi_40_35_ladder;
        }
        float _1908 = isnan(_1649) ? _1420 : (isnan(_1420) ? _1649 : min(_1420, _1649));
        float _1909 = isnan(_1906) ? _1908 : (isnan(_1908) ? _1906 : min(_1908, _1906));
        float _1913 = (_1909 * _1386) + _1375;
        float _1914 = (_1909 * _1389) + _1379;
        float _1915 = (_1909 * _1392) + _1383;
        float _1916 = _1909 * 9.9999997473787516355514526367188e-05;
        float _1918 = (-1.0) - _1916;
        float _1920 = _1916 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1915 > _1920) || ((_1915 < _1918) || ((_1914 > _1920) || ((_1914 < _1918) || ((_1913 < _1918) || (_1913 > _1920))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2043 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1915, cbModelParam._m0[9u].z, fma(_1914, cbModelParam._m0[9u].y, _1913 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1915, cbModelParam._m0[10u].z, fma(_1914, cbModelParam._m0[10u].y, _1913 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1915, cbModelParam._m0[11u].z, fma(_1914, cbModelParam._m0[11u].y, _1913 * cbModelParam._m0[11u].x))), _1326);
            frontier_phi_18_40_ladder = _2043.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2043.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2043.x * cbModelParam._m0[1u].y;
        }
        _1408 = frontier_phi_18_40_ladder_2;
        _1410 = frontier_phi_18_40_ladder_1;
        _1412 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1396 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_481, _482, _483), _1326);
        _1408 = _1396.x * cbModelParam._m0[1u].y;
        _1410 = _1396.y * cbModelParam._m0[1u].y;
        _1412 = _1396.z * cbModelParam._m0[1u].y;
    }
    float _1416 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _293);
    float _1417 = isnan(_1416) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1416 : min(cbModelParam._m0[25u].w, _1416));
    float _1510;
    float _1512;
    float _1514;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1474 = fma(_545, cbModelParam._m0[21u].z, fma(_541, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _537)) + cbModelParam._m0[21u].w;
        float _1478 = fma(_545, cbModelParam._m0[22u].z, fma(_541, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _537)) + cbModelParam._m0[22u].w;
        float _1482 = fma(_545, cbModelParam._m0[23u].z, fma(_541, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _537)) + cbModelParam._m0[23u].w;
        float _1485 = fma(_483, cbModelParam._m0[21u].z, fma(_482, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _481));
        float _1488 = fma(_483, cbModelParam._m0[22u].z, fma(_482, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _481));
        float _1491 = fma(_483, cbModelParam._m0[23u].z, fma(_482, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _481));
        float _1654;
        if (_1485 > 0.0)
        {
            _1654 = abs((1.0 - _1474) / _1485);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1485 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1474 + 1.0) / _1485);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1654 = frontier_phi_30_26_ladder;
        }
        float _1933;
        if (_1488 > 0.0)
        {
            _1933 = abs((1.0 - _1478) / _1488);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1488 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1478 + 1.0) / _1488);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1933 = frontier_phi_42_37_ladder;
        }
        float _2146;
        if (_1491 > 0.0)
        {
            _2146 = abs((1.0 - _1482) / _1491);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1491 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1482 + 1.0) / _1491);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2146 = frontier_phi_51_48_ladder;
        }
        float _2148 = isnan(_1933) ? _1654 : (isnan(_1654) ? _1933 : min(_1654, _1933));
        float _2149 = isnan(_2146) ? _2148 : (isnan(_2148) ? _2146 : min(_2148, _2146));
        float _2153 = (_2149 * _1485) + _1474;
        float _2154 = (_2149 * _1488) + _1478;
        float _2155 = (_2149 * _1491) + _1482;
        float _2156 = _2149 * 9.9999997473787516355514526367188e-05;
        float _2157 = (-1.0) - _2156;
        float _2159 = _2156 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2155 > _2159) || ((_2155 < _2157) || ((_2154 > _2159) || ((_2154 < _2157) || ((_2153 < _2157) || (_2153 > _2159))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2353 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2155, cbModelParam._m0[17u].z, fma(_2154, cbModelParam._m0[17u].y, _2153 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2155, cbModelParam._m0[18u].z, fma(_2154, cbModelParam._m0[18u].y, _2153 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2155, cbModelParam._m0[19u].z, fma(_2154, cbModelParam._m0[19u].y, _2153 * cbModelParam._m0[19u].x))), _1417);
            frontier_phi_27_51_ladder = _2353.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2353.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2353.x * cbModelParam._m0[1u].z;
        }
        _1510 = frontier_phi_27_51_ladder_2;
        _1512 = frontier_phi_27_51_ladder_1;
        _1514 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1494 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_481, _482, _483), _1417);
        _1510 = _1494.x * cbModelParam._m0[1u].z;
        _1512 = _1494.y * cbModelParam._m0[1u].z;
        _1514 = _1494.z * cbModelParam._m0[1u].z;
    }
    float _1527 = (((_508 * _458) + _509) * _473) * ((cbModelParam._m0[1u].w * (_1510 - _1408)) + _1408);
    float _1529 = (((_508 * _460) + _509) * _473) * ((cbModelParam._m0[1u].w * (_1512 - _1410)) + _1410);
    float _1531 = (((_508 * _461) + _509) * _473) * ((cbModelParam._m0[1u].w * (_1514 - _1412)) + _1412);
    float _1534 = fma(_1531, cbSceneParam._m0[89u].z, fma(_1529, cbSceneParam._m0[89u].y, _1527 * cbSceneParam._m0[89u].x));
    float _1537 = fma(_1531, cbSceneParam._m0[90u].z, fma(_1529, cbSceneParam._m0[90u].y, _1527 * cbSceneParam._m0[90u].x));
    float _1540 = fma(_1531, cbSceneParam._m0[91u].z, fma(_1529, cbSceneParam._m0[91u].y, _1527 * cbSceneParam._m0[91u].x));
    vec4 _1548 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_392, _393));
    float _1550 = _1548.w;
    float _1562 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1550);
    float _1563 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1550);
    float _1564 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1550);
    uvec4 _1568 = floatBitsToUint(cbInstanceData._m0[_432 + 5u]);
    uint _1570 = _1568.x * 14u;
    uint _1571 = _1570 + 13u;
    float _1578 = _473 + (-1.0);
    float _1583 = (cbLight._m0[_1571].x * _1578) + 1.0;
    float _1584 = (cbLight._m0[_1571].y * _1578) + 1.0;
    float _1585 = (cbLight._m0[_1571].z * _1578) + 1.0;
    float _1586 = (cbLight._m0[_1571].w * _1578) + 1.0;
    uint _1587 = _1570 + 5u;
    float _1593 = isnan(1.0) ? _1584 : (isnan(_1584) ? 1.0 : min(_1584, 1.0));
    uint _1597 = _1570 + 4u;
    float _1607 = isnan(1.0) ? _1583 : (isnan(_1583) ? 1.0 : min(_1583, 1.0));
    uint _1611 = _1570 | 1u;
    float _1622 = dot(vec3(cbLight._m0[_1570].xyz), vec3(_290, _291, _292));
    float _1625 = dot(vec3(cbLight._m0[_1611].xyz), vec3(_290, _291, _292));
    float _3804 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
    float _3815 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
    float _1630 = (isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0))) * 0.3183098733425140380859375;
    float _1632 = (isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0))) * 0.3183098733425140380859375;
    float _1639 = ((cbLight._m0[_1587].x * _1593) * _1632) + (((cbLight._m0[_1597].x * _1562) * _1607) * _1630);
    float _1640 = ((_1593 * cbLight._m0[_1587].y) * _1632) + (((cbLight._m0[_1597].y * _1563) * _1607) * _1630);
    float _1641 = ((_1593 * cbLight._m0[_1587].z) * _1632) + (((cbLight._m0[_1597].z * _1564) * _1607) * _1630);
    uvec4 _1646 = floatBitsToUint(cbLight._m0[_1570 + 12u]);
    bool _1648 = _1646.x == 0u;
    float _1659;
    float _1661;
    float _1663;
    if (_1648)
    {
        _1659 = _1639;
        _1661 = _1640;
        _1663 = _1641;
    }
    else
    {
        uint _1667 = _1570 + 6u;
        float _1683 = (dot(vec3(cbLight._m0[_1570 + 2u].xyz), vec3(_290, _291, _292)) * 0.5) + 0.5;
        float _1684 = _1683 * _1683;
        float _3826 = isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0));
        float _1685 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
        float _1686 = isnan(1.0) ? _1585 : (isnan(_1585) ? 1.0 : min(_1585, 1.0));
        _1659 = (((cbLight._m0[_1667].x * 0.3183098733425140380859375) * _1685) * _1686) + _1639;
        _1661 = (((cbLight._m0[_1667].y * 0.3183098733425140380859375) * _1685) * _1686) + _1640;
        _1663 = (((cbLight._m0[_1667].z * 0.3183098733425140380859375) * _1685) * _1686) + _1641;
    }
    bool _1666 = _1646.y == 0u;
    float _1704;
    float _1706;
    float _1708;
    if (_1666)
    {
        _1704 = _1659;
        _1706 = _1661;
        _1708 = _1663;
    }
    else
    {
        uint _1877 = _1570 + 7u;
        float _1893 = (dot(vec3(cbLight._m0[_1570 + 3u].xyz), vec3(_290, _291, _292)) * 0.5) + 0.5;
        float _1894 = _1893 * _1893;
        float _3842 = isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0));
        float _1895 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
        float _1896 = isnan(1.0) ? _1586 : (isnan(_1586) ? 1.0 : min(_1586, 1.0));
        _1704 = (((cbLight._m0[_1877].x * 0.3183098733425140380859375) * _1895) * _1896) + _1659;
        _1706 = (((cbLight._m0[_1877].y * 0.3183098733425140380859375) * _1895) * _1896) + _1661;
        _1708 = (((cbLight._m0[_1877].z * 0.3183098733425140380859375) * _1895) * _1896) + _1663;
    }
    uint _1711 = _1570 + 8u;
    float _1724 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1570].w)) * _293) * 0.949999988079071044921875);
    float _1725 = _1724 * _1724;
    float _1726 = cbLight._m0[_1570].x + _371;
    float _1727 = cbLight._m0[_1570].y + _372;
    float _1728 = cbLight._m0[_1570].z + _373;
    float _1732 = inversesqrt(dot(vec3(_1726, _1727, _1728), vec3(_1726, _1727, _1728)));
    float _1733 = _1732 * _1726;
    float _1734 = _1732 * _1727;
    float _1735 = _1732 * _1728;
    float _1736 = dot(vec3(_290, _291, _292), vec3(cbLight._m0[_1570].xyz));
    float _3858 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
    float _1739 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
    float _3869 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _1740 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
    float _1741 = dot(vec3(_290, _291, _292), vec3(_1733, _1734, _1735));
    float _3880 = isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0));
    float _1744 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
    float _1745 = dot(vec3(cbLight._m0[_1570].xyz), vec3(_1733, _1734, _1735));
    float _3891 = isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0));
    float _1749 = _1725 * _1725;
    float _1753 = ((_1744 * _1744) * (_1749 + (-1.0))) + 1.0;
    float _1761 = exp2(log2(1.0 - (isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0)))) * 5.0);
    float _1762 = 0.959999978542327880859375 - _455;
    float _1764 = 0.959999978542327880859375 - _456;
    float _1765 = 0.959999978542327880859375 - _457;
    float _1772 = 1.0 - _1725;
    float _1783 = (0.5 / (((_1740 * ((_1739 * _1772) + _1725)) + 9.9999999392252902907785028219223e-09) + (((_1740 * _1772) + _1725) * _1739))) * _1739;
    float _3902 = isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0));
    float _1785 = (isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0))) * (_1749 / ((_1753 * _1753) * 3.141590118408203125));
    uint _1799 = _1570 + 9u;
    float _1810 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1611].w)) * _293) * 0.949999988079071044921875);
    float _1811 = _1810 * _1810;
    float _1812 = cbLight._m0[_1611].x + _371;
    float _1813 = cbLight._m0[_1611].y + _372;
    float _1814 = cbLight._m0[_1611].z + _373;
    float _1818 = inversesqrt(dot(vec3(_1812, _1813, _1814), vec3(_1812, _1813, _1814)));
    float _1819 = _1818 * _1812;
    float _1820 = _1818 * _1813;
    float _1821 = _1818 * _1814;
    float _1822 = dot(vec3(_290, _291, _292), vec3(cbLight._m0[_1611].xyz));
    float _3913 = isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0));
    float _1825 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
    float _1826 = dot(vec3(_290, _291, _292), vec3(_1819, _1820, _1821));
    float _3924 = isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0));
    float _1829 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
    float _1830 = dot(vec3(cbLight._m0[_1611].xyz), vec3(_1819, _1820, _1821));
    float _3935 = isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0));
    float _1834 = _1811 * _1811;
    float _1838 = ((_1829 * _1829) * (_1834 + (-1.0))) + 1.0;
    float _1845 = exp2(log2(1.0 - (isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0)))) * 5.0);
    float _1852 = 1.0 - _1811;
    float _1862 = (0.5 / (((_1740 * ((_1825 * _1852) + _1811)) + 9.9999999392252902907785028219223e-09) + (((_1740 * _1852) + _1811) * _1825))) * _1825;
    float _3946 = isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0));
    float _1864 = (isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0))) * (_1834 / ((_1838 * _1838) * 3.141590118408203125));
    float _1874 = (((((_1845 * _1762) + _458) * cbLight._m0[_1799].x) * _1864) * _1593) + ((((cbLight._m0[_1711].x * _1562) * ((_1761 * _1762) + _458)) * _1785) * _1607);
    float _1875 = (((((_1845 * _1764) + _460) * cbLight._m0[_1799].y) * _1864) * _1593) + ((((cbLight._m0[_1711].y * _1563) * ((_1761 * _1764) + _460)) * _1785) * _1607);
    float _1876 = (((((_1845 * _1765) + _461) * cbLight._m0[_1799].z) * _1864) * _1593) + ((((cbLight._m0[_1711].z * _1564) * ((_1761 * _1765) + _461)) * _1785) * _1607);
    float _1938;
    float _1940;
    float _1942;
    if (_1648)
    {
        _1938 = _1874;
        _1940 = _1875;
        _1942 = _1876;
    }
    else
    {
        uint _1944 = _1570 + 2u;
        uint _1948 = _1570 + 10u;
        float _1962 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1944].w)) * _293) * 0.949999988079071044921875);
        float _1963 = _1962 * _1962;
        float _1964 = cbLight._m0[_1944].x + _371;
        float _1965 = cbLight._m0[_1944].y + _372;
        float _1966 = cbLight._m0[_1944].z + _373;
        float _1970 = inversesqrt(dot(vec3(_1964, _1965, _1966), vec3(_1964, _1965, _1966)));
        float _1971 = _1970 * _1964;
        float _1972 = _1970 * _1965;
        float _1973 = _1970 * _1966;
        float _1974 = dot(vec3(_290, _291, _292), vec3(cbLight._m0[_1944].xyz));
        float _3957 = isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0));
        float _1977 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
        float _1978 = dot(vec3(_290, _291, _292), vec3(_1971, _1972, _1973));
        float _3968 = isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0));
        float _1981 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
        float _1982 = dot(vec3(cbLight._m0[_1944].xyz), vec3(_1971, _1972, _1973));
        float _3979 = isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0));
        float _1986 = _1963 * _1963;
        float _1990 = ((_1981 * _1981) * (_1986 + (-1.0))) + 1.0;
        float _1997 = exp2(log2(1.0 - (isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0)))) * 5.0);
        float _2004 = 1.0 - _1963;
        float _2014 = (0.5 / (((_1740 * ((_1977 * _2004) + _1963)) + 9.9999999392252902907785028219223e-09) + (((_1740 * _2004) + _1963) * _1977))) * _1977;
        float _3990 = isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0));
        float _2016 = (isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))) * (_1986 / ((_1990 * _1990) * 3.141590118408203125));
        float _2017 = isnan(1.0) ? _1585 : (isnan(_1585) ? 1.0 : min(_1585, 1.0));
        _1938 = (((((_1997 * _1762) + _458) * cbLight._m0[_1948].x) * _2016) * _2017) + _1874;
        _1940 = (((((_1997 * _1764) + _460) * cbLight._m0[_1948].y) * _2016) * _2017) + _1875;
        _1942 = (((((_1997 * _1765) + _461) * cbLight._m0[_1948].z) * _2016) * _2017) + _1876;
    }
    float _2052;
    float _2054;
    float _2056;
    if (_1666)
    {
        _2052 = _1938;
        _2054 = _1940;
        _2056 = _1942;
    }
    else
    {
        uint _2063 = _1570 + 3u;
        uint _2067 = _1570 + 11u;
        float _2081 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2063].w)) * _293) * 0.949999988079071044921875);
        float _2082 = _2081 * _2081;
        float _2083 = cbLight._m0[_2063].x + _371;
        float _2084 = cbLight._m0[_2063].y + _372;
        float _2085 = cbLight._m0[_2063].z + _373;
        float _2089 = inversesqrt(dot(vec3(_2083, _2084, _2085), vec3(_2083, _2084, _2085)));
        float _2090 = _2089 * _2083;
        float _2091 = _2089 * _2084;
        float _2092 = _2089 * _2085;
        float _2093 = dot(vec3(_290, _291, _292), vec3(cbLight._m0[_2063].xyz));
        float _4006 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
        float _2096 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
        float _2097 = dot(vec3(_290, _291, _292), vec3(_2090, _2091, _2092));
        float _4017 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
        float _2100 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
        float _2101 = dot(vec3(cbLight._m0[_2063].xyz), vec3(_2090, _2091, _2092));
        float _4028 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
        float _2105 = _2082 * _2082;
        float _2109 = ((_2100 * _2100) * (_2105 + (-1.0))) + 1.0;
        float _2116 = exp2(log2(1.0 - (isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0)))) * 5.0);
        float _2123 = 1.0 - _2082;
        float _2133 = (0.5 / (((_1740 * ((_2096 * _2123) + _2082)) + 9.9999999392252902907785028219223e-09) + (((_1740 * _2123) + _2082) * _2096))) * _2096;
        float _4039 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
        float _2135 = (isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0))) * (_2105 / ((_2109 * _2109) * 3.141590118408203125));
        float _2136 = isnan(1.0) ? _1586 : (isnan(_1586) ? 1.0 : min(_1586, 1.0));
        _2052 = (((((_2116 * _1762) + _458) * cbLight._m0[_2067].x) * _2135) * _2136) + _1938;
        _2054 = (((((_2116 * _1764) + _460) * cbLight._m0[_2067].y) * _2135) * _2136) + _1940;
        _2056 = (((((_2116 * _1765) + _461) * cbLight._m0[_2067].z) * _2135) * _2136) + _1942;
    }
    float _2270;
    float _2272;
    float _2274;
    float _2276;
    float _2278;
    float _2280;
    if (_1568.y == 0u)
    {
        float _2211 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2212 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2211;
        float _2213 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2211;
        float _2214 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2211;
        uvec4 _2226 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2227 = _2226.x;
        uint _2238 = uint((float(_2226.y) * floor(float(uint(cbSceneParam._m0[85u].y * _393) / _2227))) + floor(float(uint(cbSceneParam._m0[85u].x * _392) / _2227)));
        float _2248 = (log2(_2214 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2249 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
        uint _2252 = uint(isnan(14.0) ? _2249 : (isnan(_2249) ? 14.0 : min(_2249, 14.0)));
        uvec4 _2257 = texelFetch(g_lightClusterGridBuffer, int(((_2252 << 2u) + (_2238 << 6u)) >> 2u));
        uint _2258 = _2257.x;
        uint _2259 = _2226.z;
        float _2358;
        float _2360;
        float _2362;
        float _2364;
        float _2366;
        float _2368;
        if (((((1u << ((_2259 >> 4u) & 15u)) + 4294967295u) & _2258) == 0u) || ((_2259 & 240u) == 0u))
        {
            _2358 = 0.0;
            _2360 = 0.0;
            _2362 = 0.0;
            _2364 = 0.0;
            _2366 = 0.0;
            _2368 = 0.0;
        }
        else
        {
            float _2359;
            float _2361;
            float _2363;
            float _2365;
            float _2367;
            float _2369;
            float _2510 = 0.0;
            float _2511 = 0.0;
            float _2512 = 0.0;
            float _2513 = 0.0;
            float _2514 = 0.0;
            float _2515 = 0.0;
            uint _2516 = 0u;
            uint _2525;
            bool _2526;
            for (;;)
            {
                _2525 = texelFetch(g_lightClassification, int((((_2252 << 5u) + (_2238 << 9u)) + (_2516 << 2u)) >> 2u)).x;
                _2526 = _2525 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2526)
                {
                    frontier_phi_68_pred = _2512;
                    frontier_phi_68_pred_1 = _2515;
                    frontier_phi_68_pred_2 = _2514;
                    frontier_phi_68_pred_3 = _2513;
                    frontier_phi_68_pred_4 = _2511;
                    frontier_phi_68_pred_5 = _2510;
                }
                else
                {
                    float _2655;
                    float _2656;
                    float _2657;
                    float _2658;
                    float _2659;
                    float _2660;
                    uint _2661;
                    _2655 = _2510;
                    _2656 = _2511;
                    _2657 = _2512;
                    _2658 = _2513;
                    _2659 = _2514;
                    _2660 = _2515;
                    _2661 = _2525;
                    float _2582;
                    float _2583;
                    float _2584;
                    float _2585;
                    float _2586;
                    float _2587;
                    for (;;)
                    {
                        uint _2665 = uint(findLSB(_2661)) + (_2516 << 5u);
                        uint _2662 = (_2661 + 4294967295u) & _2661;
                        uint _2667 = _2665 * 48u;
                        vec4 _2681 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2667)).x, texelFetch(g_PointLightRenderingBuffer, int(_2667 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2667 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2667 + 3u)).x));
                        uint _2687 = (_2665 * 48u) + 4u;
                        vec4 _2700 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2687)).x, texelFetch(g_PointLightRenderingBuffer, int(_2687 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2687 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2687 + 3u)).x));
                        uint _2706 = (_2665 * 48u) + 8u;
                        vec3 _2717 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2706)).x, texelFetch(g_PointLightRenderingBuffer, int(_2706 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2706 + 2u)).x));
                        float _2721 = _2681.x - _2212;
                        float _2722 = _2681.y - _2213;
                        float _2723 = _2681.z - _2214;
                        float _2724 = dot(vec3(_2721, _2722, _2723), vec3(_2721, _2722, _2723));
                        float _2727 = inversesqrt(_2724);
                        float _2728 = _2727 * _2721;
                        float _2729 = _2727 * _2722;
                        float _2730 = _2727 * _2723;
                        float _2731 = dot(vec3(_413, _416, _419), vec3(_2728, _2729, _2730));
                        float _2736 = 1.0 - (_2724 * _2681.w);
                        float _4065 = isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0));
                        float _2737 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
                        float _2738 = sqrt(_2724) * _2700.w;
                        float _2741 = 1.39999997615814208984375 / (_2738 + 1.39999997615814208984375);
                        float _2742 = _2741 * _2741;
                        float _2745 = ((1.0 - _2742) * _2731) + _2742;
                        float _2748 = _2738 * _2738;
                        float _2752 = ((isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : max(_2745, 0.0))) * _2737) / ((_2748 * 0.699999988079071044921875) + 1.0);
                        float _2756 = (-0.0) - _2212;
                        float _2757 = (-0.0) - _2213;
                        float _2758 = (-0.0) - _2214;
                        float _2762 = inversesqrt(dot(vec3(_2756, _2757, _2758), vec3(_2756, _2757, _2758)));
                        float _2763 = _2762 * _2756;
                        float _2764 = _2762 * _2757;
                        float _2765 = _2762 * _2758;
                        float _2773 = exp2(log2(1.0 / ((_2748 * 3.5) + 5.0)) * 0.25);
                        float _2774 = 1.0 - _489;
                        float _2781 = sqrt(1.0 - ((1.0 - (_2774 * _2774)) * (1.0 - (_2773 * _2773))));
                        float _2782 = _2781 * _2781;
                        float _2783 = _2782 * _2782;
                        float _2784 = _2763 + _2728;
                        float _2785 = _2764 + _2729;
                        float _2786 = _2765 + _2730;
                        float _2790 = inversesqrt(dot(vec3(_2784, _2785, _2786), vec3(_2784, _2785, _2786)));
                        float _2794 = dot(vec3(_413, _416, _419), vec3(_2763, _2764, _2765));
                        float _4081 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0));
                        float _2797 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
                        float _2798 = dot(vec3(_413, _416, _419), vec3(_2790 * _2784, _2790 * _2785, _2790 * _2786));
                        float _4092 = isnan(0.0) ? _2798 : (isnan(_2798) ? 0.0 : max(_2798, 0.0));
                        float _2801 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
                        float _2805 = ((_2801 * _2801) * (_2783 + (-1.0))) + 1.0;
                        float _2806 = _2741 * _2782;
                        float _2807 = _2806 * _2806;
                        float _2810 = ((1.0 - _2807) * _2731) + _2807;
                        float _4103 = isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0));
                        float _2811 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
                        float _2812 = 1.0 - _2782;
                        float _2822 = (0.5 / (((_2811 * ((_2797 * _2812) + _2782)) + 9.9999999392252902907785028219223e-09) + (((_2811 * _2812) + _2782) * _2797))) * _2811;
                        float _4114 = isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0));
                        float _2833 = (((_2783 * 3.1415927410125732421875) * (isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0)))) / ((_2805 * _2805) * ((_2748 * 2.1991131305694580078125) + 3.141590118408203125))) * _2737;
                        _2585 = (_2752 * _2700.x) + _2658;
                        _2586 = (_2752 * _2700.y) + _2659;
                        _2587 = (_2752 * _2700.z) + _2660;
                        _2582 = (_2833 * _2717.x) + _2655;
                        _2583 = (_2833 * _2717.y) + _2656;
                        _2584 = (_2833 * _2717.z) + _2657;
                        if (_2662 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2655 = _2582;
                            _2656 = _2583;
                            _2657 = _2584;
                            _2658 = _2585;
                            _2659 = _2586;
                            _2660 = _2587;
                            _2661 = _2662;
                        }
                    }
                    frontier_phi_68_pred = _2584;
                    frontier_phi_68_pred_1 = _2587;
                    frontier_phi_68_pred_2 = _2586;
                    frontier_phi_68_pred_3 = _2585;
                    frontier_phi_68_pred_4 = _2583;
                    frontier_phi_68_pred_5 = _2582;
                }
                _2363 = frontier_phi_68_pred;
                _2369 = frontier_phi_68_pred_1;
                _2367 = frontier_phi_68_pred_2;
                _2365 = frontier_phi_68_pred_3;
                _2361 = frontier_phi_68_pred_4;
                _2359 = frontier_phi_68_pred_5;
                uint _2517 = _2516 + 1u;
                if (_2517 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2510 = _2359;
                    _2511 = _2361;
                    _2512 = _2363;
                    _2513 = _2365;
                    _2514 = _2367;
                    _2515 = _2369;
                    _2516 = _2517;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2358 = _2359;
            _2360 = _2361;
            _2362 = _2363;
            _2364 = _2365;
            _2366 = _2367;
            _2368 = _2369;
        }
        uvec4 _2372 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2373 = _2372.z;
        uint _2375 = (_2373 >> 8u) & 15u;
        float _2478;
        float _2480;
        float _2482;
        float _2484;
        float _2486;
        float _2488;
        if (((4294967295u << _2375) & _2258) == 0u)
        {
            _2478 = _2358;
            _2480 = _2360;
            _2482 = _2362;
            _2484 = _2364;
            _2486 = _2366;
            _2488 = _2368;
        }
        else
        {
            float _2503 = inversesqrt(dot(vec3(_2212, _2213, _2214), vec3(_2212, _2213, _2214)));
            float _2504 = _2503 * _2212;
            float _2505 = _2503 * _2213;
            float _2506 = _2503 * _2214;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2375 < ((_2373 >> 12u) & 15u))
            {
                float _2479;
                float _2481;
                float _2483;
                float _2485;
                float _2487;
                float _2489;
                float _2638 = _2358;
                float _2639 = _2360;
                float _2640 = _2362;
                float _2641 = _2364;
                float _2642 = _2366;
                float _2643 = _2368;
                uint _2644 = _2375;
                uint _2653;
                bool _2654;
                for (;;)
                {
                    _2653 = texelFetch(g_lightClassification, int((((_2252 << 5u) + (_2238 << 9u)) + (_2644 << 2u)) >> 2u)).x;
                    _2654 = _2653 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2654)
                    {
                        frontier_phi_79_pred = _2643;
                        frontier_phi_79_pred_1 = _2642;
                        frontier_phi_79_pred_2 = _2641;
                        frontier_phi_79_pred_3 = _2640;
                        frontier_phi_79_pred_4 = _2639;
                        frontier_phi_79_pred_5 = _2638;
                    }
                    else
                    {
                        float _2847;
                        float _2848;
                        float _2849;
                        float _2850;
                        float _2851;
                        float _2852;
                        float _3143;
                        float _3144;
                        float _3145;
                        float _3146;
                        float _3147;
                        float _3148;
                        float _2860 = _2638;
                        float _2861 = _2639;
                        float _2862 = _2640;
                        float _2863 = _2641;
                        float _2864 = _2642;
                        float _2865 = _2643;
                        uint _2866 = _2653;
                        uint _2867;
                        vec4 _2892;
                        float _2893;
                        vec4 _2908;
                        vec3 _2920;
                        vec4 _2936;
                        vec4 _2952;
                        float _2999;
                        bool _3000;
                        for (;;)
                        {
                            uint _2877 = ((_2644 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2866));
                            _2867 = (_2866 + 4294967295u) & _2866;
                            uint _2879 = _2877 * 40u;
                            _2892 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2879)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2879 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2879 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2879 + 3u)).x));
                            _2893 = _2892.w;
                            uint _2895 = (_2877 * 40u) + 4u;
                            _2908 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2895)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2895 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2895 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2895 + 3u)).x));
                            uint _2910 = (_2877 * 40u) + 8u;
                            _2920 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2910)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2910 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2910 + 2u)).x));
                            uint _2923 = (_2877 * 40u) + 16u;
                            _2936 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2923)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2923 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2923 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2923 + 3u)).x));
                            uint _2939 = (_2877 * 40u) + 20u;
                            _2952 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2939)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2939 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2939 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2939 + 3u)).x));
                            uint _2955 = (_2877 * 40u) + 24u;
                            vec4 _2968 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2955)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2955 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2955 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2955 + 3u)).x));
                            uint _2974 = (_2877 * 40u) + 28u;
                            vec4 _2987 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2974)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2974 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2974 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2974 + 3u)).x));
                            _2999 = fma(_2214, _2987.z, fma(_2213, _2987.y, _2987.x * _2212)) + _2987.w;
                            _3000 = !((fma(_2214, _2968.z, fma(_2213, _2968.y, _2968.x * _2212)) + _2968.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3000)
                            {
                                float _3027 = _2892.x - _2212;
                                float _3028 = _2892.y - _2213;
                                float _3029 = _2892.z - _2214;
                                float _3030 = dot(vec3(_3027, _3028, _3029), vec3(_3027, _3028, _3029));
                                float _3033 = inversesqrt(_3030);
                                float _3034 = _3033 * _3027;
                                float _3035 = _3033 * _3028;
                                float _3036 = _3033 * _3029;
                                float _3040 = 1.0 - (_3030 / (_2893 * _2893));
                                float _4125 = isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : max(_3040, 0.0));
                                float _3041 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
                                float _3045 = sqrt(_3030) * _2908.w;
                                float _3047 = 1.39999997615814208984375 / (_3045 + 1.39999997615814208984375);
                                float _3048 = _3047 * _3047;
                                float _3051 = ((1.0 - _3048) * dot(vec3(_3034, _3035, _3036), vec3(_413, _416, _419))) + _3048;
                                float _3054 = _3045 * _3045;
                                float _3058 = (fma(_2214, _2936.z, fma(_2213, _2936.y, _2936.x * _2212)) + _2936.w) / _2999;
                                float _3059 = (fma(_2214, _2952.z, fma(_2213, _2952.y, _2952.x * _2212)) + _2952.w) / _2999;
                                float _3063 = 1.0 - dot(vec2(_3058, _3059), vec2(_3058, _3059));
                                float _4141 = isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : max(_3063, 0.0));
                                float _3064 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
                                float _3065 = _3064 * (((isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : max(_3051, 0.0))) * _3041) / ((_3054 * 0.699999988079071044921875) + 1.0));
                                float _3077 = exp2(log2(1.0 / ((_3054 * 3.5) + 5.0)) * 0.25);
                                float _3078 = 1.0 - _489;
                                float _3085 = sqrt(1.0 - ((1.0 - (_3078 * _3078)) * (1.0 - (_3077 * _3077))));
                                float _3086 = _3085 * _3085;
                                float _3087 = _3086 * _3086;
                                float _3088 = _3034 - _2504;
                                float _3089 = _3035 - _2505;
                                float _3090 = _3036 - _2506;
                                float _3094 = inversesqrt(dot(vec3(_3088, _3089, _3090), vec3(_3088, _3089, _3090)));
                                float _3098 = dot(vec3(_413, _416, _419), vec3((-0.0) - _2504, (-0.0) - _2505, (-0.0) - _2506));
                                float _4152 = isnan(0.0) ? _3098 : (isnan(_3098) ? 0.0 : max(_3098, 0.0));
                                float _3101 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
                                float _3102 = dot(vec3(_413, _416, _419), vec3(_3094 * _3088, _3094 * _3089, _3094 * _3090));
                                float _4163 = isnan(0.0) ? _3102 : (isnan(_3102) ? 0.0 : max(_3102, 0.0));
                                float _3105 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
                                float _3109 = ((_3105 * _3105) * (_3087 + (-1.0))) + 1.0;
                                float _3110 = _3047 * _3086;
                                float _3111 = _3110 * _3110;
                                float _3117 = ((1.0 - _3111) * dot(vec3(_413, _416, _419), vec3(_3034, _3035, _3036))) + _3111;
                                float _4174 = isnan(0.0) ? _3117 : (isnan(_3117) ? 0.0 : max(_3117, 0.0));
                                float _3118 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
                                float _3119 = 1.0 - _3086;
                                float _3129 = (0.5 / (((_3118 * ((_3101 * _3119) + _3086)) + 9.9999999392252902907785028219223e-09) + (((_3118 * _3119) + _3086) * _3101))) * _3118;
                                float _4185 = isnan(0.0) ? _3129 : (isnan(_3129) ? 0.0 : max(_3129, 0.0));
                                float _3139 = (_3064 * _3041) * (((_3087 * 3.1415927410125732421875) * (isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0)))) / ((_3109 * _3109) * ((_3054 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3065 * _2908.z;
                                frontier_phi_85_pred_1 = _3065 * _2908.y;
                                frontier_phi_85_pred_2 = _3065 * _2908.x;
                                frontier_phi_85_pred_3 = _3139 * _2920.z;
                                frontier_phi_85_pred_4 = _3139 * _2920.y;
                                frontier_phi_85_pred_5 = _3139 * _2920.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3148 = frontier_phi_85_pred;
                            _3147 = frontier_phi_85_pred_1;
                            _3146 = frontier_phi_85_pred_2;
                            _3145 = frontier_phi_85_pred_3;
                            _3144 = frontier_phi_85_pred_4;
                            _3143 = frontier_phi_85_pred_5;
                            _2850 = _3146 + _2863;
                            _2851 = _3147 + _2864;
                            _2852 = _3148 + _2865;
                            _2847 = _3143 + _2860;
                            _2848 = _3144 + _2861;
                            _2849 = _3145 + _2862;
                            if (_2867 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2860 = _2847;
                                _2861 = _2848;
                                _2862 = _2849;
                                _2863 = _2850;
                                _2864 = _2851;
                                _2865 = _2852;
                                _2866 = _2867;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2852;
                        frontier_phi_79_pred_1 = _2851;
                        frontier_phi_79_pred_2 = _2850;
                        frontier_phi_79_pred_3 = _2849;
                        frontier_phi_79_pred_4 = _2848;
                        frontier_phi_79_pred_5 = _2847;
                    }
                    _2489 = frontier_phi_79_pred;
                    _2487 = frontier_phi_79_pred_1;
                    _2485 = frontier_phi_79_pred_2;
                    _2483 = frontier_phi_79_pred_3;
                    _2481 = frontier_phi_79_pred_4;
                    _2479 = frontier_phi_79_pred_5;
                    uint _2645 = _2644 + 1u;
                    if (_2645 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2638 = _2479;
                        _2639 = _2481;
                        _2640 = _2483;
                        _2641 = _2485;
                        _2642 = _2487;
                        _2643 = _2489;
                        _2644 = _2645;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2485;
                frontier_phi_60_61_ladder_1 = _2489;
                frontier_phi_60_61_ladder_2 = _2487;
                frontier_phi_60_61_ladder_3 = _2483;
                frontier_phi_60_61_ladder_4 = _2481;
                frontier_phi_60_61_ladder_5 = _2479;
            }
            else
            {
                frontier_phi_60_61_ladder = _2364;
                frontier_phi_60_61_ladder_1 = _2368;
                frontier_phi_60_61_ladder_2 = _2366;
                frontier_phi_60_61_ladder_3 = _2362;
                frontier_phi_60_61_ladder_4 = _2360;
                frontier_phi_60_61_ladder_5 = _2358;
            }
            _2478 = frontier_phi_60_61_ladder_5;
            _2480 = frontier_phi_60_61_ladder_4;
            _2482 = frontier_phi_60_61_ladder_3;
            _2484 = frontier_phi_60_61_ladder;
            _2486 = frontier_phi_60_61_ladder_2;
            _2488 = frontier_phi_60_61_ladder_1;
        }
        float _2493 = isnan(1.0) ? _473 : (isnan(_473) ? 1.0 : min(_473, 1.0));
        _2270 = (_2493 * _2484) + _1704;
        _2272 = (_2493 * _2486) + _1706;
        _2274 = (_2493 * _2488) + _1708;
        _2276 = ((_2478 * _458) * _2493) + _2052;
        _2278 = ((_2480 * _460) * _2493) + _2054;
        _2280 = ((_2482 * _461) * _2493) + _2056;
    }
    else
    {
        _2270 = _1704;
        _2272 = _1706;
        _2274 = _1708;
        _2276 = _2052;
        _2278 = _2054;
        _2280 = _2056;
    }
    float _4201 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _4212 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _4223 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _2297 = ((isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0))) * (_2270 + ((isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0))) * _473))) + ((_2276 + ((isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0))) * _1315)) * cbPerFrame._m0[3u].x);
    float _2298 = ((isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0))) * (_2272 + ((isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0))) * _473))) + ((_2278 + ((isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0))) * _1315)) * cbPerFrame._m0[3u].x);
    float _2299 = ((isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0))) * (_2274 + ((isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0))) * _473))) + ((_2280 + ((isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0))) * _1315)) * cbPerFrame._m0[3u].x);
    uint _2300 = _432 + 6u;
    float _2308 = _392 / cbSceneParam._m0[86u].x;
    float _2309 = _393 / cbSceneParam._m0[86u].y;
    vec4 _2323 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2308, _2309, (log2((isnan(cbSceneParam._m0[77u].w) ? _313 : (isnan(_313) ? cbSceneParam._m0[77u].w : min(_313, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2325 = _2323.x;
    float _2326 = _2323.y;
    float _2327 = _2323.z;
    float _2328 = _2323.w;
    float _2420;
    float _2422;
    float _2424;
    float _2426;
    if (_313 > cbSceneParam._m0[78u].w)
    {
        float _2383 = isnan(_313) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _313 : min(cbSceneParam._m0[80u].w, _313));
        float _2384 = _2383 / _313;
        float _2395 = _2384 * _364;
        float _2396 = _365 * _2384;
        float _2397 = (-0.0) - _2396;
        float _2398 = _2384 * _366;
        float _2400 = (cbSceneParam._m0[77u].w * _2397) / _2383;
        float _2401 = _2400 + cbSceneParam._m0[79u].w;
        float _2402 = cbSceneParam._m0[79u].w - _2396;
        float _2408 = sqrt(((_2395 * _2395) + (_2396 * _2396)) + (_2398 * _2398));
        float _2411 = (1.0 - (cbSceneParam._m0[77u].w / _2383)) * _2408;
        float _2416 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2418 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2595;
        if (abs((_2397 - _2400) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2595 = ((((_2401 > 0.0) ? exp2(_2416 * _2401) : (2.0 - exp2(_2418 * _2401))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2411;
        }
        else
        {
            float _2539 = 1.0 / cbSceneParam._m0[80u].x;
            float _2540 = isnan(_2402) ? _2401 : (isnan(_2401) ? _2402 : max(_2401, _2402));
            float _2541 = isnan(_2402) ? _2401 : (isnan(_2401) ? _2402 : min(_2401, _2402));
            float _2550 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : min(_2540, 0.0));
            float _2551 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : min(_2541, 0.0));
            _2595 = ((abs(_2408 / _2397) * cbSceneParam._m0[80u].y) * ((((_2550 - _2551) * 2.0) - ((exp2(_2416 * (isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0)))) - exp2(_2416 * (isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0))))) * _2539)) - ((exp2(_2418 * _2550) - exp2(_2418 * _2551)) * _2539))) + (_2411 * cbSceneParam._m0[80u].z);
        }
        vec4 _2597 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2308, _2309, 1.0), 0.0);
        float _2606 = exp2((_2595 * (-1.44269502162933349609375)) * (1.0 - _2597.w));
        float _2607 = log2(_2606);
        float _2623 = log2(_2328);
        _2420 = (exp2(_2623 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2607 * cbSceneParam._m0[78u].x)) * _2597.x) / cbSceneParam._m0[78u].x)) + _2325;
        _2422 = (exp2(_2623 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2607 * cbSceneParam._m0[78u].y)) * _2597.y) / cbSceneParam._m0[78u].y)) + _2326;
        _2424 = (exp2(_2623 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2607 * cbSceneParam._m0[78u].z)) * _2597.z) / cbSceneParam._m0[78u].z)) + _2327;
        _2426 = _2606 * _2328;
    }
    else
    {
        _2420 = _2325;
        _2422 = _2326;
        _2424 = _2327;
        _2426 = _2328;
    }
    bool _2633;
    vec4 _2436;
    vec4 _2458;
    float _2460;
    float _2464;
    float _2465;
    float _2466;
    float _2467;
    bool _2477;
    for (;;)
    {
        _2436 = cbMatDynParam._m0[0u];
        float _2438 = roundEven(_2436.y);
        bool _2439 = _2438 == 3.0;
        float _2440 = log2(_2426);
        float _2447 = exp2(_2440 * cbSceneParam._m0[78u].x) * _2297;
        float _2448 = exp2(_2440 * cbSceneParam._m0[78u].y) * _2298;
        float _2449 = exp2(_2440 * cbSceneParam._m0[78u].z) * _2299;
        float _2456 = _380 + (-0.5);
        _2458 = cbMtdParam._m0[1u];
        _2460 = _2458.y * _2456;
        float _2463 = (_2438 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2464 = _2463 * (_2439 ? _2447 : (_2447 + (cbSceneParam._m0[72u].w * _2420)));
        _2465 = _2463 * (_2439 ? _2448 : (_2448 + (cbSceneParam._m0[72u].w * _2422)));
        _2466 = _2463 * (_2439 ? _2449 : (_2449 + (cbSceneParam._m0[72u].w * _2424)));
        _2467 = _2456 * 0.999000012874603271484375;
        _2477 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2477)
        {
            if ((cbInstanceData._m0[_432 + 7u].x + _2467) < 0.5)
            {
                _2633 = true;
                break;
            }
        }
        uint _2574 = _434 + uint(_2436.w);
        if ((cbInstanceData._m0[_2574].w < 1.0) && ((cbInstanceData._m0[_2574].w + _2467) < 0.5))
        {
            _2633 = true;
            break;
        }
        if ((_2460 + 1.0) < _2458.x)
        {
            _2633 = true;
            break;
        }
        _2633 = false;
        break;
    }
    float _2838;
    if (_2633)
    {
        discard_state = true;
        _2838 = 0.0;
    }
    else
    {
        _2838 = cbInstanceData._m0[_2300].w;
    }
    SV_Target.x = _2464;
    SV_Target.y = _2465;
    SV_Target.z = _2466;
    SV_Target.w = _2838;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2300].w;
    discard_exit();
}


