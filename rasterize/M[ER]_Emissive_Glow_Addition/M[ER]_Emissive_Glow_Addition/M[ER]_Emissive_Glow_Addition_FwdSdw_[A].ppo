#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_ER_Emissive_Glow_Addition_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_ER_Emissive_Glow_Addition_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_ER_Emissive_Glow_Addition_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _846;
float _3332;
float _3333;
float _3334;
float _3335;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _179 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _180 = _179 * NORMAL.x;
    float _181 = _179 * NORMAL.y;
    float _182 = _179 * NORMAL.z;
    float _187;
    float _188;
    float _189;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _187 = (-0.0) - _180;
        _188 = (-0.0) - _181;
        _189 = (-0.0) - _182;
    }
    else
    {
        _187 = _180;
        _188 = _181;
        _189 = _182;
    }
    vec4 _218 = texture(sampler2D(M_ER_Emissive_Glow_Addition_snp_0_Texture2D_0, SS_DiffuseMap), vec2((((cbMtdParam._m0[12u].y * cbPerFrame._m0[22u].x) + TEXCOORD_1.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((cbMtdParam._m0[12u].z * cbPerFrame._m0[22u].x) + TEXCOORD_1.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _225 = _218.x * cbMtdParam._m0[9u].x;
    float _226 = _218.y * cbMtdParam._m0[9u].y;
    float _227 = _218.z * cbMtdParam._m0[9u].z;
    float _228 = _218.w * cbMtdParam._m0[9u].w;
    float _229 = _228 * TEXCOORD_1.z;
    vec4 _256 = texture(sampler2D(M_ER_Emissive_Glow_Addition_snp_0_Texture2D_2, SS_DiffuseMap), vec2((((cbMtdParam._m0[12u].w * cbPerFrame._m0[22u].x) + TEXCOORD_1.x) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((cbMtdParam._m0[13u].x * cbPerFrame._m0[22u].x) + TEXCOORD_1.y) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    vec4 _287 = texture(sampler2D(M_ER_Emissive_Glow_Addition_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((cbMtdParam._m0[13u].y * cbPerFrame._m0[22u].x) + TEXCOORD_1.x) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((cbMtdParam._m0[13u].z * cbPerFrame._m0[22u].x) + TEXCOORD_1.y) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _305 = inversesqrt(dot(vec3(_187, _188, _189), vec3(_187, _188, _189)));
    float _306 = _305 * _187;
    float _307 = _305 * _188;
    float _308 = _305 * _189;
    float _3344 = isnan(0.0) ? _229 : (isnan(_229) ? 0.0 : max(_229, 0.0));
    float _310 = isnan(1.0) ? _3344 : (isnan(_3344) ? 1.0 : min(_3344, 1.0));
    float _3355 = isnan(0.0) ? _225 : (isnan(_225) ? 0.0 : max(_225, 0.0));
    float _3366 = isnan(0.0) ? _226 : (isnan(_226) ? 0.0 : max(_226, 0.0));
    float _3377 = isnan(0.0) ? _227 : (isnan(_227) ? 0.0 : max(_227, 0.0));
    float _329 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _370 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _380 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _370);
    float _381 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _370);
    float _382 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _370);
    float _386 = inversesqrt(dot(vec3(_380, _381, _382), vec3(_380, _381, _382)));
    float _387 = _380 * _386;
    float _388 = _381 * _386;
    float _389 = _382 * _386;
    vec4 _394 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _396 = _394.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _525 = sqrt(((_380 * _380) + (_381 * _381)) + (_382 * _382));
        float _531 = (cbMatDynParam._m0[5u].x * _525) + cbMatDynParam._m0[5u].y;
        float _3388 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
        float _532 = isnan(1.0) ? _3388 : (isnan(_3388) ? 1.0 : min(_3388, 1.0));
        float _536 = (cbMatDynParam._m0[5u].z * _525) + cbMatDynParam._m0[5u].w;
        float _3399 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3399 : (isnan(_3399) ? 1.0 : min(_3399, 1.0))) - _532)) + _532) < ((_396 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _408 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _409 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _429 = fma(_308, cbSceneParam._m0[5u].z, fma(_307, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _306));
    float _432 = fma(_308, cbSceneParam._m0[6u].z, fma(_307, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _306));
    float _435 = fma(_308, cbSceneParam._m0[7u].z, fma(_307, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _306));
    uint _448 = uint(roundEven(NORMAL.w)) * 13u;
    uint _449 = _448 + 9u;
    uint _450 = _449 + uint(cbMatDynParam._m0[0u].w);
    float _456 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3355 : (isnan(_3355) ? 1.0 : min(_3355, 1.0)))) * cbInstanceData._m0[_450].x;
    float _457 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3366 : (isnan(_3366) ? 1.0 : min(_3366, 1.0)))) * cbInstanceData._m0[_450].y;
    float _458 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3377 : (isnan(_3377) ? 1.0 : min(_3377, 1.0)))) * cbInstanceData._m0[_450].z;
    float _3410 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _459 = isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0));
    float _3421 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _460 = isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0));
    float _3432 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _461 = isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0));
    vec4 _470 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _408, cbSceneParam._m0[86u].y * _409));
    float _473 = _470.x * TEXCOORD_1.w;
    float _474 = dot(vec3(_306, _307, _308), vec3(_387, _388, _389));
    float _477 = _474 * 2.0;
    float _482 = (_477 * _306) - _387;
    float _483 = (_477 * _307) - _388;
    float _484 = (_477 * _308) - _389;
    float _506 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _510 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _514 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _845;
    float _847;
    float _848;
    float _849;
    float _850;
    float _851;
    float _852;
    float _853;
    float _854;
    float _855;
    float _856;
    float _857;
    float _858;
    float _859;
    float _860;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _570 = fma(_514, cbModelParam._m0[26u].z, fma(_510, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _506));
        float _574 = fma(_514, cbModelParam._m0[27u].z, fma(_510, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _506));
        float _578 = fma(_514, cbModelParam._m0[28u].z, fma(_510, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _506));
        float _603 = _506 + _306;
        float _604 = _510 + _307;
        float _605 = _514 + _308;
        float _615 = fma(_605, cbModelParam._m0[26u].z, fma(_604, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _603)) - _570;
        float _616 = fma(_605, cbModelParam._m0[27u].z, fma(_604, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _603)) - _574;
        float _617 = fma(_605, cbModelParam._m0[28u].z, fma(_604, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _603)) - _578;
        float _621 = inversesqrt(dot(vec3(_615, _616, _617), vec3(_615, _616, _617)));
        float _634 = ((_621 * _615) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_570 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _635 = ((_621 * _616) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_574 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _636 = ((_621 * _617) / cbModelParam._m0[34u].z) + ((((((_578 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _639 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_634, _635, _636), 0.0);
        vec4 _646 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_634, _635, _636), 0.0);
        vec4 _653 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_634, _635, _636), 0.0);
        vec4 _660 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_634, _635, _636), 0.0);
        float _673 = exp2((_639.w + (-0.5)) * 20.0) * 2.0;
        float _674 = _673 * (_639.x + (-0.5));
        float _675 = _673 * (_639.y + (-0.5));
        float _676 = _673 * (_639.z + (-0.5));
        float _683 = exp2((_646.w + (-0.5)) * 20.0) * 2.0;
        float _684 = _683 * (_646.x + (-0.5));
        float _685 = _683 * (_646.y + (-0.5));
        float _686 = _683 * (_646.z + (-0.5));
        float _693 = exp2((_653.w + (-0.5)) * 20.0) * 2.0;
        float _694 = _693 * (_653.x + (-0.5));
        float _695 = _693 * (_653.y + (-0.5));
        float _696 = _693 * (_653.z + (-0.5));
        float _703 = exp2((_660.w + (-0.5)) * 20.0) * 2.0;
        float _704 = _703 * (_660.x + (-0.5));
        float _705 = _703 * (_660.y + (-0.5));
        float _706 = _703 * (_660.z + (-0.5));
        float _707 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
        float _708 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
        float _709 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
        float _710 = _674 * 0.5;
        float _711 = _684 * 0.5;
        float _712 = _694 * 0.5;
        float _713 = dot(vec3(_710, _711, _712), vec3(_710, _711, _712));
        float _718 = (_713 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_713);
        float _727 = (dot(vec3(_306, _307, _308), vec3(_718 * _710, _718 * _711, _718 * _712)) + 1.0) * 0.5;
        float _3458 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
        float _737 = sqrt(((_711 * _711) + (_710 * _710)) + (_712 * _712)) / (_707 + 9.9999997473787516355514526367188e-06);
        float _3469 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
        float _738 = isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0));
        float _739 = _738 * 2.0;
        float _743 = (1.0 - _738) / (_738 + 1.0);
        float _3480 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
        float _744 = isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0));
        float _753 = ((((1.0 - _744) * (_739 + 2.0)) * exp2(log2(isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0))) * (_739 + 1.0))) + _744) * _707;
        float _754 = _675 * 0.5;
        float _755 = _685 * 0.5;
        float _756 = _695 * 0.5;
        float _757 = dot(vec3(_754, _755, _756), vec3(_754, _755, _756));
        float _762 = (_757 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_757);
        float _770 = (dot(vec3(_306, _307, _308), vec3(_762 * _754, _762 * _755, _762 * _756)) + 1.0) * 0.5;
        float _3491 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
        float _779 = sqrt(((_755 * _755) + (_754 * _754)) + (_756 * _756)) / (_708 + 9.9999997473787516355514526367188e-06);
        float _3502 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
        float _780 = isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0));
        float _781 = _780 * 2.0;
        float _785 = (1.0 - _780) / (_780 + 1.0);
        float _3513 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
        float _786 = isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0));
        float _795 = ((((1.0 - _786) * (_781 + 2.0)) * exp2(log2(isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0))) * (_781 + 1.0))) + _786) * _708;
        float _796 = _676 * 0.5;
        float _797 = _686 * 0.5;
        float _798 = _696 * 0.5;
        float _799 = dot(vec3(_796, _797, _798), vec3(_796, _797, _798));
        float _804 = (_799 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_799);
        float _812 = (dot(vec3(_306, _307, _308), vec3(_804 * _796, _804 * _797, _804 * _798)) + 1.0) * 0.5;
        float _3524 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
        float _821 = sqrt(((_797 * _797) + (_796 * _796)) + (_798 * _798)) / (_709 + 9.9999997473787516355514526367188e-06);
        float _3535 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
        float _822 = isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0));
        float _823 = _822 * 2.0;
        float _827 = (1.0 - _822) / (_822 + 1.0);
        float _3546 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
        float _828 = isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0));
        float _837 = ((((1.0 - _828) * (_823 + 2.0)) * exp2(log2(isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0))) * (_823 + 1.0))) + _828) * _709;
        _845 = _676;
        _847 = _675;
        _848 = _674;
        _849 = _686;
        _850 = _685;
        _851 = _684;
        _852 = _696;
        _853 = _695;
        _854 = _694;
        _855 = _709;
        _856 = _708;
        _857 = _707;
        _858 = cbModelParam._m0[36u].z * (isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0)));
        _859 = cbModelParam._m0[36u].z * (isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0)));
        _860 = cbModelParam._m0[36u].z * (isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0)));
    }
    else
    {
        _845 = _846;
        _847 = _846;
        _848 = _846;
        _849 = _846;
        _850 = _846;
        _851 = _846;
        _852 = _846;
        _853 = _846;
        _854 = _846;
        _855 = _846;
        _856 = _846;
        _857 = _846;
        _858 = 0.0;
        _859 = 0.0;
        _860 = 0.0;
    }
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _889 = fma(_514, cbModelParam._m0[30u].z, fma(_510, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _506));
        float _893 = fma(_514, cbModelParam._m0[31u].z, fma(_510, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _506));
        float _897 = fma(_514, cbModelParam._m0[32u].z, fma(_510, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _506));
        float _920 = _506 + _306;
        float _921 = _510 + _307;
        float _922 = _514 + _308;
        float _932 = fma(_922, cbModelParam._m0[30u].z, fma(_921, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _920)) - _889;
        float _933 = fma(_922, cbModelParam._m0[31u].z, fma(_921, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _920)) - _893;
        float _934 = fma(_922, cbModelParam._m0[32u].z, fma(_921, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _920)) - _897;
        float _938 = inversesqrt(dot(vec3(_932, _933, _934), vec3(_932, _933, _934)));
        float _951 = ((_938 * _932) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_889 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _952 = ((_938 * _933) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_893 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _953 = ((_938 * _934) / cbModelParam._m0[35u].z) + ((((((_897 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _955 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_951, _952, _953), 0.0);
        vec4 _962 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_951, _952, _953), 0.0);
        vec4 _969 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_951, _952, _953), 0.0);
        vec4 _976 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_951, _952, _953), 0.0);
        float _988 = exp2((_955.w + (-0.5)) * 20.0) * 2.0;
        float _989 = _988 * (_955.x + (-0.5));
        float _990 = _988 * (_955.y + (-0.5));
        float _991 = _988 * (_955.z + (-0.5));
        float _998 = exp2((_962.w + (-0.5)) * 20.0) * 2.0;
        float _999 = _998 * (_962.x + (-0.5));
        float _1000 = _998 * (_962.y + (-0.5));
        float _1001 = _998 * (_962.z + (-0.5));
        float _1008 = exp2((_969.w + (-0.5)) * 20.0) * 2.0;
        float _1009 = _1008 * (_969.x + (-0.5));
        float _1010 = _1008 * (_969.y + (-0.5));
        float _1011 = _1008 * (_969.z + (-0.5));
        float _1018 = exp2((_976.w + (-0.5)) * 20.0) * 2.0;
        float _1019 = _1018 * (_976.x + (-0.5));
        float _1020 = _1018 * (_976.y + (-0.5));
        float _1021 = _1018 * (_976.z + (-0.5));
        float _1022 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1023 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1024 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1025 = _989 * 0.5;
        float _1026 = _999 * 0.5;
        float _1027 = _1009 * 0.5;
        float _1028 = dot(vec3(_1025, _1026, _1027), vec3(_1025, _1026, _1027));
        float _1033 = (_1028 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1028);
        float _1041 = (dot(vec3(_306, _307, _308), vec3(_1033 * _1025, _1033 * _1026, _1033 * _1027)) + 1.0) * 0.5;
        float _3587 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1050 = sqrt(((_1026 * _1026) + (_1025 * _1025)) + (_1027 * _1027)) / (_1022 + 9.9999997473787516355514526367188e-06);
        float _3598 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1051 = isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0));
        float _1052 = _1051 * 2.0;
        float _1056 = (1.0 - _1051) / (_1051 + 1.0);
        float _3609 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1057 = isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0));
        float _1066 = ((((1.0 - _1057) * (_1052 + 2.0)) * exp2(log2(isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0))) * (_1052 + 1.0))) + _1057) * _1022;
        float _1067 = _990 * 0.5;
        float _1068 = _1000 * 0.5;
        float _1069 = _1010 * 0.5;
        float _1070 = dot(vec3(_1067, _1068, _1069), vec3(_1067, _1068, _1069));
        float _1075 = (_1070 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1070);
        float _1083 = (dot(vec3(_306, _307, _308), vec3(_1075 * _1067, _1075 * _1068, _1075 * _1069)) + 1.0) * 0.5;
        float _3620 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1092 = sqrt(((_1068 * _1068) + (_1067 * _1067)) + (_1069 * _1069)) / (_1023 + 9.9999997473787516355514526367188e-06);
        float _3631 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1093 = isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0));
        float _1094 = _1093 * 2.0;
        float _1098 = (1.0 - _1093) / (_1093 + 1.0);
        float _3642 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1099 = isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0));
        float _1108 = ((((1.0 - _1099) * (_1094 + 2.0)) * exp2(log2(isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0))) * (_1094 + 1.0))) + _1099) * _1023;
        float _1109 = _991 * 0.5;
        float _1110 = _1001 * 0.5;
        float _1111 = _1011 * 0.5;
        float _1112 = dot(vec3(_1109, _1110, _1111), vec3(_1109, _1110, _1111));
        float _1117 = (_1112 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1112);
        float _1125 = (dot(vec3(_306, _307, _308), vec3(_1117 * _1109, _1117 * _1110, _1117 * _1111)) + 1.0) * 0.5;
        float _3653 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1134 = sqrt(((_1110 * _1110) + (_1109 * _1109)) + (_1111 * _1111)) / (_1024 + 9.9999997473787516355514526367188e-06);
        float _3664 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1135 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
        float _1136 = _1135 * 2.0;
        float _1140 = (1.0 - _1135) / (_1135 + 1.0);
        float _3675 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1141 = isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0));
        float _1150 = ((((1.0 - _1141) * (_1136 + 2.0)) * exp2(log2(isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0))) * (_1136 + 1.0))) + _1141) * _1024;
        _1158 = _991;
        _1159 = _990;
        _1160 = _989;
        _1161 = _1001;
        _1162 = _1000;
        _1163 = _999;
        _1164 = _1011;
        _1165 = _1010;
        _1166 = _1009;
        _1167 = _1024;
        _1168 = _1023;
        _1169 = _1022;
        _1170 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0)));
        _1171 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0)));
        _1172 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0)));
    }
    else
    {
        _1158 = _846;
        _1159 = _846;
        _1160 = _846;
        _1161 = _846;
        _1162 = _846;
        _1163 = _846;
        _1164 = _846;
        _1165 = _846;
        _1166 = _846;
        _1167 = _846;
        _1168 = _846;
        _1169 = _846;
        _1170 = 0.0;
        _1171 = 0.0;
        _1172 = 0.0;
    }
    float _1182 = (cbModelParam._m0[1u].x * (_1170 - _858)) + _858;
    float _1183 = (cbModelParam._m0[1u].x * (_1171 - _859)) + _859;
    float _1184 = (cbModelParam._m0[1u].x * (_1172 - _860)) + _860;
    float _1205 = fma(_1184, cbSceneParam._m0[89u].z, fma(_1183, cbSceneParam._m0[89u].y, _1182 * cbSceneParam._m0[89u].x));
    float _1208 = fma(_1184, cbSceneParam._m0[90u].z, fma(_1183, cbSceneParam._m0[90u].y, _1182 * cbSceneParam._m0[90u].x));
    float _1211 = fma(_1184, cbSceneParam._m0[91u].z, fma(_1183, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1182));
    float _1226 = _482 * 0.5;
    float _1227 = _483 * 0.5;
    float _1228 = _484 * 0.5;
    float _1229 = dot(vec4(_1226, _1227, _1228, 1.0), vec4(_1160, _1163, _1166, _1169));
    float _1232 = dot(vec4(_1226, _1227, _1228, 1.0), vec4(_1159, _1162, _1165, _1168));
    float _1235 = dot(vec4(_1226, _1227, _1228, 1.0), vec4(_1158, _1161, _1164, _1167));
    float _1269;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1242 = dot(vec4(_1226, _1227, _1228, 1.0), vec4(_845, _849, _852, _855));
        float _1246 = dot(vec4(_1226, _1227, _1228, 1.0), vec4(_847, _850, _853, _856));
        float _1250 = dot(vec4(_1226, _1227, _1228, 1.0), vec4(_848, _851, _854, _857));
        float _1257 = dot(vec4(cbModelParam._m0[39u]), vec4(_1226, _1227, _1228, 1.0));
        _1269 = dot(vec3(isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0)), isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0)), isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1257) ? 0.0 : (isnan(0.0) ? _1257 : max(0.0, _1257))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1269 = 1.0;
    }
    float _1280;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1271 = dot(vec4(cbModelParam._m0[40u]), vec4(_1226, _1227, _1228, 1.0));
        _1280 = dot(vec3(isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0)), isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0)), isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1271) ? 0.0 : (isnan(0.0) ? _1271 : max(0.0, _1271))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1280 = 1.0;
    }
    float _1284 = (_1280 * cbModelParam._m0[1u].x) + (_1269 * (1.0 - cbModelParam._m0[1u].x));
    float _1293 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1374;
    float _1376;
    float _1378;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1341 = fma(_514, cbModelParam._m0[13u].z, fma(_510, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _506)) + cbModelParam._m0[13u].w;
        float _1345 = fma(_514, cbModelParam._m0[14u].z, fma(_510, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _506)) + cbModelParam._m0[14u].w;
        float _1349 = fma(_514, cbModelParam._m0[15u].z, fma(_510, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _506)) + cbModelParam._m0[15u].w;
        float _1352 = fma(_484, cbModelParam._m0[13u].z, fma(_483, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _482));
        float _1355 = fma(_484, cbModelParam._m0[14u].z, fma(_483, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _482));
        float _1358 = fma(_484, cbModelParam._m0[15u].z, fma(_483, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _482));
        float _1384;
        if (_1352 > 0.0)
        {
            _1384 = abs((1.0 - _1341) / _1352);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1352 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1341 + 1.0) / _1352);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1384 = frontier_phi_19_17_ladder;
        }
        float _1557;
        if (_1355 > 0.0)
        {
            _1557 = abs((1.0 - _1345) / _1355);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1355 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1345 + 1.0) / _1355);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1557 = frontier_phi_28_24_ladder;
        }
        float _1854;
        if (_1358 > 0.0)
        {
            _1854 = abs((1.0 - _1349) / _1358);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1358 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1349 + 1.0) / _1358);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1854 = frontier_phi_40_35_ladder;
        }
        float _1856 = isnan(_1557) ? _1384 : (isnan(_1384) ? _1557 : min(_1384, _1557));
        float _1857 = isnan(_1854) ? _1856 : (isnan(_1856) ? _1854 : min(_1856, _1854));
        float _1861 = (_1857 * _1352) + _1341;
        float _1862 = (_1857 * _1355) + _1345;
        float _1863 = (_1857 * _1358) + _1349;
        float _1864 = _1857 * 9.9999997473787516355514526367188e-05;
        float _1866 = (-1.0) - _1864;
        float _1868 = _1864 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1863 > _1868) || ((_1863 < _1866) || ((_1862 > _1868) || ((_1862 < _1866) || ((_1861 < _1866) || (_1861 > _1868))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2008 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1863, cbModelParam._m0[9u].z, fma(_1862, cbModelParam._m0[9u].y, _1861 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1863, cbModelParam._m0[10u].z, fma(_1862, cbModelParam._m0[10u].y, _1861 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1863, cbModelParam._m0[11u].z, fma(_1862, cbModelParam._m0[11u].y, _1861 * cbModelParam._m0[11u].x))), _1293);
            frontier_phi_18_40_ladder = _2008.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2008.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2008.x * cbModelParam._m0[1u].y;
        }
        _1374 = frontier_phi_18_40_ladder_2;
        _1376 = frontier_phi_18_40_ladder_1;
        _1378 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1362 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_482, _483, _484), _1293);
        _1374 = _1362.x * cbModelParam._m0[1u].y;
        _1376 = _1362.y * cbModelParam._m0[1u].y;
        _1378 = _1362.z * cbModelParam._m0[1u].y;
    }
    float _1381 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1473;
    float _1475;
    float _1477;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1437 = fma(_514, cbModelParam._m0[21u].z, fma(_510, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _506)) + cbModelParam._m0[21u].w;
        float _1441 = fma(_514, cbModelParam._m0[22u].z, fma(_510, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _506)) + cbModelParam._m0[22u].w;
        float _1445 = fma(_514, cbModelParam._m0[23u].z, fma(_510, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _506)) + cbModelParam._m0[23u].w;
        float _1448 = fma(_484, cbModelParam._m0[21u].z, fma(_483, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _482));
        float _1451 = fma(_484, cbModelParam._m0[22u].z, fma(_483, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _482));
        float _1454 = fma(_484, cbModelParam._m0[23u].z, fma(_483, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _482));
        float _1562;
        if (_1448 > 0.0)
        {
            _1562 = abs((1.0 - _1437) / _1448);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1448 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1437 + 1.0) / _1448);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1562 = frontier_phi_30_26_ladder;
        }
        float _1881;
        if (_1451 > 0.0)
        {
            _1881 = abs((1.0 - _1441) / _1451);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1451 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1441 + 1.0) / _1451);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1881 = frontier_phi_42_37_ladder;
        }
        float _2154;
        if (_1454 > 0.0)
        {
            _2154 = abs((1.0 - _1445) / _1454);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1454 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1445 + 1.0) / _1454);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2154 = frontier_phi_52_49_ladder;
        }
        float _2156 = isnan(_1881) ? _1562 : (isnan(_1562) ? _1881 : min(_1562, _1881));
        float _2157 = isnan(_2154) ? _2156 : (isnan(_2156) ? _2154 : min(_2156, _2154));
        float _2161 = (_2157 * _1448) + _1437;
        float _2162 = (_2157 * _1451) + _1441;
        float _2163 = (_2157 * _1454) + _1445;
        float _2164 = _2157 * 9.9999997473787516355514526367188e-05;
        float _2165 = (-1.0) - _2164;
        float _2167 = _2164 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2163 > _2167) || ((_2163 < _2165) || ((_2162 > _2167) || ((_2162 < _2165) || ((_2161 < _2165) || (_2161 > _2167))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2254 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2163, cbModelParam._m0[17u].z, fma(_2162, cbModelParam._m0[17u].y, _2161 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2163, cbModelParam._m0[18u].z, fma(_2162, cbModelParam._m0[18u].y, _2161 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2163, cbModelParam._m0[19u].z, fma(_2162, cbModelParam._m0[19u].y, _2161 * cbModelParam._m0[19u].x))), _1381);
            frontier_phi_27_52_ladder = _2254.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2254.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2254.x * cbModelParam._m0[1u].z;
        }
        _1473 = frontier_phi_27_52_ladder_2;
        _1475 = frontier_phi_27_52_ladder_1;
        _1477 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1457 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_482, _483, _484), _1381);
        _1473 = _1457.x * cbModelParam._m0[1u].z;
        _1475 = _1457.y * cbModelParam._m0[1u].z;
        _1477 = _1457.z * cbModelParam._m0[1u].z;
    }
    float _1489 = _473 * 0.01200000010430812835693359375;
    float _1491 = _1489 * ((cbModelParam._m0[1u].w * (_1473 - _1374)) + _1374);
    float _1492 = _1489 * ((cbModelParam._m0[1u].w * (_1475 - _1376)) + _1376);
    float _1493 = _1489 * ((cbModelParam._m0[1u].w * (_1477 - _1378)) + _1378);
    float _1496 = fma(_1493, cbSceneParam._m0[89u].z, fma(_1492, cbSceneParam._m0[89u].y, _1491 * cbSceneParam._m0[89u].x));
    float _1499 = fma(_1493, cbSceneParam._m0[90u].z, fma(_1492, cbSceneParam._m0[90u].y, _1491 * cbSceneParam._m0[90u].x));
    float _1502 = fma(_1493, cbSceneParam._m0[91u].z, fma(_1492, cbSceneParam._m0[91u].y, _1491 * cbSceneParam._m0[91u].x));
    float _1536 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1540 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1544 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1548 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1549 = _1536 / _1548;
    float _1550 = _1540 / _1548;
    float _1551 = _1544 / _1548;
    float _1698;
    float _1699;
    float _1700;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1578 = ((uint(_1551 > cbSceneParam._m0[59u].y) + uint(_1551 > cbSceneParam._m0[59u].x)) + uint(_1551 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1579 = _1578 + 43u;
        uint _1587 = _1578 + 44u;
        uint _1595 = _1578 + 45u;
        uint _1603 = _1578 + 46u;
        float _1614 = fma(_1548, cbSceneParam._m0[_1579].w, fma(_1544, cbSceneParam._m0[_1579].z, fma(_1540, cbSceneParam._m0[_1579].y, _1536 * cbSceneParam._m0[_1579].x)));
        float _1618 = fma(_1548, cbSceneParam._m0[_1587].w, fma(_1544, cbSceneParam._m0[_1587].z, fma(_1540, cbSceneParam._m0[_1587].y, _1536 * cbSceneParam._m0[_1587].x)));
        float _1626 = fma(_1548, cbSceneParam._m0[_1603].w, fma(_1544, cbSceneParam._m0[_1603].z, fma(_1540, cbSceneParam._m0[_1603].y, _1536 * cbSceneParam._m0[_1603].x)));
        float _1631 = cbSceneParam._m0[33u].z * _1626;
        float _1633 = cbSceneParam._m0[33u].w * _1626;
        float _1636 = fma(_1548, cbSceneParam._m0[_1595].w, fma(_1544, cbSceneParam._m0[_1595].z, fma(_1540, cbSceneParam._m0[_1595].y, _1536 * cbSceneParam._m0[_1595].x))) / _1626;
        float _1684 = (cbSceneParam._m0[33u].x - sqrt(((_1550 * _1550) + (_1549 * _1549)) + (_1551 * _1551))) * cbSceneParam._m0[33u].y;
        float _3801 = isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0));
        float _1691 = (isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1631 + _1614) / _1626, (_1633 + _1618) / _1626), _1636), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1633 + _1614) / _1626, (_1618 - _1631) / _1626), _1636), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1614 - _1631) / _1626, (_1618 - _1633) / _1626), _1636), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1614 - _1633) / _1626, (_1631 + _1618) / _1626), _1636), 0.0)).x), vec4(0.25)));
        _1698 = 1.0 - (_1691 * cbSceneParam._m0[34u].x);
        _1699 = 1.0 - (_1691 * cbSceneParam._m0[34u].y);
        _1700 = 1.0 - (_1691 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1698 = 1.0;
        _1699 = 1.0;
        _1700 = 1.0;
    }
    float _1764;
    float _1766;
    float _1768;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1752 = fma(_1548, cbSceneParam._m0[63u].w, fma(_1544, cbSceneParam._m0[63u].z, fma(_1540, cbSceneParam._m0[63u].y, _1536 * cbSceneParam._m0[63u].x)));
        float _1753 = fma(_1548, cbSceneParam._m0[60u].w, fma(_1544, cbSceneParam._m0[60u].z, fma(_1540, cbSceneParam._m0[60u].y, _1536 * cbSceneParam._m0[60u].x))) / _1752;
        float _1754 = fma(_1548, cbSceneParam._m0[61u].w, fma(_1544, cbSceneParam._m0[61u].z, fma(_1540, cbSceneParam._m0[61u].y, _1536 * cbSceneParam._m0[61u].x))) / _1752;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1753 >= cbSceneParam._m0[64u].x) && (_1754 >= cbSceneParam._m0[64u].y)) && (_1753 <= cbSceneParam._m0[64u].z)) && (_1754 <= cbSceneParam._m0[64u].w))
        {
            float _1894 = fma(_1548, cbSceneParam._m0[62u].w, fma(_1544, cbSceneParam._m0[62u].z, fma(_1540, cbSceneParam._m0[62u].y, _1536 * cbSceneParam._m0[62u].x))) / _1752;
            float _1898 = isnan(cbSceneParam._m0[41u].w) ? _1894 : (isnan(_1894) ? cbSceneParam._m0[41u].w : max(_1894, cbSceneParam._m0[41u].w));
            float _1941 = (cbSceneParam._m0[33u].x - sqrt(((_1550 * _1550) + (_1549 * _1549)) + (_1551 * _1551))) * cbSceneParam._m0[33u].y;
            float _3817 = isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0));
            float _1948 = (isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1753, cbSceneParam._m0[33u].w + _1754), _1898), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1753, _1754 - cbSceneParam._m0[33u].z), _1898), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1753 - cbSceneParam._m0[33u].z, _1754 - cbSceneParam._m0[33u].w), _1898), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1753 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1754), _1898), 0.0)).x), vec4(0.25)));
            float _1952 = 1.0 - (_1948 * cbSceneParam._m0[34u].x);
            float _1953 = 1.0 - (_1948 * cbSceneParam._m0[34u].y);
            float _1954 = 1.0 - (_1948 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_1953) ? _1699 : (isnan(_1699) ? _1953 : min(_1699, _1953));
            frontier_phi_39_38_ladder_1 = isnan(_1952) ? _1698 : (isnan(_1698) ? _1952 : min(_1698, _1952));
            frontier_phi_39_38_ladder_2 = isnan(_1954) ? _1700 : (isnan(_1700) ? _1954 : min(_1700, _1954));
        }
        else
        {
            frontier_phi_39_38_ladder = _1699;
            frontier_phi_39_38_ladder_1 = _1698;
            frontier_phi_39_38_ladder_2 = _1700;
        }
        _1764 = frontier_phi_39_38_ladder_1;
        _1766 = frontier_phi_39_38_ladder;
        _1768 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _1764 = _1698;
        _1766 = _1699;
        _1768 = _1700;
    }
    uvec4 _1773 = floatBitsToUint(cbInstanceData._m0[_448 + 5u]);
    uint _1775 = _1773.x * 14u;
    uint _1776 = _1775 + 13u;
    float _1783 = _473 + (-1.0);
    float _1789 = (cbLight._m0[_1776].x * _1783) + 1.0;
    float _1790 = (cbLight._m0[_1776].y * _1783) + 1.0;
    float _1791 = (cbLight._m0[_1776].z * _1783) + 1.0;
    float _1792 = (cbLight._m0[_1776].w * _1783) + 1.0;
    uint _1793 = _1775 + 5u;
    float _1799 = isnan(1.0) ? _1790 : (isnan(_1790) ? 1.0 : min(_1790, 1.0));
    uint _1803 = _1775 + 4u;
    float _1813 = isnan(1.0) ? _1789 : (isnan(_1789) ? 1.0 : min(_1789, 1.0));
    uint _1817 = _1775 | 1u;
    float _1828 = dot(vec3(cbLight._m0[_1775].xyz), vec3(_306, _307, _308));
    float _1831 = dot(vec3(cbLight._m0[_1817].xyz), vec3(_306, _307, _308));
    float _3853 = isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0));
    float _3864 = isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0));
    float _1836 = (isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0))) * 0.3183098733425140380859375;
    float _1838 = (isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0))) * 0.3183098733425140380859375;
    float _1845 = ((cbLight._m0[_1793].x * _1799) * _1838) + (((cbLight._m0[_1803].x * _1764) * _1813) * _1836);
    float _1846 = ((_1799 * cbLight._m0[_1793].y) * _1838) + (((cbLight._m0[_1803].y * _1766) * _1813) * _1836);
    float _1847 = ((_1799 * cbLight._m0[_1793].z) * _1838) + (((cbLight._m0[_1803].z * _1768) * _1813) * _1836);
    uvec4 _1851 = floatBitsToUint(cbLight._m0[_1775 + 12u]);
    bool _1853 = _1851.x == 0u;
    float _1955;
    float _1957;
    float _1959;
    if (_1853)
    {
        _1955 = _1845;
        _1957 = _1846;
        _1959 = _1847;
    }
    else
    {
        uint _1963 = _1775 + 6u;
        float _1979 = (dot(vec3(cbLight._m0[_1775 + 2u].xyz), vec3(_306, _307, _308)) * 0.5) + 0.5;
        float _1980 = _1979 * _1979;
        float _3875 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
        float _1981 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
        float _1982 = isnan(1.0) ? _1791 : (isnan(_1791) ? 1.0 : min(_1791, 1.0));
        _1955 = (((cbLight._m0[_1963].x * 0.3183098733425140380859375) * _1981) * _1982) + _1845;
        _1957 = (((cbLight._m0[_1963].y * 0.3183098733425140380859375) * _1981) * _1982) + _1846;
        _1959 = (((cbLight._m0[_1963].z * 0.3183098733425140380859375) * _1981) * _1982) + _1847;
    }
    bool _1962 = _1851.y == 0u;
    float _2017;
    float _2019;
    float _2021;
    if (_1962)
    {
        _2017 = _1955;
        _2019 = _1957;
        _2021 = _1959;
    }
    else
    {
        uint _2125 = _1775 + 7u;
        float _2141 = (dot(vec3(cbLight._m0[_1775 + 3u].xyz), vec3(_306, _307, _308)) * 0.5) + 0.5;
        float _2142 = _2141 * _2141;
        float _3891 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
        float _2143 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
        float _2144 = isnan(1.0) ? _1792 : (isnan(_1792) ? 1.0 : min(_1792, 1.0));
        _2017 = (((cbLight._m0[_2125].x * 0.3183098733425140380859375) * _2143) * _2144) + _1955;
        _2019 = (((cbLight._m0[_2125].y * 0.3183098733425140380859375) * _2143) * _2144) + _1957;
        _2021 = (((cbLight._m0[_2125].z * 0.3183098733425140380859375) * _2143) * _2144) + _1959;
    }
    uint _2023 = _1775 + 8u;
    float _2029 = cbLight._m0[_1775].x + _387;
    float _2030 = cbLight._m0[_1775].y + _388;
    float _2031 = cbLight._m0[_1775].z + _389;
    float _2035 = inversesqrt(dot(vec3(_2029, _2030, _2031), vec3(_2029, _2030, _2031)));
    float _2039 = dot(vec3(_306, _307, _308), vec3(cbLight._m0[_1775].xyz));
    float _3907 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
    float _2042 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
    float _3918 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _2043 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
    float _2044 = dot(vec3(cbLight._m0[_1775].xyz), vec3(_2029 * _2035, _2030 * _2035, _2031 * _2035));
    float _3929 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0));
    float _2055 = (exp2(log2(1.0 - (isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2061 = (0.5 / ((_2042 + 9.9999999392252902907785028219223e-09) + _2043)) * _2042;
    float _3940 = isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0));
    float _2063 = (isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0))) * 0.31831014156341552734375;
    uint _2077 = _1775 + 9u;
    float _2083 = cbLight._m0[_1817].x + _387;
    float _2084 = cbLight._m0[_1817].y + _388;
    float _2085 = cbLight._m0[_1817].z + _389;
    float _2089 = inversesqrt(dot(vec3(_2083, _2084, _2085), vec3(_2083, _2084, _2085)));
    float _2093 = dot(vec3(_306, _307, _308), vec3(cbLight._m0[_1817].xyz));
    float _3951 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
    float _2096 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
    float _2097 = dot(vec3(cbLight._m0[_1817].xyz), vec3(_2083 * _2089, _2084 * _2089, _2085 * _2089));
    float _3962 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
    float _2106 = (exp2(log2(1.0 - (isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2110 = (0.5 / ((_2096 + 9.9999999392252902907785028219223e-09) + _2043)) * _2096;
    float _3973 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
    float _2112 = (isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0))) * 0.31831014156341552734375;
    float _2122 = (((_2106 * cbLight._m0[_2077].x) * _2112) * _1799) + ((((cbLight._m0[_2023].x * _1764) * _2055) * _2063) * _1813);
    float _2123 = (((_2106 * cbLight._m0[_2077].y) * _2112) * _1799) + ((((cbLight._m0[_2023].y * _1766) * _2055) * _2063) * _1813);
    float _2124 = (((_2106 * cbLight._m0[_2077].z) * _2112) * _1799) + ((((cbLight._m0[_2023].z * _1768) * _2055) * _2063) * _1813);
    float _2180;
    float _2182;
    float _2184;
    if (_1853)
    {
        _2180 = _2122;
        _2182 = _2123;
        _2184 = _2124;
    }
    else
    {
        uint _2186 = _1775 + 10u;
        uint _2192 = _1775 + 2u;
        float _2198 = cbLight._m0[_2192].x + _387;
        float _2199 = cbLight._m0[_2192].y + _388;
        float _2200 = cbLight._m0[_2192].z + _389;
        float _2204 = inversesqrt(dot(vec3(_2198, _2199, _2200), vec3(_2198, _2199, _2200)));
        float _2208 = dot(vec3(_306, _307, _308), vec3(cbLight._m0[_2192].xyz));
        float _3984 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
        float _2211 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
        float _2212 = dot(vec3(cbLight._m0[_2192].xyz), vec3(_2198 * _2204, _2199 * _2204, _2200 * _2204));
        float _3995 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
        float _2221 = (exp2(log2(1.0 - (isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2225 = (0.5 / ((_2211 + 9.9999999392252902907785028219223e-09) + _2043)) * _2211;
        float _4006 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
        float _2227 = (isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0))) * 0.31831014156341552734375;
        float _2228 = isnan(1.0) ? _1791 : (isnan(_1791) ? 1.0 : min(_1791, 1.0));
        _2180 = (((_2221 * cbLight._m0[_2186].x) * _2227) * _2228) + _2122;
        _2182 = (((_2221 * cbLight._m0[_2186].y) * _2227) * _2228) + _2123;
        _2184 = (((_2221 * cbLight._m0[_2186].z) * _2227) * _2228) + _2124;
    }
    float _2259;
    float _2261;
    float _2263;
    if (_1962)
    {
        _2259 = _2180;
        _2261 = _2182;
        _2263 = _2184;
    }
    else
    {
        uint _2270 = _1775 + 11u;
        uint _2276 = _1775 + 3u;
        float _2282 = cbLight._m0[_2276].x + _387;
        float _2283 = cbLight._m0[_2276].y + _388;
        float _2284 = cbLight._m0[_2276].z + _389;
        float _2288 = inversesqrt(dot(vec3(_2282, _2283, _2284), vec3(_2282, _2283, _2284)));
        float _2292 = dot(vec3(_306, _307, _308), vec3(cbLight._m0[_2276].xyz));
        float _4022 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
        float _2295 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
        float _2296 = dot(vec3(cbLight._m0[_2276].xyz), vec3(_2282 * _2288, _2283 * _2288, _2284 * _2288));
        float _4033 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
        float _2305 = (exp2(log2(1.0 - (isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2309 = (0.5 / ((_2295 + 9.9999999392252902907785028219223e-09) + _2043)) * _2295;
        float _4044 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
        float _2311 = (isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0))) * 0.31831014156341552734375;
        float _2312 = isnan(1.0) ? _1792 : (isnan(_1792) ? 1.0 : min(_1792, 1.0));
        _2259 = (((_2305 * cbLight._m0[_2270].x) * _2311) * _2312) + _2180;
        _2261 = (((_2305 * cbLight._m0[_2270].y) * _2311) * _2312) + _2182;
        _2263 = (((_2305 * cbLight._m0[_2270].z) * _2311) * _2312) + _2184;
    }
    float _2377;
    float _2379;
    float _2381;
    float _2383;
    float _2385;
    float _2387;
    if (_1773.y == 0u)
    {
        uvec4 _2333 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2334 = _2333.x;
        uint _2345 = uint((float(_2333.y) * floor(float(uint(cbSceneParam._m0[85u].y * _409) / _2334))) + floor(float(uint(cbSceneParam._m0[85u].x * _408) / _2334)));
        float _2355 = (log2(_1551 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2356 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
        uint _2359 = uint(isnan(14.0) ? _2356 : (isnan(_2356) ? 14.0 : min(_2356, 14.0)));
        uvec4 _2364 = texelFetch(g_lightClusterGridBuffer, int(((_2359 << 2u) + (_2345 << 6u)) >> 2u));
        uint _2365 = _2364.x;
        uint _2366 = _2333.z;
        float _2475;
        float _2477;
        float _2479;
        float _2481;
        float _2483;
        float _2485;
        if (((((1u << ((_2366 >> 4u) & 15u)) + 4294967295u) & _2365) == 0u) || ((_2366 & 240u) == 0u))
        {
            _2475 = 0.0;
            _2477 = 0.0;
            _2479 = 0.0;
            _2481 = 0.0;
            _2483 = 0.0;
            _2485 = 0.0;
        }
        else
        {
            float _2476;
            float _2478;
            float _2480;
            float _2482;
            float _2484;
            float _2486;
            float _2635 = 0.0;
            float _2636 = 0.0;
            float _2637 = 0.0;
            float _2638 = 0.0;
            float _2639 = 0.0;
            float _2640 = 0.0;
            uint _2641 = 0u;
            uint _2650;
            bool _2651;
            for (;;)
            {
                _2650 = texelFetch(g_lightClassification, int((((_2359 << 5u) + (_2345 << 9u)) + (_2641 << 2u)) >> 2u)).x;
                _2651 = _2650 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_2651)
                {
                    frontier_phi_73_pred = _2640;
                    frontier_phi_73_pred_1 = _2639;
                    frontier_phi_73_pred_2 = _2638;
                    frontier_phi_73_pred_3 = _2637;
                    frontier_phi_73_pred_4 = _2636;
                    frontier_phi_73_pred_5 = _2635;
                }
                else
                {
                    float _2780;
                    float _2781;
                    float _2782;
                    float _2783;
                    float _2784;
                    float _2785;
                    uint _2786;
                    _2780 = _2635;
                    _2781 = _2636;
                    _2782 = _2637;
                    _2783 = _2638;
                    _2784 = _2639;
                    _2785 = _2640;
                    _2786 = _2650;
                    float _2707;
                    float _2708;
                    float _2709;
                    float _2710;
                    float _2711;
                    float _2712;
                    for (;;)
                    {
                        uint _2790 = uint(findLSB(_2786)) + (_2641 << 5u);
                        uint _2787 = (_2786 + 4294967295u) & _2786;
                        uint _2792 = _2790 * 48u;
                        vec4 _2806 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2792)).x, texelFetch(g_PointLightRenderingBuffer, int(_2792 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2792 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2792 + 3u)).x));
                        uint _2812 = (_2790 * 48u) + 4u;
                        vec4 _2825 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2812)).x, texelFetch(g_PointLightRenderingBuffer, int(_2812 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2812 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2812 + 3u)).x));
                        uint _2831 = (_2790 * 48u) + 8u;
                        vec3 _2842 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2831)).x, texelFetch(g_PointLightRenderingBuffer, int(_2831 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2831 + 2u)).x));
                        float _2846 = _2806.x - _1549;
                        float _2847 = _2806.y - _1550;
                        float _2848 = _2806.z - _1551;
                        float _2849 = dot(vec3(_2846, _2847, _2848), vec3(_2846, _2847, _2848));
                        float _2852 = inversesqrt(_2849);
                        float _2861 = 1.0 - (_2849 * _2806.w);
                        float _4070 = isnan(0.0) ? _2861 : (isnan(_2861) ? 0.0 : max(_2861, 0.0));
                        float _2862 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
                        float _2863 = sqrt(_2849) * _2825.w;
                        float _2866 = 1.39999997615814208984375 / (_2863 + 1.39999997615814208984375);
                        float _2867 = _2866 * _2866;
                        float _2870 = ((1.0 - _2867) * dot(vec3(_429, _432, _435), vec3(_2852 * _2846, _2852 * _2847, _2852 * _2848))) + _2867;
                        float _2873 = _2863 * _2863;
                        float _2877 = ((isnan(0.0) ? _2870 : (isnan(_2870) ? 0.0 : max(_2870, 0.0))) * _2862) / ((_2873 * 0.699999988079071044921875) + 1.0);
                        float _2881 = (-0.0) - _1549;
                        float _2882 = (-0.0) - _1550;
                        float _2883 = (-0.0) - _1551;
                        float _2887 = inversesqrt(dot(vec3(_2881, _2882, _2883), vec3(_2881, _2882, _2883)));
                        float _2891 = dot(vec3(_429, _432, _435), vec3(_2887 * _2881, _2887 * _2882, _2887 * _2883));
                        float _4086 = isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : max(_2891, 0.0));
                        float _4097 = isnan(0.0) ? _2870 : (isnan(_2870) ? 0.0 : max(_2870, 0.0));
                        float _2895 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
                        float _2899 = (0.5 / (((isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0))) + 9.9999999392252902907785028219223e-09) + _2895)) * _2895;
                        float _4108 = isnan(0.0) ? _2899 : (isnan(_2899) ? 0.0 : max(_2899, 0.0));
                        float _2908 = (((isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0))) * 3.1415927410125732421875) / ((_2873 * 2.1991131305694580078125) + 3.141590118408203125)) * _2862;
                        _2710 = (_2877 * _2825.x) + _2783;
                        _2711 = (_2877 * _2825.y) + _2784;
                        _2712 = (_2877 * _2825.z) + _2785;
                        _2707 = (_2908 * _2842.x) + _2780;
                        _2708 = (_2908 * _2842.y) + _2781;
                        _2709 = (_2908 * _2842.z) + _2782;
                        if (_2787 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2780 = _2707;
                            _2781 = _2708;
                            _2782 = _2709;
                            _2783 = _2710;
                            _2784 = _2711;
                            _2785 = _2712;
                            _2786 = _2787;
                        }
                    }
                    frontier_phi_73_pred = _2712;
                    frontier_phi_73_pred_1 = _2711;
                    frontier_phi_73_pred_2 = _2710;
                    frontier_phi_73_pred_3 = _2709;
                    frontier_phi_73_pred_4 = _2708;
                    frontier_phi_73_pred_5 = _2707;
                }
                _2486 = frontier_phi_73_pred;
                _2484 = frontier_phi_73_pred_1;
                _2482 = frontier_phi_73_pred_2;
                _2480 = frontier_phi_73_pred_3;
                _2478 = frontier_phi_73_pred_4;
                _2476 = frontier_phi_73_pred_5;
                uint _2642 = _2641 + 1u;
                if (_2642 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2635 = _2476;
                    _2636 = _2478;
                    _2637 = _2480;
                    _2638 = _2482;
                    _2639 = _2484;
                    _2640 = _2486;
                    _2641 = _2642;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2475 = _2476;
            _2477 = _2478;
            _2479 = _2480;
            _2481 = _2482;
            _2483 = _2484;
            _2485 = _2486;
        }
        uvec4 _2489 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2490 = _2489.z;
        uint _2492 = (_2490 >> 8u) & 15u;
        float _2606;
        float _2608;
        float _2610;
        float _2612;
        float _2614;
        float _2616;
        if (((4294967295u << _2492) & _2365) == 0u)
        {
            _2606 = _2475;
            _2608 = _2477;
            _2610 = _2479;
            _2612 = _2481;
            _2614 = _2483;
            _2616 = _2485;
        }
        else
        {
            float _2631 = inversesqrt(dot(vec3(_1549, _1550, _1551), vec3(_1549, _1550, _1551)));
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2492 < ((_2490 >> 12u) & 15u))
            {
                float _2607;
                float _2609;
                float _2611;
                float _2613;
                float _2615;
                float _2617;
                float _2763 = _2475;
                float _2764 = _2477;
                float _2765 = _2479;
                float _2766 = _2481;
                float _2767 = _2483;
                float _2768 = _2485;
                uint _2769 = _2492;
                uint _2778;
                bool _2779;
                for (;;)
                {
                    _2778 = texelFetch(g_lightClassification, int((((_2359 << 5u) + (_2345 << 9u)) + (_2769 << 2u)) >> 2u)).x;
                    _2779 = _2778 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_2779)
                    {
                        frontier_phi_84_pred = _2767;
                        frontier_phi_84_pred_1 = _2766;
                        frontier_phi_84_pred_2 = _2765;
                        frontier_phi_84_pred_3 = _2764;
                        frontier_phi_84_pred_4 = _2763;
                        frontier_phi_84_pred_5 = _2768;
                    }
                    else
                    {
                        float _2922;
                        float _2923;
                        float _2924;
                        float _2925;
                        float _2926;
                        float _2927;
                        float _3174;
                        float _3175;
                        float _3176;
                        float _3177;
                        float _3178;
                        float _3179;
                        float _2935 = _2763;
                        float _2936 = _2764;
                        float _2937 = _2765;
                        float _2938 = _2766;
                        float _2939 = _2767;
                        float _2940 = _2768;
                        uint _2941 = _2778;
                        uint _2942;
                        vec4 _2967;
                        float _2968;
                        vec4 _2983;
                        vec3 _2995;
                        vec4 _3011;
                        vec4 _3027;
                        float _3074;
                        bool _3075;
                        for (;;)
                        {
                            uint _2952 = ((_2769 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2941));
                            _2942 = (_2941 + 4294967295u) & _2941;
                            uint _2954 = _2952 * 40u;
                            _2967 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2954)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2954 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2954 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2954 + 3u)).x));
                            _2968 = _2967.w;
                            uint _2970 = (_2952 * 40u) + 4u;
                            _2983 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2970)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 3u)).x));
                            uint _2985 = (_2952 * 40u) + 8u;
                            _2995 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2985)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2985 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2985 + 2u)).x));
                            uint _2998 = (_2952 * 40u) + 16u;
                            _3011 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2998)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2998 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2998 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2998 + 3u)).x));
                            uint _3014 = (_2952 * 40u) + 20u;
                            _3027 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3014)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 3u)).x));
                            uint _3030 = (_2952 * 40u) + 24u;
                            vec4 _3043 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3030)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3030 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3030 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3030 + 3u)).x));
                            uint _3049 = (_2952 * 40u) + 28u;
                            vec4 _3062 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3049)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 3u)).x));
                            _3074 = fma(_1551, _3062.z, fma(_1550, _3062.y, _3062.x * _1549)) + _3062.w;
                            _3075 = !((fma(_1551, _3043.z, fma(_1550, _3043.y, _3043.x * _1549)) + _3043.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3075)
                            {
                                float _3102 = _2967.x - _1549;
                                float _3103 = _2967.y - _1550;
                                float _3104 = _2967.z - _1551;
                                float _3105 = dot(vec3(_3102, _3103, _3104), vec3(_3102, _3103, _3104));
                                float _3108 = inversesqrt(_3105);
                                float _3109 = _3108 * _3102;
                                float _3110 = _3108 * _3103;
                                float _3111 = _3108 * _3104;
                                float _3115 = 1.0 - (_3105 / (_2968 * _2968));
                                float _4119 = isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : max(_3115, 0.0));
                                float _3116 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
                                float _3120 = sqrt(_3105) * _2983.w;
                                float _3122 = 1.39999997615814208984375 / (_3120 + 1.39999997615814208984375);
                                float _3123 = _3122 * _3122;
                                float _3124 = 1.0 - _3123;
                                float _3126 = (_3124 * dot(vec3(_3109, _3110, _3111), vec3(_429, _432, _435))) + _3123;
                                float _3129 = _3120 * _3120;
                                float _3133 = (fma(_1551, _3011.z, fma(_1550, _3011.y, _3011.x * _1549)) + _3011.w) / _3074;
                                float _3134 = (fma(_1551, _3027.z, fma(_1550, _3027.y, _3027.x * _1549)) + _3027.w) / _3074;
                                float _3138 = 1.0 - dot(vec2(_3133, _3134), vec2(_3133, _3134));
                                float _4135 = isnan(0.0) ? _3138 : (isnan(_3138) ? 0.0 : max(_3138, 0.0));
                                float _3139 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
                                float _3140 = _3139 * (((isnan(0.0) ? _3126 : (isnan(_3126) ? 0.0 : max(_3126, 0.0))) * _3116) / ((_3129 * 0.699999988079071044921875) + 1.0));
                                float _3150 = dot(vec3(_429, _432, _435), vec3((-0.0) - (_1549 * _2631), (-0.0) - (_1550 * _2631), (-0.0) - (_1551 * _2631)));
                                float _4146 = isnan(0.0) ? _3150 : (isnan(_3150) ? 0.0 : max(_3150, 0.0));
                                float _3158 = (_3124 * dot(vec3(_429, _432, _435), vec3(_3109, _3110, _3111))) + _3123;
                                float _4157 = isnan(0.0) ? _3158 : (isnan(_3158) ? 0.0 : max(_3158, 0.0));
                                float _3159 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
                                float _3163 = (0.5 / (((isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0))) + 9.9999999392252902907785028219223e-09) + _3159)) * _3159;
                                float _4168 = isnan(0.0) ? _3163 : (isnan(_3163) ? 0.0 : max(_3163, 0.0));
                                float _3170 = (_3139 * _3116) * (((isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0))) * 3.1415927410125732421875) / ((_3129 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_90_pred = _3140 * _2983.y;
                                frontier_phi_90_pred_1 = _3140 * _2983.x;
                                frontier_phi_90_pred_2 = _3170 * _2995.z;
                                frontier_phi_90_pred_3 = _3170 * _2995.y;
                                frontier_phi_90_pred_4 = _3170 * _2995.x;
                                frontier_phi_90_pred_5 = _3140 * _2983.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3178 = frontier_phi_90_pred;
                            _3177 = frontier_phi_90_pred_1;
                            _3176 = frontier_phi_90_pred_2;
                            _3175 = frontier_phi_90_pred_3;
                            _3174 = frontier_phi_90_pred_4;
                            _3179 = frontier_phi_90_pred_5;
                            _2925 = _3177 + _2938;
                            _2926 = _3178 + _2939;
                            _2927 = _3179 + _2940;
                            _2922 = _3174 + _2935;
                            _2923 = _3175 + _2936;
                            _2924 = _3176 + _2937;
                            if (_2942 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2935 = _2922;
                                _2936 = _2923;
                                _2937 = _2924;
                                _2938 = _2925;
                                _2939 = _2926;
                                _2940 = _2927;
                                _2941 = _2942;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _2926;
                        frontier_phi_84_pred_1 = _2925;
                        frontier_phi_84_pred_2 = _2924;
                        frontier_phi_84_pred_3 = _2923;
                        frontier_phi_84_pred_4 = _2922;
                        frontier_phi_84_pred_5 = _2927;
                    }
                    _2615 = frontier_phi_84_pred;
                    _2613 = frontier_phi_84_pred_1;
                    _2611 = frontier_phi_84_pred_2;
                    _2609 = frontier_phi_84_pred_3;
                    _2607 = frontier_phi_84_pred_4;
                    _2617 = frontier_phi_84_pred_5;
                    uint _2770 = _2769 + 1u;
                    if (_2770 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2763 = _2607;
                        _2764 = _2609;
                        _2765 = _2611;
                        _2766 = _2613;
                        _2767 = _2615;
                        _2768 = _2617;
                        _2769 = _2770;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2617;
                frontier_phi_65_66_ladder_1 = _2613;
                frontier_phi_65_66_ladder_2 = _2615;
                frontier_phi_65_66_ladder_3 = _2609;
                frontier_phi_65_66_ladder_4 = _2607;
                frontier_phi_65_66_ladder_5 = _2611;
            }
            else
            {
                frontier_phi_65_66_ladder = _2485;
                frontier_phi_65_66_ladder_1 = _2481;
                frontier_phi_65_66_ladder_2 = _2483;
                frontier_phi_65_66_ladder_3 = _2477;
                frontier_phi_65_66_ladder_4 = _2475;
                frontier_phi_65_66_ladder_5 = _2479;
            }
            _2606 = frontier_phi_65_66_ladder_4;
            _2608 = frontier_phi_65_66_ladder_3;
            _2610 = frontier_phi_65_66_ladder_5;
            _2612 = frontier_phi_65_66_ladder_1;
            _2614 = frontier_phi_65_66_ladder_2;
            _2616 = frontier_phi_65_66_ladder;
        }
        float _2621 = isnan(1.0) ? _473 : (isnan(_473) ? 1.0 : min(_473, 1.0));
        _2377 = (_2621 * _2612) + _2017;
        _2379 = (_2621 * _2614) + _2019;
        _2381 = (_2621 * _2616) + _2021;
        _2383 = ((_2606 * 0.039999999105930328369140625) * _2621) + _2259;
        _2385 = ((_2608 * 0.039999999105930328369140625) * _2621) + _2261;
        _2387 = ((_2610 * 0.039999999105930328369140625) * _2621) + _2263;
    }
    else
    {
        _2377 = _2017;
        _2379 = _2019;
        _2381 = _2021;
        _2383 = _2259;
        _2385 = _2261;
        _2387 = _2263;
    }
    uint _2393 = _449 + uint(cbMatDynParam._m0[0u].w);
    float _2399 = (((_287.x * cbMtdParam._m0[11u].x) + (_256.x * cbMtdParam._m0[10u].x)) * cbMtdParam._m0[12u].x) * cbInstanceData._m0[_2393].x;
    float _2400 = (((_287.y * cbMtdParam._m0[11u].y) + (_256.y * cbMtdParam._m0[10u].y)) * cbMtdParam._m0[12u].x) * cbInstanceData._m0[_2393].y;
    float _2401 = (((_287.z * cbMtdParam._m0[11u].z) + (_256.z * cbMtdParam._m0[10u].z)) * cbMtdParam._m0[12u].x) * cbInstanceData._m0[_2393].z;
    float _4184 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _4195 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _4206 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _4217 = isnan(0.0) ? _310 : (isnan(_310) ? 0.0 : max(_310, 0.0));
    float _2419 = (((isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0))) * (_2377 + ((isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0))) * _473))) + ((_2383 + ((isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0))) * _1284)) * cbPerFrame._m0[3u].x)) + _2399;
    float _2421 = (_2400 + ((_2385 + ((isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0))) * _1284)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0))) * (_2379 + ((isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0))) * _473)));
    float _2423 = (_2401 + ((_2387 + ((isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0))) * _1284)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0))) * (_2381 + ((isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0))) * _473)));
    float _2424 = isnan(0.0) ? _2419 : (isnan(_2419) ? 0.0 : max(_2419, 0.0));
    float _2425 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
    float _2426 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
    float _2432 = cbMtdParam._m0[2u].x * _2399;
    float _2433 = cbMtdParam._m0[2u].y * _2400;
    float _2434 = cbMtdParam._m0[2u].z * _2401;
    float _4243 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2436 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
    float _2441 = cbInstanceData._m0[_448 + 6u].w * (isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0)));
    float _2446 = _408 / cbSceneParam._m0[86u].x;
    float _2447 = _409 / cbSceneParam._m0[86u].y;
    vec4 _2461 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2446, _2447, (log2((isnan(cbSceneParam._m0[77u].w) ? _329 : (isnan(_329) ? cbSceneParam._m0[77u].w : min(_329, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2463 = _2461.x;
    float _2464 = _2461.y;
    float _2465 = _2461.z;
    float _2466 = _2461.w;
    float _2537;
    float _2539;
    float _2541;
    float _2543;
    if (_329 > cbSceneParam._m0[78u].w)
    {
        float _2500 = isnan(_329) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _329 : min(cbSceneParam._m0[80u].w, _329));
        float _2501 = _2500 / _329;
        float _2512 = _2501 * _380;
        float _2513 = _381 * _2501;
        float _2514 = (-0.0) - _2513;
        float _2515 = _2501 * _382;
        float _2517 = (cbSceneParam._m0[77u].w * _2514) / _2500;
        float _2518 = _2517 + cbSceneParam._m0[79u].w;
        float _2519 = cbSceneParam._m0[79u].w - _2513;
        float _2525 = sqrt(((_2512 * _2512) + (_2513 * _2513)) + (_2515 * _2515));
        float _2528 = (1.0 - (cbSceneParam._m0[77u].w / _2500)) * _2525;
        float _2533 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2535 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2720;
        if (abs((_2514 - _2517) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2720 = ((((_2518 > 0.0) ? exp2(_2533 * _2518) : (2.0 - exp2(_2535 * _2518))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2528;
        }
        else
        {
            float _2664 = 1.0 / cbSceneParam._m0[80u].x;
            float _2665 = isnan(_2519) ? _2518 : (isnan(_2518) ? _2519 : max(_2518, _2519));
            float _2666 = isnan(_2519) ? _2518 : (isnan(_2518) ? _2519 : min(_2518, _2519));
            float _2675 = isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : min(_2665, 0.0));
            float _2676 = isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : min(_2666, 0.0));
            _2720 = ((abs(_2525 / _2514) * cbSceneParam._m0[80u].y) * ((((_2675 - _2676) * 2.0) - ((exp2(_2533 * (isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0)))) - exp2(_2533 * (isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : max(_2666, 0.0))))) * _2664)) - ((exp2(_2535 * _2675) - exp2(_2535 * _2676)) * _2664))) + (_2528 * cbSceneParam._m0[80u].z);
        }
        vec4 _2722 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2446, _2447, 1.0), 0.0);
        float _2731 = exp2((_2720 * (-1.44269502162933349609375)) * (1.0 - _2722.w));
        float _2732 = log2(_2731);
        float _2748 = log2(_2466);
        _2537 = (exp2(_2748 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2732 * cbSceneParam._m0[78u].x)) * _2722.x) / cbSceneParam._m0[78u].x)) + _2463;
        _2539 = (exp2(_2748 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2732 * cbSceneParam._m0[78u].y)) * _2722.y) / cbSceneParam._m0[78u].y)) + _2464;
        _2541 = (exp2(_2748 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2732 * cbSceneParam._m0[78u].z)) * _2722.z) / cbSceneParam._m0[78u].z)) + _2465;
        _2543 = _2731 * _2466;
    }
    else
    {
        _2537 = _2463;
        _2539 = _2464;
        _2541 = _2465;
        _2543 = _2466;
    }
    bool _2758;
    vec4 _2553;
    vec4 _2576;
    float _2578;
    float _2582;
    float _2583;
    float _2584;
    float _2587;
    float _2590;
    float _2593;
    float _2594;
    bool _2605;
    for (;;)
    {
        _2553 = cbMatDynParam._m0[0u];
        float _2555 = roundEven(_2553.y);
        bool _2556 = _2555 == 3.0;
        float _2558 = log2(_2543);
        float _2562 = exp2(_2558 * cbSceneParam._m0[78u].x);
        float _2563 = exp2(_2558 * cbSceneParam._m0[78u].y);
        float _2564 = exp2(_2558 * cbSceneParam._m0[78u].z);
        float _2565 = _2562 * _2424;
        float _2566 = _2563 * _2425;
        float _2567 = _2564 * _2426;
        float _2574 = _396 + (-0.5);
        _2576 = cbMtdParam._m0[1u];
        _2578 = _2576.y * _2574;
        float _2581 = (_2555 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2582 = _2581 * (_2556 ? _2565 : (_2565 + (cbSceneParam._m0[72u].w * _2537)));
        _2583 = _2581 * (_2556 ? _2566 : (_2566 + (cbSceneParam._m0[72u].w * _2539)));
        _2584 = _2581 * (_2556 ? _2567 : (_2567 + (cbSceneParam._m0[72u].w * _2541)));
        _2587 = ((_2432 * _2436) * _2562) * _2581;
        _2590 = ((_2433 * _2436) * _2563) * _2581;
        _2593 = ((_2434 * _2436) * _2564) * _2581;
        _2594 = _2574 * 0.999000012874603271484375;
        _2605 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2605)
        {
            if ((cbInstanceData._m0[_448 + 7u].x + _2594) < 0.5)
            {
                _2758 = true;
                break;
            }
        }
        uint _2699 = _449 + uint(_2553.w);
        if ((cbInstanceData._m0[_2699].w < 1.0) && ((cbInstanceData._m0[_2699].w + _2594) < 0.5))
        {
            _2758 = true;
            break;
        }
        if ((_2578 + _228) < _2576.x)
        {
            _2758 = true;
            break;
        }
        _2758 = false;
        break;
    }
    float _2913;
    if (_2758)
    {
        discard_state = true;
        _2913 = 0.0;
    }
    else
    {
        _2913 = _2441;
    }
    SV_Target.x = _2582;
    SV_Target.y = _2583;
    SV_Target.z = _2584;
    SV_Target.w = _2913;
    SV_Target_1.x = _2587;
    SV_Target_1.y = _2590;
    SV_Target_1.z = _2593;
    SV_Target_1.w = _2441;
    discard_exit();
}


