#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_ER_Emissive_Glow_Addition_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_ER_Emissive_Glow_Addition_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_ER_Emissive_Glow_Addition_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _844;
float _3070;
float _3071;
float _3072;
float _3073;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _177 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _178 = _177 * NORMAL.x;
    float _179 = _177 * NORMAL.y;
    float _180 = _177 * NORMAL.z;
    float _185;
    float _186;
    float _187;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _185 = (-0.0) - _178;
        _186 = (-0.0) - _179;
        _187 = (-0.0) - _180;
    }
    else
    {
        _185 = _178;
        _186 = _179;
        _187 = _180;
    }
    vec4 _216 = texture(sampler2D(M_ER_Emissive_Glow_Addition_snp_0_Texture2D_0, SS_DiffuseMap), vec2((((cbMtdParam._m0[12u].y * cbPerFrame._m0[22u].x) + TEXCOORD_1.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((cbMtdParam._m0[12u].z * cbPerFrame._m0[22u].x) + TEXCOORD_1.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _223 = _216.x * cbMtdParam._m0[9u].x;
    float _224 = _216.y * cbMtdParam._m0[9u].y;
    float _225 = _216.z * cbMtdParam._m0[9u].z;
    float _226 = _216.w * cbMtdParam._m0[9u].w;
    float _227 = _226 * TEXCOORD_1.z;
    vec4 _254 = texture(sampler2D(M_ER_Emissive_Glow_Addition_snp_0_Texture2D_2, SS_DiffuseMap), vec2((((cbMtdParam._m0[12u].w * cbPerFrame._m0[22u].x) + TEXCOORD_1.x) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((cbMtdParam._m0[13u].x * cbPerFrame._m0[22u].x) + TEXCOORD_1.y) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    vec4 _285 = texture(sampler2D(M_ER_Emissive_Glow_Addition_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((cbMtdParam._m0[13u].y * cbPerFrame._m0[22u].x) + TEXCOORD_1.x) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((cbMtdParam._m0[13u].z * cbPerFrame._m0[22u].x) + TEXCOORD_1.y) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _303 = inversesqrt(dot(vec3(_185, _186, _187), vec3(_185, _186, _187)));
    float _304 = _303 * _185;
    float _305 = _303 * _186;
    float _306 = _303 * _187;
    float _3082 = isnan(0.0) ? _227 : (isnan(_227) ? 0.0 : max(_227, 0.0));
    float _308 = isnan(1.0) ? _3082 : (isnan(_3082) ? 1.0 : min(_3082, 1.0));
    float _3093 = isnan(0.0) ? _223 : (isnan(_223) ? 0.0 : max(_223, 0.0));
    float _3104 = isnan(0.0) ? _224 : (isnan(_224) ? 0.0 : max(_224, 0.0));
    float _3115 = isnan(0.0) ? _225 : (isnan(_225) ? 0.0 : max(_225, 0.0));
    float _327 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _368 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _378 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _368);
    float _379 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _368);
    float _380 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _368);
    float _384 = inversesqrt(dot(vec3(_378, _379, _380), vec3(_378, _379, _380)));
    float _385 = _378 * _384;
    float _386 = _379 * _384;
    float _387 = _380 * _384;
    vec4 _392 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _394 = _392.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _523 = sqrt(((_378 * _378) + (_379 * _379)) + (_380 * _380));
        float _529 = (cbMatDynParam._m0[5u].x * _523) + cbMatDynParam._m0[5u].y;
        float _3126 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
        float _530 = isnan(1.0) ? _3126 : (isnan(_3126) ? 1.0 : min(_3126, 1.0));
        float _534 = (cbMatDynParam._m0[5u].z * _523) + cbMatDynParam._m0[5u].w;
        float _3137 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3137 : (isnan(_3137) ? 1.0 : min(_3137, 1.0))) - _530)) + _530) < ((_394 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _406 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _407 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _427 = fma(_306, cbSceneParam._m0[5u].z, fma(_305, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _304));
    float _430 = fma(_306, cbSceneParam._m0[6u].z, fma(_305, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _304));
    float _433 = fma(_306, cbSceneParam._m0[7u].z, fma(_305, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _304));
    uint _446 = uint(roundEven(NORMAL.w)) * 13u;
    uint _447 = _446 + 9u;
    uint _448 = _447 + uint(cbMatDynParam._m0[0u].w);
    float _454 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3093 : (isnan(_3093) ? 1.0 : min(_3093, 1.0)))) * cbInstanceData._m0[_448].x;
    float _455 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3104 : (isnan(_3104) ? 1.0 : min(_3104, 1.0)))) * cbInstanceData._m0[_448].y;
    float _456 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3115 : (isnan(_3115) ? 1.0 : min(_3115, 1.0)))) * cbInstanceData._m0[_448].z;
    float _3148 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _457 = isnan(1.0) ? _3148 : (isnan(_3148) ? 1.0 : min(_3148, 1.0));
    float _3159 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _458 = isnan(1.0) ? _3159 : (isnan(_3159) ? 1.0 : min(_3159, 1.0));
    float _3170 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _459 = isnan(1.0) ? _3170 : (isnan(_3170) ? 1.0 : min(_3170, 1.0));
    vec4 _468 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _406, cbSceneParam._m0[86u].y * _407));
    float _471 = _468.x * TEXCOORD_1.w;
    float _472 = dot(vec3(_304, _305, _306), vec3(_385, _386, _387));
    float _475 = _472 * 2.0;
    float _480 = (_475 * _304) - _385;
    float _481 = (_475 * _305) - _386;
    float _482 = (_475 * _306) - _387;
    float _504 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _508 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _512 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _843;
    float _845;
    float _846;
    float _847;
    float _848;
    float _849;
    float _850;
    float _851;
    float _852;
    float _853;
    float _854;
    float _855;
    float _856;
    float _857;
    float _858;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _568 = fma(_512, cbModelParam._m0[26u].z, fma(_508, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _504));
        float _572 = fma(_512, cbModelParam._m0[27u].z, fma(_508, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _504));
        float _576 = fma(_512, cbModelParam._m0[28u].z, fma(_508, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _504));
        float _601 = _504 + _304;
        float _602 = _508 + _305;
        float _603 = _512 + _306;
        float _613 = fma(_603, cbModelParam._m0[26u].z, fma(_602, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _601)) - _568;
        float _614 = fma(_603, cbModelParam._m0[27u].z, fma(_602, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _601)) - _572;
        float _615 = fma(_603, cbModelParam._m0[28u].z, fma(_602, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _601)) - _576;
        float _619 = inversesqrt(dot(vec3(_613, _614, _615), vec3(_613, _614, _615)));
        float _632 = ((_619 * _613) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_568 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _633 = ((_619 * _614) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_572 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _634 = ((_619 * _615) / cbModelParam._m0[34u].z) + ((((((_576 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _637 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_632, _633, _634), 0.0);
        vec4 _644 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_632, _633, _634), 0.0);
        vec4 _651 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_632, _633, _634), 0.0);
        vec4 _658 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_632, _633, _634), 0.0);
        float _671 = exp2((_637.w + (-0.5)) * 20.0) * 2.0;
        float _672 = _671 * (_637.x + (-0.5));
        float _673 = _671 * (_637.y + (-0.5));
        float _674 = _671 * (_637.z + (-0.5));
        float _681 = exp2((_644.w + (-0.5)) * 20.0) * 2.0;
        float _682 = _681 * (_644.x + (-0.5));
        float _683 = _681 * (_644.y + (-0.5));
        float _684 = _681 * (_644.z + (-0.5));
        float _691 = exp2((_651.w + (-0.5)) * 20.0) * 2.0;
        float _692 = _691 * (_651.x + (-0.5));
        float _693 = _691 * (_651.y + (-0.5));
        float _694 = _691 * (_651.z + (-0.5));
        float _701 = exp2((_658.w + (-0.5)) * 20.0) * 2.0;
        float _702 = _701 * (_658.x + (-0.5));
        float _703 = _701 * (_658.y + (-0.5));
        float _704 = _701 * (_658.z + (-0.5));
        float _705 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
        float _706 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
        float _707 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
        float _708 = _672 * 0.5;
        float _709 = _682 * 0.5;
        float _710 = _692 * 0.5;
        float _711 = dot(vec3(_708, _709, _710), vec3(_708, _709, _710));
        float _716 = (_711 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_711);
        float _725 = (dot(vec3(_304, _305, _306), vec3(_716 * _708, _716 * _709, _716 * _710)) + 1.0) * 0.5;
        float _3196 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
        float _735 = sqrt(((_709 * _709) + (_708 * _708)) + (_710 * _710)) / (_705 + 9.9999997473787516355514526367188e-06);
        float _3207 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
        float _736 = isnan(1.0) ? _3207 : (isnan(_3207) ? 1.0 : min(_3207, 1.0));
        float _737 = _736 * 2.0;
        float _741 = (1.0 - _736) / (_736 + 1.0);
        float _3218 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
        float _742 = isnan(1.0) ? _3218 : (isnan(_3218) ? 1.0 : min(_3218, 1.0));
        float _751 = ((((1.0 - _742) * (_737 + 2.0)) * exp2(log2(isnan(1.0) ? _3196 : (isnan(_3196) ? 1.0 : min(_3196, 1.0))) * (_737 + 1.0))) + _742) * _705;
        float _752 = _673 * 0.5;
        float _753 = _683 * 0.5;
        float _754 = _693 * 0.5;
        float _755 = dot(vec3(_752, _753, _754), vec3(_752, _753, _754));
        float _760 = (_755 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_755);
        float _768 = (dot(vec3(_304, _305, _306), vec3(_760 * _752, _760 * _753, _760 * _754)) + 1.0) * 0.5;
        float _3229 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
        float _777 = sqrt(((_753 * _753) + (_752 * _752)) + (_754 * _754)) / (_706 + 9.9999997473787516355514526367188e-06);
        float _3240 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
        float _778 = isnan(1.0) ? _3240 : (isnan(_3240) ? 1.0 : min(_3240, 1.0));
        float _779 = _778 * 2.0;
        float _783 = (1.0 - _778) / (_778 + 1.0);
        float _3251 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
        float _784 = isnan(1.0) ? _3251 : (isnan(_3251) ? 1.0 : min(_3251, 1.0));
        float _793 = ((((1.0 - _784) * (_779 + 2.0)) * exp2(log2(isnan(1.0) ? _3229 : (isnan(_3229) ? 1.0 : min(_3229, 1.0))) * (_779 + 1.0))) + _784) * _706;
        float _794 = _674 * 0.5;
        float _795 = _684 * 0.5;
        float _796 = _694 * 0.5;
        float _797 = dot(vec3(_794, _795, _796), vec3(_794, _795, _796));
        float _802 = (_797 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_797);
        float _810 = (dot(vec3(_304, _305, _306), vec3(_802 * _794, _802 * _795, _802 * _796)) + 1.0) * 0.5;
        float _3262 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
        float _819 = sqrt(((_795 * _795) + (_794 * _794)) + (_796 * _796)) / (_707 + 9.9999997473787516355514526367188e-06);
        float _3273 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
        float _820 = isnan(1.0) ? _3273 : (isnan(_3273) ? 1.0 : min(_3273, 1.0));
        float _821 = _820 * 2.0;
        float _825 = (1.0 - _820) / (_820 + 1.0);
        float _3284 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
        float _826 = isnan(1.0) ? _3284 : (isnan(_3284) ? 1.0 : min(_3284, 1.0));
        float _835 = ((((1.0 - _826) * (_821 + 2.0)) * exp2(log2(isnan(1.0) ? _3262 : (isnan(_3262) ? 1.0 : min(_3262, 1.0))) * (_821 + 1.0))) + _826) * _707;
        _843 = _674;
        _845 = _673;
        _846 = _672;
        _847 = _684;
        _848 = _683;
        _849 = _682;
        _850 = _694;
        _851 = _693;
        _852 = _692;
        _853 = _707;
        _854 = _706;
        _855 = _705;
        _856 = cbModelParam._m0[36u].z * (isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0)));
        _857 = cbModelParam._m0[36u].z * (isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0)));
        _858 = cbModelParam._m0[36u].z * (isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0)));
    }
    else
    {
        _843 = _844;
        _845 = _844;
        _846 = _844;
        _847 = _844;
        _848 = _844;
        _849 = _844;
        _850 = _844;
        _851 = _844;
        _852 = _844;
        _853 = _844;
        _854 = _844;
        _855 = _844;
        _856 = 0.0;
        _857 = 0.0;
        _858 = 0.0;
    }
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _887 = fma(_512, cbModelParam._m0[30u].z, fma(_508, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _504));
        float _891 = fma(_512, cbModelParam._m0[31u].z, fma(_508, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _504));
        float _895 = fma(_512, cbModelParam._m0[32u].z, fma(_508, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _504));
        float _918 = _504 + _304;
        float _919 = _508 + _305;
        float _920 = _512 + _306;
        float _930 = fma(_920, cbModelParam._m0[30u].z, fma(_919, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _918)) - _887;
        float _931 = fma(_920, cbModelParam._m0[31u].z, fma(_919, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _918)) - _891;
        float _932 = fma(_920, cbModelParam._m0[32u].z, fma(_919, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _918)) - _895;
        float _936 = inversesqrt(dot(vec3(_930, _931, _932), vec3(_930, _931, _932)));
        float _949 = ((_936 * _930) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_887 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _950 = ((_936 * _931) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_891 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _951 = ((_936 * _932) / cbModelParam._m0[35u].z) + ((((((_895 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _953 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_949, _950, _951), 0.0);
        vec4 _960 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_949, _950, _951), 0.0);
        vec4 _967 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_949, _950, _951), 0.0);
        vec4 _974 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_949, _950, _951), 0.0);
        float _986 = exp2((_953.w + (-0.5)) * 20.0) * 2.0;
        float _987 = _986 * (_953.x + (-0.5));
        float _988 = _986 * (_953.y + (-0.5));
        float _989 = _986 * (_953.z + (-0.5));
        float _996 = exp2((_960.w + (-0.5)) * 20.0) * 2.0;
        float _997 = _996 * (_960.x + (-0.5));
        float _998 = _996 * (_960.y + (-0.5));
        float _999 = _996 * (_960.z + (-0.5));
        float _1006 = exp2((_967.w + (-0.5)) * 20.0) * 2.0;
        float _1007 = _1006 * (_967.x + (-0.5));
        float _1008 = _1006 * (_967.y + (-0.5));
        float _1009 = _1006 * (_967.z + (-0.5));
        float _1016 = exp2((_974.w + (-0.5)) * 20.0) * 2.0;
        float _1017 = _1016 * (_974.x + (-0.5));
        float _1018 = _1016 * (_974.y + (-0.5));
        float _1019 = _1016 * (_974.z + (-0.5));
        float _1020 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1021 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1022 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1023 = _987 * 0.5;
        float _1024 = _997 * 0.5;
        float _1025 = _1007 * 0.5;
        float _1026 = dot(vec3(_1023, _1024, _1025), vec3(_1023, _1024, _1025));
        float _1031 = (_1026 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1026);
        float _1039 = (dot(vec3(_304, _305, _306), vec3(_1031 * _1023, _1031 * _1024, _1031 * _1025)) + 1.0) * 0.5;
        float _3325 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1048 = sqrt(((_1024 * _1024) + (_1023 * _1023)) + (_1025 * _1025)) / (_1020 + 9.9999997473787516355514526367188e-06);
        float _3336 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1049 = isnan(1.0) ? _3336 : (isnan(_3336) ? 1.0 : min(_3336, 1.0));
        float _1050 = _1049 * 2.0;
        float _1054 = (1.0 - _1049) / (_1049 + 1.0);
        float _3347 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1055 = isnan(1.0) ? _3347 : (isnan(_3347) ? 1.0 : min(_3347, 1.0));
        float _1064 = ((((1.0 - _1055) * (_1050 + 2.0)) * exp2(log2(isnan(1.0) ? _3325 : (isnan(_3325) ? 1.0 : min(_3325, 1.0))) * (_1050 + 1.0))) + _1055) * _1020;
        float _1065 = _988 * 0.5;
        float _1066 = _998 * 0.5;
        float _1067 = _1008 * 0.5;
        float _1068 = dot(vec3(_1065, _1066, _1067), vec3(_1065, _1066, _1067));
        float _1073 = (_1068 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1068);
        float _1081 = (dot(vec3(_304, _305, _306), vec3(_1073 * _1065, _1073 * _1066, _1073 * _1067)) + 1.0) * 0.5;
        float _3358 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1090 = sqrt(((_1066 * _1066) + (_1065 * _1065)) + (_1067 * _1067)) / (_1021 + 9.9999997473787516355514526367188e-06);
        float _3369 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1091 = isnan(1.0) ? _3369 : (isnan(_3369) ? 1.0 : min(_3369, 1.0));
        float _1092 = _1091 * 2.0;
        float _1096 = (1.0 - _1091) / (_1091 + 1.0);
        float _3380 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1097 = isnan(1.0) ? _3380 : (isnan(_3380) ? 1.0 : min(_3380, 1.0));
        float _1106 = ((((1.0 - _1097) * (_1092 + 2.0)) * exp2(log2(isnan(1.0) ? _3358 : (isnan(_3358) ? 1.0 : min(_3358, 1.0))) * (_1092 + 1.0))) + _1097) * _1021;
        float _1107 = _989 * 0.5;
        float _1108 = _999 * 0.5;
        float _1109 = _1009 * 0.5;
        float _1110 = dot(vec3(_1107, _1108, _1109), vec3(_1107, _1108, _1109));
        float _1115 = (_1110 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1110);
        float _1123 = (dot(vec3(_304, _305, _306), vec3(_1115 * _1107, _1115 * _1108, _1115 * _1109)) + 1.0) * 0.5;
        float _3391 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1132 = sqrt(((_1108 * _1108) + (_1107 * _1107)) + (_1109 * _1109)) / (_1022 + 9.9999997473787516355514526367188e-06);
        float _3402 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1133 = isnan(1.0) ? _3402 : (isnan(_3402) ? 1.0 : min(_3402, 1.0));
        float _1134 = _1133 * 2.0;
        float _1138 = (1.0 - _1133) / (_1133 + 1.0);
        float _3413 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1139 = isnan(1.0) ? _3413 : (isnan(_3413) ? 1.0 : min(_3413, 1.0));
        float _1148 = ((((1.0 - _1139) * (_1134 + 2.0)) * exp2(log2(isnan(1.0) ? _3391 : (isnan(_3391) ? 1.0 : min(_3391, 1.0))) * (_1134 + 1.0))) + _1139) * _1022;
        _1156 = _989;
        _1157 = _988;
        _1158 = _987;
        _1159 = _999;
        _1160 = _998;
        _1161 = _997;
        _1162 = _1009;
        _1163 = _1008;
        _1164 = _1007;
        _1165 = _1022;
        _1166 = _1021;
        _1167 = _1020;
        _1168 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0)));
        _1169 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0)));
        _1170 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0)));
    }
    else
    {
        _1156 = _844;
        _1157 = _844;
        _1158 = _844;
        _1159 = _844;
        _1160 = _844;
        _1161 = _844;
        _1162 = _844;
        _1163 = _844;
        _1164 = _844;
        _1165 = _844;
        _1166 = _844;
        _1167 = _844;
        _1168 = 0.0;
        _1169 = 0.0;
        _1170 = 0.0;
    }
    float _1180 = (cbModelParam._m0[1u].x * (_1168 - _856)) + _856;
    float _1181 = (cbModelParam._m0[1u].x * (_1169 - _857)) + _857;
    float _1182 = (cbModelParam._m0[1u].x * (_1170 - _858)) + _858;
    float _1203 = fma(_1182, cbSceneParam._m0[89u].z, fma(_1181, cbSceneParam._m0[89u].y, _1180 * cbSceneParam._m0[89u].x));
    float _1206 = fma(_1182, cbSceneParam._m0[90u].z, fma(_1181, cbSceneParam._m0[90u].y, _1180 * cbSceneParam._m0[90u].x));
    float _1209 = fma(_1182, cbSceneParam._m0[91u].z, fma(_1181, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1180));
    float _1224 = _480 * 0.5;
    float _1225 = _481 * 0.5;
    float _1226 = _482 * 0.5;
    float _1227 = dot(vec4(_1224, _1225, _1226, 1.0), vec4(_1158, _1161, _1164, _1167));
    float _1230 = dot(vec4(_1224, _1225, _1226, 1.0), vec4(_1157, _1160, _1163, _1166));
    float _1233 = dot(vec4(_1224, _1225, _1226, 1.0), vec4(_1156, _1159, _1162, _1165));
    float _1267;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1240 = dot(vec4(_1224, _1225, _1226, 1.0), vec4(_843, _847, _850, _853));
        float _1244 = dot(vec4(_1224, _1225, _1226, 1.0), vec4(_845, _848, _851, _854));
        float _1248 = dot(vec4(_1224, _1225, _1226, 1.0), vec4(_846, _849, _852, _855));
        float _1255 = dot(vec4(cbModelParam._m0[39u]), vec4(_1224, _1225, _1226, 1.0));
        _1267 = dot(vec3(isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0)), isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0)), isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1255) ? 0.0 : (isnan(0.0) ? _1255 : max(0.0, _1255))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1267 = 1.0;
    }
    float _1278;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1269 = dot(vec4(cbModelParam._m0[40u]), vec4(_1224, _1225, _1226, 1.0));
        _1278 = dot(vec3(isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0)), isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0)), isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1269) ? 0.0 : (isnan(0.0) ? _1269 : max(0.0, _1269))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1278 = 1.0;
    }
    float _1282 = (_1278 * cbModelParam._m0[1u].x) + (_1267 * (1.0 - cbModelParam._m0[1u].x));
    float _1291 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1372;
    float _1374;
    float _1376;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1339 = fma(_512, cbModelParam._m0[13u].z, fma(_508, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _504)) + cbModelParam._m0[13u].w;
        float _1343 = fma(_512, cbModelParam._m0[14u].z, fma(_508, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _504)) + cbModelParam._m0[14u].w;
        float _1347 = fma(_512, cbModelParam._m0[15u].z, fma(_508, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _504)) + cbModelParam._m0[15u].w;
        float _1350 = fma(_482, cbModelParam._m0[13u].z, fma(_481, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _480));
        float _1353 = fma(_482, cbModelParam._m0[14u].z, fma(_481, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _480));
        float _1356 = fma(_482, cbModelParam._m0[15u].z, fma(_481, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _480));
        float _1382;
        if (_1350 > 0.0)
        {
            _1382 = abs((1.0 - _1339) / _1350);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1350 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1339 + 1.0) / _1350);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1382 = frontier_phi_19_17_ladder;
        }
        float _1609;
        if (_1353 > 0.0)
        {
            _1609 = abs((1.0 - _1343) / _1353);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1353 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1343 + 1.0) / _1353);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1609 = frontier_phi_28_24_ladder;
        }
        float _1801;
        if (_1356 > 0.0)
        {
            _1801 = abs((1.0 - _1347) / _1356);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1356 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1347 + 1.0) / _1356);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1801 = frontier_phi_40_35_ladder;
        }
        float _1803 = isnan(_1609) ? _1382 : (isnan(_1382) ? _1609 : min(_1382, _1609));
        float _1804 = isnan(_1801) ? _1803 : (isnan(_1803) ? _1801 : min(_1803, _1801));
        float _1808 = (_1804 * _1350) + _1339;
        float _1809 = (_1804 * _1353) + _1343;
        float _1810 = (_1804 * _1356) + _1347;
        float _1811 = _1804 * 9.9999997473787516355514526367188e-05;
        float _1813 = (-1.0) - _1811;
        float _1815 = _1811 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1810 > _1815) || ((_1810 < _1813) || ((_1809 > _1815) || ((_1809 < _1813) || ((_1808 < _1813) || (_1808 > _1815))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1907 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1810, cbModelParam._m0[9u].z, fma(_1809, cbModelParam._m0[9u].y, _1808 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1810, cbModelParam._m0[10u].z, fma(_1809, cbModelParam._m0[10u].y, _1808 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1810, cbModelParam._m0[11u].z, fma(_1809, cbModelParam._m0[11u].y, _1808 * cbModelParam._m0[11u].x))), _1291);
            frontier_phi_18_40_ladder = _1907.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _1907.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _1907.x * cbModelParam._m0[1u].y;
        }
        _1372 = frontier_phi_18_40_ladder_2;
        _1374 = frontier_phi_18_40_ladder_1;
        _1376 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1360 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_480, _481, _482), _1291);
        _1372 = _1360.x * cbModelParam._m0[1u].y;
        _1374 = _1360.y * cbModelParam._m0[1u].y;
        _1376 = _1360.z * cbModelParam._m0[1u].y;
    }
    float _1379 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1471;
    float _1473;
    float _1475;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1435 = fma(_512, cbModelParam._m0[21u].z, fma(_508, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _504)) + cbModelParam._m0[21u].w;
        float _1439 = fma(_512, cbModelParam._m0[22u].z, fma(_508, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _504)) + cbModelParam._m0[22u].w;
        float _1443 = fma(_512, cbModelParam._m0[23u].z, fma(_508, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _504)) + cbModelParam._m0[23u].w;
        float _1446 = fma(_482, cbModelParam._m0[21u].z, fma(_481, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _480));
        float _1449 = fma(_482, cbModelParam._m0[22u].z, fma(_481, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _480));
        float _1452 = fma(_482, cbModelParam._m0[23u].z, fma(_481, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _480));
        float _1614;
        if (_1446 > 0.0)
        {
            _1614 = abs((1.0 - _1435) / _1446);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1446 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1435 + 1.0) / _1446);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1614 = frontier_phi_30_26_ladder;
        }
        float _1828;
        if (_1449 > 0.0)
        {
            _1828 = abs((1.0 - _1439) / _1449);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1449 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1439 + 1.0) / _1449);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1828 = frontier_phi_42_37_ladder;
        }
        float _1979;
        if (_1452 > 0.0)
        {
            _1979 = abs((1.0 - _1443) / _1452);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1452 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1443 + 1.0) / _1452);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _1979 = frontier_phi_51_48_ladder;
        }
        float _1981 = isnan(_1828) ? _1614 : (isnan(_1614) ? _1828 : min(_1614, _1828));
        float _1982 = isnan(_1979) ? _1981 : (isnan(_1981) ? _1979 : min(_1981, _1979));
        float _1986 = (_1982 * _1446) + _1435;
        float _1987 = (_1982 * _1449) + _1439;
        float _1988 = (_1982 * _1452) + _1443;
        float _1989 = _1982 * 9.9999997473787516355514526367188e-05;
        float _1990 = (-1.0) - _1989;
        float _1992 = _1989 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_1988 > _1992) || ((_1988 < _1990) || ((_1987 > _1992) || ((_1987 < _1990) || ((_1986 < _1990) || (_1986 > _1992))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2217 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1988, cbModelParam._m0[17u].z, fma(_1987, cbModelParam._m0[17u].y, _1986 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1988, cbModelParam._m0[18u].z, fma(_1987, cbModelParam._m0[18u].y, _1986 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1988, cbModelParam._m0[19u].z, fma(_1987, cbModelParam._m0[19u].y, _1986 * cbModelParam._m0[19u].x))), _1379);
            frontier_phi_27_51_ladder = _2217.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2217.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2217.x * cbModelParam._m0[1u].z;
        }
        _1471 = frontier_phi_27_51_ladder_2;
        _1473 = frontier_phi_27_51_ladder_1;
        _1475 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1455 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_480, _481, _482), _1379);
        _1471 = _1455.x * cbModelParam._m0[1u].z;
        _1473 = _1455.y * cbModelParam._m0[1u].z;
        _1475 = _1455.z * cbModelParam._m0[1u].z;
    }
    float _1487 = _471 * 0.01200000010430812835693359375;
    float _1489 = _1487 * ((cbModelParam._m0[1u].w * (_1471 - _1372)) + _1372);
    float _1490 = _1487 * ((cbModelParam._m0[1u].w * (_1473 - _1374)) + _1374);
    float _1491 = _1487 * ((cbModelParam._m0[1u].w * (_1475 - _1376)) + _1376);
    float _1494 = fma(_1491, cbSceneParam._m0[89u].z, fma(_1490, cbSceneParam._m0[89u].y, _1489 * cbSceneParam._m0[89u].x));
    float _1497 = fma(_1491, cbSceneParam._m0[90u].z, fma(_1490, cbSceneParam._m0[90u].y, _1489 * cbSceneParam._m0[90u].x));
    float _1500 = fma(_1491, cbSceneParam._m0[91u].z, fma(_1490, cbSceneParam._m0[91u].y, _1489 * cbSceneParam._m0[91u].x));
    vec4 _1508 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_406, _407));
    float _1510 = _1508.w;
    float _1522 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1510);
    float _1523 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1510);
    float _1524 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1510);
    uvec4 _1528 = floatBitsToUint(cbInstanceData._m0[_446 + 5u]);
    uint _1530 = _1528.x * 14u;
    uint _1531 = _1530 + 13u;
    float _1538 = _471 + (-1.0);
    float _1544 = (cbLight._m0[_1531].x * _1538) + 1.0;
    float _1545 = (cbLight._m0[_1531].y * _1538) + 1.0;
    float _1546 = (cbLight._m0[_1531].z * _1538) + 1.0;
    float _1547 = (cbLight._m0[_1531].w * _1538) + 1.0;
    uint _1548 = _1530 + 5u;
    float _1554 = isnan(1.0) ? _1545 : (isnan(_1545) ? 1.0 : min(_1545, 1.0));
    uint _1558 = _1530 + 4u;
    float _1568 = isnan(1.0) ? _1544 : (isnan(_1544) ? 1.0 : min(_1544, 1.0));
    uint _1572 = _1530 | 1u;
    float _1583 = dot(vec3(cbLight._m0[_1530].xyz), vec3(_304, _305, _306));
    float _1586 = dot(vec3(cbLight._m0[_1572].xyz), vec3(_304, _305, _306));
    float _3549 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
    float _3560 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
    float _1591 = (isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0))) * 0.3183098733425140380859375;
    float _1593 = (isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0))) * 0.3183098733425140380859375;
    float _1600 = ((cbLight._m0[_1548].x * _1554) * _1593) + (((cbLight._m0[_1558].x * _1522) * _1568) * _1591);
    float _1601 = ((_1554 * cbLight._m0[_1548].y) * _1593) + (((cbLight._m0[_1558].y * _1523) * _1568) * _1591);
    float _1602 = ((_1554 * cbLight._m0[_1548].z) * _1593) + (((cbLight._m0[_1558].z * _1524) * _1568) * _1591);
    uvec4 _1606 = floatBitsToUint(cbLight._m0[_1530 + 12u]);
    bool _1608 = _1606.x == 0u;
    float _1619;
    float _1621;
    float _1623;
    if (_1608)
    {
        _1619 = _1600;
        _1621 = _1601;
        _1623 = _1602;
    }
    else
    {
        uint _1627 = _1530 + 6u;
        float _1643 = (dot(vec3(cbLight._m0[_1530 + 2u].xyz), vec3(_304, _305, _306)) * 0.5) + 0.5;
        float _1644 = _1643 * _1643;
        float _3571 = isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0));
        float _1645 = isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0));
        float _1646 = isnan(1.0) ? _1546 : (isnan(_1546) ? 1.0 : min(_1546, 1.0));
        _1619 = (((cbLight._m0[_1627].x * 0.3183098733425140380859375) * _1645) * _1646) + _1600;
        _1621 = (((cbLight._m0[_1627].y * 0.3183098733425140380859375) * _1645) * _1646) + _1601;
        _1623 = (((cbLight._m0[_1627].z * 0.3183098733425140380859375) * _1645) * _1646) + _1602;
    }
    bool _1626 = _1606.y == 0u;
    float _1664;
    float _1666;
    float _1668;
    if (_1626)
    {
        _1664 = _1619;
        _1666 = _1621;
        _1668 = _1623;
    }
    else
    {
        uint _1772 = _1530 + 7u;
        float _1788 = (dot(vec3(cbLight._m0[_1530 + 3u].xyz), vec3(_304, _305, _306)) * 0.5) + 0.5;
        float _1789 = _1788 * _1788;
        float _3587 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
        float _1790 = isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0));
        float _1791 = isnan(1.0) ? _1547 : (isnan(_1547) ? 1.0 : min(_1547, 1.0));
        _1664 = (((cbLight._m0[_1772].x * 0.3183098733425140380859375) * _1790) * _1791) + _1619;
        _1666 = (((cbLight._m0[_1772].y * 0.3183098733425140380859375) * _1790) * _1791) + _1621;
        _1668 = (((cbLight._m0[_1772].z * 0.3183098733425140380859375) * _1790) * _1791) + _1623;
    }
    uint _1670 = _1530 + 8u;
    float _1676 = cbLight._m0[_1530].x + _385;
    float _1677 = cbLight._m0[_1530].y + _386;
    float _1678 = cbLight._m0[_1530].z + _387;
    float _1682 = inversesqrt(dot(vec3(_1676, _1677, _1678), vec3(_1676, _1677, _1678)));
    float _1686 = dot(vec3(_304, _305, _306), vec3(cbLight._m0[_1530].xyz));
    float _3603 = isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0));
    float _1689 = isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0));
    float _3614 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _1690 = isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0));
    float _1691 = dot(vec3(cbLight._m0[_1530].xyz), vec3(_1676 * _1682, _1677 * _1682, _1678 * _1682));
    float _3625 = isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0));
    float _1702 = (exp2(log2(1.0 - (isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1708 = (0.5 / ((_1689 + 9.9999999392252902907785028219223e-09) + _1690)) * _1689;
    float _3636 = isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0));
    float _1710 = (isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0))) * 0.31831014156341552734375;
    uint _1724 = _1530 + 9u;
    float _1730 = cbLight._m0[_1572].x + _385;
    float _1731 = cbLight._m0[_1572].y + _386;
    float _1732 = cbLight._m0[_1572].z + _387;
    float _1736 = inversesqrt(dot(vec3(_1730, _1731, _1732), vec3(_1730, _1731, _1732)));
    float _1740 = dot(vec3(_304, _305, _306), vec3(cbLight._m0[_1572].xyz));
    float _3647 = isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0));
    float _1743 = isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0));
    float _1744 = dot(vec3(cbLight._m0[_1572].xyz), vec3(_1730 * _1736, _1731 * _1736, _1732 * _1736));
    float _3658 = isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0));
    float _1753 = (exp2(log2(1.0 - (isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1757 = (0.5 / ((_1743 + 9.9999999392252902907785028219223e-09) + _1690)) * _1743;
    float _3669 = isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0));
    float _1759 = (isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0))) * 0.31831014156341552734375;
    float _1769 = (((_1753 * cbLight._m0[_1724].x) * _1759) * _1554) + ((((cbLight._m0[_1670].x * _1522) * _1702) * _1710) * _1568);
    float _1770 = (((_1753 * cbLight._m0[_1724].y) * _1759) * _1554) + ((((cbLight._m0[_1670].y * _1523) * _1702) * _1710) * _1568);
    float _1771 = (((_1753 * cbLight._m0[_1724].z) * _1759) * _1554) + ((((cbLight._m0[_1670].z * _1524) * _1702) * _1710) * _1568);
    float _1833;
    float _1835;
    float _1837;
    if (_1608)
    {
        _1833 = _1769;
        _1835 = _1770;
        _1837 = _1771;
    }
    else
    {
        uint _1839 = _1530 + 10u;
        uint _1845 = _1530 + 2u;
        float _1851 = cbLight._m0[_1845].x + _385;
        float _1852 = cbLight._m0[_1845].y + _386;
        float _1853 = cbLight._m0[_1845].z + _387;
        float _1857 = inversesqrt(dot(vec3(_1851, _1852, _1853), vec3(_1851, _1852, _1853)));
        float _1861 = dot(vec3(_304, _305, _306), vec3(cbLight._m0[_1845].xyz));
        float _3680 = isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0));
        float _1864 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
        float _1865 = dot(vec3(cbLight._m0[_1845].xyz), vec3(_1851 * _1857, _1852 * _1857, _1853 * _1857));
        float _3691 = isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0));
        float _1874 = (exp2(log2(1.0 - (isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1878 = (0.5 / ((_1864 + 9.9999999392252902907785028219223e-09) + _1690)) * _1864;
        float _3702 = isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0));
        float _1880 = (isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0))) * 0.31831014156341552734375;
        float _1881 = isnan(1.0) ? _1546 : (isnan(_1546) ? 1.0 : min(_1546, 1.0));
        _1833 = (((_1874 * cbLight._m0[_1839].x) * _1880) * _1881) + _1769;
        _1835 = (((_1874 * cbLight._m0[_1839].y) * _1880) * _1881) + _1770;
        _1837 = (((_1874 * cbLight._m0[_1839].z) * _1880) * _1881) + _1771;
    }
    float _1916;
    float _1918;
    float _1920;
    if (_1626)
    {
        _1916 = _1833;
        _1918 = _1835;
        _1920 = _1837;
    }
    else
    {
        uint _1927 = _1530 + 11u;
        uint _1933 = _1530 + 3u;
        float _1939 = cbLight._m0[_1933].x + _385;
        float _1940 = cbLight._m0[_1933].y + _386;
        float _1941 = cbLight._m0[_1933].z + _387;
        float _1945 = inversesqrt(dot(vec3(_1939, _1940, _1941), vec3(_1939, _1940, _1941)));
        float _1949 = dot(vec3(_304, _305, _306), vec3(cbLight._m0[_1933].xyz));
        float _3718 = isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0));
        float _1952 = isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0));
        float _1953 = dot(vec3(cbLight._m0[_1933].xyz), vec3(_1939 * _1945, _1940 * _1945, _1941 * _1945));
        float _3729 = isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0));
        float _1962 = (exp2(log2(1.0 - (isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1966 = (0.5 / ((_1952 + 9.9999999392252902907785028219223e-09) + _1690)) * _1952;
        float _3740 = isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0));
        float _1968 = (isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0))) * 0.31831014156341552734375;
        float _1969 = isnan(1.0) ? _1547 : (isnan(_1547) ? 1.0 : min(_1547, 1.0));
        _1916 = (((_1962 * cbLight._m0[_1927].x) * _1968) * _1969) + _1833;
        _1918 = (((_1962 * cbLight._m0[_1927].y) * _1968) * _1969) + _1835;
        _1920 = (((_1962 * cbLight._m0[_1927].z) * _1968) * _1969) + _1837;
    }
    float _2103;
    float _2105;
    float _2107;
    float _2109;
    float _2111;
    float _2113;
    if (_1528.y == 0u)
    {
        float _2044 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2045 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2044;
        float _2046 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2044;
        float _2047 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2044;
        uvec4 _2059 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2060 = _2059.x;
        uint _2071 = uint((float(_2059.y) * floor(float(uint(cbSceneParam._m0[85u].y * _407) / _2060))) + floor(float(uint(cbSceneParam._m0[85u].x * _406) / _2060)));
        float _2081 = (log2(_2047 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2082 = isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0));
        uint _2085 = uint(isnan(14.0) ? _2082 : (isnan(_2082) ? 14.0 : min(_2082, 14.0)));
        uvec4 _2090 = texelFetch(g_lightClusterGridBuffer, int(((_2085 << 2u) + (_2071 << 6u)) >> 2u));
        uint _2091 = _2090.x;
        uint _2092 = _2059.z;
        float _2222;
        float _2224;
        float _2226;
        float _2228;
        float _2230;
        float _2232;
        if (((((1u << ((_2092 >> 4u) & 15u)) + 4294967295u) & _2091) == 0u) || ((_2092 & 240u) == 0u))
        {
            _2222 = 0.0;
            _2224 = 0.0;
            _2226 = 0.0;
            _2228 = 0.0;
            _2230 = 0.0;
            _2232 = 0.0;
        }
        else
        {
            float _2223;
            float _2225;
            float _2227;
            float _2229;
            float _2231;
            float _2233;
            float _2382 = 0.0;
            float _2383 = 0.0;
            float _2384 = 0.0;
            float _2385 = 0.0;
            float _2386 = 0.0;
            float _2387 = 0.0;
            uint _2388 = 0u;
            uint _2397;
            bool _2398;
            for (;;)
            {
                _2397 = texelFetch(g_lightClassification, int((((_2085 << 5u) + (_2071 << 9u)) + (_2388 << 2u)) >> 2u)).x;
                _2398 = _2397 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2398)
                {
                    frontier_phi_68_pred = _2384;
                    frontier_phi_68_pred_1 = _2387;
                    frontier_phi_68_pred_2 = _2386;
                    frontier_phi_68_pred_3 = _2385;
                    frontier_phi_68_pred_4 = _2383;
                    frontier_phi_68_pred_5 = _2382;
                }
                else
                {
                    float _2527;
                    float _2528;
                    float _2529;
                    float _2530;
                    float _2531;
                    float _2532;
                    uint _2533;
                    _2527 = _2382;
                    _2528 = _2383;
                    _2529 = _2384;
                    _2530 = _2385;
                    _2531 = _2386;
                    _2532 = _2387;
                    _2533 = _2397;
                    float _2454;
                    float _2455;
                    float _2456;
                    float _2457;
                    float _2458;
                    float _2459;
                    for (;;)
                    {
                        uint _2537 = uint(findLSB(_2533)) + (_2388 << 5u);
                        uint _2534 = (_2533 + 4294967295u) & _2533;
                        uint _2539 = _2537 * 48u;
                        vec4 _2553 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2539)).x, texelFetch(g_PointLightRenderingBuffer, int(_2539 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2539 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2539 + 3u)).x));
                        uint _2559 = (_2537 * 48u) + 4u;
                        vec4 _2572 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2559)).x, texelFetch(g_PointLightRenderingBuffer, int(_2559 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2559 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2559 + 3u)).x));
                        uint _2578 = (_2537 * 48u) + 8u;
                        vec3 _2589 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2578)).x, texelFetch(g_PointLightRenderingBuffer, int(_2578 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2578 + 2u)).x));
                        float _2593 = _2553.x - _2045;
                        float _2594 = _2553.y - _2046;
                        float _2595 = _2553.z - _2047;
                        float _2596 = dot(vec3(_2593, _2594, _2595), vec3(_2593, _2594, _2595));
                        float _2599 = inversesqrt(_2596);
                        float _2608 = 1.0 - (_2596 * _2553.w);
                        float _3766 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0));
                        float _2609 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
                        float _2610 = sqrt(_2596) * _2572.w;
                        float _2613 = 1.39999997615814208984375 / (_2610 + 1.39999997615814208984375);
                        float _2614 = _2613 * _2613;
                        float _2617 = ((1.0 - _2614) * dot(vec3(_427, _430, _433), vec3(_2599 * _2593, _2599 * _2594, _2599 * _2595))) + _2614;
                        float _2620 = _2610 * _2610;
                        float _2624 = ((isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0))) * _2609) / ((_2620 * 0.699999988079071044921875) + 1.0);
                        float _2628 = (-0.0) - _2045;
                        float _2629 = (-0.0) - _2046;
                        float _2630 = (-0.0) - _2047;
                        float _2634 = inversesqrt(dot(vec3(_2628, _2629, _2630), vec3(_2628, _2629, _2630)));
                        float _2638 = dot(vec3(_427, _430, _433), vec3(_2634 * _2628, _2634 * _2629, _2634 * _2630));
                        float _3782 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0));
                        float _3793 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0));
                        float _2642 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
                        float _2646 = (0.5 / (((isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0))) + 9.9999999392252902907785028219223e-09) + _2642)) * _2642;
                        float _3804 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0));
                        float _2655 = (((isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0))) * 3.1415927410125732421875) / ((_2620 * 2.1991131305694580078125) + 3.141590118408203125)) * _2609;
                        _2457 = (_2624 * _2572.x) + _2530;
                        _2458 = (_2624 * _2572.y) + _2531;
                        _2459 = (_2624 * _2572.z) + _2532;
                        _2454 = (_2655 * _2589.x) + _2527;
                        _2455 = (_2655 * _2589.y) + _2528;
                        _2456 = (_2655 * _2589.z) + _2529;
                        if (_2534 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2527 = _2454;
                            _2528 = _2455;
                            _2529 = _2456;
                            _2530 = _2457;
                            _2531 = _2458;
                            _2532 = _2459;
                            _2533 = _2534;
                        }
                    }
                    frontier_phi_68_pred = _2456;
                    frontier_phi_68_pred_1 = _2459;
                    frontier_phi_68_pred_2 = _2458;
                    frontier_phi_68_pred_3 = _2457;
                    frontier_phi_68_pred_4 = _2455;
                    frontier_phi_68_pred_5 = _2454;
                }
                _2227 = frontier_phi_68_pred;
                _2233 = frontier_phi_68_pred_1;
                _2231 = frontier_phi_68_pred_2;
                _2229 = frontier_phi_68_pred_3;
                _2225 = frontier_phi_68_pred_4;
                _2223 = frontier_phi_68_pred_5;
                uint _2389 = _2388 + 1u;
                if (_2389 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2382 = _2223;
                    _2383 = _2225;
                    _2384 = _2227;
                    _2385 = _2229;
                    _2386 = _2231;
                    _2387 = _2233;
                    _2388 = _2389;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2222 = _2223;
            _2224 = _2225;
            _2226 = _2227;
            _2228 = _2229;
            _2230 = _2231;
            _2232 = _2233;
        }
        uvec4 _2236 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2237 = _2236.z;
        uint _2239 = (_2237 >> 8u) & 15u;
        float _2353;
        float _2355;
        float _2357;
        float _2359;
        float _2361;
        float _2363;
        if (((4294967295u << _2239) & _2091) == 0u)
        {
            _2353 = _2222;
            _2355 = _2224;
            _2357 = _2226;
            _2359 = _2228;
            _2361 = _2230;
            _2363 = _2232;
        }
        else
        {
            float _2378 = inversesqrt(dot(vec3(_2045, _2046, _2047), vec3(_2045, _2046, _2047)));
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2239 < ((_2237 >> 12u) & 15u))
            {
                float _2354;
                float _2356;
                float _2358;
                float _2360;
                float _2362;
                float _2364;
                float _2510 = _2222;
                float _2511 = _2224;
                float _2512 = _2226;
                float _2513 = _2228;
                float _2514 = _2230;
                float _2515 = _2232;
                uint _2516 = _2239;
                uint _2525;
                bool _2526;
                for (;;)
                {
                    _2525 = texelFetch(g_lightClassification, int((((_2085 << 5u) + (_2071 << 9u)) + (_2516 << 2u)) >> 2u)).x;
                    _2526 = _2525 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2526)
                    {
                        frontier_phi_79_pred = _2515;
                        frontier_phi_79_pred_1 = _2514;
                        frontier_phi_79_pred_2 = _2513;
                        frontier_phi_79_pred_3 = _2512;
                        frontier_phi_79_pred_4 = _2511;
                        frontier_phi_79_pred_5 = _2510;
                    }
                    else
                    {
                        float _2669;
                        float _2670;
                        float _2671;
                        float _2672;
                        float _2673;
                        float _2674;
                        float _2921;
                        float _2922;
                        float _2923;
                        float _2924;
                        float _2925;
                        float _2926;
                        float _2682 = _2510;
                        float _2683 = _2511;
                        float _2684 = _2512;
                        float _2685 = _2513;
                        float _2686 = _2514;
                        float _2687 = _2515;
                        uint _2688 = _2525;
                        uint _2689;
                        vec4 _2714;
                        float _2715;
                        vec4 _2730;
                        vec3 _2742;
                        vec4 _2758;
                        vec4 _2774;
                        float _2821;
                        bool _2822;
                        for (;;)
                        {
                            uint _2699 = ((_2516 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2688));
                            _2689 = (_2688 + 4294967295u) & _2688;
                            uint _2701 = _2699 * 40u;
                            _2714 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2701)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2701 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2701 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2701 + 3u)).x));
                            _2715 = _2714.w;
                            uint _2717 = (_2699 * 40u) + 4u;
                            _2730 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2717)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2717 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2717 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2717 + 3u)).x));
                            uint _2732 = (_2699 * 40u) + 8u;
                            _2742 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2732)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2732 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2732 + 2u)).x));
                            uint _2745 = (_2699 * 40u) + 16u;
                            _2758 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2745)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2745 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2745 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2745 + 3u)).x));
                            uint _2761 = (_2699 * 40u) + 20u;
                            _2774 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2761)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2761 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2761 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2761 + 3u)).x));
                            uint _2777 = (_2699 * 40u) + 24u;
                            vec4 _2790 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2777)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2777 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2777 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2777 + 3u)).x));
                            uint _2796 = (_2699 * 40u) + 28u;
                            vec4 _2809 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2796)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2796 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2796 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2796 + 3u)).x));
                            _2821 = fma(_2047, _2809.z, fma(_2046, _2809.y, _2809.x * _2045)) + _2809.w;
                            _2822 = !((fma(_2047, _2790.z, fma(_2046, _2790.y, _2790.x * _2045)) + _2790.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_2822)
                            {
                                float _2849 = _2714.x - _2045;
                                float _2850 = _2714.y - _2046;
                                float _2851 = _2714.z - _2047;
                                float _2852 = dot(vec3(_2849, _2850, _2851), vec3(_2849, _2850, _2851));
                                float _2855 = inversesqrt(_2852);
                                float _2856 = _2855 * _2849;
                                float _2857 = _2855 * _2850;
                                float _2858 = _2855 * _2851;
                                float _2862 = 1.0 - (_2852 / (_2715 * _2715));
                                float _3815 = isnan(0.0) ? _2862 : (isnan(_2862) ? 0.0 : max(_2862, 0.0));
                                float _2863 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
                                float _2867 = sqrt(_2852) * _2730.w;
                                float _2869 = 1.39999997615814208984375 / (_2867 + 1.39999997615814208984375);
                                float _2870 = _2869 * _2869;
                                float _2871 = 1.0 - _2870;
                                float _2873 = (_2871 * dot(vec3(_2856, _2857, _2858), vec3(_427, _430, _433))) + _2870;
                                float _2876 = _2867 * _2867;
                                float _2880 = (fma(_2047, _2758.z, fma(_2046, _2758.y, _2758.x * _2045)) + _2758.w) / _2821;
                                float _2881 = (fma(_2047, _2774.z, fma(_2046, _2774.y, _2774.x * _2045)) + _2774.w) / _2821;
                                float _2885 = 1.0 - dot(vec2(_2880, _2881), vec2(_2880, _2881));
                                float _3831 = isnan(0.0) ? _2885 : (isnan(_2885) ? 0.0 : max(_2885, 0.0));
                                float _2886 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
                                float _2887 = _2886 * (((isnan(0.0) ? _2873 : (isnan(_2873) ? 0.0 : max(_2873, 0.0))) * _2863) / ((_2876 * 0.699999988079071044921875) + 1.0));
                                float _2897 = dot(vec3(_427, _430, _433), vec3((-0.0) - (_2045 * _2378), (-0.0) - (_2046 * _2378), (-0.0) - (_2047 * _2378)));
                                float _3842 = isnan(0.0) ? _2897 : (isnan(_2897) ? 0.0 : max(_2897, 0.0));
                                float _2905 = (_2871 * dot(vec3(_427, _430, _433), vec3(_2856, _2857, _2858))) + _2870;
                                float _3853 = isnan(0.0) ? _2905 : (isnan(_2905) ? 0.0 : max(_2905, 0.0));
                                float _2906 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
                                float _2910 = (0.5 / (((isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0))) + 9.9999999392252902907785028219223e-09) + _2906)) * _2906;
                                float _3864 = isnan(0.0) ? _2910 : (isnan(_2910) ? 0.0 : max(_2910, 0.0));
                                float _2917 = (_2886 * _2863) * (((isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0))) * 3.1415927410125732421875) / ((_2876 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_85_pred = _2887 * _2730.z;
                                frontier_phi_85_pred_1 = _2887 * _2730.y;
                                frontier_phi_85_pred_2 = _2887 * _2730.x;
                                frontier_phi_85_pred_3 = _2917 * _2742.z;
                                frontier_phi_85_pred_4 = _2917 * _2742.y;
                                frontier_phi_85_pred_5 = _2917 * _2742.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _2926 = frontier_phi_85_pred;
                            _2925 = frontier_phi_85_pred_1;
                            _2924 = frontier_phi_85_pred_2;
                            _2923 = frontier_phi_85_pred_3;
                            _2922 = frontier_phi_85_pred_4;
                            _2921 = frontier_phi_85_pred_5;
                            _2672 = _2924 + _2685;
                            _2673 = _2925 + _2686;
                            _2674 = _2926 + _2687;
                            _2669 = _2921 + _2682;
                            _2670 = _2922 + _2683;
                            _2671 = _2923 + _2684;
                            if (_2689 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2682 = _2669;
                                _2683 = _2670;
                                _2684 = _2671;
                                _2685 = _2672;
                                _2686 = _2673;
                                _2687 = _2674;
                                _2688 = _2689;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2674;
                        frontier_phi_79_pred_1 = _2673;
                        frontier_phi_79_pred_2 = _2672;
                        frontier_phi_79_pred_3 = _2671;
                        frontier_phi_79_pred_4 = _2670;
                        frontier_phi_79_pred_5 = _2669;
                    }
                    _2364 = frontier_phi_79_pred;
                    _2362 = frontier_phi_79_pred_1;
                    _2360 = frontier_phi_79_pred_2;
                    _2358 = frontier_phi_79_pred_3;
                    _2356 = frontier_phi_79_pred_4;
                    _2354 = frontier_phi_79_pred_5;
                    uint _2517 = _2516 + 1u;
                    if (_2517 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2510 = _2354;
                        _2511 = _2356;
                        _2512 = _2358;
                        _2513 = _2360;
                        _2514 = _2362;
                        _2515 = _2364;
                        _2516 = _2517;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2360;
                frontier_phi_60_61_ladder_1 = _2364;
                frontier_phi_60_61_ladder_2 = _2362;
                frontier_phi_60_61_ladder_3 = _2358;
                frontier_phi_60_61_ladder_4 = _2356;
                frontier_phi_60_61_ladder_5 = _2354;
            }
            else
            {
                frontier_phi_60_61_ladder = _2228;
                frontier_phi_60_61_ladder_1 = _2232;
                frontier_phi_60_61_ladder_2 = _2230;
                frontier_phi_60_61_ladder_3 = _2226;
                frontier_phi_60_61_ladder_4 = _2224;
                frontier_phi_60_61_ladder_5 = _2222;
            }
            _2353 = frontier_phi_60_61_ladder_5;
            _2355 = frontier_phi_60_61_ladder_4;
            _2357 = frontier_phi_60_61_ladder_3;
            _2359 = frontier_phi_60_61_ladder;
            _2361 = frontier_phi_60_61_ladder_2;
            _2363 = frontier_phi_60_61_ladder_1;
        }
        float _2368 = isnan(1.0) ? _471 : (isnan(_471) ? 1.0 : min(_471, 1.0));
        _2103 = (_2368 * _2359) + _1664;
        _2105 = (_2368 * _2361) + _1666;
        _2107 = (_2368 * _2363) + _1668;
        _2109 = ((_2353 * 0.039999999105930328369140625) * _2368) + _1916;
        _2111 = ((_2355 * 0.039999999105930328369140625) * _2368) + _1918;
        _2113 = ((_2357 * 0.039999999105930328369140625) * _2368) + _1920;
    }
    else
    {
        _2103 = _1664;
        _2105 = _1666;
        _2107 = _1668;
        _2109 = _1916;
        _2111 = _1918;
        _2113 = _1920;
    }
    uint _2119 = _447 + uint(cbMatDynParam._m0[0u].w);
    float _2125 = (((_285.x * cbMtdParam._m0[11u].x) + (_254.x * cbMtdParam._m0[10u].x)) * cbMtdParam._m0[12u].x) * cbInstanceData._m0[_2119].x;
    float _2126 = (((_285.y * cbMtdParam._m0[11u].y) + (_254.y * cbMtdParam._m0[10u].y)) * cbMtdParam._m0[12u].x) * cbInstanceData._m0[_2119].y;
    float _2127 = (((_285.z * cbMtdParam._m0[11u].z) + (_254.z * cbMtdParam._m0[10u].z)) * cbMtdParam._m0[12u].x) * cbInstanceData._m0[_2119].z;
    float _3880 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _3891 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _3902 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _3913 = isnan(0.0) ? _308 : (isnan(_308) ? 0.0 : max(_308, 0.0));
    float _2145 = (((isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0))) * (_2103 + ((isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0))) * _471))) + ((_2109 + ((isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0))) * _1282)) * cbPerFrame._m0[3u].x)) + _2125;
    float _2147 = (_2126 + ((_2111 + ((isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0))) * _1282)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0))) * (_2105 + ((isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0))) * _471)));
    float _2149 = (_2127 + ((_2113 + ((isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0))) * _1282)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0))) * (_2107 + ((isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0))) * _471)));
    float _2150 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
    float _2151 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
    float _2152 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
    float _2158 = cbMtdParam._m0[2u].x * _2125;
    float _2159 = cbMtdParam._m0[2u].y * _2126;
    float _2160 = cbMtdParam._m0[2u].z * _2127;
    float _3939 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2162 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
    float _2167 = cbInstanceData._m0[_446 + 6u].w * (isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0)));
    float _2172 = _406 / cbSceneParam._m0[86u].x;
    float _2173 = _407 / cbSceneParam._m0[86u].y;
    vec4 _2187 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2172, _2173, (log2((isnan(cbSceneParam._m0[77u].w) ? _327 : (isnan(_327) ? cbSceneParam._m0[77u].w : min(_327, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2189 = _2187.x;
    float _2190 = _2187.y;
    float _2191 = _2187.z;
    float _2192 = _2187.w;
    float _2284;
    float _2286;
    float _2288;
    float _2290;
    if (_327 > cbSceneParam._m0[78u].w)
    {
        float _2247 = isnan(_327) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _327 : min(cbSceneParam._m0[80u].w, _327));
        float _2248 = _2247 / _327;
        float _2259 = _2248 * _378;
        float _2260 = _379 * _2248;
        float _2261 = (-0.0) - _2260;
        float _2262 = _2248 * _380;
        float _2264 = (cbSceneParam._m0[77u].w * _2261) / _2247;
        float _2265 = _2264 + cbSceneParam._m0[79u].w;
        float _2266 = cbSceneParam._m0[79u].w - _2260;
        float _2272 = sqrt(((_2259 * _2259) + (_2260 * _2260)) + (_2262 * _2262));
        float _2275 = (1.0 - (cbSceneParam._m0[77u].w / _2247)) * _2272;
        float _2280 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2282 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2467;
        if (abs((_2261 - _2264) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2467 = ((((_2265 > 0.0) ? exp2(_2280 * _2265) : (2.0 - exp2(_2282 * _2265))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2275;
        }
        else
        {
            float _2411 = 1.0 / cbSceneParam._m0[80u].x;
            float _2412 = isnan(_2266) ? _2265 : (isnan(_2265) ? _2266 : max(_2265, _2266));
            float _2413 = isnan(_2266) ? _2265 : (isnan(_2265) ? _2266 : min(_2265, _2266));
            float _2422 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : min(_2412, 0.0));
            float _2423 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : min(_2413, 0.0));
            _2467 = ((abs(_2272 / _2261) * cbSceneParam._m0[80u].y) * ((((_2422 - _2423) * 2.0) - ((exp2(_2280 * (isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0)))) - exp2(_2280 * (isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0))))) * _2411)) - ((exp2(_2282 * _2422) - exp2(_2282 * _2423)) * _2411))) + (_2275 * cbSceneParam._m0[80u].z);
        }
        vec4 _2469 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2172, _2173, 1.0), 0.0);
        float _2478 = exp2((_2467 * (-1.44269502162933349609375)) * (1.0 - _2469.w));
        float _2479 = log2(_2478);
        float _2495 = log2(_2192);
        _2284 = (exp2(_2495 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2479 * cbSceneParam._m0[78u].x)) * _2469.x) / cbSceneParam._m0[78u].x)) + _2189;
        _2286 = (exp2(_2495 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2479 * cbSceneParam._m0[78u].y)) * _2469.y) / cbSceneParam._m0[78u].y)) + _2190;
        _2288 = (exp2(_2495 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2479 * cbSceneParam._m0[78u].z)) * _2469.z) / cbSceneParam._m0[78u].z)) + _2191;
        _2290 = _2478 * _2192;
    }
    else
    {
        _2284 = _2189;
        _2286 = _2190;
        _2288 = _2191;
        _2290 = _2192;
    }
    bool _2505;
    vec4 _2300;
    vec4 _2323;
    float _2325;
    float _2329;
    float _2330;
    float _2331;
    float _2334;
    float _2337;
    float _2340;
    float _2341;
    bool _2352;
    for (;;)
    {
        _2300 = cbMatDynParam._m0[0u];
        float _2302 = roundEven(_2300.y);
        bool _2303 = _2302 == 3.0;
        float _2305 = log2(_2290);
        float _2309 = exp2(_2305 * cbSceneParam._m0[78u].x);
        float _2310 = exp2(_2305 * cbSceneParam._m0[78u].y);
        float _2311 = exp2(_2305 * cbSceneParam._m0[78u].z);
        float _2312 = _2309 * _2150;
        float _2313 = _2310 * _2151;
        float _2314 = _2311 * _2152;
        float _2321 = _394 + (-0.5);
        _2323 = cbMtdParam._m0[1u];
        _2325 = _2323.y * _2321;
        float _2328 = (_2302 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2329 = _2328 * (_2303 ? _2312 : (_2312 + (cbSceneParam._m0[72u].w * _2284)));
        _2330 = _2328 * (_2303 ? _2313 : (_2313 + (cbSceneParam._m0[72u].w * _2286)));
        _2331 = _2328 * (_2303 ? _2314 : (_2314 + (cbSceneParam._m0[72u].w * _2288)));
        _2334 = ((_2158 * _2162) * _2309) * _2328;
        _2337 = ((_2159 * _2162) * _2310) * _2328;
        _2340 = ((_2160 * _2162) * _2311) * _2328;
        _2341 = _2321 * 0.999000012874603271484375;
        _2352 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2352)
        {
            if ((cbInstanceData._m0[_446 + 7u].x + _2341) < 0.5)
            {
                _2505 = true;
                break;
            }
        }
        uint _2446 = _447 + uint(_2300.w);
        if ((cbInstanceData._m0[_2446].w < 1.0) && ((cbInstanceData._m0[_2446].w + _2341) < 0.5))
        {
            _2505 = true;
            break;
        }
        if ((_2325 + _226) < _2323.x)
        {
            _2505 = true;
            break;
        }
        _2505 = false;
        break;
    }
    float _2660;
    if (_2505)
    {
        discard_state = true;
        _2660 = 0.0;
    }
    else
    {
        _2660 = _2167;
    }
    SV_Target.x = _2329;
    SV_Target.y = _2330;
    SV_Target.z = _2331;
    SV_Target.w = _2660;
    SV_Target_1.x = _2334;
    SV_Target_1.y = _2337;
    SV_Target_1.z = _2340;
    SV_Target_1.w = _2167;
    discard_exit();
}


