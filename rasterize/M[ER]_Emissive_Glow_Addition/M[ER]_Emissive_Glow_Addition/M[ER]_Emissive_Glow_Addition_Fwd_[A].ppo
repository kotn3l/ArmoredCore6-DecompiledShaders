#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_ER_Emissive_Glow_Addition_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_ER_Emissive_Glow_Addition_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_ER_Emissive_Glow_Addition_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _842;
float _3044;
float _3045;
float _3046;
float _3047;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _175 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _176 = _175 * NORMAL.x;
    float _177 = _175 * NORMAL.y;
    float _178 = _175 * NORMAL.z;
    float _183;
    float _184;
    float _185;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _183 = (-0.0) - _176;
        _184 = (-0.0) - _177;
        _185 = (-0.0) - _178;
    }
    else
    {
        _183 = _176;
        _184 = _177;
        _185 = _178;
    }
    vec4 _214 = texture(sampler2D(M_ER_Emissive_Glow_Addition_snp_0_Texture2D_0, SS_DiffuseMap), vec2((((cbMtdParam._m0[12u].y * cbPerFrame._m0[22u].x) + TEXCOORD_1.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((cbMtdParam._m0[12u].z * cbPerFrame._m0[22u].x) + TEXCOORD_1.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _221 = _214.x * cbMtdParam._m0[9u].x;
    float _222 = _214.y * cbMtdParam._m0[9u].y;
    float _223 = _214.z * cbMtdParam._m0[9u].z;
    float _224 = _214.w * cbMtdParam._m0[9u].w;
    float _225 = _224 * TEXCOORD_1.z;
    vec4 _252 = texture(sampler2D(M_ER_Emissive_Glow_Addition_snp_0_Texture2D_2, SS_DiffuseMap), vec2((((cbMtdParam._m0[12u].w * cbPerFrame._m0[22u].x) + TEXCOORD_1.x) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((cbMtdParam._m0[13u].x * cbPerFrame._m0[22u].x) + TEXCOORD_1.y) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    vec4 _283 = texture(sampler2D(M_ER_Emissive_Glow_Addition_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((cbMtdParam._m0[13u].y * cbPerFrame._m0[22u].x) + TEXCOORD_1.x) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((cbMtdParam._m0[13u].z * cbPerFrame._m0[22u].x) + TEXCOORD_1.y) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _301 = inversesqrt(dot(vec3(_183, _184, _185), vec3(_183, _184, _185)));
    float _302 = _301 * _183;
    float _303 = _301 * _184;
    float _304 = _301 * _185;
    float _3056 = isnan(0.0) ? _225 : (isnan(_225) ? 0.0 : max(_225, 0.0));
    float _306 = isnan(1.0) ? _3056 : (isnan(_3056) ? 1.0 : min(_3056, 1.0));
    float _3067 = isnan(0.0) ? _221 : (isnan(_221) ? 0.0 : max(_221, 0.0));
    float _3078 = isnan(0.0) ? _222 : (isnan(_222) ? 0.0 : max(_222, 0.0));
    float _3089 = isnan(0.0) ? _223 : (isnan(_223) ? 0.0 : max(_223, 0.0));
    float _325 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _366 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _376 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _366);
    float _377 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _366);
    float _378 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _366);
    float _382 = inversesqrt(dot(vec3(_376, _377, _378), vec3(_376, _377, _378)));
    float _383 = _376 * _382;
    float _384 = _377 * _382;
    float _385 = _378 * _382;
    vec4 _390 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _392 = _390.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _521 = sqrt(((_376 * _376) + (_377 * _377)) + (_378 * _378));
        float _527 = (cbMatDynParam._m0[5u].x * _521) + cbMatDynParam._m0[5u].y;
        float _3100 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
        float _528 = isnan(1.0) ? _3100 : (isnan(_3100) ? 1.0 : min(_3100, 1.0));
        float _532 = (cbMatDynParam._m0[5u].z * _521) + cbMatDynParam._m0[5u].w;
        float _3111 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3111 : (isnan(_3111) ? 1.0 : min(_3111, 1.0))) - _528)) + _528) < ((_392 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _404 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _405 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _425 = fma(_304, cbSceneParam._m0[5u].z, fma(_303, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _302));
    float _428 = fma(_304, cbSceneParam._m0[6u].z, fma(_303, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _302));
    float _431 = fma(_304, cbSceneParam._m0[7u].z, fma(_303, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _302));
    uint _444 = uint(roundEven(NORMAL.w)) * 13u;
    uint _445 = _444 + 9u;
    uint _446 = _445 + uint(cbMatDynParam._m0[0u].w);
    float _452 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3067 : (isnan(_3067) ? 1.0 : min(_3067, 1.0)))) * cbInstanceData._m0[_446].x;
    float _453 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3078 : (isnan(_3078) ? 1.0 : min(_3078, 1.0)))) * cbInstanceData._m0[_446].y;
    float _454 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3089 : (isnan(_3089) ? 1.0 : min(_3089, 1.0)))) * cbInstanceData._m0[_446].z;
    float _3122 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _455 = isnan(1.0) ? _3122 : (isnan(_3122) ? 1.0 : min(_3122, 1.0));
    float _3133 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _456 = isnan(1.0) ? _3133 : (isnan(_3133) ? 1.0 : min(_3133, 1.0));
    float _3144 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _457 = isnan(1.0) ? _3144 : (isnan(_3144) ? 1.0 : min(_3144, 1.0));
    vec4 _466 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _404, cbSceneParam._m0[86u].y * _405));
    float _469 = _466.x * TEXCOORD_1.w;
    float _470 = dot(vec3(_302, _303, _304), vec3(_383, _384, _385));
    float _473 = _470 * 2.0;
    float _478 = (_473 * _302) - _383;
    float _479 = (_473 * _303) - _384;
    float _480 = (_473 * _304) - _385;
    float _502 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _506 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _510 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _841;
    float _843;
    float _844;
    float _845;
    float _846;
    float _847;
    float _848;
    float _849;
    float _850;
    float _851;
    float _852;
    float _853;
    float _854;
    float _855;
    float _856;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _566 = fma(_510, cbModelParam._m0[26u].z, fma(_506, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _502));
        float _570 = fma(_510, cbModelParam._m0[27u].z, fma(_506, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _502));
        float _574 = fma(_510, cbModelParam._m0[28u].z, fma(_506, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _502));
        float _599 = _502 + _302;
        float _600 = _506 + _303;
        float _601 = _510 + _304;
        float _611 = fma(_601, cbModelParam._m0[26u].z, fma(_600, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _599)) - _566;
        float _612 = fma(_601, cbModelParam._m0[27u].z, fma(_600, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _599)) - _570;
        float _613 = fma(_601, cbModelParam._m0[28u].z, fma(_600, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _599)) - _574;
        float _617 = inversesqrt(dot(vec3(_611, _612, _613), vec3(_611, _612, _613)));
        float _630 = ((_617 * _611) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_566 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _631 = ((_617 * _612) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_570 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _632 = ((_617 * _613) / cbModelParam._m0[34u].z) + ((((((_574 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _635 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_630, _631, _632), 0.0);
        vec4 _642 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_630, _631, _632), 0.0);
        vec4 _649 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_630, _631, _632), 0.0);
        vec4 _656 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_630, _631, _632), 0.0);
        float _669 = exp2((_635.w + (-0.5)) * 20.0) * 2.0;
        float _670 = _669 * (_635.x + (-0.5));
        float _671 = _669 * (_635.y + (-0.5));
        float _672 = _669 * (_635.z + (-0.5));
        float _679 = exp2((_642.w + (-0.5)) * 20.0) * 2.0;
        float _680 = _679 * (_642.x + (-0.5));
        float _681 = _679 * (_642.y + (-0.5));
        float _682 = _679 * (_642.z + (-0.5));
        float _689 = exp2((_649.w + (-0.5)) * 20.0) * 2.0;
        float _690 = _689 * (_649.x + (-0.5));
        float _691 = _689 * (_649.y + (-0.5));
        float _692 = _689 * (_649.z + (-0.5));
        float _699 = exp2((_656.w + (-0.5)) * 20.0) * 2.0;
        float _700 = _699 * (_656.x + (-0.5));
        float _701 = _699 * (_656.y + (-0.5));
        float _702 = _699 * (_656.z + (-0.5));
        float _703 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
        float _704 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
        float _705 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
        float _706 = _670 * 0.5;
        float _707 = _680 * 0.5;
        float _708 = _690 * 0.5;
        float _709 = dot(vec3(_706, _707, _708), vec3(_706, _707, _708));
        float _714 = (_709 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_709);
        float _723 = (dot(vec3(_302, _303, _304), vec3(_714 * _706, _714 * _707, _714 * _708)) + 1.0) * 0.5;
        float _3170 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
        float _733 = sqrt(((_707 * _707) + (_706 * _706)) + (_708 * _708)) / (_703 + 9.9999997473787516355514526367188e-06);
        float _3181 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
        float _734 = isnan(1.0) ? _3181 : (isnan(_3181) ? 1.0 : min(_3181, 1.0));
        float _735 = _734 * 2.0;
        float _739 = (1.0 - _734) / (_734 + 1.0);
        float _3192 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
        float _740 = isnan(1.0) ? _3192 : (isnan(_3192) ? 1.0 : min(_3192, 1.0));
        float _749 = ((((1.0 - _740) * (_735 + 2.0)) * exp2(log2(isnan(1.0) ? _3170 : (isnan(_3170) ? 1.0 : min(_3170, 1.0))) * (_735 + 1.0))) + _740) * _703;
        float _750 = _671 * 0.5;
        float _751 = _681 * 0.5;
        float _752 = _691 * 0.5;
        float _753 = dot(vec3(_750, _751, _752), vec3(_750, _751, _752));
        float _758 = (_753 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_753);
        float _766 = (dot(vec3(_302, _303, _304), vec3(_758 * _750, _758 * _751, _758 * _752)) + 1.0) * 0.5;
        float _3203 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
        float _775 = sqrt(((_751 * _751) + (_750 * _750)) + (_752 * _752)) / (_704 + 9.9999997473787516355514526367188e-06);
        float _3214 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
        float _776 = isnan(1.0) ? _3214 : (isnan(_3214) ? 1.0 : min(_3214, 1.0));
        float _777 = _776 * 2.0;
        float _781 = (1.0 - _776) / (_776 + 1.0);
        float _3225 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
        float _782 = isnan(1.0) ? _3225 : (isnan(_3225) ? 1.0 : min(_3225, 1.0));
        float _791 = ((((1.0 - _782) * (_777 + 2.0)) * exp2(log2(isnan(1.0) ? _3203 : (isnan(_3203) ? 1.0 : min(_3203, 1.0))) * (_777 + 1.0))) + _782) * _704;
        float _792 = _672 * 0.5;
        float _793 = _682 * 0.5;
        float _794 = _692 * 0.5;
        float _795 = dot(vec3(_792, _793, _794), vec3(_792, _793, _794));
        float _800 = (_795 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_795);
        float _808 = (dot(vec3(_302, _303, _304), vec3(_800 * _792, _800 * _793, _800 * _794)) + 1.0) * 0.5;
        float _3236 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
        float _817 = sqrt(((_793 * _793) + (_792 * _792)) + (_794 * _794)) / (_705 + 9.9999997473787516355514526367188e-06);
        float _3247 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
        float _818 = isnan(1.0) ? _3247 : (isnan(_3247) ? 1.0 : min(_3247, 1.0));
        float _819 = _818 * 2.0;
        float _823 = (1.0 - _818) / (_818 + 1.0);
        float _3258 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
        float _824 = isnan(1.0) ? _3258 : (isnan(_3258) ? 1.0 : min(_3258, 1.0));
        float _833 = ((((1.0 - _824) * (_819 + 2.0)) * exp2(log2(isnan(1.0) ? _3236 : (isnan(_3236) ? 1.0 : min(_3236, 1.0))) * (_819 + 1.0))) + _824) * _705;
        _841 = _672;
        _843 = _671;
        _844 = _670;
        _845 = _682;
        _846 = _681;
        _847 = _680;
        _848 = _692;
        _849 = _691;
        _850 = _690;
        _851 = _705;
        _852 = _704;
        _853 = _703;
        _854 = cbModelParam._m0[36u].z * (isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0)));
        _855 = cbModelParam._m0[36u].z * (isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0)));
        _856 = cbModelParam._m0[36u].z * (isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0)));
    }
    else
    {
        _841 = _842;
        _843 = _842;
        _844 = _842;
        _845 = _842;
        _846 = _842;
        _847 = _842;
        _848 = _842;
        _849 = _842;
        _850 = _842;
        _851 = _842;
        _852 = _842;
        _853 = _842;
        _854 = 0.0;
        _855 = 0.0;
        _856 = 0.0;
    }
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _885 = fma(_510, cbModelParam._m0[30u].z, fma(_506, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _502));
        float _889 = fma(_510, cbModelParam._m0[31u].z, fma(_506, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _502));
        float _893 = fma(_510, cbModelParam._m0[32u].z, fma(_506, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _502));
        float _916 = _502 + _302;
        float _917 = _506 + _303;
        float _918 = _510 + _304;
        float _928 = fma(_918, cbModelParam._m0[30u].z, fma(_917, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _916)) - _885;
        float _929 = fma(_918, cbModelParam._m0[31u].z, fma(_917, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _916)) - _889;
        float _930 = fma(_918, cbModelParam._m0[32u].z, fma(_917, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _916)) - _893;
        float _934 = inversesqrt(dot(vec3(_928, _929, _930), vec3(_928, _929, _930)));
        float _947 = ((_934 * _928) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_885 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _948 = ((_934 * _929) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_889 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _949 = ((_934 * _930) / cbModelParam._m0[35u].z) + ((((((_893 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _951 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_947, _948, _949), 0.0);
        vec4 _958 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_947, _948, _949), 0.0);
        vec4 _965 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_947, _948, _949), 0.0);
        vec4 _972 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_947, _948, _949), 0.0);
        float _984 = exp2((_951.w + (-0.5)) * 20.0) * 2.0;
        float _985 = _984 * (_951.x + (-0.5));
        float _986 = _984 * (_951.y + (-0.5));
        float _987 = _984 * (_951.z + (-0.5));
        float _994 = exp2((_958.w + (-0.5)) * 20.0) * 2.0;
        float _995 = _994 * (_958.x + (-0.5));
        float _996 = _994 * (_958.y + (-0.5));
        float _997 = _994 * (_958.z + (-0.5));
        float _1004 = exp2((_965.w + (-0.5)) * 20.0) * 2.0;
        float _1005 = _1004 * (_965.x + (-0.5));
        float _1006 = _1004 * (_965.y + (-0.5));
        float _1007 = _1004 * (_965.z + (-0.5));
        float _1014 = exp2((_972.w + (-0.5)) * 20.0) * 2.0;
        float _1015 = _1014 * (_972.x + (-0.5));
        float _1016 = _1014 * (_972.y + (-0.5));
        float _1017 = _1014 * (_972.z + (-0.5));
        float _1018 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1019 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1020 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1021 = _985 * 0.5;
        float _1022 = _995 * 0.5;
        float _1023 = _1005 * 0.5;
        float _1024 = dot(vec3(_1021, _1022, _1023), vec3(_1021, _1022, _1023));
        float _1029 = (_1024 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1024);
        float _1037 = (dot(vec3(_302, _303, _304), vec3(_1029 * _1021, _1029 * _1022, _1029 * _1023)) + 1.0) * 0.5;
        float _3299 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1046 = sqrt(((_1022 * _1022) + (_1021 * _1021)) + (_1023 * _1023)) / (_1018 + 9.9999997473787516355514526367188e-06);
        float _3310 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1047 = isnan(1.0) ? _3310 : (isnan(_3310) ? 1.0 : min(_3310, 1.0));
        float _1048 = _1047 * 2.0;
        float _1052 = (1.0 - _1047) / (_1047 + 1.0);
        float _3321 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1053 = isnan(1.0) ? _3321 : (isnan(_3321) ? 1.0 : min(_3321, 1.0));
        float _1062 = ((((1.0 - _1053) * (_1048 + 2.0)) * exp2(log2(isnan(1.0) ? _3299 : (isnan(_3299) ? 1.0 : min(_3299, 1.0))) * (_1048 + 1.0))) + _1053) * _1018;
        float _1063 = _986 * 0.5;
        float _1064 = _996 * 0.5;
        float _1065 = _1006 * 0.5;
        float _1066 = dot(vec3(_1063, _1064, _1065), vec3(_1063, _1064, _1065));
        float _1071 = (_1066 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1066);
        float _1079 = (dot(vec3(_302, _303, _304), vec3(_1071 * _1063, _1071 * _1064, _1071 * _1065)) + 1.0) * 0.5;
        float _3332 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1088 = sqrt(((_1064 * _1064) + (_1063 * _1063)) + (_1065 * _1065)) / (_1019 + 9.9999997473787516355514526367188e-06);
        float _3343 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1089 = isnan(1.0) ? _3343 : (isnan(_3343) ? 1.0 : min(_3343, 1.0));
        float _1090 = _1089 * 2.0;
        float _1094 = (1.0 - _1089) / (_1089 + 1.0);
        float _3354 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1095 = isnan(1.0) ? _3354 : (isnan(_3354) ? 1.0 : min(_3354, 1.0));
        float _1104 = ((((1.0 - _1095) * (_1090 + 2.0)) * exp2(log2(isnan(1.0) ? _3332 : (isnan(_3332) ? 1.0 : min(_3332, 1.0))) * (_1090 + 1.0))) + _1095) * _1019;
        float _1105 = _987 * 0.5;
        float _1106 = _997 * 0.5;
        float _1107 = _1007 * 0.5;
        float _1108 = dot(vec3(_1105, _1106, _1107), vec3(_1105, _1106, _1107));
        float _1113 = (_1108 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1108);
        float _1121 = (dot(vec3(_302, _303, _304), vec3(_1113 * _1105, _1113 * _1106, _1113 * _1107)) + 1.0) * 0.5;
        float _3365 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1130 = sqrt(((_1106 * _1106) + (_1105 * _1105)) + (_1107 * _1107)) / (_1020 + 9.9999997473787516355514526367188e-06);
        float _3376 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1131 = isnan(1.0) ? _3376 : (isnan(_3376) ? 1.0 : min(_3376, 1.0));
        float _1132 = _1131 * 2.0;
        float _1136 = (1.0 - _1131) / (_1131 + 1.0);
        float _3387 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1137 = isnan(1.0) ? _3387 : (isnan(_3387) ? 1.0 : min(_3387, 1.0));
        float _1146 = ((((1.0 - _1137) * (_1132 + 2.0)) * exp2(log2(isnan(1.0) ? _3365 : (isnan(_3365) ? 1.0 : min(_3365, 1.0))) * (_1132 + 1.0))) + _1137) * _1020;
        _1154 = _987;
        _1155 = _986;
        _1156 = _985;
        _1157 = _997;
        _1158 = _996;
        _1159 = _995;
        _1160 = _1007;
        _1161 = _1006;
        _1162 = _1005;
        _1163 = _1020;
        _1164 = _1019;
        _1165 = _1018;
        _1166 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0)));
        _1167 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0)));
        _1168 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0)));
    }
    else
    {
        _1154 = _842;
        _1155 = _842;
        _1156 = _842;
        _1157 = _842;
        _1158 = _842;
        _1159 = _842;
        _1160 = _842;
        _1161 = _842;
        _1162 = _842;
        _1163 = _842;
        _1164 = _842;
        _1165 = _842;
        _1166 = 0.0;
        _1167 = 0.0;
        _1168 = 0.0;
    }
    float _1178 = (cbModelParam._m0[1u].x * (_1166 - _854)) + _854;
    float _1179 = (cbModelParam._m0[1u].x * (_1167 - _855)) + _855;
    float _1180 = (cbModelParam._m0[1u].x * (_1168 - _856)) + _856;
    float _1201 = fma(_1180, cbSceneParam._m0[89u].z, fma(_1179, cbSceneParam._m0[89u].y, _1178 * cbSceneParam._m0[89u].x));
    float _1204 = fma(_1180, cbSceneParam._m0[90u].z, fma(_1179, cbSceneParam._m0[90u].y, _1178 * cbSceneParam._m0[90u].x));
    float _1207 = fma(_1180, cbSceneParam._m0[91u].z, fma(_1179, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1178));
    float _1222 = _478 * 0.5;
    float _1223 = _479 * 0.5;
    float _1224 = _480 * 0.5;
    float _1225 = dot(vec4(_1222, _1223, _1224, 1.0), vec4(_1156, _1159, _1162, _1165));
    float _1228 = dot(vec4(_1222, _1223, _1224, 1.0), vec4(_1155, _1158, _1161, _1164));
    float _1231 = dot(vec4(_1222, _1223, _1224, 1.0), vec4(_1154, _1157, _1160, _1163));
    float _1265;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1238 = dot(vec4(_1222, _1223, _1224, 1.0), vec4(_841, _845, _848, _851));
        float _1242 = dot(vec4(_1222, _1223, _1224, 1.0), vec4(_843, _846, _849, _852));
        float _1246 = dot(vec4(_1222, _1223, _1224, 1.0), vec4(_844, _847, _850, _853));
        float _1253 = dot(vec4(cbModelParam._m0[39u]), vec4(_1222, _1223, _1224, 1.0));
        _1265 = dot(vec3(isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0)), isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0)), isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1253) ? 0.0 : (isnan(0.0) ? _1253 : max(0.0, _1253))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1265 = 1.0;
    }
    float _1276;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1267 = dot(vec4(cbModelParam._m0[40u]), vec4(_1222, _1223, _1224, 1.0));
        _1276 = dot(vec3(isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0)), isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0)), isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1267) ? 0.0 : (isnan(0.0) ? _1267 : max(0.0, _1267))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1276 = 1.0;
    }
    float _1280 = (_1276 * cbModelParam._m0[1u].x) + (_1265 * (1.0 - cbModelParam._m0[1u].x));
    float _1289 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1370;
    float _1372;
    float _1374;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1337 = fma(_510, cbModelParam._m0[13u].z, fma(_506, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _502)) + cbModelParam._m0[13u].w;
        float _1341 = fma(_510, cbModelParam._m0[14u].z, fma(_506, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _502)) + cbModelParam._m0[14u].w;
        float _1345 = fma(_510, cbModelParam._m0[15u].z, fma(_506, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _502)) + cbModelParam._m0[15u].w;
        float _1348 = fma(_480, cbModelParam._m0[13u].z, fma(_479, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _478));
        float _1351 = fma(_480, cbModelParam._m0[14u].z, fma(_479, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _478));
        float _1354 = fma(_480, cbModelParam._m0[15u].z, fma(_479, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _478));
        float _1380;
        if (_1348 > 0.0)
        {
            _1380 = abs((1.0 - _1337) / _1348);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1348 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1337 + 1.0) / _1348);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1380 = frontier_phi_19_17_ladder;
        }
        float _1586;
        if (_1351 > 0.0)
        {
            _1586 = abs((1.0 - _1341) / _1351);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1351 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1341 + 1.0) / _1351);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1586 = frontier_phi_28_24_ladder;
        }
        float _1775;
        if (_1354 > 0.0)
        {
            _1775 = abs((1.0 - _1345) / _1354);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1354 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1345 + 1.0) / _1354);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1775 = frontier_phi_40_35_ladder;
        }
        float _1777 = isnan(_1586) ? _1380 : (isnan(_1380) ? _1586 : min(_1380, _1586));
        float _1778 = isnan(_1775) ? _1777 : (isnan(_1777) ? _1775 : min(_1777, _1775));
        float _1782 = (_1778 * _1348) + _1337;
        float _1783 = (_1778 * _1351) + _1341;
        float _1784 = (_1778 * _1354) + _1345;
        float _1785 = _1778 * 9.9999997473787516355514526367188e-05;
        float _1787 = (-1.0) - _1785;
        float _1789 = _1785 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1784 > _1789) || ((_1784 < _1787) || ((_1783 > _1789) || ((_1783 < _1787) || ((_1782 < _1787) || (_1782 > _1789))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1881 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1784, cbModelParam._m0[9u].z, fma(_1783, cbModelParam._m0[9u].y, _1782 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1784, cbModelParam._m0[10u].z, fma(_1783, cbModelParam._m0[10u].y, _1782 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1784, cbModelParam._m0[11u].z, fma(_1783, cbModelParam._m0[11u].y, _1782 * cbModelParam._m0[11u].x))), _1289);
            frontier_phi_18_40_ladder = _1881.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _1881.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _1881.x * cbModelParam._m0[1u].y;
        }
        _1370 = frontier_phi_18_40_ladder_2;
        _1372 = frontier_phi_18_40_ladder_1;
        _1374 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1358 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_478, _479, _480), _1289);
        _1370 = _1358.x * cbModelParam._m0[1u].y;
        _1372 = _1358.y * cbModelParam._m0[1u].y;
        _1374 = _1358.z * cbModelParam._m0[1u].y;
    }
    float _1377 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1469;
    float _1471;
    float _1473;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1433 = fma(_510, cbModelParam._m0[21u].z, fma(_506, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _502)) + cbModelParam._m0[21u].w;
        float _1437 = fma(_510, cbModelParam._m0[22u].z, fma(_506, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _502)) + cbModelParam._m0[22u].w;
        float _1441 = fma(_510, cbModelParam._m0[23u].z, fma(_506, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _502)) + cbModelParam._m0[23u].w;
        float _1444 = fma(_480, cbModelParam._m0[21u].z, fma(_479, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _478));
        float _1447 = fma(_480, cbModelParam._m0[22u].z, fma(_479, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _478));
        float _1450 = fma(_480, cbModelParam._m0[23u].z, fma(_479, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _478));
        float _1591;
        if (_1444 > 0.0)
        {
            _1591 = abs((1.0 - _1433) / _1444);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1444 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1433 + 1.0) / _1444);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1591 = frontier_phi_30_26_ladder;
        }
        float _1802;
        if (_1447 > 0.0)
        {
            _1802 = abs((1.0 - _1437) / _1447);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1447 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1437 + 1.0) / _1447);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1802 = frontier_phi_42_37_ladder;
        }
        float _1953;
        if (_1450 > 0.0)
        {
            _1953 = abs((1.0 - _1441) / _1450);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1450 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1441 + 1.0) / _1450);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _1953 = frontier_phi_51_48_ladder;
        }
        float _1955 = isnan(_1802) ? _1591 : (isnan(_1591) ? _1802 : min(_1591, _1802));
        float _1956 = isnan(_1953) ? _1955 : (isnan(_1955) ? _1953 : min(_1955, _1953));
        float _1960 = (_1956 * _1444) + _1433;
        float _1961 = (_1956 * _1447) + _1437;
        float _1962 = (_1956 * _1450) + _1441;
        float _1963 = _1956 * 9.9999997473787516355514526367188e-05;
        float _1964 = (-1.0) - _1963;
        float _1966 = _1963 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_1962 > _1966) || ((_1962 < _1964) || ((_1961 > _1966) || ((_1961 < _1964) || ((_1960 < _1964) || (_1960 > _1966))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2191 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1962, cbModelParam._m0[17u].z, fma(_1961, cbModelParam._m0[17u].y, _1960 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1962, cbModelParam._m0[18u].z, fma(_1961, cbModelParam._m0[18u].y, _1960 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1962, cbModelParam._m0[19u].z, fma(_1961, cbModelParam._m0[19u].y, _1960 * cbModelParam._m0[19u].x))), _1377);
            frontier_phi_27_51_ladder = _2191.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2191.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2191.x * cbModelParam._m0[1u].z;
        }
        _1469 = frontier_phi_27_51_ladder_2;
        _1471 = frontier_phi_27_51_ladder_1;
        _1473 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1453 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_478, _479, _480), _1377);
        _1469 = _1453.x * cbModelParam._m0[1u].z;
        _1471 = _1453.y * cbModelParam._m0[1u].z;
        _1473 = _1453.z * cbModelParam._m0[1u].z;
    }
    float _1485 = _469 * 0.01200000010430812835693359375;
    float _1487 = _1485 * ((cbModelParam._m0[1u].w * (_1469 - _1370)) + _1370);
    float _1488 = _1485 * ((cbModelParam._m0[1u].w * (_1471 - _1372)) + _1372);
    float _1489 = _1485 * ((cbModelParam._m0[1u].w * (_1473 - _1374)) + _1374);
    float _1492 = fma(_1489, cbSceneParam._m0[89u].z, fma(_1488, cbSceneParam._m0[89u].y, _1487 * cbSceneParam._m0[89u].x));
    float _1495 = fma(_1489, cbSceneParam._m0[90u].z, fma(_1488, cbSceneParam._m0[90u].y, _1487 * cbSceneParam._m0[90u].x));
    float _1498 = fma(_1489, cbSceneParam._m0[91u].z, fma(_1488, cbSceneParam._m0[91u].y, _1487 * cbSceneParam._m0[91u].x));
    uvec4 _1508 = floatBitsToUint(cbInstanceData._m0[_444 + 5u]);
    uint _1510 = _1508.x * 14u;
    uint _1511 = _1510 + 13u;
    float _1518 = _469 + (-1.0);
    float _1524 = (cbLight._m0[_1511].x * _1518) + 1.0;
    float _1525 = (cbLight._m0[_1511].y * _1518) + 1.0;
    float _1526 = (cbLight._m0[_1511].z * _1518) + 1.0;
    float _1527 = (cbLight._m0[_1511].w * _1518) + 1.0;
    uint _1528 = _1510 + 5u;
    float _1534 = isnan(1.0) ? _1525 : (isnan(_1525) ? 1.0 : min(_1525, 1.0));
    uint _1538 = _1510 + 4u;
    float _1545 = isnan(1.0) ? _1524 : (isnan(_1524) ? 1.0 : min(_1524, 1.0));
    uint _1549 = _1510 | 1u;
    float _1560 = dot(vec3(cbLight._m0[_1510].xyz), vec3(_302, _303, _304));
    float _1563 = dot(vec3(cbLight._m0[_1549].xyz), vec3(_302, _303, _304));
    float _3523 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
    float _3534 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
    float _1568 = (isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0))) * 0.3183098733425140380859375;
    float _1570 = (isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0))) * 0.3183098733425140380859375;
    float _1577 = ((cbLight._m0[_1528].x * _1534) * _1570) + ((cbLight._m0[_1538].x * _1545) * _1568);
    float _1578 = ((_1534 * cbLight._m0[_1528].y) * _1570) + ((_1545 * cbLight._m0[_1538].y) * _1568);
    float _1579 = ((_1534 * cbLight._m0[_1528].z) * _1570) + ((_1545 * cbLight._m0[_1538].z) * _1568);
    uvec4 _1583 = floatBitsToUint(cbLight._m0[_1510 + 12u]);
    bool _1585 = _1583.x == 0u;
    float _1596;
    float _1598;
    float _1600;
    if (_1585)
    {
        _1596 = _1577;
        _1598 = _1578;
        _1600 = _1579;
    }
    else
    {
        uint _1604 = _1510 + 6u;
        float _1620 = (dot(vec3(cbLight._m0[_1510 + 2u].xyz), vec3(_302, _303, _304)) * 0.5) + 0.5;
        float _1621 = _1620 * _1620;
        float _3545 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1622 = isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0));
        float _1623 = isnan(1.0) ? _1526 : (isnan(_1526) ? 1.0 : min(_1526, 1.0));
        _1596 = (((cbLight._m0[_1604].x * 0.3183098733425140380859375) * _1622) * _1623) + _1577;
        _1598 = (((cbLight._m0[_1604].y * 0.3183098733425140380859375) * _1622) * _1623) + _1578;
        _1600 = (((cbLight._m0[_1604].z * 0.3183098733425140380859375) * _1622) * _1623) + _1579;
    }
    bool _1603 = _1583.y == 0u;
    float _1641;
    float _1643;
    float _1645;
    if (_1603)
    {
        _1641 = _1596;
        _1643 = _1598;
        _1645 = _1600;
    }
    else
    {
        uint _1746 = _1510 + 7u;
        float _1762 = (dot(vec3(cbLight._m0[_1510 + 3u].xyz), vec3(_302, _303, _304)) * 0.5) + 0.5;
        float _1763 = _1762 * _1762;
        float _3561 = isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0));
        float _1764 = isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0));
        float _1765 = isnan(1.0) ? _1527 : (isnan(_1527) ? 1.0 : min(_1527, 1.0));
        _1641 = (((cbLight._m0[_1746].x * 0.3183098733425140380859375) * _1764) * _1765) + _1596;
        _1643 = (((cbLight._m0[_1746].y * 0.3183098733425140380859375) * _1764) * _1765) + _1598;
        _1645 = (((cbLight._m0[_1746].z * 0.3183098733425140380859375) * _1764) * _1765) + _1600;
    }
    uint _1647 = _1510 + 8u;
    float _1653 = cbLight._m0[_1510].x + _383;
    float _1654 = cbLight._m0[_1510].y + _384;
    float _1655 = cbLight._m0[_1510].z + _385;
    float _1659 = inversesqrt(dot(vec3(_1653, _1654, _1655), vec3(_1653, _1654, _1655)));
    float _1663 = dot(vec3(_302, _303, _304), vec3(cbLight._m0[_1510].xyz));
    float _3577 = isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0));
    float _1666 = isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0));
    float _3588 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _1667 = isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0));
    float _1668 = dot(vec3(cbLight._m0[_1510].xyz), vec3(_1653 * _1659, _1654 * _1659, _1655 * _1659));
    float _3599 = isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0));
    float _1679 = (exp2(log2(1.0 - (isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1685 = (0.5 / ((_1666 + 9.9999999392252902907785028219223e-09) + _1667)) * _1666;
    float _3610 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
    float _1687 = (isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0))) * 0.31831014156341552734375;
    uint _1698 = _1510 + 9u;
    float _1704 = cbLight._m0[_1549].x + _383;
    float _1705 = cbLight._m0[_1549].y + _384;
    float _1706 = cbLight._m0[_1549].z + _385;
    float _1710 = inversesqrt(dot(vec3(_1704, _1705, _1706), vec3(_1704, _1705, _1706)));
    float _1714 = dot(vec3(_302, _303, _304), vec3(cbLight._m0[_1549].xyz));
    float _3621 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
    float _1717 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
    float _1718 = dot(vec3(cbLight._m0[_1549].xyz), vec3(_1704 * _1710, _1705 * _1710, _1706 * _1710));
    float _3632 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
    float _1727 = (exp2(log2(1.0 - (isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1731 = (0.5 / ((_1717 + 9.9999999392252902907785028219223e-09) + _1667)) * _1717;
    float _3643 = isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0));
    float _1733 = (isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0))) * 0.31831014156341552734375;
    float _1743 = (((_1727 * cbLight._m0[_1698].x) * _1733) * _1534) + (((_1679 * cbLight._m0[_1647].x) * _1687) * _1545);
    float _1744 = (((_1727 * cbLight._m0[_1698].y) * _1733) * _1534) + (((_1679 * cbLight._m0[_1647].y) * _1687) * _1545);
    float _1745 = (((_1727 * cbLight._m0[_1698].z) * _1733) * _1534) + (((_1679 * cbLight._m0[_1647].z) * _1687) * _1545);
    float _1807;
    float _1809;
    float _1811;
    if (_1585)
    {
        _1807 = _1743;
        _1809 = _1744;
        _1811 = _1745;
    }
    else
    {
        uint _1813 = _1510 + 10u;
        uint _1819 = _1510 + 2u;
        float _1825 = cbLight._m0[_1819].x + _383;
        float _1826 = cbLight._m0[_1819].y + _384;
        float _1827 = cbLight._m0[_1819].z + _385;
        float _1831 = inversesqrt(dot(vec3(_1825, _1826, _1827), vec3(_1825, _1826, _1827)));
        float _1835 = dot(vec3(_302, _303, _304), vec3(cbLight._m0[_1819].xyz));
        float _3654 = isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0));
        float _1838 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
        float _1839 = dot(vec3(cbLight._m0[_1819].xyz), vec3(_1825 * _1831, _1826 * _1831, _1827 * _1831));
        float _3665 = isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0));
        float _1848 = (exp2(log2(1.0 - (isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1852 = (0.5 / ((_1838 + 9.9999999392252902907785028219223e-09) + _1667)) * _1838;
        float _3676 = isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0));
        float _1854 = (isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0))) * 0.31831014156341552734375;
        float _1855 = isnan(1.0) ? _1526 : (isnan(_1526) ? 1.0 : min(_1526, 1.0));
        _1807 = (((_1848 * cbLight._m0[_1813].x) * _1854) * _1855) + _1743;
        _1809 = (((_1848 * cbLight._m0[_1813].y) * _1854) * _1855) + _1744;
        _1811 = (((_1848 * cbLight._m0[_1813].z) * _1854) * _1855) + _1745;
    }
    float _1890;
    float _1892;
    float _1894;
    if (_1603)
    {
        _1890 = _1807;
        _1892 = _1809;
        _1894 = _1811;
    }
    else
    {
        uint _1901 = _1510 + 11u;
        uint _1907 = _1510 + 3u;
        float _1913 = cbLight._m0[_1907].x + _383;
        float _1914 = cbLight._m0[_1907].y + _384;
        float _1915 = cbLight._m0[_1907].z + _385;
        float _1919 = inversesqrt(dot(vec3(_1913, _1914, _1915), vec3(_1913, _1914, _1915)));
        float _1923 = dot(vec3(_302, _303, _304), vec3(cbLight._m0[_1907].xyz));
        float _3692 = isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0));
        float _1926 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
        float _1927 = dot(vec3(cbLight._m0[_1907].xyz), vec3(_1913 * _1919, _1914 * _1919, _1915 * _1919));
        float _3703 = isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0));
        float _1936 = (exp2(log2(1.0 - (isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1940 = (0.5 / ((_1926 + 9.9999999392252902907785028219223e-09) + _1667)) * _1926;
        float _3714 = isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0));
        float _1942 = (isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0))) * 0.31831014156341552734375;
        float _1943 = isnan(1.0) ? _1527 : (isnan(_1527) ? 1.0 : min(_1527, 1.0));
        _1890 = (((_1936 * cbLight._m0[_1901].x) * _1942) * _1943) + _1807;
        _1892 = (((_1936 * cbLight._m0[_1901].y) * _1942) * _1943) + _1809;
        _1894 = (((_1936 * cbLight._m0[_1901].z) * _1942) * _1943) + _1811;
    }
    float _2077;
    float _2079;
    float _2081;
    float _2083;
    float _2085;
    float _2087;
    if (_1508.y == 0u)
    {
        float _2018 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2019 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2018;
        float _2020 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2018;
        float _2021 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2018;
        uvec4 _2033 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2034 = _2033.x;
        uint _2045 = uint((float(_2033.y) * floor(float(uint(cbSceneParam._m0[85u].y * _405) / _2034))) + floor(float(uint(cbSceneParam._m0[85u].x * _404) / _2034)));
        float _2055 = (log2(_2021 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2056 = isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0));
        uint _2059 = uint(isnan(14.0) ? _2056 : (isnan(_2056) ? 14.0 : min(_2056, 14.0)));
        uvec4 _2064 = texelFetch(g_lightClusterGridBuffer, int(((_2059 << 2u) + (_2045 << 6u)) >> 2u));
        uint _2065 = _2064.x;
        uint _2066 = _2033.z;
        float _2196;
        float _2198;
        float _2200;
        float _2202;
        float _2204;
        float _2206;
        if (((((1u << ((_2066 >> 4u) & 15u)) + 4294967295u) & _2065) == 0u) || ((_2066 & 240u) == 0u))
        {
            _2196 = 0.0;
            _2198 = 0.0;
            _2200 = 0.0;
            _2202 = 0.0;
            _2204 = 0.0;
            _2206 = 0.0;
        }
        else
        {
            float _2197;
            float _2199;
            float _2201;
            float _2203;
            float _2205;
            float _2207;
            float _2356 = 0.0;
            float _2357 = 0.0;
            float _2358 = 0.0;
            float _2359 = 0.0;
            float _2360 = 0.0;
            float _2361 = 0.0;
            uint _2362 = 0u;
            uint _2371;
            bool _2372;
            for (;;)
            {
                _2371 = texelFetch(g_lightClassification, int((((_2059 << 5u) + (_2045 << 9u)) + (_2362 << 2u)) >> 2u)).x;
                _2372 = _2371 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2372)
                {
                    frontier_phi_68_pred = _2358;
                    frontier_phi_68_pred_1 = _2361;
                    frontier_phi_68_pred_2 = _2360;
                    frontier_phi_68_pred_3 = _2359;
                    frontier_phi_68_pred_4 = _2357;
                    frontier_phi_68_pred_5 = _2356;
                }
                else
                {
                    float _2501;
                    float _2502;
                    float _2503;
                    float _2504;
                    float _2505;
                    float _2506;
                    uint _2507;
                    _2501 = _2356;
                    _2502 = _2357;
                    _2503 = _2358;
                    _2504 = _2359;
                    _2505 = _2360;
                    _2506 = _2361;
                    _2507 = _2371;
                    float _2428;
                    float _2429;
                    float _2430;
                    float _2431;
                    float _2432;
                    float _2433;
                    for (;;)
                    {
                        uint _2511 = uint(findLSB(_2507)) + (_2362 << 5u);
                        uint _2508 = (_2507 + 4294967295u) & _2507;
                        uint _2513 = _2511 * 48u;
                        vec4 _2527 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2513)).x, texelFetch(g_PointLightRenderingBuffer, int(_2513 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2513 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2513 + 3u)).x));
                        uint _2533 = (_2511 * 48u) + 4u;
                        vec4 _2546 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2533)).x, texelFetch(g_PointLightRenderingBuffer, int(_2533 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2533 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2533 + 3u)).x));
                        uint _2552 = (_2511 * 48u) + 8u;
                        vec3 _2563 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2552)).x, texelFetch(g_PointLightRenderingBuffer, int(_2552 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2552 + 2u)).x));
                        float _2567 = _2527.x - _2019;
                        float _2568 = _2527.y - _2020;
                        float _2569 = _2527.z - _2021;
                        float _2570 = dot(vec3(_2567, _2568, _2569), vec3(_2567, _2568, _2569));
                        float _2573 = inversesqrt(_2570);
                        float _2582 = 1.0 - (_2570 * _2527.w);
                        float _3740 = isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : max(_2582, 0.0));
                        float _2583 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
                        float _2584 = sqrt(_2570) * _2546.w;
                        float _2587 = 1.39999997615814208984375 / (_2584 + 1.39999997615814208984375);
                        float _2588 = _2587 * _2587;
                        float _2591 = ((1.0 - _2588) * dot(vec3(_425, _428, _431), vec3(_2573 * _2567, _2573 * _2568, _2573 * _2569))) + _2588;
                        float _2594 = _2584 * _2584;
                        float _2598 = ((isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0))) * _2583) / ((_2594 * 0.699999988079071044921875) + 1.0);
                        float _2602 = (-0.0) - _2019;
                        float _2603 = (-0.0) - _2020;
                        float _2604 = (-0.0) - _2021;
                        float _2608 = inversesqrt(dot(vec3(_2602, _2603, _2604), vec3(_2602, _2603, _2604)));
                        float _2612 = dot(vec3(_425, _428, _431), vec3(_2608 * _2602, _2608 * _2603, _2608 * _2604));
                        float _3756 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0));
                        float _3767 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
                        float _2616 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
                        float _2620 = (0.5 / (((isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0))) + 9.9999999392252902907785028219223e-09) + _2616)) * _2616;
                        float _3778 = isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0));
                        float _2629 = (((isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0))) * 3.1415927410125732421875) / ((_2594 * 2.1991131305694580078125) + 3.141590118408203125)) * _2583;
                        _2431 = (_2598 * _2546.x) + _2504;
                        _2432 = (_2598 * _2546.y) + _2505;
                        _2433 = (_2598 * _2546.z) + _2506;
                        _2428 = (_2629 * _2563.x) + _2501;
                        _2429 = (_2629 * _2563.y) + _2502;
                        _2430 = (_2629 * _2563.z) + _2503;
                        if (_2508 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2501 = _2428;
                            _2502 = _2429;
                            _2503 = _2430;
                            _2504 = _2431;
                            _2505 = _2432;
                            _2506 = _2433;
                            _2507 = _2508;
                        }
                    }
                    frontier_phi_68_pred = _2430;
                    frontier_phi_68_pred_1 = _2433;
                    frontier_phi_68_pred_2 = _2432;
                    frontier_phi_68_pred_3 = _2431;
                    frontier_phi_68_pred_4 = _2429;
                    frontier_phi_68_pred_5 = _2428;
                }
                _2201 = frontier_phi_68_pred;
                _2207 = frontier_phi_68_pred_1;
                _2205 = frontier_phi_68_pred_2;
                _2203 = frontier_phi_68_pred_3;
                _2199 = frontier_phi_68_pred_4;
                _2197 = frontier_phi_68_pred_5;
                uint _2363 = _2362 + 1u;
                if (_2363 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2356 = _2197;
                    _2357 = _2199;
                    _2358 = _2201;
                    _2359 = _2203;
                    _2360 = _2205;
                    _2361 = _2207;
                    _2362 = _2363;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2196 = _2197;
            _2198 = _2199;
            _2200 = _2201;
            _2202 = _2203;
            _2204 = _2205;
            _2206 = _2207;
        }
        uvec4 _2210 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2211 = _2210.z;
        uint _2213 = (_2211 >> 8u) & 15u;
        float _2327;
        float _2329;
        float _2331;
        float _2333;
        float _2335;
        float _2337;
        if (((4294967295u << _2213) & _2065) == 0u)
        {
            _2327 = _2196;
            _2329 = _2198;
            _2331 = _2200;
            _2333 = _2202;
            _2335 = _2204;
            _2337 = _2206;
        }
        else
        {
            float _2352 = inversesqrt(dot(vec3(_2019, _2020, _2021), vec3(_2019, _2020, _2021)));
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2213 < ((_2211 >> 12u) & 15u))
            {
                float _2328;
                float _2330;
                float _2332;
                float _2334;
                float _2336;
                float _2338;
                float _2484 = _2196;
                float _2485 = _2198;
                float _2486 = _2200;
                float _2487 = _2202;
                float _2488 = _2204;
                float _2489 = _2206;
                uint _2490 = _2213;
                uint _2499;
                bool _2500;
                for (;;)
                {
                    _2499 = texelFetch(g_lightClassification, int((((_2059 << 5u) + (_2045 << 9u)) + (_2490 << 2u)) >> 2u)).x;
                    _2500 = _2499 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2500)
                    {
                        frontier_phi_79_pred = _2489;
                        frontier_phi_79_pred_1 = _2488;
                        frontier_phi_79_pred_2 = _2487;
                        frontier_phi_79_pred_3 = _2486;
                        frontier_phi_79_pred_4 = _2485;
                        frontier_phi_79_pred_5 = _2484;
                    }
                    else
                    {
                        float _2643;
                        float _2644;
                        float _2645;
                        float _2646;
                        float _2647;
                        float _2648;
                        float _2895;
                        float _2896;
                        float _2897;
                        float _2898;
                        float _2899;
                        float _2900;
                        float _2656 = _2484;
                        float _2657 = _2485;
                        float _2658 = _2486;
                        float _2659 = _2487;
                        float _2660 = _2488;
                        float _2661 = _2489;
                        uint _2662 = _2499;
                        uint _2663;
                        vec4 _2688;
                        float _2689;
                        vec4 _2704;
                        vec3 _2716;
                        vec4 _2732;
                        vec4 _2748;
                        float _2795;
                        bool _2796;
                        for (;;)
                        {
                            uint _2673 = ((_2490 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2662));
                            _2663 = (_2662 + 4294967295u) & _2662;
                            uint _2675 = _2673 * 40u;
                            _2688 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2675)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2675 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2675 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2675 + 3u)).x));
                            _2689 = _2688.w;
                            uint _2691 = (_2673 * 40u) + 4u;
                            _2704 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2691)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2691 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2691 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2691 + 3u)).x));
                            uint _2706 = (_2673 * 40u) + 8u;
                            _2716 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2706)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2706 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2706 + 2u)).x));
                            uint _2719 = (_2673 * 40u) + 16u;
                            _2732 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2719)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2719 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2719 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2719 + 3u)).x));
                            uint _2735 = (_2673 * 40u) + 20u;
                            _2748 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2735)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2735 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2735 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2735 + 3u)).x));
                            uint _2751 = (_2673 * 40u) + 24u;
                            vec4 _2764 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2751)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2751 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2751 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2751 + 3u)).x));
                            uint _2770 = (_2673 * 40u) + 28u;
                            vec4 _2783 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2770)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2770 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2770 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2770 + 3u)).x));
                            _2795 = fma(_2021, _2783.z, fma(_2020, _2783.y, _2783.x * _2019)) + _2783.w;
                            _2796 = !((fma(_2021, _2764.z, fma(_2020, _2764.y, _2764.x * _2019)) + _2764.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_2796)
                            {
                                float _2823 = _2688.x - _2019;
                                float _2824 = _2688.y - _2020;
                                float _2825 = _2688.z - _2021;
                                float _2826 = dot(vec3(_2823, _2824, _2825), vec3(_2823, _2824, _2825));
                                float _2829 = inversesqrt(_2826);
                                float _2830 = _2829 * _2823;
                                float _2831 = _2829 * _2824;
                                float _2832 = _2829 * _2825;
                                float _2836 = 1.0 - (_2826 / (_2689 * _2689));
                                float _3789 = isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : max(_2836, 0.0));
                                float _2837 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
                                float _2841 = sqrt(_2826) * _2704.w;
                                float _2843 = 1.39999997615814208984375 / (_2841 + 1.39999997615814208984375);
                                float _2844 = _2843 * _2843;
                                float _2845 = 1.0 - _2844;
                                float _2847 = (_2845 * dot(vec3(_2830, _2831, _2832), vec3(_425, _428, _431))) + _2844;
                                float _2850 = _2841 * _2841;
                                float _2854 = (fma(_2021, _2732.z, fma(_2020, _2732.y, _2732.x * _2019)) + _2732.w) / _2795;
                                float _2855 = (fma(_2021, _2748.z, fma(_2020, _2748.y, _2748.x * _2019)) + _2748.w) / _2795;
                                float _2859 = 1.0 - dot(vec2(_2854, _2855), vec2(_2854, _2855));
                                float _3805 = isnan(0.0) ? _2859 : (isnan(_2859) ? 0.0 : max(_2859, 0.0));
                                float _2860 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
                                float _2861 = _2860 * (((isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : max(_2847, 0.0))) * _2837) / ((_2850 * 0.699999988079071044921875) + 1.0));
                                float _2871 = dot(vec3(_425, _428, _431), vec3((-0.0) - (_2019 * _2352), (-0.0) - (_2020 * _2352), (-0.0) - (_2021 * _2352)));
                                float _3816 = isnan(0.0) ? _2871 : (isnan(_2871) ? 0.0 : max(_2871, 0.0));
                                float _2879 = (_2845 * dot(vec3(_425, _428, _431), vec3(_2830, _2831, _2832))) + _2844;
                                float _3827 = isnan(0.0) ? _2879 : (isnan(_2879) ? 0.0 : max(_2879, 0.0));
                                float _2880 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
                                float _2884 = (0.5 / (((isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0))) + 9.9999999392252902907785028219223e-09) + _2880)) * _2880;
                                float _3838 = isnan(0.0) ? _2884 : (isnan(_2884) ? 0.0 : max(_2884, 0.0));
                                float _2891 = (_2860 * _2837) * (((isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0))) * 3.1415927410125732421875) / ((_2850 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_85_pred = _2861 * _2704.z;
                                frontier_phi_85_pred_1 = _2861 * _2704.y;
                                frontier_phi_85_pred_2 = _2861 * _2704.x;
                                frontier_phi_85_pred_3 = _2891 * _2716.z;
                                frontier_phi_85_pred_4 = _2891 * _2716.y;
                                frontier_phi_85_pred_5 = _2891 * _2716.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _2900 = frontier_phi_85_pred;
                            _2899 = frontier_phi_85_pred_1;
                            _2898 = frontier_phi_85_pred_2;
                            _2897 = frontier_phi_85_pred_3;
                            _2896 = frontier_phi_85_pred_4;
                            _2895 = frontier_phi_85_pred_5;
                            _2646 = _2898 + _2659;
                            _2647 = _2899 + _2660;
                            _2648 = _2900 + _2661;
                            _2643 = _2895 + _2656;
                            _2644 = _2896 + _2657;
                            _2645 = _2897 + _2658;
                            if (_2663 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2656 = _2643;
                                _2657 = _2644;
                                _2658 = _2645;
                                _2659 = _2646;
                                _2660 = _2647;
                                _2661 = _2648;
                                _2662 = _2663;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2648;
                        frontier_phi_79_pred_1 = _2647;
                        frontier_phi_79_pred_2 = _2646;
                        frontier_phi_79_pred_3 = _2645;
                        frontier_phi_79_pred_4 = _2644;
                        frontier_phi_79_pred_5 = _2643;
                    }
                    _2338 = frontier_phi_79_pred;
                    _2336 = frontier_phi_79_pred_1;
                    _2334 = frontier_phi_79_pred_2;
                    _2332 = frontier_phi_79_pred_3;
                    _2330 = frontier_phi_79_pred_4;
                    _2328 = frontier_phi_79_pred_5;
                    uint _2491 = _2490 + 1u;
                    if (_2491 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2484 = _2328;
                        _2485 = _2330;
                        _2486 = _2332;
                        _2487 = _2334;
                        _2488 = _2336;
                        _2489 = _2338;
                        _2490 = _2491;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2334;
                frontier_phi_60_61_ladder_1 = _2338;
                frontier_phi_60_61_ladder_2 = _2336;
                frontier_phi_60_61_ladder_3 = _2332;
                frontier_phi_60_61_ladder_4 = _2330;
                frontier_phi_60_61_ladder_5 = _2328;
            }
            else
            {
                frontier_phi_60_61_ladder = _2202;
                frontier_phi_60_61_ladder_1 = _2206;
                frontier_phi_60_61_ladder_2 = _2204;
                frontier_phi_60_61_ladder_3 = _2200;
                frontier_phi_60_61_ladder_4 = _2198;
                frontier_phi_60_61_ladder_5 = _2196;
            }
            _2327 = frontier_phi_60_61_ladder_5;
            _2329 = frontier_phi_60_61_ladder_4;
            _2331 = frontier_phi_60_61_ladder_3;
            _2333 = frontier_phi_60_61_ladder;
            _2335 = frontier_phi_60_61_ladder_2;
            _2337 = frontier_phi_60_61_ladder_1;
        }
        float _2342 = isnan(1.0) ? _469 : (isnan(_469) ? 1.0 : min(_469, 1.0));
        _2077 = (_2342 * _2333) + _1641;
        _2079 = (_2342 * _2335) + _1643;
        _2081 = (_2342 * _2337) + _1645;
        _2083 = ((_2327 * 0.039999999105930328369140625) * _2342) + _1890;
        _2085 = ((_2329 * 0.039999999105930328369140625) * _2342) + _1892;
        _2087 = ((_2331 * 0.039999999105930328369140625) * _2342) + _1894;
    }
    else
    {
        _2077 = _1641;
        _2079 = _1643;
        _2081 = _1645;
        _2083 = _1890;
        _2085 = _1892;
        _2087 = _1894;
    }
    uint _2093 = _445 + uint(cbMatDynParam._m0[0u].w);
    float _2099 = (((_283.x * cbMtdParam._m0[11u].x) + (_252.x * cbMtdParam._m0[10u].x)) * cbMtdParam._m0[12u].x) * cbInstanceData._m0[_2093].x;
    float _2100 = (((_283.y * cbMtdParam._m0[11u].y) + (_252.y * cbMtdParam._m0[10u].y)) * cbMtdParam._m0[12u].x) * cbInstanceData._m0[_2093].y;
    float _2101 = (((_283.z * cbMtdParam._m0[11u].z) + (_252.z * cbMtdParam._m0[10u].z)) * cbMtdParam._m0[12u].x) * cbInstanceData._m0[_2093].z;
    float _3854 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _3865 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _3876 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _3887 = isnan(0.0) ? _306 : (isnan(_306) ? 0.0 : max(_306, 0.0));
    float _2119 = (((isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0))) * (_2077 + ((isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0))) * _469))) + ((_2083 + ((isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0))) * _1280)) * cbPerFrame._m0[3u].x)) + _2099;
    float _2121 = (_2100 + ((_2085 + ((isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0))) * _1280)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0))) * (_2079 + ((isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0))) * _469)));
    float _2123 = (_2101 + ((_2087 + ((isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0))) * _1280)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0))) * (_2081 + ((isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0))) * _469)));
    float _2124 = isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0));
    float _2125 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
    float _2126 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
    float _2132 = cbMtdParam._m0[2u].x * _2099;
    float _2133 = cbMtdParam._m0[2u].y * _2100;
    float _2134 = cbMtdParam._m0[2u].z * _2101;
    float _3913 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2136 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
    float _2141 = cbInstanceData._m0[_444 + 6u].w * (isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0)));
    float _2146 = _404 / cbSceneParam._m0[86u].x;
    float _2147 = _405 / cbSceneParam._m0[86u].y;
    vec4 _2161 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2146, _2147, (log2((isnan(cbSceneParam._m0[77u].w) ? _325 : (isnan(_325) ? cbSceneParam._m0[77u].w : min(_325, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2163 = _2161.x;
    float _2164 = _2161.y;
    float _2165 = _2161.z;
    float _2166 = _2161.w;
    float _2258;
    float _2260;
    float _2262;
    float _2264;
    if (_325 > cbSceneParam._m0[78u].w)
    {
        float _2221 = isnan(_325) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _325 : min(cbSceneParam._m0[80u].w, _325));
        float _2222 = _2221 / _325;
        float _2233 = _2222 * _376;
        float _2234 = _377 * _2222;
        float _2235 = (-0.0) - _2234;
        float _2236 = _2222 * _378;
        float _2238 = (cbSceneParam._m0[77u].w * _2235) / _2221;
        float _2239 = _2238 + cbSceneParam._m0[79u].w;
        float _2240 = cbSceneParam._m0[79u].w - _2234;
        float _2246 = sqrt(((_2233 * _2233) + (_2234 * _2234)) + (_2236 * _2236));
        float _2249 = (1.0 - (cbSceneParam._m0[77u].w / _2221)) * _2246;
        float _2254 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2256 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2441;
        if (abs((_2235 - _2238) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2441 = ((((_2239 > 0.0) ? exp2(_2254 * _2239) : (2.0 - exp2(_2256 * _2239))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2249;
        }
        else
        {
            float _2385 = 1.0 / cbSceneParam._m0[80u].x;
            float _2386 = isnan(_2240) ? _2239 : (isnan(_2239) ? _2240 : max(_2239, _2240));
            float _2387 = isnan(_2240) ? _2239 : (isnan(_2239) ? _2240 : min(_2239, _2240));
            float _2396 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : min(_2386, 0.0));
            float _2397 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : min(_2387, 0.0));
            _2441 = ((abs(_2246 / _2235) * cbSceneParam._m0[80u].y) * ((((_2396 - _2397) * 2.0) - ((exp2(_2254 * (isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0)))) - exp2(_2254 * (isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0))))) * _2385)) - ((exp2(_2256 * _2396) - exp2(_2256 * _2397)) * _2385))) + (_2249 * cbSceneParam._m0[80u].z);
        }
        vec4 _2443 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2146, _2147, 1.0), 0.0);
        float _2452 = exp2((_2441 * (-1.44269502162933349609375)) * (1.0 - _2443.w));
        float _2453 = log2(_2452);
        float _2469 = log2(_2166);
        _2258 = (exp2(_2469 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2453 * cbSceneParam._m0[78u].x)) * _2443.x) / cbSceneParam._m0[78u].x)) + _2163;
        _2260 = (exp2(_2469 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2453 * cbSceneParam._m0[78u].y)) * _2443.y) / cbSceneParam._m0[78u].y)) + _2164;
        _2262 = (exp2(_2469 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2453 * cbSceneParam._m0[78u].z)) * _2443.z) / cbSceneParam._m0[78u].z)) + _2165;
        _2264 = _2452 * _2166;
    }
    else
    {
        _2258 = _2163;
        _2260 = _2164;
        _2262 = _2165;
        _2264 = _2166;
    }
    bool _2479;
    vec4 _2274;
    vec4 _2297;
    float _2299;
    float _2303;
    float _2304;
    float _2305;
    float _2308;
    float _2311;
    float _2314;
    float _2315;
    bool _2326;
    for (;;)
    {
        _2274 = cbMatDynParam._m0[0u];
        float _2276 = roundEven(_2274.y);
        bool _2277 = _2276 == 3.0;
        float _2279 = log2(_2264);
        float _2283 = exp2(_2279 * cbSceneParam._m0[78u].x);
        float _2284 = exp2(_2279 * cbSceneParam._m0[78u].y);
        float _2285 = exp2(_2279 * cbSceneParam._m0[78u].z);
        float _2286 = _2283 * _2124;
        float _2287 = _2284 * _2125;
        float _2288 = _2285 * _2126;
        float _2295 = _392 + (-0.5);
        _2297 = cbMtdParam._m0[1u];
        _2299 = _2297.y * _2295;
        float _2302 = (_2276 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2303 = _2302 * (_2277 ? _2286 : (_2286 + (cbSceneParam._m0[72u].w * _2258)));
        _2304 = _2302 * (_2277 ? _2287 : (_2287 + (cbSceneParam._m0[72u].w * _2260)));
        _2305 = _2302 * (_2277 ? _2288 : (_2288 + (cbSceneParam._m0[72u].w * _2262)));
        _2308 = ((_2132 * _2136) * _2283) * _2302;
        _2311 = ((_2133 * _2136) * _2284) * _2302;
        _2314 = ((_2134 * _2136) * _2285) * _2302;
        _2315 = _2295 * 0.999000012874603271484375;
        _2326 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2326)
        {
            if ((cbInstanceData._m0[_444 + 7u].x + _2315) < 0.5)
            {
                _2479 = true;
                break;
            }
        }
        uint _2420 = _445 + uint(_2274.w);
        if ((cbInstanceData._m0[_2420].w < 1.0) && ((cbInstanceData._m0[_2420].w + _2315) < 0.5))
        {
            _2479 = true;
            break;
        }
        if ((_2299 + _224) < _2297.x)
        {
            _2479 = true;
            break;
        }
        _2479 = false;
        break;
    }
    float _2634;
    if (_2479)
    {
        discard_state = true;
        _2634 = 0.0;
    }
    else
    {
        _2634 = _2141;
    }
    SV_Target.x = _2303;
    SV_Target.y = _2304;
    SV_Target.z = _2305;
    SV_Target.w = _2634;
    SV_Target_1.x = _2308;
    SV_Target_1.y = _2311;
    SV_Target_1.z = _2314;
    SV_Target_1.w = _2141;
    discard_exit();
}


