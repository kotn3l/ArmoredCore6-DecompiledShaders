#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_ER_Emissive_Glow_Addition_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_ER_Emissive_Glow_Addition_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_ER_Emissive_Glow_Addition_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _799;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _173 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _174 = _173 * NORMAL.x;
    float _175 = _173 * NORMAL.y;
    float _176 = _173 * NORMAL.z;
    float _181;
    float _182;
    float _183;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _181 = (-0.0) - _174;
        _182 = (-0.0) - _175;
        _183 = (-0.0) - _176;
    }
    else
    {
        _181 = _174;
        _182 = _175;
        _183 = _176;
    }
    vec4 _212 = texture(sampler2D(M_ER_Emissive_Glow_Addition_snp_0_Texture2D_0, SS_DiffuseMap), vec2((((cbMtdParam._m0[12u].y * cbPerFrame._m0[22u].x) + TEXCOORD_1.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((cbMtdParam._m0[12u].z * cbPerFrame._m0[22u].x) + TEXCOORD_1.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _219 = _212.x * cbMtdParam._m0[9u].x;
    float _220 = _212.y * cbMtdParam._m0[9u].y;
    float _221 = _212.z * cbMtdParam._m0[9u].z;
    float _223 = (cbMtdParam._m0[9u].w * TEXCOORD_1.z) * _212.w;
    vec4 _250 = texture(sampler2D(M_ER_Emissive_Glow_Addition_snp_0_Texture2D_2, SS_DiffuseMap), vec2((((cbMtdParam._m0[12u].w * cbPerFrame._m0[22u].x) + TEXCOORD_1.x) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((cbMtdParam._m0[13u].x * cbPerFrame._m0[22u].x) + TEXCOORD_1.y) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    vec4 _281 = texture(sampler2D(M_ER_Emissive_Glow_Addition_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((cbMtdParam._m0[13u].y * cbPerFrame._m0[22u].x) + TEXCOORD_1.x) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((cbMtdParam._m0[13u].z * cbPerFrame._m0[22u].x) + TEXCOORD_1.y) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _299 = inversesqrt(dot(vec3(_181, _182, _183), vec3(_181, _182, _183)));
    float _300 = _299 * _181;
    float _301 = _299 * _182;
    float _302 = _299 * _183;
    float _2970 = isnan(0.0) ? _223 : (isnan(_223) ? 0.0 : max(_223, 0.0));
    float _304 = isnan(1.0) ? _2970 : (isnan(_2970) ? 1.0 : min(_2970, 1.0));
    float _2981 = isnan(0.0) ? _219 : (isnan(_219) ? 0.0 : max(_219, 0.0));
    float _2992 = isnan(0.0) ? _220 : (isnan(_220) ? 0.0 : max(_220, 0.0));
    float _3003 = isnan(0.0) ? _221 : (isnan(_221) ? 0.0 : max(_221, 0.0));
    float _323 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _364 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _374 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _364);
    float _375 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _364);
    float _376 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _364);
    float _380 = inversesqrt(dot(vec3(_374, _375, _376), vec3(_374, _375, _376)));
    float _381 = _374 * _380;
    float _382 = _375 * _380;
    float _383 = _376 * _380;
    float _389 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _390 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _411 = fma(_302, cbSceneParam._m0[5u].z, fma(_301, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _300));
    float _414 = fma(_302, cbSceneParam._m0[6u].z, fma(_301, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _300));
    float _417 = fma(_302, cbSceneParam._m0[7u].z, fma(_301, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _300));
    uint _430 = uint(roundEven(NORMAL.w)) * 13u;
    uint _431 = _430 + 9u;
    uint _432 = _431 + uint(cbMatDynParam._m0[0u].w);
    float _438 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2981 : (isnan(_2981) ? 1.0 : min(_2981, 1.0)))) * cbInstanceData._m0[_432].x;
    float _439 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2992 : (isnan(_2992) ? 1.0 : min(_2992, 1.0)))) * cbInstanceData._m0[_432].y;
    float _440 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3003 : (isnan(_3003) ? 1.0 : min(_3003, 1.0)))) * cbInstanceData._m0[_432].z;
    float _3014 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _441 = isnan(1.0) ? _3014 : (isnan(_3014) ? 1.0 : min(_3014, 1.0));
    float _3025 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _442 = isnan(1.0) ? _3025 : (isnan(_3025) ? 1.0 : min(_3025, 1.0));
    float _3036 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _443 = isnan(1.0) ? _3036 : (isnan(_3036) ? 1.0 : min(_3036, 1.0));
    vec4 _452 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _389, cbSceneParam._m0[86u].y * _390));
    float _455 = _452.x * TEXCOORD_1.w;
    float _456 = dot(vec3(_300, _301, _302), vec3(_381, _382, _383));
    float _459 = _456 * 2.0;
    float _464 = (_459 * _300) - _381;
    float _465 = (_459 * _301) - _382;
    float _466 = (_459 * _302) - _383;
    float _488 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _492 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _496 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _798;
    float _800;
    float _801;
    float _802;
    float _803;
    float _804;
    float _805;
    float _806;
    float _807;
    float _808;
    float _809;
    float _810;
    float _811;
    float _812;
    float _813;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _523 = fma(_496, cbModelParam._m0[26u].z, fma(_492, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _488));
        float _527 = fma(_496, cbModelParam._m0[27u].z, fma(_492, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _488));
        float _531 = fma(_496, cbModelParam._m0[28u].z, fma(_492, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _488));
        float _556 = _488 + _300;
        float _557 = _492 + _301;
        float _558 = _496 + _302;
        float _568 = fma(_558, cbModelParam._m0[26u].z, fma(_557, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _556)) - _523;
        float _569 = fma(_558, cbModelParam._m0[27u].z, fma(_557, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _556)) - _527;
        float _570 = fma(_558, cbModelParam._m0[28u].z, fma(_557, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _556)) - _531;
        float _574 = inversesqrt(dot(vec3(_568, _569, _570), vec3(_568, _569, _570)));
        float _587 = ((_574 * _568) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_523 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _588 = ((_574 * _569) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_527 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _589 = ((_574 * _570) / cbModelParam._m0[34u].z) + ((((((_531 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _592 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_587, _588, _589), 0.0);
        vec4 _599 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_587, _588, _589), 0.0);
        vec4 _606 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_587, _588, _589), 0.0);
        vec4 _613 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_587, _588, _589), 0.0);
        float _626 = exp2((_592.w + (-0.5)) * 20.0) * 2.0;
        float _627 = _626 * (_592.x + (-0.5));
        float _628 = _626 * (_592.y + (-0.5));
        float _629 = _626 * (_592.z + (-0.5));
        float _636 = exp2((_599.w + (-0.5)) * 20.0) * 2.0;
        float _637 = _636 * (_599.x + (-0.5));
        float _638 = _636 * (_599.y + (-0.5));
        float _639 = _636 * (_599.z + (-0.5));
        float _646 = exp2((_606.w + (-0.5)) * 20.0) * 2.0;
        float _647 = _646 * (_606.x + (-0.5));
        float _648 = _646 * (_606.y + (-0.5));
        float _649 = _646 * (_606.z + (-0.5));
        float _656 = exp2((_613.w + (-0.5)) * 20.0) * 2.0;
        float _657 = _656 * (_613.x + (-0.5));
        float _658 = _656 * (_613.y + (-0.5));
        float _659 = _656 * (_613.z + (-0.5));
        float _660 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
        float _661 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
        float _662 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
        float _663 = _627 * 0.5;
        float _664 = _637 * 0.5;
        float _665 = _647 * 0.5;
        float _666 = dot(vec3(_663, _664, _665), vec3(_663, _664, _665));
        float _671 = (_666 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_666);
        float _680 = (dot(vec3(_300, _301, _302), vec3(_671 * _663, _671 * _664, _671 * _665)) + 1.0) * 0.5;
        float _3062 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
        float _690 = sqrt(((_664 * _664) + (_663 * _663)) + (_665 * _665)) / (_660 + 9.9999997473787516355514526367188e-06);
        float _3073 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
        float _691 = isnan(1.0) ? _3073 : (isnan(_3073) ? 1.0 : min(_3073, 1.0));
        float _692 = _691 * 2.0;
        float _696 = (1.0 - _691) / (_691 + 1.0);
        float _3084 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
        float _697 = isnan(1.0) ? _3084 : (isnan(_3084) ? 1.0 : min(_3084, 1.0));
        float _706 = ((((1.0 - _697) * (_692 + 2.0)) * exp2(log2(isnan(1.0) ? _3062 : (isnan(_3062) ? 1.0 : min(_3062, 1.0))) * (_692 + 1.0))) + _697) * _660;
        float _707 = _628 * 0.5;
        float _708 = _638 * 0.5;
        float _709 = _648 * 0.5;
        float _710 = dot(vec3(_707, _708, _709), vec3(_707, _708, _709));
        float _715 = (_710 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_710);
        float _723 = (dot(vec3(_300, _301, _302), vec3(_715 * _707, _715 * _708, _715 * _709)) + 1.0) * 0.5;
        float _3095 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
        float _732 = sqrt(((_708 * _708) + (_707 * _707)) + (_709 * _709)) / (_661 + 9.9999997473787516355514526367188e-06);
        float _3106 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
        float _733 = isnan(1.0) ? _3106 : (isnan(_3106) ? 1.0 : min(_3106, 1.0));
        float _734 = _733 * 2.0;
        float _738 = (1.0 - _733) / (_733 + 1.0);
        float _3117 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
        float _739 = isnan(1.0) ? _3117 : (isnan(_3117) ? 1.0 : min(_3117, 1.0));
        float _748 = ((((1.0 - _739) * (_734 + 2.0)) * exp2(log2(isnan(1.0) ? _3095 : (isnan(_3095) ? 1.0 : min(_3095, 1.0))) * (_734 + 1.0))) + _739) * _661;
        float _749 = _629 * 0.5;
        float _750 = _639 * 0.5;
        float _751 = _649 * 0.5;
        float _752 = dot(vec3(_749, _750, _751), vec3(_749, _750, _751));
        float _757 = (_752 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_752);
        float _765 = (dot(vec3(_300, _301, _302), vec3(_757 * _749, _757 * _750, _757 * _751)) + 1.0) * 0.5;
        float _3128 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
        float _774 = sqrt(((_750 * _750) + (_749 * _749)) + (_751 * _751)) / (_662 + 9.9999997473787516355514526367188e-06);
        float _3139 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
        float _775 = isnan(1.0) ? _3139 : (isnan(_3139) ? 1.0 : min(_3139, 1.0));
        float _776 = _775 * 2.0;
        float _780 = (1.0 - _775) / (_775 + 1.0);
        float _3150 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
        float _781 = isnan(1.0) ? _3150 : (isnan(_3150) ? 1.0 : min(_3150, 1.0));
        float _790 = ((((1.0 - _781) * (_776 + 2.0)) * exp2(log2(isnan(1.0) ? _3128 : (isnan(_3128) ? 1.0 : min(_3128, 1.0))) * (_776 + 1.0))) + _781) * _662;
        _798 = _629;
        _800 = _628;
        _801 = _627;
        _802 = _639;
        _803 = _638;
        _804 = _637;
        _805 = _649;
        _806 = _648;
        _807 = _647;
        _808 = _662;
        _809 = _661;
        _810 = _660;
        _811 = cbModelParam._m0[36u].z * (isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0)));
        _812 = cbModelParam._m0[36u].z * (isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0)));
        _813 = cbModelParam._m0[36u].z * (isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0)));
    }
    else
    {
        _798 = _799;
        _800 = _799;
        _801 = _799;
        _802 = _799;
        _803 = _799;
        _804 = _799;
        _805 = _799;
        _806 = _799;
        _807 = _799;
        _808 = _799;
        _809 = _799;
        _810 = _799;
        _811 = 0.0;
        _812 = 0.0;
        _813 = 0.0;
    }
    float _1108;
    float _1109;
    float _1110;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _839 = fma(_496, cbModelParam._m0[30u].z, fma(_492, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _488));
        float _843 = fma(_496, cbModelParam._m0[31u].z, fma(_492, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _488));
        float _847 = fma(_496, cbModelParam._m0[32u].z, fma(_492, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _488));
        float _870 = _488 + _300;
        float _871 = _492 + _301;
        float _872 = _496 + _302;
        float _882 = fma(_872, cbModelParam._m0[30u].z, fma(_871, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _870)) - _839;
        float _883 = fma(_872, cbModelParam._m0[31u].z, fma(_871, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _870)) - _843;
        float _884 = fma(_872, cbModelParam._m0[32u].z, fma(_871, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _870)) - _847;
        float _888 = inversesqrt(dot(vec3(_882, _883, _884), vec3(_882, _883, _884)));
        float _901 = ((_888 * _882) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_839 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _902 = ((_888 * _883) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_843 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _903 = ((_888 * _884) / cbModelParam._m0[35u].z) + ((((((_847 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _905 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_901, _902, _903), 0.0);
        vec4 _912 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_901, _902, _903), 0.0);
        vec4 _919 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_901, _902, _903), 0.0);
        vec4 _926 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_901, _902, _903), 0.0);
        float _938 = exp2((_905.w + (-0.5)) * 20.0) * 2.0;
        float _939 = _938 * (_905.x + (-0.5));
        float _940 = _938 * (_905.y + (-0.5));
        float _941 = _938 * (_905.z + (-0.5));
        float _948 = exp2((_912.w + (-0.5)) * 20.0) * 2.0;
        float _949 = _948 * (_912.x + (-0.5));
        float _950 = _948 * (_912.y + (-0.5));
        float _951 = _948 * (_912.z + (-0.5));
        float _958 = exp2((_919.w + (-0.5)) * 20.0) * 2.0;
        float _959 = _958 * (_919.x + (-0.5));
        float _960 = _958 * (_919.y + (-0.5));
        float _961 = _958 * (_919.z + (-0.5));
        float _968 = exp2((_926.w + (-0.5)) * 20.0) * 2.0;
        float _969 = _968 * (_926.x + (-0.5));
        float _970 = _968 * (_926.y + (-0.5));
        float _971 = _968 * (_926.z + (-0.5));
        float _972 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _973 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _974 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _975 = _939 * 0.5;
        float _976 = _949 * 0.5;
        float _977 = _959 * 0.5;
        float _978 = dot(vec3(_975, _976, _977), vec3(_975, _976, _977));
        float _983 = (_978 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_978);
        float _991 = (dot(vec3(_300, _301, _302), vec3(_983 * _975, _983 * _976, _983 * _977)) + 1.0) * 0.5;
        float _3191 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _1000 = sqrt(((_976 * _976) + (_975 * _975)) + (_977 * _977)) / (_972 + 9.9999997473787516355514526367188e-06);
        float _3202 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1001 = isnan(1.0) ? _3202 : (isnan(_3202) ? 1.0 : min(_3202, 1.0));
        float _1002 = _1001 * 2.0;
        float _1006 = (1.0 - _1001) / (_1001 + 1.0);
        float _3213 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1007 = isnan(1.0) ? _3213 : (isnan(_3213) ? 1.0 : min(_3213, 1.0));
        float _1016 = ((((1.0 - _1007) * (_1002 + 2.0)) * exp2(log2(isnan(1.0) ? _3191 : (isnan(_3191) ? 1.0 : min(_3191, 1.0))) * (_1002 + 1.0))) + _1007) * _972;
        float _1017 = _940 * 0.5;
        float _1018 = _950 * 0.5;
        float _1019 = _960 * 0.5;
        float _1020 = dot(vec3(_1017, _1018, _1019), vec3(_1017, _1018, _1019));
        float _1025 = (_1020 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1020);
        float _1033 = (dot(vec3(_300, _301, _302), vec3(_1025 * _1017, _1025 * _1018, _1025 * _1019)) + 1.0) * 0.5;
        float _3224 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1042 = sqrt(((_1018 * _1018) + (_1017 * _1017)) + (_1019 * _1019)) / (_973 + 9.9999997473787516355514526367188e-06);
        float _3235 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1043 = isnan(1.0) ? _3235 : (isnan(_3235) ? 1.0 : min(_3235, 1.0));
        float _1044 = _1043 * 2.0;
        float _1048 = (1.0 - _1043) / (_1043 + 1.0);
        float _3246 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1049 = isnan(1.0) ? _3246 : (isnan(_3246) ? 1.0 : min(_3246, 1.0));
        float _1058 = ((((1.0 - _1049) * (_1044 + 2.0)) * exp2(log2(isnan(1.0) ? _3224 : (isnan(_3224) ? 1.0 : min(_3224, 1.0))) * (_1044 + 1.0))) + _1049) * _973;
        float _1059 = _941 * 0.5;
        float _1060 = _951 * 0.5;
        float _1061 = _961 * 0.5;
        float _1062 = dot(vec3(_1059, _1060, _1061), vec3(_1059, _1060, _1061));
        float _1067 = (_1062 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1062);
        float _1075 = (dot(vec3(_300, _301, _302), vec3(_1067 * _1059, _1067 * _1060, _1067 * _1061)) + 1.0) * 0.5;
        float _3257 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1084 = sqrt(((_1060 * _1060) + (_1059 * _1059)) + (_1061 * _1061)) / (_974 + 9.9999997473787516355514526367188e-06);
        float _3268 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1085 = isnan(1.0) ? _3268 : (isnan(_3268) ? 1.0 : min(_3268, 1.0));
        float _1086 = _1085 * 2.0;
        float _1090 = (1.0 - _1085) / (_1085 + 1.0);
        float _3279 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1091 = isnan(1.0) ? _3279 : (isnan(_3279) ? 1.0 : min(_3279, 1.0));
        float _1100 = ((((1.0 - _1091) * (_1086 + 2.0)) * exp2(log2(isnan(1.0) ? _3257 : (isnan(_3257) ? 1.0 : min(_3257, 1.0))) * (_1086 + 1.0))) + _1091) * _974;
        _1108 = _941;
        _1109 = _940;
        _1110 = _939;
        _1111 = _951;
        _1112 = _950;
        _1113 = _949;
        _1114 = _961;
        _1115 = _960;
        _1116 = _959;
        _1117 = _974;
        _1118 = _973;
        _1119 = _972;
        _1120 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0)));
        _1121 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0)));
        _1122 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0)));
    }
    else
    {
        _1108 = _799;
        _1109 = _799;
        _1110 = _799;
        _1111 = _799;
        _1112 = _799;
        _1113 = _799;
        _1114 = _799;
        _1115 = _799;
        _1116 = _799;
        _1117 = _799;
        _1118 = _799;
        _1119 = _799;
        _1120 = 0.0;
        _1121 = 0.0;
        _1122 = 0.0;
    }
    float _1132 = (cbModelParam._m0[1u].x * (_1120 - _811)) + _811;
    float _1133 = (cbModelParam._m0[1u].x * (_1121 - _812)) + _812;
    float _1134 = (cbModelParam._m0[1u].x * (_1122 - _813)) + _813;
    float _1155 = fma(_1134, cbSceneParam._m0[89u].z, fma(_1133, cbSceneParam._m0[89u].y, _1132 * cbSceneParam._m0[89u].x));
    float _1158 = fma(_1134, cbSceneParam._m0[90u].z, fma(_1133, cbSceneParam._m0[90u].y, _1132 * cbSceneParam._m0[90u].x));
    float _1161 = fma(_1134, cbSceneParam._m0[91u].z, fma(_1133, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1132));
    float _1176 = _464 * 0.5;
    float _1177 = _465 * 0.5;
    float _1178 = _466 * 0.5;
    float _1179 = dot(vec4(_1176, _1177, _1178, 1.0), vec4(_1110, _1113, _1116, _1119));
    float _1182 = dot(vec4(_1176, _1177, _1178, 1.0), vec4(_1109, _1112, _1115, _1118));
    float _1185 = dot(vec4(_1176, _1177, _1178, 1.0), vec4(_1108, _1111, _1114, _1117));
    float _1219;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1192 = dot(vec4(_1176, _1177, _1178, 1.0), vec4(_798, _802, _805, _808));
        float _1196 = dot(vec4(_1176, _1177, _1178, 1.0), vec4(_800, _803, _806, _809));
        float _1200 = dot(vec4(_1176, _1177, _1178, 1.0), vec4(_801, _804, _807, _810));
        float _1207 = dot(vec4(cbModelParam._m0[39u]), vec4(_1176, _1177, _1178, 1.0));
        _1219 = dot(vec3(isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0)), isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0)), isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1207) ? 0.0 : (isnan(0.0) ? _1207 : max(0.0, _1207))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1219 = 1.0;
    }
    float _1230;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1221 = dot(vec4(cbModelParam._m0[40u]), vec4(_1176, _1177, _1178, 1.0));
        _1230 = dot(vec3(isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0)), isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0)), isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1221) ? 0.0 : (isnan(0.0) ? _1221 : max(0.0, _1221))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1230 = 1.0;
    }
    float _1234 = (_1230 * cbModelParam._m0[1u].x) + (_1219 * (1.0 - cbModelParam._m0[1u].x));
    float _1243 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1324;
    float _1326;
    float _1328;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1291 = fma(_496, cbModelParam._m0[13u].z, fma(_492, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _488)) + cbModelParam._m0[13u].w;
        float _1295 = fma(_496, cbModelParam._m0[14u].z, fma(_492, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _488)) + cbModelParam._m0[14u].w;
        float _1299 = fma(_496, cbModelParam._m0[15u].z, fma(_492, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _488)) + cbModelParam._m0[15u].w;
        float _1302 = fma(_466, cbModelParam._m0[13u].z, fma(_465, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _464));
        float _1305 = fma(_466, cbModelParam._m0[14u].z, fma(_465, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _464));
        float _1308 = fma(_466, cbModelParam._m0[15u].z, fma(_465, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _464));
        float _1334;
        if (_1302 > 0.0)
        {
            _1334 = abs((1.0 - _1291) / _1302);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1302 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1291 + 1.0) / _1302);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1334 = frontier_phi_16_14_ladder;
        }
        float _1561;
        if (_1305 > 0.0)
        {
            _1561 = abs((1.0 - _1295) / _1305);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1305 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1295 + 1.0) / _1305);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1561 = frontier_phi_25_21_ladder;
        }
        float _1753;
        if (_1308 > 0.0)
        {
            _1753 = abs((1.0 - _1299) / _1308);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1308 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1299 + 1.0) / _1308);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1753 = frontier_phi_37_32_ladder;
        }
        float _1755 = isnan(_1561) ? _1334 : (isnan(_1334) ? _1561 : min(_1334, _1561));
        float _1756 = isnan(_1753) ? _1755 : (isnan(_1755) ? _1753 : min(_1755, _1753));
        float _1760 = (_1756 * _1302) + _1291;
        float _1761 = (_1756 * _1305) + _1295;
        float _1762 = (_1756 * _1308) + _1299;
        float _1763 = _1756 * 9.9999997473787516355514526367188e-05;
        float _1765 = (-1.0) - _1763;
        float _1767 = _1763 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1762 > _1767) || ((_1762 < _1765) || ((_1761 > _1767) || ((_1761 < _1765) || ((_1760 < _1765) || (_1760 > _1767))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1859 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1762, cbModelParam._m0[9u].z, fma(_1761, cbModelParam._m0[9u].y, _1760 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1762, cbModelParam._m0[10u].z, fma(_1761, cbModelParam._m0[10u].y, _1760 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1762, cbModelParam._m0[11u].z, fma(_1761, cbModelParam._m0[11u].y, _1760 * cbModelParam._m0[11u].x))), _1243);
            frontier_phi_15_37_ladder = _1859.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _1859.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _1859.x * cbModelParam._m0[1u].y;
        }
        _1324 = frontier_phi_15_37_ladder_2;
        _1326 = frontier_phi_15_37_ladder_1;
        _1328 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1312 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_464, _465, _466), _1243);
        _1324 = _1312.x * cbModelParam._m0[1u].y;
        _1326 = _1312.y * cbModelParam._m0[1u].y;
        _1328 = _1312.z * cbModelParam._m0[1u].y;
    }
    float _1331 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1423;
    float _1425;
    float _1427;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1387 = fma(_496, cbModelParam._m0[21u].z, fma(_492, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _488)) + cbModelParam._m0[21u].w;
        float _1391 = fma(_496, cbModelParam._m0[22u].z, fma(_492, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _488)) + cbModelParam._m0[22u].w;
        float _1395 = fma(_496, cbModelParam._m0[23u].z, fma(_492, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _488)) + cbModelParam._m0[23u].w;
        float _1398 = fma(_466, cbModelParam._m0[21u].z, fma(_465, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _464));
        float _1401 = fma(_466, cbModelParam._m0[22u].z, fma(_465, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _464));
        float _1404 = fma(_466, cbModelParam._m0[23u].z, fma(_465, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _464));
        float _1566;
        if (_1398 > 0.0)
        {
            _1566 = abs((1.0 - _1387) / _1398);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1398 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1387 + 1.0) / _1398);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1566 = frontier_phi_27_23_ladder;
        }
        float _1780;
        if (_1401 > 0.0)
        {
            _1780 = abs((1.0 - _1391) / _1401);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1401 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1391 + 1.0) / _1401);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1780 = frontier_phi_39_34_ladder;
        }
        float _1931;
        if (_1404 > 0.0)
        {
            _1931 = abs((1.0 - _1395) / _1404);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1404 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1395 + 1.0) / _1404);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _1931 = frontier_phi_48_45_ladder;
        }
        float _1933 = isnan(_1780) ? _1566 : (isnan(_1566) ? _1780 : min(_1566, _1780));
        float _1934 = isnan(_1931) ? _1933 : (isnan(_1933) ? _1931 : min(_1933, _1931));
        float _1938 = (_1934 * _1398) + _1387;
        float _1939 = (_1934 * _1401) + _1391;
        float _1940 = (_1934 * _1404) + _1395;
        float _1941 = _1934 * 9.9999997473787516355514526367188e-05;
        float _1942 = (-1.0) - _1941;
        float _1944 = _1941 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_1940 > _1944) || ((_1940 < _1942) || ((_1939 > _1944) || ((_1939 < _1942) || ((_1938 < _1942) || (_1938 > _1944))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2169 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1940, cbModelParam._m0[17u].z, fma(_1939, cbModelParam._m0[17u].y, _1938 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1940, cbModelParam._m0[18u].z, fma(_1939, cbModelParam._m0[18u].y, _1938 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1940, cbModelParam._m0[19u].z, fma(_1939, cbModelParam._m0[19u].y, _1938 * cbModelParam._m0[19u].x))), _1331);
            frontier_phi_24_48_ladder = _2169.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2169.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2169.x * cbModelParam._m0[1u].z;
        }
        _1423 = frontier_phi_24_48_ladder_2;
        _1425 = frontier_phi_24_48_ladder_1;
        _1427 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1407 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_464, _465, _466), _1331);
        _1423 = _1407.x * cbModelParam._m0[1u].z;
        _1425 = _1407.y * cbModelParam._m0[1u].z;
        _1427 = _1407.z * cbModelParam._m0[1u].z;
    }
    float _1439 = _455 * 0.01200000010430812835693359375;
    float _1441 = _1439 * ((cbModelParam._m0[1u].w * (_1423 - _1324)) + _1324);
    float _1442 = _1439 * ((cbModelParam._m0[1u].w * (_1425 - _1326)) + _1326);
    float _1443 = _1439 * ((cbModelParam._m0[1u].w * (_1427 - _1328)) + _1328);
    float _1446 = fma(_1443, cbSceneParam._m0[89u].z, fma(_1442, cbSceneParam._m0[89u].y, _1441 * cbSceneParam._m0[89u].x));
    float _1449 = fma(_1443, cbSceneParam._m0[90u].z, fma(_1442, cbSceneParam._m0[90u].y, _1441 * cbSceneParam._m0[90u].x));
    float _1452 = fma(_1443, cbSceneParam._m0[91u].z, fma(_1442, cbSceneParam._m0[91u].y, _1441 * cbSceneParam._m0[91u].x));
    vec4 _1460 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_389, _390));
    float _1462 = _1460.w;
    float _1474 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1462);
    float _1475 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1462);
    float _1476 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1462);
    uvec4 _1480 = floatBitsToUint(cbInstanceData._m0[_430 + 5u]);
    uint _1482 = _1480.x * 14u;
    uint _1483 = _1482 + 13u;
    float _1490 = _455 + (-1.0);
    float _1496 = (cbLight._m0[_1483].x * _1490) + 1.0;
    float _1497 = (cbLight._m0[_1483].y * _1490) + 1.0;
    float _1498 = (cbLight._m0[_1483].z * _1490) + 1.0;
    float _1499 = (cbLight._m0[_1483].w * _1490) + 1.0;
    uint _1500 = _1482 + 5u;
    float _1506 = isnan(1.0) ? _1497 : (isnan(_1497) ? 1.0 : min(_1497, 1.0));
    uint _1510 = _1482 + 4u;
    float _1520 = isnan(1.0) ? _1496 : (isnan(_1496) ? 1.0 : min(_1496, 1.0));
    uint _1524 = _1482 | 1u;
    float _1535 = dot(vec3(cbLight._m0[_1482].xyz), vec3(_300, _301, _302));
    float _1538 = dot(vec3(cbLight._m0[_1524].xyz), vec3(_300, _301, _302));
    float _3415 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
    float _3426 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
    float _1543 = (isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0))) * 0.3183098733425140380859375;
    float _1545 = (isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0))) * 0.3183098733425140380859375;
    float _1552 = ((cbLight._m0[_1500].x * _1506) * _1545) + (((cbLight._m0[_1510].x * _1474) * _1520) * _1543);
    float _1553 = ((_1506 * cbLight._m0[_1500].y) * _1545) + (((cbLight._m0[_1510].y * _1475) * _1520) * _1543);
    float _1554 = ((_1506 * cbLight._m0[_1500].z) * _1545) + (((cbLight._m0[_1510].z * _1476) * _1520) * _1543);
    uvec4 _1558 = floatBitsToUint(cbLight._m0[_1482 + 12u]);
    bool _1560 = _1558.x == 0u;
    float _1571;
    float _1573;
    float _1575;
    if (_1560)
    {
        _1571 = _1552;
        _1573 = _1553;
        _1575 = _1554;
    }
    else
    {
        uint _1579 = _1482 + 6u;
        float _1595 = (dot(vec3(cbLight._m0[_1482 + 2u].xyz), vec3(_300, _301, _302)) * 0.5) + 0.5;
        float _1596 = _1595 * _1595;
        float _3437 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        float _1597 = isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0));
        float _1598 = isnan(1.0) ? _1498 : (isnan(_1498) ? 1.0 : min(_1498, 1.0));
        _1571 = (((cbLight._m0[_1579].x * 0.3183098733425140380859375) * _1597) * _1598) + _1552;
        _1573 = (((cbLight._m0[_1579].y * 0.3183098733425140380859375) * _1597) * _1598) + _1553;
        _1575 = (((cbLight._m0[_1579].z * 0.3183098733425140380859375) * _1597) * _1598) + _1554;
    }
    bool _1578 = _1558.y == 0u;
    float _1616;
    float _1618;
    float _1620;
    if (_1578)
    {
        _1616 = _1571;
        _1618 = _1573;
        _1620 = _1575;
    }
    else
    {
        uint _1724 = _1482 + 7u;
        float _1740 = (dot(vec3(cbLight._m0[_1482 + 3u].xyz), vec3(_300, _301, _302)) * 0.5) + 0.5;
        float _1741 = _1740 * _1740;
        float _3453 = isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0));
        float _1742 = isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0));
        float _1743 = isnan(1.0) ? _1499 : (isnan(_1499) ? 1.0 : min(_1499, 1.0));
        _1616 = (((cbLight._m0[_1724].x * 0.3183098733425140380859375) * _1742) * _1743) + _1571;
        _1618 = (((cbLight._m0[_1724].y * 0.3183098733425140380859375) * _1742) * _1743) + _1573;
        _1620 = (((cbLight._m0[_1724].z * 0.3183098733425140380859375) * _1742) * _1743) + _1575;
    }
    uint _1622 = _1482 + 8u;
    float _1628 = cbLight._m0[_1482].x + _381;
    float _1629 = cbLight._m0[_1482].y + _382;
    float _1630 = cbLight._m0[_1482].z + _383;
    float _1634 = inversesqrt(dot(vec3(_1628, _1629, _1630), vec3(_1628, _1629, _1630)));
    float _1638 = dot(vec3(_300, _301, _302), vec3(cbLight._m0[_1482].xyz));
    float _3469 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
    float _1641 = isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0));
    float _3480 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _1642 = isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0));
    float _1643 = dot(vec3(cbLight._m0[_1482].xyz), vec3(_1628 * _1634, _1629 * _1634, _1630 * _1634));
    float _3491 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
    float _1654 = (exp2(log2(1.0 - (isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1660 = (0.5 / ((_1641 + 9.9999999392252902907785028219223e-09) + _1642)) * _1641;
    float _3502 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
    float _1662 = (isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0))) * 0.31831014156341552734375;
    uint _1676 = _1482 + 9u;
    float _1682 = cbLight._m0[_1524].x + _381;
    float _1683 = cbLight._m0[_1524].y + _382;
    float _1684 = cbLight._m0[_1524].z + _383;
    float _1688 = inversesqrt(dot(vec3(_1682, _1683, _1684), vec3(_1682, _1683, _1684)));
    float _1692 = dot(vec3(_300, _301, _302), vec3(cbLight._m0[_1524].xyz));
    float _3513 = isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0));
    float _1695 = isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0));
    float _1696 = dot(vec3(cbLight._m0[_1524].xyz), vec3(_1682 * _1688, _1683 * _1688, _1684 * _1688));
    float _3524 = isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0));
    float _1705 = (exp2(log2(1.0 - (isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1709 = (0.5 / ((_1695 + 9.9999999392252902907785028219223e-09) + _1642)) * _1695;
    float _3535 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
    float _1711 = (isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0))) * 0.31831014156341552734375;
    float _1721 = (((_1705 * cbLight._m0[_1676].x) * _1711) * _1506) + ((((cbLight._m0[_1622].x * _1474) * _1654) * _1662) * _1520);
    float _1722 = (((_1705 * cbLight._m0[_1676].y) * _1711) * _1506) + ((((cbLight._m0[_1622].y * _1475) * _1654) * _1662) * _1520);
    float _1723 = (((_1705 * cbLight._m0[_1676].z) * _1711) * _1506) + ((((cbLight._m0[_1622].z * _1476) * _1654) * _1662) * _1520);
    float _1785;
    float _1787;
    float _1789;
    if (_1560)
    {
        _1785 = _1721;
        _1787 = _1722;
        _1789 = _1723;
    }
    else
    {
        uint _1791 = _1482 + 10u;
        uint _1797 = _1482 + 2u;
        float _1803 = cbLight._m0[_1797].x + _381;
        float _1804 = cbLight._m0[_1797].y + _382;
        float _1805 = cbLight._m0[_1797].z + _383;
        float _1809 = inversesqrt(dot(vec3(_1803, _1804, _1805), vec3(_1803, _1804, _1805)));
        float _1813 = dot(vec3(_300, _301, _302), vec3(cbLight._m0[_1797].xyz));
        float _3546 = isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0));
        float _1816 = isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0));
        float _1817 = dot(vec3(cbLight._m0[_1797].xyz), vec3(_1803 * _1809, _1804 * _1809, _1805 * _1809));
        float _3557 = isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0));
        float _1826 = (exp2(log2(1.0 - (isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1830 = (0.5 / ((_1816 + 9.9999999392252902907785028219223e-09) + _1642)) * _1816;
        float _3568 = isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0));
        float _1832 = (isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0))) * 0.31831014156341552734375;
        float _1833 = isnan(1.0) ? _1498 : (isnan(_1498) ? 1.0 : min(_1498, 1.0));
        _1785 = (((_1826 * cbLight._m0[_1791].x) * _1832) * _1833) + _1721;
        _1787 = (((_1826 * cbLight._m0[_1791].y) * _1832) * _1833) + _1722;
        _1789 = (((_1826 * cbLight._m0[_1791].z) * _1832) * _1833) + _1723;
    }
    float _1868;
    float _1870;
    float _1872;
    if (_1578)
    {
        _1868 = _1785;
        _1870 = _1787;
        _1872 = _1789;
    }
    else
    {
        uint _1879 = _1482 + 11u;
        uint _1885 = _1482 + 3u;
        float _1891 = cbLight._m0[_1885].x + _381;
        float _1892 = cbLight._m0[_1885].y + _382;
        float _1893 = cbLight._m0[_1885].z + _383;
        float _1897 = inversesqrt(dot(vec3(_1891, _1892, _1893), vec3(_1891, _1892, _1893)));
        float _1901 = dot(vec3(_300, _301, _302), vec3(cbLight._m0[_1885].xyz));
        float _3584 = isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0));
        float _1904 = isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0));
        float _1905 = dot(vec3(cbLight._m0[_1885].xyz), vec3(_1891 * _1897, _1892 * _1897, _1893 * _1897));
        float _3595 = isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0));
        float _1914 = (exp2(log2(1.0 - (isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1918 = (0.5 / ((_1904 + 9.9999999392252902907785028219223e-09) + _1642)) * _1904;
        float _3606 = isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0));
        float _1920 = (isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0))) * 0.31831014156341552734375;
        float _1921 = isnan(1.0) ? _1499 : (isnan(_1499) ? 1.0 : min(_1499, 1.0));
        _1868 = (((_1914 * cbLight._m0[_1879].x) * _1920) * _1921) + _1785;
        _1870 = (((_1914 * cbLight._m0[_1879].y) * _1920) * _1921) + _1787;
        _1872 = (((_1914 * cbLight._m0[_1879].z) * _1920) * _1921) + _1789;
    }
    float _2055;
    float _2057;
    float _2059;
    float _2061;
    float _2063;
    float _2065;
    if (_1480.y == 0u)
    {
        float _1996 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1997 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1996;
        float _1998 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1996;
        float _1999 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1996;
        uvec4 _2011 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2012 = _2011.x;
        uint _2023 = uint((float(_2011.y) * floor(float(uint(cbSceneParam._m0[85u].y * _390) / _2012))) + floor(float(uint(cbSceneParam._m0[85u].x * _389) / _2012)));
        float _2033 = (log2(_1999 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2034 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
        uint _2037 = uint(isnan(14.0) ? _2034 : (isnan(_2034) ? 14.0 : min(_2034, 14.0)));
        uvec4 _2042 = texelFetch(g_lightClusterGridBuffer, int(((_2037 << 2u) + (_2023 << 6u)) >> 2u));
        uint _2043 = _2042.x;
        uint _2044 = _2011.z;
        float _2174;
        float _2176;
        float _2178;
        float _2180;
        float _2182;
        float _2184;
        if (((((1u << ((_2044 >> 4u) & 15u)) + 4294967295u) & _2043) == 0u) || ((_2044 & 240u) == 0u))
        {
            _2174 = 0.0;
            _2176 = 0.0;
            _2178 = 0.0;
            _2180 = 0.0;
            _2182 = 0.0;
            _2184 = 0.0;
        }
        else
        {
            float _2175;
            float _2177;
            float _2179;
            float _2181;
            float _2183;
            float _2185;
            float _2325 = 0.0;
            float _2326 = 0.0;
            float _2327 = 0.0;
            float _2328 = 0.0;
            float _2329 = 0.0;
            float _2330 = 0.0;
            uint _2331 = 0u;
            uint _2340;
            bool _2341;
            for (;;)
            {
                _2340 = texelFetch(g_lightClassification, int((((_2037 << 5u) + (_2023 << 9u)) + (_2331 << 2u)) >> 2u)).x;
                _2341 = _2340 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2341)
                {
                    frontier_phi_63_pred = _2330;
                    frontier_phi_63_pred_1 = _2329;
                    frontier_phi_63_pred_2 = _2328;
                    frontier_phi_63_pred_3 = _2327;
                    frontier_phi_63_pred_4 = _2326;
                    frontier_phi_63_pred_5 = _2325;
                }
                else
                {
                    float _2449;
                    float _2450;
                    float _2451;
                    float _2452;
                    float _2453;
                    float _2454;
                    uint _2455;
                    _2449 = _2325;
                    _2450 = _2326;
                    _2451 = _2327;
                    _2452 = _2328;
                    _2453 = _2329;
                    _2454 = _2330;
                    _2455 = _2340;
                    float _2381;
                    float _2382;
                    float _2383;
                    float _2384;
                    float _2385;
                    float _2386;
                    for (;;)
                    {
                        uint _2459 = uint(findLSB(_2455)) + (_2331 << 5u);
                        uint _2456 = (_2455 + 4294967295u) & _2455;
                        uint _2461 = _2459 * 48u;
                        vec4 _2475 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2461)).x, texelFetch(g_PointLightRenderingBuffer, int(_2461 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2461 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2461 + 3u)).x));
                        uint _2481 = (_2459 * 48u) + 4u;
                        vec4 _2494 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2481)).x, texelFetch(g_PointLightRenderingBuffer, int(_2481 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2481 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2481 + 3u)).x));
                        uint _2500 = (_2459 * 48u) + 8u;
                        vec3 _2511 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2500)).x, texelFetch(g_PointLightRenderingBuffer, int(_2500 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2500 + 2u)).x));
                        float _2515 = _2475.x - _1997;
                        float _2516 = _2475.y - _1998;
                        float _2517 = _2475.z - _1999;
                        float _2518 = dot(vec3(_2515, _2516, _2517), vec3(_2515, _2516, _2517));
                        float _2521 = inversesqrt(_2518);
                        float _2530 = 1.0 - (_2518 * _2475.w);
                        float _3632 = isnan(0.0) ? _2530 : (isnan(_2530) ? 0.0 : max(_2530, 0.0));
                        float _2531 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
                        float _2532 = sqrt(_2518) * _2494.w;
                        float _2535 = 1.39999997615814208984375 / (_2532 + 1.39999997615814208984375);
                        float _2536 = _2535 * _2535;
                        float _2539 = ((1.0 - _2536) * dot(vec3(_411, _414, _417), vec3(_2521 * _2515, _2521 * _2516, _2521 * _2517))) + _2536;
                        float _2542 = _2532 * _2532;
                        float _2546 = ((isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0))) * _2531) / ((_2542 * 0.699999988079071044921875) + 1.0);
                        float _2550 = (-0.0) - _1997;
                        float _2551 = (-0.0) - _1998;
                        float _2552 = (-0.0) - _1999;
                        float _2556 = inversesqrt(dot(vec3(_2550, _2551, _2552), vec3(_2550, _2551, _2552)));
                        float _2560 = dot(vec3(_411, _414, _417), vec3(_2556 * _2550, _2556 * _2551, _2556 * _2552));
                        float _3648 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0));
                        float _3659 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0));
                        float _2564 = isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0));
                        float _2568 = (0.5 / (((isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0))) + 9.9999999392252902907785028219223e-09) + _2564)) * _2564;
                        float _3670 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0));
                        float _2577 = (((isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0))) * 3.1415927410125732421875) / ((_2542 * 2.1991131305694580078125) + 3.141590118408203125)) * _2531;
                        _2384 = (_2546 * _2494.x) + _2452;
                        _2385 = (_2546 * _2494.y) + _2453;
                        _2386 = (_2546 * _2494.z) + _2454;
                        _2381 = (_2577 * _2511.x) + _2449;
                        _2382 = (_2577 * _2511.y) + _2450;
                        _2383 = (_2577 * _2511.z) + _2451;
                        if (_2456 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2449 = _2381;
                            _2450 = _2382;
                            _2451 = _2383;
                            _2452 = _2384;
                            _2453 = _2385;
                            _2454 = _2386;
                            _2455 = _2456;
                        }
                    }
                    frontier_phi_63_pred = _2386;
                    frontier_phi_63_pred_1 = _2385;
                    frontier_phi_63_pred_2 = _2384;
                    frontier_phi_63_pred_3 = _2383;
                    frontier_phi_63_pred_4 = _2382;
                    frontier_phi_63_pred_5 = _2381;
                }
                _2185 = frontier_phi_63_pred;
                _2183 = frontier_phi_63_pred_1;
                _2181 = frontier_phi_63_pred_2;
                _2179 = frontier_phi_63_pred_3;
                _2177 = frontier_phi_63_pred_4;
                _2175 = frontier_phi_63_pred_5;
                uint _2332 = _2331 + 1u;
                if (_2332 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2325 = _2175;
                    _2326 = _2177;
                    _2327 = _2179;
                    _2328 = _2181;
                    _2329 = _2183;
                    _2330 = _2185;
                    _2331 = _2332;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2174 = _2175;
            _2176 = _2177;
            _2178 = _2179;
            _2180 = _2181;
            _2182 = _2183;
            _2184 = _2185;
        }
        uvec4 _2188 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2189 = _2188.z;
        uint _2191 = (_2189 >> 8u) & 15u;
        float _2296;
        float _2298;
        float _2300;
        float _2302;
        float _2304;
        float _2306;
        if (((4294967295u << _2191) & _2043) == 0u)
        {
            _2296 = _2174;
            _2298 = _2176;
            _2300 = _2178;
            _2302 = _2180;
            _2304 = _2182;
            _2306 = _2184;
        }
        else
        {
            float _2321 = inversesqrt(dot(vec3(_1997, _1998, _1999), vec3(_1997, _1998, _1999)));
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2191 < ((_2189 >> 12u) & 15u))
            {
                float _2297;
                float _2299;
                float _2301;
                float _2303;
                float _2305;
                float _2307;
                float _2432 = _2174;
                float _2433 = _2176;
                float _2434 = _2178;
                float _2435 = _2180;
                float _2436 = _2182;
                float _2437 = _2184;
                uint _2438 = _2191;
                uint _2447;
                bool _2448;
                for (;;)
                {
                    _2447 = texelFetch(g_lightClassification, int((((_2037 << 5u) + (_2023 << 9u)) + (_2438 << 2u)) >> 2u)).x;
                    _2448 = _2447 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2448)
                    {
                        frontier_phi_69_pred = _2437;
                        frontier_phi_69_pred_1 = _2436;
                        frontier_phi_69_pred_2 = _2435;
                        frontier_phi_69_pred_3 = _2434;
                        frontier_phi_69_pred_4 = _2433;
                        frontier_phi_69_pred_5 = _2432;
                    }
                    else
                    {
                        float _2582;
                        float _2583;
                        float _2584;
                        float _2585;
                        float _2586;
                        float _2587;
                        float _2834;
                        float _2835;
                        float _2836;
                        float _2837;
                        float _2838;
                        float _2839;
                        float _2595 = _2432;
                        float _2596 = _2433;
                        float _2597 = _2434;
                        float _2598 = _2435;
                        float _2599 = _2436;
                        float _2600 = _2437;
                        uint _2601 = _2447;
                        uint _2602;
                        vec4 _2627;
                        float _2628;
                        vec4 _2643;
                        vec3 _2655;
                        vec4 _2671;
                        vec4 _2687;
                        float _2734;
                        bool _2735;
                        for (;;)
                        {
                            uint _2612 = ((_2438 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2601));
                            _2602 = (_2601 + 4294967295u) & _2601;
                            uint _2614 = _2612 * 40u;
                            _2627 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2614)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2614 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2614 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2614 + 3u)).x));
                            _2628 = _2627.w;
                            uint _2630 = (_2612 * 40u) + 4u;
                            _2643 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2630)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2630 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2630 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2630 + 3u)).x));
                            uint _2645 = (_2612 * 40u) + 8u;
                            _2655 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2645)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2645 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2645 + 2u)).x));
                            uint _2658 = (_2612 * 40u) + 16u;
                            _2671 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2658)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2658 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2658 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2658 + 3u)).x));
                            uint _2674 = (_2612 * 40u) + 20u;
                            _2687 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2674)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2674 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2674 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2674 + 3u)).x));
                            uint _2690 = (_2612 * 40u) + 24u;
                            vec4 _2703 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2690)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2690 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2690 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2690 + 3u)).x));
                            uint _2709 = (_2612 * 40u) + 28u;
                            vec4 _2722 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2709)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2709 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2709 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2709 + 3u)).x));
                            _2734 = fma(_1999, _2722.z, fma(_1998, _2722.y, _2722.x * _1997)) + _2722.w;
                            _2735 = !((fma(_1999, _2703.z, fma(_1998, _2703.y, _2703.x * _1997)) + _2703.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2735)
                            {
                                float _2762 = _2627.x - _1997;
                                float _2763 = _2627.y - _1998;
                                float _2764 = _2627.z - _1999;
                                float _2765 = dot(vec3(_2762, _2763, _2764), vec3(_2762, _2763, _2764));
                                float _2768 = inversesqrt(_2765);
                                float _2769 = _2768 * _2762;
                                float _2770 = _2768 * _2763;
                                float _2771 = _2768 * _2764;
                                float _2775 = 1.0 - (_2765 / (_2628 * _2628));
                                float _3681 = isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0));
                                float _2776 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
                                float _2780 = sqrt(_2765) * _2643.w;
                                float _2782 = 1.39999997615814208984375 / (_2780 + 1.39999997615814208984375);
                                float _2783 = _2782 * _2782;
                                float _2784 = 1.0 - _2783;
                                float _2786 = (_2784 * dot(vec3(_2769, _2770, _2771), vec3(_411, _414, _417))) + _2783;
                                float _2789 = _2780 * _2780;
                                float _2793 = (fma(_1999, _2671.z, fma(_1998, _2671.y, _2671.x * _1997)) + _2671.w) / _2734;
                                float _2794 = (fma(_1999, _2687.z, fma(_1998, _2687.y, _2687.x * _1997)) + _2687.w) / _2734;
                                float _2798 = 1.0 - dot(vec2(_2793, _2794), vec2(_2793, _2794));
                                float _3697 = isnan(0.0) ? _2798 : (isnan(_2798) ? 0.0 : max(_2798, 0.0));
                                float _2799 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
                                float _2800 = _2799 * (((isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0))) * _2776) / ((_2789 * 0.699999988079071044921875) + 1.0));
                                float _2810 = dot(vec3(_411, _414, _417), vec3((-0.0) - (_1997 * _2321), (-0.0) - (_1998 * _2321), (-0.0) - (_1999 * _2321)));
                                float _3708 = isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0));
                                float _2818 = (_2784 * dot(vec3(_411, _414, _417), vec3(_2769, _2770, _2771))) + _2783;
                                float _3719 = isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0));
                                float _2819 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
                                float _2823 = (0.5 / (((isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0))) + 9.9999999392252902907785028219223e-09) + _2819)) * _2819;
                                float _3730 = isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : max(_2823, 0.0));
                                float _2830 = (_2799 * _2776) * (((isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0))) * 3.1415927410125732421875) / ((_2789 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_75_pred = _2800 * _2643.z;
                                frontier_phi_75_pred_1 = _2800 * _2643.y;
                                frontier_phi_75_pred_2 = _2800 * _2643.x;
                                frontier_phi_75_pred_3 = _2830 * _2655.z;
                                frontier_phi_75_pred_4 = _2830 * _2655.y;
                                frontier_phi_75_pred_5 = _2830 * _2655.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _2839 = frontier_phi_75_pred;
                            _2838 = frontier_phi_75_pred_1;
                            _2837 = frontier_phi_75_pred_2;
                            _2836 = frontier_phi_75_pred_3;
                            _2835 = frontier_phi_75_pred_4;
                            _2834 = frontier_phi_75_pred_5;
                            _2585 = _2837 + _2598;
                            _2586 = _2838 + _2599;
                            _2587 = _2839 + _2600;
                            _2582 = _2834 + _2595;
                            _2583 = _2835 + _2596;
                            _2584 = _2836 + _2597;
                            if (_2602 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2595 = _2582;
                                _2596 = _2583;
                                _2597 = _2584;
                                _2598 = _2585;
                                _2599 = _2586;
                                _2600 = _2587;
                                _2601 = _2602;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2587;
                        frontier_phi_69_pred_1 = _2586;
                        frontier_phi_69_pred_2 = _2585;
                        frontier_phi_69_pred_3 = _2584;
                        frontier_phi_69_pred_4 = _2583;
                        frontier_phi_69_pred_5 = _2582;
                    }
                    _2307 = frontier_phi_69_pred;
                    _2305 = frontier_phi_69_pred_1;
                    _2303 = frontier_phi_69_pred_2;
                    _2301 = frontier_phi_69_pred_3;
                    _2299 = frontier_phi_69_pred_4;
                    _2297 = frontier_phi_69_pred_5;
                    uint _2439 = _2438 + 1u;
                    if (_2439 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2432 = _2297;
                        _2433 = _2299;
                        _2434 = _2301;
                        _2435 = _2303;
                        _2436 = _2305;
                        _2437 = _2307;
                        _2438 = _2439;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2307;
                frontier_phi_57_58_ladder_1 = _2305;
                frontier_phi_57_58_ladder_2 = _2303;
                frontier_phi_57_58_ladder_3 = _2301;
                frontier_phi_57_58_ladder_4 = _2299;
                frontier_phi_57_58_ladder_5 = _2297;
            }
            else
            {
                frontier_phi_57_58_ladder = _2184;
                frontier_phi_57_58_ladder_1 = _2182;
                frontier_phi_57_58_ladder_2 = _2180;
                frontier_phi_57_58_ladder_3 = _2178;
                frontier_phi_57_58_ladder_4 = _2176;
                frontier_phi_57_58_ladder_5 = _2174;
            }
            _2296 = frontier_phi_57_58_ladder_5;
            _2298 = frontier_phi_57_58_ladder_4;
            _2300 = frontier_phi_57_58_ladder_3;
            _2302 = frontier_phi_57_58_ladder_2;
            _2304 = frontier_phi_57_58_ladder_1;
            _2306 = frontier_phi_57_58_ladder;
        }
        float _2311 = isnan(1.0) ? _455 : (isnan(_455) ? 1.0 : min(_455, 1.0));
        _2055 = (_2311 * _2302) + _1616;
        _2057 = (_2311 * _2304) + _1618;
        _2059 = (_2311 * _2306) + _1620;
        _2061 = ((_2296 * 0.039999999105930328369140625) * _2311) + _1868;
        _2063 = ((_2298 * 0.039999999105930328369140625) * _2311) + _1870;
        _2065 = ((_2300 * 0.039999999105930328369140625) * _2311) + _1872;
    }
    else
    {
        _2055 = _1616;
        _2057 = _1618;
        _2059 = _1620;
        _2061 = _1868;
        _2063 = _1870;
        _2065 = _1872;
    }
    uint _2071 = _431 + uint(cbMatDynParam._m0[0u].w);
    float _2077 = (((_281.x * cbMtdParam._m0[11u].x) + (_250.x * cbMtdParam._m0[10u].x)) * cbMtdParam._m0[12u].x) * cbInstanceData._m0[_2071].x;
    float _2078 = (((_281.y * cbMtdParam._m0[11u].y) + (_250.y * cbMtdParam._m0[10u].y)) * cbMtdParam._m0[12u].x) * cbInstanceData._m0[_2071].y;
    float _2079 = (((_281.z * cbMtdParam._m0[11u].z) + (_250.z * cbMtdParam._m0[10u].z)) * cbMtdParam._m0[12u].x) * cbInstanceData._m0[_2071].z;
    float _3746 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _3757 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _3768 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _3779 = isnan(0.0) ? _304 : (isnan(_304) ? 0.0 : max(_304, 0.0));
    float _2097 = (((isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0))) * (_2055 + ((isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0))) * _455))) + ((_2061 + ((isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0))) * _1234)) * cbPerFrame._m0[3u].x)) + _2077;
    float _2099 = (_2078 + ((_2063 + ((isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0))) * _1234)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0))) * (_2057 + ((isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0))) * _455)));
    float _2101 = (_2079 + ((_2065 + ((isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0))) * _1234)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0))) * (_2059 + ((isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0))) * _455)));
    float _3805 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2114 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
    float _2119 = cbInstanceData._m0[_430 + 6u].w * (isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0)));
    float _2124 = _389 / cbSceneParam._m0[86u].x;
    float _2125 = _390 / cbSceneParam._m0[86u].y;
    vec4 _2139 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2124, _2125, (log2((isnan(cbSceneParam._m0[77u].w) ? _323 : (isnan(_323) ? cbSceneParam._m0[77u].w : min(_323, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2141 = _2139.x;
    float _2142 = _2139.y;
    float _2143 = _2139.z;
    float _2144 = _2139.w;
    float _2236;
    float _2238;
    float _2240;
    float _2242;
    if (_323 > cbSceneParam._m0[78u].w)
    {
        float _2199 = isnan(_323) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _323 : min(cbSceneParam._m0[80u].w, _323));
        float _2200 = _2199 / _323;
        float _2211 = _2200 * _374;
        float _2212 = _375 * _2200;
        float _2213 = (-0.0) - _2212;
        float _2214 = _2200 * _376;
        float _2216 = (cbSceneParam._m0[77u].w * _2213) / _2199;
        float _2217 = _2216 + cbSceneParam._m0[79u].w;
        float _2218 = cbSceneParam._m0[79u].w - _2212;
        float _2224 = sqrt(((_2211 * _2211) + (_2212 * _2212)) + (_2214 * _2214));
        float _2227 = (1.0 - (cbSceneParam._m0[77u].w / _2199)) * _2224;
        float _2232 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2234 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2394;
        if (abs((_2213 - _2216) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2394 = ((((_2217 > 0.0) ? exp2(_2232 * _2217) : (2.0 - exp2(_2234 * _2217))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2227;
        }
        else
        {
            float _2354 = 1.0 / cbSceneParam._m0[80u].x;
            float _2355 = isnan(_2218) ? _2217 : (isnan(_2217) ? _2218 : max(_2217, _2218));
            float _2356 = isnan(_2218) ? _2217 : (isnan(_2217) ? _2218 : min(_2217, _2218));
            float _2365 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : min(_2355, 0.0));
            float _2366 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : min(_2356, 0.0));
            _2394 = ((abs(_2224 / _2213) * cbSceneParam._m0[80u].y) * ((((_2365 - _2366) * 2.0) - ((exp2(_2232 * (isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0)))) - exp2(_2232 * (isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0))))) * _2354)) - ((exp2(_2234 * _2365) - exp2(_2234 * _2366)) * _2354))) + (_2227 * cbSceneParam._m0[80u].z);
        }
        vec4 _2396 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2124, _2125, 1.0), 0.0);
        float _2405 = exp2((_2394 * (-1.44269502162933349609375)) * (1.0 - _2396.w));
        float _2406 = log2(_2405);
        float _2422 = log2(_2144);
        _2236 = (exp2(_2422 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2406 * cbSceneParam._m0[78u].x)) * _2396.x) / cbSceneParam._m0[78u].x)) + _2141;
        _2238 = (exp2(_2422 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2406 * cbSceneParam._m0[78u].y)) * _2396.y) / cbSceneParam._m0[78u].y)) + _2142;
        _2240 = (exp2(_2422 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2406 * cbSceneParam._m0[78u].z)) * _2396.z) / cbSceneParam._m0[78u].z)) + _2143;
        _2242 = _2405 * _2144;
    }
    else
    {
        _2236 = _2141;
        _2238 = _2142;
        _2240 = _2143;
        _2242 = _2144;
    }
    float _2254 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2255 = _2254 == 3.0;
    float _2257 = log2(_2242);
    float _2261 = exp2(_2257 * cbSceneParam._m0[78u].x);
    float _2262 = exp2(_2257 * cbSceneParam._m0[78u].y);
    float _2263 = exp2(_2257 * cbSceneParam._m0[78u].z);
    float _2264 = _2261 * (isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0)));
    float _2265 = _2262 * (isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0)));
    float _2266 = _2263 * (isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0)));
    float _2275 = (_2254 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2275 * (_2255 ? _2264 : (_2264 + (cbSceneParam._m0[72u].w * _2236)));
    SV_Target.y = _2275 * (_2255 ? _2265 : (_2265 + (cbSceneParam._m0[72u].w * _2238)));
    SV_Target.z = _2275 * (_2255 ? _2266 : (_2266 + (cbSceneParam._m0[72u].w * _2240)));
    SV_Target.w = _2119;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2077) * _2114) * _2261) * _2275;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2078) * _2114) * _2262) * _2275;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2079) * _2114) * _2263) * _2275;
    SV_Target_1.w = _2119;
}


