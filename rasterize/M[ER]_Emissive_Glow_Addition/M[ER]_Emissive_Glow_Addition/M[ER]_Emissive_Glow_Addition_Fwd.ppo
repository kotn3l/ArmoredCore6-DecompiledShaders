#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_ER_Emissive_Glow_Addition_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_ER_Emissive_Glow_Addition_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_ER_Emissive_Glow_Addition_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _797;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _171 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _172 = _171 * NORMAL.x;
    float _173 = _171 * NORMAL.y;
    float _174 = _171 * NORMAL.z;
    float _179;
    float _180;
    float _181;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _179 = (-0.0) - _172;
        _180 = (-0.0) - _173;
        _181 = (-0.0) - _174;
    }
    else
    {
        _179 = _172;
        _180 = _173;
        _181 = _174;
    }
    vec4 _210 = texture(sampler2D(M_ER_Emissive_Glow_Addition_snp_0_Texture2D_0, SS_DiffuseMap), vec2((((cbMtdParam._m0[12u].y * cbPerFrame._m0[22u].x) + TEXCOORD_1.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((cbMtdParam._m0[12u].z * cbPerFrame._m0[22u].x) + TEXCOORD_1.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _217 = _210.x * cbMtdParam._m0[9u].x;
    float _218 = _210.y * cbMtdParam._m0[9u].y;
    float _219 = _210.z * cbMtdParam._m0[9u].z;
    float _221 = (cbMtdParam._m0[9u].w * TEXCOORD_1.z) * _210.w;
    vec4 _248 = texture(sampler2D(M_ER_Emissive_Glow_Addition_snp_0_Texture2D_2, SS_DiffuseMap), vec2((((cbMtdParam._m0[12u].w * cbPerFrame._m0[22u].x) + TEXCOORD_1.x) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((cbMtdParam._m0[13u].x * cbPerFrame._m0[22u].x) + TEXCOORD_1.y) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    vec4 _279 = texture(sampler2D(M_ER_Emissive_Glow_Addition_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((cbMtdParam._m0[13u].y * cbPerFrame._m0[22u].x) + TEXCOORD_1.x) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((cbMtdParam._m0[13u].z * cbPerFrame._m0[22u].x) + TEXCOORD_1.y) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _297 = inversesqrt(dot(vec3(_179, _180, _181), vec3(_179, _180, _181)));
    float _298 = _297 * _179;
    float _299 = _297 * _180;
    float _300 = _297 * _181;
    float _2944 = isnan(0.0) ? _221 : (isnan(_221) ? 0.0 : max(_221, 0.0));
    float _302 = isnan(1.0) ? _2944 : (isnan(_2944) ? 1.0 : min(_2944, 1.0));
    float _2955 = isnan(0.0) ? _217 : (isnan(_217) ? 0.0 : max(_217, 0.0));
    float _2966 = isnan(0.0) ? _218 : (isnan(_218) ? 0.0 : max(_218, 0.0));
    float _2977 = isnan(0.0) ? _219 : (isnan(_219) ? 0.0 : max(_219, 0.0));
    float _321 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _362 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _372 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _362);
    float _373 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _362);
    float _374 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _362);
    float _378 = inversesqrt(dot(vec3(_372, _373, _374), vec3(_372, _373, _374)));
    float _379 = _372 * _378;
    float _380 = _373 * _378;
    float _381 = _374 * _378;
    float _387 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _388 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _409 = fma(_300, cbSceneParam._m0[5u].z, fma(_299, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _298));
    float _412 = fma(_300, cbSceneParam._m0[6u].z, fma(_299, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _298));
    float _415 = fma(_300, cbSceneParam._m0[7u].z, fma(_299, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _298));
    uint _428 = uint(roundEven(NORMAL.w)) * 13u;
    uint _429 = _428 + 9u;
    uint _430 = _429 + uint(cbMatDynParam._m0[0u].w);
    float _436 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2955 : (isnan(_2955) ? 1.0 : min(_2955, 1.0)))) * cbInstanceData._m0[_430].x;
    float _437 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2966 : (isnan(_2966) ? 1.0 : min(_2966, 1.0)))) * cbInstanceData._m0[_430].y;
    float _438 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2977 : (isnan(_2977) ? 1.0 : min(_2977, 1.0)))) * cbInstanceData._m0[_430].z;
    float _2988 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _439 = isnan(1.0) ? _2988 : (isnan(_2988) ? 1.0 : min(_2988, 1.0));
    float _2999 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _440 = isnan(1.0) ? _2999 : (isnan(_2999) ? 1.0 : min(_2999, 1.0));
    float _3010 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _441 = isnan(1.0) ? _3010 : (isnan(_3010) ? 1.0 : min(_3010, 1.0));
    vec4 _450 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _387, cbSceneParam._m0[86u].y * _388));
    float _453 = _450.x * TEXCOORD_1.w;
    float _454 = dot(vec3(_298, _299, _300), vec3(_379, _380, _381));
    float _457 = _454 * 2.0;
    float _462 = (_457 * _298) - _379;
    float _463 = (_457 * _299) - _380;
    float _464 = (_457 * _300) - _381;
    float _486 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _490 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _494 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _796;
    float _798;
    float _799;
    float _800;
    float _801;
    float _802;
    float _803;
    float _804;
    float _805;
    float _806;
    float _807;
    float _808;
    float _809;
    float _810;
    float _811;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _521 = fma(_494, cbModelParam._m0[26u].z, fma(_490, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _486));
        float _525 = fma(_494, cbModelParam._m0[27u].z, fma(_490, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _486));
        float _529 = fma(_494, cbModelParam._m0[28u].z, fma(_490, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _486));
        float _554 = _486 + _298;
        float _555 = _490 + _299;
        float _556 = _494 + _300;
        float _566 = fma(_556, cbModelParam._m0[26u].z, fma(_555, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _554)) - _521;
        float _567 = fma(_556, cbModelParam._m0[27u].z, fma(_555, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _554)) - _525;
        float _568 = fma(_556, cbModelParam._m0[28u].z, fma(_555, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _554)) - _529;
        float _572 = inversesqrt(dot(vec3(_566, _567, _568), vec3(_566, _567, _568)));
        float _585 = ((_572 * _566) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_521 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _586 = ((_572 * _567) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_525 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _587 = ((_572 * _568) / cbModelParam._m0[34u].z) + ((((((_529 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _590 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_585, _586, _587), 0.0);
        vec4 _597 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_585, _586, _587), 0.0);
        vec4 _604 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_585, _586, _587), 0.0);
        vec4 _611 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_585, _586, _587), 0.0);
        float _624 = exp2((_590.w + (-0.5)) * 20.0) * 2.0;
        float _625 = _624 * (_590.x + (-0.5));
        float _626 = _624 * (_590.y + (-0.5));
        float _627 = _624 * (_590.z + (-0.5));
        float _634 = exp2((_597.w + (-0.5)) * 20.0) * 2.0;
        float _635 = _634 * (_597.x + (-0.5));
        float _636 = _634 * (_597.y + (-0.5));
        float _637 = _634 * (_597.z + (-0.5));
        float _644 = exp2((_604.w + (-0.5)) * 20.0) * 2.0;
        float _645 = _644 * (_604.x + (-0.5));
        float _646 = _644 * (_604.y + (-0.5));
        float _647 = _644 * (_604.z + (-0.5));
        float _654 = exp2((_611.w + (-0.5)) * 20.0) * 2.0;
        float _655 = _654 * (_611.x + (-0.5));
        float _656 = _654 * (_611.y + (-0.5));
        float _657 = _654 * (_611.z + (-0.5));
        float _658 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
        float _659 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
        float _660 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
        float _661 = _625 * 0.5;
        float _662 = _635 * 0.5;
        float _663 = _645 * 0.5;
        float _664 = dot(vec3(_661, _662, _663), vec3(_661, _662, _663));
        float _669 = (_664 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_664);
        float _678 = (dot(vec3(_298, _299, _300), vec3(_669 * _661, _669 * _662, _669 * _663)) + 1.0) * 0.5;
        float _3036 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
        float _688 = sqrt(((_662 * _662) + (_661 * _661)) + (_663 * _663)) / (_658 + 9.9999997473787516355514526367188e-06);
        float _3047 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
        float _689 = isnan(1.0) ? _3047 : (isnan(_3047) ? 1.0 : min(_3047, 1.0));
        float _690 = _689 * 2.0;
        float _694 = (1.0 - _689) / (_689 + 1.0);
        float _3058 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
        float _695 = isnan(1.0) ? _3058 : (isnan(_3058) ? 1.0 : min(_3058, 1.0));
        float _704 = ((((1.0 - _695) * (_690 + 2.0)) * exp2(log2(isnan(1.0) ? _3036 : (isnan(_3036) ? 1.0 : min(_3036, 1.0))) * (_690 + 1.0))) + _695) * _658;
        float _705 = _626 * 0.5;
        float _706 = _636 * 0.5;
        float _707 = _646 * 0.5;
        float _708 = dot(vec3(_705, _706, _707), vec3(_705, _706, _707));
        float _713 = (_708 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_708);
        float _721 = (dot(vec3(_298, _299, _300), vec3(_713 * _705, _713 * _706, _713 * _707)) + 1.0) * 0.5;
        float _3069 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
        float _730 = sqrt(((_706 * _706) + (_705 * _705)) + (_707 * _707)) / (_659 + 9.9999997473787516355514526367188e-06);
        float _3080 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
        float _731 = isnan(1.0) ? _3080 : (isnan(_3080) ? 1.0 : min(_3080, 1.0));
        float _732 = _731 * 2.0;
        float _736 = (1.0 - _731) / (_731 + 1.0);
        float _3091 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
        float _737 = isnan(1.0) ? _3091 : (isnan(_3091) ? 1.0 : min(_3091, 1.0));
        float _746 = ((((1.0 - _737) * (_732 + 2.0)) * exp2(log2(isnan(1.0) ? _3069 : (isnan(_3069) ? 1.0 : min(_3069, 1.0))) * (_732 + 1.0))) + _737) * _659;
        float _747 = _627 * 0.5;
        float _748 = _637 * 0.5;
        float _749 = _647 * 0.5;
        float _750 = dot(vec3(_747, _748, _749), vec3(_747, _748, _749));
        float _755 = (_750 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_750);
        float _763 = (dot(vec3(_298, _299, _300), vec3(_755 * _747, _755 * _748, _755 * _749)) + 1.0) * 0.5;
        float _3102 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
        float _772 = sqrt(((_748 * _748) + (_747 * _747)) + (_749 * _749)) / (_660 + 9.9999997473787516355514526367188e-06);
        float _3113 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
        float _773 = isnan(1.0) ? _3113 : (isnan(_3113) ? 1.0 : min(_3113, 1.0));
        float _774 = _773 * 2.0;
        float _778 = (1.0 - _773) / (_773 + 1.0);
        float _3124 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
        float _779 = isnan(1.0) ? _3124 : (isnan(_3124) ? 1.0 : min(_3124, 1.0));
        float _788 = ((((1.0 - _779) * (_774 + 2.0)) * exp2(log2(isnan(1.0) ? _3102 : (isnan(_3102) ? 1.0 : min(_3102, 1.0))) * (_774 + 1.0))) + _779) * _660;
        _796 = _627;
        _798 = _626;
        _799 = _625;
        _800 = _637;
        _801 = _636;
        _802 = _635;
        _803 = _647;
        _804 = _646;
        _805 = _645;
        _806 = _660;
        _807 = _659;
        _808 = _658;
        _809 = cbModelParam._m0[36u].z * (isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0)));
        _810 = cbModelParam._m0[36u].z * (isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0)));
        _811 = cbModelParam._m0[36u].z * (isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0)));
    }
    else
    {
        _796 = _797;
        _798 = _797;
        _799 = _797;
        _800 = _797;
        _801 = _797;
        _802 = _797;
        _803 = _797;
        _804 = _797;
        _805 = _797;
        _806 = _797;
        _807 = _797;
        _808 = _797;
        _809 = 0.0;
        _810 = 0.0;
        _811 = 0.0;
    }
    float _1106;
    float _1107;
    float _1108;
    float _1109;
    float _1110;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _837 = fma(_494, cbModelParam._m0[30u].z, fma(_490, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _486));
        float _841 = fma(_494, cbModelParam._m0[31u].z, fma(_490, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _486));
        float _845 = fma(_494, cbModelParam._m0[32u].z, fma(_490, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _486));
        float _868 = _486 + _298;
        float _869 = _490 + _299;
        float _870 = _494 + _300;
        float _880 = fma(_870, cbModelParam._m0[30u].z, fma(_869, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _868)) - _837;
        float _881 = fma(_870, cbModelParam._m0[31u].z, fma(_869, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _868)) - _841;
        float _882 = fma(_870, cbModelParam._m0[32u].z, fma(_869, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _868)) - _845;
        float _886 = inversesqrt(dot(vec3(_880, _881, _882), vec3(_880, _881, _882)));
        float _899 = ((_886 * _880) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_837 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _900 = ((_886 * _881) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_841 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _901 = ((_886 * _882) / cbModelParam._m0[35u].z) + ((((((_845 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _903 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_899, _900, _901), 0.0);
        vec4 _910 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_899, _900, _901), 0.0);
        vec4 _917 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_899, _900, _901), 0.0);
        vec4 _924 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_899, _900, _901), 0.0);
        float _936 = exp2((_903.w + (-0.5)) * 20.0) * 2.0;
        float _937 = _936 * (_903.x + (-0.5));
        float _938 = _936 * (_903.y + (-0.5));
        float _939 = _936 * (_903.z + (-0.5));
        float _946 = exp2((_910.w + (-0.5)) * 20.0) * 2.0;
        float _947 = _946 * (_910.x + (-0.5));
        float _948 = _946 * (_910.y + (-0.5));
        float _949 = _946 * (_910.z + (-0.5));
        float _956 = exp2((_917.w + (-0.5)) * 20.0) * 2.0;
        float _957 = _956 * (_917.x + (-0.5));
        float _958 = _956 * (_917.y + (-0.5));
        float _959 = _956 * (_917.z + (-0.5));
        float _966 = exp2((_924.w + (-0.5)) * 20.0) * 2.0;
        float _967 = _966 * (_924.x + (-0.5));
        float _968 = _966 * (_924.y + (-0.5));
        float _969 = _966 * (_924.z + (-0.5));
        float _970 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _971 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _972 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _973 = _937 * 0.5;
        float _974 = _947 * 0.5;
        float _975 = _957 * 0.5;
        float _976 = dot(vec3(_973, _974, _975), vec3(_973, _974, _975));
        float _981 = (_976 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_976);
        float _989 = (dot(vec3(_298, _299, _300), vec3(_981 * _973, _981 * _974, _981 * _975)) + 1.0) * 0.5;
        float _3165 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _998 = sqrt(((_974 * _974) + (_973 * _973)) + (_975 * _975)) / (_970 + 9.9999997473787516355514526367188e-06);
        float _3176 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
        float _999 = isnan(1.0) ? _3176 : (isnan(_3176) ? 1.0 : min(_3176, 1.0));
        float _1000 = _999 * 2.0;
        float _1004 = (1.0 - _999) / (_999 + 1.0);
        float _3187 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1005 = isnan(1.0) ? _3187 : (isnan(_3187) ? 1.0 : min(_3187, 1.0));
        float _1014 = ((((1.0 - _1005) * (_1000 + 2.0)) * exp2(log2(isnan(1.0) ? _3165 : (isnan(_3165) ? 1.0 : min(_3165, 1.0))) * (_1000 + 1.0))) + _1005) * _970;
        float _1015 = _938 * 0.5;
        float _1016 = _948 * 0.5;
        float _1017 = _958 * 0.5;
        float _1018 = dot(vec3(_1015, _1016, _1017), vec3(_1015, _1016, _1017));
        float _1023 = (_1018 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1018);
        float _1031 = (dot(vec3(_298, _299, _300), vec3(_1023 * _1015, _1023 * _1016, _1023 * _1017)) + 1.0) * 0.5;
        float _3198 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1040 = sqrt(((_1016 * _1016) + (_1015 * _1015)) + (_1017 * _1017)) / (_971 + 9.9999997473787516355514526367188e-06);
        float _3209 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1041 = isnan(1.0) ? _3209 : (isnan(_3209) ? 1.0 : min(_3209, 1.0));
        float _1042 = _1041 * 2.0;
        float _1046 = (1.0 - _1041) / (_1041 + 1.0);
        float _3220 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1047 = isnan(1.0) ? _3220 : (isnan(_3220) ? 1.0 : min(_3220, 1.0));
        float _1056 = ((((1.0 - _1047) * (_1042 + 2.0)) * exp2(log2(isnan(1.0) ? _3198 : (isnan(_3198) ? 1.0 : min(_3198, 1.0))) * (_1042 + 1.0))) + _1047) * _971;
        float _1057 = _939 * 0.5;
        float _1058 = _949 * 0.5;
        float _1059 = _959 * 0.5;
        float _1060 = dot(vec3(_1057, _1058, _1059), vec3(_1057, _1058, _1059));
        float _1065 = (_1060 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1060);
        float _1073 = (dot(vec3(_298, _299, _300), vec3(_1065 * _1057, _1065 * _1058, _1065 * _1059)) + 1.0) * 0.5;
        float _3231 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1082 = sqrt(((_1058 * _1058) + (_1057 * _1057)) + (_1059 * _1059)) / (_972 + 9.9999997473787516355514526367188e-06);
        float _3242 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1083 = isnan(1.0) ? _3242 : (isnan(_3242) ? 1.0 : min(_3242, 1.0));
        float _1084 = _1083 * 2.0;
        float _1088 = (1.0 - _1083) / (_1083 + 1.0);
        float _3253 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1089 = isnan(1.0) ? _3253 : (isnan(_3253) ? 1.0 : min(_3253, 1.0));
        float _1098 = ((((1.0 - _1089) * (_1084 + 2.0)) * exp2(log2(isnan(1.0) ? _3231 : (isnan(_3231) ? 1.0 : min(_3231, 1.0))) * (_1084 + 1.0))) + _1089) * _972;
        _1106 = _939;
        _1107 = _938;
        _1108 = _937;
        _1109 = _949;
        _1110 = _948;
        _1111 = _947;
        _1112 = _959;
        _1113 = _958;
        _1114 = _957;
        _1115 = _972;
        _1116 = _971;
        _1117 = _970;
        _1118 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0)));
        _1119 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0)));
        _1120 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0)));
    }
    else
    {
        _1106 = _797;
        _1107 = _797;
        _1108 = _797;
        _1109 = _797;
        _1110 = _797;
        _1111 = _797;
        _1112 = _797;
        _1113 = _797;
        _1114 = _797;
        _1115 = _797;
        _1116 = _797;
        _1117 = _797;
        _1118 = 0.0;
        _1119 = 0.0;
        _1120 = 0.0;
    }
    float _1130 = (cbModelParam._m0[1u].x * (_1118 - _809)) + _809;
    float _1131 = (cbModelParam._m0[1u].x * (_1119 - _810)) + _810;
    float _1132 = (cbModelParam._m0[1u].x * (_1120 - _811)) + _811;
    float _1153 = fma(_1132, cbSceneParam._m0[89u].z, fma(_1131, cbSceneParam._m0[89u].y, _1130 * cbSceneParam._m0[89u].x));
    float _1156 = fma(_1132, cbSceneParam._m0[90u].z, fma(_1131, cbSceneParam._m0[90u].y, _1130 * cbSceneParam._m0[90u].x));
    float _1159 = fma(_1132, cbSceneParam._m0[91u].z, fma(_1131, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1130));
    float _1174 = _462 * 0.5;
    float _1175 = _463 * 0.5;
    float _1176 = _464 * 0.5;
    float _1177 = dot(vec4(_1174, _1175, _1176, 1.0), vec4(_1108, _1111, _1114, _1117));
    float _1180 = dot(vec4(_1174, _1175, _1176, 1.0), vec4(_1107, _1110, _1113, _1116));
    float _1183 = dot(vec4(_1174, _1175, _1176, 1.0), vec4(_1106, _1109, _1112, _1115));
    float _1217;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1190 = dot(vec4(_1174, _1175, _1176, 1.0), vec4(_796, _800, _803, _806));
        float _1194 = dot(vec4(_1174, _1175, _1176, 1.0), vec4(_798, _801, _804, _807));
        float _1198 = dot(vec4(_1174, _1175, _1176, 1.0), vec4(_799, _802, _805, _808));
        float _1205 = dot(vec4(cbModelParam._m0[39u]), vec4(_1174, _1175, _1176, 1.0));
        _1217 = dot(vec3(isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0)), isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0)), isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1205) ? 0.0 : (isnan(0.0) ? _1205 : max(0.0, _1205))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1217 = 1.0;
    }
    float _1228;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1219 = dot(vec4(cbModelParam._m0[40u]), vec4(_1174, _1175, _1176, 1.0));
        _1228 = dot(vec3(isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0)), isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0)), isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1219) ? 0.0 : (isnan(0.0) ? _1219 : max(0.0, _1219))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1228 = 1.0;
    }
    float _1232 = (_1228 * cbModelParam._m0[1u].x) + (_1217 * (1.0 - cbModelParam._m0[1u].x));
    float _1241 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1322;
    float _1324;
    float _1326;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1289 = fma(_494, cbModelParam._m0[13u].z, fma(_490, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _486)) + cbModelParam._m0[13u].w;
        float _1293 = fma(_494, cbModelParam._m0[14u].z, fma(_490, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _486)) + cbModelParam._m0[14u].w;
        float _1297 = fma(_494, cbModelParam._m0[15u].z, fma(_490, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _486)) + cbModelParam._m0[15u].w;
        float _1300 = fma(_464, cbModelParam._m0[13u].z, fma(_463, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _462));
        float _1303 = fma(_464, cbModelParam._m0[14u].z, fma(_463, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _462));
        float _1306 = fma(_464, cbModelParam._m0[15u].z, fma(_463, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _462));
        float _1332;
        if (_1300 > 0.0)
        {
            _1332 = abs((1.0 - _1289) / _1300);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1300 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1289 + 1.0) / _1300);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1332 = frontier_phi_16_14_ladder;
        }
        float _1538;
        if (_1303 > 0.0)
        {
            _1538 = abs((1.0 - _1293) / _1303);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1303 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1293 + 1.0) / _1303);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1538 = frontier_phi_25_21_ladder;
        }
        float _1727;
        if (_1306 > 0.0)
        {
            _1727 = abs((1.0 - _1297) / _1306);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1306 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1297 + 1.0) / _1306);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1727 = frontier_phi_37_32_ladder;
        }
        float _1729 = isnan(_1538) ? _1332 : (isnan(_1332) ? _1538 : min(_1332, _1538));
        float _1730 = isnan(_1727) ? _1729 : (isnan(_1729) ? _1727 : min(_1729, _1727));
        float _1734 = (_1730 * _1300) + _1289;
        float _1735 = (_1730 * _1303) + _1293;
        float _1736 = (_1730 * _1306) + _1297;
        float _1737 = _1730 * 9.9999997473787516355514526367188e-05;
        float _1739 = (-1.0) - _1737;
        float _1741 = _1737 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1736 > _1741) || ((_1736 < _1739) || ((_1735 > _1741) || ((_1735 < _1739) || ((_1734 < _1739) || (_1734 > _1741))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1833 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1736, cbModelParam._m0[9u].z, fma(_1735, cbModelParam._m0[9u].y, _1734 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1736, cbModelParam._m0[10u].z, fma(_1735, cbModelParam._m0[10u].y, _1734 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1736, cbModelParam._m0[11u].z, fma(_1735, cbModelParam._m0[11u].y, _1734 * cbModelParam._m0[11u].x))), _1241);
            frontier_phi_15_37_ladder = _1833.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _1833.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _1833.x * cbModelParam._m0[1u].y;
        }
        _1322 = frontier_phi_15_37_ladder_2;
        _1324 = frontier_phi_15_37_ladder_1;
        _1326 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1310 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_462, _463, _464), _1241);
        _1322 = _1310.x * cbModelParam._m0[1u].y;
        _1324 = _1310.y * cbModelParam._m0[1u].y;
        _1326 = _1310.z * cbModelParam._m0[1u].y;
    }
    float _1329 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1421;
    float _1423;
    float _1425;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1385 = fma(_494, cbModelParam._m0[21u].z, fma(_490, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _486)) + cbModelParam._m0[21u].w;
        float _1389 = fma(_494, cbModelParam._m0[22u].z, fma(_490, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _486)) + cbModelParam._m0[22u].w;
        float _1393 = fma(_494, cbModelParam._m0[23u].z, fma(_490, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _486)) + cbModelParam._m0[23u].w;
        float _1396 = fma(_464, cbModelParam._m0[21u].z, fma(_463, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _462));
        float _1399 = fma(_464, cbModelParam._m0[22u].z, fma(_463, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _462));
        float _1402 = fma(_464, cbModelParam._m0[23u].z, fma(_463, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _462));
        float _1543;
        if (_1396 > 0.0)
        {
            _1543 = abs((1.0 - _1385) / _1396);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1396 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1385 + 1.0) / _1396);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1543 = frontier_phi_27_23_ladder;
        }
        float _1754;
        if (_1399 > 0.0)
        {
            _1754 = abs((1.0 - _1389) / _1399);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1399 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1389 + 1.0) / _1399);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1754 = frontier_phi_39_34_ladder;
        }
        float _1905;
        if (_1402 > 0.0)
        {
            _1905 = abs((1.0 - _1393) / _1402);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1402 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1393 + 1.0) / _1402);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _1905 = frontier_phi_48_45_ladder;
        }
        float _1907 = isnan(_1754) ? _1543 : (isnan(_1543) ? _1754 : min(_1543, _1754));
        float _1908 = isnan(_1905) ? _1907 : (isnan(_1907) ? _1905 : min(_1907, _1905));
        float _1912 = (_1908 * _1396) + _1385;
        float _1913 = (_1908 * _1399) + _1389;
        float _1914 = (_1908 * _1402) + _1393;
        float _1915 = _1908 * 9.9999997473787516355514526367188e-05;
        float _1916 = (-1.0) - _1915;
        float _1918 = _1915 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_1914 > _1918) || ((_1914 < _1916) || ((_1913 > _1918) || ((_1913 < _1916) || ((_1912 < _1916) || (_1912 > _1918))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2143 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1914, cbModelParam._m0[17u].z, fma(_1913, cbModelParam._m0[17u].y, _1912 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1914, cbModelParam._m0[18u].z, fma(_1913, cbModelParam._m0[18u].y, _1912 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1914, cbModelParam._m0[19u].z, fma(_1913, cbModelParam._m0[19u].y, _1912 * cbModelParam._m0[19u].x))), _1329);
            frontier_phi_24_48_ladder = _2143.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2143.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2143.x * cbModelParam._m0[1u].z;
        }
        _1421 = frontier_phi_24_48_ladder_2;
        _1423 = frontier_phi_24_48_ladder_1;
        _1425 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1405 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_462, _463, _464), _1329);
        _1421 = _1405.x * cbModelParam._m0[1u].z;
        _1423 = _1405.y * cbModelParam._m0[1u].z;
        _1425 = _1405.z * cbModelParam._m0[1u].z;
    }
    float _1437 = _453 * 0.01200000010430812835693359375;
    float _1439 = _1437 * ((cbModelParam._m0[1u].w * (_1421 - _1322)) + _1322);
    float _1440 = _1437 * ((cbModelParam._m0[1u].w * (_1423 - _1324)) + _1324);
    float _1441 = _1437 * ((cbModelParam._m0[1u].w * (_1425 - _1326)) + _1326);
    float _1444 = fma(_1441, cbSceneParam._m0[89u].z, fma(_1440, cbSceneParam._m0[89u].y, _1439 * cbSceneParam._m0[89u].x));
    float _1447 = fma(_1441, cbSceneParam._m0[90u].z, fma(_1440, cbSceneParam._m0[90u].y, _1439 * cbSceneParam._m0[90u].x));
    float _1450 = fma(_1441, cbSceneParam._m0[91u].z, fma(_1440, cbSceneParam._m0[91u].y, _1439 * cbSceneParam._m0[91u].x));
    uvec4 _1460 = floatBitsToUint(cbInstanceData._m0[_428 + 5u]);
    uint _1462 = _1460.x * 14u;
    uint _1463 = _1462 + 13u;
    float _1470 = _453 + (-1.0);
    float _1476 = (cbLight._m0[_1463].x * _1470) + 1.0;
    float _1477 = (cbLight._m0[_1463].y * _1470) + 1.0;
    float _1478 = (cbLight._m0[_1463].z * _1470) + 1.0;
    float _1479 = (cbLight._m0[_1463].w * _1470) + 1.0;
    uint _1480 = _1462 + 5u;
    float _1486 = isnan(1.0) ? _1477 : (isnan(_1477) ? 1.0 : min(_1477, 1.0));
    uint _1490 = _1462 + 4u;
    float _1497 = isnan(1.0) ? _1476 : (isnan(_1476) ? 1.0 : min(_1476, 1.0));
    uint _1501 = _1462 | 1u;
    float _1512 = dot(vec3(cbLight._m0[_1462].xyz), vec3(_298, _299, _300));
    float _1515 = dot(vec3(cbLight._m0[_1501].xyz), vec3(_298, _299, _300));
    float _3389 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
    float _3400 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
    float _1520 = (isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0))) * 0.3183098733425140380859375;
    float _1522 = (isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0))) * 0.3183098733425140380859375;
    float _1529 = ((cbLight._m0[_1480].x * _1486) * _1522) + ((cbLight._m0[_1490].x * _1497) * _1520);
    float _1530 = ((_1486 * cbLight._m0[_1480].y) * _1522) + ((_1497 * cbLight._m0[_1490].y) * _1520);
    float _1531 = ((_1486 * cbLight._m0[_1480].z) * _1522) + ((_1497 * cbLight._m0[_1490].z) * _1520);
    uvec4 _1535 = floatBitsToUint(cbLight._m0[_1462 + 12u]);
    bool _1537 = _1535.x == 0u;
    float _1548;
    float _1550;
    float _1552;
    if (_1537)
    {
        _1548 = _1529;
        _1550 = _1530;
        _1552 = _1531;
    }
    else
    {
        uint _1556 = _1462 + 6u;
        float _1572 = (dot(vec3(cbLight._m0[_1462 + 2u].xyz), vec3(_298, _299, _300)) * 0.5) + 0.5;
        float _1573 = _1572 * _1572;
        float _3411 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1574 = isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0));
        float _1575 = isnan(1.0) ? _1478 : (isnan(_1478) ? 1.0 : min(_1478, 1.0));
        _1548 = (((cbLight._m0[_1556].x * 0.3183098733425140380859375) * _1574) * _1575) + _1529;
        _1550 = (((cbLight._m0[_1556].y * 0.3183098733425140380859375) * _1574) * _1575) + _1530;
        _1552 = (((cbLight._m0[_1556].z * 0.3183098733425140380859375) * _1574) * _1575) + _1531;
    }
    bool _1555 = _1535.y == 0u;
    float _1593;
    float _1595;
    float _1597;
    if (_1555)
    {
        _1593 = _1548;
        _1595 = _1550;
        _1597 = _1552;
    }
    else
    {
        uint _1698 = _1462 + 7u;
        float _1714 = (dot(vec3(cbLight._m0[_1462 + 3u].xyz), vec3(_298, _299, _300)) * 0.5) + 0.5;
        float _1715 = _1714 * _1714;
        float _3427 = isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0));
        float _1716 = isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0));
        float _1717 = isnan(1.0) ? _1479 : (isnan(_1479) ? 1.0 : min(_1479, 1.0));
        _1593 = (((cbLight._m0[_1698].x * 0.3183098733425140380859375) * _1716) * _1717) + _1548;
        _1595 = (((cbLight._m0[_1698].y * 0.3183098733425140380859375) * _1716) * _1717) + _1550;
        _1597 = (((cbLight._m0[_1698].z * 0.3183098733425140380859375) * _1716) * _1717) + _1552;
    }
    uint _1599 = _1462 + 8u;
    float _1605 = cbLight._m0[_1462].x + _379;
    float _1606 = cbLight._m0[_1462].y + _380;
    float _1607 = cbLight._m0[_1462].z + _381;
    float _1611 = inversesqrt(dot(vec3(_1605, _1606, _1607), vec3(_1605, _1606, _1607)));
    float _1615 = dot(vec3(_298, _299, _300), vec3(cbLight._m0[_1462].xyz));
    float _3443 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
    float _1618 = isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0));
    float _3454 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _1619 = isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0));
    float _1620 = dot(vec3(cbLight._m0[_1462].xyz), vec3(_1605 * _1611, _1606 * _1611, _1607 * _1611));
    float _3465 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
    float _1631 = (exp2(log2(1.0 - (isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1637 = (0.5 / ((_1618 + 9.9999999392252902907785028219223e-09) + _1619)) * _1618;
    float _3476 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
    float _1639 = (isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0))) * 0.31831014156341552734375;
    uint _1650 = _1462 + 9u;
    float _1656 = cbLight._m0[_1501].x + _379;
    float _1657 = cbLight._m0[_1501].y + _380;
    float _1658 = cbLight._m0[_1501].z + _381;
    float _1662 = inversesqrt(dot(vec3(_1656, _1657, _1658), vec3(_1656, _1657, _1658)));
    float _1666 = dot(vec3(_298, _299, _300), vec3(cbLight._m0[_1501].xyz));
    float _3487 = isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0));
    float _1669 = isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0));
    float _1670 = dot(vec3(cbLight._m0[_1501].xyz), vec3(_1656 * _1662, _1657 * _1662, _1658 * _1662));
    float _3498 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
    float _1679 = (exp2(log2(1.0 - (isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1683 = (0.5 / ((_1669 + 9.9999999392252902907785028219223e-09) + _1619)) * _1669;
    float _3509 = isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0));
    float _1685 = (isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0))) * 0.31831014156341552734375;
    float _1695 = (((_1679 * cbLight._m0[_1650].x) * _1685) * _1486) + (((_1631 * cbLight._m0[_1599].x) * _1639) * _1497);
    float _1696 = (((_1679 * cbLight._m0[_1650].y) * _1685) * _1486) + (((_1631 * cbLight._m0[_1599].y) * _1639) * _1497);
    float _1697 = (((_1679 * cbLight._m0[_1650].z) * _1685) * _1486) + (((_1631 * cbLight._m0[_1599].z) * _1639) * _1497);
    float _1759;
    float _1761;
    float _1763;
    if (_1537)
    {
        _1759 = _1695;
        _1761 = _1696;
        _1763 = _1697;
    }
    else
    {
        uint _1765 = _1462 + 10u;
        uint _1771 = _1462 + 2u;
        float _1777 = cbLight._m0[_1771].x + _379;
        float _1778 = cbLight._m0[_1771].y + _380;
        float _1779 = cbLight._m0[_1771].z + _381;
        float _1783 = inversesqrt(dot(vec3(_1777, _1778, _1779), vec3(_1777, _1778, _1779)));
        float _1787 = dot(vec3(_298, _299, _300), vec3(cbLight._m0[_1771].xyz));
        float _3520 = isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0));
        float _1790 = isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0));
        float _1791 = dot(vec3(cbLight._m0[_1771].xyz), vec3(_1777 * _1783, _1778 * _1783, _1779 * _1783));
        float _3531 = isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0));
        float _1800 = (exp2(log2(1.0 - (isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1804 = (0.5 / ((_1790 + 9.9999999392252902907785028219223e-09) + _1619)) * _1790;
        float _3542 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
        float _1806 = (isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0))) * 0.31831014156341552734375;
        float _1807 = isnan(1.0) ? _1478 : (isnan(_1478) ? 1.0 : min(_1478, 1.0));
        _1759 = (((_1800 * cbLight._m0[_1765].x) * _1806) * _1807) + _1695;
        _1761 = (((_1800 * cbLight._m0[_1765].y) * _1806) * _1807) + _1696;
        _1763 = (((_1800 * cbLight._m0[_1765].z) * _1806) * _1807) + _1697;
    }
    float _1842;
    float _1844;
    float _1846;
    if (_1555)
    {
        _1842 = _1759;
        _1844 = _1761;
        _1846 = _1763;
    }
    else
    {
        uint _1853 = _1462 + 11u;
        uint _1859 = _1462 + 3u;
        float _1865 = cbLight._m0[_1859].x + _379;
        float _1866 = cbLight._m0[_1859].y + _380;
        float _1867 = cbLight._m0[_1859].z + _381;
        float _1871 = inversesqrt(dot(vec3(_1865, _1866, _1867), vec3(_1865, _1866, _1867)));
        float _1875 = dot(vec3(_298, _299, _300), vec3(cbLight._m0[_1859].xyz));
        float _3558 = isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0));
        float _1878 = isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0));
        float _1879 = dot(vec3(cbLight._m0[_1859].xyz), vec3(_1865 * _1871, _1866 * _1871, _1867 * _1871));
        float _3569 = isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0));
        float _1888 = (exp2(log2(1.0 - (isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1892 = (0.5 / ((_1878 + 9.9999999392252902907785028219223e-09) + _1619)) * _1878;
        float _3580 = isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0));
        float _1894 = (isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0))) * 0.31831014156341552734375;
        float _1895 = isnan(1.0) ? _1479 : (isnan(_1479) ? 1.0 : min(_1479, 1.0));
        _1842 = (((_1888 * cbLight._m0[_1853].x) * _1894) * _1895) + _1759;
        _1844 = (((_1888 * cbLight._m0[_1853].y) * _1894) * _1895) + _1761;
        _1846 = (((_1888 * cbLight._m0[_1853].z) * _1894) * _1895) + _1763;
    }
    float _2029;
    float _2031;
    float _2033;
    float _2035;
    float _2037;
    float _2039;
    if (_1460.y == 0u)
    {
        float _1970 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1971 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1970;
        float _1972 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1970;
        float _1973 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1970;
        uvec4 _1985 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1986 = _1985.x;
        uint _1997 = uint((float(_1985.y) * floor(float(uint(cbSceneParam._m0[85u].y * _388) / _1986))) + floor(float(uint(cbSceneParam._m0[85u].x * _387) / _1986)));
        float _2007 = (log2(_1973 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2008 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
        uint _2011 = uint(isnan(14.0) ? _2008 : (isnan(_2008) ? 14.0 : min(_2008, 14.0)));
        uvec4 _2016 = texelFetch(g_lightClusterGridBuffer, int(((_2011 << 2u) + (_1997 << 6u)) >> 2u));
        uint _2017 = _2016.x;
        uint _2018 = _1985.z;
        float _2148;
        float _2150;
        float _2152;
        float _2154;
        float _2156;
        float _2158;
        if (((((1u << ((_2018 >> 4u) & 15u)) + 4294967295u) & _2017) == 0u) || ((_2018 & 240u) == 0u))
        {
            _2148 = 0.0;
            _2150 = 0.0;
            _2152 = 0.0;
            _2154 = 0.0;
            _2156 = 0.0;
            _2158 = 0.0;
        }
        else
        {
            float _2149;
            float _2151;
            float _2153;
            float _2155;
            float _2157;
            float _2159;
            float _2299 = 0.0;
            float _2300 = 0.0;
            float _2301 = 0.0;
            float _2302 = 0.0;
            float _2303 = 0.0;
            float _2304 = 0.0;
            uint _2305 = 0u;
            uint _2314;
            bool _2315;
            for (;;)
            {
                _2314 = texelFetch(g_lightClassification, int((((_2011 << 5u) + (_1997 << 9u)) + (_2305 << 2u)) >> 2u)).x;
                _2315 = _2314 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2315)
                {
                    frontier_phi_63_pred = _2304;
                    frontier_phi_63_pred_1 = _2303;
                    frontier_phi_63_pred_2 = _2302;
                    frontier_phi_63_pred_3 = _2301;
                    frontier_phi_63_pred_4 = _2300;
                    frontier_phi_63_pred_5 = _2299;
                }
                else
                {
                    float _2423;
                    float _2424;
                    float _2425;
                    float _2426;
                    float _2427;
                    float _2428;
                    uint _2429;
                    _2423 = _2299;
                    _2424 = _2300;
                    _2425 = _2301;
                    _2426 = _2302;
                    _2427 = _2303;
                    _2428 = _2304;
                    _2429 = _2314;
                    float _2355;
                    float _2356;
                    float _2357;
                    float _2358;
                    float _2359;
                    float _2360;
                    for (;;)
                    {
                        uint _2433 = uint(findLSB(_2429)) + (_2305 << 5u);
                        uint _2430 = (_2429 + 4294967295u) & _2429;
                        uint _2435 = _2433 * 48u;
                        vec4 _2449 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2435)).x, texelFetch(g_PointLightRenderingBuffer, int(_2435 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2435 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2435 + 3u)).x));
                        uint _2455 = (_2433 * 48u) + 4u;
                        vec4 _2468 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2455)).x, texelFetch(g_PointLightRenderingBuffer, int(_2455 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2455 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2455 + 3u)).x));
                        uint _2474 = (_2433 * 48u) + 8u;
                        vec3 _2485 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2474)).x, texelFetch(g_PointLightRenderingBuffer, int(_2474 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2474 + 2u)).x));
                        float _2489 = _2449.x - _1971;
                        float _2490 = _2449.y - _1972;
                        float _2491 = _2449.z - _1973;
                        float _2492 = dot(vec3(_2489, _2490, _2491), vec3(_2489, _2490, _2491));
                        float _2495 = inversesqrt(_2492);
                        float _2504 = 1.0 - (_2492 * _2449.w);
                        float _3606 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
                        float _2505 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
                        float _2506 = sqrt(_2492) * _2468.w;
                        float _2509 = 1.39999997615814208984375 / (_2506 + 1.39999997615814208984375);
                        float _2510 = _2509 * _2509;
                        float _2513 = ((1.0 - _2510) * dot(vec3(_409, _412, _415), vec3(_2495 * _2489, _2495 * _2490, _2495 * _2491))) + _2510;
                        float _2516 = _2506 * _2506;
                        float _2520 = ((isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0))) * _2505) / ((_2516 * 0.699999988079071044921875) + 1.0);
                        float _2524 = (-0.0) - _1971;
                        float _2525 = (-0.0) - _1972;
                        float _2526 = (-0.0) - _1973;
                        float _2530 = inversesqrt(dot(vec3(_2524, _2525, _2526), vec3(_2524, _2525, _2526)));
                        float _2534 = dot(vec3(_409, _412, _415), vec3(_2530 * _2524, _2530 * _2525, _2530 * _2526));
                        float _3622 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
                        float _3633 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0));
                        float _2538 = isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0));
                        float _2542 = (0.5 / (((isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0))) + 9.9999999392252902907785028219223e-09) + _2538)) * _2538;
                        float _3644 = isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0));
                        float _2551 = (((isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0))) * 3.1415927410125732421875) / ((_2516 * 2.1991131305694580078125) + 3.141590118408203125)) * _2505;
                        _2358 = (_2520 * _2468.x) + _2426;
                        _2359 = (_2520 * _2468.y) + _2427;
                        _2360 = (_2520 * _2468.z) + _2428;
                        _2355 = (_2551 * _2485.x) + _2423;
                        _2356 = (_2551 * _2485.y) + _2424;
                        _2357 = (_2551 * _2485.z) + _2425;
                        if (_2430 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2423 = _2355;
                            _2424 = _2356;
                            _2425 = _2357;
                            _2426 = _2358;
                            _2427 = _2359;
                            _2428 = _2360;
                            _2429 = _2430;
                        }
                    }
                    frontier_phi_63_pred = _2360;
                    frontier_phi_63_pred_1 = _2359;
                    frontier_phi_63_pred_2 = _2358;
                    frontier_phi_63_pred_3 = _2357;
                    frontier_phi_63_pred_4 = _2356;
                    frontier_phi_63_pred_5 = _2355;
                }
                _2159 = frontier_phi_63_pred;
                _2157 = frontier_phi_63_pred_1;
                _2155 = frontier_phi_63_pred_2;
                _2153 = frontier_phi_63_pred_3;
                _2151 = frontier_phi_63_pred_4;
                _2149 = frontier_phi_63_pred_5;
                uint _2306 = _2305 + 1u;
                if (_2306 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2299 = _2149;
                    _2300 = _2151;
                    _2301 = _2153;
                    _2302 = _2155;
                    _2303 = _2157;
                    _2304 = _2159;
                    _2305 = _2306;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2148 = _2149;
            _2150 = _2151;
            _2152 = _2153;
            _2154 = _2155;
            _2156 = _2157;
            _2158 = _2159;
        }
        uvec4 _2162 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2163 = _2162.z;
        uint _2165 = (_2163 >> 8u) & 15u;
        float _2270;
        float _2272;
        float _2274;
        float _2276;
        float _2278;
        float _2280;
        if (((4294967295u << _2165) & _2017) == 0u)
        {
            _2270 = _2148;
            _2272 = _2150;
            _2274 = _2152;
            _2276 = _2154;
            _2278 = _2156;
            _2280 = _2158;
        }
        else
        {
            float _2295 = inversesqrt(dot(vec3(_1971, _1972, _1973), vec3(_1971, _1972, _1973)));
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2165 < ((_2163 >> 12u) & 15u))
            {
                float _2271;
                float _2273;
                float _2275;
                float _2277;
                float _2279;
                float _2281;
                float _2406 = _2148;
                float _2407 = _2150;
                float _2408 = _2152;
                float _2409 = _2154;
                float _2410 = _2156;
                float _2411 = _2158;
                uint _2412 = _2165;
                uint _2421;
                bool _2422;
                for (;;)
                {
                    _2421 = texelFetch(g_lightClassification, int((((_2011 << 5u) + (_1997 << 9u)) + (_2412 << 2u)) >> 2u)).x;
                    _2422 = _2421 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2422)
                    {
                        frontier_phi_69_pred = _2411;
                        frontier_phi_69_pred_1 = _2410;
                        frontier_phi_69_pred_2 = _2409;
                        frontier_phi_69_pred_3 = _2408;
                        frontier_phi_69_pred_4 = _2407;
                        frontier_phi_69_pred_5 = _2406;
                    }
                    else
                    {
                        float _2556;
                        float _2557;
                        float _2558;
                        float _2559;
                        float _2560;
                        float _2561;
                        float _2808;
                        float _2809;
                        float _2810;
                        float _2811;
                        float _2812;
                        float _2813;
                        float _2569 = _2406;
                        float _2570 = _2407;
                        float _2571 = _2408;
                        float _2572 = _2409;
                        float _2573 = _2410;
                        float _2574 = _2411;
                        uint _2575 = _2421;
                        uint _2576;
                        vec4 _2601;
                        float _2602;
                        vec4 _2617;
                        vec3 _2629;
                        vec4 _2645;
                        vec4 _2661;
                        float _2708;
                        bool _2709;
                        for (;;)
                        {
                            uint _2586 = ((_2412 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2575));
                            _2576 = (_2575 + 4294967295u) & _2575;
                            uint _2588 = _2586 * 40u;
                            _2601 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2588)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2588 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2588 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2588 + 3u)).x));
                            _2602 = _2601.w;
                            uint _2604 = (_2586 * 40u) + 4u;
                            _2617 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2604)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2604 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2604 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2604 + 3u)).x));
                            uint _2619 = (_2586 * 40u) + 8u;
                            _2629 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2619)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2619 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2619 + 2u)).x));
                            uint _2632 = (_2586 * 40u) + 16u;
                            _2645 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2632)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2632 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2632 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2632 + 3u)).x));
                            uint _2648 = (_2586 * 40u) + 20u;
                            _2661 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2648)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2648 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2648 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2648 + 3u)).x));
                            uint _2664 = (_2586 * 40u) + 24u;
                            vec4 _2677 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2664)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2664 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2664 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2664 + 3u)).x));
                            uint _2683 = (_2586 * 40u) + 28u;
                            vec4 _2696 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2683)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2683 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2683 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2683 + 3u)).x));
                            _2708 = fma(_1973, _2696.z, fma(_1972, _2696.y, _2696.x * _1971)) + _2696.w;
                            _2709 = !((fma(_1973, _2677.z, fma(_1972, _2677.y, _2677.x * _1971)) + _2677.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2709)
                            {
                                float _2736 = _2601.x - _1971;
                                float _2737 = _2601.y - _1972;
                                float _2738 = _2601.z - _1973;
                                float _2739 = dot(vec3(_2736, _2737, _2738), vec3(_2736, _2737, _2738));
                                float _2742 = inversesqrt(_2739);
                                float _2743 = _2742 * _2736;
                                float _2744 = _2742 * _2737;
                                float _2745 = _2742 * _2738;
                                float _2749 = 1.0 - (_2739 / (_2602 * _2602));
                                float _3655 = isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : max(_2749, 0.0));
                                float _2750 = isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0));
                                float _2754 = sqrt(_2739) * _2617.w;
                                float _2756 = 1.39999997615814208984375 / (_2754 + 1.39999997615814208984375);
                                float _2757 = _2756 * _2756;
                                float _2758 = 1.0 - _2757;
                                float _2760 = (_2758 * dot(vec3(_2743, _2744, _2745), vec3(_409, _412, _415))) + _2757;
                                float _2763 = _2754 * _2754;
                                float _2767 = (fma(_1973, _2645.z, fma(_1972, _2645.y, _2645.x * _1971)) + _2645.w) / _2708;
                                float _2768 = (fma(_1973, _2661.z, fma(_1972, _2661.y, _2661.x * _1971)) + _2661.w) / _2708;
                                float _2772 = 1.0 - dot(vec2(_2767, _2768), vec2(_2767, _2768));
                                float _3671 = isnan(0.0) ? _2772 : (isnan(_2772) ? 0.0 : max(_2772, 0.0));
                                float _2773 = isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0));
                                float _2774 = _2773 * (((isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0))) * _2750) / ((_2763 * 0.699999988079071044921875) + 1.0));
                                float _2784 = dot(vec3(_409, _412, _415), vec3((-0.0) - (_1971 * _2295), (-0.0) - (_1972 * _2295), (-0.0) - (_1973 * _2295)));
                                float _3682 = isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : max(_2784, 0.0));
                                float _2792 = (_2758 * dot(vec3(_409, _412, _415), vec3(_2743, _2744, _2745))) + _2757;
                                float _3693 = isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0));
                                float _2793 = isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0));
                                float _2797 = (0.5 / (((isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0))) + 9.9999999392252902907785028219223e-09) + _2793)) * _2793;
                                float _3704 = isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : max(_2797, 0.0));
                                float _2804 = (_2773 * _2750) * (((isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0))) * 3.1415927410125732421875) / ((_2763 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_75_pred = _2774 * _2617.z;
                                frontier_phi_75_pred_1 = _2774 * _2617.y;
                                frontier_phi_75_pred_2 = _2774 * _2617.x;
                                frontier_phi_75_pred_3 = _2804 * _2629.z;
                                frontier_phi_75_pred_4 = _2804 * _2629.y;
                                frontier_phi_75_pred_5 = _2804 * _2629.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _2813 = frontier_phi_75_pred;
                            _2812 = frontier_phi_75_pred_1;
                            _2811 = frontier_phi_75_pred_2;
                            _2810 = frontier_phi_75_pred_3;
                            _2809 = frontier_phi_75_pred_4;
                            _2808 = frontier_phi_75_pred_5;
                            _2559 = _2811 + _2572;
                            _2560 = _2812 + _2573;
                            _2561 = _2813 + _2574;
                            _2556 = _2808 + _2569;
                            _2557 = _2809 + _2570;
                            _2558 = _2810 + _2571;
                            if (_2576 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2569 = _2556;
                                _2570 = _2557;
                                _2571 = _2558;
                                _2572 = _2559;
                                _2573 = _2560;
                                _2574 = _2561;
                                _2575 = _2576;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2561;
                        frontier_phi_69_pred_1 = _2560;
                        frontier_phi_69_pred_2 = _2559;
                        frontier_phi_69_pred_3 = _2558;
                        frontier_phi_69_pred_4 = _2557;
                        frontier_phi_69_pred_5 = _2556;
                    }
                    _2281 = frontier_phi_69_pred;
                    _2279 = frontier_phi_69_pred_1;
                    _2277 = frontier_phi_69_pred_2;
                    _2275 = frontier_phi_69_pred_3;
                    _2273 = frontier_phi_69_pred_4;
                    _2271 = frontier_phi_69_pred_5;
                    uint _2413 = _2412 + 1u;
                    if (_2413 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2406 = _2271;
                        _2407 = _2273;
                        _2408 = _2275;
                        _2409 = _2277;
                        _2410 = _2279;
                        _2411 = _2281;
                        _2412 = _2413;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2281;
                frontier_phi_57_58_ladder_1 = _2279;
                frontier_phi_57_58_ladder_2 = _2277;
                frontier_phi_57_58_ladder_3 = _2275;
                frontier_phi_57_58_ladder_4 = _2273;
                frontier_phi_57_58_ladder_5 = _2271;
            }
            else
            {
                frontier_phi_57_58_ladder = _2158;
                frontier_phi_57_58_ladder_1 = _2156;
                frontier_phi_57_58_ladder_2 = _2154;
                frontier_phi_57_58_ladder_3 = _2152;
                frontier_phi_57_58_ladder_4 = _2150;
                frontier_phi_57_58_ladder_5 = _2148;
            }
            _2270 = frontier_phi_57_58_ladder_5;
            _2272 = frontier_phi_57_58_ladder_4;
            _2274 = frontier_phi_57_58_ladder_3;
            _2276 = frontier_phi_57_58_ladder_2;
            _2278 = frontier_phi_57_58_ladder_1;
            _2280 = frontier_phi_57_58_ladder;
        }
        float _2285 = isnan(1.0) ? _453 : (isnan(_453) ? 1.0 : min(_453, 1.0));
        _2029 = (_2285 * _2276) + _1593;
        _2031 = (_2285 * _2278) + _1595;
        _2033 = (_2285 * _2280) + _1597;
        _2035 = ((_2270 * 0.039999999105930328369140625) * _2285) + _1842;
        _2037 = ((_2272 * 0.039999999105930328369140625) * _2285) + _1844;
        _2039 = ((_2274 * 0.039999999105930328369140625) * _2285) + _1846;
    }
    else
    {
        _2029 = _1593;
        _2031 = _1595;
        _2033 = _1597;
        _2035 = _1842;
        _2037 = _1844;
        _2039 = _1846;
    }
    uint _2045 = _429 + uint(cbMatDynParam._m0[0u].w);
    float _2051 = (((_279.x * cbMtdParam._m0[11u].x) + (_248.x * cbMtdParam._m0[10u].x)) * cbMtdParam._m0[12u].x) * cbInstanceData._m0[_2045].x;
    float _2052 = (((_279.y * cbMtdParam._m0[11u].y) + (_248.y * cbMtdParam._m0[10u].y)) * cbMtdParam._m0[12u].x) * cbInstanceData._m0[_2045].y;
    float _2053 = (((_279.z * cbMtdParam._m0[11u].z) + (_248.z * cbMtdParam._m0[10u].z)) * cbMtdParam._m0[12u].x) * cbInstanceData._m0[_2045].z;
    float _3720 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _3731 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _3742 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _3753 = isnan(0.0) ? _302 : (isnan(_302) ? 0.0 : max(_302, 0.0));
    float _2071 = (((isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0))) * (_2029 + ((isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0))) * _453))) + ((_2035 + ((isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0))) * _1232)) * cbPerFrame._m0[3u].x)) + _2051;
    float _2073 = (_2052 + ((_2037 + ((isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0))) * _1232)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0))) * (_2031 + ((isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0))) * _453)));
    float _2075 = (_2053 + ((_2039 + ((isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0))) * _1232)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0))) * (_2033 + ((isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0))) * _453)));
    float _3779 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2088 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
    float _2093 = cbInstanceData._m0[_428 + 6u].w * (isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0)));
    float _2098 = _387 / cbSceneParam._m0[86u].x;
    float _2099 = _388 / cbSceneParam._m0[86u].y;
    vec4 _2113 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2098, _2099, (log2((isnan(cbSceneParam._m0[77u].w) ? _321 : (isnan(_321) ? cbSceneParam._m0[77u].w : min(_321, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2115 = _2113.x;
    float _2116 = _2113.y;
    float _2117 = _2113.z;
    float _2118 = _2113.w;
    float _2210;
    float _2212;
    float _2214;
    float _2216;
    if (_321 > cbSceneParam._m0[78u].w)
    {
        float _2173 = isnan(_321) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _321 : min(cbSceneParam._m0[80u].w, _321));
        float _2174 = _2173 / _321;
        float _2185 = _2174 * _372;
        float _2186 = _373 * _2174;
        float _2187 = (-0.0) - _2186;
        float _2188 = _2174 * _374;
        float _2190 = (cbSceneParam._m0[77u].w * _2187) / _2173;
        float _2191 = _2190 + cbSceneParam._m0[79u].w;
        float _2192 = cbSceneParam._m0[79u].w - _2186;
        float _2198 = sqrt(((_2185 * _2185) + (_2186 * _2186)) + (_2188 * _2188));
        float _2201 = (1.0 - (cbSceneParam._m0[77u].w / _2173)) * _2198;
        float _2206 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2208 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2368;
        if (abs((_2187 - _2190) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2368 = ((((_2191 > 0.0) ? exp2(_2206 * _2191) : (2.0 - exp2(_2208 * _2191))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2201;
        }
        else
        {
            float _2328 = 1.0 / cbSceneParam._m0[80u].x;
            float _2329 = isnan(_2192) ? _2191 : (isnan(_2191) ? _2192 : max(_2191, _2192));
            float _2330 = isnan(_2192) ? _2191 : (isnan(_2191) ? _2192 : min(_2191, _2192));
            float _2339 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : min(_2329, 0.0));
            float _2340 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : min(_2330, 0.0));
            _2368 = ((abs(_2198 / _2187) * cbSceneParam._m0[80u].y) * ((((_2339 - _2340) * 2.0) - ((exp2(_2206 * (isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0)))) - exp2(_2206 * (isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0))))) * _2328)) - ((exp2(_2208 * _2339) - exp2(_2208 * _2340)) * _2328))) + (_2201 * cbSceneParam._m0[80u].z);
        }
        vec4 _2370 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2098, _2099, 1.0), 0.0);
        float _2379 = exp2((_2368 * (-1.44269502162933349609375)) * (1.0 - _2370.w));
        float _2380 = log2(_2379);
        float _2396 = log2(_2118);
        _2210 = (exp2(_2396 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2380 * cbSceneParam._m0[78u].x)) * _2370.x) / cbSceneParam._m0[78u].x)) + _2115;
        _2212 = (exp2(_2396 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2380 * cbSceneParam._m0[78u].y)) * _2370.y) / cbSceneParam._m0[78u].y)) + _2116;
        _2214 = (exp2(_2396 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2380 * cbSceneParam._m0[78u].z)) * _2370.z) / cbSceneParam._m0[78u].z)) + _2117;
        _2216 = _2379 * _2118;
    }
    else
    {
        _2210 = _2115;
        _2212 = _2116;
        _2214 = _2117;
        _2216 = _2118;
    }
    float _2228 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2229 = _2228 == 3.0;
    float _2231 = log2(_2216);
    float _2235 = exp2(_2231 * cbSceneParam._m0[78u].x);
    float _2236 = exp2(_2231 * cbSceneParam._m0[78u].y);
    float _2237 = exp2(_2231 * cbSceneParam._m0[78u].z);
    float _2238 = _2235 * (isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0)));
    float _2239 = _2236 * (isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0)));
    float _2240 = _2237 * (isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0)));
    float _2249 = (_2228 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2249 * (_2229 ? _2238 : (_2238 + (cbSceneParam._m0[72u].w * _2210)));
    SV_Target.y = _2249 * (_2229 ? _2239 : (_2239 + (cbSceneParam._m0[72u].w * _2212)));
    SV_Target.z = _2249 * (_2229 ? _2240 : (_2240 + (cbSceneParam._m0[72u].w * _2214)));
    SV_Target.w = _2093;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2051) * _2088) * _2235) * _2249;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2052) * _2088) * _2236) * _2249;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2053) * _2088) * _2237) * _2249;
    SV_Target_1.w = _2093;
}


