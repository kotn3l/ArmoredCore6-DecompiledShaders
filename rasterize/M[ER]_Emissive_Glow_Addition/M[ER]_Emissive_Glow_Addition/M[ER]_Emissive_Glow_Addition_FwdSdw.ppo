#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_ER_Emissive_Glow_Addition_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_ER_Emissive_Glow_Addition_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_ER_Emissive_Glow_Addition_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _801;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _175 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _176 = _175 * NORMAL.x;
    float _177 = _175 * NORMAL.y;
    float _178 = _175 * NORMAL.z;
    float _183;
    float _184;
    float _185;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _183 = (-0.0) - _176;
        _184 = (-0.0) - _177;
        _185 = (-0.0) - _178;
    }
    else
    {
        _183 = _176;
        _184 = _177;
        _185 = _178;
    }
    vec4 _214 = texture(sampler2D(M_ER_Emissive_Glow_Addition_snp_0_Texture2D_0, SS_DiffuseMap), vec2((((cbMtdParam._m0[12u].y * cbPerFrame._m0[22u].x) + TEXCOORD_1.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((cbMtdParam._m0[12u].z * cbPerFrame._m0[22u].x) + TEXCOORD_1.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _221 = _214.x * cbMtdParam._m0[9u].x;
    float _222 = _214.y * cbMtdParam._m0[9u].y;
    float _223 = _214.z * cbMtdParam._m0[9u].z;
    float _225 = (cbMtdParam._m0[9u].w * TEXCOORD_1.z) * _214.w;
    vec4 _252 = texture(sampler2D(M_ER_Emissive_Glow_Addition_snp_0_Texture2D_2, SS_DiffuseMap), vec2((((cbMtdParam._m0[12u].w * cbPerFrame._m0[22u].x) + TEXCOORD_1.x) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((cbMtdParam._m0[13u].x * cbPerFrame._m0[22u].x) + TEXCOORD_1.y) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    vec4 _283 = texture(sampler2D(M_ER_Emissive_Glow_Addition_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((cbMtdParam._m0[13u].y * cbPerFrame._m0[22u].x) + TEXCOORD_1.x) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((cbMtdParam._m0[13u].z * cbPerFrame._m0[22u].x) + TEXCOORD_1.y) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _301 = inversesqrt(dot(vec3(_183, _184, _185), vec3(_183, _184, _185)));
    float _302 = _301 * _183;
    float _303 = _301 * _184;
    float _304 = _301 * _185;
    float _3232 = isnan(0.0) ? _225 : (isnan(_225) ? 0.0 : max(_225, 0.0));
    float _306 = isnan(1.0) ? _3232 : (isnan(_3232) ? 1.0 : min(_3232, 1.0));
    float _3243 = isnan(0.0) ? _221 : (isnan(_221) ? 0.0 : max(_221, 0.0));
    float _3254 = isnan(0.0) ? _222 : (isnan(_222) ? 0.0 : max(_222, 0.0));
    float _3265 = isnan(0.0) ? _223 : (isnan(_223) ? 0.0 : max(_223, 0.0));
    float _325 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _366 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _376 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _366);
    float _377 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _366);
    float _378 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _366);
    float _382 = inversesqrt(dot(vec3(_376, _377, _378), vec3(_376, _377, _378)));
    float _383 = _376 * _382;
    float _384 = _377 * _382;
    float _385 = _378 * _382;
    float _391 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _392 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _413 = fma(_304, cbSceneParam._m0[5u].z, fma(_303, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _302));
    float _416 = fma(_304, cbSceneParam._m0[6u].z, fma(_303, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _302));
    float _419 = fma(_304, cbSceneParam._m0[7u].z, fma(_303, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _302));
    uint _432 = uint(roundEven(NORMAL.w)) * 13u;
    uint _433 = _432 + 9u;
    uint _434 = _433 + uint(cbMatDynParam._m0[0u].w);
    float _440 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3243 : (isnan(_3243) ? 1.0 : min(_3243, 1.0)))) * cbInstanceData._m0[_434].x;
    float _441 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3254 : (isnan(_3254) ? 1.0 : min(_3254, 1.0)))) * cbInstanceData._m0[_434].y;
    float _442 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3265 : (isnan(_3265) ? 1.0 : min(_3265, 1.0)))) * cbInstanceData._m0[_434].z;
    float _3276 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _443 = isnan(1.0) ? _3276 : (isnan(_3276) ? 1.0 : min(_3276, 1.0));
    float _3287 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _444 = isnan(1.0) ? _3287 : (isnan(_3287) ? 1.0 : min(_3287, 1.0));
    float _3298 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _445 = isnan(1.0) ? _3298 : (isnan(_3298) ? 1.0 : min(_3298, 1.0));
    vec4 _454 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _391, cbSceneParam._m0[86u].y * _392));
    float _457 = _454.x * TEXCOORD_1.w;
    float _458 = dot(vec3(_302, _303, _304), vec3(_383, _384, _385));
    float _461 = _458 * 2.0;
    float _466 = (_461 * _302) - _383;
    float _467 = (_461 * _303) - _384;
    float _468 = (_461 * _304) - _385;
    float _490 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _494 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _498 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _800;
    float _802;
    float _803;
    float _804;
    float _805;
    float _806;
    float _807;
    float _808;
    float _809;
    float _810;
    float _811;
    float _812;
    float _813;
    float _814;
    float _815;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _525 = fma(_498, cbModelParam._m0[26u].z, fma(_494, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _490));
        float _529 = fma(_498, cbModelParam._m0[27u].z, fma(_494, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _490));
        float _533 = fma(_498, cbModelParam._m0[28u].z, fma(_494, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _490));
        float _558 = _490 + _302;
        float _559 = _494 + _303;
        float _560 = _498 + _304;
        float _570 = fma(_560, cbModelParam._m0[26u].z, fma(_559, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _558)) - _525;
        float _571 = fma(_560, cbModelParam._m0[27u].z, fma(_559, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _558)) - _529;
        float _572 = fma(_560, cbModelParam._m0[28u].z, fma(_559, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _558)) - _533;
        float _576 = inversesqrt(dot(vec3(_570, _571, _572), vec3(_570, _571, _572)));
        float _589 = ((_576 * _570) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_525 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _590 = ((_576 * _571) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_529 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _591 = ((_576 * _572) / cbModelParam._m0[34u].z) + ((((((_533 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _594 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_589, _590, _591), 0.0);
        vec4 _601 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_589, _590, _591), 0.0);
        vec4 _608 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_589, _590, _591), 0.0);
        vec4 _615 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_589, _590, _591), 0.0);
        float _628 = exp2((_594.w + (-0.5)) * 20.0) * 2.0;
        float _629 = _628 * (_594.x + (-0.5));
        float _630 = _628 * (_594.y + (-0.5));
        float _631 = _628 * (_594.z + (-0.5));
        float _638 = exp2((_601.w + (-0.5)) * 20.0) * 2.0;
        float _639 = _638 * (_601.x + (-0.5));
        float _640 = _638 * (_601.y + (-0.5));
        float _641 = _638 * (_601.z + (-0.5));
        float _648 = exp2((_608.w + (-0.5)) * 20.0) * 2.0;
        float _649 = _648 * (_608.x + (-0.5));
        float _650 = _648 * (_608.y + (-0.5));
        float _651 = _648 * (_608.z + (-0.5));
        float _658 = exp2((_615.w + (-0.5)) * 20.0) * 2.0;
        float _659 = _658 * (_615.x + (-0.5));
        float _660 = _658 * (_615.y + (-0.5));
        float _661 = _658 * (_615.z + (-0.5));
        float _662 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
        float _663 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
        float _664 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
        float _665 = _629 * 0.5;
        float _666 = _639 * 0.5;
        float _667 = _649 * 0.5;
        float _668 = dot(vec3(_665, _666, _667), vec3(_665, _666, _667));
        float _673 = (_668 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_668);
        float _682 = (dot(vec3(_302, _303, _304), vec3(_673 * _665, _673 * _666, _673 * _667)) + 1.0) * 0.5;
        float _3324 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
        float _692 = sqrt(((_666 * _666) + (_665 * _665)) + (_667 * _667)) / (_662 + 9.9999997473787516355514526367188e-06);
        float _3335 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
        float _693 = isnan(1.0) ? _3335 : (isnan(_3335) ? 1.0 : min(_3335, 1.0));
        float _694 = _693 * 2.0;
        float _698 = (1.0 - _693) / (_693 + 1.0);
        float _3346 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
        float _699 = isnan(1.0) ? _3346 : (isnan(_3346) ? 1.0 : min(_3346, 1.0));
        float _708 = ((((1.0 - _699) * (_694 + 2.0)) * exp2(log2(isnan(1.0) ? _3324 : (isnan(_3324) ? 1.0 : min(_3324, 1.0))) * (_694 + 1.0))) + _699) * _662;
        float _709 = _630 * 0.5;
        float _710 = _640 * 0.5;
        float _711 = _650 * 0.5;
        float _712 = dot(vec3(_709, _710, _711), vec3(_709, _710, _711));
        float _717 = (_712 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_712);
        float _725 = (dot(vec3(_302, _303, _304), vec3(_717 * _709, _717 * _710, _717 * _711)) + 1.0) * 0.5;
        float _3357 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
        float _734 = sqrt(((_710 * _710) + (_709 * _709)) + (_711 * _711)) / (_663 + 9.9999997473787516355514526367188e-06);
        float _3368 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
        float _735 = isnan(1.0) ? _3368 : (isnan(_3368) ? 1.0 : min(_3368, 1.0));
        float _736 = _735 * 2.0;
        float _740 = (1.0 - _735) / (_735 + 1.0);
        float _3379 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
        float _741 = isnan(1.0) ? _3379 : (isnan(_3379) ? 1.0 : min(_3379, 1.0));
        float _750 = ((((1.0 - _741) * (_736 + 2.0)) * exp2(log2(isnan(1.0) ? _3357 : (isnan(_3357) ? 1.0 : min(_3357, 1.0))) * (_736 + 1.0))) + _741) * _663;
        float _751 = _631 * 0.5;
        float _752 = _641 * 0.5;
        float _753 = _651 * 0.5;
        float _754 = dot(vec3(_751, _752, _753), vec3(_751, _752, _753));
        float _759 = (_754 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_754);
        float _767 = (dot(vec3(_302, _303, _304), vec3(_759 * _751, _759 * _752, _759 * _753)) + 1.0) * 0.5;
        float _3390 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
        float _776 = sqrt(((_752 * _752) + (_751 * _751)) + (_753 * _753)) / (_664 + 9.9999997473787516355514526367188e-06);
        float _3401 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
        float _777 = isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0));
        float _778 = _777 * 2.0;
        float _782 = (1.0 - _777) / (_777 + 1.0);
        float _3412 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
        float _783 = isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0));
        float _792 = ((((1.0 - _783) * (_778 + 2.0)) * exp2(log2(isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0))) * (_778 + 1.0))) + _783) * _664;
        _800 = _631;
        _802 = _630;
        _803 = _629;
        _804 = _641;
        _805 = _640;
        _806 = _639;
        _807 = _651;
        _808 = _650;
        _809 = _649;
        _810 = _664;
        _811 = _663;
        _812 = _662;
        _813 = cbModelParam._m0[36u].z * (isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0)));
        _814 = cbModelParam._m0[36u].z * (isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0)));
        _815 = cbModelParam._m0[36u].z * (isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0)));
    }
    else
    {
        _800 = _801;
        _802 = _801;
        _803 = _801;
        _804 = _801;
        _805 = _801;
        _806 = _801;
        _807 = _801;
        _808 = _801;
        _809 = _801;
        _810 = _801;
        _811 = _801;
        _812 = _801;
        _813 = 0.0;
        _814 = 0.0;
        _815 = 0.0;
    }
    float _1110;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _841 = fma(_498, cbModelParam._m0[30u].z, fma(_494, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _490));
        float _845 = fma(_498, cbModelParam._m0[31u].z, fma(_494, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _490));
        float _849 = fma(_498, cbModelParam._m0[32u].z, fma(_494, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _490));
        float _872 = _490 + _302;
        float _873 = _494 + _303;
        float _874 = _498 + _304;
        float _884 = fma(_874, cbModelParam._m0[30u].z, fma(_873, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _872)) - _841;
        float _885 = fma(_874, cbModelParam._m0[31u].z, fma(_873, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _872)) - _845;
        float _886 = fma(_874, cbModelParam._m0[32u].z, fma(_873, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _872)) - _849;
        float _890 = inversesqrt(dot(vec3(_884, _885, _886), vec3(_884, _885, _886)));
        float _903 = ((_890 * _884) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_841 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _904 = ((_890 * _885) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_845 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _905 = ((_890 * _886) / cbModelParam._m0[35u].z) + ((((((_849 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _907 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_903, _904, _905), 0.0);
        vec4 _914 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_903, _904, _905), 0.0);
        vec4 _921 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_903, _904, _905), 0.0);
        vec4 _928 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_903, _904, _905), 0.0);
        float _940 = exp2((_907.w + (-0.5)) * 20.0) * 2.0;
        float _941 = _940 * (_907.x + (-0.5));
        float _942 = _940 * (_907.y + (-0.5));
        float _943 = _940 * (_907.z + (-0.5));
        float _950 = exp2((_914.w + (-0.5)) * 20.0) * 2.0;
        float _951 = _950 * (_914.x + (-0.5));
        float _952 = _950 * (_914.y + (-0.5));
        float _953 = _950 * (_914.z + (-0.5));
        float _960 = exp2((_921.w + (-0.5)) * 20.0) * 2.0;
        float _961 = _960 * (_921.x + (-0.5));
        float _962 = _960 * (_921.y + (-0.5));
        float _963 = _960 * (_921.z + (-0.5));
        float _970 = exp2((_928.w + (-0.5)) * 20.0) * 2.0;
        float _971 = _970 * (_928.x + (-0.5));
        float _972 = _970 * (_928.y + (-0.5));
        float _973 = _970 * (_928.z + (-0.5));
        float _974 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _975 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _976 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _977 = _941 * 0.5;
        float _978 = _951 * 0.5;
        float _979 = _961 * 0.5;
        float _980 = dot(vec3(_977, _978, _979), vec3(_977, _978, _979));
        float _985 = (_980 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_980);
        float _993 = (dot(vec3(_302, _303, _304), vec3(_985 * _977, _985 * _978, _985 * _979)) + 1.0) * 0.5;
        float _3453 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _1002 = sqrt(((_978 * _978) + (_977 * _977)) + (_979 * _979)) / (_974 + 9.9999997473787516355514526367188e-06);
        float _3464 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1003 = isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0));
        float _1004 = _1003 * 2.0;
        float _1008 = (1.0 - _1003) / (_1003 + 1.0);
        float _3475 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1009 = isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0));
        float _1018 = ((((1.0 - _1009) * (_1004 + 2.0)) * exp2(log2(isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0))) * (_1004 + 1.0))) + _1009) * _974;
        float _1019 = _942 * 0.5;
        float _1020 = _952 * 0.5;
        float _1021 = _962 * 0.5;
        float _1022 = dot(vec3(_1019, _1020, _1021), vec3(_1019, _1020, _1021));
        float _1027 = (_1022 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1022);
        float _1035 = (dot(vec3(_302, _303, _304), vec3(_1027 * _1019, _1027 * _1020, _1027 * _1021)) + 1.0) * 0.5;
        float _3486 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1044 = sqrt(((_1020 * _1020) + (_1019 * _1019)) + (_1021 * _1021)) / (_975 + 9.9999997473787516355514526367188e-06);
        float _3497 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1045 = isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0));
        float _1046 = _1045 * 2.0;
        float _1050 = (1.0 - _1045) / (_1045 + 1.0);
        float _3508 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1051 = isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0));
        float _1060 = ((((1.0 - _1051) * (_1046 + 2.0)) * exp2(log2(isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0))) * (_1046 + 1.0))) + _1051) * _975;
        float _1061 = _943 * 0.5;
        float _1062 = _953 * 0.5;
        float _1063 = _963 * 0.5;
        float _1064 = dot(vec3(_1061, _1062, _1063), vec3(_1061, _1062, _1063));
        float _1069 = (_1064 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1064);
        float _1077 = (dot(vec3(_302, _303, _304), vec3(_1069 * _1061, _1069 * _1062, _1069 * _1063)) + 1.0) * 0.5;
        float _3519 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1086 = sqrt(((_1062 * _1062) + (_1061 * _1061)) + (_1063 * _1063)) / (_976 + 9.9999997473787516355514526367188e-06);
        float _3530 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1087 = isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0));
        float _1088 = _1087 * 2.0;
        float _1092 = (1.0 - _1087) / (_1087 + 1.0);
        float _3541 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1093 = isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0));
        float _1102 = ((((1.0 - _1093) * (_1088 + 2.0)) * exp2(log2(isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0))) * (_1088 + 1.0))) + _1093) * _976;
        _1110 = _943;
        _1111 = _942;
        _1112 = _941;
        _1113 = _953;
        _1114 = _952;
        _1115 = _951;
        _1116 = _963;
        _1117 = _962;
        _1118 = _961;
        _1119 = _976;
        _1120 = _975;
        _1121 = _974;
        _1122 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0)));
        _1123 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0)));
        _1124 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0)));
    }
    else
    {
        _1110 = _801;
        _1111 = _801;
        _1112 = _801;
        _1113 = _801;
        _1114 = _801;
        _1115 = _801;
        _1116 = _801;
        _1117 = _801;
        _1118 = _801;
        _1119 = _801;
        _1120 = _801;
        _1121 = _801;
        _1122 = 0.0;
        _1123 = 0.0;
        _1124 = 0.0;
    }
    float _1134 = (cbModelParam._m0[1u].x * (_1122 - _813)) + _813;
    float _1135 = (cbModelParam._m0[1u].x * (_1123 - _814)) + _814;
    float _1136 = (cbModelParam._m0[1u].x * (_1124 - _815)) + _815;
    float _1157 = fma(_1136, cbSceneParam._m0[89u].z, fma(_1135, cbSceneParam._m0[89u].y, _1134 * cbSceneParam._m0[89u].x));
    float _1160 = fma(_1136, cbSceneParam._m0[90u].z, fma(_1135, cbSceneParam._m0[90u].y, _1134 * cbSceneParam._m0[90u].x));
    float _1163 = fma(_1136, cbSceneParam._m0[91u].z, fma(_1135, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1134));
    float _1178 = _466 * 0.5;
    float _1179 = _467 * 0.5;
    float _1180 = _468 * 0.5;
    float _1181 = dot(vec4(_1178, _1179, _1180, 1.0), vec4(_1112, _1115, _1118, _1121));
    float _1184 = dot(vec4(_1178, _1179, _1180, 1.0), vec4(_1111, _1114, _1117, _1120));
    float _1187 = dot(vec4(_1178, _1179, _1180, 1.0), vec4(_1110, _1113, _1116, _1119));
    float _1221;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1194 = dot(vec4(_1178, _1179, _1180, 1.0), vec4(_800, _804, _807, _810));
        float _1198 = dot(vec4(_1178, _1179, _1180, 1.0), vec4(_802, _805, _808, _811));
        float _1202 = dot(vec4(_1178, _1179, _1180, 1.0), vec4(_803, _806, _809, _812));
        float _1209 = dot(vec4(cbModelParam._m0[39u]), vec4(_1178, _1179, _1180, 1.0));
        _1221 = dot(vec3(isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0)), isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0)), isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1209) ? 0.0 : (isnan(0.0) ? _1209 : max(0.0, _1209))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1221 = 1.0;
    }
    float _1232;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1223 = dot(vec4(cbModelParam._m0[40u]), vec4(_1178, _1179, _1180, 1.0));
        _1232 = dot(vec3(isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0)), isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0)), isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1223) ? 0.0 : (isnan(0.0) ? _1223 : max(0.0, _1223))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1232 = 1.0;
    }
    float _1236 = (_1232 * cbModelParam._m0[1u].x) + (_1221 * (1.0 - cbModelParam._m0[1u].x));
    float _1245 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1326;
    float _1328;
    float _1330;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1293 = fma(_498, cbModelParam._m0[13u].z, fma(_494, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _490)) + cbModelParam._m0[13u].w;
        float _1297 = fma(_498, cbModelParam._m0[14u].z, fma(_494, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _490)) + cbModelParam._m0[14u].w;
        float _1301 = fma(_498, cbModelParam._m0[15u].z, fma(_494, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _490)) + cbModelParam._m0[15u].w;
        float _1304 = fma(_468, cbModelParam._m0[13u].z, fma(_467, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _466));
        float _1307 = fma(_468, cbModelParam._m0[14u].z, fma(_467, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _466));
        float _1310 = fma(_468, cbModelParam._m0[15u].z, fma(_467, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _466));
        float _1336;
        if (_1304 > 0.0)
        {
            _1336 = abs((1.0 - _1293) / _1304);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1304 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1293 + 1.0) / _1304);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1336 = frontier_phi_16_14_ladder;
        }
        float _1509;
        if (_1307 > 0.0)
        {
            _1509 = abs((1.0 - _1297) / _1307);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1307 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1297 + 1.0) / _1307);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1509 = frontier_phi_25_21_ladder;
        }
        float _1806;
        if (_1310 > 0.0)
        {
            _1806 = abs((1.0 - _1301) / _1310);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1310 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1301 + 1.0) / _1310);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1806 = frontier_phi_37_32_ladder;
        }
        float _1808 = isnan(_1509) ? _1336 : (isnan(_1336) ? _1509 : min(_1336, _1509));
        float _1809 = isnan(_1806) ? _1808 : (isnan(_1808) ? _1806 : min(_1808, _1806));
        float _1813 = (_1809 * _1304) + _1293;
        float _1814 = (_1809 * _1307) + _1297;
        float _1815 = (_1809 * _1310) + _1301;
        float _1816 = _1809 * 9.9999997473787516355514526367188e-05;
        float _1818 = (-1.0) - _1816;
        float _1820 = _1816 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1815 > _1820) || ((_1815 < _1818) || ((_1814 > _1820) || ((_1814 < _1818) || ((_1813 < _1818) || (_1813 > _1820))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1960 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1815, cbModelParam._m0[9u].z, fma(_1814, cbModelParam._m0[9u].y, _1813 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1815, cbModelParam._m0[10u].z, fma(_1814, cbModelParam._m0[10u].y, _1813 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1815, cbModelParam._m0[11u].z, fma(_1814, cbModelParam._m0[11u].y, _1813 * cbModelParam._m0[11u].x))), _1245);
            frontier_phi_15_37_ladder = _1960.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _1960.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _1960.z * cbModelParam._m0[1u].y;
        }
        _1326 = frontier_phi_15_37_ladder_1;
        _1328 = frontier_phi_15_37_ladder;
        _1330 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1314 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_466, _467, _468), _1245);
        _1326 = _1314.x * cbModelParam._m0[1u].y;
        _1328 = _1314.y * cbModelParam._m0[1u].y;
        _1330 = _1314.z * cbModelParam._m0[1u].y;
    }
    float _1333 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1425;
    float _1427;
    float _1429;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1389 = fma(_498, cbModelParam._m0[21u].z, fma(_494, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _490)) + cbModelParam._m0[21u].w;
        float _1393 = fma(_498, cbModelParam._m0[22u].z, fma(_494, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _490)) + cbModelParam._m0[22u].w;
        float _1397 = fma(_498, cbModelParam._m0[23u].z, fma(_494, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _490)) + cbModelParam._m0[23u].w;
        float _1400 = fma(_468, cbModelParam._m0[21u].z, fma(_467, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _466));
        float _1403 = fma(_468, cbModelParam._m0[22u].z, fma(_467, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _466));
        float _1406 = fma(_468, cbModelParam._m0[23u].z, fma(_467, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _466));
        float _1514;
        if (_1400 > 0.0)
        {
            _1514 = abs((1.0 - _1389) / _1400);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1400 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1389 + 1.0) / _1400);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1514 = frontier_phi_27_23_ladder;
        }
        float _1833;
        if (_1403 > 0.0)
        {
            _1833 = abs((1.0 - _1393) / _1403);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1403 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1393 + 1.0) / _1403);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1833 = frontier_phi_39_34_ladder;
        }
        float _2106;
        if (_1406 > 0.0)
        {
            _2106 = abs((1.0 - _1397) / _1406);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1406 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1397 + 1.0) / _1406);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2106 = frontier_phi_49_46_ladder;
        }
        float _2108 = isnan(_1833) ? _1514 : (isnan(_1514) ? _1833 : min(_1514, _1833));
        float _2109 = isnan(_2106) ? _2108 : (isnan(_2108) ? _2106 : min(_2108, _2106));
        float _2113 = (_2109 * _1400) + _1389;
        float _2114 = (_2109 * _1403) + _1393;
        float _2115 = (_2109 * _1406) + _1397;
        float _2116 = _2109 * 9.9999997473787516355514526367188e-05;
        float _2117 = (-1.0) - _2116;
        float _2119 = _2116 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2115 > _2119) || ((_2115 < _2117) || ((_2114 > _2119) || ((_2114 < _2117) || ((_2113 < _2117) || (_2113 > _2119))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2206 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2115, cbModelParam._m0[17u].z, fma(_2114, cbModelParam._m0[17u].y, _2113 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2115, cbModelParam._m0[18u].z, fma(_2114, cbModelParam._m0[18u].y, _2113 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2115, cbModelParam._m0[19u].z, fma(_2114, cbModelParam._m0[19u].y, _2113 * cbModelParam._m0[19u].x))), _1333);
            frontier_phi_24_49_ladder = _2206.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2206.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2206.x * cbModelParam._m0[1u].z;
        }
        _1425 = frontier_phi_24_49_ladder_2;
        _1427 = frontier_phi_24_49_ladder_1;
        _1429 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1409 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_466, _467, _468), _1333);
        _1425 = _1409.x * cbModelParam._m0[1u].z;
        _1427 = _1409.y * cbModelParam._m0[1u].z;
        _1429 = _1409.z * cbModelParam._m0[1u].z;
    }
    float _1441 = _457 * 0.01200000010430812835693359375;
    float _1443 = _1441 * ((cbModelParam._m0[1u].w * (_1425 - _1326)) + _1326);
    float _1444 = _1441 * ((cbModelParam._m0[1u].w * (_1427 - _1328)) + _1328);
    float _1445 = _1441 * ((cbModelParam._m0[1u].w * (_1429 - _1330)) + _1330);
    float _1448 = fma(_1445, cbSceneParam._m0[89u].z, fma(_1444, cbSceneParam._m0[89u].y, _1443 * cbSceneParam._m0[89u].x));
    float _1451 = fma(_1445, cbSceneParam._m0[90u].z, fma(_1444, cbSceneParam._m0[90u].y, _1443 * cbSceneParam._m0[90u].x));
    float _1454 = fma(_1445, cbSceneParam._m0[91u].z, fma(_1444, cbSceneParam._m0[91u].y, _1443 * cbSceneParam._m0[91u].x));
    float _1488 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1492 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1496 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1500 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1501 = _1488 / _1500;
    float _1502 = _1492 / _1500;
    float _1503 = _1496 / _1500;
    float _1650;
    float _1651;
    float _1652;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1530 = ((uint(_1503 > cbSceneParam._m0[59u].y) + uint(_1503 > cbSceneParam._m0[59u].x)) + uint(_1503 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1531 = _1530 + 43u;
        uint _1539 = _1530 + 44u;
        uint _1547 = _1530 + 45u;
        uint _1555 = _1530 + 46u;
        float _1566 = fma(_1500, cbSceneParam._m0[_1531].w, fma(_1496, cbSceneParam._m0[_1531].z, fma(_1492, cbSceneParam._m0[_1531].y, _1488 * cbSceneParam._m0[_1531].x)));
        float _1570 = fma(_1500, cbSceneParam._m0[_1539].w, fma(_1496, cbSceneParam._m0[_1539].z, fma(_1492, cbSceneParam._m0[_1539].y, _1488 * cbSceneParam._m0[_1539].x)));
        float _1578 = fma(_1500, cbSceneParam._m0[_1555].w, fma(_1496, cbSceneParam._m0[_1555].z, fma(_1492, cbSceneParam._m0[_1555].y, _1488 * cbSceneParam._m0[_1555].x)));
        float _1583 = cbSceneParam._m0[33u].z * _1578;
        float _1585 = cbSceneParam._m0[33u].w * _1578;
        float _1588 = fma(_1500, cbSceneParam._m0[_1547].w, fma(_1496, cbSceneParam._m0[_1547].z, fma(_1492, cbSceneParam._m0[_1547].y, _1488 * cbSceneParam._m0[_1547].x))) / _1578;
        float _1636 = (cbSceneParam._m0[33u].x - sqrt(((_1502 * _1502) + (_1501 * _1501)) + (_1503 * _1503))) * cbSceneParam._m0[33u].y;
        float _3667 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
        float _1643 = (isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1583 + _1566) / _1578, (_1585 + _1570) / _1578), _1588), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1585 + _1566) / _1578, (_1570 - _1583) / _1578), _1588), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1566 - _1583) / _1578, (_1570 - _1585) / _1578), _1588), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1566 - _1585) / _1578, (_1583 + _1570) / _1578), _1588), 0.0)).x), vec4(0.25)));
        _1650 = 1.0 - (_1643 * cbSceneParam._m0[34u].x);
        _1651 = 1.0 - (_1643 * cbSceneParam._m0[34u].y);
        _1652 = 1.0 - (_1643 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1650 = 1.0;
        _1651 = 1.0;
        _1652 = 1.0;
    }
    float _1716;
    float _1718;
    float _1720;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1704 = fma(_1500, cbSceneParam._m0[63u].w, fma(_1496, cbSceneParam._m0[63u].z, fma(_1492, cbSceneParam._m0[63u].y, _1488 * cbSceneParam._m0[63u].x)));
        float _1705 = fma(_1500, cbSceneParam._m0[60u].w, fma(_1496, cbSceneParam._m0[60u].z, fma(_1492, cbSceneParam._m0[60u].y, _1488 * cbSceneParam._m0[60u].x))) / _1704;
        float _1706 = fma(_1500, cbSceneParam._m0[61u].w, fma(_1496, cbSceneParam._m0[61u].z, fma(_1492, cbSceneParam._m0[61u].y, _1488 * cbSceneParam._m0[61u].x))) / _1704;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1705 >= cbSceneParam._m0[64u].x) && (_1706 >= cbSceneParam._m0[64u].y)) && (_1705 <= cbSceneParam._m0[64u].z)) && (_1706 <= cbSceneParam._m0[64u].w))
        {
            float _1846 = fma(_1500, cbSceneParam._m0[62u].w, fma(_1496, cbSceneParam._m0[62u].z, fma(_1492, cbSceneParam._m0[62u].y, _1488 * cbSceneParam._m0[62u].x))) / _1704;
            float _1850 = isnan(cbSceneParam._m0[41u].w) ? _1846 : (isnan(_1846) ? cbSceneParam._m0[41u].w : max(_1846, cbSceneParam._m0[41u].w));
            float _1893 = (cbSceneParam._m0[33u].x - sqrt(((_1502 * _1502) + (_1501 * _1501)) + (_1503 * _1503))) * cbSceneParam._m0[33u].y;
            float _3683 = isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0));
            float _1900 = (isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1705, cbSceneParam._m0[33u].w + _1706), _1850), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1705, _1706 - cbSceneParam._m0[33u].z), _1850), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1705 - cbSceneParam._m0[33u].z, _1706 - cbSceneParam._m0[33u].w), _1850), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1705 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1706), _1850), 0.0)).x), vec4(0.25)));
            float _1904 = 1.0 - (_1900 * cbSceneParam._m0[34u].x);
            float _1905 = 1.0 - (_1900 * cbSceneParam._m0[34u].y);
            float _1906 = 1.0 - (_1900 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_1905) ? _1651 : (isnan(_1651) ? _1905 : min(_1651, _1905));
            frontier_phi_36_35_ladder_1 = isnan(_1906) ? _1652 : (isnan(_1652) ? _1906 : min(_1652, _1906));
            frontier_phi_36_35_ladder_2 = isnan(_1904) ? _1650 : (isnan(_1650) ? _1904 : min(_1650, _1904));
        }
        else
        {
            frontier_phi_36_35_ladder = _1651;
            frontier_phi_36_35_ladder_1 = _1652;
            frontier_phi_36_35_ladder_2 = _1650;
        }
        _1716 = frontier_phi_36_35_ladder_2;
        _1718 = frontier_phi_36_35_ladder;
        _1720 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _1716 = _1650;
        _1718 = _1651;
        _1720 = _1652;
    }
    uvec4 _1725 = floatBitsToUint(cbInstanceData._m0[_432 + 5u]);
    uint _1727 = _1725.x * 14u;
    uint _1728 = _1727 + 13u;
    float _1735 = _457 + (-1.0);
    float _1741 = (cbLight._m0[_1728].x * _1735) + 1.0;
    float _1742 = (cbLight._m0[_1728].y * _1735) + 1.0;
    float _1743 = (cbLight._m0[_1728].z * _1735) + 1.0;
    float _1744 = (cbLight._m0[_1728].w * _1735) + 1.0;
    uint _1745 = _1727 + 5u;
    float _1751 = isnan(1.0) ? _1742 : (isnan(_1742) ? 1.0 : min(_1742, 1.0));
    uint _1755 = _1727 + 4u;
    float _1765 = isnan(1.0) ? _1741 : (isnan(_1741) ? 1.0 : min(_1741, 1.0));
    uint _1769 = _1727 | 1u;
    float _1780 = dot(vec3(cbLight._m0[_1727].xyz), vec3(_302, _303, _304));
    float _1783 = dot(vec3(cbLight._m0[_1769].xyz), vec3(_302, _303, _304));
    float _3719 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
    float _3730 = isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0));
    float _1788 = (isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0))) * 0.3183098733425140380859375;
    float _1790 = (isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0))) * 0.3183098733425140380859375;
    float _1797 = ((cbLight._m0[_1745].x * _1751) * _1790) + (((cbLight._m0[_1755].x * _1716) * _1765) * _1788);
    float _1798 = ((_1751 * cbLight._m0[_1745].y) * _1790) + (((cbLight._m0[_1755].y * _1718) * _1765) * _1788);
    float _1799 = ((_1751 * cbLight._m0[_1745].z) * _1790) + (((cbLight._m0[_1755].z * _1720) * _1765) * _1788);
    uvec4 _1803 = floatBitsToUint(cbLight._m0[_1727 + 12u]);
    bool _1805 = _1803.x == 0u;
    float _1907;
    float _1909;
    float _1911;
    if (_1805)
    {
        _1907 = _1797;
        _1909 = _1798;
        _1911 = _1799;
    }
    else
    {
        uint _1915 = _1727 + 6u;
        float _1931 = (dot(vec3(cbLight._m0[_1727 + 2u].xyz), vec3(_302, _303, _304)) * 0.5) + 0.5;
        float _1932 = _1931 * _1931;
        float _3741 = isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0));
        float _1933 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
        float _1934 = isnan(1.0) ? _1743 : (isnan(_1743) ? 1.0 : min(_1743, 1.0));
        _1907 = (((cbLight._m0[_1915].x * 0.3183098733425140380859375) * _1933) * _1934) + _1797;
        _1909 = (((cbLight._m0[_1915].y * 0.3183098733425140380859375) * _1933) * _1934) + _1798;
        _1911 = (((cbLight._m0[_1915].z * 0.3183098733425140380859375) * _1933) * _1934) + _1799;
    }
    bool _1914 = _1803.y == 0u;
    float _1969;
    float _1971;
    float _1973;
    if (_1914)
    {
        _1969 = _1907;
        _1971 = _1909;
        _1973 = _1911;
    }
    else
    {
        uint _2077 = _1727 + 7u;
        float _2093 = (dot(vec3(cbLight._m0[_1727 + 3u].xyz), vec3(_302, _303, _304)) * 0.5) + 0.5;
        float _2094 = _2093 * _2093;
        float _3757 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
        float _2095 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
        float _2096 = isnan(1.0) ? _1744 : (isnan(_1744) ? 1.0 : min(_1744, 1.0));
        _1969 = (((cbLight._m0[_2077].x * 0.3183098733425140380859375) * _2095) * _2096) + _1907;
        _1971 = (((cbLight._m0[_2077].y * 0.3183098733425140380859375) * _2095) * _2096) + _1909;
        _1973 = (((cbLight._m0[_2077].z * 0.3183098733425140380859375) * _2095) * _2096) + _1911;
    }
    uint _1975 = _1727 + 8u;
    float _1981 = cbLight._m0[_1727].x + _383;
    float _1982 = cbLight._m0[_1727].y + _384;
    float _1983 = cbLight._m0[_1727].z + _385;
    float _1987 = inversesqrt(dot(vec3(_1981, _1982, _1983), vec3(_1981, _1982, _1983)));
    float _1991 = dot(vec3(_302, _303, _304), vec3(cbLight._m0[_1727].xyz));
    float _3773 = isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0));
    float _1994 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
    float _3784 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _1995 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
    float _1996 = dot(vec3(cbLight._m0[_1727].xyz), vec3(_1981 * _1987, _1982 * _1987, _1983 * _1987));
    float _3795 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
    float _2007 = (exp2(log2(1.0 - (isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2013 = (0.5 / ((_1994 + 9.9999999392252902907785028219223e-09) + _1995)) * _1994;
    float _3806 = isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0));
    float _2015 = (isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0))) * 0.31831014156341552734375;
    uint _2029 = _1727 + 9u;
    float _2035 = cbLight._m0[_1769].x + _383;
    float _2036 = cbLight._m0[_1769].y + _384;
    float _2037 = cbLight._m0[_1769].z + _385;
    float _2041 = inversesqrt(dot(vec3(_2035, _2036, _2037), vec3(_2035, _2036, _2037)));
    float _2045 = dot(vec3(_302, _303, _304), vec3(cbLight._m0[_1769].xyz));
    float _3817 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
    float _2048 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
    float _2049 = dot(vec3(cbLight._m0[_1769].xyz), vec3(_2035 * _2041, _2036 * _2041, _2037 * _2041));
    float _3828 = isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0));
    float _2058 = (exp2(log2(1.0 - (isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2062 = (0.5 / ((_2048 + 9.9999999392252902907785028219223e-09) + _1995)) * _2048;
    float _3839 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0));
    float _2064 = (isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0))) * 0.31831014156341552734375;
    float _2074 = (((_2058 * cbLight._m0[_2029].x) * _2064) * _1751) + ((((cbLight._m0[_1975].x * _1716) * _2007) * _2015) * _1765);
    float _2075 = (((_2058 * cbLight._m0[_2029].y) * _2064) * _1751) + ((((cbLight._m0[_1975].y * _1718) * _2007) * _2015) * _1765);
    float _2076 = (((_2058 * cbLight._m0[_2029].z) * _2064) * _1751) + ((((cbLight._m0[_1975].z * _1720) * _2007) * _2015) * _1765);
    float _2132;
    float _2134;
    float _2136;
    if (_1805)
    {
        _2132 = _2074;
        _2134 = _2075;
        _2136 = _2076;
    }
    else
    {
        uint _2138 = _1727 + 10u;
        uint _2144 = _1727 + 2u;
        float _2150 = cbLight._m0[_2144].x + _383;
        float _2151 = cbLight._m0[_2144].y + _384;
        float _2152 = cbLight._m0[_2144].z + _385;
        float _2156 = inversesqrt(dot(vec3(_2150, _2151, _2152), vec3(_2150, _2151, _2152)));
        float _2160 = dot(vec3(_302, _303, _304), vec3(cbLight._m0[_2144].xyz));
        float _3850 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
        float _2163 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
        float _2164 = dot(vec3(cbLight._m0[_2144].xyz), vec3(_2150 * _2156, _2151 * _2156, _2152 * _2156));
        float _3861 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
        float _2173 = (exp2(log2(1.0 - (isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2177 = (0.5 / ((_2163 + 9.9999999392252902907785028219223e-09) + _1995)) * _2163;
        float _3872 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
        float _2179 = (isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0))) * 0.31831014156341552734375;
        float _2180 = isnan(1.0) ? _1743 : (isnan(_1743) ? 1.0 : min(_1743, 1.0));
        _2132 = (((_2173 * cbLight._m0[_2138].x) * _2179) * _2180) + _2074;
        _2134 = (((_2173 * cbLight._m0[_2138].y) * _2179) * _2180) + _2075;
        _2136 = (((_2173 * cbLight._m0[_2138].z) * _2179) * _2180) + _2076;
    }
    float _2211;
    float _2213;
    float _2215;
    if (_1914)
    {
        _2211 = _2132;
        _2213 = _2134;
        _2215 = _2136;
    }
    else
    {
        uint _2222 = _1727 + 11u;
        uint _2228 = _1727 + 3u;
        float _2234 = cbLight._m0[_2228].x + _383;
        float _2235 = cbLight._m0[_2228].y + _384;
        float _2236 = cbLight._m0[_2228].z + _385;
        float _2240 = inversesqrt(dot(vec3(_2234, _2235, _2236), vec3(_2234, _2235, _2236)));
        float _2244 = dot(vec3(_302, _303, _304), vec3(cbLight._m0[_2228].xyz));
        float _3888 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
        float _2247 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
        float _2248 = dot(vec3(cbLight._m0[_2228].xyz), vec3(_2234 * _2240, _2235 * _2240, _2236 * _2240));
        float _3899 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
        float _2257 = (exp2(log2(1.0 - (isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2261 = (0.5 / ((_2247 + 9.9999999392252902907785028219223e-09) + _1995)) * _2247;
        float _3910 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
        float _2263 = (isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0))) * 0.31831014156341552734375;
        float _2264 = isnan(1.0) ? _1744 : (isnan(_1744) ? 1.0 : min(_1744, 1.0));
        _2211 = (((_2257 * cbLight._m0[_2222].x) * _2263) * _2264) + _2132;
        _2213 = (((_2257 * cbLight._m0[_2222].y) * _2263) * _2264) + _2134;
        _2215 = (((_2257 * cbLight._m0[_2222].z) * _2263) * _2264) + _2136;
    }
    float _2329;
    float _2331;
    float _2333;
    float _2335;
    float _2337;
    float _2339;
    if (_1725.y == 0u)
    {
        uvec4 _2285 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2286 = _2285.x;
        uint _2297 = uint((float(_2285.y) * floor(float(uint(cbSceneParam._m0[85u].y * _392) / _2286))) + floor(float(uint(cbSceneParam._m0[85u].x * _391) / _2286)));
        float _2307 = (log2(_1503 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2308 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
        uint _2311 = uint(isnan(14.0) ? _2308 : (isnan(_2308) ? 14.0 : min(_2308, 14.0)));
        uvec4 _2316 = texelFetch(g_lightClusterGridBuffer, int(((_2311 << 2u) + (_2297 << 6u)) >> 2u));
        uint _2317 = _2316.x;
        uint _2318 = _2285.z;
        float _2427;
        float _2429;
        float _2431;
        float _2433;
        float _2435;
        float _2437;
        if (((((1u << ((_2318 >> 4u) & 15u)) + 4294967295u) & _2317) == 0u) || ((_2318 & 240u) == 0u))
        {
            _2427 = 0.0;
            _2429 = 0.0;
            _2431 = 0.0;
            _2433 = 0.0;
            _2435 = 0.0;
            _2437 = 0.0;
        }
        else
        {
            float _2428;
            float _2430;
            float _2432;
            float _2434;
            float _2436;
            float _2438;
            float _2578 = 0.0;
            float _2579 = 0.0;
            float _2580 = 0.0;
            float _2581 = 0.0;
            float _2582 = 0.0;
            float _2583 = 0.0;
            uint _2584 = 0u;
            uint _2593;
            bool _2594;
            for (;;)
            {
                _2593 = texelFetch(g_lightClassification, int((((_2311 << 5u) + (_2297 << 9u)) + (_2584 << 2u)) >> 2u)).x;
                _2594 = _2593 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2594)
                {
                    frontier_phi_68_pred = _2583;
                    frontier_phi_68_pred_1 = _2582;
                    frontier_phi_68_pred_2 = _2581;
                    frontier_phi_68_pred_3 = _2579;
                    frontier_phi_68_pred_4 = _2578;
                    frontier_phi_68_pred_5 = _2580;
                }
                else
                {
                    float _2702;
                    float _2703;
                    float _2704;
                    float _2705;
                    float _2706;
                    float _2707;
                    uint _2708;
                    _2702 = _2578;
                    _2703 = _2579;
                    _2704 = _2580;
                    _2705 = _2581;
                    _2706 = _2582;
                    _2707 = _2583;
                    _2708 = _2593;
                    float _2634;
                    float _2635;
                    float _2636;
                    float _2637;
                    float _2638;
                    float _2639;
                    for (;;)
                    {
                        uint _2712 = uint(findLSB(_2708)) + (_2584 << 5u);
                        uint _2709 = (_2708 + 4294967295u) & _2708;
                        uint _2714 = _2712 * 48u;
                        vec4 _2728 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2714)).x, texelFetch(g_PointLightRenderingBuffer, int(_2714 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2714 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2714 + 3u)).x));
                        uint _2734 = (_2712 * 48u) + 4u;
                        vec4 _2747 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2734)).x, texelFetch(g_PointLightRenderingBuffer, int(_2734 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2734 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2734 + 3u)).x));
                        uint _2753 = (_2712 * 48u) + 8u;
                        vec3 _2764 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2753)).x, texelFetch(g_PointLightRenderingBuffer, int(_2753 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2753 + 2u)).x));
                        float _2768 = _2728.x - _1501;
                        float _2769 = _2728.y - _1502;
                        float _2770 = _2728.z - _1503;
                        float _2771 = dot(vec3(_2768, _2769, _2770), vec3(_2768, _2769, _2770));
                        float _2774 = inversesqrt(_2771);
                        float _2783 = 1.0 - (_2771 * _2728.w);
                        float _3936 = isnan(0.0) ? _2783 : (isnan(_2783) ? 0.0 : max(_2783, 0.0));
                        float _2784 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
                        float _2785 = sqrt(_2771) * _2747.w;
                        float _2788 = 1.39999997615814208984375 / (_2785 + 1.39999997615814208984375);
                        float _2789 = _2788 * _2788;
                        float _2792 = ((1.0 - _2789) * dot(vec3(_413, _416, _419), vec3(_2774 * _2768, _2774 * _2769, _2774 * _2770))) + _2789;
                        float _2795 = _2785 * _2785;
                        float _2799 = ((isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0))) * _2784) / ((_2795 * 0.699999988079071044921875) + 1.0);
                        float _2803 = (-0.0) - _1501;
                        float _2804 = (-0.0) - _1502;
                        float _2805 = (-0.0) - _1503;
                        float _2809 = inversesqrt(dot(vec3(_2803, _2804, _2805), vec3(_2803, _2804, _2805)));
                        float _2813 = dot(vec3(_413, _416, _419), vec3(_2809 * _2803, _2809 * _2804, _2809 * _2805));
                        float _3952 = isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : max(_2813, 0.0));
                        float _3963 = isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0));
                        float _2817 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
                        float _2821 = (0.5 / (((isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0))) + 9.9999999392252902907785028219223e-09) + _2817)) * _2817;
                        float _3974 = isnan(0.0) ? _2821 : (isnan(_2821) ? 0.0 : max(_2821, 0.0));
                        float _2830 = (((isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0))) * 3.1415927410125732421875) / ((_2795 * 2.1991131305694580078125) + 3.141590118408203125)) * _2784;
                        _2637 = (_2799 * _2747.x) + _2705;
                        _2638 = (_2799 * _2747.y) + _2706;
                        _2639 = (_2799 * _2747.z) + _2707;
                        _2634 = (_2830 * _2764.x) + _2702;
                        _2635 = (_2830 * _2764.y) + _2703;
                        _2636 = (_2830 * _2764.z) + _2704;
                        if (_2709 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2702 = _2634;
                            _2703 = _2635;
                            _2704 = _2636;
                            _2705 = _2637;
                            _2706 = _2638;
                            _2707 = _2639;
                            _2708 = _2709;
                        }
                    }
                    frontier_phi_68_pred = _2639;
                    frontier_phi_68_pred_1 = _2638;
                    frontier_phi_68_pred_2 = _2637;
                    frontier_phi_68_pred_3 = _2635;
                    frontier_phi_68_pred_4 = _2634;
                    frontier_phi_68_pred_5 = _2636;
                }
                _2438 = frontier_phi_68_pred;
                _2436 = frontier_phi_68_pred_1;
                _2434 = frontier_phi_68_pred_2;
                _2430 = frontier_phi_68_pred_3;
                _2428 = frontier_phi_68_pred_4;
                _2432 = frontier_phi_68_pred_5;
                uint _2585 = _2584 + 1u;
                if (_2585 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2578 = _2428;
                    _2579 = _2430;
                    _2580 = _2432;
                    _2581 = _2434;
                    _2582 = _2436;
                    _2583 = _2438;
                    _2584 = _2585;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2427 = _2428;
            _2429 = _2430;
            _2431 = _2432;
            _2433 = _2434;
            _2435 = _2436;
            _2437 = _2438;
        }
        uvec4 _2441 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2442 = _2441.z;
        uint _2444 = (_2442 >> 8u) & 15u;
        float _2549;
        float _2551;
        float _2553;
        float _2555;
        float _2557;
        float _2559;
        if (((4294967295u << _2444) & _2317) == 0u)
        {
            _2549 = _2427;
            _2551 = _2429;
            _2553 = _2431;
            _2555 = _2433;
            _2557 = _2435;
            _2559 = _2437;
        }
        else
        {
            float _2574 = inversesqrt(dot(vec3(_1501, _1502, _1503), vec3(_1501, _1502, _1503)));
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2444 < ((_2442 >> 12u) & 15u))
            {
                float _2550;
                float _2552;
                float _2554;
                float _2556;
                float _2558;
                float _2560;
                float _2685 = _2427;
                float _2686 = _2429;
                float _2687 = _2431;
                float _2688 = _2433;
                float _2689 = _2435;
                float _2690 = _2437;
                uint _2691 = _2444;
                uint _2700;
                bool _2701;
                for (;;)
                {
                    _2700 = texelFetch(g_lightClassification, int((((_2311 << 5u) + (_2297 << 9u)) + (_2691 << 2u)) >> 2u)).x;
                    _2701 = _2700 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_2701)
                    {
                        frontier_phi_74_pred = _2687;
                        frontier_phi_74_pred_1 = _2686;
                        frontier_phi_74_pred_2 = _2685;
                        frontier_phi_74_pred_3 = _2690;
                        frontier_phi_74_pred_4 = _2689;
                        frontier_phi_74_pred_5 = _2688;
                    }
                    else
                    {
                        float _2835;
                        float _2836;
                        float _2837;
                        float _2838;
                        float _2839;
                        float _2840;
                        float _3087;
                        float _3088;
                        float _3089;
                        float _3090;
                        float _3091;
                        float _3092;
                        float _2848 = _2685;
                        float _2849 = _2686;
                        float _2850 = _2687;
                        float _2851 = _2688;
                        float _2852 = _2689;
                        float _2853 = _2690;
                        uint _2854 = _2700;
                        uint _2855;
                        vec4 _2880;
                        float _2881;
                        vec4 _2896;
                        vec3 _2908;
                        vec4 _2924;
                        vec4 _2940;
                        float _2987;
                        bool _2988;
                        for (;;)
                        {
                            uint _2865 = ((_2691 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2854));
                            _2855 = (_2854 + 4294967295u) & _2854;
                            uint _2867 = _2865 * 40u;
                            _2880 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2867)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2867 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2867 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2867 + 3u)).x));
                            _2881 = _2880.w;
                            uint _2883 = (_2865 * 40u) + 4u;
                            _2896 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2883)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2883 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2883 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2883 + 3u)).x));
                            uint _2898 = (_2865 * 40u) + 8u;
                            _2908 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2898)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2898 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2898 + 2u)).x));
                            uint _2911 = (_2865 * 40u) + 16u;
                            _2924 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2911)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 3u)).x));
                            uint _2927 = (_2865 * 40u) + 20u;
                            _2940 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2927)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2927 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2927 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2927 + 3u)).x));
                            uint _2943 = (_2865 * 40u) + 24u;
                            vec4 _2956 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2943)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2943 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2943 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2943 + 3u)).x));
                            uint _2962 = (_2865 * 40u) + 28u;
                            vec4 _2975 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2962)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2962 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2962 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2962 + 3u)).x));
                            _2987 = fma(_1503, _2975.z, fma(_1502, _2975.y, _2975.x * _1501)) + _2975.w;
                            _2988 = !((fma(_1503, _2956.z, fma(_1502, _2956.y, _2956.x * _1501)) + _2956.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_2988)
                            {
                                float _3015 = _2880.x - _1501;
                                float _3016 = _2880.y - _1502;
                                float _3017 = _2880.z - _1503;
                                float _3018 = dot(vec3(_3015, _3016, _3017), vec3(_3015, _3016, _3017));
                                float _3021 = inversesqrt(_3018);
                                float _3022 = _3021 * _3015;
                                float _3023 = _3021 * _3016;
                                float _3024 = _3021 * _3017;
                                float _3028 = 1.0 - (_3018 / (_2881 * _2881));
                                float _3985 = isnan(0.0) ? _3028 : (isnan(_3028) ? 0.0 : max(_3028, 0.0));
                                float _3029 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
                                float _3033 = sqrt(_3018) * _2896.w;
                                float _3035 = 1.39999997615814208984375 / (_3033 + 1.39999997615814208984375);
                                float _3036 = _3035 * _3035;
                                float _3037 = 1.0 - _3036;
                                float _3039 = (_3037 * dot(vec3(_3022, _3023, _3024), vec3(_413, _416, _419))) + _3036;
                                float _3042 = _3033 * _3033;
                                float _3046 = (fma(_1503, _2924.z, fma(_1502, _2924.y, _2924.x * _1501)) + _2924.w) / _2987;
                                float _3047 = (fma(_1503, _2940.z, fma(_1502, _2940.y, _2940.x * _1501)) + _2940.w) / _2987;
                                float _3051 = 1.0 - dot(vec2(_3046, _3047), vec2(_3046, _3047));
                                float _4001 = isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : max(_3051, 0.0));
                                float _3052 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
                                float _3053 = _3052 * (((isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : max(_3039, 0.0))) * _3029) / ((_3042 * 0.699999988079071044921875) + 1.0));
                                float _3063 = dot(vec3(_413, _416, _419), vec3((-0.0) - (_1501 * _2574), (-0.0) - (_1502 * _2574), (-0.0) - (_1503 * _2574)));
                                float _4012 = isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : max(_3063, 0.0));
                                float _3071 = (_3037 * dot(vec3(_413, _416, _419), vec3(_3022, _3023, _3024))) + _3036;
                                float _4023 = isnan(0.0) ? _3071 : (isnan(_3071) ? 0.0 : max(_3071, 0.0));
                                float _3072 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
                                float _3076 = (0.5 / (((isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0))) + 9.9999999392252902907785028219223e-09) + _3072)) * _3072;
                                float _4034 = isnan(0.0) ? _3076 : (isnan(_3076) ? 0.0 : max(_3076, 0.0));
                                float _3083 = (_3052 * _3029) * (((isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0))) * 3.1415927410125732421875) / ((_3042 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_80_pred = _3083 * _2908.z;
                                frontier_phi_80_pred_1 = _3083 * _2908.y;
                                frontier_phi_80_pred_2 = _3083 * _2908.x;
                                frontier_phi_80_pred_3 = _3053 * _2896.z;
                                frontier_phi_80_pred_4 = _3053 * _2896.y;
                                frontier_phi_80_pred_5 = _3053 * _2896.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3089 = frontier_phi_80_pred;
                            _3088 = frontier_phi_80_pred_1;
                            _3087 = frontier_phi_80_pred_2;
                            _3092 = frontier_phi_80_pred_3;
                            _3091 = frontier_phi_80_pred_4;
                            _3090 = frontier_phi_80_pred_5;
                            _2838 = _3090 + _2851;
                            _2839 = _3091 + _2852;
                            _2840 = _3092 + _2853;
                            _2835 = _3087 + _2848;
                            _2836 = _3088 + _2849;
                            _2837 = _3089 + _2850;
                            if (_2855 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2848 = _2835;
                                _2849 = _2836;
                                _2850 = _2837;
                                _2851 = _2838;
                                _2852 = _2839;
                                _2853 = _2840;
                                _2854 = _2855;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _2837;
                        frontier_phi_74_pred_1 = _2836;
                        frontier_phi_74_pred_2 = _2835;
                        frontier_phi_74_pred_3 = _2840;
                        frontier_phi_74_pred_4 = _2839;
                        frontier_phi_74_pred_5 = _2838;
                    }
                    _2554 = frontier_phi_74_pred;
                    _2552 = frontier_phi_74_pred_1;
                    _2550 = frontier_phi_74_pred_2;
                    _2560 = frontier_phi_74_pred_3;
                    _2558 = frontier_phi_74_pred_4;
                    _2556 = frontier_phi_74_pred_5;
                    uint _2692 = _2691 + 1u;
                    if (_2692 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2685 = _2550;
                        _2686 = _2552;
                        _2687 = _2554;
                        _2688 = _2556;
                        _2689 = _2558;
                        _2690 = _2560;
                        _2691 = _2692;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2558;
                frontier_phi_62_63_ladder_1 = _2556;
                frontier_phi_62_63_ladder_2 = _2554;
                frontier_phi_62_63_ladder_3 = _2560;
                frontier_phi_62_63_ladder_4 = _2552;
                frontier_phi_62_63_ladder_5 = _2550;
            }
            else
            {
                frontier_phi_62_63_ladder = _2435;
                frontier_phi_62_63_ladder_1 = _2433;
                frontier_phi_62_63_ladder_2 = _2431;
                frontier_phi_62_63_ladder_3 = _2437;
                frontier_phi_62_63_ladder_4 = _2429;
                frontier_phi_62_63_ladder_5 = _2427;
            }
            _2549 = frontier_phi_62_63_ladder_5;
            _2551 = frontier_phi_62_63_ladder_4;
            _2553 = frontier_phi_62_63_ladder_2;
            _2555 = frontier_phi_62_63_ladder_1;
            _2557 = frontier_phi_62_63_ladder;
            _2559 = frontier_phi_62_63_ladder_3;
        }
        float _2564 = isnan(1.0) ? _457 : (isnan(_457) ? 1.0 : min(_457, 1.0));
        _2329 = (_2564 * _2555) + _1969;
        _2331 = (_2564 * _2557) + _1971;
        _2333 = (_2564 * _2559) + _1973;
        _2335 = ((_2549 * 0.039999999105930328369140625) * _2564) + _2211;
        _2337 = ((_2551 * 0.039999999105930328369140625) * _2564) + _2213;
        _2339 = ((_2553 * 0.039999999105930328369140625) * _2564) + _2215;
    }
    else
    {
        _2329 = _1969;
        _2331 = _1971;
        _2333 = _1973;
        _2335 = _2211;
        _2337 = _2213;
        _2339 = _2215;
    }
    uint _2345 = _433 + uint(cbMatDynParam._m0[0u].w);
    float _2351 = (((_283.x * cbMtdParam._m0[11u].x) + (_252.x * cbMtdParam._m0[10u].x)) * cbMtdParam._m0[12u].x) * cbInstanceData._m0[_2345].x;
    float _2352 = (((_283.y * cbMtdParam._m0[11u].y) + (_252.y * cbMtdParam._m0[10u].y)) * cbMtdParam._m0[12u].x) * cbInstanceData._m0[_2345].y;
    float _2353 = (((_283.z * cbMtdParam._m0[11u].z) + (_252.z * cbMtdParam._m0[10u].z)) * cbMtdParam._m0[12u].x) * cbInstanceData._m0[_2345].z;
    float _4050 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _4061 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _4072 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _4083 = isnan(0.0) ? _306 : (isnan(_306) ? 0.0 : max(_306, 0.0));
    float _2371 = (((isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0))) * (_2329 + ((isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0))) * _457))) + ((_2335 + ((isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0))) * _1236)) * cbPerFrame._m0[3u].x)) + _2351;
    float _2373 = (_2352 + ((_2337 + ((isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0))) * _1236)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0))) * (_2331 + ((isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0))) * _457)));
    float _2375 = (_2353 + ((_2339 + ((isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0))) * _1236)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0))) * (_2333 + ((isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0))) * _457)));
    float _4109 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2388 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
    float _2393 = cbInstanceData._m0[_432 + 6u].w * (isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0)));
    float _2398 = _391 / cbSceneParam._m0[86u].x;
    float _2399 = _392 / cbSceneParam._m0[86u].y;
    vec4 _2413 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2398, _2399, (log2((isnan(cbSceneParam._m0[77u].w) ? _325 : (isnan(_325) ? cbSceneParam._m0[77u].w : min(_325, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2415 = _2413.x;
    float _2416 = _2413.y;
    float _2417 = _2413.z;
    float _2418 = _2413.w;
    float _2489;
    float _2491;
    float _2493;
    float _2495;
    if (_325 > cbSceneParam._m0[78u].w)
    {
        float _2452 = isnan(_325) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _325 : min(cbSceneParam._m0[80u].w, _325));
        float _2453 = _2452 / _325;
        float _2464 = _2453 * _376;
        float _2465 = _377 * _2453;
        float _2466 = (-0.0) - _2465;
        float _2467 = _2453 * _378;
        float _2469 = (cbSceneParam._m0[77u].w * _2466) / _2452;
        float _2470 = _2469 + cbSceneParam._m0[79u].w;
        float _2471 = cbSceneParam._m0[79u].w - _2465;
        float _2477 = sqrt(((_2464 * _2464) + (_2465 * _2465)) + (_2467 * _2467));
        float _2480 = (1.0 - (cbSceneParam._m0[77u].w / _2452)) * _2477;
        float _2485 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2487 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2647;
        if (abs((_2466 - _2469) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2647 = ((((_2470 > 0.0) ? exp2(_2485 * _2470) : (2.0 - exp2(_2487 * _2470))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2480;
        }
        else
        {
            float _2607 = 1.0 / cbSceneParam._m0[80u].x;
            float _2608 = isnan(_2471) ? _2470 : (isnan(_2470) ? _2471 : max(_2470, _2471));
            float _2609 = isnan(_2471) ? _2470 : (isnan(_2470) ? _2471 : min(_2470, _2471));
            float _2618 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : min(_2608, 0.0));
            float _2619 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : min(_2609, 0.0));
            _2647 = ((abs(_2477 / _2466) * cbSceneParam._m0[80u].y) * ((((_2618 - _2619) * 2.0) - ((exp2(_2485 * (isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0)))) - exp2(_2485 * (isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0))))) * _2607)) - ((exp2(_2487 * _2618) - exp2(_2487 * _2619)) * _2607))) + (_2480 * cbSceneParam._m0[80u].z);
        }
        vec4 _2649 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2398, _2399, 1.0), 0.0);
        float _2658 = exp2((_2647 * (-1.44269502162933349609375)) * (1.0 - _2649.w));
        float _2659 = log2(_2658);
        float _2675 = log2(_2418);
        _2489 = (exp2(_2675 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2659 * cbSceneParam._m0[78u].x)) * _2649.x) / cbSceneParam._m0[78u].x)) + _2415;
        _2491 = (exp2(_2675 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2659 * cbSceneParam._m0[78u].y)) * _2649.y) / cbSceneParam._m0[78u].y)) + _2416;
        _2493 = (exp2(_2675 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2659 * cbSceneParam._m0[78u].z)) * _2649.z) / cbSceneParam._m0[78u].z)) + _2417;
        _2495 = _2658 * _2418;
    }
    else
    {
        _2489 = _2415;
        _2491 = _2416;
        _2493 = _2417;
        _2495 = _2418;
    }
    float _2507 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2508 = _2507 == 3.0;
    float _2510 = log2(_2495);
    float _2514 = exp2(_2510 * cbSceneParam._m0[78u].x);
    float _2515 = exp2(_2510 * cbSceneParam._m0[78u].y);
    float _2516 = exp2(_2510 * cbSceneParam._m0[78u].z);
    float _2517 = _2514 * (isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0)));
    float _2518 = _2515 * (isnan(0.0) ? _2373 : (isnan(_2373) ? 0.0 : max(_2373, 0.0)));
    float _2519 = _2516 * (isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0)));
    float _2528 = (_2507 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2528 * (_2508 ? _2517 : (_2517 + (cbSceneParam._m0[72u].w * _2489)));
    SV_Target.y = _2528 * (_2508 ? _2518 : (_2518 + (cbSceneParam._m0[72u].w * _2491)));
    SV_Target.z = _2528 * (_2508 ? _2519 : (_2519 + (cbSceneParam._m0[72u].w * _2493)));
    SV_Target.w = _2393;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2351) * _2388) * _2514) * _2528;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2352) * _2388) * _2515) * _2528;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2353) * _2388) * _2516) * _2528;
    SV_Target_1.w = _2393;
}


