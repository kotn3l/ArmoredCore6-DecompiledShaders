#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M1_Vatex_Alpha_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M1_Vatex_Alpha_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _857;
float _3229;
float _3230;
float _3231;
float _3232;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _190 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _197 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _198 = _197 * NORMAL.x;
    float _199 = _197 * NORMAL.y;
    float _200 = _197 * NORMAL.z;
    float _204 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _212;
    float _213;
    float _214;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _212 = (-0.0) - _198;
        _213 = (-0.0) - _199;
        _214 = (-0.0) - _200;
    }
    else
    {
        _212 = _198;
        _213 = _199;
        _214 = _200;
    }
    vec4 _234 = texture(sampler2D(M_AMSN_M1_Vatex_Alpha_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _240 = _234.w;
    float _241 = _234.x * cbMtdParam._m0[9u].x;
    float _242 = _234.y * cbMtdParam._m0[9u].y;
    float _243 = _234.z * cbMtdParam._m0[9u].z;
    float _244 = _240 * TEXCOORD_1.z;
    vec4 _256 = texture(sampler2D(M_AMSN_M1_Vatex_Alpha_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _260 = _256.z;
    float _264 = (_256.x * 2.0) + (-1.0);
    float _266 = (_256.y * 2.0) + (-1.0);
    float _267 = dot(vec2(_264, _266), vec2(_264, _266));
    float _3241 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _273 = sqrt(1.0 - (isnan(1.0) ? _3241 : (isnan(_3241) ? 1.0 : min(_3241, 1.0))));
    float _276 = fma(_273, _212, fma(_266, _204 * TANGENT.x, (_190 * _182) * _264));
    float _279 = fma(_273, _213, fma(_266, _204 * TANGENT.y, (_190 * _183) * _264));
    float _282 = fma(_273, _214, fma(_266, _204 * TANGENT.z, (_190 * _184) * _264));
    float _286 = inversesqrt(dot(vec3(_276, _279, _282), vec3(_276, _279, _282)));
    float _287 = _286 * _276;
    float _288 = _286 * _279;
    float _289 = _286 * _282;
    float _3252 = isnan(0.0) ? _244 : (isnan(_244) ? 0.0 : max(_244, 0.0));
    float _290 = isnan(1.0) ? _3252 : (isnan(_3252) ? 1.0 : min(_3252, 1.0));
    float _3263 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _291 = isnan(1.0) ? _3263 : (isnan(_3263) ? 1.0 : min(_3263, 1.0));
    float _3274 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _3285 = isnan(0.0) ? _242 : (isnan(_242) ? 0.0 : max(_242, 0.0));
    float _3296 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _310 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _352 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _362 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _352);
    float _363 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _352);
    float _364 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _352);
    float _368 = inversesqrt(dot(vec3(_362, _363, _364), vec3(_362, _363, _364)));
    float _369 = _362 * _368;
    float _370 = _363 * _368;
    float _371 = _364 * _368;
    vec4 _376 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _378 = _376.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _536 = sqrt(((_362 * _362) + (_363 * _363)) + (_364 * _364));
        float _542 = (cbMatDynParam._m0[5u].x * _536) + cbMatDynParam._m0[5u].y;
        float _3307 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
        float _543 = isnan(1.0) ? _3307 : (isnan(_3307) ? 1.0 : min(_3307, 1.0));
        float _547 = (cbMatDynParam._m0[5u].z * _536) + cbMatDynParam._m0[5u].w;
        float _3318 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3318 : (isnan(_3318) ? 1.0 : min(_3318, 1.0))) - _543)) + _543) < ((_378 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _390 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _391 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _411 = fma(_289, cbSceneParam._m0[5u].z, fma(_288, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _287));
    float _414 = fma(_289, cbSceneParam._m0[6u].z, fma(_288, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _287));
    float _417 = fma(_289, cbSceneParam._m0[7u].z, fma(_288, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _287));
    uint _430 = uint(roundEven(NORMAL.w)) * 13u;
    uint _432 = _430 + 9u;
    uint _433 = _432 + uint(cbMatDynParam._m0[0u].w);
    float _439 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3274 : (isnan(_3274) ? 1.0 : min(_3274, 1.0)))) * cbInstanceData._m0[_433].x;
    float _440 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3285 : (isnan(_3285) ? 1.0 : min(_3285, 1.0)))) * cbInstanceData._m0[_433].y;
    float _441 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3296 : (isnan(_3296) ? 1.0 : min(_3296, 1.0)))) * cbInstanceData._m0[_433].z;
    float _3329 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _442 = isnan(1.0) ? _3329 : (isnan(_3329) ? 1.0 : min(_3329, 1.0));
    float _3340 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _443 = isnan(1.0) ? _3340 : (isnan(_3340) ? 1.0 : min(_3340, 1.0));
    float _3351 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _444 = isnan(1.0) ? _3351 : (isnan(_3351) ? 1.0 : min(_3351, 1.0));
    vec4 _453 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _390, cbSceneParam._m0[86u].y * _391));
    float _456 = _453.x * TEXCOORD_1.w;
    float _457 = dot(vec3(_287, _288, _289), vec3(_369, _370, _371));
    float _460 = _457 * 2.0;
    float _464 = (_460 * _287) - _369;
    float _465 = (_460 * _288) - _370;
    float _466 = (_460 * _289) - _371;
    float _470 = abs(dot(vec3(_369, _370, _371), vec3(_287, _288, _289)));
    float _3362 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _472 = sqrt(_291);
    float _485 = exp2((_472 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3362 : (isnan(_3362) ? 1.0 : min(_3362, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_472 * 3.0));
    float _517 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _521 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _525 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _856;
    float _858;
    float _859;
    float _860;
    float _861;
    float _862;
    float _863;
    float _864;
    float _865;
    float _866;
    float _867;
    float _868;
    float _869;
    float _870;
    float _871;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _581 = fma(_525, cbModelParam._m0[26u].z, fma(_521, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _517));
        float _585 = fma(_525, cbModelParam._m0[27u].z, fma(_521, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _517));
        float _589 = fma(_525, cbModelParam._m0[28u].z, fma(_521, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _517));
        float _614 = _517 + _287;
        float _615 = _521 + _288;
        float _616 = _525 + _289;
        float _626 = fma(_616, cbModelParam._m0[26u].z, fma(_615, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _614)) - _581;
        float _627 = fma(_616, cbModelParam._m0[27u].z, fma(_615, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _614)) - _585;
        float _628 = fma(_616, cbModelParam._m0[28u].z, fma(_615, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _614)) - _589;
        float _632 = inversesqrt(dot(vec3(_626, _627, _628), vec3(_626, _627, _628)));
        float _645 = ((_632 * _626) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_581 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _646 = ((_632 * _627) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_585 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _647 = ((_632 * _628) / cbModelParam._m0[34u].z) + ((((((_589 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _650 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_645, _646, _647), 0.0);
        vec4 _657 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_645, _646, _647), 0.0);
        vec4 _664 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_645, _646, _647), 0.0);
        vec4 _671 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_645, _646, _647), 0.0);
        float _684 = exp2((_650.w + (-0.5)) * 20.0) * 2.0;
        float _685 = _684 * (_650.x + (-0.5));
        float _686 = _684 * (_650.y + (-0.5));
        float _687 = _684 * (_650.z + (-0.5));
        float _694 = exp2((_657.w + (-0.5)) * 20.0) * 2.0;
        float _695 = _694 * (_657.x + (-0.5));
        float _696 = _694 * (_657.y + (-0.5));
        float _697 = _694 * (_657.z + (-0.5));
        float _704 = exp2((_664.w + (-0.5)) * 20.0) * 2.0;
        float _705 = _704 * (_664.x + (-0.5));
        float _706 = _704 * (_664.y + (-0.5));
        float _707 = _704 * (_664.z + (-0.5));
        float _714 = exp2((_671.w + (-0.5)) * 20.0) * 2.0;
        float _715 = _714 * (_671.x + (-0.5));
        float _716 = _714 * (_671.y + (-0.5));
        float _717 = _714 * (_671.z + (-0.5));
        float _718 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
        float _719 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
        float _720 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
        float _721 = _685 * 0.5;
        float _722 = _695 * 0.5;
        float _723 = _705 * 0.5;
        float _724 = dot(vec3(_721, _722, _723), vec3(_721, _722, _723));
        float _729 = (_724 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_724);
        float _738 = (dot(vec3(_287, _288, _289), vec3(_729 * _721, _729 * _722, _729 * _723)) + 1.0) * 0.5;
        float _3388 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
        float _748 = sqrt(((_722 * _722) + (_721 * _721)) + (_723 * _723)) / (_718 + 9.9999997473787516355514526367188e-06);
        float _3399 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
        float _749 = isnan(1.0) ? _3399 : (isnan(_3399) ? 1.0 : min(_3399, 1.0));
        float _750 = _749 * 2.0;
        float _754 = (1.0 - _749) / (_749 + 1.0);
        float _3410 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
        float _755 = isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0));
        float _764 = ((((1.0 - _755) * (_750 + 2.0)) * exp2(log2(isnan(1.0) ? _3388 : (isnan(_3388) ? 1.0 : min(_3388, 1.0))) * (_750 + 1.0))) + _755) * _718;
        float _765 = _686 * 0.5;
        float _766 = _696 * 0.5;
        float _767 = _706 * 0.5;
        float _768 = dot(vec3(_765, _766, _767), vec3(_765, _766, _767));
        float _773 = (_768 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_768);
        float _781 = (dot(vec3(_287, _288, _289), vec3(_773 * _765, _773 * _766, _773 * _767)) + 1.0) * 0.5;
        float _3421 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
        float _790 = sqrt(((_766 * _766) + (_765 * _765)) + (_767 * _767)) / (_719 + 9.9999997473787516355514526367188e-06);
        float _3432 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
        float _791 = isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0));
        float _792 = _791 * 2.0;
        float _796 = (1.0 - _791) / (_791 + 1.0);
        float _3443 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
        float _797 = isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0));
        float _806 = ((((1.0 - _797) * (_792 + 2.0)) * exp2(log2(isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0))) * (_792 + 1.0))) + _797) * _719;
        float _807 = _687 * 0.5;
        float _808 = _697 * 0.5;
        float _809 = _707 * 0.5;
        float _810 = dot(vec3(_807, _808, _809), vec3(_807, _808, _809));
        float _815 = (_810 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_810);
        float _823 = (dot(vec3(_287, _288, _289), vec3(_815 * _807, _815 * _808, _815 * _809)) + 1.0) * 0.5;
        float _3454 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
        float _832 = sqrt(((_808 * _808) + (_807 * _807)) + (_809 * _809)) / (_720 + 9.9999997473787516355514526367188e-06);
        float _3465 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
        float _833 = isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0));
        float _834 = _833 * 2.0;
        float _838 = (1.0 - _833) / (_833 + 1.0);
        float _3476 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
        float _839 = isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0));
        float _848 = ((((1.0 - _839) * (_834 + 2.0)) * exp2(log2(isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0))) * (_834 + 1.0))) + _839) * _720;
        _856 = _687;
        _858 = _686;
        _859 = _685;
        _860 = _697;
        _861 = _696;
        _862 = _695;
        _863 = _707;
        _864 = _706;
        _865 = _705;
        _866 = _720;
        _867 = _719;
        _868 = _718;
        _869 = cbModelParam._m0[36u].z * (isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0)));
        _870 = cbModelParam._m0[36u].z * (isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0)));
        _871 = cbModelParam._m0[36u].z * (isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0)));
    }
    else
    {
        _856 = _857;
        _858 = _857;
        _859 = _857;
        _860 = _857;
        _861 = _857;
        _862 = _857;
        _863 = _857;
        _864 = _857;
        _865 = _857;
        _866 = _857;
        _867 = _857;
        _868 = _857;
        _869 = 0.0;
        _870 = 0.0;
        _871 = 0.0;
    }
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _900 = fma(_525, cbModelParam._m0[30u].z, fma(_521, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _517));
        float _904 = fma(_525, cbModelParam._m0[31u].z, fma(_521, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _517));
        float _908 = fma(_525, cbModelParam._m0[32u].z, fma(_521, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _517));
        float _931 = _517 + _287;
        float _932 = _521 + _288;
        float _933 = _525 + _289;
        float _943 = fma(_933, cbModelParam._m0[30u].z, fma(_932, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _931)) - _900;
        float _944 = fma(_933, cbModelParam._m0[31u].z, fma(_932, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _931)) - _904;
        float _945 = fma(_933, cbModelParam._m0[32u].z, fma(_932, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _931)) - _908;
        float _949 = inversesqrt(dot(vec3(_943, _944, _945), vec3(_943, _944, _945)));
        float _962 = ((_949 * _943) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_900 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _963 = ((_949 * _944) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_904 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _964 = ((_949 * _945) / cbModelParam._m0[35u].z) + ((((((_908 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _966 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_962, _963, _964), 0.0);
        vec4 _973 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_962, _963, _964), 0.0);
        vec4 _980 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_962, _963, _964), 0.0);
        vec4 _987 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_962, _963, _964), 0.0);
        float _999 = exp2((_966.w + (-0.5)) * 20.0) * 2.0;
        float _1000 = _999 * (_966.x + (-0.5));
        float _1001 = _999 * (_966.y + (-0.5));
        float _1002 = _999 * (_966.z + (-0.5));
        float _1009 = exp2((_973.w + (-0.5)) * 20.0) * 2.0;
        float _1010 = _1009 * (_973.x + (-0.5));
        float _1011 = _1009 * (_973.y + (-0.5));
        float _1012 = _1009 * (_973.z + (-0.5));
        float _1019 = exp2((_980.w + (-0.5)) * 20.0) * 2.0;
        float _1020 = _1019 * (_980.x + (-0.5));
        float _1021 = _1019 * (_980.y + (-0.5));
        float _1022 = _1019 * (_980.z + (-0.5));
        float _1029 = exp2((_987.w + (-0.5)) * 20.0) * 2.0;
        float _1030 = _1029 * (_987.x + (-0.5));
        float _1031 = _1029 * (_987.y + (-0.5));
        float _1032 = _1029 * (_987.z + (-0.5));
        float _1033 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1034 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1035 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1036 = _1000 * 0.5;
        float _1037 = _1010 * 0.5;
        float _1038 = _1020 * 0.5;
        float _1039 = dot(vec3(_1036, _1037, _1038), vec3(_1036, _1037, _1038));
        float _1044 = (_1039 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1039);
        float _1052 = (dot(vec3(_287, _288, _289), vec3(_1044 * _1036, _1044 * _1037, _1044 * _1038)) + 1.0) * 0.5;
        float _3517 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1061 = sqrt(((_1037 * _1037) + (_1036 * _1036)) + (_1038 * _1038)) / (_1033 + 9.9999997473787516355514526367188e-06);
        float _3528 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1062 = isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0));
        float _1063 = _1062 * 2.0;
        float _1067 = (1.0 - _1062) / (_1062 + 1.0);
        float _3539 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1068 = isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0));
        float _1077 = ((((1.0 - _1068) * (_1063 + 2.0)) * exp2(log2(isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0))) * (_1063 + 1.0))) + _1068) * _1033;
        float _1078 = _1001 * 0.5;
        float _1079 = _1011 * 0.5;
        float _1080 = _1021 * 0.5;
        float _1081 = dot(vec3(_1078, _1079, _1080), vec3(_1078, _1079, _1080));
        float _1086 = (_1081 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1081);
        float _1094 = (dot(vec3(_287, _288, _289), vec3(_1086 * _1078, _1086 * _1079, _1086 * _1080)) + 1.0) * 0.5;
        float _3550 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1103 = sqrt(((_1079 * _1079) + (_1078 * _1078)) + (_1080 * _1080)) / (_1034 + 9.9999997473787516355514526367188e-06);
        float _3561 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1104 = isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0));
        float _1105 = _1104 * 2.0;
        float _1109 = (1.0 - _1104) / (_1104 + 1.0);
        float _3572 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1110 = isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0));
        float _1119 = ((((1.0 - _1110) * (_1105 + 2.0)) * exp2(log2(isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0))) * (_1105 + 1.0))) + _1110) * _1034;
        float _1120 = _1002 * 0.5;
        float _1121 = _1012 * 0.5;
        float _1122 = _1022 * 0.5;
        float _1123 = dot(vec3(_1120, _1121, _1122), vec3(_1120, _1121, _1122));
        float _1128 = (_1123 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1123);
        float _1136 = (dot(vec3(_287, _288, _289), vec3(_1128 * _1120, _1128 * _1121, _1128 * _1122)) + 1.0) * 0.5;
        float _3583 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1145 = sqrt(((_1121 * _1121) + (_1120 * _1120)) + (_1122 * _1122)) / (_1035 + 9.9999997473787516355514526367188e-06);
        float _3594 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1146 = isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0));
        float _1147 = _1146 * 2.0;
        float _1151 = (1.0 - _1146) / (_1146 + 1.0);
        float _3605 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1152 = isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0));
        float _1161 = ((((1.0 - _1152) * (_1147 + 2.0)) * exp2(log2(isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0))) * (_1147 + 1.0))) + _1152) * _1035;
        _1169 = _1002;
        _1170 = _1001;
        _1171 = _1000;
        _1172 = _1012;
        _1173 = _1011;
        _1174 = _1010;
        _1175 = _1022;
        _1176 = _1021;
        _1177 = _1020;
        _1178 = _1035;
        _1179 = _1034;
        _1180 = _1033;
        _1181 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0)));
        _1182 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0)));
        _1183 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0)));
    }
    else
    {
        _1169 = _857;
        _1170 = _857;
        _1171 = _857;
        _1172 = _857;
        _1173 = _857;
        _1174 = _857;
        _1175 = _857;
        _1176 = _857;
        _1177 = _857;
        _1178 = _857;
        _1179 = _857;
        _1180 = _857;
        _1181 = 0.0;
        _1182 = 0.0;
        _1183 = 0.0;
    }
    float _1193 = (cbModelParam._m0[1u].x * (_1181 - _869)) + _869;
    float _1194 = (cbModelParam._m0[1u].x * (_1182 - _870)) + _870;
    float _1195 = (cbModelParam._m0[1u].x * (_1183 - _871)) + _871;
    float _1216 = fma(_1195, cbSceneParam._m0[89u].z, fma(_1194, cbSceneParam._m0[89u].y, _1193 * cbSceneParam._m0[89u].x));
    float _1219 = fma(_1195, cbSceneParam._m0[90u].z, fma(_1194, cbSceneParam._m0[90u].y, _1193 * cbSceneParam._m0[90u].x));
    float _1222 = fma(_1195, cbSceneParam._m0[91u].z, fma(_1194, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1193));
    float _1237 = _464 * 0.5;
    float _1238 = _465 * 0.5;
    float _1239 = _466 * 0.5;
    float _1240 = dot(vec4(_1237, _1238, _1239, 1.0), vec4(_1171, _1174, _1177, _1180));
    float _1243 = dot(vec4(_1237, _1238, _1239, 1.0), vec4(_1170, _1173, _1176, _1179));
    float _1246 = dot(vec4(_1237, _1238, _1239, 1.0), vec4(_1169, _1172, _1175, _1178));
    float _1280;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1253 = dot(vec4(_1237, _1238, _1239, 1.0), vec4(_856, _860, _863, _866));
        float _1257 = dot(vec4(_1237, _1238, _1239, 1.0), vec4(_858, _861, _864, _867));
        float _1261 = dot(vec4(_1237, _1238, _1239, 1.0), vec4(_859, _862, _865, _868));
        float _1268 = dot(vec4(cbModelParam._m0[39u]), vec4(_1237, _1238, _1239, 1.0));
        _1280 = dot(vec3(isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0)), isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0)), isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1268) ? 0.0 : (isnan(0.0) ? _1268 : max(0.0, _1268))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1280 = 1.0;
    }
    float _1291;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1282 = dot(vec4(cbModelParam._m0[40u]), vec4(_1237, _1238, _1239, 1.0));
        _1291 = dot(vec3(isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0)), isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0)), isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1282) ? 0.0 : (isnan(0.0) ? _1282 : max(0.0, _1282))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1291 = 1.0;
    }
    float _1295 = (_1291 * cbModelParam._m0[1u].x) + (_1280 * (1.0 - cbModelParam._m0[1u].x));
    float _1305 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _291);
    float _1306 = isnan(_1305) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1305 : min(cbModelParam._m0[25u].z, _1305));
    float _1388;
    float _1390;
    float _1392;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1355 = fma(_525, cbModelParam._m0[13u].z, fma(_521, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _517)) + cbModelParam._m0[13u].w;
        float _1359 = fma(_525, cbModelParam._m0[14u].z, fma(_521, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _517)) + cbModelParam._m0[14u].w;
        float _1363 = fma(_525, cbModelParam._m0[15u].z, fma(_521, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _517)) + cbModelParam._m0[15u].w;
        float _1366 = fma(_466, cbModelParam._m0[13u].z, fma(_465, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _464));
        float _1369 = fma(_466, cbModelParam._m0[14u].z, fma(_465, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _464));
        float _1372 = fma(_466, cbModelParam._m0[15u].z, fma(_465, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _464));
        float _1400;
        if (_1366 > 0.0)
        {
            _1400 = abs((1.0 - _1355) / _1366);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1366 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1355 + 1.0) / _1366);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1400 = frontier_phi_19_17_ladder;
        }
        float _1606;
        if (_1369 > 0.0)
        {
            _1606 = abs((1.0 - _1359) / _1369);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1369 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1359 + 1.0) / _1369);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1606 = frontier_phi_28_24_ladder;
        }
        float _1849;
        if (_1372 > 0.0)
        {
            _1849 = abs((1.0 - _1363) / _1372);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1372 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1363 + 1.0) / _1372);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1849 = frontier_phi_40_35_ladder;
        }
        float _1851 = isnan(_1606) ? _1400 : (isnan(_1400) ? _1606 : min(_1400, _1606));
        float _1852 = isnan(_1849) ? _1851 : (isnan(_1851) ? _1849 : min(_1851, _1849));
        float _1856 = (_1852 * _1366) + _1355;
        float _1857 = (_1852 * _1369) + _1359;
        float _1858 = (_1852 * _1372) + _1363;
        float _1859 = _1852 * 9.9999997473787516355514526367188e-05;
        float _1861 = (-1.0) - _1859;
        float _1863 = _1859 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1858 > _1863) || ((_1858 < _1861) || ((_1857 > _1863) || ((_1857 < _1861) || ((_1856 < _1861) || (_1856 > _1863))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1982 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1858, cbModelParam._m0[9u].z, fma(_1857, cbModelParam._m0[9u].y, _1856 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1858, cbModelParam._m0[10u].z, fma(_1857, cbModelParam._m0[10u].y, _1856 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1858, cbModelParam._m0[11u].z, fma(_1857, cbModelParam._m0[11u].y, _1856 * cbModelParam._m0[11u].x))), _1306);
            frontier_phi_18_40_ladder = _1982.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _1982.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _1982.x * cbModelParam._m0[1u].y;
        }
        _1388 = frontier_phi_18_40_ladder_2;
        _1390 = frontier_phi_18_40_ladder_1;
        _1392 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1376 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_464, _465, _466), _1306);
        _1388 = _1376.x * cbModelParam._m0[1u].y;
        _1390 = _1376.y * cbModelParam._m0[1u].y;
        _1392 = _1376.z * cbModelParam._m0[1u].y;
    }
    float _1396 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _291);
    float _1397 = isnan(_1396) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1396 : min(cbModelParam._m0[25u].w, _1396));
    float _1490;
    float _1492;
    float _1494;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1454 = fma(_525, cbModelParam._m0[21u].z, fma(_521, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _517)) + cbModelParam._m0[21u].w;
        float _1458 = fma(_525, cbModelParam._m0[22u].z, fma(_521, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _517)) + cbModelParam._m0[22u].w;
        float _1462 = fma(_525, cbModelParam._m0[23u].z, fma(_521, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _517)) + cbModelParam._m0[23u].w;
        float _1465 = fma(_466, cbModelParam._m0[21u].z, fma(_465, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _464));
        float _1468 = fma(_466, cbModelParam._m0[22u].z, fma(_465, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _464));
        float _1471 = fma(_466, cbModelParam._m0[23u].z, fma(_465, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _464));
        float _1611;
        if (_1465 > 0.0)
        {
            _1611 = abs((1.0 - _1454) / _1465);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1465 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1454 + 1.0) / _1465);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1611 = frontier_phi_30_26_ladder;
        }
        float _1876;
        if (_1468 > 0.0)
        {
            _1876 = abs((1.0 - _1458) / _1468);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1468 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1458 + 1.0) / _1468);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1876 = frontier_phi_42_37_ladder;
        }
        float _2081;
        if (_1471 > 0.0)
        {
            _2081 = abs((1.0 - _1462) / _1471);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1471 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1462 + 1.0) / _1471);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2081 = frontier_phi_51_48_ladder;
        }
        float _2083 = isnan(_1876) ? _1611 : (isnan(_1611) ? _1876 : min(_1611, _1876));
        float _2084 = isnan(_2081) ? _2083 : (isnan(_2083) ? _2081 : min(_2083, _2081));
        float _2088 = (_2084 * _1465) + _1454;
        float _2089 = (_2084 * _1468) + _1458;
        float _2090 = (_2084 * _1471) + _1462;
        float _2091 = _2084 * 9.9999997473787516355514526367188e-05;
        float _2092 = (-1.0) - _2091;
        float _2094 = _2091 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2090 > _2094) || ((_2090 < _2092) || ((_2089 > _2094) || ((_2089 < _2092) || ((_2088 < _2092) || (_2088 > _2094))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2290 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2090, cbModelParam._m0[17u].z, fma(_2089, cbModelParam._m0[17u].y, _2088 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2090, cbModelParam._m0[18u].z, fma(_2089, cbModelParam._m0[18u].y, _2088 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2090, cbModelParam._m0[19u].z, fma(_2089, cbModelParam._m0[19u].y, _2088 * cbModelParam._m0[19u].x))), _1397);
            frontier_phi_27_51_ladder = _2290.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2290.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2290.x * cbModelParam._m0[1u].z;
        }
        _1490 = frontier_phi_27_51_ladder_2;
        _1492 = frontier_phi_27_51_ladder_1;
        _1494 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1474 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_464, _465, _466), _1397);
        _1490 = _1474.x * cbModelParam._m0[1u].z;
        _1492 = _1474.y * cbModelParam._m0[1u].z;
        _1494 = _1474.z * cbModelParam._m0[1u].z;
    }
    float _1506 = ((((1.0 - _485) * ((_472 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_485 * _472)) * _456;
    float _1507 = _1506 * ((cbModelParam._m0[1u].w * (_1490 - _1388)) + _1388);
    float _1508 = _1506 * ((cbModelParam._m0[1u].w * (_1492 - _1390)) + _1390);
    float _1509 = _1506 * ((cbModelParam._m0[1u].w * (_1494 - _1392)) + _1392);
    float _1512 = fma(_1509, cbSceneParam._m0[89u].z, fma(_1508, cbSceneParam._m0[89u].y, _1507 * cbSceneParam._m0[89u].x));
    float _1515 = fma(_1509, cbSceneParam._m0[90u].z, fma(_1508, cbSceneParam._m0[90u].y, _1507 * cbSceneParam._m0[90u].x));
    float _1518 = fma(_1509, cbSceneParam._m0[91u].z, fma(_1508, cbSceneParam._m0[91u].y, _1507 * cbSceneParam._m0[91u].x));
    uvec4 _1528 = floatBitsToUint(cbInstanceData._m0[_430 + 5u]);
    uint _1530 = _1528.x * 14u;
    uint _1531 = _1530 + 13u;
    float _1538 = _456 + (-1.0);
    float _1543 = (cbLight._m0[_1531].x * _1538) + 1.0;
    float _1544 = (cbLight._m0[_1531].y * _1538) + 1.0;
    float _1545 = (cbLight._m0[_1531].z * _1538) + 1.0;
    float _1546 = (cbLight._m0[_1531].w * _1538) + 1.0;
    uint _1547 = _1530 + 5u;
    float _1553 = isnan(1.0) ? _1544 : (isnan(_1544) ? 1.0 : min(_1544, 1.0));
    uint _1557 = _1530 + 4u;
    float _1564 = isnan(1.0) ? _1543 : (isnan(_1543) ? 1.0 : min(_1543, 1.0));
    uint _1568 = _1530 | 1u;
    float _1579 = dot(vec3(cbLight._m0[_1530].xyz), vec3(_287, _288, _289));
    float _1582 = dot(vec3(cbLight._m0[_1568].xyz), vec3(_287, _288, _289));
    float _3741 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
    float _3752 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
    float _1587 = (isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0))) * 0.3183098733425140380859375;
    float _1589 = (isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0))) * 0.3183098733425140380859375;
    float _1596 = ((cbLight._m0[_1547].x * _1553) * _1589) + ((cbLight._m0[_1557].x * _1564) * _1587);
    float _1597 = ((_1553 * cbLight._m0[_1547].y) * _1589) + ((_1564 * cbLight._m0[_1557].y) * _1587);
    float _1598 = ((_1553 * cbLight._m0[_1547].z) * _1589) + ((_1564 * cbLight._m0[_1557].z) * _1587);
    uvec4 _1603 = floatBitsToUint(cbLight._m0[_1530 + 12u]);
    bool _1605 = _1603.x == 0u;
    float _1616;
    float _1618;
    float _1620;
    if (_1605)
    {
        _1616 = _1596;
        _1618 = _1597;
        _1620 = _1598;
    }
    else
    {
        uint _1624 = _1530 + 6u;
        float _1640 = (dot(vec3(cbLight._m0[_1530 + 2u].xyz), vec3(_287, _288, _289)) * 0.5) + 0.5;
        float _1641 = _1640 * _1640;
        float _3763 = isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0));
        float _1642 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
        float _1643 = isnan(1.0) ? _1545 : (isnan(_1545) ? 1.0 : min(_1545, 1.0));
        _1616 = (((cbLight._m0[_1624].x * 0.3183098733425140380859375) * _1642) * _1643) + _1596;
        _1618 = (((cbLight._m0[_1624].y * 0.3183098733425140380859375) * _1642) * _1643) + _1597;
        _1620 = (((cbLight._m0[_1624].z * 0.3183098733425140380859375) * _1642) * _1643) + _1598;
    }
    bool _1623 = _1603.y == 0u;
    float _1661;
    float _1663;
    float _1665;
    if (_1623)
    {
        _1661 = _1616;
        _1663 = _1618;
        _1665 = _1620;
    }
    else
    {
        uint _1820 = _1530 + 7u;
        float _1836 = (dot(vec3(cbLight._m0[_1530 + 3u].xyz), vec3(_287, _288, _289)) * 0.5) + 0.5;
        float _1837 = _1836 * _1836;
        float _3779 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
        float _1838 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
        float _1839 = isnan(1.0) ? _1546 : (isnan(_1546) ? 1.0 : min(_1546, 1.0));
        _1661 = (((cbLight._m0[_1820].x * 0.3183098733425140380859375) * _1838) * _1839) + _1616;
        _1663 = (((cbLight._m0[_1820].y * 0.3183098733425140380859375) * _1838) * _1839) + _1618;
        _1665 = (((cbLight._m0[_1820].z * 0.3183098733425140380859375) * _1838) * _1839) + _1620;
    }
    uint _1668 = _1530 + 8u;
    float _1681 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1530].w)) * _291) * 0.949999988079071044921875);
    float _1682 = _1681 * _1681;
    float _1683 = cbLight._m0[_1530].x + _369;
    float _1684 = cbLight._m0[_1530].y + _370;
    float _1685 = cbLight._m0[_1530].z + _371;
    float _1689 = inversesqrt(dot(vec3(_1683, _1684, _1685), vec3(_1683, _1684, _1685)));
    float _1690 = _1689 * _1683;
    float _1691 = _1689 * _1684;
    float _1692 = _1689 * _1685;
    float _1693 = dot(vec3(_287, _288, _289), vec3(cbLight._m0[_1530].xyz));
    float _3795 = isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0));
    float _1696 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
    float _3806 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _1697 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
    float _1698 = dot(vec3(_287, _288, _289), vec3(_1690, _1691, _1692));
    float _3817 = isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0));
    float _1701 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
    float _1702 = dot(vec3(cbLight._m0[_1530].xyz), vec3(_1690, _1691, _1692));
    float _3828 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
    float _1706 = _1682 * _1682;
    float _1710 = ((_1701 * _1701) * (_1706 + (-1.0))) + 1.0;
    float _1721 = (exp2(log2(1.0 - (isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1722 = 1.0 - _1682;
    float _1733 = (0.5 / (((_1697 * ((_1696 * _1722) + _1682)) + 9.9999999392252902907785028219223e-09) + (((_1697 * _1722) + _1682) * _1696))) * _1696;
    float _3839 = isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0));
    float _1735 = (isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0))) * (_1706 / ((_1710 * _1710) * 3.141590118408203125));
    uint _1746 = _1530 + 9u;
    float _1757 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1568].w)) * _291) * 0.949999988079071044921875);
    float _1758 = _1757 * _1757;
    float _1759 = cbLight._m0[_1568].x + _369;
    float _1760 = cbLight._m0[_1568].y + _370;
    float _1761 = cbLight._m0[_1568].z + _371;
    float _1765 = inversesqrt(dot(vec3(_1759, _1760, _1761), vec3(_1759, _1760, _1761)));
    float _1766 = _1765 * _1759;
    float _1767 = _1765 * _1760;
    float _1768 = _1765 * _1761;
    float _1769 = dot(vec3(_287, _288, _289), vec3(cbLight._m0[_1568].xyz));
    float _3850 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
    float _1772 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
    float _1773 = dot(vec3(_287, _288, _289), vec3(_1766, _1767, _1768));
    float _3861 = isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0));
    float _1776 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
    float _1777 = dot(vec3(cbLight._m0[_1568].xyz), vec3(_1766, _1767, _1768));
    float _3872 = isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0));
    float _1781 = _1758 * _1758;
    float _1785 = ((_1776 * _1776) * (_1781 + (-1.0))) + 1.0;
    float _1794 = (exp2(log2(1.0 - (isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1795 = 1.0 - _1758;
    float _1805 = (0.5 / (((_1697 * ((_1772 * _1795) + _1758)) + 9.9999999392252902907785028219223e-09) + (((_1697 * _1795) + _1758) * _1772))) * _1772;
    float _3883 = isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0));
    float _1807 = (isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0))) * (_1781 / ((_1785 * _1785) * 3.141590118408203125));
    float _1817 = (((_1794 * cbLight._m0[_1746].x) * _1807) * _1553) + (((_1721 * cbLight._m0[_1668].x) * _1735) * _1564);
    float _1818 = (((_1794 * cbLight._m0[_1746].y) * _1807) * _1553) + (((_1721 * cbLight._m0[_1668].y) * _1735) * _1564);
    float _1819 = (((_1794 * cbLight._m0[_1746].z) * _1807) * _1553) + (((_1721 * cbLight._m0[_1668].z) * _1735) * _1564);
    float _1881;
    float _1883;
    float _1885;
    if (_1605)
    {
        _1881 = _1817;
        _1883 = _1818;
        _1885 = _1819;
    }
    else
    {
        uint _1887 = _1530 + 2u;
        uint _1891 = _1530 + 10u;
        float _1905 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1887].w)) * _291) * 0.949999988079071044921875);
        float _1906 = _1905 * _1905;
        float _1907 = cbLight._m0[_1887].x + _369;
        float _1908 = cbLight._m0[_1887].y + _370;
        float _1909 = cbLight._m0[_1887].z + _371;
        float _1913 = inversesqrt(dot(vec3(_1907, _1908, _1909), vec3(_1907, _1908, _1909)));
        float _1914 = _1913 * _1907;
        float _1915 = _1913 * _1908;
        float _1916 = _1913 * _1909;
        float _1917 = dot(vec3(_287, _288, _289), vec3(cbLight._m0[_1887].xyz));
        float _3894 = isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0));
        float _1920 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
        float _1921 = dot(vec3(_287, _288, _289), vec3(_1914, _1915, _1916));
        float _3905 = isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0));
        float _1924 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _1925 = dot(vec3(cbLight._m0[_1887].xyz), vec3(_1914, _1915, _1916));
        float _3916 = isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0));
        float _1929 = _1906 * _1906;
        float _1933 = ((_1924 * _1924) * (_1929 + (-1.0))) + 1.0;
        float _1942 = (exp2(log2(1.0 - (isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1943 = 1.0 - _1906;
        float _1953 = (0.5 / (((_1697 * ((_1920 * _1943) + _1906)) + 9.9999999392252902907785028219223e-09) + (((_1697 * _1943) + _1906) * _1920))) * _1920;
        float _3927 = isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0));
        float _1955 = (isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0))) * (_1929 / ((_1933 * _1933) * 3.141590118408203125));
        float _1956 = isnan(1.0) ? _1545 : (isnan(_1545) ? 1.0 : min(_1545, 1.0));
        _1881 = (((_1942 * cbLight._m0[_1891].x) * _1955) * _1956) + _1817;
        _1883 = (((_1942 * cbLight._m0[_1891].y) * _1955) * _1956) + _1818;
        _1885 = (((_1942 * cbLight._m0[_1891].z) * _1955) * _1956) + _1819;
    }
    float _1991;
    float _1993;
    float _1995;
    if (_1623)
    {
        _1991 = _1881;
        _1993 = _1883;
        _1995 = _1885;
    }
    else
    {
        uint _2002 = _1530 + 3u;
        uint _2006 = _1530 + 11u;
        float _2020 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2002].w)) * _291) * 0.949999988079071044921875);
        float _2021 = _2020 * _2020;
        float _2022 = cbLight._m0[_2002].x + _369;
        float _2023 = cbLight._m0[_2002].y + _370;
        float _2024 = cbLight._m0[_2002].z + _371;
        float _2028 = inversesqrt(dot(vec3(_2022, _2023, _2024), vec3(_2022, _2023, _2024)));
        float _2029 = _2028 * _2022;
        float _2030 = _2028 * _2023;
        float _2031 = _2028 * _2024;
        float _2032 = dot(vec3(_287, _288, _289), vec3(cbLight._m0[_2002].xyz));
        float _3943 = isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0));
        float _2035 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
        float _2036 = dot(vec3(_287, _288, _289), vec3(_2029, _2030, _2031));
        float _3954 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
        float _2039 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
        float _2040 = dot(vec3(cbLight._m0[_2002].xyz), vec3(_2029, _2030, _2031));
        float _3965 = isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0));
        float _2044 = _2021 * _2021;
        float _2048 = ((_2039 * _2039) * (_2044 + (-1.0))) + 1.0;
        float _2057 = (exp2(log2(1.0 - (isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2058 = 1.0 - _2021;
        float _2068 = (0.5 / (((_1697 * ((_2035 * _2058) + _2021)) + 9.9999999392252902907785028219223e-09) + (((_1697 * _2058) + _2021) * _2035))) * _2035;
        float _3976 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
        float _2070 = (isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0))) * (_2044 / ((_2048 * _2048) * 3.141590118408203125));
        float _2071 = isnan(1.0) ? _1546 : (isnan(_1546) ? 1.0 : min(_1546, 1.0));
        _1991 = (((_2057 * cbLight._m0[_2006].x) * _2070) * _2071) + _1881;
        _1993 = (((_2057 * cbLight._m0[_2006].y) * _2070) * _2071) + _1883;
        _1995 = (((_2057 * cbLight._m0[_2006].z) * _2070) * _2071) + _1885;
    }
    float _2205;
    float _2207;
    float _2209;
    float _2211;
    float _2213;
    float _2215;
    if (_1528.y == 0u)
    {
        float _2146 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2147 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2146;
        float _2148 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2146;
        float _2149 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2146;
        uvec4 _2161 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2162 = _2161.x;
        uint _2173 = uint((float(_2161.y) * floor(float(uint(cbSceneParam._m0[85u].y * _391) / _2162))) + floor(float(uint(cbSceneParam._m0[85u].x * _390) / _2162)));
        float _2183 = (log2(_2149 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2184 = isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0));
        uint _2187 = uint(isnan(14.0) ? _2184 : (isnan(_2184) ? 14.0 : min(_2184, 14.0)));
        uvec4 _2192 = texelFetch(g_lightClusterGridBuffer, int(((_2187 << 2u) + (_2173 << 6u)) >> 2u));
        uint _2193 = _2192.x;
        uint _2194 = _2161.z;
        float _2295;
        float _2297;
        float _2299;
        float _2301;
        float _2303;
        float _2305;
        if (((((1u << ((_2194 >> 4u) & 15u)) + 4294967295u) & _2193) == 0u) || ((_2194 & 240u) == 0u))
        {
            _2295 = 0.0;
            _2297 = 0.0;
            _2299 = 0.0;
            _2301 = 0.0;
            _2303 = 0.0;
            _2305 = 0.0;
        }
        else
        {
            float _2296;
            float _2298;
            float _2300;
            float _2302;
            float _2304;
            float _2306;
            float _2447 = 0.0;
            float _2448 = 0.0;
            float _2449 = 0.0;
            float _2450 = 0.0;
            float _2451 = 0.0;
            float _2452 = 0.0;
            uint _2453 = 0u;
            uint _2462;
            bool _2463;
            for (;;)
            {
                _2462 = texelFetch(g_lightClassification, int((((_2187 << 5u) + (_2173 << 9u)) + (_2453 << 2u)) >> 2u)).x;
                _2463 = _2462 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2463)
                {
                    frontier_phi_68_pred = _2449;
                    frontier_phi_68_pred_1 = _2452;
                    frontier_phi_68_pred_2 = _2451;
                    frontier_phi_68_pred_3 = _2450;
                    frontier_phi_68_pred_4 = _2448;
                    frontier_phi_68_pred_5 = _2447;
                }
                else
                {
                    float _2592;
                    float _2593;
                    float _2594;
                    float _2595;
                    float _2596;
                    float _2597;
                    uint _2598;
                    _2592 = _2447;
                    _2593 = _2448;
                    _2594 = _2449;
                    _2595 = _2450;
                    _2596 = _2451;
                    _2597 = _2452;
                    _2598 = _2462;
                    float _2519;
                    float _2520;
                    float _2521;
                    float _2522;
                    float _2523;
                    float _2524;
                    for (;;)
                    {
                        uint _2602 = uint(findLSB(_2598)) + (_2453 << 5u);
                        uint _2599 = (_2598 + 4294967295u) & _2598;
                        uint _2604 = _2602 * 48u;
                        vec4 _2618 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2604)).x, texelFetch(g_PointLightRenderingBuffer, int(_2604 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2604 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2604 + 3u)).x));
                        uint _2624 = (_2602 * 48u) + 4u;
                        vec4 _2637 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2624)).x, texelFetch(g_PointLightRenderingBuffer, int(_2624 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2624 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2624 + 3u)).x));
                        uint _2643 = (_2602 * 48u) + 8u;
                        vec3 _2654 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2643)).x, texelFetch(g_PointLightRenderingBuffer, int(_2643 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2643 + 2u)).x));
                        float _2658 = _2618.x - _2147;
                        float _2659 = _2618.y - _2148;
                        float _2660 = _2618.z - _2149;
                        float _2661 = dot(vec3(_2658, _2659, _2660), vec3(_2658, _2659, _2660));
                        float _2664 = inversesqrt(_2661);
                        float _2665 = _2664 * _2658;
                        float _2666 = _2664 * _2659;
                        float _2667 = _2664 * _2660;
                        float _2668 = dot(vec3(_411, _414, _417), vec3(_2665, _2666, _2667));
                        float _2673 = 1.0 - (_2661 * _2618.w);
                        float _4002 = isnan(0.0) ? _2673 : (isnan(_2673) ? 0.0 : max(_2673, 0.0));
                        float _2674 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
                        float _2675 = sqrt(_2661) * _2637.w;
                        float _2678 = 1.39999997615814208984375 / (_2675 + 1.39999997615814208984375);
                        float _2679 = _2678 * _2678;
                        float _2682 = ((1.0 - _2679) * _2668) + _2679;
                        float _2685 = _2675 * _2675;
                        float _2689 = ((isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : max(_2682, 0.0))) * _2674) / ((_2685 * 0.699999988079071044921875) + 1.0);
                        float _2693 = (-0.0) - _2147;
                        float _2694 = (-0.0) - _2148;
                        float _2695 = (-0.0) - _2149;
                        float _2699 = inversesqrt(dot(vec3(_2693, _2694, _2695), vec3(_2693, _2694, _2695)));
                        float _2700 = _2699 * _2693;
                        float _2701 = _2699 * _2694;
                        float _2702 = _2699 * _2695;
                        float _2710 = exp2(log2(1.0 / ((_2685 * 3.5) + 5.0)) * 0.25);
                        float _2711 = 1.0 - _472;
                        float _2718 = sqrt(1.0 - ((1.0 - (_2711 * _2711)) * (1.0 - (_2710 * _2710))));
                        float _2719 = _2718 * _2718;
                        float _2720 = _2719 * _2719;
                        float _2721 = _2700 + _2665;
                        float _2722 = _2701 + _2666;
                        float _2723 = _2702 + _2667;
                        float _2727 = inversesqrt(dot(vec3(_2721, _2722, _2723), vec3(_2721, _2722, _2723)));
                        float _2731 = dot(vec3(_411, _414, _417), vec3(_2700, _2701, _2702));
                        float _4018 = isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : max(_2731, 0.0));
                        float _2734 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
                        float _2735 = dot(vec3(_411, _414, _417), vec3(_2727 * _2721, _2727 * _2722, _2727 * _2723));
                        float _4029 = isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : max(_2735, 0.0));
                        float _2738 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
                        float _2742 = ((_2738 * _2738) * (_2720 + (-1.0))) + 1.0;
                        float _2743 = _2678 * _2719;
                        float _2744 = _2743 * _2743;
                        float _2747 = ((1.0 - _2744) * _2668) + _2744;
                        float _4040 = isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : max(_2747, 0.0));
                        float _2748 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
                        float _2749 = 1.0 - _2719;
                        float _2759 = (0.5 / (((_2748 * ((_2734 * _2749) + _2719)) + 9.9999999392252902907785028219223e-09) + (((_2748 * _2749) + _2719) * _2734))) * _2748;
                        float _4051 = isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0));
                        float _2770 = (((_2720 * 3.1415927410125732421875) * (isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0)))) / ((_2742 * _2742) * ((_2685 * 2.1991131305694580078125) + 3.141590118408203125))) * _2674;
                        _2522 = (_2689 * _2637.x) + _2595;
                        _2523 = (_2689 * _2637.y) + _2596;
                        _2524 = (_2689 * _2637.z) + _2597;
                        _2519 = (_2770 * _2654.x) + _2592;
                        _2520 = (_2770 * _2654.y) + _2593;
                        _2521 = (_2770 * _2654.z) + _2594;
                        if (_2599 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2592 = _2519;
                            _2593 = _2520;
                            _2594 = _2521;
                            _2595 = _2522;
                            _2596 = _2523;
                            _2597 = _2524;
                            _2598 = _2599;
                        }
                    }
                    frontier_phi_68_pred = _2521;
                    frontier_phi_68_pred_1 = _2524;
                    frontier_phi_68_pred_2 = _2523;
                    frontier_phi_68_pred_3 = _2522;
                    frontier_phi_68_pred_4 = _2520;
                    frontier_phi_68_pred_5 = _2519;
                }
                _2300 = frontier_phi_68_pred;
                _2306 = frontier_phi_68_pred_1;
                _2304 = frontier_phi_68_pred_2;
                _2302 = frontier_phi_68_pred_3;
                _2298 = frontier_phi_68_pred_4;
                _2296 = frontier_phi_68_pred_5;
                uint _2454 = _2453 + 1u;
                if (_2454 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2447 = _2296;
                    _2448 = _2298;
                    _2449 = _2300;
                    _2450 = _2302;
                    _2451 = _2304;
                    _2452 = _2306;
                    _2453 = _2454;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2295 = _2296;
            _2297 = _2298;
            _2299 = _2300;
            _2301 = _2302;
            _2303 = _2304;
            _2305 = _2306;
        }
        uvec4 _2309 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2310 = _2309.z;
        uint _2312 = (_2310 >> 8u) & 15u;
        float _2415;
        float _2417;
        float _2419;
        float _2421;
        float _2423;
        float _2425;
        if (((4294967295u << _2312) & _2193) == 0u)
        {
            _2415 = _2295;
            _2417 = _2297;
            _2419 = _2299;
            _2421 = _2301;
            _2423 = _2303;
            _2425 = _2305;
        }
        else
        {
            float _2440 = inversesqrt(dot(vec3(_2147, _2148, _2149), vec3(_2147, _2148, _2149)));
            float _2441 = _2440 * _2147;
            float _2442 = _2440 * _2148;
            float _2443 = _2440 * _2149;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2312 < ((_2310 >> 12u) & 15u))
            {
                float _2416;
                float _2418;
                float _2420;
                float _2422;
                float _2424;
                float _2426;
                float _2575 = _2295;
                float _2576 = _2297;
                float _2577 = _2299;
                float _2578 = _2301;
                float _2579 = _2303;
                float _2580 = _2305;
                uint _2581 = _2312;
                uint _2590;
                bool _2591;
                for (;;)
                {
                    _2590 = texelFetch(g_lightClassification, int((((_2187 << 5u) + (_2173 << 9u)) + (_2581 << 2u)) >> 2u)).x;
                    _2591 = _2590 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2591)
                    {
                        frontier_phi_79_pred = _2580;
                        frontier_phi_79_pred_1 = _2579;
                        frontier_phi_79_pred_2 = _2578;
                        frontier_phi_79_pred_3 = _2577;
                        frontier_phi_79_pred_4 = _2576;
                        frontier_phi_79_pred_5 = _2575;
                    }
                    else
                    {
                        float _2784;
                        float _2785;
                        float _2786;
                        float _2787;
                        float _2788;
                        float _2789;
                        float _3080;
                        float _3081;
                        float _3082;
                        float _3083;
                        float _3084;
                        float _3085;
                        float _2797 = _2575;
                        float _2798 = _2576;
                        float _2799 = _2577;
                        float _2800 = _2578;
                        float _2801 = _2579;
                        float _2802 = _2580;
                        uint _2803 = _2590;
                        uint _2804;
                        vec4 _2829;
                        float _2830;
                        vec4 _2845;
                        vec3 _2857;
                        vec4 _2873;
                        vec4 _2889;
                        float _2936;
                        bool _2937;
                        for (;;)
                        {
                            uint _2814 = ((_2581 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2803));
                            _2804 = (_2803 + 4294967295u) & _2803;
                            uint _2816 = _2814 * 40u;
                            _2829 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2816)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2816 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2816 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2816 + 3u)).x));
                            _2830 = _2829.w;
                            uint _2832 = (_2814 * 40u) + 4u;
                            _2845 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2832)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2832 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2832 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2832 + 3u)).x));
                            uint _2847 = (_2814 * 40u) + 8u;
                            _2857 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2847)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2847 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2847 + 2u)).x));
                            uint _2860 = (_2814 * 40u) + 16u;
                            _2873 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2860)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2860 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2860 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2860 + 3u)).x));
                            uint _2876 = (_2814 * 40u) + 20u;
                            _2889 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2876)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2876 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2876 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2876 + 3u)).x));
                            uint _2892 = (_2814 * 40u) + 24u;
                            vec4 _2905 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2892)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2892 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2892 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2892 + 3u)).x));
                            uint _2911 = (_2814 * 40u) + 28u;
                            vec4 _2924 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2911)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 3u)).x));
                            _2936 = fma(_2149, _2924.z, fma(_2148, _2924.y, _2924.x * _2147)) + _2924.w;
                            _2937 = !((fma(_2149, _2905.z, fma(_2148, _2905.y, _2905.x * _2147)) + _2905.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_2937)
                            {
                                float _2964 = _2829.x - _2147;
                                float _2965 = _2829.y - _2148;
                                float _2966 = _2829.z - _2149;
                                float _2967 = dot(vec3(_2964, _2965, _2966), vec3(_2964, _2965, _2966));
                                float _2970 = inversesqrt(_2967);
                                float _2971 = _2970 * _2964;
                                float _2972 = _2970 * _2965;
                                float _2973 = _2970 * _2966;
                                float _2977 = 1.0 - (_2967 / (_2830 * _2830));
                                float _4062 = isnan(0.0) ? _2977 : (isnan(_2977) ? 0.0 : max(_2977, 0.0));
                                float _2978 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
                                float _2982 = sqrt(_2967) * _2845.w;
                                float _2984 = 1.39999997615814208984375 / (_2982 + 1.39999997615814208984375);
                                float _2985 = _2984 * _2984;
                                float _2988 = ((1.0 - _2985) * dot(vec3(_2971, _2972, _2973), vec3(_411, _414, _417))) + _2985;
                                float _2991 = _2982 * _2982;
                                float _2995 = (fma(_2149, _2873.z, fma(_2148, _2873.y, _2873.x * _2147)) + _2873.w) / _2936;
                                float _2996 = (fma(_2149, _2889.z, fma(_2148, _2889.y, _2889.x * _2147)) + _2889.w) / _2936;
                                float _3000 = 1.0 - dot(vec2(_2995, _2996), vec2(_2995, _2996));
                                float _4078 = isnan(0.0) ? _3000 : (isnan(_3000) ? 0.0 : max(_3000, 0.0));
                                float _3001 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
                                float _3002 = _3001 * (((isnan(0.0) ? _2988 : (isnan(_2988) ? 0.0 : max(_2988, 0.0))) * _2978) / ((_2991 * 0.699999988079071044921875) + 1.0));
                                float _3014 = exp2(log2(1.0 / ((_2991 * 3.5) + 5.0)) * 0.25);
                                float _3015 = 1.0 - _472;
                                float _3022 = sqrt(1.0 - ((1.0 - (_3015 * _3015)) * (1.0 - (_3014 * _3014))));
                                float _3023 = _3022 * _3022;
                                float _3024 = _3023 * _3023;
                                float _3025 = _2971 - _2441;
                                float _3026 = _2972 - _2442;
                                float _3027 = _2973 - _2443;
                                float _3031 = inversesqrt(dot(vec3(_3025, _3026, _3027), vec3(_3025, _3026, _3027)));
                                float _3035 = dot(vec3(_411, _414, _417), vec3((-0.0) - _2441, (-0.0) - _2442, (-0.0) - _2443));
                                float _4089 = isnan(0.0) ? _3035 : (isnan(_3035) ? 0.0 : max(_3035, 0.0));
                                float _3038 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
                                float _3039 = dot(vec3(_411, _414, _417), vec3(_3031 * _3025, _3031 * _3026, _3031 * _3027));
                                float _4100 = isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : max(_3039, 0.0));
                                float _3042 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
                                float _3046 = ((_3042 * _3042) * (_3024 + (-1.0))) + 1.0;
                                float _3047 = _2984 * _3023;
                                float _3048 = _3047 * _3047;
                                float _3054 = ((1.0 - _3048) * dot(vec3(_411, _414, _417), vec3(_2971, _2972, _2973))) + _3048;
                                float _4111 = isnan(0.0) ? _3054 : (isnan(_3054) ? 0.0 : max(_3054, 0.0));
                                float _3055 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
                                float _3056 = 1.0 - _3023;
                                float _3066 = (0.5 / (((_3055 * ((_3038 * _3056) + _3023)) + 9.9999999392252902907785028219223e-09) + (((_3055 * _3056) + _3023) * _3038))) * _3055;
                                float _4122 = isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : max(_3066, 0.0));
                                float _3076 = (_3001 * _2978) * (((_3024 * 3.1415927410125732421875) * (isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0)))) / ((_3046 * _3046) * ((_2991 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3002 * _2845.z;
                                frontier_phi_85_pred_1 = _3002 * _2845.y;
                                frontier_phi_85_pred_2 = _3002 * _2845.x;
                                frontier_phi_85_pred_3 = _3076 * _2857.z;
                                frontier_phi_85_pred_4 = _3076 * _2857.y;
                                frontier_phi_85_pred_5 = _3076 * _2857.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3085 = frontier_phi_85_pred;
                            _3084 = frontier_phi_85_pred_1;
                            _3083 = frontier_phi_85_pred_2;
                            _3082 = frontier_phi_85_pred_3;
                            _3081 = frontier_phi_85_pred_4;
                            _3080 = frontier_phi_85_pred_5;
                            _2787 = _3083 + _2800;
                            _2788 = _3084 + _2801;
                            _2789 = _3085 + _2802;
                            _2784 = _3080 + _2797;
                            _2785 = _3081 + _2798;
                            _2786 = _3082 + _2799;
                            if (_2804 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2797 = _2784;
                                _2798 = _2785;
                                _2799 = _2786;
                                _2800 = _2787;
                                _2801 = _2788;
                                _2802 = _2789;
                                _2803 = _2804;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2789;
                        frontier_phi_79_pred_1 = _2788;
                        frontier_phi_79_pred_2 = _2787;
                        frontier_phi_79_pred_3 = _2786;
                        frontier_phi_79_pred_4 = _2785;
                        frontier_phi_79_pred_5 = _2784;
                    }
                    _2426 = frontier_phi_79_pred;
                    _2424 = frontier_phi_79_pred_1;
                    _2422 = frontier_phi_79_pred_2;
                    _2420 = frontier_phi_79_pred_3;
                    _2418 = frontier_phi_79_pred_4;
                    _2416 = frontier_phi_79_pred_5;
                    uint _2582 = _2581 + 1u;
                    if (_2582 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2575 = _2416;
                        _2576 = _2418;
                        _2577 = _2420;
                        _2578 = _2422;
                        _2579 = _2424;
                        _2580 = _2426;
                        _2581 = _2582;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2422;
                frontier_phi_60_61_ladder_1 = _2426;
                frontier_phi_60_61_ladder_2 = _2424;
                frontier_phi_60_61_ladder_3 = _2420;
                frontier_phi_60_61_ladder_4 = _2418;
                frontier_phi_60_61_ladder_5 = _2416;
            }
            else
            {
                frontier_phi_60_61_ladder = _2301;
                frontier_phi_60_61_ladder_1 = _2305;
                frontier_phi_60_61_ladder_2 = _2303;
                frontier_phi_60_61_ladder_3 = _2299;
                frontier_phi_60_61_ladder_4 = _2297;
                frontier_phi_60_61_ladder_5 = _2295;
            }
            _2415 = frontier_phi_60_61_ladder_5;
            _2417 = frontier_phi_60_61_ladder_4;
            _2419 = frontier_phi_60_61_ladder_3;
            _2421 = frontier_phi_60_61_ladder;
            _2423 = frontier_phi_60_61_ladder_2;
            _2425 = frontier_phi_60_61_ladder_1;
        }
        float _2430 = isnan(1.0) ? _456 : (isnan(_456) ? 1.0 : min(_456, 1.0));
        _2205 = (_2430 * _2421) + _1661;
        _2207 = (_2430 * _2423) + _1663;
        _2209 = (_2430 * _2425) + _1665;
        _2211 = ((_2415 * 0.039999999105930328369140625) * _2430) + _1991;
        _2213 = ((_2417 * 0.039999999105930328369140625) * _2430) + _1993;
        _2215 = ((_2419 * 0.039999999105930328369140625) * _2430) + _1995;
    }
    else
    {
        _2205 = _1661;
        _2207 = _1663;
        _2209 = _1665;
        _2211 = _1991;
        _2213 = _1993;
        _2215 = _1995;
    }
    float _4138 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _4149 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _4160 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _4171 = isnan(0.0) ? _290 : (isnan(_290) ? 0.0 : max(_290, 0.0));
    float _2233 = ((isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0))) * (_2205 + ((isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0))) * _456))) + ((_2211 + ((isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0))) * _1295)) * cbPerFrame._m0[3u].x);
    float _2234 = ((isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0))) * (_2207 + ((isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0))) * _456))) + ((_2213 + ((isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0))) * _1295)) * cbPerFrame._m0[3u].x);
    float _2235 = ((isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0))) * (_2209 + ((isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0))) * _456))) + ((_2215 + ((isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0))) * _1295)) * cbPerFrame._m0[3u].x);
    float _2240 = cbInstanceData._m0[_430 + 6u].w * (isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0)));
    float _2245 = _390 / cbSceneParam._m0[86u].x;
    float _2246 = _391 / cbSceneParam._m0[86u].y;
    vec4 _2260 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2245, _2246, (log2((isnan(cbSceneParam._m0[77u].w) ? _310 : (isnan(_310) ? cbSceneParam._m0[77u].w : min(_310, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2262 = _2260.x;
    float _2263 = _2260.y;
    float _2264 = _2260.z;
    float _2265 = _2260.w;
    float _2357;
    float _2359;
    float _2361;
    float _2363;
    if (_310 > cbSceneParam._m0[78u].w)
    {
        float _2320 = isnan(_310) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _310 : min(cbSceneParam._m0[80u].w, _310));
        float _2321 = _2320 / _310;
        float _2332 = _2321 * _362;
        float _2333 = _363 * _2321;
        float _2334 = (-0.0) - _2333;
        float _2335 = _2321 * _364;
        float _2337 = (cbSceneParam._m0[77u].w * _2334) / _2320;
        float _2338 = _2337 + cbSceneParam._m0[79u].w;
        float _2339 = cbSceneParam._m0[79u].w - _2333;
        float _2345 = sqrt(((_2332 * _2332) + (_2333 * _2333)) + (_2335 * _2335));
        float _2348 = (1.0 - (cbSceneParam._m0[77u].w / _2320)) * _2345;
        float _2353 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2355 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2532;
        if (abs((_2334 - _2337) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2532 = ((((_2338 > 0.0) ? exp2(_2353 * _2338) : (2.0 - exp2(_2355 * _2338))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2348;
        }
        else
        {
            float _2476 = 1.0 / cbSceneParam._m0[80u].x;
            float _2477 = isnan(_2339) ? _2338 : (isnan(_2338) ? _2339 : max(_2338, _2339));
            float _2478 = isnan(_2339) ? _2338 : (isnan(_2338) ? _2339 : min(_2338, _2339));
            float _2487 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : min(_2477, 0.0));
            float _2488 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : min(_2478, 0.0));
            _2532 = ((abs(_2345 / _2334) * cbSceneParam._m0[80u].y) * ((((_2487 - _2488) * 2.0) - ((exp2(_2353 * (isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0)))) - exp2(_2353 * (isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0))))) * _2476)) - ((exp2(_2355 * _2487) - exp2(_2355 * _2488)) * _2476))) + (_2348 * cbSceneParam._m0[80u].z);
        }
        vec4 _2534 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2245, _2246, 1.0), 0.0);
        float _2543 = exp2((_2532 * (-1.44269502162933349609375)) * (1.0 - _2534.w));
        float _2544 = log2(_2543);
        float _2560 = log2(_2265);
        _2357 = (exp2(_2560 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2544 * cbSceneParam._m0[78u].x)) * _2534.x) / cbSceneParam._m0[78u].x)) + _2262;
        _2359 = (exp2(_2560 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2544 * cbSceneParam._m0[78u].y)) * _2534.y) / cbSceneParam._m0[78u].y)) + _2263;
        _2361 = (exp2(_2560 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2544 * cbSceneParam._m0[78u].z)) * _2534.z) / cbSceneParam._m0[78u].z)) + _2264;
        _2363 = _2543 * _2265;
    }
    else
    {
        _2357 = _2262;
        _2359 = _2263;
        _2361 = _2264;
        _2363 = _2265;
    }
    bool _2570;
    vec4 _2373;
    vec4 _2395;
    float _2397;
    float _2401;
    float _2402;
    float _2403;
    float _2404;
    bool _2414;
    for (;;)
    {
        _2373 = cbMatDynParam._m0[0u];
        float _2375 = roundEven(_2373.y);
        bool _2376 = _2375 == 3.0;
        float _2377 = log2(_2363);
        float _2384 = exp2(_2377 * cbSceneParam._m0[78u].x) * _2233;
        float _2385 = exp2(_2377 * cbSceneParam._m0[78u].y) * _2234;
        float _2386 = exp2(_2377 * cbSceneParam._m0[78u].z) * _2235;
        float _2393 = _378 + (-0.5);
        _2395 = cbMtdParam._m0[1u];
        _2397 = _2395.y * _2393;
        float _2400 = (_2375 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2401 = _2400 * (_2376 ? _2384 : (_2384 + (cbSceneParam._m0[72u].w * _2357)));
        _2402 = _2400 * (_2376 ? _2385 : (_2385 + (cbSceneParam._m0[72u].w * _2359)));
        _2403 = _2400 * (_2376 ? _2386 : (_2386 + (cbSceneParam._m0[72u].w * _2361)));
        _2404 = _2393 * 0.999000012874603271484375;
        _2414 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2414)
        {
            if ((cbInstanceData._m0[_430 + 7u].x + _2404) < 0.5)
            {
                _2570 = true;
                break;
            }
        }
        uint _2511 = _432 + uint(_2373.w);
        if ((cbInstanceData._m0[_2511].w < 1.0) && ((cbInstanceData._m0[_2511].w + _2404) < 0.5))
        {
            _2570 = true;
            break;
        }
        if ((_2397 + _240) < _2395.x)
        {
            _2570 = true;
            break;
        }
        _2570 = false;
        break;
    }
    float _2775;
    if (_2570)
    {
        discard_state = true;
        _2775 = 0.0;
    }
    else
    {
        _2775 = _2240;
    }
    SV_Target.x = _2401;
    SV_Target.y = _2402;
    SV_Target.z = _2403;
    SV_Target.w = _2775;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2240;
    discard_exit();
}


