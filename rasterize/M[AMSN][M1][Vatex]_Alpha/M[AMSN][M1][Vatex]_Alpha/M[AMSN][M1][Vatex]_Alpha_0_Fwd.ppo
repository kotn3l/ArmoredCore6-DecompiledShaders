#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M1_Vatex_Alpha_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M1_Vatex_Alpha_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M1_Vatex_Alpha_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _847;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _188 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _195 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _196 = _195 * NORMAL.x;
    float _197 = _195 * NORMAL.y;
    float _198 = _195 * NORMAL.z;
    float _202 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _210;
    float _211;
    float _212;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _210 = (-0.0) - _196;
        _211 = (-0.0) - _197;
        _212 = (-0.0) - _198;
    }
    else
    {
        _210 = _196;
        _211 = _197;
        _212 = _198;
    }
    vec4 _232 = texture(sampler2D(M_AMSN_M1_Vatex_Alpha_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _239 = _232.x * cbMtdParam._m0[9u].x;
    float _240 = _232.y * cbMtdParam._m0[9u].y;
    float _241 = _232.z * cbMtdParam._m0[9u].z;
    float _242 = _232.w * TEXCOORD_1.z;
    vec4 _254 = texture(sampler2D(M_AMSN_M1_Vatex_Alpha_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[2u].w));
    float _256 = _254.x;
    vec4 _268 = texture(sampler2D(M_AMSN_M1_Vatex_Alpha_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _272 = _268.z;
    float _276 = (_268.x * 2.0) + (-1.0);
    float _278 = (_268.y * 2.0) + (-1.0);
    float _279 = dot(vec2(_276, _278), vec2(_276, _278));
    float _3186 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    float _285 = sqrt(1.0 - (isnan(1.0) ? _3186 : (isnan(_3186) ? 1.0 : min(_3186, 1.0))));
    float _288 = fma(_285, _210, fma(_278, _202 * TANGENT.x, (_188 * _180) * _276));
    float _291 = fma(_285, _211, fma(_278, _202 * TANGENT.y, (_188 * _181) * _276));
    float _294 = fma(_285, _212, fma(_278, _202 * TANGENT.z, (_188 * _182) * _276));
    float _298 = inversesqrt(dot(vec3(_288, _291, _294), vec3(_288, _291, _294)));
    float _299 = _298 * _288;
    float _300 = _298 * _291;
    float _301 = _298 * _294;
    float _3197 = isnan(0.0) ? _242 : (isnan(_242) ? 0.0 : max(_242, 0.0));
    float _302 = isnan(1.0) ? _3197 : (isnan(_3197) ? 1.0 : min(_3197, 1.0));
    float _3208 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _303 = isnan(1.0) ? _3208 : (isnan(_3208) ? 1.0 : min(_3208, 1.0));
    float _3219 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _3230 = isnan(0.0) ? _240 : (isnan(_240) ? 0.0 : max(_240, 0.0));
    float _3241 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _3252 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    float _307 = isnan(1.0) ? _3252 : (isnan(_3252) ? 1.0 : min(_3252, 1.0));
    float _323 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _365 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _375 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _365);
    float _376 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _365);
    float _377 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _365);
    float _381 = inversesqrt(dot(vec3(_375, _376, _377), vec3(_375, _376, _377)));
    float _382 = _375 * _381;
    float _383 = _376 * _381;
    float _384 = _377 * _381;
    float _390 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _391 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _412 = fma(_301, cbSceneParam._m0[5u].z, fma(_300, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _299));
    float _415 = fma(_301, cbSceneParam._m0[6u].z, fma(_300, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _299));
    float _418 = fma(_301, cbSceneParam._m0[7u].z, fma(_300, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _299));
    uint _431 = uint(roundEven(NORMAL.w)) * 13u;
    uint _434 = (_431 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _440 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3219 : (isnan(_3219) ? 1.0 : min(_3219, 1.0)))) * cbInstanceData._m0[_434].x;
    float _441 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3230 : (isnan(_3230) ? 1.0 : min(_3230, 1.0)))) * cbInstanceData._m0[_434].y;
    float _442 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3241 : (isnan(_3241) ? 1.0 : min(_3241, 1.0)))) * cbInstanceData._m0[_434].z;
    float _3263 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _443 = isnan(1.0) ? _3263 : (isnan(_3263) ? 1.0 : min(_3263, 1.0));
    float _3274 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _444 = isnan(1.0) ? _3274 : (isnan(_3274) ? 1.0 : min(_3274, 1.0));
    float _3285 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _445 = isnan(1.0) ? _3285 : (isnan(_3285) ? 1.0 : min(_3285, 1.0));
    float _446 = 1.0 - _307;
    float _447 = _443 * _446;
    float _448 = _444 * _446;
    float _449 = _445 * _446;
    float _454 = (_443 + (-0.039999999105930328369140625)) * _307;
    float _455 = (_444 + (-0.039999999105930328369140625)) * _307;
    float _456 = (_445 + (-0.039999999105930328369140625)) * _307;
    float _457 = _454 + 0.039999999105930328369140625;
    float _459 = _455 + 0.039999999105930328369140625;
    float _460 = _456 + 0.039999999105930328369140625;
    vec4 _469 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _390, cbSceneParam._m0[86u].y * _391));
    float _472 = _469.x * TEXCOORD_1.w;
    float _473 = dot(vec3(_299, _300, _301), vec3(_382, _383, _384));
    float _476 = _473 * 2.0;
    float _480 = (_476 * _299) - _382;
    float _481 = (_476 * _300) - _383;
    float _482 = (_476 * _301) - _384;
    float _486 = abs(dot(vec3(_382, _383, _384), vec3(_299, _300, _301)));
    float _3296 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _488 = sqrt(_303);
    float _501 = exp2((_488 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3296 : (isnan(_3296) ? 1.0 : min(_3296, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_488 * 3.0));
    float _507 = (1.0 - _501) * ((_488 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _508 = _501 * _488;
    float _536 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _540 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _544 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _846;
    float _848;
    float _849;
    float _850;
    float _851;
    float _852;
    float _853;
    float _854;
    float _855;
    float _856;
    float _857;
    float _858;
    float _859;
    float _860;
    float _861;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _571 = fma(_544, cbModelParam._m0[26u].z, fma(_540, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _536));
        float _575 = fma(_544, cbModelParam._m0[27u].z, fma(_540, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _536));
        float _579 = fma(_544, cbModelParam._m0[28u].z, fma(_540, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _536));
        float _604 = _536 + _299;
        float _605 = _540 + _300;
        float _606 = _544 + _301;
        float _616 = fma(_606, cbModelParam._m0[26u].z, fma(_605, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _604)) - _571;
        float _617 = fma(_606, cbModelParam._m0[27u].z, fma(_605, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _604)) - _575;
        float _618 = fma(_606, cbModelParam._m0[28u].z, fma(_605, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _604)) - _579;
        float _622 = inversesqrt(dot(vec3(_616, _617, _618), vec3(_616, _617, _618)));
        float _635 = ((_622 * _616) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_571 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _636 = ((_622 * _617) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_575 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _637 = ((_622 * _618) / cbModelParam._m0[34u].z) + ((((((_579 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _640 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_635, _636, _637), 0.0);
        vec4 _647 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_635, _636, _637), 0.0);
        vec4 _654 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_635, _636, _637), 0.0);
        vec4 _661 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_635, _636, _637), 0.0);
        float _674 = exp2((_640.w + (-0.5)) * 20.0) * 2.0;
        float _675 = _674 * (_640.x + (-0.5));
        float _676 = _674 * (_640.y + (-0.5));
        float _677 = _674 * (_640.z + (-0.5));
        float _684 = exp2((_647.w + (-0.5)) * 20.0) * 2.0;
        float _685 = _684 * (_647.x + (-0.5));
        float _686 = _684 * (_647.y + (-0.5));
        float _687 = _684 * (_647.z + (-0.5));
        float _694 = exp2((_654.w + (-0.5)) * 20.0) * 2.0;
        float _695 = _694 * (_654.x + (-0.5));
        float _696 = _694 * (_654.y + (-0.5));
        float _697 = _694 * (_654.z + (-0.5));
        float _704 = exp2((_661.w + (-0.5)) * 20.0) * 2.0;
        float _705 = _704 * (_661.x + (-0.5));
        float _706 = _704 * (_661.y + (-0.5));
        float _707 = _704 * (_661.z + (-0.5));
        float _708 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
        float _709 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
        float _710 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
        float _711 = _675 * 0.5;
        float _712 = _685 * 0.5;
        float _713 = _695 * 0.5;
        float _714 = dot(vec3(_711, _712, _713), vec3(_711, _712, _713));
        float _719 = (_714 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_714);
        float _728 = (dot(vec3(_299, _300, _301), vec3(_719 * _711, _719 * _712, _719 * _713)) + 1.0) * 0.5;
        float _3322 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
        float _738 = sqrt(((_712 * _712) + (_711 * _711)) + (_713 * _713)) / (_708 + 9.9999997473787516355514526367188e-06);
        float _3333 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
        float _739 = isnan(1.0) ? _3333 : (isnan(_3333) ? 1.0 : min(_3333, 1.0));
        float _740 = _739 * 2.0;
        float _744 = (1.0 - _739) / (_739 + 1.0);
        float _3344 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
        float _745 = isnan(1.0) ? _3344 : (isnan(_3344) ? 1.0 : min(_3344, 1.0));
        float _754 = ((((1.0 - _745) * (_740 + 2.0)) * exp2(log2(isnan(1.0) ? _3322 : (isnan(_3322) ? 1.0 : min(_3322, 1.0))) * (_740 + 1.0))) + _745) * _708;
        float _755 = _676 * 0.5;
        float _756 = _686 * 0.5;
        float _757 = _696 * 0.5;
        float _758 = dot(vec3(_755, _756, _757), vec3(_755, _756, _757));
        float _763 = (_758 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_758);
        float _771 = (dot(vec3(_299, _300, _301), vec3(_763 * _755, _763 * _756, _763 * _757)) + 1.0) * 0.5;
        float _3355 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
        float _780 = sqrt(((_756 * _756) + (_755 * _755)) + (_757 * _757)) / (_709 + 9.9999997473787516355514526367188e-06);
        float _3366 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
        float _781 = isnan(1.0) ? _3366 : (isnan(_3366) ? 1.0 : min(_3366, 1.0));
        float _782 = _781 * 2.0;
        float _786 = (1.0 - _781) / (_781 + 1.0);
        float _3377 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
        float _787 = isnan(1.0) ? _3377 : (isnan(_3377) ? 1.0 : min(_3377, 1.0));
        float _796 = ((((1.0 - _787) * (_782 + 2.0)) * exp2(log2(isnan(1.0) ? _3355 : (isnan(_3355) ? 1.0 : min(_3355, 1.0))) * (_782 + 1.0))) + _787) * _709;
        float _797 = _677 * 0.5;
        float _798 = _687 * 0.5;
        float _799 = _697 * 0.5;
        float _800 = dot(vec3(_797, _798, _799), vec3(_797, _798, _799));
        float _805 = (_800 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_800);
        float _813 = (dot(vec3(_299, _300, _301), vec3(_805 * _797, _805 * _798, _805 * _799)) + 1.0) * 0.5;
        float _3388 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
        float _822 = sqrt(((_798 * _798) + (_797 * _797)) + (_799 * _799)) / (_710 + 9.9999997473787516355514526367188e-06);
        float _3399 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
        float _823 = isnan(1.0) ? _3399 : (isnan(_3399) ? 1.0 : min(_3399, 1.0));
        float _824 = _823 * 2.0;
        float _828 = (1.0 - _823) / (_823 + 1.0);
        float _3410 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
        float _829 = isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0));
        float _838 = ((((1.0 - _829) * (_824 + 2.0)) * exp2(log2(isnan(1.0) ? _3388 : (isnan(_3388) ? 1.0 : min(_3388, 1.0))) * (_824 + 1.0))) + _829) * _710;
        _846 = _677;
        _848 = _676;
        _849 = _675;
        _850 = _687;
        _851 = _686;
        _852 = _685;
        _853 = _697;
        _854 = _696;
        _855 = _695;
        _856 = _710;
        _857 = _709;
        _858 = _708;
        _859 = cbModelParam._m0[36u].z * (isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0)));
        _860 = cbModelParam._m0[36u].z * (isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0)));
        _861 = cbModelParam._m0[36u].z * (isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0)));
    }
    else
    {
        _846 = _847;
        _848 = _847;
        _849 = _847;
        _850 = _847;
        _851 = _847;
        _852 = _847;
        _853 = _847;
        _854 = _847;
        _855 = _847;
        _856 = _847;
        _857 = _847;
        _858 = _847;
        _859 = 0.0;
        _860 = 0.0;
        _861 = 0.0;
    }
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _887 = fma(_544, cbModelParam._m0[30u].z, fma(_540, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _536));
        float _891 = fma(_544, cbModelParam._m0[31u].z, fma(_540, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _536));
        float _895 = fma(_544, cbModelParam._m0[32u].z, fma(_540, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _536));
        float _918 = _536 + _299;
        float _919 = _540 + _300;
        float _920 = _544 + _301;
        float _930 = fma(_920, cbModelParam._m0[30u].z, fma(_919, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _918)) - _887;
        float _931 = fma(_920, cbModelParam._m0[31u].z, fma(_919, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _918)) - _891;
        float _932 = fma(_920, cbModelParam._m0[32u].z, fma(_919, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _918)) - _895;
        float _936 = inversesqrt(dot(vec3(_930, _931, _932), vec3(_930, _931, _932)));
        float _949 = ((_936 * _930) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_887 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _950 = ((_936 * _931) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_891 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _951 = ((_936 * _932) / cbModelParam._m0[35u].z) + ((((((_895 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _953 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_949, _950, _951), 0.0);
        vec4 _960 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_949, _950, _951), 0.0);
        vec4 _967 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_949, _950, _951), 0.0);
        vec4 _974 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_949, _950, _951), 0.0);
        float _986 = exp2((_953.w + (-0.5)) * 20.0) * 2.0;
        float _987 = _986 * (_953.x + (-0.5));
        float _988 = _986 * (_953.y + (-0.5));
        float _989 = _986 * (_953.z + (-0.5));
        float _996 = exp2((_960.w + (-0.5)) * 20.0) * 2.0;
        float _997 = _996 * (_960.x + (-0.5));
        float _998 = _996 * (_960.y + (-0.5));
        float _999 = _996 * (_960.z + (-0.5));
        float _1006 = exp2((_967.w + (-0.5)) * 20.0) * 2.0;
        float _1007 = _1006 * (_967.x + (-0.5));
        float _1008 = _1006 * (_967.y + (-0.5));
        float _1009 = _1006 * (_967.z + (-0.5));
        float _1016 = exp2((_974.w + (-0.5)) * 20.0) * 2.0;
        float _1017 = _1016 * (_974.x + (-0.5));
        float _1018 = _1016 * (_974.y + (-0.5));
        float _1019 = _1016 * (_974.z + (-0.5));
        float _1020 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1021 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1022 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1023 = _987 * 0.5;
        float _1024 = _997 * 0.5;
        float _1025 = _1007 * 0.5;
        float _1026 = dot(vec3(_1023, _1024, _1025), vec3(_1023, _1024, _1025));
        float _1031 = (_1026 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1026);
        float _1039 = (dot(vec3(_299, _300, _301), vec3(_1031 * _1023, _1031 * _1024, _1031 * _1025)) + 1.0) * 0.5;
        float _3451 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1048 = sqrt(((_1024 * _1024) + (_1023 * _1023)) + (_1025 * _1025)) / (_1020 + 9.9999997473787516355514526367188e-06);
        float _3462 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1049 = isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0));
        float _1050 = _1049 * 2.0;
        float _1054 = (1.0 - _1049) / (_1049 + 1.0);
        float _3473 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1055 = isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0));
        float _1064 = ((((1.0 - _1055) * (_1050 + 2.0)) * exp2(log2(isnan(1.0) ? _3451 : (isnan(_3451) ? 1.0 : min(_3451, 1.0))) * (_1050 + 1.0))) + _1055) * _1020;
        float _1065 = _988 * 0.5;
        float _1066 = _998 * 0.5;
        float _1067 = _1008 * 0.5;
        float _1068 = dot(vec3(_1065, _1066, _1067), vec3(_1065, _1066, _1067));
        float _1073 = (_1068 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1068);
        float _1081 = (dot(vec3(_299, _300, _301), vec3(_1073 * _1065, _1073 * _1066, _1073 * _1067)) + 1.0) * 0.5;
        float _3484 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1090 = sqrt(((_1066 * _1066) + (_1065 * _1065)) + (_1067 * _1067)) / (_1021 + 9.9999997473787516355514526367188e-06);
        float _3495 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1091 = isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0));
        float _1092 = _1091 * 2.0;
        float _1096 = (1.0 - _1091) / (_1091 + 1.0);
        float _3506 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1097 = isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0));
        float _1106 = ((((1.0 - _1097) * (_1092 + 2.0)) * exp2(log2(isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0))) * (_1092 + 1.0))) + _1097) * _1021;
        float _1107 = _989 * 0.5;
        float _1108 = _999 * 0.5;
        float _1109 = _1009 * 0.5;
        float _1110 = dot(vec3(_1107, _1108, _1109), vec3(_1107, _1108, _1109));
        float _1115 = (_1110 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1110);
        float _1123 = (dot(vec3(_299, _300, _301), vec3(_1115 * _1107, _1115 * _1108, _1115 * _1109)) + 1.0) * 0.5;
        float _3517 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1132 = sqrt(((_1108 * _1108) + (_1107 * _1107)) + (_1109 * _1109)) / (_1022 + 9.9999997473787516355514526367188e-06);
        float _3528 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1133 = isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0));
        float _1134 = _1133 * 2.0;
        float _1138 = (1.0 - _1133) / (_1133 + 1.0);
        float _3539 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1139 = isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0));
        float _1148 = ((((1.0 - _1139) * (_1134 + 2.0)) * exp2(log2(isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0))) * (_1134 + 1.0))) + _1139) * _1022;
        _1156 = _989;
        _1157 = _988;
        _1158 = _987;
        _1159 = _999;
        _1160 = _998;
        _1161 = _997;
        _1162 = _1009;
        _1163 = _1008;
        _1164 = _1007;
        _1165 = _1022;
        _1166 = _1021;
        _1167 = _1020;
        _1168 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0)));
        _1169 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0)));
        _1170 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0)));
    }
    else
    {
        _1156 = _847;
        _1157 = _847;
        _1158 = _847;
        _1159 = _847;
        _1160 = _847;
        _1161 = _847;
        _1162 = _847;
        _1163 = _847;
        _1164 = _847;
        _1165 = _847;
        _1166 = _847;
        _1167 = _847;
        _1168 = 0.0;
        _1169 = 0.0;
        _1170 = 0.0;
    }
    float _1180 = (cbModelParam._m0[1u].x * (_1168 - _859)) + _859;
    float _1181 = (cbModelParam._m0[1u].x * (_1169 - _860)) + _860;
    float _1182 = (cbModelParam._m0[1u].x * (_1170 - _861)) + _861;
    float _1203 = fma(_1182, cbSceneParam._m0[89u].z, fma(_1181, cbSceneParam._m0[89u].y, _1180 * cbSceneParam._m0[89u].x));
    float _1206 = fma(_1182, cbSceneParam._m0[90u].z, fma(_1181, cbSceneParam._m0[90u].y, _1180 * cbSceneParam._m0[90u].x));
    float _1209 = fma(_1182, cbSceneParam._m0[91u].z, fma(_1181, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1180));
    float _1224 = _480 * 0.5;
    float _1225 = _481 * 0.5;
    float _1226 = _482 * 0.5;
    float _1227 = dot(vec4(_1224, _1225, _1226, 1.0), vec4(_1158, _1161, _1164, _1167));
    float _1230 = dot(vec4(_1224, _1225, _1226, 1.0), vec4(_1157, _1160, _1163, _1166));
    float _1233 = dot(vec4(_1224, _1225, _1226, 1.0), vec4(_1156, _1159, _1162, _1165));
    float _1267;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1240 = dot(vec4(_1224, _1225, _1226, 1.0), vec4(_846, _850, _853, _856));
        float _1244 = dot(vec4(_1224, _1225, _1226, 1.0), vec4(_848, _851, _854, _857));
        float _1248 = dot(vec4(_1224, _1225, _1226, 1.0), vec4(_849, _852, _855, _858));
        float _1255 = dot(vec4(cbModelParam._m0[39u]), vec4(_1224, _1225, _1226, 1.0));
        _1267 = dot(vec3(isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0)), isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0)), isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1255) ? 0.0 : (isnan(0.0) ? _1255 : max(0.0, _1255))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1267 = 1.0;
    }
    float _1278;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1269 = dot(vec4(cbModelParam._m0[40u]), vec4(_1224, _1225, _1226, 1.0));
        _1278 = dot(vec3(isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0)), isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0)), isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1269) ? 0.0 : (isnan(0.0) ? _1269 : max(0.0, _1269))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1278 = 1.0;
    }
    float _1282 = (_1278 * cbModelParam._m0[1u].x) + (_1267 * (1.0 - cbModelParam._m0[1u].x));
    float _1292 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _303);
    float _1293 = isnan(_1292) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1292 : min(cbModelParam._m0[25u].z, _1292));
    float _1375;
    float _1377;
    float _1379;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1342 = fma(_544, cbModelParam._m0[13u].z, fma(_540, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _536)) + cbModelParam._m0[13u].w;
        float _1346 = fma(_544, cbModelParam._m0[14u].z, fma(_540, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _536)) + cbModelParam._m0[14u].w;
        float _1350 = fma(_544, cbModelParam._m0[15u].z, fma(_540, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _536)) + cbModelParam._m0[15u].w;
        float _1353 = fma(_482, cbModelParam._m0[13u].z, fma(_481, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _480));
        float _1356 = fma(_482, cbModelParam._m0[14u].z, fma(_481, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _480));
        float _1359 = fma(_482, cbModelParam._m0[15u].z, fma(_481, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _480));
        float _1387;
        if (_1353 > 0.0)
        {
            _1387 = abs((1.0 - _1342) / _1353);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1353 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1342 + 1.0) / _1353);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1387 = frontier_phi_16_14_ladder;
        }
        float _1595;
        if (_1356 > 0.0)
        {
            _1595 = abs((1.0 - _1346) / _1356);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1356 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1346 + 1.0) / _1356);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1595 = frontier_phi_25_21_ladder;
        }
        float _1849;
        if (_1359 > 0.0)
        {
            _1849 = abs((1.0 - _1350) / _1359);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1359 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1350 + 1.0) / _1359);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1849 = frontier_phi_37_32_ladder;
        }
        float _1851 = isnan(_1595) ? _1387 : (isnan(_1387) ? _1595 : min(_1387, _1595));
        float _1852 = isnan(_1849) ? _1851 : (isnan(_1851) ? _1849 : min(_1851, _1849));
        float _1856 = (_1852 * _1353) + _1342;
        float _1857 = (_1852 * _1356) + _1346;
        float _1858 = (_1852 * _1359) + _1350;
        float _1859 = _1852 * 9.9999997473787516355514526367188e-05;
        float _1861 = (-1.0) - _1859;
        float _1863 = _1859 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1858 > _1863) || ((_1858 < _1861) || ((_1857 > _1863) || ((_1857 < _1861) || ((_1856 < _1861) || (_1856 > _1863))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1986 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1858, cbModelParam._m0[9u].z, fma(_1857, cbModelParam._m0[9u].y, _1856 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1858, cbModelParam._m0[10u].z, fma(_1857, cbModelParam._m0[10u].y, _1856 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1858, cbModelParam._m0[11u].z, fma(_1857, cbModelParam._m0[11u].y, _1856 * cbModelParam._m0[11u].x))), _1293);
            frontier_phi_15_37_ladder = _1986.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _1986.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _1986.x * cbModelParam._m0[1u].y;
        }
        _1375 = frontier_phi_15_37_ladder_2;
        _1377 = frontier_phi_15_37_ladder_1;
        _1379 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1363 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_480, _481, _482), _1293);
        _1375 = _1363.x * cbModelParam._m0[1u].y;
        _1377 = _1363.y * cbModelParam._m0[1u].y;
        _1379 = _1363.z * cbModelParam._m0[1u].y;
    }
    float _1383 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _303);
    float _1384 = isnan(_1383) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1383 : min(cbModelParam._m0[25u].w, _1383));
    float _1477;
    float _1479;
    float _1481;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1441 = fma(_544, cbModelParam._m0[21u].z, fma(_540, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _536)) + cbModelParam._m0[21u].w;
        float _1445 = fma(_544, cbModelParam._m0[22u].z, fma(_540, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _536)) + cbModelParam._m0[22u].w;
        float _1449 = fma(_544, cbModelParam._m0[23u].z, fma(_540, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _536)) + cbModelParam._m0[23u].w;
        float _1452 = fma(_482, cbModelParam._m0[21u].z, fma(_481, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _480));
        float _1455 = fma(_482, cbModelParam._m0[22u].z, fma(_481, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _480));
        float _1458 = fma(_482, cbModelParam._m0[23u].z, fma(_481, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _480));
        float _1600;
        if (_1452 > 0.0)
        {
            _1600 = abs((1.0 - _1441) / _1452);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1452 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1441 + 1.0) / _1452);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1600 = frontier_phi_27_23_ladder;
        }
        float _1876;
        if (_1455 > 0.0)
        {
            _1876 = abs((1.0 - _1445) / _1455);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1455 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1445 + 1.0) / _1455);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1876 = frontier_phi_39_34_ladder;
        }
        float _2089;
        if (_1458 > 0.0)
        {
            _2089 = abs((1.0 - _1449) / _1458);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1458 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1449 + 1.0) / _1458);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2089 = frontier_phi_48_45_ladder;
        }
        float _2091 = isnan(_1876) ? _1600 : (isnan(_1600) ? _1876 : min(_1600, _1876));
        float _2092 = isnan(_2089) ? _2091 : (isnan(_2091) ? _2089 : min(_2091, _2089));
        float _2096 = (_2092 * _1452) + _1441;
        float _2097 = (_2092 * _1455) + _1445;
        float _2098 = (_2092 * _1458) + _1449;
        float _2099 = _2092 * 9.9999997473787516355514526367188e-05;
        float _2100 = (-1.0) - _2099;
        float _2102 = _2099 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2098 > _2102) || ((_2098 < _2100) || ((_2097 > _2102) || ((_2097 < _2100) || ((_2096 < _2100) || (_2096 > _2102))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2298 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2098, cbModelParam._m0[17u].z, fma(_2097, cbModelParam._m0[17u].y, _2096 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2098, cbModelParam._m0[18u].z, fma(_2097, cbModelParam._m0[18u].y, _2096 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2098, cbModelParam._m0[19u].z, fma(_2097, cbModelParam._m0[19u].y, _2096 * cbModelParam._m0[19u].x))), _1384);
            frontier_phi_24_48_ladder = _2298.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2298.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2298.x * cbModelParam._m0[1u].z;
        }
        _1477 = frontier_phi_24_48_ladder_2;
        _1479 = frontier_phi_24_48_ladder_1;
        _1481 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1461 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_480, _481, _482), _1384);
        _1477 = _1461.x * cbModelParam._m0[1u].z;
        _1479 = _1461.y * cbModelParam._m0[1u].z;
        _1481 = _1461.z * cbModelParam._m0[1u].z;
    }
    float _1494 = (((_507 * _457) + _508) * _472) * ((cbModelParam._m0[1u].w * (_1477 - _1375)) + _1375);
    float _1496 = (((_507 * _459) + _508) * _472) * ((cbModelParam._m0[1u].w * (_1479 - _1377)) + _1377);
    float _1498 = (((_507 * _460) + _508) * _472) * ((cbModelParam._m0[1u].w * (_1481 - _1379)) + _1379);
    float _1501 = fma(_1498, cbSceneParam._m0[89u].z, fma(_1496, cbSceneParam._m0[89u].y, _1494 * cbSceneParam._m0[89u].x));
    float _1504 = fma(_1498, cbSceneParam._m0[90u].z, fma(_1496, cbSceneParam._m0[90u].y, _1494 * cbSceneParam._m0[90u].x));
    float _1507 = fma(_1498, cbSceneParam._m0[91u].z, fma(_1496, cbSceneParam._m0[91u].y, _1494 * cbSceneParam._m0[91u].x));
    uvec4 _1517 = floatBitsToUint(cbInstanceData._m0[_431 + 5u]);
    uint _1519 = _1517.x * 14u;
    uint _1520 = _1519 + 13u;
    float _1527 = _472 + (-1.0);
    float _1532 = (cbLight._m0[_1520].x * _1527) + 1.0;
    float _1533 = (cbLight._m0[_1520].y * _1527) + 1.0;
    float _1534 = (cbLight._m0[_1520].z * _1527) + 1.0;
    float _1535 = (cbLight._m0[_1520].w * _1527) + 1.0;
    uint _1536 = _1519 + 5u;
    float _1542 = isnan(1.0) ? _1533 : (isnan(_1533) ? 1.0 : min(_1533, 1.0));
    uint _1546 = _1519 + 4u;
    float _1553 = isnan(1.0) ? _1532 : (isnan(_1532) ? 1.0 : min(_1532, 1.0));
    uint _1557 = _1519 | 1u;
    float _1568 = dot(vec3(cbLight._m0[_1519].xyz), vec3(_299, _300, _301));
    float _1571 = dot(vec3(cbLight._m0[_1557].xyz), vec3(_299, _300, _301));
    float _3675 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
    float _3686 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
    float _1576 = (isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0))) * 0.3183098733425140380859375;
    float _1578 = (isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0))) * 0.3183098733425140380859375;
    float _1585 = ((cbLight._m0[_1536].x * _1542) * _1578) + ((cbLight._m0[_1546].x * _1553) * _1576);
    float _1586 = ((_1542 * cbLight._m0[_1536].y) * _1578) + ((_1553 * cbLight._m0[_1546].y) * _1576);
    float _1587 = ((_1542 * cbLight._m0[_1536].z) * _1578) + ((_1553 * cbLight._m0[_1546].z) * _1576);
    uvec4 _1592 = floatBitsToUint(cbLight._m0[_1519 + 12u]);
    bool _1594 = _1592.x == 0u;
    float _1605;
    float _1607;
    float _1609;
    if (_1594)
    {
        _1605 = _1585;
        _1607 = _1586;
        _1609 = _1587;
    }
    else
    {
        uint _1613 = _1519 + 6u;
        float _1629 = (dot(vec3(cbLight._m0[_1519 + 2u].xyz), vec3(_299, _300, _301)) * 0.5) + 0.5;
        float _1630 = _1629 * _1629;
        float _3697 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1631 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
        float _1632 = isnan(1.0) ? _1534 : (isnan(_1534) ? 1.0 : min(_1534, 1.0));
        _1605 = (((cbLight._m0[_1613].x * 0.3183098733425140380859375) * _1631) * _1632) + _1585;
        _1607 = (((cbLight._m0[_1613].y * 0.3183098733425140380859375) * _1631) * _1632) + _1586;
        _1609 = (((cbLight._m0[_1613].z * 0.3183098733425140380859375) * _1631) * _1632) + _1587;
    }
    bool _1612 = _1592.y == 0u;
    float _1650;
    float _1652;
    float _1654;
    if (_1612)
    {
        _1650 = _1605;
        _1652 = _1607;
        _1654 = _1609;
    }
    else
    {
        uint _1820 = _1519 + 7u;
        float _1836 = (dot(vec3(cbLight._m0[_1519 + 3u].xyz), vec3(_299, _300, _301)) * 0.5) + 0.5;
        float _1837 = _1836 * _1836;
        float _3713 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
        float _1838 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
        float _1839 = isnan(1.0) ? _1535 : (isnan(_1535) ? 1.0 : min(_1535, 1.0));
        _1650 = (((cbLight._m0[_1820].x * 0.3183098733425140380859375) * _1838) * _1839) + _1605;
        _1652 = (((cbLight._m0[_1820].y * 0.3183098733425140380859375) * _1838) * _1839) + _1607;
        _1654 = (((cbLight._m0[_1820].z * 0.3183098733425140380859375) * _1838) * _1839) + _1609;
    }
    uint _1657 = _1519 + 8u;
    float _1670 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1519].w)) * _303) * 0.949999988079071044921875);
    float _1671 = _1670 * _1670;
    float _1672 = cbLight._m0[_1519].x + _382;
    float _1673 = cbLight._m0[_1519].y + _383;
    float _1674 = cbLight._m0[_1519].z + _384;
    float _1678 = inversesqrt(dot(vec3(_1672, _1673, _1674), vec3(_1672, _1673, _1674)));
    float _1679 = _1678 * _1672;
    float _1680 = _1678 * _1673;
    float _1681 = _1678 * _1674;
    float _1682 = dot(vec3(_299, _300, _301), vec3(cbLight._m0[_1519].xyz));
    float _3729 = isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0));
    float _1685 = isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0));
    float _3740 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _1686 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
    float _1687 = dot(vec3(_299, _300, _301), vec3(_1679, _1680, _1681));
    float _3751 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
    float _1690 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
    float _1691 = dot(vec3(cbLight._m0[_1519].xyz), vec3(_1679, _1680, _1681));
    float _3762 = isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0));
    float _1695 = _1671 * _1671;
    float _1699 = ((_1690 * _1690) * (_1695 + (-1.0))) + 1.0;
    float _1707 = exp2(log2(1.0 - (isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0)))) * 5.0);
    float _1708 = 0.959999978542327880859375 - _454;
    float _1710 = 0.959999978542327880859375 - _455;
    float _1711 = 0.959999978542327880859375 - _456;
    float _1718 = 1.0 - _1671;
    float _1729 = (0.5 / (((_1686 * ((_1685 * _1718) + _1671)) + 9.9999999392252902907785028219223e-09) + (((_1686 * _1718) + _1671) * _1685))) * _1685;
    float _3773 = isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0));
    float _1731 = (isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0))) * (_1695 / ((_1699 * _1699) * 3.141590118408203125));
    uint _1742 = _1519 + 9u;
    float _1753 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1557].w)) * _303) * 0.949999988079071044921875);
    float _1754 = _1753 * _1753;
    float _1755 = cbLight._m0[_1557].x + _382;
    float _1756 = cbLight._m0[_1557].y + _383;
    float _1757 = cbLight._m0[_1557].z + _384;
    float _1761 = inversesqrt(dot(vec3(_1755, _1756, _1757), vec3(_1755, _1756, _1757)));
    float _1762 = _1761 * _1755;
    float _1763 = _1761 * _1756;
    float _1764 = _1761 * _1757;
    float _1765 = dot(vec3(_299, _300, _301), vec3(cbLight._m0[_1557].xyz));
    float _3784 = isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0));
    float _1768 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
    float _1769 = dot(vec3(_299, _300, _301), vec3(_1762, _1763, _1764));
    float _3795 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
    float _1772 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
    float _1773 = dot(vec3(cbLight._m0[_1557].xyz), vec3(_1762, _1763, _1764));
    float _3806 = isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0));
    float _1777 = _1754 * _1754;
    float _1781 = ((_1772 * _1772) * (_1777 + (-1.0))) + 1.0;
    float _1788 = exp2(log2(1.0 - (isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0)))) * 5.0);
    float _1795 = 1.0 - _1754;
    float _1805 = (0.5 / (((_1686 * ((_1768 * _1795) + _1754)) + 9.9999999392252902907785028219223e-09) + (((_1686 * _1795) + _1754) * _1768))) * _1768;
    float _3817 = isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0));
    float _1807 = (isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0))) * (_1777 / ((_1781 * _1781) * 3.141590118408203125));
    float _1817 = (((((_1788 * _1708) + _457) * cbLight._m0[_1742].x) * _1807) * _1542) + (((((_1707 * _1708) + _457) * cbLight._m0[_1657].x) * _1731) * _1553);
    float _1818 = (((((_1788 * _1710) + _459) * cbLight._m0[_1742].y) * _1807) * _1542) + (((((_1707 * _1710) + _459) * cbLight._m0[_1657].y) * _1731) * _1553);
    float _1819 = (((((_1788 * _1711) + _460) * cbLight._m0[_1742].z) * _1807) * _1542) + (((((_1707 * _1711) + _460) * cbLight._m0[_1657].z) * _1731) * _1553);
    float _1881;
    float _1883;
    float _1885;
    if (_1594)
    {
        _1881 = _1817;
        _1883 = _1818;
        _1885 = _1819;
    }
    else
    {
        uint _1887 = _1519 + 2u;
        uint _1891 = _1519 + 10u;
        float _1905 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1887].w)) * _303) * 0.949999988079071044921875);
        float _1906 = _1905 * _1905;
        float _1907 = cbLight._m0[_1887].x + _382;
        float _1908 = cbLight._m0[_1887].y + _383;
        float _1909 = cbLight._m0[_1887].z + _384;
        float _1913 = inversesqrt(dot(vec3(_1907, _1908, _1909), vec3(_1907, _1908, _1909)));
        float _1914 = _1913 * _1907;
        float _1915 = _1913 * _1908;
        float _1916 = _1913 * _1909;
        float _1917 = dot(vec3(_299, _300, _301), vec3(cbLight._m0[_1887].xyz));
        float _3828 = isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0));
        float _1920 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
        float _1921 = dot(vec3(_299, _300, _301), vec3(_1914, _1915, _1916));
        float _3839 = isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0));
        float _1924 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
        float _1925 = dot(vec3(cbLight._m0[_1887].xyz), vec3(_1914, _1915, _1916));
        float _3850 = isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0));
        float _1929 = _1906 * _1906;
        float _1933 = ((_1924 * _1924) * (_1929 + (-1.0))) + 1.0;
        float _1940 = exp2(log2(1.0 - (isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0)))) * 5.0);
        float _1947 = 1.0 - _1906;
        float _1957 = (0.5 / (((_1686 * ((_1920 * _1947) + _1906)) + 9.9999999392252902907785028219223e-09) + (((_1686 * _1947) + _1906) * _1920))) * _1920;
        float _3861 = isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0));
        float _1959 = (isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0))) * (_1929 / ((_1933 * _1933) * 3.141590118408203125));
        float _1960 = isnan(1.0) ? _1534 : (isnan(_1534) ? 1.0 : min(_1534, 1.0));
        _1881 = (((((_1940 * _1708) + _457) * cbLight._m0[_1891].x) * _1959) * _1960) + _1817;
        _1883 = (((((_1940 * _1710) + _459) * cbLight._m0[_1891].y) * _1959) * _1960) + _1818;
        _1885 = (((((_1940 * _1711) + _460) * cbLight._m0[_1891].z) * _1959) * _1960) + _1819;
    }
    float _1995;
    float _1997;
    float _1999;
    if (_1612)
    {
        _1995 = _1881;
        _1997 = _1883;
        _1999 = _1885;
    }
    else
    {
        uint _2006 = _1519 + 3u;
        uint _2010 = _1519 + 11u;
        float _2024 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2006].w)) * _303) * 0.949999988079071044921875);
        float _2025 = _2024 * _2024;
        float _2026 = cbLight._m0[_2006].x + _382;
        float _2027 = cbLight._m0[_2006].y + _383;
        float _2028 = cbLight._m0[_2006].z + _384;
        float _2032 = inversesqrt(dot(vec3(_2026, _2027, _2028), vec3(_2026, _2027, _2028)));
        float _2033 = _2032 * _2026;
        float _2034 = _2032 * _2027;
        float _2035 = _2032 * _2028;
        float _2036 = dot(vec3(_299, _300, _301), vec3(cbLight._m0[_2006].xyz));
        float _3877 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
        float _2039 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
        float _2040 = dot(vec3(_299, _300, _301), vec3(_2033, _2034, _2035));
        float _3888 = isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0));
        float _2043 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
        float _2044 = dot(vec3(cbLight._m0[_2006].xyz), vec3(_2033, _2034, _2035));
        float _3899 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0));
        float _2048 = _2025 * _2025;
        float _2052 = ((_2043 * _2043) * (_2048 + (-1.0))) + 1.0;
        float _2059 = exp2(log2(1.0 - (isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0)))) * 5.0);
        float _2066 = 1.0 - _2025;
        float _2076 = (0.5 / (((_1686 * ((_2039 * _2066) + _2025)) + 9.9999999392252902907785028219223e-09) + (((_1686 * _2066) + _2025) * _2039))) * _2039;
        float _3910 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
        float _2078 = (isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0))) * (_2048 / ((_2052 * _2052) * 3.141590118408203125));
        float _2079 = isnan(1.0) ? _1535 : (isnan(_1535) ? 1.0 : min(_1535, 1.0));
        _1995 = (((((_2059 * _1708) + _457) * cbLight._m0[_2010].x) * _2078) * _2079) + _1881;
        _1997 = (((((_2059 * _1710) + _459) * cbLight._m0[_2010].y) * _2078) * _2079) + _1883;
        _1999 = (((((_2059 * _1711) + _460) * cbLight._m0[_2010].z) * _2078) * _2079) + _1885;
    }
    float _2213;
    float _2215;
    float _2217;
    float _2219;
    float _2221;
    float _2223;
    if (_1517.y == 0u)
    {
        float _2154 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2155 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2154;
        float _2156 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2154;
        float _2157 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2154;
        uvec4 _2169 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2170 = _2169.x;
        uint _2181 = uint((float(_2169.y) * floor(float(uint(cbSceneParam._m0[85u].y * _391) / _2170))) + floor(float(uint(cbSceneParam._m0[85u].x * _390) / _2170)));
        float _2191 = (log2(_2157 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2192 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
        uint _2195 = uint(isnan(14.0) ? _2192 : (isnan(_2192) ? 14.0 : min(_2192, 14.0)));
        uvec4 _2200 = texelFetch(g_lightClusterGridBuffer, int(((_2195 << 2u) + (_2181 << 6u)) >> 2u));
        uint _2201 = _2200.x;
        uint _2202 = _2169.z;
        float _2303;
        float _2305;
        float _2307;
        float _2309;
        float _2311;
        float _2313;
        if (((((1u << ((_2202 >> 4u) & 15u)) + 4294967295u) & _2201) == 0u) || ((_2202 & 240u) == 0u))
        {
            _2303 = 0.0;
            _2305 = 0.0;
            _2307 = 0.0;
            _2309 = 0.0;
            _2311 = 0.0;
            _2313 = 0.0;
        }
        else
        {
            float _2304;
            float _2306;
            float _2308;
            float _2310;
            float _2312;
            float _2314;
            float _2447 = 0.0;
            float _2448 = 0.0;
            float _2449 = 0.0;
            float _2450 = 0.0;
            float _2451 = 0.0;
            float _2452 = 0.0;
            uint _2453 = 0u;
            uint _2462;
            bool _2463;
            for (;;)
            {
                _2462 = texelFetch(g_lightClassification, int((((_2195 << 5u) + (_2181 << 9u)) + (_2453 << 2u)) >> 2u)).x;
                _2463 = _2462 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2463)
                {
                    frontier_phi_63_pred = _2452;
                    frontier_phi_63_pred_1 = _2451;
                    frontier_phi_63_pred_2 = _2450;
                    frontier_phi_63_pred_3 = _2449;
                    frontier_phi_63_pred_4 = _2448;
                    frontier_phi_63_pred_5 = _2447;
                }
                else
                {
                    float _2571;
                    float _2572;
                    float _2573;
                    float _2574;
                    float _2575;
                    float _2576;
                    uint _2577;
                    _2571 = _2447;
                    _2572 = _2448;
                    _2573 = _2449;
                    _2574 = _2450;
                    _2575 = _2451;
                    _2576 = _2452;
                    _2577 = _2462;
                    float _2503;
                    float _2504;
                    float _2505;
                    float _2506;
                    float _2507;
                    float _2508;
                    for (;;)
                    {
                        uint _2581 = uint(findLSB(_2577)) + (_2453 << 5u);
                        uint _2578 = (_2577 + 4294967295u) & _2577;
                        uint _2583 = _2581 * 48u;
                        vec4 _2597 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2583)).x, texelFetch(g_PointLightRenderingBuffer, int(_2583 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2583 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2583 + 3u)).x));
                        uint _2603 = (_2581 * 48u) + 4u;
                        vec4 _2616 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2603)).x, texelFetch(g_PointLightRenderingBuffer, int(_2603 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2603 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2603 + 3u)).x));
                        uint _2622 = (_2581 * 48u) + 8u;
                        vec3 _2633 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2622)).x, texelFetch(g_PointLightRenderingBuffer, int(_2622 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2622 + 2u)).x));
                        float _2637 = _2597.x - _2155;
                        float _2638 = _2597.y - _2156;
                        float _2639 = _2597.z - _2157;
                        float _2640 = dot(vec3(_2637, _2638, _2639), vec3(_2637, _2638, _2639));
                        float _2643 = inversesqrt(_2640);
                        float _2644 = _2643 * _2637;
                        float _2645 = _2643 * _2638;
                        float _2646 = _2643 * _2639;
                        float _2647 = dot(vec3(_412, _415, _418), vec3(_2644, _2645, _2646));
                        float _2652 = 1.0 - (_2640 * _2597.w);
                        float _3936 = isnan(0.0) ? _2652 : (isnan(_2652) ? 0.0 : max(_2652, 0.0));
                        float _2653 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
                        float _2654 = sqrt(_2640) * _2616.w;
                        float _2657 = 1.39999997615814208984375 / (_2654 + 1.39999997615814208984375);
                        float _2658 = _2657 * _2657;
                        float _2661 = ((1.0 - _2658) * _2647) + _2658;
                        float _2664 = _2654 * _2654;
                        float _2668 = ((isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : max(_2661, 0.0))) * _2653) / ((_2664 * 0.699999988079071044921875) + 1.0);
                        float _2672 = (-0.0) - _2155;
                        float _2673 = (-0.0) - _2156;
                        float _2674 = (-0.0) - _2157;
                        float _2678 = inversesqrt(dot(vec3(_2672, _2673, _2674), vec3(_2672, _2673, _2674)));
                        float _2679 = _2678 * _2672;
                        float _2680 = _2678 * _2673;
                        float _2681 = _2678 * _2674;
                        float _2689 = exp2(log2(1.0 / ((_2664 * 3.5) + 5.0)) * 0.25);
                        float _2690 = 1.0 - _488;
                        float _2697 = sqrt(1.0 - ((1.0 - (_2690 * _2690)) * (1.0 - (_2689 * _2689))));
                        float _2698 = _2697 * _2697;
                        float _2699 = _2698 * _2698;
                        float _2700 = _2679 + _2644;
                        float _2701 = _2680 + _2645;
                        float _2702 = _2681 + _2646;
                        float _2706 = inversesqrt(dot(vec3(_2700, _2701, _2702), vec3(_2700, _2701, _2702)));
                        float _2710 = dot(vec3(_412, _415, _418), vec3(_2679, _2680, _2681));
                        float _3952 = isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : max(_2710, 0.0));
                        float _2713 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
                        float _2714 = dot(vec3(_412, _415, _418), vec3(_2706 * _2700, _2706 * _2701, _2706 * _2702));
                        float _3963 = isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0));
                        float _2717 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
                        float _2721 = ((_2717 * _2717) * (_2699 + (-1.0))) + 1.0;
                        float _2722 = _2657 * _2698;
                        float _2723 = _2722 * _2722;
                        float _2726 = ((1.0 - _2723) * _2647) + _2723;
                        float _3974 = isnan(0.0) ? _2726 : (isnan(_2726) ? 0.0 : max(_2726, 0.0));
                        float _2727 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
                        float _2728 = 1.0 - _2698;
                        float _2738 = (0.5 / (((_2727 * ((_2713 * _2728) + _2698)) + 9.9999999392252902907785028219223e-09) + (((_2727 * _2728) + _2698) * _2713))) * _2727;
                        float _3985 = isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0));
                        float _2749 = (((_2699 * 3.1415927410125732421875) * (isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0)))) / ((_2721 * _2721) * ((_2664 * 2.1991131305694580078125) + 3.141590118408203125))) * _2653;
                        _2506 = (_2668 * _2616.x) + _2574;
                        _2507 = (_2668 * _2616.y) + _2575;
                        _2508 = (_2668 * _2616.z) + _2576;
                        _2503 = (_2749 * _2633.x) + _2571;
                        _2504 = (_2749 * _2633.y) + _2572;
                        _2505 = (_2749 * _2633.z) + _2573;
                        if (_2578 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2571 = _2503;
                            _2572 = _2504;
                            _2573 = _2505;
                            _2574 = _2506;
                            _2575 = _2507;
                            _2576 = _2508;
                            _2577 = _2578;
                        }
                    }
                    frontier_phi_63_pred = _2508;
                    frontier_phi_63_pred_1 = _2507;
                    frontier_phi_63_pred_2 = _2506;
                    frontier_phi_63_pred_3 = _2505;
                    frontier_phi_63_pred_4 = _2504;
                    frontier_phi_63_pred_5 = _2503;
                }
                _2314 = frontier_phi_63_pred;
                _2312 = frontier_phi_63_pred_1;
                _2310 = frontier_phi_63_pred_2;
                _2308 = frontier_phi_63_pred_3;
                _2306 = frontier_phi_63_pred_4;
                _2304 = frontier_phi_63_pred_5;
                uint _2454 = _2453 + 1u;
                if (_2454 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2447 = _2304;
                    _2448 = _2306;
                    _2449 = _2308;
                    _2450 = _2310;
                    _2451 = _2312;
                    _2452 = _2314;
                    _2453 = _2454;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2303 = _2304;
            _2305 = _2306;
            _2307 = _2308;
            _2309 = _2310;
            _2311 = _2312;
            _2313 = _2314;
        }
        uvec4 _2317 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2318 = _2317.z;
        uint _2320 = (_2318 >> 8u) & 15u;
        float _2415;
        float _2417;
        float _2419;
        float _2421;
        float _2423;
        float _2425;
        if (((4294967295u << _2320) & _2201) == 0u)
        {
            _2415 = _2303;
            _2417 = _2305;
            _2419 = _2307;
            _2421 = _2309;
            _2423 = _2311;
            _2425 = _2313;
        }
        else
        {
            float _2440 = inversesqrt(dot(vec3(_2155, _2156, _2157), vec3(_2155, _2156, _2157)));
            float _2441 = _2440 * _2155;
            float _2442 = _2440 * _2156;
            float _2443 = _2440 * _2157;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2320 < ((_2318 >> 12u) & 15u))
            {
                float _2416;
                float _2418;
                float _2420;
                float _2422;
                float _2424;
                float _2426;
                float _2554 = _2303;
                float _2555 = _2305;
                float _2556 = _2307;
                float _2557 = _2309;
                float _2558 = _2311;
                float _2559 = _2313;
                uint _2560 = _2320;
                uint _2569;
                bool _2570;
                for (;;)
                {
                    _2569 = texelFetch(g_lightClassification, int((((_2195 << 5u) + (_2181 << 9u)) + (_2560 << 2u)) >> 2u)).x;
                    _2570 = _2569 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2570)
                    {
                        frontier_phi_69_pred = _2559;
                        frontier_phi_69_pred_1 = _2558;
                        frontier_phi_69_pred_2 = _2557;
                        frontier_phi_69_pred_3 = _2556;
                        frontier_phi_69_pred_4 = _2555;
                        frontier_phi_69_pred_5 = _2554;
                    }
                    else
                    {
                        float _2754;
                        float _2755;
                        float _2756;
                        float _2757;
                        float _2758;
                        float _2759;
                        float _3050;
                        float _3051;
                        float _3052;
                        float _3053;
                        float _3054;
                        float _3055;
                        float _2767 = _2554;
                        float _2768 = _2555;
                        float _2769 = _2556;
                        float _2770 = _2557;
                        float _2771 = _2558;
                        float _2772 = _2559;
                        uint _2773 = _2569;
                        uint _2774;
                        vec4 _2799;
                        float _2800;
                        vec4 _2815;
                        vec3 _2827;
                        vec4 _2843;
                        vec4 _2859;
                        float _2906;
                        bool _2907;
                        for (;;)
                        {
                            uint _2784 = ((_2560 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2773));
                            _2774 = (_2773 + 4294967295u) & _2773;
                            uint _2786 = _2784 * 40u;
                            _2799 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2786)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2786 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2786 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2786 + 3u)).x));
                            _2800 = _2799.w;
                            uint _2802 = (_2784 * 40u) + 4u;
                            _2815 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2802)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2802 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2802 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2802 + 3u)).x));
                            uint _2817 = (_2784 * 40u) + 8u;
                            _2827 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2817)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2817 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2817 + 2u)).x));
                            uint _2830 = (_2784 * 40u) + 16u;
                            _2843 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2830)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2830 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2830 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2830 + 3u)).x));
                            uint _2846 = (_2784 * 40u) + 20u;
                            _2859 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2846)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2846 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2846 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2846 + 3u)).x));
                            uint _2862 = (_2784 * 40u) + 24u;
                            vec4 _2875 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2862)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2862 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2862 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2862 + 3u)).x));
                            uint _2881 = (_2784 * 40u) + 28u;
                            vec4 _2894 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2881)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2881 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2881 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2881 + 3u)).x));
                            _2906 = fma(_2157, _2894.z, fma(_2156, _2894.y, _2894.x * _2155)) + _2894.w;
                            _2907 = !((fma(_2157, _2875.z, fma(_2156, _2875.y, _2875.x * _2155)) + _2875.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2907)
                            {
                                float _2934 = _2799.x - _2155;
                                float _2935 = _2799.y - _2156;
                                float _2936 = _2799.z - _2157;
                                float _2937 = dot(vec3(_2934, _2935, _2936), vec3(_2934, _2935, _2936));
                                float _2940 = inversesqrt(_2937);
                                float _2941 = _2940 * _2934;
                                float _2942 = _2940 * _2935;
                                float _2943 = _2940 * _2936;
                                float _2947 = 1.0 - (_2937 / (_2800 * _2800));
                                float _3996 = isnan(0.0) ? _2947 : (isnan(_2947) ? 0.0 : max(_2947, 0.0));
                                float _2948 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
                                float _2952 = sqrt(_2937) * _2815.w;
                                float _2954 = 1.39999997615814208984375 / (_2952 + 1.39999997615814208984375);
                                float _2955 = _2954 * _2954;
                                float _2958 = ((1.0 - _2955) * dot(vec3(_2941, _2942, _2943), vec3(_412, _415, _418))) + _2955;
                                float _2961 = _2952 * _2952;
                                float _2965 = (fma(_2157, _2843.z, fma(_2156, _2843.y, _2843.x * _2155)) + _2843.w) / _2906;
                                float _2966 = (fma(_2157, _2859.z, fma(_2156, _2859.y, _2859.x * _2155)) + _2859.w) / _2906;
                                float _2970 = 1.0 - dot(vec2(_2965, _2966), vec2(_2965, _2966));
                                float _4012 = isnan(0.0) ? _2970 : (isnan(_2970) ? 0.0 : max(_2970, 0.0));
                                float _2971 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
                                float _2972 = _2971 * (((isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : max(_2958, 0.0))) * _2948) / ((_2961 * 0.699999988079071044921875) + 1.0));
                                float _2984 = exp2(log2(1.0 / ((_2961 * 3.5) + 5.0)) * 0.25);
                                float _2985 = 1.0 - _488;
                                float _2992 = sqrt(1.0 - ((1.0 - (_2985 * _2985)) * (1.0 - (_2984 * _2984))));
                                float _2993 = _2992 * _2992;
                                float _2994 = _2993 * _2993;
                                float _2995 = _2941 - _2441;
                                float _2996 = _2942 - _2442;
                                float _2997 = _2943 - _2443;
                                float _3001 = inversesqrt(dot(vec3(_2995, _2996, _2997), vec3(_2995, _2996, _2997)));
                                float _3005 = dot(vec3(_412, _415, _418), vec3((-0.0) - _2441, (-0.0) - _2442, (-0.0) - _2443));
                                float _4023 = isnan(0.0) ? _3005 : (isnan(_3005) ? 0.0 : max(_3005, 0.0));
                                float _3008 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
                                float _3009 = dot(vec3(_412, _415, _418), vec3(_3001 * _2995, _3001 * _2996, _3001 * _2997));
                                float _4034 = isnan(0.0) ? _3009 : (isnan(_3009) ? 0.0 : max(_3009, 0.0));
                                float _3012 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
                                float _3016 = ((_3012 * _3012) * (_2994 + (-1.0))) + 1.0;
                                float _3017 = _2954 * _2993;
                                float _3018 = _3017 * _3017;
                                float _3024 = ((1.0 - _3018) * dot(vec3(_412, _415, _418), vec3(_2941, _2942, _2943))) + _3018;
                                float _4045 = isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : max(_3024, 0.0));
                                float _3025 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
                                float _3026 = 1.0 - _2993;
                                float _3036 = (0.5 / (((_3025 * ((_3008 * _3026) + _2993)) + 9.9999999392252902907785028219223e-09) + (((_3025 * _3026) + _2993) * _3008))) * _3025;
                                float _4056 = isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : max(_3036, 0.0));
                                float _3046 = (_2971 * _2948) * (((_2994 * 3.1415927410125732421875) * (isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0)))) / ((_3016 * _3016) * ((_2961 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _2972 * _2815.z;
                                frontier_phi_75_pred_1 = _2972 * _2815.y;
                                frontier_phi_75_pred_2 = _2972 * _2815.x;
                                frontier_phi_75_pred_3 = _3046 * _2827.z;
                                frontier_phi_75_pred_4 = _3046 * _2827.y;
                                frontier_phi_75_pred_5 = _3046 * _2827.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3055 = frontier_phi_75_pred;
                            _3054 = frontier_phi_75_pred_1;
                            _3053 = frontier_phi_75_pred_2;
                            _3052 = frontier_phi_75_pred_3;
                            _3051 = frontier_phi_75_pred_4;
                            _3050 = frontier_phi_75_pred_5;
                            _2757 = _3053 + _2770;
                            _2758 = _3054 + _2771;
                            _2759 = _3055 + _2772;
                            _2754 = _3050 + _2767;
                            _2755 = _3051 + _2768;
                            _2756 = _3052 + _2769;
                            if (_2774 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2767 = _2754;
                                _2768 = _2755;
                                _2769 = _2756;
                                _2770 = _2757;
                                _2771 = _2758;
                                _2772 = _2759;
                                _2773 = _2774;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2759;
                        frontier_phi_69_pred_1 = _2758;
                        frontier_phi_69_pred_2 = _2757;
                        frontier_phi_69_pred_3 = _2756;
                        frontier_phi_69_pred_4 = _2755;
                        frontier_phi_69_pred_5 = _2754;
                    }
                    _2426 = frontier_phi_69_pred;
                    _2424 = frontier_phi_69_pred_1;
                    _2422 = frontier_phi_69_pred_2;
                    _2420 = frontier_phi_69_pred_3;
                    _2418 = frontier_phi_69_pred_4;
                    _2416 = frontier_phi_69_pred_5;
                    uint _2561 = _2560 + 1u;
                    if (_2561 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2554 = _2416;
                        _2555 = _2418;
                        _2556 = _2420;
                        _2557 = _2422;
                        _2558 = _2424;
                        _2559 = _2426;
                        _2560 = _2561;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2426;
                frontier_phi_57_58_ladder_1 = _2424;
                frontier_phi_57_58_ladder_2 = _2422;
                frontier_phi_57_58_ladder_3 = _2420;
                frontier_phi_57_58_ladder_4 = _2418;
                frontier_phi_57_58_ladder_5 = _2416;
            }
            else
            {
                frontier_phi_57_58_ladder = _2313;
                frontier_phi_57_58_ladder_1 = _2311;
                frontier_phi_57_58_ladder_2 = _2309;
                frontier_phi_57_58_ladder_3 = _2307;
                frontier_phi_57_58_ladder_4 = _2305;
                frontier_phi_57_58_ladder_5 = _2303;
            }
            _2415 = frontier_phi_57_58_ladder_5;
            _2417 = frontier_phi_57_58_ladder_4;
            _2419 = frontier_phi_57_58_ladder_3;
            _2421 = frontier_phi_57_58_ladder_2;
            _2423 = frontier_phi_57_58_ladder_1;
            _2425 = frontier_phi_57_58_ladder;
        }
        float _2430 = isnan(1.0) ? _472 : (isnan(_472) ? 1.0 : min(_472, 1.0));
        _2213 = (_2430 * _2421) + _1650;
        _2215 = (_2430 * _2423) + _1652;
        _2217 = (_2430 * _2425) + _1654;
        _2219 = ((_2415 * _457) * _2430) + _1995;
        _2221 = ((_2417 * _459) * _2430) + _1997;
        _2223 = ((_2419 * _460) * _2430) + _1999;
    }
    else
    {
        _2213 = _1650;
        _2215 = _1652;
        _2217 = _1654;
        _2219 = _1995;
        _2221 = _1997;
        _2223 = _1999;
    }
    float _4072 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _4083 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _4094 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _4105 = isnan(0.0) ? _302 : (isnan(_302) ? 0.0 : max(_302, 0.0));
    float _2248 = cbInstanceData._m0[_431 + 6u].w * (isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0)));
    float _2253 = _390 / cbSceneParam._m0[86u].x;
    float _2254 = _391 / cbSceneParam._m0[86u].y;
    vec4 _2268 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2253, _2254, (log2((isnan(cbSceneParam._m0[77u].w) ? _323 : (isnan(_323) ? cbSceneParam._m0[77u].w : min(_323, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2270 = _2268.x;
    float _2271 = _2268.y;
    float _2272 = _2268.z;
    float _2273 = _2268.w;
    float _2365;
    float _2367;
    float _2369;
    float _2371;
    if (_323 > cbSceneParam._m0[78u].w)
    {
        float _2328 = isnan(_323) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _323 : min(cbSceneParam._m0[80u].w, _323));
        float _2329 = _2328 / _323;
        float _2340 = _2329 * _375;
        float _2341 = _376 * _2329;
        float _2342 = (-0.0) - _2341;
        float _2343 = _2329 * _377;
        float _2345 = (cbSceneParam._m0[77u].w * _2342) / _2328;
        float _2346 = _2345 + cbSceneParam._m0[79u].w;
        float _2347 = cbSceneParam._m0[79u].w - _2341;
        float _2353 = sqrt(((_2340 * _2340) + (_2341 * _2341)) + (_2343 * _2343));
        float _2356 = (1.0 - (cbSceneParam._m0[77u].w / _2328)) * _2353;
        float _2361 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2363 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2516;
        if (abs((_2342 - _2345) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2516 = ((((_2346 > 0.0) ? exp2(_2361 * _2346) : (2.0 - exp2(_2363 * _2346))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2356;
        }
        else
        {
            float _2476 = 1.0 / cbSceneParam._m0[80u].x;
            float _2477 = isnan(_2347) ? _2346 : (isnan(_2346) ? _2347 : max(_2346, _2347));
            float _2478 = isnan(_2347) ? _2346 : (isnan(_2346) ? _2347 : min(_2346, _2347));
            float _2487 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : min(_2477, 0.0));
            float _2488 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : min(_2478, 0.0));
            _2516 = ((abs(_2353 / _2342) * cbSceneParam._m0[80u].y) * ((((_2487 - _2488) * 2.0) - ((exp2(_2361 * (isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0)))) - exp2(_2361 * (isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0))))) * _2476)) - ((exp2(_2363 * _2487) - exp2(_2363 * _2488)) * _2476))) + (_2356 * cbSceneParam._m0[80u].z);
        }
        vec4 _2518 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2253, _2254, 1.0), 0.0);
        float _2527 = exp2((_2516 * (-1.44269502162933349609375)) * (1.0 - _2518.w));
        float _2528 = log2(_2527);
        float _2544 = log2(_2273);
        _2365 = (exp2(_2544 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2528 * cbSceneParam._m0[78u].x)) * _2518.x) / cbSceneParam._m0[78u].x)) + _2270;
        _2367 = (exp2(_2544 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2528 * cbSceneParam._m0[78u].y)) * _2518.y) / cbSceneParam._m0[78u].y)) + _2271;
        _2369 = (exp2(_2544 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2528 * cbSceneParam._m0[78u].z)) * _2518.z) / cbSceneParam._m0[78u].z)) + _2272;
        _2371 = _2527 * _2273;
    }
    else
    {
        _2365 = _2270;
        _2367 = _2271;
        _2369 = _2272;
        _2371 = _2273;
    }
    float _2383 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2384 = _2383 == 3.0;
    float _2385 = log2(_2371);
    float _2392 = exp2(_2385 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0))) * (_2213 + ((isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0))) * _472))) + ((_2219 + ((isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0))) * _1282)) * cbPerFrame._m0[3u].x));
    float _2393 = exp2(_2385 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0))) * (_2215 + ((isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0))) * _472))) + ((_2221 + ((isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0))) * _1282)) * cbPerFrame._m0[3u].x));
    float _2394 = exp2(_2385 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0))) * (_2217 + ((isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0))) * _472))) + ((_2223 + ((isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0))) * _1282)) * cbPerFrame._m0[3u].x));
    float _2403 = (_2383 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2403 * (_2384 ? _2392 : (_2392 + (cbSceneParam._m0[72u].w * _2365)));
    SV_Target.y = _2403 * (_2384 ? _2393 : (_2393 + (cbSceneParam._m0[72u].w * _2367)));
    SV_Target.z = _2403 * (_2384 ? _2394 : (_2394 + (cbSceneParam._m0[72u].w * _2369)));
    SV_Target.w = _2248;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2248;
}


