#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M1_Vatex_Alpha_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M1_Vatex_Alpha_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M1_Vatex_Alpha_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _896;
float _3572;
float _3573;
float _3574;
float _3575;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _196 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _203 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _204 = _203 * NORMAL.x;
    float _205 = _203 * NORMAL.y;
    float _206 = _203 * NORMAL.z;
    float _210 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _218;
    float _219;
    float _220;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _218 = (-0.0) - _204;
        _219 = (-0.0) - _205;
        _220 = (-0.0) - _206;
    }
    else
    {
        _218 = _204;
        _219 = _205;
        _220 = _206;
    }
    vec4 _240 = texture(sampler2D(M_AMSN_M1_Vatex_Alpha_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _246 = _240.w;
    float _247 = _240.x * cbMtdParam._m0[9u].x;
    float _248 = _240.y * cbMtdParam._m0[9u].y;
    float _249 = _240.z * cbMtdParam._m0[9u].z;
    float _250 = _246 * TEXCOORD_1.z;
    vec4 _262 = texture(sampler2D(M_AMSN_M1_Vatex_Alpha_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[2u].w));
    float _264 = _262.x;
    vec4 _276 = texture(sampler2D(M_AMSN_M1_Vatex_Alpha_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _280 = _276.z;
    float _284 = (_276.x * 2.0) + (-1.0);
    float _286 = (_276.y * 2.0) + (-1.0);
    float _287 = dot(vec2(_284, _286), vec2(_284, _286));
    float _3584 = isnan(0.0) ? _287 : (isnan(_287) ? 0.0 : max(_287, 0.0));
    float _293 = sqrt(1.0 - (isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0))));
    float _296 = fma(_293, _218, fma(_286, _210 * TANGENT.x, (_196 * _188) * _284));
    float _299 = fma(_293, _219, fma(_286, _210 * TANGENT.y, (_196 * _189) * _284));
    float _302 = fma(_293, _220, fma(_286, _210 * TANGENT.z, (_196 * _190) * _284));
    float _306 = inversesqrt(dot(vec3(_296, _299, _302), vec3(_296, _299, _302)));
    float _307 = _306 * _296;
    float _308 = _306 * _299;
    float _309 = _306 * _302;
    float _3595 = isnan(0.0) ? _250 : (isnan(_250) ? 0.0 : max(_250, 0.0));
    float _310 = isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0));
    float _3606 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _311 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
    float _3617 = isnan(0.0) ? _247 : (isnan(_247) ? 0.0 : max(_247, 0.0));
    float _3628 = isnan(0.0) ? _248 : (isnan(_248) ? 0.0 : max(_248, 0.0));
    float _3639 = isnan(0.0) ? _249 : (isnan(_249) ? 0.0 : max(_249, 0.0));
    float _3650 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _315 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
    float _331 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _373 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _383 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _373);
    float _384 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _373);
    float _385 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _373);
    float _389 = inversesqrt(dot(vec3(_383, _384, _385), vec3(_383, _384, _385)));
    float _390 = _383 * _389;
    float _391 = _384 * _389;
    float _392 = _385 * _389;
    vec4 _397 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _399 = _397.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _575 = sqrt(((_383 * _383) + (_384 * _384)) + (_385 * _385));
        float _581 = (cbMatDynParam._m0[5u].x * _575) + cbMatDynParam._m0[5u].y;
        float _3661 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
        float _582 = isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0));
        float _586 = (cbMatDynParam._m0[5u].z * _575) + cbMatDynParam._m0[5u].w;
        float _3672 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0))) - _582)) + _582) < ((_399 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _411 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _412 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _432 = fma(_309, cbSceneParam._m0[5u].z, fma(_308, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _307));
    float _435 = fma(_309, cbSceneParam._m0[6u].z, fma(_308, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _307));
    float _438 = fma(_309, cbSceneParam._m0[7u].z, fma(_308, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _307));
    uint _451 = uint(roundEven(NORMAL.w)) * 13u;
    uint _453 = _451 + 9u;
    uint _454 = _453 + uint(cbMatDynParam._m0[0u].w);
    float _460 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0)))) * cbInstanceData._m0[_454].x;
    float _461 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0)))) * cbInstanceData._m0[_454].y;
    float _462 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0)))) * cbInstanceData._m0[_454].z;
    float _3683 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _463 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
    float _3694 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _464 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
    float _3705 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _465 = isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0));
    float _466 = 1.0 - _315;
    float _467 = _463 * _466;
    float _468 = _464 * _466;
    float _469 = _465 * _466;
    float _474 = (_463 + (-0.039999999105930328369140625)) * _315;
    float _475 = (_464 + (-0.039999999105930328369140625)) * _315;
    float _476 = (_465 + (-0.039999999105930328369140625)) * _315;
    float _477 = _474 + 0.039999999105930328369140625;
    float _479 = _475 + 0.039999999105930328369140625;
    float _480 = _476 + 0.039999999105930328369140625;
    vec4 _489 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _411, cbSceneParam._m0[86u].y * _412));
    float _492 = _489.x * TEXCOORD_1.w;
    float _493 = dot(vec3(_307, _308, _309), vec3(_390, _391, _392));
    float _496 = _493 * 2.0;
    float _500 = (_496 * _307) - _390;
    float _501 = (_496 * _308) - _391;
    float _502 = (_496 * _309) - _392;
    float _506 = abs(dot(vec3(_390, _391, _392), vec3(_307, _308, _309)));
    float _3716 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _508 = sqrt(_311);
    float _521 = exp2((_508 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_508 * 3.0));
    float _527 = (1.0 - _521) * ((_508 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _528 = _521 * _508;
    float _556 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _560 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _564 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _895;
    float _897;
    float _898;
    float _899;
    float _900;
    float _901;
    float _902;
    float _903;
    float _904;
    float _905;
    float _906;
    float _907;
    float _908;
    float _909;
    float _910;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _620 = fma(_564, cbModelParam._m0[26u].z, fma(_560, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _556));
        float _624 = fma(_564, cbModelParam._m0[27u].z, fma(_560, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _556));
        float _628 = fma(_564, cbModelParam._m0[28u].z, fma(_560, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _556));
        float _653 = _556 + _307;
        float _654 = _560 + _308;
        float _655 = _564 + _309;
        float _665 = fma(_655, cbModelParam._m0[26u].z, fma(_654, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _653)) - _620;
        float _666 = fma(_655, cbModelParam._m0[27u].z, fma(_654, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _653)) - _624;
        float _667 = fma(_655, cbModelParam._m0[28u].z, fma(_654, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _653)) - _628;
        float _671 = inversesqrt(dot(vec3(_665, _666, _667), vec3(_665, _666, _667)));
        float _684 = ((_671 * _665) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_620 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _685 = ((_671 * _666) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_624 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _686 = ((_671 * _667) / cbModelParam._m0[34u].z) + ((((((_628 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _689 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_684, _685, _686), 0.0);
        vec4 _696 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_684, _685, _686), 0.0);
        vec4 _703 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_684, _685, _686), 0.0);
        vec4 _710 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_684, _685, _686), 0.0);
        float _723 = exp2((_689.w + (-0.5)) * 20.0) * 2.0;
        float _724 = _723 * (_689.x + (-0.5));
        float _725 = _723 * (_689.y + (-0.5));
        float _726 = _723 * (_689.z + (-0.5));
        float _733 = exp2((_696.w + (-0.5)) * 20.0) * 2.0;
        float _734 = _733 * (_696.x + (-0.5));
        float _735 = _733 * (_696.y + (-0.5));
        float _736 = _733 * (_696.z + (-0.5));
        float _743 = exp2((_703.w + (-0.5)) * 20.0) * 2.0;
        float _744 = _743 * (_703.x + (-0.5));
        float _745 = _743 * (_703.y + (-0.5));
        float _746 = _743 * (_703.z + (-0.5));
        float _753 = exp2((_710.w + (-0.5)) * 20.0) * 2.0;
        float _754 = _753 * (_710.x + (-0.5));
        float _755 = _753 * (_710.y + (-0.5));
        float _756 = _753 * (_710.z + (-0.5));
        float _757 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
        float _758 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
        float _759 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
        float _760 = _724 * 0.5;
        float _761 = _734 * 0.5;
        float _762 = _744 * 0.5;
        float _763 = dot(vec3(_760, _761, _762), vec3(_760, _761, _762));
        float _768 = (_763 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_763);
        float _777 = (dot(vec3(_307, _308, _309), vec3(_768 * _760, _768 * _761, _768 * _762)) + 1.0) * 0.5;
        float _3742 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
        float _787 = sqrt(((_761 * _761) + (_760 * _760)) + (_762 * _762)) / (_757 + 9.9999997473787516355514526367188e-06);
        float _3753 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
        float _788 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
        float _789 = _788 * 2.0;
        float _793 = (1.0 - _788) / (_788 + 1.0);
        float _3764 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
        float _794 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
        float _803 = ((((1.0 - _794) * (_789 + 2.0)) * exp2(log2(isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0))) * (_789 + 1.0))) + _794) * _757;
        float _804 = _725 * 0.5;
        float _805 = _735 * 0.5;
        float _806 = _745 * 0.5;
        float _807 = dot(vec3(_804, _805, _806), vec3(_804, _805, _806));
        float _812 = (_807 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_807);
        float _820 = (dot(vec3(_307, _308, _309), vec3(_812 * _804, _812 * _805, _812 * _806)) + 1.0) * 0.5;
        float _3775 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
        float _829 = sqrt(((_805 * _805) + (_804 * _804)) + (_806 * _806)) / (_758 + 9.9999997473787516355514526367188e-06);
        float _3786 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
        float _830 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
        float _831 = _830 * 2.0;
        float _835 = (1.0 - _830) / (_830 + 1.0);
        float _3797 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
        float _836 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
        float _845 = ((((1.0 - _836) * (_831 + 2.0)) * exp2(log2(isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0))) * (_831 + 1.0))) + _836) * _758;
        float _846 = _726 * 0.5;
        float _847 = _736 * 0.5;
        float _848 = _746 * 0.5;
        float _849 = dot(vec3(_846, _847, _848), vec3(_846, _847, _848));
        float _854 = (_849 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_849);
        float _862 = (dot(vec3(_307, _308, _309), vec3(_854 * _846, _854 * _847, _854 * _848)) + 1.0) * 0.5;
        float _3808 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
        float _871 = sqrt(((_847 * _847) + (_846 * _846)) + (_848 * _848)) / (_759 + 9.9999997473787516355514526367188e-06);
        float _3819 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
        float _872 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
        float _873 = _872 * 2.0;
        float _877 = (1.0 - _872) / (_872 + 1.0);
        float _3830 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
        float _878 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
        float _887 = ((((1.0 - _878) * (_873 + 2.0)) * exp2(log2(isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0))) * (_873 + 1.0))) + _878) * _759;
        _895 = _726;
        _897 = _725;
        _898 = _724;
        _899 = _736;
        _900 = _735;
        _901 = _734;
        _902 = _746;
        _903 = _745;
        _904 = _744;
        _905 = _759;
        _906 = _758;
        _907 = _757;
        _908 = cbModelParam._m0[36u].z * (isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0)));
        _909 = cbModelParam._m0[36u].z * (isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0)));
        _910 = cbModelParam._m0[36u].z * (isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0)));
    }
    else
    {
        _895 = _896;
        _897 = _896;
        _898 = _896;
        _899 = _896;
        _900 = _896;
        _901 = _896;
        _902 = _896;
        _903 = _896;
        _904 = _896;
        _905 = _896;
        _906 = _896;
        _907 = _896;
        _908 = 0.0;
        _909 = 0.0;
        _910 = 0.0;
    }
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _939 = fma(_564, cbModelParam._m0[30u].z, fma(_560, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _556));
        float _943 = fma(_564, cbModelParam._m0[31u].z, fma(_560, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _556));
        float _947 = fma(_564, cbModelParam._m0[32u].z, fma(_560, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _556));
        float _970 = _556 + _307;
        float _971 = _560 + _308;
        float _972 = _564 + _309;
        float _982 = fma(_972, cbModelParam._m0[30u].z, fma(_971, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _970)) - _939;
        float _983 = fma(_972, cbModelParam._m0[31u].z, fma(_971, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _970)) - _943;
        float _984 = fma(_972, cbModelParam._m0[32u].z, fma(_971, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _970)) - _947;
        float _988 = inversesqrt(dot(vec3(_982, _983, _984), vec3(_982, _983, _984)));
        float _1001 = ((_988 * _982) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_939 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1002 = ((_988 * _983) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_943 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1003 = ((_988 * _984) / cbModelParam._m0[35u].z) + ((((((_947 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1005 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1001, _1002, _1003), 0.0);
        vec4 _1012 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1001, _1002, _1003), 0.0);
        vec4 _1019 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1001, _1002, _1003), 0.0);
        vec4 _1026 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1001, _1002, _1003), 0.0);
        float _1038 = exp2((_1005.w + (-0.5)) * 20.0) * 2.0;
        float _1039 = _1038 * (_1005.x + (-0.5));
        float _1040 = _1038 * (_1005.y + (-0.5));
        float _1041 = _1038 * (_1005.z + (-0.5));
        float _1048 = exp2((_1012.w + (-0.5)) * 20.0) * 2.0;
        float _1049 = _1048 * (_1012.x + (-0.5));
        float _1050 = _1048 * (_1012.y + (-0.5));
        float _1051 = _1048 * (_1012.z + (-0.5));
        float _1058 = exp2((_1019.w + (-0.5)) * 20.0) * 2.0;
        float _1059 = _1058 * (_1019.x + (-0.5));
        float _1060 = _1058 * (_1019.y + (-0.5));
        float _1061 = _1058 * (_1019.z + (-0.5));
        float _1068 = exp2((_1026.w + (-0.5)) * 20.0) * 2.0;
        float _1069 = _1068 * (_1026.x + (-0.5));
        float _1070 = _1068 * (_1026.y + (-0.5));
        float _1071 = _1068 * (_1026.z + (-0.5));
        float _1072 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1073 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1074 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1075 = _1039 * 0.5;
        float _1076 = _1049 * 0.5;
        float _1077 = _1059 * 0.5;
        float _1078 = dot(vec3(_1075, _1076, _1077), vec3(_1075, _1076, _1077));
        float _1083 = (_1078 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1078);
        float _1091 = (dot(vec3(_307, _308, _309), vec3(_1083 * _1075, _1083 * _1076, _1083 * _1077)) + 1.0) * 0.5;
        float _3871 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1100 = sqrt(((_1076 * _1076) + (_1075 * _1075)) + (_1077 * _1077)) / (_1072 + 9.9999997473787516355514526367188e-06);
        float _3882 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1101 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
        float _1102 = _1101 * 2.0;
        float _1106 = (1.0 - _1101) / (_1101 + 1.0);
        float _3893 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1107 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
        float _1116 = ((((1.0 - _1107) * (_1102 + 2.0)) * exp2(log2(isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0))) * (_1102 + 1.0))) + _1107) * _1072;
        float _1117 = _1040 * 0.5;
        float _1118 = _1050 * 0.5;
        float _1119 = _1060 * 0.5;
        float _1120 = dot(vec3(_1117, _1118, _1119), vec3(_1117, _1118, _1119));
        float _1125 = (_1120 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1120);
        float _1133 = (dot(vec3(_307, _308, _309), vec3(_1125 * _1117, _1125 * _1118, _1125 * _1119)) + 1.0) * 0.5;
        float _3904 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1142 = sqrt(((_1118 * _1118) + (_1117 * _1117)) + (_1119 * _1119)) / (_1073 + 9.9999997473787516355514526367188e-06);
        float _3915 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1143 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
        float _1144 = _1143 * 2.0;
        float _1148 = (1.0 - _1143) / (_1143 + 1.0);
        float _3926 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1149 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
        float _1158 = ((((1.0 - _1149) * (_1144 + 2.0)) * exp2(log2(isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0))) * (_1144 + 1.0))) + _1149) * _1073;
        float _1159 = _1041 * 0.5;
        float _1160 = _1051 * 0.5;
        float _1161 = _1061 * 0.5;
        float _1162 = dot(vec3(_1159, _1160, _1161), vec3(_1159, _1160, _1161));
        float _1167 = (_1162 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1162);
        float _1175 = (dot(vec3(_307, _308, _309), vec3(_1167 * _1159, _1167 * _1160, _1167 * _1161)) + 1.0) * 0.5;
        float _3937 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1184 = sqrt(((_1160 * _1160) + (_1159 * _1159)) + (_1161 * _1161)) / (_1074 + 9.9999997473787516355514526367188e-06);
        float _3948 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1185 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
        float _1186 = _1185 * 2.0;
        float _1190 = (1.0 - _1185) / (_1185 + 1.0);
        float _3959 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1191 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
        float _1200 = ((((1.0 - _1191) * (_1186 + 2.0)) * exp2(log2(isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0))) * (_1186 + 1.0))) + _1191) * _1074;
        _1208 = _1041;
        _1209 = _1040;
        _1210 = _1039;
        _1211 = _1051;
        _1212 = _1050;
        _1213 = _1049;
        _1214 = _1061;
        _1215 = _1060;
        _1216 = _1059;
        _1217 = _1074;
        _1218 = _1073;
        _1219 = _1072;
        _1220 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0)));
        _1221 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0)));
        _1222 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0)));
    }
    else
    {
        _1208 = _896;
        _1209 = _896;
        _1210 = _896;
        _1211 = _896;
        _1212 = _896;
        _1213 = _896;
        _1214 = _896;
        _1215 = _896;
        _1216 = _896;
        _1217 = _896;
        _1218 = _896;
        _1219 = _896;
        _1220 = 0.0;
        _1221 = 0.0;
        _1222 = 0.0;
    }
    float _1232 = (cbModelParam._m0[1u].x * (_1220 - _908)) + _908;
    float _1233 = (cbModelParam._m0[1u].x * (_1221 - _909)) + _909;
    float _1234 = (cbModelParam._m0[1u].x * (_1222 - _910)) + _910;
    float _1255 = fma(_1234, cbSceneParam._m0[89u].z, fma(_1233, cbSceneParam._m0[89u].y, _1232 * cbSceneParam._m0[89u].x));
    float _1258 = fma(_1234, cbSceneParam._m0[90u].z, fma(_1233, cbSceneParam._m0[90u].y, _1232 * cbSceneParam._m0[90u].x));
    float _1261 = fma(_1234, cbSceneParam._m0[91u].z, fma(_1233, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1232));
    float _1276 = _500 * 0.5;
    float _1277 = _501 * 0.5;
    float _1278 = _502 * 0.5;
    float _1279 = dot(vec4(_1276, _1277, _1278, 1.0), vec4(_1210, _1213, _1216, _1219));
    float _1282 = dot(vec4(_1276, _1277, _1278, 1.0), vec4(_1209, _1212, _1215, _1218));
    float _1285 = dot(vec4(_1276, _1277, _1278, 1.0), vec4(_1208, _1211, _1214, _1217));
    float _1319;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1292 = dot(vec4(_1276, _1277, _1278, 1.0), vec4(_895, _899, _902, _905));
        float _1296 = dot(vec4(_1276, _1277, _1278, 1.0), vec4(_897, _900, _903, _906));
        float _1300 = dot(vec4(_1276, _1277, _1278, 1.0), vec4(_898, _901, _904, _907));
        float _1307 = dot(vec4(cbModelParam._m0[39u]), vec4(_1276, _1277, _1278, 1.0));
        _1319 = dot(vec3(isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0)), isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0)), isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1307) ? 0.0 : (isnan(0.0) ? _1307 : max(0.0, _1307))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1319 = 1.0;
    }
    float _1330;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1321 = dot(vec4(cbModelParam._m0[40u]), vec4(_1276, _1277, _1278, 1.0));
        _1330 = dot(vec3(isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0)), isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0)), isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1321) ? 0.0 : (isnan(0.0) ? _1321 : max(0.0, _1321))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1330 = 1.0;
    }
    float _1334 = (_1330 * cbModelParam._m0[1u].x) + (_1319 * (1.0 - cbModelParam._m0[1u].x));
    float _1344 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _311);
    float _1345 = isnan(_1344) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1344 : min(cbModelParam._m0[25u].z, _1344));
    float _1427;
    float _1429;
    float _1431;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1394 = fma(_564, cbModelParam._m0[13u].z, fma(_560, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _556)) + cbModelParam._m0[13u].w;
        float _1398 = fma(_564, cbModelParam._m0[14u].z, fma(_560, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _556)) + cbModelParam._m0[14u].w;
        float _1402 = fma(_564, cbModelParam._m0[15u].z, fma(_560, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _556)) + cbModelParam._m0[15u].w;
        float _1405 = fma(_502, cbModelParam._m0[13u].z, fma(_501, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _500));
        float _1408 = fma(_502, cbModelParam._m0[14u].z, fma(_501, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _500));
        float _1411 = fma(_502, cbModelParam._m0[15u].z, fma(_501, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _500));
        float _1439;
        if (_1405 > 0.0)
        {
            _1439 = abs((1.0 - _1394) / _1405);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1405 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1394 + 1.0) / _1405);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1439 = frontier_phi_19_17_ladder;
        }
        float _1615;
        if (_1408 > 0.0)
        {
            _1615 = abs((1.0 - _1398) / _1408);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1408 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1398 + 1.0) / _1408);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1615 = frontier_phi_28_24_ladder;
        }
        float _1911;
        if (_1411 > 0.0)
        {
            _1911 = abs((1.0 - _1402) / _1411);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1411 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1402 + 1.0) / _1411);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1911 = frontier_phi_40_35_ladder;
        }
        float _1913 = isnan(_1615) ? _1439 : (isnan(_1439) ? _1615 : min(_1439, _1615));
        float _1914 = isnan(_1911) ? _1913 : (isnan(_1913) ? _1911 : min(_1913, _1911));
        float _1918 = (_1914 * _1405) + _1394;
        float _1919 = (_1914 * _1408) + _1398;
        float _1920 = (_1914 * _1411) + _1402;
        float _1921 = _1914 * 9.9999997473787516355514526367188e-05;
        float _1923 = (-1.0) - _1921;
        float _1925 = _1921 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1920 > _1925) || ((_1920 < _1923) || ((_1919 > _1925) || ((_1919 < _1923) || ((_1918 < _1923) || (_1918 > _1925))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2065 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1920, cbModelParam._m0[9u].z, fma(_1919, cbModelParam._m0[9u].y, _1918 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1920, cbModelParam._m0[10u].z, fma(_1919, cbModelParam._m0[10u].y, _1918 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1920, cbModelParam._m0[11u].z, fma(_1919, cbModelParam._m0[11u].y, _1918 * cbModelParam._m0[11u].x))), _1345);
            frontier_phi_18_40_ladder = _2065.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2065.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2065.x * cbModelParam._m0[1u].y;
        }
        _1427 = frontier_phi_18_40_ladder_2;
        _1429 = frontier_phi_18_40_ladder_1;
        _1431 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1415 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_500, _501, _502), _1345);
        _1427 = _1415.x * cbModelParam._m0[1u].y;
        _1429 = _1415.y * cbModelParam._m0[1u].y;
        _1431 = _1415.z * cbModelParam._m0[1u].y;
    }
    float _1435 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _311);
    float _1436 = isnan(_1435) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1435 : min(cbModelParam._m0[25u].w, _1435));
    float _1529;
    float _1531;
    float _1533;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1493 = fma(_564, cbModelParam._m0[21u].z, fma(_560, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _556)) + cbModelParam._m0[21u].w;
        float _1497 = fma(_564, cbModelParam._m0[22u].z, fma(_560, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _556)) + cbModelParam._m0[22u].w;
        float _1501 = fma(_564, cbModelParam._m0[23u].z, fma(_560, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _556)) + cbModelParam._m0[23u].w;
        float _1504 = fma(_502, cbModelParam._m0[21u].z, fma(_501, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _500));
        float _1507 = fma(_502, cbModelParam._m0[22u].z, fma(_501, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _500));
        float _1510 = fma(_502, cbModelParam._m0[23u].z, fma(_501, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _500));
        float _1620;
        if (_1504 > 0.0)
        {
            _1620 = abs((1.0 - _1493) / _1504);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1504 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1493 + 1.0) / _1504);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1620 = frontier_phi_30_26_ladder;
        }
        float _1938;
        if (_1507 > 0.0)
        {
            _1938 = abs((1.0 - _1497) / _1507);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1507 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1497 + 1.0) / _1507);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1938 = frontier_phi_42_37_ladder;
        }
        float _2276;
        if (_1510 > 0.0)
        {
            _2276 = abs((1.0 - _1501) / _1510);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1510 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1501 + 1.0) / _1510);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2276 = frontier_phi_52_49_ladder;
        }
        float _2278 = isnan(_1938) ? _1620 : (isnan(_1620) ? _1938 : min(_1620, _1938));
        float _2279 = isnan(_2276) ? _2278 : (isnan(_2278) ? _2276 : min(_2278, _2276));
        float _2283 = (_2279 * _1504) + _1493;
        float _2284 = (_2279 * _1507) + _1497;
        float _2285 = (_2279 * _1510) + _1501;
        float _2286 = _2279 * 9.9999997473787516355514526367188e-05;
        float _2287 = (-1.0) - _2286;
        float _2289 = _2286 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2285 > _2289) || ((_2285 < _2287) || ((_2284 > _2289) || ((_2284 < _2287) || ((_2283 < _2287) || (_2283 > _2289))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2407 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2285, cbModelParam._m0[17u].z, fma(_2284, cbModelParam._m0[17u].y, _2283 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2285, cbModelParam._m0[18u].z, fma(_2284, cbModelParam._m0[18u].y, _2283 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2285, cbModelParam._m0[19u].z, fma(_2284, cbModelParam._m0[19u].y, _2283 * cbModelParam._m0[19u].x))), _1436);
            frontier_phi_27_52_ladder = _2407.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2407.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2407.x * cbModelParam._m0[1u].z;
        }
        _1529 = frontier_phi_27_52_ladder_2;
        _1531 = frontier_phi_27_52_ladder_1;
        _1533 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1513 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_500, _501, _502), _1436);
        _1529 = _1513.x * cbModelParam._m0[1u].z;
        _1531 = _1513.y * cbModelParam._m0[1u].z;
        _1533 = _1513.z * cbModelParam._m0[1u].z;
    }
    float _1546 = (((_527 * _477) + _528) * _492) * ((cbModelParam._m0[1u].w * (_1529 - _1427)) + _1427);
    float _1548 = (((_527 * _479) + _528) * _492) * ((cbModelParam._m0[1u].w * (_1531 - _1429)) + _1429);
    float _1550 = (((_527 * _480) + _528) * _492) * ((cbModelParam._m0[1u].w * (_1533 - _1431)) + _1431);
    float _1553 = fma(_1550, cbSceneParam._m0[89u].z, fma(_1548, cbSceneParam._m0[89u].y, _1546 * cbSceneParam._m0[89u].x));
    float _1556 = fma(_1550, cbSceneParam._m0[90u].z, fma(_1548, cbSceneParam._m0[90u].y, _1546 * cbSceneParam._m0[90u].x));
    float _1559 = fma(_1550, cbSceneParam._m0[91u].z, fma(_1548, cbSceneParam._m0[91u].y, _1546 * cbSceneParam._m0[91u].x));
    float _1594 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1598 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1602 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1606 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1607 = _1594 / _1606;
    float _1608 = _1598 / _1606;
    float _1609 = _1602 / _1606;
    float _1756;
    float _1757;
    float _1758;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1636 = ((uint(_1609 > cbSceneParam._m0[59u].y) + uint(_1609 > cbSceneParam._m0[59u].x)) + uint(_1609 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1637 = _1636 + 43u;
        uint _1645 = _1636 + 44u;
        uint _1653 = _1636 + 45u;
        uint _1661 = _1636 + 46u;
        float _1672 = fma(_1606, cbSceneParam._m0[_1637].w, fma(_1602, cbSceneParam._m0[_1637].z, fma(_1598, cbSceneParam._m0[_1637].y, _1594 * cbSceneParam._m0[_1637].x)));
        float _1676 = fma(_1606, cbSceneParam._m0[_1645].w, fma(_1602, cbSceneParam._m0[_1645].z, fma(_1598, cbSceneParam._m0[_1645].y, _1594 * cbSceneParam._m0[_1645].x)));
        float _1684 = fma(_1606, cbSceneParam._m0[_1661].w, fma(_1602, cbSceneParam._m0[_1661].z, fma(_1598, cbSceneParam._m0[_1661].y, _1594 * cbSceneParam._m0[_1661].x)));
        float _1689 = cbSceneParam._m0[33u].z * _1684;
        float _1691 = cbSceneParam._m0[33u].w * _1684;
        float _1694 = fma(_1606, cbSceneParam._m0[_1653].w, fma(_1602, cbSceneParam._m0[_1653].z, fma(_1598, cbSceneParam._m0[_1653].y, _1594 * cbSceneParam._m0[_1653].x))) / _1684;
        float _1742 = (cbSceneParam._m0[33u].x - sqrt(((_1608 * _1608) + (_1607 * _1607)) + (_1609 * _1609))) * cbSceneParam._m0[33u].y;
        float _4085 = isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0));
        float _1749 = (isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1689 + _1672) / _1684, (_1691 + _1676) / _1684), _1694), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1691 + _1672) / _1684, (_1676 - _1689) / _1684), _1694), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1672 - _1689) / _1684, (_1676 - _1691) / _1684), _1694), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1672 - _1691) / _1684, (_1689 + _1676) / _1684), _1694), 0.0)).x), vec4(0.25)));
        _1756 = 1.0 - (_1749 * cbSceneParam._m0[34u].x);
        _1757 = 1.0 - (_1749 * cbSceneParam._m0[34u].y);
        _1758 = 1.0 - (_1749 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1756 = 1.0;
        _1757 = 1.0;
        _1758 = 1.0;
    }
    float _1822;
    float _1824;
    float _1826;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1810 = fma(_1606, cbSceneParam._m0[63u].w, fma(_1602, cbSceneParam._m0[63u].z, fma(_1598, cbSceneParam._m0[63u].y, _1594 * cbSceneParam._m0[63u].x)));
        float _1811 = fma(_1606, cbSceneParam._m0[60u].w, fma(_1602, cbSceneParam._m0[60u].z, fma(_1598, cbSceneParam._m0[60u].y, _1594 * cbSceneParam._m0[60u].x))) / _1810;
        float _1812 = fma(_1606, cbSceneParam._m0[61u].w, fma(_1602, cbSceneParam._m0[61u].z, fma(_1598, cbSceneParam._m0[61u].y, _1594 * cbSceneParam._m0[61u].x))) / _1810;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1811 >= cbSceneParam._m0[64u].x) && (_1812 >= cbSceneParam._m0[64u].y)) && (_1811 <= cbSceneParam._m0[64u].z)) && (_1812 <= cbSceneParam._m0[64u].w))
        {
            float _1951 = fma(_1606, cbSceneParam._m0[62u].w, fma(_1602, cbSceneParam._m0[62u].z, fma(_1598, cbSceneParam._m0[62u].y, _1594 * cbSceneParam._m0[62u].x))) / _1810;
            float _1955 = isnan(cbSceneParam._m0[41u].w) ? _1951 : (isnan(_1951) ? cbSceneParam._m0[41u].w : max(_1951, cbSceneParam._m0[41u].w));
            float _1998 = (cbSceneParam._m0[33u].x - sqrt(((_1608 * _1608) + (_1607 * _1607)) + (_1609 * _1609))) * cbSceneParam._m0[33u].y;
            float _4101 = isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0));
            float _2005 = (isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1811, cbSceneParam._m0[33u].w + _1812), _1955), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1811, _1812 - cbSceneParam._m0[33u].z), _1955), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1811 - cbSceneParam._m0[33u].z, _1812 - cbSceneParam._m0[33u].w), _1955), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1811 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1812), _1955), 0.0)).x), vec4(0.25)));
            float _2009 = 1.0 - (_2005 * cbSceneParam._m0[34u].x);
            float _2010 = 1.0 - (_2005 * cbSceneParam._m0[34u].y);
            float _2011 = 1.0 - (_2005 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2010) ? _1757 : (isnan(_1757) ? _2010 : min(_1757, _2010));
            frontier_phi_39_38_ladder_1 = isnan(_2009) ? _1756 : (isnan(_1756) ? _2009 : min(_1756, _2009));
            frontier_phi_39_38_ladder_2 = isnan(_2011) ? _1758 : (isnan(_1758) ? _2011 : min(_1758, _2011));
        }
        else
        {
            frontier_phi_39_38_ladder = _1757;
            frontier_phi_39_38_ladder_1 = _1756;
            frontier_phi_39_38_ladder_2 = _1758;
        }
        _1822 = frontier_phi_39_38_ladder_1;
        _1824 = frontier_phi_39_38_ladder;
        _1826 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _1822 = _1756;
        _1824 = _1757;
        _1826 = _1758;
    }
    uvec4 _1831 = floatBitsToUint(cbInstanceData._m0[_451 + 5u]);
    uint _1833 = _1831.x * 14u;
    uint _1834 = _1833 + 13u;
    float _1841 = _492 + (-1.0);
    float _1846 = (cbLight._m0[_1834].x * _1841) + 1.0;
    float _1847 = (cbLight._m0[_1834].y * _1841) + 1.0;
    float _1848 = (cbLight._m0[_1834].z * _1841) + 1.0;
    float _1849 = (cbLight._m0[_1834].w * _1841) + 1.0;
    uint _1850 = _1833 + 5u;
    float _1856 = isnan(1.0) ? _1847 : (isnan(_1847) ? 1.0 : min(_1847, 1.0));
    uint _1860 = _1833 + 4u;
    float _1870 = isnan(1.0) ? _1846 : (isnan(_1846) ? 1.0 : min(_1846, 1.0));
    uint _1874 = _1833 | 1u;
    float _1885 = dot(vec3(cbLight._m0[_1833].xyz), vec3(_307, _308, _309));
    float _1888 = dot(vec3(cbLight._m0[_1874].xyz), vec3(_307, _308, _309));
    float _4137 = isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0));
    float _4148 = isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0));
    float _1893 = (isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0))) * 0.3183098733425140380859375;
    float _1895 = (isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0))) * 0.3183098733425140380859375;
    float _1902 = ((cbLight._m0[_1850].x * _1856) * _1895) + (((cbLight._m0[_1860].x * _1822) * _1870) * _1893);
    float _1903 = ((_1856 * cbLight._m0[_1850].y) * _1895) + (((cbLight._m0[_1860].y * _1824) * _1870) * _1893);
    float _1904 = ((_1856 * cbLight._m0[_1850].z) * _1895) + (((cbLight._m0[_1860].z * _1826) * _1870) * _1893);
    uvec4 _1908 = floatBitsToUint(cbLight._m0[_1833 + 12u]);
    bool _1910 = _1908.x == 0u;
    float _2012;
    float _2014;
    float _2016;
    if (_1910)
    {
        _2012 = _1902;
        _2014 = _1903;
        _2016 = _1904;
    }
    else
    {
        uint _2020 = _1833 + 6u;
        float _2036 = (dot(vec3(cbLight._m0[_1833 + 2u].xyz), vec3(_307, _308, _309)) * 0.5) + 0.5;
        float _2037 = _2036 * _2036;
        float _4159 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
        float _2038 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
        float _2039 = isnan(1.0) ? _1848 : (isnan(_1848) ? 1.0 : min(_1848, 1.0));
        _2012 = (((cbLight._m0[_2020].x * 0.3183098733425140380859375) * _2038) * _2039) + _1902;
        _2014 = (((cbLight._m0[_2020].y * 0.3183098733425140380859375) * _2038) * _2039) + _1903;
        _2016 = (((cbLight._m0[_2020].z * 0.3183098733425140380859375) * _2038) * _2039) + _1904;
    }
    bool _2019 = _1908.y == 0u;
    float _2074;
    float _2076;
    float _2078;
    if (_2019)
    {
        _2074 = _2012;
        _2076 = _2014;
        _2078 = _2016;
    }
    else
    {
        uint _2247 = _1833 + 7u;
        float _2263 = (dot(vec3(cbLight._m0[_1833 + 3u].xyz), vec3(_307, _308, _309)) * 0.5) + 0.5;
        float _2264 = _2263 * _2263;
        float _4175 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
        float _2265 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
        float _2266 = isnan(1.0) ? _1849 : (isnan(_1849) ? 1.0 : min(_1849, 1.0));
        _2074 = (((cbLight._m0[_2247].x * 0.3183098733425140380859375) * _2265) * _2266) + _2012;
        _2076 = (((cbLight._m0[_2247].y * 0.3183098733425140380859375) * _2265) * _2266) + _2014;
        _2078 = (((cbLight._m0[_2247].z * 0.3183098733425140380859375) * _2265) * _2266) + _2016;
    }
    uint _2081 = _1833 + 8u;
    float _2094 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1833].w)) * _311) * 0.949999988079071044921875);
    float _2095 = _2094 * _2094;
    float _2096 = cbLight._m0[_1833].x + _390;
    float _2097 = cbLight._m0[_1833].y + _391;
    float _2098 = cbLight._m0[_1833].z + _392;
    float _2102 = inversesqrt(dot(vec3(_2096, _2097, _2098), vec3(_2096, _2097, _2098)));
    float _2103 = _2102 * _2096;
    float _2104 = _2102 * _2097;
    float _2105 = _2102 * _2098;
    float _2106 = dot(vec3(_307, _308, _309), vec3(cbLight._m0[_1833].xyz));
    float _4191 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
    float _2109 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
    float _4202 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _2110 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
    float _2111 = dot(vec3(_307, _308, _309), vec3(_2103, _2104, _2105));
    float _4213 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
    float _2114 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
    float _2115 = dot(vec3(cbLight._m0[_1833].xyz), vec3(_2103, _2104, _2105));
    float _4224 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
    float _2119 = _2095 * _2095;
    float _2123 = ((_2114 * _2114) * (_2119 + (-1.0))) + 1.0;
    float _2131 = exp2(log2(1.0 - (isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0)))) * 5.0);
    float _2132 = 0.959999978542327880859375 - _474;
    float _2134 = 0.959999978542327880859375 - _475;
    float _2135 = 0.959999978542327880859375 - _476;
    float _2142 = 1.0 - _2095;
    float _2153 = (0.5 / (((_2110 * ((_2109 * _2142) + _2095)) + 9.9999999392252902907785028219223e-09) + (((_2110 * _2142) + _2095) * _2109))) * _2109;
    float _4235 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
    float _2155 = (isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0))) * (_2119 / ((_2123 * _2123) * 3.141590118408203125));
    uint _2169 = _1833 + 9u;
    float _2180 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1874].w)) * _311) * 0.949999988079071044921875);
    float _2181 = _2180 * _2180;
    float _2182 = cbLight._m0[_1874].x + _390;
    float _2183 = cbLight._m0[_1874].y + _391;
    float _2184 = cbLight._m0[_1874].z + _392;
    float _2188 = inversesqrt(dot(vec3(_2182, _2183, _2184), vec3(_2182, _2183, _2184)));
    float _2189 = _2188 * _2182;
    float _2190 = _2188 * _2183;
    float _2191 = _2188 * _2184;
    float _2192 = dot(vec3(_307, _308, _309), vec3(cbLight._m0[_1874].xyz));
    float _4246 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
    float _2195 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
    float _2196 = dot(vec3(_307, _308, _309), vec3(_2189, _2190, _2191));
    float _4257 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
    float _2199 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
    float _2200 = dot(vec3(cbLight._m0[_1874].xyz), vec3(_2189, _2190, _2191));
    float _4268 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
    float _2204 = _2181 * _2181;
    float _2208 = ((_2199 * _2199) * (_2204 + (-1.0))) + 1.0;
    float _2215 = exp2(log2(1.0 - (isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0)))) * 5.0);
    float _2222 = 1.0 - _2181;
    float _2232 = (0.5 / (((_2110 * ((_2195 * _2222) + _2181)) + 9.9999999392252902907785028219223e-09) + (((_2110 * _2222) + _2181) * _2195))) * _2195;
    float _4279 = isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0));
    float _2234 = (isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0))) * (_2204 / ((_2208 * _2208) * 3.141590118408203125));
    float _2244 = (((((_2215 * _2132) + _477) * cbLight._m0[_2169].x) * _2234) * _1856) + ((((cbLight._m0[_2081].x * _1822) * ((_2131 * _2132) + _477)) * _2155) * _1870);
    float _2245 = (((((_2215 * _2134) + _479) * cbLight._m0[_2169].y) * _2234) * _1856) + ((((cbLight._m0[_2081].y * _1824) * ((_2131 * _2134) + _479)) * _2155) * _1870);
    float _2246 = (((((_2215 * _2135) + _480) * cbLight._m0[_2169].z) * _2234) * _1856) + ((((cbLight._m0[_2081].z * _1826) * ((_2131 * _2135) + _480)) * _2155) * _1870);
    float _2302;
    float _2304;
    float _2306;
    if (_1910)
    {
        _2302 = _2244;
        _2304 = _2245;
        _2306 = _2246;
    }
    else
    {
        uint _2308 = _1833 + 2u;
        uint _2312 = _1833 + 10u;
        float _2326 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2308].w)) * _311) * 0.949999988079071044921875);
        float _2327 = _2326 * _2326;
        float _2328 = cbLight._m0[_2308].x + _390;
        float _2329 = cbLight._m0[_2308].y + _391;
        float _2330 = cbLight._m0[_2308].z + _392;
        float _2334 = inversesqrt(dot(vec3(_2328, _2329, _2330), vec3(_2328, _2329, _2330)));
        float _2335 = _2334 * _2328;
        float _2336 = _2334 * _2329;
        float _2337 = _2334 * _2330;
        float _2338 = dot(vec3(_307, _308, _309), vec3(cbLight._m0[_2308].xyz));
        float _4290 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
        float _2341 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
        float _2342 = dot(vec3(_307, _308, _309), vec3(_2335, _2336, _2337));
        float _4301 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
        float _2345 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
        float _2346 = dot(vec3(cbLight._m0[_2308].xyz), vec3(_2335, _2336, _2337));
        float _4312 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
        float _2350 = _2327 * _2327;
        float _2354 = ((_2345 * _2345) * (_2350 + (-1.0))) + 1.0;
        float _2361 = exp2(log2(1.0 - (isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0)))) * 5.0);
        float _2368 = 1.0 - _2327;
        float _2378 = (0.5 / (((_2110 * ((_2341 * _2368) + _2327)) + 9.9999999392252902907785028219223e-09) + (((_2110 * _2368) + _2327) * _2341))) * _2341;
        float _4323 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
        float _2380 = (isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0))) * (_2350 / ((_2354 * _2354) * 3.141590118408203125));
        float _2381 = isnan(1.0) ? _1848 : (isnan(_1848) ? 1.0 : min(_1848, 1.0));
        _2302 = (((((_2361 * _2132) + _477) * cbLight._m0[_2312].x) * _2380) * _2381) + _2244;
        _2304 = (((((_2361 * _2134) + _479) * cbLight._m0[_2312].y) * _2380) * _2381) + _2245;
        _2306 = (((((_2361 * _2135) + _480) * cbLight._m0[_2312].z) * _2380) * _2381) + _2246;
    }
    float _2412;
    float _2414;
    float _2416;
    if (_2019)
    {
        _2412 = _2302;
        _2414 = _2304;
        _2416 = _2306;
    }
    else
    {
        uint _2423 = _1833 + 3u;
        uint _2427 = _1833 + 11u;
        float _2441 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2423].w)) * _311) * 0.949999988079071044921875);
        float _2442 = _2441 * _2441;
        float _2443 = cbLight._m0[_2423].x + _390;
        float _2444 = cbLight._m0[_2423].y + _391;
        float _2445 = cbLight._m0[_2423].z + _392;
        float _2449 = inversesqrt(dot(vec3(_2443, _2444, _2445), vec3(_2443, _2444, _2445)));
        float _2450 = _2449 * _2443;
        float _2451 = _2449 * _2444;
        float _2452 = _2449 * _2445;
        float _2453 = dot(vec3(_307, _308, _309), vec3(cbLight._m0[_2423].xyz));
        float _4339 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
        float _2456 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
        float _2457 = dot(vec3(_307, _308, _309), vec3(_2450, _2451, _2452));
        float _4350 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
        float _2460 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
        float _2461 = dot(vec3(cbLight._m0[_2423].xyz), vec3(_2450, _2451, _2452));
        float _4361 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
        float _2465 = _2442 * _2442;
        float _2469 = ((_2460 * _2460) * (_2465 + (-1.0))) + 1.0;
        float _2476 = exp2(log2(1.0 - (isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0)))) * 5.0);
        float _2483 = 1.0 - _2442;
        float _2493 = (0.5 / (((_2110 * ((_2456 * _2483) + _2442)) + 9.9999999392252902907785028219223e-09) + (((_2110 * _2483) + _2442) * _2456))) * _2456;
        float _4372 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
        float _2495 = (isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0))) * (_2465 / ((_2469 * _2469) * 3.141590118408203125));
        float _2496 = isnan(1.0) ? _1849 : (isnan(_1849) ? 1.0 : min(_1849, 1.0));
        _2412 = (((((_2476 * _2132) + _477) * cbLight._m0[_2427].x) * _2495) * _2496) + _2302;
        _2414 = (((((_2476 * _2134) + _479) * cbLight._m0[_2427].y) * _2495) * _2496) + _2304;
        _2416 = (((((_2476 * _2135) + _480) * cbLight._m0[_2427].z) * _2495) * _2496) + _2306;
    }
    float _2561;
    float _2563;
    float _2565;
    float _2567;
    float _2569;
    float _2571;
    if (_1831.y == 0u)
    {
        uvec4 _2517 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2518 = _2517.x;
        uint _2529 = uint((float(_2517.y) * floor(float(uint(cbSceneParam._m0[85u].y * _412) / _2518))) + floor(float(uint(cbSceneParam._m0[85u].x * _411) / _2518)));
        float _2539 = (log2(_1609 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2540 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0));
        uint _2543 = uint(isnan(14.0) ? _2540 : (isnan(_2540) ? 14.0 : min(_2540, 14.0)));
        uvec4 _2548 = texelFetch(g_lightClusterGridBuffer, int(((_2543 << 2u) + (_2529 << 6u)) >> 2u));
        uint _2549 = _2548.x;
        uint _2550 = _2517.z;
        float _2630;
        float _2632;
        float _2634;
        float _2636;
        float _2638;
        float _2640;
        if (((((1u << ((_2550 >> 4u) & 15u)) + 4294967295u) & _2549) == 0u) || ((_2550 & 240u) == 0u))
        {
            _2630 = 0.0;
            _2632 = 0.0;
            _2634 = 0.0;
            _2636 = 0.0;
            _2638 = 0.0;
            _2640 = 0.0;
        }
        else
        {
            float _2631;
            float _2633;
            float _2635;
            float _2637;
            float _2639;
            float _2641;
            float _2782 = 0.0;
            float _2783 = 0.0;
            float _2784 = 0.0;
            float _2785 = 0.0;
            float _2786 = 0.0;
            float _2787 = 0.0;
            uint _2788 = 0u;
            uint _2797;
            bool _2798;
            for (;;)
            {
                _2797 = texelFetch(g_lightClassification, int((((_2543 << 5u) + (_2529 << 9u)) + (_2788 << 2u)) >> 2u)).x;
                _2798 = _2797 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_2798)
                {
                    frontier_phi_73_pred = _2787;
                    frontier_phi_73_pred_1 = _2786;
                    frontier_phi_73_pred_2 = _2785;
                    frontier_phi_73_pred_3 = _2784;
                    frontier_phi_73_pred_4 = _2783;
                    frontier_phi_73_pred_5 = _2782;
                }
                else
                {
                    float _2927;
                    float _2928;
                    float _2929;
                    float _2930;
                    float _2931;
                    float _2932;
                    uint _2933;
                    _2927 = _2782;
                    _2928 = _2783;
                    _2929 = _2784;
                    _2930 = _2785;
                    _2931 = _2786;
                    _2932 = _2787;
                    _2933 = _2797;
                    float _2854;
                    float _2855;
                    float _2856;
                    float _2857;
                    float _2858;
                    float _2859;
                    for (;;)
                    {
                        uint _2937 = uint(findLSB(_2933)) + (_2788 << 5u);
                        uint _2934 = (_2933 + 4294967295u) & _2933;
                        uint _2939 = _2937 * 48u;
                        vec4 _2953 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2939)).x, texelFetch(g_PointLightRenderingBuffer, int(_2939 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2939 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2939 + 3u)).x));
                        uint _2959 = (_2937 * 48u) + 4u;
                        vec4 _2972 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2959)).x, texelFetch(g_PointLightRenderingBuffer, int(_2959 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2959 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2959 + 3u)).x));
                        uint _2978 = (_2937 * 48u) + 8u;
                        vec3 _2989 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2978)).x, texelFetch(g_PointLightRenderingBuffer, int(_2978 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2978 + 2u)).x));
                        float _2993 = _2953.x - _1607;
                        float _2994 = _2953.y - _1608;
                        float _2995 = _2953.z - _1609;
                        float _2996 = dot(vec3(_2993, _2994, _2995), vec3(_2993, _2994, _2995));
                        float _2999 = inversesqrt(_2996);
                        float _3000 = _2999 * _2993;
                        float _3001 = _2999 * _2994;
                        float _3002 = _2999 * _2995;
                        float _3003 = dot(vec3(_432, _435, _438), vec3(_3000, _3001, _3002));
                        float _3008 = 1.0 - (_2996 * _2953.w);
                        float _4398 = isnan(0.0) ? _3008 : (isnan(_3008) ? 0.0 : max(_3008, 0.0));
                        float _3009 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
                        float _3010 = sqrt(_2996) * _2972.w;
                        float _3013 = 1.39999997615814208984375 / (_3010 + 1.39999997615814208984375);
                        float _3014 = _3013 * _3013;
                        float _3017 = ((1.0 - _3014) * _3003) + _3014;
                        float _3020 = _3010 * _3010;
                        float _3024 = ((isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : max(_3017, 0.0))) * _3009) / ((_3020 * 0.699999988079071044921875) + 1.0);
                        float _3028 = (-0.0) - _1607;
                        float _3029 = (-0.0) - _1608;
                        float _3030 = (-0.0) - _1609;
                        float _3034 = inversesqrt(dot(vec3(_3028, _3029, _3030), vec3(_3028, _3029, _3030)));
                        float _3035 = _3034 * _3028;
                        float _3036 = _3034 * _3029;
                        float _3037 = _3034 * _3030;
                        float _3044 = exp2(log2(1.0 / ((_3020 * 3.5) + 5.0)) * 0.25);
                        float _3045 = 1.0 - _508;
                        float _3052 = sqrt(1.0 - ((1.0 - (_3045 * _3045)) * (1.0 - (_3044 * _3044))));
                        float _3053 = _3052 * _3052;
                        float _3054 = _3053 * _3053;
                        float _3055 = _3035 + _3000;
                        float _3056 = _3036 + _3001;
                        float _3057 = _3037 + _3002;
                        float _3061 = inversesqrt(dot(vec3(_3055, _3056, _3057), vec3(_3055, _3056, _3057)));
                        float _3065 = dot(vec3(_432, _435, _438), vec3(_3035, _3036, _3037));
                        float _4414 = isnan(0.0) ? _3065 : (isnan(_3065) ? 0.0 : max(_3065, 0.0));
                        float _3068 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
                        float _3069 = dot(vec3(_432, _435, _438), vec3(_3061 * _3055, _3061 * _3056, _3061 * _3057));
                        float _4425 = isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : max(_3069, 0.0));
                        float _3072 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
                        float _3076 = ((_3072 * _3072) * (_3054 + (-1.0))) + 1.0;
                        float _3077 = _3013 * _3053;
                        float _3078 = _3077 * _3077;
                        float _3081 = ((1.0 - _3078) * _3003) + _3078;
                        float _4436 = isnan(0.0) ? _3081 : (isnan(_3081) ? 0.0 : max(_3081, 0.0));
                        float _3082 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
                        float _3083 = 1.0 - _3053;
                        float _3093 = (0.5 / (((_3082 * ((_3068 * _3083) + _3053)) + 9.9999999392252902907785028219223e-09) + (((_3082 * _3083) + _3053) * _3068))) * _3082;
                        float _4447 = isnan(0.0) ? _3093 : (isnan(_3093) ? 0.0 : max(_3093, 0.0));
                        float _3104 = (((_3054 * 3.1415927410125732421875) * (isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0)))) / ((_3076 * _3076) * ((_3020 * 2.1991131305694580078125) + 3.141590118408203125))) * _3009;
                        _2857 = (_3024 * _2972.x) + _2930;
                        _2858 = (_3024 * _2972.y) + _2931;
                        _2859 = (_3024 * _2972.z) + _2932;
                        _2854 = (_3104 * _2989.x) + _2927;
                        _2855 = (_3104 * _2989.y) + _2928;
                        _2856 = (_3104 * _2989.z) + _2929;
                        if (_2934 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2927 = _2854;
                            _2928 = _2855;
                            _2929 = _2856;
                            _2930 = _2857;
                            _2931 = _2858;
                            _2932 = _2859;
                            _2933 = _2934;
                        }
                    }
                    frontier_phi_73_pred = _2859;
                    frontier_phi_73_pred_1 = _2858;
                    frontier_phi_73_pred_2 = _2857;
                    frontier_phi_73_pred_3 = _2856;
                    frontier_phi_73_pred_4 = _2855;
                    frontier_phi_73_pred_5 = _2854;
                }
                _2641 = frontier_phi_73_pred;
                _2639 = frontier_phi_73_pred_1;
                _2637 = frontier_phi_73_pred_2;
                _2635 = frontier_phi_73_pred_3;
                _2633 = frontier_phi_73_pred_4;
                _2631 = frontier_phi_73_pred_5;
                uint _2789 = _2788 + 1u;
                if (_2789 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2782 = _2631;
                    _2783 = _2633;
                    _2784 = _2635;
                    _2785 = _2637;
                    _2786 = _2639;
                    _2787 = _2641;
                    _2788 = _2789;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2630 = _2631;
            _2632 = _2633;
            _2634 = _2635;
            _2636 = _2637;
            _2638 = _2639;
            _2640 = _2641;
        }
        uvec4 _2644 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2645 = _2644.z;
        uint _2647 = (_2645 >> 8u) & 15u;
        float _2750;
        float _2752;
        float _2754;
        float _2756;
        float _2758;
        float _2760;
        if (((4294967295u << _2647) & _2549) == 0u)
        {
            _2750 = _2630;
            _2752 = _2632;
            _2754 = _2634;
            _2756 = _2636;
            _2758 = _2638;
            _2760 = _2640;
        }
        else
        {
            float _2775 = inversesqrt(dot(vec3(_1607, _1608, _1609), vec3(_1607, _1608, _1609)));
            float _2776 = _2775 * _1607;
            float _2777 = _2775 * _1608;
            float _2778 = _2775 * _1609;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2647 < ((_2645 >> 12u) & 15u))
            {
                float _2751;
                float _2753;
                float _2755;
                float _2757;
                float _2759;
                float _2761;
                float _2910 = _2630;
                float _2911 = _2632;
                float _2912 = _2634;
                float _2913 = _2636;
                float _2914 = _2638;
                float _2915 = _2640;
                uint _2916 = _2647;
                uint _2925;
                bool _2926;
                for (;;)
                {
                    _2925 = texelFetch(g_lightClassification, int((((_2543 << 5u) + (_2529 << 9u)) + (_2916 << 2u)) >> 2u)).x;
                    _2926 = _2925 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_2926)
                    {
                        frontier_phi_84_pred = _2914;
                        frontier_phi_84_pred_1 = _2913;
                        frontier_phi_84_pred_2 = _2912;
                        frontier_phi_84_pred_3 = _2911;
                        frontier_phi_84_pred_4 = _2910;
                        frontier_phi_84_pred_5 = _2915;
                    }
                    else
                    {
                        float _3118;
                        float _3119;
                        float _3120;
                        float _3121;
                        float _3122;
                        float _3123;
                        float _3414;
                        float _3415;
                        float _3416;
                        float _3417;
                        float _3418;
                        float _3419;
                        float _3131 = _2910;
                        float _3132 = _2911;
                        float _3133 = _2912;
                        float _3134 = _2913;
                        float _3135 = _2914;
                        float _3136 = _2915;
                        uint _3137 = _2925;
                        uint _3138;
                        vec4 _3163;
                        float _3164;
                        vec4 _3179;
                        vec3 _3191;
                        vec4 _3207;
                        vec4 _3223;
                        float _3270;
                        bool _3271;
                        for (;;)
                        {
                            uint _3148 = ((_2916 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3137));
                            _3138 = (_3137 + 4294967295u) & _3137;
                            uint _3150 = _3148 * 40u;
                            _3163 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3150)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 3u)).x));
                            _3164 = _3163.w;
                            uint _3166 = (_3148 * 40u) + 4u;
                            _3179 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3166)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 3u)).x));
                            uint _3181 = (_3148 * 40u) + 8u;
                            _3191 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3181)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 2u)).x));
                            uint _3194 = (_3148 * 40u) + 16u;
                            _3207 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3194)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 3u)).x));
                            uint _3210 = (_3148 * 40u) + 20u;
                            _3223 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3210)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3210 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3210 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3210 + 3u)).x));
                            uint _3226 = (_3148 * 40u) + 24u;
                            vec4 _3239 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3226)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3226 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3226 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3226 + 3u)).x));
                            uint _3245 = (_3148 * 40u) + 28u;
                            vec4 _3258 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3245)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 3u)).x));
                            _3270 = fma(_1609, _3258.z, fma(_1608, _3258.y, _3258.x * _1607)) + _3258.w;
                            _3271 = !((fma(_1609, _3239.z, fma(_1608, _3239.y, _3239.x * _1607)) + _3239.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3271)
                            {
                                float _3298 = _3163.x - _1607;
                                float _3299 = _3163.y - _1608;
                                float _3300 = _3163.z - _1609;
                                float _3301 = dot(vec3(_3298, _3299, _3300), vec3(_3298, _3299, _3300));
                                float _3304 = inversesqrt(_3301);
                                float _3305 = _3304 * _3298;
                                float _3306 = _3304 * _3299;
                                float _3307 = _3304 * _3300;
                                float _3311 = 1.0 - (_3301 / (_3164 * _3164));
                                float _4458 = isnan(0.0) ? _3311 : (isnan(_3311) ? 0.0 : max(_3311, 0.0));
                                float _3312 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
                                float _3316 = sqrt(_3301) * _3179.w;
                                float _3318 = 1.39999997615814208984375 / (_3316 + 1.39999997615814208984375);
                                float _3319 = _3318 * _3318;
                                float _3322 = ((1.0 - _3319) * dot(vec3(_3305, _3306, _3307), vec3(_432, _435, _438))) + _3319;
                                float _3325 = _3316 * _3316;
                                float _3329 = (fma(_1609, _3207.z, fma(_1608, _3207.y, _3207.x * _1607)) + _3207.w) / _3270;
                                float _3330 = (fma(_1609, _3223.z, fma(_1608, _3223.y, _3223.x * _1607)) + _3223.w) / _3270;
                                float _3334 = 1.0 - dot(vec2(_3329, _3330), vec2(_3329, _3330));
                                float _4474 = isnan(0.0) ? _3334 : (isnan(_3334) ? 0.0 : max(_3334, 0.0));
                                float _3335 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
                                float _3336 = _3335 * (((isnan(0.0) ? _3322 : (isnan(_3322) ? 0.0 : max(_3322, 0.0))) * _3312) / ((_3325 * 0.699999988079071044921875) + 1.0));
                                float _3348 = exp2(log2(1.0 / ((_3325 * 3.5) + 5.0)) * 0.25);
                                float _3349 = 1.0 - _508;
                                float _3356 = sqrt(1.0 - ((1.0 - (_3349 * _3349)) * (1.0 - (_3348 * _3348))));
                                float _3357 = _3356 * _3356;
                                float _3358 = _3357 * _3357;
                                float _3359 = _3305 - _2776;
                                float _3360 = _3306 - _2777;
                                float _3361 = _3307 - _2778;
                                float _3365 = inversesqrt(dot(vec3(_3359, _3360, _3361), vec3(_3359, _3360, _3361)));
                                float _3369 = dot(vec3(_432, _435, _438), vec3((-0.0) - _2776, (-0.0) - _2777, (-0.0) - _2778));
                                float _4485 = isnan(0.0) ? _3369 : (isnan(_3369) ? 0.0 : max(_3369, 0.0));
                                float _3372 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
                                float _3373 = dot(vec3(_432, _435, _438), vec3(_3365 * _3359, _3365 * _3360, _3365 * _3361));
                                float _4496 = isnan(0.0) ? _3373 : (isnan(_3373) ? 0.0 : max(_3373, 0.0));
                                float _3376 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
                                float _3380 = ((_3376 * _3376) * (_3358 + (-1.0))) + 1.0;
                                float _3381 = _3318 * _3357;
                                float _3382 = _3381 * _3381;
                                float _3388 = ((1.0 - _3382) * dot(vec3(_432, _435, _438), vec3(_3305, _3306, _3307))) + _3382;
                                float _4507 = isnan(0.0) ? _3388 : (isnan(_3388) ? 0.0 : max(_3388, 0.0));
                                float _3389 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
                                float _3390 = 1.0 - _3357;
                                float _3400 = (0.5 / (((_3389 * ((_3372 * _3390) + _3357)) + 9.9999999392252902907785028219223e-09) + (((_3389 * _3390) + _3357) * _3372))) * _3389;
                                float _4518 = isnan(0.0) ? _3400 : (isnan(_3400) ? 0.0 : max(_3400, 0.0));
                                float _3410 = (_3335 * _3312) * (((_3358 * 3.1415927410125732421875) * (isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0)))) / ((_3380 * _3380) * ((_3325 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3336 * _3179.y;
                                frontier_phi_90_pred_1 = _3336 * _3179.x;
                                frontier_phi_90_pred_2 = _3410 * _3191.z;
                                frontier_phi_90_pred_3 = _3410 * _3191.y;
                                frontier_phi_90_pred_4 = _3410 * _3191.x;
                                frontier_phi_90_pred_5 = _3336 * _3179.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3418 = frontier_phi_90_pred;
                            _3417 = frontier_phi_90_pred_1;
                            _3416 = frontier_phi_90_pred_2;
                            _3415 = frontier_phi_90_pred_3;
                            _3414 = frontier_phi_90_pred_4;
                            _3419 = frontier_phi_90_pred_5;
                            _3121 = _3417 + _3134;
                            _3122 = _3418 + _3135;
                            _3123 = _3419 + _3136;
                            _3118 = _3414 + _3131;
                            _3119 = _3415 + _3132;
                            _3120 = _3416 + _3133;
                            if (_3138 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3131 = _3118;
                                _3132 = _3119;
                                _3133 = _3120;
                                _3134 = _3121;
                                _3135 = _3122;
                                _3136 = _3123;
                                _3137 = _3138;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3122;
                        frontier_phi_84_pred_1 = _3121;
                        frontier_phi_84_pred_2 = _3120;
                        frontier_phi_84_pred_3 = _3119;
                        frontier_phi_84_pred_4 = _3118;
                        frontier_phi_84_pred_5 = _3123;
                    }
                    _2759 = frontier_phi_84_pred;
                    _2757 = frontier_phi_84_pred_1;
                    _2755 = frontier_phi_84_pred_2;
                    _2753 = frontier_phi_84_pred_3;
                    _2751 = frontier_phi_84_pred_4;
                    _2761 = frontier_phi_84_pred_5;
                    uint _2917 = _2916 + 1u;
                    if (_2917 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2910 = _2751;
                        _2911 = _2753;
                        _2912 = _2755;
                        _2913 = _2757;
                        _2914 = _2759;
                        _2915 = _2761;
                        _2916 = _2917;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2761;
                frontier_phi_65_66_ladder_1 = _2757;
                frontier_phi_65_66_ladder_2 = _2759;
                frontier_phi_65_66_ladder_3 = _2753;
                frontier_phi_65_66_ladder_4 = _2751;
                frontier_phi_65_66_ladder_5 = _2755;
            }
            else
            {
                frontier_phi_65_66_ladder = _2640;
                frontier_phi_65_66_ladder_1 = _2636;
                frontier_phi_65_66_ladder_2 = _2638;
                frontier_phi_65_66_ladder_3 = _2632;
                frontier_phi_65_66_ladder_4 = _2630;
                frontier_phi_65_66_ladder_5 = _2634;
            }
            _2750 = frontier_phi_65_66_ladder_4;
            _2752 = frontier_phi_65_66_ladder_3;
            _2754 = frontier_phi_65_66_ladder_5;
            _2756 = frontier_phi_65_66_ladder_1;
            _2758 = frontier_phi_65_66_ladder_2;
            _2760 = frontier_phi_65_66_ladder;
        }
        float _2765 = isnan(1.0) ? _492 : (isnan(_492) ? 1.0 : min(_492, 1.0));
        _2561 = (_2765 * _2756) + _2074;
        _2563 = (_2765 * _2758) + _2076;
        _2565 = (_2765 * _2760) + _2078;
        _2567 = ((_2750 * _477) * _2765) + _2412;
        _2569 = ((_2752 * _479) * _2765) + _2414;
        _2571 = ((_2754 * _480) * _2765) + _2416;
    }
    else
    {
        _2561 = _2074;
        _2563 = _2076;
        _2565 = _2078;
        _2567 = _2412;
        _2569 = _2414;
        _2571 = _2416;
    }
    float _4534 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _4545 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _4556 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _4567 = isnan(0.0) ? _310 : (isnan(_310) ? 0.0 : max(_310, 0.0));
    float _2589 = ((isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0))) * (_2561 + ((isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0))) * _492))) + ((_2567 + ((isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0))) * _1334)) * cbPerFrame._m0[3u].x);
    float _2590 = ((isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0))) * (_2563 + ((isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0))) * _492))) + ((_2569 + ((isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0))) * _1334)) * cbPerFrame._m0[3u].x);
    float _2591 = ((isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0))) * (_2565 + ((isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0))) * _492))) + ((_2571 + ((isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0))) * _1334)) * cbPerFrame._m0[3u].x);
    float _2596 = cbInstanceData._m0[_451 + 6u].w * (isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0)));
    float _2601 = _411 / cbSceneParam._m0[86u].x;
    float _2602 = _412 / cbSceneParam._m0[86u].y;
    vec4 _2616 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2601, _2602, (log2((isnan(cbSceneParam._m0[77u].w) ? _331 : (isnan(_331) ? cbSceneParam._m0[77u].w : min(_331, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2618 = _2616.x;
    float _2619 = _2616.y;
    float _2620 = _2616.z;
    float _2621 = _2616.w;
    float _2692;
    float _2694;
    float _2696;
    float _2698;
    if (_331 > cbSceneParam._m0[78u].w)
    {
        float _2655 = isnan(_331) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _331 : min(cbSceneParam._m0[80u].w, _331));
        float _2656 = _2655 / _331;
        float _2667 = _2656 * _383;
        float _2668 = _384 * _2656;
        float _2669 = (-0.0) - _2668;
        float _2670 = _2656 * _385;
        float _2672 = (cbSceneParam._m0[77u].w * _2669) / _2655;
        float _2673 = _2672 + cbSceneParam._m0[79u].w;
        float _2674 = cbSceneParam._m0[79u].w - _2668;
        float _2680 = sqrt(((_2667 * _2667) + (_2668 * _2668)) + (_2670 * _2670));
        float _2683 = (1.0 - (cbSceneParam._m0[77u].w / _2655)) * _2680;
        float _2688 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2690 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2867;
        if (abs((_2669 - _2672) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2867 = ((((_2673 > 0.0) ? exp2(_2688 * _2673) : (2.0 - exp2(_2690 * _2673))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2683;
        }
        else
        {
            float _2811 = 1.0 / cbSceneParam._m0[80u].x;
            float _2812 = isnan(_2674) ? _2673 : (isnan(_2673) ? _2674 : max(_2673, _2674));
            float _2813 = isnan(_2674) ? _2673 : (isnan(_2673) ? _2674 : min(_2673, _2674));
            float _2822 = isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : min(_2812, 0.0));
            float _2823 = isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : min(_2813, 0.0));
            _2867 = ((abs(_2680 / _2669) * cbSceneParam._m0[80u].y) * ((((_2822 - _2823) * 2.0) - ((exp2(_2688 * (isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0)))) - exp2(_2688 * (isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : max(_2813, 0.0))))) * _2811)) - ((exp2(_2690 * _2822) - exp2(_2690 * _2823)) * _2811))) + (_2683 * cbSceneParam._m0[80u].z);
        }
        vec4 _2869 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2601, _2602, 1.0), 0.0);
        float _2878 = exp2((_2867 * (-1.44269502162933349609375)) * (1.0 - _2869.w));
        float _2879 = log2(_2878);
        float _2895 = log2(_2621);
        _2692 = (exp2(_2895 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2879 * cbSceneParam._m0[78u].x)) * _2869.x) / cbSceneParam._m0[78u].x)) + _2618;
        _2694 = (exp2(_2895 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2879 * cbSceneParam._m0[78u].y)) * _2869.y) / cbSceneParam._m0[78u].y)) + _2619;
        _2696 = (exp2(_2895 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2879 * cbSceneParam._m0[78u].z)) * _2869.z) / cbSceneParam._m0[78u].z)) + _2620;
        _2698 = _2878 * _2621;
    }
    else
    {
        _2692 = _2618;
        _2694 = _2619;
        _2696 = _2620;
        _2698 = _2621;
    }
    bool _2905;
    vec4 _2708;
    vec4 _2730;
    float _2732;
    float _2736;
    float _2737;
    float _2738;
    float _2739;
    bool _2749;
    for (;;)
    {
        _2708 = cbMatDynParam._m0[0u];
        float _2710 = roundEven(_2708.y);
        bool _2711 = _2710 == 3.0;
        float _2712 = log2(_2698);
        float _2719 = exp2(_2712 * cbSceneParam._m0[78u].x) * _2589;
        float _2720 = exp2(_2712 * cbSceneParam._m0[78u].y) * _2590;
        float _2721 = exp2(_2712 * cbSceneParam._m0[78u].z) * _2591;
        float _2728 = _399 + (-0.5);
        _2730 = cbMtdParam._m0[1u];
        _2732 = _2730.y * _2728;
        float _2735 = (_2710 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2736 = _2735 * (_2711 ? _2719 : (_2719 + (cbSceneParam._m0[72u].w * _2692)));
        _2737 = _2735 * (_2711 ? _2720 : (_2720 + (cbSceneParam._m0[72u].w * _2694)));
        _2738 = _2735 * (_2711 ? _2721 : (_2721 + (cbSceneParam._m0[72u].w * _2696)));
        _2739 = _2728 * 0.999000012874603271484375;
        _2749 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2749)
        {
            if ((cbInstanceData._m0[_451 + 7u].x + _2739) < 0.5)
            {
                _2905 = true;
                break;
            }
        }
        uint _2846 = _453 + uint(_2708.w);
        if ((cbInstanceData._m0[_2846].w < 1.0) && ((cbInstanceData._m0[_2846].w + _2739) < 0.5))
        {
            _2905 = true;
            break;
        }
        if ((_2732 + _246) < _2730.x)
        {
            _2905 = true;
            break;
        }
        _2905 = false;
        break;
    }
    float _3109;
    if (_2905)
    {
        discard_state = true;
        _3109 = 0.0;
    }
    else
    {
        _3109 = _2596;
    }
    SV_Target.x = _2736;
    SV_Target.y = _2737;
    SV_Target.z = _2738;
    SV_Target.w = _3109;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2596;
    discard_exit();
}


