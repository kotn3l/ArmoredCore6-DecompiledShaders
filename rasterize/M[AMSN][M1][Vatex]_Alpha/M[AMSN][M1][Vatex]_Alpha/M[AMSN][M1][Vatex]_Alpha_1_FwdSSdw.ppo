#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M1_Vatex_Alpha_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M1_Vatex_Alpha_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _814;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _188 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _195 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _196 = _195 * NORMAL.x;
    float _197 = _195 * NORMAL.y;
    float _198 = _195 * NORMAL.z;
    float _202 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _210;
    float _211;
    float _212;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _210 = (-0.0) - _196;
        _211 = (-0.0) - _197;
        _212 = (-0.0) - _198;
    }
    else
    {
        _210 = _196;
        _211 = _197;
        _212 = _198;
    }
    vec4 _232 = texture(sampler2D(M_AMSN_M1_Vatex_Alpha_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _239 = _232.x * cbMtdParam._m0[9u].x;
    float _240 = _232.y * cbMtdParam._m0[9u].y;
    float _241 = _232.z * cbMtdParam._m0[9u].z;
    float _242 = _232.w * TEXCOORD_1.z;
    vec4 _254 = texture(sampler2D(M_AMSN_M1_Vatex_Alpha_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _258 = _254.z;
    float _262 = (_254.x * 2.0) + (-1.0);
    float _264 = (_254.y * 2.0) + (-1.0);
    float _265 = dot(vec2(_262, _264), vec2(_262, _264));
    float _3156 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    float _271 = sqrt(1.0 - (isnan(1.0) ? _3156 : (isnan(_3156) ? 1.0 : min(_3156, 1.0))));
    float _274 = fma(_271, _210, fma(_264, _202 * TANGENT.x, (_188 * _180) * _262));
    float _277 = fma(_271, _211, fma(_264, _202 * TANGENT.y, (_188 * _181) * _262));
    float _280 = fma(_271, _212, fma(_264, _202 * TANGENT.z, (_188 * _182) * _262));
    float _284 = inversesqrt(dot(vec3(_274, _277, _280), vec3(_274, _277, _280)));
    float _285 = _284 * _274;
    float _286 = _284 * _277;
    float _287 = _284 * _280;
    float _3167 = isnan(0.0) ? _242 : (isnan(_242) ? 0.0 : max(_242, 0.0));
    float _288 = isnan(1.0) ? _3167 : (isnan(_3167) ? 1.0 : min(_3167, 1.0));
    float _3178 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    float _289 = isnan(1.0) ? _3178 : (isnan(_3178) ? 1.0 : min(_3178, 1.0));
    float _3189 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _3200 = isnan(0.0) ? _240 : (isnan(_240) ? 0.0 : max(_240, 0.0));
    float _3211 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _308 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _350 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _360 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _350);
    float _361 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _350);
    float _362 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _350);
    float _366 = inversesqrt(dot(vec3(_360, _361, _362), vec3(_360, _361, _362)));
    float _367 = _360 * _366;
    float _368 = _361 * _366;
    float _369 = _362 * _366;
    float _375 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _376 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _397 = fma(_287, cbSceneParam._m0[5u].z, fma(_286, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _285));
    float _400 = fma(_287, cbSceneParam._m0[6u].z, fma(_286, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _285));
    float _403 = fma(_287, cbSceneParam._m0[7u].z, fma(_286, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _285));
    uint _416 = uint(roundEven(NORMAL.w)) * 13u;
    uint _419 = (_416 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _425 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3189 : (isnan(_3189) ? 1.0 : min(_3189, 1.0)))) * cbInstanceData._m0[_419].x;
    float _426 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3200 : (isnan(_3200) ? 1.0 : min(_3200, 1.0)))) * cbInstanceData._m0[_419].y;
    float _427 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3211 : (isnan(_3211) ? 1.0 : min(_3211, 1.0)))) * cbInstanceData._m0[_419].z;
    float _3222 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _428 = isnan(1.0) ? _3222 : (isnan(_3222) ? 1.0 : min(_3222, 1.0));
    float _3233 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _429 = isnan(1.0) ? _3233 : (isnan(_3233) ? 1.0 : min(_3233, 1.0));
    float _3244 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _430 = isnan(1.0) ? _3244 : (isnan(_3244) ? 1.0 : min(_3244, 1.0));
    vec4 _439 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _375, cbSceneParam._m0[86u].y * _376));
    float _442 = _439.x * TEXCOORD_1.w;
    float _443 = dot(vec3(_285, _286, _287), vec3(_367, _368, _369));
    float _446 = _443 * 2.0;
    float _450 = (_446 * _285) - _367;
    float _451 = (_446 * _286) - _368;
    float _452 = (_446 * _287) - _369;
    float _456 = abs(dot(vec3(_367, _368, _369), vec3(_285, _286, _287)));
    float _3255 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _458 = sqrt(_289);
    float _471 = exp2((_458 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3255 : (isnan(_3255) ? 1.0 : min(_3255, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_458 * 3.0));
    float _503 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _507 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _511 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _813;
    float _815;
    float _816;
    float _817;
    float _818;
    float _819;
    float _820;
    float _821;
    float _822;
    float _823;
    float _824;
    float _825;
    float _826;
    float _827;
    float _828;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _538 = fma(_511, cbModelParam._m0[26u].z, fma(_507, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _503));
        float _542 = fma(_511, cbModelParam._m0[27u].z, fma(_507, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _503));
        float _546 = fma(_511, cbModelParam._m0[28u].z, fma(_507, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _503));
        float _571 = _503 + _285;
        float _572 = _507 + _286;
        float _573 = _511 + _287;
        float _583 = fma(_573, cbModelParam._m0[26u].z, fma(_572, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _571)) - _538;
        float _584 = fma(_573, cbModelParam._m0[27u].z, fma(_572, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _571)) - _542;
        float _585 = fma(_573, cbModelParam._m0[28u].z, fma(_572, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _571)) - _546;
        float _589 = inversesqrt(dot(vec3(_583, _584, _585), vec3(_583, _584, _585)));
        float _602 = ((_589 * _583) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_538 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _603 = ((_589 * _584) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_542 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _604 = ((_589 * _585) / cbModelParam._m0[34u].z) + ((((((_546 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _607 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_602, _603, _604), 0.0);
        vec4 _614 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_602, _603, _604), 0.0);
        vec4 _621 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_602, _603, _604), 0.0);
        vec4 _628 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_602, _603, _604), 0.0);
        float _641 = exp2((_607.w + (-0.5)) * 20.0) * 2.0;
        float _642 = _641 * (_607.x + (-0.5));
        float _643 = _641 * (_607.y + (-0.5));
        float _644 = _641 * (_607.z + (-0.5));
        float _651 = exp2((_614.w + (-0.5)) * 20.0) * 2.0;
        float _652 = _651 * (_614.x + (-0.5));
        float _653 = _651 * (_614.y + (-0.5));
        float _654 = _651 * (_614.z + (-0.5));
        float _661 = exp2((_621.w + (-0.5)) * 20.0) * 2.0;
        float _662 = _661 * (_621.x + (-0.5));
        float _663 = _661 * (_621.y + (-0.5));
        float _664 = _661 * (_621.z + (-0.5));
        float _671 = exp2((_628.w + (-0.5)) * 20.0) * 2.0;
        float _672 = _671 * (_628.x + (-0.5));
        float _673 = _671 * (_628.y + (-0.5));
        float _674 = _671 * (_628.z + (-0.5));
        float _675 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
        float _676 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
        float _677 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
        float _678 = _642 * 0.5;
        float _679 = _652 * 0.5;
        float _680 = _662 * 0.5;
        float _681 = dot(vec3(_678, _679, _680), vec3(_678, _679, _680));
        float _686 = (_681 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_681);
        float _695 = (dot(vec3(_285, _286, _287), vec3(_686 * _678, _686 * _679, _686 * _680)) + 1.0) * 0.5;
        float _3281 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
        float _705 = sqrt(((_679 * _679) + (_678 * _678)) + (_680 * _680)) / (_675 + 9.9999997473787516355514526367188e-06);
        float _3292 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
        float _706 = isnan(1.0) ? _3292 : (isnan(_3292) ? 1.0 : min(_3292, 1.0));
        float _707 = _706 * 2.0;
        float _711 = (1.0 - _706) / (_706 + 1.0);
        float _3303 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
        float _712 = isnan(1.0) ? _3303 : (isnan(_3303) ? 1.0 : min(_3303, 1.0));
        float _721 = ((((1.0 - _712) * (_707 + 2.0)) * exp2(log2(isnan(1.0) ? _3281 : (isnan(_3281) ? 1.0 : min(_3281, 1.0))) * (_707 + 1.0))) + _712) * _675;
        float _722 = _643 * 0.5;
        float _723 = _653 * 0.5;
        float _724 = _663 * 0.5;
        float _725 = dot(vec3(_722, _723, _724), vec3(_722, _723, _724));
        float _730 = (_725 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_725);
        float _738 = (dot(vec3(_285, _286, _287), vec3(_730 * _722, _730 * _723, _730 * _724)) + 1.0) * 0.5;
        float _3314 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
        float _747 = sqrt(((_723 * _723) + (_722 * _722)) + (_724 * _724)) / (_676 + 9.9999997473787516355514526367188e-06);
        float _3325 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
        float _748 = isnan(1.0) ? _3325 : (isnan(_3325) ? 1.0 : min(_3325, 1.0));
        float _749 = _748 * 2.0;
        float _753 = (1.0 - _748) / (_748 + 1.0);
        float _3336 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
        float _754 = isnan(1.0) ? _3336 : (isnan(_3336) ? 1.0 : min(_3336, 1.0));
        float _763 = ((((1.0 - _754) * (_749 + 2.0)) * exp2(log2(isnan(1.0) ? _3314 : (isnan(_3314) ? 1.0 : min(_3314, 1.0))) * (_749 + 1.0))) + _754) * _676;
        float _764 = _644 * 0.5;
        float _765 = _654 * 0.5;
        float _766 = _664 * 0.5;
        float _767 = dot(vec3(_764, _765, _766), vec3(_764, _765, _766));
        float _772 = (_767 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_767);
        float _780 = (dot(vec3(_285, _286, _287), vec3(_772 * _764, _772 * _765, _772 * _766)) + 1.0) * 0.5;
        float _3347 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
        float _789 = sqrt(((_765 * _765) + (_764 * _764)) + (_766 * _766)) / (_677 + 9.9999997473787516355514526367188e-06);
        float _3358 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
        float _790 = isnan(1.0) ? _3358 : (isnan(_3358) ? 1.0 : min(_3358, 1.0));
        float _791 = _790 * 2.0;
        float _795 = (1.0 - _790) / (_790 + 1.0);
        float _3369 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
        float _796 = isnan(1.0) ? _3369 : (isnan(_3369) ? 1.0 : min(_3369, 1.0));
        float _805 = ((((1.0 - _796) * (_791 + 2.0)) * exp2(log2(isnan(1.0) ? _3347 : (isnan(_3347) ? 1.0 : min(_3347, 1.0))) * (_791 + 1.0))) + _796) * _677;
        _813 = _644;
        _815 = _643;
        _816 = _642;
        _817 = _654;
        _818 = _653;
        _819 = _652;
        _820 = _664;
        _821 = _663;
        _822 = _662;
        _823 = _677;
        _824 = _676;
        _825 = _675;
        _826 = cbModelParam._m0[36u].z * (isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0)));
        _827 = cbModelParam._m0[36u].z * (isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0)));
        _828 = cbModelParam._m0[36u].z * (isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0)));
    }
    else
    {
        _813 = _814;
        _815 = _814;
        _816 = _814;
        _817 = _814;
        _818 = _814;
        _819 = _814;
        _820 = _814;
        _821 = _814;
        _822 = _814;
        _823 = _814;
        _824 = _814;
        _825 = _814;
        _826 = 0.0;
        _827 = 0.0;
        _828 = 0.0;
    }
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _854 = fma(_511, cbModelParam._m0[30u].z, fma(_507, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _503));
        float _858 = fma(_511, cbModelParam._m0[31u].z, fma(_507, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _503));
        float _862 = fma(_511, cbModelParam._m0[32u].z, fma(_507, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _503));
        float _885 = _503 + _285;
        float _886 = _507 + _286;
        float _887 = _511 + _287;
        float _897 = fma(_887, cbModelParam._m0[30u].z, fma(_886, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _885)) - _854;
        float _898 = fma(_887, cbModelParam._m0[31u].z, fma(_886, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _885)) - _858;
        float _899 = fma(_887, cbModelParam._m0[32u].z, fma(_886, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _885)) - _862;
        float _903 = inversesqrt(dot(vec3(_897, _898, _899), vec3(_897, _898, _899)));
        float _916 = ((_903 * _897) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_854 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _917 = ((_903 * _898) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_858 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _918 = ((_903 * _899) / cbModelParam._m0[35u].z) + ((((((_862 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _920 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_916, _917, _918), 0.0);
        vec4 _927 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_916, _917, _918), 0.0);
        vec4 _934 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_916, _917, _918), 0.0);
        vec4 _941 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_916, _917, _918), 0.0);
        float _953 = exp2((_920.w + (-0.5)) * 20.0) * 2.0;
        float _954 = _953 * (_920.x + (-0.5));
        float _955 = _953 * (_920.y + (-0.5));
        float _956 = _953 * (_920.z + (-0.5));
        float _963 = exp2((_927.w + (-0.5)) * 20.0) * 2.0;
        float _964 = _963 * (_927.x + (-0.5));
        float _965 = _963 * (_927.y + (-0.5));
        float _966 = _963 * (_927.z + (-0.5));
        float _973 = exp2((_934.w + (-0.5)) * 20.0) * 2.0;
        float _974 = _973 * (_934.x + (-0.5));
        float _975 = _973 * (_934.y + (-0.5));
        float _976 = _973 * (_934.z + (-0.5));
        float _983 = exp2((_941.w + (-0.5)) * 20.0) * 2.0;
        float _984 = _983 * (_941.x + (-0.5));
        float _985 = _983 * (_941.y + (-0.5));
        float _986 = _983 * (_941.z + (-0.5));
        float _987 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _988 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _989 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _990 = _954 * 0.5;
        float _991 = _964 * 0.5;
        float _992 = _974 * 0.5;
        float _993 = dot(vec3(_990, _991, _992), vec3(_990, _991, _992));
        float _998 = (_993 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_993);
        float _1006 = (dot(vec3(_285, _286, _287), vec3(_998 * _990, _998 * _991, _998 * _992)) + 1.0) * 0.5;
        float _3410 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1015 = sqrt(((_991 * _991) + (_990 * _990)) + (_992 * _992)) / (_987 + 9.9999997473787516355514526367188e-06);
        float _3421 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1016 = isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0));
        float _1017 = _1016 * 2.0;
        float _1021 = (1.0 - _1016) / (_1016 + 1.0);
        float _3432 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1022 = isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0));
        float _1031 = ((((1.0 - _1022) * (_1017 + 2.0)) * exp2(log2(isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0))) * (_1017 + 1.0))) + _1022) * _987;
        float _1032 = _955 * 0.5;
        float _1033 = _965 * 0.5;
        float _1034 = _975 * 0.5;
        float _1035 = dot(vec3(_1032, _1033, _1034), vec3(_1032, _1033, _1034));
        float _1040 = (_1035 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1035);
        float _1048 = (dot(vec3(_285, _286, _287), vec3(_1040 * _1032, _1040 * _1033, _1040 * _1034)) + 1.0) * 0.5;
        float _3443 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1057 = sqrt(((_1033 * _1033) + (_1032 * _1032)) + (_1034 * _1034)) / (_988 + 9.9999997473787516355514526367188e-06);
        float _3454 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1058 = isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0));
        float _1059 = _1058 * 2.0;
        float _1063 = (1.0 - _1058) / (_1058 + 1.0);
        float _3465 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1064 = isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0));
        float _1073 = ((((1.0 - _1064) * (_1059 + 2.0)) * exp2(log2(isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0))) * (_1059 + 1.0))) + _1064) * _988;
        float _1074 = _956 * 0.5;
        float _1075 = _966 * 0.5;
        float _1076 = _976 * 0.5;
        float _1077 = dot(vec3(_1074, _1075, _1076), vec3(_1074, _1075, _1076));
        float _1082 = (_1077 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1077);
        float _1090 = (dot(vec3(_285, _286, _287), vec3(_1082 * _1074, _1082 * _1075, _1082 * _1076)) + 1.0) * 0.5;
        float _3476 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1099 = sqrt(((_1075 * _1075) + (_1074 * _1074)) + (_1076 * _1076)) / (_989 + 9.9999997473787516355514526367188e-06);
        float _3487 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1100 = isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0));
        float _1101 = _1100 * 2.0;
        float _1105 = (1.0 - _1100) / (_1100 + 1.0);
        float _3498 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1106 = isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0));
        float _1115 = ((((1.0 - _1106) * (_1101 + 2.0)) * exp2(log2(isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0))) * (_1101 + 1.0))) + _1106) * _989;
        _1123 = _956;
        _1124 = _955;
        _1125 = _954;
        _1126 = _966;
        _1127 = _965;
        _1128 = _964;
        _1129 = _976;
        _1130 = _975;
        _1131 = _974;
        _1132 = _989;
        _1133 = _988;
        _1134 = _987;
        _1135 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0)));
        _1136 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0)));
        _1137 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0)));
    }
    else
    {
        _1123 = _814;
        _1124 = _814;
        _1125 = _814;
        _1126 = _814;
        _1127 = _814;
        _1128 = _814;
        _1129 = _814;
        _1130 = _814;
        _1131 = _814;
        _1132 = _814;
        _1133 = _814;
        _1134 = _814;
        _1135 = 0.0;
        _1136 = 0.0;
        _1137 = 0.0;
    }
    float _1147 = (cbModelParam._m0[1u].x * (_1135 - _826)) + _826;
    float _1148 = (cbModelParam._m0[1u].x * (_1136 - _827)) + _827;
    float _1149 = (cbModelParam._m0[1u].x * (_1137 - _828)) + _828;
    float _1170 = fma(_1149, cbSceneParam._m0[89u].z, fma(_1148, cbSceneParam._m0[89u].y, _1147 * cbSceneParam._m0[89u].x));
    float _1173 = fma(_1149, cbSceneParam._m0[90u].z, fma(_1148, cbSceneParam._m0[90u].y, _1147 * cbSceneParam._m0[90u].x));
    float _1176 = fma(_1149, cbSceneParam._m0[91u].z, fma(_1148, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1147));
    float _1191 = _450 * 0.5;
    float _1192 = _451 * 0.5;
    float _1193 = _452 * 0.5;
    float _1194 = dot(vec4(_1191, _1192, _1193, 1.0), vec4(_1125, _1128, _1131, _1134));
    float _1197 = dot(vec4(_1191, _1192, _1193, 1.0), vec4(_1124, _1127, _1130, _1133));
    float _1200 = dot(vec4(_1191, _1192, _1193, 1.0), vec4(_1123, _1126, _1129, _1132));
    float _1234;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1207 = dot(vec4(_1191, _1192, _1193, 1.0), vec4(_813, _817, _820, _823));
        float _1211 = dot(vec4(_1191, _1192, _1193, 1.0), vec4(_815, _818, _821, _824));
        float _1215 = dot(vec4(_1191, _1192, _1193, 1.0), vec4(_816, _819, _822, _825));
        float _1222 = dot(vec4(cbModelParam._m0[39u]), vec4(_1191, _1192, _1193, 1.0));
        _1234 = dot(vec3(isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0)), isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0)), isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1222) ? 0.0 : (isnan(0.0) ? _1222 : max(0.0, _1222))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1234 = 1.0;
    }
    float _1245;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1236 = dot(vec4(cbModelParam._m0[40u]), vec4(_1191, _1192, _1193, 1.0));
        _1245 = dot(vec3(isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0)), isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0)), isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1236) ? 0.0 : (isnan(0.0) ? _1236 : max(0.0, _1236))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1245 = 1.0;
    }
    float _1249 = (_1245 * cbModelParam._m0[1u].x) + (_1234 * (1.0 - cbModelParam._m0[1u].x));
    float _1259 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _289);
    float _1260 = isnan(_1259) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1259 : min(cbModelParam._m0[25u].z, _1259));
    float _1342;
    float _1344;
    float _1346;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1309 = fma(_511, cbModelParam._m0[13u].z, fma(_507, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _503)) + cbModelParam._m0[13u].w;
        float _1313 = fma(_511, cbModelParam._m0[14u].z, fma(_507, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _503)) + cbModelParam._m0[14u].w;
        float _1317 = fma(_511, cbModelParam._m0[15u].z, fma(_507, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _503)) + cbModelParam._m0[15u].w;
        float _1320 = fma(_452, cbModelParam._m0[13u].z, fma(_451, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _450));
        float _1323 = fma(_452, cbModelParam._m0[14u].z, fma(_451, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _450));
        float _1326 = fma(_452, cbModelParam._m0[15u].z, fma(_451, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _450));
        float _1354;
        if (_1320 > 0.0)
        {
            _1354 = abs((1.0 - _1309) / _1320);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1320 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1309 + 1.0) / _1320);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1354 = frontier_phi_16_14_ladder;
        }
        float _1581;
        if (_1323 > 0.0)
        {
            _1581 = abs((1.0 - _1313) / _1323);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1323 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1313 + 1.0) / _1323);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1581 = frontier_phi_25_21_ladder;
        }
        float _1827;
        if (_1326 > 0.0)
        {
            _1827 = abs((1.0 - _1317) / _1326);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1326 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1317 + 1.0) / _1326);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1827 = frontier_phi_37_32_ladder;
        }
        float _1829 = isnan(_1581) ? _1354 : (isnan(_1354) ? _1581 : min(_1354, _1581));
        float _1830 = isnan(_1827) ? _1829 : (isnan(_1829) ? _1827 : min(_1829, _1827));
        float _1834 = (_1830 * _1320) + _1309;
        float _1835 = (_1830 * _1323) + _1313;
        float _1836 = (_1830 * _1326) + _1317;
        float _1837 = _1830 * 9.9999997473787516355514526367188e-05;
        float _1839 = (-1.0) - _1837;
        float _1841 = _1837 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1836 > _1841) || ((_1836 < _1839) || ((_1835 > _1841) || ((_1835 < _1839) || ((_1834 < _1839) || (_1834 > _1841))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1960 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1836, cbModelParam._m0[9u].z, fma(_1835, cbModelParam._m0[9u].y, _1834 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1836, cbModelParam._m0[10u].z, fma(_1835, cbModelParam._m0[10u].y, _1834 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1836, cbModelParam._m0[11u].z, fma(_1835, cbModelParam._m0[11u].y, _1834 * cbModelParam._m0[11u].x))), _1260);
            frontier_phi_15_37_ladder = _1960.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _1960.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _1960.x * cbModelParam._m0[1u].y;
        }
        _1342 = frontier_phi_15_37_ladder_2;
        _1344 = frontier_phi_15_37_ladder_1;
        _1346 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1330 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_450, _451, _452), _1260);
        _1342 = _1330.x * cbModelParam._m0[1u].y;
        _1344 = _1330.y * cbModelParam._m0[1u].y;
        _1346 = _1330.z * cbModelParam._m0[1u].y;
    }
    float _1350 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _289);
    float _1351 = isnan(_1350) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1350 : min(cbModelParam._m0[25u].w, _1350));
    float _1444;
    float _1446;
    float _1448;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1408 = fma(_511, cbModelParam._m0[21u].z, fma(_507, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _503)) + cbModelParam._m0[21u].w;
        float _1412 = fma(_511, cbModelParam._m0[22u].z, fma(_507, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _503)) + cbModelParam._m0[22u].w;
        float _1416 = fma(_511, cbModelParam._m0[23u].z, fma(_507, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _503)) + cbModelParam._m0[23u].w;
        float _1419 = fma(_452, cbModelParam._m0[21u].z, fma(_451, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _450));
        float _1422 = fma(_452, cbModelParam._m0[22u].z, fma(_451, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _450));
        float _1425 = fma(_452, cbModelParam._m0[23u].z, fma(_451, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _450));
        float _1586;
        if (_1419 > 0.0)
        {
            _1586 = abs((1.0 - _1408) / _1419);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1419 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1408 + 1.0) / _1419);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1586 = frontier_phi_27_23_ladder;
        }
        float _1854;
        if (_1422 > 0.0)
        {
            _1854 = abs((1.0 - _1412) / _1422);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1422 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1412 + 1.0) / _1422);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1854 = frontier_phi_39_34_ladder;
        }
        float _2059;
        if (_1425 > 0.0)
        {
            _2059 = abs((1.0 - _1416) / _1425);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1425 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1416 + 1.0) / _1425);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2059 = frontier_phi_48_45_ladder;
        }
        float _2061 = isnan(_1854) ? _1586 : (isnan(_1586) ? _1854 : min(_1586, _1854));
        float _2062 = isnan(_2059) ? _2061 : (isnan(_2061) ? _2059 : min(_2061, _2059));
        float _2066 = (_2062 * _1419) + _1408;
        float _2067 = (_2062 * _1422) + _1412;
        float _2068 = (_2062 * _1425) + _1416;
        float _2069 = _2062 * 9.9999997473787516355514526367188e-05;
        float _2070 = (-1.0) - _2069;
        float _2072 = _2069 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2068 > _2072) || ((_2068 < _2070) || ((_2067 > _2072) || ((_2067 < _2070) || ((_2066 < _2070) || (_2066 > _2072))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2268 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2068, cbModelParam._m0[17u].z, fma(_2067, cbModelParam._m0[17u].y, _2066 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2068, cbModelParam._m0[18u].z, fma(_2067, cbModelParam._m0[18u].y, _2066 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2068, cbModelParam._m0[19u].z, fma(_2067, cbModelParam._m0[19u].y, _2066 * cbModelParam._m0[19u].x))), _1351);
            frontier_phi_24_48_ladder = _2268.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2268.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2268.x * cbModelParam._m0[1u].z;
        }
        _1444 = frontier_phi_24_48_ladder_2;
        _1446 = frontier_phi_24_48_ladder_1;
        _1448 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1428 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_450, _451, _452), _1351);
        _1444 = _1428.x * cbModelParam._m0[1u].z;
        _1446 = _1428.y * cbModelParam._m0[1u].z;
        _1448 = _1428.z * cbModelParam._m0[1u].z;
    }
    float _1460 = ((((1.0 - _471) * ((_458 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_471 * _458)) * _442;
    float _1461 = _1460 * ((cbModelParam._m0[1u].w * (_1444 - _1342)) + _1342);
    float _1462 = _1460 * ((cbModelParam._m0[1u].w * (_1446 - _1344)) + _1344);
    float _1463 = _1460 * ((cbModelParam._m0[1u].w * (_1448 - _1346)) + _1346);
    float _1466 = fma(_1463, cbSceneParam._m0[89u].z, fma(_1462, cbSceneParam._m0[89u].y, _1461 * cbSceneParam._m0[89u].x));
    float _1469 = fma(_1463, cbSceneParam._m0[90u].z, fma(_1462, cbSceneParam._m0[90u].y, _1461 * cbSceneParam._m0[90u].x));
    float _1472 = fma(_1463, cbSceneParam._m0[91u].z, fma(_1462, cbSceneParam._m0[91u].y, _1461 * cbSceneParam._m0[91u].x));
    vec4 _1480 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_375, _376));
    float _1482 = _1480.w;
    float _1494 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1482);
    float _1495 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1482);
    float _1496 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1482);
    uvec4 _1500 = floatBitsToUint(cbInstanceData._m0[_416 + 5u]);
    uint _1502 = _1500.x * 14u;
    uint _1503 = _1502 + 13u;
    float _1510 = _442 + (-1.0);
    float _1515 = (cbLight._m0[_1503].x * _1510) + 1.0;
    float _1516 = (cbLight._m0[_1503].y * _1510) + 1.0;
    float _1517 = (cbLight._m0[_1503].z * _1510) + 1.0;
    float _1518 = (cbLight._m0[_1503].w * _1510) + 1.0;
    uint _1519 = _1502 + 5u;
    float _1525 = isnan(1.0) ? _1516 : (isnan(_1516) ? 1.0 : min(_1516, 1.0));
    uint _1529 = _1502 + 4u;
    float _1539 = isnan(1.0) ? _1515 : (isnan(_1515) ? 1.0 : min(_1515, 1.0));
    uint _1543 = _1502 | 1u;
    float _1554 = dot(vec3(cbLight._m0[_1502].xyz), vec3(_285, _286, _287));
    float _1557 = dot(vec3(cbLight._m0[_1543].xyz), vec3(_285, _286, _287));
    float _3634 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
    float _3645 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
    float _1562 = (isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0))) * 0.3183098733425140380859375;
    float _1564 = (isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0))) * 0.3183098733425140380859375;
    float _1571 = ((cbLight._m0[_1519].x * _1525) * _1564) + (((cbLight._m0[_1529].x * _1494) * _1539) * _1562);
    float _1572 = ((_1525 * cbLight._m0[_1519].y) * _1564) + (((cbLight._m0[_1529].y * _1495) * _1539) * _1562);
    float _1573 = ((_1525 * cbLight._m0[_1519].z) * _1564) + (((cbLight._m0[_1529].z * _1496) * _1539) * _1562);
    uvec4 _1578 = floatBitsToUint(cbLight._m0[_1502 + 12u]);
    bool _1580 = _1578.x == 0u;
    float _1591;
    float _1593;
    float _1595;
    if (_1580)
    {
        _1591 = _1571;
        _1593 = _1572;
        _1595 = _1573;
    }
    else
    {
        uint _1599 = _1502 + 6u;
        float _1615 = (dot(vec3(cbLight._m0[_1502 + 2u].xyz), vec3(_285, _286, _287)) * 0.5) + 0.5;
        float _1616 = _1615 * _1615;
        float _3656 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
        float _1617 = isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0));
        float _1618 = isnan(1.0) ? _1517 : (isnan(_1517) ? 1.0 : min(_1517, 1.0));
        _1591 = (((cbLight._m0[_1599].x * 0.3183098733425140380859375) * _1617) * _1618) + _1571;
        _1593 = (((cbLight._m0[_1599].y * 0.3183098733425140380859375) * _1617) * _1618) + _1572;
        _1595 = (((cbLight._m0[_1599].z * 0.3183098733425140380859375) * _1617) * _1618) + _1573;
    }
    bool _1598 = _1578.y == 0u;
    float _1636;
    float _1638;
    float _1640;
    if (_1598)
    {
        _1636 = _1591;
        _1638 = _1593;
        _1640 = _1595;
    }
    else
    {
        uint _1798 = _1502 + 7u;
        float _1814 = (dot(vec3(cbLight._m0[_1502 + 3u].xyz), vec3(_285, _286, _287)) * 0.5) + 0.5;
        float _1815 = _1814 * _1814;
        float _3672 = isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0));
        float _1816 = isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0));
        float _1817 = isnan(1.0) ? _1518 : (isnan(_1518) ? 1.0 : min(_1518, 1.0));
        _1636 = (((cbLight._m0[_1798].x * 0.3183098733425140380859375) * _1816) * _1817) + _1591;
        _1638 = (((cbLight._m0[_1798].y * 0.3183098733425140380859375) * _1816) * _1817) + _1593;
        _1640 = (((cbLight._m0[_1798].z * 0.3183098733425140380859375) * _1816) * _1817) + _1595;
    }
    uint _1643 = _1502 + 8u;
    float _1656 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1502].w)) * _289) * 0.949999988079071044921875);
    float _1657 = _1656 * _1656;
    float _1658 = cbLight._m0[_1502].x + _367;
    float _1659 = cbLight._m0[_1502].y + _368;
    float _1660 = cbLight._m0[_1502].z + _369;
    float _1664 = inversesqrt(dot(vec3(_1658, _1659, _1660), vec3(_1658, _1659, _1660)));
    float _1665 = _1664 * _1658;
    float _1666 = _1664 * _1659;
    float _1667 = _1664 * _1660;
    float _1668 = dot(vec3(_285, _286, _287), vec3(cbLight._m0[_1502].xyz));
    float _3688 = isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0));
    float _1671 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
    float _3699 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _1672 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
    float _1673 = dot(vec3(_285, _286, _287), vec3(_1665, _1666, _1667));
    float _3710 = isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0));
    float _1676 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
    float _1677 = dot(vec3(cbLight._m0[_1502].xyz), vec3(_1665, _1666, _1667));
    float _3721 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
    float _1681 = _1657 * _1657;
    float _1685 = ((_1676 * _1676) * (_1681 + (-1.0))) + 1.0;
    float _1696 = (exp2(log2(1.0 - (isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1697 = 1.0 - _1657;
    float _1708 = (0.5 / (((_1672 * ((_1671 * _1697) + _1657)) + 9.9999999392252902907785028219223e-09) + (((_1672 * _1697) + _1657) * _1671))) * _1671;
    float _3732 = isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0));
    float _1710 = (isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0))) * (_1681 / ((_1685 * _1685) * 3.141590118408203125));
    uint _1724 = _1502 + 9u;
    float _1735 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1543].w)) * _289) * 0.949999988079071044921875);
    float _1736 = _1735 * _1735;
    float _1737 = cbLight._m0[_1543].x + _367;
    float _1738 = cbLight._m0[_1543].y + _368;
    float _1739 = cbLight._m0[_1543].z + _369;
    float _1743 = inversesqrt(dot(vec3(_1737, _1738, _1739), vec3(_1737, _1738, _1739)));
    float _1744 = _1743 * _1737;
    float _1745 = _1743 * _1738;
    float _1746 = _1743 * _1739;
    float _1747 = dot(vec3(_285, _286, _287), vec3(cbLight._m0[_1543].xyz));
    float _3743 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
    float _1750 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
    float _1751 = dot(vec3(_285, _286, _287), vec3(_1744, _1745, _1746));
    float _3754 = isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0));
    float _1754 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
    float _1755 = dot(vec3(cbLight._m0[_1543].xyz), vec3(_1744, _1745, _1746));
    float _3765 = isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0));
    float _1759 = _1736 * _1736;
    float _1763 = ((_1754 * _1754) * (_1759 + (-1.0))) + 1.0;
    float _1772 = (exp2(log2(1.0 - (isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1773 = 1.0 - _1736;
    float _1783 = (0.5 / (((_1672 * ((_1750 * _1773) + _1736)) + 9.9999999392252902907785028219223e-09) + (((_1672 * _1773) + _1736) * _1750))) * _1750;
    float _3776 = isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0));
    float _1785 = (isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0))) * (_1759 / ((_1763 * _1763) * 3.141590118408203125));
    float _1795 = (((_1772 * cbLight._m0[_1724].x) * _1785) * _1525) + ((((cbLight._m0[_1643].x * _1494) * _1696) * _1710) * _1539);
    float _1796 = (((_1772 * cbLight._m0[_1724].y) * _1785) * _1525) + ((((cbLight._m0[_1643].y * _1495) * _1696) * _1710) * _1539);
    float _1797 = (((_1772 * cbLight._m0[_1724].z) * _1785) * _1525) + ((((cbLight._m0[_1643].z * _1496) * _1696) * _1710) * _1539);
    float _1859;
    float _1861;
    float _1863;
    if (_1580)
    {
        _1859 = _1795;
        _1861 = _1796;
        _1863 = _1797;
    }
    else
    {
        uint _1865 = _1502 + 2u;
        uint _1869 = _1502 + 10u;
        float _1883 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1865].w)) * _289) * 0.949999988079071044921875);
        float _1884 = _1883 * _1883;
        float _1885 = cbLight._m0[_1865].x + _367;
        float _1886 = cbLight._m0[_1865].y + _368;
        float _1887 = cbLight._m0[_1865].z + _369;
        float _1891 = inversesqrt(dot(vec3(_1885, _1886, _1887), vec3(_1885, _1886, _1887)));
        float _1892 = _1891 * _1885;
        float _1893 = _1891 * _1886;
        float _1894 = _1891 * _1887;
        float _1895 = dot(vec3(_285, _286, _287), vec3(cbLight._m0[_1865].xyz));
        float _3787 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
        float _1898 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
        float _1899 = dot(vec3(_285, _286, _287), vec3(_1892, _1893, _1894));
        float _3798 = isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0));
        float _1902 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
        float _1903 = dot(vec3(cbLight._m0[_1865].xyz), vec3(_1892, _1893, _1894));
        float _3809 = isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0));
        float _1907 = _1884 * _1884;
        float _1911 = ((_1902 * _1902) * (_1907 + (-1.0))) + 1.0;
        float _1920 = (exp2(log2(1.0 - (isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1921 = 1.0 - _1884;
        float _1931 = (0.5 / (((_1672 * ((_1898 * _1921) + _1884)) + 9.9999999392252902907785028219223e-09) + (((_1672 * _1921) + _1884) * _1898))) * _1898;
        float _3820 = isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0));
        float _1933 = (isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0))) * (_1907 / ((_1911 * _1911) * 3.141590118408203125));
        float _1934 = isnan(1.0) ? _1517 : (isnan(_1517) ? 1.0 : min(_1517, 1.0));
        _1859 = (((_1920 * cbLight._m0[_1869].x) * _1933) * _1934) + _1795;
        _1861 = (((_1920 * cbLight._m0[_1869].y) * _1933) * _1934) + _1796;
        _1863 = (((_1920 * cbLight._m0[_1869].z) * _1933) * _1934) + _1797;
    }
    float _1969;
    float _1971;
    float _1973;
    if (_1598)
    {
        _1969 = _1859;
        _1971 = _1861;
        _1973 = _1863;
    }
    else
    {
        uint _1980 = _1502 + 3u;
        uint _1984 = _1502 + 11u;
        float _1998 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1980].w)) * _289) * 0.949999988079071044921875);
        float _1999 = _1998 * _1998;
        float _2000 = cbLight._m0[_1980].x + _367;
        float _2001 = cbLight._m0[_1980].y + _368;
        float _2002 = cbLight._m0[_1980].z + _369;
        float _2006 = inversesqrt(dot(vec3(_2000, _2001, _2002), vec3(_2000, _2001, _2002)));
        float _2007 = _2006 * _2000;
        float _2008 = _2006 * _2001;
        float _2009 = _2006 * _2002;
        float _2010 = dot(vec3(_285, _286, _287), vec3(cbLight._m0[_1980].xyz));
        float _3836 = isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0));
        float _2013 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
        float _2014 = dot(vec3(_285, _286, _287), vec3(_2007, _2008, _2009));
        float _3847 = isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0));
        float _2017 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
        float _2018 = dot(vec3(cbLight._m0[_1980].xyz), vec3(_2007, _2008, _2009));
        float _3858 = isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0));
        float _2022 = _1999 * _1999;
        float _2026 = ((_2017 * _2017) * (_2022 + (-1.0))) + 1.0;
        float _2035 = (exp2(log2(1.0 - (isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2036 = 1.0 - _1999;
        float _2046 = (0.5 / (((_1672 * ((_2013 * _2036) + _1999)) + 9.9999999392252902907785028219223e-09) + (((_1672 * _2036) + _1999) * _2013))) * _2013;
        float _3869 = isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0));
        float _2048 = (isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0))) * (_2022 / ((_2026 * _2026) * 3.141590118408203125));
        float _2049 = isnan(1.0) ? _1518 : (isnan(_1518) ? 1.0 : min(_1518, 1.0));
        _1969 = (((_2035 * cbLight._m0[_1984].x) * _2048) * _2049) + _1859;
        _1971 = (((_2035 * cbLight._m0[_1984].y) * _2048) * _2049) + _1861;
        _1973 = (((_2035 * cbLight._m0[_1984].z) * _2048) * _2049) + _1863;
    }
    float _2183;
    float _2185;
    float _2187;
    float _2189;
    float _2191;
    float _2193;
    if (_1500.y == 0u)
    {
        float _2124 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2125 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2124;
        float _2126 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2124;
        float _2127 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2124;
        uvec4 _2139 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2140 = _2139.x;
        uint _2151 = uint((float(_2139.y) * floor(float(uint(cbSceneParam._m0[85u].y * _376) / _2140))) + floor(float(uint(cbSceneParam._m0[85u].x * _375) / _2140)));
        float _2161 = (log2(_2127 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2162 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
        uint _2165 = uint(isnan(14.0) ? _2162 : (isnan(_2162) ? 14.0 : min(_2162, 14.0)));
        uvec4 _2170 = texelFetch(g_lightClusterGridBuffer, int(((_2165 << 2u) + (_2151 << 6u)) >> 2u));
        uint _2171 = _2170.x;
        uint _2172 = _2139.z;
        float _2273;
        float _2275;
        float _2277;
        float _2279;
        float _2281;
        float _2283;
        if (((((1u << ((_2172 >> 4u) & 15u)) + 4294967295u) & _2171) == 0u) || ((_2172 & 240u) == 0u))
        {
            _2273 = 0.0;
            _2275 = 0.0;
            _2277 = 0.0;
            _2279 = 0.0;
            _2281 = 0.0;
            _2283 = 0.0;
        }
        else
        {
            float _2274;
            float _2276;
            float _2278;
            float _2280;
            float _2282;
            float _2284;
            float _2417 = 0.0;
            float _2418 = 0.0;
            float _2419 = 0.0;
            float _2420 = 0.0;
            float _2421 = 0.0;
            float _2422 = 0.0;
            uint _2423 = 0u;
            uint _2432;
            bool _2433;
            for (;;)
            {
                _2432 = texelFetch(g_lightClassification, int((((_2165 << 5u) + (_2151 << 9u)) + (_2423 << 2u)) >> 2u)).x;
                _2433 = _2432 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2433)
                {
                    frontier_phi_63_pred = _2422;
                    frontier_phi_63_pred_1 = _2421;
                    frontier_phi_63_pred_2 = _2420;
                    frontier_phi_63_pred_3 = _2419;
                    frontier_phi_63_pred_4 = _2418;
                    frontier_phi_63_pred_5 = _2417;
                }
                else
                {
                    float _2541;
                    float _2542;
                    float _2543;
                    float _2544;
                    float _2545;
                    float _2546;
                    uint _2547;
                    _2541 = _2417;
                    _2542 = _2418;
                    _2543 = _2419;
                    _2544 = _2420;
                    _2545 = _2421;
                    _2546 = _2422;
                    _2547 = _2432;
                    float _2473;
                    float _2474;
                    float _2475;
                    float _2476;
                    float _2477;
                    float _2478;
                    for (;;)
                    {
                        uint _2551 = uint(findLSB(_2547)) + (_2423 << 5u);
                        uint _2548 = (_2547 + 4294967295u) & _2547;
                        uint _2553 = _2551 * 48u;
                        vec4 _2567 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2553)).x, texelFetch(g_PointLightRenderingBuffer, int(_2553 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2553 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2553 + 3u)).x));
                        uint _2573 = (_2551 * 48u) + 4u;
                        vec4 _2586 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2573)).x, texelFetch(g_PointLightRenderingBuffer, int(_2573 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2573 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2573 + 3u)).x));
                        uint _2592 = (_2551 * 48u) + 8u;
                        vec3 _2603 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2592)).x, texelFetch(g_PointLightRenderingBuffer, int(_2592 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2592 + 2u)).x));
                        float _2607 = _2567.x - _2125;
                        float _2608 = _2567.y - _2126;
                        float _2609 = _2567.z - _2127;
                        float _2610 = dot(vec3(_2607, _2608, _2609), vec3(_2607, _2608, _2609));
                        float _2613 = inversesqrt(_2610);
                        float _2614 = _2613 * _2607;
                        float _2615 = _2613 * _2608;
                        float _2616 = _2613 * _2609;
                        float _2617 = dot(vec3(_397, _400, _403), vec3(_2614, _2615, _2616));
                        float _2622 = 1.0 - (_2610 * _2567.w);
                        float _3895 = isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0));
                        float _2623 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
                        float _2624 = sqrt(_2610) * _2586.w;
                        float _2627 = 1.39999997615814208984375 / (_2624 + 1.39999997615814208984375);
                        float _2628 = _2627 * _2627;
                        float _2631 = ((1.0 - _2628) * _2617) + _2628;
                        float _2634 = _2624 * _2624;
                        float _2638 = ((isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0))) * _2623) / ((_2634 * 0.699999988079071044921875) + 1.0);
                        float _2642 = (-0.0) - _2125;
                        float _2643 = (-0.0) - _2126;
                        float _2644 = (-0.0) - _2127;
                        float _2648 = inversesqrt(dot(vec3(_2642, _2643, _2644), vec3(_2642, _2643, _2644)));
                        float _2649 = _2648 * _2642;
                        float _2650 = _2648 * _2643;
                        float _2651 = _2648 * _2644;
                        float _2659 = exp2(log2(1.0 / ((_2634 * 3.5) + 5.0)) * 0.25);
                        float _2660 = 1.0 - _458;
                        float _2667 = sqrt(1.0 - ((1.0 - (_2660 * _2660)) * (1.0 - (_2659 * _2659))));
                        float _2668 = _2667 * _2667;
                        float _2669 = _2668 * _2668;
                        float _2670 = _2649 + _2614;
                        float _2671 = _2650 + _2615;
                        float _2672 = _2651 + _2616;
                        float _2676 = inversesqrt(dot(vec3(_2670, _2671, _2672), vec3(_2670, _2671, _2672)));
                        float _2680 = dot(vec3(_397, _400, _403), vec3(_2649, _2650, _2651));
                        float _3911 = isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : max(_2680, 0.0));
                        float _2683 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
                        float _2684 = dot(vec3(_397, _400, _403), vec3(_2676 * _2670, _2676 * _2671, _2676 * _2672));
                        float _3922 = isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : max(_2684, 0.0));
                        float _2687 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
                        float _2691 = ((_2687 * _2687) * (_2669 + (-1.0))) + 1.0;
                        float _2692 = _2627 * _2668;
                        float _2693 = _2692 * _2692;
                        float _2696 = ((1.0 - _2693) * _2617) + _2693;
                        float _3933 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0));
                        float _2697 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
                        float _2698 = 1.0 - _2668;
                        float _2708 = (0.5 / (((_2697 * ((_2683 * _2698) + _2668)) + 9.9999999392252902907785028219223e-09) + (((_2697 * _2698) + _2668) * _2683))) * _2697;
                        float _3944 = isnan(0.0) ? _2708 : (isnan(_2708) ? 0.0 : max(_2708, 0.0));
                        float _2719 = (((_2669 * 3.1415927410125732421875) * (isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0)))) / ((_2691 * _2691) * ((_2634 * 2.1991131305694580078125) + 3.141590118408203125))) * _2623;
                        _2476 = (_2638 * _2586.x) + _2544;
                        _2477 = (_2638 * _2586.y) + _2545;
                        _2478 = (_2638 * _2586.z) + _2546;
                        _2473 = (_2719 * _2603.x) + _2541;
                        _2474 = (_2719 * _2603.y) + _2542;
                        _2475 = (_2719 * _2603.z) + _2543;
                        if (_2548 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2541 = _2473;
                            _2542 = _2474;
                            _2543 = _2475;
                            _2544 = _2476;
                            _2545 = _2477;
                            _2546 = _2478;
                            _2547 = _2548;
                        }
                    }
                    frontier_phi_63_pred = _2478;
                    frontier_phi_63_pred_1 = _2477;
                    frontier_phi_63_pred_2 = _2476;
                    frontier_phi_63_pred_3 = _2475;
                    frontier_phi_63_pred_4 = _2474;
                    frontier_phi_63_pred_5 = _2473;
                }
                _2284 = frontier_phi_63_pred;
                _2282 = frontier_phi_63_pred_1;
                _2280 = frontier_phi_63_pred_2;
                _2278 = frontier_phi_63_pred_3;
                _2276 = frontier_phi_63_pred_4;
                _2274 = frontier_phi_63_pred_5;
                uint _2424 = _2423 + 1u;
                if (_2424 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2417 = _2274;
                    _2418 = _2276;
                    _2419 = _2278;
                    _2420 = _2280;
                    _2421 = _2282;
                    _2422 = _2284;
                    _2423 = _2424;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2273 = _2274;
            _2275 = _2276;
            _2277 = _2278;
            _2279 = _2280;
            _2281 = _2282;
            _2283 = _2284;
        }
        uvec4 _2287 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2288 = _2287.z;
        uint _2290 = (_2288 >> 8u) & 15u;
        float _2385;
        float _2387;
        float _2389;
        float _2391;
        float _2393;
        float _2395;
        if (((4294967295u << _2290) & _2171) == 0u)
        {
            _2385 = _2273;
            _2387 = _2275;
            _2389 = _2277;
            _2391 = _2279;
            _2393 = _2281;
            _2395 = _2283;
        }
        else
        {
            float _2410 = inversesqrt(dot(vec3(_2125, _2126, _2127), vec3(_2125, _2126, _2127)));
            float _2411 = _2410 * _2125;
            float _2412 = _2410 * _2126;
            float _2413 = _2410 * _2127;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2290 < ((_2288 >> 12u) & 15u))
            {
                float _2386;
                float _2388;
                float _2390;
                float _2392;
                float _2394;
                float _2396;
                float _2524 = _2273;
                float _2525 = _2275;
                float _2526 = _2277;
                float _2527 = _2279;
                float _2528 = _2281;
                float _2529 = _2283;
                uint _2530 = _2290;
                uint _2539;
                bool _2540;
                for (;;)
                {
                    _2539 = texelFetch(g_lightClassification, int((((_2165 << 5u) + (_2151 << 9u)) + (_2530 << 2u)) >> 2u)).x;
                    _2540 = _2539 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2540)
                    {
                        frontier_phi_69_pred = _2529;
                        frontier_phi_69_pred_1 = _2528;
                        frontier_phi_69_pred_2 = _2527;
                        frontier_phi_69_pred_3 = _2526;
                        frontier_phi_69_pred_4 = _2525;
                        frontier_phi_69_pred_5 = _2524;
                    }
                    else
                    {
                        float _2724;
                        float _2725;
                        float _2726;
                        float _2727;
                        float _2728;
                        float _2729;
                        float _3020;
                        float _3021;
                        float _3022;
                        float _3023;
                        float _3024;
                        float _3025;
                        float _2737 = _2524;
                        float _2738 = _2525;
                        float _2739 = _2526;
                        float _2740 = _2527;
                        float _2741 = _2528;
                        float _2742 = _2529;
                        uint _2743 = _2539;
                        uint _2744;
                        vec4 _2769;
                        float _2770;
                        vec4 _2785;
                        vec3 _2797;
                        vec4 _2813;
                        vec4 _2829;
                        float _2876;
                        bool _2877;
                        for (;;)
                        {
                            uint _2754 = ((_2530 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2743));
                            _2744 = (_2743 + 4294967295u) & _2743;
                            uint _2756 = _2754 * 40u;
                            _2769 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2756)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2756 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2756 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2756 + 3u)).x));
                            _2770 = _2769.w;
                            uint _2772 = (_2754 * 40u) + 4u;
                            _2785 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2772)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2772 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2772 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2772 + 3u)).x));
                            uint _2787 = (_2754 * 40u) + 8u;
                            _2797 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2787)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2787 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2787 + 2u)).x));
                            uint _2800 = (_2754 * 40u) + 16u;
                            _2813 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2800)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2800 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2800 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2800 + 3u)).x));
                            uint _2816 = (_2754 * 40u) + 20u;
                            _2829 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2816)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2816 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2816 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2816 + 3u)).x));
                            uint _2832 = (_2754 * 40u) + 24u;
                            vec4 _2845 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2832)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2832 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2832 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2832 + 3u)).x));
                            uint _2851 = (_2754 * 40u) + 28u;
                            vec4 _2864 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2851)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2851 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2851 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2851 + 3u)).x));
                            _2876 = fma(_2127, _2864.z, fma(_2126, _2864.y, _2864.x * _2125)) + _2864.w;
                            _2877 = !((fma(_2127, _2845.z, fma(_2126, _2845.y, _2845.x * _2125)) + _2845.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2877)
                            {
                                float _2904 = _2769.x - _2125;
                                float _2905 = _2769.y - _2126;
                                float _2906 = _2769.z - _2127;
                                float _2907 = dot(vec3(_2904, _2905, _2906), vec3(_2904, _2905, _2906));
                                float _2910 = inversesqrt(_2907);
                                float _2911 = _2910 * _2904;
                                float _2912 = _2910 * _2905;
                                float _2913 = _2910 * _2906;
                                float _2917 = 1.0 - (_2907 / (_2770 * _2770));
                                float _3955 = isnan(0.0) ? _2917 : (isnan(_2917) ? 0.0 : max(_2917, 0.0));
                                float _2918 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
                                float _2922 = sqrt(_2907) * _2785.w;
                                float _2924 = 1.39999997615814208984375 / (_2922 + 1.39999997615814208984375);
                                float _2925 = _2924 * _2924;
                                float _2928 = ((1.0 - _2925) * dot(vec3(_2911, _2912, _2913), vec3(_397, _400, _403))) + _2925;
                                float _2931 = _2922 * _2922;
                                float _2935 = (fma(_2127, _2813.z, fma(_2126, _2813.y, _2813.x * _2125)) + _2813.w) / _2876;
                                float _2936 = (fma(_2127, _2829.z, fma(_2126, _2829.y, _2829.x * _2125)) + _2829.w) / _2876;
                                float _2940 = 1.0 - dot(vec2(_2935, _2936), vec2(_2935, _2936));
                                float _3971 = isnan(0.0) ? _2940 : (isnan(_2940) ? 0.0 : max(_2940, 0.0));
                                float _2941 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
                                float _2942 = _2941 * (((isnan(0.0) ? _2928 : (isnan(_2928) ? 0.0 : max(_2928, 0.0))) * _2918) / ((_2931 * 0.699999988079071044921875) + 1.0));
                                float _2954 = exp2(log2(1.0 / ((_2931 * 3.5) + 5.0)) * 0.25);
                                float _2955 = 1.0 - _458;
                                float _2962 = sqrt(1.0 - ((1.0 - (_2955 * _2955)) * (1.0 - (_2954 * _2954))));
                                float _2963 = _2962 * _2962;
                                float _2964 = _2963 * _2963;
                                float _2965 = _2911 - _2411;
                                float _2966 = _2912 - _2412;
                                float _2967 = _2913 - _2413;
                                float _2971 = inversesqrt(dot(vec3(_2965, _2966, _2967), vec3(_2965, _2966, _2967)));
                                float _2975 = dot(vec3(_397, _400, _403), vec3((-0.0) - _2411, (-0.0) - _2412, (-0.0) - _2413));
                                float _3982 = isnan(0.0) ? _2975 : (isnan(_2975) ? 0.0 : max(_2975, 0.0));
                                float _2978 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
                                float _2979 = dot(vec3(_397, _400, _403), vec3(_2971 * _2965, _2971 * _2966, _2971 * _2967));
                                float _3993 = isnan(0.0) ? _2979 : (isnan(_2979) ? 0.0 : max(_2979, 0.0));
                                float _2982 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
                                float _2986 = ((_2982 * _2982) * (_2964 + (-1.0))) + 1.0;
                                float _2987 = _2924 * _2963;
                                float _2988 = _2987 * _2987;
                                float _2994 = ((1.0 - _2988) * dot(vec3(_397, _400, _403), vec3(_2911, _2912, _2913))) + _2988;
                                float _4004 = isnan(0.0) ? _2994 : (isnan(_2994) ? 0.0 : max(_2994, 0.0));
                                float _2995 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
                                float _2996 = 1.0 - _2963;
                                float _3006 = (0.5 / (((_2995 * ((_2978 * _2996) + _2963)) + 9.9999999392252902907785028219223e-09) + (((_2995 * _2996) + _2963) * _2978))) * _2995;
                                float _4015 = isnan(0.0) ? _3006 : (isnan(_3006) ? 0.0 : max(_3006, 0.0));
                                float _3016 = (_2941 * _2918) * (((_2964 * 3.1415927410125732421875) * (isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0)))) / ((_2986 * _2986) * ((_2931 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _2942 * _2785.z;
                                frontier_phi_75_pred_1 = _2942 * _2785.y;
                                frontier_phi_75_pred_2 = _2942 * _2785.x;
                                frontier_phi_75_pred_3 = _3016 * _2797.z;
                                frontier_phi_75_pred_4 = _3016 * _2797.y;
                                frontier_phi_75_pred_5 = _3016 * _2797.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3025 = frontier_phi_75_pred;
                            _3024 = frontier_phi_75_pred_1;
                            _3023 = frontier_phi_75_pred_2;
                            _3022 = frontier_phi_75_pred_3;
                            _3021 = frontier_phi_75_pred_4;
                            _3020 = frontier_phi_75_pred_5;
                            _2727 = _3023 + _2740;
                            _2728 = _3024 + _2741;
                            _2729 = _3025 + _2742;
                            _2724 = _3020 + _2737;
                            _2725 = _3021 + _2738;
                            _2726 = _3022 + _2739;
                            if (_2744 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2737 = _2724;
                                _2738 = _2725;
                                _2739 = _2726;
                                _2740 = _2727;
                                _2741 = _2728;
                                _2742 = _2729;
                                _2743 = _2744;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2729;
                        frontier_phi_69_pred_1 = _2728;
                        frontier_phi_69_pred_2 = _2727;
                        frontier_phi_69_pred_3 = _2726;
                        frontier_phi_69_pred_4 = _2725;
                        frontier_phi_69_pred_5 = _2724;
                    }
                    _2396 = frontier_phi_69_pred;
                    _2394 = frontier_phi_69_pred_1;
                    _2392 = frontier_phi_69_pred_2;
                    _2390 = frontier_phi_69_pred_3;
                    _2388 = frontier_phi_69_pred_4;
                    _2386 = frontier_phi_69_pred_5;
                    uint _2531 = _2530 + 1u;
                    if (_2531 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2524 = _2386;
                        _2525 = _2388;
                        _2526 = _2390;
                        _2527 = _2392;
                        _2528 = _2394;
                        _2529 = _2396;
                        _2530 = _2531;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2396;
                frontier_phi_57_58_ladder_1 = _2394;
                frontier_phi_57_58_ladder_2 = _2392;
                frontier_phi_57_58_ladder_3 = _2390;
                frontier_phi_57_58_ladder_4 = _2388;
                frontier_phi_57_58_ladder_5 = _2386;
            }
            else
            {
                frontier_phi_57_58_ladder = _2283;
                frontier_phi_57_58_ladder_1 = _2281;
                frontier_phi_57_58_ladder_2 = _2279;
                frontier_phi_57_58_ladder_3 = _2277;
                frontier_phi_57_58_ladder_4 = _2275;
                frontier_phi_57_58_ladder_5 = _2273;
            }
            _2385 = frontier_phi_57_58_ladder_5;
            _2387 = frontier_phi_57_58_ladder_4;
            _2389 = frontier_phi_57_58_ladder_3;
            _2391 = frontier_phi_57_58_ladder_2;
            _2393 = frontier_phi_57_58_ladder_1;
            _2395 = frontier_phi_57_58_ladder;
        }
        float _2400 = isnan(1.0) ? _442 : (isnan(_442) ? 1.0 : min(_442, 1.0));
        _2183 = (_2400 * _2391) + _1636;
        _2185 = (_2400 * _2393) + _1638;
        _2187 = (_2400 * _2395) + _1640;
        _2189 = ((_2385 * 0.039999999105930328369140625) * _2400) + _1969;
        _2191 = ((_2387 * 0.039999999105930328369140625) * _2400) + _1971;
        _2193 = ((_2389 * 0.039999999105930328369140625) * _2400) + _1973;
    }
    else
    {
        _2183 = _1636;
        _2185 = _1638;
        _2187 = _1640;
        _2189 = _1969;
        _2191 = _1971;
        _2193 = _1973;
    }
    float _4031 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _4042 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _4053 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _4064 = isnan(0.0) ? _288 : (isnan(_288) ? 0.0 : max(_288, 0.0));
    float _2218 = cbInstanceData._m0[_416 + 6u].w * (isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0)));
    float _2223 = _375 / cbSceneParam._m0[86u].x;
    float _2224 = _376 / cbSceneParam._m0[86u].y;
    vec4 _2238 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2223, _2224, (log2((isnan(cbSceneParam._m0[77u].w) ? _308 : (isnan(_308) ? cbSceneParam._m0[77u].w : min(_308, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2240 = _2238.x;
    float _2241 = _2238.y;
    float _2242 = _2238.z;
    float _2243 = _2238.w;
    float _2335;
    float _2337;
    float _2339;
    float _2341;
    if (_308 > cbSceneParam._m0[78u].w)
    {
        float _2298 = isnan(_308) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _308 : min(cbSceneParam._m0[80u].w, _308));
        float _2299 = _2298 / _308;
        float _2310 = _2299 * _360;
        float _2311 = _361 * _2299;
        float _2312 = (-0.0) - _2311;
        float _2313 = _2299 * _362;
        float _2315 = (cbSceneParam._m0[77u].w * _2312) / _2298;
        float _2316 = _2315 + cbSceneParam._m0[79u].w;
        float _2317 = cbSceneParam._m0[79u].w - _2311;
        float _2323 = sqrt(((_2310 * _2310) + (_2311 * _2311)) + (_2313 * _2313));
        float _2326 = (1.0 - (cbSceneParam._m0[77u].w / _2298)) * _2323;
        float _2331 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2333 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2486;
        if (abs((_2312 - _2315) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2486 = ((((_2316 > 0.0) ? exp2(_2331 * _2316) : (2.0 - exp2(_2333 * _2316))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2326;
        }
        else
        {
            float _2446 = 1.0 / cbSceneParam._m0[80u].x;
            float _2447 = isnan(_2317) ? _2316 : (isnan(_2316) ? _2317 : max(_2316, _2317));
            float _2448 = isnan(_2317) ? _2316 : (isnan(_2316) ? _2317 : min(_2316, _2317));
            float _2457 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : min(_2447, 0.0));
            float _2458 = isnan(0.0) ? _2448 : (isnan(_2448) ? 0.0 : min(_2448, 0.0));
            _2486 = ((abs(_2323 / _2312) * cbSceneParam._m0[80u].y) * ((((_2457 - _2458) * 2.0) - ((exp2(_2331 * (isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0)))) - exp2(_2331 * (isnan(0.0) ? _2448 : (isnan(_2448) ? 0.0 : max(_2448, 0.0))))) * _2446)) - ((exp2(_2333 * _2457) - exp2(_2333 * _2458)) * _2446))) + (_2326 * cbSceneParam._m0[80u].z);
        }
        vec4 _2488 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2223, _2224, 1.0), 0.0);
        float _2497 = exp2((_2486 * (-1.44269502162933349609375)) * (1.0 - _2488.w));
        float _2498 = log2(_2497);
        float _2514 = log2(_2243);
        _2335 = (exp2(_2514 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2498 * cbSceneParam._m0[78u].x)) * _2488.x) / cbSceneParam._m0[78u].x)) + _2240;
        _2337 = (exp2(_2514 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2498 * cbSceneParam._m0[78u].y)) * _2488.y) / cbSceneParam._m0[78u].y)) + _2241;
        _2339 = (exp2(_2514 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2498 * cbSceneParam._m0[78u].z)) * _2488.z) / cbSceneParam._m0[78u].z)) + _2242;
        _2341 = _2497 * _2243;
    }
    else
    {
        _2335 = _2240;
        _2337 = _2241;
        _2339 = _2242;
        _2341 = _2243;
    }
    float _2353 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2354 = _2353 == 3.0;
    float _2355 = log2(_2341);
    float _2362 = exp2(_2355 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0))) * (_2183 + ((isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0))) * _442))) + ((_2189 + ((isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0))) * _1249)) * cbPerFrame._m0[3u].x));
    float _2363 = exp2(_2355 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0))) * (_2185 + ((isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0))) * _442))) + ((_2191 + ((isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0))) * _1249)) * cbPerFrame._m0[3u].x));
    float _2364 = exp2(_2355 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0))) * (_2187 + ((isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0))) * _442))) + ((_2193 + ((isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0))) * _1249)) * cbPerFrame._m0[3u].x));
    float _2373 = (_2353 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2373 * (_2354 ? _2362 : (_2362 + (cbSceneParam._m0[72u].w * _2335)));
    SV_Target.y = _2373 * (_2354 ? _2363 : (_2363 + (cbSceneParam._m0[72u].w * _2337)));
    SV_Target.z = _2373 * (_2354 ? _2364 : (_2364 + (cbSceneParam._m0[72u].w * _2339)));
    SV_Target.w = _2218;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2218;
}


