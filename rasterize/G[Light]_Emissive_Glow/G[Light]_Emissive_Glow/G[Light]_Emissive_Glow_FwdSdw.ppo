#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D G_Light_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D G_Light_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _728;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _163 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _164 = _163 * NORMAL.x;
    float _165 = _163 * NORMAL.y;
    float _166 = _163 * NORMAL.z;
    vec4 _186 = texture(sampler2D(G_Light_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _192 = _186.x * cbMtdParam._m0[9u].x;
    float _193 = _186.y * cbMtdParam._m0[9u].y;
    float _194 = _186.z * cbMtdParam._m0[9u].z;
    vec4 _216 = texture(sampler2D(G_Light_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _228 = inversesqrt(dot(vec3(_164, _165, _166), vec3(_164, _165, _166)));
    float _229 = _228 * _164;
    float _230 = _228 * _165;
    float _231 = _228 * _166;
    float _3167 = isnan(0.0) ? _192 : (isnan(_192) ? 0.0 : max(_192, 0.0));
    float _3178 = isnan(0.0) ? _193 : (isnan(_193) ? 0.0 : max(_193, 0.0));
    float _3189 = isnan(0.0) ? _194 : (isnan(_194) ? 0.0 : max(_194, 0.0));
    float _251 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _292 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _302 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _292);
    float _303 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _292);
    float _304 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _292);
    float _308 = inversesqrt(dot(vec3(_302, _303, _304), vec3(_302, _303, _304)));
    float _309 = _302 * _308;
    float _310 = _303 * _308;
    float _311 = _304 * _308;
    float _317 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _318 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _339 = fma(_231, cbSceneParam._m0[5u].z, fma(_230, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _229));
    float _342 = fma(_231, cbSceneParam._m0[6u].z, fma(_230, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _229));
    float _345 = fma(_231, cbSceneParam._m0[7u].z, fma(_230, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _229));
    uint _358 = uint(roundEven(NORMAL.w)) * 13u;
    uint _360 = _358 + 9u;
    uint _361 = _360 + uint(cbMatDynParam._m0[0u].w);
    float _367 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3167 : (isnan(_3167) ? 1.0 : min(_3167, 1.0)))) * cbInstanceData._m0[_361].x;
    float _368 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3178 : (isnan(_3178) ? 1.0 : min(_3178, 1.0)))) * cbInstanceData._m0[_361].y;
    float _369 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3189 : (isnan(_3189) ? 1.0 : min(_3189, 1.0)))) * cbInstanceData._m0[_361].z;
    float _3200 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _370 = isnan(1.0) ? _3200 : (isnan(_3200) ? 1.0 : min(_3200, 1.0));
    float _3211 = isnan(0.0) ? _368 : (isnan(_368) ? 0.0 : max(_368, 0.0));
    float _371 = isnan(1.0) ? _3211 : (isnan(_3211) ? 1.0 : min(_3211, 1.0));
    float _3222 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _372 = isnan(1.0) ? _3222 : (isnan(_3222) ? 1.0 : min(_3222, 1.0));
    vec4 _381 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _317, cbSceneParam._m0[86u].y * _318));
    float _384 = _381.x * TEXCOORD.z;
    float _385 = dot(vec3(_229, _230, _231), vec3(_309, _310, _311));
    float _388 = _385 * 2.0;
    float _393 = (_388 * _229) - _309;
    float _394 = (_388 * _230) - _310;
    float _395 = (_388 * _231) - _311;
    float _417 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _421 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _425 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _727;
    float _729;
    float _730;
    float _731;
    float _732;
    float _733;
    float _734;
    float _735;
    float _736;
    float _737;
    float _738;
    float _739;
    float _740;
    float _741;
    float _742;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _452 = fma(_425, cbModelParam._m0[26u].z, fma(_421, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _417));
        float _456 = fma(_425, cbModelParam._m0[27u].z, fma(_421, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _417));
        float _460 = fma(_425, cbModelParam._m0[28u].z, fma(_421, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _417));
        float _485 = _417 + _229;
        float _486 = _421 + _230;
        float _487 = _425 + _231;
        float _497 = fma(_487, cbModelParam._m0[26u].z, fma(_486, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _485)) - _452;
        float _498 = fma(_487, cbModelParam._m0[27u].z, fma(_486, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _485)) - _456;
        float _499 = fma(_487, cbModelParam._m0[28u].z, fma(_486, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _485)) - _460;
        float _503 = inversesqrt(dot(vec3(_497, _498, _499), vec3(_497, _498, _499)));
        float _516 = ((_503 * _497) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_452 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _517 = ((_503 * _498) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_456 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _518 = ((_503 * _499) / cbModelParam._m0[34u].z) + ((((((_460 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _521 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_516, _517, _518), 0.0);
        vec4 _528 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_516, _517, _518), 0.0);
        vec4 _535 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_516, _517, _518), 0.0);
        vec4 _542 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_516, _517, _518), 0.0);
        float _555 = exp2((_521.w + (-0.5)) * 20.0) * 2.0;
        float _556 = _555 * (_521.x + (-0.5));
        float _557 = _555 * (_521.y + (-0.5));
        float _558 = _555 * (_521.z + (-0.5));
        float _565 = exp2((_528.w + (-0.5)) * 20.0) * 2.0;
        float _566 = _565 * (_528.x + (-0.5));
        float _567 = _565 * (_528.y + (-0.5));
        float _568 = _565 * (_528.z + (-0.5));
        float _575 = exp2((_535.w + (-0.5)) * 20.0) * 2.0;
        float _576 = _575 * (_535.x + (-0.5));
        float _577 = _575 * (_535.y + (-0.5));
        float _578 = _575 * (_535.z + (-0.5));
        float _585 = exp2((_542.w + (-0.5)) * 20.0) * 2.0;
        float _586 = _585 * (_542.x + (-0.5));
        float _587 = _585 * (_542.y + (-0.5));
        float _588 = _585 * (_542.z + (-0.5));
        float _589 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
        float _590 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
        float _591 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
        float _592 = _556 * 0.5;
        float _593 = _566 * 0.5;
        float _594 = _576 * 0.5;
        float _595 = dot(vec3(_592, _593, _594), vec3(_592, _593, _594));
        float _600 = (_595 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_595);
        float _609 = (dot(vec3(_229, _230, _231), vec3(_600 * _592, _600 * _593, _600 * _594)) + 1.0) * 0.5;
        float _3248 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
        float _619 = sqrt(((_593 * _593) + (_592 * _592)) + (_594 * _594)) / (_589 + 9.9999997473787516355514526367188e-06);
        float _3259 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
        float _620 = isnan(1.0) ? _3259 : (isnan(_3259) ? 1.0 : min(_3259, 1.0));
        float _621 = _620 * 2.0;
        float _625 = (1.0 - _620) / (_620 + 1.0);
        float _3270 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
        float _626 = isnan(1.0) ? _3270 : (isnan(_3270) ? 1.0 : min(_3270, 1.0));
        float _635 = ((((1.0 - _626) * (_621 + 2.0)) * exp2(log2(isnan(1.0) ? _3248 : (isnan(_3248) ? 1.0 : min(_3248, 1.0))) * (_621 + 1.0))) + _626) * _589;
        float _636 = _557 * 0.5;
        float _637 = _567 * 0.5;
        float _638 = _577 * 0.5;
        float _639 = dot(vec3(_636, _637, _638), vec3(_636, _637, _638));
        float _644 = (_639 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_639);
        float _652 = (dot(vec3(_229, _230, _231), vec3(_644 * _636, _644 * _637, _644 * _638)) + 1.0) * 0.5;
        float _3281 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
        float _661 = sqrt(((_637 * _637) + (_636 * _636)) + (_638 * _638)) / (_590 + 9.9999997473787516355514526367188e-06);
        float _3292 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
        float _662 = isnan(1.0) ? _3292 : (isnan(_3292) ? 1.0 : min(_3292, 1.0));
        float _663 = _662 * 2.0;
        float _667 = (1.0 - _662) / (_662 + 1.0);
        float _3303 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
        float _668 = isnan(1.0) ? _3303 : (isnan(_3303) ? 1.0 : min(_3303, 1.0));
        float _677 = ((((1.0 - _668) * (_663 + 2.0)) * exp2(log2(isnan(1.0) ? _3281 : (isnan(_3281) ? 1.0 : min(_3281, 1.0))) * (_663 + 1.0))) + _668) * _590;
        float _678 = _558 * 0.5;
        float _679 = _568 * 0.5;
        float _680 = _578 * 0.5;
        float _681 = dot(vec3(_678, _679, _680), vec3(_678, _679, _680));
        float _686 = (_681 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_681);
        float _694 = (dot(vec3(_229, _230, _231), vec3(_686 * _678, _686 * _679, _686 * _680)) + 1.0) * 0.5;
        float _3314 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
        float _703 = sqrt(((_679 * _679) + (_678 * _678)) + (_680 * _680)) / (_591 + 9.9999997473787516355514526367188e-06);
        float _3325 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
        float _704 = isnan(1.0) ? _3325 : (isnan(_3325) ? 1.0 : min(_3325, 1.0));
        float _705 = _704 * 2.0;
        float _709 = (1.0 - _704) / (_704 + 1.0);
        float _3336 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
        float _710 = isnan(1.0) ? _3336 : (isnan(_3336) ? 1.0 : min(_3336, 1.0));
        float _719 = ((((1.0 - _710) * (_705 + 2.0)) * exp2(log2(isnan(1.0) ? _3314 : (isnan(_3314) ? 1.0 : min(_3314, 1.0))) * (_705 + 1.0))) + _710) * _591;
        _727 = _558;
        _729 = _557;
        _730 = _556;
        _731 = _568;
        _732 = _567;
        _733 = _566;
        _734 = _578;
        _735 = _577;
        _736 = _576;
        _737 = _591;
        _738 = _590;
        _739 = _589;
        _740 = cbModelParam._m0[36u].z * (isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0)));
        _741 = cbModelParam._m0[36u].z * (isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0)));
        _742 = cbModelParam._m0[36u].z * (isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0)));
    }
    else
    {
        _727 = _728;
        _729 = _728;
        _730 = _728;
        _731 = _728;
        _732 = _728;
        _733 = _728;
        _734 = _728;
        _735 = _728;
        _736 = _728;
        _737 = _728;
        _738 = _728;
        _739 = _728;
        _740 = 0.0;
        _741 = 0.0;
        _742 = 0.0;
    }
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _768 = fma(_425, cbModelParam._m0[30u].z, fma(_421, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _417));
        float _772 = fma(_425, cbModelParam._m0[31u].z, fma(_421, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _417));
        float _776 = fma(_425, cbModelParam._m0[32u].z, fma(_421, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _417));
        float _799 = _417 + _229;
        float _800 = _421 + _230;
        float _801 = _425 + _231;
        float _811 = fma(_801, cbModelParam._m0[30u].z, fma(_800, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _799)) - _768;
        float _812 = fma(_801, cbModelParam._m0[31u].z, fma(_800, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _799)) - _772;
        float _813 = fma(_801, cbModelParam._m0[32u].z, fma(_800, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _799)) - _776;
        float _817 = inversesqrt(dot(vec3(_811, _812, _813), vec3(_811, _812, _813)));
        float _830 = ((_817 * _811) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_768 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _831 = ((_817 * _812) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_772 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _832 = ((_817 * _813) / cbModelParam._m0[35u].z) + ((((((_776 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _834 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_830, _831, _832), 0.0);
        vec4 _841 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_830, _831, _832), 0.0);
        vec4 _848 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_830, _831, _832), 0.0);
        vec4 _855 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_830, _831, _832), 0.0);
        float _867 = exp2((_834.w + (-0.5)) * 20.0) * 2.0;
        float _868 = _867 * (_834.x + (-0.5));
        float _869 = _867 * (_834.y + (-0.5));
        float _870 = _867 * (_834.z + (-0.5));
        float _877 = exp2((_841.w + (-0.5)) * 20.0) * 2.0;
        float _878 = _877 * (_841.x + (-0.5));
        float _879 = _877 * (_841.y + (-0.5));
        float _880 = _877 * (_841.z + (-0.5));
        float _887 = exp2((_848.w + (-0.5)) * 20.0) * 2.0;
        float _888 = _887 * (_848.x + (-0.5));
        float _889 = _887 * (_848.y + (-0.5));
        float _890 = _887 * (_848.z + (-0.5));
        float _897 = exp2((_855.w + (-0.5)) * 20.0) * 2.0;
        float _898 = _897 * (_855.x + (-0.5));
        float _899 = _897 * (_855.y + (-0.5));
        float _900 = _897 * (_855.z + (-0.5));
        float _901 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
        float _902 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
        float _903 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
        float _904 = _868 * 0.5;
        float _905 = _878 * 0.5;
        float _906 = _888 * 0.5;
        float _907 = dot(vec3(_904, _905, _906), vec3(_904, _905, _906));
        float _912 = (_907 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_907);
        float _920 = (dot(vec3(_229, _230, _231), vec3(_912 * _904, _912 * _905, _912 * _906)) + 1.0) * 0.5;
        float _3377 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
        float _929 = sqrt(((_905 * _905) + (_904 * _904)) + (_906 * _906)) / (_901 + 9.9999997473787516355514526367188e-06);
        float _3388 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
        float _930 = isnan(1.0) ? _3388 : (isnan(_3388) ? 1.0 : min(_3388, 1.0));
        float _931 = _930 * 2.0;
        float _935 = (1.0 - _930) / (_930 + 1.0);
        float _3399 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
        float _936 = isnan(1.0) ? _3399 : (isnan(_3399) ? 1.0 : min(_3399, 1.0));
        float _945 = ((((1.0 - _936) * (_931 + 2.0)) * exp2(log2(isnan(1.0) ? _3377 : (isnan(_3377) ? 1.0 : min(_3377, 1.0))) * (_931 + 1.0))) + _936) * _901;
        float _946 = _869 * 0.5;
        float _947 = _879 * 0.5;
        float _948 = _889 * 0.5;
        float _949 = dot(vec3(_946, _947, _948), vec3(_946, _947, _948));
        float _954 = (_949 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_949);
        float _962 = (dot(vec3(_229, _230, _231), vec3(_954 * _946, _954 * _947, _954 * _948)) + 1.0) * 0.5;
        float _3410 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _971 = sqrt(((_947 * _947) + (_946 * _946)) + (_948 * _948)) / (_902 + 9.9999997473787516355514526367188e-06);
        float _3421 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _972 = isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0));
        float _973 = _972 * 2.0;
        float _977 = (1.0 - _972) / (_972 + 1.0);
        float _3432 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _978 = isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0));
        float _987 = ((((1.0 - _978) * (_973 + 2.0)) * exp2(log2(isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0))) * (_973 + 1.0))) + _978) * _902;
        float _988 = _870 * 0.5;
        float _989 = _880 * 0.5;
        float _990 = _890 * 0.5;
        float _991 = dot(vec3(_988, _989, _990), vec3(_988, _989, _990));
        float _996 = (_991 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_991);
        float _1004 = (dot(vec3(_229, _230, _231), vec3(_996 * _988, _996 * _989, _996 * _990)) + 1.0) * 0.5;
        float _3443 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1013 = sqrt(((_989 * _989) + (_988 * _988)) + (_990 * _990)) / (_903 + 9.9999997473787516355514526367188e-06);
        float _3454 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1014 = isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0));
        float _1015 = _1014 * 2.0;
        float _1019 = (1.0 - _1014) / (_1014 + 1.0);
        float _3465 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1020 = isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0));
        float _1029 = ((((1.0 - _1020) * (_1015 + 2.0)) * exp2(log2(isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0))) * (_1015 + 1.0))) + _1020) * _903;
        _1037 = _870;
        _1038 = _869;
        _1039 = _868;
        _1040 = _880;
        _1041 = _879;
        _1042 = _878;
        _1043 = _890;
        _1044 = _889;
        _1045 = _888;
        _1046 = _903;
        _1047 = _902;
        _1048 = _901;
        _1049 = cbModelParam._m0[36u].w * (isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0)));
        _1050 = cbModelParam._m0[36u].w * (isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0)));
        _1051 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0)));
    }
    else
    {
        _1037 = _728;
        _1038 = _728;
        _1039 = _728;
        _1040 = _728;
        _1041 = _728;
        _1042 = _728;
        _1043 = _728;
        _1044 = _728;
        _1045 = _728;
        _1046 = _728;
        _1047 = _728;
        _1048 = _728;
        _1049 = 0.0;
        _1050 = 0.0;
        _1051 = 0.0;
    }
    float _1061 = (cbModelParam._m0[1u].x * (_1049 - _740)) + _740;
    float _1062 = (cbModelParam._m0[1u].x * (_1050 - _741)) + _741;
    float _1063 = (cbModelParam._m0[1u].x * (_1051 - _742)) + _742;
    float _1084 = fma(_1063, cbSceneParam._m0[89u].z, fma(_1062, cbSceneParam._m0[89u].y, _1061 * cbSceneParam._m0[89u].x));
    float _1087 = fma(_1063, cbSceneParam._m0[90u].z, fma(_1062, cbSceneParam._m0[90u].y, _1061 * cbSceneParam._m0[90u].x));
    float _1090 = fma(_1063, cbSceneParam._m0[91u].z, fma(_1062, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1061));
    float _1105 = _393 * 0.5;
    float _1106 = _394 * 0.5;
    float _1107 = _395 * 0.5;
    float _1108 = dot(vec4(_1105, _1106, _1107, 1.0), vec4(_1039, _1042, _1045, _1048));
    float _1111 = dot(vec4(_1105, _1106, _1107, 1.0), vec4(_1038, _1041, _1044, _1047));
    float _1114 = dot(vec4(_1105, _1106, _1107, 1.0), vec4(_1037, _1040, _1043, _1046));
    float _1148;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1121 = dot(vec4(_1105, _1106, _1107, 1.0), vec4(_727, _731, _734, _737));
        float _1125 = dot(vec4(_1105, _1106, _1107, 1.0), vec4(_729, _732, _735, _738));
        float _1129 = dot(vec4(_1105, _1106, _1107, 1.0), vec4(_730, _733, _736, _739));
        float _1136 = dot(vec4(cbModelParam._m0[39u]), vec4(_1105, _1106, _1107, 1.0));
        _1148 = dot(vec3(isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0)), isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0)), isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1136) ? 0.0 : (isnan(0.0) ? _1136 : max(0.0, _1136))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1148 = 1.0;
    }
    float _1159;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1150 = dot(vec4(cbModelParam._m0[40u]), vec4(_1105, _1106, _1107, 1.0));
        _1159 = dot(vec3(isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0)), isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0)), isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1150) ? 0.0 : (isnan(0.0) ? _1150 : max(0.0, _1150))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1159 = 1.0;
    }
    float _1163 = (_1159 * cbModelParam._m0[1u].x) + (_1148 * (1.0 - cbModelParam._m0[1u].x));
    float _1172 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1254;
    float _1256;
    float _1258;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1221 = fma(_425, cbModelParam._m0[13u].z, fma(_421, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _417)) + cbModelParam._m0[13u].w;
        float _1225 = fma(_425, cbModelParam._m0[14u].z, fma(_421, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _417)) + cbModelParam._m0[14u].w;
        float _1229 = fma(_425, cbModelParam._m0[15u].z, fma(_421, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _417)) + cbModelParam._m0[15u].w;
        float _1232 = fma(_395, cbModelParam._m0[13u].z, fma(_394, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _393));
        float _1235 = fma(_395, cbModelParam._m0[14u].z, fma(_394, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _393));
        float _1238 = fma(_395, cbModelParam._m0[15u].z, fma(_394, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _393));
        float _1264;
        if (_1232 > 0.0)
        {
            _1264 = abs((1.0 - _1221) / _1232);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1232 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1221 + 1.0) / _1232);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1264 = frontier_phi_14_12_ladder;
        }
        float _1438;
        if (_1235 > 0.0)
        {
            _1438 = abs((1.0 - _1225) / _1235);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1235 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1225 + 1.0) / _1235);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1438 = frontier_phi_23_19_ladder;
        }
        float _1735;
        if (_1238 > 0.0)
        {
            _1735 = abs((1.0 - _1229) / _1238);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1238 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1229 + 1.0) / _1238);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1735 = frontier_phi_35_30_ladder;
        }
        float _1737 = isnan(_1438) ? _1264 : (isnan(_1264) ? _1438 : min(_1264, _1438));
        float _1738 = isnan(_1735) ? _1737 : (isnan(_1737) ? _1735 : min(_1737, _1735));
        float _1742 = (_1738 * _1232) + _1221;
        float _1743 = (_1738 * _1235) + _1225;
        float _1744 = (_1738 * _1238) + _1229;
        float _1745 = _1738 * 9.9999997473787516355514526367188e-05;
        float _1747 = (-1.0) - _1745;
        float _1749 = _1745 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1744 > _1749) || ((_1744 < _1747) || ((_1743 > _1749) || ((_1743 < _1747) || ((_1742 < _1747) || (_1742 > _1749))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1889 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1744, cbModelParam._m0[9u].z, fma(_1743, cbModelParam._m0[9u].y, _1742 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1744, cbModelParam._m0[10u].z, fma(_1743, cbModelParam._m0[10u].y, _1742 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1744, cbModelParam._m0[11u].z, fma(_1743, cbModelParam._m0[11u].y, _1742 * cbModelParam._m0[11u].x))), _1172);
            frontier_phi_13_35_ladder = _1889.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1889.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1889.x * cbModelParam._m0[1u].y;
        }
        _1254 = frontier_phi_13_35_ladder_2;
        _1256 = frontier_phi_13_35_ladder_1;
        _1258 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1242 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_393, _394, _395), _1172);
        _1254 = _1242.x * cbModelParam._m0[1u].y;
        _1256 = _1242.y * cbModelParam._m0[1u].y;
        _1258 = _1242.z * cbModelParam._m0[1u].y;
    }
    float _1261 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1354;
    float _1356;
    float _1358;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1318 = fma(_425, cbModelParam._m0[21u].z, fma(_421, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _417)) + cbModelParam._m0[21u].w;
        float _1322 = fma(_425, cbModelParam._m0[22u].z, fma(_421, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _417)) + cbModelParam._m0[22u].w;
        float _1326 = fma(_425, cbModelParam._m0[23u].z, fma(_421, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _417)) + cbModelParam._m0[23u].w;
        float _1329 = fma(_395, cbModelParam._m0[21u].z, fma(_394, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _393));
        float _1332 = fma(_395, cbModelParam._m0[22u].z, fma(_394, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _393));
        float _1335 = fma(_395, cbModelParam._m0[23u].z, fma(_394, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _393));
        float _1443;
        if (_1329 > 0.0)
        {
            _1443 = abs((1.0 - _1318) / _1329);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1329 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1318 + 1.0) / _1329);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1443 = frontier_phi_25_21_ladder;
        }
        float _1762;
        if (_1332 > 0.0)
        {
            _1762 = abs((1.0 - _1322) / _1332);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1332 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1322 + 1.0) / _1332);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1762 = frontier_phi_37_32_ladder;
        }
        float _2035;
        if (_1335 > 0.0)
        {
            _2035 = abs((1.0 - _1326) / _1335);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1335 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1326 + 1.0) / _1335);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2035 = frontier_phi_47_44_ladder;
        }
        float _2037 = isnan(_1762) ? _1443 : (isnan(_1443) ? _1762 : min(_1443, _1762));
        float _2038 = isnan(_2035) ? _2037 : (isnan(_2037) ? _2035 : min(_2037, _2035));
        float _2042 = (_2038 * _1329) + _1318;
        float _2043 = (_2038 * _1332) + _1322;
        float _2044 = (_2038 * _1335) + _1326;
        float _2045 = _2038 * 9.9999997473787516355514526367188e-05;
        float _2046 = (-1.0) - _2045;
        float _2048 = _2045 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2044 > _2048) || ((_2044 < _2046) || ((_2043 > _2048) || ((_2043 < _2046) || ((_2042 < _2046) || (_2042 > _2048))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2135 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2044, cbModelParam._m0[17u].z, fma(_2043, cbModelParam._m0[17u].y, _2042 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2044, cbModelParam._m0[18u].z, fma(_2043, cbModelParam._m0[18u].y, _2042 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2044, cbModelParam._m0[19u].z, fma(_2043, cbModelParam._m0[19u].y, _2042 * cbModelParam._m0[19u].x))), _1261);
            frontier_phi_22_47_ladder = _2135.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2135.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2135.x * cbModelParam._m0[1u].z;
        }
        _1354 = frontier_phi_22_47_ladder_2;
        _1356 = frontier_phi_22_47_ladder_1;
        _1358 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1338 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_393, _394, _395), _1261);
        _1354 = _1338.x * cbModelParam._m0[1u].z;
        _1356 = _1338.y * cbModelParam._m0[1u].z;
        _1358 = _1338.z * cbModelParam._m0[1u].z;
    }
    float _1370 = _384 * 0.01200000010430812835693359375;
    float _1372 = _1370 * ((cbModelParam._m0[1u].w * (_1354 - _1254)) + _1254);
    float _1373 = _1370 * ((cbModelParam._m0[1u].w * (_1356 - _1256)) + _1256);
    float _1374 = _1370 * ((cbModelParam._m0[1u].w * (_1358 - _1258)) + _1258);
    float _1377 = fma(_1374, cbSceneParam._m0[89u].z, fma(_1373, cbSceneParam._m0[89u].y, _1372 * cbSceneParam._m0[89u].x));
    float _1380 = fma(_1374, cbSceneParam._m0[90u].z, fma(_1373, cbSceneParam._m0[90u].y, _1372 * cbSceneParam._m0[90u].x));
    float _1383 = fma(_1374, cbSceneParam._m0[91u].z, fma(_1373, cbSceneParam._m0[91u].y, _1372 * cbSceneParam._m0[91u].x));
    float _1417 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1421 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1425 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1429 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1430 = _1417 / _1429;
    float _1431 = _1421 / _1429;
    float _1432 = _1425 / _1429;
    float _1579;
    float _1580;
    float _1581;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1459 = ((uint(_1432 > cbSceneParam._m0[59u].y) + uint(_1432 > cbSceneParam._m0[59u].x)) + uint(_1432 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1460 = _1459 + 43u;
        uint _1468 = _1459 + 44u;
        uint _1476 = _1459 + 45u;
        uint _1484 = _1459 + 46u;
        float _1495 = fma(_1429, cbSceneParam._m0[_1460].w, fma(_1425, cbSceneParam._m0[_1460].z, fma(_1421, cbSceneParam._m0[_1460].y, _1417 * cbSceneParam._m0[_1460].x)));
        float _1499 = fma(_1429, cbSceneParam._m0[_1468].w, fma(_1425, cbSceneParam._m0[_1468].z, fma(_1421, cbSceneParam._m0[_1468].y, _1417 * cbSceneParam._m0[_1468].x)));
        float _1507 = fma(_1429, cbSceneParam._m0[_1484].w, fma(_1425, cbSceneParam._m0[_1484].z, fma(_1421, cbSceneParam._m0[_1484].y, _1417 * cbSceneParam._m0[_1484].x)));
        float _1512 = cbSceneParam._m0[33u].z * _1507;
        float _1514 = cbSceneParam._m0[33u].w * _1507;
        float _1517 = fma(_1429, cbSceneParam._m0[_1476].w, fma(_1425, cbSceneParam._m0[_1476].z, fma(_1421, cbSceneParam._m0[_1476].y, _1417 * cbSceneParam._m0[_1476].x))) / _1507;
        float _1565 = (cbSceneParam._m0[33u].x - sqrt(((_1431 * _1431) + (_1430 * _1430)) + (_1432 * _1432))) * cbSceneParam._m0[33u].y;
        float _3591 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
        float _1572 = (isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1512 + _1495) / _1507, (_1514 + _1499) / _1507), _1517), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1514 + _1495) / _1507, (_1499 - _1512) / _1507), _1517), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1495 - _1512) / _1507, (_1499 - _1514) / _1507), _1517), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1495 - _1514) / _1507, (_1512 + _1499) / _1507), _1517), 0.0)).x), vec4(0.25)));
        _1579 = 1.0 - (_1572 * cbSceneParam._m0[34u].x);
        _1580 = 1.0 - (_1572 * cbSceneParam._m0[34u].y);
        _1581 = 1.0 - (_1572 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1579 = 1.0;
        _1580 = 1.0;
        _1581 = 1.0;
    }
    float _1645;
    float _1647;
    float _1649;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1633 = fma(_1429, cbSceneParam._m0[63u].w, fma(_1425, cbSceneParam._m0[63u].z, fma(_1421, cbSceneParam._m0[63u].y, _1417 * cbSceneParam._m0[63u].x)));
        float _1634 = fma(_1429, cbSceneParam._m0[60u].w, fma(_1425, cbSceneParam._m0[60u].z, fma(_1421, cbSceneParam._m0[60u].y, _1417 * cbSceneParam._m0[60u].x))) / _1633;
        float _1635 = fma(_1429, cbSceneParam._m0[61u].w, fma(_1425, cbSceneParam._m0[61u].z, fma(_1421, cbSceneParam._m0[61u].y, _1417 * cbSceneParam._m0[61u].x))) / _1633;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1634 >= cbSceneParam._m0[64u].x) && (_1635 >= cbSceneParam._m0[64u].y)) && (_1634 <= cbSceneParam._m0[64u].z)) && (_1635 <= cbSceneParam._m0[64u].w))
        {
            float _1775 = fma(_1429, cbSceneParam._m0[62u].w, fma(_1425, cbSceneParam._m0[62u].z, fma(_1421, cbSceneParam._m0[62u].y, _1417 * cbSceneParam._m0[62u].x))) / _1633;
            float _1779 = isnan(cbSceneParam._m0[41u].w) ? _1775 : (isnan(_1775) ? cbSceneParam._m0[41u].w : max(_1775, cbSceneParam._m0[41u].w));
            float _1822 = (cbSceneParam._m0[33u].x - sqrt(((_1431 * _1431) + (_1430 * _1430)) + (_1432 * _1432))) * cbSceneParam._m0[33u].y;
            float _3607 = isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0));
            float _1829 = (isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1634, cbSceneParam._m0[33u].w + _1635), _1779), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1634, _1635 - cbSceneParam._m0[33u].z), _1779), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1634 - cbSceneParam._m0[33u].z, _1635 - cbSceneParam._m0[33u].w), _1779), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1634 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1635), _1779), 0.0)).x), vec4(0.25)));
            float _1833 = 1.0 - (_1829 * cbSceneParam._m0[34u].x);
            float _1834 = 1.0 - (_1829 * cbSceneParam._m0[34u].y);
            float _1835 = 1.0 - (_1829 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_1835) ? _1581 : (isnan(_1581) ? _1835 : min(_1581, _1835));
            frontier_phi_34_33_ladder_1 = isnan(_1834) ? _1580 : (isnan(_1580) ? _1834 : min(_1580, _1834));
            frontier_phi_34_33_ladder_2 = isnan(_1833) ? _1579 : (isnan(_1579) ? _1833 : min(_1579, _1833));
        }
        else
        {
            frontier_phi_34_33_ladder = _1581;
            frontier_phi_34_33_ladder_1 = _1580;
            frontier_phi_34_33_ladder_2 = _1579;
        }
        _1645 = frontier_phi_34_33_ladder_2;
        _1647 = frontier_phi_34_33_ladder_1;
        _1649 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1645 = _1579;
        _1647 = _1580;
        _1649 = _1581;
    }
    uvec4 _1654 = floatBitsToUint(cbInstanceData._m0[_358 + 5u]);
    uint _1656 = _1654.x * 14u;
    uint _1657 = _1656 + 13u;
    float _1664 = _384 + (-1.0);
    float _1670 = (cbLight._m0[_1657].x * _1664) + 1.0;
    float _1671 = (cbLight._m0[_1657].y * _1664) + 1.0;
    float _1672 = (cbLight._m0[_1657].z * _1664) + 1.0;
    float _1673 = (cbLight._m0[_1657].w * _1664) + 1.0;
    uint _1674 = _1656 + 5u;
    float _1680 = isnan(1.0) ? _1671 : (isnan(_1671) ? 1.0 : min(_1671, 1.0));
    uint _1684 = _1656 + 4u;
    float _1694 = isnan(1.0) ? _1670 : (isnan(_1670) ? 1.0 : min(_1670, 1.0));
    uint _1698 = _1656 | 1u;
    float _1709 = dot(vec3(cbLight._m0[_1656].xyz), vec3(_229, _230, _231));
    float _1712 = dot(vec3(cbLight._m0[_1698].xyz), vec3(_229, _230, _231));
    float _3643 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
    float _3654 = isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0));
    float _1717 = (isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0))) * 0.3183098733425140380859375;
    float _1719 = (isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0))) * 0.3183098733425140380859375;
    float _1726 = ((cbLight._m0[_1674].x * _1680) * _1719) + (((cbLight._m0[_1684].x * _1645) * _1694) * _1717);
    float _1727 = ((_1680 * cbLight._m0[_1674].y) * _1719) + (((cbLight._m0[_1684].y * _1647) * _1694) * _1717);
    float _1728 = ((_1680 * cbLight._m0[_1674].z) * _1719) + (((cbLight._m0[_1684].z * _1649) * _1694) * _1717);
    uvec4 _1732 = floatBitsToUint(cbLight._m0[_1656 + 12u]);
    bool _1734 = _1732.x == 0u;
    float _1836;
    float _1838;
    float _1840;
    if (_1734)
    {
        _1836 = _1726;
        _1838 = _1727;
        _1840 = _1728;
    }
    else
    {
        uint _1844 = _1656 + 6u;
        float _1860 = (dot(vec3(cbLight._m0[_1656 + 2u].xyz), vec3(_229, _230, _231)) * 0.5) + 0.5;
        float _1861 = _1860 * _1860;
        float _3665 = isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0));
        float _1862 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
        float _1863 = isnan(1.0) ? _1672 : (isnan(_1672) ? 1.0 : min(_1672, 1.0));
        _1836 = (((cbLight._m0[_1844].x * 0.3183098733425140380859375) * _1862) * _1863) + _1726;
        _1838 = (((cbLight._m0[_1844].y * 0.3183098733425140380859375) * _1862) * _1863) + _1727;
        _1840 = (((cbLight._m0[_1844].z * 0.3183098733425140380859375) * _1862) * _1863) + _1728;
    }
    bool _1843 = _1732.y == 0u;
    float _1898;
    float _1900;
    float _1902;
    if (_1843)
    {
        _1898 = _1836;
        _1900 = _1838;
        _1902 = _1840;
    }
    else
    {
        uint _2006 = _1656 + 7u;
        float _2022 = (dot(vec3(cbLight._m0[_1656 + 3u].xyz), vec3(_229, _230, _231)) * 0.5) + 0.5;
        float _2023 = _2022 * _2022;
        float _3681 = isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0));
        float _2024 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
        float _2025 = isnan(1.0) ? _1673 : (isnan(_1673) ? 1.0 : min(_1673, 1.0));
        _1898 = (((cbLight._m0[_2006].x * 0.3183098733425140380859375) * _2024) * _2025) + _1836;
        _1900 = (((cbLight._m0[_2006].y * 0.3183098733425140380859375) * _2024) * _2025) + _1838;
        _1902 = (((cbLight._m0[_2006].z * 0.3183098733425140380859375) * _2024) * _2025) + _1840;
    }
    uint _1904 = _1656 + 8u;
    float _1910 = cbLight._m0[_1656].x + _309;
    float _1911 = cbLight._m0[_1656].y + _310;
    float _1912 = cbLight._m0[_1656].z + _311;
    float _1916 = inversesqrt(dot(vec3(_1910, _1911, _1912), vec3(_1910, _1911, _1912)));
    float _1920 = dot(vec3(_229, _230, _231), vec3(cbLight._m0[_1656].xyz));
    float _3697 = isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0));
    float _1923 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
    float _3708 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _1924 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
    float _1925 = dot(vec3(cbLight._m0[_1656].xyz), vec3(_1910 * _1916, _1911 * _1916, _1912 * _1916));
    float _3719 = isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0));
    float _1936 = (exp2(log2(1.0 - (isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1942 = (0.5 / ((_1923 + 9.9999999392252902907785028219223e-09) + _1924)) * _1923;
    float _3730 = isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0));
    float _1944 = (isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0))) * 0.31831014156341552734375;
    uint _1958 = _1656 + 9u;
    float _1964 = cbLight._m0[_1698].x + _309;
    float _1965 = cbLight._m0[_1698].y + _310;
    float _1966 = cbLight._m0[_1698].z + _311;
    float _1970 = inversesqrt(dot(vec3(_1964, _1965, _1966), vec3(_1964, _1965, _1966)));
    float _1974 = dot(vec3(_229, _230, _231), vec3(cbLight._m0[_1698].xyz));
    float _3741 = isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0));
    float _1977 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
    float _1978 = dot(vec3(cbLight._m0[_1698].xyz), vec3(_1964 * _1970, _1965 * _1970, _1966 * _1970));
    float _3752 = isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0));
    float _1987 = (exp2(log2(1.0 - (isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1991 = (0.5 / ((_1977 + 9.9999999392252902907785028219223e-09) + _1924)) * _1977;
    float _3763 = isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0));
    float _1993 = (isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0))) * 0.31831014156341552734375;
    float _2003 = (((_1987 * cbLight._m0[_1958].x) * _1993) * _1680) + ((((cbLight._m0[_1904].x * _1645) * _1936) * _1944) * _1694);
    float _2004 = (((_1987 * cbLight._m0[_1958].y) * _1993) * _1680) + ((((cbLight._m0[_1904].y * _1647) * _1936) * _1944) * _1694);
    float _2005 = (((_1987 * cbLight._m0[_1958].z) * _1993) * _1680) + ((((cbLight._m0[_1904].z * _1649) * _1936) * _1944) * _1694);
    float _2061;
    float _2063;
    float _2065;
    if (_1734)
    {
        _2061 = _2003;
        _2063 = _2004;
        _2065 = _2005;
    }
    else
    {
        uint _2067 = _1656 + 10u;
        uint _2073 = _1656 + 2u;
        float _2079 = cbLight._m0[_2073].x + _309;
        float _2080 = cbLight._m0[_2073].y + _310;
        float _2081 = cbLight._m0[_2073].z + _311;
        float _2085 = inversesqrt(dot(vec3(_2079, _2080, _2081), vec3(_2079, _2080, _2081)));
        float _2089 = dot(vec3(_229, _230, _231), vec3(cbLight._m0[_2073].xyz));
        float _3774 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
        float _2092 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
        float _2093 = dot(vec3(cbLight._m0[_2073].xyz), vec3(_2079 * _2085, _2080 * _2085, _2081 * _2085));
        float _3785 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
        float _2102 = (exp2(log2(1.0 - (isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2106 = (0.5 / ((_2092 + 9.9999999392252902907785028219223e-09) + _1924)) * _2092;
        float _3796 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
        float _2108 = (isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0))) * 0.31831014156341552734375;
        float _2109 = isnan(1.0) ? _1672 : (isnan(_1672) ? 1.0 : min(_1672, 1.0));
        _2061 = (((_2102 * cbLight._m0[_2067].x) * _2108) * _2109) + _2003;
        _2063 = (((_2102 * cbLight._m0[_2067].y) * _2108) * _2109) + _2004;
        _2065 = (((_2102 * cbLight._m0[_2067].z) * _2108) * _2109) + _2005;
    }
    float _2140;
    float _2142;
    float _2144;
    if (_1843)
    {
        _2140 = _2061;
        _2142 = _2063;
        _2144 = _2065;
    }
    else
    {
        uint _2151 = _1656 + 11u;
        uint _2157 = _1656 + 3u;
        float _2163 = cbLight._m0[_2157].x + _309;
        float _2164 = cbLight._m0[_2157].y + _310;
        float _2165 = cbLight._m0[_2157].z + _311;
        float _2169 = inversesqrt(dot(vec3(_2163, _2164, _2165), vec3(_2163, _2164, _2165)));
        float _2173 = dot(vec3(_229, _230, _231), vec3(cbLight._m0[_2157].xyz));
        float _3812 = isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0));
        float _2176 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
        float _2177 = dot(vec3(cbLight._m0[_2157].xyz), vec3(_2163 * _2169, _2164 * _2169, _2165 * _2169));
        float _3823 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
        float _2186 = (exp2(log2(1.0 - (isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2190 = (0.5 / ((_2176 + 9.9999999392252902907785028219223e-09) + _1924)) * _2176;
        float _3834 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
        float _2192 = (isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0))) * 0.31831014156341552734375;
        float _2193 = isnan(1.0) ? _1673 : (isnan(_1673) ? 1.0 : min(_1673, 1.0));
        _2140 = (((_2186 * cbLight._m0[_2151].x) * _2192) * _2193) + _2061;
        _2142 = (((_2186 * cbLight._m0[_2151].y) * _2192) * _2193) + _2063;
        _2144 = (((_2186 * cbLight._m0[_2151].z) * _2192) * _2193) + _2065;
    }
    float _2259;
    float _2261;
    float _2263;
    float _2265;
    float _2267;
    float _2269;
    if (_1654.y == 0u)
    {
        uvec4 _2214 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2215 = _2214.x;
        uint _2226 = uint((float(_2214.y) * floor(float(uint(cbSceneParam._m0[85u].y * _318) / _2215))) + floor(float(uint(cbSceneParam._m0[85u].x * _317) / _2215)));
        float _2236 = (log2(_1432 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2237 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
        uint _2240 = uint(isnan(14.0) ? _2237 : (isnan(_2237) ? 14.0 : min(_2237, 14.0)));
        uvec4 _2245 = texelFetch(g_lightClusterGridBuffer, int(((_2240 << 2u) + (_2226 << 6u)) >> 2u));
        uint _2246 = _2245.x;
        uint _2247 = _2214.z;
        float _2364;
        float _2366;
        float _2368;
        float _2370;
        float _2372;
        float _2374;
        if (((((1u << ((_2247 >> 4u) & 15u)) + 4294967295u) & _2246) == 0u) || ((_2247 & 240u) == 0u))
        {
            _2364 = 0.0;
            _2366 = 0.0;
            _2368 = 0.0;
            _2370 = 0.0;
            _2372 = 0.0;
            _2374 = 0.0;
        }
        else
        {
            float _2365;
            float _2367;
            float _2369;
            float _2371;
            float _2373;
            float _2375;
            float _2515 = 0.0;
            float _2516 = 0.0;
            float _2517 = 0.0;
            float _2518 = 0.0;
            float _2519 = 0.0;
            float _2520 = 0.0;
            uint _2521 = 0u;
            uint _2530;
            bool _2531;
            for (;;)
            {
                _2530 = texelFetch(g_lightClassification, int((((_2240 << 5u) + (_2226 << 9u)) + (_2521 << 2u)) >> 2u)).x;
                _2531 = _2530 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2531)
                {
                    frontier_phi_66_pred = _2520;
                    frontier_phi_66_pred_1 = _2519;
                    frontier_phi_66_pred_2 = _2518;
                    frontier_phi_66_pred_3 = _2517;
                    frontier_phi_66_pred_4 = _2516;
                    frontier_phi_66_pred_5 = _2515;
                }
                else
                {
                    float _2639;
                    float _2640;
                    float _2641;
                    float _2642;
                    float _2643;
                    float _2644;
                    uint _2645;
                    _2639 = _2515;
                    _2640 = _2516;
                    _2641 = _2517;
                    _2642 = _2518;
                    _2643 = _2519;
                    _2644 = _2520;
                    _2645 = _2530;
                    float _2571;
                    float _2572;
                    float _2573;
                    float _2574;
                    float _2575;
                    float _2576;
                    for (;;)
                    {
                        uint _2649 = uint(findLSB(_2645)) + (_2521 << 5u);
                        uint _2646 = (_2645 + 4294967295u) & _2645;
                        uint _2651 = _2649 * 48u;
                        vec4 _2665 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2651)).x, texelFetch(g_PointLightRenderingBuffer, int(_2651 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2651 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2651 + 3u)).x));
                        uint _2671 = (_2649 * 48u) + 4u;
                        vec4 _2684 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2671)).x, texelFetch(g_PointLightRenderingBuffer, int(_2671 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2671 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2671 + 3u)).x));
                        uint _2690 = (_2649 * 48u) + 8u;
                        vec3 _2701 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2690)).x, texelFetch(g_PointLightRenderingBuffer, int(_2690 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2690 + 2u)).x));
                        float _2705 = _2665.x - _1430;
                        float _2706 = _2665.y - _1431;
                        float _2707 = _2665.z - _1432;
                        float _2708 = dot(vec3(_2705, _2706, _2707), vec3(_2705, _2706, _2707));
                        float _2711 = inversesqrt(_2708);
                        float _2720 = 1.0 - (_2708 * _2665.w);
                        float _3860 = isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : max(_2720, 0.0));
                        float _2721 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
                        float _2722 = sqrt(_2708) * _2684.w;
                        float _2725 = 1.39999997615814208984375 / (_2722 + 1.39999997615814208984375);
                        float _2726 = _2725 * _2725;
                        float _2729 = ((1.0 - _2726) * dot(vec3(_339, _342, _345), vec3(_2711 * _2705, _2711 * _2706, _2711 * _2707))) + _2726;
                        float _2732 = _2722 * _2722;
                        float _2736 = ((isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0))) * _2721) / ((_2732 * 0.699999988079071044921875) + 1.0);
                        float _2740 = (-0.0) - _1430;
                        float _2741 = (-0.0) - _1431;
                        float _2742 = (-0.0) - _1432;
                        float _2746 = inversesqrt(dot(vec3(_2740, _2741, _2742), vec3(_2740, _2741, _2742)));
                        float _2750 = dot(vec3(_339, _342, _345), vec3(_2746 * _2740, _2746 * _2741, _2746 * _2742));
                        float _3876 = isnan(0.0) ? _2750 : (isnan(_2750) ? 0.0 : max(_2750, 0.0));
                        float _3887 = isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0));
                        float _2754 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
                        float _2758 = (0.5 / (((isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0))) + 9.9999999392252902907785028219223e-09) + _2754)) * _2754;
                        float _3898 = isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : max(_2758, 0.0));
                        float _2767 = (((isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0))) * 3.1415927410125732421875) / ((_2732 * 2.1991131305694580078125) + 3.141590118408203125)) * _2721;
                        _2574 = (_2736 * _2684.x) + _2642;
                        _2575 = (_2736 * _2684.y) + _2643;
                        _2576 = (_2736 * _2684.z) + _2644;
                        _2571 = (_2767 * _2701.x) + _2639;
                        _2572 = (_2767 * _2701.y) + _2640;
                        _2573 = (_2767 * _2701.z) + _2641;
                        if (_2646 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2639 = _2571;
                            _2640 = _2572;
                            _2641 = _2573;
                            _2642 = _2574;
                            _2643 = _2575;
                            _2644 = _2576;
                            _2645 = _2646;
                        }
                    }
                    frontier_phi_66_pred = _2576;
                    frontier_phi_66_pred_1 = _2575;
                    frontier_phi_66_pred_2 = _2574;
                    frontier_phi_66_pred_3 = _2573;
                    frontier_phi_66_pred_4 = _2572;
                    frontier_phi_66_pred_5 = _2571;
                }
                _2375 = frontier_phi_66_pred;
                _2373 = frontier_phi_66_pred_1;
                _2371 = frontier_phi_66_pred_2;
                _2369 = frontier_phi_66_pred_3;
                _2367 = frontier_phi_66_pred_4;
                _2365 = frontier_phi_66_pred_5;
                uint _2522 = _2521 + 1u;
                if (_2522 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2515 = _2365;
                    _2516 = _2367;
                    _2517 = _2369;
                    _2518 = _2371;
                    _2519 = _2373;
                    _2520 = _2375;
                    _2521 = _2522;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2364 = _2365;
            _2366 = _2367;
            _2368 = _2369;
            _2370 = _2371;
            _2372 = _2373;
            _2374 = _2375;
        }
        uvec4 _2378 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2379 = _2378.z;
        uint _2381 = (_2379 >> 8u) & 15u;
        float _2486;
        float _2488;
        float _2490;
        float _2492;
        float _2494;
        float _2496;
        if (((4294967295u << _2381) & _2246) == 0u)
        {
            _2486 = _2364;
            _2488 = _2366;
            _2490 = _2368;
            _2492 = _2370;
            _2494 = _2372;
            _2496 = _2374;
        }
        else
        {
            float _2511 = inversesqrt(dot(vec3(_1430, _1431, _1432), vec3(_1430, _1431, _1432)));
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2381 < ((_2379 >> 12u) & 15u))
            {
                float _2487;
                float _2489;
                float _2491;
                float _2493;
                float _2495;
                float _2497;
                float _2622 = _2364;
                float _2623 = _2366;
                float _2624 = _2368;
                float _2625 = _2370;
                float _2626 = _2372;
                float _2627 = _2374;
                uint _2628 = _2381;
                uint _2637;
                bool _2638;
                for (;;)
                {
                    _2637 = texelFetch(g_lightClassification, int((((_2240 << 5u) + (_2226 << 9u)) + (_2628 << 2u)) >> 2u)).x;
                    _2638 = _2637 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2638)
                    {
                        frontier_phi_72_pred = _2627;
                        frontier_phi_72_pred_1 = _2626;
                        frontier_phi_72_pred_2 = _2625;
                        frontier_phi_72_pred_3 = _2624;
                        frontier_phi_72_pred_4 = _2623;
                        frontier_phi_72_pred_5 = _2622;
                    }
                    else
                    {
                        float _2772;
                        float _2773;
                        float _2774;
                        float _2775;
                        float _2776;
                        float _2777;
                        float _3024;
                        float _3025;
                        float _3026;
                        float _3027;
                        float _3028;
                        float _3029;
                        float _2785 = _2622;
                        float _2786 = _2623;
                        float _2787 = _2624;
                        float _2788 = _2625;
                        float _2789 = _2626;
                        float _2790 = _2627;
                        uint _2791 = _2637;
                        uint _2792;
                        vec4 _2817;
                        float _2818;
                        vec4 _2833;
                        vec3 _2845;
                        vec4 _2861;
                        vec4 _2877;
                        float _2924;
                        bool _2925;
                        for (;;)
                        {
                            uint _2802 = ((_2628 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2791));
                            _2792 = (_2791 + 4294967295u) & _2791;
                            uint _2804 = _2802 * 40u;
                            _2817 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2804)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2804 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2804 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2804 + 3u)).x));
                            _2818 = _2817.w;
                            uint _2820 = (_2802 * 40u) + 4u;
                            _2833 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2820)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2820 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2820 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2820 + 3u)).x));
                            uint _2835 = (_2802 * 40u) + 8u;
                            _2845 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2835)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2835 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2835 + 2u)).x));
                            uint _2848 = (_2802 * 40u) + 16u;
                            _2861 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2848)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2848 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2848 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2848 + 3u)).x));
                            uint _2864 = (_2802 * 40u) + 20u;
                            _2877 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2864)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2864 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2864 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2864 + 3u)).x));
                            uint _2880 = (_2802 * 40u) + 24u;
                            vec4 _2893 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2880)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2880 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2880 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2880 + 3u)).x));
                            uint _2899 = (_2802 * 40u) + 28u;
                            vec4 _2912 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2899)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2899 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2899 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2899 + 3u)).x));
                            _2924 = fma(_1432, _2912.z, fma(_1431, _2912.y, _2912.x * _1430)) + _2912.w;
                            _2925 = !((fma(_1432, _2893.z, fma(_1431, _2893.y, _2893.x * _1430)) + _2893.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_2925)
                            {
                                float _2952 = _2817.x - _1430;
                                float _2953 = _2817.y - _1431;
                                float _2954 = _2817.z - _1432;
                                float _2955 = dot(vec3(_2952, _2953, _2954), vec3(_2952, _2953, _2954));
                                float _2958 = inversesqrt(_2955);
                                float _2959 = _2958 * _2952;
                                float _2960 = _2958 * _2953;
                                float _2961 = _2958 * _2954;
                                float _2965 = 1.0 - (_2955 / (_2818 * _2818));
                                float _3909 = isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : max(_2965, 0.0));
                                float _2966 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
                                float _2970 = sqrt(_2955) * _2833.w;
                                float _2972 = 1.39999997615814208984375 / (_2970 + 1.39999997615814208984375);
                                float _2973 = _2972 * _2972;
                                float _2974 = 1.0 - _2973;
                                float _2976 = (_2974 * dot(vec3(_2959, _2960, _2961), vec3(_339, _342, _345))) + _2973;
                                float _2979 = _2970 * _2970;
                                float _2983 = (fma(_1432, _2861.z, fma(_1431, _2861.y, _2861.x * _1430)) + _2861.w) / _2924;
                                float _2984 = (fma(_1432, _2877.z, fma(_1431, _2877.y, _2877.x * _1430)) + _2877.w) / _2924;
                                float _2988 = 1.0 - dot(vec2(_2983, _2984), vec2(_2983, _2984));
                                float _3925 = isnan(0.0) ? _2988 : (isnan(_2988) ? 0.0 : max(_2988, 0.0));
                                float _2989 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
                                float _2990 = _2989 * (((isnan(0.0) ? _2976 : (isnan(_2976) ? 0.0 : max(_2976, 0.0))) * _2966) / ((_2979 * 0.699999988079071044921875) + 1.0));
                                float _3000 = dot(vec3(_339, _342, _345), vec3((-0.0) - (_1430 * _2511), (-0.0) - (_1431 * _2511), (-0.0) - (_1432 * _2511)));
                                float _3936 = isnan(0.0) ? _3000 : (isnan(_3000) ? 0.0 : max(_3000, 0.0));
                                float _3008 = (_2974 * dot(vec3(_339, _342, _345), vec3(_2959, _2960, _2961))) + _2973;
                                float _3947 = isnan(0.0) ? _3008 : (isnan(_3008) ? 0.0 : max(_3008, 0.0));
                                float _3009 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
                                float _3013 = (0.5 / (((isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0))) + 9.9999999392252902907785028219223e-09) + _3009)) * _3009;
                                float _3958 = isnan(0.0) ? _3013 : (isnan(_3013) ? 0.0 : max(_3013, 0.0));
                                float _3020 = (_2989 * _2966) * (((isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0))) * 3.1415927410125732421875) / ((_2979 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_78_pred = _2990 * _2833.y;
                                frontier_phi_78_pred_1 = _2990 * _2833.x;
                                frontier_phi_78_pred_2 = _3020 * _2845.z;
                                frontier_phi_78_pred_3 = _3020 * _2845.y;
                                frontier_phi_78_pred_4 = _3020 * _2845.x;
                                frontier_phi_78_pred_5 = _2990 * _2833.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3028 = frontier_phi_78_pred;
                            _3027 = frontier_phi_78_pred_1;
                            _3026 = frontier_phi_78_pred_2;
                            _3025 = frontier_phi_78_pred_3;
                            _3024 = frontier_phi_78_pred_4;
                            _3029 = frontier_phi_78_pred_5;
                            _2775 = _3027 + _2788;
                            _2776 = _3028 + _2789;
                            _2777 = _3029 + _2790;
                            _2772 = _3024 + _2785;
                            _2773 = _3025 + _2786;
                            _2774 = _3026 + _2787;
                            if (_2792 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2785 = _2772;
                                _2786 = _2773;
                                _2787 = _2774;
                                _2788 = _2775;
                                _2789 = _2776;
                                _2790 = _2777;
                                _2791 = _2792;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _2777;
                        frontier_phi_72_pred_1 = _2776;
                        frontier_phi_72_pred_2 = _2775;
                        frontier_phi_72_pred_3 = _2774;
                        frontier_phi_72_pred_4 = _2773;
                        frontier_phi_72_pred_5 = _2772;
                    }
                    _2497 = frontier_phi_72_pred;
                    _2495 = frontier_phi_72_pred_1;
                    _2493 = frontier_phi_72_pred_2;
                    _2491 = frontier_phi_72_pred_3;
                    _2489 = frontier_phi_72_pred_4;
                    _2487 = frontier_phi_72_pred_5;
                    uint _2629 = _2628 + 1u;
                    if (_2629 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2622 = _2487;
                        _2623 = _2489;
                        _2624 = _2491;
                        _2625 = _2493;
                        _2626 = _2495;
                        _2627 = _2497;
                        _2628 = _2629;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2497;
                frontier_phi_60_61_ladder_1 = _2495;
                frontier_phi_60_61_ladder_2 = _2491;
                frontier_phi_60_61_ladder_3 = _2489;
                frontier_phi_60_61_ladder_4 = _2487;
                frontier_phi_60_61_ladder_5 = _2493;
            }
            else
            {
                frontier_phi_60_61_ladder = _2374;
                frontier_phi_60_61_ladder_1 = _2372;
                frontier_phi_60_61_ladder_2 = _2368;
                frontier_phi_60_61_ladder_3 = _2366;
                frontier_phi_60_61_ladder_4 = _2364;
                frontier_phi_60_61_ladder_5 = _2370;
            }
            _2486 = frontier_phi_60_61_ladder_4;
            _2488 = frontier_phi_60_61_ladder_3;
            _2490 = frontier_phi_60_61_ladder_2;
            _2492 = frontier_phi_60_61_ladder_5;
            _2494 = frontier_phi_60_61_ladder_1;
            _2496 = frontier_phi_60_61_ladder;
        }
        float _2501 = isnan(1.0) ? _384 : (isnan(_384) ? 1.0 : min(_384, 1.0));
        _2259 = (_2501 * _2492) + _1898;
        _2261 = (_2501 * _2494) + _1900;
        _2263 = (_2501 * _2496) + _1902;
        _2265 = ((_2486 * 0.039999999105930328369140625) * _2501) + _2140;
        _2267 = ((_2488 * 0.039999999105930328369140625) * _2501) + _2142;
        _2269 = ((_2490 * 0.039999999105930328369140625) * _2501) + _2144;
    }
    else
    {
        _2259 = _1898;
        _2261 = _1900;
        _2263 = _1902;
        _2265 = _2140;
        _2267 = _2142;
        _2269 = _2144;
    }
    uint _2275 = _360 + uint(cbMatDynParam._m0[0u].w);
    float _2284 = (((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _216.x) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2275].x;
    float _2288 = (((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _216.y) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2275].y;
    float _2292 = (((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _216.z) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2275].z;
    float _3974 = isnan(0.0) ? _370 : (isnan(_370) ? 0.0 : max(_370, 0.0));
    float _3985 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _3996 = isnan(0.0) ? _372 : (isnan(_372) ? 0.0 : max(_372, 0.0));
    float _2309 = (((isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0))) * (_2259 + ((isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0))) * _384))) + ((_2265 + ((isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0))) * _1163)) * cbPerFrame._m0[3u].x)) + _2284;
    float _2311 = (_2288 + ((_2267 + ((isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0))) * _1163)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0))) * (_2261 + ((isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0))) * _384)));
    float _2313 = (_2292 + ((_2269 + ((isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0))) * _1163)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0))) * (_2263 + ((isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0))) * _384)));
    float _4022 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2326 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
    uint _2327 = _358 + 6u;
    float _2335 = _317 / cbSceneParam._m0[86u].x;
    float _2336 = _318 / cbSceneParam._m0[86u].y;
    vec4 _2350 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2335, _2336, (log2((isnan(cbSceneParam._m0[77u].w) ? _251 : (isnan(_251) ? cbSceneParam._m0[77u].w : min(_251, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2352 = _2350.x;
    float _2353 = _2350.y;
    float _2354 = _2350.z;
    float _2355 = _2350.w;
    float _2427;
    float _2429;
    float _2431;
    float _2433;
    if (_251 > cbSceneParam._m0[78u].w)
    {
        float _2389 = isnan(_251) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _251 : min(cbSceneParam._m0[80u].w, _251));
        float _2390 = _2389 / _251;
        float _2401 = _2390 * _302;
        float _2402 = _303 * _2390;
        float _2403 = (-0.0) - _2402;
        float _2405 = _2390 * _304;
        float _2407 = (cbSceneParam._m0[77u].w * _2403) / _2389;
        float _2408 = _2407 + cbSceneParam._m0[79u].w;
        float _2409 = cbSceneParam._m0[79u].w - _2402;
        float _2415 = sqrt(((_2401 * _2401) + (_2402 * _2402)) + (_2405 * _2405));
        float _2418 = (1.0 - (cbSceneParam._m0[77u].w / _2389)) * _2415;
        float _2423 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2425 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2584;
        if (abs((_2403 - _2407) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2584 = ((((_2408 > 0.0) ? exp2(_2423 * _2408) : (2.0 - exp2(_2425 * _2408))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2418;
        }
        else
        {
            float _2544 = 1.0 / cbSceneParam._m0[80u].x;
            float _2545 = isnan(_2409) ? _2408 : (isnan(_2408) ? _2409 : max(_2408, _2409));
            float _2546 = isnan(_2409) ? _2408 : (isnan(_2408) ? _2409 : min(_2408, _2409));
            float _2555 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : min(_2545, 0.0));
            float _2556 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : min(_2546, 0.0));
            _2584 = ((abs(_2415 / _2403) * cbSceneParam._m0[80u].y) * ((((_2555 - _2556) * 2.0) - ((exp2(_2423 * (isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0)))) - exp2(_2423 * (isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0))))) * _2544)) - ((exp2(_2425 * _2555) - exp2(_2425 * _2556)) * _2544))) + (_2418 * cbSceneParam._m0[80u].z);
        }
        vec4 _2586 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2335, _2336, 1.0), 0.0);
        float _2595 = exp2((_2584 * (-1.44269502162933349609375)) * (1.0 - _2586.w));
        float _2596 = log2(_2595);
        float _2612 = log2(_2355);
        _2427 = (exp2(_2612 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2596 * cbSceneParam._m0[78u].x)) * _2586.x) / cbSceneParam._m0[78u].x)) + _2352;
        _2429 = (exp2(_2612 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2596 * cbSceneParam._m0[78u].y)) * _2586.y) / cbSceneParam._m0[78u].y)) + _2353;
        _2431 = (exp2(_2612 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2596 * cbSceneParam._m0[78u].z)) * _2586.z) / cbSceneParam._m0[78u].z)) + _2354;
        _2433 = _2595 * _2355;
    }
    else
    {
        _2427 = _2352;
        _2429 = _2353;
        _2431 = _2354;
        _2433 = _2355;
    }
    float _2444 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2445 = _2444 == 3.0;
    float _2447 = log2(_2433);
    float _2451 = exp2(_2447 * cbSceneParam._m0[78u].x);
    float _2452 = exp2(_2447 * cbSceneParam._m0[78u].y);
    float _2453 = exp2(_2447 * cbSceneParam._m0[78u].z);
    float _2454 = _2451 * (isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0)));
    float _2455 = _2452 * (isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0)));
    float _2456 = _2453 * (isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0)));
    float _2465 = (_2444 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2465 * (_2445 ? _2454 : (_2454 + (cbSceneParam._m0[72u].w * _2427)));
    SV_Target.y = _2465 * (_2445 ? _2455 : (_2455 + (cbSceneParam._m0[72u].w * _2429)));
    SV_Target.z = _2465 * (_2445 ? _2456 : (_2456 + (cbSceneParam._m0[72u].w * _2431)));
    SV_Target.w = cbInstanceData._m0[_2327].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2284) * _2326) * _2451) * _2465;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2288) * _2326) * _2452) * _2465;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2292) * _2326) * _2453) * _2465;
    SV_Target_1.w = cbInstanceData._m0[_2327].w;
}


