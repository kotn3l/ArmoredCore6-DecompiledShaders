#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D G_Light_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D G_Light_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _771;
float _3005;
float _3006;
float _3007;
float _3008;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _165 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _166 = _165 * NORMAL.x;
    float _167 = _165 * NORMAL.y;
    float _168 = _165 * NORMAL.z;
    vec4 _188 = texture(sampler2D(G_Light_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _194 = _188.x * cbMtdParam._m0[9u].x;
    float _195 = _188.y * cbMtdParam._m0[9u].y;
    float _196 = _188.z * cbMtdParam._m0[9u].z;
    vec4 _218 = texture(sampler2D(G_Light_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _230 = inversesqrt(dot(vec3(_166, _167, _168), vec3(_166, _167, _168)));
    float _231 = _230 * _166;
    float _232 = _230 * _167;
    float _233 = _230 * _168;
    float _3017 = isnan(0.0) ? _194 : (isnan(_194) ? 0.0 : max(_194, 0.0));
    float _3028 = isnan(0.0) ? _195 : (isnan(_195) ? 0.0 : max(_195, 0.0));
    float _3039 = isnan(0.0) ? _196 : (isnan(_196) ? 0.0 : max(_196, 0.0));
    float _253 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _294 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _304 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _294);
    float _305 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _294);
    float _306 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _294);
    float _310 = inversesqrt(dot(vec3(_304, _305, _306), vec3(_304, _305, _306)));
    float _311 = _304 * _310;
    float _312 = _305 * _310;
    float _313 = _306 * _310;
    vec4 _318 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _320 = _318.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _450 = sqrt(((_304 * _304) + (_305 * _305)) + (_306 * _306));
        float _456 = (cbMatDynParam._m0[5u].x * _450) + cbMatDynParam._m0[5u].y;
        float _3050 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
        float _457 = isnan(1.0) ? _3050 : (isnan(_3050) ? 1.0 : min(_3050, 1.0));
        float _461 = (cbMatDynParam._m0[5u].z * _450) + cbMatDynParam._m0[5u].w;
        float _3061 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3061 : (isnan(_3061) ? 1.0 : min(_3061, 1.0))) - _457)) + _457) < ((_320 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _332 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _333 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _353 = fma(_233, cbSceneParam._m0[5u].z, fma(_232, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _231));
    float _356 = fma(_233, cbSceneParam._m0[6u].z, fma(_232, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _231));
    float _359 = fma(_233, cbSceneParam._m0[7u].z, fma(_232, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _231));
    uint _372 = uint(roundEven(NORMAL.w)) * 13u;
    uint _374 = _372 + 9u;
    uint _375 = _374 + uint(cbMatDynParam._m0[0u].w);
    float _381 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3017 : (isnan(_3017) ? 1.0 : min(_3017, 1.0)))) * cbInstanceData._m0[_375].x;
    float _382 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3028 : (isnan(_3028) ? 1.0 : min(_3028, 1.0)))) * cbInstanceData._m0[_375].y;
    float _383 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3039 : (isnan(_3039) ? 1.0 : min(_3039, 1.0)))) * cbInstanceData._m0[_375].z;
    float _3072 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _384 = isnan(1.0) ? _3072 : (isnan(_3072) ? 1.0 : min(_3072, 1.0));
    float _3083 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    float _385 = isnan(1.0) ? _3083 : (isnan(_3083) ? 1.0 : min(_3083, 1.0));
    float _3094 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _386 = isnan(1.0) ? _3094 : (isnan(_3094) ? 1.0 : min(_3094, 1.0));
    vec4 _395 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _332, cbSceneParam._m0[86u].y * _333));
    float _398 = _395.x * TEXCOORD.z;
    float _399 = dot(vec3(_231, _232, _233), vec3(_311, _312, _313));
    float _402 = _399 * 2.0;
    float _407 = (_402 * _231) - _311;
    float _408 = (_402 * _232) - _312;
    float _409 = (_402 * _233) - _313;
    float _431 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _435 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _439 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _770;
    float _772;
    float _773;
    float _774;
    float _775;
    float _776;
    float _777;
    float _778;
    float _779;
    float _780;
    float _781;
    float _782;
    float _783;
    float _784;
    float _785;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _495 = fma(_439, cbModelParam._m0[26u].z, fma(_435, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _431));
        float _499 = fma(_439, cbModelParam._m0[27u].z, fma(_435, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _431));
        float _503 = fma(_439, cbModelParam._m0[28u].z, fma(_435, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _431));
        float _528 = _431 + _231;
        float _529 = _435 + _232;
        float _530 = _439 + _233;
        float _540 = fma(_530, cbModelParam._m0[26u].z, fma(_529, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _528)) - _495;
        float _541 = fma(_530, cbModelParam._m0[27u].z, fma(_529, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _528)) - _499;
        float _542 = fma(_530, cbModelParam._m0[28u].z, fma(_529, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _528)) - _503;
        float _546 = inversesqrt(dot(vec3(_540, _541, _542), vec3(_540, _541, _542)));
        float _559 = ((_546 * _540) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_495 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _560 = ((_546 * _541) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_499 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _561 = ((_546 * _542) / cbModelParam._m0[34u].z) + ((((((_503 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _564 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_559, _560, _561), 0.0);
        vec4 _571 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_559, _560, _561), 0.0);
        vec4 _578 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_559, _560, _561), 0.0);
        vec4 _585 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_559, _560, _561), 0.0);
        float _598 = exp2((_564.w + (-0.5)) * 20.0) * 2.0;
        float _599 = _598 * (_564.x + (-0.5));
        float _600 = _598 * (_564.y + (-0.5));
        float _601 = _598 * (_564.z + (-0.5));
        float _608 = exp2((_571.w + (-0.5)) * 20.0) * 2.0;
        float _609 = _608 * (_571.x + (-0.5));
        float _610 = _608 * (_571.y + (-0.5));
        float _611 = _608 * (_571.z + (-0.5));
        float _618 = exp2((_578.w + (-0.5)) * 20.0) * 2.0;
        float _619 = _618 * (_578.x + (-0.5));
        float _620 = _618 * (_578.y + (-0.5));
        float _621 = _618 * (_578.z + (-0.5));
        float _628 = exp2((_585.w + (-0.5)) * 20.0) * 2.0;
        float _629 = _628 * (_585.x + (-0.5));
        float _630 = _628 * (_585.y + (-0.5));
        float _631 = _628 * (_585.z + (-0.5));
        float _632 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
        float _633 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
        float _634 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
        float _635 = _599 * 0.5;
        float _636 = _609 * 0.5;
        float _637 = _619 * 0.5;
        float _638 = dot(vec3(_635, _636, _637), vec3(_635, _636, _637));
        float _643 = (_638 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_638);
        float _652 = (dot(vec3(_231, _232, _233), vec3(_643 * _635, _643 * _636, _643 * _637)) + 1.0) * 0.5;
        float _3120 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
        float _662 = sqrt(((_636 * _636) + (_635 * _635)) + (_637 * _637)) / (_632 + 9.9999997473787516355514526367188e-06);
        float _3131 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
        float _663 = isnan(1.0) ? _3131 : (isnan(_3131) ? 1.0 : min(_3131, 1.0));
        float _664 = _663 * 2.0;
        float _668 = (1.0 - _663) / (_663 + 1.0);
        float _3142 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
        float _669 = isnan(1.0) ? _3142 : (isnan(_3142) ? 1.0 : min(_3142, 1.0));
        float _678 = ((((1.0 - _669) * (_664 + 2.0)) * exp2(log2(isnan(1.0) ? _3120 : (isnan(_3120) ? 1.0 : min(_3120, 1.0))) * (_664 + 1.0))) + _669) * _632;
        float _679 = _600 * 0.5;
        float _680 = _610 * 0.5;
        float _681 = _620 * 0.5;
        float _682 = dot(vec3(_679, _680, _681), vec3(_679, _680, _681));
        float _687 = (_682 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_682);
        float _695 = (dot(vec3(_231, _232, _233), vec3(_687 * _679, _687 * _680, _687 * _681)) + 1.0) * 0.5;
        float _3153 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
        float _704 = sqrt(((_680 * _680) + (_679 * _679)) + (_681 * _681)) / (_633 + 9.9999997473787516355514526367188e-06);
        float _3164 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
        float _705 = isnan(1.0) ? _3164 : (isnan(_3164) ? 1.0 : min(_3164, 1.0));
        float _706 = _705 * 2.0;
        float _710 = (1.0 - _705) / (_705 + 1.0);
        float _3175 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
        float _711 = isnan(1.0) ? _3175 : (isnan(_3175) ? 1.0 : min(_3175, 1.0));
        float _720 = ((((1.0 - _711) * (_706 + 2.0)) * exp2(log2(isnan(1.0) ? _3153 : (isnan(_3153) ? 1.0 : min(_3153, 1.0))) * (_706 + 1.0))) + _711) * _633;
        float _721 = _601 * 0.5;
        float _722 = _611 * 0.5;
        float _723 = _621 * 0.5;
        float _724 = dot(vec3(_721, _722, _723), vec3(_721, _722, _723));
        float _729 = (_724 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_724);
        float _737 = (dot(vec3(_231, _232, _233), vec3(_729 * _721, _729 * _722, _729 * _723)) + 1.0) * 0.5;
        float _3186 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
        float _746 = sqrt(((_722 * _722) + (_721 * _721)) + (_723 * _723)) / (_634 + 9.9999997473787516355514526367188e-06);
        float _3197 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
        float _747 = isnan(1.0) ? _3197 : (isnan(_3197) ? 1.0 : min(_3197, 1.0));
        float _748 = _747 * 2.0;
        float _752 = (1.0 - _747) / (_747 + 1.0);
        float _3208 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
        float _753 = isnan(1.0) ? _3208 : (isnan(_3208) ? 1.0 : min(_3208, 1.0));
        float _762 = ((((1.0 - _753) * (_748 + 2.0)) * exp2(log2(isnan(1.0) ? _3186 : (isnan(_3186) ? 1.0 : min(_3186, 1.0))) * (_748 + 1.0))) + _753) * _634;
        _770 = _601;
        _772 = _600;
        _773 = _599;
        _774 = _611;
        _775 = _610;
        _776 = _609;
        _777 = _621;
        _778 = _620;
        _779 = _619;
        _780 = _634;
        _781 = _633;
        _782 = _632;
        _783 = cbModelParam._m0[36u].z * (isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0)));
        _784 = cbModelParam._m0[36u].z * (isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0)));
        _785 = cbModelParam._m0[36u].z * (isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0)));
    }
    else
    {
        _770 = _771;
        _772 = _771;
        _773 = _771;
        _774 = _771;
        _775 = _771;
        _776 = _771;
        _777 = _771;
        _778 = _771;
        _779 = _771;
        _780 = _771;
        _781 = _771;
        _782 = _771;
        _783 = 0.0;
        _784 = 0.0;
        _785 = 0.0;
    }
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _814 = fma(_439, cbModelParam._m0[30u].z, fma(_435, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _431));
        float _818 = fma(_439, cbModelParam._m0[31u].z, fma(_435, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _431));
        float _822 = fma(_439, cbModelParam._m0[32u].z, fma(_435, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _431));
        float _845 = _431 + _231;
        float _846 = _435 + _232;
        float _847 = _439 + _233;
        float _857 = fma(_847, cbModelParam._m0[30u].z, fma(_846, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _845)) - _814;
        float _858 = fma(_847, cbModelParam._m0[31u].z, fma(_846, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _845)) - _818;
        float _859 = fma(_847, cbModelParam._m0[32u].z, fma(_846, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _845)) - _822;
        float _863 = inversesqrt(dot(vec3(_857, _858, _859), vec3(_857, _858, _859)));
        float _876 = ((_863 * _857) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_814 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _877 = ((_863 * _858) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_818 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _878 = ((_863 * _859) / cbModelParam._m0[35u].z) + ((((((_822 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _880 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_876, _877, _878), 0.0);
        vec4 _887 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_876, _877, _878), 0.0);
        vec4 _894 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_876, _877, _878), 0.0);
        vec4 _901 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_876, _877, _878), 0.0);
        float _913 = exp2((_880.w + (-0.5)) * 20.0) * 2.0;
        float _914 = _913 * (_880.x + (-0.5));
        float _915 = _913 * (_880.y + (-0.5));
        float _916 = _913 * (_880.z + (-0.5));
        float _923 = exp2((_887.w + (-0.5)) * 20.0) * 2.0;
        float _924 = _923 * (_887.x + (-0.5));
        float _925 = _923 * (_887.y + (-0.5));
        float _926 = _923 * (_887.z + (-0.5));
        float _933 = exp2((_894.w + (-0.5)) * 20.0) * 2.0;
        float _934 = _933 * (_894.x + (-0.5));
        float _935 = _933 * (_894.y + (-0.5));
        float _936 = _933 * (_894.z + (-0.5));
        float _943 = exp2((_901.w + (-0.5)) * 20.0) * 2.0;
        float _944 = _943 * (_901.x + (-0.5));
        float _945 = _943 * (_901.y + (-0.5));
        float _946 = _943 * (_901.z + (-0.5));
        float _947 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _948 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
        float _949 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _950 = _914 * 0.5;
        float _951 = _924 * 0.5;
        float _952 = _934 * 0.5;
        float _953 = dot(vec3(_950, _951, _952), vec3(_950, _951, _952));
        float _958 = (_953 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_953);
        float _966 = (dot(vec3(_231, _232, _233), vec3(_958 * _950, _958 * _951, _958 * _952)) + 1.0) * 0.5;
        float _3249 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
        float _975 = sqrt(((_951 * _951) + (_950 * _950)) + (_952 * _952)) / (_947 + 9.9999997473787516355514526367188e-06);
        float _3260 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _976 = isnan(1.0) ? _3260 : (isnan(_3260) ? 1.0 : min(_3260, 1.0));
        float _977 = _976 * 2.0;
        float _981 = (1.0 - _976) / (_976 + 1.0);
        float _3271 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _982 = isnan(1.0) ? _3271 : (isnan(_3271) ? 1.0 : min(_3271, 1.0));
        float _991 = ((((1.0 - _982) * (_977 + 2.0)) * exp2(log2(isnan(1.0) ? _3249 : (isnan(_3249) ? 1.0 : min(_3249, 1.0))) * (_977 + 1.0))) + _982) * _947;
        float _992 = _915 * 0.5;
        float _993 = _925 * 0.5;
        float _994 = _935 * 0.5;
        float _995 = dot(vec3(_992, _993, _994), vec3(_992, _993, _994));
        float _1000 = (_995 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_995);
        float _1008 = (dot(vec3(_231, _232, _233), vec3(_1000 * _992, _1000 * _993, _1000 * _994)) + 1.0) * 0.5;
        float _3282 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1017 = sqrt(((_993 * _993) + (_992 * _992)) + (_994 * _994)) / (_948 + 9.9999997473787516355514526367188e-06);
        float _3293 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1018 = isnan(1.0) ? _3293 : (isnan(_3293) ? 1.0 : min(_3293, 1.0));
        float _1019 = _1018 * 2.0;
        float _1023 = (1.0 - _1018) / (_1018 + 1.0);
        float _3304 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1024 = isnan(1.0) ? _3304 : (isnan(_3304) ? 1.0 : min(_3304, 1.0));
        float _1033 = ((((1.0 - _1024) * (_1019 + 2.0)) * exp2(log2(isnan(1.0) ? _3282 : (isnan(_3282) ? 1.0 : min(_3282, 1.0))) * (_1019 + 1.0))) + _1024) * _948;
        float _1034 = _916 * 0.5;
        float _1035 = _926 * 0.5;
        float _1036 = _936 * 0.5;
        float _1037 = dot(vec3(_1034, _1035, _1036), vec3(_1034, _1035, _1036));
        float _1042 = (_1037 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1037);
        float _1050 = (dot(vec3(_231, _232, _233), vec3(_1042 * _1034, _1042 * _1035, _1042 * _1036)) + 1.0) * 0.5;
        float _3315 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1059 = sqrt(((_1035 * _1035) + (_1034 * _1034)) + (_1036 * _1036)) / (_949 + 9.9999997473787516355514526367188e-06);
        float _3326 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1060 = isnan(1.0) ? _3326 : (isnan(_3326) ? 1.0 : min(_3326, 1.0));
        float _1061 = _1060 * 2.0;
        float _1065 = (1.0 - _1060) / (_1060 + 1.0);
        float _3337 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1066 = isnan(1.0) ? _3337 : (isnan(_3337) ? 1.0 : min(_3337, 1.0));
        float _1075 = ((((1.0 - _1066) * (_1061 + 2.0)) * exp2(log2(isnan(1.0) ? _3315 : (isnan(_3315) ? 1.0 : min(_3315, 1.0))) * (_1061 + 1.0))) + _1066) * _949;
        _1083 = _916;
        _1084 = _915;
        _1085 = _914;
        _1086 = _926;
        _1087 = _925;
        _1088 = _924;
        _1089 = _936;
        _1090 = _935;
        _1091 = _934;
        _1092 = _949;
        _1093 = _948;
        _1094 = _947;
        _1095 = cbModelParam._m0[36u].w * (isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0)));
        _1096 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0)));
        _1097 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0)));
    }
    else
    {
        _1083 = _771;
        _1084 = _771;
        _1085 = _771;
        _1086 = _771;
        _1087 = _771;
        _1088 = _771;
        _1089 = _771;
        _1090 = _771;
        _1091 = _771;
        _1092 = _771;
        _1093 = _771;
        _1094 = _771;
        _1095 = 0.0;
        _1096 = 0.0;
        _1097 = 0.0;
    }
    float _1107 = (cbModelParam._m0[1u].x * (_1095 - _783)) + _783;
    float _1108 = (cbModelParam._m0[1u].x * (_1096 - _784)) + _784;
    float _1109 = (cbModelParam._m0[1u].x * (_1097 - _785)) + _785;
    float _1130 = fma(_1109, cbSceneParam._m0[89u].z, fma(_1108, cbSceneParam._m0[89u].y, _1107 * cbSceneParam._m0[89u].x));
    float _1133 = fma(_1109, cbSceneParam._m0[90u].z, fma(_1108, cbSceneParam._m0[90u].y, _1107 * cbSceneParam._m0[90u].x));
    float _1136 = fma(_1109, cbSceneParam._m0[91u].z, fma(_1108, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1107));
    float _1151 = _407 * 0.5;
    float _1152 = _408 * 0.5;
    float _1153 = _409 * 0.5;
    float _1154 = dot(vec4(_1151, _1152, _1153, 1.0), vec4(_1085, _1088, _1091, _1094));
    float _1157 = dot(vec4(_1151, _1152, _1153, 1.0), vec4(_1084, _1087, _1090, _1093));
    float _1160 = dot(vec4(_1151, _1152, _1153, 1.0), vec4(_1083, _1086, _1089, _1092));
    float _1194;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1167 = dot(vec4(_1151, _1152, _1153, 1.0), vec4(_770, _774, _777, _780));
        float _1171 = dot(vec4(_1151, _1152, _1153, 1.0), vec4(_772, _775, _778, _781));
        float _1175 = dot(vec4(_1151, _1152, _1153, 1.0), vec4(_773, _776, _779, _782));
        float _1182 = dot(vec4(cbModelParam._m0[39u]), vec4(_1151, _1152, _1153, 1.0));
        _1194 = dot(vec3(isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0)), isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0)), isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1182) ? 0.0 : (isnan(0.0) ? _1182 : max(0.0, _1182))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1194 = 1.0;
    }
    float _1205;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1196 = dot(vec4(cbModelParam._m0[40u]), vec4(_1151, _1152, _1153, 1.0));
        _1205 = dot(vec3(isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0)), isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0)), isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1196) ? 0.0 : (isnan(0.0) ? _1196 : max(0.0, _1196))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1205 = 1.0;
    }
    float _1209 = (_1205 * cbModelParam._m0[1u].x) + (_1194 * (1.0 - cbModelParam._m0[1u].x));
    float _1218 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1300;
    float _1302;
    float _1304;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1267 = fma(_439, cbModelParam._m0[13u].z, fma(_435, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _431)) + cbModelParam._m0[13u].w;
        float _1271 = fma(_439, cbModelParam._m0[14u].z, fma(_435, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _431)) + cbModelParam._m0[14u].w;
        float _1275 = fma(_439, cbModelParam._m0[15u].z, fma(_435, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _431)) + cbModelParam._m0[15u].w;
        float _1278 = fma(_409, cbModelParam._m0[13u].z, fma(_408, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _407));
        float _1281 = fma(_409, cbModelParam._m0[14u].z, fma(_408, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _407));
        float _1284 = fma(_409, cbModelParam._m0[15u].z, fma(_408, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _407));
        float _1310;
        if (_1278 > 0.0)
        {
            _1310 = abs((1.0 - _1267) / _1278);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1278 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1267 + 1.0) / _1278);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1310 = frontier_phi_17_15_ladder;
        }
        float _1538;
        if (_1281 > 0.0)
        {
            _1538 = abs((1.0 - _1271) / _1281);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1281 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1271 + 1.0) / _1281);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1538 = frontier_phi_26_22_ladder;
        }
        float _1730;
        if (_1284 > 0.0)
        {
            _1730 = abs((1.0 - _1275) / _1284);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1284 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1275 + 1.0) / _1284);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1730 = frontier_phi_38_33_ladder;
        }
        float _1732 = isnan(_1538) ? _1310 : (isnan(_1310) ? _1538 : min(_1310, _1538));
        float _1733 = isnan(_1730) ? _1732 : (isnan(_1732) ? _1730 : min(_1732, _1730));
        float _1737 = (_1733 * _1278) + _1267;
        float _1738 = (_1733 * _1281) + _1271;
        float _1739 = (_1733 * _1284) + _1275;
        float _1740 = _1733 * 9.9999997473787516355514526367188e-05;
        float _1742 = (-1.0) - _1740;
        float _1744 = _1740 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1739 > _1744) || ((_1739 < _1742) || ((_1738 > _1744) || ((_1738 < _1742) || ((_1737 < _1742) || (_1737 > _1744))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1836 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1739, cbModelParam._m0[9u].z, fma(_1738, cbModelParam._m0[9u].y, _1737 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1739, cbModelParam._m0[10u].z, fma(_1738, cbModelParam._m0[10u].y, _1737 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1739, cbModelParam._m0[11u].z, fma(_1738, cbModelParam._m0[11u].y, _1737 * cbModelParam._m0[11u].x))), _1218);
            frontier_phi_16_38_ladder = _1836.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _1836.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _1836.x * cbModelParam._m0[1u].y;
        }
        _1300 = frontier_phi_16_38_ladder_2;
        _1302 = frontier_phi_16_38_ladder_1;
        _1304 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1288 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_407, _408, _409), _1218);
        _1300 = _1288.x * cbModelParam._m0[1u].y;
        _1302 = _1288.y * cbModelParam._m0[1u].y;
        _1304 = _1288.z * cbModelParam._m0[1u].y;
    }
    float _1307 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1400;
    float _1402;
    float _1404;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1364 = fma(_439, cbModelParam._m0[21u].z, fma(_435, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _431)) + cbModelParam._m0[21u].w;
        float _1368 = fma(_439, cbModelParam._m0[22u].z, fma(_435, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _431)) + cbModelParam._m0[22u].w;
        float _1372 = fma(_439, cbModelParam._m0[23u].z, fma(_435, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _431)) + cbModelParam._m0[23u].w;
        float _1375 = fma(_409, cbModelParam._m0[21u].z, fma(_408, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _407));
        float _1378 = fma(_409, cbModelParam._m0[22u].z, fma(_408, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _407));
        float _1381 = fma(_409, cbModelParam._m0[23u].z, fma(_408, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _407));
        float _1543;
        if (_1375 > 0.0)
        {
            _1543 = abs((1.0 - _1364) / _1375);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1375 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1364 + 1.0) / _1375);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1543 = frontier_phi_28_24_ladder;
        }
        float _1757;
        if (_1378 > 0.0)
        {
            _1757 = abs((1.0 - _1368) / _1378);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1378 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1368 + 1.0) / _1378);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1757 = frontier_phi_40_35_ladder;
        }
        float _1908;
        if (_1381 > 0.0)
        {
            _1908 = abs((1.0 - _1372) / _1381);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1381 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1372 + 1.0) / _1381);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _1908 = frontier_phi_49_46_ladder;
        }
        float _1910 = isnan(_1757) ? _1543 : (isnan(_1543) ? _1757 : min(_1543, _1757));
        float _1911 = isnan(_1908) ? _1910 : (isnan(_1910) ? _1908 : min(_1910, _1908));
        float _1915 = (_1911 * _1375) + _1364;
        float _1916 = (_1911 * _1378) + _1368;
        float _1917 = (_1911 * _1381) + _1372;
        float _1918 = _1911 * 9.9999997473787516355514526367188e-05;
        float _1919 = (-1.0) - _1918;
        float _1921 = _1918 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_1917 > _1921) || ((_1917 < _1919) || ((_1916 > _1921) || ((_1916 < _1919) || ((_1915 < _1919) || (_1915 > _1921))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2154 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1917, cbModelParam._m0[17u].z, fma(_1916, cbModelParam._m0[17u].y, _1915 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1917, cbModelParam._m0[18u].z, fma(_1916, cbModelParam._m0[18u].y, _1915 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1917, cbModelParam._m0[19u].z, fma(_1916, cbModelParam._m0[19u].y, _1915 * cbModelParam._m0[19u].x))), _1307);
            frontier_phi_25_49_ladder = _2154.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2154.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2154.x * cbModelParam._m0[1u].z;
        }
        _1400 = frontier_phi_25_49_ladder_2;
        _1402 = frontier_phi_25_49_ladder_1;
        _1404 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1384 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_407, _408, _409), _1307);
        _1400 = _1384.x * cbModelParam._m0[1u].z;
        _1402 = _1384.y * cbModelParam._m0[1u].z;
        _1404 = _1384.z * cbModelParam._m0[1u].z;
    }
    float _1416 = _398 * 0.01200000010430812835693359375;
    float _1418 = _1416 * ((cbModelParam._m0[1u].w * (_1400 - _1300)) + _1300);
    float _1419 = _1416 * ((cbModelParam._m0[1u].w * (_1402 - _1302)) + _1302);
    float _1420 = _1416 * ((cbModelParam._m0[1u].w * (_1404 - _1304)) + _1304);
    float _1423 = fma(_1420, cbSceneParam._m0[89u].z, fma(_1419, cbSceneParam._m0[89u].y, _1418 * cbSceneParam._m0[89u].x));
    float _1426 = fma(_1420, cbSceneParam._m0[90u].z, fma(_1419, cbSceneParam._m0[90u].y, _1418 * cbSceneParam._m0[90u].x));
    float _1429 = fma(_1420, cbSceneParam._m0[91u].z, fma(_1419, cbSceneParam._m0[91u].y, _1418 * cbSceneParam._m0[91u].x));
    vec4 _1437 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_332, _333));
    float _1439 = _1437.w;
    float _1451 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1439);
    float _1452 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1439);
    float _1453 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1439);
    uvec4 _1457 = floatBitsToUint(cbInstanceData._m0[_372 + 5u]);
    uint _1459 = _1457.x * 14u;
    uint _1460 = _1459 + 13u;
    float _1467 = _398 + (-1.0);
    float _1473 = (cbLight._m0[_1460].x * _1467) + 1.0;
    float _1474 = (cbLight._m0[_1460].y * _1467) + 1.0;
    float _1475 = (cbLight._m0[_1460].z * _1467) + 1.0;
    float _1476 = (cbLight._m0[_1460].w * _1467) + 1.0;
    uint _1477 = _1459 + 5u;
    float _1483 = isnan(1.0) ? _1474 : (isnan(_1474) ? 1.0 : min(_1474, 1.0));
    uint _1487 = _1459 + 4u;
    float _1497 = isnan(1.0) ? _1473 : (isnan(_1473) ? 1.0 : min(_1473, 1.0));
    uint _1501 = _1459 | 1u;
    float _1512 = dot(vec3(cbLight._m0[_1459].xyz), vec3(_231, _232, _233));
    float _1515 = dot(vec3(cbLight._m0[_1501].xyz), vec3(_231, _232, _233));
    float _3473 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
    float _3484 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
    float _1520 = (isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0))) * 0.3183098733425140380859375;
    float _1522 = (isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0))) * 0.3183098733425140380859375;
    float _1529 = ((cbLight._m0[_1477].x * _1483) * _1522) + (((cbLight._m0[_1487].x * _1451) * _1497) * _1520);
    float _1530 = ((_1483 * cbLight._m0[_1477].y) * _1522) + (((cbLight._m0[_1487].y * _1452) * _1497) * _1520);
    float _1531 = ((_1483 * cbLight._m0[_1477].z) * _1522) + (((cbLight._m0[_1487].z * _1453) * _1497) * _1520);
    uvec4 _1535 = floatBitsToUint(cbLight._m0[_1459 + 12u]);
    bool _1537 = _1535.x == 0u;
    float _1548;
    float _1550;
    float _1552;
    if (_1537)
    {
        _1548 = _1529;
        _1550 = _1530;
        _1552 = _1531;
    }
    else
    {
        uint _1556 = _1459 + 6u;
        float _1572 = (dot(vec3(cbLight._m0[_1459 + 2u].xyz), vec3(_231, _232, _233)) * 0.5) + 0.5;
        float _1573 = _1572 * _1572;
        float _3495 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1574 = isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0));
        float _1575 = isnan(1.0) ? _1475 : (isnan(_1475) ? 1.0 : min(_1475, 1.0));
        _1548 = (((cbLight._m0[_1556].x * 0.3183098733425140380859375) * _1574) * _1575) + _1529;
        _1550 = (((cbLight._m0[_1556].y * 0.3183098733425140380859375) * _1574) * _1575) + _1530;
        _1552 = (((cbLight._m0[_1556].z * 0.3183098733425140380859375) * _1574) * _1575) + _1531;
    }
    bool _1555 = _1535.y == 0u;
    float _1593;
    float _1595;
    float _1597;
    if (_1555)
    {
        _1593 = _1548;
        _1595 = _1550;
        _1597 = _1552;
    }
    else
    {
        uint _1701 = _1459 + 7u;
        float _1717 = (dot(vec3(cbLight._m0[_1459 + 3u].xyz), vec3(_231, _232, _233)) * 0.5) + 0.5;
        float _1718 = _1717 * _1717;
        float _3511 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
        float _1719 = isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0));
        float _1720 = isnan(1.0) ? _1476 : (isnan(_1476) ? 1.0 : min(_1476, 1.0));
        _1593 = (((cbLight._m0[_1701].x * 0.3183098733425140380859375) * _1719) * _1720) + _1548;
        _1595 = (((cbLight._m0[_1701].y * 0.3183098733425140380859375) * _1719) * _1720) + _1550;
        _1597 = (((cbLight._m0[_1701].z * 0.3183098733425140380859375) * _1719) * _1720) + _1552;
    }
    uint _1599 = _1459 + 8u;
    float _1605 = cbLight._m0[_1459].x + _311;
    float _1606 = cbLight._m0[_1459].y + _312;
    float _1607 = cbLight._m0[_1459].z + _313;
    float _1611 = inversesqrt(dot(vec3(_1605, _1606, _1607), vec3(_1605, _1606, _1607)));
    float _1615 = dot(vec3(_231, _232, _233), vec3(cbLight._m0[_1459].xyz));
    float _3527 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
    float _1618 = isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0));
    float _3538 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    float _1619 = isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0));
    float _1620 = dot(vec3(cbLight._m0[_1459].xyz), vec3(_1605 * _1611, _1606 * _1611, _1607 * _1611));
    float _3549 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
    float _1631 = (exp2(log2(1.0 - (isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1637 = (0.5 / ((_1618 + 9.9999999392252902907785028219223e-09) + _1619)) * _1618;
    float _3560 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
    float _1639 = (isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0))) * 0.31831014156341552734375;
    uint _1653 = _1459 + 9u;
    float _1659 = cbLight._m0[_1501].x + _311;
    float _1660 = cbLight._m0[_1501].y + _312;
    float _1661 = cbLight._m0[_1501].z + _313;
    float _1665 = inversesqrt(dot(vec3(_1659, _1660, _1661), vec3(_1659, _1660, _1661)));
    float _1669 = dot(vec3(_231, _232, _233), vec3(cbLight._m0[_1501].xyz));
    float _3571 = isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0));
    float _1672 = isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0));
    float _1673 = dot(vec3(cbLight._m0[_1501].xyz), vec3(_1659 * _1665, _1660 * _1665, _1661 * _1665));
    float _3582 = isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0));
    float _1682 = (exp2(log2(1.0 - (isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1686 = (0.5 / ((_1672 + 9.9999999392252902907785028219223e-09) + _1619)) * _1672;
    float _3593 = isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0));
    float _1688 = (isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0))) * 0.31831014156341552734375;
    float _1698 = (((_1682 * cbLight._m0[_1653].x) * _1688) * _1483) + ((((cbLight._m0[_1599].x * _1451) * _1631) * _1639) * _1497);
    float _1699 = (((_1682 * cbLight._m0[_1653].y) * _1688) * _1483) + ((((cbLight._m0[_1599].y * _1452) * _1631) * _1639) * _1497);
    float _1700 = (((_1682 * cbLight._m0[_1653].z) * _1688) * _1483) + ((((cbLight._m0[_1599].z * _1453) * _1631) * _1639) * _1497);
    float _1762;
    float _1764;
    float _1766;
    if (_1537)
    {
        _1762 = _1698;
        _1764 = _1699;
        _1766 = _1700;
    }
    else
    {
        uint _1768 = _1459 + 10u;
        uint _1774 = _1459 + 2u;
        float _1780 = cbLight._m0[_1774].x + _311;
        float _1781 = cbLight._m0[_1774].y + _312;
        float _1782 = cbLight._m0[_1774].z + _313;
        float _1786 = inversesqrt(dot(vec3(_1780, _1781, _1782), vec3(_1780, _1781, _1782)));
        float _1790 = dot(vec3(_231, _232, _233), vec3(cbLight._m0[_1774].xyz));
        float _3604 = isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0));
        float _1793 = isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0));
        float _1794 = dot(vec3(cbLight._m0[_1774].xyz), vec3(_1780 * _1786, _1781 * _1786, _1782 * _1786));
        float _3615 = isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0));
        float _1803 = (exp2(log2(1.0 - (isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1807 = (0.5 / ((_1793 + 9.9999999392252902907785028219223e-09) + _1619)) * _1793;
        float _3626 = isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0));
        float _1809 = (isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0))) * 0.31831014156341552734375;
        float _1810 = isnan(1.0) ? _1475 : (isnan(_1475) ? 1.0 : min(_1475, 1.0));
        _1762 = (((_1803 * cbLight._m0[_1768].x) * _1809) * _1810) + _1698;
        _1764 = (((_1803 * cbLight._m0[_1768].y) * _1809) * _1810) + _1699;
        _1766 = (((_1803 * cbLight._m0[_1768].z) * _1809) * _1810) + _1700;
    }
    float _1845;
    float _1847;
    float _1849;
    if (_1555)
    {
        _1845 = _1762;
        _1847 = _1764;
        _1849 = _1766;
    }
    else
    {
        uint _1856 = _1459 + 11u;
        uint _1862 = _1459 + 3u;
        float _1868 = cbLight._m0[_1862].x + _311;
        float _1869 = cbLight._m0[_1862].y + _312;
        float _1870 = cbLight._m0[_1862].z + _313;
        float _1874 = inversesqrt(dot(vec3(_1868, _1869, _1870), vec3(_1868, _1869, _1870)));
        float _1878 = dot(vec3(_231, _232, _233), vec3(cbLight._m0[_1862].xyz));
        float _3642 = isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0));
        float _1881 = isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0));
        float _1882 = dot(vec3(cbLight._m0[_1862].xyz), vec3(_1868 * _1874, _1869 * _1874, _1870 * _1874));
        float _3653 = isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0));
        float _1891 = (exp2(log2(1.0 - (isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1895 = (0.5 / ((_1881 + 9.9999999392252902907785028219223e-09) + _1619)) * _1881;
        float _3664 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
        float _1897 = (isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0))) * 0.31831014156341552734375;
        float _1898 = isnan(1.0) ? _1476 : (isnan(_1476) ? 1.0 : min(_1476, 1.0));
        _1845 = (((_1891 * cbLight._m0[_1856].x) * _1897) * _1898) + _1762;
        _1847 = (((_1891 * cbLight._m0[_1856].y) * _1897) * _1898) + _1764;
        _1849 = (((_1891 * cbLight._m0[_1856].z) * _1897) * _1898) + _1766;
    }
    float _2033;
    float _2035;
    float _2037;
    float _2039;
    float _2041;
    float _2043;
    if (_1457.y == 0u)
    {
        float _1973 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1974 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1973;
        float _1975 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1973;
        float _1976 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1973;
        uvec4 _1988 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1989 = _1988.x;
        uint _2000 = uint((float(_1988.y) * floor(float(uint(cbSceneParam._m0[85u].y * _333) / _1989))) + floor(float(uint(cbSceneParam._m0[85u].x * _332) / _1989)));
        float _2010 = (log2(_1976 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2011 = isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0));
        uint _2014 = uint(isnan(14.0) ? _2011 : (isnan(_2011) ? 14.0 : min(_2011, 14.0)));
        uvec4 _2019 = texelFetch(g_lightClusterGridBuffer, int(((_2014 << 2u) + (_2000 << 6u)) >> 2u));
        uint _2020 = _2019.x;
        uint _2021 = _1988.z;
        float _2159;
        float _2161;
        float _2163;
        float _2165;
        float _2167;
        float _2169;
        if (((((1u << ((_2021 >> 4u) & 15u)) + 4294967295u) & _2020) == 0u) || ((_2021 & 240u) == 0u))
        {
            _2159 = 0.0;
            _2161 = 0.0;
            _2163 = 0.0;
            _2165 = 0.0;
            _2167 = 0.0;
            _2169 = 0.0;
        }
        else
        {
            float _2160;
            float _2162;
            float _2164;
            float _2166;
            float _2168;
            float _2170;
            float _2319 = 0.0;
            float _2320 = 0.0;
            float _2321 = 0.0;
            float _2322 = 0.0;
            float _2323 = 0.0;
            float _2324 = 0.0;
            uint _2325 = 0u;
            uint _2334;
            bool _2335;
            for (;;)
            {
                _2334 = texelFetch(g_lightClassification, int((((_2014 << 5u) + (_2000 << 9u)) + (_2325 << 2u)) >> 2u)).x;
                _2335 = _2334 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2335)
                {
                    frontier_phi_66_pred = _2319;
                    frontier_phi_66_pred_1 = _2324;
                    frontier_phi_66_pred_2 = _2323;
                    frontier_phi_66_pred_3 = _2322;
                    frontier_phi_66_pred_4 = _2321;
                    frontier_phi_66_pred_5 = _2320;
                }
                else
                {
                    float _2464;
                    float _2465;
                    float _2466;
                    float _2467;
                    float _2468;
                    float _2469;
                    uint _2470;
                    _2464 = _2319;
                    _2465 = _2320;
                    _2466 = _2321;
                    _2467 = _2322;
                    _2468 = _2323;
                    _2469 = _2324;
                    _2470 = _2334;
                    float _2391;
                    float _2392;
                    float _2393;
                    float _2394;
                    float _2395;
                    float _2396;
                    for (;;)
                    {
                        uint _2474 = uint(findLSB(_2470)) + (_2325 << 5u);
                        uint _2471 = (_2470 + 4294967295u) & _2470;
                        uint _2476 = _2474 * 48u;
                        vec4 _2490 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2476)).x, texelFetch(g_PointLightRenderingBuffer, int(_2476 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2476 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2476 + 3u)).x));
                        uint _2496 = (_2474 * 48u) + 4u;
                        vec4 _2509 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2496)).x, texelFetch(g_PointLightRenderingBuffer, int(_2496 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2496 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2496 + 3u)).x));
                        uint _2515 = (_2474 * 48u) + 8u;
                        vec3 _2526 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2515)).x, texelFetch(g_PointLightRenderingBuffer, int(_2515 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2515 + 2u)).x));
                        float _2530 = _2490.x - _1974;
                        float _2531 = _2490.y - _1975;
                        float _2532 = _2490.z - _1976;
                        float _2533 = dot(vec3(_2530, _2531, _2532), vec3(_2530, _2531, _2532));
                        float _2536 = inversesqrt(_2533);
                        float _2545 = 1.0 - (_2533 * _2490.w);
                        float _3690 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0));
                        float _2546 = isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0));
                        float _2547 = sqrt(_2533) * _2509.w;
                        float _2550 = 1.39999997615814208984375 / (_2547 + 1.39999997615814208984375);
                        float _2551 = _2550 * _2550;
                        float _2554 = ((1.0 - _2551) * dot(vec3(_353, _356, _359), vec3(_2536 * _2530, _2536 * _2531, _2536 * _2532))) + _2551;
                        float _2557 = _2547 * _2547;
                        float _2561 = ((isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : max(_2554, 0.0))) * _2546) / ((_2557 * 0.699999988079071044921875) + 1.0);
                        float _2565 = (-0.0) - _1974;
                        float _2566 = (-0.0) - _1975;
                        float _2567 = (-0.0) - _1976;
                        float _2571 = inversesqrt(dot(vec3(_2565, _2566, _2567), vec3(_2565, _2566, _2567)));
                        float _2575 = dot(vec3(_353, _356, _359), vec3(_2571 * _2565, _2571 * _2566, _2571 * _2567));
                        float _3706 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0));
                        float _3717 = isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : max(_2554, 0.0));
                        float _2579 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
                        float _2583 = (0.5 / (((isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0))) + 9.9999999392252902907785028219223e-09) + _2579)) * _2579;
                        float _3728 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0));
                        float _2592 = (((isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0))) * 3.1415927410125732421875) / ((_2557 * 2.1991131305694580078125) + 3.141590118408203125)) * _2546;
                        _2394 = (_2561 * _2509.x) + _2467;
                        _2395 = (_2561 * _2509.y) + _2468;
                        _2396 = (_2561 * _2509.z) + _2469;
                        _2391 = (_2592 * _2526.x) + _2464;
                        _2392 = (_2592 * _2526.y) + _2465;
                        _2393 = (_2592 * _2526.z) + _2466;
                        if (_2471 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2464 = _2391;
                            _2465 = _2392;
                            _2466 = _2393;
                            _2467 = _2394;
                            _2468 = _2395;
                            _2469 = _2396;
                            _2470 = _2471;
                        }
                    }
                    frontier_phi_66_pred = _2391;
                    frontier_phi_66_pred_1 = _2396;
                    frontier_phi_66_pred_2 = _2395;
                    frontier_phi_66_pred_3 = _2394;
                    frontier_phi_66_pred_4 = _2393;
                    frontier_phi_66_pred_5 = _2392;
                }
                _2160 = frontier_phi_66_pred;
                _2170 = frontier_phi_66_pred_1;
                _2168 = frontier_phi_66_pred_2;
                _2166 = frontier_phi_66_pred_3;
                _2164 = frontier_phi_66_pred_4;
                _2162 = frontier_phi_66_pred_5;
                uint _2326 = _2325 + 1u;
                if (_2326 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2319 = _2160;
                    _2320 = _2162;
                    _2321 = _2164;
                    _2322 = _2166;
                    _2323 = _2168;
                    _2324 = _2170;
                    _2325 = _2326;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2159 = _2160;
            _2161 = _2162;
            _2163 = _2164;
            _2165 = _2166;
            _2167 = _2168;
            _2169 = _2170;
        }
        uvec4 _2173 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2174 = _2173.z;
        uint _2176 = (_2174 >> 8u) & 15u;
        float _2290;
        float _2292;
        float _2294;
        float _2296;
        float _2298;
        float _2300;
        if (((4294967295u << _2176) & _2020) == 0u)
        {
            _2290 = _2159;
            _2292 = _2161;
            _2294 = _2163;
            _2296 = _2165;
            _2298 = _2167;
            _2300 = _2169;
        }
        else
        {
            float _2315 = inversesqrt(dot(vec3(_1974, _1975, _1976), vec3(_1974, _1975, _1976)));
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2176 < ((_2174 >> 12u) & 15u))
            {
                float _2291;
                float _2293;
                float _2295;
                float _2297;
                float _2299;
                float _2301;
                float _2447 = _2159;
                float _2448 = _2161;
                float _2449 = _2163;
                float _2450 = _2165;
                float _2451 = _2167;
                float _2452 = _2169;
                uint _2453 = _2176;
                uint _2462;
                bool _2463;
                for (;;)
                {
                    _2462 = texelFetch(g_lightClassification, int((((_2014 << 5u) + (_2000 << 9u)) + (_2453 << 2u)) >> 2u)).x;
                    _2463 = _2462 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2463)
                    {
                        frontier_phi_77_pred = _2452;
                        frontier_phi_77_pred_1 = _2451;
                        frontier_phi_77_pred_2 = _2450;
                        frontier_phi_77_pred_3 = _2449;
                        frontier_phi_77_pred_4 = _2448;
                        frontier_phi_77_pred_5 = _2447;
                    }
                    else
                    {
                        float _2606;
                        float _2607;
                        float _2608;
                        float _2609;
                        float _2610;
                        float _2611;
                        float _2858;
                        float _2859;
                        float _2860;
                        float _2861;
                        float _2862;
                        float _2863;
                        float _2619 = _2447;
                        float _2620 = _2448;
                        float _2621 = _2449;
                        float _2622 = _2450;
                        float _2623 = _2451;
                        float _2624 = _2452;
                        uint _2625 = _2462;
                        uint _2626;
                        vec4 _2651;
                        float _2652;
                        vec4 _2667;
                        vec3 _2679;
                        vec4 _2695;
                        vec4 _2711;
                        float _2758;
                        bool _2759;
                        for (;;)
                        {
                            uint _2636 = ((_2453 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2625));
                            _2626 = (_2625 + 4294967295u) & _2625;
                            uint _2638 = _2636 * 40u;
                            _2651 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2638)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2638 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2638 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2638 + 3u)).x));
                            _2652 = _2651.w;
                            uint _2654 = (_2636 * 40u) + 4u;
                            _2667 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2654)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2654 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2654 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2654 + 3u)).x));
                            uint _2669 = (_2636 * 40u) + 8u;
                            _2679 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2669)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2669 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2669 + 2u)).x));
                            uint _2682 = (_2636 * 40u) + 16u;
                            _2695 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2682)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2682 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2682 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2682 + 3u)).x));
                            uint _2698 = (_2636 * 40u) + 20u;
                            _2711 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2698)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2698 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2698 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2698 + 3u)).x));
                            uint _2714 = (_2636 * 40u) + 24u;
                            vec4 _2727 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2714)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2714 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2714 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2714 + 3u)).x));
                            uint _2733 = (_2636 * 40u) + 28u;
                            vec4 _2746 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2733)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2733 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2733 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2733 + 3u)).x));
                            _2758 = fma(_1976, _2746.z, fma(_1975, _2746.y, _2746.x * _1974)) + _2746.w;
                            _2759 = !((fma(_1976, _2727.z, fma(_1975, _2727.y, _2727.x * _1974)) + _2727.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2759)
                            {
                                float _2786 = _2651.x - _1974;
                                float _2787 = _2651.y - _1975;
                                float _2788 = _2651.z - _1976;
                                float _2789 = dot(vec3(_2786, _2787, _2788), vec3(_2786, _2787, _2788));
                                float _2792 = inversesqrt(_2789);
                                float _2793 = _2792 * _2786;
                                float _2794 = _2792 * _2787;
                                float _2795 = _2792 * _2788;
                                float _2799 = 1.0 - (_2789 / (_2652 * _2652));
                                float _3739 = isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : max(_2799, 0.0));
                                float _2800 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
                                float _2804 = sqrt(_2789) * _2667.w;
                                float _2806 = 1.39999997615814208984375 / (_2804 + 1.39999997615814208984375);
                                float _2807 = _2806 * _2806;
                                float _2808 = 1.0 - _2807;
                                float _2810 = (_2808 * dot(vec3(_2793, _2794, _2795), vec3(_353, _356, _359))) + _2807;
                                float _2813 = _2804 * _2804;
                                float _2817 = (fma(_1976, _2695.z, fma(_1975, _2695.y, _2695.x * _1974)) + _2695.w) / _2758;
                                float _2818 = (fma(_1976, _2711.z, fma(_1975, _2711.y, _2711.x * _1974)) + _2711.w) / _2758;
                                float _2822 = 1.0 - dot(vec2(_2817, _2818), vec2(_2817, _2818));
                                float _3755 = isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0));
                                float _2823 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
                                float _2824 = _2823 * (((isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0))) * _2800) / ((_2813 * 0.699999988079071044921875) + 1.0));
                                float _2834 = dot(vec3(_353, _356, _359), vec3((-0.0) - (_1974 * _2315), (-0.0) - (_1975 * _2315), (-0.0) - (_1976 * _2315)));
                                float _3766 = isnan(0.0) ? _2834 : (isnan(_2834) ? 0.0 : max(_2834, 0.0));
                                float _2842 = (_2808 * dot(vec3(_353, _356, _359), vec3(_2793, _2794, _2795))) + _2807;
                                float _3777 = isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : max(_2842, 0.0));
                                float _2843 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
                                float _2847 = (0.5 / (((isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0))) + 9.9999999392252902907785028219223e-09) + _2843)) * _2843;
                                float _3788 = isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : max(_2847, 0.0));
                                float _2854 = (_2823 * _2800) * (((isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0))) * 3.1415927410125732421875) / ((_2813 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_83_pred = _2824 * _2667.y;
                                frontier_phi_83_pred_1 = _2824 * _2667.x;
                                frontier_phi_83_pred_2 = _2854 * _2679.z;
                                frontier_phi_83_pred_3 = _2854 * _2679.y;
                                frontier_phi_83_pred_4 = _2854 * _2679.x;
                                frontier_phi_83_pred_5 = _2824 * _2667.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _2862 = frontier_phi_83_pred;
                            _2861 = frontier_phi_83_pred_1;
                            _2860 = frontier_phi_83_pred_2;
                            _2859 = frontier_phi_83_pred_3;
                            _2858 = frontier_phi_83_pred_4;
                            _2863 = frontier_phi_83_pred_5;
                            _2609 = _2861 + _2622;
                            _2610 = _2862 + _2623;
                            _2611 = _2863 + _2624;
                            _2606 = _2858 + _2619;
                            _2607 = _2859 + _2620;
                            _2608 = _2860 + _2621;
                            if (_2626 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2619 = _2606;
                                _2620 = _2607;
                                _2621 = _2608;
                                _2622 = _2609;
                                _2623 = _2610;
                                _2624 = _2611;
                                _2625 = _2626;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2611;
                        frontier_phi_77_pred_1 = _2610;
                        frontier_phi_77_pred_2 = _2609;
                        frontier_phi_77_pred_3 = _2608;
                        frontier_phi_77_pred_4 = _2607;
                        frontier_phi_77_pred_5 = _2606;
                    }
                    _2301 = frontier_phi_77_pred;
                    _2299 = frontier_phi_77_pred_1;
                    _2297 = frontier_phi_77_pred_2;
                    _2295 = frontier_phi_77_pred_3;
                    _2293 = frontier_phi_77_pred_4;
                    _2291 = frontier_phi_77_pred_5;
                    uint _2454 = _2453 + 1u;
                    if (_2454 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2447 = _2291;
                        _2448 = _2293;
                        _2449 = _2295;
                        _2450 = _2297;
                        _2451 = _2299;
                        _2452 = _2301;
                        _2453 = _2454;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2295;
                frontier_phi_58_59_ladder_1 = _2301;
                frontier_phi_58_59_ladder_2 = _2299;
                frontier_phi_58_59_ladder_3 = _2297;
                frontier_phi_58_59_ladder_4 = _2293;
                frontier_phi_58_59_ladder_5 = _2291;
            }
            else
            {
                frontier_phi_58_59_ladder = _2163;
                frontier_phi_58_59_ladder_1 = _2169;
                frontier_phi_58_59_ladder_2 = _2167;
                frontier_phi_58_59_ladder_3 = _2165;
                frontier_phi_58_59_ladder_4 = _2161;
                frontier_phi_58_59_ladder_5 = _2159;
            }
            _2290 = frontier_phi_58_59_ladder_5;
            _2292 = frontier_phi_58_59_ladder_4;
            _2294 = frontier_phi_58_59_ladder;
            _2296 = frontier_phi_58_59_ladder_3;
            _2298 = frontier_phi_58_59_ladder_2;
            _2300 = frontier_phi_58_59_ladder_1;
        }
        float _2305 = isnan(1.0) ? _398 : (isnan(_398) ? 1.0 : min(_398, 1.0));
        _2033 = (_2305 * _2296) + _1593;
        _2035 = (_2305 * _2298) + _1595;
        _2037 = (_2305 * _2300) + _1597;
        _2039 = ((_2290 * 0.039999999105930328369140625) * _2305) + _1845;
        _2041 = ((_2292 * 0.039999999105930328369140625) * _2305) + _1847;
        _2043 = ((_2294 * 0.039999999105930328369140625) * _2305) + _1849;
    }
    else
    {
        _2033 = _1593;
        _2035 = _1595;
        _2037 = _1597;
        _2039 = _1845;
        _2041 = _1847;
        _2043 = _1849;
    }
    uint _2049 = _374 + uint(cbMatDynParam._m0[0u].w);
    float _2058 = (((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _218.x) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2049].x;
    float _2062 = (((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _218.y) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2049].y;
    float _2066 = (((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _218.z) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2049].z;
    float _3804 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _3815 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _3826 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _2083 = (((isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0))) * (_2033 + ((isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0))) * _398))) + ((_2039 + ((isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0))) * _1209)) * cbPerFrame._m0[3u].x)) + _2058;
    float _2085 = (_2062 + ((_2041 + ((isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0))) * _1209)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0))) * (_2035 + ((isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0))) * _398)));
    float _2087 = (_2066 + ((_2043 + ((isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0))) * _1209)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0))) * (_2037 + ((isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0))) * _398)));
    float _2088 = isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0));
    float _2089 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
    float _2090 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
    float _2096 = cbMtdParam._m0[2u].x * _2058;
    float _2097 = cbMtdParam._m0[2u].y * _2062;
    float _2098 = cbMtdParam._m0[2u].z * _2066;
    float _3852 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2100 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
    uint _2101 = _372 + 6u;
    float _2109 = _332 / cbSceneParam._m0[86u].x;
    float _2110 = _333 / cbSceneParam._m0[86u].y;
    vec4 _2124 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2109, _2110, (log2((isnan(cbSceneParam._m0[77u].w) ? _253 : (isnan(_253) ? cbSceneParam._m0[77u].w : min(_253, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2126 = _2124.x;
    float _2127 = _2124.y;
    float _2128 = _2124.z;
    float _2129 = _2124.w;
    float _2222;
    float _2224;
    float _2226;
    float _2228;
    if (_253 > cbSceneParam._m0[78u].w)
    {
        float _2184 = isnan(_253) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _253 : min(cbSceneParam._m0[80u].w, _253));
        float _2185 = _2184 / _253;
        float _2196 = _2185 * _304;
        float _2197 = _305 * _2185;
        float _2198 = (-0.0) - _2197;
        float _2200 = _2185 * _306;
        float _2202 = (cbSceneParam._m0[77u].w * _2198) / _2184;
        float _2203 = _2202 + cbSceneParam._m0[79u].w;
        float _2204 = cbSceneParam._m0[79u].w - _2197;
        float _2210 = sqrt(((_2196 * _2196) + (_2197 * _2197)) + (_2200 * _2200));
        float _2213 = (1.0 - (cbSceneParam._m0[77u].w / _2184)) * _2210;
        float _2218 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2220 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2404;
        if (abs((_2198 - _2202) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2404 = ((((_2203 > 0.0) ? exp2(_2218 * _2203) : (2.0 - exp2(_2220 * _2203))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2213;
        }
        else
        {
            float _2348 = 1.0 / cbSceneParam._m0[80u].x;
            float _2349 = isnan(_2204) ? _2203 : (isnan(_2203) ? _2204 : max(_2203, _2204));
            float _2350 = isnan(_2204) ? _2203 : (isnan(_2203) ? _2204 : min(_2203, _2204));
            float _2359 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : min(_2349, 0.0));
            float _2360 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : min(_2350, 0.0));
            _2404 = ((abs(_2210 / _2198) * cbSceneParam._m0[80u].y) * ((((_2359 - _2360) * 2.0) - ((exp2(_2218 * (isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0)))) - exp2(_2218 * (isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0))))) * _2348)) - ((exp2(_2220 * _2359) - exp2(_2220 * _2360)) * _2348))) + (_2213 * cbSceneParam._m0[80u].z);
        }
        vec4 _2406 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2109, _2110, 1.0), 0.0);
        float _2415 = exp2((_2404 * (-1.44269502162933349609375)) * (1.0 - _2406.w));
        float _2416 = log2(_2415);
        float _2432 = log2(_2129);
        _2222 = (exp2(_2432 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2416 * cbSceneParam._m0[78u].x)) * _2406.x) / cbSceneParam._m0[78u].x)) + _2126;
        _2224 = (exp2(_2432 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2416 * cbSceneParam._m0[78u].y)) * _2406.y) / cbSceneParam._m0[78u].y)) + _2127;
        _2226 = (exp2(_2432 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2416 * cbSceneParam._m0[78u].z)) * _2406.z) / cbSceneParam._m0[78u].z)) + _2128;
        _2228 = _2415 * _2129;
    }
    else
    {
        _2222 = _2126;
        _2224 = _2127;
        _2226 = _2128;
        _2228 = _2129;
    }
    bool _2442;
    vec4 _2237;
    vec4 _2260;
    float _2262;
    float _2266;
    float _2267;
    float _2268;
    float _2271;
    float _2274;
    float _2277;
    float _2278;
    bool _2289;
    for (;;)
    {
        _2237 = cbMatDynParam._m0[0u];
        float _2239 = roundEven(_2237.y);
        bool _2240 = _2239 == 3.0;
        float _2242 = log2(_2228);
        float _2246 = exp2(_2242 * cbSceneParam._m0[78u].x);
        float _2247 = exp2(_2242 * cbSceneParam._m0[78u].y);
        float _2248 = exp2(_2242 * cbSceneParam._m0[78u].z);
        float _2249 = _2246 * _2088;
        float _2250 = _2247 * _2089;
        float _2251 = _2248 * _2090;
        float _2258 = _320 + (-0.5);
        _2260 = cbMtdParam._m0[1u];
        _2262 = _2260.y * _2258;
        float _2265 = (_2239 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2266 = _2265 * (_2240 ? _2249 : (_2249 + (cbSceneParam._m0[72u].w * _2222)));
        _2267 = _2265 * (_2240 ? _2250 : (_2250 + (cbSceneParam._m0[72u].w * _2224)));
        _2268 = _2265 * (_2240 ? _2251 : (_2251 + (cbSceneParam._m0[72u].w * _2226)));
        _2271 = ((_2096 * _2100) * _2246) * _2265;
        _2274 = ((_2097 * _2100) * _2247) * _2265;
        _2277 = ((_2098 * _2100) * _2248) * _2265;
        _2278 = _2258 * 0.999000012874603271484375;
        _2289 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2289)
        {
            if ((cbInstanceData._m0[_372 + 7u].x + _2278) < 0.5)
            {
                _2442 = true;
                break;
            }
        }
        uint _2383 = _374 + uint(_2237.w);
        if ((cbInstanceData._m0[_2383].w < 1.0) && ((cbInstanceData._m0[_2383].w + _2278) < 0.5))
        {
            _2442 = true;
            break;
        }
        if ((_2262 + 1.0) < _2260.x)
        {
            _2442 = true;
            break;
        }
        _2442 = false;
        break;
    }
    float _2597;
    if (_2442)
    {
        discard_state = true;
        _2597 = 0.0;
    }
    else
    {
        _2597 = cbInstanceData._m0[_2101].w;
    }
    SV_Target.x = _2266;
    SV_Target.y = _2267;
    SV_Target.z = _2268;
    SV_Target.w = _2597;
    SV_Target_1.x = _2271;
    SV_Target_1.y = _2274;
    SV_Target_1.z = _2277;
    SV_Target_1.w = cbInstanceData._m0[_2101].w;
    discard_exit();
}


