#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_Ground_blend_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D S_Ground_blend_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D S_Ground_blend_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _832;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _174 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _175 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _176 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _182 = inversesqrt(dot(vec3(_174, _175, _176), vec3(_174, _175, _176)));
    float _189 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _196 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _219 = texture(sampler2D(S_Ground_blend_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _225 = _219.x * cbMtdParam._m0[9u].x;
    float _226 = _219.y * cbMtdParam._m0[9u].y;
    float _227 = _219.z * cbMtdParam._m0[9u].z;
    vec4 _239 = texture(sampler2D(S_Ground_blend_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[2u].w));
    float _241 = _239.x;
    vec4 _253 = texture(sampler2D(S_Ground_blend_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _257 = _253.z;
    float _261 = (_253.x * 2.0) + (-1.0);
    float _263 = (_253.y * 2.0) + (-1.0);
    float _264 = dot(vec2(_261, _263), vec2(_261, _263));
    float _2898 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _270 = sqrt(1.0 - (isnan(1.0) ? _2898 : (isnan(_2898) ? 1.0 : min(_2898, 1.0))));
    float _273 = fma(_270, _189 * NORMAL.x, fma(_263, _196 * TANGENT.x, (_182 * _174) * _261));
    float _276 = fma(_270, _189 * NORMAL.y, fma(_263, _196 * TANGENT.y, (_182 * _175) * _261));
    float _279 = fma(_270, _189 * NORMAL.z, fma(_263, _196 * TANGENT.z, (_182 * _176) * _261));
    float _283 = inversesqrt(dot(vec3(_273, _276, _279), vec3(_273, _276, _279)));
    float _284 = _283 * _273;
    float _285 = _283 * _276;
    float _286 = _283 * _279;
    float _2909 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _287 = isnan(1.0) ? _2909 : (isnan(_2909) ? 1.0 : min(_2909, 1.0));
    float _2920 = isnan(0.0) ? _225 : (isnan(_225) ? 0.0 : max(_225, 0.0));
    float _2931 = isnan(0.0) ? _226 : (isnan(_226) ? 0.0 : max(_226, 0.0));
    float _2942 = isnan(0.0) ? _227 : (isnan(_227) ? 0.0 : max(_227, 0.0));
    float _2953 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _291 = isnan(1.0) ? _2953 : (isnan(_2953) ? 1.0 : min(_2953, 1.0));
    float _307 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _350 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _360 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _350);
    float _361 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _350);
    float _362 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _350);
    float _366 = inversesqrt(dot(vec3(_360, _361, _362), vec3(_360, _361, _362)));
    float _367 = _360 * _366;
    float _368 = _361 * _366;
    float _369 = _362 * _366;
    float _375 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _376 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _397 = fma(_286, cbSceneParam._m0[5u].z, fma(_285, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _284));
    float _400 = fma(_286, cbSceneParam._m0[6u].z, fma(_285, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _284));
    float _403 = fma(_286, cbSceneParam._m0[7u].z, fma(_285, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _284));
    uint _416 = uint(roundEven(NORMAL.w)) * 13u;
    uint _419 = (_416 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _425 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2920 : (isnan(_2920) ? 1.0 : min(_2920, 1.0)))) * cbInstanceData._m0[_419].x;
    float _426 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2931 : (isnan(_2931) ? 1.0 : min(_2931, 1.0)))) * cbInstanceData._m0[_419].y;
    float _427 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2942 : (isnan(_2942) ? 1.0 : min(_2942, 1.0)))) * cbInstanceData._m0[_419].z;
    float _2964 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _428 = isnan(1.0) ? _2964 : (isnan(_2964) ? 1.0 : min(_2964, 1.0));
    float _2975 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _429 = isnan(1.0) ? _2975 : (isnan(_2975) ? 1.0 : min(_2975, 1.0));
    float _2986 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _430 = isnan(1.0) ? _2986 : (isnan(_2986) ? 1.0 : min(_2986, 1.0));
    float _431 = 1.0 - _291;
    float _432 = _428 * _431;
    float _433 = _429 * _431;
    float _434 = _430 * _431;
    float _439 = (_428 + (-0.039999999105930328369140625)) * _291;
    float _440 = (_429 + (-0.039999999105930328369140625)) * _291;
    float _441 = (_430 + (-0.039999999105930328369140625)) * _291;
    float _442 = _439 + 0.039999999105930328369140625;
    float _444 = _440 + 0.039999999105930328369140625;
    float _445 = _441 + 0.039999999105930328369140625;
    vec4 _454 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _375, cbSceneParam._m0[86u].y * _376));
    float _457 = _454.x * TEXCOORD_1.w;
    float _458 = dot(vec3(_284, _285, _286), vec3(_367, _368, _369));
    float _461 = _458 * 2.0;
    float _465 = (_461 * _284) - _367;
    float _466 = (_461 * _285) - _368;
    float _467 = (_461 * _286) - _369;
    float _471 = abs(dot(vec3(_367, _368, _369), vec3(_284, _285, _286)));
    float _2997 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _473 = sqrt(_287);
    float _486 = exp2((_473 * 5.0) * log2(1.0 - ((isnan(1.0) ? _2997 : (isnan(_2997) ? 1.0 : min(_2997, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_473 * 3.0));
    float _492 = (1.0 - _486) * ((_473 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _493 = _486 * _473;
    float _521 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _525 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _529 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _831;
    float _833;
    float _834;
    float _835;
    float _836;
    float _837;
    float _838;
    float _839;
    float _840;
    float _841;
    float _842;
    float _843;
    float _844;
    float _845;
    float _846;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _556 = fma(_529, cbModelParam._m0[26u].z, fma(_525, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _521));
        float _560 = fma(_529, cbModelParam._m0[27u].z, fma(_525, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _521));
        float _564 = fma(_529, cbModelParam._m0[28u].z, fma(_525, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _521));
        float _589 = _521 + _284;
        float _590 = _525 + _285;
        float _591 = _529 + _286;
        float _601 = fma(_591, cbModelParam._m0[26u].z, fma(_590, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _589)) - _556;
        float _602 = fma(_591, cbModelParam._m0[27u].z, fma(_590, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _589)) - _560;
        float _603 = fma(_591, cbModelParam._m0[28u].z, fma(_590, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _589)) - _564;
        float _607 = inversesqrt(dot(vec3(_601, _602, _603), vec3(_601, _602, _603)));
        float _620 = ((_607 * _601) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_556 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _621 = ((_607 * _602) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_560 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _622 = ((_607 * _603) / cbModelParam._m0[34u].z) + ((((((_564 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _625 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_620, _621, _622), 0.0);
        vec4 _632 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_620, _621, _622), 0.0);
        vec4 _639 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_620, _621, _622), 0.0);
        vec4 _646 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_620, _621, _622), 0.0);
        float _659 = exp2((_625.w + (-0.5)) * 20.0) * 2.0;
        float _660 = _659 * (_625.x + (-0.5));
        float _661 = _659 * (_625.y + (-0.5));
        float _662 = _659 * (_625.z + (-0.5));
        float _669 = exp2((_632.w + (-0.5)) * 20.0) * 2.0;
        float _670 = _669 * (_632.x + (-0.5));
        float _671 = _669 * (_632.y + (-0.5));
        float _672 = _669 * (_632.z + (-0.5));
        float _679 = exp2((_639.w + (-0.5)) * 20.0) * 2.0;
        float _680 = _679 * (_639.x + (-0.5));
        float _681 = _679 * (_639.y + (-0.5));
        float _682 = _679 * (_639.z + (-0.5));
        float _689 = exp2((_646.w + (-0.5)) * 20.0) * 2.0;
        float _690 = _689 * (_646.x + (-0.5));
        float _691 = _689 * (_646.y + (-0.5));
        float _692 = _689 * (_646.z + (-0.5));
        float _693 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
        float _694 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
        float _695 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
        float _696 = _660 * 0.5;
        float _697 = _670 * 0.5;
        float _698 = _680 * 0.5;
        float _699 = dot(vec3(_696, _697, _698), vec3(_696, _697, _698));
        float _704 = (_699 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_699);
        float _713 = (dot(vec3(_284, _285, _286), vec3(_704 * _696, _704 * _697, _704 * _698)) + 1.0) * 0.5;
        float _3023 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
        float _723 = sqrt(((_697 * _697) + (_696 * _696)) + (_698 * _698)) / (_693 + 9.9999997473787516355514526367188e-06);
        float _3034 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
        float _724 = isnan(1.0) ? _3034 : (isnan(_3034) ? 1.0 : min(_3034, 1.0));
        float _725 = _724 * 2.0;
        float _729 = (1.0 - _724) / (_724 + 1.0);
        float _3045 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
        float _730 = isnan(1.0) ? _3045 : (isnan(_3045) ? 1.0 : min(_3045, 1.0));
        float _739 = ((((1.0 - _730) * (_725 + 2.0)) * exp2(log2(isnan(1.0) ? _3023 : (isnan(_3023) ? 1.0 : min(_3023, 1.0))) * (_725 + 1.0))) + _730) * _693;
        float _740 = _661 * 0.5;
        float _741 = _671 * 0.5;
        float _742 = _681 * 0.5;
        float _743 = dot(vec3(_740, _741, _742), vec3(_740, _741, _742));
        float _748 = (_743 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_743);
        float _756 = (dot(vec3(_284, _285, _286), vec3(_748 * _740, _748 * _741, _748 * _742)) + 1.0) * 0.5;
        float _3056 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
        float _765 = sqrt(((_741 * _741) + (_740 * _740)) + (_742 * _742)) / (_694 + 9.9999997473787516355514526367188e-06);
        float _3067 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
        float _766 = isnan(1.0) ? _3067 : (isnan(_3067) ? 1.0 : min(_3067, 1.0));
        float _767 = _766 * 2.0;
        float _771 = (1.0 - _766) / (_766 + 1.0);
        float _3078 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
        float _772 = isnan(1.0) ? _3078 : (isnan(_3078) ? 1.0 : min(_3078, 1.0));
        float _781 = ((((1.0 - _772) * (_767 + 2.0)) * exp2(log2(isnan(1.0) ? _3056 : (isnan(_3056) ? 1.0 : min(_3056, 1.0))) * (_767 + 1.0))) + _772) * _694;
        float _782 = _662 * 0.5;
        float _783 = _672 * 0.5;
        float _784 = _682 * 0.5;
        float _785 = dot(vec3(_782, _783, _784), vec3(_782, _783, _784));
        float _790 = (_785 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_785);
        float _798 = (dot(vec3(_284, _285, _286), vec3(_790 * _782, _790 * _783, _790 * _784)) + 1.0) * 0.5;
        float _3089 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
        float _807 = sqrt(((_783 * _783) + (_782 * _782)) + (_784 * _784)) / (_695 + 9.9999997473787516355514526367188e-06);
        float _3100 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
        float _808 = isnan(1.0) ? _3100 : (isnan(_3100) ? 1.0 : min(_3100, 1.0));
        float _809 = _808 * 2.0;
        float _813 = (1.0 - _808) / (_808 + 1.0);
        float _3111 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
        float _814 = isnan(1.0) ? _3111 : (isnan(_3111) ? 1.0 : min(_3111, 1.0));
        float _823 = ((((1.0 - _814) * (_809 + 2.0)) * exp2(log2(isnan(1.0) ? _3089 : (isnan(_3089) ? 1.0 : min(_3089, 1.0))) * (_809 + 1.0))) + _814) * _695;
        _831 = _662;
        _833 = _661;
        _834 = _660;
        _835 = _672;
        _836 = _671;
        _837 = _670;
        _838 = _682;
        _839 = _681;
        _840 = _680;
        _841 = _695;
        _842 = _694;
        _843 = _693;
        _844 = cbModelParam._m0[36u].z * (isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0)));
        _845 = cbModelParam._m0[36u].z * (isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0)));
        _846 = cbModelParam._m0[36u].z * (isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0)));
    }
    else
    {
        _831 = _832;
        _833 = _832;
        _834 = _832;
        _835 = _832;
        _836 = _832;
        _837 = _832;
        _838 = _832;
        _839 = _832;
        _840 = _832;
        _841 = _832;
        _842 = _832;
        _843 = _832;
        _844 = 0.0;
        _845 = 0.0;
        _846 = 0.0;
    }
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    float _1151;
    float _1152;
    float _1153;
    float _1154;
    float _1155;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _872 = fma(_529, cbModelParam._m0[30u].z, fma(_525, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _521));
        float _876 = fma(_529, cbModelParam._m0[31u].z, fma(_525, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _521));
        float _880 = fma(_529, cbModelParam._m0[32u].z, fma(_525, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _521));
        float _903 = _521 + _284;
        float _904 = _525 + _285;
        float _905 = _529 + _286;
        float _915 = fma(_905, cbModelParam._m0[30u].z, fma(_904, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _903)) - _872;
        float _916 = fma(_905, cbModelParam._m0[31u].z, fma(_904, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _903)) - _876;
        float _917 = fma(_905, cbModelParam._m0[32u].z, fma(_904, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _903)) - _880;
        float _921 = inversesqrt(dot(vec3(_915, _916, _917), vec3(_915, _916, _917)));
        float _934 = ((_921 * _915) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_872 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _935 = ((_921 * _916) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_876 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _936 = ((_921 * _917) / cbModelParam._m0[35u].z) + ((((((_880 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _938 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_934, _935, _936), 0.0);
        vec4 _945 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_934, _935, _936), 0.0);
        vec4 _952 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_934, _935, _936), 0.0);
        vec4 _959 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_934, _935, _936), 0.0);
        float _971 = exp2((_938.w + (-0.5)) * 20.0) * 2.0;
        float _972 = _971 * (_938.x + (-0.5));
        float _973 = _971 * (_938.y + (-0.5));
        float _974 = _971 * (_938.z + (-0.5));
        float _981 = exp2((_945.w + (-0.5)) * 20.0) * 2.0;
        float _982 = _981 * (_945.x + (-0.5));
        float _983 = _981 * (_945.y + (-0.5));
        float _984 = _981 * (_945.z + (-0.5));
        float _991 = exp2((_952.w + (-0.5)) * 20.0) * 2.0;
        float _992 = _991 * (_952.x + (-0.5));
        float _993 = _991 * (_952.y + (-0.5));
        float _994 = _991 * (_952.z + (-0.5));
        float _1001 = exp2((_959.w + (-0.5)) * 20.0) * 2.0;
        float _1002 = _1001 * (_959.x + (-0.5));
        float _1003 = _1001 * (_959.y + (-0.5));
        float _1004 = _1001 * (_959.z + (-0.5));
        float _1005 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1006 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1007 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1008 = _972 * 0.5;
        float _1009 = _982 * 0.5;
        float _1010 = _992 * 0.5;
        float _1011 = dot(vec3(_1008, _1009, _1010), vec3(_1008, _1009, _1010));
        float _1016 = (_1011 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1011);
        float _1024 = (dot(vec3(_284, _285, _286), vec3(_1016 * _1008, _1016 * _1009, _1016 * _1010)) + 1.0) * 0.5;
        float _3152 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1033 = sqrt(((_1009 * _1009) + (_1008 * _1008)) + (_1010 * _1010)) / (_1005 + 9.9999997473787516355514526367188e-06);
        float _3163 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1034 = isnan(1.0) ? _3163 : (isnan(_3163) ? 1.0 : min(_3163, 1.0));
        float _1035 = _1034 * 2.0;
        float _1039 = (1.0 - _1034) / (_1034 + 1.0);
        float _3174 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1040 = isnan(1.0) ? _3174 : (isnan(_3174) ? 1.0 : min(_3174, 1.0));
        float _1049 = ((((1.0 - _1040) * (_1035 + 2.0)) * exp2(log2(isnan(1.0) ? _3152 : (isnan(_3152) ? 1.0 : min(_3152, 1.0))) * (_1035 + 1.0))) + _1040) * _1005;
        float _1050 = _973 * 0.5;
        float _1051 = _983 * 0.5;
        float _1052 = _993 * 0.5;
        float _1053 = dot(vec3(_1050, _1051, _1052), vec3(_1050, _1051, _1052));
        float _1058 = (_1053 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1053);
        float _1066 = (dot(vec3(_284, _285, _286), vec3(_1058 * _1050, _1058 * _1051, _1058 * _1052)) + 1.0) * 0.5;
        float _3185 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1075 = sqrt(((_1051 * _1051) + (_1050 * _1050)) + (_1052 * _1052)) / (_1006 + 9.9999997473787516355514526367188e-06);
        float _3196 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1076 = isnan(1.0) ? _3196 : (isnan(_3196) ? 1.0 : min(_3196, 1.0));
        float _1077 = _1076 * 2.0;
        float _1081 = (1.0 - _1076) / (_1076 + 1.0);
        float _3207 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1082 = isnan(1.0) ? _3207 : (isnan(_3207) ? 1.0 : min(_3207, 1.0));
        float _1091 = ((((1.0 - _1082) * (_1077 + 2.0)) * exp2(log2(isnan(1.0) ? _3185 : (isnan(_3185) ? 1.0 : min(_3185, 1.0))) * (_1077 + 1.0))) + _1082) * _1006;
        float _1092 = _974 * 0.5;
        float _1093 = _984 * 0.5;
        float _1094 = _994 * 0.5;
        float _1095 = dot(vec3(_1092, _1093, _1094), vec3(_1092, _1093, _1094));
        float _1100 = (_1095 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1095);
        float _1108 = (dot(vec3(_284, _285, _286), vec3(_1100 * _1092, _1100 * _1093, _1100 * _1094)) + 1.0) * 0.5;
        float _3218 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1117 = sqrt(((_1093 * _1093) + (_1092 * _1092)) + (_1094 * _1094)) / (_1007 + 9.9999997473787516355514526367188e-06);
        float _3229 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1118 = isnan(1.0) ? _3229 : (isnan(_3229) ? 1.0 : min(_3229, 1.0));
        float _1119 = _1118 * 2.0;
        float _1123 = (1.0 - _1118) / (_1118 + 1.0);
        float _3240 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1124 = isnan(1.0) ? _3240 : (isnan(_3240) ? 1.0 : min(_3240, 1.0));
        float _1133 = ((((1.0 - _1124) * (_1119 + 2.0)) * exp2(log2(isnan(1.0) ? _3218 : (isnan(_3218) ? 1.0 : min(_3218, 1.0))) * (_1119 + 1.0))) + _1124) * _1007;
        _1141 = _974;
        _1142 = _973;
        _1143 = _972;
        _1144 = _984;
        _1145 = _983;
        _1146 = _982;
        _1147 = _994;
        _1148 = _993;
        _1149 = _992;
        _1150 = _1007;
        _1151 = _1006;
        _1152 = _1005;
        _1153 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0)));
        _1154 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0)));
        _1155 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0)));
    }
    else
    {
        _1141 = _832;
        _1142 = _832;
        _1143 = _832;
        _1144 = _832;
        _1145 = _832;
        _1146 = _832;
        _1147 = _832;
        _1148 = _832;
        _1149 = _832;
        _1150 = _832;
        _1151 = _832;
        _1152 = _832;
        _1153 = 0.0;
        _1154 = 0.0;
        _1155 = 0.0;
    }
    float _1165 = (cbModelParam._m0[1u].x * (_1153 - _844)) + _844;
    float _1166 = (cbModelParam._m0[1u].x * (_1154 - _845)) + _845;
    float _1167 = (cbModelParam._m0[1u].x * (_1155 - _846)) + _846;
    float _1188 = fma(_1167, cbSceneParam._m0[89u].z, fma(_1166, cbSceneParam._m0[89u].y, _1165 * cbSceneParam._m0[89u].x));
    float _1191 = fma(_1167, cbSceneParam._m0[90u].z, fma(_1166, cbSceneParam._m0[90u].y, _1165 * cbSceneParam._m0[90u].x));
    float _1194 = fma(_1167, cbSceneParam._m0[91u].z, fma(_1166, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1165));
    float _1209 = _465 * 0.5;
    float _1210 = _466 * 0.5;
    float _1211 = _467 * 0.5;
    float _1212 = dot(vec4(_1209, _1210, _1211, 1.0), vec4(_1143, _1146, _1149, _1152));
    float _1215 = dot(vec4(_1209, _1210, _1211, 1.0), vec4(_1142, _1145, _1148, _1151));
    float _1218 = dot(vec4(_1209, _1210, _1211, 1.0), vec4(_1141, _1144, _1147, _1150));
    float _1252;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1225 = dot(vec4(_1209, _1210, _1211, 1.0), vec4(_831, _835, _838, _841));
        float _1229 = dot(vec4(_1209, _1210, _1211, 1.0), vec4(_833, _836, _839, _842));
        float _1233 = dot(vec4(_1209, _1210, _1211, 1.0), vec4(_834, _837, _840, _843));
        float _1240 = dot(vec4(cbModelParam._m0[39u]), vec4(_1209, _1210, _1211, 1.0));
        _1252 = dot(vec3(isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0)), isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0)), isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1240) ? 0.0 : (isnan(0.0) ? _1240 : max(0.0, _1240))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1252 = 1.0;
    }
    float _1263;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1254 = dot(vec4(cbModelParam._m0[40u]), vec4(_1209, _1210, _1211, 1.0));
        _1263 = dot(vec3(isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0)), isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0)), isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1254) ? 0.0 : (isnan(0.0) ? _1254 : max(0.0, _1254))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1263 = 1.0;
    }
    float _1267 = (_1263 * cbModelParam._m0[1u].x) + (_1252 * (1.0 - cbModelParam._m0[1u].x));
    float _1277 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _287);
    float _1278 = isnan(_1277) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1277 : min(cbModelParam._m0[25u].z, _1277));
    float _1360;
    float _1362;
    float _1364;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1327 = fma(_529, cbModelParam._m0[13u].z, fma(_525, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _521)) + cbModelParam._m0[13u].w;
        float _1331 = fma(_529, cbModelParam._m0[14u].z, fma(_525, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _521)) + cbModelParam._m0[14u].w;
        float _1335 = fma(_529, cbModelParam._m0[15u].z, fma(_525, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _521)) + cbModelParam._m0[15u].w;
        float _1338 = fma(_467, cbModelParam._m0[13u].z, fma(_466, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _465));
        float _1341 = fma(_467, cbModelParam._m0[14u].z, fma(_466, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _465));
        float _1344 = fma(_467, cbModelParam._m0[15u].z, fma(_466, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _465));
        float _1372;
        if (_1338 > 0.0)
        {
            _1372 = abs((1.0 - _1327) / _1338);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1338 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1327 + 1.0) / _1338);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1372 = frontier_phi_14_12_ladder;
        }
        float _1736;
        if (_1341 > 0.0)
        {
            _1736 = abs((1.0 - _1331) / _1341);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1341 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1331 + 1.0) / _1341);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1736 = frontier_phi_23_19_ladder;
        }
        float _2034;
        if (_1344 > 0.0)
        {
            _2034 = abs((1.0 - _1335) / _1344);
        }
        else
        {
            float frontier_phi_37_30_ladder;
            if (_1344 < 0.0)
            {
                frontier_phi_37_30_ladder = abs((_1335 + 1.0) / _1344);
            }
            else
            {
                frontier_phi_37_30_ladder = 5000.0;
            }
            _2034 = frontier_phi_37_30_ladder;
        }
        float _2036 = isnan(_1736) ? _1372 : (isnan(_1372) ? _1736 : min(_1372, _1736));
        float _2037 = isnan(_2034) ? _2036 : (isnan(_2036) ? _2034 : min(_2036, _2034));
        float _2041 = (_2037 * _1338) + _1327;
        float _2042 = (_2037 * _1341) + _1331;
        float _2043 = (_2037 * _1344) + _1335;
        float _2044 = _2037 * 9.9999997473787516355514526367188e-05;
        float _2045 = (-1.0) - _2044;
        float _2047 = _2044 + 1.0;
        float frontier_phi_13_37_ladder;
        float frontier_phi_13_37_ladder_1;
        float frontier_phi_13_37_ladder_2;
        if ((_2043 > _2047) || ((_2043 < _2045) || ((_2042 > _2047) || ((_2042 < _2045) || ((_2041 < _2045) || (_2041 > _2047))))))
        {
            frontier_phi_13_37_ladder = 0.0;
            frontier_phi_13_37_ladder_1 = 0.0;
            frontier_phi_13_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2169 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2043, cbModelParam._m0[9u].z, fma(_2042, cbModelParam._m0[9u].y, _2041 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2043, cbModelParam._m0[10u].z, fma(_2042, cbModelParam._m0[10u].y, _2041 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2043, cbModelParam._m0[11u].z, fma(_2042, cbModelParam._m0[11u].y, _2041 * cbModelParam._m0[11u].x))), _1278);
            frontier_phi_13_37_ladder = _2169.z * cbModelParam._m0[1u].y;
            frontier_phi_13_37_ladder_1 = _2169.y * cbModelParam._m0[1u].y;
            frontier_phi_13_37_ladder_2 = _2169.x * cbModelParam._m0[1u].y;
        }
        _1360 = frontier_phi_13_37_ladder_2;
        _1362 = frontier_phi_13_37_ladder_1;
        _1364 = frontier_phi_13_37_ladder;
    }
    else
    {
        vec4 _1348 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_465, _466, _467), _1278);
        _1360 = _1348.x * cbModelParam._m0[1u].y;
        _1362 = _1348.y * cbModelParam._m0[1u].y;
        _1364 = _1348.z * cbModelParam._m0[1u].y;
    }
    float _1368 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _287);
    float _1369 = isnan(_1368) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1368 : min(cbModelParam._m0[25u].w, _1368));
    float _1462;
    float _1464;
    float _1466;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1426 = fma(_529, cbModelParam._m0[21u].z, fma(_525, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _521)) + cbModelParam._m0[21u].w;
        float _1430 = fma(_529, cbModelParam._m0[22u].z, fma(_525, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _521)) + cbModelParam._m0[22u].w;
        float _1434 = fma(_529, cbModelParam._m0[23u].z, fma(_525, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _521)) + cbModelParam._m0[23u].w;
        float _1437 = fma(_467, cbModelParam._m0[21u].z, fma(_466, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _465));
        float _1440 = fma(_467, cbModelParam._m0[22u].z, fma(_466, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _465));
        float _1443 = fma(_467, cbModelParam._m0[23u].z, fma(_466, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _465));
        float _1741;
        if (_1437 > 0.0)
        {
            _1741 = abs((1.0 - _1426) / _1437);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1437 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1426 + 1.0) / _1437);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1741 = frontier_phi_25_21_ladder;
        }
        float _2060;
        if (_1440 > 0.0)
        {
            _2060 = abs((1.0 - _1430) / _1440);
        }
        else
        {
            float frontier_phi_39_32_ladder;
            if (_1440 < 0.0)
            {
                frontier_phi_39_32_ladder = abs((_1430 + 1.0) / _1440);
            }
            else
            {
                frontier_phi_39_32_ladder = 5000.0;
            }
            _2060 = frontier_phi_39_32_ladder;
        }
        float _2229;
        if (_1443 > 0.0)
        {
            _2229 = abs((1.0 - _1434) / _1443);
        }
        else
        {
            float frontier_phi_53_48_ladder;
            if (_1443 < 0.0)
            {
                frontier_phi_53_48_ladder = abs((_1434 + 1.0) / _1443);
            }
            else
            {
                frontier_phi_53_48_ladder = 5000.0;
            }
            _2229 = frontier_phi_53_48_ladder;
        }
        float _2231 = isnan(_2060) ? _1741 : (isnan(_1741) ? _2060 : min(_1741, _2060));
        float _2232 = isnan(_2229) ? _2231 : (isnan(_2231) ? _2229 : min(_2231, _2229));
        float _2236 = (_2232 * _1437) + _1426;
        float _2237 = (_2232 * _1440) + _1430;
        float _2238 = (_2232 * _1443) + _1434;
        float _2239 = _2232 * 9.9999997473787516355514526367188e-05;
        float _2240 = (-1.0) - _2239;
        float _2242 = _2239 + 1.0;
        float frontier_phi_22_53_ladder;
        float frontier_phi_22_53_ladder_1;
        float frontier_phi_22_53_ladder_2;
        if ((_2238 > _2242) || ((_2238 < _2240) || ((_2237 > _2242) || ((_2237 < _2240) || ((_2236 < _2240) || (_2236 > _2242))))))
        {
            frontier_phi_22_53_ladder = 0.0;
            frontier_phi_22_53_ladder_1 = 0.0;
            frontier_phi_22_53_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2471 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2238, cbModelParam._m0[17u].z, fma(_2237, cbModelParam._m0[17u].y, _2236 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2238, cbModelParam._m0[18u].z, fma(_2237, cbModelParam._m0[18u].y, _2236 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2238, cbModelParam._m0[19u].z, fma(_2237, cbModelParam._m0[19u].y, _2236 * cbModelParam._m0[19u].x))), _1369);
            frontier_phi_22_53_ladder = _2471.y * cbModelParam._m0[1u].z;
            frontier_phi_22_53_ladder_1 = _2471.z * cbModelParam._m0[1u].z;
            frontier_phi_22_53_ladder_2 = _2471.x * cbModelParam._m0[1u].z;
        }
        _1462 = frontier_phi_22_53_ladder_2;
        _1464 = frontier_phi_22_53_ladder;
        _1466 = frontier_phi_22_53_ladder_1;
    }
    else
    {
        vec4 _1446 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_465, _466, _467), _1369);
        _1462 = _1446.x * cbModelParam._m0[1u].z;
        _1464 = _1446.y * cbModelParam._m0[1u].z;
        _1466 = _1446.z * cbModelParam._m0[1u].z;
    }
    float _1479 = (((_492 * _442) + _493) * _457) * ((cbModelParam._m0[1u].w * (_1462 - _1360)) + _1360);
    float _1481 = (((_492 * _444) + _493) * _457) * ((cbModelParam._m0[1u].w * (_1464 - _1362)) + _1362);
    float _1483 = (((_492 * _445) + _493) * _457) * ((cbModelParam._m0[1u].w * (_1466 - _1364)) + _1364);
    float _1486 = fma(_1483, cbSceneParam._m0[89u].z, fma(_1481, cbSceneParam._m0[89u].y, _1479 * cbSceneParam._m0[89u].x));
    float _1489 = fma(_1483, cbSceneParam._m0[90u].z, fma(_1481, cbSceneParam._m0[90u].y, _1479 * cbSceneParam._m0[90u].x));
    float _1492 = fma(_1483, cbSceneParam._m0[91u].z, fma(_1481, cbSceneParam._m0[91u].y, _1479 * cbSceneParam._m0[91u].x));
    uvec4 _1502 = floatBitsToUint(cbInstanceData._m0[_416 + 5u]);
    uint _1504 = _1502.x * 14u;
    uint _1505 = _1504 + 13u;
    float _1510 = _457 + (-1.0);
    float _1513 = (cbLight._m0[_1505].x * _1510) + 1.0;
    float _1514 = (cbLight._m0[_1505].y * _1510) + 1.0;
    uint _1515 = _1504 + 5u;
    float _1521 = isnan(1.0) ? _1514 : (isnan(_1514) ? 1.0 : min(_1514, 1.0));
    uint _1525 = _1504 + 4u;
    float _1532 = isnan(1.0) ? _1513 : (isnan(_1513) ? 1.0 : min(_1513, 1.0));
    uint _1536 = _1504 | 1u;
    float _1547 = dot(vec3(cbLight._m0[_1504].xyz), vec3(_284, _285, _286));
    float _1550 = dot(vec3(cbLight._m0[_1536].xyz), vec3(_284, _285, _286));
    float _3376 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
    float _3387 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
    float _1555 = (isnan(1.0) ? _3376 : (isnan(_3376) ? 1.0 : min(_3376, 1.0))) * 0.3183098733425140380859375;
    float _1557 = (isnan(1.0) ? _3387 : (isnan(_3387) ? 1.0 : min(_3387, 1.0))) * 0.3183098733425140380859375;
    float _1564 = ((cbLight._m0[_1515].x * _1521) * _1557) + ((cbLight._m0[_1525].x * _1532) * _1555);
    float _1565 = ((_1521 * cbLight._m0[_1515].y) * _1557) + ((_1532 * cbLight._m0[_1525].y) * _1555);
    float _1566 = ((_1521 * cbLight._m0[_1515].z) * _1557) + ((_1532 * cbLight._m0[_1525].z) * _1555);
    uint _1568 = _1504 + 8u;
    float _1581 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1504].w)) * _287) * 0.949999988079071044921875);
    float _1582 = _1581 * _1581;
    float _1583 = cbLight._m0[_1504].x + _367;
    float _1584 = cbLight._m0[_1504].y + _368;
    float _1585 = cbLight._m0[_1504].z + _369;
    float _1589 = inversesqrt(dot(vec3(_1583, _1584, _1585), vec3(_1583, _1584, _1585)));
    float _1590 = _1589 * _1583;
    float _1591 = _1589 * _1584;
    float _1592 = _1589 * _1585;
    float _1593 = dot(vec3(_284, _285, _286), vec3(cbLight._m0[_1504].xyz));
    float _3398 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
    float _1596 = isnan(1.0) ? _3398 : (isnan(_3398) ? 1.0 : min(_3398, 1.0));
    float _3409 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _1597 = isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0));
    float _1598 = dot(vec3(_284, _285, _286), vec3(_1590, _1591, _1592));
    float _3420 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
    float _1601 = isnan(1.0) ? _3420 : (isnan(_3420) ? 1.0 : min(_3420, 1.0));
    float _1602 = dot(vec3(cbLight._m0[_1504].xyz), vec3(_1590, _1591, _1592));
    float _3431 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
    float _1606 = _1582 * _1582;
    float _1610 = ((_1601 * _1601) * (_1606 + (-1.0))) + 1.0;
    float _1618 = exp2(log2(1.0 - (isnan(1.0) ? _3431 : (isnan(_3431) ? 1.0 : min(_3431, 1.0)))) * 5.0);
    float _1619 = 0.959999978542327880859375 - _439;
    float _1621 = 0.959999978542327880859375 - _440;
    float _1622 = 0.959999978542327880859375 - _441;
    float _1629 = 1.0 - _1582;
    float _1640 = (0.5 / (((_1597 * ((_1596 * _1629) + _1582)) + 9.9999999392252902907785028219223e-09) + (((_1597 * _1629) + _1582) * _1596))) * _1596;
    float _3442 = isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0));
    float _1642 = (isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0))) * (_1606 / ((_1610 * _1610) * 3.141590118408203125));
    uint _1653 = _1504 + 9u;
    float _1664 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1536].w)) * _287) * 0.949999988079071044921875);
    float _1665 = _1664 * _1664;
    float _1666 = cbLight._m0[_1536].x + _367;
    float _1667 = cbLight._m0[_1536].y + _368;
    float _1668 = cbLight._m0[_1536].z + _369;
    float _1672 = inversesqrt(dot(vec3(_1666, _1667, _1668), vec3(_1666, _1667, _1668)));
    float _1673 = _1672 * _1666;
    float _1674 = _1672 * _1667;
    float _1675 = _1672 * _1668;
    float _1676 = dot(vec3(_284, _285, _286), vec3(cbLight._m0[_1536].xyz));
    float _3453 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
    float _1679 = isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0));
    float _1680 = dot(vec3(_284, _285, _286), vec3(_1673, _1674, _1675));
    float _3464 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
    float _1683 = isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0));
    float _1684 = dot(vec3(cbLight._m0[_1536].xyz), vec3(_1673, _1674, _1675));
    float _3475 = isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0));
    float _1688 = _1665 * _1665;
    float _1692 = ((_1683 * _1683) * (_1688 + (-1.0))) + 1.0;
    float _1699 = exp2(log2(1.0 - (isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0)))) * 5.0);
    float _1706 = 1.0 - _1665;
    float _1716 = (0.5 / (((_1597 * ((_1679 * _1706) + _1665)) + 9.9999999392252902907785028219223e-09) + (((_1597 * _1706) + _1665) * _1679))) * _1679;
    float _3486 = isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0));
    float _1718 = (isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0))) * (_1688 / ((_1692 * _1692) * 3.141590118408203125));
    float _1728 = (((((_1699 * _1619) + _442) * cbLight._m0[_1653].x) * _1718) * _1521) + (((((_1618 * _1619) + _442) * cbLight._m0[_1568].x) * _1642) * _1532);
    float _1729 = (((((_1699 * _1621) + _444) * cbLight._m0[_1653].y) * _1718) * _1521) + (((((_1618 * _1621) + _444) * cbLight._m0[_1568].y) * _1642) * _1532);
    float _1730 = (((((_1699 * _1622) + _445) * cbLight._m0[_1653].z) * _1718) * _1521) + (((((_1618 * _1622) + _445) * cbLight._m0[_1568].z) * _1642) * _1532);
    float _1845;
    float _1847;
    float _1849;
    float _1851;
    float _1853;
    float _1855;
    if (_1502.y == 0u)
    {
        float _1785 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1786 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1785;
        float _1787 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1785;
        float _1788 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1785;
        uvec4 _1800 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1801 = _1800.x;
        uint _1812 = uint((float(_1800.y) * floor(float(uint(cbSceneParam._m0[85u].y * _376) / _1801))) + floor(float(uint(cbSceneParam._m0[85u].x * _375) / _1801)));
        float _1822 = (log2(_1788 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1823 = isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0));
        uint _1826 = uint(isnan(14.0) ? _1823 : (isnan(_1823) ? 14.0 : min(_1823, 14.0)));
        uvec4 _1831 = texelFetch(g_lightClusterGridBuffer, int(((_1826 << 2u) + (_1812 << 6u)) >> 2u));
        uint _1832 = _1831.x;
        uint _1833 = _1800.z;
        float _1920;
        float _1922;
        float _1924;
        float _1926;
        float _1928;
        float _1930;
        if (((((1u << ((_1833 >> 4u) & 15u)) + 4294967295u) & _1832) == 0u) || ((_1833 & 240u) == 0u))
        {
            _1920 = 0.0;
            _1922 = 0.0;
            _1924 = 0.0;
            _1926 = 0.0;
            _1928 = 0.0;
            _1930 = 0.0;
        }
        else
        {
            float _1921;
            float _1923;
            float _1925;
            float _1927;
            float _1929;
            float _1931;
            float _2097 = 0.0;
            float _2098 = 0.0;
            float _2099 = 0.0;
            float _2100 = 0.0;
            float _2101 = 0.0;
            float _2102 = 0.0;
            uint _2103 = 0u;
            uint _2112;
            bool _2113;
            for (;;)
            {
                _2112 = texelFetch(g_lightClassification, int((((_1826 << 5u) + (_1812 << 9u)) + (_2103 << 2u)) >> 2u)).x;
                _2113 = _2112 == 0u;
                float frontier_phi_50_pred;
                float frontier_phi_50_pred_1;
                float frontier_phi_50_pred_2;
                float frontier_phi_50_pred_3;
                float frontier_phi_50_pred_4;
                float frontier_phi_50_pred_5;
                if (_2113)
                {
                    frontier_phi_50_pred = _2100;
                    frontier_phi_50_pred_1 = _2102;
                    frontier_phi_50_pred_2 = _2101;
                    frontier_phi_50_pred_3 = _2099;
                    frontier_phi_50_pred_4 = _2098;
                    frontier_phi_50_pred_5 = _2097;
                }
                else
                {
                    float _2272;
                    float _2273;
                    float _2274;
                    float _2275;
                    float _2276;
                    float _2277;
                    uint _2278;
                    _2272 = _2097;
                    _2273 = _2098;
                    _2274 = _2099;
                    _2275 = _2100;
                    _2276 = _2101;
                    _2277 = _2102;
                    _2278 = _2112;
                    float _2178;
                    float _2179;
                    float _2180;
                    float _2181;
                    float _2182;
                    float _2183;
                    for (;;)
                    {
                        uint _2282 = uint(findLSB(_2278)) + (_2103 << 5u);
                        uint _2279 = (_2278 + 4294967295u) & _2278;
                        uint _2284 = _2282 * 48u;
                        vec4 _2298 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2284)).x, texelFetch(g_PointLightRenderingBuffer, int(_2284 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2284 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2284 + 3u)).x));
                        uint _2304 = (_2282 * 48u) + 4u;
                        vec4 _2317 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2304)).x, texelFetch(g_PointLightRenderingBuffer, int(_2304 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2304 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2304 + 3u)).x));
                        uint _2323 = (_2282 * 48u) + 8u;
                        vec3 _2334 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2323)).x, texelFetch(g_PointLightRenderingBuffer, int(_2323 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2323 + 2u)).x));
                        float _2338 = _2298.x - _1786;
                        float _2339 = _2298.y - _1787;
                        float _2340 = _2298.z - _1788;
                        float _2341 = dot(vec3(_2338, _2339, _2340), vec3(_2338, _2339, _2340));
                        float _2344 = inversesqrt(_2341);
                        float _2345 = _2344 * _2338;
                        float _2346 = _2344 * _2339;
                        float _2347 = _2344 * _2340;
                        float _2348 = dot(vec3(_397, _400, _403), vec3(_2345, _2346, _2347));
                        float _2353 = 1.0 - (_2341 * _2298.w);
                        float _3507 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
                        float _2354 = isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0));
                        float _2355 = sqrt(_2341) * _2317.w;
                        float _2358 = 1.39999997615814208984375 / (_2355 + 1.39999997615814208984375);
                        float _2359 = _2358 * _2358;
                        float _2362 = ((1.0 - _2359) * _2348) + _2359;
                        float _2365 = _2355 * _2355;
                        float _2369 = ((isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0))) * _2354) / ((_2365 * 0.699999988079071044921875) + 1.0);
                        float _2373 = (-0.0) - _1786;
                        float _2374 = (-0.0) - _1787;
                        float _2375 = (-0.0) - _1788;
                        float _2379 = inversesqrt(dot(vec3(_2373, _2374, _2375), vec3(_2373, _2374, _2375)));
                        float _2380 = _2379 * _2373;
                        float _2381 = _2379 * _2374;
                        float _2382 = _2379 * _2375;
                        float _2390 = exp2(log2(1.0 / ((_2365 * 3.5) + 5.0)) * 0.25);
                        float _2391 = 1.0 - _473;
                        float _2398 = sqrt(1.0 - ((1.0 - (_2391 * _2391)) * (1.0 - (_2390 * _2390))));
                        float _2399 = _2398 * _2398;
                        float _2400 = _2399 * _2399;
                        float _2401 = _2380 + _2345;
                        float _2402 = _2381 + _2346;
                        float _2403 = _2382 + _2347;
                        float _2407 = inversesqrt(dot(vec3(_2401, _2402, _2403), vec3(_2401, _2402, _2403)));
                        float _2411 = dot(vec3(_397, _400, _403), vec3(_2380, _2381, _2382));
                        float _3523 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0));
                        float _2414 = isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0));
                        float _2415 = dot(vec3(_397, _400, _403), vec3(_2407 * _2401, _2407 * _2402, _2407 * _2403));
                        float _3534 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
                        float _2418 = isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0));
                        float _2422 = ((_2418 * _2418) * (_2400 + (-1.0))) + 1.0;
                        float _2423 = _2358 * _2399;
                        float _2424 = _2423 * _2423;
                        float _2427 = ((1.0 - _2424) * _2348) + _2424;
                        float _3545 = isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0));
                        float _2428 = isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0));
                        float _2429 = 1.0 - _2399;
                        float _2439 = (0.5 / (((_2428 * ((_2414 * _2429) + _2399)) + 9.9999999392252902907785028219223e-09) + (((_2428 * _2429) + _2399) * _2414))) * _2428;
                        float _3556 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
                        float _2450 = (((_2400 * 3.1415927410125732421875) * (isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0)))) / ((_2422 * _2422) * ((_2365 * 2.1991131305694580078125) + 3.141590118408203125))) * _2354;
                        _2181 = (_2369 * _2317.x) + _2275;
                        _2182 = (_2369 * _2317.y) + _2276;
                        _2183 = (_2369 * _2317.z) + _2277;
                        _2178 = (_2450 * _2334.x) + _2272;
                        _2179 = (_2450 * _2334.y) + _2273;
                        _2180 = (_2450 * _2334.z) + _2274;
                        if (_2279 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2272 = _2178;
                            _2273 = _2179;
                            _2274 = _2180;
                            _2275 = _2181;
                            _2276 = _2182;
                            _2277 = _2183;
                            _2278 = _2279;
                        }
                    }
                    frontier_phi_50_pred = _2181;
                    frontier_phi_50_pred_1 = _2183;
                    frontier_phi_50_pred_2 = _2182;
                    frontier_phi_50_pred_3 = _2180;
                    frontier_phi_50_pred_4 = _2179;
                    frontier_phi_50_pred_5 = _2178;
                }
                _1927 = frontier_phi_50_pred;
                _1931 = frontier_phi_50_pred_1;
                _1929 = frontier_phi_50_pred_2;
                _1925 = frontier_phi_50_pred_3;
                _1923 = frontier_phi_50_pred_4;
                _1921 = frontier_phi_50_pred_5;
                uint _2104 = _2103 + 1u;
                if (_2104 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2097 = _1921;
                    _2098 = _1923;
                    _2099 = _1925;
                    _2100 = _1927;
                    _2101 = _1929;
                    _2102 = _1931;
                    _2103 = _2104;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1920 = _1921;
            _1922 = _1923;
            _1924 = _1925;
            _1926 = _1927;
            _1928 = _1929;
            _1930 = _1931;
        }
        uvec4 _1934 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1935 = _1934.z;
        uint _1937 = (_1935 >> 8u) & 15u;
        float _2065;
        float _2067;
        float _2069;
        float _2071;
        float _2073;
        float _2075;
        if (((4294967295u << _1937) & _1832) == 0u)
        {
            _2065 = _1920;
            _2067 = _1922;
            _2069 = _1924;
            _2071 = _1926;
            _2073 = _1928;
            _2075 = _1930;
        }
        else
        {
            float _2090 = inversesqrt(dot(vec3(_1786, _1787, _1788), vec3(_1786, _1787, _1788)));
            float _2091 = _2090 * _1786;
            float _2092 = _2090 * _1787;
            float _2093 = _2090 * _1788;
            float frontier_phi_41_42_ladder;
            float frontier_phi_41_42_ladder_1;
            float frontier_phi_41_42_ladder_2;
            float frontier_phi_41_42_ladder_3;
            float frontier_phi_41_42_ladder_4;
            float frontier_phi_41_42_ladder_5;
            if (_1937 < ((_1935 >> 12u) & 15u))
            {
                float _2066;
                float _2068;
                float _2070;
                float _2072;
                float _2074;
                float _2076;
                float _2255 = _1920;
                float _2256 = _1922;
                float _2257 = _1924;
                float _2258 = _1926;
                float _2259 = _1928;
                float _2260 = _1930;
                uint _2261 = _1937;
                uint _2270;
                bool _2271;
                for (;;)
                {
                    _2270 = texelFetch(g_lightClassification, int((((_1826 << 5u) + (_1812 << 9u)) + (_2261 << 2u)) >> 2u)).x;
                    _2271 = _2270 == 0u;
                    float frontier_phi_59_pred;
                    float frontier_phi_59_pred_1;
                    float frontier_phi_59_pred_2;
                    float frontier_phi_59_pred_3;
                    float frontier_phi_59_pred_4;
                    float frontier_phi_59_pred_5;
                    if (_2271)
                    {
                        frontier_phi_59_pred = _2260;
                        frontier_phi_59_pred_1 = _2259;
                        frontier_phi_59_pred_2 = _2258;
                        frontier_phi_59_pred_3 = _2257;
                        frontier_phi_59_pred_4 = _2256;
                        frontier_phi_59_pred_5 = _2255;
                    }
                    else
                    {
                        float _2476;
                        float _2477;
                        float _2478;
                        float _2479;
                        float _2480;
                        float _2481;
                        float _2772;
                        float _2773;
                        float _2774;
                        float _2775;
                        float _2776;
                        float _2777;
                        float _2489 = _2255;
                        float _2490 = _2256;
                        float _2491 = _2257;
                        float _2492 = _2258;
                        float _2493 = _2259;
                        float _2494 = _2260;
                        uint _2495 = _2270;
                        uint _2496;
                        vec4 _2521;
                        float _2522;
                        vec4 _2537;
                        vec3 _2549;
                        vec4 _2565;
                        vec4 _2581;
                        float _2628;
                        bool _2629;
                        for (;;)
                        {
                            uint _2506 = ((_2261 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2495));
                            _2496 = (_2495 + 4294967295u) & _2495;
                            uint _2508 = _2506 * 40u;
                            _2521 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2508)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2508 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2508 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2508 + 3u)).x));
                            _2522 = _2521.w;
                            uint _2524 = (_2506 * 40u) + 4u;
                            _2537 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2524)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2524 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2524 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2524 + 3u)).x));
                            uint _2539 = (_2506 * 40u) + 8u;
                            _2549 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2539)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2539 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2539 + 2u)).x));
                            uint _2552 = (_2506 * 40u) + 16u;
                            _2565 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2552)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2552 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2552 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2552 + 3u)).x));
                            uint _2568 = (_2506 * 40u) + 20u;
                            _2581 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2568)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2568 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2568 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2568 + 3u)).x));
                            uint _2584 = (_2506 * 40u) + 24u;
                            vec4 _2597 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2584)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2584 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2584 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2584 + 3u)).x));
                            uint _2603 = (_2506 * 40u) + 28u;
                            vec4 _2616 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2603)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2603 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2603 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2603 + 3u)).x));
                            _2628 = fma(_1788, _2616.z, fma(_1787, _2616.y, _2616.x * _1786)) + _2616.w;
                            _2629 = !((fma(_1788, _2597.z, fma(_1787, _2597.y, _2597.x * _1786)) + _2597.w) <= 0.0);
                            float frontier_phi_65_pred;
                            float frontier_phi_65_pred_1;
                            float frontier_phi_65_pred_2;
                            float frontier_phi_65_pred_3;
                            float frontier_phi_65_pred_4;
                            float frontier_phi_65_pred_5;
                            if (_2629)
                            {
                                float _2656 = _2521.x - _1786;
                                float _2657 = _2521.y - _1787;
                                float _2658 = _2521.z - _1788;
                                float _2659 = dot(vec3(_2656, _2657, _2658), vec3(_2656, _2657, _2658));
                                float _2662 = inversesqrt(_2659);
                                float _2663 = _2662 * _2656;
                                float _2664 = _2662 * _2657;
                                float _2665 = _2662 * _2658;
                                float _2669 = 1.0 - (_2659 / (_2522 * _2522));
                                float _3567 = isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0));
                                float _2670 = isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0));
                                float _2674 = sqrt(_2659) * _2537.w;
                                float _2676 = 1.39999997615814208984375 / (_2674 + 1.39999997615814208984375);
                                float _2677 = _2676 * _2676;
                                float _2680 = ((1.0 - _2677) * dot(vec3(_2663, _2664, _2665), vec3(_397, _400, _403))) + _2677;
                                float _2683 = _2674 * _2674;
                                float _2687 = (fma(_1788, _2565.z, fma(_1787, _2565.y, _2565.x * _1786)) + _2565.w) / _2628;
                                float _2688 = (fma(_1788, _2581.z, fma(_1787, _2581.y, _2581.x * _1786)) + _2581.w) / _2628;
                                float _2692 = 1.0 - dot(vec2(_2687, _2688), vec2(_2687, _2688));
                                float _3583 = isnan(0.0) ? _2692 : (isnan(_2692) ? 0.0 : max(_2692, 0.0));
                                float _2693 = isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0));
                                float _2694 = _2693 * (((isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : max(_2680, 0.0))) * _2670) / ((_2683 * 0.699999988079071044921875) + 1.0));
                                float _2706 = exp2(log2(1.0 / ((_2683 * 3.5) + 5.0)) * 0.25);
                                float _2707 = 1.0 - _473;
                                float _2714 = sqrt(1.0 - ((1.0 - (_2707 * _2707)) * (1.0 - (_2706 * _2706))));
                                float _2715 = _2714 * _2714;
                                float _2716 = _2715 * _2715;
                                float _2717 = _2663 - _2091;
                                float _2718 = _2664 - _2092;
                                float _2719 = _2665 - _2093;
                                float _2723 = inversesqrt(dot(vec3(_2717, _2718, _2719), vec3(_2717, _2718, _2719)));
                                float _2727 = dot(vec3(_397, _400, _403), vec3((-0.0) - _2091, (-0.0) - _2092, (-0.0) - _2093));
                                float _3594 = isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : max(_2727, 0.0));
                                float _2730 = isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0));
                                float _2731 = dot(vec3(_397, _400, _403), vec3(_2723 * _2717, _2723 * _2718, _2723 * _2719));
                                float _3605 = isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : max(_2731, 0.0));
                                float _2734 = isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0));
                                float _2738 = ((_2734 * _2734) * (_2716 + (-1.0))) + 1.0;
                                float _2739 = _2676 * _2715;
                                float _2740 = _2739 * _2739;
                                float _2746 = ((1.0 - _2740) * dot(vec3(_397, _400, _403), vec3(_2663, _2664, _2665))) + _2740;
                                float _3616 = isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : max(_2746, 0.0));
                                float _2747 = isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0));
                                float _2748 = 1.0 - _2715;
                                float _2758 = (0.5 / (((_2747 * ((_2730 * _2748) + _2715)) + 9.9999999392252902907785028219223e-09) + (((_2747 * _2748) + _2715) * _2730))) * _2747;
                                float _3627 = isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : max(_2758, 0.0));
                                float _2768 = (_2693 * _2670) * (((_2716 * 3.1415927410125732421875) * (isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0)))) / ((_2738 * _2738) * ((_2683 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_65_pred = _2694 * _2537.z;
                                frontier_phi_65_pred_1 = _2694 * _2537.y;
                                frontier_phi_65_pred_2 = _2694 * _2537.x;
                                frontier_phi_65_pred_3 = _2768 * _2549.z;
                                frontier_phi_65_pred_4 = _2768 * _2549.y;
                                frontier_phi_65_pred_5 = _2768 * _2549.x;
                            }
                            else
                            {
                                frontier_phi_65_pred = 0.0;
                                frontier_phi_65_pred_1 = 0.0;
                                frontier_phi_65_pred_2 = 0.0;
                                frontier_phi_65_pred_3 = 0.0;
                                frontier_phi_65_pred_4 = 0.0;
                                frontier_phi_65_pred_5 = 0.0;
                            }
                            _2777 = frontier_phi_65_pred;
                            _2776 = frontier_phi_65_pred_1;
                            _2775 = frontier_phi_65_pred_2;
                            _2774 = frontier_phi_65_pred_3;
                            _2773 = frontier_phi_65_pred_4;
                            _2772 = frontier_phi_65_pred_5;
                            _2479 = _2775 + _2492;
                            _2480 = _2776 + _2493;
                            _2481 = _2777 + _2494;
                            _2476 = _2772 + _2489;
                            _2477 = _2773 + _2490;
                            _2478 = _2774 + _2491;
                            if (_2496 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2489 = _2476;
                                _2490 = _2477;
                                _2491 = _2478;
                                _2492 = _2479;
                                _2493 = _2480;
                                _2494 = _2481;
                                _2495 = _2496;
                                continue;
                            }
                        }
                        frontier_phi_59_pred = _2481;
                        frontier_phi_59_pred_1 = _2480;
                        frontier_phi_59_pred_2 = _2479;
                        frontier_phi_59_pred_3 = _2478;
                        frontier_phi_59_pred_4 = _2477;
                        frontier_phi_59_pred_5 = _2476;
                    }
                    _2076 = frontier_phi_59_pred;
                    _2074 = frontier_phi_59_pred_1;
                    _2072 = frontier_phi_59_pred_2;
                    _2070 = frontier_phi_59_pred_3;
                    _2068 = frontier_phi_59_pred_4;
                    _2066 = frontier_phi_59_pred_5;
                    uint _2262 = _2261 + 1u;
                    if (_2262 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2255 = _2066;
                        _2256 = _2068;
                        _2257 = _2070;
                        _2258 = _2072;
                        _2259 = _2074;
                        _2260 = _2076;
                        _2261 = _2262;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_41_42_ladder = _2072;
                frontier_phi_41_42_ladder_1 = _2076;
                frontier_phi_41_42_ladder_2 = _2074;
                frontier_phi_41_42_ladder_3 = _2070;
                frontier_phi_41_42_ladder_4 = _2068;
                frontier_phi_41_42_ladder_5 = _2066;
            }
            else
            {
                frontier_phi_41_42_ladder = _1926;
                frontier_phi_41_42_ladder_1 = _1930;
                frontier_phi_41_42_ladder_2 = _1928;
                frontier_phi_41_42_ladder_3 = _1924;
                frontier_phi_41_42_ladder_4 = _1922;
                frontier_phi_41_42_ladder_5 = _1920;
            }
            _2065 = frontier_phi_41_42_ladder_5;
            _2067 = frontier_phi_41_42_ladder_4;
            _2069 = frontier_phi_41_42_ladder_3;
            _2071 = frontier_phi_41_42_ladder;
            _2073 = frontier_phi_41_42_ladder_2;
            _2075 = frontier_phi_41_42_ladder_1;
        }
        float _2080 = isnan(1.0) ? _457 : (isnan(_457) ? 1.0 : min(_457, 1.0));
        _1845 = (_2080 * _2071) + _1564;
        _1847 = (_2080 * _2073) + _1565;
        _1849 = (_2080 * _2075) + _1566;
        _1851 = ((_2065 * _442) * _2080) + _1728;
        _1853 = ((_2067 * _444) * _2080) + _1729;
        _1855 = ((_2069 * _445) * _2080) + _1730;
    }
    else
    {
        _1845 = _1564;
        _1847 = _1565;
        _1849 = _1566;
        _1851 = _1728;
        _1853 = _1729;
        _1855 = _1730;
    }
    float _3643 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _3654 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _3665 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    uint _1875 = _416 + 6u;
    float _1883 = _375 / cbSceneParam._m0[86u].x;
    float _1884 = _376 / cbSceneParam._m0[86u].y;
    vec4 _1898 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1883, _1884, (log2((isnan(cbSceneParam._m0[77u].w) ? _307 : (isnan(_307) ? cbSceneParam._m0[77u].w : min(_307, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1900 = _1898.x;
    float _1901 = _1898.y;
    float _1902 = _1898.z;
    float _1903 = _1898.w;
    float _1984;
    float _1986;
    float _1988;
    float _1990;
    if (_307 > cbSceneParam._m0[78u].w)
    {
        float _1945 = isnan(_307) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _307 : min(cbSceneParam._m0[80u].w, _307));
        float _1946 = _1945 / _307;
        float _1957 = _1946 * _360;
        float _1958 = _361 * _1946;
        float _1959 = (-0.0) - _1958;
        float _1961 = _1946 * _362;
        float _1963 = (cbSceneParam._m0[77u].w * _1959) / _1945;
        float _1964 = _1963 + cbSceneParam._m0[79u].w;
        float _1965 = cbSceneParam._m0[79u].w - _1958;
        float _1971 = sqrt(((_1957 * _1957) + (_1958 * _1958)) + (_1961 * _1961));
        float _1974 = (1.0 - (cbSceneParam._m0[77u].w / _1945)) * _1971;
        float _1980 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1982 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2191;
        if (abs((_1959 - _1963) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2191 = ((((_1964 > 0.0) ? exp2(_1980 * _1964) : (2.0 - exp2(_1982 * _1964))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1974;
        }
        else
        {
            float _2126 = 1.0 / cbSceneParam._m0[80u].x;
            float _2127 = isnan(_1965) ? _1964 : (isnan(_1964) ? _1965 : max(_1964, _1965));
            float _2128 = isnan(_1965) ? _1964 : (isnan(_1964) ? _1965 : min(_1964, _1965));
            float _2137 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : min(_2127, 0.0));
            float _2138 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : min(_2128, 0.0));
            _2191 = ((abs(_1971 / _1959) * cbSceneParam._m0[80u].y) * ((((_2137 - _2138) * 2.0) - ((exp2(_1980 * (isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0)))) - exp2(_1980 * (isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0))))) * _2126)) - ((exp2(_1982 * _2137) - exp2(_1982 * _2138)) * _2126))) + (_1974 * cbSceneParam._m0[80u].z);
        }
        vec4 _2193 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1883, _1884, 1.0), 0.0);
        float _2202 = exp2((_2191 * (-1.44269502162933349609375)) * (1.0 - _2193.w));
        float _2203 = log2(_2202);
        float _2219 = log2(_1903);
        _1984 = (exp2(_2219 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2203 * cbSceneParam._m0[78u].x)) * _2193.x) / cbSceneParam._m0[78u].x)) + _1900;
        _1986 = (exp2(_2219 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2203 * cbSceneParam._m0[78u].y)) * _2193.y) / cbSceneParam._m0[78u].y)) + _1901;
        _1988 = (exp2(_2219 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2203 * cbSceneParam._m0[78u].z)) * _2193.z) / cbSceneParam._m0[78u].z)) + _1902;
        _1990 = _2202 * _1903;
    }
    else
    {
        _1984 = _1900;
        _1986 = _1901;
        _1988 = _1902;
        _1990 = _1903;
    }
    float _2002 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2003 = _2002 == 3.0;
    float _2004 = log2(_1990);
    float _2011 = exp2(_2004 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0))) * (_1845 + ((isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0))) * _457))) + ((_1851 + ((isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0))) * _1267)) * cbPerFrame._m0[3u].x));
    float _2012 = exp2(_2004 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0))) * (_1847 + ((isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0))) * _457))) + ((_1853 + ((isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0))) * _1267)) * cbPerFrame._m0[3u].x));
    float _2013 = exp2(_2004 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0))) * (_1849 + ((isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0))) * _457))) + ((_1855 + ((isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0))) * _1267)) * cbPerFrame._m0[3u].x));
    float _2022 = (_2002 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2022 * (_2003 ? _2011 : (_2011 + (cbSceneParam._m0[72u].w * _1984)));
    SV_Target.y = _2022 * (_2003 ? _2012 : (_2012 + (cbSceneParam._m0[72u].w * _1986)));
    SV_Target.z = _2022 * (_2003 ? _2013 : (_2013 + (cbSceneParam._m0[72u].w * _1988)));
    SV_Target.w = cbInstanceData._m0[_1875].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1875].w;
}


