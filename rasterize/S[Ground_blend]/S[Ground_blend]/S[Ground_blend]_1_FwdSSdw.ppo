#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_Ground_blend_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D S_Ground_blend_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _799;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _174 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _175 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _176 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _182 = inversesqrt(dot(vec3(_174, _175, _176), vec3(_174, _175, _176)));
    float _189 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _196 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _219 = texture(sampler2D(S_Ground_blend_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _225 = _219.x * cbMtdParam._m0[9u].x;
    float _226 = _219.y * cbMtdParam._m0[9u].y;
    float _227 = _219.z * cbMtdParam._m0[9u].z;
    vec4 _239 = texture(sampler2D(S_Ground_blend_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _243 = _239.z;
    float _247 = (_239.x * 2.0) + (-1.0);
    float _249 = (_239.y * 2.0) + (-1.0);
    float _250 = dot(vec2(_247, _249), vec2(_247, _249));
    float _2879 = isnan(0.0) ? _250 : (isnan(_250) ? 0.0 : max(_250, 0.0));
    float _256 = sqrt(1.0 - (isnan(1.0) ? _2879 : (isnan(_2879) ? 1.0 : min(_2879, 1.0))));
    float _259 = fma(_256, _189 * NORMAL.x, fma(_249, _196 * TANGENT.x, (_182 * _174) * _247));
    float _262 = fma(_256, _189 * NORMAL.y, fma(_249, _196 * TANGENT.y, (_182 * _175) * _247));
    float _265 = fma(_256, _189 * NORMAL.z, fma(_249, _196 * TANGENT.z, (_182 * _176) * _247));
    float _269 = inversesqrt(dot(vec3(_259, _262, _265), vec3(_259, _262, _265)));
    float _270 = _269 * _259;
    float _271 = _269 * _262;
    float _272 = _269 * _265;
    float _2890 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _273 = isnan(1.0) ? _2890 : (isnan(_2890) ? 1.0 : min(_2890, 1.0));
    float _2901 = isnan(0.0) ? _225 : (isnan(_225) ? 0.0 : max(_225, 0.0));
    float _2912 = isnan(0.0) ? _226 : (isnan(_226) ? 0.0 : max(_226, 0.0));
    float _2923 = isnan(0.0) ? _227 : (isnan(_227) ? 0.0 : max(_227, 0.0));
    float _292 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _335 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _345 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _335);
    float _346 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _335);
    float _347 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _335);
    float _351 = inversesqrt(dot(vec3(_345, _346, _347), vec3(_345, _346, _347)));
    float _352 = _345 * _351;
    float _353 = _346 * _351;
    float _354 = _347 * _351;
    float _360 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _361 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _382 = fma(_272, cbSceneParam._m0[5u].z, fma(_271, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _270));
    float _385 = fma(_272, cbSceneParam._m0[6u].z, fma(_271, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _270));
    float _388 = fma(_272, cbSceneParam._m0[7u].z, fma(_271, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _270));
    uint _401 = uint(roundEven(NORMAL.w)) * 13u;
    uint _404 = (_401 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _410 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2901 : (isnan(_2901) ? 1.0 : min(_2901, 1.0)))) * cbInstanceData._m0[_404].x;
    float _411 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2912 : (isnan(_2912) ? 1.0 : min(_2912, 1.0)))) * cbInstanceData._m0[_404].y;
    float _412 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2923 : (isnan(_2923) ? 1.0 : min(_2923, 1.0)))) * cbInstanceData._m0[_404].z;
    float _2934 = isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : max(_410, 0.0));
    float _413 = isnan(1.0) ? _2934 : (isnan(_2934) ? 1.0 : min(_2934, 1.0));
    float _2945 = isnan(0.0) ? _411 : (isnan(_411) ? 0.0 : max(_411, 0.0));
    float _414 = isnan(1.0) ? _2945 : (isnan(_2945) ? 1.0 : min(_2945, 1.0));
    float _2956 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
    float _415 = isnan(1.0) ? _2956 : (isnan(_2956) ? 1.0 : min(_2956, 1.0));
    vec4 _424 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _360, cbSceneParam._m0[86u].y * _361));
    float _427 = _424.x * TEXCOORD_1.w;
    float _428 = dot(vec3(_270, _271, _272), vec3(_352, _353, _354));
    float _431 = _428 * 2.0;
    float _435 = (_431 * _270) - _352;
    float _436 = (_431 * _271) - _353;
    float _437 = (_431 * _272) - _354;
    float _441 = abs(dot(vec3(_352, _353, _354), vec3(_270, _271, _272)));
    float _2967 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _443 = sqrt(_273);
    float _456 = exp2((_443 * 5.0) * log2(1.0 - ((isnan(1.0) ? _2967 : (isnan(_2967) ? 1.0 : min(_2967, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_443 * 3.0));
    float _488 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _492 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _496 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _798;
    float _800;
    float _801;
    float _802;
    float _803;
    float _804;
    float _805;
    float _806;
    float _807;
    float _808;
    float _809;
    float _810;
    float _811;
    float _812;
    float _813;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _523 = fma(_496, cbModelParam._m0[26u].z, fma(_492, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _488));
        float _527 = fma(_496, cbModelParam._m0[27u].z, fma(_492, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _488));
        float _531 = fma(_496, cbModelParam._m0[28u].z, fma(_492, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _488));
        float _556 = _488 + _270;
        float _557 = _492 + _271;
        float _558 = _496 + _272;
        float _568 = fma(_558, cbModelParam._m0[26u].z, fma(_557, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _556)) - _523;
        float _569 = fma(_558, cbModelParam._m0[27u].z, fma(_557, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _556)) - _527;
        float _570 = fma(_558, cbModelParam._m0[28u].z, fma(_557, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _556)) - _531;
        float _574 = inversesqrt(dot(vec3(_568, _569, _570), vec3(_568, _569, _570)));
        float _587 = ((_574 * _568) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_523 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _588 = ((_574 * _569) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_527 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _589 = ((_574 * _570) / cbModelParam._m0[34u].z) + ((((((_531 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _592 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_587, _588, _589), 0.0);
        vec4 _599 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_587, _588, _589), 0.0);
        vec4 _606 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_587, _588, _589), 0.0);
        vec4 _613 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_587, _588, _589), 0.0);
        float _626 = exp2((_592.w + (-0.5)) * 20.0) * 2.0;
        float _627 = _626 * (_592.x + (-0.5));
        float _628 = _626 * (_592.y + (-0.5));
        float _629 = _626 * (_592.z + (-0.5));
        float _636 = exp2((_599.w + (-0.5)) * 20.0) * 2.0;
        float _637 = _636 * (_599.x + (-0.5));
        float _638 = _636 * (_599.y + (-0.5));
        float _639 = _636 * (_599.z + (-0.5));
        float _646 = exp2((_606.w + (-0.5)) * 20.0) * 2.0;
        float _647 = _646 * (_606.x + (-0.5));
        float _648 = _646 * (_606.y + (-0.5));
        float _649 = _646 * (_606.z + (-0.5));
        float _656 = exp2((_613.w + (-0.5)) * 20.0) * 2.0;
        float _657 = _656 * (_613.x + (-0.5));
        float _658 = _656 * (_613.y + (-0.5));
        float _659 = _656 * (_613.z + (-0.5));
        float _660 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
        float _661 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
        float _662 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
        float _663 = _627 * 0.5;
        float _664 = _637 * 0.5;
        float _665 = _647 * 0.5;
        float _666 = dot(vec3(_663, _664, _665), vec3(_663, _664, _665));
        float _671 = (_666 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_666);
        float _680 = (dot(vec3(_270, _271, _272), vec3(_671 * _663, _671 * _664, _671 * _665)) + 1.0) * 0.5;
        float _2993 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
        float _690 = sqrt(((_664 * _664) + (_663 * _663)) + (_665 * _665)) / (_660 + 9.9999997473787516355514526367188e-06);
        float _3004 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
        float _691 = isnan(1.0) ? _3004 : (isnan(_3004) ? 1.0 : min(_3004, 1.0));
        float _692 = _691 * 2.0;
        float _696 = (1.0 - _691) / (_691 + 1.0);
        float _3015 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
        float _697 = isnan(1.0) ? _3015 : (isnan(_3015) ? 1.0 : min(_3015, 1.0));
        float _706 = ((((1.0 - _697) * (_692 + 2.0)) * exp2(log2(isnan(1.0) ? _2993 : (isnan(_2993) ? 1.0 : min(_2993, 1.0))) * (_692 + 1.0))) + _697) * _660;
        float _707 = _628 * 0.5;
        float _708 = _638 * 0.5;
        float _709 = _648 * 0.5;
        float _710 = dot(vec3(_707, _708, _709), vec3(_707, _708, _709));
        float _715 = (_710 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_710);
        float _723 = (dot(vec3(_270, _271, _272), vec3(_715 * _707, _715 * _708, _715 * _709)) + 1.0) * 0.5;
        float _3026 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
        float _732 = sqrt(((_708 * _708) + (_707 * _707)) + (_709 * _709)) / (_661 + 9.9999997473787516355514526367188e-06);
        float _3037 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
        float _733 = isnan(1.0) ? _3037 : (isnan(_3037) ? 1.0 : min(_3037, 1.0));
        float _734 = _733 * 2.0;
        float _738 = (1.0 - _733) / (_733 + 1.0);
        float _3048 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
        float _739 = isnan(1.0) ? _3048 : (isnan(_3048) ? 1.0 : min(_3048, 1.0));
        float _748 = ((((1.0 - _739) * (_734 + 2.0)) * exp2(log2(isnan(1.0) ? _3026 : (isnan(_3026) ? 1.0 : min(_3026, 1.0))) * (_734 + 1.0))) + _739) * _661;
        float _749 = _629 * 0.5;
        float _750 = _639 * 0.5;
        float _751 = _649 * 0.5;
        float _752 = dot(vec3(_749, _750, _751), vec3(_749, _750, _751));
        float _757 = (_752 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_752);
        float _765 = (dot(vec3(_270, _271, _272), vec3(_757 * _749, _757 * _750, _757 * _751)) + 1.0) * 0.5;
        float _3059 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
        float _774 = sqrt(((_750 * _750) + (_749 * _749)) + (_751 * _751)) / (_662 + 9.9999997473787516355514526367188e-06);
        float _3070 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
        float _775 = isnan(1.0) ? _3070 : (isnan(_3070) ? 1.0 : min(_3070, 1.0));
        float _776 = _775 * 2.0;
        float _780 = (1.0 - _775) / (_775 + 1.0);
        float _3081 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
        float _781 = isnan(1.0) ? _3081 : (isnan(_3081) ? 1.0 : min(_3081, 1.0));
        float _790 = ((((1.0 - _781) * (_776 + 2.0)) * exp2(log2(isnan(1.0) ? _3059 : (isnan(_3059) ? 1.0 : min(_3059, 1.0))) * (_776 + 1.0))) + _781) * _662;
        _798 = _629;
        _800 = _628;
        _801 = _627;
        _802 = _639;
        _803 = _638;
        _804 = _637;
        _805 = _649;
        _806 = _648;
        _807 = _647;
        _808 = _662;
        _809 = _661;
        _810 = _660;
        _811 = cbModelParam._m0[36u].z * (isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0)));
        _812 = cbModelParam._m0[36u].z * (isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0)));
        _813 = cbModelParam._m0[36u].z * (isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0)));
    }
    else
    {
        _798 = _799;
        _800 = _799;
        _801 = _799;
        _802 = _799;
        _803 = _799;
        _804 = _799;
        _805 = _799;
        _806 = _799;
        _807 = _799;
        _808 = _799;
        _809 = _799;
        _810 = _799;
        _811 = 0.0;
        _812 = 0.0;
        _813 = 0.0;
    }
    float _1108;
    float _1109;
    float _1110;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _839 = fma(_496, cbModelParam._m0[30u].z, fma(_492, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _488));
        float _843 = fma(_496, cbModelParam._m0[31u].z, fma(_492, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _488));
        float _847 = fma(_496, cbModelParam._m0[32u].z, fma(_492, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _488));
        float _870 = _488 + _270;
        float _871 = _492 + _271;
        float _872 = _496 + _272;
        float _882 = fma(_872, cbModelParam._m0[30u].z, fma(_871, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _870)) - _839;
        float _883 = fma(_872, cbModelParam._m0[31u].z, fma(_871, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _870)) - _843;
        float _884 = fma(_872, cbModelParam._m0[32u].z, fma(_871, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _870)) - _847;
        float _888 = inversesqrt(dot(vec3(_882, _883, _884), vec3(_882, _883, _884)));
        float _901 = ((_888 * _882) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_839 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _902 = ((_888 * _883) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_843 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _903 = ((_888 * _884) / cbModelParam._m0[35u].z) + ((((((_847 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _905 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_901, _902, _903), 0.0);
        vec4 _912 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_901, _902, _903), 0.0);
        vec4 _919 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_901, _902, _903), 0.0);
        vec4 _926 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_901, _902, _903), 0.0);
        float _938 = exp2((_905.w + (-0.5)) * 20.0) * 2.0;
        float _939 = _938 * (_905.x + (-0.5));
        float _940 = _938 * (_905.y + (-0.5));
        float _941 = _938 * (_905.z + (-0.5));
        float _948 = exp2((_912.w + (-0.5)) * 20.0) * 2.0;
        float _949 = _948 * (_912.x + (-0.5));
        float _950 = _948 * (_912.y + (-0.5));
        float _951 = _948 * (_912.z + (-0.5));
        float _958 = exp2((_919.w + (-0.5)) * 20.0) * 2.0;
        float _959 = _958 * (_919.x + (-0.5));
        float _960 = _958 * (_919.y + (-0.5));
        float _961 = _958 * (_919.z + (-0.5));
        float _968 = exp2((_926.w + (-0.5)) * 20.0) * 2.0;
        float _969 = _968 * (_926.x + (-0.5));
        float _970 = _968 * (_926.y + (-0.5));
        float _971 = _968 * (_926.z + (-0.5));
        float _972 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _973 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _974 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _975 = _939 * 0.5;
        float _976 = _949 * 0.5;
        float _977 = _959 * 0.5;
        float _978 = dot(vec3(_975, _976, _977), vec3(_975, _976, _977));
        float _983 = (_978 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_978);
        float _991 = (dot(vec3(_270, _271, _272), vec3(_983 * _975, _983 * _976, _983 * _977)) + 1.0) * 0.5;
        float _3122 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _1000 = sqrt(((_976 * _976) + (_975 * _975)) + (_977 * _977)) / (_972 + 9.9999997473787516355514526367188e-06);
        float _3133 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1001 = isnan(1.0) ? _3133 : (isnan(_3133) ? 1.0 : min(_3133, 1.0));
        float _1002 = _1001 * 2.0;
        float _1006 = (1.0 - _1001) / (_1001 + 1.0);
        float _3144 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1007 = isnan(1.0) ? _3144 : (isnan(_3144) ? 1.0 : min(_3144, 1.0));
        float _1016 = ((((1.0 - _1007) * (_1002 + 2.0)) * exp2(log2(isnan(1.0) ? _3122 : (isnan(_3122) ? 1.0 : min(_3122, 1.0))) * (_1002 + 1.0))) + _1007) * _972;
        float _1017 = _940 * 0.5;
        float _1018 = _950 * 0.5;
        float _1019 = _960 * 0.5;
        float _1020 = dot(vec3(_1017, _1018, _1019), vec3(_1017, _1018, _1019));
        float _1025 = (_1020 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1020);
        float _1033 = (dot(vec3(_270, _271, _272), vec3(_1025 * _1017, _1025 * _1018, _1025 * _1019)) + 1.0) * 0.5;
        float _3155 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1042 = sqrt(((_1018 * _1018) + (_1017 * _1017)) + (_1019 * _1019)) / (_973 + 9.9999997473787516355514526367188e-06);
        float _3166 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1043 = isnan(1.0) ? _3166 : (isnan(_3166) ? 1.0 : min(_3166, 1.0));
        float _1044 = _1043 * 2.0;
        float _1048 = (1.0 - _1043) / (_1043 + 1.0);
        float _3177 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1049 = isnan(1.0) ? _3177 : (isnan(_3177) ? 1.0 : min(_3177, 1.0));
        float _1058 = ((((1.0 - _1049) * (_1044 + 2.0)) * exp2(log2(isnan(1.0) ? _3155 : (isnan(_3155) ? 1.0 : min(_3155, 1.0))) * (_1044 + 1.0))) + _1049) * _973;
        float _1059 = _941 * 0.5;
        float _1060 = _951 * 0.5;
        float _1061 = _961 * 0.5;
        float _1062 = dot(vec3(_1059, _1060, _1061), vec3(_1059, _1060, _1061));
        float _1067 = (_1062 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1062);
        float _1075 = (dot(vec3(_270, _271, _272), vec3(_1067 * _1059, _1067 * _1060, _1067 * _1061)) + 1.0) * 0.5;
        float _3188 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1084 = sqrt(((_1060 * _1060) + (_1059 * _1059)) + (_1061 * _1061)) / (_974 + 9.9999997473787516355514526367188e-06);
        float _3199 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1085 = isnan(1.0) ? _3199 : (isnan(_3199) ? 1.0 : min(_3199, 1.0));
        float _1086 = _1085 * 2.0;
        float _1090 = (1.0 - _1085) / (_1085 + 1.0);
        float _3210 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1091 = isnan(1.0) ? _3210 : (isnan(_3210) ? 1.0 : min(_3210, 1.0));
        float _1100 = ((((1.0 - _1091) * (_1086 + 2.0)) * exp2(log2(isnan(1.0) ? _3188 : (isnan(_3188) ? 1.0 : min(_3188, 1.0))) * (_1086 + 1.0))) + _1091) * _974;
        _1108 = _941;
        _1109 = _940;
        _1110 = _939;
        _1111 = _951;
        _1112 = _950;
        _1113 = _949;
        _1114 = _961;
        _1115 = _960;
        _1116 = _959;
        _1117 = _974;
        _1118 = _973;
        _1119 = _972;
        _1120 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0)));
        _1121 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0)));
        _1122 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0)));
    }
    else
    {
        _1108 = _799;
        _1109 = _799;
        _1110 = _799;
        _1111 = _799;
        _1112 = _799;
        _1113 = _799;
        _1114 = _799;
        _1115 = _799;
        _1116 = _799;
        _1117 = _799;
        _1118 = _799;
        _1119 = _799;
        _1120 = 0.0;
        _1121 = 0.0;
        _1122 = 0.0;
    }
    float _1132 = (cbModelParam._m0[1u].x * (_1120 - _811)) + _811;
    float _1133 = (cbModelParam._m0[1u].x * (_1121 - _812)) + _812;
    float _1134 = (cbModelParam._m0[1u].x * (_1122 - _813)) + _813;
    float _1155 = fma(_1134, cbSceneParam._m0[89u].z, fma(_1133, cbSceneParam._m0[89u].y, _1132 * cbSceneParam._m0[89u].x));
    float _1158 = fma(_1134, cbSceneParam._m0[90u].z, fma(_1133, cbSceneParam._m0[90u].y, _1132 * cbSceneParam._m0[90u].x));
    float _1161 = fma(_1134, cbSceneParam._m0[91u].z, fma(_1133, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1132));
    float _1176 = _435 * 0.5;
    float _1177 = _436 * 0.5;
    float _1178 = _437 * 0.5;
    float _1179 = dot(vec4(_1176, _1177, _1178, 1.0), vec4(_1110, _1113, _1116, _1119));
    float _1182 = dot(vec4(_1176, _1177, _1178, 1.0), vec4(_1109, _1112, _1115, _1118));
    float _1185 = dot(vec4(_1176, _1177, _1178, 1.0), vec4(_1108, _1111, _1114, _1117));
    float _1219;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1192 = dot(vec4(_1176, _1177, _1178, 1.0), vec4(_798, _802, _805, _808));
        float _1196 = dot(vec4(_1176, _1177, _1178, 1.0), vec4(_800, _803, _806, _809));
        float _1200 = dot(vec4(_1176, _1177, _1178, 1.0), vec4(_801, _804, _807, _810));
        float _1207 = dot(vec4(cbModelParam._m0[39u]), vec4(_1176, _1177, _1178, 1.0));
        _1219 = dot(vec3(isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0)), isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0)), isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1207) ? 0.0 : (isnan(0.0) ? _1207 : max(0.0, _1207))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1219 = 1.0;
    }
    float _1230;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1221 = dot(vec4(cbModelParam._m0[40u]), vec4(_1176, _1177, _1178, 1.0));
        _1230 = dot(vec3(isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0)), isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0)), isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1221) ? 0.0 : (isnan(0.0) ? _1221 : max(0.0, _1221))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1230 = 1.0;
    }
    float _1234 = (_1230 * cbModelParam._m0[1u].x) + (_1219 * (1.0 - cbModelParam._m0[1u].x));
    float _1244 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _273);
    float _1245 = isnan(_1244) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1244 : min(cbModelParam._m0[25u].z, _1244));
    float _1327;
    float _1329;
    float _1331;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1294 = fma(_496, cbModelParam._m0[13u].z, fma(_492, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _488)) + cbModelParam._m0[13u].w;
        float _1298 = fma(_496, cbModelParam._m0[14u].z, fma(_492, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _488)) + cbModelParam._m0[14u].w;
        float _1302 = fma(_496, cbModelParam._m0[15u].z, fma(_492, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _488)) + cbModelParam._m0[15u].w;
        float _1305 = fma(_437, cbModelParam._m0[13u].z, fma(_436, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _435));
        float _1308 = fma(_437, cbModelParam._m0[14u].z, fma(_436, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _435));
        float _1311 = fma(_437, cbModelParam._m0[15u].z, fma(_436, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _435));
        float _1339;
        if (_1305 > 0.0)
        {
            _1339 = abs((1.0 - _1294) / _1305);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1305 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1294 + 1.0) / _1305);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1339 = frontier_phi_14_12_ladder;
        }
        float _1717;
        if (_1308 > 0.0)
        {
            _1717 = abs((1.0 - _1298) / _1308);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1308 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1298 + 1.0) / _1308);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1717 = frontier_phi_23_19_ladder;
        }
        float _2015;
        if (_1311 > 0.0)
        {
            _2015 = abs((1.0 - _1302) / _1311);
        }
        else
        {
            float frontier_phi_37_30_ladder;
            if (_1311 < 0.0)
            {
                frontier_phi_37_30_ladder = abs((_1302 + 1.0) / _1311);
            }
            else
            {
                frontier_phi_37_30_ladder = 5000.0;
            }
            _2015 = frontier_phi_37_30_ladder;
        }
        float _2017 = isnan(_1717) ? _1339 : (isnan(_1339) ? _1717 : min(_1339, _1717));
        float _2018 = isnan(_2015) ? _2017 : (isnan(_2017) ? _2015 : min(_2017, _2015));
        float _2022 = (_2018 * _1305) + _1294;
        float _2023 = (_2018 * _1308) + _1298;
        float _2024 = (_2018 * _1311) + _1302;
        float _2025 = _2018 * 9.9999997473787516355514526367188e-05;
        float _2026 = (-1.0) - _2025;
        float _2028 = _2025 + 1.0;
        float frontier_phi_13_37_ladder;
        float frontier_phi_13_37_ladder_1;
        float frontier_phi_13_37_ladder_2;
        if ((_2024 > _2028) || ((_2024 < _2026) || ((_2023 > _2028) || ((_2023 < _2026) || ((_2022 < _2026) || (_2022 > _2028))))))
        {
            frontier_phi_13_37_ladder = 0.0;
            frontier_phi_13_37_ladder_1 = 0.0;
            frontier_phi_13_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2150 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2024, cbModelParam._m0[9u].z, fma(_2023, cbModelParam._m0[9u].y, _2022 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2024, cbModelParam._m0[10u].z, fma(_2023, cbModelParam._m0[10u].y, _2022 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2024, cbModelParam._m0[11u].z, fma(_2023, cbModelParam._m0[11u].y, _2022 * cbModelParam._m0[11u].x))), _1245);
            frontier_phi_13_37_ladder = _2150.z * cbModelParam._m0[1u].y;
            frontier_phi_13_37_ladder_1 = _2150.y * cbModelParam._m0[1u].y;
            frontier_phi_13_37_ladder_2 = _2150.x * cbModelParam._m0[1u].y;
        }
        _1327 = frontier_phi_13_37_ladder_2;
        _1329 = frontier_phi_13_37_ladder_1;
        _1331 = frontier_phi_13_37_ladder;
    }
    else
    {
        vec4 _1315 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_435, _436, _437), _1245);
        _1327 = _1315.x * cbModelParam._m0[1u].y;
        _1329 = _1315.y * cbModelParam._m0[1u].y;
        _1331 = _1315.z * cbModelParam._m0[1u].y;
    }
    float _1335 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _273);
    float _1336 = isnan(_1335) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1335 : min(cbModelParam._m0[25u].w, _1335));
    float _1429;
    float _1431;
    float _1433;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1393 = fma(_496, cbModelParam._m0[21u].z, fma(_492, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _488)) + cbModelParam._m0[21u].w;
        float _1397 = fma(_496, cbModelParam._m0[22u].z, fma(_492, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _488)) + cbModelParam._m0[22u].w;
        float _1401 = fma(_496, cbModelParam._m0[23u].z, fma(_492, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _488)) + cbModelParam._m0[23u].w;
        float _1404 = fma(_437, cbModelParam._m0[21u].z, fma(_436, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _435));
        float _1407 = fma(_437, cbModelParam._m0[22u].z, fma(_436, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _435));
        float _1410 = fma(_437, cbModelParam._m0[23u].z, fma(_436, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _435));
        float _1722;
        if (_1404 > 0.0)
        {
            _1722 = abs((1.0 - _1393) / _1404);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1404 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1393 + 1.0) / _1404);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1722 = frontier_phi_25_21_ladder;
        }
        float _2041;
        if (_1407 > 0.0)
        {
            _2041 = abs((1.0 - _1397) / _1407);
        }
        else
        {
            float frontier_phi_39_32_ladder;
            if (_1407 < 0.0)
            {
                frontier_phi_39_32_ladder = abs((_1397 + 1.0) / _1407);
            }
            else
            {
                frontier_phi_39_32_ladder = 5000.0;
            }
            _2041 = frontier_phi_39_32_ladder;
        }
        float _2210;
        if (_1410 > 0.0)
        {
            _2210 = abs((1.0 - _1401) / _1410);
        }
        else
        {
            float frontier_phi_53_48_ladder;
            if (_1410 < 0.0)
            {
                frontier_phi_53_48_ladder = abs((_1401 + 1.0) / _1410);
            }
            else
            {
                frontier_phi_53_48_ladder = 5000.0;
            }
            _2210 = frontier_phi_53_48_ladder;
        }
        float _2212 = isnan(_2041) ? _1722 : (isnan(_1722) ? _2041 : min(_1722, _2041));
        float _2213 = isnan(_2210) ? _2212 : (isnan(_2212) ? _2210 : min(_2212, _2210));
        float _2217 = (_2213 * _1404) + _1393;
        float _2218 = (_2213 * _1407) + _1397;
        float _2219 = (_2213 * _1410) + _1401;
        float _2220 = _2213 * 9.9999997473787516355514526367188e-05;
        float _2221 = (-1.0) - _2220;
        float _2223 = _2220 + 1.0;
        float frontier_phi_22_53_ladder;
        float frontier_phi_22_53_ladder_1;
        float frontier_phi_22_53_ladder_2;
        if ((_2219 > _2223) || ((_2219 < _2221) || ((_2218 > _2223) || ((_2218 < _2221) || ((_2217 < _2221) || (_2217 > _2223))))))
        {
            frontier_phi_22_53_ladder = 0.0;
            frontier_phi_22_53_ladder_1 = 0.0;
            frontier_phi_22_53_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2452 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2219, cbModelParam._m0[17u].z, fma(_2218, cbModelParam._m0[17u].y, _2217 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2219, cbModelParam._m0[18u].z, fma(_2218, cbModelParam._m0[18u].y, _2217 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2219, cbModelParam._m0[19u].z, fma(_2218, cbModelParam._m0[19u].y, _2217 * cbModelParam._m0[19u].x))), _1336);
            frontier_phi_22_53_ladder = _2452.y * cbModelParam._m0[1u].z;
            frontier_phi_22_53_ladder_1 = _2452.z * cbModelParam._m0[1u].z;
            frontier_phi_22_53_ladder_2 = _2452.x * cbModelParam._m0[1u].z;
        }
        _1429 = frontier_phi_22_53_ladder_2;
        _1431 = frontier_phi_22_53_ladder;
        _1433 = frontier_phi_22_53_ladder_1;
    }
    else
    {
        vec4 _1413 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_435, _436, _437), _1336);
        _1429 = _1413.x * cbModelParam._m0[1u].z;
        _1431 = _1413.y * cbModelParam._m0[1u].z;
        _1433 = _1413.z * cbModelParam._m0[1u].z;
    }
    float _1445 = ((((1.0 - _456) * ((_443 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_456 * _443)) * _427;
    float _1446 = _1445 * ((cbModelParam._m0[1u].w * (_1429 - _1327)) + _1327);
    float _1447 = _1445 * ((cbModelParam._m0[1u].w * (_1431 - _1329)) + _1329);
    float _1448 = _1445 * ((cbModelParam._m0[1u].w * (_1433 - _1331)) + _1331);
    float _1451 = fma(_1448, cbSceneParam._m0[89u].z, fma(_1447, cbSceneParam._m0[89u].y, _1446 * cbSceneParam._m0[89u].x));
    float _1454 = fma(_1448, cbSceneParam._m0[90u].z, fma(_1447, cbSceneParam._m0[90u].y, _1446 * cbSceneParam._m0[90u].x));
    float _1457 = fma(_1448, cbSceneParam._m0[91u].z, fma(_1447, cbSceneParam._m0[91u].y, _1446 * cbSceneParam._m0[91u].x));
    vec4 _1465 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_360, _361));
    float _1467 = _1465.w;
    float _1479 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1467);
    float _1480 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1467);
    float _1481 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1467);
    float _3336 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
    float _1482 = isnan(1.0) ? _3336 : (isnan(_3336) ? 1.0 : min(_3336, 1.0));
    float _3347 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
    float _1483 = isnan(1.0) ? _3347 : (isnan(_3347) ? 1.0 : min(_3347, 1.0));
    float _3358 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
    float _1484 = isnan(1.0) ? _3358 : (isnan(_3358) ? 1.0 : min(_3358, 1.0));
    uvec4 _1488 = floatBitsToUint(cbInstanceData._m0[_401 + 5u]);
    uint _1490 = _1488.x * 14u;
    uint _1491 = _1490 + 13u;
    float _1496 = _427 + (-1.0);
    float _1499 = (cbLight._m0[_1491].x * _1496) + 1.0;
    float _1500 = (cbLight._m0[_1491].y * _1496) + 1.0;
    uint _1501 = _1490 + 5u;
    float _1507 = isnan(1.0) ? _1500 : (isnan(_1500) ? 1.0 : min(_1500, 1.0));
    uint _1511 = _1490 + 4u;
    float _1521 = isnan(1.0) ? _1499 : (isnan(_1499) ? 1.0 : min(_1499, 1.0));
    uint _1525 = _1490 | 1u;
    float _1536 = dot(vec3(cbLight._m0[_1490].xyz), vec3(_270, _271, _272));
    float _1539 = dot(vec3(cbLight._m0[_1525].xyz), vec3(_270, _271, _272));
    float _3379 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
    float _3390 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
    float _1544 = (isnan(1.0) ? _3379 : (isnan(_3379) ? 1.0 : min(_3379, 1.0))) * 0.3183098733425140380859375;
    float _1546 = (isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0))) * 0.3183098733425140380859375;
    float _1553 = ((cbLight._m0[_1501].x * _1507) * _1546) + (((cbLight._m0[_1511].x * _1482) * _1521) * _1544);
    float _1554 = ((_1507 * cbLight._m0[_1501].y) * _1546) + (((cbLight._m0[_1511].y * _1483) * _1521) * _1544);
    float _1555 = ((_1507 * cbLight._m0[_1501].z) * _1546) + (((cbLight._m0[_1511].z * _1484) * _1521) * _1544);
    uint _1557 = _1490 + 8u;
    float _1570 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1490].w)) * _273) * 0.949999988079071044921875);
    float _1571 = _1570 * _1570;
    float _1572 = cbLight._m0[_1490].x + _352;
    float _1573 = cbLight._m0[_1490].y + _353;
    float _1574 = cbLight._m0[_1490].z + _354;
    float _1578 = inversesqrt(dot(vec3(_1572, _1573, _1574), vec3(_1572, _1573, _1574)));
    float _1579 = _1578 * _1572;
    float _1580 = _1578 * _1573;
    float _1581 = _1578 * _1574;
    float _1582 = dot(vec3(_270, _271, _272), vec3(cbLight._m0[_1490].xyz));
    float _3401 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
    float _1585 = isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0));
    float _3412 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _1586 = isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0));
    float _1587 = dot(vec3(_270, _271, _272), vec3(_1579, _1580, _1581));
    float _3423 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
    float _1590 = isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0));
    float _1591 = dot(vec3(cbLight._m0[_1490].xyz), vec3(_1579, _1580, _1581));
    float _3434 = isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0));
    float _1595 = _1571 * _1571;
    float _1599 = ((_1590 * _1590) * (_1595 + (-1.0))) + 1.0;
    float _1610 = (exp2(log2(1.0 - (isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1611 = 1.0 - _1571;
    float _1622 = (0.5 / (((_1586 * ((_1585 * _1611) + _1571)) + 9.9999999392252902907785028219223e-09) + (((_1586 * _1611) + _1571) * _1585))) * _1585;
    float _3445 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
    float _1624 = (isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0))) * (_1595 / ((_1599 * _1599) * 3.141590118408203125));
    uint _1638 = _1490 + 9u;
    float _1649 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1525].w)) * _273) * 0.949999988079071044921875);
    float _1650 = _1649 * _1649;
    float _1651 = cbLight._m0[_1525].x + _352;
    float _1652 = cbLight._m0[_1525].y + _353;
    float _1653 = cbLight._m0[_1525].z + _354;
    float _1657 = inversesqrt(dot(vec3(_1651, _1652, _1653), vec3(_1651, _1652, _1653)));
    float _1658 = _1657 * _1651;
    float _1659 = _1657 * _1652;
    float _1660 = _1657 * _1653;
    float _1661 = dot(vec3(_270, _271, _272), vec3(cbLight._m0[_1525].xyz));
    float _3456 = isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0));
    float _1664 = isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0));
    float _1665 = dot(vec3(_270, _271, _272), vec3(_1658, _1659, _1660));
    float _3467 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
    float _1668 = isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0));
    float _1669 = dot(vec3(cbLight._m0[_1525].xyz), vec3(_1658, _1659, _1660));
    float _3478 = isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0));
    float _1673 = _1650 * _1650;
    float _1677 = ((_1668 * _1668) * (_1673 + (-1.0))) + 1.0;
    float _1686 = (exp2(log2(1.0 - (isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1687 = 1.0 - _1650;
    float _1697 = (0.5 / (((_1586 * ((_1664 * _1687) + _1650)) + 9.9999999392252902907785028219223e-09) + (((_1586 * _1687) + _1650) * _1664))) * _1664;
    float _3489 = isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0));
    float _1699 = (isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0))) * (_1673 / ((_1677 * _1677) * 3.141590118408203125));
    float _1709 = (((_1686 * cbLight._m0[_1638].x) * _1699) * _1507) + ((((cbLight._m0[_1557].x * _1482) * _1610) * _1624) * _1521);
    float _1710 = (((_1686 * cbLight._m0[_1638].y) * _1699) * _1507) + ((((cbLight._m0[_1557].y * _1483) * _1610) * _1624) * _1521);
    float _1711 = (((_1686 * cbLight._m0[_1638].z) * _1699) * _1507) + ((((cbLight._m0[_1557].z * _1484) * _1610) * _1624) * _1521);
    float _1826;
    float _1828;
    float _1830;
    float _1832;
    float _1834;
    float _1836;
    if (_1488.y == 0u)
    {
        float _1766 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1767 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1766;
        float _1768 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1766;
        float _1769 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1766;
        uvec4 _1781 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1782 = _1781.x;
        uint _1793 = uint((float(_1781.y) * floor(float(uint(cbSceneParam._m0[85u].y * _361) / _1782))) + floor(float(uint(cbSceneParam._m0[85u].x * _360) / _1782)));
        float _1803 = (log2(_1769 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1804 = isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0));
        uint _1807 = uint(isnan(14.0) ? _1804 : (isnan(_1804) ? 14.0 : min(_1804, 14.0)));
        uvec4 _1812 = texelFetch(g_lightClusterGridBuffer, int(((_1807 << 2u) + (_1793 << 6u)) >> 2u));
        uint _1813 = _1812.x;
        uint _1814 = _1781.z;
        float _1901;
        float _1903;
        float _1905;
        float _1907;
        float _1909;
        float _1911;
        if (((((1u << ((_1814 >> 4u) & 15u)) + 4294967295u) & _1813) == 0u) || ((_1814 & 240u) == 0u))
        {
            _1901 = 0.0;
            _1903 = 0.0;
            _1905 = 0.0;
            _1907 = 0.0;
            _1909 = 0.0;
            _1911 = 0.0;
        }
        else
        {
            float _1902;
            float _1904;
            float _1906;
            float _1908;
            float _1910;
            float _1912;
            float _2078 = 0.0;
            float _2079 = 0.0;
            float _2080 = 0.0;
            float _2081 = 0.0;
            float _2082 = 0.0;
            float _2083 = 0.0;
            uint _2084 = 0u;
            uint _2093;
            bool _2094;
            for (;;)
            {
                _2093 = texelFetch(g_lightClassification, int((((_1807 << 5u) + (_1793 << 9u)) + (_2084 << 2u)) >> 2u)).x;
                _2094 = _2093 == 0u;
                float frontier_phi_50_pred;
                float frontier_phi_50_pred_1;
                float frontier_phi_50_pred_2;
                float frontier_phi_50_pred_3;
                float frontier_phi_50_pred_4;
                float frontier_phi_50_pred_5;
                if (_2094)
                {
                    frontier_phi_50_pred = _2081;
                    frontier_phi_50_pred_1 = _2083;
                    frontier_phi_50_pred_2 = _2082;
                    frontier_phi_50_pred_3 = _2080;
                    frontier_phi_50_pred_4 = _2079;
                    frontier_phi_50_pred_5 = _2078;
                }
                else
                {
                    float _2253;
                    float _2254;
                    float _2255;
                    float _2256;
                    float _2257;
                    float _2258;
                    uint _2259;
                    _2253 = _2078;
                    _2254 = _2079;
                    _2255 = _2080;
                    _2256 = _2081;
                    _2257 = _2082;
                    _2258 = _2083;
                    _2259 = _2093;
                    float _2159;
                    float _2160;
                    float _2161;
                    float _2162;
                    float _2163;
                    float _2164;
                    for (;;)
                    {
                        uint _2263 = uint(findLSB(_2259)) + (_2084 << 5u);
                        uint _2260 = (_2259 + 4294967295u) & _2259;
                        uint _2265 = _2263 * 48u;
                        vec4 _2279 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2265)).x, texelFetch(g_PointLightRenderingBuffer, int(_2265 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2265 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2265 + 3u)).x));
                        uint _2285 = (_2263 * 48u) + 4u;
                        vec4 _2298 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2285)).x, texelFetch(g_PointLightRenderingBuffer, int(_2285 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2285 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2285 + 3u)).x));
                        uint _2304 = (_2263 * 48u) + 8u;
                        vec3 _2315 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2304)).x, texelFetch(g_PointLightRenderingBuffer, int(_2304 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2304 + 2u)).x));
                        float _2319 = _2279.x - _1767;
                        float _2320 = _2279.y - _1768;
                        float _2321 = _2279.z - _1769;
                        float _2322 = dot(vec3(_2319, _2320, _2321), vec3(_2319, _2320, _2321));
                        float _2325 = inversesqrt(_2322);
                        float _2326 = _2325 * _2319;
                        float _2327 = _2325 * _2320;
                        float _2328 = _2325 * _2321;
                        float _2329 = dot(vec3(_382, _385, _388), vec3(_2326, _2327, _2328));
                        float _2334 = 1.0 - (_2322 * _2279.w);
                        float _3510 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
                        float _2335 = isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0));
                        float _2336 = sqrt(_2322) * _2298.w;
                        float _2339 = 1.39999997615814208984375 / (_2336 + 1.39999997615814208984375);
                        float _2340 = _2339 * _2339;
                        float _2343 = ((1.0 - _2340) * _2329) + _2340;
                        float _2346 = _2336 * _2336;
                        float _2350 = ((isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0))) * _2335) / ((_2346 * 0.699999988079071044921875) + 1.0);
                        float _2354 = (-0.0) - _1767;
                        float _2355 = (-0.0) - _1768;
                        float _2356 = (-0.0) - _1769;
                        float _2360 = inversesqrt(dot(vec3(_2354, _2355, _2356), vec3(_2354, _2355, _2356)));
                        float _2361 = _2360 * _2354;
                        float _2362 = _2360 * _2355;
                        float _2363 = _2360 * _2356;
                        float _2371 = exp2(log2(1.0 / ((_2346 * 3.5) + 5.0)) * 0.25);
                        float _2372 = 1.0 - _443;
                        float _2379 = sqrt(1.0 - ((1.0 - (_2372 * _2372)) * (1.0 - (_2371 * _2371))));
                        float _2380 = _2379 * _2379;
                        float _2381 = _2380 * _2380;
                        float _2382 = _2361 + _2326;
                        float _2383 = _2362 + _2327;
                        float _2384 = _2363 + _2328;
                        float _2388 = inversesqrt(dot(vec3(_2382, _2383, _2384), vec3(_2382, _2383, _2384)));
                        float _2392 = dot(vec3(_382, _385, _388), vec3(_2361, _2362, _2363));
                        float _3526 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
                        float _2395 = isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0));
                        float _2396 = dot(vec3(_382, _385, _388), vec3(_2388 * _2382, _2388 * _2383, _2388 * _2384));
                        float _3537 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
                        float _2399 = isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0));
                        float _2403 = ((_2399 * _2399) * (_2381 + (-1.0))) + 1.0;
                        float _2404 = _2339 * _2380;
                        float _2405 = _2404 * _2404;
                        float _2408 = ((1.0 - _2405) * _2329) + _2405;
                        float _3548 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
                        float _2409 = isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0));
                        float _2410 = 1.0 - _2380;
                        float _2420 = (0.5 / (((_2409 * ((_2395 * _2410) + _2380)) + 9.9999999392252902907785028219223e-09) + (((_2409 * _2410) + _2380) * _2395))) * _2409;
                        float _3559 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
                        float _2431 = (((_2381 * 3.1415927410125732421875) * (isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0)))) / ((_2403 * _2403) * ((_2346 * 2.1991131305694580078125) + 3.141590118408203125))) * _2335;
                        _2162 = (_2350 * _2298.x) + _2256;
                        _2163 = (_2350 * _2298.y) + _2257;
                        _2164 = (_2350 * _2298.z) + _2258;
                        _2159 = (_2431 * _2315.x) + _2253;
                        _2160 = (_2431 * _2315.y) + _2254;
                        _2161 = (_2431 * _2315.z) + _2255;
                        if (_2260 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2253 = _2159;
                            _2254 = _2160;
                            _2255 = _2161;
                            _2256 = _2162;
                            _2257 = _2163;
                            _2258 = _2164;
                            _2259 = _2260;
                        }
                    }
                    frontier_phi_50_pred = _2162;
                    frontier_phi_50_pred_1 = _2164;
                    frontier_phi_50_pred_2 = _2163;
                    frontier_phi_50_pred_3 = _2161;
                    frontier_phi_50_pred_4 = _2160;
                    frontier_phi_50_pred_5 = _2159;
                }
                _1908 = frontier_phi_50_pred;
                _1912 = frontier_phi_50_pred_1;
                _1910 = frontier_phi_50_pred_2;
                _1906 = frontier_phi_50_pred_3;
                _1904 = frontier_phi_50_pred_4;
                _1902 = frontier_phi_50_pred_5;
                uint _2085 = _2084 + 1u;
                if (_2085 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2078 = _1902;
                    _2079 = _1904;
                    _2080 = _1906;
                    _2081 = _1908;
                    _2082 = _1910;
                    _2083 = _1912;
                    _2084 = _2085;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1901 = _1902;
            _1903 = _1904;
            _1905 = _1906;
            _1907 = _1908;
            _1909 = _1910;
            _1911 = _1912;
        }
        uvec4 _1915 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1916 = _1915.z;
        uint _1918 = (_1916 >> 8u) & 15u;
        float _2046;
        float _2048;
        float _2050;
        float _2052;
        float _2054;
        float _2056;
        if (((4294967295u << _1918) & _1813) == 0u)
        {
            _2046 = _1901;
            _2048 = _1903;
            _2050 = _1905;
            _2052 = _1907;
            _2054 = _1909;
            _2056 = _1911;
        }
        else
        {
            float _2071 = inversesqrt(dot(vec3(_1767, _1768, _1769), vec3(_1767, _1768, _1769)));
            float _2072 = _2071 * _1767;
            float _2073 = _2071 * _1768;
            float _2074 = _2071 * _1769;
            float frontier_phi_41_42_ladder;
            float frontier_phi_41_42_ladder_1;
            float frontier_phi_41_42_ladder_2;
            float frontier_phi_41_42_ladder_3;
            float frontier_phi_41_42_ladder_4;
            float frontier_phi_41_42_ladder_5;
            if (_1918 < ((_1916 >> 12u) & 15u))
            {
                float _2047;
                float _2049;
                float _2051;
                float _2053;
                float _2055;
                float _2057;
                float _2236 = _1901;
                float _2237 = _1903;
                float _2238 = _1905;
                float _2239 = _1907;
                float _2240 = _1909;
                float _2241 = _1911;
                uint _2242 = _1918;
                uint _2251;
                bool _2252;
                for (;;)
                {
                    _2251 = texelFetch(g_lightClassification, int((((_1807 << 5u) + (_1793 << 9u)) + (_2242 << 2u)) >> 2u)).x;
                    _2252 = _2251 == 0u;
                    float frontier_phi_59_pred;
                    float frontier_phi_59_pred_1;
                    float frontier_phi_59_pred_2;
                    float frontier_phi_59_pred_3;
                    float frontier_phi_59_pred_4;
                    float frontier_phi_59_pred_5;
                    if (_2252)
                    {
                        frontier_phi_59_pred = _2241;
                        frontier_phi_59_pred_1 = _2240;
                        frontier_phi_59_pred_2 = _2239;
                        frontier_phi_59_pred_3 = _2238;
                        frontier_phi_59_pred_4 = _2237;
                        frontier_phi_59_pred_5 = _2236;
                    }
                    else
                    {
                        float _2457;
                        float _2458;
                        float _2459;
                        float _2460;
                        float _2461;
                        float _2462;
                        float _2753;
                        float _2754;
                        float _2755;
                        float _2756;
                        float _2757;
                        float _2758;
                        float _2470 = _2236;
                        float _2471 = _2237;
                        float _2472 = _2238;
                        float _2473 = _2239;
                        float _2474 = _2240;
                        float _2475 = _2241;
                        uint _2476 = _2251;
                        uint _2477;
                        vec4 _2502;
                        float _2503;
                        vec4 _2518;
                        vec3 _2530;
                        vec4 _2546;
                        vec4 _2562;
                        float _2609;
                        bool _2610;
                        for (;;)
                        {
                            uint _2487 = ((_2242 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2476));
                            _2477 = (_2476 + 4294967295u) & _2476;
                            uint _2489 = _2487 * 40u;
                            _2502 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2489)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2489 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2489 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2489 + 3u)).x));
                            _2503 = _2502.w;
                            uint _2505 = (_2487 * 40u) + 4u;
                            _2518 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2505)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2505 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2505 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2505 + 3u)).x));
                            uint _2520 = (_2487 * 40u) + 8u;
                            _2530 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2520)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2520 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2520 + 2u)).x));
                            uint _2533 = (_2487 * 40u) + 16u;
                            _2546 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2533)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2533 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2533 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2533 + 3u)).x));
                            uint _2549 = (_2487 * 40u) + 20u;
                            _2562 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2549)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2549 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2549 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2549 + 3u)).x));
                            uint _2565 = (_2487 * 40u) + 24u;
                            vec4 _2578 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2565)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2565 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2565 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2565 + 3u)).x));
                            uint _2584 = (_2487 * 40u) + 28u;
                            vec4 _2597 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2584)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2584 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2584 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2584 + 3u)).x));
                            _2609 = fma(_1769, _2597.z, fma(_1768, _2597.y, _2597.x * _1767)) + _2597.w;
                            _2610 = !((fma(_1769, _2578.z, fma(_1768, _2578.y, _2578.x * _1767)) + _2578.w) <= 0.0);
                            float frontier_phi_65_pred;
                            float frontier_phi_65_pred_1;
                            float frontier_phi_65_pred_2;
                            float frontier_phi_65_pred_3;
                            float frontier_phi_65_pred_4;
                            float frontier_phi_65_pred_5;
                            if (_2610)
                            {
                                float _2637 = _2502.x - _1767;
                                float _2638 = _2502.y - _1768;
                                float _2639 = _2502.z - _1769;
                                float _2640 = dot(vec3(_2637, _2638, _2639), vec3(_2637, _2638, _2639));
                                float _2643 = inversesqrt(_2640);
                                float _2644 = _2643 * _2637;
                                float _2645 = _2643 * _2638;
                                float _2646 = _2643 * _2639;
                                float _2650 = 1.0 - (_2640 / (_2503 * _2503));
                                float _3570 = isnan(0.0) ? _2650 : (isnan(_2650) ? 0.0 : max(_2650, 0.0));
                                float _2651 = isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0));
                                float _2655 = sqrt(_2640) * _2518.w;
                                float _2657 = 1.39999997615814208984375 / (_2655 + 1.39999997615814208984375);
                                float _2658 = _2657 * _2657;
                                float _2661 = ((1.0 - _2658) * dot(vec3(_2644, _2645, _2646), vec3(_382, _385, _388))) + _2658;
                                float _2664 = _2655 * _2655;
                                float _2668 = (fma(_1769, _2546.z, fma(_1768, _2546.y, _2546.x * _1767)) + _2546.w) / _2609;
                                float _2669 = (fma(_1769, _2562.z, fma(_1768, _2562.y, _2562.x * _1767)) + _2562.w) / _2609;
                                float _2673 = 1.0 - dot(vec2(_2668, _2669), vec2(_2668, _2669));
                                float _3586 = isnan(0.0) ? _2673 : (isnan(_2673) ? 0.0 : max(_2673, 0.0));
                                float _2674 = isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0));
                                float _2675 = _2674 * (((isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : max(_2661, 0.0))) * _2651) / ((_2664 * 0.699999988079071044921875) + 1.0));
                                float _2687 = exp2(log2(1.0 / ((_2664 * 3.5) + 5.0)) * 0.25);
                                float _2688 = 1.0 - _443;
                                float _2695 = sqrt(1.0 - ((1.0 - (_2688 * _2688)) * (1.0 - (_2687 * _2687))));
                                float _2696 = _2695 * _2695;
                                float _2697 = _2696 * _2696;
                                float _2698 = _2644 - _2072;
                                float _2699 = _2645 - _2073;
                                float _2700 = _2646 - _2074;
                                float _2704 = inversesqrt(dot(vec3(_2698, _2699, _2700), vec3(_2698, _2699, _2700)));
                                float _2708 = dot(vec3(_382, _385, _388), vec3((-0.0) - _2072, (-0.0) - _2073, (-0.0) - _2074));
                                float _3597 = isnan(0.0) ? _2708 : (isnan(_2708) ? 0.0 : max(_2708, 0.0));
                                float _2711 = isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0));
                                float _2712 = dot(vec3(_382, _385, _388), vec3(_2704 * _2698, _2704 * _2699, _2704 * _2700));
                                float _3608 = isnan(0.0) ? _2712 : (isnan(_2712) ? 0.0 : max(_2712, 0.0));
                                float _2715 = isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0));
                                float _2719 = ((_2715 * _2715) * (_2697 + (-1.0))) + 1.0;
                                float _2720 = _2657 * _2696;
                                float _2721 = _2720 * _2720;
                                float _2727 = ((1.0 - _2721) * dot(vec3(_382, _385, _388), vec3(_2644, _2645, _2646))) + _2721;
                                float _3619 = isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : max(_2727, 0.0));
                                float _2728 = isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0));
                                float _2729 = 1.0 - _2696;
                                float _2739 = (0.5 / (((_2728 * ((_2711 * _2729) + _2696)) + 9.9999999392252902907785028219223e-09) + (((_2728 * _2729) + _2696) * _2711))) * _2728;
                                float _3630 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0));
                                float _2749 = (_2674 * _2651) * (((_2697 * 3.1415927410125732421875) * (isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0)))) / ((_2719 * _2719) * ((_2664 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_65_pred = _2675 * _2518.z;
                                frontier_phi_65_pred_1 = _2675 * _2518.y;
                                frontier_phi_65_pred_2 = _2675 * _2518.x;
                                frontier_phi_65_pred_3 = _2749 * _2530.z;
                                frontier_phi_65_pred_4 = _2749 * _2530.y;
                                frontier_phi_65_pred_5 = _2749 * _2530.x;
                            }
                            else
                            {
                                frontier_phi_65_pred = 0.0;
                                frontier_phi_65_pred_1 = 0.0;
                                frontier_phi_65_pred_2 = 0.0;
                                frontier_phi_65_pred_3 = 0.0;
                                frontier_phi_65_pred_4 = 0.0;
                                frontier_phi_65_pred_5 = 0.0;
                            }
                            _2758 = frontier_phi_65_pred;
                            _2757 = frontier_phi_65_pred_1;
                            _2756 = frontier_phi_65_pred_2;
                            _2755 = frontier_phi_65_pred_3;
                            _2754 = frontier_phi_65_pred_4;
                            _2753 = frontier_phi_65_pred_5;
                            _2460 = _2756 + _2473;
                            _2461 = _2757 + _2474;
                            _2462 = _2758 + _2475;
                            _2457 = _2753 + _2470;
                            _2458 = _2754 + _2471;
                            _2459 = _2755 + _2472;
                            if (_2477 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2470 = _2457;
                                _2471 = _2458;
                                _2472 = _2459;
                                _2473 = _2460;
                                _2474 = _2461;
                                _2475 = _2462;
                                _2476 = _2477;
                                continue;
                            }
                        }
                        frontier_phi_59_pred = _2462;
                        frontier_phi_59_pred_1 = _2461;
                        frontier_phi_59_pred_2 = _2460;
                        frontier_phi_59_pred_3 = _2459;
                        frontier_phi_59_pred_4 = _2458;
                        frontier_phi_59_pred_5 = _2457;
                    }
                    _2057 = frontier_phi_59_pred;
                    _2055 = frontier_phi_59_pred_1;
                    _2053 = frontier_phi_59_pred_2;
                    _2051 = frontier_phi_59_pred_3;
                    _2049 = frontier_phi_59_pred_4;
                    _2047 = frontier_phi_59_pred_5;
                    uint _2243 = _2242 + 1u;
                    if (_2243 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2236 = _2047;
                        _2237 = _2049;
                        _2238 = _2051;
                        _2239 = _2053;
                        _2240 = _2055;
                        _2241 = _2057;
                        _2242 = _2243;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_41_42_ladder = _2053;
                frontier_phi_41_42_ladder_1 = _2057;
                frontier_phi_41_42_ladder_2 = _2055;
                frontier_phi_41_42_ladder_3 = _2051;
                frontier_phi_41_42_ladder_4 = _2049;
                frontier_phi_41_42_ladder_5 = _2047;
            }
            else
            {
                frontier_phi_41_42_ladder = _1907;
                frontier_phi_41_42_ladder_1 = _1911;
                frontier_phi_41_42_ladder_2 = _1909;
                frontier_phi_41_42_ladder_3 = _1905;
                frontier_phi_41_42_ladder_4 = _1903;
                frontier_phi_41_42_ladder_5 = _1901;
            }
            _2046 = frontier_phi_41_42_ladder_5;
            _2048 = frontier_phi_41_42_ladder_4;
            _2050 = frontier_phi_41_42_ladder_3;
            _2052 = frontier_phi_41_42_ladder;
            _2054 = frontier_phi_41_42_ladder_2;
            _2056 = frontier_phi_41_42_ladder_1;
        }
        float _2061 = isnan(1.0) ? _427 : (isnan(_427) ? 1.0 : min(_427, 1.0));
        _1826 = (_2061 * _2052) + _1553;
        _1828 = (_2061 * _2054) + _1554;
        _1830 = (_2061 * _2056) + _1555;
        _1832 = ((_2046 * 0.039999999105930328369140625) * _2061) + _1709;
        _1834 = ((_2048 * 0.039999999105930328369140625) * _2061) + _1710;
        _1836 = ((_2050 * 0.039999999105930328369140625) * _2061) + _1711;
    }
    else
    {
        _1826 = _1553;
        _1828 = _1554;
        _1830 = _1555;
        _1832 = _1709;
        _1834 = _1710;
        _1836 = _1711;
    }
    float _3646 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _3657 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _3668 = isnan(0.0) ? _415 : (isnan(_415) ? 0.0 : max(_415, 0.0));
    uint _1856 = _401 + 6u;
    float _1864 = _360 / cbSceneParam._m0[86u].x;
    float _1865 = _361 / cbSceneParam._m0[86u].y;
    vec4 _1879 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1864, _1865, (log2((isnan(cbSceneParam._m0[77u].w) ? _292 : (isnan(_292) ? cbSceneParam._m0[77u].w : min(_292, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1881 = _1879.x;
    float _1882 = _1879.y;
    float _1883 = _1879.z;
    float _1884 = _1879.w;
    float _1965;
    float _1967;
    float _1969;
    float _1971;
    if (_292 > cbSceneParam._m0[78u].w)
    {
        float _1926 = isnan(_292) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _292 : min(cbSceneParam._m0[80u].w, _292));
        float _1927 = _1926 / _292;
        float _1938 = _1927 * _345;
        float _1939 = _346 * _1927;
        float _1940 = (-0.0) - _1939;
        float _1942 = _1927 * _347;
        float _1944 = (cbSceneParam._m0[77u].w * _1940) / _1926;
        float _1945 = _1944 + cbSceneParam._m0[79u].w;
        float _1946 = cbSceneParam._m0[79u].w - _1939;
        float _1952 = sqrt(((_1938 * _1938) + (_1939 * _1939)) + (_1942 * _1942));
        float _1955 = (1.0 - (cbSceneParam._m0[77u].w / _1926)) * _1952;
        float _1961 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1963 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2172;
        if (abs((_1940 - _1944) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2172 = ((((_1945 > 0.0) ? exp2(_1961 * _1945) : (2.0 - exp2(_1963 * _1945))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1955;
        }
        else
        {
            float _2107 = 1.0 / cbSceneParam._m0[80u].x;
            float _2108 = isnan(_1946) ? _1945 : (isnan(_1945) ? _1946 : max(_1945, _1946));
            float _2109 = isnan(_1946) ? _1945 : (isnan(_1945) ? _1946 : min(_1945, _1946));
            float _2118 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : min(_2108, 0.0));
            float _2119 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : min(_2109, 0.0));
            _2172 = ((abs(_1952 / _1940) * cbSceneParam._m0[80u].y) * ((((_2118 - _2119) * 2.0) - ((exp2(_1961 * (isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0)))) - exp2(_1961 * (isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0))))) * _2107)) - ((exp2(_1963 * _2118) - exp2(_1963 * _2119)) * _2107))) + (_1955 * cbSceneParam._m0[80u].z);
        }
        vec4 _2174 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1864, _1865, 1.0), 0.0);
        float _2183 = exp2((_2172 * (-1.44269502162933349609375)) * (1.0 - _2174.w));
        float _2184 = log2(_2183);
        float _2200 = log2(_1884);
        _1965 = (exp2(_2200 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2184 * cbSceneParam._m0[78u].x)) * _2174.x) / cbSceneParam._m0[78u].x)) + _1881;
        _1967 = (exp2(_2200 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2184 * cbSceneParam._m0[78u].y)) * _2174.y) / cbSceneParam._m0[78u].y)) + _1882;
        _1969 = (exp2(_2200 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2184 * cbSceneParam._m0[78u].z)) * _2174.z) / cbSceneParam._m0[78u].z)) + _1883;
        _1971 = _2183 * _1884;
    }
    else
    {
        _1965 = _1881;
        _1967 = _1882;
        _1969 = _1883;
        _1971 = _1884;
    }
    float _1983 = roundEven(cbMatDynParam._m0[0u].y);
    bool _1984 = _1983 == 3.0;
    float _1985 = log2(_1971);
    float _1992 = exp2(_1985 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0))) * (_1826 + ((isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0))) * _427))) + ((_1832 + ((isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0))) * _1234)) * cbPerFrame._m0[3u].x));
    float _1993 = exp2(_1985 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0))) * (_1828 + ((isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0))) * _427))) + ((_1834 + ((isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0))) * _1234)) * cbPerFrame._m0[3u].x));
    float _1994 = exp2(_1985 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0))) * (_1830 + ((isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0))) * _427))) + ((_1836 + ((isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0))) * _1234)) * cbPerFrame._m0[3u].x));
    float _2003 = (_1983 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2003 * (_1984 ? _1992 : (_1992 + (cbSceneParam._m0[72u].w * _1965)));
    SV_Target.y = _2003 * (_1984 ? _1993 : (_1993 + (cbSceneParam._m0[72u].w * _1967)));
    SV_Target.z = _2003 * (_1984 ? _1994 : (_1994 + (cbSceneParam._m0[72u].w * _1969)));
    SV_Target.w = cbInstanceData._m0[_1856].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1856].w;
}


