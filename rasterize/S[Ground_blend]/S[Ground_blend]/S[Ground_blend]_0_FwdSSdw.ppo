#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_Ground_blend_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D S_Ground_blend_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D S_Ground_blend_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _834;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _176 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _177 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _178 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _184 = inversesqrt(dot(vec3(_176, _177, _178), vec3(_176, _177, _178)));
    float _191 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _198 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _221 = texture(sampler2D(S_Ground_blend_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _227 = _221.x * cbMtdParam._m0[9u].x;
    float _228 = _221.y * cbMtdParam._m0[9u].y;
    float _229 = _221.z * cbMtdParam._m0[9u].z;
    vec4 _241 = texture(sampler2D(S_Ground_blend_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[2u].w));
    float _243 = _241.x;
    vec4 _255 = texture(sampler2D(S_Ground_blend_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _259 = _255.z;
    float _263 = (_255.x * 2.0) + (-1.0);
    float _265 = (_255.y * 2.0) + (-1.0);
    float _266 = dot(vec2(_263, _265), vec2(_263, _265));
    float _2927 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _272 = sqrt(1.0 - (isnan(1.0) ? _2927 : (isnan(_2927) ? 1.0 : min(_2927, 1.0))));
    float _275 = fma(_272, _191 * NORMAL.x, fma(_265, _198 * TANGENT.x, (_184 * _176) * _263));
    float _278 = fma(_272, _191 * NORMAL.y, fma(_265, _198 * TANGENT.y, (_184 * _177) * _263));
    float _281 = fma(_272, _191 * NORMAL.z, fma(_265, _198 * TANGENT.z, (_184 * _178) * _263));
    float _285 = inversesqrt(dot(vec3(_275, _278, _281), vec3(_275, _278, _281)));
    float _286 = _285 * _275;
    float _287 = _285 * _278;
    float _288 = _285 * _281;
    float _2938 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _289 = isnan(1.0) ? _2938 : (isnan(_2938) ? 1.0 : min(_2938, 1.0));
    float _2949 = isnan(0.0) ? _227 : (isnan(_227) ? 0.0 : max(_227, 0.0));
    float _2960 = isnan(0.0) ? _228 : (isnan(_228) ? 0.0 : max(_228, 0.0));
    float _2971 = isnan(0.0) ? _229 : (isnan(_229) ? 0.0 : max(_229, 0.0));
    float _2982 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _293 = isnan(1.0) ? _2982 : (isnan(_2982) ? 1.0 : min(_2982, 1.0));
    float _309 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _352 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _362 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _352);
    float _363 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _352);
    float _364 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _352);
    float _368 = inversesqrt(dot(vec3(_362, _363, _364), vec3(_362, _363, _364)));
    float _369 = _362 * _368;
    float _370 = _363 * _368;
    float _371 = _364 * _368;
    float _377 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _378 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _399 = fma(_288, cbSceneParam._m0[5u].z, fma(_287, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _286));
    float _402 = fma(_288, cbSceneParam._m0[6u].z, fma(_287, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _286));
    float _405 = fma(_288, cbSceneParam._m0[7u].z, fma(_287, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _286));
    uint _418 = uint(roundEven(NORMAL.w)) * 13u;
    uint _421 = (_418 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _427 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2949 : (isnan(_2949) ? 1.0 : min(_2949, 1.0)))) * cbInstanceData._m0[_421].x;
    float _428 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2960 : (isnan(_2960) ? 1.0 : min(_2960, 1.0)))) * cbInstanceData._m0[_421].y;
    float _429 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2971 : (isnan(_2971) ? 1.0 : min(_2971, 1.0)))) * cbInstanceData._m0[_421].z;
    float _2993 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _430 = isnan(1.0) ? _2993 : (isnan(_2993) ? 1.0 : min(_2993, 1.0));
    float _3004 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _431 = isnan(1.0) ? _3004 : (isnan(_3004) ? 1.0 : min(_3004, 1.0));
    float _3015 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _432 = isnan(1.0) ? _3015 : (isnan(_3015) ? 1.0 : min(_3015, 1.0));
    float _433 = 1.0 - _293;
    float _434 = _430 * _433;
    float _435 = _431 * _433;
    float _436 = _432 * _433;
    float _441 = (_430 + (-0.039999999105930328369140625)) * _293;
    float _442 = (_431 + (-0.039999999105930328369140625)) * _293;
    float _443 = (_432 + (-0.039999999105930328369140625)) * _293;
    float _444 = _441 + 0.039999999105930328369140625;
    float _446 = _442 + 0.039999999105930328369140625;
    float _447 = _443 + 0.039999999105930328369140625;
    vec4 _456 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _377, cbSceneParam._m0[86u].y * _378));
    float _459 = _456.x * TEXCOORD_1.w;
    float _460 = dot(vec3(_286, _287, _288), vec3(_369, _370, _371));
    float _463 = _460 * 2.0;
    float _467 = (_463 * _286) - _369;
    float _468 = (_463 * _287) - _370;
    float _469 = (_463 * _288) - _371;
    float _473 = abs(dot(vec3(_369, _370, _371), vec3(_286, _287, _288)));
    float _3026 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _475 = sqrt(_289);
    float _488 = exp2((_475 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3026 : (isnan(_3026) ? 1.0 : min(_3026, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_475 * 3.0));
    float _494 = (1.0 - _488) * ((_475 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _495 = _488 * _475;
    float _523 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _527 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _531 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _833;
    float _835;
    float _836;
    float _837;
    float _838;
    float _839;
    float _840;
    float _841;
    float _842;
    float _843;
    float _844;
    float _845;
    float _846;
    float _847;
    float _848;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _558 = fma(_531, cbModelParam._m0[26u].z, fma(_527, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _523));
        float _562 = fma(_531, cbModelParam._m0[27u].z, fma(_527, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _523));
        float _566 = fma(_531, cbModelParam._m0[28u].z, fma(_527, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _523));
        float _591 = _523 + _286;
        float _592 = _527 + _287;
        float _593 = _531 + _288;
        float _603 = fma(_593, cbModelParam._m0[26u].z, fma(_592, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _591)) - _558;
        float _604 = fma(_593, cbModelParam._m0[27u].z, fma(_592, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _591)) - _562;
        float _605 = fma(_593, cbModelParam._m0[28u].z, fma(_592, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _591)) - _566;
        float _609 = inversesqrt(dot(vec3(_603, _604, _605), vec3(_603, _604, _605)));
        float _622 = ((_609 * _603) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_558 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _623 = ((_609 * _604) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_562 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _624 = ((_609 * _605) / cbModelParam._m0[34u].z) + ((((((_566 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _627 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_622, _623, _624), 0.0);
        vec4 _634 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_622, _623, _624), 0.0);
        vec4 _641 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_622, _623, _624), 0.0);
        vec4 _648 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_622, _623, _624), 0.0);
        float _661 = exp2((_627.w + (-0.5)) * 20.0) * 2.0;
        float _662 = _661 * (_627.x + (-0.5));
        float _663 = _661 * (_627.y + (-0.5));
        float _664 = _661 * (_627.z + (-0.5));
        float _671 = exp2((_634.w + (-0.5)) * 20.0) * 2.0;
        float _672 = _671 * (_634.x + (-0.5));
        float _673 = _671 * (_634.y + (-0.5));
        float _674 = _671 * (_634.z + (-0.5));
        float _681 = exp2((_641.w + (-0.5)) * 20.0) * 2.0;
        float _682 = _681 * (_641.x + (-0.5));
        float _683 = _681 * (_641.y + (-0.5));
        float _684 = _681 * (_641.z + (-0.5));
        float _691 = exp2((_648.w + (-0.5)) * 20.0) * 2.0;
        float _692 = _691 * (_648.x + (-0.5));
        float _693 = _691 * (_648.y + (-0.5));
        float _694 = _691 * (_648.z + (-0.5));
        float _695 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
        float _696 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
        float _697 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
        float _698 = _662 * 0.5;
        float _699 = _672 * 0.5;
        float _700 = _682 * 0.5;
        float _701 = dot(vec3(_698, _699, _700), vec3(_698, _699, _700));
        float _706 = (_701 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_701);
        float _715 = (dot(vec3(_286, _287, _288), vec3(_706 * _698, _706 * _699, _706 * _700)) + 1.0) * 0.5;
        float _3052 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
        float _725 = sqrt(((_699 * _699) + (_698 * _698)) + (_700 * _700)) / (_695 + 9.9999997473787516355514526367188e-06);
        float _3063 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
        float _726 = isnan(1.0) ? _3063 : (isnan(_3063) ? 1.0 : min(_3063, 1.0));
        float _727 = _726 * 2.0;
        float _731 = (1.0 - _726) / (_726 + 1.0);
        float _3074 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
        float _732 = isnan(1.0) ? _3074 : (isnan(_3074) ? 1.0 : min(_3074, 1.0));
        float _741 = ((((1.0 - _732) * (_727 + 2.0)) * exp2(log2(isnan(1.0) ? _3052 : (isnan(_3052) ? 1.0 : min(_3052, 1.0))) * (_727 + 1.0))) + _732) * _695;
        float _742 = _663 * 0.5;
        float _743 = _673 * 0.5;
        float _744 = _683 * 0.5;
        float _745 = dot(vec3(_742, _743, _744), vec3(_742, _743, _744));
        float _750 = (_745 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_745);
        float _758 = (dot(vec3(_286, _287, _288), vec3(_750 * _742, _750 * _743, _750 * _744)) + 1.0) * 0.5;
        float _3085 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
        float _767 = sqrt(((_743 * _743) + (_742 * _742)) + (_744 * _744)) / (_696 + 9.9999997473787516355514526367188e-06);
        float _3096 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
        float _768 = isnan(1.0) ? _3096 : (isnan(_3096) ? 1.0 : min(_3096, 1.0));
        float _769 = _768 * 2.0;
        float _773 = (1.0 - _768) / (_768 + 1.0);
        float _3107 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
        float _774 = isnan(1.0) ? _3107 : (isnan(_3107) ? 1.0 : min(_3107, 1.0));
        float _783 = ((((1.0 - _774) * (_769 + 2.0)) * exp2(log2(isnan(1.0) ? _3085 : (isnan(_3085) ? 1.0 : min(_3085, 1.0))) * (_769 + 1.0))) + _774) * _696;
        float _784 = _664 * 0.5;
        float _785 = _674 * 0.5;
        float _786 = _684 * 0.5;
        float _787 = dot(vec3(_784, _785, _786), vec3(_784, _785, _786));
        float _792 = (_787 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_787);
        float _800 = (dot(vec3(_286, _287, _288), vec3(_792 * _784, _792 * _785, _792 * _786)) + 1.0) * 0.5;
        float _3118 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
        float _809 = sqrt(((_785 * _785) + (_784 * _784)) + (_786 * _786)) / (_697 + 9.9999997473787516355514526367188e-06);
        float _3129 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
        float _810 = isnan(1.0) ? _3129 : (isnan(_3129) ? 1.0 : min(_3129, 1.0));
        float _811 = _810 * 2.0;
        float _815 = (1.0 - _810) / (_810 + 1.0);
        float _3140 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
        float _816 = isnan(1.0) ? _3140 : (isnan(_3140) ? 1.0 : min(_3140, 1.0));
        float _825 = ((((1.0 - _816) * (_811 + 2.0)) * exp2(log2(isnan(1.0) ? _3118 : (isnan(_3118) ? 1.0 : min(_3118, 1.0))) * (_811 + 1.0))) + _816) * _697;
        _833 = _664;
        _835 = _663;
        _836 = _662;
        _837 = _674;
        _838 = _673;
        _839 = _672;
        _840 = _684;
        _841 = _683;
        _842 = _682;
        _843 = _697;
        _844 = _696;
        _845 = _695;
        _846 = cbModelParam._m0[36u].z * (isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0)));
        _847 = cbModelParam._m0[36u].z * (isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0)));
        _848 = cbModelParam._m0[36u].z * (isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0)));
    }
    else
    {
        _833 = _834;
        _835 = _834;
        _836 = _834;
        _837 = _834;
        _838 = _834;
        _839 = _834;
        _840 = _834;
        _841 = _834;
        _842 = _834;
        _843 = _834;
        _844 = _834;
        _845 = _834;
        _846 = 0.0;
        _847 = 0.0;
        _848 = 0.0;
    }
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    float _1151;
    float _1152;
    float _1153;
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _874 = fma(_531, cbModelParam._m0[30u].z, fma(_527, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _523));
        float _878 = fma(_531, cbModelParam._m0[31u].z, fma(_527, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _523));
        float _882 = fma(_531, cbModelParam._m0[32u].z, fma(_527, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _523));
        float _905 = _523 + _286;
        float _906 = _527 + _287;
        float _907 = _531 + _288;
        float _917 = fma(_907, cbModelParam._m0[30u].z, fma(_906, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _905)) - _874;
        float _918 = fma(_907, cbModelParam._m0[31u].z, fma(_906, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _905)) - _878;
        float _919 = fma(_907, cbModelParam._m0[32u].z, fma(_906, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _905)) - _882;
        float _923 = inversesqrt(dot(vec3(_917, _918, _919), vec3(_917, _918, _919)));
        float _936 = ((_923 * _917) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_874 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _937 = ((_923 * _918) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_878 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _938 = ((_923 * _919) / cbModelParam._m0[35u].z) + ((((((_882 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _940 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_936, _937, _938), 0.0);
        vec4 _947 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_936, _937, _938), 0.0);
        vec4 _954 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_936, _937, _938), 0.0);
        vec4 _961 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_936, _937, _938), 0.0);
        float _973 = exp2((_940.w + (-0.5)) * 20.0) * 2.0;
        float _974 = _973 * (_940.x + (-0.5));
        float _975 = _973 * (_940.y + (-0.5));
        float _976 = _973 * (_940.z + (-0.5));
        float _983 = exp2((_947.w + (-0.5)) * 20.0) * 2.0;
        float _984 = _983 * (_947.x + (-0.5));
        float _985 = _983 * (_947.y + (-0.5));
        float _986 = _983 * (_947.z + (-0.5));
        float _993 = exp2((_954.w + (-0.5)) * 20.0) * 2.0;
        float _994 = _993 * (_954.x + (-0.5));
        float _995 = _993 * (_954.y + (-0.5));
        float _996 = _993 * (_954.z + (-0.5));
        float _1003 = exp2((_961.w + (-0.5)) * 20.0) * 2.0;
        float _1004 = _1003 * (_961.x + (-0.5));
        float _1005 = _1003 * (_961.y + (-0.5));
        float _1006 = _1003 * (_961.z + (-0.5));
        float _1007 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1008 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1009 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1010 = _974 * 0.5;
        float _1011 = _984 * 0.5;
        float _1012 = _994 * 0.5;
        float _1013 = dot(vec3(_1010, _1011, _1012), vec3(_1010, _1011, _1012));
        float _1018 = (_1013 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1013);
        float _1026 = (dot(vec3(_286, _287, _288), vec3(_1018 * _1010, _1018 * _1011, _1018 * _1012)) + 1.0) * 0.5;
        float _3181 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1035 = sqrt(((_1011 * _1011) + (_1010 * _1010)) + (_1012 * _1012)) / (_1007 + 9.9999997473787516355514526367188e-06);
        float _3192 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1036 = isnan(1.0) ? _3192 : (isnan(_3192) ? 1.0 : min(_3192, 1.0));
        float _1037 = _1036 * 2.0;
        float _1041 = (1.0 - _1036) / (_1036 + 1.0);
        float _3203 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1042 = isnan(1.0) ? _3203 : (isnan(_3203) ? 1.0 : min(_3203, 1.0));
        float _1051 = ((((1.0 - _1042) * (_1037 + 2.0)) * exp2(log2(isnan(1.0) ? _3181 : (isnan(_3181) ? 1.0 : min(_3181, 1.0))) * (_1037 + 1.0))) + _1042) * _1007;
        float _1052 = _975 * 0.5;
        float _1053 = _985 * 0.5;
        float _1054 = _995 * 0.5;
        float _1055 = dot(vec3(_1052, _1053, _1054), vec3(_1052, _1053, _1054));
        float _1060 = (_1055 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1055);
        float _1068 = (dot(vec3(_286, _287, _288), vec3(_1060 * _1052, _1060 * _1053, _1060 * _1054)) + 1.0) * 0.5;
        float _3214 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1077 = sqrt(((_1053 * _1053) + (_1052 * _1052)) + (_1054 * _1054)) / (_1008 + 9.9999997473787516355514526367188e-06);
        float _3225 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1078 = isnan(1.0) ? _3225 : (isnan(_3225) ? 1.0 : min(_3225, 1.0));
        float _1079 = _1078 * 2.0;
        float _1083 = (1.0 - _1078) / (_1078 + 1.0);
        float _3236 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1084 = isnan(1.0) ? _3236 : (isnan(_3236) ? 1.0 : min(_3236, 1.0));
        float _1093 = ((((1.0 - _1084) * (_1079 + 2.0)) * exp2(log2(isnan(1.0) ? _3214 : (isnan(_3214) ? 1.0 : min(_3214, 1.0))) * (_1079 + 1.0))) + _1084) * _1008;
        float _1094 = _976 * 0.5;
        float _1095 = _986 * 0.5;
        float _1096 = _996 * 0.5;
        float _1097 = dot(vec3(_1094, _1095, _1096), vec3(_1094, _1095, _1096));
        float _1102 = (_1097 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1097);
        float _1110 = (dot(vec3(_286, _287, _288), vec3(_1102 * _1094, _1102 * _1095, _1102 * _1096)) + 1.0) * 0.5;
        float _3247 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1119 = sqrt(((_1095 * _1095) + (_1094 * _1094)) + (_1096 * _1096)) / (_1009 + 9.9999997473787516355514526367188e-06);
        float _3258 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1120 = isnan(1.0) ? _3258 : (isnan(_3258) ? 1.0 : min(_3258, 1.0));
        float _1121 = _1120 * 2.0;
        float _1125 = (1.0 - _1120) / (_1120 + 1.0);
        float _3269 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1126 = isnan(1.0) ? _3269 : (isnan(_3269) ? 1.0 : min(_3269, 1.0));
        float _1135 = ((((1.0 - _1126) * (_1121 + 2.0)) * exp2(log2(isnan(1.0) ? _3247 : (isnan(_3247) ? 1.0 : min(_3247, 1.0))) * (_1121 + 1.0))) + _1126) * _1009;
        _1143 = _976;
        _1144 = _975;
        _1145 = _974;
        _1146 = _986;
        _1147 = _985;
        _1148 = _984;
        _1149 = _996;
        _1150 = _995;
        _1151 = _994;
        _1152 = _1009;
        _1153 = _1008;
        _1154 = _1007;
        _1155 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0)));
        _1156 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0)));
        _1157 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0)));
    }
    else
    {
        _1143 = _834;
        _1144 = _834;
        _1145 = _834;
        _1146 = _834;
        _1147 = _834;
        _1148 = _834;
        _1149 = _834;
        _1150 = _834;
        _1151 = _834;
        _1152 = _834;
        _1153 = _834;
        _1154 = _834;
        _1155 = 0.0;
        _1156 = 0.0;
        _1157 = 0.0;
    }
    float _1167 = (cbModelParam._m0[1u].x * (_1155 - _846)) + _846;
    float _1168 = (cbModelParam._m0[1u].x * (_1156 - _847)) + _847;
    float _1169 = (cbModelParam._m0[1u].x * (_1157 - _848)) + _848;
    float _1190 = fma(_1169, cbSceneParam._m0[89u].z, fma(_1168, cbSceneParam._m0[89u].y, _1167 * cbSceneParam._m0[89u].x));
    float _1193 = fma(_1169, cbSceneParam._m0[90u].z, fma(_1168, cbSceneParam._m0[90u].y, _1167 * cbSceneParam._m0[90u].x));
    float _1196 = fma(_1169, cbSceneParam._m0[91u].z, fma(_1168, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1167));
    float _1211 = _467 * 0.5;
    float _1212 = _468 * 0.5;
    float _1213 = _469 * 0.5;
    float _1214 = dot(vec4(_1211, _1212, _1213, 1.0), vec4(_1145, _1148, _1151, _1154));
    float _1217 = dot(vec4(_1211, _1212, _1213, 1.0), vec4(_1144, _1147, _1150, _1153));
    float _1220 = dot(vec4(_1211, _1212, _1213, 1.0), vec4(_1143, _1146, _1149, _1152));
    float _1254;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1227 = dot(vec4(_1211, _1212, _1213, 1.0), vec4(_833, _837, _840, _843));
        float _1231 = dot(vec4(_1211, _1212, _1213, 1.0), vec4(_835, _838, _841, _844));
        float _1235 = dot(vec4(_1211, _1212, _1213, 1.0), vec4(_836, _839, _842, _845));
        float _1242 = dot(vec4(cbModelParam._m0[39u]), vec4(_1211, _1212, _1213, 1.0));
        _1254 = dot(vec3(isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0)), isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0)), isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1242) ? 0.0 : (isnan(0.0) ? _1242 : max(0.0, _1242))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1254 = 1.0;
    }
    float _1265;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1256 = dot(vec4(cbModelParam._m0[40u]), vec4(_1211, _1212, _1213, 1.0));
        _1265 = dot(vec3(isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0)), isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0)), isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1256) ? 0.0 : (isnan(0.0) ? _1256 : max(0.0, _1256))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1265 = 1.0;
    }
    float _1269 = (_1265 * cbModelParam._m0[1u].x) + (_1254 * (1.0 - cbModelParam._m0[1u].x));
    float _1279 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _289);
    float _1280 = isnan(_1279) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1279 : min(cbModelParam._m0[25u].z, _1279));
    float _1362;
    float _1364;
    float _1366;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1329 = fma(_531, cbModelParam._m0[13u].z, fma(_527, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _523)) + cbModelParam._m0[13u].w;
        float _1333 = fma(_531, cbModelParam._m0[14u].z, fma(_527, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _523)) + cbModelParam._m0[14u].w;
        float _1337 = fma(_531, cbModelParam._m0[15u].z, fma(_527, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _523)) + cbModelParam._m0[15u].w;
        float _1340 = fma(_469, cbModelParam._m0[13u].z, fma(_468, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _467));
        float _1343 = fma(_469, cbModelParam._m0[14u].z, fma(_468, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _467));
        float _1346 = fma(_469, cbModelParam._m0[15u].z, fma(_468, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _467));
        float _1374;
        if (_1340 > 0.0)
        {
            _1374 = abs((1.0 - _1329) / _1340);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1340 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1329 + 1.0) / _1340);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1374 = frontier_phi_14_12_ladder;
        }
        float _1765;
        if (_1343 > 0.0)
        {
            _1765 = abs((1.0 - _1333) / _1343);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1343 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1333 + 1.0) / _1343);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1765 = frontier_phi_23_19_ladder;
        }
        float _2063;
        if (_1346 > 0.0)
        {
            _2063 = abs((1.0 - _1337) / _1346);
        }
        else
        {
            float frontier_phi_37_30_ladder;
            if (_1346 < 0.0)
            {
                frontier_phi_37_30_ladder = abs((_1337 + 1.0) / _1346);
            }
            else
            {
                frontier_phi_37_30_ladder = 5000.0;
            }
            _2063 = frontier_phi_37_30_ladder;
        }
        float _2065 = isnan(_1765) ? _1374 : (isnan(_1374) ? _1765 : min(_1374, _1765));
        float _2066 = isnan(_2063) ? _2065 : (isnan(_2065) ? _2063 : min(_2065, _2063));
        float _2070 = (_2066 * _1340) + _1329;
        float _2071 = (_2066 * _1343) + _1333;
        float _2072 = (_2066 * _1346) + _1337;
        float _2073 = _2066 * 9.9999997473787516355514526367188e-05;
        float _2074 = (-1.0) - _2073;
        float _2076 = _2073 + 1.0;
        float frontier_phi_13_37_ladder;
        float frontier_phi_13_37_ladder_1;
        float frontier_phi_13_37_ladder_2;
        if ((_2072 > _2076) || ((_2072 < _2074) || ((_2071 > _2076) || ((_2071 < _2074) || ((_2070 < _2074) || (_2070 > _2076))))))
        {
            frontier_phi_13_37_ladder = 0.0;
            frontier_phi_13_37_ladder_1 = 0.0;
            frontier_phi_13_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2198 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2072, cbModelParam._m0[9u].z, fma(_2071, cbModelParam._m0[9u].y, _2070 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2072, cbModelParam._m0[10u].z, fma(_2071, cbModelParam._m0[10u].y, _2070 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2072, cbModelParam._m0[11u].z, fma(_2071, cbModelParam._m0[11u].y, _2070 * cbModelParam._m0[11u].x))), _1280);
            frontier_phi_13_37_ladder = _2198.z * cbModelParam._m0[1u].y;
            frontier_phi_13_37_ladder_1 = _2198.y * cbModelParam._m0[1u].y;
            frontier_phi_13_37_ladder_2 = _2198.x * cbModelParam._m0[1u].y;
        }
        _1362 = frontier_phi_13_37_ladder_2;
        _1364 = frontier_phi_13_37_ladder_1;
        _1366 = frontier_phi_13_37_ladder;
    }
    else
    {
        vec4 _1350 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_467, _468, _469), _1280);
        _1362 = _1350.x * cbModelParam._m0[1u].y;
        _1364 = _1350.y * cbModelParam._m0[1u].y;
        _1366 = _1350.z * cbModelParam._m0[1u].y;
    }
    float _1370 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _289);
    float _1371 = isnan(_1370) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1370 : min(cbModelParam._m0[25u].w, _1370));
    float _1464;
    float _1466;
    float _1468;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1428 = fma(_531, cbModelParam._m0[21u].z, fma(_527, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _523)) + cbModelParam._m0[21u].w;
        float _1432 = fma(_531, cbModelParam._m0[22u].z, fma(_527, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _523)) + cbModelParam._m0[22u].w;
        float _1436 = fma(_531, cbModelParam._m0[23u].z, fma(_527, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _523)) + cbModelParam._m0[23u].w;
        float _1439 = fma(_469, cbModelParam._m0[21u].z, fma(_468, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _467));
        float _1442 = fma(_469, cbModelParam._m0[22u].z, fma(_468, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _467));
        float _1445 = fma(_469, cbModelParam._m0[23u].z, fma(_468, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _467));
        float _1770;
        if (_1439 > 0.0)
        {
            _1770 = abs((1.0 - _1428) / _1439);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1439 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1428 + 1.0) / _1439);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1770 = frontier_phi_25_21_ladder;
        }
        float _2089;
        if (_1442 > 0.0)
        {
            _2089 = abs((1.0 - _1432) / _1442);
        }
        else
        {
            float frontier_phi_39_32_ladder;
            if (_1442 < 0.0)
            {
                frontier_phi_39_32_ladder = abs((_1432 + 1.0) / _1442);
            }
            else
            {
                frontier_phi_39_32_ladder = 5000.0;
            }
            _2089 = frontier_phi_39_32_ladder;
        }
        float _2258;
        if (_1445 > 0.0)
        {
            _2258 = abs((1.0 - _1436) / _1445);
        }
        else
        {
            float frontier_phi_53_48_ladder;
            if (_1445 < 0.0)
            {
                frontier_phi_53_48_ladder = abs((_1436 + 1.0) / _1445);
            }
            else
            {
                frontier_phi_53_48_ladder = 5000.0;
            }
            _2258 = frontier_phi_53_48_ladder;
        }
        float _2260 = isnan(_2089) ? _1770 : (isnan(_1770) ? _2089 : min(_1770, _2089));
        float _2261 = isnan(_2258) ? _2260 : (isnan(_2260) ? _2258 : min(_2260, _2258));
        float _2265 = (_2261 * _1439) + _1428;
        float _2266 = (_2261 * _1442) + _1432;
        float _2267 = (_2261 * _1445) + _1436;
        float _2268 = _2261 * 9.9999997473787516355514526367188e-05;
        float _2269 = (-1.0) - _2268;
        float _2271 = _2268 + 1.0;
        float frontier_phi_22_53_ladder;
        float frontier_phi_22_53_ladder_1;
        float frontier_phi_22_53_ladder_2;
        if ((_2267 > _2271) || ((_2267 < _2269) || ((_2266 > _2271) || ((_2266 < _2269) || ((_2265 < _2269) || (_2265 > _2271))))))
        {
            frontier_phi_22_53_ladder = 0.0;
            frontier_phi_22_53_ladder_1 = 0.0;
            frontier_phi_22_53_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2500 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2267, cbModelParam._m0[17u].z, fma(_2266, cbModelParam._m0[17u].y, _2265 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2267, cbModelParam._m0[18u].z, fma(_2266, cbModelParam._m0[18u].y, _2265 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2267, cbModelParam._m0[19u].z, fma(_2266, cbModelParam._m0[19u].y, _2265 * cbModelParam._m0[19u].x))), _1371);
            frontier_phi_22_53_ladder = _2500.y * cbModelParam._m0[1u].z;
            frontier_phi_22_53_ladder_1 = _2500.z * cbModelParam._m0[1u].z;
            frontier_phi_22_53_ladder_2 = _2500.x * cbModelParam._m0[1u].z;
        }
        _1464 = frontier_phi_22_53_ladder_2;
        _1466 = frontier_phi_22_53_ladder;
        _1468 = frontier_phi_22_53_ladder_1;
    }
    else
    {
        vec4 _1448 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_467, _468, _469), _1371);
        _1464 = _1448.x * cbModelParam._m0[1u].z;
        _1466 = _1448.y * cbModelParam._m0[1u].z;
        _1468 = _1448.z * cbModelParam._m0[1u].z;
    }
    float _1481 = (((_494 * _444) + _495) * _459) * ((cbModelParam._m0[1u].w * (_1464 - _1362)) + _1362);
    float _1483 = (((_494 * _446) + _495) * _459) * ((cbModelParam._m0[1u].w * (_1466 - _1364)) + _1364);
    float _1485 = (((_494 * _447) + _495) * _459) * ((cbModelParam._m0[1u].w * (_1468 - _1366)) + _1366);
    float _1488 = fma(_1485, cbSceneParam._m0[89u].z, fma(_1483, cbSceneParam._m0[89u].y, _1481 * cbSceneParam._m0[89u].x));
    float _1491 = fma(_1485, cbSceneParam._m0[90u].z, fma(_1483, cbSceneParam._m0[90u].y, _1481 * cbSceneParam._m0[90u].x));
    float _1494 = fma(_1485, cbSceneParam._m0[91u].z, fma(_1483, cbSceneParam._m0[91u].y, _1481 * cbSceneParam._m0[91u].x));
    vec4 _1502 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_377, _378));
    float _1504 = _1502.w;
    float _1516 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1504);
    float _1517 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1504);
    float _1518 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1504);
    float _3395 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
    float _1519 = isnan(1.0) ? _3395 : (isnan(_3395) ? 1.0 : min(_3395, 1.0));
    float _3406 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
    float _1520 = isnan(1.0) ? _3406 : (isnan(_3406) ? 1.0 : min(_3406, 1.0));
    float _3417 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
    float _1521 = isnan(1.0) ? _3417 : (isnan(_3417) ? 1.0 : min(_3417, 1.0));
    uvec4 _1525 = floatBitsToUint(cbInstanceData._m0[_418 + 5u]);
    uint _1527 = _1525.x * 14u;
    uint _1528 = _1527 + 13u;
    float _1533 = _459 + (-1.0);
    float _1536 = (cbLight._m0[_1528].x * _1533) + 1.0;
    float _1537 = (cbLight._m0[_1528].y * _1533) + 1.0;
    uint _1538 = _1527 + 5u;
    float _1544 = isnan(1.0) ? _1537 : (isnan(_1537) ? 1.0 : min(_1537, 1.0));
    uint _1548 = _1527 + 4u;
    float _1558 = isnan(1.0) ? _1536 : (isnan(_1536) ? 1.0 : min(_1536, 1.0));
    uint _1562 = _1527 | 1u;
    float _1573 = dot(vec3(cbLight._m0[_1527].xyz), vec3(_286, _287, _288));
    float _1576 = dot(vec3(cbLight._m0[_1562].xyz), vec3(_286, _287, _288));
    float _3438 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
    float _3449 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
    float _1581 = (isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0))) * 0.3183098733425140380859375;
    float _1583 = (isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0))) * 0.3183098733425140380859375;
    float _1590 = ((cbLight._m0[_1538].x * _1544) * _1583) + (((cbLight._m0[_1548].x * _1519) * _1558) * _1581);
    float _1591 = ((_1544 * cbLight._m0[_1538].y) * _1583) + (((cbLight._m0[_1548].y * _1520) * _1558) * _1581);
    float _1592 = ((_1544 * cbLight._m0[_1538].z) * _1583) + (((cbLight._m0[_1548].z * _1521) * _1558) * _1581);
    uint _1594 = _1527 + 8u;
    float _1607 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1527].w)) * _289) * 0.949999988079071044921875);
    float _1608 = _1607 * _1607;
    float _1609 = cbLight._m0[_1527].x + _369;
    float _1610 = cbLight._m0[_1527].y + _370;
    float _1611 = cbLight._m0[_1527].z + _371;
    float _1615 = inversesqrt(dot(vec3(_1609, _1610, _1611), vec3(_1609, _1610, _1611)));
    float _1616 = _1615 * _1609;
    float _1617 = _1615 * _1610;
    float _1618 = _1615 * _1611;
    float _1619 = dot(vec3(_286, _287, _288), vec3(cbLight._m0[_1527].xyz));
    float _3460 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
    float _1622 = isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0));
    float _3471 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _1623 = isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0));
    float _1624 = dot(vec3(_286, _287, _288), vec3(_1616, _1617, _1618));
    float _3482 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
    float _1627 = isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0));
    float _1628 = dot(vec3(cbLight._m0[_1527].xyz), vec3(_1616, _1617, _1618));
    float _3493 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
    float _1632 = _1608 * _1608;
    float _1636 = ((_1627 * _1627) * (_1632 + (-1.0))) + 1.0;
    float _1644 = exp2(log2(1.0 - (isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0)))) * 5.0);
    float _1645 = 0.959999978542327880859375 - _441;
    float _1647 = 0.959999978542327880859375 - _442;
    float _1648 = 0.959999978542327880859375 - _443;
    float _1655 = 1.0 - _1608;
    float _1666 = (0.5 / (((_1623 * ((_1622 * _1655) + _1608)) + 9.9999999392252902907785028219223e-09) + (((_1623 * _1655) + _1608) * _1622))) * _1622;
    float _3504 = isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0));
    float _1668 = (isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0))) * (_1632 / ((_1636 * _1636) * 3.141590118408203125));
    uint _1682 = _1527 + 9u;
    float _1693 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1562].w)) * _289) * 0.949999988079071044921875);
    float _1694 = _1693 * _1693;
    float _1695 = cbLight._m0[_1562].x + _369;
    float _1696 = cbLight._m0[_1562].y + _370;
    float _1697 = cbLight._m0[_1562].z + _371;
    float _1701 = inversesqrt(dot(vec3(_1695, _1696, _1697), vec3(_1695, _1696, _1697)));
    float _1702 = _1701 * _1695;
    float _1703 = _1701 * _1696;
    float _1704 = _1701 * _1697;
    float _1705 = dot(vec3(_286, _287, _288), vec3(cbLight._m0[_1562].xyz));
    float _3515 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
    float _1708 = isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0));
    float _1709 = dot(vec3(_286, _287, _288), vec3(_1702, _1703, _1704));
    float _3526 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
    float _1712 = isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0));
    float _1713 = dot(vec3(cbLight._m0[_1562].xyz), vec3(_1702, _1703, _1704));
    float _3537 = isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0));
    float _1717 = _1694 * _1694;
    float _1721 = ((_1712 * _1712) * (_1717 + (-1.0))) + 1.0;
    float _1728 = exp2(log2(1.0 - (isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0)))) * 5.0);
    float _1735 = 1.0 - _1694;
    float _1745 = (0.5 / (((_1623 * ((_1708 * _1735) + _1694)) + 9.9999999392252902907785028219223e-09) + (((_1623 * _1735) + _1694) * _1708))) * _1708;
    float _3548 = isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0));
    float _1747 = (isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0))) * (_1717 / ((_1721 * _1721) * 3.141590118408203125));
    float _1757 = (((((_1728 * _1645) + _444) * cbLight._m0[_1682].x) * _1747) * _1544) + ((((cbLight._m0[_1594].x * _1519) * ((_1644 * _1645) + _444)) * _1668) * _1558);
    float _1758 = (((((_1728 * _1647) + _446) * cbLight._m0[_1682].y) * _1747) * _1544) + ((((cbLight._m0[_1594].y * _1520) * ((_1644 * _1647) + _446)) * _1668) * _1558);
    float _1759 = (((((_1728 * _1648) + _447) * cbLight._m0[_1682].z) * _1747) * _1544) + ((((cbLight._m0[_1594].z * _1521) * ((_1644 * _1648) + _447)) * _1668) * _1558);
    float _1874;
    float _1876;
    float _1878;
    float _1880;
    float _1882;
    float _1884;
    if (_1525.y == 0u)
    {
        float _1814 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1815 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1814;
        float _1816 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1814;
        float _1817 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1814;
        uvec4 _1829 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1830 = _1829.x;
        uint _1841 = uint((float(_1829.y) * floor(float(uint(cbSceneParam._m0[85u].y * _378) / _1830))) + floor(float(uint(cbSceneParam._m0[85u].x * _377) / _1830)));
        float _1851 = (log2(_1817 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1852 = isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0));
        uint _1855 = uint(isnan(14.0) ? _1852 : (isnan(_1852) ? 14.0 : min(_1852, 14.0)));
        uvec4 _1860 = texelFetch(g_lightClusterGridBuffer, int(((_1855 << 2u) + (_1841 << 6u)) >> 2u));
        uint _1861 = _1860.x;
        uint _1862 = _1829.z;
        float _1949;
        float _1951;
        float _1953;
        float _1955;
        float _1957;
        float _1959;
        if (((((1u << ((_1862 >> 4u) & 15u)) + 4294967295u) & _1861) == 0u) || ((_1862 & 240u) == 0u))
        {
            _1949 = 0.0;
            _1951 = 0.0;
            _1953 = 0.0;
            _1955 = 0.0;
            _1957 = 0.0;
            _1959 = 0.0;
        }
        else
        {
            float _1950;
            float _1952;
            float _1954;
            float _1956;
            float _1958;
            float _1960;
            float _2126 = 0.0;
            float _2127 = 0.0;
            float _2128 = 0.0;
            float _2129 = 0.0;
            float _2130 = 0.0;
            float _2131 = 0.0;
            uint _2132 = 0u;
            uint _2141;
            bool _2142;
            for (;;)
            {
                _2141 = texelFetch(g_lightClassification, int((((_1855 << 5u) + (_1841 << 9u)) + (_2132 << 2u)) >> 2u)).x;
                _2142 = _2141 == 0u;
                float frontier_phi_50_pred;
                float frontier_phi_50_pred_1;
                float frontier_phi_50_pred_2;
                float frontier_phi_50_pred_3;
                float frontier_phi_50_pred_4;
                float frontier_phi_50_pred_5;
                if (_2142)
                {
                    frontier_phi_50_pred = _2129;
                    frontier_phi_50_pred_1 = _2131;
                    frontier_phi_50_pred_2 = _2130;
                    frontier_phi_50_pred_3 = _2128;
                    frontier_phi_50_pred_4 = _2127;
                    frontier_phi_50_pred_5 = _2126;
                }
                else
                {
                    float _2301;
                    float _2302;
                    float _2303;
                    float _2304;
                    float _2305;
                    float _2306;
                    uint _2307;
                    _2301 = _2126;
                    _2302 = _2127;
                    _2303 = _2128;
                    _2304 = _2129;
                    _2305 = _2130;
                    _2306 = _2131;
                    _2307 = _2141;
                    float _2207;
                    float _2208;
                    float _2209;
                    float _2210;
                    float _2211;
                    float _2212;
                    for (;;)
                    {
                        uint _2311 = uint(findLSB(_2307)) + (_2132 << 5u);
                        uint _2308 = (_2307 + 4294967295u) & _2307;
                        uint _2313 = _2311 * 48u;
                        vec4 _2327 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2313)).x, texelFetch(g_PointLightRenderingBuffer, int(_2313 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2313 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2313 + 3u)).x));
                        uint _2333 = (_2311 * 48u) + 4u;
                        vec4 _2346 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2333)).x, texelFetch(g_PointLightRenderingBuffer, int(_2333 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2333 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2333 + 3u)).x));
                        uint _2352 = (_2311 * 48u) + 8u;
                        vec3 _2363 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2352)).x, texelFetch(g_PointLightRenderingBuffer, int(_2352 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2352 + 2u)).x));
                        float _2367 = _2327.x - _1815;
                        float _2368 = _2327.y - _1816;
                        float _2369 = _2327.z - _1817;
                        float _2370 = dot(vec3(_2367, _2368, _2369), vec3(_2367, _2368, _2369));
                        float _2373 = inversesqrt(_2370);
                        float _2374 = _2373 * _2367;
                        float _2375 = _2373 * _2368;
                        float _2376 = _2373 * _2369;
                        float _2377 = dot(vec3(_399, _402, _405), vec3(_2374, _2375, _2376));
                        float _2382 = 1.0 - (_2370 * _2327.w);
                        float _3569 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
                        float _2383 = isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0));
                        float _2384 = sqrt(_2370) * _2346.w;
                        float _2387 = 1.39999997615814208984375 / (_2384 + 1.39999997615814208984375);
                        float _2388 = _2387 * _2387;
                        float _2391 = ((1.0 - _2388) * _2377) + _2388;
                        float _2394 = _2384 * _2384;
                        float _2398 = ((isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0))) * _2383) / ((_2394 * 0.699999988079071044921875) + 1.0);
                        float _2402 = (-0.0) - _1815;
                        float _2403 = (-0.0) - _1816;
                        float _2404 = (-0.0) - _1817;
                        float _2408 = inversesqrt(dot(vec3(_2402, _2403, _2404), vec3(_2402, _2403, _2404)));
                        float _2409 = _2408 * _2402;
                        float _2410 = _2408 * _2403;
                        float _2411 = _2408 * _2404;
                        float _2419 = exp2(log2(1.0 / ((_2394 * 3.5) + 5.0)) * 0.25);
                        float _2420 = 1.0 - _475;
                        float _2427 = sqrt(1.0 - ((1.0 - (_2420 * _2420)) * (1.0 - (_2419 * _2419))));
                        float _2428 = _2427 * _2427;
                        float _2429 = _2428 * _2428;
                        float _2430 = _2409 + _2374;
                        float _2431 = _2410 + _2375;
                        float _2432 = _2411 + _2376;
                        float _2436 = inversesqrt(dot(vec3(_2430, _2431, _2432), vec3(_2430, _2431, _2432)));
                        float _2440 = dot(vec3(_399, _402, _405), vec3(_2409, _2410, _2411));
                        float _3585 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
                        float _2443 = isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0));
                        float _2444 = dot(vec3(_399, _402, _405), vec3(_2436 * _2430, _2436 * _2431, _2436 * _2432));
                        float _3596 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
                        float _2447 = isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0));
                        float _2451 = ((_2447 * _2447) * (_2429 + (-1.0))) + 1.0;
                        float _2452 = _2387 * _2428;
                        float _2453 = _2452 * _2452;
                        float _2456 = ((1.0 - _2453) * _2377) + _2453;
                        float _3607 = isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0));
                        float _2457 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
                        float _2458 = 1.0 - _2428;
                        float _2468 = (0.5 / (((_2457 * ((_2443 * _2458) + _2428)) + 9.9999999392252902907785028219223e-09) + (((_2457 * _2458) + _2428) * _2443))) * _2457;
                        float _3618 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
                        float _2479 = (((_2429 * 3.1415927410125732421875) * (isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0)))) / ((_2451 * _2451) * ((_2394 * 2.1991131305694580078125) + 3.141590118408203125))) * _2383;
                        _2210 = (_2398 * _2346.x) + _2304;
                        _2211 = (_2398 * _2346.y) + _2305;
                        _2212 = (_2398 * _2346.z) + _2306;
                        _2207 = (_2479 * _2363.x) + _2301;
                        _2208 = (_2479 * _2363.y) + _2302;
                        _2209 = (_2479 * _2363.z) + _2303;
                        if (_2308 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2301 = _2207;
                            _2302 = _2208;
                            _2303 = _2209;
                            _2304 = _2210;
                            _2305 = _2211;
                            _2306 = _2212;
                            _2307 = _2308;
                        }
                    }
                    frontier_phi_50_pred = _2210;
                    frontier_phi_50_pred_1 = _2212;
                    frontier_phi_50_pred_2 = _2211;
                    frontier_phi_50_pred_3 = _2209;
                    frontier_phi_50_pred_4 = _2208;
                    frontier_phi_50_pred_5 = _2207;
                }
                _1956 = frontier_phi_50_pred;
                _1960 = frontier_phi_50_pred_1;
                _1958 = frontier_phi_50_pred_2;
                _1954 = frontier_phi_50_pred_3;
                _1952 = frontier_phi_50_pred_4;
                _1950 = frontier_phi_50_pred_5;
                uint _2133 = _2132 + 1u;
                if (_2133 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2126 = _1950;
                    _2127 = _1952;
                    _2128 = _1954;
                    _2129 = _1956;
                    _2130 = _1958;
                    _2131 = _1960;
                    _2132 = _2133;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1949 = _1950;
            _1951 = _1952;
            _1953 = _1954;
            _1955 = _1956;
            _1957 = _1958;
            _1959 = _1960;
        }
        uvec4 _1963 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1964 = _1963.z;
        uint _1966 = (_1964 >> 8u) & 15u;
        float _2094;
        float _2096;
        float _2098;
        float _2100;
        float _2102;
        float _2104;
        if (((4294967295u << _1966) & _1861) == 0u)
        {
            _2094 = _1949;
            _2096 = _1951;
            _2098 = _1953;
            _2100 = _1955;
            _2102 = _1957;
            _2104 = _1959;
        }
        else
        {
            float _2119 = inversesqrt(dot(vec3(_1815, _1816, _1817), vec3(_1815, _1816, _1817)));
            float _2120 = _2119 * _1815;
            float _2121 = _2119 * _1816;
            float _2122 = _2119 * _1817;
            float frontier_phi_41_42_ladder;
            float frontier_phi_41_42_ladder_1;
            float frontier_phi_41_42_ladder_2;
            float frontier_phi_41_42_ladder_3;
            float frontier_phi_41_42_ladder_4;
            float frontier_phi_41_42_ladder_5;
            if (_1966 < ((_1964 >> 12u) & 15u))
            {
                float _2095;
                float _2097;
                float _2099;
                float _2101;
                float _2103;
                float _2105;
                float _2284 = _1949;
                float _2285 = _1951;
                float _2286 = _1953;
                float _2287 = _1955;
                float _2288 = _1957;
                float _2289 = _1959;
                uint _2290 = _1966;
                uint _2299;
                bool _2300;
                for (;;)
                {
                    _2299 = texelFetch(g_lightClassification, int((((_1855 << 5u) + (_1841 << 9u)) + (_2290 << 2u)) >> 2u)).x;
                    _2300 = _2299 == 0u;
                    float frontier_phi_59_pred;
                    float frontier_phi_59_pred_1;
                    float frontier_phi_59_pred_2;
                    float frontier_phi_59_pred_3;
                    float frontier_phi_59_pred_4;
                    float frontier_phi_59_pred_5;
                    if (_2300)
                    {
                        frontier_phi_59_pred = _2289;
                        frontier_phi_59_pred_1 = _2288;
                        frontier_phi_59_pred_2 = _2287;
                        frontier_phi_59_pred_3 = _2286;
                        frontier_phi_59_pred_4 = _2285;
                        frontier_phi_59_pred_5 = _2284;
                    }
                    else
                    {
                        float _2505;
                        float _2506;
                        float _2507;
                        float _2508;
                        float _2509;
                        float _2510;
                        float _2801;
                        float _2802;
                        float _2803;
                        float _2804;
                        float _2805;
                        float _2806;
                        float _2518 = _2284;
                        float _2519 = _2285;
                        float _2520 = _2286;
                        float _2521 = _2287;
                        float _2522 = _2288;
                        float _2523 = _2289;
                        uint _2524 = _2299;
                        uint _2525;
                        vec4 _2550;
                        float _2551;
                        vec4 _2566;
                        vec3 _2578;
                        vec4 _2594;
                        vec4 _2610;
                        float _2657;
                        bool _2658;
                        for (;;)
                        {
                            uint _2535 = ((_2290 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2524));
                            _2525 = (_2524 + 4294967295u) & _2524;
                            uint _2537 = _2535 * 40u;
                            _2550 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2537)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2537 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2537 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2537 + 3u)).x));
                            _2551 = _2550.w;
                            uint _2553 = (_2535 * 40u) + 4u;
                            _2566 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2553)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2553 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2553 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2553 + 3u)).x));
                            uint _2568 = (_2535 * 40u) + 8u;
                            _2578 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2568)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2568 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2568 + 2u)).x));
                            uint _2581 = (_2535 * 40u) + 16u;
                            _2594 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2581)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2581 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2581 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2581 + 3u)).x));
                            uint _2597 = (_2535 * 40u) + 20u;
                            _2610 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2597)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2597 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2597 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2597 + 3u)).x));
                            uint _2613 = (_2535 * 40u) + 24u;
                            vec4 _2626 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2613)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2613 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2613 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2613 + 3u)).x));
                            uint _2632 = (_2535 * 40u) + 28u;
                            vec4 _2645 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2632)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2632 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2632 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2632 + 3u)).x));
                            _2657 = fma(_1817, _2645.z, fma(_1816, _2645.y, _2645.x * _1815)) + _2645.w;
                            _2658 = !((fma(_1817, _2626.z, fma(_1816, _2626.y, _2626.x * _1815)) + _2626.w) <= 0.0);
                            float frontier_phi_65_pred;
                            float frontier_phi_65_pred_1;
                            float frontier_phi_65_pred_2;
                            float frontier_phi_65_pred_3;
                            float frontier_phi_65_pred_4;
                            float frontier_phi_65_pred_5;
                            if (_2658)
                            {
                                float _2685 = _2550.x - _1815;
                                float _2686 = _2550.y - _1816;
                                float _2687 = _2550.z - _1817;
                                float _2688 = dot(vec3(_2685, _2686, _2687), vec3(_2685, _2686, _2687));
                                float _2691 = inversesqrt(_2688);
                                float _2692 = _2691 * _2685;
                                float _2693 = _2691 * _2686;
                                float _2694 = _2691 * _2687;
                                float _2698 = 1.0 - (_2688 / (_2551 * _2551));
                                float _3629 = isnan(0.0) ? _2698 : (isnan(_2698) ? 0.0 : max(_2698, 0.0));
                                float _2699 = isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0));
                                float _2703 = sqrt(_2688) * _2566.w;
                                float _2705 = 1.39999997615814208984375 / (_2703 + 1.39999997615814208984375);
                                float _2706 = _2705 * _2705;
                                float _2709 = ((1.0 - _2706) * dot(vec3(_2692, _2693, _2694), vec3(_399, _402, _405))) + _2706;
                                float _2712 = _2703 * _2703;
                                float _2716 = (fma(_1817, _2594.z, fma(_1816, _2594.y, _2594.x * _1815)) + _2594.w) / _2657;
                                float _2717 = (fma(_1817, _2610.z, fma(_1816, _2610.y, _2610.x * _1815)) + _2610.w) / _2657;
                                float _2721 = 1.0 - dot(vec2(_2716, _2717), vec2(_2716, _2717));
                                float _3645 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0));
                                float _2722 = isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0));
                                float _2723 = _2722 * (((isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : max(_2709, 0.0))) * _2699) / ((_2712 * 0.699999988079071044921875) + 1.0));
                                float _2735 = exp2(log2(1.0 / ((_2712 * 3.5) + 5.0)) * 0.25);
                                float _2736 = 1.0 - _475;
                                float _2743 = sqrt(1.0 - ((1.0 - (_2736 * _2736)) * (1.0 - (_2735 * _2735))));
                                float _2744 = _2743 * _2743;
                                float _2745 = _2744 * _2744;
                                float _2746 = _2692 - _2120;
                                float _2747 = _2693 - _2121;
                                float _2748 = _2694 - _2122;
                                float _2752 = inversesqrt(dot(vec3(_2746, _2747, _2748), vec3(_2746, _2747, _2748)));
                                float _2756 = dot(vec3(_399, _402, _405), vec3((-0.0) - _2120, (-0.0) - _2121, (-0.0) - _2122));
                                float _3656 = isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : max(_2756, 0.0));
                                float _2759 = isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0));
                                float _2760 = dot(vec3(_399, _402, _405), vec3(_2752 * _2746, _2752 * _2747, _2752 * _2748));
                                float _3667 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0));
                                float _2763 = isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0));
                                float _2767 = ((_2763 * _2763) * (_2745 + (-1.0))) + 1.0;
                                float _2768 = _2705 * _2744;
                                float _2769 = _2768 * _2768;
                                float _2775 = ((1.0 - _2769) * dot(vec3(_399, _402, _405), vec3(_2692, _2693, _2694))) + _2769;
                                float _3678 = isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0));
                                float _2776 = isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0));
                                float _2777 = 1.0 - _2744;
                                float _2787 = (0.5 / (((_2776 * ((_2759 * _2777) + _2744)) + 9.9999999392252902907785028219223e-09) + (((_2776 * _2777) + _2744) * _2759))) * _2776;
                                float _3689 = isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : max(_2787, 0.0));
                                float _2797 = (_2722 * _2699) * (((_2745 * 3.1415927410125732421875) * (isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0)))) / ((_2767 * _2767) * ((_2712 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_65_pred = _2723 * _2566.z;
                                frontier_phi_65_pred_1 = _2723 * _2566.y;
                                frontier_phi_65_pred_2 = _2723 * _2566.x;
                                frontier_phi_65_pred_3 = _2797 * _2578.z;
                                frontier_phi_65_pred_4 = _2797 * _2578.y;
                                frontier_phi_65_pred_5 = _2797 * _2578.x;
                            }
                            else
                            {
                                frontier_phi_65_pred = 0.0;
                                frontier_phi_65_pred_1 = 0.0;
                                frontier_phi_65_pred_2 = 0.0;
                                frontier_phi_65_pred_3 = 0.0;
                                frontier_phi_65_pred_4 = 0.0;
                                frontier_phi_65_pred_5 = 0.0;
                            }
                            _2806 = frontier_phi_65_pred;
                            _2805 = frontier_phi_65_pred_1;
                            _2804 = frontier_phi_65_pred_2;
                            _2803 = frontier_phi_65_pred_3;
                            _2802 = frontier_phi_65_pred_4;
                            _2801 = frontier_phi_65_pred_5;
                            _2508 = _2804 + _2521;
                            _2509 = _2805 + _2522;
                            _2510 = _2806 + _2523;
                            _2505 = _2801 + _2518;
                            _2506 = _2802 + _2519;
                            _2507 = _2803 + _2520;
                            if (_2525 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2518 = _2505;
                                _2519 = _2506;
                                _2520 = _2507;
                                _2521 = _2508;
                                _2522 = _2509;
                                _2523 = _2510;
                                _2524 = _2525;
                                continue;
                            }
                        }
                        frontier_phi_59_pred = _2510;
                        frontier_phi_59_pred_1 = _2509;
                        frontier_phi_59_pred_2 = _2508;
                        frontier_phi_59_pred_3 = _2507;
                        frontier_phi_59_pred_4 = _2506;
                        frontier_phi_59_pred_5 = _2505;
                    }
                    _2105 = frontier_phi_59_pred;
                    _2103 = frontier_phi_59_pred_1;
                    _2101 = frontier_phi_59_pred_2;
                    _2099 = frontier_phi_59_pred_3;
                    _2097 = frontier_phi_59_pred_4;
                    _2095 = frontier_phi_59_pred_5;
                    uint _2291 = _2290 + 1u;
                    if (_2291 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2284 = _2095;
                        _2285 = _2097;
                        _2286 = _2099;
                        _2287 = _2101;
                        _2288 = _2103;
                        _2289 = _2105;
                        _2290 = _2291;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_41_42_ladder = _2101;
                frontier_phi_41_42_ladder_1 = _2105;
                frontier_phi_41_42_ladder_2 = _2103;
                frontier_phi_41_42_ladder_3 = _2099;
                frontier_phi_41_42_ladder_4 = _2097;
                frontier_phi_41_42_ladder_5 = _2095;
            }
            else
            {
                frontier_phi_41_42_ladder = _1955;
                frontier_phi_41_42_ladder_1 = _1959;
                frontier_phi_41_42_ladder_2 = _1957;
                frontier_phi_41_42_ladder_3 = _1953;
                frontier_phi_41_42_ladder_4 = _1951;
                frontier_phi_41_42_ladder_5 = _1949;
            }
            _2094 = frontier_phi_41_42_ladder_5;
            _2096 = frontier_phi_41_42_ladder_4;
            _2098 = frontier_phi_41_42_ladder_3;
            _2100 = frontier_phi_41_42_ladder;
            _2102 = frontier_phi_41_42_ladder_2;
            _2104 = frontier_phi_41_42_ladder_1;
        }
        float _2109 = isnan(1.0) ? _459 : (isnan(_459) ? 1.0 : min(_459, 1.0));
        _1874 = (_2109 * _2100) + _1590;
        _1876 = (_2109 * _2102) + _1591;
        _1878 = (_2109 * _2104) + _1592;
        _1880 = ((_2094 * _444) * _2109) + _1757;
        _1882 = ((_2096 * _446) * _2109) + _1758;
        _1884 = ((_2098 * _447) * _2109) + _1759;
    }
    else
    {
        _1874 = _1590;
        _1876 = _1591;
        _1878 = _1592;
        _1880 = _1757;
        _1882 = _1758;
        _1884 = _1759;
    }
    float _3705 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _3716 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _3727 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    uint _1904 = _418 + 6u;
    float _1912 = _377 / cbSceneParam._m0[86u].x;
    float _1913 = _378 / cbSceneParam._m0[86u].y;
    vec4 _1927 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1912, _1913, (log2((isnan(cbSceneParam._m0[77u].w) ? _309 : (isnan(_309) ? cbSceneParam._m0[77u].w : min(_309, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1929 = _1927.x;
    float _1930 = _1927.y;
    float _1931 = _1927.z;
    float _1932 = _1927.w;
    float _2013;
    float _2015;
    float _2017;
    float _2019;
    if (_309 > cbSceneParam._m0[78u].w)
    {
        float _1974 = isnan(_309) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _309 : min(cbSceneParam._m0[80u].w, _309));
        float _1975 = _1974 / _309;
        float _1986 = _1975 * _362;
        float _1987 = _363 * _1975;
        float _1988 = (-0.0) - _1987;
        float _1990 = _1975 * _364;
        float _1992 = (cbSceneParam._m0[77u].w * _1988) / _1974;
        float _1993 = _1992 + cbSceneParam._m0[79u].w;
        float _1994 = cbSceneParam._m0[79u].w - _1987;
        float _2000 = sqrt(((_1986 * _1986) + (_1987 * _1987)) + (_1990 * _1990));
        float _2003 = (1.0 - (cbSceneParam._m0[77u].w / _1974)) * _2000;
        float _2009 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2011 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2220;
        if (abs((_1988 - _1992) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2220 = ((((_1993 > 0.0) ? exp2(_2009 * _1993) : (2.0 - exp2(_2011 * _1993))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2003;
        }
        else
        {
            float _2155 = 1.0 / cbSceneParam._m0[80u].x;
            float _2156 = isnan(_1994) ? _1993 : (isnan(_1993) ? _1994 : max(_1993, _1994));
            float _2157 = isnan(_1994) ? _1993 : (isnan(_1993) ? _1994 : min(_1993, _1994));
            float _2166 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : min(_2156, 0.0));
            float _2167 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : min(_2157, 0.0));
            _2220 = ((abs(_2000 / _1988) * cbSceneParam._m0[80u].y) * ((((_2166 - _2167) * 2.0) - ((exp2(_2009 * (isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0)))) - exp2(_2009 * (isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0))))) * _2155)) - ((exp2(_2011 * _2166) - exp2(_2011 * _2167)) * _2155))) + (_2003 * cbSceneParam._m0[80u].z);
        }
        vec4 _2222 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1912, _1913, 1.0), 0.0);
        float _2231 = exp2((_2220 * (-1.44269502162933349609375)) * (1.0 - _2222.w));
        float _2232 = log2(_2231);
        float _2248 = log2(_1932);
        _2013 = (exp2(_2248 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2232 * cbSceneParam._m0[78u].x)) * _2222.x) / cbSceneParam._m0[78u].x)) + _1929;
        _2015 = (exp2(_2248 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2232 * cbSceneParam._m0[78u].y)) * _2222.y) / cbSceneParam._m0[78u].y)) + _1930;
        _2017 = (exp2(_2248 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2232 * cbSceneParam._m0[78u].z)) * _2222.z) / cbSceneParam._m0[78u].z)) + _1931;
        _2019 = _2231 * _1932;
    }
    else
    {
        _2013 = _1929;
        _2015 = _1930;
        _2017 = _1931;
        _2019 = _1932;
    }
    float _2031 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2032 = _2031 == 3.0;
    float _2033 = log2(_2019);
    float _2040 = exp2(_2033 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0))) * (_1874 + ((isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0))) * _459))) + ((_1880 + ((isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0))) * _1269)) * cbPerFrame._m0[3u].x));
    float _2041 = exp2(_2033 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0))) * (_1876 + ((isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0))) * _459))) + ((_1882 + ((isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0))) * _1269)) * cbPerFrame._m0[3u].x));
    float _2042 = exp2(_2033 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0))) * (_1878 + ((isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0))) * _459))) + ((_1884 + ((isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0))) * _1269)) * cbPerFrame._m0[3u].x));
    float _2051 = (_2031 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2051 * (_2032 ? _2040 : (_2040 + (cbSceneParam._m0[72u].w * _2013)));
    SV_Target.y = _2051 * (_2032 ? _2041 : (_2041 + (cbSceneParam._m0[72u].w * _2015)));
    SV_Target.z = _2051 * (_2032 ? _2042 : (_2042 + (cbSceneParam._m0[72u].w * _2017)));
    SV_Target.w = cbInstanceData._m0[_1904].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1904].w;
}


