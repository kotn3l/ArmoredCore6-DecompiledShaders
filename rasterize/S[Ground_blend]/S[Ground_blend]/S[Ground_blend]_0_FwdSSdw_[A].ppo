#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_Ground_blend_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D S_Ground_blend_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D S_Ground_blend_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _975;
float _3117;
float _3118;
float _3119;
float _3120;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _194 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _201 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _208 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _256 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _266 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _256);
    float _267 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _256);
    float _268 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _256);
    vec4 _286 = texture(sampler2D(S_Ground_blend_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _293 = _286.x * cbMtdParam._m0[9u].x;
    float _294 = _286.y * cbMtdParam._m0[9u].y;
    float _295 = _286.z * cbMtdParam._m0[9u].z;
    float _304 = sqrt(((_266 * _266) + (_267 * _267)) + (_268 * _268));
    float _307 = cbMtdParam._m0[10u].z - cbMtdParam._m0[10u].y;
    float _309 = (_304 - cbMtdParam._m0[10u].y) / (isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0)));
    float _3134 = isnan(0.0) ? _309 : (isnan(_309) ? 0.0 : max(_309, 0.0));
    float _317 = cbMtdParam._m0[11u].x - cbMtdParam._m0[10u].w;
    float _319 = (_304 - cbMtdParam._m0[10u].w) / (isnan(0.0) ? _317 : (isnan(_317) ? 0.0 : max(_317, 0.0)));
    float _3150 = isnan(0.0) ? _319 : (isnan(_319) ? 0.0 : max(_319, 0.0));
    vec4 _331 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _333 = _331.x;
    float _357 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _333)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _333))) - POSITION_1.w) / cbMtdParam._m0[10u].x;
    float _3161 = isnan(0.0) ? _357 : (isnan(_357) ? 0.0 : max(_357, 0.0));
    float _363 = gl_FragCoord.x * 0.125;
    float _365 = gl_FragCoord.y * 0.125;
    vec4 _367 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_363, _365));
    float _375 = float(((((_286.w * TEXCOORD_1.z) * (isnan(1.0) ? _3134 : (isnan(_3134) ? 1.0 : min(_3134, 1.0)))) * (1.0 - (isnan(1.0) ? _3150 : (isnan(_3150) ? 1.0 : min(_3150, 1.0))))) * (isnan(1.0) ? _3161 : (isnan(_3161) ? 1.0 : min(_3161, 1.0)))) >= ((_367.w * 0.9900000095367431640625) + 0.00999999977648258209228515625));
    vec4 _387 = texture(sampler2D(S_Ground_blend_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[2u].w));
    float _389 = _387.x;
    vec4 _401 = texture(sampler2D(S_Ground_blend_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _405 = _401.z;
    float _409 = (_401.x * 2.0) + (-1.0);
    float _411 = (_401.y * 2.0) + (-1.0);
    float _412 = dot(vec2(_409, _411), vec2(_409, _411));
    float _3172 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
    float _417 = sqrt(1.0 - (isnan(1.0) ? _3172 : (isnan(_3172) ? 1.0 : min(_3172, 1.0))));
    float _420 = fma(_417, _201 * NORMAL.x, fma(_411, _208 * TANGENT.x, (_194 * _186) * _409));
    float _423 = fma(_417, _201 * NORMAL.y, fma(_411, _208 * TANGENT.y, (_194 * _187) * _409));
    float _426 = fma(_417, _201 * NORMAL.z, fma(_411, _208 * TANGENT.z, (_194 * _188) * _409));
    float _430 = inversesqrt(dot(vec3(_420, _423, _426), vec3(_420, _423, _426)));
    float _431 = _430 * _420;
    float _432 = _430 * _423;
    float _433 = _430 * _426;
    float _3183 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _434 = isnan(1.0) ? _3183 : (isnan(_3183) ? 1.0 : min(_3183, 1.0));
    float _3194 = isnan(0.0) ? _293 : (isnan(_293) ? 0.0 : max(_293, 0.0));
    float _3205 = isnan(0.0) ? _294 : (isnan(_294) ? 0.0 : max(_294, 0.0));
    float _3216 = isnan(0.0) ? _295 : (isnan(_295) ? 0.0 : max(_295, 0.0));
    float _3227 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _438 = isnan(1.0) ? _3227 : (isnan(_3227) ? 1.0 : min(_3227, 1.0));
    float _452 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _492 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _501 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _492);
    float _502 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _492);
    float _503 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _492);
    float _507 = inversesqrt(dot(vec3(_501, _502, _503), vec3(_501, _502, _503)));
    float _508 = _501 * _507;
    float _509 = _502 * _507;
    float _510 = _503 * _507;
    vec4 _511 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_363, _365));
    float _513 = _511.w;
    float _518 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _519 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _540 = fma(_433, cbSceneParam._m0[5u].z, fma(_432, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _431));
    float _543 = fma(_433, cbSceneParam._m0[6u].z, fma(_432, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _431));
    float _546 = fma(_433, cbSceneParam._m0[7u].z, fma(_432, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _431));
    uint _559 = uint(roundEven(NORMAL.w)) * 13u;
    uint _561 = _559 + 9u;
    uint _562 = _561 + uint(cbMatDynParam._m0[0u].w);
    float _568 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3194 : (isnan(_3194) ? 1.0 : min(_3194, 1.0)))) * cbInstanceData._m0[_562].x;
    float _569 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3205 : (isnan(_3205) ? 1.0 : min(_3205, 1.0)))) * cbInstanceData._m0[_562].y;
    float _570 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3216 : (isnan(_3216) ? 1.0 : min(_3216, 1.0)))) * cbInstanceData._m0[_562].z;
    float _3238 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _571 = isnan(1.0) ? _3238 : (isnan(_3238) ? 1.0 : min(_3238, 1.0));
    float _3249 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _572 = isnan(1.0) ? _3249 : (isnan(_3249) ? 1.0 : min(_3249, 1.0));
    float _3260 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _573 = isnan(1.0) ? _3260 : (isnan(_3260) ? 1.0 : min(_3260, 1.0));
    float _574 = 1.0 - _438;
    float _575 = _571 * _574;
    float _576 = _572 * _574;
    float _577 = _573 * _574;
    float _582 = (_571 + (-0.039999999105930328369140625)) * _438;
    float _583 = (_572 + (-0.039999999105930328369140625)) * _438;
    float _584 = (_573 + (-0.039999999105930328369140625)) * _438;
    float _585 = _582 + 0.039999999105930328369140625;
    float _587 = _583 + 0.039999999105930328369140625;
    float _588 = _584 + 0.039999999105930328369140625;
    vec4 _597 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _518, cbSceneParam._m0[86u].y * _519));
    float _600 = _597.x * TEXCOORD_1.w;
    float _601 = dot(vec3(_431, _432, _433), vec3(_508, _509, _510));
    float _604 = _601 * 2.0;
    float _608 = (_604 * _431) - _508;
    float _609 = (_604 * _432) - _509;
    float _610 = (_604 * _433) - _510;
    float _614 = abs(dot(vec3(_508, _509, _510), vec3(_431, _432, _433)));
    float _3271 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _616 = sqrt(_434);
    float _629 = exp2((_616 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3271 : (isnan(_3271) ? 1.0 : min(_3271, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_616 * 3.0));
    float _635 = (1.0 - _629) * ((_616 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _636 = _629 * _616;
    float _664 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _668 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _672 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _974;
    float _976;
    float _977;
    float _978;
    float _979;
    float _980;
    float _981;
    float _982;
    float _983;
    float _984;
    float _985;
    float _986;
    float _987;
    float _988;
    float _989;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _699 = fma(_672, cbModelParam._m0[26u].z, fma(_668, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _664));
        float _703 = fma(_672, cbModelParam._m0[27u].z, fma(_668, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _664));
        float _707 = fma(_672, cbModelParam._m0[28u].z, fma(_668, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _664));
        float _732 = _664 + _431;
        float _733 = _668 + _432;
        float _734 = _672 + _433;
        float _744 = fma(_734, cbModelParam._m0[26u].z, fma(_733, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _732)) - _699;
        float _745 = fma(_734, cbModelParam._m0[27u].z, fma(_733, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _732)) - _703;
        float _746 = fma(_734, cbModelParam._m0[28u].z, fma(_733, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _732)) - _707;
        float _750 = inversesqrt(dot(vec3(_744, _745, _746), vec3(_744, _745, _746)));
        float _763 = ((_750 * _744) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_699 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _764 = ((_750 * _745) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_703 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _765 = ((_750 * _746) / cbModelParam._m0[34u].z) + ((((((_707 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _768 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_763, _764, _765), 0.0);
        vec4 _775 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_763, _764, _765), 0.0);
        vec4 _782 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_763, _764, _765), 0.0);
        vec4 _789 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_763, _764, _765), 0.0);
        float _802 = exp2((_768.w + (-0.5)) * 20.0) * 2.0;
        float _803 = _802 * (_768.x + (-0.5));
        float _804 = _802 * (_768.y + (-0.5));
        float _805 = _802 * (_768.z + (-0.5));
        float _812 = exp2((_775.w + (-0.5)) * 20.0) * 2.0;
        float _813 = _812 * (_775.x + (-0.5));
        float _814 = _812 * (_775.y + (-0.5));
        float _815 = _812 * (_775.z + (-0.5));
        float _822 = exp2((_782.w + (-0.5)) * 20.0) * 2.0;
        float _823 = _822 * (_782.x + (-0.5));
        float _824 = _822 * (_782.y + (-0.5));
        float _825 = _822 * (_782.z + (-0.5));
        float _832 = exp2((_789.w + (-0.5)) * 20.0) * 2.0;
        float _833 = _832 * (_789.x + (-0.5));
        float _834 = _832 * (_789.y + (-0.5));
        float _835 = _832 * (_789.z + (-0.5));
        float _836 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
        float _837 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
        float _838 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
        float _839 = _803 * 0.5;
        float _840 = _813 * 0.5;
        float _841 = _823 * 0.5;
        float _842 = dot(vec3(_839, _840, _841), vec3(_839, _840, _841));
        float _847 = (_842 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_842);
        float _856 = (dot(vec3(_431, _432, _433), vec3(_847 * _839, _847 * _840, _847 * _841)) + 1.0) * 0.5;
        float _3297 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
        float _866 = sqrt(((_840 * _840) + (_839 * _839)) + (_841 * _841)) / (_836 + 9.9999997473787516355514526367188e-06);
        float _3308 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
        float _867 = isnan(1.0) ? _3308 : (isnan(_3308) ? 1.0 : min(_3308, 1.0));
        float _868 = _867 * 2.0;
        float _872 = (1.0 - _867) / (_867 + 1.0);
        float _3319 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
        float _873 = isnan(1.0) ? _3319 : (isnan(_3319) ? 1.0 : min(_3319, 1.0));
        float _882 = ((((1.0 - _873) * (_868 + 2.0)) * exp2(log2(isnan(1.0) ? _3297 : (isnan(_3297) ? 1.0 : min(_3297, 1.0))) * (_868 + 1.0))) + _873) * _836;
        float _883 = _804 * 0.5;
        float _884 = _814 * 0.5;
        float _885 = _824 * 0.5;
        float _886 = dot(vec3(_883, _884, _885), vec3(_883, _884, _885));
        float _891 = (_886 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_886);
        float _899 = (dot(vec3(_431, _432, _433), vec3(_891 * _883, _891 * _884, _891 * _885)) + 1.0) * 0.5;
        float _3330 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
        float _908 = sqrt(((_884 * _884) + (_883 * _883)) + (_885 * _885)) / (_837 + 9.9999997473787516355514526367188e-06);
        float _3341 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
        float _909 = isnan(1.0) ? _3341 : (isnan(_3341) ? 1.0 : min(_3341, 1.0));
        float _910 = _909 * 2.0;
        float _914 = (1.0 - _909) / (_909 + 1.0);
        float _3352 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
        float _915 = isnan(1.0) ? _3352 : (isnan(_3352) ? 1.0 : min(_3352, 1.0));
        float _924 = ((((1.0 - _915) * (_910 + 2.0)) * exp2(log2(isnan(1.0) ? _3330 : (isnan(_3330) ? 1.0 : min(_3330, 1.0))) * (_910 + 1.0))) + _915) * _837;
        float _925 = _805 * 0.5;
        float _926 = _815 * 0.5;
        float _927 = _825 * 0.5;
        float _928 = dot(vec3(_925, _926, _927), vec3(_925, _926, _927));
        float _933 = (_928 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_928);
        float _941 = (dot(vec3(_431, _432, _433), vec3(_933 * _925, _933 * _926, _933 * _927)) + 1.0) * 0.5;
        float _3363 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
        float _950 = sqrt(((_926 * _926) + (_925 * _925)) + (_927 * _927)) / (_838 + 9.9999997473787516355514526367188e-06);
        float _3374 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        float _951 = isnan(1.0) ? _3374 : (isnan(_3374) ? 1.0 : min(_3374, 1.0));
        float _952 = _951 * 2.0;
        float _956 = (1.0 - _951) / (_951 + 1.0);
        float _3385 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        float _957 = isnan(1.0) ? _3385 : (isnan(_3385) ? 1.0 : min(_3385, 1.0));
        float _966 = ((((1.0 - _957) * (_952 + 2.0)) * exp2(log2(isnan(1.0) ? _3363 : (isnan(_3363) ? 1.0 : min(_3363, 1.0))) * (_952 + 1.0))) + _957) * _838;
        _974 = _805;
        _976 = _804;
        _977 = _803;
        _978 = _815;
        _979 = _814;
        _980 = _813;
        _981 = _825;
        _982 = _824;
        _983 = _823;
        _984 = _838;
        _985 = _837;
        _986 = _836;
        _987 = cbModelParam._m0[36u].z * (isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0)));
        _988 = cbModelParam._m0[36u].z * (isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0)));
        _989 = cbModelParam._m0[36u].z * (isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0)));
    }
    else
    {
        _974 = _975;
        _976 = _975;
        _977 = _975;
        _978 = _975;
        _979 = _975;
        _980 = _975;
        _981 = _975;
        _982 = _975;
        _983 = _975;
        _984 = _975;
        _985 = _975;
        _986 = _975;
        _987 = 0.0;
        _988 = 0.0;
        _989 = 0.0;
    }
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1015 = fma(_672, cbModelParam._m0[30u].z, fma(_668, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _664));
        float _1019 = fma(_672, cbModelParam._m0[31u].z, fma(_668, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _664));
        float _1023 = fma(_672, cbModelParam._m0[32u].z, fma(_668, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _664));
        float _1046 = _664 + _431;
        float _1047 = _668 + _432;
        float _1048 = _672 + _433;
        float _1058 = fma(_1048, cbModelParam._m0[30u].z, fma(_1047, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1046)) - _1015;
        float _1059 = fma(_1048, cbModelParam._m0[31u].z, fma(_1047, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1046)) - _1019;
        float _1060 = fma(_1048, cbModelParam._m0[32u].z, fma(_1047, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1046)) - _1023;
        float _1064 = inversesqrt(dot(vec3(_1058, _1059, _1060), vec3(_1058, _1059, _1060)));
        float _1077 = ((_1064 * _1058) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1015 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1078 = ((_1064 * _1059) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1019 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1079 = ((_1064 * _1060) / cbModelParam._m0[35u].z) + ((((((_1023 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1081 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1077, _1078, _1079), 0.0);
        vec4 _1088 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1077, _1078, _1079), 0.0);
        vec4 _1095 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1077, _1078, _1079), 0.0);
        vec4 _1102 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1077, _1078, _1079), 0.0);
        float _1114 = exp2((_1081.w + (-0.5)) * 20.0) * 2.0;
        float _1115 = _1114 * (_1081.x + (-0.5));
        float _1116 = _1114 * (_1081.y + (-0.5));
        float _1117 = _1114 * (_1081.z + (-0.5));
        float _1124 = exp2((_1088.w + (-0.5)) * 20.0) * 2.0;
        float _1125 = _1124 * (_1088.x + (-0.5));
        float _1126 = _1124 * (_1088.y + (-0.5));
        float _1127 = _1124 * (_1088.z + (-0.5));
        float _1134 = exp2((_1095.w + (-0.5)) * 20.0) * 2.0;
        float _1135 = _1134 * (_1095.x + (-0.5));
        float _1136 = _1134 * (_1095.y + (-0.5));
        float _1137 = _1134 * (_1095.z + (-0.5));
        float _1144 = exp2((_1102.w + (-0.5)) * 20.0) * 2.0;
        float _1145 = _1144 * (_1102.x + (-0.5));
        float _1146 = _1144 * (_1102.y + (-0.5));
        float _1147 = _1144 * (_1102.z + (-0.5));
        float _1148 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1149 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1150 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1151 = _1115 * 0.5;
        float _1152 = _1125 * 0.5;
        float _1153 = _1135 * 0.5;
        float _1154 = dot(vec3(_1151, _1152, _1153), vec3(_1151, _1152, _1153));
        float _1159 = (_1154 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1154);
        float _1167 = (dot(vec3(_431, _432, _433), vec3(_1159 * _1151, _1159 * _1152, _1159 * _1153)) + 1.0) * 0.5;
        float _3426 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1176 = sqrt(((_1152 * _1152) + (_1151 * _1151)) + (_1153 * _1153)) / (_1148 + 9.9999997473787516355514526367188e-06);
        float _3437 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1177 = isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0));
        float _1178 = _1177 * 2.0;
        float _1182 = (1.0 - _1177) / (_1177 + 1.0);
        float _3448 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1183 = isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0));
        float _1192 = ((((1.0 - _1183) * (_1178 + 2.0)) * exp2(log2(isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0))) * (_1178 + 1.0))) + _1183) * _1148;
        float _1193 = _1116 * 0.5;
        float _1194 = _1126 * 0.5;
        float _1195 = _1136 * 0.5;
        float _1196 = dot(vec3(_1193, _1194, _1195), vec3(_1193, _1194, _1195));
        float _1201 = (_1196 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1196);
        float _1209 = (dot(vec3(_431, _432, _433), vec3(_1201 * _1193, _1201 * _1194, _1201 * _1195)) + 1.0) * 0.5;
        float _3459 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1218 = sqrt(((_1194 * _1194) + (_1193 * _1193)) + (_1195 * _1195)) / (_1149 + 9.9999997473787516355514526367188e-06);
        float _3470 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1219 = isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0));
        float _1220 = _1219 * 2.0;
        float _1224 = (1.0 - _1219) / (_1219 + 1.0);
        float _3481 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1225 = isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0));
        float _1234 = ((((1.0 - _1225) * (_1220 + 2.0)) * exp2(log2(isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0))) * (_1220 + 1.0))) + _1225) * _1149;
        float _1235 = _1117 * 0.5;
        float _1236 = _1127 * 0.5;
        float _1237 = _1137 * 0.5;
        float _1238 = dot(vec3(_1235, _1236, _1237), vec3(_1235, _1236, _1237));
        float _1243 = (_1238 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1238);
        float _1251 = (dot(vec3(_431, _432, _433), vec3(_1243 * _1235, _1243 * _1236, _1243 * _1237)) + 1.0) * 0.5;
        float _3492 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1260 = sqrt(((_1236 * _1236) + (_1235 * _1235)) + (_1237 * _1237)) / (_1150 + 9.9999997473787516355514526367188e-06);
        float _3503 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1261 = isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0));
        float _1262 = _1261 * 2.0;
        float _1266 = (1.0 - _1261) / (_1261 + 1.0);
        float _3514 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1267 = isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0));
        float _1276 = ((((1.0 - _1267) * (_1262 + 2.0)) * exp2(log2(isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0))) * (_1262 + 1.0))) + _1267) * _1150;
        _1284 = _1117;
        _1285 = _1116;
        _1286 = _1115;
        _1287 = _1127;
        _1288 = _1126;
        _1289 = _1125;
        _1290 = _1137;
        _1291 = _1136;
        _1292 = _1135;
        _1293 = _1150;
        _1294 = _1149;
        _1295 = _1148;
        _1296 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0)));
        _1297 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0)));
        _1298 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0)));
    }
    else
    {
        _1284 = _975;
        _1285 = _975;
        _1286 = _975;
        _1287 = _975;
        _1288 = _975;
        _1289 = _975;
        _1290 = _975;
        _1291 = _975;
        _1292 = _975;
        _1293 = _975;
        _1294 = _975;
        _1295 = _975;
        _1296 = 0.0;
        _1297 = 0.0;
        _1298 = 0.0;
    }
    float _1308 = (cbModelParam._m0[1u].x * (_1296 - _987)) + _987;
    float _1309 = (cbModelParam._m0[1u].x * (_1297 - _988)) + _988;
    float _1310 = (cbModelParam._m0[1u].x * (_1298 - _989)) + _989;
    float _1331 = fma(_1310, cbSceneParam._m0[89u].z, fma(_1309, cbSceneParam._m0[89u].y, _1308 * cbSceneParam._m0[89u].x));
    float _1334 = fma(_1310, cbSceneParam._m0[90u].z, fma(_1309, cbSceneParam._m0[90u].y, _1308 * cbSceneParam._m0[90u].x));
    float _1337 = fma(_1310, cbSceneParam._m0[91u].z, fma(_1309, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1308));
    float _1352 = _608 * 0.5;
    float _1353 = _609 * 0.5;
    float _1354 = _610 * 0.5;
    float _1355 = dot(vec4(_1352, _1353, _1354, 1.0), vec4(_1286, _1289, _1292, _1295));
    float _1358 = dot(vec4(_1352, _1353, _1354, 1.0), vec4(_1285, _1288, _1291, _1294));
    float _1361 = dot(vec4(_1352, _1353, _1354, 1.0), vec4(_1284, _1287, _1290, _1293));
    float _1395;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1368 = dot(vec4(_1352, _1353, _1354, 1.0), vec4(_974, _978, _981, _984));
        float _1372 = dot(vec4(_1352, _1353, _1354, 1.0), vec4(_976, _979, _982, _985));
        float _1376 = dot(vec4(_1352, _1353, _1354, 1.0), vec4(_977, _980, _983, _986));
        float _1383 = dot(vec4(cbModelParam._m0[39u]), vec4(_1352, _1353, _1354, 1.0));
        _1395 = dot(vec3(isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0)), isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0)), isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1383) ? 0.0 : (isnan(0.0) ? _1383 : max(0.0, _1383))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1395 = 1.0;
    }
    float _1406;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1397 = dot(vec4(cbModelParam._m0[40u]), vec4(_1352, _1353, _1354, 1.0));
        _1406 = dot(vec3(isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0)), isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0)), isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1397) ? 0.0 : (isnan(0.0) ? _1397 : max(0.0, _1397))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1406 = 1.0;
    }
    float _1410 = (_1406 * cbModelParam._m0[1u].x) + (_1395 * (1.0 - cbModelParam._m0[1u].x));
    float _1420 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _434);
    float _1421 = isnan(_1420) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1420 : min(cbModelParam._m0[25u].z, _1420));
    float _1503;
    float _1505;
    float _1507;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1470 = fma(_672, cbModelParam._m0[13u].z, fma(_668, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _664)) + cbModelParam._m0[13u].w;
        float _1474 = fma(_672, cbModelParam._m0[14u].z, fma(_668, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _664)) + cbModelParam._m0[14u].w;
        float _1478 = fma(_672, cbModelParam._m0[15u].z, fma(_668, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _664)) + cbModelParam._m0[15u].w;
        float _1481 = fma(_610, cbModelParam._m0[13u].z, fma(_609, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _608));
        float _1484 = fma(_610, cbModelParam._m0[14u].z, fma(_609, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _608));
        float _1487 = fma(_610, cbModelParam._m0[15u].z, fma(_609, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _608));
        float _1515;
        if (_1481 > 0.0)
        {
            _1515 = abs((1.0 - _1470) / _1481);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1481 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1470 + 1.0) / _1481);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1515 = frontier_phi_14_12_ladder;
        }
        float _1906;
        if (_1484 > 0.0)
        {
            _1906 = abs((1.0 - _1474) / _1484);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1484 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1474 + 1.0) / _1484);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1906 = frontier_phi_23_19_ladder;
        }
        float _2211;
        if (_1487 > 0.0)
        {
            _2211 = abs((1.0 - _1478) / _1487);
        }
        else
        {
            float frontier_phi_37_30_ladder;
            if (_1487 < 0.0)
            {
                frontier_phi_37_30_ladder = abs((_1478 + 1.0) / _1487);
            }
            else
            {
                frontier_phi_37_30_ladder = 5000.0;
            }
            _2211 = frontier_phi_37_30_ladder;
        }
        float _2213 = isnan(_1906) ? _1515 : (isnan(_1515) ? _1906 : min(_1515, _1906));
        float _2214 = isnan(_2211) ? _2213 : (isnan(_2213) ? _2211 : min(_2213, _2211));
        float _2218 = (_2214 * _1481) + _1470;
        float _2219 = (_2214 * _1484) + _1474;
        float _2220 = (_2214 * _1487) + _1478;
        float _2221 = _2214 * 9.9999997473787516355514526367188e-05;
        float _2222 = (-1.0) - _2221;
        float _2224 = _2221 + 1.0;
        float frontier_phi_13_37_ladder;
        float frontier_phi_13_37_ladder_1;
        float frontier_phi_13_37_ladder_2;
        if ((_2220 > _2224) || ((_2220 < _2222) || ((_2219 > _2224) || ((_2219 < _2222) || ((_2218 < _2222) || (_2218 > _2224))))))
        {
            frontier_phi_13_37_ladder = 0.0;
            frontier_phi_13_37_ladder_1 = 0.0;
            frontier_phi_13_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2362 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2220, cbModelParam._m0[9u].z, fma(_2219, cbModelParam._m0[9u].y, _2218 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2220, cbModelParam._m0[10u].z, fma(_2219, cbModelParam._m0[10u].y, _2218 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2220, cbModelParam._m0[11u].z, fma(_2219, cbModelParam._m0[11u].y, _2218 * cbModelParam._m0[11u].x))), _1421);
            frontier_phi_13_37_ladder = _2362.z * cbModelParam._m0[1u].y;
            frontier_phi_13_37_ladder_1 = _2362.y * cbModelParam._m0[1u].y;
            frontier_phi_13_37_ladder_2 = _2362.x * cbModelParam._m0[1u].y;
        }
        _1503 = frontier_phi_13_37_ladder_2;
        _1505 = frontier_phi_13_37_ladder_1;
        _1507 = frontier_phi_13_37_ladder;
    }
    else
    {
        vec4 _1491 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_608, _609, _610), _1421);
        _1503 = _1491.x * cbModelParam._m0[1u].y;
        _1505 = _1491.y * cbModelParam._m0[1u].y;
        _1507 = _1491.z * cbModelParam._m0[1u].y;
    }
    float _1511 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _434);
    float _1512 = isnan(_1511) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1511 : min(cbModelParam._m0[25u].w, _1511));
    float _1605;
    float _1607;
    float _1609;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1569 = fma(_672, cbModelParam._m0[21u].z, fma(_668, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _664)) + cbModelParam._m0[21u].w;
        float _1573 = fma(_672, cbModelParam._m0[22u].z, fma(_668, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _664)) + cbModelParam._m0[22u].w;
        float _1577 = fma(_672, cbModelParam._m0[23u].z, fma(_668, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _664)) + cbModelParam._m0[23u].w;
        float _1580 = fma(_610, cbModelParam._m0[21u].z, fma(_609, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _608));
        float _1583 = fma(_610, cbModelParam._m0[22u].z, fma(_609, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _608));
        float _1586 = fma(_610, cbModelParam._m0[23u].z, fma(_609, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _608));
        float _1911;
        if (_1580 > 0.0)
        {
            _1911 = abs((1.0 - _1569) / _1580);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1580 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1569 + 1.0) / _1580);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1911 = frontier_phi_25_21_ladder;
        }
        float _2237;
        if (_1583 > 0.0)
        {
            _2237 = abs((1.0 - _1573) / _1583);
        }
        else
        {
            float frontier_phi_39_32_ladder;
            if (_1583 < 0.0)
            {
                frontier_phi_39_32_ladder = abs((_1573 + 1.0) / _1583);
            }
            else
            {
                frontier_phi_39_32_ladder = 5000.0;
            }
            _2237 = frontier_phi_39_32_ladder;
        }
        float _2428;
        if (_1586 > 0.0)
        {
            _2428 = abs((1.0 - _1577) / _1586);
        }
        else
        {
            float frontier_phi_57_50_ladder;
            if (_1586 < 0.0)
            {
                frontier_phi_57_50_ladder = abs((_1577 + 1.0) / _1586);
            }
            else
            {
                frontier_phi_57_50_ladder = 5000.0;
            }
            _2428 = frontier_phi_57_50_ladder;
        }
        float _2430 = isnan(_2237) ? _1911 : (isnan(_1911) ? _2237 : min(_1911, _2237));
        float _2431 = isnan(_2428) ? _2430 : (isnan(_2430) ? _2428 : min(_2430, _2428));
        float _2435 = (_2431 * _1580) + _1569;
        float _2436 = (_2431 * _1583) + _1573;
        float _2437 = (_2431 * _1586) + _1577;
        float _2438 = _2431 * 9.9999997473787516355514526367188e-05;
        float _2439 = (-1.0) - _2438;
        float _2441 = _2438 + 1.0;
        float frontier_phi_22_57_ladder;
        float frontier_phi_22_57_ladder_1;
        float frontier_phi_22_57_ladder_2;
        if ((_2437 > _2441) || ((_2437 < _2439) || ((_2436 > _2441) || ((_2436 < _2439) || ((_2435 < _2439) || (_2435 > _2441))))))
        {
            frontier_phi_22_57_ladder = 0.0;
            frontier_phi_22_57_ladder_1 = 0.0;
            frontier_phi_22_57_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2681 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2437, cbModelParam._m0[17u].z, fma(_2436, cbModelParam._m0[17u].y, _2435 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2437, cbModelParam._m0[18u].z, fma(_2436, cbModelParam._m0[18u].y, _2435 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2437, cbModelParam._m0[19u].z, fma(_2436, cbModelParam._m0[19u].y, _2435 * cbModelParam._m0[19u].x))), _1512);
            frontier_phi_22_57_ladder = _2681.x * cbModelParam._m0[1u].z;
            frontier_phi_22_57_ladder_1 = _2681.z * cbModelParam._m0[1u].z;
            frontier_phi_22_57_ladder_2 = _2681.y * cbModelParam._m0[1u].z;
        }
        _1605 = frontier_phi_22_57_ladder;
        _1607 = frontier_phi_22_57_ladder_2;
        _1609 = frontier_phi_22_57_ladder_1;
    }
    else
    {
        vec4 _1589 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_608, _609, _610), _1512);
        _1605 = _1589.x * cbModelParam._m0[1u].z;
        _1607 = _1589.y * cbModelParam._m0[1u].z;
        _1609 = _1589.z * cbModelParam._m0[1u].z;
    }
    float _1622 = (((_635 * _585) + _636) * _600) * ((cbModelParam._m0[1u].w * (_1605 - _1503)) + _1503);
    float _1624 = (((_635 * _587) + _636) * _600) * ((cbModelParam._m0[1u].w * (_1607 - _1505)) + _1505);
    float _1626 = (((_635 * _588) + _636) * _600) * ((cbModelParam._m0[1u].w * (_1609 - _1507)) + _1507);
    float _1629 = fma(_1626, cbSceneParam._m0[89u].z, fma(_1624, cbSceneParam._m0[89u].y, _1622 * cbSceneParam._m0[89u].x));
    float _1632 = fma(_1626, cbSceneParam._m0[90u].z, fma(_1624, cbSceneParam._m0[90u].y, _1622 * cbSceneParam._m0[90u].x));
    float _1635 = fma(_1626, cbSceneParam._m0[91u].z, fma(_1624, cbSceneParam._m0[91u].y, _1622 * cbSceneParam._m0[91u].x));
    vec4 _1643 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_518, _519));
    float _1645 = _1643.w;
    float _1657 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1645);
    float _1658 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1645);
    float _1659 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1645);
    float _3640 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
    float _1660 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
    float _3651 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
    float _1661 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
    float _3662 = isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0));
    float _1662 = isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0));
    uvec4 _1666 = floatBitsToUint(cbInstanceData._m0[_559 + 5u]);
    uint _1668 = _1666.x * 14u;
    uint _1669 = _1668 + 13u;
    float _1674 = _600 + (-1.0);
    float _1677 = (cbLight._m0[_1669].x * _1674) + 1.0;
    float _1678 = (cbLight._m0[_1669].y * _1674) + 1.0;
    uint _1679 = _1668 + 5u;
    float _1685 = isnan(1.0) ? _1678 : (isnan(_1678) ? 1.0 : min(_1678, 1.0));
    uint _1689 = _1668 + 4u;
    float _1699 = isnan(1.0) ? _1677 : (isnan(_1677) ? 1.0 : min(_1677, 1.0));
    uint _1703 = _1668 | 1u;
    float _1714 = dot(vec3(cbLight._m0[_1668].xyz), vec3(_431, _432, _433));
    float _1717 = dot(vec3(cbLight._m0[_1703].xyz), vec3(_431, _432, _433));
    float _3683 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
    float _3694 = isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0));
    float _1722 = (isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0))) * 0.3183098733425140380859375;
    float _1724 = (isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0))) * 0.3183098733425140380859375;
    float _1731 = ((cbLight._m0[_1679].x * _1685) * _1724) + (((cbLight._m0[_1689].x * _1660) * _1699) * _1722);
    float _1732 = ((_1685 * cbLight._m0[_1679].y) * _1724) + (((cbLight._m0[_1689].y * _1661) * _1699) * _1722);
    float _1733 = ((_1685 * cbLight._m0[_1679].z) * _1724) + (((cbLight._m0[_1689].z * _1662) * _1699) * _1722);
    uint _1735 = _1668 + 8u;
    float _1748 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1668].w)) * _434) * 0.949999988079071044921875);
    float _1749 = _1748 * _1748;
    float _1750 = cbLight._m0[_1668].x + _508;
    float _1751 = cbLight._m0[_1668].y + _509;
    float _1752 = cbLight._m0[_1668].z + _510;
    float _1756 = inversesqrt(dot(vec3(_1750, _1751, _1752), vec3(_1750, _1751, _1752)));
    float _1757 = _1756 * _1750;
    float _1758 = _1756 * _1751;
    float _1759 = _1756 * _1752;
    float _1760 = dot(vec3(_431, _432, _433), vec3(cbLight._m0[_1668].xyz));
    float _3705 = isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0));
    float _1763 = isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0));
    float _3716 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _1764 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
    float _1765 = dot(vec3(_431, _432, _433), vec3(_1757, _1758, _1759));
    float _3727 = isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0));
    float _1768 = isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0));
    float _1769 = dot(vec3(cbLight._m0[_1668].xyz), vec3(_1757, _1758, _1759));
    float _3738 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
    float _1773 = _1749 * _1749;
    float _1777 = ((_1768 * _1768) * (_1773 + (-1.0))) + 1.0;
    float _1785 = exp2(log2(1.0 - (isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0)))) * 5.0);
    float _1786 = 0.959999978542327880859375 - _582;
    float _1788 = 0.959999978542327880859375 - _583;
    float _1789 = 0.959999978542327880859375 - _584;
    float _1796 = 1.0 - _1749;
    float _1807 = (0.5 / (((_1764 * ((_1763 * _1796) + _1749)) + 9.9999999392252902907785028219223e-09) + (((_1764 * _1796) + _1749) * _1763))) * _1763;
    float _3749 = isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0));
    float _1809 = (isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0))) * (_1773 / ((_1777 * _1777) * 3.141590118408203125));
    uint _1823 = _1668 + 9u;
    float _1834 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1703].w)) * _434) * 0.949999988079071044921875);
    float _1835 = _1834 * _1834;
    float _1836 = cbLight._m0[_1703].x + _508;
    float _1837 = cbLight._m0[_1703].y + _509;
    float _1838 = cbLight._m0[_1703].z + _510;
    float _1842 = inversesqrt(dot(vec3(_1836, _1837, _1838), vec3(_1836, _1837, _1838)));
    float _1843 = _1842 * _1836;
    float _1844 = _1842 * _1837;
    float _1845 = _1842 * _1838;
    float _1846 = dot(vec3(_431, _432, _433), vec3(cbLight._m0[_1703].xyz));
    float _3760 = isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0));
    float _1849 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
    float _1850 = dot(vec3(_431, _432, _433), vec3(_1843, _1844, _1845));
    float _3771 = isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0));
    float _1853 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
    float _1854 = dot(vec3(cbLight._m0[_1703].xyz), vec3(_1843, _1844, _1845));
    float _3782 = isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0));
    float _1858 = _1835 * _1835;
    float _1862 = ((_1853 * _1853) * (_1858 + (-1.0))) + 1.0;
    float _1869 = exp2(log2(1.0 - (isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0)))) * 5.0);
    float _1876 = 1.0 - _1835;
    float _1886 = (0.5 / (((_1764 * ((_1849 * _1876) + _1835)) + 9.9999999392252902907785028219223e-09) + (((_1764 * _1876) + _1835) * _1849))) * _1849;
    float _3793 = isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0));
    float _1888 = (isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0))) * (_1858 / ((_1862 * _1862) * 3.141590118408203125));
    float _1898 = (((((_1869 * _1786) + _585) * cbLight._m0[_1823].x) * _1888) * _1685) + ((((cbLight._m0[_1735].x * _1660) * ((_1785 * _1786) + _585)) * _1809) * _1699);
    float _1899 = (((((_1869 * _1788) + _587) * cbLight._m0[_1823].y) * _1888) * _1685) + ((((cbLight._m0[_1735].y * _1661) * ((_1785 * _1788) + _587)) * _1809) * _1699);
    float _1900 = (((((_1869 * _1789) + _588) * cbLight._m0[_1823].z) * _1888) * _1685) + ((((cbLight._m0[_1735].z * _1662) * ((_1785 * _1789) + _588)) * _1809) * _1699);
    float _2015;
    float _2017;
    float _2019;
    float _2021;
    float _2023;
    float _2025;
    if (_1666.y == 0u)
    {
        float _1955 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1956 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1955;
        float _1957 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1955;
        float _1958 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1955;
        uvec4 _1970 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1971 = _1970.x;
        uint _1982 = uint((float(_1970.y) * floor(float(uint(cbSceneParam._m0[85u].y * _519) / _1971))) + floor(float(uint(cbSceneParam._m0[85u].x * _518) / _1971)));
        float _1992 = (log2(_1958 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1993 = isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0));
        uint _1996 = uint(isnan(14.0) ? _1993 : (isnan(_1993) ? 14.0 : min(_1993, 14.0)));
        uvec4 _2001 = texelFetch(g_lightClusterGridBuffer, int(((_1996 << 2u) + (_1982 << 6u)) >> 2u));
        uint _2002 = _2001.x;
        uint _2003 = _1970.z;
        float _2090;
        float _2092;
        float _2094;
        float _2096;
        float _2098;
        float _2100;
        if (((((1u << ((_2003 >> 4u) & 15u)) + 4294967295u) & _2002) == 0u) || ((_2003 & 240u) == 0u))
        {
            _2090 = 0.0;
            _2092 = 0.0;
            _2094 = 0.0;
            _2096 = 0.0;
            _2098 = 0.0;
            _2100 = 0.0;
        }
        else
        {
            float _2091;
            float _2093;
            float _2095;
            float _2097;
            float _2099;
            float _2101;
            float _2274 = 0.0;
            float _2275 = 0.0;
            float _2276 = 0.0;
            float _2277 = 0.0;
            float _2278 = 0.0;
            float _2279 = 0.0;
            uint _2280 = 0u;
            uint _2289;
            bool _2290;
            for (;;)
            {
                _2289 = texelFetch(g_lightClassification, int((((_1996 << 5u) + (_1982 << 9u)) + (_2280 << 2u)) >> 2u)).x;
                _2290 = _2289 == 0u;
                float frontier_phi_52_pred;
                float frontier_phi_52_pred_1;
                float frontier_phi_52_pred_2;
                float frontier_phi_52_pred_3;
                float frontier_phi_52_pred_4;
                float frontier_phi_52_pred_5;
                if (_2290)
                {
                    frontier_phi_52_pred = _2278;
                    frontier_phi_52_pred_1 = _2279;
                    frontier_phi_52_pred_2 = _2277;
                    frontier_phi_52_pred_3 = _2276;
                    frontier_phi_52_pred_4 = _2275;
                    frontier_phi_52_pred_5 = _2274;
                }
                else
                {
                    float _2471;
                    float _2472;
                    float _2473;
                    float _2474;
                    float _2475;
                    float _2476;
                    uint _2477;
                    _2471 = _2274;
                    _2472 = _2275;
                    _2473 = _2276;
                    _2474 = _2277;
                    _2475 = _2278;
                    _2476 = _2279;
                    _2477 = _2289;
                    float _2371;
                    float _2372;
                    float _2373;
                    float _2374;
                    float _2375;
                    float _2376;
                    for (;;)
                    {
                        uint _2481 = uint(findLSB(_2477)) + (_2280 << 5u);
                        uint _2478 = (_2477 + 4294967295u) & _2477;
                        uint _2483 = _2481 * 48u;
                        vec4 _2497 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2483)).x, texelFetch(g_PointLightRenderingBuffer, int(_2483 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2483 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2483 + 3u)).x));
                        uint _2503 = (_2481 * 48u) + 4u;
                        vec4 _2516 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2503)).x, texelFetch(g_PointLightRenderingBuffer, int(_2503 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2503 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2503 + 3u)).x));
                        uint _2522 = (_2481 * 48u) + 8u;
                        vec3 _2533 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2522)).x, texelFetch(g_PointLightRenderingBuffer, int(_2522 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2522 + 2u)).x));
                        float _2537 = _2497.x - _1956;
                        float _2538 = _2497.y - _1957;
                        float _2539 = _2497.z - _1958;
                        float _2540 = dot(vec3(_2537, _2538, _2539), vec3(_2537, _2538, _2539));
                        float _2543 = inversesqrt(_2540);
                        float _2544 = _2543 * _2537;
                        float _2545 = _2543 * _2538;
                        float _2546 = _2543 * _2539;
                        float _2547 = dot(vec3(_540, _543, _546), vec3(_2544, _2545, _2546));
                        float _2552 = 1.0 - (_2540 * _2497.w);
                        float _3814 = isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : max(_2552, 0.0));
                        float _2553 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
                        float _2554 = sqrt(_2540) * _2516.w;
                        float _2557 = 1.39999997615814208984375 / (_2554 + 1.39999997615814208984375);
                        float _2558 = _2557 * _2557;
                        float _2561 = ((1.0 - _2558) * _2547) + _2558;
                        float _2564 = _2554 * _2554;
                        float _2568 = ((isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0))) * _2553) / ((_2564 * 0.699999988079071044921875) + 1.0);
                        float _2572 = (-0.0) - _1956;
                        float _2573 = (-0.0) - _1957;
                        float _2574 = (-0.0) - _1958;
                        float _2578 = inversesqrt(dot(vec3(_2572, _2573, _2574), vec3(_2572, _2573, _2574)));
                        float _2579 = _2578 * _2572;
                        float _2580 = _2578 * _2573;
                        float _2581 = _2578 * _2574;
                        float _2589 = exp2(log2(1.0 / ((_2564 * 3.5) + 5.0)) * 0.25);
                        float _2590 = 1.0 - _616;
                        float _2597 = sqrt(1.0 - ((1.0 - (_2590 * _2590)) * (1.0 - (_2589 * _2589))));
                        float _2598 = _2597 * _2597;
                        float _2599 = _2598 * _2598;
                        float _2600 = _2579 + _2544;
                        float _2601 = _2580 + _2545;
                        float _2602 = _2581 + _2546;
                        float _2606 = inversesqrt(dot(vec3(_2600, _2601, _2602), vec3(_2600, _2601, _2602)));
                        float _2610 = dot(vec3(_540, _543, _546), vec3(_2579, _2580, _2581));
                        float _3830 = isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : max(_2610, 0.0));
                        float _2613 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
                        float _2614 = dot(vec3(_540, _543, _546), vec3(_2606 * _2600, _2606 * _2601, _2606 * _2602));
                        float _3841 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0));
                        float _2617 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
                        float _2621 = ((_2617 * _2617) * (_2599 + (-1.0))) + 1.0;
                        float _2622 = _2557 * _2598;
                        float _2623 = _2622 * _2622;
                        float _2626 = ((1.0 - _2623) * _2547) + _2623;
                        float _3852 = isnan(0.0) ? _2626 : (isnan(_2626) ? 0.0 : max(_2626, 0.0));
                        float _2627 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
                        float _2628 = 1.0 - _2598;
                        float _2638 = (0.5 / (((_2627 * ((_2613 * _2628) + _2598)) + 9.9999999392252902907785028219223e-09) + (((_2627 * _2628) + _2598) * _2613))) * _2627;
                        float _3863 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0));
                        float _2649 = (((_2599 * 3.1415927410125732421875) * (isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0)))) / ((_2621 * _2621) * ((_2564 * 2.1991131305694580078125) + 3.141590118408203125))) * _2553;
                        _2374 = (_2568 * _2516.x) + _2474;
                        _2375 = (_2568 * _2516.y) + _2475;
                        _2376 = (_2568 * _2516.z) + _2476;
                        _2371 = (_2649 * _2533.x) + _2471;
                        _2372 = (_2649 * _2533.y) + _2472;
                        _2373 = (_2649 * _2533.z) + _2473;
                        if (_2478 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2471 = _2371;
                            _2472 = _2372;
                            _2473 = _2373;
                            _2474 = _2374;
                            _2475 = _2375;
                            _2476 = _2376;
                            _2477 = _2478;
                        }
                    }
                    frontier_phi_52_pred = _2375;
                    frontier_phi_52_pred_1 = _2376;
                    frontier_phi_52_pred_2 = _2374;
                    frontier_phi_52_pred_3 = _2373;
                    frontier_phi_52_pred_4 = _2372;
                    frontier_phi_52_pred_5 = _2371;
                }
                _2099 = frontier_phi_52_pred;
                _2101 = frontier_phi_52_pred_1;
                _2097 = frontier_phi_52_pred_2;
                _2095 = frontier_phi_52_pred_3;
                _2093 = frontier_phi_52_pred_4;
                _2091 = frontier_phi_52_pred_5;
                uint _2281 = _2280 + 1u;
                if (_2281 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2274 = _2091;
                    _2275 = _2093;
                    _2276 = _2095;
                    _2277 = _2097;
                    _2278 = _2099;
                    _2279 = _2101;
                    _2280 = _2281;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2090 = _2091;
            _2092 = _2093;
            _2094 = _2095;
            _2096 = _2097;
            _2098 = _2099;
            _2100 = _2101;
        }
        uvec4 _2104 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2105 = _2104.z;
        uint _2107 = (_2105 >> 8u) & 15u;
        float _2242;
        float _2244;
        float _2246;
        float _2248;
        float _2250;
        float _2252;
        if (((4294967295u << _2107) & _2002) == 0u)
        {
            _2242 = _2090;
            _2244 = _2092;
            _2246 = _2094;
            _2248 = _2096;
            _2250 = _2098;
            _2252 = _2100;
        }
        else
        {
            float _2267 = inversesqrt(dot(vec3(_1956, _1957, _1958), vec3(_1956, _1957, _1958)));
            float _2268 = _2267 * _1956;
            float _2269 = _2267 * _1957;
            float _2270 = _2267 * _1958;
            float frontier_phi_41_42_ladder;
            float frontier_phi_41_42_ladder_1;
            float frontier_phi_41_42_ladder_2;
            float frontier_phi_41_42_ladder_3;
            float frontier_phi_41_42_ladder_4;
            float frontier_phi_41_42_ladder_5;
            if (_2107 < ((_2105 >> 12u) & 15u))
            {
                float _2243;
                float _2245;
                float _2247;
                float _2249;
                float _2251;
                float _2253;
                float _2454 = _2090;
                float _2455 = _2092;
                float _2456 = _2094;
                float _2457 = _2096;
                float _2458 = _2098;
                float _2459 = _2100;
                uint _2460 = _2107;
                uint _2469;
                bool _2470;
                for (;;)
                {
                    _2469 = texelFetch(g_lightClassification, int((((_1996 << 5u) + (_1982 << 9u)) + (_2460 << 2u)) >> 2u)).x;
                    _2470 = _2469 == 0u;
                    float frontier_phi_66_pred;
                    float frontier_phi_66_pred_1;
                    float frontier_phi_66_pred_2;
                    float frontier_phi_66_pred_3;
                    float frontier_phi_66_pred_4;
                    float frontier_phi_66_pred_5;
                    if (_2470)
                    {
                        frontier_phi_66_pred = _2459;
                        frontier_phi_66_pred_1 = _2458;
                        frontier_phi_66_pred_2 = _2457;
                        frontier_phi_66_pred_3 = _2456;
                        frontier_phi_66_pred_4 = _2455;
                        frontier_phi_66_pred_5 = _2454;
                    }
                    else
                    {
                        float _2686;
                        float _2687;
                        float _2688;
                        float _2689;
                        float _2690;
                        float _2691;
                        float _2982;
                        float _2983;
                        float _2984;
                        float _2985;
                        float _2986;
                        float _2987;
                        float _2699 = _2454;
                        float _2700 = _2455;
                        float _2701 = _2456;
                        float _2702 = _2457;
                        float _2703 = _2458;
                        float _2704 = _2459;
                        uint _2705 = _2469;
                        uint _2706;
                        vec4 _2731;
                        float _2732;
                        vec4 _2747;
                        vec3 _2759;
                        vec4 _2775;
                        vec4 _2791;
                        float _2838;
                        bool _2839;
                        for (;;)
                        {
                            uint _2716 = ((_2460 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2705));
                            _2706 = (_2705 + 4294967295u) & _2705;
                            uint _2718 = _2716 * 40u;
                            _2731 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2718)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2718 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2718 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2718 + 3u)).x));
                            _2732 = _2731.w;
                            uint _2734 = (_2716 * 40u) + 4u;
                            _2747 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2734)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2734 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2734 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2734 + 3u)).x));
                            uint _2749 = (_2716 * 40u) + 8u;
                            _2759 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2749)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2749 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2749 + 2u)).x));
                            uint _2762 = (_2716 * 40u) + 16u;
                            _2775 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2762)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2762 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2762 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2762 + 3u)).x));
                            uint _2778 = (_2716 * 40u) + 20u;
                            _2791 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2778)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2778 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2778 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2778 + 3u)).x));
                            uint _2794 = (_2716 * 40u) + 24u;
                            vec4 _2807 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2794)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2794 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2794 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2794 + 3u)).x));
                            uint _2813 = (_2716 * 40u) + 28u;
                            vec4 _2826 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2813)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2813 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2813 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2813 + 3u)).x));
                            _2838 = fma(_1958, _2826.z, fma(_1957, _2826.y, _2826.x * _1956)) + _2826.w;
                            _2839 = !((fma(_1958, _2807.z, fma(_1957, _2807.y, _2807.x * _1956)) + _2807.w) <= 0.0);
                            float frontier_phi_72_pred;
                            float frontier_phi_72_pred_1;
                            float frontier_phi_72_pred_2;
                            float frontier_phi_72_pred_3;
                            float frontier_phi_72_pred_4;
                            float frontier_phi_72_pred_5;
                            if (_2839)
                            {
                                float _2866 = _2731.x - _1956;
                                float _2867 = _2731.y - _1957;
                                float _2868 = _2731.z - _1958;
                                float _2869 = dot(vec3(_2866, _2867, _2868), vec3(_2866, _2867, _2868));
                                float _2872 = inversesqrt(_2869);
                                float _2873 = _2872 * _2866;
                                float _2874 = _2872 * _2867;
                                float _2875 = _2872 * _2868;
                                float _2879 = 1.0 - (_2869 / (_2732 * _2732));
                                float _3874 = isnan(0.0) ? _2879 : (isnan(_2879) ? 0.0 : max(_2879, 0.0));
                                float _2880 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
                                float _2884 = sqrt(_2869) * _2747.w;
                                float _2886 = 1.39999997615814208984375 / (_2884 + 1.39999997615814208984375);
                                float _2887 = _2886 * _2886;
                                float _2890 = ((1.0 - _2887) * dot(vec3(_2873, _2874, _2875), vec3(_540, _543, _546))) + _2887;
                                float _2893 = _2884 * _2884;
                                float _2897 = (fma(_1958, _2775.z, fma(_1957, _2775.y, _2775.x * _1956)) + _2775.w) / _2838;
                                float _2898 = (fma(_1958, _2791.z, fma(_1957, _2791.y, _2791.x * _1956)) + _2791.w) / _2838;
                                float _2902 = 1.0 - dot(vec2(_2897, _2898), vec2(_2897, _2898));
                                float _3890 = isnan(0.0) ? _2902 : (isnan(_2902) ? 0.0 : max(_2902, 0.0));
                                float _2903 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
                                float _2904 = _2903 * (((isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : max(_2890, 0.0))) * _2880) / ((_2893 * 0.699999988079071044921875) + 1.0));
                                float _2916 = exp2(log2(1.0 / ((_2893 * 3.5) + 5.0)) * 0.25);
                                float _2917 = 1.0 - _616;
                                float _2924 = sqrt(1.0 - ((1.0 - (_2917 * _2917)) * (1.0 - (_2916 * _2916))));
                                float _2925 = _2924 * _2924;
                                float _2926 = _2925 * _2925;
                                float _2927 = _2873 - _2268;
                                float _2928 = _2874 - _2269;
                                float _2929 = _2875 - _2270;
                                float _2933 = inversesqrt(dot(vec3(_2927, _2928, _2929), vec3(_2927, _2928, _2929)));
                                float _2937 = dot(vec3(_540, _543, _546), vec3((-0.0) - _2268, (-0.0) - _2269, (-0.0) - _2270));
                                float _3901 = isnan(0.0) ? _2937 : (isnan(_2937) ? 0.0 : max(_2937, 0.0));
                                float _2940 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
                                float _2941 = dot(vec3(_540, _543, _546), vec3(_2933 * _2927, _2933 * _2928, _2933 * _2929));
                                float _3912 = isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : max(_2941, 0.0));
                                float _2944 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
                                float _2948 = ((_2944 * _2944) * (_2926 + (-1.0))) + 1.0;
                                float _2949 = _2886 * _2925;
                                float _2950 = _2949 * _2949;
                                float _2956 = ((1.0 - _2950) * dot(vec3(_540, _543, _546), vec3(_2873, _2874, _2875))) + _2950;
                                float _3923 = isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : max(_2956, 0.0));
                                float _2957 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
                                float _2958 = 1.0 - _2925;
                                float _2968 = (0.5 / (((_2957 * ((_2940 * _2958) + _2925)) + 9.9999999392252902907785028219223e-09) + (((_2957 * _2958) + _2925) * _2940))) * _2957;
                                float _3934 = isnan(0.0) ? _2968 : (isnan(_2968) ? 0.0 : max(_2968, 0.0));
                                float _2978 = (_2903 * _2880) * (((_2926 * 3.1415927410125732421875) * (isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0)))) / ((_2948 * _2948) * ((_2893 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_72_pred = _2904 * _2747.x;
                                frontier_phi_72_pred_1 = _2904 * _2747.z;
                                frontier_phi_72_pred_2 = _2904 * _2747.y;
                                frontier_phi_72_pred_3 = _2978 * _2759.z;
                                frontier_phi_72_pred_4 = _2978 * _2759.y;
                                frontier_phi_72_pred_5 = _2978 * _2759.x;
                            }
                            else
                            {
                                frontier_phi_72_pred = 0.0;
                                frontier_phi_72_pred_1 = 0.0;
                                frontier_phi_72_pred_2 = 0.0;
                                frontier_phi_72_pred_3 = 0.0;
                                frontier_phi_72_pred_4 = 0.0;
                                frontier_phi_72_pred_5 = 0.0;
                            }
                            _2985 = frontier_phi_72_pred;
                            _2987 = frontier_phi_72_pred_1;
                            _2986 = frontier_phi_72_pred_2;
                            _2984 = frontier_phi_72_pred_3;
                            _2983 = frontier_phi_72_pred_4;
                            _2982 = frontier_phi_72_pred_5;
                            _2689 = _2985 + _2702;
                            _2690 = _2986 + _2703;
                            _2691 = _2987 + _2704;
                            _2686 = _2982 + _2699;
                            _2687 = _2983 + _2700;
                            _2688 = _2984 + _2701;
                            if (_2706 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2699 = _2686;
                                _2700 = _2687;
                                _2701 = _2688;
                                _2702 = _2689;
                                _2703 = _2690;
                                _2704 = _2691;
                                _2705 = _2706;
                                continue;
                            }
                        }
                        frontier_phi_66_pred = _2691;
                        frontier_phi_66_pred_1 = _2690;
                        frontier_phi_66_pred_2 = _2689;
                        frontier_phi_66_pred_3 = _2688;
                        frontier_phi_66_pred_4 = _2687;
                        frontier_phi_66_pred_5 = _2686;
                    }
                    _2253 = frontier_phi_66_pred;
                    _2251 = frontier_phi_66_pred_1;
                    _2249 = frontier_phi_66_pred_2;
                    _2247 = frontier_phi_66_pred_3;
                    _2245 = frontier_phi_66_pred_4;
                    _2243 = frontier_phi_66_pred_5;
                    uint _2461 = _2460 + 1u;
                    if (_2461 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2454 = _2243;
                        _2455 = _2245;
                        _2456 = _2247;
                        _2457 = _2249;
                        _2458 = _2251;
                        _2459 = _2253;
                        _2460 = _2461;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_41_42_ladder = _2245;
                frontier_phi_41_42_ladder_1 = _2253;
                frontier_phi_41_42_ladder_2 = _2251;
                frontier_phi_41_42_ladder_3 = _2249;
                frontier_phi_41_42_ladder_4 = _2247;
                frontier_phi_41_42_ladder_5 = _2243;
            }
            else
            {
                frontier_phi_41_42_ladder = _2092;
                frontier_phi_41_42_ladder_1 = _2100;
                frontier_phi_41_42_ladder_2 = _2098;
                frontier_phi_41_42_ladder_3 = _2096;
                frontier_phi_41_42_ladder_4 = _2094;
                frontier_phi_41_42_ladder_5 = _2090;
            }
            _2242 = frontier_phi_41_42_ladder_5;
            _2244 = frontier_phi_41_42_ladder;
            _2246 = frontier_phi_41_42_ladder_4;
            _2248 = frontier_phi_41_42_ladder_3;
            _2250 = frontier_phi_41_42_ladder_2;
            _2252 = frontier_phi_41_42_ladder_1;
        }
        float _2257 = isnan(1.0) ? _600 : (isnan(_600) ? 1.0 : min(_600, 1.0));
        _2015 = (_2257 * _2248) + _1731;
        _2017 = (_2257 * _2250) + _1732;
        _2019 = (_2257 * _2252) + _1733;
        _2021 = ((_2242 * _585) * _2257) + _1898;
        _2023 = ((_2244 * _587) * _2257) + _1899;
        _2025 = ((_2246 * _588) * _2257) + _1900;
    }
    else
    {
        _2015 = _1731;
        _2017 = _1732;
        _2019 = _1733;
        _2021 = _1898;
        _2023 = _1899;
        _2025 = _1900;
    }
    float _3950 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _3961 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _3972 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _2042 = ((isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0))) * (_2015 + ((isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0))) * _600))) + ((_2021 + ((isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0))) * _1410)) * cbPerFrame._m0[3u].x);
    float _2043 = ((isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0))) * (_2017 + ((isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0))) * _600))) + ((_2023 + ((isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0))) * _1410)) * cbPerFrame._m0[3u].x);
    float _2044 = ((isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0))) * (_2019 + ((isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0))) * _600))) + ((_2025 + ((isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0))) * _1410)) * cbPerFrame._m0[3u].x);
    uint _2045 = _559 + 6u;
    float _2053 = _518 / cbSceneParam._m0[86u].x;
    float _2054 = _519 / cbSceneParam._m0[86u].y;
    vec4 _2068 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2053, _2054, (log2((isnan(cbSceneParam._m0[77u].w) ? _452 : (isnan(_452) ? cbSceneParam._m0[77u].w : min(_452, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2070 = _2068.x;
    float _2071 = _2068.y;
    float _2072 = _2068.z;
    float _2073 = _2068.w;
    float _2153;
    float _2155;
    float _2157;
    float _2159;
    if (_452 > cbSceneParam._m0[78u].w)
    {
        float _2115 = isnan(_452) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _452 : min(cbSceneParam._m0[80u].w, _452));
        float _2116 = _2115 / _452;
        float _2127 = _2116 * _501;
        float _2128 = _502 * _2116;
        float _2129 = (-0.0) - _2128;
        float _2130 = _2116 * _503;
        float _2132 = (cbSceneParam._m0[77u].w * _2129) / _2115;
        float _2133 = _2132 + cbSceneParam._m0[79u].w;
        float _2134 = cbSceneParam._m0[79u].w - _2128;
        float _2140 = sqrt(((_2127 * _2127) + (_2128 * _2128)) + (_2130 * _2130));
        float _2143 = (1.0 - (cbSceneParam._m0[77u].w / _2115)) * _2140;
        float _2149 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2151 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2384;
        if (abs((_2129 - _2132) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2384 = ((((_2133 > 0.0) ? exp2(_2149 * _2133) : (2.0 - exp2(_2151 * _2133))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2143;
        }
        else
        {
            float _2303 = 1.0 / cbSceneParam._m0[80u].x;
            float _2304 = isnan(_2134) ? _2133 : (isnan(_2133) ? _2134 : max(_2133, _2134));
            float _2305 = isnan(_2134) ? _2133 : (isnan(_2133) ? _2134 : min(_2133, _2134));
            float _2314 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : min(_2304, 0.0));
            float _2315 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : min(_2305, 0.0));
            _2384 = ((abs(_2140 / _2129) * cbSceneParam._m0[80u].y) * ((((_2314 - _2315) * 2.0) - ((exp2(_2149 * (isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0)))) - exp2(_2149 * (isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0))))) * _2303)) - ((exp2(_2151 * _2314) - exp2(_2151 * _2315)) * _2303))) + (_2143 * cbSceneParam._m0[80u].z);
        }
        vec4 _2386 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2053, _2054, 1.0), 0.0);
        float _2395 = exp2((_2384 * (-1.44269502162933349609375)) * (1.0 - _2386.w));
        float _2396 = log2(_2395);
        float _2412 = log2(_2073);
        _2153 = (exp2(_2412 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2396 * cbSceneParam._m0[78u].x)) * _2386.x) / cbSceneParam._m0[78u].x)) + _2070;
        _2155 = (exp2(_2412 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2396 * cbSceneParam._m0[78u].y)) * _2386.y) / cbSceneParam._m0[78u].y)) + _2071;
        _2157 = (exp2(_2412 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2396 * cbSceneParam._m0[78u].z)) * _2386.z) / cbSceneParam._m0[78u].z)) + _2072;
        _2159 = _2395 * _2073;
    }
    else
    {
        _2153 = _2070;
        _2155 = _2071;
        _2157 = _2072;
        _2159 = _2073;
    }
    bool _2422;
    vec4 _2169;
    vec4 _2191;
    float _2193;
    float _2197;
    float _2198;
    float _2199;
    float _2200;
    bool _2210;
    for (;;)
    {
        _2169 = cbMatDynParam._m0[0u];
        float _2171 = roundEven(_2169.y);
        bool _2172 = _2171 == 3.0;
        float _2173 = log2(_2159);
        float _2180 = exp2(_2173 * cbSceneParam._m0[78u].x) * _2042;
        float _2181 = exp2(_2173 * cbSceneParam._m0[78u].y) * _2043;
        float _2182 = exp2(_2173 * cbSceneParam._m0[78u].z) * _2044;
        float _2189 = _513 + (-0.5);
        _2191 = cbMtdParam._m0[1u];
        _2193 = _2191.y * _2189;
        float _2196 = (_2171 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2197 = _2196 * (_2172 ? _2180 : (_2180 + (cbSceneParam._m0[72u].w * _2153)));
        _2198 = _2196 * (_2172 ? _2181 : (_2181 + (cbSceneParam._m0[72u].w * _2155)));
        _2199 = _2196 * (_2172 ? _2182 : (_2182 + (cbSceneParam._m0[72u].w * _2157)));
        _2200 = _2189 * 0.999000012874603271484375;
        _2210 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2210)
        {
            if ((cbInstanceData._m0[_559 + 7u].x + _2200) < 0.5)
            {
                _2422 = true;
                break;
            }
        }
        uint _2338 = _561 + uint(_2169.w);
        if ((cbInstanceData._m0[_2338].w < 1.0) && ((cbInstanceData._m0[_2338].w + _2200) < 0.5))
        {
            _2422 = true;
            break;
        }
        if ((_2193 + _375) < _2191.x)
        {
            _2422 = true;
            break;
        }
        _2422 = false;
        break;
    }
    float _2656;
    if (_2422)
    {
        discard_state = true;
        _2656 = 0.0;
    }
    else
    {
        _2656 = cbInstanceData._m0[_2045].w;
    }
    SV_Target.x = _2197;
    SV_Target.y = _2198;
    SV_Target.z = _2199;
    SV_Target.w = _2656;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2045].w;
    discard_exit();
}


