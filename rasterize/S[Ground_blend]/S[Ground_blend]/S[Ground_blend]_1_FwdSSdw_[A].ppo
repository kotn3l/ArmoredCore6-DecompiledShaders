#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_Ground_blend_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D S_Ground_blend_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _940;
float _3069;
float _3070;
float _3071;
float _3072;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _192 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _199 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _206 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _254 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _264 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _254);
    float _265 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _254);
    float _266 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _254);
    vec4 _284 = texture(sampler2D(S_Ground_blend_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _291 = _284.x * cbMtdParam._m0[9u].x;
    float _292 = _284.y * cbMtdParam._m0[9u].y;
    float _293 = _284.z * cbMtdParam._m0[9u].z;
    float _302 = sqrt(((_264 * _264) + (_265 * _265)) + (_266 * _266));
    float _305 = cbMtdParam._m0[10u].z - cbMtdParam._m0[10u].y;
    float _307 = (_302 - cbMtdParam._m0[10u].y) / (isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0)));
    float _3086 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _315 = cbMtdParam._m0[11u].x - cbMtdParam._m0[10u].w;
    float _317 = (_302 - cbMtdParam._m0[10u].w) / (isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0)));
    float _3102 = isnan(0.0) ? _317 : (isnan(_317) ? 0.0 : max(_317, 0.0));
    vec4 _329 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _331 = _329.x;
    float _355 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _331)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _331))) - POSITION_1.w) / cbMtdParam._m0[10u].x;
    float _3113 = isnan(0.0) ? _355 : (isnan(_355) ? 0.0 : max(_355, 0.0));
    float _361 = gl_FragCoord.x * 0.125;
    float _363 = gl_FragCoord.y * 0.125;
    vec4 _365 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_361, _363));
    float _373 = float(((((_284.w * TEXCOORD_1.z) * (isnan(1.0) ? _3086 : (isnan(_3086) ? 1.0 : min(_3086, 1.0)))) * (1.0 - (isnan(1.0) ? _3102 : (isnan(_3102) ? 1.0 : min(_3102, 1.0))))) * (isnan(1.0) ? _3113 : (isnan(_3113) ? 1.0 : min(_3113, 1.0)))) >= ((_365.w * 0.9900000095367431640625) + 0.00999999977648258209228515625));
    vec4 _385 = texture(sampler2D(S_Ground_blend_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _389 = _385.z;
    float _393 = (_385.x * 2.0) + (-1.0);
    float _395 = (_385.y * 2.0) + (-1.0);
    float _396 = dot(vec2(_393, _395), vec2(_393, _395));
    float _3124 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    float _401 = sqrt(1.0 - (isnan(1.0) ? _3124 : (isnan(_3124) ? 1.0 : min(_3124, 1.0))));
    float _404 = fma(_401, _199 * NORMAL.x, fma(_395, _206 * TANGENT.x, (_192 * _184) * _393));
    float _407 = fma(_401, _199 * NORMAL.y, fma(_395, _206 * TANGENT.y, (_192 * _185) * _393));
    float _410 = fma(_401, _199 * NORMAL.z, fma(_395, _206 * TANGENT.z, (_192 * _186) * _393));
    float _414 = inversesqrt(dot(vec3(_404, _407, _410), vec3(_404, _407, _410)));
    float _415 = _414 * _404;
    float _416 = _414 * _407;
    float _417 = _414 * _410;
    float _3135 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _418 = isnan(1.0) ? _3135 : (isnan(_3135) ? 1.0 : min(_3135, 1.0));
    float _3146 = isnan(0.0) ? _291 : (isnan(_291) ? 0.0 : max(_291, 0.0));
    float _3157 = isnan(0.0) ? _292 : (isnan(_292) ? 0.0 : max(_292, 0.0));
    float _3168 = isnan(0.0) ? _293 : (isnan(_293) ? 0.0 : max(_293, 0.0));
    float _435 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _475 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _484 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _475);
    float _485 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _475);
    float _486 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _475);
    float _490 = inversesqrt(dot(vec3(_484, _485, _486), vec3(_484, _485, _486)));
    float _491 = _484 * _490;
    float _492 = _485 * _490;
    float _493 = _486 * _490;
    vec4 _494 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_361, _363));
    float _496 = _494.w;
    float _501 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _502 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _523 = fma(_417, cbSceneParam._m0[5u].z, fma(_416, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _415));
    float _526 = fma(_417, cbSceneParam._m0[6u].z, fma(_416, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _415));
    float _529 = fma(_417, cbSceneParam._m0[7u].z, fma(_416, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _415));
    uint _542 = uint(roundEven(NORMAL.w)) * 13u;
    uint _544 = _542 + 9u;
    uint _545 = _544 + uint(cbMatDynParam._m0[0u].w);
    float _551 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3146 : (isnan(_3146) ? 1.0 : min(_3146, 1.0)))) * cbInstanceData._m0[_545].x;
    float _552 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3157 : (isnan(_3157) ? 1.0 : min(_3157, 1.0)))) * cbInstanceData._m0[_545].y;
    float _553 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3168 : (isnan(_3168) ? 1.0 : min(_3168, 1.0)))) * cbInstanceData._m0[_545].z;
    float _3179 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
    float _554 = isnan(1.0) ? _3179 : (isnan(_3179) ? 1.0 : min(_3179, 1.0));
    float _3190 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    float _555 = isnan(1.0) ? _3190 : (isnan(_3190) ? 1.0 : min(_3190, 1.0));
    float _3201 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
    float _556 = isnan(1.0) ? _3201 : (isnan(_3201) ? 1.0 : min(_3201, 1.0));
    vec4 _565 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _501, cbSceneParam._m0[86u].y * _502));
    float _568 = _565.x * TEXCOORD_1.w;
    float _569 = dot(vec3(_415, _416, _417), vec3(_491, _492, _493));
    float _572 = _569 * 2.0;
    float _576 = (_572 * _415) - _491;
    float _577 = (_572 * _416) - _492;
    float _578 = (_572 * _417) - _493;
    float _582 = abs(dot(vec3(_491, _492, _493), vec3(_415, _416, _417)));
    float _3212 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _584 = sqrt(_418);
    float _597 = exp2((_584 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3212 : (isnan(_3212) ? 1.0 : min(_3212, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_584 * 3.0));
    float _629 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _633 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _637 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _939;
    float _941;
    float _942;
    float _943;
    float _944;
    float _945;
    float _946;
    float _947;
    float _948;
    float _949;
    float _950;
    float _951;
    float _952;
    float _953;
    float _954;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _664 = fma(_637, cbModelParam._m0[26u].z, fma(_633, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _629));
        float _668 = fma(_637, cbModelParam._m0[27u].z, fma(_633, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _629));
        float _672 = fma(_637, cbModelParam._m0[28u].z, fma(_633, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _629));
        float _697 = _629 + _415;
        float _698 = _633 + _416;
        float _699 = _637 + _417;
        float _709 = fma(_699, cbModelParam._m0[26u].z, fma(_698, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _697)) - _664;
        float _710 = fma(_699, cbModelParam._m0[27u].z, fma(_698, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _697)) - _668;
        float _711 = fma(_699, cbModelParam._m0[28u].z, fma(_698, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _697)) - _672;
        float _715 = inversesqrt(dot(vec3(_709, _710, _711), vec3(_709, _710, _711)));
        float _728 = ((_715 * _709) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_664 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _729 = ((_715 * _710) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_668 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _730 = ((_715 * _711) / cbModelParam._m0[34u].z) + ((((((_672 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _733 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_728, _729, _730), 0.0);
        vec4 _740 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_728, _729, _730), 0.0);
        vec4 _747 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_728, _729, _730), 0.0);
        vec4 _754 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_728, _729, _730), 0.0);
        float _767 = exp2((_733.w + (-0.5)) * 20.0) * 2.0;
        float _768 = _767 * (_733.x + (-0.5));
        float _769 = _767 * (_733.y + (-0.5));
        float _770 = _767 * (_733.z + (-0.5));
        float _777 = exp2((_740.w + (-0.5)) * 20.0) * 2.0;
        float _778 = _777 * (_740.x + (-0.5));
        float _779 = _777 * (_740.y + (-0.5));
        float _780 = _777 * (_740.z + (-0.5));
        float _787 = exp2((_747.w + (-0.5)) * 20.0) * 2.0;
        float _788 = _787 * (_747.x + (-0.5));
        float _789 = _787 * (_747.y + (-0.5));
        float _790 = _787 * (_747.z + (-0.5));
        float _797 = exp2((_754.w + (-0.5)) * 20.0) * 2.0;
        float _798 = _797 * (_754.x + (-0.5));
        float _799 = _797 * (_754.y + (-0.5));
        float _800 = _797 * (_754.z + (-0.5));
        float _801 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
        float _802 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
        float _803 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
        float _804 = _768 * 0.5;
        float _805 = _778 * 0.5;
        float _806 = _788 * 0.5;
        float _807 = dot(vec3(_804, _805, _806), vec3(_804, _805, _806));
        float _812 = (_807 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_807);
        float _821 = (dot(vec3(_415, _416, _417), vec3(_812 * _804, _812 * _805, _812 * _806)) + 1.0) * 0.5;
        float _3238 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
        float _831 = sqrt(((_805 * _805) + (_804 * _804)) + (_806 * _806)) / (_801 + 9.9999997473787516355514526367188e-06);
        float _3249 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
        float _832 = isnan(1.0) ? _3249 : (isnan(_3249) ? 1.0 : min(_3249, 1.0));
        float _833 = _832 * 2.0;
        float _837 = (1.0 - _832) / (_832 + 1.0);
        float _3260 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
        float _838 = isnan(1.0) ? _3260 : (isnan(_3260) ? 1.0 : min(_3260, 1.0));
        float _847 = ((((1.0 - _838) * (_833 + 2.0)) * exp2(log2(isnan(1.0) ? _3238 : (isnan(_3238) ? 1.0 : min(_3238, 1.0))) * (_833 + 1.0))) + _838) * _801;
        float _848 = _769 * 0.5;
        float _849 = _779 * 0.5;
        float _850 = _789 * 0.5;
        float _851 = dot(vec3(_848, _849, _850), vec3(_848, _849, _850));
        float _856 = (_851 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_851);
        float _864 = (dot(vec3(_415, _416, _417), vec3(_856 * _848, _856 * _849, _856 * _850)) + 1.0) * 0.5;
        float _3271 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
        float _873 = sqrt(((_849 * _849) + (_848 * _848)) + (_850 * _850)) / (_802 + 9.9999997473787516355514526367188e-06);
        float _3282 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
        float _874 = isnan(1.0) ? _3282 : (isnan(_3282) ? 1.0 : min(_3282, 1.0));
        float _875 = _874 * 2.0;
        float _879 = (1.0 - _874) / (_874 + 1.0);
        float _3293 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
        float _880 = isnan(1.0) ? _3293 : (isnan(_3293) ? 1.0 : min(_3293, 1.0));
        float _889 = ((((1.0 - _880) * (_875 + 2.0)) * exp2(log2(isnan(1.0) ? _3271 : (isnan(_3271) ? 1.0 : min(_3271, 1.0))) * (_875 + 1.0))) + _880) * _802;
        float _890 = _770 * 0.5;
        float _891 = _780 * 0.5;
        float _892 = _790 * 0.5;
        float _893 = dot(vec3(_890, _891, _892), vec3(_890, _891, _892));
        float _898 = (_893 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_893);
        float _906 = (dot(vec3(_415, _416, _417), vec3(_898 * _890, _898 * _891, _898 * _892)) + 1.0) * 0.5;
        float _3304 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
        float _915 = sqrt(((_891 * _891) + (_890 * _890)) + (_892 * _892)) / (_803 + 9.9999997473787516355514526367188e-06);
        float _3315 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
        float _916 = isnan(1.0) ? _3315 : (isnan(_3315) ? 1.0 : min(_3315, 1.0));
        float _917 = _916 * 2.0;
        float _921 = (1.0 - _916) / (_916 + 1.0);
        float _3326 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
        float _922 = isnan(1.0) ? _3326 : (isnan(_3326) ? 1.0 : min(_3326, 1.0));
        float _931 = ((((1.0 - _922) * (_917 + 2.0)) * exp2(log2(isnan(1.0) ? _3304 : (isnan(_3304) ? 1.0 : min(_3304, 1.0))) * (_917 + 1.0))) + _922) * _803;
        _939 = _770;
        _941 = _769;
        _942 = _768;
        _943 = _780;
        _944 = _779;
        _945 = _778;
        _946 = _790;
        _947 = _789;
        _948 = _788;
        _949 = _803;
        _950 = _802;
        _951 = _801;
        _952 = cbModelParam._m0[36u].z * (isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0)));
        _953 = cbModelParam._m0[36u].z * (isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0)));
        _954 = cbModelParam._m0[36u].z * (isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0)));
    }
    else
    {
        _939 = _940;
        _941 = _940;
        _942 = _940;
        _943 = _940;
        _944 = _940;
        _945 = _940;
        _946 = _940;
        _947 = _940;
        _948 = _940;
        _949 = _940;
        _950 = _940;
        _951 = _940;
        _952 = 0.0;
        _953 = 0.0;
        _954 = 0.0;
    }
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _980 = fma(_637, cbModelParam._m0[30u].z, fma(_633, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _629));
        float _984 = fma(_637, cbModelParam._m0[31u].z, fma(_633, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _629));
        float _988 = fma(_637, cbModelParam._m0[32u].z, fma(_633, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _629));
        float _1011 = _629 + _415;
        float _1012 = _633 + _416;
        float _1013 = _637 + _417;
        float _1023 = fma(_1013, cbModelParam._m0[30u].z, fma(_1012, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1011)) - _980;
        float _1024 = fma(_1013, cbModelParam._m0[31u].z, fma(_1012, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1011)) - _984;
        float _1025 = fma(_1013, cbModelParam._m0[32u].z, fma(_1012, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1011)) - _988;
        float _1029 = inversesqrt(dot(vec3(_1023, _1024, _1025), vec3(_1023, _1024, _1025)));
        float _1042 = ((_1029 * _1023) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_980 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1043 = ((_1029 * _1024) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_984 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1044 = ((_1029 * _1025) / cbModelParam._m0[35u].z) + ((((((_988 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1046 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1042, _1043, _1044), 0.0);
        vec4 _1053 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1042, _1043, _1044), 0.0);
        vec4 _1060 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1042, _1043, _1044), 0.0);
        vec4 _1067 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1042, _1043, _1044), 0.0);
        float _1079 = exp2((_1046.w + (-0.5)) * 20.0) * 2.0;
        float _1080 = _1079 * (_1046.x + (-0.5));
        float _1081 = _1079 * (_1046.y + (-0.5));
        float _1082 = _1079 * (_1046.z + (-0.5));
        float _1089 = exp2((_1053.w + (-0.5)) * 20.0) * 2.0;
        float _1090 = _1089 * (_1053.x + (-0.5));
        float _1091 = _1089 * (_1053.y + (-0.5));
        float _1092 = _1089 * (_1053.z + (-0.5));
        float _1099 = exp2((_1060.w + (-0.5)) * 20.0) * 2.0;
        float _1100 = _1099 * (_1060.x + (-0.5));
        float _1101 = _1099 * (_1060.y + (-0.5));
        float _1102 = _1099 * (_1060.z + (-0.5));
        float _1109 = exp2((_1067.w + (-0.5)) * 20.0) * 2.0;
        float _1110 = _1109 * (_1067.x + (-0.5));
        float _1111 = _1109 * (_1067.y + (-0.5));
        float _1112 = _1109 * (_1067.z + (-0.5));
        float _1113 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1114 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1115 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1116 = _1080 * 0.5;
        float _1117 = _1090 * 0.5;
        float _1118 = _1100 * 0.5;
        float _1119 = dot(vec3(_1116, _1117, _1118), vec3(_1116, _1117, _1118));
        float _1124 = (_1119 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1119);
        float _1132 = (dot(vec3(_415, _416, _417), vec3(_1124 * _1116, _1124 * _1117, _1124 * _1118)) + 1.0) * 0.5;
        float _3367 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1141 = sqrt(((_1117 * _1117) + (_1116 * _1116)) + (_1118 * _1118)) / (_1113 + 9.9999997473787516355514526367188e-06);
        float _3378 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1142 = isnan(1.0) ? _3378 : (isnan(_3378) ? 1.0 : min(_3378, 1.0));
        float _1143 = _1142 * 2.0;
        float _1147 = (1.0 - _1142) / (_1142 + 1.0);
        float _3389 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1148 = isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0));
        float _1157 = ((((1.0 - _1148) * (_1143 + 2.0)) * exp2(log2(isnan(1.0) ? _3367 : (isnan(_3367) ? 1.0 : min(_3367, 1.0))) * (_1143 + 1.0))) + _1148) * _1113;
        float _1158 = _1081 * 0.5;
        float _1159 = _1091 * 0.5;
        float _1160 = _1101 * 0.5;
        float _1161 = dot(vec3(_1158, _1159, _1160), vec3(_1158, _1159, _1160));
        float _1166 = (_1161 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1161);
        float _1174 = (dot(vec3(_415, _416, _417), vec3(_1166 * _1158, _1166 * _1159, _1166 * _1160)) + 1.0) * 0.5;
        float _3400 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1183 = sqrt(((_1159 * _1159) + (_1158 * _1158)) + (_1160 * _1160)) / (_1114 + 9.9999997473787516355514526367188e-06);
        float _3411 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1184 = isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0));
        float _1185 = _1184 * 2.0;
        float _1189 = (1.0 - _1184) / (_1184 + 1.0);
        float _3422 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1190 = isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0));
        float _1199 = ((((1.0 - _1190) * (_1185 + 2.0)) * exp2(log2(isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0))) * (_1185 + 1.0))) + _1190) * _1114;
        float _1200 = _1082 * 0.5;
        float _1201 = _1092 * 0.5;
        float _1202 = _1102 * 0.5;
        float _1203 = dot(vec3(_1200, _1201, _1202), vec3(_1200, _1201, _1202));
        float _1208 = (_1203 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1203);
        float _1216 = (dot(vec3(_415, _416, _417), vec3(_1208 * _1200, _1208 * _1201, _1208 * _1202)) + 1.0) * 0.5;
        float _3433 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1225 = sqrt(((_1201 * _1201) + (_1200 * _1200)) + (_1202 * _1202)) / (_1115 + 9.9999997473787516355514526367188e-06);
        float _3444 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1226 = isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0));
        float _1227 = _1226 * 2.0;
        float _1231 = (1.0 - _1226) / (_1226 + 1.0);
        float _3455 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1232 = isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0));
        float _1241 = ((((1.0 - _1232) * (_1227 + 2.0)) * exp2(log2(isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0))) * (_1227 + 1.0))) + _1232) * _1115;
        _1249 = _1082;
        _1250 = _1081;
        _1251 = _1080;
        _1252 = _1092;
        _1253 = _1091;
        _1254 = _1090;
        _1255 = _1102;
        _1256 = _1101;
        _1257 = _1100;
        _1258 = _1115;
        _1259 = _1114;
        _1260 = _1113;
        _1261 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0)));
        _1262 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0)));
        _1263 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0)));
    }
    else
    {
        _1249 = _940;
        _1250 = _940;
        _1251 = _940;
        _1252 = _940;
        _1253 = _940;
        _1254 = _940;
        _1255 = _940;
        _1256 = _940;
        _1257 = _940;
        _1258 = _940;
        _1259 = _940;
        _1260 = _940;
        _1261 = 0.0;
        _1262 = 0.0;
        _1263 = 0.0;
    }
    float _1273 = (cbModelParam._m0[1u].x * (_1261 - _952)) + _952;
    float _1274 = (cbModelParam._m0[1u].x * (_1262 - _953)) + _953;
    float _1275 = (cbModelParam._m0[1u].x * (_1263 - _954)) + _954;
    float _1296 = fma(_1275, cbSceneParam._m0[89u].z, fma(_1274, cbSceneParam._m0[89u].y, _1273 * cbSceneParam._m0[89u].x));
    float _1299 = fma(_1275, cbSceneParam._m0[90u].z, fma(_1274, cbSceneParam._m0[90u].y, _1273 * cbSceneParam._m0[90u].x));
    float _1302 = fma(_1275, cbSceneParam._m0[91u].z, fma(_1274, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1273));
    float _1317 = _576 * 0.5;
    float _1318 = _577 * 0.5;
    float _1319 = _578 * 0.5;
    float _1320 = dot(vec4(_1317, _1318, _1319, 1.0), vec4(_1251, _1254, _1257, _1260));
    float _1323 = dot(vec4(_1317, _1318, _1319, 1.0), vec4(_1250, _1253, _1256, _1259));
    float _1326 = dot(vec4(_1317, _1318, _1319, 1.0), vec4(_1249, _1252, _1255, _1258));
    float _1360;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1333 = dot(vec4(_1317, _1318, _1319, 1.0), vec4(_939, _943, _946, _949));
        float _1337 = dot(vec4(_1317, _1318, _1319, 1.0), vec4(_941, _944, _947, _950));
        float _1341 = dot(vec4(_1317, _1318, _1319, 1.0), vec4(_942, _945, _948, _951));
        float _1348 = dot(vec4(cbModelParam._m0[39u]), vec4(_1317, _1318, _1319, 1.0));
        _1360 = dot(vec3(isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0)), isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0)), isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1348) ? 0.0 : (isnan(0.0) ? _1348 : max(0.0, _1348))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1360 = 1.0;
    }
    float _1371;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1362 = dot(vec4(cbModelParam._m0[40u]), vec4(_1317, _1318, _1319, 1.0));
        _1371 = dot(vec3(isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0)), isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0)), isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1362) ? 0.0 : (isnan(0.0) ? _1362 : max(0.0, _1362))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1371 = 1.0;
    }
    float _1375 = (_1371 * cbModelParam._m0[1u].x) + (_1360 * (1.0 - cbModelParam._m0[1u].x));
    float _1385 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _418);
    float _1386 = isnan(_1385) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1385 : min(cbModelParam._m0[25u].z, _1385));
    float _1468;
    float _1470;
    float _1472;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1435 = fma(_637, cbModelParam._m0[13u].z, fma(_633, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _629)) + cbModelParam._m0[13u].w;
        float _1439 = fma(_637, cbModelParam._m0[14u].z, fma(_633, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _629)) + cbModelParam._m0[14u].w;
        float _1443 = fma(_637, cbModelParam._m0[15u].z, fma(_633, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _629)) + cbModelParam._m0[15u].w;
        float _1446 = fma(_578, cbModelParam._m0[13u].z, fma(_577, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _576));
        float _1449 = fma(_578, cbModelParam._m0[14u].z, fma(_577, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _576));
        float _1452 = fma(_578, cbModelParam._m0[15u].z, fma(_577, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _576));
        float _1480;
        if (_1446 > 0.0)
        {
            _1480 = abs((1.0 - _1435) / _1446);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1446 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1435 + 1.0) / _1446);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1480 = frontier_phi_14_12_ladder;
        }
        float _1858;
        if (_1449 > 0.0)
        {
            _1858 = abs((1.0 - _1439) / _1449);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1449 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1439 + 1.0) / _1449);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1858 = frontier_phi_23_19_ladder;
        }
        float _2163;
        if (_1452 > 0.0)
        {
            _2163 = abs((1.0 - _1443) / _1452);
        }
        else
        {
            float frontier_phi_37_30_ladder;
            if (_1452 < 0.0)
            {
                frontier_phi_37_30_ladder = abs((_1443 + 1.0) / _1452);
            }
            else
            {
                frontier_phi_37_30_ladder = 5000.0;
            }
            _2163 = frontier_phi_37_30_ladder;
        }
        float _2165 = isnan(_1858) ? _1480 : (isnan(_1480) ? _1858 : min(_1480, _1858));
        float _2166 = isnan(_2163) ? _2165 : (isnan(_2165) ? _2163 : min(_2165, _2163));
        float _2170 = (_2166 * _1446) + _1435;
        float _2171 = (_2166 * _1449) + _1439;
        float _2172 = (_2166 * _1452) + _1443;
        float _2173 = _2166 * 9.9999997473787516355514526367188e-05;
        float _2174 = (-1.0) - _2173;
        float _2176 = _2173 + 1.0;
        float frontier_phi_13_37_ladder;
        float frontier_phi_13_37_ladder_1;
        float frontier_phi_13_37_ladder_2;
        if ((_2172 > _2176) || ((_2172 < _2174) || ((_2171 > _2176) || ((_2171 < _2174) || ((_2170 < _2174) || (_2170 > _2176))))))
        {
            frontier_phi_13_37_ladder = 0.0;
            frontier_phi_13_37_ladder_1 = 0.0;
            frontier_phi_13_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2314 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2172, cbModelParam._m0[9u].z, fma(_2171, cbModelParam._m0[9u].y, _2170 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2172, cbModelParam._m0[10u].z, fma(_2171, cbModelParam._m0[10u].y, _2170 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2172, cbModelParam._m0[11u].z, fma(_2171, cbModelParam._m0[11u].y, _2170 * cbModelParam._m0[11u].x))), _1386);
            frontier_phi_13_37_ladder = _2314.z * cbModelParam._m0[1u].y;
            frontier_phi_13_37_ladder_1 = _2314.y * cbModelParam._m0[1u].y;
            frontier_phi_13_37_ladder_2 = _2314.x * cbModelParam._m0[1u].y;
        }
        _1468 = frontier_phi_13_37_ladder_2;
        _1470 = frontier_phi_13_37_ladder_1;
        _1472 = frontier_phi_13_37_ladder;
    }
    else
    {
        vec4 _1456 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_576, _577, _578), _1386);
        _1468 = _1456.x * cbModelParam._m0[1u].y;
        _1470 = _1456.y * cbModelParam._m0[1u].y;
        _1472 = _1456.z * cbModelParam._m0[1u].y;
    }
    float _1476 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _418);
    float _1477 = isnan(_1476) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1476 : min(cbModelParam._m0[25u].w, _1476));
    float _1570;
    float _1572;
    float _1574;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1534 = fma(_637, cbModelParam._m0[21u].z, fma(_633, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _629)) + cbModelParam._m0[21u].w;
        float _1538 = fma(_637, cbModelParam._m0[22u].z, fma(_633, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _629)) + cbModelParam._m0[22u].w;
        float _1542 = fma(_637, cbModelParam._m0[23u].z, fma(_633, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _629)) + cbModelParam._m0[23u].w;
        float _1545 = fma(_578, cbModelParam._m0[21u].z, fma(_577, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _576));
        float _1548 = fma(_578, cbModelParam._m0[22u].z, fma(_577, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _576));
        float _1551 = fma(_578, cbModelParam._m0[23u].z, fma(_577, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _576));
        float _1863;
        if (_1545 > 0.0)
        {
            _1863 = abs((1.0 - _1534) / _1545);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1545 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1534 + 1.0) / _1545);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1863 = frontier_phi_25_21_ladder;
        }
        float _2189;
        if (_1548 > 0.0)
        {
            _2189 = abs((1.0 - _1538) / _1548);
        }
        else
        {
            float frontier_phi_39_32_ladder;
            if (_1548 < 0.0)
            {
                frontier_phi_39_32_ladder = abs((_1538 + 1.0) / _1548);
            }
            else
            {
                frontier_phi_39_32_ladder = 5000.0;
            }
            _2189 = frontier_phi_39_32_ladder;
        }
        float _2380;
        if (_1551 > 0.0)
        {
            _2380 = abs((1.0 - _1542) / _1551);
        }
        else
        {
            float frontier_phi_57_50_ladder;
            if (_1551 < 0.0)
            {
                frontier_phi_57_50_ladder = abs((_1542 + 1.0) / _1551);
            }
            else
            {
                frontier_phi_57_50_ladder = 5000.0;
            }
            _2380 = frontier_phi_57_50_ladder;
        }
        float _2382 = isnan(_2189) ? _1863 : (isnan(_1863) ? _2189 : min(_1863, _2189));
        float _2383 = isnan(_2380) ? _2382 : (isnan(_2382) ? _2380 : min(_2382, _2380));
        float _2387 = (_2383 * _1545) + _1534;
        float _2388 = (_2383 * _1548) + _1538;
        float _2389 = (_2383 * _1551) + _1542;
        float _2390 = _2383 * 9.9999997473787516355514526367188e-05;
        float _2391 = (-1.0) - _2390;
        float _2393 = _2390 + 1.0;
        float frontier_phi_22_57_ladder;
        float frontier_phi_22_57_ladder_1;
        float frontier_phi_22_57_ladder_2;
        if ((_2389 > _2393) || ((_2389 < _2391) || ((_2388 > _2393) || ((_2388 < _2391) || ((_2387 < _2391) || (_2387 > _2393))))))
        {
            frontier_phi_22_57_ladder = 0.0;
            frontier_phi_22_57_ladder_1 = 0.0;
            frontier_phi_22_57_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2633 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2389, cbModelParam._m0[17u].z, fma(_2388, cbModelParam._m0[17u].y, _2387 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2389, cbModelParam._m0[18u].z, fma(_2388, cbModelParam._m0[18u].y, _2387 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2389, cbModelParam._m0[19u].z, fma(_2388, cbModelParam._m0[19u].y, _2387 * cbModelParam._m0[19u].x))), _1477);
            frontier_phi_22_57_ladder = _2633.x * cbModelParam._m0[1u].z;
            frontier_phi_22_57_ladder_1 = _2633.z * cbModelParam._m0[1u].z;
            frontier_phi_22_57_ladder_2 = _2633.y * cbModelParam._m0[1u].z;
        }
        _1570 = frontier_phi_22_57_ladder;
        _1572 = frontier_phi_22_57_ladder_2;
        _1574 = frontier_phi_22_57_ladder_1;
    }
    else
    {
        vec4 _1554 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_576, _577, _578), _1477);
        _1570 = _1554.x * cbModelParam._m0[1u].z;
        _1572 = _1554.y * cbModelParam._m0[1u].z;
        _1574 = _1554.z * cbModelParam._m0[1u].z;
    }
    float _1586 = ((((1.0 - _597) * ((_584 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_597 * _584)) * _568;
    float _1587 = _1586 * ((cbModelParam._m0[1u].w * (_1570 - _1468)) + _1468);
    float _1588 = _1586 * ((cbModelParam._m0[1u].w * (_1572 - _1470)) + _1470);
    float _1589 = _1586 * ((cbModelParam._m0[1u].w * (_1574 - _1472)) + _1472);
    float _1592 = fma(_1589, cbSceneParam._m0[89u].z, fma(_1588, cbSceneParam._m0[89u].y, _1587 * cbSceneParam._m0[89u].x));
    float _1595 = fma(_1589, cbSceneParam._m0[90u].z, fma(_1588, cbSceneParam._m0[90u].y, _1587 * cbSceneParam._m0[90u].x));
    float _1598 = fma(_1589, cbSceneParam._m0[91u].z, fma(_1588, cbSceneParam._m0[91u].y, _1587 * cbSceneParam._m0[91u].x));
    vec4 _1606 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_501, _502));
    float _1608 = _1606.w;
    float _1620 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1608);
    float _1621 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1608);
    float _1622 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1608);
    float _3581 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
    float _1623 = isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0));
    float _3592 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
    float _1624 = isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0));
    float _3603 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
    float _1625 = isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0));
    uvec4 _1629 = floatBitsToUint(cbInstanceData._m0[_542 + 5u]);
    uint _1631 = _1629.x * 14u;
    uint _1632 = _1631 + 13u;
    float _1637 = _568 + (-1.0);
    float _1640 = (cbLight._m0[_1632].x * _1637) + 1.0;
    float _1641 = (cbLight._m0[_1632].y * _1637) + 1.0;
    uint _1642 = _1631 + 5u;
    float _1648 = isnan(1.0) ? _1641 : (isnan(_1641) ? 1.0 : min(_1641, 1.0));
    uint _1652 = _1631 + 4u;
    float _1662 = isnan(1.0) ? _1640 : (isnan(_1640) ? 1.0 : min(_1640, 1.0));
    uint _1666 = _1631 | 1u;
    float _1677 = dot(vec3(cbLight._m0[_1631].xyz), vec3(_415, _416, _417));
    float _1680 = dot(vec3(cbLight._m0[_1666].xyz), vec3(_415, _416, _417));
    float _3624 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
    float _3635 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
    float _1685 = (isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0))) * 0.3183098733425140380859375;
    float _1687 = (isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0))) * 0.3183098733425140380859375;
    float _1694 = ((cbLight._m0[_1642].x * _1648) * _1687) + (((cbLight._m0[_1652].x * _1623) * _1662) * _1685);
    float _1695 = ((_1648 * cbLight._m0[_1642].y) * _1687) + (((cbLight._m0[_1652].y * _1624) * _1662) * _1685);
    float _1696 = ((_1648 * cbLight._m0[_1642].z) * _1687) + (((cbLight._m0[_1652].z * _1625) * _1662) * _1685);
    uint _1698 = _1631 + 8u;
    float _1711 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1631].w)) * _418) * 0.949999988079071044921875);
    float _1712 = _1711 * _1711;
    float _1713 = cbLight._m0[_1631].x + _491;
    float _1714 = cbLight._m0[_1631].y + _492;
    float _1715 = cbLight._m0[_1631].z + _493;
    float _1719 = inversesqrt(dot(vec3(_1713, _1714, _1715), vec3(_1713, _1714, _1715)));
    float _1720 = _1719 * _1713;
    float _1721 = _1719 * _1714;
    float _1722 = _1719 * _1715;
    float _1723 = dot(vec3(_415, _416, _417), vec3(cbLight._m0[_1631].xyz));
    float _3646 = isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0));
    float _1726 = isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0));
    float _3657 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _1727 = isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0));
    float _1728 = dot(vec3(_415, _416, _417), vec3(_1720, _1721, _1722));
    float _3668 = isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0));
    float _1731 = isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0));
    float _1732 = dot(vec3(cbLight._m0[_1631].xyz), vec3(_1720, _1721, _1722));
    float _3679 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
    float _1736 = _1712 * _1712;
    float _1740 = ((_1731 * _1731) * (_1736 + (-1.0))) + 1.0;
    float _1751 = (exp2(log2(1.0 - (isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1752 = 1.0 - _1712;
    float _1763 = (0.5 / (((_1727 * ((_1726 * _1752) + _1712)) + 9.9999999392252902907785028219223e-09) + (((_1727 * _1752) + _1712) * _1726))) * _1726;
    float _3690 = isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0));
    float _1765 = (isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0))) * (_1736 / ((_1740 * _1740) * 3.141590118408203125));
    uint _1779 = _1631 + 9u;
    float _1790 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1666].w)) * _418) * 0.949999988079071044921875);
    float _1791 = _1790 * _1790;
    float _1792 = cbLight._m0[_1666].x + _491;
    float _1793 = cbLight._m0[_1666].y + _492;
    float _1794 = cbLight._m0[_1666].z + _493;
    float _1798 = inversesqrt(dot(vec3(_1792, _1793, _1794), vec3(_1792, _1793, _1794)));
    float _1799 = _1798 * _1792;
    float _1800 = _1798 * _1793;
    float _1801 = _1798 * _1794;
    float _1802 = dot(vec3(_415, _416, _417), vec3(cbLight._m0[_1666].xyz));
    float _3701 = isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0));
    float _1805 = isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0));
    float _1806 = dot(vec3(_415, _416, _417), vec3(_1799, _1800, _1801));
    float _3712 = isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0));
    float _1809 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
    float _1810 = dot(vec3(cbLight._m0[_1666].xyz), vec3(_1799, _1800, _1801));
    float _3723 = isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0));
    float _1814 = _1791 * _1791;
    float _1818 = ((_1809 * _1809) * (_1814 + (-1.0))) + 1.0;
    float _1827 = (exp2(log2(1.0 - (isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1828 = 1.0 - _1791;
    float _1838 = (0.5 / (((_1727 * ((_1805 * _1828) + _1791)) + 9.9999999392252902907785028219223e-09) + (((_1727 * _1828) + _1791) * _1805))) * _1805;
    float _3734 = isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0));
    float _1840 = (isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0))) * (_1814 / ((_1818 * _1818) * 3.141590118408203125));
    float _1850 = (((_1827 * cbLight._m0[_1779].x) * _1840) * _1648) + ((((cbLight._m0[_1698].x * _1623) * _1751) * _1765) * _1662);
    float _1851 = (((_1827 * cbLight._m0[_1779].y) * _1840) * _1648) + ((((cbLight._m0[_1698].y * _1624) * _1751) * _1765) * _1662);
    float _1852 = (((_1827 * cbLight._m0[_1779].z) * _1840) * _1648) + ((((cbLight._m0[_1698].z * _1625) * _1751) * _1765) * _1662);
    float _1967;
    float _1969;
    float _1971;
    float _1973;
    float _1975;
    float _1977;
    if (_1629.y == 0u)
    {
        float _1907 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1908 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1907;
        float _1909 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1907;
        float _1910 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1907;
        uvec4 _1922 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1923 = _1922.x;
        uint _1934 = uint((float(_1922.y) * floor(float(uint(cbSceneParam._m0[85u].y * _502) / _1923))) + floor(float(uint(cbSceneParam._m0[85u].x * _501) / _1923)));
        float _1944 = (log2(_1910 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1945 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0));
        uint _1948 = uint(isnan(14.0) ? _1945 : (isnan(_1945) ? 14.0 : min(_1945, 14.0)));
        uvec4 _1953 = texelFetch(g_lightClusterGridBuffer, int(((_1948 << 2u) + (_1934 << 6u)) >> 2u));
        uint _1954 = _1953.x;
        uint _1955 = _1922.z;
        float _2042;
        float _2044;
        float _2046;
        float _2048;
        float _2050;
        float _2052;
        if (((((1u << ((_1955 >> 4u) & 15u)) + 4294967295u) & _1954) == 0u) || ((_1955 & 240u) == 0u))
        {
            _2042 = 0.0;
            _2044 = 0.0;
            _2046 = 0.0;
            _2048 = 0.0;
            _2050 = 0.0;
            _2052 = 0.0;
        }
        else
        {
            float _2043;
            float _2045;
            float _2047;
            float _2049;
            float _2051;
            float _2053;
            float _2226 = 0.0;
            float _2227 = 0.0;
            float _2228 = 0.0;
            float _2229 = 0.0;
            float _2230 = 0.0;
            float _2231 = 0.0;
            uint _2232 = 0u;
            uint _2241;
            bool _2242;
            for (;;)
            {
                _2241 = texelFetch(g_lightClassification, int((((_1948 << 5u) + (_1934 << 9u)) + (_2232 << 2u)) >> 2u)).x;
                _2242 = _2241 == 0u;
                float frontier_phi_52_pred;
                float frontier_phi_52_pred_1;
                float frontier_phi_52_pred_2;
                float frontier_phi_52_pred_3;
                float frontier_phi_52_pred_4;
                float frontier_phi_52_pred_5;
                if (_2242)
                {
                    frontier_phi_52_pred = _2230;
                    frontier_phi_52_pred_1 = _2231;
                    frontier_phi_52_pred_2 = _2229;
                    frontier_phi_52_pred_3 = _2228;
                    frontier_phi_52_pred_4 = _2227;
                    frontier_phi_52_pred_5 = _2226;
                }
                else
                {
                    float _2423;
                    float _2424;
                    float _2425;
                    float _2426;
                    float _2427;
                    float _2428;
                    uint _2429;
                    _2423 = _2226;
                    _2424 = _2227;
                    _2425 = _2228;
                    _2426 = _2229;
                    _2427 = _2230;
                    _2428 = _2231;
                    _2429 = _2241;
                    float _2323;
                    float _2324;
                    float _2325;
                    float _2326;
                    float _2327;
                    float _2328;
                    for (;;)
                    {
                        uint _2433 = uint(findLSB(_2429)) + (_2232 << 5u);
                        uint _2430 = (_2429 + 4294967295u) & _2429;
                        uint _2435 = _2433 * 48u;
                        vec4 _2449 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2435)).x, texelFetch(g_PointLightRenderingBuffer, int(_2435 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2435 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2435 + 3u)).x));
                        uint _2455 = (_2433 * 48u) + 4u;
                        vec4 _2468 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2455)).x, texelFetch(g_PointLightRenderingBuffer, int(_2455 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2455 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2455 + 3u)).x));
                        uint _2474 = (_2433 * 48u) + 8u;
                        vec3 _2485 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2474)).x, texelFetch(g_PointLightRenderingBuffer, int(_2474 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2474 + 2u)).x));
                        float _2489 = _2449.x - _1908;
                        float _2490 = _2449.y - _1909;
                        float _2491 = _2449.z - _1910;
                        float _2492 = dot(vec3(_2489, _2490, _2491), vec3(_2489, _2490, _2491));
                        float _2495 = inversesqrt(_2492);
                        float _2496 = _2495 * _2489;
                        float _2497 = _2495 * _2490;
                        float _2498 = _2495 * _2491;
                        float _2499 = dot(vec3(_523, _526, _529), vec3(_2496, _2497, _2498));
                        float _2504 = 1.0 - (_2492 * _2449.w);
                        float _3755 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
                        float _2505 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
                        float _2506 = sqrt(_2492) * _2468.w;
                        float _2509 = 1.39999997615814208984375 / (_2506 + 1.39999997615814208984375);
                        float _2510 = _2509 * _2509;
                        float _2513 = ((1.0 - _2510) * _2499) + _2510;
                        float _2516 = _2506 * _2506;
                        float _2520 = ((isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0))) * _2505) / ((_2516 * 0.699999988079071044921875) + 1.0);
                        float _2524 = (-0.0) - _1908;
                        float _2525 = (-0.0) - _1909;
                        float _2526 = (-0.0) - _1910;
                        float _2530 = inversesqrt(dot(vec3(_2524, _2525, _2526), vec3(_2524, _2525, _2526)));
                        float _2531 = _2530 * _2524;
                        float _2532 = _2530 * _2525;
                        float _2533 = _2530 * _2526;
                        float _2541 = exp2(log2(1.0 / ((_2516 * 3.5) + 5.0)) * 0.25);
                        float _2542 = 1.0 - _584;
                        float _2549 = sqrt(1.0 - ((1.0 - (_2542 * _2542)) * (1.0 - (_2541 * _2541))));
                        float _2550 = _2549 * _2549;
                        float _2551 = _2550 * _2550;
                        float _2552 = _2531 + _2496;
                        float _2553 = _2532 + _2497;
                        float _2554 = _2533 + _2498;
                        float _2558 = inversesqrt(dot(vec3(_2552, _2553, _2554), vec3(_2552, _2553, _2554)));
                        float _2562 = dot(vec3(_523, _526, _529), vec3(_2531, _2532, _2533));
                        float _3771 = isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : max(_2562, 0.0));
                        float _2565 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
                        float _2566 = dot(vec3(_523, _526, _529), vec3(_2558 * _2552, _2558 * _2553, _2558 * _2554));
                        float _3782 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0));
                        float _2569 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
                        float _2573 = ((_2569 * _2569) * (_2551 + (-1.0))) + 1.0;
                        float _2574 = _2509 * _2550;
                        float _2575 = _2574 * _2574;
                        float _2578 = ((1.0 - _2575) * _2499) + _2575;
                        float _3793 = isnan(0.0) ? _2578 : (isnan(_2578) ? 0.0 : max(_2578, 0.0));
                        float _2579 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
                        float _2580 = 1.0 - _2550;
                        float _2590 = (0.5 / (((_2579 * ((_2565 * _2580) + _2550)) + 9.9999999392252902907785028219223e-09) + (((_2579 * _2580) + _2550) * _2565))) * _2579;
                        float _3804 = isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0));
                        float _2601 = (((_2551 * 3.1415927410125732421875) * (isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0)))) / ((_2573 * _2573) * ((_2516 * 2.1991131305694580078125) + 3.141590118408203125))) * _2505;
                        _2326 = (_2520 * _2468.x) + _2426;
                        _2327 = (_2520 * _2468.y) + _2427;
                        _2328 = (_2520 * _2468.z) + _2428;
                        _2323 = (_2601 * _2485.x) + _2423;
                        _2324 = (_2601 * _2485.y) + _2424;
                        _2325 = (_2601 * _2485.z) + _2425;
                        if (_2430 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2423 = _2323;
                            _2424 = _2324;
                            _2425 = _2325;
                            _2426 = _2326;
                            _2427 = _2327;
                            _2428 = _2328;
                            _2429 = _2430;
                        }
                    }
                    frontier_phi_52_pred = _2327;
                    frontier_phi_52_pred_1 = _2328;
                    frontier_phi_52_pred_2 = _2326;
                    frontier_phi_52_pred_3 = _2325;
                    frontier_phi_52_pred_4 = _2324;
                    frontier_phi_52_pred_5 = _2323;
                }
                _2051 = frontier_phi_52_pred;
                _2053 = frontier_phi_52_pred_1;
                _2049 = frontier_phi_52_pred_2;
                _2047 = frontier_phi_52_pred_3;
                _2045 = frontier_phi_52_pred_4;
                _2043 = frontier_phi_52_pred_5;
                uint _2233 = _2232 + 1u;
                if (_2233 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2226 = _2043;
                    _2227 = _2045;
                    _2228 = _2047;
                    _2229 = _2049;
                    _2230 = _2051;
                    _2231 = _2053;
                    _2232 = _2233;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2042 = _2043;
            _2044 = _2045;
            _2046 = _2047;
            _2048 = _2049;
            _2050 = _2051;
            _2052 = _2053;
        }
        uvec4 _2056 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2057 = _2056.z;
        uint _2059 = (_2057 >> 8u) & 15u;
        float _2194;
        float _2196;
        float _2198;
        float _2200;
        float _2202;
        float _2204;
        if (((4294967295u << _2059) & _1954) == 0u)
        {
            _2194 = _2042;
            _2196 = _2044;
            _2198 = _2046;
            _2200 = _2048;
            _2202 = _2050;
            _2204 = _2052;
        }
        else
        {
            float _2219 = inversesqrt(dot(vec3(_1908, _1909, _1910), vec3(_1908, _1909, _1910)));
            float _2220 = _2219 * _1908;
            float _2221 = _2219 * _1909;
            float _2222 = _2219 * _1910;
            float frontier_phi_41_42_ladder;
            float frontier_phi_41_42_ladder_1;
            float frontier_phi_41_42_ladder_2;
            float frontier_phi_41_42_ladder_3;
            float frontier_phi_41_42_ladder_4;
            float frontier_phi_41_42_ladder_5;
            if (_2059 < ((_2057 >> 12u) & 15u))
            {
                float _2195;
                float _2197;
                float _2199;
                float _2201;
                float _2203;
                float _2205;
                float _2406 = _2042;
                float _2407 = _2044;
                float _2408 = _2046;
                float _2409 = _2048;
                float _2410 = _2050;
                float _2411 = _2052;
                uint _2412 = _2059;
                uint _2421;
                bool _2422;
                for (;;)
                {
                    _2421 = texelFetch(g_lightClassification, int((((_1948 << 5u) + (_1934 << 9u)) + (_2412 << 2u)) >> 2u)).x;
                    _2422 = _2421 == 0u;
                    float frontier_phi_66_pred;
                    float frontier_phi_66_pred_1;
                    float frontier_phi_66_pred_2;
                    float frontier_phi_66_pred_3;
                    float frontier_phi_66_pred_4;
                    float frontier_phi_66_pred_5;
                    if (_2422)
                    {
                        frontier_phi_66_pred = _2411;
                        frontier_phi_66_pred_1 = _2410;
                        frontier_phi_66_pred_2 = _2409;
                        frontier_phi_66_pred_3 = _2408;
                        frontier_phi_66_pred_4 = _2407;
                        frontier_phi_66_pred_5 = _2406;
                    }
                    else
                    {
                        float _2638;
                        float _2639;
                        float _2640;
                        float _2641;
                        float _2642;
                        float _2643;
                        float _2934;
                        float _2935;
                        float _2936;
                        float _2937;
                        float _2938;
                        float _2939;
                        float _2651 = _2406;
                        float _2652 = _2407;
                        float _2653 = _2408;
                        float _2654 = _2409;
                        float _2655 = _2410;
                        float _2656 = _2411;
                        uint _2657 = _2421;
                        uint _2658;
                        vec4 _2683;
                        float _2684;
                        vec4 _2699;
                        vec3 _2711;
                        vec4 _2727;
                        vec4 _2743;
                        float _2790;
                        bool _2791;
                        for (;;)
                        {
                            uint _2668 = ((_2412 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2657));
                            _2658 = (_2657 + 4294967295u) & _2657;
                            uint _2670 = _2668 * 40u;
                            _2683 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2670)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2670 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2670 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2670 + 3u)).x));
                            _2684 = _2683.w;
                            uint _2686 = (_2668 * 40u) + 4u;
                            _2699 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2686)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2686 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2686 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2686 + 3u)).x));
                            uint _2701 = (_2668 * 40u) + 8u;
                            _2711 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2701)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2701 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2701 + 2u)).x));
                            uint _2714 = (_2668 * 40u) + 16u;
                            _2727 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2714)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2714 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2714 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2714 + 3u)).x));
                            uint _2730 = (_2668 * 40u) + 20u;
                            _2743 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2730)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2730 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2730 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2730 + 3u)).x));
                            uint _2746 = (_2668 * 40u) + 24u;
                            vec4 _2759 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2746)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2746 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2746 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2746 + 3u)).x));
                            uint _2765 = (_2668 * 40u) + 28u;
                            vec4 _2778 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2765)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2765 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2765 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2765 + 3u)).x));
                            _2790 = fma(_1910, _2778.z, fma(_1909, _2778.y, _2778.x * _1908)) + _2778.w;
                            _2791 = !((fma(_1910, _2759.z, fma(_1909, _2759.y, _2759.x * _1908)) + _2759.w) <= 0.0);
                            float frontier_phi_72_pred;
                            float frontier_phi_72_pred_1;
                            float frontier_phi_72_pred_2;
                            float frontier_phi_72_pred_3;
                            float frontier_phi_72_pred_4;
                            float frontier_phi_72_pred_5;
                            if (_2791)
                            {
                                float _2818 = _2683.x - _1908;
                                float _2819 = _2683.y - _1909;
                                float _2820 = _2683.z - _1910;
                                float _2821 = dot(vec3(_2818, _2819, _2820), vec3(_2818, _2819, _2820));
                                float _2824 = inversesqrt(_2821);
                                float _2825 = _2824 * _2818;
                                float _2826 = _2824 * _2819;
                                float _2827 = _2824 * _2820;
                                float _2831 = 1.0 - (_2821 / (_2684 * _2684));
                                float _3815 = isnan(0.0) ? _2831 : (isnan(_2831) ? 0.0 : max(_2831, 0.0));
                                float _2832 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
                                float _2836 = sqrt(_2821) * _2699.w;
                                float _2838 = 1.39999997615814208984375 / (_2836 + 1.39999997615814208984375);
                                float _2839 = _2838 * _2838;
                                float _2842 = ((1.0 - _2839) * dot(vec3(_2825, _2826, _2827), vec3(_523, _526, _529))) + _2839;
                                float _2845 = _2836 * _2836;
                                float _2849 = (fma(_1910, _2727.z, fma(_1909, _2727.y, _2727.x * _1908)) + _2727.w) / _2790;
                                float _2850 = (fma(_1910, _2743.z, fma(_1909, _2743.y, _2743.x * _1908)) + _2743.w) / _2790;
                                float _2854 = 1.0 - dot(vec2(_2849, _2850), vec2(_2849, _2850));
                                float _3831 = isnan(0.0) ? _2854 : (isnan(_2854) ? 0.0 : max(_2854, 0.0));
                                float _2855 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
                                float _2856 = _2855 * (((isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : max(_2842, 0.0))) * _2832) / ((_2845 * 0.699999988079071044921875) + 1.0));
                                float _2868 = exp2(log2(1.0 / ((_2845 * 3.5) + 5.0)) * 0.25);
                                float _2869 = 1.0 - _584;
                                float _2876 = sqrt(1.0 - ((1.0 - (_2869 * _2869)) * (1.0 - (_2868 * _2868))));
                                float _2877 = _2876 * _2876;
                                float _2878 = _2877 * _2877;
                                float _2879 = _2825 - _2220;
                                float _2880 = _2826 - _2221;
                                float _2881 = _2827 - _2222;
                                float _2885 = inversesqrt(dot(vec3(_2879, _2880, _2881), vec3(_2879, _2880, _2881)));
                                float _2889 = dot(vec3(_523, _526, _529), vec3((-0.0) - _2220, (-0.0) - _2221, (-0.0) - _2222));
                                float _3842 = isnan(0.0) ? _2889 : (isnan(_2889) ? 0.0 : max(_2889, 0.0));
                                float _2892 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
                                float _2893 = dot(vec3(_523, _526, _529), vec3(_2885 * _2879, _2885 * _2880, _2885 * _2881));
                                float _3853 = isnan(0.0) ? _2893 : (isnan(_2893) ? 0.0 : max(_2893, 0.0));
                                float _2896 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
                                float _2900 = ((_2896 * _2896) * (_2878 + (-1.0))) + 1.0;
                                float _2901 = _2838 * _2877;
                                float _2902 = _2901 * _2901;
                                float _2908 = ((1.0 - _2902) * dot(vec3(_523, _526, _529), vec3(_2825, _2826, _2827))) + _2902;
                                float _3864 = isnan(0.0) ? _2908 : (isnan(_2908) ? 0.0 : max(_2908, 0.0));
                                float _2909 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
                                float _2910 = 1.0 - _2877;
                                float _2920 = (0.5 / (((_2909 * ((_2892 * _2910) + _2877)) + 9.9999999392252902907785028219223e-09) + (((_2909 * _2910) + _2877) * _2892))) * _2909;
                                float _3875 = isnan(0.0) ? _2920 : (isnan(_2920) ? 0.0 : max(_2920, 0.0));
                                float _2930 = (_2855 * _2832) * (((_2878 * 3.1415927410125732421875) * (isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0)))) / ((_2900 * _2900) * ((_2845 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_72_pred = _2856 * _2699.x;
                                frontier_phi_72_pred_1 = _2856 * _2699.z;
                                frontier_phi_72_pred_2 = _2856 * _2699.y;
                                frontier_phi_72_pred_3 = _2930 * _2711.z;
                                frontier_phi_72_pred_4 = _2930 * _2711.y;
                                frontier_phi_72_pred_5 = _2930 * _2711.x;
                            }
                            else
                            {
                                frontier_phi_72_pred = 0.0;
                                frontier_phi_72_pred_1 = 0.0;
                                frontier_phi_72_pred_2 = 0.0;
                                frontier_phi_72_pred_3 = 0.0;
                                frontier_phi_72_pred_4 = 0.0;
                                frontier_phi_72_pred_5 = 0.0;
                            }
                            _2937 = frontier_phi_72_pred;
                            _2939 = frontier_phi_72_pred_1;
                            _2938 = frontier_phi_72_pred_2;
                            _2936 = frontier_phi_72_pred_3;
                            _2935 = frontier_phi_72_pred_4;
                            _2934 = frontier_phi_72_pred_5;
                            _2641 = _2937 + _2654;
                            _2642 = _2938 + _2655;
                            _2643 = _2939 + _2656;
                            _2638 = _2934 + _2651;
                            _2639 = _2935 + _2652;
                            _2640 = _2936 + _2653;
                            if (_2658 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2651 = _2638;
                                _2652 = _2639;
                                _2653 = _2640;
                                _2654 = _2641;
                                _2655 = _2642;
                                _2656 = _2643;
                                _2657 = _2658;
                                continue;
                            }
                        }
                        frontier_phi_66_pred = _2643;
                        frontier_phi_66_pred_1 = _2642;
                        frontier_phi_66_pred_2 = _2641;
                        frontier_phi_66_pred_3 = _2640;
                        frontier_phi_66_pred_4 = _2639;
                        frontier_phi_66_pred_5 = _2638;
                    }
                    _2205 = frontier_phi_66_pred;
                    _2203 = frontier_phi_66_pred_1;
                    _2201 = frontier_phi_66_pred_2;
                    _2199 = frontier_phi_66_pred_3;
                    _2197 = frontier_phi_66_pred_4;
                    _2195 = frontier_phi_66_pred_5;
                    uint _2413 = _2412 + 1u;
                    if (_2413 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2406 = _2195;
                        _2407 = _2197;
                        _2408 = _2199;
                        _2409 = _2201;
                        _2410 = _2203;
                        _2411 = _2205;
                        _2412 = _2413;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_41_42_ladder = _2197;
                frontier_phi_41_42_ladder_1 = _2205;
                frontier_phi_41_42_ladder_2 = _2203;
                frontier_phi_41_42_ladder_3 = _2201;
                frontier_phi_41_42_ladder_4 = _2199;
                frontier_phi_41_42_ladder_5 = _2195;
            }
            else
            {
                frontier_phi_41_42_ladder = _2044;
                frontier_phi_41_42_ladder_1 = _2052;
                frontier_phi_41_42_ladder_2 = _2050;
                frontier_phi_41_42_ladder_3 = _2048;
                frontier_phi_41_42_ladder_4 = _2046;
                frontier_phi_41_42_ladder_5 = _2042;
            }
            _2194 = frontier_phi_41_42_ladder_5;
            _2196 = frontier_phi_41_42_ladder;
            _2198 = frontier_phi_41_42_ladder_4;
            _2200 = frontier_phi_41_42_ladder_3;
            _2202 = frontier_phi_41_42_ladder_2;
            _2204 = frontier_phi_41_42_ladder_1;
        }
        float _2209 = isnan(1.0) ? _568 : (isnan(_568) ? 1.0 : min(_568, 1.0));
        _1967 = (_2209 * _2200) + _1694;
        _1969 = (_2209 * _2202) + _1695;
        _1971 = (_2209 * _2204) + _1696;
        _1973 = ((_2194 * 0.039999999105930328369140625) * _2209) + _1850;
        _1975 = ((_2196 * 0.039999999105930328369140625) * _2209) + _1851;
        _1977 = ((_2198 * 0.039999999105930328369140625) * _2209) + _1852;
    }
    else
    {
        _1967 = _1694;
        _1969 = _1695;
        _1971 = _1696;
        _1973 = _1850;
        _1975 = _1851;
        _1977 = _1852;
    }
    float _3891 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _3902 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
    float _3913 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _1994 = ((isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0))) * (_1967 + ((isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0))) * _568))) + ((_1973 + ((isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0))) * _1375)) * cbPerFrame._m0[3u].x);
    float _1995 = ((isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0))) * (_1969 + ((isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0))) * _568))) + ((_1975 + ((isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0))) * _1375)) * cbPerFrame._m0[3u].x);
    float _1996 = ((isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0))) * (_1971 + ((isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0))) * _568))) + ((_1977 + ((isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0))) * _1375)) * cbPerFrame._m0[3u].x);
    uint _1997 = _542 + 6u;
    float _2005 = _501 / cbSceneParam._m0[86u].x;
    float _2006 = _502 / cbSceneParam._m0[86u].y;
    vec4 _2020 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2005, _2006, (log2((isnan(cbSceneParam._m0[77u].w) ? _435 : (isnan(_435) ? cbSceneParam._m0[77u].w : min(_435, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2022 = _2020.x;
    float _2023 = _2020.y;
    float _2024 = _2020.z;
    float _2025 = _2020.w;
    float _2105;
    float _2107;
    float _2109;
    float _2111;
    if (_435 > cbSceneParam._m0[78u].w)
    {
        float _2067 = isnan(_435) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _435 : min(cbSceneParam._m0[80u].w, _435));
        float _2068 = _2067 / _435;
        float _2079 = _2068 * _484;
        float _2080 = _485 * _2068;
        float _2081 = (-0.0) - _2080;
        float _2082 = _2068 * _486;
        float _2084 = (cbSceneParam._m0[77u].w * _2081) / _2067;
        float _2085 = _2084 + cbSceneParam._m0[79u].w;
        float _2086 = cbSceneParam._m0[79u].w - _2080;
        float _2092 = sqrt(((_2079 * _2079) + (_2080 * _2080)) + (_2082 * _2082));
        float _2095 = (1.0 - (cbSceneParam._m0[77u].w / _2067)) * _2092;
        float _2101 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2103 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2336;
        if (abs((_2081 - _2084) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2336 = ((((_2085 > 0.0) ? exp2(_2101 * _2085) : (2.0 - exp2(_2103 * _2085))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2095;
        }
        else
        {
            float _2255 = 1.0 / cbSceneParam._m0[80u].x;
            float _2256 = isnan(_2086) ? _2085 : (isnan(_2085) ? _2086 : max(_2085, _2086));
            float _2257 = isnan(_2086) ? _2085 : (isnan(_2085) ? _2086 : min(_2085, _2086));
            float _2266 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : min(_2256, 0.0));
            float _2267 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : min(_2257, 0.0));
            _2336 = ((abs(_2092 / _2081) * cbSceneParam._m0[80u].y) * ((((_2266 - _2267) * 2.0) - ((exp2(_2101 * (isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0)))) - exp2(_2101 * (isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0))))) * _2255)) - ((exp2(_2103 * _2266) - exp2(_2103 * _2267)) * _2255))) + (_2095 * cbSceneParam._m0[80u].z);
        }
        vec4 _2338 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2005, _2006, 1.0), 0.0);
        float _2347 = exp2((_2336 * (-1.44269502162933349609375)) * (1.0 - _2338.w));
        float _2348 = log2(_2347);
        float _2364 = log2(_2025);
        _2105 = (exp2(_2364 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2348 * cbSceneParam._m0[78u].x)) * _2338.x) / cbSceneParam._m0[78u].x)) + _2022;
        _2107 = (exp2(_2364 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2348 * cbSceneParam._m0[78u].y)) * _2338.y) / cbSceneParam._m0[78u].y)) + _2023;
        _2109 = (exp2(_2364 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2348 * cbSceneParam._m0[78u].z)) * _2338.z) / cbSceneParam._m0[78u].z)) + _2024;
        _2111 = _2347 * _2025;
    }
    else
    {
        _2105 = _2022;
        _2107 = _2023;
        _2109 = _2024;
        _2111 = _2025;
    }
    bool _2374;
    vec4 _2121;
    vec4 _2143;
    float _2145;
    float _2149;
    float _2150;
    float _2151;
    float _2152;
    bool _2162;
    for (;;)
    {
        _2121 = cbMatDynParam._m0[0u];
        float _2123 = roundEven(_2121.y);
        bool _2124 = _2123 == 3.0;
        float _2125 = log2(_2111);
        float _2132 = exp2(_2125 * cbSceneParam._m0[78u].x) * _1994;
        float _2133 = exp2(_2125 * cbSceneParam._m0[78u].y) * _1995;
        float _2134 = exp2(_2125 * cbSceneParam._m0[78u].z) * _1996;
        float _2141 = _496 + (-0.5);
        _2143 = cbMtdParam._m0[1u];
        _2145 = _2143.y * _2141;
        float _2148 = (_2123 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2149 = _2148 * (_2124 ? _2132 : (_2132 + (cbSceneParam._m0[72u].w * _2105)));
        _2150 = _2148 * (_2124 ? _2133 : (_2133 + (cbSceneParam._m0[72u].w * _2107)));
        _2151 = _2148 * (_2124 ? _2134 : (_2134 + (cbSceneParam._m0[72u].w * _2109)));
        _2152 = _2141 * 0.999000012874603271484375;
        _2162 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2162)
        {
            if ((cbInstanceData._m0[_542 + 7u].x + _2152) < 0.5)
            {
                _2374 = true;
                break;
            }
        }
        uint _2290 = _544 + uint(_2121.w);
        if ((cbInstanceData._m0[_2290].w < 1.0) && ((cbInstanceData._m0[_2290].w + _2152) < 0.5))
        {
            _2374 = true;
            break;
        }
        if ((_2145 + _373) < _2143.x)
        {
            _2374 = true;
            break;
        }
        _2374 = false;
        break;
    }
    float _2608;
    if (_2374)
    {
        discard_state = true;
        _2608 = 0.0;
    }
    else
    {
        _2608 = cbInstanceData._m0[_1997].w;
    }
    SV_Target.x = _2149;
    SV_Target.y = _2150;
    SV_Target.z = _2151;
    SV_Target.w = _2608;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1997].w;
    discard_exit();
}


