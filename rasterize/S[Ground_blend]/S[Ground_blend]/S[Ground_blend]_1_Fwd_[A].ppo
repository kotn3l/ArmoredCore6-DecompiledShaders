#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_Ground_blend_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D S_Ground_blend_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _938;
float _3040;
float _3041;
float _3042;
float _3043;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _190 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _197 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _204 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _252 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _262 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _252);
    float _263 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _252);
    float _264 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _252);
    vec4 _282 = texture(sampler2D(S_Ground_blend_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _289 = _282.x * cbMtdParam._m0[9u].x;
    float _290 = _282.y * cbMtdParam._m0[9u].y;
    float _291 = _282.z * cbMtdParam._m0[9u].z;
    float _300 = sqrt(((_262 * _262) + (_263 * _263)) + (_264 * _264));
    float _303 = cbMtdParam._m0[10u].z - cbMtdParam._m0[10u].y;
    float _305 = (_300 - cbMtdParam._m0[10u].y) / (isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0)));
    float _3057 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _313 = cbMtdParam._m0[11u].x - cbMtdParam._m0[10u].w;
    float _315 = (_300 - cbMtdParam._m0[10u].w) / (isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0)));
    float _3073 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    vec4 _327 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _329 = _327.x;
    float _353 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _329)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _329))) - POSITION_1.w) / cbMtdParam._m0[10u].x;
    float _3084 = isnan(0.0) ? _353 : (isnan(_353) ? 0.0 : max(_353, 0.0));
    float _359 = gl_FragCoord.x * 0.125;
    float _361 = gl_FragCoord.y * 0.125;
    vec4 _363 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_359, _361));
    float _371 = float(((((_282.w * TEXCOORD_1.z) * (isnan(1.0) ? _3057 : (isnan(_3057) ? 1.0 : min(_3057, 1.0)))) * (1.0 - (isnan(1.0) ? _3073 : (isnan(_3073) ? 1.0 : min(_3073, 1.0))))) * (isnan(1.0) ? _3084 : (isnan(_3084) ? 1.0 : min(_3084, 1.0)))) >= ((_363.w * 0.9900000095367431640625) + 0.00999999977648258209228515625));
    vec4 _383 = texture(sampler2D(S_Ground_blend_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _387 = _383.z;
    float _391 = (_383.x * 2.0) + (-1.0);
    float _393 = (_383.y * 2.0) + (-1.0);
    float _394 = dot(vec2(_391, _393), vec2(_391, _393));
    float _3095 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _399 = sqrt(1.0 - (isnan(1.0) ? _3095 : (isnan(_3095) ? 1.0 : min(_3095, 1.0))));
    float _402 = fma(_399, _197 * NORMAL.x, fma(_393, _204 * TANGENT.x, (_190 * _182) * _391));
    float _405 = fma(_399, _197 * NORMAL.y, fma(_393, _204 * TANGENT.y, (_190 * _183) * _391));
    float _408 = fma(_399, _197 * NORMAL.z, fma(_393, _204 * TANGENT.z, (_190 * _184) * _391));
    float _412 = inversesqrt(dot(vec3(_402, _405, _408), vec3(_402, _405, _408)));
    float _413 = _412 * _402;
    float _414 = _412 * _405;
    float _415 = _412 * _408;
    float _3106 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _416 = isnan(1.0) ? _3106 : (isnan(_3106) ? 1.0 : min(_3106, 1.0));
    float _3117 = isnan(0.0) ? _289 : (isnan(_289) ? 0.0 : max(_289, 0.0));
    float _3128 = isnan(0.0) ? _290 : (isnan(_290) ? 0.0 : max(_290, 0.0));
    float _3139 = isnan(0.0) ? _291 : (isnan(_291) ? 0.0 : max(_291, 0.0));
    float _433 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _473 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _482 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _473);
    float _483 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _473);
    float _484 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _473);
    float _488 = inversesqrt(dot(vec3(_482, _483, _484), vec3(_482, _483, _484)));
    float _489 = _482 * _488;
    float _490 = _483 * _488;
    float _491 = _484 * _488;
    vec4 _492 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_359, _361));
    float _494 = _492.w;
    float _499 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _500 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _521 = fma(_415, cbSceneParam._m0[5u].z, fma(_414, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _413));
    float _524 = fma(_415, cbSceneParam._m0[6u].z, fma(_414, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _413));
    float _527 = fma(_415, cbSceneParam._m0[7u].z, fma(_414, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _413));
    uint _540 = uint(roundEven(NORMAL.w)) * 13u;
    uint _542 = _540 + 9u;
    uint _543 = _542 + uint(cbMatDynParam._m0[0u].w);
    float _549 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3117 : (isnan(_3117) ? 1.0 : min(_3117, 1.0)))) * cbInstanceData._m0[_543].x;
    float _550 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3128 : (isnan(_3128) ? 1.0 : min(_3128, 1.0)))) * cbInstanceData._m0[_543].y;
    float _551 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3139 : (isnan(_3139) ? 1.0 : min(_3139, 1.0)))) * cbInstanceData._m0[_543].z;
    float _3150 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _552 = isnan(1.0) ? _3150 : (isnan(_3150) ? 1.0 : min(_3150, 1.0));
    float _3161 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _553 = isnan(1.0) ? _3161 : (isnan(_3161) ? 1.0 : min(_3161, 1.0));
    float _3172 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
    float _554 = isnan(1.0) ? _3172 : (isnan(_3172) ? 1.0 : min(_3172, 1.0));
    vec4 _563 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _499, cbSceneParam._m0[86u].y * _500));
    float _566 = _563.x * TEXCOORD_1.w;
    float _567 = dot(vec3(_413, _414, _415), vec3(_489, _490, _491));
    float _570 = _567 * 2.0;
    float _574 = (_570 * _413) - _489;
    float _575 = (_570 * _414) - _490;
    float _576 = (_570 * _415) - _491;
    float _580 = abs(dot(vec3(_489, _490, _491), vec3(_413, _414, _415)));
    float _3183 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _582 = sqrt(_416);
    float _595 = exp2((_582 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3183 : (isnan(_3183) ? 1.0 : min(_3183, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_582 * 3.0));
    float _627 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _631 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _635 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _937;
    float _939;
    float _940;
    float _941;
    float _942;
    float _943;
    float _944;
    float _945;
    float _946;
    float _947;
    float _948;
    float _949;
    float _950;
    float _951;
    float _952;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _662 = fma(_635, cbModelParam._m0[26u].z, fma(_631, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _627));
        float _666 = fma(_635, cbModelParam._m0[27u].z, fma(_631, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _627));
        float _670 = fma(_635, cbModelParam._m0[28u].z, fma(_631, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _627));
        float _695 = _627 + _413;
        float _696 = _631 + _414;
        float _697 = _635 + _415;
        float _707 = fma(_697, cbModelParam._m0[26u].z, fma(_696, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _695)) - _662;
        float _708 = fma(_697, cbModelParam._m0[27u].z, fma(_696, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _695)) - _666;
        float _709 = fma(_697, cbModelParam._m0[28u].z, fma(_696, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _695)) - _670;
        float _713 = inversesqrt(dot(vec3(_707, _708, _709), vec3(_707, _708, _709)));
        float _726 = ((_713 * _707) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_662 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _727 = ((_713 * _708) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_666 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _728 = ((_713 * _709) / cbModelParam._m0[34u].z) + ((((((_670 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _731 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_726, _727, _728), 0.0);
        vec4 _738 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_726, _727, _728), 0.0);
        vec4 _745 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_726, _727, _728), 0.0);
        vec4 _752 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_726, _727, _728), 0.0);
        float _765 = exp2((_731.w + (-0.5)) * 20.0) * 2.0;
        float _766 = _765 * (_731.x + (-0.5));
        float _767 = _765 * (_731.y + (-0.5));
        float _768 = _765 * (_731.z + (-0.5));
        float _775 = exp2((_738.w + (-0.5)) * 20.0) * 2.0;
        float _776 = _775 * (_738.x + (-0.5));
        float _777 = _775 * (_738.y + (-0.5));
        float _778 = _775 * (_738.z + (-0.5));
        float _785 = exp2((_745.w + (-0.5)) * 20.0) * 2.0;
        float _786 = _785 * (_745.x + (-0.5));
        float _787 = _785 * (_745.y + (-0.5));
        float _788 = _785 * (_745.z + (-0.5));
        float _795 = exp2((_752.w + (-0.5)) * 20.0) * 2.0;
        float _796 = _795 * (_752.x + (-0.5));
        float _797 = _795 * (_752.y + (-0.5));
        float _798 = _795 * (_752.z + (-0.5));
        float _799 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
        float _800 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
        float _801 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
        float _802 = _766 * 0.5;
        float _803 = _776 * 0.5;
        float _804 = _786 * 0.5;
        float _805 = dot(vec3(_802, _803, _804), vec3(_802, _803, _804));
        float _810 = (_805 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_805);
        float _819 = (dot(vec3(_413, _414, _415), vec3(_810 * _802, _810 * _803, _810 * _804)) + 1.0) * 0.5;
        float _3209 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
        float _829 = sqrt(((_803 * _803) + (_802 * _802)) + (_804 * _804)) / (_799 + 9.9999997473787516355514526367188e-06);
        float _3220 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
        float _830 = isnan(1.0) ? _3220 : (isnan(_3220) ? 1.0 : min(_3220, 1.0));
        float _831 = _830 * 2.0;
        float _835 = (1.0 - _830) / (_830 + 1.0);
        float _3231 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
        float _836 = isnan(1.0) ? _3231 : (isnan(_3231) ? 1.0 : min(_3231, 1.0));
        float _845 = ((((1.0 - _836) * (_831 + 2.0)) * exp2(log2(isnan(1.0) ? _3209 : (isnan(_3209) ? 1.0 : min(_3209, 1.0))) * (_831 + 1.0))) + _836) * _799;
        float _846 = _767 * 0.5;
        float _847 = _777 * 0.5;
        float _848 = _787 * 0.5;
        float _849 = dot(vec3(_846, _847, _848), vec3(_846, _847, _848));
        float _854 = (_849 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_849);
        float _862 = (dot(vec3(_413, _414, _415), vec3(_854 * _846, _854 * _847, _854 * _848)) + 1.0) * 0.5;
        float _3242 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
        float _871 = sqrt(((_847 * _847) + (_846 * _846)) + (_848 * _848)) / (_800 + 9.9999997473787516355514526367188e-06);
        float _3253 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
        float _872 = isnan(1.0) ? _3253 : (isnan(_3253) ? 1.0 : min(_3253, 1.0));
        float _873 = _872 * 2.0;
        float _877 = (1.0 - _872) / (_872 + 1.0);
        float _3264 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
        float _878 = isnan(1.0) ? _3264 : (isnan(_3264) ? 1.0 : min(_3264, 1.0));
        float _887 = ((((1.0 - _878) * (_873 + 2.0)) * exp2(log2(isnan(1.0) ? _3242 : (isnan(_3242) ? 1.0 : min(_3242, 1.0))) * (_873 + 1.0))) + _878) * _800;
        float _888 = _768 * 0.5;
        float _889 = _778 * 0.5;
        float _890 = _788 * 0.5;
        float _891 = dot(vec3(_888, _889, _890), vec3(_888, _889, _890));
        float _896 = (_891 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_891);
        float _904 = (dot(vec3(_413, _414, _415), vec3(_896 * _888, _896 * _889, _896 * _890)) + 1.0) * 0.5;
        float _3275 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
        float _913 = sqrt(((_889 * _889) + (_888 * _888)) + (_890 * _890)) / (_801 + 9.9999997473787516355514526367188e-06);
        float _3286 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
        float _914 = isnan(1.0) ? _3286 : (isnan(_3286) ? 1.0 : min(_3286, 1.0));
        float _915 = _914 * 2.0;
        float _919 = (1.0 - _914) / (_914 + 1.0);
        float _3297 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
        float _920 = isnan(1.0) ? _3297 : (isnan(_3297) ? 1.0 : min(_3297, 1.0));
        float _929 = ((((1.0 - _920) * (_915 + 2.0)) * exp2(log2(isnan(1.0) ? _3275 : (isnan(_3275) ? 1.0 : min(_3275, 1.0))) * (_915 + 1.0))) + _920) * _801;
        _937 = _768;
        _939 = _767;
        _940 = _766;
        _941 = _778;
        _942 = _777;
        _943 = _776;
        _944 = _788;
        _945 = _787;
        _946 = _786;
        _947 = _801;
        _948 = _800;
        _949 = _799;
        _950 = cbModelParam._m0[36u].z * (isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0)));
        _951 = cbModelParam._m0[36u].z * (isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0)));
        _952 = cbModelParam._m0[36u].z * (isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0)));
    }
    else
    {
        _937 = _938;
        _939 = _938;
        _940 = _938;
        _941 = _938;
        _942 = _938;
        _943 = _938;
        _944 = _938;
        _945 = _938;
        _946 = _938;
        _947 = _938;
        _948 = _938;
        _949 = _938;
        _950 = 0.0;
        _951 = 0.0;
        _952 = 0.0;
    }
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _978 = fma(_635, cbModelParam._m0[30u].z, fma(_631, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _627));
        float _982 = fma(_635, cbModelParam._m0[31u].z, fma(_631, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _627));
        float _986 = fma(_635, cbModelParam._m0[32u].z, fma(_631, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _627));
        float _1009 = _627 + _413;
        float _1010 = _631 + _414;
        float _1011 = _635 + _415;
        float _1021 = fma(_1011, cbModelParam._m0[30u].z, fma(_1010, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1009)) - _978;
        float _1022 = fma(_1011, cbModelParam._m0[31u].z, fma(_1010, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1009)) - _982;
        float _1023 = fma(_1011, cbModelParam._m0[32u].z, fma(_1010, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1009)) - _986;
        float _1027 = inversesqrt(dot(vec3(_1021, _1022, _1023), vec3(_1021, _1022, _1023)));
        float _1040 = ((_1027 * _1021) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_978 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1041 = ((_1027 * _1022) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_982 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1042 = ((_1027 * _1023) / cbModelParam._m0[35u].z) + ((((((_986 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1044 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1040, _1041, _1042), 0.0);
        vec4 _1051 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1040, _1041, _1042), 0.0);
        vec4 _1058 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1040, _1041, _1042), 0.0);
        vec4 _1065 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1040, _1041, _1042), 0.0);
        float _1077 = exp2((_1044.w + (-0.5)) * 20.0) * 2.0;
        float _1078 = _1077 * (_1044.x + (-0.5));
        float _1079 = _1077 * (_1044.y + (-0.5));
        float _1080 = _1077 * (_1044.z + (-0.5));
        float _1087 = exp2((_1051.w + (-0.5)) * 20.0) * 2.0;
        float _1088 = _1087 * (_1051.x + (-0.5));
        float _1089 = _1087 * (_1051.y + (-0.5));
        float _1090 = _1087 * (_1051.z + (-0.5));
        float _1097 = exp2((_1058.w + (-0.5)) * 20.0) * 2.0;
        float _1098 = _1097 * (_1058.x + (-0.5));
        float _1099 = _1097 * (_1058.y + (-0.5));
        float _1100 = _1097 * (_1058.z + (-0.5));
        float _1107 = exp2((_1065.w + (-0.5)) * 20.0) * 2.0;
        float _1108 = _1107 * (_1065.x + (-0.5));
        float _1109 = _1107 * (_1065.y + (-0.5));
        float _1110 = _1107 * (_1065.z + (-0.5));
        float _1111 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1112 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1113 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1114 = _1078 * 0.5;
        float _1115 = _1088 * 0.5;
        float _1116 = _1098 * 0.5;
        float _1117 = dot(vec3(_1114, _1115, _1116), vec3(_1114, _1115, _1116));
        float _1122 = (_1117 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1117);
        float _1130 = (dot(vec3(_413, _414, _415), vec3(_1122 * _1114, _1122 * _1115, _1122 * _1116)) + 1.0) * 0.5;
        float _3338 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1139 = sqrt(((_1115 * _1115) + (_1114 * _1114)) + (_1116 * _1116)) / (_1111 + 9.9999997473787516355514526367188e-06);
        float _3349 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1140 = isnan(1.0) ? _3349 : (isnan(_3349) ? 1.0 : min(_3349, 1.0));
        float _1141 = _1140 * 2.0;
        float _1145 = (1.0 - _1140) / (_1140 + 1.0);
        float _3360 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1146 = isnan(1.0) ? _3360 : (isnan(_3360) ? 1.0 : min(_3360, 1.0));
        float _1155 = ((((1.0 - _1146) * (_1141 + 2.0)) * exp2(log2(isnan(1.0) ? _3338 : (isnan(_3338) ? 1.0 : min(_3338, 1.0))) * (_1141 + 1.0))) + _1146) * _1111;
        float _1156 = _1079 * 0.5;
        float _1157 = _1089 * 0.5;
        float _1158 = _1099 * 0.5;
        float _1159 = dot(vec3(_1156, _1157, _1158), vec3(_1156, _1157, _1158));
        float _1164 = (_1159 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1159);
        float _1172 = (dot(vec3(_413, _414, _415), vec3(_1164 * _1156, _1164 * _1157, _1164 * _1158)) + 1.0) * 0.5;
        float _3371 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1181 = sqrt(((_1157 * _1157) + (_1156 * _1156)) + (_1158 * _1158)) / (_1112 + 9.9999997473787516355514526367188e-06);
        float _3382 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1182 = isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0));
        float _1183 = _1182 * 2.0;
        float _1187 = (1.0 - _1182) / (_1182 + 1.0);
        float _3393 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1188 = isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0));
        float _1197 = ((((1.0 - _1188) * (_1183 + 2.0)) * exp2(log2(isnan(1.0) ? _3371 : (isnan(_3371) ? 1.0 : min(_3371, 1.0))) * (_1183 + 1.0))) + _1188) * _1112;
        float _1198 = _1080 * 0.5;
        float _1199 = _1090 * 0.5;
        float _1200 = _1100 * 0.5;
        float _1201 = dot(vec3(_1198, _1199, _1200), vec3(_1198, _1199, _1200));
        float _1206 = (_1201 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1201);
        float _1214 = (dot(vec3(_413, _414, _415), vec3(_1206 * _1198, _1206 * _1199, _1206 * _1200)) + 1.0) * 0.5;
        float _3404 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1223 = sqrt(((_1199 * _1199) + (_1198 * _1198)) + (_1200 * _1200)) / (_1113 + 9.9999997473787516355514526367188e-06);
        float _3415 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1224 = isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0));
        float _1225 = _1224 * 2.0;
        float _1229 = (1.0 - _1224) / (_1224 + 1.0);
        float _3426 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1230 = isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0));
        float _1239 = ((((1.0 - _1230) * (_1225 + 2.0)) * exp2(log2(isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0))) * (_1225 + 1.0))) + _1230) * _1113;
        _1247 = _1080;
        _1248 = _1079;
        _1249 = _1078;
        _1250 = _1090;
        _1251 = _1089;
        _1252 = _1088;
        _1253 = _1100;
        _1254 = _1099;
        _1255 = _1098;
        _1256 = _1113;
        _1257 = _1112;
        _1258 = _1111;
        _1259 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0)));
        _1260 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0)));
        _1261 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0)));
    }
    else
    {
        _1247 = _938;
        _1248 = _938;
        _1249 = _938;
        _1250 = _938;
        _1251 = _938;
        _1252 = _938;
        _1253 = _938;
        _1254 = _938;
        _1255 = _938;
        _1256 = _938;
        _1257 = _938;
        _1258 = _938;
        _1259 = 0.0;
        _1260 = 0.0;
        _1261 = 0.0;
    }
    float _1271 = (cbModelParam._m0[1u].x * (_1259 - _950)) + _950;
    float _1272 = (cbModelParam._m0[1u].x * (_1260 - _951)) + _951;
    float _1273 = (cbModelParam._m0[1u].x * (_1261 - _952)) + _952;
    float _1294 = fma(_1273, cbSceneParam._m0[89u].z, fma(_1272, cbSceneParam._m0[89u].y, _1271 * cbSceneParam._m0[89u].x));
    float _1297 = fma(_1273, cbSceneParam._m0[90u].z, fma(_1272, cbSceneParam._m0[90u].y, _1271 * cbSceneParam._m0[90u].x));
    float _1300 = fma(_1273, cbSceneParam._m0[91u].z, fma(_1272, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1271));
    float _1315 = _574 * 0.5;
    float _1316 = _575 * 0.5;
    float _1317 = _576 * 0.5;
    float _1318 = dot(vec4(_1315, _1316, _1317, 1.0), vec4(_1249, _1252, _1255, _1258));
    float _1321 = dot(vec4(_1315, _1316, _1317, 1.0), vec4(_1248, _1251, _1254, _1257));
    float _1324 = dot(vec4(_1315, _1316, _1317, 1.0), vec4(_1247, _1250, _1253, _1256));
    float _1358;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1331 = dot(vec4(_1315, _1316, _1317, 1.0), vec4(_937, _941, _944, _947));
        float _1335 = dot(vec4(_1315, _1316, _1317, 1.0), vec4(_939, _942, _945, _948));
        float _1339 = dot(vec4(_1315, _1316, _1317, 1.0), vec4(_940, _943, _946, _949));
        float _1346 = dot(vec4(cbModelParam._m0[39u]), vec4(_1315, _1316, _1317, 1.0));
        _1358 = dot(vec3(isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0)), isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0)), isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1346) ? 0.0 : (isnan(0.0) ? _1346 : max(0.0, _1346))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1358 = 1.0;
    }
    float _1369;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1360 = dot(vec4(cbModelParam._m0[40u]), vec4(_1315, _1316, _1317, 1.0));
        _1369 = dot(vec3(isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0)), isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0)), isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1360) ? 0.0 : (isnan(0.0) ? _1360 : max(0.0, _1360))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1369 = 1.0;
    }
    float _1373 = (_1369 * cbModelParam._m0[1u].x) + (_1358 * (1.0 - cbModelParam._m0[1u].x));
    float _1383 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _416);
    float _1384 = isnan(_1383) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1383 : min(cbModelParam._m0[25u].z, _1383));
    float _1466;
    float _1468;
    float _1470;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1433 = fma(_635, cbModelParam._m0[13u].z, fma(_631, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _627)) + cbModelParam._m0[13u].w;
        float _1437 = fma(_635, cbModelParam._m0[14u].z, fma(_631, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _627)) + cbModelParam._m0[14u].w;
        float _1441 = fma(_635, cbModelParam._m0[15u].z, fma(_631, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _627)) + cbModelParam._m0[15u].w;
        float _1444 = fma(_576, cbModelParam._m0[13u].z, fma(_575, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _574));
        float _1447 = fma(_576, cbModelParam._m0[14u].z, fma(_575, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _574));
        float _1450 = fma(_576, cbModelParam._m0[15u].z, fma(_575, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _574));
        float _1478;
        if (_1444 > 0.0)
        {
            _1478 = abs((1.0 - _1433) / _1444);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1444 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1433 + 1.0) / _1444);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1478 = frontier_phi_14_12_ladder;
        }
        float _1829;
        if (_1447 > 0.0)
        {
            _1829 = abs((1.0 - _1437) / _1447);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1447 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1437 + 1.0) / _1447);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1829 = frontier_phi_23_19_ladder;
        }
        float _2134;
        if (_1450 > 0.0)
        {
            _2134 = abs((1.0 - _1441) / _1450);
        }
        else
        {
            float frontier_phi_37_30_ladder;
            if (_1450 < 0.0)
            {
                frontier_phi_37_30_ladder = abs((_1441 + 1.0) / _1450);
            }
            else
            {
                frontier_phi_37_30_ladder = 5000.0;
            }
            _2134 = frontier_phi_37_30_ladder;
        }
        float _2136 = isnan(_1829) ? _1478 : (isnan(_1478) ? _1829 : min(_1478, _1829));
        float _2137 = isnan(_2134) ? _2136 : (isnan(_2136) ? _2134 : min(_2136, _2134));
        float _2141 = (_2137 * _1444) + _1433;
        float _2142 = (_2137 * _1447) + _1437;
        float _2143 = (_2137 * _1450) + _1441;
        float _2144 = _2137 * 9.9999997473787516355514526367188e-05;
        float _2145 = (-1.0) - _2144;
        float _2147 = _2144 + 1.0;
        float frontier_phi_13_37_ladder;
        float frontier_phi_13_37_ladder_1;
        float frontier_phi_13_37_ladder_2;
        if ((_2143 > _2147) || ((_2143 < _2145) || ((_2142 > _2147) || ((_2142 < _2145) || ((_2141 < _2145) || (_2141 > _2147))))))
        {
            frontier_phi_13_37_ladder = 0.0;
            frontier_phi_13_37_ladder_1 = 0.0;
            frontier_phi_13_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2285 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2143, cbModelParam._m0[9u].z, fma(_2142, cbModelParam._m0[9u].y, _2141 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2143, cbModelParam._m0[10u].z, fma(_2142, cbModelParam._m0[10u].y, _2141 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2143, cbModelParam._m0[11u].z, fma(_2142, cbModelParam._m0[11u].y, _2141 * cbModelParam._m0[11u].x))), _1384);
            frontier_phi_13_37_ladder = _2285.z * cbModelParam._m0[1u].y;
            frontier_phi_13_37_ladder_1 = _2285.y * cbModelParam._m0[1u].y;
            frontier_phi_13_37_ladder_2 = _2285.x * cbModelParam._m0[1u].y;
        }
        _1466 = frontier_phi_13_37_ladder_2;
        _1468 = frontier_phi_13_37_ladder_1;
        _1470 = frontier_phi_13_37_ladder;
    }
    else
    {
        vec4 _1454 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_574, _575, _576), _1384);
        _1466 = _1454.x * cbModelParam._m0[1u].y;
        _1468 = _1454.y * cbModelParam._m0[1u].y;
        _1470 = _1454.z * cbModelParam._m0[1u].y;
    }
    float _1474 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _416);
    float _1475 = isnan(_1474) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1474 : min(cbModelParam._m0[25u].w, _1474));
    float _1568;
    float _1570;
    float _1572;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1532 = fma(_635, cbModelParam._m0[21u].z, fma(_631, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _627)) + cbModelParam._m0[21u].w;
        float _1536 = fma(_635, cbModelParam._m0[22u].z, fma(_631, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _627)) + cbModelParam._m0[22u].w;
        float _1540 = fma(_635, cbModelParam._m0[23u].z, fma(_631, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _627)) + cbModelParam._m0[23u].w;
        float _1543 = fma(_576, cbModelParam._m0[21u].z, fma(_575, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _574));
        float _1546 = fma(_576, cbModelParam._m0[22u].z, fma(_575, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _574));
        float _1549 = fma(_576, cbModelParam._m0[23u].z, fma(_575, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _574));
        float _1834;
        if (_1543 > 0.0)
        {
            _1834 = abs((1.0 - _1532) / _1543);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1543 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1532 + 1.0) / _1543);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1834 = frontier_phi_25_21_ladder;
        }
        float _2160;
        if (_1546 > 0.0)
        {
            _2160 = abs((1.0 - _1536) / _1546);
        }
        else
        {
            float frontier_phi_39_32_ladder;
            if (_1546 < 0.0)
            {
                frontier_phi_39_32_ladder = abs((_1536 + 1.0) / _1546);
            }
            else
            {
                frontier_phi_39_32_ladder = 5000.0;
            }
            _2160 = frontier_phi_39_32_ladder;
        }
        float _2351;
        if (_1549 > 0.0)
        {
            _2351 = abs((1.0 - _1540) / _1549);
        }
        else
        {
            float frontier_phi_57_50_ladder;
            if (_1549 < 0.0)
            {
                frontier_phi_57_50_ladder = abs((_1540 + 1.0) / _1549);
            }
            else
            {
                frontier_phi_57_50_ladder = 5000.0;
            }
            _2351 = frontier_phi_57_50_ladder;
        }
        float _2353 = isnan(_2160) ? _1834 : (isnan(_1834) ? _2160 : min(_1834, _2160));
        float _2354 = isnan(_2351) ? _2353 : (isnan(_2353) ? _2351 : min(_2353, _2351));
        float _2358 = (_2354 * _1543) + _1532;
        float _2359 = (_2354 * _1546) + _1536;
        float _2360 = (_2354 * _1549) + _1540;
        float _2361 = _2354 * 9.9999997473787516355514526367188e-05;
        float _2362 = (-1.0) - _2361;
        float _2364 = _2361 + 1.0;
        float frontier_phi_22_57_ladder;
        float frontier_phi_22_57_ladder_1;
        float frontier_phi_22_57_ladder_2;
        if ((_2360 > _2364) || ((_2360 < _2362) || ((_2359 > _2364) || ((_2359 < _2362) || ((_2358 < _2362) || (_2358 > _2364))))))
        {
            frontier_phi_22_57_ladder = 0.0;
            frontier_phi_22_57_ladder_1 = 0.0;
            frontier_phi_22_57_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2604 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2360, cbModelParam._m0[17u].z, fma(_2359, cbModelParam._m0[17u].y, _2358 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2360, cbModelParam._m0[18u].z, fma(_2359, cbModelParam._m0[18u].y, _2358 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2360, cbModelParam._m0[19u].z, fma(_2359, cbModelParam._m0[19u].y, _2358 * cbModelParam._m0[19u].x))), _1475);
            frontier_phi_22_57_ladder = _2604.x * cbModelParam._m0[1u].z;
            frontier_phi_22_57_ladder_1 = _2604.z * cbModelParam._m0[1u].z;
            frontier_phi_22_57_ladder_2 = _2604.y * cbModelParam._m0[1u].z;
        }
        _1568 = frontier_phi_22_57_ladder;
        _1570 = frontier_phi_22_57_ladder_2;
        _1572 = frontier_phi_22_57_ladder_1;
    }
    else
    {
        vec4 _1552 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_574, _575, _576), _1475);
        _1568 = _1552.x * cbModelParam._m0[1u].z;
        _1570 = _1552.y * cbModelParam._m0[1u].z;
        _1572 = _1552.z * cbModelParam._m0[1u].z;
    }
    float _1584 = ((((1.0 - _595) * ((_582 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_595 * _582)) * _566;
    float _1585 = _1584 * ((cbModelParam._m0[1u].w * (_1568 - _1466)) + _1466);
    float _1586 = _1584 * ((cbModelParam._m0[1u].w * (_1570 - _1468)) + _1468);
    float _1587 = _1584 * ((cbModelParam._m0[1u].w * (_1572 - _1470)) + _1470);
    float _1590 = fma(_1587, cbSceneParam._m0[89u].z, fma(_1586, cbSceneParam._m0[89u].y, _1585 * cbSceneParam._m0[89u].x));
    float _1593 = fma(_1587, cbSceneParam._m0[90u].z, fma(_1586, cbSceneParam._m0[90u].y, _1585 * cbSceneParam._m0[90u].x));
    float _1596 = fma(_1587, cbSceneParam._m0[91u].z, fma(_1586, cbSceneParam._m0[91u].y, _1585 * cbSceneParam._m0[91u].x));
    uvec4 _1606 = floatBitsToUint(cbInstanceData._m0[_540 + 5u]);
    uint _1608 = _1606.x * 14u;
    uint _1609 = _1608 + 13u;
    float _1614 = _566 + (-1.0);
    float _1617 = (cbLight._m0[_1609].x * _1614) + 1.0;
    float _1618 = (cbLight._m0[_1609].y * _1614) + 1.0;
    uint _1619 = _1608 + 5u;
    float _1625 = isnan(1.0) ? _1618 : (isnan(_1618) ? 1.0 : min(_1618, 1.0));
    uint _1629 = _1608 + 4u;
    float _1636 = isnan(1.0) ? _1617 : (isnan(_1617) ? 1.0 : min(_1617, 1.0));
    uint _1640 = _1608 | 1u;
    float _1651 = dot(vec3(cbLight._m0[_1608].xyz), vec3(_413, _414, _415));
    float _1654 = dot(vec3(cbLight._m0[_1640].xyz), vec3(_413, _414, _415));
    float _3562 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
    float _3573 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
    float _1659 = (isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0))) * 0.3183098733425140380859375;
    float _1661 = (isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0))) * 0.3183098733425140380859375;
    float _1668 = ((cbLight._m0[_1619].x * _1625) * _1661) + ((cbLight._m0[_1629].x * _1636) * _1659);
    float _1669 = ((_1625 * cbLight._m0[_1619].y) * _1661) + ((_1636 * cbLight._m0[_1629].y) * _1659);
    float _1670 = ((_1625 * cbLight._m0[_1619].z) * _1661) + ((_1636 * cbLight._m0[_1629].z) * _1659);
    uint _1672 = _1608 + 8u;
    float _1685 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1608].w)) * _416) * 0.949999988079071044921875);
    float _1686 = _1685 * _1685;
    float _1687 = cbLight._m0[_1608].x + _489;
    float _1688 = cbLight._m0[_1608].y + _490;
    float _1689 = cbLight._m0[_1608].z + _491;
    float _1693 = inversesqrt(dot(vec3(_1687, _1688, _1689), vec3(_1687, _1688, _1689)));
    float _1694 = _1693 * _1687;
    float _1695 = _1693 * _1688;
    float _1696 = _1693 * _1689;
    float _1697 = dot(vec3(_413, _414, _415), vec3(cbLight._m0[_1608].xyz));
    float _3584 = isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0));
    float _1700 = isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0));
    float _3595 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _1701 = isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0));
    float _1702 = dot(vec3(_413, _414, _415), vec3(_1694, _1695, _1696));
    float _3606 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
    float _1705 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
    float _1706 = dot(vec3(cbLight._m0[_1608].xyz), vec3(_1694, _1695, _1696));
    float _3617 = isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0));
    float _1710 = _1686 * _1686;
    float _1714 = ((_1705 * _1705) * (_1710 + (-1.0))) + 1.0;
    float _1725 = (exp2(log2(1.0 - (isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1726 = 1.0 - _1686;
    float _1737 = (0.5 / (((_1701 * ((_1700 * _1726) + _1686)) + 9.9999999392252902907785028219223e-09) + (((_1701 * _1726) + _1686) * _1700))) * _1700;
    float _3628 = isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0));
    float _1739 = (isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0))) * (_1710 / ((_1714 * _1714) * 3.141590118408203125));
    uint _1750 = _1608 + 9u;
    float _1761 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1640].w)) * _416) * 0.949999988079071044921875);
    float _1762 = _1761 * _1761;
    float _1763 = cbLight._m0[_1640].x + _489;
    float _1764 = cbLight._m0[_1640].y + _490;
    float _1765 = cbLight._m0[_1640].z + _491;
    float _1769 = inversesqrt(dot(vec3(_1763, _1764, _1765), vec3(_1763, _1764, _1765)));
    float _1770 = _1769 * _1763;
    float _1771 = _1769 * _1764;
    float _1772 = _1769 * _1765;
    float _1773 = dot(vec3(_413, _414, _415), vec3(cbLight._m0[_1640].xyz));
    float _3639 = isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0));
    float _1776 = isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0));
    float _1777 = dot(vec3(_413, _414, _415), vec3(_1770, _1771, _1772));
    float _3650 = isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0));
    float _1780 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
    float _1781 = dot(vec3(cbLight._m0[_1640].xyz), vec3(_1770, _1771, _1772));
    float _3661 = isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0));
    float _1785 = _1762 * _1762;
    float _1789 = ((_1780 * _1780) * (_1785 + (-1.0))) + 1.0;
    float _1798 = (exp2(log2(1.0 - (isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1799 = 1.0 - _1762;
    float _1809 = (0.5 / (((_1701 * ((_1776 * _1799) + _1762)) + 9.9999999392252902907785028219223e-09) + (((_1701 * _1799) + _1762) * _1776))) * _1776;
    float _3672 = isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0));
    float _1811 = (isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0))) * (_1785 / ((_1789 * _1789) * 3.141590118408203125));
    float _1821 = (((_1798 * cbLight._m0[_1750].x) * _1811) * _1625) + (((_1725 * cbLight._m0[_1672].x) * _1739) * _1636);
    float _1822 = (((_1798 * cbLight._m0[_1750].y) * _1811) * _1625) + (((_1725 * cbLight._m0[_1672].y) * _1739) * _1636);
    float _1823 = (((_1798 * cbLight._m0[_1750].z) * _1811) * _1625) + (((_1725 * cbLight._m0[_1672].z) * _1739) * _1636);
    float _1938;
    float _1940;
    float _1942;
    float _1944;
    float _1946;
    float _1948;
    if (_1606.y == 0u)
    {
        float _1878 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1879 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1878;
        float _1880 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1878;
        float _1881 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1878;
        uvec4 _1893 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1894 = _1893.x;
        uint _1905 = uint((float(_1893.y) * floor(float(uint(cbSceneParam._m0[85u].y * _500) / _1894))) + floor(float(uint(cbSceneParam._m0[85u].x * _499) / _1894)));
        float _1915 = (log2(_1881 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1916 = isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0));
        uint _1919 = uint(isnan(14.0) ? _1916 : (isnan(_1916) ? 14.0 : min(_1916, 14.0)));
        uvec4 _1924 = texelFetch(g_lightClusterGridBuffer, int(((_1919 << 2u) + (_1905 << 6u)) >> 2u));
        uint _1925 = _1924.x;
        uint _1926 = _1893.z;
        float _2013;
        float _2015;
        float _2017;
        float _2019;
        float _2021;
        float _2023;
        if (((((1u << ((_1926 >> 4u) & 15u)) + 4294967295u) & _1925) == 0u) || ((_1926 & 240u) == 0u))
        {
            _2013 = 0.0;
            _2015 = 0.0;
            _2017 = 0.0;
            _2019 = 0.0;
            _2021 = 0.0;
            _2023 = 0.0;
        }
        else
        {
            float _2014;
            float _2016;
            float _2018;
            float _2020;
            float _2022;
            float _2024;
            float _2197 = 0.0;
            float _2198 = 0.0;
            float _2199 = 0.0;
            float _2200 = 0.0;
            float _2201 = 0.0;
            float _2202 = 0.0;
            uint _2203 = 0u;
            uint _2212;
            bool _2213;
            for (;;)
            {
                _2212 = texelFetch(g_lightClassification, int((((_1919 << 5u) + (_1905 << 9u)) + (_2203 << 2u)) >> 2u)).x;
                _2213 = _2212 == 0u;
                float frontier_phi_52_pred;
                float frontier_phi_52_pred_1;
                float frontier_phi_52_pred_2;
                float frontier_phi_52_pred_3;
                float frontier_phi_52_pred_4;
                float frontier_phi_52_pred_5;
                if (_2213)
                {
                    frontier_phi_52_pred = _2201;
                    frontier_phi_52_pred_1 = _2202;
                    frontier_phi_52_pred_2 = _2200;
                    frontier_phi_52_pred_3 = _2199;
                    frontier_phi_52_pred_4 = _2198;
                    frontier_phi_52_pred_5 = _2197;
                }
                else
                {
                    float _2394;
                    float _2395;
                    float _2396;
                    float _2397;
                    float _2398;
                    float _2399;
                    uint _2400;
                    _2394 = _2197;
                    _2395 = _2198;
                    _2396 = _2199;
                    _2397 = _2200;
                    _2398 = _2201;
                    _2399 = _2202;
                    _2400 = _2212;
                    float _2294;
                    float _2295;
                    float _2296;
                    float _2297;
                    float _2298;
                    float _2299;
                    for (;;)
                    {
                        uint _2404 = uint(findLSB(_2400)) + (_2203 << 5u);
                        uint _2401 = (_2400 + 4294967295u) & _2400;
                        uint _2406 = _2404 * 48u;
                        vec4 _2420 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2406)).x, texelFetch(g_PointLightRenderingBuffer, int(_2406 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2406 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2406 + 3u)).x));
                        uint _2426 = (_2404 * 48u) + 4u;
                        vec4 _2439 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2426)).x, texelFetch(g_PointLightRenderingBuffer, int(_2426 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2426 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2426 + 3u)).x));
                        uint _2445 = (_2404 * 48u) + 8u;
                        vec3 _2456 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2445)).x, texelFetch(g_PointLightRenderingBuffer, int(_2445 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2445 + 2u)).x));
                        float _2460 = _2420.x - _1879;
                        float _2461 = _2420.y - _1880;
                        float _2462 = _2420.z - _1881;
                        float _2463 = dot(vec3(_2460, _2461, _2462), vec3(_2460, _2461, _2462));
                        float _2466 = inversesqrt(_2463);
                        float _2467 = _2466 * _2460;
                        float _2468 = _2466 * _2461;
                        float _2469 = _2466 * _2462;
                        float _2470 = dot(vec3(_521, _524, _527), vec3(_2467, _2468, _2469));
                        float _2475 = 1.0 - (_2463 * _2420.w);
                        float _3693 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
                        float _2476 = isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0));
                        float _2477 = sqrt(_2463) * _2439.w;
                        float _2480 = 1.39999997615814208984375 / (_2477 + 1.39999997615814208984375);
                        float _2481 = _2480 * _2480;
                        float _2484 = ((1.0 - _2481) * _2470) + _2481;
                        float _2487 = _2477 * _2477;
                        float _2491 = ((isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : max(_2484, 0.0))) * _2476) / ((_2487 * 0.699999988079071044921875) + 1.0);
                        float _2495 = (-0.0) - _1879;
                        float _2496 = (-0.0) - _1880;
                        float _2497 = (-0.0) - _1881;
                        float _2501 = inversesqrt(dot(vec3(_2495, _2496, _2497), vec3(_2495, _2496, _2497)));
                        float _2502 = _2501 * _2495;
                        float _2503 = _2501 * _2496;
                        float _2504 = _2501 * _2497;
                        float _2512 = exp2(log2(1.0 / ((_2487 * 3.5) + 5.0)) * 0.25);
                        float _2513 = 1.0 - _582;
                        float _2520 = sqrt(1.0 - ((1.0 - (_2513 * _2513)) * (1.0 - (_2512 * _2512))));
                        float _2521 = _2520 * _2520;
                        float _2522 = _2521 * _2521;
                        float _2523 = _2502 + _2467;
                        float _2524 = _2503 + _2468;
                        float _2525 = _2504 + _2469;
                        float _2529 = inversesqrt(dot(vec3(_2523, _2524, _2525), vec3(_2523, _2524, _2525)));
                        float _2533 = dot(vec3(_521, _524, _527), vec3(_2502, _2503, _2504));
                        float _3709 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
                        float _2536 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
                        float _2537 = dot(vec3(_521, _524, _527), vec3(_2529 * _2523, _2529 * _2524, _2529 * _2525));
                        float _3720 = isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0));
                        float _2540 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
                        float _2544 = ((_2540 * _2540) * (_2522 + (-1.0))) + 1.0;
                        float _2545 = _2480 * _2521;
                        float _2546 = _2545 * _2545;
                        float _2549 = ((1.0 - _2546) * _2470) + _2546;
                        float _3731 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
                        float _2550 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
                        float _2551 = 1.0 - _2521;
                        float _2561 = (0.5 / (((_2550 * ((_2536 * _2551) + _2521)) + 9.9999999392252902907785028219223e-09) + (((_2550 * _2551) + _2521) * _2536))) * _2550;
                        float _3742 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0));
                        float _2572 = (((_2522 * 3.1415927410125732421875) * (isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0)))) / ((_2544 * _2544) * ((_2487 * 2.1991131305694580078125) + 3.141590118408203125))) * _2476;
                        _2297 = (_2491 * _2439.x) + _2397;
                        _2298 = (_2491 * _2439.y) + _2398;
                        _2299 = (_2491 * _2439.z) + _2399;
                        _2294 = (_2572 * _2456.x) + _2394;
                        _2295 = (_2572 * _2456.y) + _2395;
                        _2296 = (_2572 * _2456.z) + _2396;
                        if (_2401 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2394 = _2294;
                            _2395 = _2295;
                            _2396 = _2296;
                            _2397 = _2297;
                            _2398 = _2298;
                            _2399 = _2299;
                            _2400 = _2401;
                        }
                    }
                    frontier_phi_52_pred = _2298;
                    frontier_phi_52_pred_1 = _2299;
                    frontier_phi_52_pred_2 = _2297;
                    frontier_phi_52_pred_3 = _2296;
                    frontier_phi_52_pred_4 = _2295;
                    frontier_phi_52_pred_5 = _2294;
                }
                _2022 = frontier_phi_52_pred;
                _2024 = frontier_phi_52_pred_1;
                _2020 = frontier_phi_52_pred_2;
                _2018 = frontier_phi_52_pred_3;
                _2016 = frontier_phi_52_pred_4;
                _2014 = frontier_phi_52_pred_5;
                uint _2204 = _2203 + 1u;
                if (_2204 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2197 = _2014;
                    _2198 = _2016;
                    _2199 = _2018;
                    _2200 = _2020;
                    _2201 = _2022;
                    _2202 = _2024;
                    _2203 = _2204;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2013 = _2014;
            _2015 = _2016;
            _2017 = _2018;
            _2019 = _2020;
            _2021 = _2022;
            _2023 = _2024;
        }
        uvec4 _2027 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2028 = _2027.z;
        uint _2030 = (_2028 >> 8u) & 15u;
        float _2165;
        float _2167;
        float _2169;
        float _2171;
        float _2173;
        float _2175;
        if (((4294967295u << _2030) & _1925) == 0u)
        {
            _2165 = _2013;
            _2167 = _2015;
            _2169 = _2017;
            _2171 = _2019;
            _2173 = _2021;
            _2175 = _2023;
        }
        else
        {
            float _2190 = inversesqrt(dot(vec3(_1879, _1880, _1881), vec3(_1879, _1880, _1881)));
            float _2191 = _2190 * _1879;
            float _2192 = _2190 * _1880;
            float _2193 = _2190 * _1881;
            float frontier_phi_41_42_ladder;
            float frontier_phi_41_42_ladder_1;
            float frontier_phi_41_42_ladder_2;
            float frontier_phi_41_42_ladder_3;
            float frontier_phi_41_42_ladder_4;
            float frontier_phi_41_42_ladder_5;
            if (_2030 < ((_2028 >> 12u) & 15u))
            {
                float _2166;
                float _2168;
                float _2170;
                float _2172;
                float _2174;
                float _2176;
                float _2377 = _2013;
                float _2378 = _2015;
                float _2379 = _2017;
                float _2380 = _2019;
                float _2381 = _2021;
                float _2382 = _2023;
                uint _2383 = _2030;
                uint _2392;
                bool _2393;
                for (;;)
                {
                    _2392 = texelFetch(g_lightClassification, int((((_1919 << 5u) + (_1905 << 9u)) + (_2383 << 2u)) >> 2u)).x;
                    _2393 = _2392 == 0u;
                    float frontier_phi_66_pred;
                    float frontier_phi_66_pred_1;
                    float frontier_phi_66_pred_2;
                    float frontier_phi_66_pred_3;
                    float frontier_phi_66_pred_4;
                    float frontier_phi_66_pred_5;
                    if (_2393)
                    {
                        frontier_phi_66_pred = _2382;
                        frontier_phi_66_pred_1 = _2381;
                        frontier_phi_66_pred_2 = _2380;
                        frontier_phi_66_pred_3 = _2379;
                        frontier_phi_66_pred_4 = _2378;
                        frontier_phi_66_pred_5 = _2377;
                    }
                    else
                    {
                        float _2609;
                        float _2610;
                        float _2611;
                        float _2612;
                        float _2613;
                        float _2614;
                        float _2905;
                        float _2906;
                        float _2907;
                        float _2908;
                        float _2909;
                        float _2910;
                        float _2622 = _2377;
                        float _2623 = _2378;
                        float _2624 = _2379;
                        float _2625 = _2380;
                        float _2626 = _2381;
                        float _2627 = _2382;
                        uint _2628 = _2392;
                        uint _2629;
                        vec4 _2654;
                        float _2655;
                        vec4 _2670;
                        vec3 _2682;
                        vec4 _2698;
                        vec4 _2714;
                        float _2761;
                        bool _2762;
                        for (;;)
                        {
                            uint _2639 = ((_2383 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2628));
                            _2629 = (_2628 + 4294967295u) & _2628;
                            uint _2641 = _2639 * 40u;
                            _2654 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2641)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2641 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2641 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2641 + 3u)).x));
                            _2655 = _2654.w;
                            uint _2657 = (_2639 * 40u) + 4u;
                            _2670 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2657)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2657 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2657 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2657 + 3u)).x));
                            uint _2672 = (_2639 * 40u) + 8u;
                            _2682 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2672)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2672 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2672 + 2u)).x));
                            uint _2685 = (_2639 * 40u) + 16u;
                            _2698 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2685)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2685 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2685 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2685 + 3u)).x));
                            uint _2701 = (_2639 * 40u) + 20u;
                            _2714 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2701)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2701 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2701 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2701 + 3u)).x));
                            uint _2717 = (_2639 * 40u) + 24u;
                            vec4 _2730 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2717)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2717 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2717 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2717 + 3u)).x));
                            uint _2736 = (_2639 * 40u) + 28u;
                            vec4 _2749 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2736)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2736 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2736 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2736 + 3u)).x));
                            _2761 = fma(_1881, _2749.z, fma(_1880, _2749.y, _2749.x * _1879)) + _2749.w;
                            _2762 = !((fma(_1881, _2730.z, fma(_1880, _2730.y, _2730.x * _1879)) + _2730.w) <= 0.0);
                            float frontier_phi_72_pred;
                            float frontier_phi_72_pred_1;
                            float frontier_phi_72_pred_2;
                            float frontier_phi_72_pred_3;
                            float frontier_phi_72_pred_4;
                            float frontier_phi_72_pred_5;
                            if (_2762)
                            {
                                float _2789 = _2654.x - _1879;
                                float _2790 = _2654.y - _1880;
                                float _2791 = _2654.z - _1881;
                                float _2792 = dot(vec3(_2789, _2790, _2791), vec3(_2789, _2790, _2791));
                                float _2795 = inversesqrt(_2792);
                                float _2796 = _2795 * _2789;
                                float _2797 = _2795 * _2790;
                                float _2798 = _2795 * _2791;
                                float _2802 = 1.0 - (_2792 / (_2655 * _2655));
                                float _3753 = isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : max(_2802, 0.0));
                                float _2803 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
                                float _2807 = sqrt(_2792) * _2670.w;
                                float _2809 = 1.39999997615814208984375 / (_2807 + 1.39999997615814208984375);
                                float _2810 = _2809 * _2809;
                                float _2813 = ((1.0 - _2810) * dot(vec3(_2796, _2797, _2798), vec3(_521, _524, _527))) + _2810;
                                float _2816 = _2807 * _2807;
                                float _2820 = (fma(_1881, _2698.z, fma(_1880, _2698.y, _2698.x * _1879)) + _2698.w) / _2761;
                                float _2821 = (fma(_1881, _2714.z, fma(_1880, _2714.y, _2714.x * _1879)) + _2714.w) / _2761;
                                float _2825 = 1.0 - dot(vec2(_2820, _2821), vec2(_2820, _2821));
                                float _3769 = isnan(0.0) ? _2825 : (isnan(_2825) ? 0.0 : max(_2825, 0.0));
                                float _2826 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
                                float _2827 = _2826 * (((isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : max(_2813, 0.0))) * _2803) / ((_2816 * 0.699999988079071044921875) + 1.0));
                                float _2839 = exp2(log2(1.0 / ((_2816 * 3.5) + 5.0)) * 0.25);
                                float _2840 = 1.0 - _582;
                                float _2847 = sqrt(1.0 - ((1.0 - (_2840 * _2840)) * (1.0 - (_2839 * _2839))));
                                float _2848 = _2847 * _2847;
                                float _2849 = _2848 * _2848;
                                float _2850 = _2796 - _2191;
                                float _2851 = _2797 - _2192;
                                float _2852 = _2798 - _2193;
                                float _2856 = inversesqrt(dot(vec3(_2850, _2851, _2852), vec3(_2850, _2851, _2852)));
                                float _2860 = dot(vec3(_521, _524, _527), vec3((-0.0) - _2191, (-0.0) - _2192, (-0.0) - _2193));
                                float _3780 = isnan(0.0) ? _2860 : (isnan(_2860) ? 0.0 : max(_2860, 0.0));
                                float _2863 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
                                float _2864 = dot(vec3(_521, _524, _527), vec3(_2856 * _2850, _2856 * _2851, _2856 * _2852));
                                float _3791 = isnan(0.0) ? _2864 : (isnan(_2864) ? 0.0 : max(_2864, 0.0));
                                float _2867 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
                                float _2871 = ((_2867 * _2867) * (_2849 + (-1.0))) + 1.0;
                                float _2872 = _2809 * _2848;
                                float _2873 = _2872 * _2872;
                                float _2879 = ((1.0 - _2873) * dot(vec3(_521, _524, _527), vec3(_2796, _2797, _2798))) + _2873;
                                float _3802 = isnan(0.0) ? _2879 : (isnan(_2879) ? 0.0 : max(_2879, 0.0));
                                float _2880 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
                                float _2881 = 1.0 - _2848;
                                float _2891 = (0.5 / (((_2880 * ((_2863 * _2881) + _2848)) + 9.9999999392252902907785028219223e-09) + (((_2880 * _2881) + _2848) * _2863))) * _2880;
                                float _3813 = isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : max(_2891, 0.0));
                                float _2901 = (_2826 * _2803) * (((_2849 * 3.1415927410125732421875) * (isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0)))) / ((_2871 * _2871) * ((_2816 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_72_pred = _2827 * _2670.x;
                                frontier_phi_72_pred_1 = _2827 * _2670.z;
                                frontier_phi_72_pred_2 = _2827 * _2670.y;
                                frontier_phi_72_pred_3 = _2901 * _2682.z;
                                frontier_phi_72_pred_4 = _2901 * _2682.y;
                                frontier_phi_72_pred_5 = _2901 * _2682.x;
                            }
                            else
                            {
                                frontier_phi_72_pred = 0.0;
                                frontier_phi_72_pred_1 = 0.0;
                                frontier_phi_72_pred_2 = 0.0;
                                frontier_phi_72_pred_3 = 0.0;
                                frontier_phi_72_pred_4 = 0.0;
                                frontier_phi_72_pred_5 = 0.0;
                            }
                            _2908 = frontier_phi_72_pred;
                            _2910 = frontier_phi_72_pred_1;
                            _2909 = frontier_phi_72_pred_2;
                            _2907 = frontier_phi_72_pred_3;
                            _2906 = frontier_phi_72_pred_4;
                            _2905 = frontier_phi_72_pred_5;
                            _2612 = _2908 + _2625;
                            _2613 = _2909 + _2626;
                            _2614 = _2910 + _2627;
                            _2609 = _2905 + _2622;
                            _2610 = _2906 + _2623;
                            _2611 = _2907 + _2624;
                            if (_2629 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2622 = _2609;
                                _2623 = _2610;
                                _2624 = _2611;
                                _2625 = _2612;
                                _2626 = _2613;
                                _2627 = _2614;
                                _2628 = _2629;
                                continue;
                            }
                        }
                        frontier_phi_66_pred = _2614;
                        frontier_phi_66_pred_1 = _2613;
                        frontier_phi_66_pred_2 = _2612;
                        frontier_phi_66_pred_3 = _2611;
                        frontier_phi_66_pred_4 = _2610;
                        frontier_phi_66_pred_5 = _2609;
                    }
                    _2176 = frontier_phi_66_pred;
                    _2174 = frontier_phi_66_pred_1;
                    _2172 = frontier_phi_66_pred_2;
                    _2170 = frontier_phi_66_pred_3;
                    _2168 = frontier_phi_66_pred_4;
                    _2166 = frontier_phi_66_pred_5;
                    uint _2384 = _2383 + 1u;
                    if (_2384 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2377 = _2166;
                        _2378 = _2168;
                        _2379 = _2170;
                        _2380 = _2172;
                        _2381 = _2174;
                        _2382 = _2176;
                        _2383 = _2384;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_41_42_ladder = _2168;
                frontier_phi_41_42_ladder_1 = _2176;
                frontier_phi_41_42_ladder_2 = _2174;
                frontier_phi_41_42_ladder_3 = _2172;
                frontier_phi_41_42_ladder_4 = _2170;
                frontier_phi_41_42_ladder_5 = _2166;
            }
            else
            {
                frontier_phi_41_42_ladder = _2015;
                frontier_phi_41_42_ladder_1 = _2023;
                frontier_phi_41_42_ladder_2 = _2021;
                frontier_phi_41_42_ladder_3 = _2019;
                frontier_phi_41_42_ladder_4 = _2017;
                frontier_phi_41_42_ladder_5 = _2013;
            }
            _2165 = frontier_phi_41_42_ladder_5;
            _2167 = frontier_phi_41_42_ladder;
            _2169 = frontier_phi_41_42_ladder_4;
            _2171 = frontier_phi_41_42_ladder_3;
            _2173 = frontier_phi_41_42_ladder_2;
            _2175 = frontier_phi_41_42_ladder_1;
        }
        float _2180 = isnan(1.0) ? _566 : (isnan(_566) ? 1.0 : min(_566, 1.0));
        _1938 = (_2180 * _2171) + _1668;
        _1940 = (_2180 * _2173) + _1669;
        _1942 = (_2180 * _2175) + _1670;
        _1944 = ((_2165 * 0.039999999105930328369140625) * _2180) + _1821;
        _1946 = ((_2167 * 0.039999999105930328369140625) * _2180) + _1822;
        _1948 = ((_2169 * 0.039999999105930328369140625) * _2180) + _1823;
    }
    else
    {
        _1938 = _1668;
        _1940 = _1669;
        _1942 = _1670;
        _1944 = _1821;
        _1946 = _1822;
        _1948 = _1823;
    }
    float _3829 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    float _3840 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
    float _3851 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _1965 = ((isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0))) * (_1938 + ((isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0))) * _566))) + ((_1944 + ((isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0))) * _1373)) * cbPerFrame._m0[3u].x);
    float _1966 = ((isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0))) * (_1940 + ((isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0))) * _566))) + ((_1946 + ((isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0))) * _1373)) * cbPerFrame._m0[3u].x);
    float _1967 = ((isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0))) * (_1942 + ((isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0))) * _566))) + ((_1948 + ((isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0))) * _1373)) * cbPerFrame._m0[3u].x);
    uint _1968 = _540 + 6u;
    float _1976 = _499 / cbSceneParam._m0[86u].x;
    float _1977 = _500 / cbSceneParam._m0[86u].y;
    vec4 _1991 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1976, _1977, (log2((isnan(cbSceneParam._m0[77u].w) ? _433 : (isnan(_433) ? cbSceneParam._m0[77u].w : min(_433, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1993 = _1991.x;
    float _1994 = _1991.y;
    float _1995 = _1991.z;
    float _1996 = _1991.w;
    float _2076;
    float _2078;
    float _2080;
    float _2082;
    if (_433 > cbSceneParam._m0[78u].w)
    {
        float _2038 = isnan(_433) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _433 : min(cbSceneParam._m0[80u].w, _433));
        float _2039 = _2038 / _433;
        float _2050 = _2039 * _482;
        float _2051 = _483 * _2039;
        float _2052 = (-0.0) - _2051;
        float _2053 = _2039 * _484;
        float _2055 = (cbSceneParam._m0[77u].w * _2052) / _2038;
        float _2056 = _2055 + cbSceneParam._m0[79u].w;
        float _2057 = cbSceneParam._m0[79u].w - _2051;
        float _2063 = sqrt(((_2050 * _2050) + (_2051 * _2051)) + (_2053 * _2053));
        float _2066 = (1.0 - (cbSceneParam._m0[77u].w / _2038)) * _2063;
        float _2072 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2074 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2307;
        if (abs((_2052 - _2055) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2307 = ((((_2056 > 0.0) ? exp2(_2072 * _2056) : (2.0 - exp2(_2074 * _2056))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2066;
        }
        else
        {
            float _2226 = 1.0 / cbSceneParam._m0[80u].x;
            float _2227 = isnan(_2057) ? _2056 : (isnan(_2056) ? _2057 : max(_2056, _2057));
            float _2228 = isnan(_2057) ? _2056 : (isnan(_2056) ? _2057 : min(_2056, _2057));
            float _2237 = isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : min(_2227, 0.0));
            float _2238 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : min(_2228, 0.0));
            _2307 = ((abs(_2063 / _2052) * cbSceneParam._m0[80u].y) * ((((_2237 - _2238) * 2.0) - ((exp2(_2072 * (isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0)))) - exp2(_2072 * (isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0))))) * _2226)) - ((exp2(_2074 * _2237) - exp2(_2074 * _2238)) * _2226))) + (_2066 * cbSceneParam._m0[80u].z);
        }
        vec4 _2309 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1976, _1977, 1.0), 0.0);
        float _2318 = exp2((_2307 * (-1.44269502162933349609375)) * (1.0 - _2309.w));
        float _2319 = log2(_2318);
        float _2335 = log2(_1996);
        _2076 = (exp2(_2335 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2319 * cbSceneParam._m0[78u].x)) * _2309.x) / cbSceneParam._m0[78u].x)) + _1993;
        _2078 = (exp2(_2335 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2319 * cbSceneParam._m0[78u].y)) * _2309.y) / cbSceneParam._m0[78u].y)) + _1994;
        _2080 = (exp2(_2335 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2319 * cbSceneParam._m0[78u].z)) * _2309.z) / cbSceneParam._m0[78u].z)) + _1995;
        _2082 = _2318 * _1996;
    }
    else
    {
        _2076 = _1993;
        _2078 = _1994;
        _2080 = _1995;
        _2082 = _1996;
    }
    bool _2345;
    vec4 _2092;
    vec4 _2114;
    float _2116;
    float _2120;
    float _2121;
    float _2122;
    float _2123;
    bool _2133;
    for (;;)
    {
        _2092 = cbMatDynParam._m0[0u];
        float _2094 = roundEven(_2092.y);
        bool _2095 = _2094 == 3.0;
        float _2096 = log2(_2082);
        float _2103 = exp2(_2096 * cbSceneParam._m0[78u].x) * _1965;
        float _2104 = exp2(_2096 * cbSceneParam._m0[78u].y) * _1966;
        float _2105 = exp2(_2096 * cbSceneParam._m0[78u].z) * _1967;
        float _2112 = _494 + (-0.5);
        _2114 = cbMtdParam._m0[1u];
        _2116 = _2114.y * _2112;
        float _2119 = (_2094 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2120 = _2119 * (_2095 ? _2103 : (_2103 + (cbSceneParam._m0[72u].w * _2076)));
        _2121 = _2119 * (_2095 ? _2104 : (_2104 + (cbSceneParam._m0[72u].w * _2078)));
        _2122 = _2119 * (_2095 ? _2105 : (_2105 + (cbSceneParam._m0[72u].w * _2080)));
        _2123 = _2112 * 0.999000012874603271484375;
        _2133 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2133)
        {
            if ((cbInstanceData._m0[_540 + 7u].x + _2123) < 0.5)
            {
                _2345 = true;
                break;
            }
        }
        uint _2261 = _542 + uint(_2092.w);
        if ((cbInstanceData._m0[_2261].w < 1.0) && ((cbInstanceData._m0[_2261].w + _2123) < 0.5))
        {
            _2345 = true;
            break;
        }
        if ((_2116 + _371) < _2114.x)
        {
            _2345 = true;
            break;
        }
        _2345 = false;
        break;
    }
    float _2579;
    if (_2345)
    {
        discard_state = true;
        _2579 = 0.0;
    }
    else
    {
        _2579 = cbInstanceData._m0[_1968].w;
    }
    SV_Target.x = _2120;
    SV_Target.y = _2121;
    SV_Target.z = _2122;
    SV_Target.w = _2579;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1968].w;
    discard_exit();
}


