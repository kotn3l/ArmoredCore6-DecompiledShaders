#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_Ground_blend_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D S_Ground_blend_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _942;
float _3330;
float _3331;
float _3332;
float _3333;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _194 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _201 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _208 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _256 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _266 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _256);
    float _267 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _256);
    float _268 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _256);
    vec4 _286 = texture(sampler2D(S_Ground_blend_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _293 = _286.x * cbMtdParam._m0[9u].x;
    float _294 = _286.y * cbMtdParam._m0[9u].y;
    float _295 = _286.z * cbMtdParam._m0[9u].z;
    float _304 = sqrt(((_266 * _266) + (_267 * _267)) + (_268 * _268));
    float _307 = cbMtdParam._m0[10u].z - cbMtdParam._m0[10u].y;
    float _309 = (_304 - cbMtdParam._m0[10u].y) / (isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0)));
    float _3347 = isnan(0.0) ? _309 : (isnan(_309) ? 0.0 : max(_309, 0.0));
    float _317 = cbMtdParam._m0[11u].x - cbMtdParam._m0[10u].w;
    float _319 = (_304 - cbMtdParam._m0[10u].w) / (isnan(0.0) ? _317 : (isnan(_317) ? 0.0 : max(_317, 0.0)));
    float _3363 = isnan(0.0) ? _319 : (isnan(_319) ? 0.0 : max(_319, 0.0));
    vec4 _331 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _333 = _331.x;
    float _357 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _333)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _333))) - POSITION_1.w) / cbMtdParam._m0[10u].x;
    float _3374 = isnan(0.0) ? _357 : (isnan(_357) ? 0.0 : max(_357, 0.0));
    float _363 = gl_FragCoord.x * 0.125;
    float _365 = gl_FragCoord.y * 0.125;
    vec4 _367 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_363, _365));
    float _375 = float(((((_286.w * TEXCOORD_1.z) * (isnan(1.0) ? _3347 : (isnan(_3347) ? 1.0 : min(_3347, 1.0)))) * (1.0 - (isnan(1.0) ? _3363 : (isnan(_3363) ? 1.0 : min(_3363, 1.0))))) * (isnan(1.0) ? _3374 : (isnan(_3374) ? 1.0 : min(_3374, 1.0)))) >= ((_367.w * 0.9900000095367431640625) + 0.00999999977648258209228515625));
    vec4 _387 = texture(sampler2D(S_Ground_blend_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _391 = _387.z;
    float _395 = (_387.x * 2.0) + (-1.0);
    float _397 = (_387.y * 2.0) + (-1.0);
    float _398 = dot(vec2(_395, _397), vec2(_395, _397));
    float _3385 = isnan(0.0) ? _398 : (isnan(_398) ? 0.0 : max(_398, 0.0));
    float _403 = sqrt(1.0 - (isnan(1.0) ? _3385 : (isnan(_3385) ? 1.0 : min(_3385, 1.0))));
    float _406 = fma(_403, _201 * NORMAL.x, fma(_397, _208 * TANGENT.x, (_194 * _186) * _395));
    float _409 = fma(_403, _201 * NORMAL.y, fma(_397, _208 * TANGENT.y, (_194 * _187) * _395));
    float _412 = fma(_403, _201 * NORMAL.z, fma(_397, _208 * TANGENT.z, (_194 * _188) * _395));
    float _416 = inversesqrt(dot(vec3(_406, _409, _412), vec3(_406, _409, _412)));
    float _417 = _416 * _406;
    float _418 = _416 * _409;
    float _419 = _416 * _412;
    float _3396 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _420 = isnan(1.0) ? _3396 : (isnan(_3396) ? 1.0 : min(_3396, 1.0));
    float _3407 = isnan(0.0) ? _293 : (isnan(_293) ? 0.0 : max(_293, 0.0));
    float _3418 = isnan(0.0) ? _294 : (isnan(_294) ? 0.0 : max(_294, 0.0));
    float _3429 = isnan(0.0) ? _295 : (isnan(_295) ? 0.0 : max(_295, 0.0));
    float _437 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _477 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _486 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _477);
    float _487 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _477);
    float _488 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _477);
    float _492 = inversesqrt(dot(vec3(_486, _487, _488), vec3(_486, _487, _488)));
    float _493 = _486 * _492;
    float _494 = _487 * _492;
    float _495 = _488 * _492;
    vec4 _496 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_363, _365));
    float _498 = _496.w;
    float _503 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _504 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _525 = fma(_419, cbSceneParam._m0[5u].z, fma(_418, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _417));
    float _528 = fma(_419, cbSceneParam._m0[6u].z, fma(_418, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _417));
    float _531 = fma(_419, cbSceneParam._m0[7u].z, fma(_418, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _417));
    uint _544 = uint(roundEven(NORMAL.w)) * 13u;
    uint _546 = _544 + 9u;
    uint _547 = _546 + uint(cbMatDynParam._m0[0u].w);
    float _553 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3407 : (isnan(_3407) ? 1.0 : min(_3407, 1.0)))) * cbInstanceData._m0[_547].x;
    float _554 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3418 : (isnan(_3418) ? 1.0 : min(_3418, 1.0)))) * cbInstanceData._m0[_547].y;
    float _555 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3429 : (isnan(_3429) ? 1.0 : min(_3429, 1.0)))) * cbInstanceData._m0[_547].z;
    float _3440 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
    float _556 = isnan(1.0) ? _3440 : (isnan(_3440) ? 1.0 : min(_3440, 1.0));
    float _3451 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _557 = isnan(1.0) ? _3451 : (isnan(_3451) ? 1.0 : min(_3451, 1.0));
    float _3462 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
    float _558 = isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0));
    vec4 _567 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _503, cbSceneParam._m0[86u].y * _504));
    float _570 = _567.x * TEXCOORD_1.w;
    float _571 = dot(vec3(_417, _418, _419), vec3(_493, _494, _495));
    float _574 = _571 * 2.0;
    float _578 = (_574 * _417) - _493;
    float _579 = (_574 * _418) - _494;
    float _580 = (_574 * _419) - _495;
    float _584 = abs(dot(vec3(_493, _494, _495), vec3(_417, _418, _419)));
    float _3473 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
    float _586 = sqrt(_420);
    float _599 = exp2((_586 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_586 * 3.0));
    float _631 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _635 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _639 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _941;
    float _943;
    float _944;
    float _945;
    float _946;
    float _947;
    float _948;
    float _949;
    float _950;
    float _951;
    float _952;
    float _953;
    float _954;
    float _955;
    float _956;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _666 = fma(_639, cbModelParam._m0[26u].z, fma(_635, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _631));
        float _670 = fma(_639, cbModelParam._m0[27u].z, fma(_635, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _631));
        float _674 = fma(_639, cbModelParam._m0[28u].z, fma(_635, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _631));
        float _699 = _631 + _417;
        float _700 = _635 + _418;
        float _701 = _639 + _419;
        float _711 = fma(_701, cbModelParam._m0[26u].z, fma(_700, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _699)) - _666;
        float _712 = fma(_701, cbModelParam._m0[27u].z, fma(_700, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _699)) - _670;
        float _713 = fma(_701, cbModelParam._m0[28u].z, fma(_700, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _699)) - _674;
        float _717 = inversesqrt(dot(vec3(_711, _712, _713), vec3(_711, _712, _713)));
        float _730 = ((_717 * _711) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_666 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _731 = ((_717 * _712) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_670 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _732 = ((_717 * _713) / cbModelParam._m0[34u].z) + ((((((_674 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _735 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_730, _731, _732), 0.0);
        vec4 _742 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_730, _731, _732), 0.0);
        vec4 _749 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_730, _731, _732), 0.0);
        vec4 _756 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_730, _731, _732), 0.0);
        float _769 = exp2((_735.w + (-0.5)) * 20.0) * 2.0;
        float _770 = _769 * (_735.x + (-0.5));
        float _771 = _769 * (_735.y + (-0.5));
        float _772 = _769 * (_735.z + (-0.5));
        float _779 = exp2((_742.w + (-0.5)) * 20.0) * 2.0;
        float _780 = _779 * (_742.x + (-0.5));
        float _781 = _779 * (_742.y + (-0.5));
        float _782 = _779 * (_742.z + (-0.5));
        float _789 = exp2((_749.w + (-0.5)) * 20.0) * 2.0;
        float _790 = _789 * (_749.x + (-0.5));
        float _791 = _789 * (_749.y + (-0.5));
        float _792 = _789 * (_749.z + (-0.5));
        float _799 = exp2((_756.w + (-0.5)) * 20.0) * 2.0;
        float _800 = _799 * (_756.x + (-0.5));
        float _801 = _799 * (_756.y + (-0.5));
        float _802 = _799 * (_756.z + (-0.5));
        float _803 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
        float _804 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
        float _805 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
        float _806 = _770 * 0.5;
        float _807 = _780 * 0.5;
        float _808 = _790 * 0.5;
        float _809 = dot(vec3(_806, _807, _808), vec3(_806, _807, _808));
        float _814 = (_809 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_809);
        float _823 = (dot(vec3(_417, _418, _419), vec3(_814 * _806, _814 * _807, _814 * _808)) + 1.0) * 0.5;
        float _3499 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
        float _833 = sqrt(((_807 * _807) + (_806 * _806)) + (_808 * _808)) / (_803 + 9.9999997473787516355514526367188e-06);
        float _3510 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
        float _834 = isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0));
        float _835 = _834 * 2.0;
        float _839 = (1.0 - _834) / (_834 + 1.0);
        float _3521 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
        float _840 = isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0));
        float _849 = ((((1.0 - _840) * (_835 + 2.0)) * exp2(log2(isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0))) * (_835 + 1.0))) + _840) * _803;
        float _850 = _771 * 0.5;
        float _851 = _781 * 0.5;
        float _852 = _791 * 0.5;
        float _853 = dot(vec3(_850, _851, _852), vec3(_850, _851, _852));
        float _858 = (_853 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_853);
        float _866 = (dot(vec3(_417, _418, _419), vec3(_858 * _850, _858 * _851, _858 * _852)) + 1.0) * 0.5;
        float _3532 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
        float _875 = sqrt(((_851 * _851) + (_850 * _850)) + (_852 * _852)) / (_804 + 9.9999997473787516355514526367188e-06);
        float _3543 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
        float _876 = isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0));
        float _877 = _876 * 2.0;
        float _881 = (1.0 - _876) / (_876 + 1.0);
        float _3554 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
        float _882 = isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0));
        float _891 = ((((1.0 - _882) * (_877 + 2.0)) * exp2(log2(isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0))) * (_877 + 1.0))) + _882) * _804;
        float _892 = _772 * 0.5;
        float _893 = _782 * 0.5;
        float _894 = _792 * 0.5;
        float _895 = dot(vec3(_892, _893, _894), vec3(_892, _893, _894));
        float _900 = (_895 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_895);
        float _908 = (dot(vec3(_417, _418, _419), vec3(_900 * _892, _900 * _893, _900 * _894)) + 1.0) * 0.5;
        float _3565 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
        float _917 = sqrt(((_893 * _893) + (_892 * _892)) + (_894 * _894)) / (_805 + 9.9999997473787516355514526367188e-06);
        float _3576 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
        float _918 = isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0));
        float _919 = _918 * 2.0;
        float _923 = (1.0 - _918) / (_918 + 1.0);
        float _3587 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
        float _924 = isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0));
        float _933 = ((((1.0 - _924) * (_919 + 2.0)) * exp2(log2(isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0))) * (_919 + 1.0))) + _924) * _805;
        _941 = _772;
        _943 = _771;
        _944 = _770;
        _945 = _782;
        _946 = _781;
        _947 = _780;
        _948 = _792;
        _949 = _791;
        _950 = _790;
        _951 = _805;
        _952 = _804;
        _953 = _803;
        _954 = cbModelParam._m0[36u].z * (isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0)));
        _955 = cbModelParam._m0[36u].z * (isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0)));
        _956 = cbModelParam._m0[36u].z * (isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0)));
    }
    else
    {
        _941 = _942;
        _943 = _942;
        _944 = _942;
        _945 = _942;
        _946 = _942;
        _947 = _942;
        _948 = _942;
        _949 = _942;
        _950 = _942;
        _951 = _942;
        _952 = _942;
        _953 = _942;
        _954 = 0.0;
        _955 = 0.0;
        _956 = 0.0;
    }
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _982 = fma(_639, cbModelParam._m0[30u].z, fma(_635, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _631));
        float _986 = fma(_639, cbModelParam._m0[31u].z, fma(_635, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _631));
        float _990 = fma(_639, cbModelParam._m0[32u].z, fma(_635, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _631));
        float _1013 = _631 + _417;
        float _1014 = _635 + _418;
        float _1015 = _639 + _419;
        float _1025 = fma(_1015, cbModelParam._m0[30u].z, fma(_1014, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1013)) - _982;
        float _1026 = fma(_1015, cbModelParam._m0[31u].z, fma(_1014, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1013)) - _986;
        float _1027 = fma(_1015, cbModelParam._m0[32u].z, fma(_1014, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1013)) - _990;
        float _1031 = inversesqrt(dot(vec3(_1025, _1026, _1027), vec3(_1025, _1026, _1027)));
        float _1044 = ((_1031 * _1025) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_982 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1045 = ((_1031 * _1026) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_986 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1046 = ((_1031 * _1027) / cbModelParam._m0[35u].z) + ((((((_990 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1048 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1044, _1045, _1046), 0.0);
        vec4 _1055 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1044, _1045, _1046), 0.0);
        vec4 _1062 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1044, _1045, _1046), 0.0);
        vec4 _1069 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1044, _1045, _1046), 0.0);
        float _1081 = exp2((_1048.w + (-0.5)) * 20.0) * 2.0;
        float _1082 = _1081 * (_1048.x + (-0.5));
        float _1083 = _1081 * (_1048.y + (-0.5));
        float _1084 = _1081 * (_1048.z + (-0.5));
        float _1091 = exp2((_1055.w + (-0.5)) * 20.0) * 2.0;
        float _1092 = _1091 * (_1055.x + (-0.5));
        float _1093 = _1091 * (_1055.y + (-0.5));
        float _1094 = _1091 * (_1055.z + (-0.5));
        float _1101 = exp2((_1062.w + (-0.5)) * 20.0) * 2.0;
        float _1102 = _1101 * (_1062.x + (-0.5));
        float _1103 = _1101 * (_1062.y + (-0.5));
        float _1104 = _1101 * (_1062.z + (-0.5));
        float _1111 = exp2((_1069.w + (-0.5)) * 20.0) * 2.0;
        float _1112 = _1111 * (_1069.x + (-0.5));
        float _1113 = _1111 * (_1069.y + (-0.5));
        float _1114 = _1111 * (_1069.z + (-0.5));
        float _1115 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1116 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1117 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1118 = _1082 * 0.5;
        float _1119 = _1092 * 0.5;
        float _1120 = _1102 * 0.5;
        float _1121 = dot(vec3(_1118, _1119, _1120), vec3(_1118, _1119, _1120));
        float _1126 = (_1121 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1121);
        float _1134 = (dot(vec3(_417, _418, _419), vec3(_1126 * _1118, _1126 * _1119, _1126 * _1120)) + 1.0) * 0.5;
        float _3628 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1143 = sqrt(((_1119 * _1119) + (_1118 * _1118)) + (_1120 * _1120)) / (_1115 + 9.9999997473787516355514526367188e-06);
        float _3639 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1144 = isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0));
        float _1145 = _1144 * 2.0;
        float _1149 = (1.0 - _1144) / (_1144 + 1.0);
        float _3650 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1150 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
        float _1159 = ((((1.0 - _1150) * (_1145 + 2.0)) * exp2(log2(isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0))) * (_1145 + 1.0))) + _1150) * _1115;
        float _1160 = _1083 * 0.5;
        float _1161 = _1093 * 0.5;
        float _1162 = _1103 * 0.5;
        float _1163 = dot(vec3(_1160, _1161, _1162), vec3(_1160, _1161, _1162));
        float _1168 = (_1163 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1163);
        float _1176 = (dot(vec3(_417, _418, _419), vec3(_1168 * _1160, _1168 * _1161, _1168 * _1162)) + 1.0) * 0.5;
        float _3661 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1185 = sqrt(((_1161 * _1161) + (_1160 * _1160)) + (_1162 * _1162)) / (_1116 + 9.9999997473787516355514526367188e-06);
        float _3672 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1186 = isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0));
        float _1187 = _1186 * 2.0;
        float _1191 = (1.0 - _1186) / (_1186 + 1.0);
        float _3683 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1192 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
        float _1201 = ((((1.0 - _1192) * (_1187 + 2.0)) * exp2(log2(isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0))) * (_1187 + 1.0))) + _1192) * _1116;
        float _1202 = _1084 * 0.5;
        float _1203 = _1094 * 0.5;
        float _1204 = _1104 * 0.5;
        float _1205 = dot(vec3(_1202, _1203, _1204), vec3(_1202, _1203, _1204));
        float _1210 = (_1205 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1205);
        float _1218 = (dot(vec3(_417, _418, _419), vec3(_1210 * _1202, _1210 * _1203, _1210 * _1204)) + 1.0) * 0.5;
        float _3694 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1227 = sqrt(((_1203 * _1203) + (_1202 * _1202)) + (_1204 * _1204)) / (_1117 + 9.9999997473787516355514526367188e-06);
        float _3705 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1228 = isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0));
        float _1229 = _1228 * 2.0;
        float _1233 = (1.0 - _1228) / (_1228 + 1.0);
        float _3716 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1234 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
        float _1243 = ((((1.0 - _1234) * (_1229 + 2.0)) * exp2(log2(isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0))) * (_1229 + 1.0))) + _1234) * _1117;
        _1251 = _1084;
        _1252 = _1083;
        _1253 = _1082;
        _1254 = _1094;
        _1255 = _1093;
        _1256 = _1092;
        _1257 = _1104;
        _1258 = _1103;
        _1259 = _1102;
        _1260 = _1117;
        _1261 = _1116;
        _1262 = _1115;
        _1263 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0)));
        _1264 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0)));
        _1265 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0)));
    }
    else
    {
        _1251 = _942;
        _1252 = _942;
        _1253 = _942;
        _1254 = _942;
        _1255 = _942;
        _1256 = _942;
        _1257 = _942;
        _1258 = _942;
        _1259 = _942;
        _1260 = _942;
        _1261 = _942;
        _1262 = _942;
        _1263 = 0.0;
        _1264 = 0.0;
        _1265 = 0.0;
    }
    float _1275 = (cbModelParam._m0[1u].x * (_1263 - _954)) + _954;
    float _1276 = (cbModelParam._m0[1u].x * (_1264 - _955)) + _955;
    float _1277 = (cbModelParam._m0[1u].x * (_1265 - _956)) + _956;
    float _1298 = fma(_1277, cbSceneParam._m0[89u].z, fma(_1276, cbSceneParam._m0[89u].y, _1275 * cbSceneParam._m0[89u].x));
    float _1301 = fma(_1277, cbSceneParam._m0[90u].z, fma(_1276, cbSceneParam._m0[90u].y, _1275 * cbSceneParam._m0[90u].x));
    float _1304 = fma(_1277, cbSceneParam._m0[91u].z, fma(_1276, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1275));
    float _1319 = _578 * 0.5;
    float _1320 = _579 * 0.5;
    float _1321 = _580 * 0.5;
    float _1322 = dot(vec4(_1319, _1320, _1321, 1.0), vec4(_1253, _1256, _1259, _1262));
    float _1325 = dot(vec4(_1319, _1320, _1321, 1.0), vec4(_1252, _1255, _1258, _1261));
    float _1328 = dot(vec4(_1319, _1320, _1321, 1.0), vec4(_1251, _1254, _1257, _1260));
    float _1362;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1335 = dot(vec4(_1319, _1320, _1321, 1.0), vec4(_941, _945, _948, _951));
        float _1339 = dot(vec4(_1319, _1320, _1321, 1.0), vec4(_943, _946, _949, _952));
        float _1343 = dot(vec4(_1319, _1320, _1321, 1.0), vec4(_944, _947, _950, _953));
        float _1350 = dot(vec4(cbModelParam._m0[39u]), vec4(_1319, _1320, _1321, 1.0));
        _1362 = dot(vec3(isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0)), isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0)), isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1350) ? 0.0 : (isnan(0.0) ? _1350 : max(0.0, _1350))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1362 = 1.0;
    }
    float _1373;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1364 = dot(vec4(cbModelParam._m0[40u]), vec4(_1319, _1320, _1321, 1.0));
        _1373 = dot(vec3(isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0)), isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0)), isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1364) ? 0.0 : (isnan(0.0) ? _1364 : max(0.0, _1364))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1373 = 1.0;
    }
    float _1377 = (_1373 * cbModelParam._m0[1u].x) + (_1362 * (1.0 - cbModelParam._m0[1u].x));
    float _1387 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _420);
    float _1388 = isnan(_1387) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1387 : min(cbModelParam._m0[25u].z, _1387));
    float _1470;
    float _1472;
    float _1474;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1437 = fma(_639, cbModelParam._m0[13u].z, fma(_635, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _631)) + cbModelParam._m0[13u].w;
        float _1441 = fma(_639, cbModelParam._m0[14u].z, fma(_635, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _631)) + cbModelParam._m0[14u].w;
        float _1445 = fma(_639, cbModelParam._m0[15u].z, fma(_635, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _631)) + cbModelParam._m0[15u].w;
        float _1448 = fma(_580, cbModelParam._m0[13u].z, fma(_579, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _578));
        float _1451 = fma(_580, cbModelParam._m0[14u].z, fma(_579, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _578));
        float _1454 = fma(_580, cbModelParam._m0[15u].z, fma(_579, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _578));
        float _1482;
        if (_1448 > 0.0)
        {
            _1482 = abs((1.0 - _1437) / _1448);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1448 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1437 + 1.0) / _1448);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1482 = frontier_phi_14_12_ladder;
        }
        float _1655;
        if (_1451 > 0.0)
        {
            _1655 = abs((1.0 - _1441) / _1451);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1451 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1441 + 1.0) / _1451);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1655 = frontier_phi_23_19_ladder;
        }
        float _2103;
        if (_1454 > 0.0)
        {
            _2103 = abs((1.0 - _1445) / _1454);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1454 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1445 + 1.0) / _1454);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2103 = frontier_phi_35_30_ladder;
        }
        float _2105 = isnan(_1655) ? _1482 : (isnan(_1482) ? _1655 : min(_1482, _1655));
        float _2106 = isnan(_2103) ? _2105 : (isnan(_2105) ? _2103 : min(_2105, _2103));
        float _2110 = (_2106 * _1448) + _1437;
        float _2111 = (_2106 * _1451) + _1441;
        float _2112 = (_2106 * _1454) + _1445;
        float _2113 = _2106 * 9.9999997473787516355514526367188e-05;
        float _2115 = (-1.0) - _2113;
        float _2117 = _2113 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2112 > _2117) || ((_2112 < _2115) || ((_2111 > _2117) || ((_2111 < _2115) || ((_2110 < _2115) || (_2110 > _2117))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2343 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2112, cbModelParam._m0[9u].z, fma(_2111, cbModelParam._m0[9u].y, _2110 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2112, cbModelParam._m0[10u].z, fma(_2111, cbModelParam._m0[10u].y, _2110 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2112, cbModelParam._m0[11u].z, fma(_2111, cbModelParam._m0[11u].y, _2110 * cbModelParam._m0[11u].x))), _1388);
            frontier_phi_13_35_ladder = _2343.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2343.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2343.x * cbModelParam._m0[1u].y;
        }
        _1470 = frontier_phi_13_35_ladder_2;
        _1472 = frontier_phi_13_35_ladder_1;
        _1474 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1458 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_578, _579, _580), _1388);
        _1470 = _1458.x * cbModelParam._m0[1u].y;
        _1472 = _1458.y * cbModelParam._m0[1u].y;
        _1474 = _1458.z * cbModelParam._m0[1u].y;
    }
    float _1478 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _420);
    float _1479 = isnan(_1478) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1478 : min(cbModelParam._m0[25u].w, _1478));
    float _1572;
    float _1574;
    float _1576;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1536 = fma(_639, cbModelParam._m0[21u].z, fma(_635, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _631)) + cbModelParam._m0[21u].w;
        float _1540 = fma(_639, cbModelParam._m0[22u].z, fma(_635, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _631)) + cbModelParam._m0[22u].w;
        float _1544 = fma(_639, cbModelParam._m0[23u].z, fma(_635, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _631)) + cbModelParam._m0[23u].w;
        float _1547 = fma(_580, cbModelParam._m0[21u].z, fma(_579, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _578));
        float _1550 = fma(_580, cbModelParam._m0[22u].z, fma(_579, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _578));
        float _1553 = fma(_580, cbModelParam._m0[23u].z, fma(_579, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _578));
        float _1660;
        if (_1547 > 0.0)
        {
            _1660 = abs((1.0 - _1536) / _1547);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1547 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1536 + 1.0) / _1547);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1660 = frontier_phi_25_21_ladder;
        }
        float _2130;
        if (_1550 > 0.0)
        {
            _2130 = abs((1.0 - _1540) / _1550);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1550 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1540 + 1.0) / _1550);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2130 = frontier_phi_37_32_ladder;
        }
        float _2472;
        if (_1553 > 0.0)
        {
            _2472 = abs((1.0 - _1544) / _1553);
        }
        else
        {
            float frontier_phi_49_44_ladder;
            if (_1553 < 0.0)
            {
                frontier_phi_49_44_ladder = abs((_1544 + 1.0) / _1553);
            }
            else
            {
                frontier_phi_49_44_ladder = 5000.0;
            }
            _2472 = frontier_phi_49_44_ladder;
        }
        float _2474 = isnan(_2130) ? _1660 : (isnan(_1660) ? _2130 : min(_1660, _2130));
        float _2475 = isnan(_2472) ? _2474 : (isnan(_2474) ? _2472 : min(_2474, _2472));
        float _2479 = (_2475 * _1547) + _1536;
        float _2480 = (_2475 * _1550) + _1540;
        float _2481 = (_2475 * _1553) + _1544;
        float _2482 = _2475 * 9.9999997473787516355514526367188e-05;
        float _2483 = (-1.0) - _2482;
        float _2485 = _2482 + 1.0;
        float frontier_phi_22_49_ladder;
        float frontier_phi_22_49_ladder_1;
        float frontier_phi_22_49_ladder_2;
        if ((_2481 > _2485) || ((_2481 < _2483) || ((_2480 > _2485) || ((_2480 < _2483) || ((_2479 < _2483) || (_2479 > _2485))))))
        {
            frontier_phi_22_49_ladder = 0.0;
            frontier_phi_22_49_ladder_1 = 0.0;
            frontier_phi_22_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2618 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2481, cbModelParam._m0[17u].z, fma(_2480, cbModelParam._m0[17u].y, _2479 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2481, cbModelParam._m0[18u].z, fma(_2480, cbModelParam._m0[18u].y, _2479 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2481, cbModelParam._m0[19u].z, fma(_2480, cbModelParam._m0[19u].y, _2479 * cbModelParam._m0[19u].x))), _1479);
            frontier_phi_22_49_ladder = _2618.z * cbModelParam._m0[1u].z;
            frontier_phi_22_49_ladder_1 = _2618.y * cbModelParam._m0[1u].z;
            frontier_phi_22_49_ladder_2 = _2618.x * cbModelParam._m0[1u].z;
        }
        _1572 = frontier_phi_22_49_ladder_2;
        _1574 = frontier_phi_22_49_ladder_1;
        _1576 = frontier_phi_22_49_ladder;
    }
    else
    {
        vec4 _1556 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_578, _579, _580), _1479);
        _1572 = _1556.x * cbModelParam._m0[1u].z;
        _1574 = _1556.y * cbModelParam._m0[1u].z;
        _1576 = _1556.z * cbModelParam._m0[1u].z;
    }
    float _1588 = ((((1.0 - _599) * ((_586 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_599 * _586)) * _570;
    float _1589 = _1588 * ((cbModelParam._m0[1u].w * (_1572 - _1470)) + _1470);
    float _1590 = _1588 * ((cbModelParam._m0[1u].w * (_1574 - _1472)) + _1472);
    float _1591 = _1588 * ((cbModelParam._m0[1u].w * (_1576 - _1474)) + _1474);
    float _1594 = fma(_1591, cbSceneParam._m0[89u].z, fma(_1590, cbSceneParam._m0[89u].y, _1589 * cbSceneParam._m0[89u].x));
    float _1597 = fma(_1591, cbSceneParam._m0[90u].z, fma(_1590, cbSceneParam._m0[90u].y, _1589 * cbSceneParam._m0[90u].x));
    float _1600 = fma(_1591, cbSceneParam._m0[91u].z, fma(_1590, cbSceneParam._m0[91u].y, _1589 * cbSceneParam._m0[91u].x));
    float _1634 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1638 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1642 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1646 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1647 = _1634 / _1646;
    float _1648 = _1638 / _1646;
    float _1649 = _1642 / _1646;
    float _1796;
    float _1797;
    float _1798;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1676 = ((uint(_1649 > cbSceneParam._m0[59u].y) + uint(_1649 > cbSceneParam._m0[59u].x)) + uint(_1649 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1677 = _1676 + 43u;
        uint _1685 = _1676 + 44u;
        uint _1693 = _1676 + 45u;
        uint _1701 = _1676 + 46u;
        float _1712 = fma(_1646, cbSceneParam._m0[_1677].w, fma(_1642, cbSceneParam._m0[_1677].z, fma(_1638, cbSceneParam._m0[_1677].y, _1634 * cbSceneParam._m0[_1677].x)));
        float _1716 = fma(_1646, cbSceneParam._m0[_1685].w, fma(_1642, cbSceneParam._m0[_1685].z, fma(_1638, cbSceneParam._m0[_1685].y, _1634 * cbSceneParam._m0[_1685].x)));
        float _1724 = fma(_1646, cbSceneParam._m0[_1701].w, fma(_1642, cbSceneParam._m0[_1701].z, fma(_1638, cbSceneParam._m0[_1701].y, _1634 * cbSceneParam._m0[_1701].x)));
        float _1729 = cbSceneParam._m0[33u].z * _1724;
        float _1731 = cbSceneParam._m0[33u].w * _1724;
        float _1734 = fma(_1646, cbSceneParam._m0[_1693].w, fma(_1642, cbSceneParam._m0[_1693].z, fma(_1638, cbSceneParam._m0[_1693].y, _1634 * cbSceneParam._m0[_1693].x))) / _1724;
        float _1782 = (cbSceneParam._m0[33u].x - sqrt(((_1648 * _1648) + (_1647 * _1647)) + (_1649 * _1649))) * cbSceneParam._m0[33u].y;
        float _3842 = isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0));
        float _1789 = (isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1729 + _1712) / _1724, (_1731 + _1716) / _1724), _1734), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1731 + _1712) / _1724, (_1716 - _1729) / _1724), _1734), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1712 - _1729) / _1724, (_1716 - _1731) / _1724), _1734), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1712 - _1731) / _1724, (_1729 + _1716) / _1724), _1734), 0.0)).x), vec4(0.25)));
        _1796 = 1.0 - (_1789 * cbSceneParam._m0[34u].x);
        _1797 = 1.0 - (_1789 * cbSceneParam._m0[34u].y);
        _1798 = 1.0 - (_1789 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1796 = 1.0;
        _1797 = 1.0;
        _1798 = 1.0;
    }
    float _1862;
    float _1864;
    float _1866;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1850 = fma(_1646, cbSceneParam._m0[63u].w, fma(_1642, cbSceneParam._m0[63u].z, fma(_1638, cbSceneParam._m0[63u].y, _1634 * cbSceneParam._m0[63u].x)));
        float _1851 = fma(_1646, cbSceneParam._m0[60u].w, fma(_1642, cbSceneParam._m0[60u].z, fma(_1638, cbSceneParam._m0[60u].y, _1634 * cbSceneParam._m0[60u].x))) / _1850;
        float _1852 = fma(_1646, cbSceneParam._m0[61u].w, fma(_1642, cbSceneParam._m0[61u].z, fma(_1638, cbSceneParam._m0[61u].y, _1634 * cbSceneParam._m0[61u].x))) / _1850;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1851 >= cbSceneParam._m0[64u].x) && (_1852 >= cbSceneParam._m0[64u].y)) && (_1851 <= cbSceneParam._m0[64u].z)) && (_1852 <= cbSceneParam._m0[64u].w))
        {
            float _2143 = fma(_1646, cbSceneParam._m0[62u].w, fma(_1642, cbSceneParam._m0[62u].z, fma(_1638, cbSceneParam._m0[62u].y, _1634 * cbSceneParam._m0[62u].x))) / _1850;
            float _2147 = isnan(cbSceneParam._m0[41u].w) ? _2143 : (isnan(_2143) ? cbSceneParam._m0[41u].w : max(_2143, cbSceneParam._m0[41u].w));
            float _2190 = (cbSceneParam._m0[33u].x - sqrt(((_1648 * _1648) + (_1647 * _1647)) + (_1649 * _1649))) * cbSceneParam._m0[33u].y;
            float _3858 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
            float _2197 = (isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1851, cbSceneParam._m0[33u].w + _1852), _2147), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1851, _1852 - cbSceneParam._m0[33u].z), _2147), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1851 - cbSceneParam._m0[33u].z, _1852 - cbSceneParam._m0[33u].w), _2147), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1851 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1852), _2147), 0.0)).x), vec4(0.25)));
            float _2201 = 1.0 - (_2197 * cbSceneParam._m0[34u].x);
            float _2202 = 1.0 - (_2197 * cbSceneParam._m0[34u].y);
            float _2203 = 1.0 - (_2197 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2203) ? _1798 : (isnan(_1798) ? _2203 : min(_1798, _2203));
            frontier_phi_34_33_ladder_1 = isnan(_2202) ? _1797 : (isnan(_1797) ? _2202 : min(_1797, _2202));
            frontier_phi_34_33_ladder_2 = isnan(_2201) ? _1796 : (isnan(_1796) ? _2201 : min(_1796, _2201));
        }
        else
        {
            frontier_phi_34_33_ladder = _1798;
            frontier_phi_34_33_ladder_1 = _1797;
            frontier_phi_34_33_ladder_2 = _1796;
        }
        _1862 = frontier_phi_34_33_ladder_2;
        _1864 = frontier_phi_34_33_ladder_1;
        _1866 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1862 = _1796;
        _1864 = _1797;
        _1866 = _1798;
    }
    float _3884 = isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0));
    float _1868 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
    float _3895 = isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0));
    float _1869 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
    float _3906 = isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0));
    float _1870 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
    uvec4 _1874 = floatBitsToUint(cbInstanceData._m0[_544 + 5u]);
    uint _1876 = _1874.x * 14u;
    uint _1877 = _1876 + 13u;
    float _1882 = _570 + (-1.0);
    float _1885 = (cbLight._m0[_1877].x * _1882) + 1.0;
    float _1886 = (cbLight._m0[_1877].y * _1882) + 1.0;
    uint _1887 = _1876 + 5u;
    float _1893 = isnan(1.0) ? _1886 : (isnan(_1886) ? 1.0 : min(_1886, 1.0));
    uint _1897 = _1876 + 4u;
    float _1907 = isnan(1.0) ? _1885 : (isnan(_1885) ? 1.0 : min(_1885, 1.0));
    uint _1911 = _1876 | 1u;
    float _1922 = dot(vec3(cbLight._m0[_1876].xyz), vec3(_417, _418, _419));
    float _1925 = dot(vec3(cbLight._m0[_1911].xyz), vec3(_417, _418, _419));
    float _3927 = isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0));
    float _3938 = isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0));
    float _1930 = (isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0))) * 0.3183098733425140380859375;
    float _1932 = (isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0))) * 0.3183098733425140380859375;
    float _1939 = ((cbLight._m0[_1887].x * _1893) * _1932) + (((cbLight._m0[_1897].x * _1868) * _1907) * _1930);
    float _1940 = ((_1893 * cbLight._m0[_1887].y) * _1932) + (((cbLight._m0[_1897].y * _1869) * _1907) * _1930);
    float _1941 = ((_1893 * cbLight._m0[_1887].z) * _1932) + (((cbLight._m0[_1897].z * _1870) * _1907) * _1930);
    uint _1943 = _1876 + 8u;
    float _1956 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1876].w)) * _420) * 0.949999988079071044921875);
    float _1957 = _1956 * _1956;
    float _1958 = cbLight._m0[_1876].x + _493;
    float _1959 = cbLight._m0[_1876].y + _494;
    float _1960 = cbLight._m0[_1876].z + _495;
    float _1964 = inversesqrt(dot(vec3(_1958, _1959, _1960), vec3(_1958, _1959, _1960)));
    float _1965 = _1964 * _1958;
    float _1966 = _1964 * _1959;
    float _1967 = _1964 * _1960;
    float _1968 = dot(vec3(_417, _418, _419), vec3(cbLight._m0[_1876].xyz));
    float _3949 = isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0));
    float _1971 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
    float _3960 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _1972 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
    float _1973 = dot(vec3(_417, _418, _419), vec3(_1965, _1966, _1967));
    float _3971 = isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0));
    float _1976 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
    float _1977 = dot(vec3(cbLight._m0[_1876].xyz), vec3(_1965, _1966, _1967));
    float _3982 = isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0));
    float _1981 = _1957 * _1957;
    float _1985 = ((_1976 * _1976) * (_1981 + (-1.0))) + 1.0;
    float _1996 = (exp2(log2(1.0 - (isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1997 = 1.0 - _1957;
    float _2008 = (0.5 / (((_1972 * ((_1971 * _1997) + _1957)) + 9.9999999392252902907785028219223e-09) + (((_1972 * _1997) + _1957) * _1971))) * _1971;
    float _3993 = isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0));
    float _2010 = (isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0))) * (_1981 / ((_1985 * _1985) * 3.141590118408203125));
    uint _2024 = _1876 + 9u;
    float _2035 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1911].w)) * _420) * 0.949999988079071044921875);
    float _2036 = _2035 * _2035;
    float _2037 = cbLight._m0[_1911].x + _493;
    float _2038 = cbLight._m0[_1911].y + _494;
    float _2039 = cbLight._m0[_1911].z + _495;
    float _2043 = inversesqrt(dot(vec3(_2037, _2038, _2039), vec3(_2037, _2038, _2039)));
    float _2044 = _2043 * _2037;
    float _2045 = _2043 * _2038;
    float _2046 = _2043 * _2039;
    float _2047 = dot(vec3(_417, _418, _419), vec3(cbLight._m0[_1911].xyz));
    float _4004 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
    float _2050 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
    float _2051 = dot(vec3(_417, _418, _419), vec3(_2044, _2045, _2046));
    float _4015 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
    float _2054 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
    float _2055 = dot(vec3(cbLight._m0[_1911].xyz), vec3(_2044, _2045, _2046));
    float _4026 = isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0));
    float _2059 = _2036 * _2036;
    float _2063 = ((_2054 * _2054) * (_2059 + (-1.0))) + 1.0;
    float _2072 = (exp2(log2(1.0 - (isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2073 = 1.0 - _2036;
    float _2083 = (0.5 / (((_1972 * ((_2050 * _2073) + _2036)) + 9.9999999392252902907785028219223e-09) + (((_1972 * _2073) + _2036) * _2050))) * _2050;
    float _4037 = isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0));
    float _2085 = (isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0))) * (_2059 / ((_2063 * _2063) * 3.141590118408203125));
    float _2095 = (((_2072 * cbLight._m0[_2024].x) * _2085) * _1893) + ((((cbLight._m0[_1943].x * _1868) * _1996) * _2010) * _1907);
    float _2096 = (((_2072 * cbLight._m0[_2024].y) * _2085) * _1893) + ((((cbLight._m0[_1943].y * _1869) * _1996) * _2010) * _1907);
    float _2097 = (((_2072 * cbLight._m0[_2024].z) * _2085) * _1893) + ((((cbLight._m0[_1943].z * _1870) * _1996) * _2010) * _1907);
    float _2260;
    float _2262;
    float _2264;
    float _2266;
    float _2268;
    float _2270;
    if (_1874.y == 0u)
    {
        uvec4 _2215 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2216 = _2215.x;
        uint _2227 = uint((float(_2215.y) * floor(float(uint(cbSceneParam._m0[85u].y * _504) / _2216))) + floor(float(uint(cbSceneParam._m0[85u].x * _503) / _2216)));
        float _2237 = (log2(_1649 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2238 = isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : max(_2237, 0.0));
        uint _2241 = uint(isnan(14.0) ? _2238 : (isnan(_2238) ? 14.0 : min(_2238, 14.0)));
        uvec4 _2246 = texelFetch(g_lightClusterGridBuffer, int(((_2241 << 2u) + (_2227 << 6u)) >> 2u));
        uint _2247 = _2246.x;
        uint _2248 = _2215.z;
        float _2352;
        float _2354;
        float _2356;
        float _2358;
        float _2360;
        float _2362;
        if (((((1u << ((_2248 >> 4u) & 15u)) + 4294967295u) & _2247) == 0u) || ((_2248 & 240u) == 0u))
        {
            _2352 = 0.0;
            _2354 = 0.0;
            _2356 = 0.0;
            _2358 = 0.0;
            _2360 = 0.0;
            _2362 = 0.0;
        }
        else
        {
            float _2353;
            float _2355;
            float _2357;
            float _2359;
            float _2361;
            float _2363;
            float _2530 = 0.0;
            float _2531 = 0.0;
            float _2532 = 0.0;
            float _2533 = 0.0;
            float _2534 = 0.0;
            float _2535 = 0.0;
            uint _2536 = 0u;
            uint _2545;
            bool _2546;
            for (;;)
            {
                _2545 = texelFetch(g_lightClassification, int((((_2241 << 5u) + (_2227 << 9u)) + (_2536 << 2u)) >> 2u)).x;
                _2546 = _2545 == 0u;
                float frontier_phi_60_pred;
                float frontier_phi_60_pred_1;
                float frontier_phi_60_pred_2;
                float frontier_phi_60_pred_3;
                float frontier_phi_60_pred_4;
                float frontier_phi_60_pred_5;
                if (_2546)
                {
                    frontier_phi_60_pred = _2535;
                    frontier_phi_60_pred_1 = _2534;
                    frontier_phi_60_pred_2 = _2533;
                    frontier_phi_60_pred_3 = _2532;
                    frontier_phi_60_pred_4 = _2531;
                    frontier_phi_60_pred_5 = _2530;
                }
                else
                {
                    float _2697;
                    float _2698;
                    float _2699;
                    float _2700;
                    float _2701;
                    float _2702;
                    uint _2703;
                    _2697 = _2530;
                    _2698 = _2531;
                    _2699 = _2532;
                    _2700 = _2533;
                    _2701 = _2534;
                    _2702 = _2535;
                    _2703 = _2545;
                    float _2623;
                    float _2624;
                    float _2625;
                    float _2626;
                    float _2627;
                    float _2628;
                    for (;;)
                    {
                        uint _2707 = uint(findLSB(_2703)) + (_2536 << 5u);
                        uint _2704 = (_2703 + 4294967295u) & _2703;
                        uint _2709 = _2707 * 48u;
                        vec4 _2723 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2709)).x, texelFetch(g_PointLightRenderingBuffer, int(_2709 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2709 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2709 + 3u)).x));
                        uint _2729 = (_2707 * 48u) + 4u;
                        vec4 _2742 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2729)).x, texelFetch(g_PointLightRenderingBuffer, int(_2729 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2729 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2729 + 3u)).x));
                        uint _2748 = (_2707 * 48u) + 8u;
                        vec3 _2759 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2748)).x, texelFetch(g_PointLightRenderingBuffer, int(_2748 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2748 + 2u)).x));
                        float _2763 = _2723.x - _1647;
                        float _2764 = _2723.y - _1648;
                        float _2765 = _2723.z - _1649;
                        float _2766 = dot(vec3(_2763, _2764, _2765), vec3(_2763, _2764, _2765));
                        float _2769 = inversesqrt(_2766);
                        float _2770 = _2769 * _2763;
                        float _2771 = _2769 * _2764;
                        float _2772 = _2769 * _2765;
                        float _2773 = dot(vec3(_525, _528, _531), vec3(_2770, _2771, _2772));
                        float _2778 = 1.0 - (_2766 * _2723.w);
                        float _4058 = isnan(0.0) ? _2778 : (isnan(_2778) ? 0.0 : max(_2778, 0.0));
                        float _2779 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
                        float _2780 = sqrt(_2766) * _2742.w;
                        float _2783 = 1.39999997615814208984375 / (_2780 + 1.39999997615814208984375);
                        float _2784 = _2783 * _2783;
                        float _2787 = ((1.0 - _2784) * _2773) + _2784;
                        float _2790 = _2780 * _2780;
                        float _2794 = ((isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : max(_2787, 0.0))) * _2779) / ((_2790 * 0.699999988079071044921875) + 1.0);
                        float _2798 = (-0.0) - _1647;
                        float _2799 = (-0.0) - _1648;
                        float _2800 = (-0.0) - _1649;
                        float _2804 = inversesqrt(dot(vec3(_2798, _2799, _2800), vec3(_2798, _2799, _2800)));
                        float _2805 = _2804 * _2798;
                        float _2806 = _2804 * _2799;
                        float _2807 = _2804 * _2800;
                        float _2814 = exp2(log2(1.0 / ((_2790 * 3.5) + 5.0)) * 0.25);
                        float _2815 = 1.0 - _586;
                        float _2822 = sqrt(1.0 - ((1.0 - (_2815 * _2815)) * (1.0 - (_2814 * _2814))));
                        float _2823 = _2822 * _2822;
                        float _2824 = _2823 * _2823;
                        float _2825 = _2805 + _2770;
                        float _2826 = _2806 + _2771;
                        float _2827 = _2807 + _2772;
                        float _2831 = inversesqrt(dot(vec3(_2825, _2826, _2827), vec3(_2825, _2826, _2827)));
                        float _2835 = dot(vec3(_525, _528, _531), vec3(_2805, _2806, _2807));
                        float _4074 = isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : max(_2835, 0.0));
                        float _2838 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
                        float _2839 = dot(vec3(_525, _528, _531), vec3(_2831 * _2825, _2831 * _2826, _2831 * _2827));
                        float _4085 = isnan(0.0) ? _2839 : (isnan(_2839) ? 0.0 : max(_2839, 0.0));
                        float _2842 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
                        float _2846 = ((_2842 * _2842) * (_2824 + (-1.0))) + 1.0;
                        float _2847 = _2783 * _2823;
                        float _2848 = _2847 * _2847;
                        float _2851 = ((1.0 - _2848) * _2773) + _2848;
                        float _4096 = isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : max(_2851, 0.0));
                        float _2852 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
                        float _2853 = 1.0 - _2823;
                        float _2863 = (0.5 / (((_2852 * ((_2838 * _2853) + _2823)) + 9.9999999392252902907785028219223e-09) + (((_2852 * _2853) + _2823) * _2838))) * _2852;
                        float _4107 = isnan(0.0) ? _2863 : (isnan(_2863) ? 0.0 : max(_2863, 0.0));
                        float _2874 = (((_2824 * 3.1415927410125732421875) * (isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0)))) / ((_2846 * _2846) * ((_2790 * 2.1991131305694580078125) + 3.141590118408203125))) * _2779;
                        _2626 = (_2794 * _2742.x) + _2700;
                        _2627 = (_2794 * _2742.y) + _2701;
                        _2628 = (_2794 * _2742.z) + _2702;
                        _2623 = (_2874 * _2759.x) + _2697;
                        _2624 = (_2874 * _2759.y) + _2698;
                        _2625 = (_2874 * _2759.z) + _2699;
                        if (_2704 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2697 = _2623;
                            _2698 = _2624;
                            _2699 = _2625;
                            _2700 = _2626;
                            _2701 = _2627;
                            _2702 = _2628;
                            _2703 = _2704;
                        }
                    }
                    frontier_phi_60_pred = _2628;
                    frontier_phi_60_pred_1 = _2627;
                    frontier_phi_60_pred_2 = _2626;
                    frontier_phi_60_pred_3 = _2625;
                    frontier_phi_60_pred_4 = _2624;
                    frontier_phi_60_pred_5 = _2623;
                }
                _2363 = frontier_phi_60_pred;
                _2361 = frontier_phi_60_pred_1;
                _2359 = frontier_phi_60_pred_2;
                _2357 = frontier_phi_60_pred_3;
                _2355 = frontier_phi_60_pred_4;
                _2353 = frontier_phi_60_pred_5;
                uint _2537 = _2536 + 1u;
                if (_2537 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2530 = _2353;
                    _2531 = _2355;
                    _2532 = _2357;
                    _2533 = _2359;
                    _2534 = _2361;
                    _2535 = _2363;
                    _2536 = _2537;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2352 = _2353;
            _2354 = _2355;
            _2356 = _2357;
            _2358 = _2359;
            _2360 = _2361;
            _2362 = _2363;
        }
        uvec4 _2366 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2367 = _2366.z;
        uint _2369 = (_2367 >> 8u) & 15u;
        float _2498;
        float _2500;
        float _2502;
        float _2504;
        float _2506;
        float _2508;
        if (((4294967295u << _2369) & _2247) == 0u)
        {
            _2498 = _2352;
            _2500 = _2354;
            _2502 = _2356;
            _2504 = _2358;
            _2506 = _2360;
            _2508 = _2362;
        }
        else
        {
            float _2523 = inversesqrt(dot(vec3(_1647, _1648, _1649), vec3(_1647, _1648, _1649)));
            float _2524 = _2523 * _1647;
            float _2525 = _2523 * _1648;
            float _2526 = _2523 * _1649;
            float frontier_phi_51_52_ladder;
            float frontier_phi_51_52_ladder_1;
            float frontier_phi_51_52_ladder_2;
            float frontier_phi_51_52_ladder_3;
            float frontier_phi_51_52_ladder_4;
            float frontier_phi_51_52_ladder_5;
            if (_2369 < ((_2367 >> 12u) & 15u))
            {
                float _2499;
                float _2501;
                float _2503;
                float _2505;
                float _2507;
                float _2509;
                float _2680 = _2352;
                float _2681 = _2354;
                float _2682 = _2356;
                float _2683 = _2358;
                float _2684 = _2360;
                float _2685 = _2362;
                uint _2686 = _2369;
                uint _2695;
                bool _2696;
                for (;;)
                {
                    _2695 = texelFetch(g_lightClassification, int((((_2241 << 5u) + (_2227 << 9u)) + (_2686 << 2u)) >> 2u)).x;
                    _2696 = _2695 == 0u;
                    float frontier_phi_71_pred;
                    float frontier_phi_71_pred_1;
                    float frontier_phi_71_pred_2;
                    float frontier_phi_71_pred_3;
                    float frontier_phi_71_pred_4;
                    float frontier_phi_71_pred_5;
                    if (_2696)
                    {
                        frontier_phi_71_pred = _2684;
                        frontier_phi_71_pred_1 = _2683;
                        frontier_phi_71_pred_2 = _2682;
                        frontier_phi_71_pred_3 = _2681;
                        frontier_phi_71_pred_4 = _2680;
                        frontier_phi_71_pred_5 = _2685;
                    }
                    else
                    {
                        float _2890;
                        float _2891;
                        float _2892;
                        float _2893;
                        float _2894;
                        float _2895;
                        float _3186;
                        float _3187;
                        float _3188;
                        float _3189;
                        float _3190;
                        float _3191;
                        float _2903 = _2680;
                        float _2904 = _2681;
                        float _2905 = _2682;
                        float _2906 = _2683;
                        float _2907 = _2684;
                        float _2908 = _2685;
                        uint _2909 = _2695;
                        uint _2910;
                        vec4 _2935;
                        float _2936;
                        vec4 _2951;
                        vec3 _2963;
                        vec4 _2979;
                        vec4 _2995;
                        float _3042;
                        bool _3043;
                        for (;;)
                        {
                            uint _2920 = ((_2686 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2909));
                            _2910 = (_2909 + 4294967295u) & _2909;
                            uint _2922 = _2920 * 40u;
                            _2935 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2922)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2922 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2922 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2922 + 3u)).x));
                            _2936 = _2935.w;
                            uint _2938 = (_2920 * 40u) + 4u;
                            _2951 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2938)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 3u)).x));
                            uint _2953 = (_2920 * 40u) + 8u;
                            _2963 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2953)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2953 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2953 + 2u)).x));
                            uint _2966 = (_2920 * 40u) + 16u;
                            _2979 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2966)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2966 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2966 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2966 + 3u)).x));
                            uint _2982 = (_2920 * 40u) + 20u;
                            _2995 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2982)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2982 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2982 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2982 + 3u)).x));
                            uint _2998 = (_2920 * 40u) + 24u;
                            vec4 _3011 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2998)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2998 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2998 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2998 + 3u)).x));
                            uint _3017 = (_2920 * 40u) + 28u;
                            vec4 _3030 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3017)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3017 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3017 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3017 + 3u)).x));
                            _3042 = fma(_1649, _3030.z, fma(_1648, _3030.y, _3030.x * _1647)) + _3030.w;
                            _3043 = !((fma(_1649, _3011.z, fma(_1648, _3011.y, _3011.x * _1647)) + _3011.w) <= 0.0);
                            float frontier_phi_77_pred;
                            float frontier_phi_77_pred_1;
                            float frontier_phi_77_pred_2;
                            float frontier_phi_77_pred_3;
                            float frontier_phi_77_pred_4;
                            float frontier_phi_77_pred_5;
                            if (_3043)
                            {
                                float _3070 = _2935.x - _1647;
                                float _3071 = _2935.y - _1648;
                                float _3072 = _2935.z - _1649;
                                float _3073 = dot(vec3(_3070, _3071, _3072), vec3(_3070, _3071, _3072));
                                float _3076 = inversesqrt(_3073);
                                float _3077 = _3076 * _3070;
                                float _3078 = _3076 * _3071;
                                float _3079 = _3076 * _3072;
                                float _3083 = 1.0 - (_3073 / (_2936 * _2936));
                                float _4118 = isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : max(_3083, 0.0));
                                float _3084 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
                                float _3088 = sqrt(_3073) * _2951.w;
                                float _3090 = 1.39999997615814208984375 / (_3088 + 1.39999997615814208984375);
                                float _3091 = _3090 * _3090;
                                float _3094 = ((1.0 - _3091) * dot(vec3(_3077, _3078, _3079), vec3(_525, _528, _531))) + _3091;
                                float _3097 = _3088 * _3088;
                                float _3101 = (fma(_1649, _2979.z, fma(_1648, _2979.y, _2979.x * _1647)) + _2979.w) / _3042;
                                float _3102 = (fma(_1649, _2995.z, fma(_1648, _2995.y, _2995.x * _1647)) + _2995.w) / _3042;
                                float _3106 = 1.0 - dot(vec2(_3101, _3102), vec2(_3101, _3102));
                                float _4134 = isnan(0.0) ? _3106 : (isnan(_3106) ? 0.0 : max(_3106, 0.0));
                                float _3107 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
                                float _3108 = _3107 * (((isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : max(_3094, 0.0))) * _3084) / ((_3097 * 0.699999988079071044921875) + 1.0));
                                float _3120 = exp2(log2(1.0 / ((_3097 * 3.5) + 5.0)) * 0.25);
                                float _3121 = 1.0 - _586;
                                float _3128 = sqrt(1.0 - ((1.0 - (_3121 * _3121)) * (1.0 - (_3120 * _3120))));
                                float _3129 = _3128 * _3128;
                                float _3130 = _3129 * _3129;
                                float _3131 = _3077 - _2524;
                                float _3132 = _3078 - _2525;
                                float _3133 = _3079 - _2526;
                                float _3137 = inversesqrt(dot(vec3(_3131, _3132, _3133), vec3(_3131, _3132, _3133)));
                                float _3141 = dot(vec3(_525, _528, _531), vec3((-0.0) - _2524, (-0.0) - _2525, (-0.0) - _2526));
                                float _4145 = isnan(0.0) ? _3141 : (isnan(_3141) ? 0.0 : max(_3141, 0.0));
                                float _3144 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
                                float _3145 = dot(vec3(_525, _528, _531), vec3(_3137 * _3131, _3137 * _3132, _3137 * _3133));
                                float _4156 = isnan(0.0) ? _3145 : (isnan(_3145) ? 0.0 : max(_3145, 0.0));
                                float _3148 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
                                float _3152 = ((_3148 * _3148) * (_3130 + (-1.0))) + 1.0;
                                float _3153 = _3090 * _3129;
                                float _3154 = _3153 * _3153;
                                float _3160 = ((1.0 - _3154) * dot(vec3(_525, _528, _531), vec3(_3077, _3078, _3079))) + _3154;
                                float _4167 = isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : max(_3160, 0.0));
                                float _3161 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
                                float _3162 = 1.0 - _3129;
                                float _3172 = (0.5 / (((_3161 * ((_3144 * _3162) + _3129)) + 9.9999999392252902907785028219223e-09) + (((_3161 * _3162) + _3129) * _3144))) * _3161;
                                float _4178 = isnan(0.0) ? _3172 : (isnan(_3172) ? 0.0 : max(_3172, 0.0));
                                float _3182 = (_3107 * _3084) * (((_3130 * 3.1415927410125732421875) * (isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0)))) / ((_3152 * _3152) * ((_3097 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_77_pred = _3108 * _2951.z;
                                frontier_phi_77_pred_1 = _3108 * _2951.y;
                                frontier_phi_77_pred_2 = _3108 * _2951.x;
                                frontier_phi_77_pred_3 = _3182 * _2963.z;
                                frontier_phi_77_pred_4 = _3182 * _2963.y;
                                frontier_phi_77_pred_5 = _3182 * _2963.x;
                            }
                            else
                            {
                                frontier_phi_77_pred = 0.0;
                                frontier_phi_77_pred_1 = 0.0;
                                frontier_phi_77_pred_2 = 0.0;
                                frontier_phi_77_pred_3 = 0.0;
                                frontier_phi_77_pred_4 = 0.0;
                                frontier_phi_77_pred_5 = 0.0;
                            }
                            _3191 = frontier_phi_77_pred;
                            _3190 = frontier_phi_77_pred_1;
                            _3189 = frontier_phi_77_pred_2;
                            _3188 = frontier_phi_77_pred_3;
                            _3187 = frontier_phi_77_pred_4;
                            _3186 = frontier_phi_77_pred_5;
                            _2893 = _3189 + _2906;
                            _2894 = _3190 + _2907;
                            _2895 = _3191 + _2908;
                            _2890 = _3186 + _2903;
                            _2891 = _3187 + _2904;
                            _2892 = _3188 + _2905;
                            if (_2910 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2903 = _2890;
                                _2904 = _2891;
                                _2905 = _2892;
                                _2906 = _2893;
                                _2907 = _2894;
                                _2908 = _2895;
                                _2909 = _2910;
                                continue;
                            }
                        }
                        frontier_phi_71_pred = _2894;
                        frontier_phi_71_pred_1 = _2893;
                        frontier_phi_71_pred_2 = _2892;
                        frontier_phi_71_pred_3 = _2891;
                        frontier_phi_71_pred_4 = _2890;
                        frontier_phi_71_pred_5 = _2895;
                    }
                    _2507 = frontier_phi_71_pred;
                    _2505 = frontier_phi_71_pred_1;
                    _2503 = frontier_phi_71_pred_2;
                    _2501 = frontier_phi_71_pred_3;
                    _2499 = frontier_phi_71_pred_4;
                    _2509 = frontier_phi_71_pred_5;
                    uint _2687 = _2686 + 1u;
                    if (_2687 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2680 = _2499;
                        _2681 = _2501;
                        _2682 = _2503;
                        _2683 = _2505;
                        _2684 = _2507;
                        _2685 = _2509;
                        _2686 = _2687;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_51_52_ladder = _2509;
                frontier_phi_51_52_ladder_1 = _2507;
                frontier_phi_51_52_ladder_2 = _2505;
                frontier_phi_51_52_ladder_3 = _2503;
                frontier_phi_51_52_ladder_4 = _2499;
                frontier_phi_51_52_ladder_5 = _2501;
            }
            else
            {
                frontier_phi_51_52_ladder = _2362;
                frontier_phi_51_52_ladder_1 = _2360;
                frontier_phi_51_52_ladder_2 = _2358;
                frontier_phi_51_52_ladder_3 = _2356;
                frontier_phi_51_52_ladder_4 = _2352;
                frontier_phi_51_52_ladder_5 = _2354;
            }
            _2498 = frontier_phi_51_52_ladder_4;
            _2500 = frontier_phi_51_52_ladder_5;
            _2502 = frontier_phi_51_52_ladder_3;
            _2504 = frontier_phi_51_52_ladder_2;
            _2506 = frontier_phi_51_52_ladder_1;
            _2508 = frontier_phi_51_52_ladder;
        }
        float _2513 = isnan(1.0) ? _570 : (isnan(_570) ? 1.0 : min(_570, 1.0));
        _2260 = (_2513 * _2504) + _1939;
        _2262 = (_2513 * _2506) + _1940;
        _2264 = (_2513 * _2508) + _1941;
        _2266 = ((_2498 * 0.039999999105930328369140625) * _2513) + _2095;
        _2268 = ((_2500 * 0.039999999105930328369140625) * _2513) + _2096;
        _2270 = ((_2502 * 0.039999999105930328369140625) * _2513) + _2097;
    }
    else
    {
        _2260 = _1939;
        _2262 = _1940;
        _2264 = _1941;
        _2266 = _2095;
        _2268 = _2096;
        _2270 = _2097;
    }
    float _4194 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _4205 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _4216 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _2287 = ((isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0))) * (_2260 + ((isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0))) * _570))) + ((_2266 + ((isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0))) * _1377)) * cbPerFrame._m0[3u].x);
    float _2288 = ((isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0))) * (_2262 + ((isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0))) * _570))) + ((_2268 + ((isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0))) * _1377)) * cbPerFrame._m0[3u].x);
    float _2289 = ((isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0))) * (_2264 + ((isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0))) * _570))) + ((_2270 + ((isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0))) * _1377)) * cbPerFrame._m0[3u].x);
    uint _2290 = _544 + 6u;
    float _2298 = _503 / cbSceneParam._m0[86u].x;
    float _2299 = _504 / cbSceneParam._m0[86u].y;
    vec4 _2313 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2298, _2299, (log2((isnan(cbSceneParam._m0[77u].w) ? _437 : (isnan(_437) ? cbSceneParam._m0[77u].w : min(_437, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2315 = _2313.x;
    float _2316 = _2313.y;
    float _2317 = _2313.z;
    float _2318 = _2313.w;
    float _2414;
    float _2416;
    float _2418;
    float _2420;
    if (_437 > cbSceneParam._m0[78u].w)
    {
        float _2377 = isnan(_437) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _437 : min(cbSceneParam._m0[80u].w, _437));
        float _2378 = _2377 / _437;
        float _2389 = _2378 * _486;
        float _2390 = _487 * _2378;
        float _2391 = (-0.0) - _2390;
        float _2392 = _2378 * _488;
        float _2394 = (cbSceneParam._m0[77u].w * _2391) / _2377;
        float _2395 = _2394 + cbSceneParam._m0[79u].w;
        float _2396 = cbSceneParam._m0[79u].w - _2390;
        float _2402 = sqrt(((_2389 * _2389) + (_2390 * _2390)) + (_2392 * _2392));
        float _2405 = (1.0 - (cbSceneParam._m0[77u].w / _2377)) * _2402;
        float _2410 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2412 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2636;
        if (abs((_2391 - _2394) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2636 = ((((_2395 > 0.0) ? exp2(_2410 * _2395) : (2.0 - exp2(_2412 * _2395))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2405;
        }
        else
        {
            float _2559 = 1.0 / cbSceneParam._m0[80u].x;
            float _2560 = isnan(_2396) ? _2395 : (isnan(_2395) ? _2396 : max(_2395, _2396));
            float _2561 = isnan(_2396) ? _2395 : (isnan(_2395) ? _2396 : min(_2395, _2396));
            float _2570 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : min(_2560, 0.0));
            float _2571 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : min(_2561, 0.0));
            _2636 = ((abs(_2402 / _2391) * cbSceneParam._m0[80u].y) * ((((_2570 - _2571) * 2.0) - ((exp2(_2410 * (isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0)))) - exp2(_2410 * (isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0))))) * _2559)) - ((exp2(_2412 * _2570) - exp2(_2412 * _2571)) * _2559))) + (_2405 * cbSceneParam._m0[80u].z);
        }
        vec4 _2638 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2298, _2299, 1.0), 0.0);
        float _2647 = exp2((_2636 * (-1.44269502162933349609375)) * (1.0 - _2638.w));
        float _2648 = log2(_2647);
        float _2664 = log2(_2318);
        _2414 = (exp2(_2664 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2648 * cbSceneParam._m0[78u].x)) * _2638.x) / cbSceneParam._m0[78u].x)) + _2315;
        _2416 = (exp2(_2664 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2648 * cbSceneParam._m0[78u].y)) * _2638.y) / cbSceneParam._m0[78u].y)) + _2316;
        _2418 = (exp2(_2664 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2648 * cbSceneParam._m0[78u].z)) * _2638.z) / cbSceneParam._m0[78u].z)) + _2317;
        _2420 = _2647 * _2318;
    }
    else
    {
        _2414 = _2315;
        _2416 = _2316;
        _2418 = _2317;
        _2420 = _2318;
    }
    bool _2674;
    vec4 _2430;
    vec4 _2452;
    float _2454;
    float _2458;
    float _2459;
    float _2460;
    float _2461;
    bool _2471;
    for (;;)
    {
        _2430 = cbMatDynParam._m0[0u];
        float _2432 = roundEven(_2430.y);
        bool _2433 = _2432 == 3.0;
        float _2434 = log2(_2420);
        float _2441 = exp2(_2434 * cbSceneParam._m0[78u].x) * _2287;
        float _2442 = exp2(_2434 * cbSceneParam._m0[78u].y) * _2288;
        float _2443 = exp2(_2434 * cbSceneParam._m0[78u].z) * _2289;
        float _2450 = _498 + (-0.5);
        _2452 = cbMtdParam._m0[1u];
        _2454 = _2452.y * _2450;
        float _2457 = (_2432 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2458 = _2457 * (_2433 ? _2441 : (_2441 + (cbSceneParam._m0[72u].w * _2414)));
        _2459 = _2457 * (_2433 ? _2442 : (_2442 + (cbSceneParam._m0[72u].w * _2416)));
        _2460 = _2457 * (_2433 ? _2443 : (_2443 + (cbSceneParam._m0[72u].w * _2418)));
        _2461 = _2450 * 0.999000012874603271484375;
        _2471 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2471)
        {
            if ((cbInstanceData._m0[_544 + 7u].x + _2461) < 0.5)
            {
                _2674 = true;
                break;
            }
        }
        uint _2594 = _546 + uint(_2430.w);
        if ((cbInstanceData._m0[_2594].w < 1.0) && ((cbInstanceData._m0[_2594].w + _2461) < 0.5))
        {
            _2674 = true;
            break;
        }
        if ((_2454 + _375) < _2452.x)
        {
            _2674 = true;
            break;
        }
        _2674 = false;
        break;
    }
    float _2881;
    if (_2674)
    {
        discard_state = true;
        _2881 = 0.0;
    }
    else
    {
        _2881 = cbInstanceData._m0[_2290].w;
    }
    SV_Target.x = _2458;
    SV_Target.y = _2459;
    SV_Target.z = _2460;
    SV_Target.w = _2881;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2290].w;
    discard_exit();
}


