#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_Ground_blend_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D S_Ground_blend_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D S_Ground_blend_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _977;
float _3378;
float _3379;
float _3380;
float _3381;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _196 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _203 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _210 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _258 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _268 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _258);
    float _269 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _258);
    float _270 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _258);
    vec4 _288 = texture(sampler2D(S_Ground_blend_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _295 = _288.x * cbMtdParam._m0[9u].x;
    float _296 = _288.y * cbMtdParam._m0[9u].y;
    float _297 = _288.z * cbMtdParam._m0[9u].z;
    float _306 = sqrt(((_268 * _268) + (_269 * _269)) + (_270 * _270));
    float _309 = cbMtdParam._m0[10u].z - cbMtdParam._m0[10u].y;
    float _311 = (_306 - cbMtdParam._m0[10u].y) / (isnan(0.0) ? _309 : (isnan(_309) ? 0.0 : max(_309, 0.0)));
    float _3395 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    float _319 = cbMtdParam._m0[11u].x - cbMtdParam._m0[10u].w;
    float _321 = (_306 - cbMtdParam._m0[10u].w) / (isnan(0.0) ? _319 : (isnan(_319) ? 0.0 : max(_319, 0.0)));
    float _3411 = isnan(0.0) ? _321 : (isnan(_321) ? 0.0 : max(_321, 0.0));
    vec4 _333 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _335 = _333.x;
    float _359 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _335)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _335))) - POSITION_1.w) / cbMtdParam._m0[10u].x;
    float _3422 = isnan(0.0) ? _359 : (isnan(_359) ? 0.0 : max(_359, 0.0));
    float _365 = gl_FragCoord.x * 0.125;
    float _367 = gl_FragCoord.y * 0.125;
    vec4 _369 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_365, _367));
    float _377 = float(((((_288.w * TEXCOORD_1.z) * (isnan(1.0) ? _3395 : (isnan(_3395) ? 1.0 : min(_3395, 1.0)))) * (1.0 - (isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0))))) * (isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0)))) >= ((_369.w * 0.9900000095367431640625) + 0.00999999977648258209228515625));
    vec4 _389 = texture(sampler2D(S_Ground_blend_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[2u].w));
    float _391 = _389.x;
    vec4 _403 = texture(sampler2D(S_Ground_blend_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _407 = _403.z;
    float _411 = (_403.x * 2.0) + (-1.0);
    float _413 = (_403.y * 2.0) + (-1.0);
    float _414 = dot(vec2(_411, _413), vec2(_411, _413));
    float _3433 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _419 = sqrt(1.0 - (isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0))));
    float _422 = fma(_419, _203 * NORMAL.x, fma(_413, _210 * TANGENT.x, (_196 * _188) * _411));
    float _425 = fma(_419, _203 * NORMAL.y, fma(_413, _210 * TANGENT.y, (_196 * _189) * _411));
    float _428 = fma(_419, _203 * NORMAL.z, fma(_413, _210 * TANGENT.z, (_196 * _190) * _411));
    float _432 = inversesqrt(dot(vec3(_422, _425, _428), vec3(_422, _425, _428)));
    float _433 = _432 * _422;
    float _434 = _432 * _425;
    float _435 = _432 * _428;
    float _3444 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _436 = isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0));
    float _3455 = isnan(0.0) ? _295 : (isnan(_295) ? 0.0 : max(_295, 0.0));
    float _3466 = isnan(0.0) ? _296 : (isnan(_296) ? 0.0 : max(_296, 0.0));
    float _3477 = isnan(0.0) ? _297 : (isnan(_297) ? 0.0 : max(_297, 0.0));
    float _3488 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _440 = isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0));
    float _454 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _494 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _503 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _494);
    float _504 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _494);
    float _505 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _494);
    float _509 = inversesqrt(dot(vec3(_503, _504, _505), vec3(_503, _504, _505)));
    float _510 = _503 * _509;
    float _511 = _504 * _509;
    float _512 = _505 * _509;
    vec4 _513 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_365, _367));
    float _515 = _513.w;
    float _520 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _521 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _542 = fma(_435, cbSceneParam._m0[5u].z, fma(_434, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _433));
    float _545 = fma(_435, cbSceneParam._m0[6u].z, fma(_434, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _433));
    float _548 = fma(_435, cbSceneParam._m0[7u].z, fma(_434, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _433));
    uint _561 = uint(roundEven(NORMAL.w)) * 13u;
    uint _563 = _561 + 9u;
    uint _564 = _563 + uint(cbMatDynParam._m0[0u].w);
    float _570 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0)))) * cbInstanceData._m0[_564].x;
    float _571 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0)))) * cbInstanceData._m0[_564].y;
    float _572 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0)))) * cbInstanceData._m0[_564].z;
    float _3499 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _573 = isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0));
    float _3510 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _574 = isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0));
    float _3521 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _575 = isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0));
    float _576 = 1.0 - _440;
    float _577 = _573 * _576;
    float _578 = _574 * _576;
    float _579 = _575 * _576;
    float _584 = (_573 + (-0.039999999105930328369140625)) * _440;
    float _585 = (_574 + (-0.039999999105930328369140625)) * _440;
    float _586 = (_575 + (-0.039999999105930328369140625)) * _440;
    float _587 = _584 + 0.039999999105930328369140625;
    float _589 = _585 + 0.039999999105930328369140625;
    float _590 = _586 + 0.039999999105930328369140625;
    vec4 _599 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _520, cbSceneParam._m0[86u].y * _521));
    float _602 = _599.x * TEXCOORD_1.w;
    float _603 = dot(vec3(_433, _434, _435), vec3(_510, _511, _512));
    float _606 = _603 * 2.0;
    float _610 = (_606 * _433) - _510;
    float _611 = (_606 * _434) - _511;
    float _612 = (_606 * _435) - _512;
    float _616 = abs(dot(vec3(_510, _511, _512), vec3(_433, _434, _435)));
    float _3532 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _618 = sqrt(_436);
    float _631 = exp2((_618 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_618 * 3.0));
    float _637 = (1.0 - _631) * ((_618 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _638 = _631 * _618;
    float _666 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _670 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _674 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _976;
    float _978;
    float _979;
    float _980;
    float _981;
    float _982;
    float _983;
    float _984;
    float _985;
    float _986;
    float _987;
    float _988;
    float _989;
    float _990;
    float _991;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _701 = fma(_674, cbModelParam._m0[26u].z, fma(_670, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _666));
        float _705 = fma(_674, cbModelParam._m0[27u].z, fma(_670, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _666));
        float _709 = fma(_674, cbModelParam._m0[28u].z, fma(_670, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _666));
        float _734 = _666 + _433;
        float _735 = _670 + _434;
        float _736 = _674 + _435;
        float _746 = fma(_736, cbModelParam._m0[26u].z, fma(_735, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _734)) - _701;
        float _747 = fma(_736, cbModelParam._m0[27u].z, fma(_735, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _734)) - _705;
        float _748 = fma(_736, cbModelParam._m0[28u].z, fma(_735, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _734)) - _709;
        float _752 = inversesqrt(dot(vec3(_746, _747, _748), vec3(_746, _747, _748)));
        float _765 = ((_752 * _746) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_701 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _766 = ((_752 * _747) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_705 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _767 = ((_752 * _748) / cbModelParam._m0[34u].z) + ((((((_709 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _770 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_765, _766, _767), 0.0);
        vec4 _777 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_765, _766, _767), 0.0);
        vec4 _784 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_765, _766, _767), 0.0);
        vec4 _791 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_765, _766, _767), 0.0);
        float _804 = exp2((_770.w + (-0.5)) * 20.0) * 2.0;
        float _805 = _804 * (_770.x + (-0.5));
        float _806 = _804 * (_770.y + (-0.5));
        float _807 = _804 * (_770.z + (-0.5));
        float _814 = exp2((_777.w + (-0.5)) * 20.0) * 2.0;
        float _815 = _814 * (_777.x + (-0.5));
        float _816 = _814 * (_777.y + (-0.5));
        float _817 = _814 * (_777.z + (-0.5));
        float _824 = exp2((_784.w + (-0.5)) * 20.0) * 2.0;
        float _825 = _824 * (_784.x + (-0.5));
        float _826 = _824 * (_784.y + (-0.5));
        float _827 = _824 * (_784.z + (-0.5));
        float _834 = exp2((_791.w + (-0.5)) * 20.0) * 2.0;
        float _835 = _834 * (_791.x + (-0.5));
        float _836 = _834 * (_791.y + (-0.5));
        float _837 = _834 * (_791.z + (-0.5));
        float _838 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
        float _839 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
        float _840 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
        float _841 = _805 * 0.5;
        float _842 = _815 * 0.5;
        float _843 = _825 * 0.5;
        float _844 = dot(vec3(_841, _842, _843), vec3(_841, _842, _843));
        float _849 = (_844 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_844);
        float _858 = (dot(vec3(_433, _434, _435), vec3(_849 * _841, _849 * _842, _849 * _843)) + 1.0) * 0.5;
        float _3558 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
        float _868 = sqrt(((_842 * _842) + (_841 * _841)) + (_843 * _843)) / (_838 + 9.9999997473787516355514526367188e-06);
        float _3569 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
        float _869 = isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0));
        float _870 = _869 * 2.0;
        float _874 = (1.0 - _869) / (_869 + 1.0);
        float _3580 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
        float _875 = isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0));
        float _884 = ((((1.0 - _875) * (_870 + 2.0)) * exp2(log2(isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0))) * (_870 + 1.0))) + _875) * _838;
        float _885 = _806 * 0.5;
        float _886 = _816 * 0.5;
        float _887 = _826 * 0.5;
        float _888 = dot(vec3(_885, _886, _887), vec3(_885, _886, _887));
        float _893 = (_888 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_888);
        float _901 = (dot(vec3(_433, _434, _435), vec3(_893 * _885, _893 * _886, _893 * _887)) + 1.0) * 0.5;
        float _3591 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
        float _910 = sqrt(((_886 * _886) + (_885 * _885)) + (_887 * _887)) / (_839 + 9.9999997473787516355514526367188e-06);
        float _3602 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
        float _911 = isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0));
        float _912 = _911 * 2.0;
        float _916 = (1.0 - _911) / (_911 + 1.0);
        float _3613 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
        float _917 = isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0));
        float _926 = ((((1.0 - _917) * (_912 + 2.0)) * exp2(log2(isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0))) * (_912 + 1.0))) + _917) * _839;
        float _927 = _807 * 0.5;
        float _928 = _817 * 0.5;
        float _929 = _827 * 0.5;
        float _930 = dot(vec3(_927, _928, _929), vec3(_927, _928, _929));
        float _935 = (_930 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_930);
        float _943 = (dot(vec3(_433, _434, _435), vec3(_935 * _927, _935 * _928, _935 * _929)) + 1.0) * 0.5;
        float _3624 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
        float _952 = sqrt(((_928 * _928) + (_927 * _927)) + (_929 * _929)) / (_840 + 9.9999997473787516355514526367188e-06);
        float _3635 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _953 = isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0));
        float _954 = _953 * 2.0;
        float _958 = (1.0 - _953) / (_953 + 1.0);
        float _3646 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
        float _959 = isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0));
        float _968 = ((((1.0 - _959) * (_954 + 2.0)) * exp2(log2(isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0))) * (_954 + 1.0))) + _959) * _840;
        _976 = _807;
        _978 = _806;
        _979 = _805;
        _980 = _817;
        _981 = _816;
        _982 = _815;
        _983 = _827;
        _984 = _826;
        _985 = _825;
        _986 = _840;
        _987 = _839;
        _988 = _838;
        _989 = cbModelParam._m0[36u].z * (isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0)));
        _990 = cbModelParam._m0[36u].z * (isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0)));
        _991 = cbModelParam._m0[36u].z * (isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0)));
    }
    else
    {
        _976 = _977;
        _978 = _977;
        _979 = _977;
        _980 = _977;
        _981 = _977;
        _982 = _977;
        _983 = _977;
        _984 = _977;
        _985 = _977;
        _986 = _977;
        _987 = _977;
        _988 = _977;
        _989 = 0.0;
        _990 = 0.0;
        _991 = 0.0;
    }
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1017 = fma(_674, cbModelParam._m0[30u].z, fma(_670, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _666));
        float _1021 = fma(_674, cbModelParam._m0[31u].z, fma(_670, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _666));
        float _1025 = fma(_674, cbModelParam._m0[32u].z, fma(_670, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _666));
        float _1048 = _666 + _433;
        float _1049 = _670 + _434;
        float _1050 = _674 + _435;
        float _1060 = fma(_1050, cbModelParam._m0[30u].z, fma(_1049, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1048)) - _1017;
        float _1061 = fma(_1050, cbModelParam._m0[31u].z, fma(_1049, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1048)) - _1021;
        float _1062 = fma(_1050, cbModelParam._m0[32u].z, fma(_1049, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1048)) - _1025;
        float _1066 = inversesqrt(dot(vec3(_1060, _1061, _1062), vec3(_1060, _1061, _1062)));
        float _1079 = ((_1066 * _1060) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1017 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1080 = ((_1066 * _1061) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1021 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1081 = ((_1066 * _1062) / cbModelParam._m0[35u].z) + ((((((_1025 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1083 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1079, _1080, _1081), 0.0);
        vec4 _1090 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1079, _1080, _1081), 0.0);
        vec4 _1097 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1079, _1080, _1081), 0.0);
        vec4 _1104 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1079, _1080, _1081), 0.0);
        float _1116 = exp2((_1083.w + (-0.5)) * 20.0) * 2.0;
        float _1117 = _1116 * (_1083.x + (-0.5));
        float _1118 = _1116 * (_1083.y + (-0.5));
        float _1119 = _1116 * (_1083.z + (-0.5));
        float _1126 = exp2((_1090.w + (-0.5)) * 20.0) * 2.0;
        float _1127 = _1126 * (_1090.x + (-0.5));
        float _1128 = _1126 * (_1090.y + (-0.5));
        float _1129 = _1126 * (_1090.z + (-0.5));
        float _1136 = exp2((_1097.w + (-0.5)) * 20.0) * 2.0;
        float _1137 = _1136 * (_1097.x + (-0.5));
        float _1138 = _1136 * (_1097.y + (-0.5));
        float _1139 = _1136 * (_1097.z + (-0.5));
        float _1146 = exp2((_1104.w + (-0.5)) * 20.0) * 2.0;
        float _1147 = _1146 * (_1104.x + (-0.5));
        float _1148 = _1146 * (_1104.y + (-0.5));
        float _1149 = _1146 * (_1104.z + (-0.5));
        float _1150 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1151 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1152 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1153 = _1117 * 0.5;
        float _1154 = _1127 * 0.5;
        float _1155 = _1137 * 0.5;
        float _1156 = dot(vec3(_1153, _1154, _1155), vec3(_1153, _1154, _1155));
        float _1161 = (_1156 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1156);
        float _1169 = (dot(vec3(_433, _434, _435), vec3(_1161 * _1153, _1161 * _1154, _1161 * _1155)) + 1.0) * 0.5;
        float _3687 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1178 = sqrt(((_1154 * _1154) + (_1153 * _1153)) + (_1155 * _1155)) / (_1150 + 9.9999997473787516355514526367188e-06);
        float _3698 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1179 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
        float _1180 = _1179 * 2.0;
        float _1184 = (1.0 - _1179) / (_1179 + 1.0);
        float _3709 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1185 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
        float _1194 = ((((1.0 - _1185) * (_1180 + 2.0)) * exp2(log2(isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0))) * (_1180 + 1.0))) + _1185) * _1150;
        float _1195 = _1118 * 0.5;
        float _1196 = _1128 * 0.5;
        float _1197 = _1138 * 0.5;
        float _1198 = dot(vec3(_1195, _1196, _1197), vec3(_1195, _1196, _1197));
        float _1203 = (_1198 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1198);
        float _1211 = (dot(vec3(_433, _434, _435), vec3(_1203 * _1195, _1203 * _1196, _1203 * _1197)) + 1.0) * 0.5;
        float _3720 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1220 = sqrt(((_1196 * _1196) + (_1195 * _1195)) + (_1197 * _1197)) / (_1151 + 9.9999997473787516355514526367188e-06);
        float _3731 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1221 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
        float _1222 = _1221 * 2.0;
        float _1226 = (1.0 - _1221) / (_1221 + 1.0);
        float _3742 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1227 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
        float _1236 = ((((1.0 - _1227) * (_1222 + 2.0)) * exp2(log2(isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0))) * (_1222 + 1.0))) + _1227) * _1151;
        float _1237 = _1119 * 0.5;
        float _1238 = _1129 * 0.5;
        float _1239 = _1139 * 0.5;
        float _1240 = dot(vec3(_1237, _1238, _1239), vec3(_1237, _1238, _1239));
        float _1245 = (_1240 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1240);
        float _1253 = (dot(vec3(_433, _434, _435), vec3(_1245 * _1237, _1245 * _1238, _1245 * _1239)) + 1.0) * 0.5;
        float _3753 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1262 = sqrt(((_1238 * _1238) + (_1237 * _1237)) + (_1239 * _1239)) / (_1152 + 9.9999997473787516355514526367188e-06);
        float _3764 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1263 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
        float _1264 = _1263 * 2.0;
        float _1268 = (1.0 - _1263) / (_1263 + 1.0);
        float _3775 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1269 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
        float _1278 = ((((1.0 - _1269) * (_1264 + 2.0)) * exp2(log2(isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0))) * (_1264 + 1.0))) + _1269) * _1152;
        _1286 = _1119;
        _1287 = _1118;
        _1288 = _1117;
        _1289 = _1129;
        _1290 = _1128;
        _1291 = _1127;
        _1292 = _1139;
        _1293 = _1138;
        _1294 = _1137;
        _1295 = _1152;
        _1296 = _1151;
        _1297 = _1150;
        _1298 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0)));
        _1299 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0)));
        _1300 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0)));
    }
    else
    {
        _1286 = _977;
        _1287 = _977;
        _1288 = _977;
        _1289 = _977;
        _1290 = _977;
        _1291 = _977;
        _1292 = _977;
        _1293 = _977;
        _1294 = _977;
        _1295 = _977;
        _1296 = _977;
        _1297 = _977;
        _1298 = 0.0;
        _1299 = 0.0;
        _1300 = 0.0;
    }
    float _1310 = (cbModelParam._m0[1u].x * (_1298 - _989)) + _989;
    float _1311 = (cbModelParam._m0[1u].x * (_1299 - _990)) + _990;
    float _1312 = (cbModelParam._m0[1u].x * (_1300 - _991)) + _991;
    float _1333 = fma(_1312, cbSceneParam._m0[89u].z, fma(_1311, cbSceneParam._m0[89u].y, _1310 * cbSceneParam._m0[89u].x));
    float _1336 = fma(_1312, cbSceneParam._m0[90u].z, fma(_1311, cbSceneParam._m0[90u].y, _1310 * cbSceneParam._m0[90u].x));
    float _1339 = fma(_1312, cbSceneParam._m0[91u].z, fma(_1311, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1310));
    float _1354 = _610 * 0.5;
    float _1355 = _611 * 0.5;
    float _1356 = _612 * 0.5;
    float _1357 = dot(vec4(_1354, _1355, _1356, 1.0), vec4(_1288, _1291, _1294, _1297));
    float _1360 = dot(vec4(_1354, _1355, _1356, 1.0), vec4(_1287, _1290, _1293, _1296));
    float _1363 = dot(vec4(_1354, _1355, _1356, 1.0), vec4(_1286, _1289, _1292, _1295));
    float _1397;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1370 = dot(vec4(_1354, _1355, _1356, 1.0), vec4(_976, _980, _983, _986));
        float _1374 = dot(vec4(_1354, _1355, _1356, 1.0), vec4(_978, _981, _984, _987));
        float _1378 = dot(vec4(_1354, _1355, _1356, 1.0), vec4(_979, _982, _985, _988));
        float _1385 = dot(vec4(cbModelParam._m0[39u]), vec4(_1354, _1355, _1356, 1.0));
        _1397 = dot(vec3(isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0)), isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0)), isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1385) ? 0.0 : (isnan(0.0) ? _1385 : max(0.0, _1385))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1397 = 1.0;
    }
    float _1408;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1399 = dot(vec4(cbModelParam._m0[40u]), vec4(_1354, _1355, _1356, 1.0));
        _1408 = dot(vec3(isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0)), isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0)), isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1399) ? 0.0 : (isnan(0.0) ? _1399 : max(0.0, _1399))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1408 = 1.0;
    }
    float _1412 = (_1408 * cbModelParam._m0[1u].x) + (_1397 * (1.0 - cbModelParam._m0[1u].x));
    float _1422 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _436);
    float _1423 = isnan(_1422) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1422 : min(cbModelParam._m0[25u].z, _1422));
    float _1505;
    float _1507;
    float _1509;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1472 = fma(_674, cbModelParam._m0[13u].z, fma(_670, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _666)) + cbModelParam._m0[13u].w;
        float _1476 = fma(_674, cbModelParam._m0[14u].z, fma(_670, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _666)) + cbModelParam._m0[14u].w;
        float _1480 = fma(_674, cbModelParam._m0[15u].z, fma(_670, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _666)) + cbModelParam._m0[15u].w;
        float _1483 = fma(_612, cbModelParam._m0[13u].z, fma(_611, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _610));
        float _1486 = fma(_612, cbModelParam._m0[14u].z, fma(_611, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _610));
        float _1489 = fma(_612, cbModelParam._m0[15u].z, fma(_611, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _610));
        float _1517;
        if (_1483 > 0.0)
        {
            _1517 = abs((1.0 - _1472) / _1483);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1483 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1472 + 1.0) / _1483);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1517 = frontier_phi_14_12_ladder;
        }
        float _1692;
        if (_1486 > 0.0)
        {
            _1692 = abs((1.0 - _1476) / _1486);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1486 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1476 + 1.0) / _1486);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1692 = frontier_phi_23_19_ladder;
        }
        float _2151;
        if (_1489 > 0.0)
        {
            _2151 = abs((1.0 - _1480) / _1489);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1489 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1480 + 1.0) / _1489);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2151 = frontier_phi_35_30_ladder;
        }
        float _2153 = isnan(_1692) ? _1517 : (isnan(_1517) ? _1692 : min(_1517, _1692));
        float _2154 = isnan(_2151) ? _2153 : (isnan(_2153) ? _2151 : min(_2153, _2151));
        float _2158 = (_2154 * _1483) + _1472;
        float _2159 = (_2154 * _1486) + _1476;
        float _2160 = (_2154 * _1489) + _1480;
        float _2161 = _2154 * 9.9999997473787516355514526367188e-05;
        float _2163 = (-1.0) - _2161;
        float _2165 = _2161 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2160 > _2165) || ((_2160 < _2163) || ((_2159 > _2165) || ((_2159 < _2163) || ((_2158 < _2163) || (_2158 > _2165))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2391 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2160, cbModelParam._m0[9u].z, fma(_2159, cbModelParam._m0[9u].y, _2158 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2160, cbModelParam._m0[10u].z, fma(_2159, cbModelParam._m0[10u].y, _2158 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2160, cbModelParam._m0[11u].z, fma(_2159, cbModelParam._m0[11u].y, _2158 * cbModelParam._m0[11u].x))), _1423);
            frontier_phi_13_35_ladder = _2391.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2391.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2391.x * cbModelParam._m0[1u].y;
        }
        _1505 = frontier_phi_13_35_ladder_2;
        _1507 = frontier_phi_13_35_ladder_1;
        _1509 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1493 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_610, _611, _612), _1423);
        _1505 = _1493.x * cbModelParam._m0[1u].y;
        _1507 = _1493.y * cbModelParam._m0[1u].y;
        _1509 = _1493.z * cbModelParam._m0[1u].y;
    }
    float _1513 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _436);
    float _1514 = isnan(_1513) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1513 : min(cbModelParam._m0[25u].w, _1513));
    float _1607;
    float _1609;
    float _1611;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1571 = fma(_674, cbModelParam._m0[21u].z, fma(_670, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _666)) + cbModelParam._m0[21u].w;
        float _1575 = fma(_674, cbModelParam._m0[22u].z, fma(_670, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _666)) + cbModelParam._m0[22u].w;
        float _1579 = fma(_674, cbModelParam._m0[23u].z, fma(_670, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _666)) + cbModelParam._m0[23u].w;
        float _1582 = fma(_612, cbModelParam._m0[21u].z, fma(_611, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _610));
        float _1585 = fma(_612, cbModelParam._m0[22u].z, fma(_611, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _610));
        float _1588 = fma(_612, cbModelParam._m0[23u].z, fma(_611, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _610));
        float _1697;
        if (_1582 > 0.0)
        {
            _1697 = abs((1.0 - _1571) / _1582);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1582 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1571 + 1.0) / _1582);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1697 = frontier_phi_25_21_ladder;
        }
        float _2178;
        if (_1585 > 0.0)
        {
            _2178 = abs((1.0 - _1575) / _1585);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1585 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1575 + 1.0) / _1585);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2178 = frontier_phi_37_32_ladder;
        }
        float _2520;
        if (_1588 > 0.0)
        {
            _2520 = abs((1.0 - _1579) / _1588);
        }
        else
        {
            float frontier_phi_49_44_ladder;
            if (_1588 < 0.0)
            {
                frontier_phi_49_44_ladder = abs((_1579 + 1.0) / _1588);
            }
            else
            {
                frontier_phi_49_44_ladder = 5000.0;
            }
            _2520 = frontier_phi_49_44_ladder;
        }
        float _2522 = isnan(_2178) ? _1697 : (isnan(_1697) ? _2178 : min(_1697, _2178));
        float _2523 = isnan(_2520) ? _2522 : (isnan(_2522) ? _2520 : min(_2522, _2520));
        float _2527 = (_2523 * _1582) + _1571;
        float _2528 = (_2523 * _1585) + _1575;
        float _2529 = (_2523 * _1588) + _1579;
        float _2530 = _2523 * 9.9999997473787516355514526367188e-05;
        float _2531 = (-1.0) - _2530;
        float _2533 = _2530 + 1.0;
        float frontier_phi_22_49_ladder;
        float frontier_phi_22_49_ladder_1;
        float frontier_phi_22_49_ladder_2;
        if ((_2529 > _2533) || ((_2529 < _2531) || ((_2528 > _2533) || ((_2528 < _2531) || ((_2527 < _2531) || (_2527 > _2533))))))
        {
            frontier_phi_22_49_ladder = 0.0;
            frontier_phi_22_49_ladder_1 = 0.0;
            frontier_phi_22_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2666 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2529, cbModelParam._m0[17u].z, fma(_2528, cbModelParam._m0[17u].y, _2527 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2529, cbModelParam._m0[18u].z, fma(_2528, cbModelParam._m0[18u].y, _2527 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2529, cbModelParam._m0[19u].z, fma(_2528, cbModelParam._m0[19u].y, _2527 * cbModelParam._m0[19u].x))), _1514);
            frontier_phi_22_49_ladder = _2666.z * cbModelParam._m0[1u].z;
            frontier_phi_22_49_ladder_1 = _2666.y * cbModelParam._m0[1u].z;
            frontier_phi_22_49_ladder_2 = _2666.x * cbModelParam._m0[1u].z;
        }
        _1607 = frontier_phi_22_49_ladder_2;
        _1609 = frontier_phi_22_49_ladder_1;
        _1611 = frontier_phi_22_49_ladder;
    }
    else
    {
        vec4 _1591 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_610, _611, _612), _1514);
        _1607 = _1591.x * cbModelParam._m0[1u].z;
        _1609 = _1591.y * cbModelParam._m0[1u].z;
        _1611 = _1591.z * cbModelParam._m0[1u].z;
    }
    float _1624 = (((_637 * _587) + _638) * _602) * ((cbModelParam._m0[1u].w * (_1607 - _1505)) + _1505);
    float _1626 = (((_637 * _589) + _638) * _602) * ((cbModelParam._m0[1u].w * (_1609 - _1507)) + _1507);
    float _1628 = (((_637 * _590) + _638) * _602) * ((cbModelParam._m0[1u].w * (_1611 - _1509)) + _1509);
    float _1631 = fma(_1628, cbSceneParam._m0[89u].z, fma(_1626, cbSceneParam._m0[89u].y, _1624 * cbSceneParam._m0[89u].x));
    float _1634 = fma(_1628, cbSceneParam._m0[90u].z, fma(_1626, cbSceneParam._m0[90u].y, _1624 * cbSceneParam._m0[90u].x));
    float _1637 = fma(_1628, cbSceneParam._m0[91u].z, fma(_1626, cbSceneParam._m0[91u].y, _1624 * cbSceneParam._m0[91u].x));
    float _1671 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1675 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1679 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1683 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1684 = _1671 / _1683;
    float _1685 = _1675 / _1683;
    float _1686 = _1679 / _1683;
    float _1833;
    float _1834;
    float _1835;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1713 = ((uint(_1686 > cbSceneParam._m0[59u].y) + uint(_1686 > cbSceneParam._m0[59u].x)) + uint(_1686 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1714 = _1713 + 43u;
        uint _1722 = _1713 + 44u;
        uint _1730 = _1713 + 45u;
        uint _1738 = _1713 + 46u;
        float _1749 = fma(_1683, cbSceneParam._m0[_1714].w, fma(_1679, cbSceneParam._m0[_1714].z, fma(_1675, cbSceneParam._m0[_1714].y, _1671 * cbSceneParam._m0[_1714].x)));
        float _1753 = fma(_1683, cbSceneParam._m0[_1722].w, fma(_1679, cbSceneParam._m0[_1722].z, fma(_1675, cbSceneParam._m0[_1722].y, _1671 * cbSceneParam._m0[_1722].x)));
        float _1761 = fma(_1683, cbSceneParam._m0[_1738].w, fma(_1679, cbSceneParam._m0[_1738].z, fma(_1675, cbSceneParam._m0[_1738].y, _1671 * cbSceneParam._m0[_1738].x)));
        float _1766 = cbSceneParam._m0[33u].z * _1761;
        float _1768 = cbSceneParam._m0[33u].w * _1761;
        float _1771 = fma(_1683, cbSceneParam._m0[_1730].w, fma(_1679, cbSceneParam._m0[_1730].z, fma(_1675, cbSceneParam._m0[_1730].y, _1671 * cbSceneParam._m0[_1730].x))) / _1761;
        float _1819 = (cbSceneParam._m0[33u].x - sqrt(((_1685 * _1685) + (_1684 * _1684)) + (_1686 * _1686))) * cbSceneParam._m0[33u].y;
        float _3901 = isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0));
        float _1826 = (isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1766 + _1749) / _1761, (_1768 + _1753) / _1761), _1771), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1768 + _1749) / _1761, (_1753 - _1766) / _1761), _1771), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1749 - _1766) / _1761, (_1753 - _1768) / _1761), _1771), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1749 - _1768) / _1761, (_1766 + _1753) / _1761), _1771), 0.0)).x), vec4(0.25)));
        _1833 = 1.0 - (_1826 * cbSceneParam._m0[34u].x);
        _1834 = 1.0 - (_1826 * cbSceneParam._m0[34u].y);
        _1835 = 1.0 - (_1826 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1833 = 1.0;
        _1834 = 1.0;
        _1835 = 1.0;
    }
    float _1899;
    float _1901;
    float _1903;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1887 = fma(_1683, cbSceneParam._m0[63u].w, fma(_1679, cbSceneParam._m0[63u].z, fma(_1675, cbSceneParam._m0[63u].y, _1671 * cbSceneParam._m0[63u].x)));
        float _1888 = fma(_1683, cbSceneParam._m0[60u].w, fma(_1679, cbSceneParam._m0[60u].z, fma(_1675, cbSceneParam._m0[60u].y, _1671 * cbSceneParam._m0[60u].x))) / _1887;
        float _1889 = fma(_1683, cbSceneParam._m0[61u].w, fma(_1679, cbSceneParam._m0[61u].z, fma(_1675, cbSceneParam._m0[61u].y, _1671 * cbSceneParam._m0[61u].x))) / _1887;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1888 >= cbSceneParam._m0[64u].x) && (_1889 >= cbSceneParam._m0[64u].y)) && (_1888 <= cbSceneParam._m0[64u].z)) && (_1889 <= cbSceneParam._m0[64u].w))
        {
            float _2191 = fma(_1683, cbSceneParam._m0[62u].w, fma(_1679, cbSceneParam._m0[62u].z, fma(_1675, cbSceneParam._m0[62u].y, _1671 * cbSceneParam._m0[62u].x))) / _1887;
            float _2195 = isnan(cbSceneParam._m0[41u].w) ? _2191 : (isnan(_2191) ? cbSceneParam._m0[41u].w : max(_2191, cbSceneParam._m0[41u].w));
            float _2238 = (cbSceneParam._m0[33u].x - sqrt(((_1685 * _1685) + (_1684 * _1684)) + (_1686 * _1686))) * cbSceneParam._m0[33u].y;
            float _3917 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
            float _2245 = (isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1888, cbSceneParam._m0[33u].w + _1889), _2195), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1888, _1889 - cbSceneParam._m0[33u].z), _2195), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1888 - cbSceneParam._m0[33u].z, _1889 - cbSceneParam._m0[33u].w), _2195), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1888 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1889), _2195), 0.0)).x), vec4(0.25)));
            float _2249 = 1.0 - (_2245 * cbSceneParam._m0[34u].x);
            float _2250 = 1.0 - (_2245 * cbSceneParam._m0[34u].y);
            float _2251 = 1.0 - (_2245 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2251) ? _1835 : (isnan(_1835) ? _2251 : min(_1835, _2251));
            frontier_phi_34_33_ladder_1 = isnan(_2250) ? _1834 : (isnan(_1834) ? _2250 : min(_1834, _2250));
            frontier_phi_34_33_ladder_2 = isnan(_2249) ? _1833 : (isnan(_1833) ? _2249 : min(_1833, _2249));
        }
        else
        {
            frontier_phi_34_33_ladder = _1835;
            frontier_phi_34_33_ladder_1 = _1834;
            frontier_phi_34_33_ladder_2 = _1833;
        }
        _1899 = frontier_phi_34_33_ladder_2;
        _1901 = frontier_phi_34_33_ladder_1;
        _1903 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1899 = _1833;
        _1901 = _1834;
        _1903 = _1835;
    }
    float _3943 = isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0));
    float _1905 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
    float _3954 = isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0));
    float _1906 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
    float _3965 = isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0));
    float _1907 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
    uvec4 _1911 = floatBitsToUint(cbInstanceData._m0[_561 + 5u]);
    uint _1913 = _1911.x * 14u;
    uint _1914 = _1913 + 13u;
    float _1919 = _602 + (-1.0);
    float _1922 = (cbLight._m0[_1914].x * _1919) + 1.0;
    float _1923 = (cbLight._m0[_1914].y * _1919) + 1.0;
    uint _1924 = _1913 + 5u;
    float _1930 = isnan(1.0) ? _1923 : (isnan(_1923) ? 1.0 : min(_1923, 1.0));
    uint _1934 = _1913 + 4u;
    float _1944 = isnan(1.0) ? _1922 : (isnan(_1922) ? 1.0 : min(_1922, 1.0));
    uint _1948 = _1913 | 1u;
    float _1959 = dot(vec3(cbLight._m0[_1913].xyz), vec3(_433, _434, _435));
    float _1962 = dot(vec3(cbLight._m0[_1948].xyz), vec3(_433, _434, _435));
    float _3986 = isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0));
    float _3997 = isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0));
    float _1967 = (isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0))) * 0.3183098733425140380859375;
    float _1969 = (isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0))) * 0.3183098733425140380859375;
    float _1976 = ((cbLight._m0[_1924].x * _1930) * _1969) + (((cbLight._m0[_1934].x * _1905) * _1944) * _1967);
    float _1977 = ((_1930 * cbLight._m0[_1924].y) * _1969) + (((cbLight._m0[_1934].y * _1906) * _1944) * _1967);
    float _1978 = ((_1930 * cbLight._m0[_1924].z) * _1969) + (((cbLight._m0[_1934].z * _1907) * _1944) * _1967);
    uint _1980 = _1913 + 8u;
    float _1993 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1913].w)) * _436) * 0.949999988079071044921875);
    float _1994 = _1993 * _1993;
    float _1995 = cbLight._m0[_1913].x + _510;
    float _1996 = cbLight._m0[_1913].y + _511;
    float _1997 = cbLight._m0[_1913].z + _512;
    float _2001 = inversesqrt(dot(vec3(_1995, _1996, _1997), vec3(_1995, _1996, _1997)));
    float _2002 = _2001 * _1995;
    float _2003 = _2001 * _1996;
    float _2004 = _2001 * _1997;
    float _2005 = dot(vec3(_433, _434, _435), vec3(cbLight._m0[_1913].xyz));
    float _4008 = isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0));
    float _2008 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
    float _4019 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _2009 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
    float _2010 = dot(vec3(_433, _434, _435), vec3(_2002, _2003, _2004));
    float _4030 = isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0));
    float _2013 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
    float _2014 = dot(vec3(cbLight._m0[_1913].xyz), vec3(_2002, _2003, _2004));
    float _4041 = isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0));
    float _2018 = _1994 * _1994;
    float _2022 = ((_2013 * _2013) * (_2018 + (-1.0))) + 1.0;
    float _2030 = exp2(log2(1.0 - (isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0)))) * 5.0);
    float _2031 = 0.959999978542327880859375 - _584;
    float _2033 = 0.959999978542327880859375 - _585;
    float _2034 = 0.959999978542327880859375 - _586;
    float _2041 = 1.0 - _1994;
    float _2052 = (0.5 / (((_2009 * ((_2008 * _2041) + _1994)) + 9.9999999392252902907785028219223e-09) + (((_2009 * _2041) + _1994) * _2008))) * _2008;
    float _4052 = isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0));
    float _2054 = (isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0))) * (_2018 / ((_2022 * _2022) * 3.141590118408203125));
    uint _2068 = _1913 + 9u;
    float _2079 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1948].w)) * _436) * 0.949999988079071044921875);
    float _2080 = _2079 * _2079;
    float _2081 = cbLight._m0[_1948].x + _510;
    float _2082 = cbLight._m0[_1948].y + _511;
    float _2083 = cbLight._m0[_1948].z + _512;
    float _2087 = inversesqrt(dot(vec3(_2081, _2082, _2083), vec3(_2081, _2082, _2083)));
    float _2088 = _2087 * _2081;
    float _2089 = _2087 * _2082;
    float _2090 = _2087 * _2083;
    float _2091 = dot(vec3(_433, _434, _435), vec3(cbLight._m0[_1948].xyz));
    float _4063 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
    float _2094 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
    float _2095 = dot(vec3(_433, _434, _435), vec3(_2088, _2089, _2090));
    float _4074 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
    float _2098 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
    float _2099 = dot(vec3(cbLight._m0[_1948].xyz), vec3(_2088, _2089, _2090));
    float _4085 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
    float _2103 = _2080 * _2080;
    float _2107 = ((_2098 * _2098) * (_2103 + (-1.0))) + 1.0;
    float _2114 = exp2(log2(1.0 - (isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0)))) * 5.0);
    float _2121 = 1.0 - _2080;
    float _2131 = (0.5 / (((_2009 * ((_2094 * _2121) + _2080)) + 9.9999999392252902907785028219223e-09) + (((_2009 * _2121) + _2080) * _2094))) * _2094;
    float _4096 = isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0));
    float _2133 = (isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0))) * (_2103 / ((_2107 * _2107) * 3.141590118408203125));
    float _2143 = (((((_2114 * _2031) + _587) * cbLight._m0[_2068].x) * _2133) * _1930) + ((((cbLight._m0[_1980].x * _1905) * ((_2030 * _2031) + _587)) * _2054) * _1944);
    float _2144 = (((((_2114 * _2033) + _589) * cbLight._m0[_2068].y) * _2133) * _1930) + ((((cbLight._m0[_1980].y * _1906) * ((_2030 * _2033) + _589)) * _2054) * _1944);
    float _2145 = (((((_2114 * _2034) + _590) * cbLight._m0[_2068].z) * _2133) * _1930) + ((((cbLight._m0[_1980].z * _1907) * ((_2030 * _2034) + _590)) * _2054) * _1944);
    float _2308;
    float _2310;
    float _2312;
    float _2314;
    float _2316;
    float _2318;
    if (_1911.y == 0u)
    {
        uvec4 _2263 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2264 = _2263.x;
        uint _2275 = uint((float(_2263.y) * floor(float(uint(cbSceneParam._m0[85u].y * _521) / _2264))) + floor(float(uint(cbSceneParam._m0[85u].x * _520) / _2264)));
        float _2285 = (log2(_1686 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2286 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
        uint _2289 = uint(isnan(14.0) ? _2286 : (isnan(_2286) ? 14.0 : min(_2286, 14.0)));
        uvec4 _2294 = texelFetch(g_lightClusterGridBuffer, int(((_2289 << 2u) + (_2275 << 6u)) >> 2u));
        uint _2295 = _2294.x;
        uint _2296 = _2263.z;
        float _2400;
        float _2402;
        float _2404;
        float _2406;
        float _2408;
        float _2410;
        if (((((1u << ((_2296 >> 4u) & 15u)) + 4294967295u) & _2295) == 0u) || ((_2296 & 240u) == 0u))
        {
            _2400 = 0.0;
            _2402 = 0.0;
            _2404 = 0.0;
            _2406 = 0.0;
            _2408 = 0.0;
            _2410 = 0.0;
        }
        else
        {
            float _2401;
            float _2403;
            float _2405;
            float _2407;
            float _2409;
            float _2411;
            float _2578 = 0.0;
            float _2579 = 0.0;
            float _2580 = 0.0;
            float _2581 = 0.0;
            float _2582 = 0.0;
            float _2583 = 0.0;
            uint _2584 = 0u;
            uint _2593;
            bool _2594;
            for (;;)
            {
                _2593 = texelFetch(g_lightClassification, int((((_2289 << 5u) + (_2275 << 9u)) + (_2584 << 2u)) >> 2u)).x;
                _2594 = _2593 == 0u;
                float frontier_phi_60_pred;
                float frontier_phi_60_pred_1;
                float frontier_phi_60_pred_2;
                float frontier_phi_60_pred_3;
                float frontier_phi_60_pred_4;
                float frontier_phi_60_pred_5;
                if (_2594)
                {
                    frontier_phi_60_pred = _2583;
                    frontier_phi_60_pred_1 = _2582;
                    frontier_phi_60_pred_2 = _2581;
                    frontier_phi_60_pred_3 = _2580;
                    frontier_phi_60_pred_4 = _2579;
                    frontier_phi_60_pred_5 = _2578;
                }
                else
                {
                    float _2745;
                    float _2746;
                    float _2747;
                    float _2748;
                    float _2749;
                    float _2750;
                    uint _2751;
                    _2745 = _2578;
                    _2746 = _2579;
                    _2747 = _2580;
                    _2748 = _2581;
                    _2749 = _2582;
                    _2750 = _2583;
                    _2751 = _2593;
                    float _2671;
                    float _2672;
                    float _2673;
                    float _2674;
                    float _2675;
                    float _2676;
                    for (;;)
                    {
                        uint _2755 = uint(findLSB(_2751)) + (_2584 << 5u);
                        uint _2752 = (_2751 + 4294967295u) & _2751;
                        uint _2757 = _2755 * 48u;
                        vec4 _2771 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2757)).x, texelFetch(g_PointLightRenderingBuffer, int(_2757 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2757 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2757 + 3u)).x));
                        uint _2777 = (_2755 * 48u) + 4u;
                        vec4 _2790 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2777)).x, texelFetch(g_PointLightRenderingBuffer, int(_2777 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2777 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2777 + 3u)).x));
                        uint _2796 = (_2755 * 48u) + 8u;
                        vec3 _2807 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2796)).x, texelFetch(g_PointLightRenderingBuffer, int(_2796 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2796 + 2u)).x));
                        float _2811 = _2771.x - _1684;
                        float _2812 = _2771.y - _1685;
                        float _2813 = _2771.z - _1686;
                        float _2814 = dot(vec3(_2811, _2812, _2813), vec3(_2811, _2812, _2813));
                        float _2817 = inversesqrt(_2814);
                        float _2818 = _2817 * _2811;
                        float _2819 = _2817 * _2812;
                        float _2820 = _2817 * _2813;
                        float _2821 = dot(vec3(_542, _545, _548), vec3(_2818, _2819, _2820));
                        float _2826 = 1.0 - (_2814 * _2771.w);
                        float _4117 = isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : max(_2826, 0.0));
                        float _2827 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
                        float _2828 = sqrt(_2814) * _2790.w;
                        float _2831 = 1.39999997615814208984375 / (_2828 + 1.39999997615814208984375);
                        float _2832 = _2831 * _2831;
                        float _2835 = ((1.0 - _2832) * _2821) + _2832;
                        float _2838 = _2828 * _2828;
                        float _2842 = ((isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : max(_2835, 0.0))) * _2827) / ((_2838 * 0.699999988079071044921875) + 1.0);
                        float _2846 = (-0.0) - _1684;
                        float _2847 = (-0.0) - _1685;
                        float _2848 = (-0.0) - _1686;
                        float _2852 = inversesqrt(dot(vec3(_2846, _2847, _2848), vec3(_2846, _2847, _2848)));
                        float _2853 = _2852 * _2846;
                        float _2854 = _2852 * _2847;
                        float _2855 = _2852 * _2848;
                        float _2862 = exp2(log2(1.0 / ((_2838 * 3.5) + 5.0)) * 0.25);
                        float _2863 = 1.0 - _618;
                        float _2870 = sqrt(1.0 - ((1.0 - (_2863 * _2863)) * (1.0 - (_2862 * _2862))));
                        float _2871 = _2870 * _2870;
                        float _2872 = _2871 * _2871;
                        float _2873 = _2853 + _2818;
                        float _2874 = _2854 + _2819;
                        float _2875 = _2855 + _2820;
                        float _2879 = inversesqrt(dot(vec3(_2873, _2874, _2875), vec3(_2873, _2874, _2875)));
                        float _2883 = dot(vec3(_542, _545, _548), vec3(_2853, _2854, _2855));
                        float _4133 = isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : max(_2883, 0.0));
                        float _2886 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
                        float _2887 = dot(vec3(_542, _545, _548), vec3(_2879 * _2873, _2879 * _2874, _2879 * _2875));
                        float _4144 = isnan(0.0) ? _2887 : (isnan(_2887) ? 0.0 : max(_2887, 0.0));
                        float _2890 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
                        float _2894 = ((_2890 * _2890) * (_2872 + (-1.0))) + 1.0;
                        float _2895 = _2831 * _2871;
                        float _2896 = _2895 * _2895;
                        float _2899 = ((1.0 - _2896) * _2821) + _2896;
                        float _4155 = isnan(0.0) ? _2899 : (isnan(_2899) ? 0.0 : max(_2899, 0.0));
                        float _2900 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
                        float _2901 = 1.0 - _2871;
                        float _2911 = (0.5 / (((_2900 * ((_2886 * _2901) + _2871)) + 9.9999999392252902907785028219223e-09) + (((_2900 * _2901) + _2871) * _2886))) * _2900;
                        float _4166 = isnan(0.0) ? _2911 : (isnan(_2911) ? 0.0 : max(_2911, 0.0));
                        float _2922 = (((_2872 * 3.1415927410125732421875) * (isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0)))) / ((_2894 * _2894) * ((_2838 * 2.1991131305694580078125) + 3.141590118408203125))) * _2827;
                        _2674 = (_2842 * _2790.x) + _2748;
                        _2675 = (_2842 * _2790.y) + _2749;
                        _2676 = (_2842 * _2790.z) + _2750;
                        _2671 = (_2922 * _2807.x) + _2745;
                        _2672 = (_2922 * _2807.y) + _2746;
                        _2673 = (_2922 * _2807.z) + _2747;
                        if (_2752 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2745 = _2671;
                            _2746 = _2672;
                            _2747 = _2673;
                            _2748 = _2674;
                            _2749 = _2675;
                            _2750 = _2676;
                            _2751 = _2752;
                        }
                    }
                    frontier_phi_60_pred = _2676;
                    frontier_phi_60_pred_1 = _2675;
                    frontier_phi_60_pred_2 = _2674;
                    frontier_phi_60_pred_3 = _2673;
                    frontier_phi_60_pred_4 = _2672;
                    frontier_phi_60_pred_5 = _2671;
                }
                _2411 = frontier_phi_60_pred;
                _2409 = frontier_phi_60_pred_1;
                _2407 = frontier_phi_60_pred_2;
                _2405 = frontier_phi_60_pred_3;
                _2403 = frontier_phi_60_pred_4;
                _2401 = frontier_phi_60_pred_5;
                uint _2585 = _2584 + 1u;
                if (_2585 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2578 = _2401;
                    _2579 = _2403;
                    _2580 = _2405;
                    _2581 = _2407;
                    _2582 = _2409;
                    _2583 = _2411;
                    _2584 = _2585;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2400 = _2401;
            _2402 = _2403;
            _2404 = _2405;
            _2406 = _2407;
            _2408 = _2409;
            _2410 = _2411;
        }
        uvec4 _2414 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2415 = _2414.z;
        uint _2417 = (_2415 >> 8u) & 15u;
        float _2546;
        float _2548;
        float _2550;
        float _2552;
        float _2554;
        float _2556;
        if (((4294967295u << _2417) & _2295) == 0u)
        {
            _2546 = _2400;
            _2548 = _2402;
            _2550 = _2404;
            _2552 = _2406;
            _2554 = _2408;
            _2556 = _2410;
        }
        else
        {
            float _2571 = inversesqrt(dot(vec3(_1684, _1685, _1686), vec3(_1684, _1685, _1686)));
            float _2572 = _2571 * _1684;
            float _2573 = _2571 * _1685;
            float _2574 = _2571 * _1686;
            float frontier_phi_51_52_ladder;
            float frontier_phi_51_52_ladder_1;
            float frontier_phi_51_52_ladder_2;
            float frontier_phi_51_52_ladder_3;
            float frontier_phi_51_52_ladder_4;
            float frontier_phi_51_52_ladder_5;
            if (_2417 < ((_2415 >> 12u) & 15u))
            {
                float _2547;
                float _2549;
                float _2551;
                float _2553;
                float _2555;
                float _2557;
                float _2728 = _2400;
                float _2729 = _2402;
                float _2730 = _2404;
                float _2731 = _2406;
                float _2732 = _2408;
                float _2733 = _2410;
                uint _2734 = _2417;
                uint _2743;
                bool _2744;
                for (;;)
                {
                    _2743 = texelFetch(g_lightClassification, int((((_2289 << 5u) + (_2275 << 9u)) + (_2734 << 2u)) >> 2u)).x;
                    _2744 = _2743 == 0u;
                    float frontier_phi_71_pred;
                    float frontier_phi_71_pred_1;
                    float frontier_phi_71_pred_2;
                    float frontier_phi_71_pred_3;
                    float frontier_phi_71_pred_4;
                    float frontier_phi_71_pred_5;
                    if (_2744)
                    {
                        frontier_phi_71_pred = _2732;
                        frontier_phi_71_pred_1 = _2731;
                        frontier_phi_71_pred_2 = _2730;
                        frontier_phi_71_pred_3 = _2729;
                        frontier_phi_71_pred_4 = _2728;
                        frontier_phi_71_pred_5 = _2733;
                    }
                    else
                    {
                        float _2938;
                        float _2939;
                        float _2940;
                        float _2941;
                        float _2942;
                        float _2943;
                        float _3234;
                        float _3235;
                        float _3236;
                        float _3237;
                        float _3238;
                        float _3239;
                        float _2951 = _2728;
                        float _2952 = _2729;
                        float _2953 = _2730;
                        float _2954 = _2731;
                        float _2955 = _2732;
                        float _2956 = _2733;
                        uint _2957 = _2743;
                        uint _2958;
                        vec4 _2983;
                        float _2984;
                        vec4 _2999;
                        vec3 _3011;
                        vec4 _3027;
                        vec4 _3043;
                        float _3090;
                        bool _3091;
                        for (;;)
                        {
                            uint _2968 = ((_2734 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2957));
                            _2958 = (_2957 + 4294967295u) & _2957;
                            uint _2970 = _2968 * 40u;
                            _2983 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2970)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 3u)).x));
                            _2984 = _2983.w;
                            uint _2986 = (_2968 * 40u) + 4u;
                            _2999 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2986)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 3u)).x));
                            uint _3001 = (_2968 * 40u) + 8u;
                            _3011 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3001)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3001 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3001 + 2u)).x));
                            uint _3014 = (_2968 * 40u) + 16u;
                            _3027 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3014)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 3u)).x));
                            uint _3030 = (_2968 * 40u) + 20u;
                            _3043 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3030)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3030 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3030 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3030 + 3u)).x));
                            uint _3046 = (_2968 * 40u) + 24u;
                            vec4 _3059 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3046)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 3u)).x));
                            uint _3065 = (_2968 * 40u) + 28u;
                            vec4 _3078 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3065)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 3u)).x));
                            _3090 = fma(_1686, _3078.z, fma(_1685, _3078.y, _3078.x * _1684)) + _3078.w;
                            _3091 = !((fma(_1686, _3059.z, fma(_1685, _3059.y, _3059.x * _1684)) + _3059.w) <= 0.0);
                            float frontier_phi_77_pred;
                            float frontier_phi_77_pred_1;
                            float frontier_phi_77_pred_2;
                            float frontier_phi_77_pred_3;
                            float frontier_phi_77_pred_4;
                            float frontier_phi_77_pred_5;
                            if (_3091)
                            {
                                float _3118 = _2983.x - _1684;
                                float _3119 = _2983.y - _1685;
                                float _3120 = _2983.z - _1686;
                                float _3121 = dot(vec3(_3118, _3119, _3120), vec3(_3118, _3119, _3120));
                                float _3124 = inversesqrt(_3121);
                                float _3125 = _3124 * _3118;
                                float _3126 = _3124 * _3119;
                                float _3127 = _3124 * _3120;
                                float _3131 = 1.0 - (_3121 / (_2984 * _2984));
                                float _4177 = isnan(0.0) ? _3131 : (isnan(_3131) ? 0.0 : max(_3131, 0.0));
                                float _3132 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
                                float _3136 = sqrt(_3121) * _2999.w;
                                float _3138 = 1.39999997615814208984375 / (_3136 + 1.39999997615814208984375);
                                float _3139 = _3138 * _3138;
                                float _3142 = ((1.0 - _3139) * dot(vec3(_3125, _3126, _3127), vec3(_542, _545, _548))) + _3139;
                                float _3145 = _3136 * _3136;
                                float _3149 = (fma(_1686, _3027.z, fma(_1685, _3027.y, _3027.x * _1684)) + _3027.w) / _3090;
                                float _3150 = (fma(_1686, _3043.z, fma(_1685, _3043.y, _3043.x * _1684)) + _3043.w) / _3090;
                                float _3154 = 1.0 - dot(vec2(_3149, _3150), vec2(_3149, _3150));
                                float _4193 = isnan(0.0) ? _3154 : (isnan(_3154) ? 0.0 : max(_3154, 0.0));
                                float _3155 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
                                float _3156 = _3155 * (((isnan(0.0) ? _3142 : (isnan(_3142) ? 0.0 : max(_3142, 0.0))) * _3132) / ((_3145 * 0.699999988079071044921875) + 1.0));
                                float _3168 = exp2(log2(1.0 / ((_3145 * 3.5) + 5.0)) * 0.25);
                                float _3169 = 1.0 - _618;
                                float _3176 = sqrt(1.0 - ((1.0 - (_3169 * _3169)) * (1.0 - (_3168 * _3168))));
                                float _3177 = _3176 * _3176;
                                float _3178 = _3177 * _3177;
                                float _3179 = _3125 - _2572;
                                float _3180 = _3126 - _2573;
                                float _3181 = _3127 - _2574;
                                float _3185 = inversesqrt(dot(vec3(_3179, _3180, _3181), vec3(_3179, _3180, _3181)));
                                float _3189 = dot(vec3(_542, _545, _548), vec3((-0.0) - _2572, (-0.0) - _2573, (-0.0) - _2574));
                                float _4204 = isnan(0.0) ? _3189 : (isnan(_3189) ? 0.0 : max(_3189, 0.0));
                                float _3192 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
                                float _3193 = dot(vec3(_542, _545, _548), vec3(_3185 * _3179, _3185 * _3180, _3185 * _3181));
                                float _4215 = isnan(0.0) ? _3193 : (isnan(_3193) ? 0.0 : max(_3193, 0.0));
                                float _3196 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
                                float _3200 = ((_3196 * _3196) * (_3178 + (-1.0))) + 1.0;
                                float _3201 = _3138 * _3177;
                                float _3202 = _3201 * _3201;
                                float _3208 = ((1.0 - _3202) * dot(vec3(_542, _545, _548), vec3(_3125, _3126, _3127))) + _3202;
                                float _4226 = isnan(0.0) ? _3208 : (isnan(_3208) ? 0.0 : max(_3208, 0.0));
                                float _3209 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
                                float _3210 = 1.0 - _3177;
                                float _3220 = (0.5 / (((_3209 * ((_3192 * _3210) + _3177)) + 9.9999999392252902907785028219223e-09) + (((_3209 * _3210) + _3177) * _3192))) * _3209;
                                float _4237 = isnan(0.0) ? _3220 : (isnan(_3220) ? 0.0 : max(_3220, 0.0));
                                float _3230 = (_3155 * _3132) * (((_3178 * 3.1415927410125732421875) * (isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0)))) / ((_3200 * _3200) * ((_3145 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_77_pred = _3156 * _2999.z;
                                frontier_phi_77_pred_1 = _3156 * _2999.y;
                                frontier_phi_77_pred_2 = _3156 * _2999.x;
                                frontier_phi_77_pred_3 = _3230 * _3011.z;
                                frontier_phi_77_pred_4 = _3230 * _3011.y;
                                frontier_phi_77_pred_5 = _3230 * _3011.x;
                            }
                            else
                            {
                                frontier_phi_77_pred = 0.0;
                                frontier_phi_77_pred_1 = 0.0;
                                frontier_phi_77_pred_2 = 0.0;
                                frontier_phi_77_pred_3 = 0.0;
                                frontier_phi_77_pred_4 = 0.0;
                                frontier_phi_77_pred_5 = 0.0;
                            }
                            _3239 = frontier_phi_77_pred;
                            _3238 = frontier_phi_77_pred_1;
                            _3237 = frontier_phi_77_pred_2;
                            _3236 = frontier_phi_77_pred_3;
                            _3235 = frontier_phi_77_pred_4;
                            _3234 = frontier_phi_77_pred_5;
                            _2941 = _3237 + _2954;
                            _2942 = _3238 + _2955;
                            _2943 = _3239 + _2956;
                            _2938 = _3234 + _2951;
                            _2939 = _3235 + _2952;
                            _2940 = _3236 + _2953;
                            if (_2958 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2951 = _2938;
                                _2952 = _2939;
                                _2953 = _2940;
                                _2954 = _2941;
                                _2955 = _2942;
                                _2956 = _2943;
                                _2957 = _2958;
                                continue;
                            }
                        }
                        frontier_phi_71_pred = _2942;
                        frontier_phi_71_pred_1 = _2941;
                        frontier_phi_71_pred_2 = _2940;
                        frontier_phi_71_pred_3 = _2939;
                        frontier_phi_71_pred_4 = _2938;
                        frontier_phi_71_pred_5 = _2943;
                    }
                    _2555 = frontier_phi_71_pred;
                    _2553 = frontier_phi_71_pred_1;
                    _2551 = frontier_phi_71_pred_2;
                    _2549 = frontier_phi_71_pred_3;
                    _2547 = frontier_phi_71_pred_4;
                    _2557 = frontier_phi_71_pred_5;
                    uint _2735 = _2734 + 1u;
                    if (_2735 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2728 = _2547;
                        _2729 = _2549;
                        _2730 = _2551;
                        _2731 = _2553;
                        _2732 = _2555;
                        _2733 = _2557;
                        _2734 = _2735;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_51_52_ladder = _2557;
                frontier_phi_51_52_ladder_1 = _2555;
                frontier_phi_51_52_ladder_2 = _2553;
                frontier_phi_51_52_ladder_3 = _2551;
                frontier_phi_51_52_ladder_4 = _2547;
                frontier_phi_51_52_ladder_5 = _2549;
            }
            else
            {
                frontier_phi_51_52_ladder = _2410;
                frontier_phi_51_52_ladder_1 = _2408;
                frontier_phi_51_52_ladder_2 = _2406;
                frontier_phi_51_52_ladder_3 = _2404;
                frontier_phi_51_52_ladder_4 = _2400;
                frontier_phi_51_52_ladder_5 = _2402;
            }
            _2546 = frontier_phi_51_52_ladder_4;
            _2548 = frontier_phi_51_52_ladder_5;
            _2550 = frontier_phi_51_52_ladder_3;
            _2552 = frontier_phi_51_52_ladder_2;
            _2554 = frontier_phi_51_52_ladder_1;
            _2556 = frontier_phi_51_52_ladder;
        }
        float _2561 = isnan(1.0) ? _602 : (isnan(_602) ? 1.0 : min(_602, 1.0));
        _2308 = (_2561 * _2552) + _1976;
        _2310 = (_2561 * _2554) + _1977;
        _2312 = (_2561 * _2556) + _1978;
        _2314 = ((_2546 * _587) * _2561) + _2143;
        _2316 = ((_2548 * _589) * _2561) + _2144;
        _2318 = ((_2550 * _590) * _2561) + _2145;
    }
    else
    {
        _2308 = _1976;
        _2310 = _1977;
        _2312 = _1978;
        _2314 = _2143;
        _2316 = _2144;
        _2318 = _2145;
    }
    float _4253 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _4264 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _4275 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _2335 = ((isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0))) * (_2308 + ((isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0))) * _602))) + ((_2314 + ((isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0))) * _1412)) * cbPerFrame._m0[3u].x);
    float _2336 = ((isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0))) * (_2310 + ((isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0))) * _602))) + ((_2316 + ((isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0))) * _1412)) * cbPerFrame._m0[3u].x);
    float _2337 = ((isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0))) * (_2312 + ((isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0))) * _602))) + ((_2318 + ((isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0))) * _1412)) * cbPerFrame._m0[3u].x);
    uint _2338 = _561 + 6u;
    float _2346 = _520 / cbSceneParam._m0[86u].x;
    float _2347 = _521 / cbSceneParam._m0[86u].y;
    vec4 _2361 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2346, _2347, (log2((isnan(cbSceneParam._m0[77u].w) ? _454 : (isnan(_454) ? cbSceneParam._m0[77u].w : min(_454, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2363 = _2361.x;
    float _2364 = _2361.y;
    float _2365 = _2361.z;
    float _2366 = _2361.w;
    float _2462;
    float _2464;
    float _2466;
    float _2468;
    if (_454 > cbSceneParam._m0[78u].w)
    {
        float _2425 = isnan(_454) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _454 : min(cbSceneParam._m0[80u].w, _454));
        float _2426 = _2425 / _454;
        float _2437 = _2426 * _503;
        float _2438 = _504 * _2426;
        float _2439 = (-0.0) - _2438;
        float _2440 = _2426 * _505;
        float _2442 = (cbSceneParam._m0[77u].w * _2439) / _2425;
        float _2443 = _2442 + cbSceneParam._m0[79u].w;
        float _2444 = cbSceneParam._m0[79u].w - _2438;
        float _2450 = sqrt(((_2437 * _2437) + (_2438 * _2438)) + (_2440 * _2440));
        float _2453 = (1.0 - (cbSceneParam._m0[77u].w / _2425)) * _2450;
        float _2458 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2460 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2684;
        if (abs((_2439 - _2442) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2684 = ((((_2443 > 0.0) ? exp2(_2458 * _2443) : (2.0 - exp2(_2460 * _2443))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2453;
        }
        else
        {
            float _2607 = 1.0 / cbSceneParam._m0[80u].x;
            float _2608 = isnan(_2444) ? _2443 : (isnan(_2443) ? _2444 : max(_2443, _2444));
            float _2609 = isnan(_2444) ? _2443 : (isnan(_2443) ? _2444 : min(_2443, _2444));
            float _2618 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : min(_2608, 0.0));
            float _2619 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : min(_2609, 0.0));
            _2684 = ((abs(_2450 / _2439) * cbSceneParam._m0[80u].y) * ((((_2618 - _2619) * 2.0) - ((exp2(_2458 * (isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0)))) - exp2(_2458 * (isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0))))) * _2607)) - ((exp2(_2460 * _2618) - exp2(_2460 * _2619)) * _2607))) + (_2453 * cbSceneParam._m0[80u].z);
        }
        vec4 _2686 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2346, _2347, 1.0), 0.0);
        float _2695 = exp2((_2684 * (-1.44269502162933349609375)) * (1.0 - _2686.w));
        float _2696 = log2(_2695);
        float _2712 = log2(_2366);
        _2462 = (exp2(_2712 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2696 * cbSceneParam._m0[78u].x)) * _2686.x) / cbSceneParam._m0[78u].x)) + _2363;
        _2464 = (exp2(_2712 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2696 * cbSceneParam._m0[78u].y)) * _2686.y) / cbSceneParam._m0[78u].y)) + _2364;
        _2466 = (exp2(_2712 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2696 * cbSceneParam._m0[78u].z)) * _2686.z) / cbSceneParam._m0[78u].z)) + _2365;
        _2468 = _2695 * _2366;
    }
    else
    {
        _2462 = _2363;
        _2464 = _2364;
        _2466 = _2365;
        _2468 = _2366;
    }
    bool _2722;
    vec4 _2478;
    vec4 _2500;
    float _2502;
    float _2506;
    float _2507;
    float _2508;
    float _2509;
    bool _2519;
    for (;;)
    {
        _2478 = cbMatDynParam._m0[0u];
        float _2480 = roundEven(_2478.y);
        bool _2481 = _2480 == 3.0;
        float _2482 = log2(_2468);
        float _2489 = exp2(_2482 * cbSceneParam._m0[78u].x) * _2335;
        float _2490 = exp2(_2482 * cbSceneParam._m0[78u].y) * _2336;
        float _2491 = exp2(_2482 * cbSceneParam._m0[78u].z) * _2337;
        float _2498 = _515 + (-0.5);
        _2500 = cbMtdParam._m0[1u];
        _2502 = _2500.y * _2498;
        float _2505 = (_2480 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2506 = _2505 * (_2481 ? _2489 : (_2489 + (cbSceneParam._m0[72u].w * _2462)));
        _2507 = _2505 * (_2481 ? _2490 : (_2490 + (cbSceneParam._m0[72u].w * _2464)));
        _2508 = _2505 * (_2481 ? _2491 : (_2491 + (cbSceneParam._m0[72u].w * _2466)));
        _2509 = _2498 * 0.999000012874603271484375;
        _2519 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2519)
        {
            if ((cbInstanceData._m0[_561 + 7u].x + _2509) < 0.5)
            {
                _2722 = true;
                break;
            }
        }
        uint _2642 = _563 + uint(_2478.w);
        if ((cbInstanceData._m0[_2642].w < 1.0) && ((cbInstanceData._m0[_2642].w + _2509) < 0.5))
        {
            _2722 = true;
            break;
        }
        if ((_2502 + _377) < _2500.x)
        {
            _2722 = true;
            break;
        }
        _2722 = false;
        break;
    }
    float _2929;
    if (_2722)
    {
        discard_state = true;
        _2929 = 0.0;
    }
    else
    {
        _2929 = cbInstanceData._m0[_2338].w;
    }
    SV_Target.x = _2506;
    SV_Target.y = _2507;
    SV_Target.z = _2508;
    SV_Target.w = _2929;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2338].w;
    discard_exit();
}


