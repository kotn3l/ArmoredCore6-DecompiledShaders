#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_Ground_blend_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D S_Ground_blend_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _801;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _176 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _177 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _178 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _184 = inversesqrt(dot(vec3(_176, _177, _178), vec3(_176, _177, _178)));
    float _191 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _198 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _221 = texture(sampler2D(S_Ground_blend_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _227 = _221.x * cbMtdParam._m0[9u].x;
    float _228 = _221.y * cbMtdParam._m0[9u].y;
    float _229 = _221.z * cbMtdParam._m0[9u].z;
    vec4 _241 = texture(sampler2D(S_Ground_blend_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _245 = _241.z;
    float _249 = (_241.x * 2.0) + (-1.0);
    float _251 = (_241.y * 2.0) + (-1.0);
    float _252 = dot(vec2(_249, _251), vec2(_249, _251));
    float _3140 = isnan(0.0) ? _252 : (isnan(_252) ? 0.0 : max(_252, 0.0));
    float _258 = sqrt(1.0 - (isnan(1.0) ? _3140 : (isnan(_3140) ? 1.0 : min(_3140, 1.0))));
    float _261 = fma(_258, _191 * NORMAL.x, fma(_251, _198 * TANGENT.x, (_184 * _176) * _249));
    float _264 = fma(_258, _191 * NORMAL.y, fma(_251, _198 * TANGENT.y, (_184 * _177) * _249));
    float _267 = fma(_258, _191 * NORMAL.z, fma(_251, _198 * TANGENT.z, (_184 * _178) * _249));
    float _271 = inversesqrt(dot(vec3(_261, _264, _267), vec3(_261, _264, _267)));
    float _272 = _271 * _261;
    float _273 = _271 * _264;
    float _274 = _271 * _267;
    float _3151 = isnan(0.0) ? _245 : (isnan(_245) ? 0.0 : max(_245, 0.0));
    float _275 = isnan(1.0) ? _3151 : (isnan(_3151) ? 1.0 : min(_3151, 1.0));
    float _3162 = isnan(0.0) ? _227 : (isnan(_227) ? 0.0 : max(_227, 0.0));
    float _3173 = isnan(0.0) ? _228 : (isnan(_228) ? 0.0 : max(_228, 0.0));
    float _3184 = isnan(0.0) ? _229 : (isnan(_229) ? 0.0 : max(_229, 0.0));
    float _294 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _337 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _347 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _337);
    float _348 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _337);
    float _349 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _337);
    float _353 = inversesqrt(dot(vec3(_347, _348, _349), vec3(_347, _348, _349)));
    float _354 = _347 * _353;
    float _355 = _348 * _353;
    float _356 = _349 * _353;
    float _362 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _363 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _384 = fma(_274, cbSceneParam._m0[5u].z, fma(_273, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _272));
    float _387 = fma(_274, cbSceneParam._m0[6u].z, fma(_273, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _272));
    float _390 = fma(_274, cbSceneParam._m0[7u].z, fma(_273, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _272));
    uint _403 = uint(roundEven(NORMAL.w)) * 13u;
    uint _406 = (_403 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _412 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3162 : (isnan(_3162) ? 1.0 : min(_3162, 1.0)))) * cbInstanceData._m0[_406].x;
    float _413 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3173 : (isnan(_3173) ? 1.0 : min(_3173, 1.0)))) * cbInstanceData._m0[_406].y;
    float _414 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3184 : (isnan(_3184) ? 1.0 : min(_3184, 1.0)))) * cbInstanceData._m0[_406].z;
    float _3195 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
    float _415 = isnan(1.0) ? _3195 : (isnan(_3195) ? 1.0 : min(_3195, 1.0));
    float _3206 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _416 = isnan(1.0) ? _3206 : (isnan(_3206) ? 1.0 : min(_3206, 1.0));
    float _3217 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _417 = isnan(1.0) ? _3217 : (isnan(_3217) ? 1.0 : min(_3217, 1.0));
    vec4 _426 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _362, cbSceneParam._m0[86u].y * _363));
    float _429 = _426.x * TEXCOORD_1.w;
    float _430 = dot(vec3(_272, _273, _274), vec3(_354, _355, _356));
    float _433 = _430 * 2.0;
    float _437 = (_433 * _272) - _354;
    float _438 = (_433 * _273) - _355;
    float _439 = (_433 * _274) - _356;
    float _443 = abs(dot(vec3(_354, _355, _356), vec3(_272, _273, _274)));
    float _3228 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _445 = sqrt(_275);
    float _458 = exp2((_445 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3228 : (isnan(_3228) ? 1.0 : min(_3228, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_445 * 3.0));
    float _490 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _494 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _498 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _800;
    float _802;
    float _803;
    float _804;
    float _805;
    float _806;
    float _807;
    float _808;
    float _809;
    float _810;
    float _811;
    float _812;
    float _813;
    float _814;
    float _815;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _525 = fma(_498, cbModelParam._m0[26u].z, fma(_494, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _490));
        float _529 = fma(_498, cbModelParam._m0[27u].z, fma(_494, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _490));
        float _533 = fma(_498, cbModelParam._m0[28u].z, fma(_494, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _490));
        float _558 = _490 + _272;
        float _559 = _494 + _273;
        float _560 = _498 + _274;
        float _570 = fma(_560, cbModelParam._m0[26u].z, fma(_559, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _558)) - _525;
        float _571 = fma(_560, cbModelParam._m0[27u].z, fma(_559, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _558)) - _529;
        float _572 = fma(_560, cbModelParam._m0[28u].z, fma(_559, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _558)) - _533;
        float _576 = inversesqrt(dot(vec3(_570, _571, _572), vec3(_570, _571, _572)));
        float _589 = ((_576 * _570) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_525 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _590 = ((_576 * _571) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_529 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _591 = ((_576 * _572) / cbModelParam._m0[34u].z) + ((((((_533 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _594 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_589, _590, _591), 0.0);
        vec4 _601 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_589, _590, _591), 0.0);
        vec4 _608 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_589, _590, _591), 0.0);
        vec4 _615 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_589, _590, _591), 0.0);
        float _628 = exp2((_594.w + (-0.5)) * 20.0) * 2.0;
        float _629 = _628 * (_594.x + (-0.5));
        float _630 = _628 * (_594.y + (-0.5));
        float _631 = _628 * (_594.z + (-0.5));
        float _638 = exp2((_601.w + (-0.5)) * 20.0) * 2.0;
        float _639 = _638 * (_601.x + (-0.5));
        float _640 = _638 * (_601.y + (-0.5));
        float _641 = _638 * (_601.z + (-0.5));
        float _648 = exp2((_608.w + (-0.5)) * 20.0) * 2.0;
        float _649 = _648 * (_608.x + (-0.5));
        float _650 = _648 * (_608.y + (-0.5));
        float _651 = _648 * (_608.z + (-0.5));
        float _658 = exp2((_615.w + (-0.5)) * 20.0) * 2.0;
        float _659 = _658 * (_615.x + (-0.5));
        float _660 = _658 * (_615.y + (-0.5));
        float _661 = _658 * (_615.z + (-0.5));
        float _662 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
        float _663 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
        float _664 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
        float _665 = _629 * 0.5;
        float _666 = _639 * 0.5;
        float _667 = _649 * 0.5;
        float _668 = dot(vec3(_665, _666, _667), vec3(_665, _666, _667));
        float _673 = (_668 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_668);
        float _682 = (dot(vec3(_272, _273, _274), vec3(_673 * _665, _673 * _666, _673 * _667)) + 1.0) * 0.5;
        float _3254 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
        float _692 = sqrt(((_666 * _666) + (_665 * _665)) + (_667 * _667)) / (_662 + 9.9999997473787516355514526367188e-06);
        float _3265 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
        float _693 = isnan(1.0) ? _3265 : (isnan(_3265) ? 1.0 : min(_3265, 1.0));
        float _694 = _693 * 2.0;
        float _698 = (1.0 - _693) / (_693 + 1.0);
        float _3276 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
        float _699 = isnan(1.0) ? _3276 : (isnan(_3276) ? 1.0 : min(_3276, 1.0));
        float _708 = ((((1.0 - _699) * (_694 + 2.0)) * exp2(log2(isnan(1.0) ? _3254 : (isnan(_3254) ? 1.0 : min(_3254, 1.0))) * (_694 + 1.0))) + _699) * _662;
        float _709 = _630 * 0.5;
        float _710 = _640 * 0.5;
        float _711 = _650 * 0.5;
        float _712 = dot(vec3(_709, _710, _711), vec3(_709, _710, _711));
        float _717 = (_712 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_712);
        float _725 = (dot(vec3(_272, _273, _274), vec3(_717 * _709, _717 * _710, _717 * _711)) + 1.0) * 0.5;
        float _3287 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
        float _734 = sqrt(((_710 * _710) + (_709 * _709)) + (_711 * _711)) / (_663 + 9.9999997473787516355514526367188e-06);
        float _3298 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
        float _735 = isnan(1.0) ? _3298 : (isnan(_3298) ? 1.0 : min(_3298, 1.0));
        float _736 = _735 * 2.0;
        float _740 = (1.0 - _735) / (_735 + 1.0);
        float _3309 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
        float _741 = isnan(1.0) ? _3309 : (isnan(_3309) ? 1.0 : min(_3309, 1.0));
        float _750 = ((((1.0 - _741) * (_736 + 2.0)) * exp2(log2(isnan(1.0) ? _3287 : (isnan(_3287) ? 1.0 : min(_3287, 1.0))) * (_736 + 1.0))) + _741) * _663;
        float _751 = _631 * 0.5;
        float _752 = _641 * 0.5;
        float _753 = _651 * 0.5;
        float _754 = dot(vec3(_751, _752, _753), vec3(_751, _752, _753));
        float _759 = (_754 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_754);
        float _767 = (dot(vec3(_272, _273, _274), vec3(_759 * _751, _759 * _752, _759 * _753)) + 1.0) * 0.5;
        float _3320 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
        float _776 = sqrt(((_752 * _752) + (_751 * _751)) + (_753 * _753)) / (_664 + 9.9999997473787516355514526367188e-06);
        float _3331 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
        float _777 = isnan(1.0) ? _3331 : (isnan(_3331) ? 1.0 : min(_3331, 1.0));
        float _778 = _777 * 2.0;
        float _782 = (1.0 - _777) / (_777 + 1.0);
        float _3342 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
        float _783 = isnan(1.0) ? _3342 : (isnan(_3342) ? 1.0 : min(_3342, 1.0));
        float _792 = ((((1.0 - _783) * (_778 + 2.0)) * exp2(log2(isnan(1.0) ? _3320 : (isnan(_3320) ? 1.0 : min(_3320, 1.0))) * (_778 + 1.0))) + _783) * _664;
        _800 = _631;
        _802 = _630;
        _803 = _629;
        _804 = _641;
        _805 = _640;
        _806 = _639;
        _807 = _651;
        _808 = _650;
        _809 = _649;
        _810 = _664;
        _811 = _663;
        _812 = _662;
        _813 = cbModelParam._m0[36u].z * (isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0)));
        _814 = cbModelParam._m0[36u].z * (isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0)));
        _815 = cbModelParam._m0[36u].z * (isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0)));
    }
    else
    {
        _800 = _801;
        _802 = _801;
        _803 = _801;
        _804 = _801;
        _805 = _801;
        _806 = _801;
        _807 = _801;
        _808 = _801;
        _809 = _801;
        _810 = _801;
        _811 = _801;
        _812 = _801;
        _813 = 0.0;
        _814 = 0.0;
        _815 = 0.0;
    }
    float _1110;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _841 = fma(_498, cbModelParam._m0[30u].z, fma(_494, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _490));
        float _845 = fma(_498, cbModelParam._m0[31u].z, fma(_494, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _490));
        float _849 = fma(_498, cbModelParam._m0[32u].z, fma(_494, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _490));
        float _872 = _490 + _272;
        float _873 = _494 + _273;
        float _874 = _498 + _274;
        float _884 = fma(_874, cbModelParam._m0[30u].z, fma(_873, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _872)) - _841;
        float _885 = fma(_874, cbModelParam._m0[31u].z, fma(_873, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _872)) - _845;
        float _886 = fma(_874, cbModelParam._m0[32u].z, fma(_873, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _872)) - _849;
        float _890 = inversesqrt(dot(vec3(_884, _885, _886), vec3(_884, _885, _886)));
        float _903 = ((_890 * _884) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_841 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _904 = ((_890 * _885) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_845 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _905 = ((_890 * _886) / cbModelParam._m0[35u].z) + ((((((_849 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _907 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_903, _904, _905), 0.0);
        vec4 _914 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_903, _904, _905), 0.0);
        vec4 _921 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_903, _904, _905), 0.0);
        vec4 _928 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_903, _904, _905), 0.0);
        float _940 = exp2((_907.w + (-0.5)) * 20.0) * 2.0;
        float _941 = _940 * (_907.x + (-0.5));
        float _942 = _940 * (_907.y + (-0.5));
        float _943 = _940 * (_907.z + (-0.5));
        float _950 = exp2((_914.w + (-0.5)) * 20.0) * 2.0;
        float _951 = _950 * (_914.x + (-0.5));
        float _952 = _950 * (_914.y + (-0.5));
        float _953 = _950 * (_914.z + (-0.5));
        float _960 = exp2((_921.w + (-0.5)) * 20.0) * 2.0;
        float _961 = _960 * (_921.x + (-0.5));
        float _962 = _960 * (_921.y + (-0.5));
        float _963 = _960 * (_921.z + (-0.5));
        float _970 = exp2((_928.w + (-0.5)) * 20.0) * 2.0;
        float _971 = _970 * (_928.x + (-0.5));
        float _972 = _970 * (_928.y + (-0.5));
        float _973 = _970 * (_928.z + (-0.5));
        float _974 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _975 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _976 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _977 = _941 * 0.5;
        float _978 = _951 * 0.5;
        float _979 = _961 * 0.5;
        float _980 = dot(vec3(_977, _978, _979), vec3(_977, _978, _979));
        float _985 = (_980 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_980);
        float _993 = (dot(vec3(_272, _273, _274), vec3(_985 * _977, _985 * _978, _985 * _979)) + 1.0) * 0.5;
        float _3383 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _1002 = sqrt(((_978 * _978) + (_977 * _977)) + (_979 * _979)) / (_974 + 9.9999997473787516355514526367188e-06);
        float _3394 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1003 = isnan(1.0) ? _3394 : (isnan(_3394) ? 1.0 : min(_3394, 1.0));
        float _1004 = _1003 * 2.0;
        float _1008 = (1.0 - _1003) / (_1003 + 1.0);
        float _3405 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1009 = isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0));
        float _1018 = ((((1.0 - _1009) * (_1004 + 2.0)) * exp2(log2(isnan(1.0) ? _3383 : (isnan(_3383) ? 1.0 : min(_3383, 1.0))) * (_1004 + 1.0))) + _1009) * _974;
        float _1019 = _942 * 0.5;
        float _1020 = _952 * 0.5;
        float _1021 = _962 * 0.5;
        float _1022 = dot(vec3(_1019, _1020, _1021), vec3(_1019, _1020, _1021));
        float _1027 = (_1022 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1022);
        float _1035 = (dot(vec3(_272, _273, _274), vec3(_1027 * _1019, _1027 * _1020, _1027 * _1021)) + 1.0) * 0.5;
        float _3416 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1044 = sqrt(((_1020 * _1020) + (_1019 * _1019)) + (_1021 * _1021)) / (_975 + 9.9999997473787516355514526367188e-06);
        float _3427 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1045 = isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0));
        float _1046 = _1045 * 2.0;
        float _1050 = (1.0 - _1045) / (_1045 + 1.0);
        float _3438 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1051 = isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0));
        float _1060 = ((((1.0 - _1051) * (_1046 + 2.0)) * exp2(log2(isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0))) * (_1046 + 1.0))) + _1051) * _975;
        float _1061 = _943 * 0.5;
        float _1062 = _953 * 0.5;
        float _1063 = _963 * 0.5;
        float _1064 = dot(vec3(_1061, _1062, _1063), vec3(_1061, _1062, _1063));
        float _1069 = (_1064 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1064);
        float _1077 = (dot(vec3(_272, _273, _274), vec3(_1069 * _1061, _1069 * _1062, _1069 * _1063)) + 1.0) * 0.5;
        float _3449 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1086 = sqrt(((_1062 * _1062) + (_1061 * _1061)) + (_1063 * _1063)) / (_976 + 9.9999997473787516355514526367188e-06);
        float _3460 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1087 = isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0));
        float _1088 = _1087 * 2.0;
        float _1092 = (1.0 - _1087) / (_1087 + 1.0);
        float _3471 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1093 = isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0));
        float _1102 = ((((1.0 - _1093) * (_1088 + 2.0)) * exp2(log2(isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0))) * (_1088 + 1.0))) + _1093) * _976;
        _1110 = _943;
        _1111 = _942;
        _1112 = _941;
        _1113 = _953;
        _1114 = _952;
        _1115 = _951;
        _1116 = _963;
        _1117 = _962;
        _1118 = _961;
        _1119 = _976;
        _1120 = _975;
        _1121 = _974;
        _1122 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0)));
        _1123 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0)));
        _1124 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0)));
    }
    else
    {
        _1110 = _801;
        _1111 = _801;
        _1112 = _801;
        _1113 = _801;
        _1114 = _801;
        _1115 = _801;
        _1116 = _801;
        _1117 = _801;
        _1118 = _801;
        _1119 = _801;
        _1120 = _801;
        _1121 = _801;
        _1122 = 0.0;
        _1123 = 0.0;
        _1124 = 0.0;
    }
    float _1134 = (cbModelParam._m0[1u].x * (_1122 - _813)) + _813;
    float _1135 = (cbModelParam._m0[1u].x * (_1123 - _814)) + _814;
    float _1136 = (cbModelParam._m0[1u].x * (_1124 - _815)) + _815;
    float _1157 = fma(_1136, cbSceneParam._m0[89u].z, fma(_1135, cbSceneParam._m0[89u].y, _1134 * cbSceneParam._m0[89u].x));
    float _1160 = fma(_1136, cbSceneParam._m0[90u].z, fma(_1135, cbSceneParam._m0[90u].y, _1134 * cbSceneParam._m0[90u].x));
    float _1163 = fma(_1136, cbSceneParam._m0[91u].z, fma(_1135, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1134));
    float _1178 = _437 * 0.5;
    float _1179 = _438 * 0.5;
    float _1180 = _439 * 0.5;
    float _1181 = dot(vec4(_1178, _1179, _1180, 1.0), vec4(_1112, _1115, _1118, _1121));
    float _1184 = dot(vec4(_1178, _1179, _1180, 1.0), vec4(_1111, _1114, _1117, _1120));
    float _1187 = dot(vec4(_1178, _1179, _1180, 1.0), vec4(_1110, _1113, _1116, _1119));
    float _1221;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1194 = dot(vec4(_1178, _1179, _1180, 1.0), vec4(_800, _804, _807, _810));
        float _1198 = dot(vec4(_1178, _1179, _1180, 1.0), vec4(_802, _805, _808, _811));
        float _1202 = dot(vec4(_1178, _1179, _1180, 1.0), vec4(_803, _806, _809, _812));
        float _1209 = dot(vec4(cbModelParam._m0[39u]), vec4(_1178, _1179, _1180, 1.0));
        _1221 = dot(vec3(isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0)), isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0)), isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1209) ? 0.0 : (isnan(0.0) ? _1209 : max(0.0, _1209))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1221 = 1.0;
    }
    float _1232;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1223 = dot(vec4(cbModelParam._m0[40u]), vec4(_1178, _1179, _1180, 1.0));
        _1232 = dot(vec3(isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0)), isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0)), isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1223) ? 0.0 : (isnan(0.0) ? _1223 : max(0.0, _1223))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1232 = 1.0;
    }
    float _1236 = (_1232 * cbModelParam._m0[1u].x) + (_1221 * (1.0 - cbModelParam._m0[1u].x));
    float _1246 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _275);
    float _1247 = isnan(_1246) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1246 : min(cbModelParam._m0[25u].z, _1246));
    float _1329;
    float _1331;
    float _1333;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1296 = fma(_498, cbModelParam._m0[13u].z, fma(_494, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _490)) + cbModelParam._m0[13u].w;
        float _1300 = fma(_498, cbModelParam._m0[14u].z, fma(_494, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _490)) + cbModelParam._m0[14u].w;
        float _1304 = fma(_498, cbModelParam._m0[15u].z, fma(_494, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _490)) + cbModelParam._m0[15u].w;
        float _1307 = fma(_439, cbModelParam._m0[13u].z, fma(_438, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _437));
        float _1310 = fma(_439, cbModelParam._m0[14u].z, fma(_438, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _437));
        float _1313 = fma(_439, cbModelParam._m0[15u].z, fma(_438, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _437));
        float _1341;
        if (_1307 > 0.0)
        {
            _1341 = abs((1.0 - _1296) / _1307);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1307 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1296 + 1.0) / _1307);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1341 = frontier_phi_14_12_ladder;
        }
        float _1514;
        if (_1310 > 0.0)
        {
            _1514 = abs((1.0 - _1300) / _1310);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1310 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1300 + 1.0) / _1310);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1514 = frontier_phi_23_19_ladder;
        }
        float _1962;
        if (_1313 > 0.0)
        {
            _1962 = abs((1.0 - _1304) / _1313);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1313 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1304 + 1.0) / _1313);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1962 = frontier_phi_35_30_ladder;
        }
        float _1964 = isnan(_1514) ? _1341 : (isnan(_1341) ? _1514 : min(_1341, _1514));
        float _1965 = isnan(_1962) ? _1964 : (isnan(_1964) ? _1962 : min(_1964, _1962));
        float _1969 = (_1965 * _1307) + _1296;
        float _1970 = (_1965 * _1310) + _1300;
        float _1971 = (_1965 * _1313) + _1304;
        float _1972 = _1965 * 9.9999997473787516355514526367188e-05;
        float _1974 = (-1.0) - _1972;
        float _1976 = _1972 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1971 > _1976) || ((_1971 < _1974) || ((_1970 > _1976) || ((_1970 < _1974) || ((_1969 < _1974) || (_1969 > _1976))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2202 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1971, cbModelParam._m0[9u].z, fma(_1970, cbModelParam._m0[9u].y, _1969 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1971, cbModelParam._m0[10u].z, fma(_1970, cbModelParam._m0[10u].y, _1969 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1971, cbModelParam._m0[11u].z, fma(_1970, cbModelParam._m0[11u].y, _1969 * cbModelParam._m0[11u].x))), _1247);
            frontier_phi_13_35_ladder = _2202.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2202.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2202.x * cbModelParam._m0[1u].y;
        }
        _1329 = frontier_phi_13_35_ladder_2;
        _1331 = frontier_phi_13_35_ladder_1;
        _1333 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1317 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_437, _438, _439), _1247);
        _1329 = _1317.x * cbModelParam._m0[1u].y;
        _1331 = _1317.y * cbModelParam._m0[1u].y;
        _1333 = _1317.z * cbModelParam._m0[1u].y;
    }
    float _1337 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _275);
    float _1338 = isnan(_1337) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1337 : min(cbModelParam._m0[25u].w, _1337));
    float _1431;
    float _1433;
    float _1435;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1395 = fma(_498, cbModelParam._m0[21u].z, fma(_494, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _490)) + cbModelParam._m0[21u].w;
        float _1399 = fma(_498, cbModelParam._m0[22u].z, fma(_494, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _490)) + cbModelParam._m0[22u].w;
        float _1403 = fma(_498, cbModelParam._m0[23u].z, fma(_494, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _490)) + cbModelParam._m0[23u].w;
        float _1406 = fma(_439, cbModelParam._m0[21u].z, fma(_438, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _437));
        float _1409 = fma(_439, cbModelParam._m0[22u].z, fma(_438, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _437));
        float _1412 = fma(_439, cbModelParam._m0[23u].z, fma(_438, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _437));
        float _1519;
        if (_1406 > 0.0)
        {
            _1519 = abs((1.0 - _1395) / _1406);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1406 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1395 + 1.0) / _1406);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1519 = frontier_phi_25_21_ladder;
        }
        float _1989;
        if (_1409 > 0.0)
        {
            _1989 = abs((1.0 - _1399) / _1409);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1409 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1399 + 1.0) / _1409);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1989 = frontier_phi_37_32_ladder;
        }
        float _2324;
        if (_1412 > 0.0)
        {
            _2324 = abs((1.0 - _1403) / _1412);
        }
        else
        {
            float frontier_phi_49_44_ladder;
            if (_1412 < 0.0)
            {
                frontier_phi_49_44_ladder = abs((_1403 + 1.0) / _1412);
            }
            else
            {
                frontier_phi_49_44_ladder = 5000.0;
            }
            _2324 = frontier_phi_49_44_ladder;
        }
        float _2326 = isnan(_1989) ? _1519 : (isnan(_1519) ? _1989 : min(_1519, _1989));
        float _2327 = isnan(_2324) ? _2326 : (isnan(_2326) ? _2324 : min(_2326, _2324));
        float _2331 = (_2327 * _1406) + _1395;
        float _2332 = (_2327 * _1409) + _1399;
        float _2333 = (_2327 * _1412) + _1403;
        float _2334 = _2327 * 9.9999997473787516355514526367188e-05;
        float _2335 = (-1.0) - _2334;
        float _2337 = _2334 + 1.0;
        float frontier_phi_22_49_ladder;
        float frontier_phi_22_49_ladder_1;
        float frontier_phi_22_49_ladder_2;
        if ((_2333 > _2337) || ((_2333 < _2335) || ((_2332 > _2337) || ((_2332 < _2335) || ((_2331 < _2335) || (_2331 > _2337))))))
        {
            frontier_phi_22_49_ladder = 0.0;
            frontier_phi_22_49_ladder_1 = 0.0;
            frontier_phi_22_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2454 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2333, cbModelParam._m0[17u].z, fma(_2332, cbModelParam._m0[17u].y, _2331 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2333, cbModelParam._m0[18u].z, fma(_2332, cbModelParam._m0[18u].y, _2331 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2333, cbModelParam._m0[19u].z, fma(_2332, cbModelParam._m0[19u].y, _2331 * cbModelParam._m0[19u].x))), _1338);
            frontier_phi_22_49_ladder = _2454.z * cbModelParam._m0[1u].z;
            frontier_phi_22_49_ladder_1 = _2454.y * cbModelParam._m0[1u].z;
            frontier_phi_22_49_ladder_2 = _2454.x * cbModelParam._m0[1u].z;
        }
        _1431 = frontier_phi_22_49_ladder_2;
        _1433 = frontier_phi_22_49_ladder_1;
        _1435 = frontier_phi_22_49_ladder;
    }
    else
    {
        vec4 _1415 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_437, _438, _439), _1338);
        _1431 = _1415.x * cbModelParam._m0[1u].z;
        _1433 = _1415.y * cbModelParam._m0[1u].z;
        _1435 = _1415.z * cbModelParam._m0[1u].z;
    }
    float _1447 = ((((1.0 - _458) * ((_445 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_458 * _445)) * _429;
    float _1448 = _1447 * ((cbModelParam._m0[1u].w * (_1431 - _1329)) + _1329);
    float _1449 = _1447 * ((cbModelParam._m0[1u].w * (_1433 - _1331)) + _1331);
    float _1450 = _1447 * ((cbModelParam._m0[1u].w * (_1435 - _1333)) + _1333);
    float _1453 = fma(_1450, cbSceneParam._m0[89u].z, fma(_1449, cbSceneParam._m0[89u].y, _1448 * cbSceneParam._m0[89u].x));
    float _1456 = fma(_1450, cbSceneParam._m0[90u].z, fma(_1449, cbSceneParam._m0[90u].y, _1448 * cbSceneParam._m0[90u].x));
    float _1459 = fma(_1450, cbSceneParam._m0[91u].z, fma(_1449, cbSceneParam._m0[91u].y, _1448 * cbSceneParam._m0[91u].x));
    float _1493 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1497 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1501 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1505 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1506 = _1493 / _1505;
    float _1507 = _1497 / _1505;
    float _1508 = _1501 / _1505;
    float _1655;
    float _1656;
    float _1657;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1535 = ((uint(_1508 > cbSceneParam._m0[59u].y) + uint(_1508 > cbSceneParam._m0[59u].x)) + uint(_1508 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1536 = _1535 + 43u;
        uint _1544 = _1535 + 44u;
        uint _1552 = _1535 + 45u;
        uint _1560 = _1535 + 46u;
        float _1571 = fma(_1505, cbSceneParam._m0[_1536].w, fma(_1501, cbSceneParam._m0[_1536].z, fma(_1497, cbSceneParam._m0[_1536].y, _1493 * cbSceneParam._m0[_1536].x)));
        float _1575 = fma(_1505, cbSceneParam._m0[_1544].w, fma(_1501, cbSceneParam._m0[_1544].z, fma(_1497, cbSceneParam._m0[_1544].y, _1493 * cbSceneParam._m0[_1544].x)));
        float _1583 = fma(_1505, cbSceneParam._m0[_1560].w, fma(_1501, cbSceneParam._m0[_1560].z, fma(_1497, cbSceneParam._m0[_1560].y, _1493 * cbSceneParam._m0[_1560].x)));
        float _1588 = cbSceneParam._m0[33u].z * _1583;
        float _1590 = cbSceneParam._m0[33u].w * _1583;
        float _1593 = fma(_1505, cbSceneParam._m0[_1552].w, fma(_1501, cbSceneParam._m0[_1552].z, fma(_1497, cbSceneParam._m0[_1552].y, _1493 * cbSceneParam._m0[_1552].x))) / _1583;
        float _1641 = (cbSceneParam._m0[33u].x - sqrt(((_1507 * _1507) + (_1506 * _1506)) + (_1508 * _1508))) * cbSceneParam._m0[33u].y;
        float _3597 = isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0));
        float _1648 = (isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1588 + _1571) / _1583, (_1590 + _1575) / _1583), _1593), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1590 + _1571) / _1583, (_1575 - _1588) / _1583), _1593), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1571 - _1588) / _1583, (_1575 - _1590) / _1583), _1593), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1571 - _1590) / _1583, (_1588 + _1575) / _1583), _1593), 0.0)).x), vec4(0.25)));
        _1655 = 1.0 - (_1648 * cbSceneParam._m0[34u].x);
        _1656 = 1.0 - (_1648 * cbSceneParam._m0[34u].y);
        _1657 = 1.0 - (_1648 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1655 = 1.0;
        _1656 = 1.0;
        _1657 = 1.0;
    }
    float _1721;
    float _1723;
    float _1725;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1709 = fma(_1505, cbSceneParam._m0[63u].w, fma(_1501, cbSceneParam._m0[63u].z, fma(_1497, cbSceneParam._m0[63u].y, _1493 * cbSceneParam._m0[63u].x)));
        float _1710 = fma(_1505, cbSceneParam._m0[60u].w, fma(_1501, cbSceneParam._m0[60u].z, fma(_1497, cbSceneParam._m0[60u].y, _1493 * cbSceneParam._m0[60u].x))) / _1709;
        float _1711 = fma(_1505, cbSceneParam._m0[61u].w, fma(_1501, cbSceneParam._m0[61u].z, fma(_1497, cbSceneParam._m0[61u].y, _1493 * cbSceneParam._m0[61u].x))) / _1709;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1710 >= cbSceneParam._m0[64u].x) && (_1711 >= cbSceneParam._m0[64u].y)) && (_1710 <= cbSceneParam._m0[64u].z)) && (_1711 <= cbSceneParam._m0[64u].w))
        {
            float _2002 = fma(_1505, cbSceneParam._m0[62u].w, fma(_1501, cbSceneParam._m0[62u].z, fma(_1497, cbSceneParam._m0[62u].y, _1493 * cbSceneParam._m0[62u].x))) / _1709;
            float _2006 = isnan(cbSceneParam._m0[41u].w) ? _2002 : (isnan(_2002) ? cbSceneParam._m0[41u].w : max(_2002, cbSceneParam._m0[41u].w));
            float _2049 = (cbSceneParam._m0[33u].x - sqrt(((_1507 * _1507) + (_1506 * _1506)) + (_1508 * _1508))) * cbSceneParam._m0[33u].y;
            float _3613 = isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0));
            float _2056 = (isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1710, cbSceneParam._m0[33u].w + _1711), _2006), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1710, _1711 - cbSceneParam._m0[33u].z), _2006), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1710 - cbSceneParam._m0[33u].z, _1711 - cbSceneParam._m0[33u].w), _2006), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1710 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1711), _2006), 0.0)).x), vec4(0.25)));
            float _2060 = 1.0 - (_2056 * cbSceneParam._m0[34u].x);
            float _2061 = 1.0 - (_2056 * cbSceneParam._m0[34u].y);
            float _2062 = 1.0 - (_2056 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2062) ? _1657 : (isnan(_1657) ? _2062 : min(_1657, _2062));
            frontier_phi_34_33_ladder_1 = isnan(_2061) ? _1656 : (isnan(_1656) ? _2061 : min(_1656, _2061));
            frontier_phi_34_33_ladder_2 = isnan(_2060) ? _1655 : (isnan(_1655) ? _2060 : min(_1655, _2060));
        }
        else
        {
            frontier_phi_34_33_ladder = _1657;
            frontier_phi_34_33_ladder_1 = _1656;
            frontier_phi_34_33_ladder_2 = _1655;
        }
        _1721 = frontier_phi_34_33_ladder_2;
        _1723 = frontier_phi_34_33_ladder_1;
        _1725 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1721 = _1655;
        _1723 = _1656;
        _1725 = _1657;
    }
    float _3639 = isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0));
    float _1727 = isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0));
    float _3650 = isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0));
    float _1728 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
    float _3661 = isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0));
    float _1729 = isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0));
    uvec4 _1733 = floatBitsToUint(cbInstanceData._m0[_403 + 5u]);
    uint _1735 = _1733.x * 14u;
    uint _1736 = _1735 + 13u;
    float _1741 = _429 + (-1.0);
    float _1744 = (cbLight._m0[_1736].x * _1741) + 1.0;
    float _1745 = (cbLight._m0[_1736].y * _1741) + 1.0;
    uint _1746 = _1735 + 5u;
    float _1752 = isnan(1.0) ? _1745 : (isnan(_1745) ? 1.0 : min(_1745, 1.0));
    uint _1756 = _1735 + 4u;
    float _1766 = isnan(1.0) ? _1744 : (isnan(_1744) ? 1.0 : min(_1744, 1.0));
    uint _1770 = _1735 | 1u;
    float _1781 = dot(vec3(cbLight._m0[_1735].xyz), vec3(_272, _273, _274));
    float _1784 = dot(vec3(cbLight._m0[_1770].xyz), vec3(_272, _273, _274));
    float _3682 = isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0));
    float _3693 = isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0));
    float _1789 = (isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0))) * 0.3183098733425140380859375;
    float _1791 = (isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0))) * 0.3183098733425140380859375;
    float _1798 = ((cbLight._m0[_1746].x * _1752) * _1791) + (((cbLight._m0[_1756].x * _1727) * _1766) * _1789);
    float _1799 = ((_1752 * cbLight._m0[_1746].y) * _1791) + (((cbLight._m0[_1756].y * _1728) * _1766) * _1789);
    float _1800 = ((_1752 * cbLight._m0[_1746].z) * _1791) + (((cbLight._m0[_1756].z * _1729) * _1766) * _1789);
    uint _1802 = _1735 + 8u;
    float _1815 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1735].w)) * _275) * 0.949999988079071044921875);
    float _1816 = _1815 * _1815;
    float _1817 = cbLight._m0[_1735].x + _354;
    float _1818 = cbLight._m0[_1735].y + _355;
    float _1819 = cbLight._m0[_1735].z + _356;
    float _1823 = inversesqrt(dot(vec3(_1817, _1818, _1819), vec3(_1817, _1818, _1819)));
    float _1824 = _1823 * _1817;
    float _1825 = _1823 * _1818;
    float _1826 = _1823 * _1819;
    float _1827 = dot(vec3(_272, _273, _274), vec3(cbLight._m0[_1735].xyz));
    float _3704 = isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0));
    float _1830 = isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0));
    float _3715 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _1831 = isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0));
    float _1832 = dot(vec3(_272, _273, _274), vec3(_1824, _1825, _1826));
    float _3726 = isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0));
    float _1835 = isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0));
    float _1836 = dot(vec3(cbLight._m0[_1735].xyz), vec3(_1824, _1825, _1826));
    float _3737 = isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0));
    float _1840 = _1816 * _1816;
    float _1844 = ((_1835 * _1835) * (_1840 + (-1.0))) + 1.0;
    float _1855 = (exp2(log2(1.0 - (isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1856 = 1.0 - _1816;
    float _1867 = (0.5 / (((_1831 * ((_1830 * _1856) + _1816)) + 9.9999999392252902907785028219223e-09) + (((_1831 * _1856) + _1816) * _1830))) * _1830;
    float _3748 = isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0));
    float _1869 = (isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0))) * (_1840 / ((_1844 * _1844) * 3.141590118408203125));
    uint _1883 = _1735 + 9u;
    float _1894 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1770].w)) * _275) * 0.949999988079071044921875);
    float _1895 = _1894 * _1894;
    float _1896 = cbLight._m0[_1770].x + _354;
    float _1897 = cbLight._m0[_1770].y + _355;
    float _1898 = cbLight._m0[_1770].z + _356;
    float _1902 = inversesqrt(dot(vec3(_1896, _1897, _1898), vec3(_1896, _1897, _1898)));
    float _1903 = _1902 * _1896;
    float _1904 = _1902 * _1897;
    float _1905 = _1902 * _1898;
    float _1906 = dot(vec3(_272, _273, _274), vec3(cbLight._m0[_1770].xyz));
    float _3759 = isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0));
    float _1909 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
    float _1910 = dot(vec3(_272, _273, _274), vec3(_1903, _1904, _1905));
    float _3770 = isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0));
    float _1913 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
    float _1914 = dot(vec3(cbLight._m0[_1770].xyz), vec3(_1903, _1904, _1905));
    float _3781 = isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0));
    float _1918 = _1895 * _1895;
    float _1922 = ((_1913 * _1913) * (_1918 + (-1.0))) + 1.0;
    float _1931 = (exp2(log2(1.0 - (isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1932 = 1.0 - _1895;
    float _1942 = (0.5 / (((_1831 * ((_1909 * _1932) + _1895)) + 9.9999999392252902907785028219223e-09) + (((_1831 * _1932) + _1895) * _1909))) * _1909;
    float _3792 = isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0));
    float _1944 = (isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0))) * (_1918 / ((_1922 * _1922) * 3.141590118408203125));
    float _1954 = (((_1931 * cbLight._m0[_1883].x) * _1944) * _1752) + ((((cbLight._m0[_1802].x * _1727) * _1855) * _1869) * _1766);
    float _1955 = (((_1931 * cbLight._m0[_1883].y) * _1944) * _1752) + ((((cbLight._m0[_1802].y * _1728) * _1855) * _1869) * _1766);
    float _1956 = (((_1931 * cbLight._m0[_1883].z) * _1944) * _1752) + ((((cbLight._m0[_1802].z * _1729) * _1855) * _1869) * _1766);
    float _2119;
    float _2121;
    float _2123;
    float _2125;
    float _2127;
    float _2129;
    if (_1733.y == 0u)
    {
        uvec4 _2074 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2075 = _2074.x;
        uint _2086 = uint((float(_2074.y) * floor(float(uint(cbSceneParam._m0[85u].y * _363) / _2075))) + floor(float(uint(cbSceneParam._m0[85u].x * _362) / _2075)));
        float _2096 = (log2(_1508 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2097 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
        uint _2100 = uint(isnan(14.0) ? _2097 : (isnan(_2097) ? 14.0 : min(_2097, 14.0)));
        uvec4 _2105 = texelFetch(g_lightClusterGridBuffer, int(((_2100 << 2u) + (_2086 << 6u)) >> 2u));
        uint _2106 = _2105.x;
        uint _2107 = _2074.z;
        float _2211;
        float _2213;
        float _2215;
        float _2217;
        float _2219;
        float _2221;
        if (((((1u << ((_2107 >> 4u) & 15u)) + 4294967295u) & _2106) == 0u) || ((_2107 & 240u) == 0u))
        {
            _2211 = 0.0;
            _2213 = 0.0;
            _2215 = 0.0;
            _2217 = 0.0;
            _2219 = 0.0;
            _2221 = 0.0;
        }
        else
        {
            float _2212;
            float _2214;
            float _2216;
            float _2218;
            float _2220;
            float _2222;
            float _2382 = 0.0;
            float _2383 = 0.0;
            float _2384 = 0.0;
            float _2385 = 0.0;
            float _2386 = 0.0;
            float _2387 = 0.0;
            uint _2388 = 0u;
            uint _2397;
            bool _2398;
            for (;;)
            {
                _2397 = texelFetch(g_lightClassification, int((((_2100 << 5u) + (_2086 << 9u)) + (_2388 << 2u)) >> 2u)).x;
                _2398 = _2397 == 0u;
                float frontier_phi_58_pred;
                float frontier_phi_58_pred_1;
                float frontier_phi_58_pred_2;
                float frontier_phi_58_pred_3;
                float frontier_phi_58_pred_4;
                float frontier_phi_58_pred_5;
                if (_2398)
                {
                    frontier_phi_58_pred = _2385;
                    frontier_phi_58_pred_1 = _2384;
                    frontier_phi_58_pred_2 = _2383;
                    frontier_phi_58_pred_3 = _2382;
                    frontier_phi_58_pred_4 = _2386;
                    frontier_phi_58_pred_5 = _2387;
                }
                else
                {
                    float _2527;
                    float _2528;
                    float _2529;
                    float _2530;
                    float _2531;
                    float _2532;
                    uint _2533;
                    _2527 = _2382;
                    _2528 = _2383;
                    _2529 = _2384;
                    _2530 = _2385;
                    _2531 = _2386;
                    _2532 = _2387;
                    _2533 = _2397;
                    float _2459;
                    float _2460;
                    float _2461;
                    float _2462;
                    float _2463;
                    float _2464;
                    for (;;)
                    {
                        uint _2537 = uint(findLSB(_2533)) + (_2388 << 5u);
                        uint _2534 = (_2533 + 4294967295u) & _2533;
                        uint _2539 = _2537 * 48u;
                        vec4 _2553 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2539)).x, texelFetch(g_PointLightRenderingBuffer, int(_2539 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2539 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2539 + 3u)).x));
                        uint _2559 = (_2537 * 48u) + 4u;
                        vec4 _2572 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2559)).x, texelFetch(g_PointLightRenderingBuffer, int(_2559 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2559 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2559 + 3u)).x));
                        uint _2578 = (_2537 * 48u) + 8u;
                        vec3 _2589 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2578)).x, texelFetch(g_PointLightRenderingBuffer, int(_2578 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2578 + 2u)).x));
                        float _2593 = _2553.x - _1506;
                        float _2594 = _2553.y - _1507;
                        float _2595 = _2553.z - _1508;
                        float _2596 = dot(vec3(_2593, _2594, _2595), vec3(_2593, _2594, _2595));
                        float _2599 = inversesqrt(_2596);
                        float _2600 = _2599 * _2593;
                        float _2601 = _2599 * _2594;
                        float _2602 = _2599 * _2595;
                        float _2603 = dot(vec3(_384, _387, _390), vec3(_2600, _2601, _2602));
                        float _2608 = 1.0 - (_2596 * _2553.w);
                        float _3813 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0));
                        float _2609 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
                        float _2610 = sqrt(_2596) * _2572.w;
                        float _2613 = 1.39999997615814208984375 / (_2610 + 1.39999997615814208984375);
                        float _2614 = _2613 * _2613;
                        float _2617 = ((1.0 - _2614) * _2603) + _2614;
                        float _2620 = _2610 * _2610;
                        float _2624 = ((isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0))) * _2609) / ((_2620 * 0.699999988079071044921875) + 1.0);
                        float _2628 = (-0.0) - _1506;
                        float _2629 = (-0.0) - _1507;
                        float _2630 = (-0.0) - _1508;
                        float _2634 = inversesqrt(dot(vec3(_2628, _2629, _2630), vec3(_2628, _2629, _2630)));
                        float _2635 = _2634 * _2628;
                        float _2636 = _2634 * _2629;
                        float _2637 = _2634 * _2630;
                        float _2644 = exp2(log2(1.0 / ((_2620 * 3.5) + 5.0)) * 0.25);
                        float _2645 = 1.0 - _445;
                        float _2652 = sqrt(1.0 - ((1.0 - (_2645 * _2645)) * (1.0 - (_2644 * _2644))));
                        float _2653 = _2652 * _2652;
                        float _2654 = _2653 * _2653;
                        float _2655 = _2635 + _2600;
                        float _2656 = _2636 + _2601;
                        float _2657 = _2637 + _2602;
                        float _2661 = inversesqrt(dot(vec3(_2655, _2656, _2657), vec3(_2655, _2656, _2657)));
                        float _2665 = dot(vec3(_384, _387, _390), vec3(_2635, _2636, _2637));
                        float _3829 = isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0));
                        float _2668 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
                        float _2669 = dot(vec3(_384, _387, _390), vec3(_2661 * _2655, _2661 * _2656, _2661 * _2657));
                        float _3840 = isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0));
                        float _2672 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
                        float _2676 = ((_2672 * _2672) * (_2654 + (-1.0))) + 1.0;
                        float _2677 = _2613 * _2653;
                        float _2678 = _2677 * _2677;
                        float _2681 = ((1.0 - _2678) * _2603) + _2678;
                        float _3851 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0));
                        float _2682 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
                        float _2683 = 1.0 - _2653;
                        float _2693 = (0.5 / (((_2682 * ((_2668 * _2683) + _2653)) + 9.9999999392252902907785028219223e-09) + (((_2682 * _2683) + _2653) * _2668))) * _2682;
                        float _3862 = isnan(0.0) ? _2693 : (isnan(_2693) ? 0.0 : max(_2693, 0.0));
                        float _2704 = (((_2654 * 3.1415927410125732421875) * (isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0)))) / ((_2676 * _2676) * ((_2620 * 2.1991131305694580078125) + 3.141590118408203125))) * _2609;
                        _2462 = (_2624 * _2572.x) + _2530;
                        _2463 = (_2624 * _2572.y) + _2531;
                        _2464 = (_2624 * _2572.z) + _2532;
                        _2459 = (_2704 * _2589.x) + _2527;
                        _2460 = (_2704 * _2589.y) + _2528;
                        _2461 = (_2704 * _2589.z) + _2529;
                        if (_2534 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2527 = _2459;
                            _2528 = _2460;
                            _2529 = _2461;
                            _2530 = _2462;
                            _2531 = _2463;
                            _2532 = _2464;
                            _2533 = _2534;
                        }
                    }
                    frontier_phi_58_pred = _2462;
                    frontier_phi_58_pred_1 = _2461;
                    frontier_phi_58_pred_2 = _2460;
                    frontier_phi_58_pred_3 = _2459;
                    frontier_phi_58_pred_4 = _2463;
                    frontier_phi_58_pred_5 = _2464;
                }
                _2218 = frontier_phi_58_pred;
                _2216 = frontier_phi_58_pred_1;
                _2214 = frontier_phi_58_pred_2;
                _2212 = frontier_phi_58_pred_3;
                _2220 = frontier_phi_58_pred_4;
                _2222 = frontier_phi_58_pred_5;
                uint _2389 = _2388 + 1u;
                if (_2389 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2382 = _2212;
                    _2383 = _2214;
                    _2384 = _2216;
                    _2385 = _2218;
                    _2386 = _2220;
                    _2387 = _2222;
                    _2388 = _2389;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2211 = _2212;
            _2213 = _2214;
            _2215 = _2216;
            _2217 = _2218;
            _2219 = _2220;
            _2221 = _2222;
        }
        uvec4 _2225 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2226 = _2225.z;
        uint _2228 = (_2226 >> 8u) & 15u;
        float _2350;
        float _2352;
        float _2354;
        float _2356;
        float _2358;
        float _2360;
        if (((4294967295u << _2228) & _2106) == 0u)
        {
            _2350 = _2211;
            _2352 = _2213;
            _2354 = _2215;
            _2356 = _2217;
            _2358 = _2219;
            _2360 = _2221;
        }
        else
        {
            float _2375 = inversesqrt(dot(vec3(_1506, _1507, _1508), vec3(_1506, _1507, _1508)));
            float _2376 = _2375 * _1506;
            float _2377 = _2375 * _1507;
            float _2378 = _2375 * _1508;
            float frontier_phi_51_52_ladder;
            float frontier_phi_51_52_ladder_1;
            float frontier_phi_51_52_ladder_2;
            float frontier_phi_51_52_ladder_3;
            float frontier_phi_51_52_ladder_4;
            float frontier_phi_51_52_ladder_5;
            if (_2228 < ((_2226 >> 12u) & 15u))
            {
                float _2351;
                float _2353;
                float _2355;
                float _2357;
                float _2359;
                float _2361;
                float _2510 = _2211;
                float _2511 = _2213;
                float _2512 = _2215;
                float _2513 = _2217;
                float _2514 = _2219;
                float _2515 = _2221;
                uint _2516 = _2228;
                uint _2525;
                bool _2526;
                for (;;)
                {
                    _2525 = texelFetch(g_lightClassification, int((((_2100 << 5u) + (_2086 << 9u)) + (_2516 << 2u)) >> 2u)).x;
                    _2526 = _2525 == 0u;
                    float frontier_phi_64_pred;
                    float frontier_phi_64_pred_1;
                    float frontier_phi_64_pred_2;
                    float frontier_phi_64_pred_3;
                    float frontier_phi_64_pred_4;
                    float frontier_phi_64_pred_5;
                    if (_2526)
                    {
                        frontier_phi_64_pred = _2513;
                        frontier_phi_64_pred_1 = _2512;
                        frontier_phi_64_pred_2 = _2511;
                        frontier_phi_64_pred_3 = _2510;
                        frontier_phi_64_pred_4 = _2515;
                        frontier_phi_64_pred_5 = _2514;
                    }
                    else
                    {
                        float _2709;
                        float _2710;
                        float _2711;
                        float _2712;
                        float _2713;
                        float _2714;
                        float _3005;
                        float _3006;
                        float _3007;
                        float _3008;
                        float _3009;
                        float _3010;
                        float _2722 = _2510;
                        float _2723 = _2511;
                        float _2724 = _2512;
                        float _2725 = _2513;
                        float _2726 = _2514;
                        float _2727 = _2515;
                        uint _2728 = _2525;
                        uint _2729;
                        vec4 _2754;
                        float _2755;
                        vec4 _2770;
                        vec3 _2782;
                        vec4 _2798;
                        vec4 _2814;
                        float _2861;
                        bool _2862;
                        for (;;)
                        {
                            uint _2739 = ((_2516 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2728));
                            _2729 = (_2728 + 4294967295u) & _2728;
                            uint _2741 = _2739 * 40u;
                            _2754 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2741)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2741 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2741 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2741 + 3u)).x));
                            _2755 = _2754.w;
                            uint _2757 = (_2739 * 40u) + 4u;
                            _2770 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2757)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2757 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2757 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2757 + 3u)).x));
                            uint _2772 = (_2739 * 40u) + 8u;
                            _2782 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2772)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2772 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2772 + 2u)).x));
                            uint _2785 = (_2739 * 40u) + 16u;
                            _2798 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2785)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2785 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2785 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2785 + 3u)).x));
                            uint _2801 = (_2739 * 40u) + 20u;
                            _2814 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2801)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2801 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2801 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2801 + 3u)).x));
                            uint _2817 = (_2739 * 40u) + 24u;
                            vec4 _2830 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2817)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2817 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2817 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2817 + 3u)).x));
                            uint _2836 = (_2739 * 40u) + 28u;
                            vec4 _2849 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2836)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2836 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2836 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2836 + 3u)).x));
                            _2861 = fma(_1508, _2849.z, fma(_1507, _2849.y, _2849.x * _1506)) + _2849.w;
                            _2862 = !((fma(_1508, _2830.z, fma(_1507, _2830.y, _2830.x * _1506)) + _2830.w) <= 0.0);
                            float frontier_phi_70_pred;
                            float frontier_phi_70_pred_1;
                            float frontier_phi_70_pred_2;
                            float frontier_phi_70_pred_3;
                            float frontier_phi_70_pred_4;
                            float frontier_phi_70_pred_5;
                            if (_2862)
                            {
                                float _2889 = _2754.x - _1506;
                                float _2890 = _2754.y - _1507;
                                float _2891 = _2754.z - _1508;
                                float _2892 = dot(vec3(_2889, _2890, _2891), vec3(_2889, _2890, _2891));
                                float _2895 = inversesqrt(_2892);
                                float _2896 = _2895 * _2889;
                                float _2897 = _2895 * _2890;
                                float _2898 = _2895 * _2891;
                                float _2902 = 1.0 - (_2892 / (_2755 * _2755));
                                float _3873 = isnan(0.0) ? _2902 : (isnan(_2902) ? 0.0 : max(_2902, 0.0));
                                float _2903 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
                                float _2907 = sqrt(_2892) * _2770.w;
                                float _2909 = 1.39999997615814208984375 / (_2907 + 1.39999997615814208984375);
                                float _2910 = _2909 * _2909;
                                float _2913 = ((1.0 - _2910) * dot(vec3(_2896, _2897, _2898), vec3(_384, _387, _390))) + _2910;
                                float _2916 = _2907 * _2907;
                                float _2920 = (fma(_1508, _2798.z, fma(_1507, _2798.y, _2798.x * _1506)) + _2798.w) / _2861;
                                float _2921 = (fma(_1508, _2814.z, fma(_1507, _2814.y, _2814.x * _1506)) + _2814.w) / _2861;
                                float _2925 = 1.0 - dot(vec2(_2920, _2921), vec2(_2920, _2921));
                                float _3889 = isnan(0.0) ? _2925 : (isnan(_2925) ? 0.0 : max(_2925, 0.0));
                                float _2926 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
                                float _2927 = _2926 * (((isnan(0.0) ? _2913 : (isnan(_2913) ? 0.0 : max(_2913, 0.0))) * _2903) / ((_2916 * 0.699999988079071044921875) + 1.0));
                                float _2939 = exp2(log2(1.0 / ((_2916 * 3.5) + 5.0)) * 0.25);
                                float _2940 = 1.0 - _445;
                                float _2947 = sqrt(1.0 - ((1.0 - (_2940 * _2940)) * (1.0 - (_2939 * _2939))));
                                float _2948 = _2947 * _2947;
                                float _2949 = _2948 * _2948;
                                float _2950 = _2896 - _2376;
                                float _2951 = _2897 - _2377;
                                float _2952 = _2898 - _2378;
                                float _2956 = inversesqrt(dot(vec3(_2950, _2951, _2952), vec3(_2950, _2951, _2952)));
                                float _2960 = dot(vec3(_384, _387, _390), vec3((-0.0) - _2376, (-0.0) - _2377, (-0.0) - _2378));
                                float _3900 = isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : max(_2960, 0.0));
                                float _2963 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
                                float _2964 = dot(vec3(_384, _387, _390), vec3(_2956 * _2950, _2956 * _2951, _2956 * _2952));
                                float _3911 = isnan(0.0) ? _2964 : (isnan(_2964) ? 0.0 : max(_2964, 0.0));
                                float _2967 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
                                float _2971 = ((_2967 * _2967) * (_2949 + (-1.0))) + 1.0;
                                float _2972 = _2909 * _2948;
                                float _2973 = _2972 * _2972;
                                float _2979 = ((1.0 - _2973) * dot(vec3(_384, _387, _390), vec3(_2896, _2897, _2898))) + _2973;
                                float _3922 = isnan(0.0) ? _2979 : (isnan(_2979) ? 0.0 : max(_2979, 0.0));
                                float _2980 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
                                float _2981 = 1.0 - _2948;
                                float _2991 = (0.5 / (((_2980 * ((_2963 * _2981) + _2948)) + 9.9999999392252902907785028219223e-09) + (((_2980 * _2981) + _2948) * _2963))) * _2980;
                                float _3933 = isnan(0.0) ? _2991 : (isnan(_2991) ? 0.0 : max(_2991, 0.0));
                                float _3001 = (_2926 * _2903) * (((_2949 * 3.1415927410125732421875) * (isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0)))) / ((_2971 * _2971) * ((_2916 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_70_pred = _2927 * _2770.x;
                                frontier_phi_70_pred_1 = _3001 * _2782.z;
                                frontier_phi_70_pred_2 = _3001 * _2782.y;
                                frontier_phi_70_pred_3 = _3001 * _2782.x;
                                frontier_phi_70_pred_4 = _2927 * _2770.z;
                                frontier_phi_70_pred_5 = _2927 * _2770.y;
                            }
                            else
                            {
                                frontier_phi_70_pred = 0.0;
                                frontier_phi_70_pred_1 = 0.0;
                                frontier_phi_70_pred_2 = 0.0;
                                frontier_phi_70_pred_3 = 0.0;
                                frontier_phi_70_pred_4 = 0.0;
                                frontier_phi_70_pred_5 = 0.0;
                            }
                            _3008 = frontier_phi_70_pred;
                            _3007 = frontier_phi_70_pred_1;
                            _3006 = frontier_phi_70_pred_2;
                            _3005 = frontier_phi_70_pred_3;
                            _3010 = frontier_phi_70_pred_4;
                            _3009 = frontier_phi_70_pred_5;
                            _2712 = _3008 + _2725;
                            _2713 = _3009 + _2726;
                            _2714 = _3010 + _2727;
                            _2709 = _3005 + _2722;
                            _2710 = _3006 + _2723;
                            _2711 = _3007 + _2724;
                            if (_2729 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2722 = _2709;
                                _2723 = _2710;
                                _2724 = _2711;
                                _2725 = _2712;
                                _2726 = _2713;
                                _2727 = _2714;
                                _2728 = _2729;
                                continue;
                            }
                        }
                        frontier_phi_64_pred = _2712;
                        frontier_phi_64_pred_1 = _2711;
                        frontier_phi_64_pred_2 = _2710;
                        frontier_phi_64_pred_3 = _2709;
                        frontier_phi_64_pred_4 = _2714;
                        frontier_phi_64_pred_5 = _2713;
                    }
                    _2357 = frontier_phi_64_pred;
                    _2355 = frontier_phi_64_pred_1;
                    _2353 = frontier_phi_64_pred_2;
                    _2351 = frontier_phi_64_pred_3;
                    _2361 = frontier_phi_64_pred_4;
                    _2359 = frontier_phi_64_pred_5;
                    uint _2517 = _2516 + 1u;
                    if (_2517 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2510 = _2351;
                        _2511 = _2353;
                        _2512 = _2355;
                        _2513 = _2357;
                        _2514 = _2359;
                        _2515 = _2361;
                        _2516 = _2517;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_51_52_ladder = _2361;
                frontier_phi_51_52_ladder_1 = _2359;
                frontier_phi_51_52_ladder_2 = _2355;
                frontier_phi_51_52_ladder_3 = _2353;
                frontier_phi_51_52_ladder_4 = _2357;
                frontier_phi_51_52_ladder_5 = _2351;
            }
            else
            {
                frontier_phi_51_52_ladder = _2221;
                frontier_phi_51_52_ladder_1 = _2219;
                frontier_phi_51_52_ladder_2 = _2215;
                frontier_phi_51_52_ladder_3 = _2213;
                frontier_phi_51_52_ladder_4 = _2217;
                frontier_phi_51_52_ladder_5 = _2211;
            }
            _2350 = frontier_phi_51_52_ladder_5;
            _2352 = frontier_phi_51_52_ladder_3;
            _2354 = frontier_phi_51_52_ladder_2;
            _2356 = frontier_phi_51_52_ladder_4;
            _2358 = frontier_phi_51_52_ladder_1;
            _2360 = frontier_phi_51_52_ladder;
        }
        float _2365 = isnan(1.0) ? _429 : (isnan(_429) ? 1.0 : min(_429, 1.0));
        _2119 = (_2365 * _2356) + _1798;
        _2121 = (_2365 * _2358) + _1799;
        _2123 = (_2365 * _2360) + _1800;
        _2125 = ((_2350 * 0.039999999105930328369140625) * _2365) + _1954;
        _2127 = ((_2352 * 0.039999999105930328369140625) * _2365) + _1955;
        _2129 = ((_2354 * 0.039999999105930328369140625) * _2365) + _1956;
    }
    else
    {
        _2119 = _1798;
        _2121 = _1799;
        _2123 = _1800;
        _2125 = _1954;
        _2127 = _1955;
        _2129 = _1956;
    }
    float _3949 = isnan(0.0) ? _415 : (isnan(_415) ? 0.0 : max(_415, 0.0));
    float _3960 = isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0));
    float _3971 = isnan(0.0) ? _417 : (isnan(_417) ? 0.0 : max(_417, 0.0));
    uint _2149 = _403 + 6u;
    float _2157 = _362 / cbSceneParam._m0[86u].x;
    float _2158 = _363 / cbSceneParam._m0[86u].y;
    vec4 _2172 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2157, _2158, (log2((isnan(cbSceneParam._m0[77u].w) ? _294 : (isnan(_294) ? cbSceneParam._m0[77u].w : min(_294, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2174 = _2172.x;
    float _2175 = _2172.y;
    float _2176 = _2172.z;
    float _2177 = _2172.w;
    float _2274;
    float _2276;
    float _2278;
    float _2280;
    if (_294 > cbSceneParam._m0[78u].w)
    {
        float _2236 = isnan(_294) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _294 : min(cbSceneParam._m0[80u].w, _294));
        float _2237 = _2236 / _294;
        float _2248 = _2237 * _347;
        float _2249 = _348 * _2237;
        float _2250 = (-0.0) - _2249;
        float _2252 = _2237 * _349;
        float _2254 = (cbSceneParam._m0[77u].w * _2250) / _2236;
        float _2255 = _2254 + cbSceneParam._m0[79u].w;
        float _2256 = cbSceneParam._m0[79u].w - _2249;
        float _2262 = sqrt(((_2248 * _2248) + (_2249 * _2249)) + (_2252 * _2252));
        float _2265 = (1.0 - (cbSceneParam._m0[77u].w / _2236)) * _2262;
        float _2270 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2272 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2472;
        if (abs((_2250 - _2254) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2472 = ((((_2255 > 0.0) ? exp2(_2270 * _2255) : (2.0 - exp2(_2272 * _2255))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2265;
        }
        else
        {
            float _2411 = 1.0 / cbSceneParam._m0[80u].x;
            float _2412 = isnan(_2256) ? _2255 : (isnan(_2255) ? _2256 : max(_2255, _2256));
            float _2413 = isnan(_2256) ? _2255 : (isnan(_2255) ? _2256 : min(_2255, _2256));
            float _2422 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : min(_2412, 0.0));
            float _2423 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : min(_2413, 0.0));
            _2472 = ((abs(_2262 / _2250) * cbSceneParam._m0[80u].y) * ((((_2422 - _2423) * 2.0) - ((exp2(_2270 * (isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0)))) - exp2(_2270 * (isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0))))) * _2411)) - ((exp2(_2272 * _2422) - exp2(_2272 * _2423)) * _2411))) + (_2265 * cbSceneParam._m0[80u].z);
        }
        vec4 _2474 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2157, _2158, 1.0), 0.0);
        float _2483 = exp2((_2472 * (-1.44269502162933349609375)) * (1.0 - _2474.w));
        float _2484 = log2(_2483);
        float _2500 = log2(_2177);
        _2274 = (exp2(_2500 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2484 * cbSceneParam._m0[78u].x)) * _2474.x) / cbSceneParam._m0[78u].x)) + _2174;
        _2276 = (exp2(_2500 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2484 * cbSceneParam._m0[78u].y)) * _2474.y) / cbSceneParam._m0[78u].y)) + _2175;
        _2278 = (exp2(_2500 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2484 * cbSceneParam._m0[78u].z)) * _2474.z) / cbSceneParam._m0[78u].z)) + _2176;
        _2280 = _2483 * _2177;
    }
    else
    {
        _2274 = _2174;
        _2276 = _2175;
        _2278 = _2176;
        _2280 = _2177;
    }
    float _2292 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2293 = _2292 == 3.0;
    float _2294 = log2(_2280);
    float _2301 = exp2(_2294 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0))) * (_2119 + ((isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0))) * _429))) + ((_2125 + ((isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0))) * _1236)) * cbPerFrame._m0[3u].x));
    float _2302 = exp2(_2294 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0))) * (_2121 + ((isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0))) * _429))) + ((_2127 + ((isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0))) * _1236)) * cbPerFrame._m0[3u].x));
    float _2303 = exp2(_2294 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0))) * (_2123 + ((isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0))) * _429))) + ((_2129 + ((isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0))) * _1236)) * cbPerFrame._m0[3u].x));
    float _2312 = (_2292 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2312 * (_2293 ? _2301 : (_2301 + (cbSceneParam._m0[72u].w * _2274)));
    SV_Target.y = _2312 * (_2293 ? _2302 : (_2302 + (cbSceneParam._m0[72u].w * _2276)));
    SV_Target.z = _2312 * (_2293 ? _2303 : (_2303 + (cbSceneParam._m0[72u].w * _2278)));
    SV_Target.w = cbInstanceData._m0[_2149].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2149].w;
}


