#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_Ground_blend_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D S_Ground_blend_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _797;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _172 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _173 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _174 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _180 = inversesqrt(dot(vec3(_172, _173, _174), vec3(_172, _173, _174)));
    float _187 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _194 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _217 = texture(sampler2D(S_Ground_blend_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _223 = _217.x * cbMtdParam._m0[9u].x;
    float _224 = _217.y * cbMtdParam._m0[9u].y;
    float _225 = _217.z * cbMtdParam._m0[9u].z;
    vec4 _237 = texture(sampler2D(S_Ground_blend_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _241 = _237.z;
    float _245 = (_237.x * 2.0) + (-1.0);
    float _247 = (_237.y * 2.0) + (-1.0);
    float _248 = dot(vec2(_245, _247), vec2(_245, _247));
    float _2850 = isnan(0.0) ? _248 : (isnan(_248) ? 0.0 : max(_248, 0.0));
    float _254 = sqrt(1.0 - (isnan(1.0) ? _2850 : (isnan(_2850) ? 1.0 : min(_2850, 1.0))));
    float _257 = fma(_254, _187 * NORMAL.x, fma(_247, _194 * TANGENT.x, (_180 * _172) * _245));
    float _260 = fma(_254, _187 * NORMAL.y, fma(_247, _194 * TANGENT.y, (_180 * _173) * _245));
    float _263 = fma(_254, _187 * NORMAL.z, fma(_247, _194 * TANGENT.z, (_180 * _174) * _245));
    float _267 = inversesqrt(dot(vec3(_257, _260, _263), vec3(_257, _260, _263)));
    float _268 = _267 * _257;
    float _269 = _267 * _260;
    float _270 = _267 * _263;
    float _2861 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _271 = isnan(1.0) ? _2861 : (isnan(_2861) ? 1.0 : min(_2861, 1.0));
    float _2872 = isnan(0.0) ? _223 : (isnan(_223) ? 0.0 : max(_223, 0.0));
    float _2883 = isnan(0.0) ? _224 : (isnan(_224) ? 0.0 : max(_224, 0.0));
    float _2894 = isnan(0.0) ? _225 : (isnan(_225) ? 0.0 : max(_225, 0.0));
    float _290 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _333 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _343 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _333);
    float _344 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _333);
    float _345 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _333);
    float _349 = inversesqrt(dot(vec3(_343, _344, _345), vec3(_343, _344, _345)));
    float _350 = _343 * _349;
    float _351 = _344 * _349;
    float _352 = _345 * _349;
    float _358 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _359 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _380 = fma(_270, cbSceneParam._m0[5u].z, fma(_269, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _268));
    float _383 = fma(_270, cbSceneParam._m0[6u].z, fma(_269, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _268));
    float _386 = fma(_270, cbSceneParam._m0[7u].z, fma(_269, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _268));
    uint _399 = uint(roundEven(NORMAL.w)) * 13u;
    uint _402 = (_399 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _408 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2872 : (isnan(_2872) ? 1.0 : min(_2872, 1.0)))) * cbInstanceData._m0[_402].x;
    float _409 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2883 : (isnan(_2883) ? 1.0 : min(_2883, 1.0)))) * cbInstanceData._m0[_402].y;
    float _410 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2894 : (isnan(_2894) ? 1.0 : min(_2894, 1.0)))) * cbInstanceData._m0[_402].z;
    float _2905 = isnan(0.0) ? _408 : (isnan(_408) ? 0.0 : max(_408, 0.0));
    float _411 = isnan(1.0) ? _2905 : (isnan(_2905) ? 1.0 : min(_2905, 1.0));
    float _2916 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _412 = isnan(1.0) ? _2916 : (isnan(_2916) ? 1.0 : min(_2916, 1.0));
    float _2927 = isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : max(_410, 0.0));
    float _413 = isnan(1.0) ? _2927 : (isnan(_2927) ? 1.0 : min(_2927, 1.0));
    vec4 _422 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _358, cbSceneParam._m0[86u].y * _359));
    float _425 = _422.x * TEXCOORD_1.w;
    float _426 = dot(vec3(_268, _269, _270), vec3(_350, _351, _352));
    float _429 = _426 * 2.0;
    float _433 = (_429 * _268) - _350;
    float _434 = (_429 * _269) - _351;
    float _435 = (_429 * _270) - _352;
    float _439 = abs(dot(vec3(_350, _351, _352), vec3(_268, _269, _270)));
    float _2938 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _441 = sqrt(_271);
    float _454 = exp2((_441 * 5.0) * log2(1.0 - ((isnan(1.0) ? _2938 : (isnan(_2938) ? 1.0 : min(_2938, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_441 * 3.0));
    float _486 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _490 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _494 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _796;
    float _798;
    float _799;
    float _800;
    float _801;
    float _802;
    float _803;
    float _804;
    float _805;
    float _806;
    float _807;
    float _808;
    float _809;
    float _810;
    float _811;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _521 = fma(_494, cbModelParam._m0[26u].z, fma(_490, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _486));
        float _525 = fma(_494, cbModelParam._m0[27u].z, fma(_490, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _486));
        float _529 = fma(_494, cbModelParam._m0[28u].z, fma(_490, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _486));
        float _554 = _486 + _268;
        float _555 = _490 + _269;
        float _556 = _494 + _270;
        float _566 = fma(_556, cbModelParam._m0[26u].z, fma(_555, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _554)) - _521;
        float _567 = fma(_556, cbModelParam._m0[27u].z, fma(_555, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _554)) - _525;
        float _568 = fma(_556, cbModelParam._m0[28u].z, fma(_555, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _554)) - _529;
        float _572 = inversesqrt(dot(vec3(_566, _567, _568), vec3(_566, _567, _568)));
        float _585 = ((_572 * _566) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_521 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _586 = ((_572 * _567) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_525 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _587 = ((_572 * _568) / cbModelParam._m0[34u].z) + ((((((_529 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _590 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_585, _586, _587), 0.0);
        vec4 _597 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_585, _586, _587), 0.0);
        vec4 _604 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_585, _586, _587), 0.0);
        vec4 _611 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_585, _586, _587), 0.0);
        float _624 = exp2((_590.w + (-0.5)) * 20.0) * 2.0;
        float _625 = _624 * (_590.x + (-0.5));
        float _626 = _624 * (_590.y + (-0.5));
        float _627 = _624 * (_590.z + (-0.5));
        float _634 = exp2((_597.w + (-0.5)) * 20.0) * 2.0;
        float _635 = _634 * (_597.x + (-0.5));
        float _636 = _634 * (_597.y + (-0.5));
        float _637 = _634 * (_597.z + (-0.5));
        float _644 = exp2((_604.w + (-0.5)) * 20.0) * 2.0;
        float _645 = _644 * (_604.x + (-0.5));
        float _646 = _644 * (_604.y + (-0.5));
        float _647 = _644 * (_604.z + (-0.5));
        float _654 = exp2((_611.w + (-0.5)) * 20.0) * 2.0;
        float _655 = _654 * (_611.x + (-0.5));
        float _656 = _654 * (_611.y + (-0.5));
        float _657 = _654 * (_611.z + (-0.5));
        float _658 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
        float _659 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
        float _660 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
        float _661 = _625 * 0.5;
        float _662 = _635 * 0.5;
        float _663 = _645 * 0.5;
        float _664 = dot(vec3(_661, _662, _663), vec3(_661, _662, _663));
        float _669 = (_664 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_664);
        float _678 = (dot(vec3(_268, _269, _270), vec3(_669 * _661, _669 * _662, _669 * _663)) + 1.0) * 0.5;
        float _2964 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
        float _688 = sqrt(((_662 * _662) + (_661 * _661)) + (_663 * _663)) / (_658 + 9.9999997473787516355514526367188e-06);
        float _2975 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
        float _689 = isnan(1.0) ? _2975 : (isnan(_2975) ? 1.0 : min(_2975, 1.0));
        float _690 = _689 * 2.0;
        float _694 = (1.0 - _689) / (_689 + 1.0);
        float _2986 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
        float _695 = isnan(1.0) ? _2986 : (isnan(_2986) ? 1.0 : min(_2986, 1.0));
        float _704 = ((((1.0 - _695) * (_690 + 2.0)) * exp2(log2(isnan(1.0) ? _2964 : (isnan(_2964) ? 1.0 : min(_2964, 1.0))) * (_690 + 1.0))) + _695) * _658;
        float _705 = _626 * 0.5;
        float _706 = _636 * 0.5;
        float _707 = _646 * 0.5;
        float _708 = dot(vec3(_705, _706, _707), vec3(_705, _706, _707));
        float _713 = (_708 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_708);
        float _721 = (dot(vec3(_268, _269, _270), vec3(_713 * _705, _713 * _706, _713 * _707)) + 1.0) * 0.5;
        float _2997 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
        float _730 = sqrt(((_706 * _706) + (_705 * _705)) + (_707 * _707)) / (_659 + 9.9999997473787516355514526367188e-06);
        float _3008 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
        float _731 = isnan(1.0) ? _3008 : (isnan(_3008) ? 1.0 : min(_3008, 1.0));
        float _732 = _731 * 2.0;
        float _736 = (1.0 - _731) / (_731 + 1.0);
        float _3019 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
        float _737 = isnan(1.0) ? _3019 : (isnan(_3019) ? 1.0 : min(_3019, 1.0));
        float _746 = ((((1.0 - _737) * (_732 + 2.0)) * exp2(log2(isnan(1.0) ? _2997 : (isnan(_2997) ? 1.0 : min(_2997, 1.0))) * (_732 + 1.0))) + _737) * _659;
        float _747 = _627 * 0.5;
        float _748 = _637 * 0.5;
        float _749 = _647 * 0.5;
        float _750 = dot(vec3(_747, _748, _749), vec3(_747, _748, _749));
        float _755 = (_750 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_750);
        float _763 = (dot(vec3(_268, _269, _270), vec3(_755 * _747, _755 * _748, _755 * _749)) + 1.0) * 0.5;
        float _3030 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
        float _772 = sqrt(((_748 * _748) + (_747 * _747)) + (_749 * _749)) / (_660 + 9.9999997473787516355514526367188e-06);
        float _3041 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
        float _773 = isnan(1.0) ? _3041 : (isnan(_3041) ? 1.0 : min(_3041, 1.0));
        float _774 = _773 * 2.0;
        float _778 = (1.0 - _773) / (_773 + 1.0);
        float _3052 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
        float _779 = isnan(1.0) ? _3052 : (isnan(_3052) ? 1.0 : min(_3052, 1.0));
        float _788 = ((((1.0 - _779) * (_774 + 2.0)) * exp2(log2(isnan(1.0) ? _3030 : (isnan(_3030) ? 1.0 : min(_3030, 1.0))) * (_774 + 1.0))) + _779) * _660;
        _796 = _627;
        _798 = _626;
        _799 = _625;
        _800 = _637;
        _801 = _636;
        _802 = _635;
        _803 = _647;
        _804 = _646;
        _805 = _645;
        _806 = _660;
        _807 = _659;
        _808 = _658;
        _809 = cbModelParam._m0[36u].z * (isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0)));
        _810 = cbModelParam._m0[36u].z * (isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0)));
        _811 = cbModelParam._m0[36u].z * (isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0)));
    }
    else
    {
        _796 = _797;
        _798 = _797;
        _799 = _797;
        _800 = _797;
        _801 = _797;
        _802 = _797;
        _803 = _797;
        _804 = _797;
        _805 = _797;
        _806 = _797;
        _807 = _797;
        _808 = _797;
        _809 = 0.0;
        _810 = 0.0;
        _811 = 0.0;
    }
    float _1106;
    float _1107;
    float _1108;
    float _1109;
    float _1110;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _837 = fma(_494, cbModelParam._m0[30u].z, fma(_490, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _486));
        float _841 = fma(_494, cbModelParam._m0[31u].z, fma(_490, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _486));
        float _845 = fma(_494, cbModelParam._m0[32u].z, fma(_490, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _486));
        float _868 = _486 + _268;
        float _869 = _490 + _269;
        float _870 = _494 + _270;
        float _880 = fma(_870, cbModelParam._m0[30u].z, fma(_869, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _868)) - _837;
        float _881 = fma(_870, cbModelParam._m0[31u].z, fma(_869, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _868)) - _841;
        float _882 = fma(_870, cbModelParam._m0[32u].z, fma(_869, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _868)) - _845;
        float _886 = inversesqrt(dot(vec3(_880, _881, _882), vec3(_880, _881, _882)));
        float _899 = ((_886 * _880) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_837 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _900 = ((_886 * _881) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_841 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _901 = ((_886 * _882) / cbModelParam._m0[35u].z) + ((((((_845 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _903 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_899, _900, _901), 0.0);
        vec4 _910 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_899, _900, _901), 0.0);
        vec4 _917 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_899, _900, _901), 0.0);
        vec4 _924 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_899, _900, _901), 0.0);
        float _936 = exp2((_903.w + (-0.5)) * 20.0) * 2.0;
        float _937 = _936 * (_903.x + (-0.5));
        float _938 = _936 * (_903.y + (-0.5));
        float _939 = _936 * (_903.z + (-0.5));
        float _946 = exp2((_910.w + (-0.5)) * 20.0) * 2.0;
        float _947 = _946 * (_910.x + (-0.5));
        float _948 = _946 * (_910.y + (-0.5));
        float _949 = _946 * (_910.z + (-0.5));
        float _956 = exp2((_917.w + (-0.5)) * 20.0) * 2.0;
        float _957 = _956 * (_917.x + (-0.5));
        float _958 = _956 * (_917.y + (-0.5));
        float _959 = _956 * (_917.z + (-0.5));
        float _966 = exp2((_924.w + (-0.5)) * 20.0) * 2.0;
        float _967 = _966 * (_924.x + (-0.5));
        float _968 = _966 * (_924.y + (-0.5));
        float _969 = _966 * (_924.z + (-0.5));
        float _970 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _971 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _972 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _973 = _937 * 0.5;
        float _974 = _947 * 0.5;
        float _975 = _957 * 0.5;
        float _976 = dot(vec3(_973, _974, _975), vec3(_973, _974, _975));
        float _981 = (_976 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_976);
        float _989 = (dot(vec3(_268, _269, _270), vec3(_981 * _973, _981 * _974, _981 * _975)) + 1.0) * 0.5;
        float _3093 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _998 = sqrt(((_974 * _974) + (_973 * _973)) + (_975 * _975)) / (_970 + 9.9999997473787516355514526367188e-06);
        float _3104 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
        float _999 = isnan(1.0) ? _3104 : (isnan(_3104) ? 1.0 : min(_3104, 1.0));
        float _1000 = _999 * 2.0;
        float _1004 = (1.0 - _999) / (_999 + 1.0);
        float _3115 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1005 = isnan(1.0) ? _3115 : (isnan(_3115) ? 1.0 : min(_3115, 1.0));
        float _1014 = ((((1.0 - _1005) * (_1000 + 2.0)) * exp2(log2(isnan(1.0) ? _3093 : (isnan(_3093) ? 1.0 : min(_3093, 1.0))) * (_1000 + 1.0))) + _1005) * _970;
        float _1015 = _938 * 0.5;
        float _1016 = _948 * 0.5;
        float _1017 = _958 * 0.5;
        float _1018 = dot(vec3(_1015, _1016, _1017), vec3(_1015, _1016, _1017));
        float _1023 = (_1018 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1018);
        float _1031 = (dot(vec3(_268, _269, _270), vec3(_1023 * _1015, _1023 * _1016, _1023 * _1017)) + 1.0) * 0.5;
        float _3126 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1040 = sqrt(((_1016 * _1016) + (_1015 * _1015)) + (_1017 * _1017)) / (_971 + 9.9999997473787516355514526367188e-06);
        float _3137 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1041 = isnan(1.0) ? _3137 : (isnan(_3137) ? 1.0 : min(_3137, 1.0));
        float _1042 = _1041 * 2.0;
        float _1046 = (1.0 - _1041) / (_1041 + 1.0);
        float _3148 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1047 = isnan(1.0) ? _3148 : (isnan(_3148) ? 1.0 : min(_3148, 1.0));
        float _1056 = ((((1.0 - _1047) * (_1042 + 2.0)) * exp2(log2(isnan(1.0) ? _3126 : (isnan(_3126) ? 1.0 : min(_3126, 1.0))) * (_1042 + 1.0))) + _1047) * _971;
        float _1057 = _939 * 0.5;
        float _1058 = _949 * 0.5;
        float _1059 = _959 * 0.5;
        float _1060 = dot(vec3(_1057, _1058, _1059), vec3(_1057, _1058, _1059));
        float _1065 = (_1060 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1060);
        float _1073 = (dot(vec3(_268, _269, _270), vec3(_1065 * _1057, _1065 * _1058, _1065 * _1059)) + 1.0) * 0.5;
        float _3159 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1082 = sqrt(((_1058 * _1058) + (_1057 * _1057)) + (_1059 * _1059)) / (_972 + 9.9999997473787516355514526367188e-06);
        float _3170 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1083 = isnan(1.0) ? _3170 : (isnan(_3170) ? 1.0 : min(_3170, 1.0));
        float _1084 = _1083 * 2.0;
        float _1088 = (1.0 - _1083) / (_1083 + 1.0);
        float _3181 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1089 = isnan(1.0) ? _3181 : (isnan(_3181) ? 1.0 : min(_3181, 1.0));
        float _1098 = ((((1.0 - _1089) * (_1084 + 2.0)) * exp2(log2(isnan(1.0) ? _3159 : (isnan(_3159) ? 1.0 : min(_3159, 1.0))) * (_1084 + 1.0))) + _1089) * _972;
        _1106 = _939;
        _1107 = _938;
        _1108 = _937;
        _1109 = _949;
        _1110 = _948;
        _1111 = _947;
        _1112 = _959;
        _1113 = _958;
        _1114 = _957;
        _1115 = _972;
        _1116 = _971;
        _1117 = _970;
        _1118 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0)));
        _1119 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0)));
        _1120 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0)));
    }
    else
    {
        _1106 = _797;
        _1107 = _797;
        _1108 = _797;
        _1109 = _797;
        _1110 = _797;
        _1111 = _797;
        _1112 = _797;
        _1113 = _797;
        _1114 = _797;
        _1115 = _797;
        _1116 = _797;
        _1117 = _797;
        _1118 = 0.0;
        _1119 = 0.0;
        _1120 = 0.0;
    }
    float _1130 = (cbModelParam._m0[1u].x * (_1118 - _809)) + _809;
    float _1131 = (cbModelParam._m0[1u].x * (_1119 - _810)) + _810;
    float _1132 = (cbModelParam._m0[1u].x * (_1120 - _811)) + _811;
    float _1153 = fma(_1132, cbSceneParam._m0[89u].z, fma(_1131, cbSceneParam._m0[89u].y, _1130 * cbSceneParam._m0[89u].x));
    float _1156 = fma(_1132, cbSceneParam._m0[90u].z, fma(_1131, cbSceneParam._m0[90u].y, _1130 * cbSceneParam._m0[90u].x));
    float _1159 = fma(_1132, cbSceneParam._m0[91u].z, fma(_1131, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1130));
    float _1174 = _433 * 0.5;
    float _1175 = _434 * 0.5;
    float _1176 = _435 * 0.5;
    float _1177 = dot(vec4(_1174, _1175, _1176, 1.0), vec4(_1108, _1111, _1114, _1117));
    float _1180 = dot(vec4(_1174, _1175, _1176, 1.0), vec4(_1107, _1110, _1113, _1116));
    float _1183 = dot(vec4(_1174, _1175, _1176, 1.0), vec4(_1106, _1109, _1112, _1115));
    float _1217;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1190 = dot(vec4(_1174, _1175, _1176, 1.0), vec4(_796, _800, _803, _806));
        float _1194 = dot(vec4(_1174, _1175, _1176, 1.0), vec4(_798, _801, _804, _807));
        float _1198 = dot(vec4(_1174, _1175, _1176, 1.0), vec4(_799, _802, _805, _808));
        float _1205 = dot(vec4(cbModelParam._m0[39u]), vec4(_1174, _1175, _1176, 1.0));
        _1217 = dot(vec3(isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0)), isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0)), isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1205) ? 0.0 : (isnan(0.0) ? _1205 : max(0.0, _1205))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1217 = 1.0;
    }
    float _1228;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1219 = dot(vec4(cbModelParam._m0[40u]), vec4(_1174, _1175, _1176, 1.0));
        _1228 = dot(vec3(isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0)), isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0)), isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1219) ? 0.0 : (isnan(0.0) ? _1219 : max(0.0, _1219))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1228 = 1.0;
    }
    float _1232 = (_1228 * cbModelParam._m0[1u].x) + (_1217 * (1.0 - cbModelParam._m0[1u].x));
    float _1242 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _271);
    float _1243 = isnan(_1242) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1242 : min(cbModelParam._m0[25u].z, _1242));
    float _1325;
    float _1327;
    float _1329;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1292 = fma(_494, cbModelParam._m0[13u].z, fma(_490, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _486)) + cbModelParam._m0[13u].w;
        float _1296 = fma(_494, cbModelParam._m0[14u].z, fma(_490, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _486)) + cbModelParam._m0[14u].w;
        float _1300 = fma(_494, cbModelParam._m0[15u].z, fma(_490, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _486)) + cbModelParam._m0[15u].w;
        float _1303 = fma(_435, cbModelParam._m0[13u].z, fma(_434, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _433));
        float _1306 = fma(_435, cbModelParam._m0[14u].z, fma(_434, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _433));
        float _1309 = fma(_435, cbModelParam._m0[15u].z, fma(_434, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _433));
        float _1337;
        if (_1303 > 0.0)
        {
            _1337 = abs((1.0 - _1292) / _1303);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1303 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1292 + 1.0) / _1303);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1337 = frontier_phi_14_12_ladder;
        }
        float _1688;
        if (_1306 > 0.0)
        {
            _1688 = abs((1.0 - _1296) / _1306);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1306 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1296 + 1.0) / _1306);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1688 = frontier_phi_23_19_ladder;
        }
        float _1986;
        if (_1309 > 0.0)
        {
            _1986 = abs((1.0 - _1300) / _1309);
        }
        else
        {
            float frontier_phi_37_30_ladder;
            if (_1309 < 0.0)
            {
                frontier_phi_37_30_ladder = abs((_1300 + 1.0) / _1309);
            }
            else
            {
                frontier_phi_37_30_ladder = 5000.0;
            }
            _1986 = frontier_phi_37_30_ladder;
        }
        float _1988 = isnan(_1688) ? _1337 : (isnan(_1337) ? _1688 : min(_1337, _1688));
        float _1989 = isnan(_1986) ? _1988 : (isnan(_1988) ? _1986 : min(_1988, _1986));
        float _1993 = (_1989 * _1303) + _1292;
        float _1994 = (_1989 * _1306) + _1296;
        float _1995 = (_1989 * _1309) + _1300;
        float _1996 = _1989 * 9.9999997473787516355514526367188e-05;
        float _1997 = (-1.0) - _1996;
        float _1999 = _1996 + 1.0;
        float frontier_phi_13_37_ladder;
        float frontier_phi_13_37_ladder_1;
        float frontier_phi_13_37_ladder_2;
        if ((_1995 > _1999) || ((_1995 < _1997) || ((_1994 > _1999) || ((_1994 < _1997) || ((_1993 < _1997) || (_1993 > _1999))))))
        {
            frontier_phi_13_37_ladder = 0.0;
            frontier_phi_13_37_ladder_1 = 0.0;
            frontier_phi_13_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2121 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1995, cbModelParam._m0[9u].z, fma(_1994, cbModelParam._m0[9u].y, _1993 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1995, cbModelParam._m0[10u].z, fma(_1994, cbModelParam._m0[10u].y, _1993 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1995, cbModelParam._m0[11u].z, fma(_1994, cbModelParam._m0[11u].y, _1993 * cbModelParam._m0[11u].x))), _1243);
            frontier_phi_13_37_ladder = _2121.z * cbModelParam._m0[1u].y;
            frontier_phi_13_37_ladder_1 = _2121.y * cbModelParam._m0[1u].y;
            frontier_phi_13_37_ladder_2 = _2121.x * cbModelParam._m0[1u].y;
        }
        _1325 = frontier_phi_13_37_ladder_2;
        _1327 = frontier_phi_13_37_ladder_1;
        _1329 = frontier_phi_13_37_ladder;
    }
    else
    {
        vec4 _1313 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_433, _434, _435), _1243);
        _1325 = _1313.x * cbModelParam._m0[1u].y;
        _1327 = _1313.y * cbModelParam._m0[1u].y;
        _1329 = _1313.z * cbModelParam._m0[1u].y;
    }
    float _1333 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _271);
    float _1334 = isnan(_1333) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1333 : min(cbModelParam._m0[25u].w, _1333));
    float _1427;
    float _1429;
    float _1431;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1391 = fma(_494, cbModelParam._m0[21u].z, fma(_490, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _486)) + cbModelParam._m0[21u].w;
        float _1395 = fma(_494, cbModelParam._m0[22u].z, fma(_490, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _486)) + cbModelParam._m0[22u].w;
        float _1399 = fma(_494, cbModelParam._m0[23u].z, fma(_490, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _486)) + cbModelParam._m0[23u].w;
        float _1402 = fma(_435, cbModelParam._m0[21u].z, fma(_434, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _433));
        float _1405 = fma(_435, cbModelParam._m0[22u].z, fma(_434, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _433));
        float _1408 = fma(_435, cbModelParam._m0[23u].z, fma(_434, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _433));
        float _1693;
        if (_1402 > 0.0)
        {
            _1693 = abs((1.0 - _1391) / _1402);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1402 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1391 + 1.0) / _1402);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1693 = frontier_phi_25_21_ladder;
        }
        float _2012;
        if (_1405 > 0.0)
        {
            _2012 = abs((1.0 - _1395) / _1405);
        }
        else
        {
            float frontier_phi_39_32_ladder;
            if (_1405 < 0.0)
            {
                frontier_phi_39_32_ladder = abs((_1395 + 1.0) / _1405);
            }
            else
            {
                frontier_phi_39_32_ladder = 5000.0;
            }
            _2012 = frontier_phi_39_32_ladder;
        }
        float _2181;
        if (_1408 > 0.0)
        {
            _2181 = abs((1.0 - _1399) / _1408);
        }
        else
        {
            float frontier_phi_53_48_ladder;
            if (_1408 < 0.0)
            {
                frontier_phi_53_48_ladder = abs((_1399 + 1.0) / _1408);
            }
            else
            {
                frontier_phi_53_48_ladder = 5000.0;
            }
            _2181 = frontier_phi_53_48_ladder;
        }
        float _2183 = isnan(_2012) ? _1693 : (isnan(_1693) ? _2012 : min(_1693, _2012));
        float _2184 = isnan(_2181) ? _2183 : (isnan(_2183) ? _2181 : min(_2183, _2181));
        float _2188 = (_2184 * _1402) + _1391;
        float _2189 = (_2184 * _1405) + _1395;
        float _2190 = (_2184 * _1408) + _1399;
        float _2191 = _2184 * 9.9999997473787516355514526367188e-05;
        float _2192 = (-1.0) - _2191;
        float _2194 = _2191 + 1.0;
        float frontier_phi_22_53_ladder;
        float frontier_phi_22_53_ladder_1;
        float frontier_phi_22_53_ladder_2;
        if ((_2190 > _2194) || ((_2190 < _2192) || ((_2189 > _2194) || ((_2189 < _2192) || ((_2188 < _2192) || (_2188 > _2194))))))
        {
            frontier_phi_22_53_ladder = 0.0;
            frontier_phi_22_53_ladder_1 = 0.0;
            frontier_phi_22_53_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2423 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2190, cbModelParam._m0[17u].z, fma(_2189, cbModelParam._m0[17u].y, _2188 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2190, cbModelParam._m0[18u].z, fma(_2189, cbModelParam._m0[18u].y, _2188 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2190, cbModelParam._m0[19u].z, fma(_2189, cbModelParam._m0[19u].y, _2188 * cbModelParam._m0[19u].x))), _1334);
            frontier_phi_22_53_ladder = _2423.y * cbModelParam._m0[1u].z;
            frontier_phi_22_53_ladder_1 = _2423.z * cbModelParam._m0[1u].z;
            frontier_phi_22_53_ladder_2 = _2423.x * cbModelParam._m0[1u].z;
        }
        _1427 = frontier_phi_22_53_ladder_2;
        _1429 = frontier_phi_22_53_ladder;
        _1431 = frontier_phi_22_53_ladder_1;
    }
    else
    {
        vec4 _1411 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_433, _434, _435), _1334);
        _1427 = _1411.x * cbModelParam._m0[1u].z;
        _1429 = _1411.y * cbModelParam._m0[1u].z;
        _1431 = _1411.z * cbModelParam._m0[1u].z;
    }
    float _1443 = ((((1.0 - _454) * ((_441 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_454 * _441)) * _425;
    float _1444 = _1443 * ((cbModelParam._m0[1u].w * (_1427 - _1325)) + _1325);
    float _1445 = _1443 * ((cbModelParam._m0[1u].w * (_1429 - _1327)) + _1327);
    float _1446 = _1443 * ((cbModelParam._m0[1u].w * (_1431 - _1329)) + _1329);
    float _1449 = fma(_1446, cbSceneParam._m0[89u].z, fma(_1445, cbSceneParam._m0[89u].y, _1444 * cbSceneParam._m0[89u].x));
    float _1452 = fma(_1446, cbSceneParam._m0[90u].z, fma(_1445, cbSceneParam._m0[90u].y, _1444 * cbSceneParam._m0[90u].x));
    float _1455 = fma(_1446, cbSceneParam._m0[91u].z, fma(_1445, cbSceneParam._m0[91u].y, _1444 * cbSceneParam._m0[91u].x));
    uvec4 _1465 = floatBitsToUint(cbInstanceData._m0[_399 + 5u]);
    uint _1467 = _1465.x * 14u;
    uint _1468 = _1467 + 13u;
    float _1473 = _425 + (-1.0);
    float _1476 = (cbLight._m0[_1468].x * _1473) + 1.0;
    float _1477 = (cbLight._m0[_1468].y * _1473) + 1.0;
    uint _1478 = _1467 + 5u;
    float _1484 = isnan(1.0) ? _1477 : (isnan(_1477) ? 1.0 : min(_1477, 1.0));
    uint _1488 = _1467 + 4u;
    float _1495 = isnan(1.0) ? _1476 : (isnan(_1476) ? 1.0 : min(_1476, 1.0));
    uint _1499 = _1467 | 1u;
    float _1510 = dot(vec3(cbLight._m0[_1467].xyz), vec3(_268, _269, _270));
    float _1513 = dot(vec3(cbLight._m0[_1499].xyz), vec3(_268, _269, _270));
    float _3317 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
    float _3328 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
    float _1518 = (isnan(1.0) ? _3317 : (isnan(_3317) ? 1.0 : min(_3317, 1.0))) * 0.3183098733425140380859375;
    float _1520 = (isnan(1.0) ? _3328 : (isnan(_3328) ? 1.0 : min(_3328, 1.0))) * 0.3183098733425140380859375;
    float _1527 = ((cbLight._m0[_1478].x * _1484) * _1520) + ((cbLight._m0[_1488].x * _1495) * _1518);
    float _1528 = ((_1484 * cbLight._m0[_1478].y) * _1520) + ((_1495 * cbLight._m0[_1488].y) * _1518);
    float _1529 = ((_1484 * cbLight._m0[_1478].z) * _1520) + ((_1495 * cbLight._m0[_1488].z) * _1518);
    uint _1531 = _1467 + 8u;
    float _1544 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1467].w)) * _271) * 0.949999988079071044921875);
    float _1545 = _1544 * _1544;
    float _1546 = cbLight._m0[_1467].x + _350;
    float _1547 = cbLight._m0[_1467].y + _351;
    float _1548 = cbLight._m0[_1467].z + _352;
    float _1552 = inversesqrt(dot(vec3(_1546, _1547, _1548), vec3(_1546, _1547, _1548)));
    float _1553 = _1552 * _1546;
    float _1554 = _1552 * _1547;
    float _1555 = _1552 * _1548;
    float _1556 = dot(vec3(_268, _269, _270), vec3(cbLight._m0[_1467].xyz));
    float _3339 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
    float _1559 = isnan(1.0) ? _3339 : (isnan(_3339) ? 1.0 : min(_3339, 1.0));
    float _3350 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _1560 = isnan(1.0) ? _3350 : (isnan(_3350) ? 1.0 : min(_3350, 1.0));
    float _1561 = dot(vec3(_268, _269, _270), vec3(_1553, _1554, _1555));
    float _3361 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
    float _1564 = isnan(1.0) ? _3361 : (isnan(_3361) ? 1.0 : min(_3361, 1.0));
    float _1565 = dot(vec3(cbLight._m0[_1467].xyz), vec3(_1553, _1554, _1555));
    float _3372 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
    float _1569 = _1545 * _1545;
    float _1573 = ((_1564 * _1564) * (_1569 + (-1.0))) + 1.0;
    float _1584 = (exp2(log2(1.0 - (isnan(1.0) ? _3372 : (isnan(_3372) ? 1.0 : min(_3372, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1585 = 1.0 - _1545;
    float _1596 = (0.5 / (((_1560 * ((_1559 * _1585) + _1545)) + 9.9999999392252902907785028219223e-09) + (((_1560 * _1585) + _1545) * _1559))) * _1559;
    float _3383 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
    float _1598 = (isnan(1.0) ? _3383 : (isnan(_3383) ? 1.0 : min(_3383, 1.0))) * (_1569 / ((_1573 * _1573) * 3.141590118408203125));
    uint _1609 = _1467 + 9u;
    float _1620 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1499].w)) * _271) * 0.949999988079071044921875);
    float _1621 = _1620 * _1620;
    float _1622 = cbLight._m0[_1499].x + _350;
    float _1623 = cbLight._m0[_1499].y + _351;
    float _1624 = cbLight._m0[_1499].z + _352;
    float _1628 = inversesqrt(dot(vec3(_1622, _1623, _1624), vec3(_1622, _1623, _1624)));
    float _1629 = _1628 * _1622;
    float _1630 = _1628 * _1623;
    float _1631 = _1628 * _1624;
    float _1632 = dot(vec3(_268, _269, _270), vec3(cbLight._m0[_1499].xyz));
    float _3394 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
    float _1635 = isnan(1.0) ? _3394 : (isnan(_3394) ? 1.0 : min(_3394, 1.0));
    float _1636 = dot(vec3(_268, _269, _270), vec3(_1629, _1630, _1631));
    float _3405 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
    float _1639 = isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0));
    float _1640 = dot(vec3(cbLight._m0[_1499].xyz), vec3(_1629, _1630, _1631));
    float _3416 = isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0));
    float _1644 = _1621 * _1621;
    float _1648 = ((_1639 * _1639) * (_1644 + (-1.0))) + 1.0;
    float _1657 = (exp2(log2(1.0 - (isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1658 = 1.0 - _1621;
    float _1668 = (0.5 / (((_1560 * ((_1635 * _1658) + _1621)) + 9.9999999392252902907785028219223e-09) + (((_1560 * _1658) + _1621) * _1635))) * _1635;
    float _3427 = isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0));
    float _1670 = (isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0))) * (_1644 / ((_1648 * _1648) * 3.141590118408203125));
    float _1680 = (((_1657 * cbLight._m0[_1609].x) * _1670) * _1484) + (((_1584 * cbLight._m0[_1531].x) * _1598) * _1495);
    float _1681 = (((_1657 * cbLight._m0[_1609].y) * _1670) * _1484) + (((_1584 * cbLight._m0[_1531].y) * _1598) * _1495);
    float _1682 = (((_1657 * cbLight._m0[_1609].z) * _1670) * _1484) + (((_1584 * cbLight._m0[_1531].z) * _1598) * _1495);
    float _1797;
    float _1799;
    float _1801;
    float _1803;
    float _1805;
    float _1807;
    if (_1465.y == 0u)
    {
        float _1737 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1738 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1737;
        float _1739 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1737;
        float _1740 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1737;
        uvec4 _1752 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1753 = _1752.x;
        uint _1764 = uint((float(_1752.y) * floor(float(uint(cbSceneParam._m0[85u].y * _359) / _1753))) + floor(float(uint(cbSceneParam._m0[85u].x * _358) / _1753)));
        float _1774 = (log2(_1740 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1775 = isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0));
        uint _1778 = uint(isnan(14.0) ? _1775 : (isnan(_1775) ? 14.0 : min(_1775, 14.0)));
        uvec4 _1783 = texelFetch(g_lightClusterGridBuffer, int(((_1778 << 2u) + (_1764 << 6u)) >> 2u));
        uint _1784 = _1783.x;
        uint _1785 = _1752.z;
        float _1872;
        float _1874;
        float _1876;
        float _1878;
        float _1880;
        float _1882;
        if (((((1u << ((_1785 >> 4u) & 15u)) + 4294967295u) & _1784) == 0u) || ((_1785 & 240u) == 0u))
        {
            _1872 = 0.0;
            _1874 = 0.0;
            _1876 = 0.0;
            _1878 = 0.0;
            _1880 = 0.0;
            _1882 = 0.0;
        }
        else
        {
            float _1873;
            float _1875;
            float _1877;
            float _1879;
            float _1881;
            float _1883;
            float _2049 = 0.0;
            float _2050 = 0.0;
            float _2051 = 0.0;
            float _2052 = 0.0;
            float _2053 = 0.0;
            float _2054 = 0.0;
            uint _2055 = 0u;
            uint _2064;
            bool _2065;
            for (;;)
            {
                _2064 = texelFetch(g_lightClassification, int((((_1778 << 5u) + (_1764 << 9u)) + (_2055 << 2u)) >> 2u)).x;
                _2065 = _2064 == 0u;
                float frontier_phi_50_pred;
                float frontier_phi_50_pred_1;
                float frontier_phi_50_pred_2;
                float frontier_phi_50_pred_3;
                float frontier_phi_50_pred_4;
                float frontier_phi_50_pred_5;
                if (_2065)
                {
                    frontier_phi_50_pred = _2052;
                    frontier_phi_50_pred_1 = _2054;
                    frontier_phi_50_pred_2 = _2053;
                    frontier_phi_50_pred_3 = _2051;
                    frontier_phi_50_pred_4 = _2050;
                    frontier_phi_50_pred_5 = _2049;
                }
                else
                {
                    float _2224;
                    float _2225;
                    float _2226;
                    float _2227;
                    float _2228;
                    float _2229;
                    uint _2230;
                    _2224 = _2049;
                    _2225 = _2050;
                    _2226 = _2051;
                    _2227 = _2052;
                    _2228 = _2053;
                    _2229 = _2054;
                    _2230 = _2064;
                    float _2130;
                    float _2131;
                    float _2132;
                    float _2133;
                    float _2134;
                    float _2135;
                    for (;;)
                    {
                        uint _2234 = uint(findLSB(_2230)) + (_2055 << 5u);
                        uint _2231 = (_2230 + 4294967295u) & _2230;
                        uint _2236 = _2234 * 48u;
                        vec4 _2250 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2236)).x, texelFetch(g_PointLightRenderingBuffer, int(_2236 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2236 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2236 + 3u)).x));
                        uint _2256 = (_2234 * 48u) + 4u;
                        vec4 _2269 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2256)).x, texelFetch(g_PointLightRenderingBuffer, int(_2256 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2256 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2256 + 3u)).x));
                        uint _2275 = (_2234 * 48u) + 8u;
                        vec3 _2286 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2275)).x, texelFetch(g_PointLightRenderingBuffer, int(_2275 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2275 + 2u)).x));
                        float _2290 = _2250.x - _1738;
                        float _2291 = _2250.y - _1739;
                        float _2292 = _2250.z - _1740;
                        float _2293 = dot(vec3(_2290, _2291, _2292), vec3(_2290, _2291, _2292));
                        float _2296 = inversesqrt(_2293);
                        float _2297 = _2296 * _2290;
                        float _2298 = _2296 * _2291;
                        float _2299 = _2296 * _2292;
                        float _2300 = dot(vec3(_380, _383, _386), vec3(_2297, _2298, _2299));
                        float _2305 = 1.0 - (_2293 * _2250.w);
                        float _3448 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
                        float _2306 = isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0));
                        float _2307 = sqrt(_2293) * _2269.w;
                        float _2310 = 1.39999997615814208984375 / (_2307 + 1.39999997615814208984375);
                        float _2311 = _2310 * _2310;
                        float _2314 = ((1.0 - _2311) * _2300) + _2311;
                        float _2317 = _2307 * _2307;
                        float _2321 = ((isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0))) * _2306) / ((_2317 * 0.699999988079071044921875) + 1.0);
                        float _2325 = (-0.0) - _1738;
                        float _2326 = (-0.0) - _1739;
                        float _2327 = (-0.0) - _1740;
                        float _2331 = inversesqrt(dot(vec3(_2325, _2326, _2327), vec3(_2325, _2326, _2327)));
                        float _2332 = _2331 * _2325;
                        float _2333 = _2331 * _2326;
                        float _2334 = _2331 * _2327;
                        float _2342 = exp2(log2(1.0 / ((_2317 * 3.5) + 5.0)) * 0.25);
                        float _2343 = 1.0 - _441;
                        float _2350 = sqrt(1.0 - ((1.0 - (_2343 * _2343)) * (1.0 - (_2342 * _2342))));
                        float _2351 = _2350 * _2350;
                        float _2352 = _2351 * _2351;
                        float _2353 = _2332 + _2297;
                        float _2354 = _2333 + _2298;
                        float _2355 = _2334 + _2299;
                        float _2359 = inversesqrt(dot(vec3(_2353, _2354, _2355), vec3(_2353, _2354, _2355)));
                        float _2363 = dot(vec3(_380, _383, _386), vec3(_2332, _2333, _2334));
                        float _3464 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
                        float _2366 = isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0));
                        float _2367 = dot(vec3(_380, _383, _386), vec3(_2359 * _2353, _2359 * _2354, _2359 * _2355));
                        float _3475 = isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : max(_2367, 0.0));
                        float _2370 = isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0));
                        float _2374 = ((_2370 * _2370) * (_2352 + (-1.0))) + 1.0;
                        float _2375 = _2310 * _2351;
                        float _2376 = _2375 * _2375;
                        float _2379 = ((1.0 - _2376) * _2300) + _2376;
                        float _3486 = isnan(0.0) ? _2379 : (isnan(_2379) ? 0.0 : max(_2379, 0.0));
                        float _2380 = isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0));
                        float _2381 = 1.0 - _2351;
                        float _2391 = (0.5 / (((_2380 * ((_2366 * _2381) + _2351)) + 9.9999999392252902907785028219223e-09) + (((_2380 * _2381) + _2351) * _2366))) * _2380;
                        float _3497 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
                        float _2402 = (((_2352 * 3.1415927410125732421875) * (isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0)))) / ((_2374 * _2374) * ((_2317 * 2.1991131305694580078125) + 3.141590118408203125))) * _2306;
                        _2133 = (_2321 * _2269.x) + _2227;
                        _2134 = (_2321 * _2269.y) + _2228;
                        _2135 = (_2321 * _2269.z) + _2229;
                        _2130 = (_2402 * _2286.x) + _2224;
                        _2131 = (_2402 * _2286.y) + _2225;
                        _2132 = (_2402 * _2286.z) + _2226;
                        if (_2231 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2224 = _2130;
                            _2225 = _2131;
                            _2226 = _2132;
                            _2227 = _2133;
                            _2228 = _2134;
                            _2229 = _2135;
                            _2230 = _2231;
                        }
                    }
                    frontier_phi_50_pred = _2133;
                    frontier_phi_50_pred_1 = _2135;
                    frontier_phi_50_pred_2 = _2134;
                    frontier_phi_50_pred_3 = _2132;
                    frontier_phi_50_pred_4 = _2131;
                    frontier_phi_50_pred_5 = _2130;
                }
                _1879 = frontier_phi_50_pred;
                _1883 = frontier_phi_50_pred_1;
                _1881 = frontier_phi_50_pred_2;
                _1877 = frontier_phi_50_pred_3;
                _1875 = frontier_phi_50_pred_4;
                _1873 = frontier_phi_50_pred_5;
                uint _2056 = _2055 + 1u;
                if (_2056 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2049 = _1873;
                    _2050 = _1875;
                    _2051 = _1877;
                    _2052 = _1879;
                    _2053 = _1881;
                    _2054 = _1883;
                    _2055 = _2056;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1872 = _1873;
            _1874 = _1875;
            _1876 = _1877;
            _1878 = _1879;
            _1880 = _1881;
            _1882 = _1883;
        }
        uvec4 _1886 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1887 = _1886.z;
        uint _1889 = (_1887 >> 8u) & 15u;
        float _2017;
        float _2019;
        float _2021;
        float _2023;
        float _2025;
        float _2027;
        if (((4294967295u << _1889) & _1784) == 0u)
        {
            _2017 = _1872;
            _2019 = _1874;
            _2021 = _1876;
            _2023 = _1878;
            _2025 = _1880;
            _2027 = _1882;
        }
        else
        {
            float _2042 = inversesqrt(dot(vec3(_1738, _1739, _1740), vec3(_1738, _1739, _1740)));
            float _2043 = _2042 * _1738;
            float _2044 = _2042 * _1739;
            float _2045 = _2042 * _1740;
            float frontier_phi_41_42_ladder;
            float frontier_phi_41_42_ladder_1;
            float frontier_phi_41_42_ladder_2;
            float frontier_phi_41_42_ladder_3;
            float frontier_phi_41_42_ladder_4;
            float frontier_phi_41_42_ladder_5;
            if (_1889 < ((_1887 >> 12u) & 15u))
            {
                float _2018;
                float _2020;
                float _2022;
                float _2024;
                float _2026;
                float _2028;
                float _2207 = _1872;
                float _2208 = _1874;
                float _2209 = _1876;
                float _2210 = _1878;
                float _2211 = _1880;
                float _2212 = _1882;
                uint _2213 = _1889;
                uint _2222;
                bool _2223;
                for (;;)
                {
                    _2222 = texelFetch(g_lightClassification, int((((_1778 << 5u) + (_1764 << 9u)) + (_2213 << 2u)) >> 2u)).x;
                    _2223 = _2222 == 0u;
                    float frontier_phi_59_pred;
                    float frontier_phi_59_pred_1;
                    float frontier_phi_59_pred_2;
                    float frontier_phi_59_pred_3;
                    float frontier_phi_59_pred_4;
                    float frontier_phi_59_pred_5;
                    if (_2223)
                    {
                        frontier_phi_59_pred = _2212;
                        frontier_phi_59_pred_1 = _2211;
                        frontier_phi_59_pred_2 = _2210;
                        frontier_phi_59_pred_3 = _2209;
                        frontier_phi_59_pred_4 = _2208;
                        frontier_phi_59_pred_5 = _2207;
                    }
                    else
                    {
                        float _2428;
                        float _2429;
                        float _2430;
                        float _2431;
                        float _2432;
                        float _2433;
                        float _2724;
                        float _2725;
                        float _2726;
                        float _2727;
                        float _2728;
                        float _2729;
                        float _2441 = _2207;
                        float _2442 = _2208;
                        float _2443 = _2209;
                        float _2444 = _2210;
                        float _2445 = _2211;
                        float _2446 = _2212;
                        uint _2447 = _2222;
                        uint _2448;
                        vec4 _2473;
                        float _2474;
                        vec4 _2489;
                        vec3 _2501;
                        vec4 _2517;
                        vec4 _2533;
                        float _2580;
                        bool _2581;
                        for (;;)
                        {
                            uint _2458 = ((_2213 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2447));
                            _2448 = (_2447 + 4294967295u) & _2447;
                            uint _2460 = _2458 * 40u;
                            _2473 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2460)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2460 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2460 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2460 + 3u)).x));
                            _2474 = _2473.w;
                            uint _2476 = (_2458 * 40u) + 4u;
                            _2489 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2476)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2476 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2476 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2476 + 3u)).x));
                            uint _2491 = (_2458 * 40u) + 8u;
                            _2501 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2491)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2491 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2491 + 2u)).x));
                            uint _2504 = (_2458 * 40u) + 16u;
                            _2517 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2504)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2504 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2504 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2504 + 3u)).x));
                            uint _2520 = (_2458 * 40u) + 20u;
                            _2533 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2520)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2520 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2520 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2520 + 3u)).x));
                            uint _2536 = (_2458 * 40u) + 24u;
                            vec4 _2549 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2536)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2536 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2536 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2536 + 3u)).x));
                            uint _2555 = (_2458 * 40u) + 28u;
                            vec4 _2568 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2555)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2555 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2555 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2555 + 3u)).x));
                            _2580 = fma(_1740, _2568.z, fma(_1739, _2568.y, _2568.x * _1738)) + _2568.w;
                            _2581 = !((fma(_1740, _2549.z, fma(_1739, _2549.y, _2549.x * _1738)) + _2549.w) <= 0.0);
                            float frontier_phi_65_pred;
                            float frontier_phi_65_pred_1;
                            float frontier_phi_65_pred_2;
                            float frontier_phi_65_pred_3;
                            float frontier_phi_65_pred_4;
                            float frontier_phi_65_pred_5;
                            if (_2581)
                            {
                                float _2608 = _2473.x - _1738;
                                float _2609 = _2473.y - _1739;
                                float _2610 = _2473.z - _1740;
                                float _2611 = dot(vec3(_2608, _2609, _2610), vec3(_2608, _2609, _2610));
                                float _2614 = inversesqrt(_2611);
                                float _2615 = _2614 * _2608;
                                float _2616 = _2614 * _2609;
                                float _2617 = _2614 * _2610;
                                float _2621 = 1.0 - (_2611 / (_2474 * _2474));
                                float _3508 = isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0));
                                float _2622 = isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0));
                                float _2626 = sqrt(_2611) * _2489.w;
                                float _2628 = 1.39999997615814208984375 / (_2626 + 1.39999997615814208984375);
                                float _2629 = _2628 * _2628;
                                float _2632 = ((1.0 - _2629) * dot(vec3(_2615, _2616, _2617), vec3(_380, _383, _386))) + _2629;
                                float _2635 = _2626 * _2626;
                                float _2639 = (fma(_1740, _2517.z, fma(_1739, _2517.y, _2517.x * _1738)) + _2517.w) / _2580;
                                float _2640 = (fma(_1740, _2533.z, fma(_1739, _2533.y, _2533.x * _1738)) + _2533.w) / _2580;
                                float _2644 = 1.0 - dot(vec2(_2639, _2640), vec2(_2639, _2640));
                                float _3524 = isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : max(_2644, 0.0));
                                float _2645 = isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0));
                                float _2646 = _2645 * (((isnan(0.0) ? _2632 : (isnan(_2632) ? 0.0 : max(_2632, 0.0))) * _2622) / ((_2635 * 0.699999988079071044921875) + 1.0));
                                float _2658 = exp2(log2(1.0 / ((_2635 * 3.5) + 5.0)) * 0.25);
                                float _2659 = 1.0 - _441;
                                float _2666 = sqrt(1.0 - ((1.0 - (_2659 * _2659)) * (1.0 - (_2658 * _2658))));
                                float _2667 = _2666 * _2666;
                                float _2668 = _2667 * _2667;
                                float _2669 = _2615 - _2043;
                                float _2670 = _2616 - _2044;
                                float _2671 = _2617 - _2045;
                                float _2675 = inversesqrt(dot(vec3(_2669, _2670, _2671), vec3(_2669, _2670, _2671)));
                                float _2679 = dot(vec3(_380, _383, _386), vec3((-0.0) - _2043, (-0.0) - _2044, (-0.0) - _2045));
                                float _3535 = isnan(0.0) ? _2679 : (isnan(_2679) ? 0.0 : max(_2679, 0.0));
                                float _2682 = isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0));
                                float _2683 = dot(vec3(_380, _383, _386), vec3(_2675 * _2669, _2675 * _2670, _2675 * _2671));
                                float _3546 = isnan(0.0) ? _2683 : (isnan(_2683) ? 0.0 : max(_2683, 0.0));
                                float _2686 = isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0));
                                float _2690 = ((_2686 * _2686) * (_2668 + (-1.0))) + 1.0;
                                float _2691 = _2628 * _2667;
                                float _2692 = _2691 * _2691;
                                float _2698 = ((1.0 - _2692) * dot(vec3(_380, _383, _386), vec3(_2615, _2616, _2617))) + _2692;
                                float _3557 = isnan(0.0) ? _2698 : (isnan(_2698) ? 0.0 : max(_2698, 0.0));
                                float _2699 = isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0));
                                float _2700 = 1.0 - _2667;
                                float _2710 = (0.5 / (((_2699 * ((_2682 * _2700) + _2667)) + 9.9999999392252902907785028219223e-09) + (((_2699 * _2700) + _2667) * _2682))) * _2699;
                                float _3568 = isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : max(_2710, 0.0));
                                float _2720 = (_2645 * _2622) * (((_2668 * 3.1415927410125732421875) * (isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0)))) / ((_2690 * _2690) * ((_2635 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_65_pred = _2646 * _2489.z;
                                frontier_phi_65_pred_1 = _2646 * _2489.y;
                                frontier_phi_65_pred_2 = _2646 * _2489.x;
                                frontier_phi_65_pred_3 = _2720 * _2501.z;
                                frontier_phi_65_pred_4 = _2720 * _2501.y;
                                frontier_phi_65_pred_5 = _2720 * _2501.x;
                            }
                            else
                            {
                                frontier_phi_65_pred = 0.0;
                                frontier_phi_65_pred_1 = 0.0;
                                frontier_phi_65_pred_2 = 0.0;
                                frontier_phi_65_pred_3 = 0.0;
                                frontier_phi_65_pred_4 = 0.0;
                                frontier_phi_65_pred_5 = 0.0;
                            }
                            _2729 = frontier_phi_65_pred;
                            _2728 = frontier_phi_65_pred_1;
                            _2727 = frontier_phi_65_pred_2;
                            _2726 = frontier_phi_65_pred_3;
                            _2725 = frontier_phi_65_pred_4;
                            _2724 = frontier_phi_65_pred_5;
                            _2431 = _2727 + _2444;
                            _2432 = _2728 + _2445;
                            _2433 = _2729 + _2446;
                            _2428 = _2724 + _2441;
                            _2429 = _2725 + _2442;
                            _2430 = _2726 + _2443;
                            if (_2448 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2441 = _2428;
                                _2442 = _2429;
                                _2443 = _2430;
                                _2444 = _2431;
                                _2445 = _2432;
                                _2446 = _2433;
                                _2447 = _2448;
                                continue;
                            }
                        }
                        frontier_phi_59_pred = _2433;
                        frontier_phi_59_pred_1 = _2432;
                        frontier_phi_59_pred_2 = _2431;
                        frontier_phi_59_pred_3 = _2430;
                        frontier_phi_59_pred_4 = _2429;
                        frontier_phi_59_pred_5 = _2428;
                    }
                    _2028 = frontier_phi_59_pred;
                    _2026 = frontier_phi_59_pred_1;
                    _2024 = frontier_phi_59_pred_2;
                    _2022 = frontier_phi_59_pred_3;
                    _2020 = frontier_phi_59_pred_4;
                    _2018 = frontier_phi_59_pred_5;
                    uint _2214 = _2213 + 1u;
                    if (_2214 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2207 = _2018;
                        _2208 = _2020;
                        _2209 = _2022;
                        _2210 = _2024;
                        _2211 = _2026;
                        _2212 = _2028;
                        _2213 = _2214;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_41_42_ladder = _2024;
                frontier_phi_41_42_ladder_1 = _2028;
                frontier_phi_41_42_ladder_2 = _2026;
                frontier_phi_41_42_ladder_3 = _2022;
                frontier_phi_41_42_ladder_4 = _2020;
                frontier_phi_41_42_ladder_5 = _2018;
            }
            else
            {
                frontier_phi_41_42_ladder = _1878;
                frontier_phi_41_42_ladder_1 = _1882;
                frontier_phi_41_42_ladder_2 = _1880;
                frontier_phi_41_42_ladder_3 = _1876;
                frontier_phi_41_42_ladder_4 = _1874;
                frontier_phi_41_42_ladder_5 = _1872;
            }
            _2017 = frontier_phi_41_42_ladder_5;
            _2019 = frontier_phi_41_42_ladder_4;
            _2021 = frontier_phi_41_42_ladder_3;
            _2023 = frontier_phi_41_42_ladder;
            _2025 = frontier_phi_41_42_ladder_2;
            _2027 = frontier_phi_41_42_ladder_1;
        }
        float _2032 = isnan(1.0) ? _425 : (isnan(_425) ? 1.0 : min(_425, 1.0));
        _1797 = (_2032 * _2023) + _1527;
        _1799 = (_2032 * _2025) + _1528;
        _1801 = (_2032 * _2027) + _1529;
        _1803 = ((_2017 * 0.039999999105930328369140625) * _2032) + _1680;
        _1805 = ((_2019 * 0.039999999105930328369140625) * _2032) + _1681;
        _1807 = ((_2021 * 0.039999999105930328369140625) * _2032) + _1682;
    }
    else
    {
        _1797 = _1527;
        _1799 = _1528;
        _1801 = _1529;
        _1803 = _1680;
        _1805 = _1681;
        _1807 = _1682;
    }
    float _3584 = isnan(0.0) ? _411 : (isnan(_411) ? 0.0 : max(_411, 0.0));
    float _3595 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
    float _3606 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    uint _1827 = _399 + 6u;
    float _1835 = _358 / cbSceneParam._m0[86u].x;
    float _1836 = _359 / cbSceneParam._m0[86u].y;
    vec4 _1850 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1835, _1836, (log2((isnan(cbSceneParam._m0[77u].w) ? _290 : (isnan(_290) ? cbSceneParam._m0[77u].w : min(_290, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1852 = _1850.x;
    float _1853 = _1850.y;
    float _1854 = _1850.z;
    float _1855 = _1850.w;
    float _1936;
    float _1938;
    float _1940;
    float _1942;
    if (_290 > cbSceneParam._m0[78u].w)
    {
        float _1897 = isnan(_290) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _290 : min(cbSceneParam._m0[80u].w, _290));
        float _1898 = _1897 / _290;
        float _1909 = _1898 * _343;
        float _1910 = _344 * _1898;
        float _1911 = (-0.0) - _1910;
        float _1913 = _1898 * _345;
        float _1915 = (cbSceneParam._m0[77u].w * _1911) / _1897;
        float _1916 = _1915 + cbSceneParam._m0[79u].w;
        float _1917 = cbSceneParam._m0[79u].w - _1910;
        float _1923 = sqrt(((_1909 * _1909) + (_1910 * _1910)) + (_1913 * _1913));
        float _1926 = (1.0 - (cbSceneParam._m0[77u].w / _1897)) * _1923;
        float _1932 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1934 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2143;
        if (abs((_1911 - _1915) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2143 = ((((_1916 > 0.0) ? exp2(_1932 * _1916) : (2.0 - exp2(_1934 * _1916))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1926;
        }
        else
        {
            float _2078 = 1.0 / cbSceneParam._m0[80u].x;
            float _2079 = isnan(_1917) ? _1916 : (isnan(_1916) ? _1917 : max(_1916, _1917));
            float _2080 = isnan(_1917) ? _1916 : (isnan(_1916) ? _1917 : min(_1916, _1917));
            float _2089 = isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : min(_2079, 0.0));
            float _2090 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : min(_2080, 0.0));
            _2143 = ((abs(_1923 / _1911) * cbSceneParam._m0[80u].y) * ((((_2089 - _2090) * 2.0) - ((exp2(_1932 * (isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0)))) - exp2(_1932 * (isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0))))) * _2078)) - ((exp2(_1934 * _2089) - exp2(_1934 * _2090)) * _2078))) + (_1926 * cbSceneParam._m0[80u].z);
        }
        vec4 _2145 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1835, _1836, 1.0), 0.0);
        float _2154 = exp2((_2143 * (-1.44269502162933349609375)) * (1.0 - _2145.w));
        float _2155 = log2(_2154);
        float _2171 = log2(_1855);
        _1936 = (exp2(_2171 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2155 * cbSceneParam._m0[78u].x)) * _2145.x) / cbSceneParam._m0[78u].x)) + _1852;
        _1938 = (exp2(_2171 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2155 * cbSceneParam._m0[78u].y)) * _2145.y) / cbSceneParam._m0[78u].y)) + _1853;
        _1940 = (exp2(_2171 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2155 * cbSceneParam._m0[78u].z)) * _2145.z) / cbSceneParam._m0[78u].z)) + _1854;
        _1942 = _2154 * _1855;
    }
    else
    {
        _1936 = _1852;
        _1938 = _1853;
        _1940 = _1854;
        _1942 = _1855;
    }
    float _1954 = roundEven(cbMatDynParam._m0[0u].y);
    bool _1955 = _1954 == 3.0;
    float _1956 = log2(_1942);
    float _1963 = exp2(_1956 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0))) * (_1797 + ((isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0))) * _425))) + ((_1803 + ((isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0))) * _1232)) * cbPerFrame._m0[3u].x));
    float _1964 = exp2(_1956 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0))) * (_1799 + ((isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0))) * _425))) + ((_1805 + ((isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0))) * _1232)) * cbPerFrame._m0[3u].x));
    float _1965 = exp2(_1956 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0))) * (_1801 + ((isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0))) * _425))) + ((_1807 + ((isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0))) * _1232)) * cbPerFrame._m0[3u].x));
    float _1974 = (_1954 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _1974 * (_1955 ? _1963 : (_1963 + (cbSceneParam._m0[72u].w * _1936)));
    SV_Target.y = _1974 * (_1955 ? _1964 : (_1964 + (cbSceneParam._m0[72u].w * _1938)));
    SV_Target.z = _1974 * (_1955 ? _1965 : (_1965 + (cbSceneParam._m0[72u].w * _1940)));
    SV_Target.w = cbInstanceData._m0[_1827].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1827].w;
}


