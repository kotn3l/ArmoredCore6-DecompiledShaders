#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_Ground_blend_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D S_Ground_blend_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D S_Ground_blend_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _836;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _178 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _179 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _180 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _186 = inversesqrt(dot(vec3(_178, _179, _180), vec3(_178, _179, _180)));
    float _193 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _200 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _223 = texture(sampler2D(S_Ground_blend_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _229 = _223.x * cbMtdParam._m0[9u].x;
    float _230 = _223.y * cbMtdParam._m0[9u].y;
    float _231 = _223.z * cbMtdParam._m0[9u].z;
    vec4 _243 = texture(sampler2D(S_Ground_blend_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[2u].w));
    float _245 = _243.x;
    vec4 _257 = texture(sampler2D(S_Ground_blend_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _261 = _257.z;
    float _265 = (_257.x * 2.0) + (-1.0);
    float _267 = (_257.y * 2.0) + (-1.0);
    float _268 = dot(vec2(_265, _267), vec2(_265, _267));
    float _3188 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _274 = sqrt(1.0 - (isnan(1.0) ? _3188 : (isnan(_3188) ? 1.0 : min(_3188, 1.0))));
    float _277 = fma(_274, _193 * NORMAL.x, fma(_267, _200 * TANGENT.x, (_186 * _178) * _265));
    float _280 = fma(_274, _193 * NORMAL.y, fma(_267, _200 * TANGENT.y, (_186 * _179) * _265));
    float _283 = fma(_274, _193 * NORMAL.z, fma(_267, _200 * TANGENT.z, (_186 * _180) * _265));
    float _287 = inversesqrt(dot(vec3(_277, _280, _283), vec3(_277, _280, _283)));
    float _288 = _287 * _277;
    float _289 = _287 * _280;
    float _290 = _287 * _283;
    float _3199 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _291 = isnan(1.0) ? _3199 : (isnan(_3199) ? 1.0 : min(_3199, 1.0));
    float _3210 = isnan(0.0) ? _229 : (isnan(_229) ? 0.0 : max(_229, 0.0));
    float _3221 = isnan(0.0) ? _230 : (isnan(_230) ? 0.0 : max(_230, 0.0));
    float _3232 = isnan(0.0) ? _231 : (isnan(_231) ? 0.0 : max(_231, 0.0));
    float _3243 = isnan(0.0) ? _245 : (isnan(_245) ? 0.0 : max(_245, 0.0));
    float _295 = isnan(1.0) ? _3243 : (isnan(_3243) ? 1.0 : min(_3243, 1.0));
    float _311 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _354 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _364 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _354);
    float _365 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _354);
    float _366 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _354);
    float _370 = inversesqrt(dot(vec3(_364, _365, _366), vec3(_364, _365, _366)));
    float _371 = _364 * _370;
    float _372 = _365 * _370;
    float _373 = _366 * _370;
    float _379 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _380 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _401 = fma(_290, cbSceneParam._m0[5u].z, fma(_289, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _288));
    float _404 = fma(_290, cbSceneParam._m0[6u].z, fma(_289, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _288));
    float _407 = fma(_290, cbSceneParam._m0[7u].z, fma(_289, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _288));
    uint _420 = uint(roundEven(NORMAL.w)) * 13u;
    uint _423 = (_420 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _429 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3210 : (isnan(_3210) ? 1.0 : min(_3210, 1.0)))) * cbInstanceData._m0[_423].x;
    float _430 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3221 : (isnan(_3221) ? 1.0 : min(_3221, 1.0)))) * cbInstanceData._m0[_423].y;
    float _431 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3232 : (isnan(_3232) ? 1.0 : min(_3232, 1.0)))) * cbInstanceData._m0[_423].z;
    float _3254 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _432 = isnan(1.0) ? _3254 : (isnan(_3254) ? 1.0 : min(_3254, 1.0));
    float _3265 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _433 = isnan(1.0) ? _3265 : (isnan(_3265) ? 1.0 : min(_3265, 1.0));
    float _3276 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _434 = isnan(1.0) ? _3276 : (isnan(_3276) ? 1.0 : min(_3276, 1.0));
    float _435 = 1.0 - _295;
    float _436 = _432 * _435;
    float _437 = _433 * _435;
    float _438 = _434 * _435;
    float _443 = (_432 + (-0.039999999105930328369140625)) * _295;
    float _444 = (_433 + (-0.039999999105930328369140625)) * _295;
    float _445 = (_434 + (-0.039999999105930328369140625)) * _295;
    float _446 = _443 + 0.039999999105930328369140625;
    float _448 = _444 + 0.039999999105930328369140625;
    float _449 = _445 + 0.039999999105930328369140625;
    vec4 _458 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _379, cbSceneParam._m0[86u].y * _380));
    float _461 = _458.x * TEXCOORD_1.w;
    float _462 = dot(vec3(_288, _289, _290), vec3(_371, _372, _373));
    float _465 = _462 * 2.0;
    float _469 = (_465 * _288) - _371;
    float _470 = (_465 * _289) - _372;
    float _471 = (_465 * _290) - _373;
    float _475 = abs(dot(vec3(_371, _372, _373), vec3(_288, _289, _290)));
    float _3287 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _477 = sqrt(_291);
    float _490 = exp2((_477 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3287 : (isnan(_3287) ? 1.0 : min(_3287, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_477 * 3.0));
    float _496 = (1.0 - _490) * ((_477 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _497 = _490 * _477;
    float _525 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _529 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _533 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _835;
    float _837;
    float _838;
    float _839;
    float _840;
    float _841;
    float _842;
    float _843;
    float _844;
    float _845;
    float _846;
    float _847;
    float _848;
    float _849;
    float _850;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _560 = fma(_533, cbModelParam._m0[26u].z, fma(_529, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _525));
        float _564 = fma(_533, cbModelParam._m0[27u].z, fma(_529, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _525));
        float _568 = fma(_533, cbModelParam._m0[28u].z, fma(_529, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _525));
        float _593 = _525 + _288;
        float _594 = _529 + _289;
        float _595 = _533 + _290;
        float _605 = fma(_595, cbModelParam._m0[26u].z, fma(_594, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _593)) - _560;
        float _606 = fma(_595, cbModelParam._m0[27u].z, fma(_594, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _593)) - _564;
        float _607 = fma(_595, cbModelParam._m0[28u].z, fma(_594, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _593)) - _568;
        float _611 = inversesqrt(dot(vec3(_605, _606, _607), vec3(_605, _606, _607)));
        float _624 = ((_611 * _605) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_560 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _625 = ((_611 * _606) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_564 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _626 = ((_611 * _607) / cbModelParam._m0[34u].z) + ((((((_568 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _629 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_624, _625, _626), 0.0);
        vec4 _636 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_624, _625, _626), 0.0);
        vec4 _643 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_624, _625, _626), 0.0);
        vec4 _650 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_624, _625, _626), 0.0);
        float _663 = exp2((_629.w + (-0.5)) * 20.0) * 2.0;
        float _664 = _663 * (_629.x + (-0.5));
        float _665 = _663 * (_629.y + (-0.5));
        float _666 = _663 * (_629.z + (-0.5));
        float _673 = exp2((_636.w + (-0.5)) * 20.0) * 2.0;
        float _674 = _673 * (_636.x + (-0.5));
        float _675 = _673 * (_636.y + (-0.5));
        float _676 = _673 * (_636.z + (-0.5));
        float _683 = exp2((_643.w + (-0.5)) * 20.0) * 2.0;
        float _684 = _683 * (_643.x + (-0.5));
        float _685 = _683 * (_643.y + (-0.5));
        float _686 = _683 * (_643.z + (-0.5));
        float _693 = exp2((_650.w + (-0.5)) * 20.0) * 2.0;
        float _694 = _693 * (_650.x + (-0.5));
        float _695 = _693 * (_650.y + (-0.5));
        float _696 = _693 * (_650.z + (-0.5));
        float _697 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
        float _698 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
        float _699 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
        float _700 = _664 * 0.5;
        float _701 = _674 * 0.5;
        float _702 = _684 * 0.5;
        float _703 = dot(vec3(_700, _701, _702), vec3(_700, _701, _702));
        float _708 = (_703 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_703);
        float _717 = (dot(vec3(_288, _289, _290), vec3(_708 * _700, _708 * _701, _708 * _702)) + 1.0) * 0.5;
        float _3313 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
        float _727 = sqrt(((_701 * _701) + (_700 * _700)) + (_702 * _702)) / (_697 + 9.9999997473787516355514526367188e-06);
        float _3324 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
        float _728 = isnan(1.0) ? _3324 : (isnan(_3324) ? 1.0 : min(_3324, 1.0));
        float _729 = _728 * 2.0;
        float _733 = (1.0 - _728) / (_728 + 1.0);
        float _3335 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
        float _734 = isnan(1.0) ? _3335 : (isnan(_3335) ? 1.0 : min(_3335, 1.0));
        float _743 = ((((1.0 - _734) * (_729 + 2.0)) * exp2(log2(isnan(1.0) ? _3313 : (isnan(_3313) ? 1.0 : min(_3313, 1.0))) * (_729 + 1.0))) + _734) * _697;
        float _744 = _665 * 0.5;
        float _745 = _675 * 0.5;
        float _746 = _685 * 0.5;
        float _747 = dot(vec3(_744, _745, _746), vec3(_744, _745, _746));
        float _752 = (_747 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_747);
        float _760 = (dot(vec3(_288, _289, _290), vec3(_752 * _744, _752 * _745, _752 * _746)) + 1.0) * 0.5;
        float _3346 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
        float _769 = sqrt(((_745 * _745) + (_744 * _744)) + (_746 * _746)) / (_698 + 9.9999997473787516355514526367188e-06);
        float _3357 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
        float _770 = isnan(1.0) ? _3357 : (isnan(_3357) ? 1.0 : min(_3357, 1.0));
        float _771 = _770 * 2.0;
        float _775 = (1.0 - _770) / (_770 + 1.0);
        float _3368 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
        float _776 = isnan(1.0) ? _3368 : (isnan(_3368) ? 1.0 : min(_3368, 1.0));
        float _785 = ((((1.0 - _776) * (_771 + 2.0)) * exp2(log2(isnan(1.0) ? _3346 : (isnan(_3346) ? 1.0 : min(_3346, 1.0))) * (_771 + 1.0))) + _776) * _698;
        float _786 = _666 * 0.5;
        float _787 = _676 * 0.5;
        float _788 = _686 * 0.5;
        float _789 = dot(vec3(_786, _787, _788), vec3(_786, _787, _788));
        float _794 = (_789 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_789);
        float _802 = (dot(vec3(_288, _289, _290), vec3(_794 * _786, _794 * _787, _794 * _788)) + 1.0) * 0.5;
        float _3379 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
        float _811 = sqrt(((_787 * _787) + (_786 * _786)) + (_788 * _788)) / (_699 + 9.9999997473787516355514526367188e-06);
        float _3390 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
        float _812 = isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0));
        float _813 = _812 * 2.0;
        float _817 = (1.0 - _812) / (_812 + 1.0);
        float _3401 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
        float _818 = isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0));
        float _827 = ((((1.0 - _818) * (_813 + 2.0)) * exp2(log2(isnan(1.0) ? _3379 : (isnan(_3379) ? 1.0 : min(_3379, 1.0))) * (_813 + 1.0))) + _818) * _699;
        _835 = _666;
        _837 = _665;
        _838 = _664;
        _839 = _676;
        _840 = _675;
        _841 = _674;
        _842 = _686;
        _843 = _685;
        _844 = _684;
        _845 = _699;
        _846 = _698;
        _847 = _697;
        _848 = cbModelParam._m0[36u].z * (isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0)));
        _849 = cbModelParam._m0[36u].z * (isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0)));
        _850 = cbModelParam._m0[36u].z * (isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0)));
    }
    else
    {
        _835 = _836;
        _837 = _836;
        _838 = _836;
        _839 = _836;
        _840 = _836;
        _841 = _836;
        _842 = _836;
        _843 = _836;
        _844 = _836;
        _845 = _836;
        _846 = _836;
        _847 = _836;
        _848 = 0.0;
        _849 = 0.0;
        _850 = 0.0;
    }
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    float _1151;
    float _1152;
    float _1153;
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _876 = fma(_533, cbModelParam._m0[30u].z, fma(_529, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _525));
        float _880 = fma(_533, cbModelParam._m0[31u].z, fma(_529, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _525));
        float _884 = fma(_533, cbModelParam._m0[32u].z, fma(_529, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _525));
        float _907 = _525 + _288;
        float _908 = _529 + _289;
        float _909 = _533 + _290;
        float _919 = fma(_909, cbModelParam._m0[30u].z, fma(_908, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _907)) - _876;
        float _920 = fma(_909, cbModelParam._m0[31u].z, fma(_908, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _907)) - _880;
        float _921 = fma(_909, cbModelParam._m0[32u].z, fma(_908, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _907)) - _884;
        float _925 = inversesqrt(dot(vec3(_919, _920, _921), vec3(_919, _920, _921)));
        float _938 = ((_925 * _919) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_876 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _939 = ((_925 * _920) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_880 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _940 = ((_925 * _921) / cbModelParam._m0[35u].z) + ((((((_884 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _942 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_938, _939, _940), 0.0);
        vec4 _949 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_938, _939, _940), 0.0);
        vec4 _956 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_938, _939, _940), 0.0);
        vec4 _963 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_938, _939, _940), 0.0);
        float _975 = exp2((_942.w + (-0.5)) * 20.0) * 2.0;
        float _976 = _975 * (_942.x + (-0.5));
        float _977 = _975 * (_942.y + (-0.5));
        float _978 = _975 * (_942.z + (-0.5));
        float _985 = exp2((_949.w + (-0.5)) * 20.0) * 2.0;
        float _986 = _985 * (_949.x + (-0.5));
        float _987 = _985 * (_949.y + (-0.5));
        float _988 = _985 * (_949.z + (-0.5));
        float _995 = exp2((_956.w + (-0.5)) * 20.0) * 2.0;
        float _996 = _995 * (_956.x + (-0.5));
        float _997 = _995 * (_956.y + (-0.5));
        float _998 = _995 * (_956.z + (-0.5));
        float _1005 = exp2((_963.w + (-0.5)) * 20.0) * 2.0;
        float _1006 = _1005 * (_963.x + (-0.5));
        float _1007 = _1005 * (_963.y + (-0.5));
        float _1008 = _1005 * (_963.z + (-0.5));
        float _1009 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1010 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1011 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1012 = _976 * 0.5;
        float _1013 = _986 * 0.5;
        float _1014 = _996 * 0.5;
        float _1015 = dot(vec3(_1012, _1013, _1014), vec3(_1012, _1013, _1014));
        float _1020 = (_1015 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1015);
        float _1028 = (dot(vec3(_288, _289, _290), vec3(_1020 * _1012, _1020 * _1013, _1020 * _1014)) + 1.0) * 0.5;
        float _3442 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1037 = sqrt(((_1013 * _1013) + (_1012 * _1012)) + (_1014 * _1014)) / (_1009 + 9.9999997473787516355514526367188e-06);
        float _3453 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1038 = isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0));
        float _1039 = _1038 * 2.0;
        float _1043 = (1.0 - _1038) / (_1038 + 1.0);
        float _3464 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1044 = isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0));
        float _1053 = ((((1.0 - _1044) * (_1039 + 2.0)) * exp2(log2(isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0))) * (_1039 + 1.0))) + _1044) * _1009;
        float _1054 = _977 * 0.5;
        float _1055 = _987 * 0.5;
        float _1056 = _997 * 0.5;
        float _1057 = dot(vec3(_1054, _1055, _1056), vec3(_1054, _1055, _1056));
        float _1062 = (_1057 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1057);
        float _1070 = (dot(vec3(_288, _289, _290), vec3(_1062 * _1054, _1062 * _1055, _1062 * _1056)) + 1.0) * 0.5;
        float _3475 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1079 = sqrt(((_1055 * _1055) + (_1054 * _1054)) + (_1056 * _1056)) / (_1010 + 9.9999997473787516355514526367188e-06);
        float _3486 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1080 = isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0));
        float _1081 = _1080 * 2.0;
        float _1085 = (1.0 - _1080) / (_1080 + 1.0);
        float _3497 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1086 = isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0));
        float _1095 = ((((1.0 - _1086) * (_1081 + 2.0)) * exp2(log2(isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0))) * (_1081 + 1.0))) + _1086) * _1010;
        float _1096 = _978 * 0.5;
        float _1097 = _988 * 0.5;
        float _1098 = _998 * 0.5;
        float _1099 = dot(vec3(_1096, _1097, _1098), vec3(_1096, _1097, _1098));
        float _1104 = (_1099 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1099);
        float _1112 = (dot(vec3(_288, _289, _290), vec3(_1104 * _1096, _1104 * _1097, _1104 * _1098)) + 1.0) * 0.5;
        float _3508 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1121 = sqrt(((_1097 * _1097) + (_1096 * _1096)) + (_1098 * _1098)) / (_1011 + 9.9999997473787516355514526367188e-06);
        float _3519 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1122 = isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0));
        float _1123 = _1122 * 2.0;
        float _1127 = (1.0 - _1122) / (_1122 + 1.0);
        float _3530 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1128 = isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0));
        float _1137 = ((((1.0 - _1128) * (_1123 + 2.0)) * exp2(log2(isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0))) * (_1123 + 1.0))) + _1128) * _1011;
        _1145 = _978;
        _1146 = _977;
        _1147 = _976;
        _1148 = _988;
        _1149 = _987;
        _1150 = _986;
        _1151 = _998;
        _1152 = _997;
        _1153 = _996;
        _1154 = _1011;
        _1155 = _1010;
        _1156 = _1009;
        _1157 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0)));
        _1158 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0)));
        _1159 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0)));
    }
    else
    {
        _1145 = _836;
        _1146 = _836;
        _1147 = _836;
        _1148 = _836;
        _1149 = _836;
        _1150 = _836;
        _1151 = _836;
        _1152 = _836;
        _1153 = _836;
        _1154 = _836;
        _1155 = _836;
        _1156 = _836;
        _1157 = 0.0;
        _1158 = 0.0;
        _1159 = 0.0;
    }
    float _1169 = (cbModelParam._m0[1u].x * (_1157 - _848)) + _848;
    float _1170 = (cbModelParam._m0[1u].x * (_1158 - _849)) + _849;
    float _1171 = (cbModelParam._m0[1u].x * (_1159 - _850)) + _850;
    float _1192 = fma(_1171, cbSceneParam._m0[89u].z, fma(_1170, cbSceneParam._m0[89u].y, _1169 * cbSceneParam._m0[89u].x));
    float _1195 = fma(_1171, cbSceneParam._m0[90u].z, fma(_1170, cbSceneParam._m0[90u].y, _1169 * cbSceneParam._m0[90u].x));
    float _1198 = fma(_1171, cbSceneParam._m0[91u].z, fma(_1170, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1169));
    float _1213 = _469 * 0.5;
    float _1214 = _470 * 0.5;
    float _1215 = _471 * 0.5;
    float _1216 = dot(vec4(_1213, _1214, _1215, 1.0), vec4(_1147, _1150, _1153, _1156));
    float _1219 = dot(vec4(_1213, _1214, _1215, 1.0), vec4(_1146, _1149, _1152, _1155));
    float _1222 = dot(vec4(_1213, _1214, _1215, 1.0), vec4(_1145, _1148, _1151, _1154));
    float _1256;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1229 = dot(vec4(_1213, _1214, _1215, 1.0), vec4(_835, _839, _842, _845));
        float _1233 = dot(vec4(_1213, _1214, _1215, 1.0), vec4(_837, _840, _843, _846));
        float _1237 = dot(vec4(_1213, _1214, _1215, 1.0), vec4(_838, _841, _844, _847));
        float _1244 = dot(vec4(cbModelParam._m0[39u]), vec4(_1213, _1214, _1215, 1.0));
        _1256 = dot(vec3(isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0)), isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0)), isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1244) ? 0.0 : (isnan(0.0) ? _1244 : max(0.0, _1244))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1256 = 1.0;
    }
    float _1267;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1258 = dot(vec4(cbModelParam._m0[40u]), vec4(_1213, _1214, _1215, 1.0));
        _1267 = dot(vec3(isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0)), isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0)), isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1258) ? 0.0 : (isnan(0.0) ? _1258 : max(0.0, _1258))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1267 = 1.0;
    }
    float _1271 = (_1267 * cbModelParam._m0[1u].x) + (_1256 * (1.0 - cbModelParam._m0[1u].x));
    float _1281 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _291);
    float _1282 = isnan(_1281) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1281 : min(cbModelParam._m0[25u].z, _1281));
    float _1364;
    float _1366;
    float _1368;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1331 = fma(_533, cbModelParam._m0[13u].z, fma(_529, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _525)) + cbModelParam._m0[13u].w;
        float _1335 = fma(_533, cbModelParam._m0[14u].z, fma(_529, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _525)) + cbModelParam._m0[14u].w;
        float _1339 = fma(_533, cbModelParam._m0[15u].z, fma(_529, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _525)) + cbModelParam._m0[15u].w;
        float _1342 = fma(_471, cbModelParam._m0[13u].z, fma(_470, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _469));
        float _1345 = fma(_471, cbModelParam._m0[14u].z, fma(_470, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _469));
        float _1348 = fma(_471, cbModelParam._m0[15u].z, fma(_470, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _469));
        float _1376;
        if (_1342 > 0.0)
        {
            _1376 = abs((1.0 - _1331) / _1342);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1342 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1331 + 1.0) / _1342);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1376 = frontier_phi_14_12_ladder;
        }
        float _1551;
        if (_1345 > 0.0)
        {
            _1551 = abs((1.0 - _1335) / _1345);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1345 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1335 + 1.0) / _1345);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1551 = frontier_phi_23_19_ladder;
        }
        float _2010;
        if (_1348 > 0.0)
        {
            _2010 = abs((1.0 - _1339) / _1348);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1348 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1339 + 1.0) / _1348);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2010 = frontier_phi_35_30_ladder;
        }
        float _2012 = isnan(_1551) ? _1376 : (isnan(_1376) ? _1551 : min(_1376, _1551));
        float _2013 = isnan(_2010) ? _2012 : (isnan(_2012) ? _2010 : min(_2012, _2010));
        float _2017 = (_2013 * _1342) + _1331;
        float _2018 = (_2013 * _1345) + _1335;
        float _2019 = (_2013 * _1348) + _1339;
        float _2020 = _2013 * 9.9999997473787516355514526367188e-05;
        float _2022 = (-1.0) - _2020;
        float _2024 = _2020 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2019 > _2024) || ((_2019 < _2022) || ((_2018 > _2024) || ((_2018 < _2022) || ((_2017 < _2022) || (_2017 > _2024))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2250 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2019, cbModelParam._m0[9u].z, fma(_2018, cbModelParam._m0[9u].y, _2017 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2019, cbModelParam._m0[10u].z, fma(_2018, cbModelParam._m0[10u].y, _2017 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2019, cbModelParam._m0[11u].z, fma(_2018, cbModelParam._m0[11u].y, _2017 * cbModelParam._m0[11u].x))), _1282);
            frontier_phi_13_35_ladder = _2250.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2250.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2250.x * cbModelParam._m0[1u].y;
        }
        _1364 = frontier_phi_13_35_ladder_2;
        _1366 = frontier_phi_13_35_ladder_1;
        _1368 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1352 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_469, _470, _471), _1282);
        _1364 = _1352.x * cbModelParam._m0[1u].y;
        _1366 = _1352.y * cbModelParam._m0[1u].y;
        _1368 = _1352.z * cbModelParam._m0[1u].y;
    }
    float _1372 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _291);
    float _1373 = isnan(_1372) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1372 : min(cbModelParam._m0[25u].w, _1372));
    float _1466;
    float _1468;
    float _1470;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1430 = fma(_533, cbModelParam._m0[21u].z, fma(_529, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _525)) + cbModelParam._m0[21u].w;
        float _1434 = fma(_533, cbModelParam._m0[22u].z, fma(_529, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _525)) + cbModelParam._m0[22u].w;
        float _1438 = fma(_533, cbModelParam._m0[23u].z, fma(_529, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _525)) + cbModelParam._m0[23u].w;
        float _1441 = fma(_471, cbModelParam._m0[21u].z, fma(_470, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _469));
        float _1444 = fma(_471, cbModelParam._m0[22u].z, fma(_470, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _469));
        float _1447 = fma(_471, cbModelParam._m0[23u].z, fma(_470, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _469));
        float _1556;
        if (_1441 > 0.0)
        {
            _1556 = abs((1.0 - _1430) / _1441);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1441 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1430 + 1.0) / _1441);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1556 = frontier_phi_25_21_ladder;
        }
        float _2037;
        if (_1444 > 0.0)
        {
            _2037 = abs((1.0 - _1434) / _1444);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1444 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1434 + 1.0) / _1444);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2037 = frontier_phi_37_32_ladder;
        }
        float _2372;
        if (_1447 > 0.0)
        {
            _2372 = abs((1.0 - _1438) / _1447);
        }
        else
        {
            float frontier_phi_49_44_ladder;
            if (_1447 < 0.0)
            {
                frontier_phi_49_44_ladder = abs((_1438 + 1.0) / _1447);
            }
            else
            {
                frontier_phi_49_44_ladder = 5000.0;
            }
            _2372 = frontier_phi_49_44_ladder;
        }
        float _2374 = isnan(_2037) ? _1556 : (isnan(_1556) ? _2037 : min(_1556, _2037));
        float _2375 = isnan(_2372) ? _2374 : (isnan(_2374) ? _2372 : min(_2374, _2372));
        float _2379 = (_2375 * _1441) + _1430;
        float _2380 = (_2375 * _1444) + _1434;
        float _2381 = (_2375 * _1447) + _1438;
        float _2382 = _2375 * 9.9999997473787516355514526367188e-05;
        float _2383 = (-1.0) - _2382;
        float _2385 = _2382 + 1.0;
        float frontier_phi_22_49_ladder;
        float frontier_phi_22_49_ladder_1;
        float frontier_phi_22_49_ladder_2;
        if ((_2381 > _2385) || ((_2381 < _2383) || ((_2380 > _2385) || ((_2380 < _2383) || ((_2379 < _2383) || (_2379 > _2385))))))
        {
            frontier_phi_22_49_ladder = 0.0;
            frontier_phi_22_49_ladder_1 = 0.0;
            frontier_phi_22_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2502 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2381, cbModelParam._m0[17u].z, fma(_2380, cbModelParam._m0[17u].y, _2379 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2381, cbModelParam._m0[18u].z, fma(_2380, cbModelParam._m0[18u].y, _2379 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2381, cbModelParam._m0[19u].z, fma(_2380, cbModelParam._m0[19u].y, _2379 * cbModelParam._m0[19u].x))), _1373);
            frontier_phi_22_49_ladder = _2502.z * cbModelParam._m0[1u].z;
            frontier_phi_22_49_ladder_1 = _2502.y * cbModelParam._m0[1u].z;
            frontier_phi_22_49_ladder_2 = _2502.x * cbModelParam._m0[1u].z;
        }
        _1466 = frontier_phi_22_49_ladder_2;
        _1468 = frontier_phi_22_49_ladder_1;
        _1470 = frontier_phi_22_49_ladder;
    }
    else
    {
        vec4 _1450 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_469, _470, _471), _1373);
        _1466 = _1450.x * cbModelParam._m0[1u].z;
        _1468 = _1450.y * cbModelParam._m0[1u].z;
        _1470 = _1450.z * cbModelParam._m0[1u].z;
    }
    float _1483 = (((_496 * _446) + _497) * _461) * ((cbModelParam._m0[1u].w * (_1466 - _1364)) + _1364);
    float _1485 = (((_496 * _448) + _497) * _461) * ((cbModelParam._m0[1u].w * (_1468 - _1366)) + _1366);
    float _1487 = (((_496 * _449) + _497) * _461) * ((cbModelParam._m0[1u].w * (_1470 - _1368)) + _1368);
    float _1490 = fma(_1487, cbSceneParam._m0[89u].z, fma(_1485, cbSceneParam._m0[89u].y, _1483 * cbSceneParam._m0[89u].x));
    float _1493 = fma(_1487, cbSceneParam._m0[90u].z, fma(_1485, cbSceneParam._m0[90u].y, _1483 * cbSceneParam._m0[90u].x));
    float _1496 = fma(_1487, cbSceneParam._m0[91u].z, fma(_1485, cbSceneParam._m0[91u].y, _1483 * cbSceneParam._m0[91u].x));
    float _1530 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1534 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1538 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1542 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1543 = _1530 / _1542;
    float _1544 = _1534 / _1542;
    float _1545 = _1538 / _1542;
    float _1692;
    float _1693;
    float _1694;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1572 = ((uint(_1545 > cbSceneParam._m0[59u].y) + uint(_1545 > cbSceneParam._m0[59u].x)) + uint(_1545 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1573 = _1572 + 43u;
        uint _1581 = _1572 + 44u;
        uint _1589 = _1572 + 45u;
        uint _1597 = _1572 + 46u;
        float _1608 = fma(_1542, cbSceneParam._m0[_1573].w, fma(_1538, cbSceneParam._m0[_1573].z, fma(_1534, cbSceneParam._m0[_1573].y, _1530 * cbSceneParam._m0[_1573].x)));
        float _1612 = fma(_1542, cbSceneParam._m0[_1581].w, fma(_1538, cbSceneParam._m0[_1581].z, fma(_1534, cbSceneParam._m0[_1581].y, _1530 * cbSceneParam._m0[_1581].x)));
        float _1620 = fma(_1542, cbSceneParam._m0[_1597].w, fma(_1538, cbSceneParam._m0[_1597].z, fma(_1534, cbSceneParam._m0[_1597].y, _1530 * cbSceneParam._m0[_1597].x)));
        float _1625 = cbSceneParam._m0[33u].z * _1620;
        float _1627 = cbSceneParam._m0[33u].w * _1620;
        float _1630 = fma(_1542, cbSceneParam._m0[_1589].w, fma(_1538, cbSceneParam._m0[_1589].z, fma(_1534, cbSceneParam._m0[_1589].y, _1530 * cbSceneParam._m0[_1589].x))) / _1620;
        float _1678 = (cbSceneParam._m0[33u].x - sqrt(((_1544 * _1544) + (_1543 * _1543)) + (_1545 * _1545))) * cbSceneParam._m0[33u].y;
        float _3656 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
        float _1685 = (isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1625 + _1608) / _1620, (_1627 + _1612) / _1620), _1630), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1627 + _1608) / _1620, (_1612 - _1625) / _1620), _1630), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1608 - _1625) / _1620, (_1612 - _1627) / _1620), _1630), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1608 - _1627) / _1620, (_1625 + _1612) / _1620), _1630), 0.0)).x), vec4(0.25)));
        _1692 = 1.0 - (_1685 * cbSceneParam._m0[34u].x);
        _1693 = 1.0 - (_1685 * cbSceneParam._m0[34u].y);
        _1694 = 1.0 - (_1685 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1692 = 1.0;
        _1693 = 1.0;
        _1694 = 1.0;
    }
    float _1758;
    float _1760;
    float _1762;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1746 = fma(_1542, cbSceneParam._m0[63u].w, fma(_1538, cbSceneParam._m0[63u].z, fma(_1534, cbSceneParam._m0[63u].y, _1530 * cbSceneParam._m0[63u].x)));
        float _1747 = fma(_1542, cbSceneParam._m0[60u].w, fma(_1538, cbSceneParam._m0[60u].z, fma(_1534, cbSceneParam._m0[60u].y, _1530 * cbSceneParam._m0[60u].x))) / _1746;
        float _1748 = fma(_1542, cbSceneParam._m0[61u].w, fma(_1538, cbSceneParam._m0[61u].z, fma(_1534, cbSceneParam._m0[61u].y, _1530 * cbSceneParam._m0[61u].x))) / _1746;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1747 >= cbSceneParam._m0[64u].x) && (_1748 >= cbSceneParam._m0[64u].y)) && (_1747 <= cbSceneParam._m0[64u].z)) && (_1748 <= cbSceneParam._m0[64u].w))
        {
            float _2050 = fma(_1542, cbSceneParam._m0[62u].w, fma(_1538, cbSceneParam._m0[62u].z, fma(_1534, cbSceneParam._m0[62u].y, _1530 * cbSceneParam._m0[62u].x))) / _1746;
            float _2054 = isnan(cbSceneParam._m0[41u].w) ? _2050 : (isnan(_2050) ? cbSceneParam._m0[41u].w : max(_2050, cbSceneParam._m0[41u].w));
            float _2097 = (cbSceneParam._m0[33u].x - sqrt(((_1544 * _1544) + (_1543 * _1543)) + (_1545 * _1545))) * cbSceneParam._m0[33u].y;
            float _3672 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
            float _2104 = (isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1747, cbSceneParam._m0[33u].w + _1748), _2054), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1747, _1748 - cbSceneParam._m0[33u].z), _2054), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1747 - cbSceneParam._m0[33u].z, _1748 - cbSceneParam._m0[33u].w), _2054), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1747 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1748), _2054), 0.0)).x), vec4(0.25)));
            float _2108 = 1.0 - (_2104 * cbSceneParam._m0[34u].x);
            float _2109 = 1.0 - (_2104 * cbSceneParam._m0[34u].y);
            float _2110 = 1.0 - (_2104 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2110) ? _1694 : (isnan(_1694) ? _2110 : min(_1694, _2110));
            frontier_phi_34_33_ladder_1 = isnan(_2109) ? _1693 : (isnan(_1693) ? _2109 : min(_1693, _2109));
            frontier_phi_34_33_ladder_2 = isnan(_2108) ? _1692 : (isnan(_1692) ? _2108 : min(_1692, _2108));
        }
        else
        {
            frontier_phi_34_33_ladder = _1694;
            frontier_phi_34_33_ladder_1 = _1693;
            frontier_phi_34_33_ladder_2 = _1692;
        }
        _1758 = frontier_phi_34_33_ladder_2;
        _1760 = frontier_phi_34_33_ladder_1;
        _1762 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1758 = _1692;
        _1760 = _1693;
        _1762 = _1694;
    }
    float _3698 = isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0));
    float _1764 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
    float _3709 = isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0));
    float _1765 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
    float _3720 = isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0));
    float _1766 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
    uvec4 _1770 = floatBitsToUint(cbInstanceData._m0[_420 + 5u]);
    uint _1772 = _1770.x * 14u;
    uint _1773 = _1772 + 13u;
    float _1778 = _461 + (-1.0);
    float _1781 = (cbLight._m0[_1773].x * _1778) + 1.0;
    float _1782 = (cbLight._m0[_1773].y * _1778) + 1.0;
    uint _1783 = _1772 + 5u;
    float _1789 = isnan(1.0) ? _1782 : (isnan(_1782) ? 1.0 : min(_1782, 1.0));
    uint _1793 = _1772 + 4u;
    float _1803 = isnan(1.0) ? _1781 : (isnan(_1781) ? 1.0 : min(_1781, 1.0));
    uint _1807 = _1772 | 1u;
    float _1818 = dot(vec3(cbLight._m0[_1772].xyz), vec3(_288, _289, _290));
    float _1821 = dot(vec3(cbLight._m0[_1807].xyz), vec3(_288, _289, _290));
    float _3741 = isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0));
    float _3752 = isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0));
    float _1826 = (isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0))) * 0.3183098733425140380859375;
    float _1828 = (isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0))) * 0.3183098733425140380859375;
    float _1835 = ((cbLight._m0[_1783].x * _1789) * _1828) + (((cbLight._m0[_1793].x * _1764) * _1803) * _1826);
    float _1836 = ((_1789 * cbLight._m0[_1783].y) * _1828) + (((cbLight._m0[_1793].y * _1765) * _1803) * _1826);
    float _1837 = ((_1789 * cbLight._m0[_1783].z) * _1828) + (((cbLight._m0[_1793].z * _1766) * _1803) * _1826);
    uint _1839 = _1772 + 8u;
    float _1852 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1772].w)) * _291) * 0.949999988079071044921875);
    float _1853 = _1852 * _1852;
    float _1854 = cbLight._m0[_1772].x + _371;
    float _1855 = cbLight._m0[_1772].y + _372;
    float _1856 = cbLight._m0[_1772].z + _373;
    float _1860 = inversesqrt(dot(vec3(_1854, _1855, _1856), vec3(_1854, _1855, _1856)));
    float _1861 = _1860 * _1854;
    float _1862 = _1860 * _1855;
    float _1863 = _1860 * _1856;
    float _1864 = dot(vec3(_288, _289, _290), vec3(cbLight._m0[_1772].xyz));
    float _3763 = isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0));
    float _1867 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
    float _3774 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _1868 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
    float _1869 = dot(vec3(_288, _289, _290), vec3(_1861, _1862, _1863));
    float _3785 = isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0));
    float _1872 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
    float _1873 = dot(vec3(cbLight._m0[_1772].xyz), vec3(_1861, _1862, _1863));
    float _3796 = isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0));
    float _1877 = _1853 * _1853;
    float _1881 = ((_1872 * _1872) * (_1877 + (-1.0))) + 1.0;
    float _1889 = exp2(log2(1.0 - (isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0)))) * 5.0);
    float _1890 = 0.959999978542327880859375 - _443;
    float _1892 = 0.959999978542327880859375 - _444;
    float _1893 = 0.959999978542327880859375 - _445;
    float _1900 = 1.0 - _1853;
    float _1911 = (0.5 / (((_1868 * ((_1867 * _1900) + _1853)) + 9.9999999392252902907785028219223e-09) + (((_1868 * _1900) + _1853) * _1867))) * _1867;
    float _3807 = isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0));
    float _1913 = (isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0))) * (_1877 / ((_1881 * _1881) * 3.141590118408203125));
    uint _1927 = _1772 + 9u;
    float _1938 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1807].w)) * _291) * 0.949999988079071044921875);
    float _1939 = _1938 * _1938;
    float _1940 = cbLight._m0[_1807].x + _371;
    float _1941 = cbLight._m0[_1807].y + _372;
    float _1942 = cbLight._m0[_1807].z + _373;
    float _1946 = inversesqrt(dot(vec3(_1940, _1941, _1942), vec3(_1940, _1941, _1942)));
    float _1947 = _1946 * _1940;
    float _1948 = _1946 * _1941;
    float _1949 = _1946 * _1942;
    float _1950 = dot(vec3(_288, _289, _290), vec3(cbLight._m0[_1807].xyz));
    float _3818 = isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0));
    float _1953 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
    float _1954 = dot(vec3(_288, _289, _290), vec3(_1947, _1948, _1949));
    float _3829 = isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0));
    float _1957 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
    float _1958 = dot(vec3(cbLight._m0[_1807].xyz), vec3(_1947, _1948, _1949));
    float _3840 = isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0));
    float _1962 = _1939 * _1939;
    float _1966 = ((_1957 * _1957) * (_1962 + (-1.0))) + 1.0;
    float _1973 = exp2(log2(1.0 - (isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0)))) * 5.0);
    float _1980 = 1.0 - _1939;
    float _1990 = (0.5 / (((_1868 * ((_1953 * _1980) + _1939)) + 9.9999999392252902907785028219223e-09) + (((_1868 * _1980) + _1939) * _1953))) * _1953;
    float _3851 = isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0));
    float _1992 = (isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0))) * (_1962 / ((_1966 * _1966) * 3.141590118408203125));
    float _2002 = (((((_1973 * _1890) + _446) * cbLight._m0[_1927].x) * _1992) * _1789) + ((((cbLight._m0[_1839].x * _1764) * ((_1889 * _1890) + _446)) * _1913) * _1803);
    float _2003 = (((((_1973 * _1892) + _448) * cbLight._m0[_1927].y) * _1992) * _1789) + ((((cbLight._m0[_1839].y * _1765) * ((_1889 * _1892) + _448)) * _1913) * _1803);
    float _2004 = (((((_1973 * _1893) + _449) * cbLight._m0[_1927].z) * _1992) * _1789) + ((((cbLight._m0[_1839].z * _1766) * ((_1889 * _1893) + _449)) * _1913) * _1803);
    float _2167;
    float _2169;
    float _2171;
    float _2173;
    float _2175;
    float _2177;
    if (_1770.y == 0u)
    {
        uvec4 _2122 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2123 = _2122.x;
        uint _2134 = uint((float(_2122.y) * floor(float(uint(cbSceneParam._m0[85u].y * _380) / _2123))) + floor(float(uint(cbSceneParam._m0[85u].x * _379) / _2123)));
        float _2144 = (log2(_1545 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2145 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
        uint _2148 = uint(isnan(14.0) ? _2145 : (isnan(_2145) ? 14.0 : min(_2145, 14.0)));
        uvec4 _2153 = texelFetch(g_lightClusterGridBuffer, int(((_2148 << 2u) + (_2134 << 6u)) >> 2u));
        uint _2154 = _2153.x;
        uint _2155 = _2122.z;
        float _2259;
        float _2261;
        float _2263;
        float _2265;
        float _2267;
        float _2269;
        if (((((1u << ((_2155 >> 4u) & 15u)) + 4294967295u) & _2154) == 0u) || ((_2155 & 240u) == 0u))
        {
            _2259 = 0.0;
            _2261 = 0.0;
            _2263 = 0.0;
            _2265 = 0.0;
            _2267 = 0.0;
            _2269 = 0.0;
        }
        else
        {
            float _2260;
            float _2262;
            float _2264;
            float _2266;
            float _2268;
            float _2270;
            float _2430 = 0.0;
            float _2431 = 0.0;
            float _2432 = 0.0;
            float _2433 = 0.0;
            float _2434 = 0.0;
            float _2435 = 0.0;
            uint _2436 = 0u;
            uint _2445;
            bool _2446;
            for (;;)
            {
                _2445 = texelFetch(g_lightClassification, int((((_2148 << 5u) + (_2134 << 9u)) + (_2436 << 2u)) >> 2u)).x;
                _2446 = _2445 == 0u;
                float frontier_phi_58_pred;
                float frontier_phi_58_pred_1;
                float frontier_phi_58_pred_2;
                float frontier_phi_58_pred_3;
                float frontier_phi_58_pred_4;
                float frontier_phi_58_pred_5;
                if (_2446)
                {
                    frontier_phi_58_pred = _2433;
                    frontier_phi_58_pred_1 = _2432;
                    frontier_phi_58_pred_2 = _2431;
                    frontier_phi_58_pred_3 = _2430;
                    frontier_phi_58_pred_4 = _2434;
                    frontier_phi_58_pred_5 = _2435;
                }
                else
                {
                    float _2575;
                    float _2576;
                    float _2577;
                    float _2578;
                    float _2579;
                    float _2580;
                    uint _2581;
                    _2575 = _2430;
                    _2576 = _2431;
                    _2577 = _2432;
                    _2578 = _2433;
                    _2579 = _2434;
                    _2580 = _2435;
                    _2581 = _2445;
                    float _2507;
                    float _2508;
                    float _2509;
                    float _2510;
                    float _2511;
                    float _2512;
                    for (;;)
                    {
                        uint _2585 = uint(findLSB(_2581)) + (_2436 << 5u);
                        uint _2582 = (_2581 + 4294967295u) & _2581;
                        uint _2587 = _2585 * 48u;
                        vec4 _2601 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2587)).x, texelFetch(g_PointLightRenderingBuffer, int(_2587 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2587 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2587 + 3u)).x));
                        uint _2607 = (_2585 * 48u) + 4u;
                        vec4 _2620 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2607)).x, texelFetch(g_PointLightRenderingBuffer, int(_2607 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2607 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2607 + 3u)).x));
                        uint _2626 = (_2585 * 48u) + 8u;
                        vec3 _2637 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2626)).x, texelFetch(g_PointLightRenderingBuffer, int(_2626 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2626 + 2u)).x));
                        float _2641 = _2601.x - _1543;
                        float _2642 = _2601.y - _1544;
                        float _2643 = _2601.z - _1545;
                        float _2644 = dot(vec3(_2641, _2642, _2643), vec3(_2641, _2642, _2643));
                        float _2647 = inversesqrt(_2644);
                        float _2648 = _2647 * _2641;
                        float _2649 = _2647 * _2642;
                        float _2650 = _2647 * _2643;
                        float _2651 = dot(vec3(_401, _404, _407), vec3(_2648, _2649, _2650));
                        float _2656 = 1.0 - (_2644 * _2601.w);
                        float _3872 = isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : max(_2656, 0.0));
                        float _2657 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
                        float _2658 = sqrt(_2644) * _2620.w;
                        float _2661 = 1.39999997615814208984375 / (_2658 + 1.39999997615814208984375);
                        float _2662 = _2661 * _2661;
                        float _2665 = ((1.0 - _2662) * _2651) + _2662;
                        float _2668 = _2658 * _2658;
                        float _2672 = ((isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0))) * _2657) / ((_2668 * 0.699999988079071044921875) + 1.0);
                        float _2676 = (-0.0) - _1543;
                        float _2677 = (-0.0) - _1544;
                        float _2678 = (-0.0) - _1545;
                        float _2682 = inversesqrt(dot(vec3(_2676, _2677, _2678), vec3(_2676, _2677, _2678)));
                        float _2683 = _2682 * _2676;
                        float _2684 = _2682 * _2677;
                        float _2685 = _2682 * _2678;
                        float _2692 = exp2(log2(1.0 / ((_2668 * 3.5) + 5.0)) * 0.25);
                        float _2693 = 1.0 - _477;
                        float _2700 = sqrt(1.0 - ((1.0 - (_2693 * _2693)) * (1.0 - (_2692 * _2692))));
                        float _2701 = _2700 * _2700;
                        float _2702 = _2701 * _2701;
                        float _2703 = _2683 + _2648;
                        float _2704 = _2684 + _2649;
                        float _2705 = _2685 + _2650;
                        float _2709 = inversesqrt(dot(vec3(_2703, _2704, _2705), vec3(_2703, _2704, _2705)));
                        float _2713 = dot(vec3(_401, _404, _407), vec3(_2683, _2684, _2685));
                        float _3888 = isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0));
                        float _2716 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
                        float _2717 = dot(vec3(_401, _404, _407), vec3(_2709 * _2703, _2709 * _2704, _2709 * _2705));
                        float _3899 = isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0));
                        float _2720 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
                        float _2724 = ((_2720 * _2720) * (_2702 + (-1.0))) + 1.0;
                        float _2725 = _2661 * _2701;
                        float _2726 = _2725 * _2725;
                        float _2729 = ((1.0 - _2726) * _2651) + _2726;
                        float _3910 = isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0));
                        float _2730 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
                        float _2731 = 1.0 - _2701;
                        float _2741 = (0.5 / (((_2730 * ((_2716 * _2731) + _2701)) + 9.9999999392252902907785028219223e-09) + (((_2730 * _2731) + _2701) * _2716))) * _2730;
                        float _3921 = isnan(0.0) ? _2741 : (isnan(_2741) ? 0.0 : max(_2741, 0.0));
                        float _2752 = (((_2702 * 3.1415927410125732421875) * (isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0)))) / ((_2724 * _2724) * ((_2668 * 2.1991131305694580078125) + 3.141590118408203125))) * _2657;
                        _2510 = (_2672 * _2620.x) + _2578;
                        _2511 = (_2672 * _2620.y) + _2579;
                        _2512 = (_2672 * _2620.z) + _2580;
                        _2507 = (_2752 * _2637.x) + _2575;
                        _2508 = (_2752 * _2637.y) + _2576;
                        _2509 = (_2752 * _2637.z) + _2577;
                        if (_2582 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2575 = _2507;
                            _2576 = _2508;
                            _2577 = _2509;
                            _2578 = _2510;
                            _2579 = _2511;
                            _2580 = _2512;
                            _2581 = _2582;
                        }
                    }
                    frontier_phi_58_pred = _2510;
                    frontier_phi_58_pred_1 = _2509;
                    frontier_phi_58_pred_2 = _2508;
                    frontier_phi_58_pred_3 = _2507;
                    frontier_phi_58_pred_4 = _2511;
                    frontier_phi_58_pred_5 = _2512;
                }
                _2266 = frontier_phi_58_pred;
                _2264 = frontier_phi_58_pred_1;
                _2262 = frontier_phi_58_pred_2;
                _2260 = frontier_phi_58_pred_3;
                _2268 = frontier_phi_58_pred_4;
                _2270 = frontier_phi_58_pred_5;
                uint _2437 = _2436 + 1u;
                if (_2437 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2430 = _2260;
                    _2431 = _2262;
                    _2432 = _2264;
                    _2433 = _2266;
                    _2434 = _2268;
                    _2435 = _2270;
                    _2436 = _2437;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2259 = _2260;
            _2261 = _2262;
            _2263 = _2264;
            _2265 = _2266;
            _2267 = _2268;
            _2269 = _2270;
        }
        uvec4 _2273 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2274 = _2273.z;
        uint _2276 = (_2274 >> 8u) & 15u;
        float _2398;
        float _2400;
        float _2402;
        float _2404;
        float _2406;
        float _2408;
        if (((4294967295u << _2276) & _2154) == 0u)
        {
            _2398 = _2259;
            _2400 = _2261;
            _2402 = _2263;
            _2404 = _2265;
            _2406 = _2267;
            _2408 = _2269;
        }
        else
        {
            float _2423 = inversesqrt(dot(vec3(_1543, _1544, _1545), vec3(_1543, _1544, _1545)));
            float _2424 = _2423 * _1543;
            float _2425 = _2423 * _1544;
            float _2426 = _2423 * _1545;
            float frontier_phi_51_52_ladder;
            float frontier_phi_51_52_ladder_1;
            float frontier_phi_51_52_ladder_2;
            float frontier_phi_51_52_ladder_3;
            float frontier_phi_51_52_ladder_4;
            float frontier_phi_51_52_ladder_5;
            if (_2276 < ((_2274 >> 12u) & 15u))
            {
                float _2399;
                float _2401;
                float _2403;
                float _2405;
                float _2407;
                float _2409;
                float _2558 = _2259;
                float _2559 = _2261;
                float _2560 = _2263;
                float _2561 = _2265;
                float _2562 = _2267;
                float _2563 = _2269;
                uint _2564 = _2276;
                uint _2573;
                bool _2574;
                for (;;)
                {
                    _2573 = texelFetch(g_lightClassification, int((((_2148 << 5u) + (_2134 << 9u)) + (_2564 << 2u)) >> 2u)).x;
                    _2574 = _2573 == 0u;
                    float frontier_phi_64_pred;
                    float frontier_phi_64_pred_1;
                    float frontier_phi_64_pred_2;
                    float frontier_phi_64_pred_3;
                    float frontier_phi_64_pred_4;
                    float frontier_phi_64_pred_5;
                    if (_2574)
                    {
                        frontier_phi_64_pred = _2561;
                        frontier_phi_64_pred_1 = _2560;
                        frontier_phi_64_pred_2 = _2559;
                        frontier_phi_64_pred_3 = _2558;
                        frontier_phi_64_pred_4 = _2563;
                        frontier_phi_64_pred_5 = _2562;
                    }
                    else
                    {
                        float _2757;
                        float _2758;
                        float _2759;
                        float _2760;
                        float _2761;
                        float _2762;
                        float _3053;
                        float _3054;
                        float _3055;
                        float _3056;
                        float _3057;
                        float _3058;
                        float _2770 = _2558;
                        float _2771 = _2559;
                        float _2772 = _2560;
                        float _2773 = _2561;
                        float _2774 = _2562;
                        float _2775 = _2563;
                        uint _2776 = _2573;
                        uint _2777;
                        vec4 _2802;
                        float _2803;
                        vec4 _2818;
                        vec3 _2830;
                        vec4 _2846;
                        vec4 _2862;
                        float _2909;
                        bool _2910;
                        for (;;)
                        {
                            uint _2787 = ((_2564 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2776));
                            _2777 = (_2776 + 4294967295u) & _2776;
                            uint _2789 = _2787 * 40u;
                            _2802 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2789)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2789 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2789 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2789 + 3u)).x));
                            _2803 = _2802.w;
                            uint _2805 = (_2787 * 40u) + 4u;
                            _2818 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2805)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2805 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2805 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2805 + 3u)).x));
                            uint _2820 = (_2787 * 40u) + 8u;
                            _2830 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2820)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2820 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2820 + 2u)).x));
                            uint _2833 = (_2787 * 40u) + 16u;
                            _2846 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2833)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2833 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2833 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2833 + 3u)).x));
                            uint _2849 = (_2787 * 40u) + 20u;
                            _2862 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2849)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2849 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2849 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2849 + 3u)).x));
                            uint _2865 = (_2787 * 40u) + 24u;
                            vec4 _2878 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2865)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2865 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2865 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2865 + 3u)).x));
                            uint _2884 = (_2787 * 40u) + 28u;
                            vec4 _2897 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2884)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2884 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2884 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2884 + 3u)).x));
                            _2909 = fma(_1545, _2897.z, fma(_1544, _2897.y, _2897.x * _1543)) + _2897.w;
                            _2910 = !((fma(_1545, _2878.z, fma(_1544, _2878.y, _2878.x * _1543)) + _2878.w) <= 0.0);
                            float frontier_phi_70_pred;
                            float frontier_phi_70_pred_1;
                            float frontier_phi_70_pred_2;
                            float frontier_phi_70_pred_3;
                            float frontier_phi_70_pred_4;
                            float frontier_phi_70_pred_5;
                            if (_2910)
                            {
                                float _2937 = _2802.x - _1543;
                                float _2938 = _2802.y - _1544;
                                float _2939 = _2802.z - _1545;
                                float _2940 = dot(vec3(_2937, _2938, _2939), vec3(_2937, _2938, _2939));
                                float _2943 = inversesqrt(_2940);
                                float _2944 = _2943 * _2937;
                                float _2945 = _2943 * _2938;
                                float _2946 = _2943 * _2939;
                                float _2950 = 1.0 - (_2940 / (_2803 * _2803));
                                float _3932 = isnan(0.0) ? _2950 : (isnan(_2950) ? 0.0 : max(_2950, 0.0));
                                float _2951 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
                                float _2955 = sqrt(_2940) * _2818.w;
                                float _2957 = 1.39999997615814208984375 / (_2955 + 1.39999997615814208984375);
                                float _2958 = _2957 * _2957;
                                float _2961 = ((1.0 - _2958) * dot(vec3(_2944, _2945, _2946), vec3(_401, _404, _407))) + _2958;
                                float _2964 = _2955 * _2955;
                                float _2968 = (fma(_1545, _2846.z, fma(_1544, _2846.y, _2846.x * _1543)) + _2846.w) / _2909;
                                float _2969 = (fma(_1545, _2862.z, fma(_1544, _2862.y, _2862.x * _1543)) + _2862.w) / _2909;
                                float _2973 = 1.0 - dot(vec2(_2968, _2969), vec2(_2968, _2969));
                                float _3948 = isnan(0.0) ? _2973 : (isnan(_2973) ? 0.0 : max(_2973, 0.0));
                                float _2974 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
                                float _2975 = _2974 * (((isnan(0.0) ? _2961 : (isnan(_2961) ? 0.0 : max(_2961, 0.0))) * _2951) / ((_2964 * 0.699999988079071044921875) + 1.0));
                                float _2987 = exp2(log2(1.0 / ((_2964 * 3.5) + 5.0)) * 0.25);
                                float _2988 = 1.0 - _477;
                                float _2995 = sqrt(1.0 - ((1.0 - (_2988 * _2988)) * (1.0 - (_2987 * _2987))));
                                float _2996 = _2995 * _2995;
                                float _2997 = _2996 * _2996;
                                float _2998 = _2944 - _2424;
                                float _2999 = _2945 - _2425;
                                float _3000 = _2946 - _2426;
                                float _3004 = inversesqrt(dot(vec3(_2998, _2999, _3000), vec3(_2998, _2999, _3000)));
                                float _3008 = dot(vec3(_401, _404, _407), vec3((-0.0) - _2424, (-0.0) - _2425, (-0.0) - _2426));
                                float _3959 = isnan(0.0) ? _3008 : (isnan(_3008) ? 0.0 : max(_3008, 0.0));
                                float _3011 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
                                float _3012 = dot(vec3(_401, _404, _407), vec3(_3004 * _2998, _3004 * _2999, _3004 * _3000));
                                float _3970 = isnan(0.0) ? _3012 : (isnan(_3012) ? 0.0 : max(_3012, 0.0));
                                float _3015 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
                                float _3019 = ((_3015 * _3015) * (_2997 + (-1.0))) + 1.0;
                                float _3020 = _2957 * _2996;
                                float _3021 = _3020 * _3020;
                                float _3027 = ((1.0 - _3021) * dot(vec3(_401, _404, _407), vec3(_2944, _2945, _2946))) + _3021;
                                float _3981 = isnan(0.0) ? _3027 : (isnan(_3027) ? 0.0 : max(_3027, 0.0));
                                float _3028 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
                                float _3029 = 1.0 - _2996;
                                float _3039 = (0.5 / (((_3028 * ((_3011 * _3029) + _2996)) + 9.9999999392252902907785028219223e-09) + (((_3028 * _3029) + _2996) * _3011))) * _3028;
                                float _3992 = isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : max(_3039, 0.0));
                                float _3049 = (_2974 * _2951) * (((_2997 * 3.1415927410125732421875) * (isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0)))) / ((_3019 * _3019) * ((_2964 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_70_pred = _2975 * _2818.x;
                                frontier_phi_70_pred_1 = _3049 * _2830.z;
                                frontier_phi_70_pred_2 = _3049 * _2830.y;
                                frontier_phi_70_pred_3 = _3049 * _2830.x;
                                frontier_phi_70_pred_4 = _2975 * _2818.z;
                                frontier_phi_70_pred_5 = _2975 * _2818.y;
                            }
                            else
                            {
                                frontier_phi_70_pred = 0.0;
                                frontier_phi_70_pred_1 = 0.0;
                                frontier_phi_70_pred_2 = 0.0;
                                frontier_phi_70_pred_3 = 0.0;
                                frontier_phi_70_pred_4 = 0.0;
                                frontier_phi_70_pred_5 = 0.0;
                            }
                            _3056 = frontier_phi_70_pred;
                            _3055 = frontier_phi_70_pred_1;
                            _3054 = frontier_phi_70_pred_2;
                            _3053 = frontier_phi_70_pred_3;
                            _3058 = frontier_phi_70_pred_4;
                            _3057 = frontier_phi_70_pred_5;
                            _2760 = _3056 + _2773;
                            _2761 = _3057 + _2774;
                            _2762 = _3058 + _2775;
                            _2757 = _3053 + _2770;
                            _2758 = _3054 + _2771;
                            _2759 = _3055 + _2772;
                            if (_2777 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2770 = _2757;
                                _2771 = _2758;
                                _2772 = _2759;
                                _2773 = _2760;
                                _2774 = _2761;
                                _2775 = _2762;
                                _2776 = _2777;
                                continue;
                            }
                        }
                        frontier_phi_64_pred = _2760;
                        frontier_phi_64_pred_1 = _2759;
                        frontier_phi_64_pred_2 = _2758;
                        frontier_phi_64_pred_3 = _2757;
                        frontier_phi_64_pred_4 = _2762;
                        frontier_phi_64_pred_5 = _2761;
                    }
                    _2405 = frontier_phi_64_pred;
                    _2403 = frontier_phi_64_pred_1;
                    _2401 = frontier_phi_64_pred_2;
                    _2399 = frontier_phi_64_pred_3;
                    _2409 = frontier_phi_64_pred_4;
                    _2407 = frontier_phi_64_pred_5;
                    uint _2565 = _2564 + 1u;
                    if (_2565 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2558 = _2399;
                        _2559 = _2401;
                        _2560 = _2403;
                        _2561 = _2405;
                        _2562 = _2407;
                        _2563 = _2409;
                        _2564 = _2565;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_51_52_ladder = _2409;
                frontier_phi_51_52_ladder_1 = _2407;
                frontier_phi_51_52_ladder_2 = _2403;
                frontier_phi_51_52_ladder_3 = _2401;
                frontier_phi_51_52_ladder_4 = _2405;
                frontier_phi_51_52_ladder_5 = _2399;
            }
            else
            {
                frontier_phi_51_52_ladder = _2269;
                frontier_phi_51_52_ladder_1 = _2267;
                frontier_phi_51_52_ladder_2 = _2263;
                frontier_phi_51_52_ladder_3 = _2261;
                frontier_phi_51_52_ladder_4 = _2265;
                frontier_phi_51_52_ladder_5 = _2259;
            }
            _2398 = frontier_phi_51_52_ladder_5;
            _2400 = frontier_phi_51_52_ladder_3;
            _2402 = frontier_phi_51_52_ladder_2;
            _2404 = frontier_phi_51_52_ladder_4;
            _2406 = frontier_phi_51_52_ladder_1;
            _2408 = frontier_phi_51_52_ladder;
        }
        float _2413 = isnan(1.0) ? _461 : (isnan(_461) ? 1.0 : min(_461, 1.0));
        _2167 = (_2413 * _2404) + _1835;
        _2169 = (_2413 * _2406) + _1836;
        _2171 = (_2413 * _2408) + _1837;
        _2173 = ((_2398 * _446) * _2413) + _2002;
        _2175 = ((_2400 * _448) * _2413) + _2003;
        _2177 = ((_2402 * _449) * _2413) + _2004;
    }
    else
    {
        _2167 = _1835;
        _2169 = _1836;
        _2171 = _1837;
        _2173 = _2002;
        _2175 = _2003;
        _2177 = _2004;
    }
    float _4008 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _4019 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _4030 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    uint _2197 = _420 + 6u;
    float _2205 = _379 / cbSceneParam._m0[86u].x;
    float _2206 = _380 / cbSceneParam._m0[86u].y;
    vec4 _2220 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2205, _2206, (log2((isnan(cbSceneParam._m0[77u].w) ? _311 : (isnan(_311) ? cbSceneParam._m0[77u].w : min(_311, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2222 = _2220.x;
    float _2223 = _2220.y;
    float _2224 = _2220.z;
    float _2225 = _2220.w;
    float _2322;
    float _2324;
    float _2326;
    float _2328;
    if (_311 > cbSceneParam._m0[78u].w)
    {
        float _2284 = isnan(_311) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _311 : min(cbSceneParam._m0[80u].w, _311));
        float _2285 = _2284 / _311;
        float _2296 = _2285 * _364;
        float _2297 = _365 * _2285;
        float _2298 = (-0.0) - _2297;
        float _2300 = _2285 * _366;
        float _2302 = (cbSceneParam._m0[77u].w * _2298) / _2284;
        float _2303 = _2302 + cbSceneParam._m0[79u].w;
        float _2304 = cbSceneParam._m0[79u].w - _2297;
        float _2310 = sqrt(((_2296 * _2296) + (_2297 * _2297)) + (_2300 * _2300));
        float _2313 = (1.0 - (cbSceneParam._m0[77u].w / _2284)) * _2310;
        float _2318 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2320 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2520;
        if (abs((_2298 - _2302) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2520 = ((((_2303 > 0.0) ? exp2(_2318 * _2303) : (2.0 - exp2(_2320 * _2303))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2313;
        }
        else
        {
            float _2459 = 1.0 / cbSceneParam._m0[80u].x;
            float _2460 = isnan(_2304) ? _2303 : (isnan(_2303) ? _2304 : max(_2303, _2304));
            float _2461 = isnan(_2304) ? _2303 : (isnan(_2303) ? _2304 : min(_2303, _2304));
            float _2470 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : min(_2460, 0.0));
            float _2471 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : min(_2461, 0.0));
            _2520 = ((abs(_2310 / _2298) * cbSceneParam._m0[80u].y) * ((((_2470 - _2471) * 2.0) - ((exp2(_2318 * (isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0)))) - exp2(_2318 * (isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0))))) * _2459)) - ((exp2(_2320 * _2470) - exp2(_2320 * _2471)) * _2459))) + (_2313 * cbSceneParam._m0[80u].z);
        }
        vec4 _2522 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2205, _2206, 1.0), 0.0);
        float _2531 = exp2((_2520 * (-1.44269502162933349609375)) * (1.0 - _2522.w));
        float _2532 = log2(_2531);
        float _2548 = log2(_2225);
        _2322 = (exp2(_2548 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2532 * cbSceneParam._m0[78u].x)) * _2522.x) / cbSceneParam._m0[78u].x)) + _2222;
        _2324 = (exp2(_2548 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2532 * cbSceneParam._m0[78u].y)) * _2522.y) / cbSceneParam._m0[78u].y)) + _2223;
        _2326 = (exp2(_2548 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2532 * cbSceneParam._m0[78u].z)) * _2522.z) / cbSceneParam._m0[78u].z)) + _2224;
        _2328 = _2531 * _2225;
    }
    else
    {
        _2322 = _2222;
        _2324 = _2223;
        _2326 = _2224;
        _2328 = _2225;
    }
    float _2340 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2341 = _2340 == 3.0;
    float _2342 = log2(_2328);
    float _2349 = exp2(_2342 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0))) * (_2167 + ((isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0))) * _461))) + ((_2173 + ((isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0))) * _1271)) * cbPerFrame._m0[3u].x));
    float _2350 = exp2(_2342 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0))) * (_2169 + ((isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0))) * _461))) + ((_2175 + ((isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0))) * _1271)) * cbPerFrame._m0[3u].x));
    float _2351 = exp2(_2342 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0))) * (_2171 + ((isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0))) * _461))) + ((_2177 + ((isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0))) * _1271)) * cbPerFrame._m0[3u].x));
    float _2360 = (_2340 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2360 * (_2341 ? _2349 : (_2349 + (cbSceneParam._m0[72u].w * _2322)));
    SV_Target.y = _2360 * (_2341 ? _2350 : (_2350 + (cbSceneParam._m0[72u].w * _2324)));
    SV_Target.z = _2360 * (_2341 ? _2351 : (_2351 + (cbSceneParam._m0[72u].w * _2326)));
    SV_Target.w = cbInstanceData._m0[_2197].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2197].w;
}


