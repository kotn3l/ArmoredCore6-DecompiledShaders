#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_Ground_blend_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D S_Ground_blend_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D S_Ground_blend_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _973;
float _3088;
float _3089;
float _3090;
float _3091;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _192 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _199 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _206 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _254 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _264 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _254);
    float _265 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _254);
    float _266 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _254);
    vec4 _284 = texture(sampler2D(S_Ground_blend_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _291 = _284.x * cbMtdParam._m0[9u].x;
    float _292 = _284.y * cbMtdParam._m0[9u].y;
    float _293 = _284.z * cbMtdParam._m0[9u].z;
    float _302 = sqrt(((_264 * _264) + (_265 * _265)) + (_266 * _266));
    float _305 = cbMtdParam._m0[10u].z - cbMtdParam._m0[10u].y;
    float _307 = (_302 - cbMtdParam._m0[10u].y) / (isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0)));
    float _3105 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _315 = cbMtdParam._m0[11u].x - cbMtdParam._m0[10u].w;
    float _317 = (_302 - cbMtdParam._m0[10u].w) / (isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0)));
    float _3121 = isnan(0.0) ? _317 : (isnan(_317) ? 0.0 : max(_317, 0.0));
    vec4 _329 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _331 = _329.x;
    float _355 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _331)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _331))) - POSITION_1.w) / cbMtdParam._m0[10u].x;
    float _3132 = isnan(0.0) ? _355 : (isnan(_355) ? 0.0 : max(_355, 0.0));
    float _361 = gl_FragCoord.x * 0.125;
    float _363 = gl_FragCoord.y * 0.125;
    vec4 _365 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_361, _363));
    float _373 = float(((((_284.w * TEXCOORD_1.z) * (isnan(1.0) ? _3105 : (isnan(_3105) ? 1.0 : min(_3105, 1.0)))) * (1.0 - (isnan(1.0) ? _3121 : (isnan(_3121) ? 1.0 : min(_3121, 1.0))))) * (isnan(1.0) ? _3132 : (isnan(_3132) ? 1.0 : min(_3132, 1.0)))) >= ((_365.w * 0.9900000095367431640625) + 0.00999999977648258209228515625));
    vec4 _385 = texture(sampler2D(S_Ground_blend_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[2u].w));
    float _387 = _385.x;
    vec4 _399 = texture(sampler2D(S_Ground_blend_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _403 = _399.z;
    float _407 = (_399.x * 2.0) + (-1.0);
    float _409 = (_399.y * 2.0) + (-1.0);
    float _410 = dot(vec2(_407, _409), vec2(_407, _409));
    float _3143 = isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : max(_410, 0.0));
    float _415 = sqrt(1.0 - (isnan(1.0) ? _3143 : (isnan(_3143) ? 1.0 : min(_3143, 1.0))));
    float _418 = fma(_415, _199 * NORMAL.x, fma(_409, _206 * TANGENT.x, (_192 * _184) * _407));
    float _421 = fma(_415, _199 * NORMAL.y, fma(_409, _206 * TANGENT.y, (_192 * _185) * _407));
    float _424 = fma(_415, _199 * NORMAL.z, fma(_409, _206 * TANGENT.z, (_192 * _186) * _407));
    float _428 = inversesqrt(dot(vec3(_418, _421, _424), vec3(_418, _421, _424)));
    float _429 = _428 * _418;
    float _430 = _428 * _421;
    float _431 = _428 * _424;
    float _3154 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _432 = isnan(1.0) ? _3154 : (isnan(_3154) ? 1.0 : min(_3154, 1.0));
    float _3165 = isnan(0.0) ? _291 : (isnan(_291) ? 0.0 : max(_291, 0.0));
    float _3176 = isnan(0.0) ? _292 : (isnan(_292) ? 0.0 : max(_292, 0.0));
    float _3187 = isnan(0.0) ? _293 : (isnan(_293) ? 0.0 : max(_293, 0.0));
    float _3198 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _436 = isnan(1.0) ? _3198 : (isnan(_3198) ? 1.0 : min(_3198, 1.0));
    float _450 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _490 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _499 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _490);
    float _500 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _490);
    float _501 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _490);
    float _505 = inversesqrt(dot(vec3(_499, _500, _501), vec3(_499, _500, _501)));
    float _506 = _499 * _505;
    float _507 = _500 * _505;
    float _508 = _501 * _505;
    vec4 _509 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_361, _363));
    float _511 = _509.w;
    float _516 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _517 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _538 = fma(_431, cbSceneParam._m0[5u].z, fma(_430, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _429));
    float _541 = fma(_431, cbSceneParam._m0[6u].z, fma(_430, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _429));
    float _544 = fma(_431, cbSceneParam._m0[7u].z, fma(_430, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _429));
    uint _557 = uint(roundEven(NORMAL.w)) * 13u;
    uint _559 = _557 + 9u;
    uint _560 = _559 + uint(cbMatDynParam._m0[0u].w);
    float _566 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3165 : (isnan(_3165) ? 1.0 : min(_3165, 1.0)))) * cbInstanceData._m0[_560].x;
    float _567 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3176 : (isnan(_3176) ? 1.0 : min(_3176, 1.0)))) * cbInstanceData._m0[_560].y;
    float _568 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3187 : (isnan(_3187) ? 1.0 : min(_3187, 1.0)))) * cbInstanceData._m0[_560].z;
    float _3209 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _569 = isnan(1.0) ? _3209 : (isnan(_3209) ? 1.0 : min(_3209, 1.0));
    float _3220 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _570 = isnan(1.0) ? _3220 : (isnan(_3220) ? 1.0 : min(_3220, 1.0));
    float _3231 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _571 = isnan(1.0) ? _3231 : (isnan(_3231) ? 1.0 : min(_3231, 1.0));
    float _572 = 1.0 - _436;
    float _573 = _569 * _572;
    float _574 = _570 * _572;
    float _575 = _571 * _572;
    float _580 = (_569 + (-0.039999999105930328369140625)) * _436;
    float _581 = (_570 + (-0.039999999105930328369140625)) * _436;
    float _582 = (_571 + (-0.039999999105930328369140625)) * _436;
    float _583 = _580 + 0.039999999105930328369140625;
    float _585 = _581 + 0.039999999105930328369140625;
    float _586 = _582 + 0.039999999105930328369140625;
    vec4 _595 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _516, cbSceneParam._m0[86u].y * _517));
    float _598 = _595.x * TEXCOORD_1.w;
    float _599 = dot(vec3(_429, _430, _431), vec3(_506, _507, _508));
    float _602 = _599 * 2.0;
    float _606 = (_602 * _429) - _506;
    float _607 = (_602 * _430) - _507;
    float _608 = (_602 * _431) - _508;
    float _612 = abs(dot(vec3(_506, _507, _508), vec3(_429, _430, _431)));
    float _3242 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _614 = sqrt(_432);
    float _627 = exp2((_614 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3242 : (isnan(_3242) ? 1.0 : min(_3242, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_614 * 3.0));
    float _633 = (1.0 - _627) * ((_614 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _634 = _627 * _614;
    float _662 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _666 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _670 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _972;
    float _974;
    float _975;
    float _976;
    float _977;
    float _978;
    float _979;
    float _980;
    float _981;
    float _982;
    float _983;
    float _984;
    float _985;
    float _986;
    float _987;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _697 = fma(_670, cbModelParam._m0[26u].z, fma(_666, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _662));
        float _701 = fma(_670, cbModelParam._m0[27u].z, fma(_666, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _662));
        float _705 = fma(_670, cbModelParam._m0[28u].z, fma(_666, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _662));
        float _730 = _662 + _429;
        float _731 = _666 + _430;
        float _732 = _670 + _431;
        float _742 = fma(_732, cbModelParam._m0[26u].z, fma(_731, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _730)) - _697;
        float _743 = fma(_732, cbModelParam._m0[27u].z, fma(_731, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _730)) - _701;
        float _744 = fma(_732, cbModelParam._m0[28u].z, fma(_731, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _730)) - _705;
        float _748 = inversesqrt(dot(vec3(_742, _743, _744), vec3(_742, _743, _744)));
        float _761 = ((_748 * _742) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_697 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _762 = ((_748 * _743) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_701 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _763 = ((_748 * _744) / cbModelParam._m0[34u].z) + ((((((_705 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _766 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_761, _762, _763), 0.0);
        vec4 _773 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_761, _762, _763), 0.0);
        vec4 _780 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_761, _762, _763), 0.0);
        vec4 _787 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_761, _762, _763), 0.0);
        float _800 = exp2((_766.w + (-0.5)) * 20.0) * 2.0;
        float _801 = _800 * (_766.x + (-0.5));
        float _802 = _800 * (_766.y + (-0.5));
        float _803 = _800 * (_766.z + (-0.5));
        float _810 = exp2((_773.w + (-0.5)) * 20.0) * 2.0;
        float _811 = _810 * (_773.x + (-0.5));
        float _812 = _810 * (_773.y + (-0.5));
        float _813 = _810 * (_773.z + (-0.5));
        float _820 = exp2((_780.w + (-0.5)) * 20.0) * 2.0;
        float _821 = _820 * (_780.x + (-0.5));
        float _822 = _820 * (_780.y + (-0.5));
        float _823 = _820 * (_780.z + (-0.5));
        float _830 = exp2((_787.w + (-0.5)) * 20.0) * 2.0;
        float _831 = _830 * (_787.x + (-0.5));
        float _832 = _830 * (_787.y + (-0.5));
        float _833 = _830 * (_787.z + (-0.5));
        float _834 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
        float _835 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
        float _836 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
        float _837 = _801 * 0.5;
        float _838 = _811 * 0.5;
        float _839 = _821 * 0.5;
        float _840 = dot(vec3(_837, _838, _839), vec3(_837, _838, _839));
        float _845 = (_840 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_840);
        float _854 = (dot(vec3(_429, _430, _431), vec3(_845 * _837, _845 * _838, _845 * _839)) + 1.0) * 0.5;
        float _3268 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
        float _864 = sqrt(((_838 * _838) + (_837 * _837)) + (_839 * _839)) / (_834 + 9.9999997473787516355514526367188e-06);
        float _3279 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
        float _865 = isnan(1.0) ? _3279 : (isnan(_3279) ? 1.0 : min(_3279, 1.0));
        float _866 = _865 * 2.0;
        float _870 = (1.0 - _865) / (_865 + 1.0);
        float _3290 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
        float _871 = isnan(1.0) ? _3290 : (isnan(_3290) ? 1.0 : min(_3290, 1.0));
        float _880 = ((((1.0 - _871) * (_866 + 2.0)) * exp2(log2(isnan(1.0) ? _3268 : (isnan(_3268) ? 1.0 : min(_3268, 1.0))) * (_866 + 1.0))) + _871) * _834;
        float _881 = _802 * 0.5;
        float _882 = _812 * 0.5;
        float _883 = _822 * 0.5;
        float _884 = dot(vec3(_881, _882, _883), vec3(_881, _882, _883));
        float _889 = (_884 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_884);
        float _897 = (dot(vec3(_429, _430, _431), vec3(_889 * _881, _889 * _882, _889 * _883)) + 1.0) * 0.5;
        float _3301 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
        float _906 = sqrt(((_882 * _882) + (_881 * _881)) + (_883 * _883)) / (_835 + 9.9999997473787516355514526367188e-06);
        float _3312 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
        float _907 = isnan(1.0) ? _3312 : (isnan(_3312) ? 1.0 : min(_3312, 1.0));
        float _908 = _907 * 2.0;
        float _912 = (1.0 - _907) / (_907 + 1.0);
        float _3323 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
        float _913 = isnan(1.0) ? _3323 : (isnan(_3323) ? 1.0 : min(_3323, 1.0));
        float _922 = ((((1.0 - _913) * (_908 + 2.0)) * exp2(log2(isnan(1.0) ? _3301 : (isnan(_3301) ? 1.0 : min(_3301, 1.0))) * (_908 + 1.0))) + _913) * _835;
        float _923 = _803 * 0.5;
        float _924 = _813 * 0.5;
        float _925 = _823 * 0.5;
        float _926 = dot(vec3(_923, _924, _925), vec3(_923, _924, _925));
        float _931 = (_926 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_926);
        float _939 = (dot(vec3(_429, _430, _431), vec3(_931 * _923, _931 * _924, _931 * _925)) + 1.0) * 0.5;
        float _3334 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
        float _948 = sqrt(((_924 * _924) + (_923 * _923)) + (_925 * _925)) / (_836 + 9.9999997473787516355514526367188e-06);
        float _3345 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _949 = isnan(1.0) ? _3345 : (isnan(_3345) ? 1.0 : min(_3345, 1.0));
        float _950 = _949 * 2.0;
        float _954 = (1.0 - _949) / (_949 + 1.0);
        float _3356 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _955 = isnan(1.0) ? _3356 : (isnan(_3356) ? 1.0 : min(_3356, 1.0));
        float _964 = ((((1.0 - _955) * (_950 + 2.0)) * exp2(log2(isnan(1.0) ? _3334 : (isnan(_3334) ? 1.0 : min(_3334, 1.0))) * (_950 + 1.0))) + _955) * _836;
        _972 = _803;
        _974 = _802;
        _975 = _801;
        _976 = _813;
        _977 = _812;
        _978 = _811;
        _979 = _823;
        _980 = _822;
        _981 = _821;
        _982 = _836;
        _983 = _835;
        _984 = _834;
        _985 = cbModelParam._m0[36u].z * (isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0)));
        _986 = cbModelParam._m0[36u].z * (isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0)));
        _987 = cbModelParam._m0[36u].z * (isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0)));
    }
    else
    {
        _972 = _973;
        _974 = _973;
        _975 = _973;
        _976 = _973;
        _977 = _973;
        _978 = _973;
        _979 = _973;
        _980 = _973;
        _981 = _973;
        _982 = _973;
        _983 = _973;
        _984 = _973;
        _985 = 0.0;
        _986 = 0.0;
        _987 = 0.0;
    }
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1013 = fma(_670, cbModelParam._m0[30u].z, fma(_666, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _662));
        float _1017 = fma(_670, cbModelParam._m0[31u].z, fma(_666, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _662));
        float _1021 = fma(_670, cbModelParam._m0[32u].z, fma(_666, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _662));
        float _1044 = _662 + _429;
        float _1045 = _666 + _430;
        float _1046 = _670 + _431;
        float _1056 = fma(_1046, cbModelParam._m0[30u].z, fma(_1045, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1044)) - _1013;
        float _1057 = fma(_1046, cbModelParam._m0[31u].z, fma(_1045, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1044)) - _1017;
        float _1058 = fma(_1046, cbModelParam._m0[32u].z, fma(_1045, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1044)) - _1021;
        float _1062 = inversesqrt(dot(vec3(_1056, _1057, _1058), vec3(_1056, _1057, _1058)));
        float _1075 = ((_1062 * _1056) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1013 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1076 = ((_1062 * _1057) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1017 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1077 = ((_1062 * _1058) / cbModelParam._m0[35u].z) + ((((((_1021 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1079 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1075, _1076, _1077), 0.0);
        vec4 _1086 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1075, _1076, _1077), 0.0);
        vec4 _1093 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1075, _1076, _1077), 0.0);
        vec4 _1100 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1075, _1076, _1077), 0.0);
        float _1112 = exp2((_1079.w + (-0.5)) * 20.0) * 2.0;
        float _1113 = _1112 * (_1079.x + (-0.5));
        float _1114 = _1112 * (_1079.y + (-0.5));
        float _1115 = _1112 * (_1079.z + (-0.5));
        float _1122 = exp2((_1086.w + (-0.5)) * 20.0) * 2.0;
        float _1123 = _1122 * (_1086.x + (-0.5));
        float _1124 = _1122 * (_1086.y + (-0.5));
        float _1125 = _1122 * (_1086.z + (-0.5));
        float _1132 = exp2((_1093.w + (-0.5)) * 20.0) * 2.0;
        float _1133 = _1132 * (_1093.x + (-0.5));
        float _1134 = _1132 * (_1093.y + (-0.5));
        float _1135 = _1132 * (_1093.z + (-0.5));
        float _1142 = exp2((_1100.w + (-0.5)) * 20.0) * 2.0;
        float _1143 = _1142 * (_1100.x + (-0.5));
        float _1144 = _1142 * (_1100.y + (-0.5));
        float _1145 = _1142 * (_1100.z + (-0.5));
        float _1146 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1147 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1148 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1149 = _1113 * 0.5;
        float _1150 = _1123 * 0.5;
        float _1151 = _1133 * 0.5;
        float _1152 = dot(vec3(_1149, _1150, _1151), vec3(_1149, _1150, _1151));
        float _1157 = (_1152 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1152);
        float _1165 = (dot(vec3(_429, _430, _431), vec3(_1157 * _1149, _1157 * _1150, _1157 * _1151)) + 1.0) * 0.5;
        float _3397 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1174 = sqrt(((_1150 * _1150) + (_1149 * _1149)) + (_1151 * _1151)) / (_1146 + 9.9999997473787516355514526367188e-06);
        float _3408 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1175 = isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0));
        float _1176 = _1175 * 2.0;
        float _1180 = (1.0 - _1175) / (_1175 + 1.0);
        float _3419 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1181 = isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0));
        float _1190 = ((((1.0 - _1181) * (_1176 + 2.0)) * exp2(log2(isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0))) * (_1176 + 1.0))) + _1181) * _1146;
        float _1191 = _1114 * 0.5;
        float _1192 = _1124 * 0.5;
        float _1193 = _1134 * 0.5;
        float _1194 = dot(vec3(_1191, _1192, _1193), vec3(_1191, _1192, _1193));
        float _1199 = (_1194 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1194);
        float _1207 = (dot(vec3(_429, _430, _431), vec3(_1199 * _1191, _1199 * _1192, _1199 * _1193)) + 1.0) * 0.5;
        float _3430 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1216 = sqrt(((_1192 * _1192) + (_1191 * _1191)) + (_1193 * _1193)) / (_1147 + 9.9999997473787516355514526367188e-06);
        float _3441 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1217 = isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0));
        float _1218 = _1217 * 2.0;
        float _1222 = (1.0 - _1217) / (_1217 + 1.0);
        float _3452 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1223 = isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0));
        float _1232 = ((((1.0 - _1223) * (_1218 + 2.0)) * exp2(log2(isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0))) * (_1218 + 1.0))) + _1223) * _1147;
        float _1233 = _1115 * 0.5;
        float _1234 = _1125 * 0.5;
        float _1235 = _1135 * 0.5;
        float _1236 = dot(vec3(_1233, _1234, _1235), vec3(_1233, _1234, _1235));
        float _1241 = (_1236 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1236);
        float _1249 = (dot(vec3(_429, _430, _431), vec3(_1241 * _1233, _1241 * _1234, _1241 * _1235)) + 1.0) * 0.5;
        float _3463 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1258 = sqrt(((_1234 * _1234) + (_1233 * _1233)) + (_1235 * _1235)) / (_1148 + 9.9999997473787516355514526367188e-06);
        float _3474 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1259 = isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0));
        float _1260 = _1259 * 2.0;
        float _1264 = (1.0 - _1259) / (_1259 + 1.0);
        float _3485 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1265 = isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0));
        float _1274 = ((((1.0 - _1265) * (_1260 + 2.0)) * exp2(log2(isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0))) * (_1260 + 1.0))) + _1265) * _1148;
        _1282 = _1115;
        _1283 = _1114;
        _1284 = _1113;
        _1285 = _1125;
        _1286 = _1124;
        _1287 = _1123;
        _1288 = _1135;
        _1289 = _1134;
        _1290 = _1133;
        _1291 = _1148;
        _1292 = _1147;
        _1293 = _1146;
        _1294 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0)));
        _1295 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0)));
        _1296 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0)));
    }
    else
    {
        _1282 = _973;
        _1283 = _973;
        _1284 = _973;
        _1285 = _973;
        _1286 = _973;
        _1287 = _973;
        _1288 = _973;
        _1289 = _973;
        _1290 = _973;
        _1291 = _973;
        _1292 = _973;
        _1293 = _973;
        _1294 = 0.0;
        _1295 = 0.0;
        _1296 = 0.0;
    }
    float _1306 = (cbModelParam._m0[1u].x * (_1294 - _985)) + _985;
    float _1307 = (cbModelParam._m0[1u].x * (_1295 - _986)) + _986;
    float _1308 = (cbModelParam._m0[1u].x * (_1296 - _987)) + _987;
    float _1329 = fma(_1308, cbSceneParam._m0[89u].z, fma(_1307, cbSceneParam._m0[89u].y, _1306 * cbSceneParam._m0[89u].x));
    float _1332 = fma(_1308, cbSceneParam._m0[90u].z, fma(_1307, cbSceneParam._m0[90u].y, _1306 * cbSceneParam._m0[90u].x));
    float _1335 = fma(_1308, cbSceneParam._m0[91u].z, fma(_1307, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1306));
    float _1350 = _606 * 0.5;
    float _1351 = _607 * 0.5;
    float _1352 = _608 * 0.5;
    float _1353 = dot(vec4(_1350, _1351, _1352, 1.0), vec4(_1284, _1287, _1290, _1293));
    float _1356 = dot(vec4(_1350, _1351, _1352, 1.0), vec4(_1283, _1286, _1289, _1292));
    float _1359 = dot(vec4(_1350, _1351, _1352, 1.0), vec4(_1282, _1285, _1288, _1291));
    float _1393;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1366 = dot(vec4(_1350, _1351, _1352, 1.0), vec4(_972, _976, _979, _982));
        float _1370 = dot(vec4(_1350, _1351, _1352, 1.0), vec4(_974, _977, _980, _983));
        float _1374 = dot(vec4(_1350, _1351, _1352, 1.0), vec4(_975, _978, _981, _984));
        float _1381 = dot(vec4(cbModelParam._m0[39u]), vec4(_1350, _1351, _1352, 1.0));
        _1393 = dot(vec3(isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0)), isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0)), isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1381) ? 0.0 : (isnan(0.0) ? _1381 : max(0.0, _1381))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1393 = 1.0;
    }
    float _1404;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1395 = dot(vec4(cbModelParam._m0[40u]), vec4(_1350, _1351, _1352, 1.0));
        _1404 = dot(vec3(isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0)), isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0)), isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1395) ? 0.0 : (isnan(0.0) ? _1395 : max(0.0, _1395))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1404 = 1.0;
    }
    float _1408 = (_1404 * cbModelParam._m0[1u].x) + (_1393 * (1.0 - cbModelParam._m0[1u].x));
    float _1418 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _432);
    float _1419 = isnan(_1418) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1418 : min(cbModelParam._m0[25u].z, _1418));
    float _1501;
    float _1503;
    float _1505;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1468 = fma(_670, cbModelParam._m0[13u].z, fma(_666, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _662)) + cbModelParam._m0[13u].w;
        float _1472 = fma(_670, cbModelParam._m0[14u].z, fma(_666, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _662)) + cbModelParam._m0[14u].w;
        float _1476 = fma(_670, cbModelParam._m0[15u].z, fma(_666, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _662)) + cbModelParam._m0[15u].w;
        float _1479 = fma(_608, cbModelParam._m0[13u].z, fma(_607, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _606));
        float _1482 = fma(_608, cbModelParam._m0[14u].z, fma(_607, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _606));
        float _1485 = fma(_608, cbModelParam._m0[15u].z, fma(_607, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _606));
        float _1513;
        if (_1479 > 0.0)
        {
            _1513 = abs((1.0 - _1468) / _1479);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1479 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1468 + 1.0) / _1479);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1513 = frontier_phi_14_12_ladder;
        }
        float _1877;
        if (_1482 > 0.0)
        {
            _1877 = abs((1.0 - _1472) / _1482);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1482 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1472 + 1.0) / _1482);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1877 = frontier_phi_23_19_ladder;
        }
        float _2182;
        if (_1485 > 0.0)
        {
            _2182 = abs((1.0 - _1476) / _1485);
        }
        else
        {
            float frontier_phi_37_30_ladder;
            if (_1485 < 0.0)
            {
                frontier_phi_37_30_ladder = abs((_1476 + 1.0) / _1485);
            }
            else
            {
                frontier_phi_37_30_ladder = 5000.0;
            }
            _2182 = frontier_phi_37_30_ladder;
        }
        float _2184 = isnan(_1877) ? _1513 : (isnan(_1513) ? _1877 : min(_1513, _1877));
        float _2185 = isnan(_2182) ? _2184 : (isnan(_2184) ? _2182 : min(_2184, _2182));
        float _2189 = (_2185 * _1479) + _1468;
        float _2190 = (_2185 * _1482) + _1472;
        float _2191 = (_2185 * _1485) + _1476;
        float _2192 = _2185 * 9.9999997473787516355514526367188e-05;
        float _2193 = (-1.0) - _2192;
        float _2195 = _2192 + 1.0;
        float frontier_phi_13_37_ladder;
        float frontier_phi_13_37_ladder_1;
        float frontier_phi_13_37_ladder_2;
        if ((_2191 > _2195) || ((_2191 < _2193) || ((_2190 > _2195) || ((_2190 < _2193) || ((_2189 < _2193) || (_2189 > _2195))))))
        {
            frontier_phi_13_37_ladder = 0.0;
            frontier_phi_13_37_ladder_1 = 0.0;
            frontier_phi_13_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2333 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2191, cbModelParam._m0[9u].z, fma(_2190, cbModelParam._m0[9u].y, _2189 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2191, cbModelParam._m0[10u].z, fma(_2190, cbModelParam._m0[10u].y, _2189 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2191, cbModelParam._m0[11u].z, fma(_2190, cbModelParam._m0[11u].y, _2189 * cbModelParam._m0[11u].x))), _1419);
            frontier_phi_13_37_ladder = _2333.z * cbModelParam._m0[1u].y;
            frontier_phi_13_37_ladder_1 = _2333.y * cbModelParam._m0[1u].y;
            frontier_phi_13_37_ladder_2 = _2333.x * cbModelParam._m0[1u].y;
        }
        _1501 = frontier_phi_13_37_ladder_2;
        _1503 = frontier_phi_13_37_ladder_1;
        _1505 = frontier_phi_13_37_ladder;
    }
    else
    {
        vec4 _1489 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_606, _607, _608), _1419);
        _1501 = _1489.x * cbModelParam._m0[1u].y;
        _1503 = _1489.y * cbModelParam._m0[1u].y;
        _1505 = _1489.z * cbModelParam._m0[1u].y;
    }
    float _1509 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _432);
    float _1510 = isnan(_1509) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1509 : min(cbModelParam._m0[25u].w, _1509));
    float _1603;
    float _1605;
    float _1607;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1567 = fma(_670, cbModelParam._m0[21u].z, fma(_666, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _662)) + cbModelParam._m0[21u].w;
        float _1571 = fma(_670, cbModelParam._m0[22u].z, fma(_666, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _662)) + cbModelParam._m0[22u].w;
        float _1575 = fma(_670, cbModelParam._m0[23u].z, fma(_666, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _662)) + cbModelParam._m0[23u].w;
        float _1578 = fma(_608, cbModelParam._m0[21u].z, fma(_607, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _606));
        float _1581 = fma(_608, cbModelParam._m0[22u].z, fma(_607, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _606));
        float _1584 = fma(_608, cbModelParam._m0[23u].z, fma(_607, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _606));
        float _1882;
        if (_1578 > 0.0)
        {
            _1882 = abs((1.0 - _1567) / _1578);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1578 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1567 + 1.0) / _1578);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1882 = frontier_phi_25_21_ladder;
        }
        float _2208;
        if (_1581 > 0.0)
        {
            _2208 = abs((1.0 - _1571) / _1581);
        }
        else
        {
            float frontier_phi_39_32_ladder;
            if (_1581 < 0.0)
            {
                frontier_phi_39_32_ladder = abs((_1571 + 1.0) / _1581);
            }
            else
            {
                frontier_phi_39_32_ladder = 5000.0;
            }
            _2208 = frontier_phi_39_32_ladder;
        }
        float _2399;
        if (_1584 > 0.0)
        {
            _2399 = abs((1.0 - _1575) / _1584);
        }
        else
        {
            float frontier_phi_57_50_ladder;
            if (_1584 < 0.0)
            {
                frontier_phi_57_50_ladder = abs((_1575 + 1.0) / _1584);
            }
            else
            {
                frontier_phi_57_50_ladder = 5000.0;
            }
            _2399 = frontier_phi_57_50_ladder;
        }
        float _2401 = isnan(_2208) ? _1882 : (isnan(_1882) ? _2208 : min(_1882, _2208));
        float _2402 = isnan(_2399) ? _2401 : (isnan(_2401) ? _2399 : min(_2401, _2399));
        float _2406 = (_2402 * _1578) + _1567;
        float _2407 = (_2402 * _1581) + _1571;
        float _2408 = (_2402 * _1584) + _1575;
        float _2409 = _2402 * 9.9999997473787516355514526367188e-05;
        float _2410 = (-1.0) - _2409;
        float _2412 = _2409 + 1.0;
        float frontier_phi_22_57_ladder;
        float frontier_phi_22_57_ladder_1;
        float frontier_phi_22_57_ladder_2;
        if ((_2408 > _2412) || ((_2408 < _2410) || ((_2407 > _2412) || ((_2407 < _2410) || ((_2406 < _2410) || (_2406 > _2412))))))
        {
            frontier_phi_22_57_ladder = 0.0;
            frontier_phi_22_57_ladder_1 = 0.0;
            frontier_phi_22_57_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2652 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2408, cbModelParam._m0[17u].z, fma(_2407, cbModelParam._m0[17u].y, _2406 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2408, cbModelParam._m0[18u].z, fma(_2407, cbModelParam._m0[18u].y, _2406 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2408, cbModelParam._m0[19u].z, fma(_2407, cbModelParam._m0[19u].y, _2406 * cbModelParam._m0[19u].x))), _1510);
            frontier_phi_22_57_ladder = _2652.x * cbModelParam._m0[1u].z;
            frontier_phi_22_57_ladder_1 = _2652.z * cbModelParam._m0[1u].z;
            frontier_phi_22_57_ladder_2 = _2652.y * cbModelParam._m0[1u].z;
        }
        _1603 = frontier_phi_22_57_ladder;
        _1605 = frontier_phi_22_57_ladder_2;
        _1607 = frontier_phi_22_57_ladder_1;
    }
    else
    {
        vec4 _1587 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_606, _607, _608), _1510);
        _1603 = _1587.x * cbModelParam._m0[1u].z;
        _1605 = _1587.y * cbModelParam._m0[1u].z;
        _1607 = _1587.z * cbModelParam._m0[1u].z;
    }
    float _1620 = (((_633 * _583) + _634) * _598) * ((cbModelParam._m0[1u].w * (_1603 - _1501)) + _1501);
    float _1622 = (((_633 * _585) + _634) * _598) * ((cbModelParam._m0[1u].w * (_1605 - _1503)) + _1503);
    float _1624 = (((_633 * _586) + _634) * _598) * ((cbModelParam._m0[1u].w * (_1607 - _1505)) + _1505);
    float _1627 = fma(_1624, cbSceneParam._m0[89u].z, fma(_1622, cbSceneParam._m0[89u].y, _1620 * cbSceneParam._m0[89u].x));
    float _1630 = fma(_1624, cbSceneParam._m0[90u].z, fma(_1622, cbSceneParam._m0[90u].y, _1620 * cbSceneParam._m0[90u].x));
    float _1633 = fma(_1624, cbSceneParam._m0[91u].z, fma(_1622, cbSceneParam._m0[91u].y, _1620 * cbSceneParam._m0[91u].x));
    uvec4 _1643 = floatBitsToUint(cbInstanceData._m0[_557 + 5u]);
    uint _1645 = _1643.x * 14u;
    uint _1646 = _1645 + 13u;
    float _1651 = _598 + (-1.0);
    float _1654 = (cbLight._m0[_1646].x * _1651) + 1.0;
    float _1655 = (cbLight._m0[_1646].y * _1651) + 1.0;
    uint _1656 = _1645 + 5u;
    float _1662 = isnan(1.0) ? _1655 : (isnan(_1655) ? 1.0 : min(_1655, 1.0));
    uint _1666 = _1645 + 4u;
    float _1673 = isnan(1.0) ? _1654 : (isnan(_1654) ? 1.0 : min(_1654, 1.0));
    uint _1677 = _1645 | 1u;
    float _1688 = dot(vec3(cbLight._m0[_1645].xyz), vec3(_429, _430, _431));
    float _1691 = dot(vec3(cbLight._m0[_1677].xyz), vec3(_429, _430, _431));
    float _3621 = isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0));
    float _3632 = isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0));
    float _1696 = (isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0))) * 0.3183098733425140380859375;
    float _1698 = (isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0))) * 0.3183098733425140380859375;
    float _1705 = ((cbLight._m0[_1656].x * _1662) * _1698) + ((cbLight._m0[_1666].x * _1673) * _1696);
    float _1706 = ((_1662 * cbLight._m0[_1656].y) * _1698) + ((_1673 * cbLight._m0[_1666].y) * _1696);
    float _1707 = ((_1662 * cbLight._m0[_1656].z) * _1698) + ((_1673 * cbLight._m0[_1666].z) * _1696);
    uint _1709 = _1645 + 8u;
    float _1722 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1645].w)) * _432) * 0.949999988079071044921875);
    float _1723 = _1722 * _1722;
    float _1724 = cbLight._m0[_1645].x + _506;
    float _1725 = cbLight._m0[_1645].y + _507;
    float _1726 = cbLight._m0[_1645].z + _508;
    float _1730 = inversesqrt(dot(vec3(_1724, _1725, _1726), vec3(_1724, _1725, _1726)));
    float _1731 = _1730 * _1724;
    float _1732 = _1730 * _1725;
    float _1733 = _1730 * _1726;
    float _1734 = dot(vec3(_429, _430, _431), vec3(cbLight._m0[_1645].xyz));
    float _3643 = isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0));
    float _1737 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
    float _3654 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _1738 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
    float _1739 = dot(vec3(_429, _430, _431), vec3(_1731, _1732, _1733));
    float _3665 = isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0));
    float _1742 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
    float _1743 = dot(vec3(cbLight._m0[_1645].xyz), vec3(_1731, _1732, _1733));
    float _3676 = isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0));
    float _1747 = _1723 * _1723;
    float _1751 = ((_1742 * _1742) * (_1747 + (-1.0))) + 1.0;
    float _1759 = exp2(log2(1.0 - (isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0)))) * 5.0);
    float _1760 = 0.959999978542327880859375 - _580;
    float _1762 = 0.959999978542327880859375 - _581;
    float _1763 = 0.959999978542327880859375 - _582;
    float _1770 = 1.0 - _1723;
    float _1781 = (0.5 / (((_1738 * ((_1737 * _1770) + _1723)) + 9.9999999392252902907785028219223e-09) + (((_1738 * _1770) + _1723) * _1737))) * _1737;
    float _3687 = isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0));
    float _1783 = (isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0))) * (_1747 / ((_1751 * _1751) * 3.141590118408203125));
    uint _1794 = _1645 + 9u;
    float _1805 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1677].w)) * _432) * 0.949999988079071044921875);
    float _1806 = _1805 * _1805;
    float _1807 = cbLight._m0[_1677].x + _506;
    float _1808 = cbLight._m0[_1677].y + _507;
    float _1809 = cbLight._m0[_1677].z + _508;
    float _1813 = inversesqrt(dot(vec3(_1807, _1808, _1809), vec3(_1807, _1808, _1809)));
    float _1814 = _1813 * _1807;
    float _1815 = _1813 * _1808;
    float _1816 = _1813 * _1809;
    float _1817 = dot(vec3(_429, _430, _431), vec3(cbLight._m0[_1677].xyz));
    float _3698 = isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0));
    float _1820 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
    float _1821 = dot(vec3(_429, _430, _431), vec3(_1814, _1815, _1816));
    float _3709 = isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0));
    float _1824 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
    float _1825 = dot(vec3(cbLight._m0[_1677].xyz), vec3(_1814, _1815, _1816));
    float _3720 = isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0));
    float _1829 = _1806 * _1806;
    float _1833 = ((_1824 * _1824) * (_1829 + (-1.0))) + 1.0;
    float _1840 = exp2(log2(1.0 - (isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0)))) * 5.0);
    float _1847 = 1.0 - _1806;
    float _1857 = (0.5 / (((_1738 * ((_1820 * _1847) + _1806)) + 9.9999999392252902907785028219223e-09) + (((_1738 * _1847) + _1806) * _1820))) * _1820;
    float _3731 = isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0));
    float _1859 = (isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0))) * (_1829 / ((_1833 * _1833) * 3.141590118408203125));
    float _1869 = (((((_1840 * _1760) + _583) * cbLight._m0[_1794].x) * _1859) * _1662) + (((((_1759 * _1760) + _583) * cbLight._m0[_1709].x) * _1783) * _1673);
    float _1870 = (((((_1840 * _1762) + _585) * cbLight._m0[_1794].y) * _1859) * _1662) + (((((_1759 * _1762) + _585) * cbLight._m0[_1709].y) * _1783) * _1673);
    float _1871 = (((((_1840 * _1763) + _586) * cbLight._m0[_1794].z) * _1859) * _1662) + (((((_1759 * _1763) + _586) * cbLight._m0[_1709].z) * _1783) * _1673);
    float _1986;
    float _1988;
    float _1990;
    float _1992;
    float _1994;
    float _1996;
    if (_1643.y == 0u)
    {
        float _1926 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1927 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1926;
        float _1928 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1926;
        float _1929 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1926;
        uvec4 _1941 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1942 = _1941.x;
        uint _1953 = uint((float(_1941.y) * floor(float(uint(cbSceneParam._m0[85u].y * _517) / _1942))) + floor(float(uint(cbSceneParam._m0[85u].x * _516) / _1942)));
        float _1963 = (log2(_1929 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1964 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
        uint _1967 = uint(isnan(14.0) ? _1964 : (isnan(_1964) ? 14.0 : min(_1964, 14.0)));
        uvec4 _1972 = texelFetch(g_lightClusterGridBuffer, int(((_1967 << 2u) + (_1953 << 6u)) >> 2u));
        uint _1973 = _1972.x;
        uint _1974 = _1941.z;
        float _2061;
        float _2063;
        float _2065;
        float _2067;
        float _2069;
        float _2071;
        if (((((1u << ((_1974 >> 4u) & 15u)) + 4294967295u) & _1973) == 0u) || ((_1974 & 240u) == 0u))
        {
            _2061 = 0.0;
            _2063 = 0.0;
            _2065 = 0.0;
            _2067 = 0.0;
            _2069 = 0.0;
            _2071 = 0.0;
        }
        else
        {
            float _2062;
            float _2064;
            float _2066;
            float _2068;
            float _2070;
            float _2072;
            float _2245 = 0.0;
            float _2246 = 0.0;
            float _2247 = 0.0;
            float _2248 = 0.0;
            float _2249 = 0.0;
            float _2250 = 0.0;
            uint _2251 = 0u;
            uint _2260;
            bool _2261;
            for (;;)
            {
                _2260 = texelFetch(g_lightClassification, int((((_1967 << 5u) + (_1953 << 9u)) + (_2251 << 2u)) >> 2u)).x;
                _2261 = _2260 == 0u;
                float frontier_phi_52_pred;
                float frontier_phi_52_pred_1;
                float frontier_phi_52_pred_2;
                float frontier_phi_52_pred_3;
                float frontier_phi_52_pred_4;
                float frontier_phi_52_pred_5;
                if (_2261)
                {
                    frontier_phi_52_pred = _2249;
                    frontier_phi_52_pred_1 = _2250;
                    frontier_phi_52_pred_2 = _2248;
                    frontier_phi_52_pred_3 = _2247;
                    frontier_phi_52_pred_4 = _2246;
                    frontier_phi_52_pred_5 = _2245;
                }
                else
                {
                    float _2442;
                    float _2443;
                    float _2444;
                    float _2445;
                    float _2446;
                    float _2447;
                    uint _2448;
                    _2442 = _2245;
                    _2443 = _2246;
                    _2444 = _2247;
                    _2445 = _2248;
                    _2446 = _2249;
                    _2447 = _2250;
                    _2448 = _2260;
                    float _2342;
                    float _2343;
                    float _2344;
                    float _2345;
                    float _2346;
                    float _2347;
                    for (;;)
                    {
                        uint _2452 = uint(findLSB(_2448)) + (_2251 << 5u);
                        uint _2449 = (_2448 + 4294967295u) & _2448;
                        uint _2454 = _2452 * 48u;
                        vec4 _2468 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2454)).x, texelFetch(g_PointLightRenderingBuffer, int(_2454 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2454 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2454 + 3u)).x));
                        uint _2474 = (_2452 * 48u) + 4u;
                        vec4 _2487 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2474)).x, texelFetch(g_PointLightRenderingBuffer, int(_2474 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2474 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2474 + 3u)).x));
                        uint _2493 = (_2452 * 48u) + 8u;
                        vec3 _2504 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2493)).x, texelFetch(g_PointLightRenderingBuffer, int(_2493 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2493 + 2u)).x));
                        float _2508 = _2468.x - _1927;
                        float _2509 = _2468.y - _1928;
                        float _2510 = _2468.z - _1929;
                        float _2511 = dot(vec3(_2508, _2509, _2510), vec3(_2508, _2509, _2510));
                        float _2514 = inversesqrt(_2511);
                        float _2515 = _2514 * _2508;
                        float _2516 = _2514 * _2509;
                        float _2517 = _2514 * _2510;
                        float _2518 = dot(vec3(_538, _541, _544), vec3(_2515, _2516, _2517));
                        float _2523 = 1.0 - (_2511 * _2468.w);
                        float _3752 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
                        float _2524 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
                        float _2525 = sqrt(_2511) * _2487.w;
                        float _2528 = 1.39999997615814208984375 / (_2525 + 1.39999997615814208984375);
                        float _2529 = _2528 * _2528;
                        float _2532 = ((1.0 - _2529) * _2518) + _2529;
                        float _2535 = _2525 * _2525;
                        float _2539 = ((isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0))) * _2524) / ((_2535 * 0.699999988079071044921875) + 1.0);
                        float _2543 = (-0.0) - _1927;
                        float _2544 = (-0.0) - _1928;
                        float _2545 = (-0.0) - _1929;
                        float _2549 = inversesqrt(dot(vec3(_2543, _2544, _2545), vec3(_2543, _2544, _2545)));
                        float _2550 = _2549 * _2543;
                        float _2551 = _2549 * _2544;
                        float _2552 = _2549 * _2545;
                        float _2560 = exp2(log2(1.0 / ((_2535 * 3.5) + 5.0)) * 0.25);
                        float _2561 = 1.0 - _614;
                        float _2568 = sqrt(1.0 - ((1.0 - (_2561 * _2561)) * (1.0 - (_2560 * _2560))));
                        float _2569 = _2568 * _2568;
                        float _2570 = _2569 * _2569;
                        float _2571 = _2550 + _2515;
                        float _2572 = _2551 + _2516;
                        float _2573 = _2552 + _2517;
                        float _2577 = inversesqrt(dot(vec3(_2571, _2572, _2573), vec3(_2571, _2572, _2573)));
                        float _2581 = dot(vec3(_538, _541, _544), vec3(_2550, _2551, _2552));
                        float _3768 = isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0));
                        float _2584 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
                        float _2585 = dot(vec3(_538, _541, _544), vec3(_2577 * _2571, _2577 * _2572, _2577 * _2573));
                        float _3779 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0));
                        float _2588 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
                        float _2592 = ((_2588 * _2588) * (_2570 + (-1.0))) + 1.0;
                        float _2593 = _2528 * _2569;
                        float _2594 = _2593 * _2593;
                        float _2597 = ((1.0 - _2594) * _2518) + _2594;
                        float _3790 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0));
                        float _2598 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
                        float _2599 = 1.0 - _2569;
                        float _2609 = (0.5 / (((_2598 * ((_2584 * _2599) + _2569)) + 9.9999999392252902907785028219223e-09) + (((_2598 * _2599) + _2569) * _2584))) * _2598;
                        float _3801 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0));
                        float _2620 = (((_2570 * 3.1415927410125732421875) * (isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0)))) / ((_2592 * _2592) * ((_2535 * 2.1991131305694580078125) + 3.141590118408203125))) * _2524;
                        _2345 = (_2539 * _2487.x) + _2445;
                        _2346 = (_2539 * _2487.y) + _2446;
                        _2347 = (_2539 * _2487.z) + _2447;
                        _2342 = (_2620 * _2504.x) + _2442;
                        _2343 = (_2620 * _2504.y) + _2443;
                        _2344 = (_2620 * _2504.z) + _2444;
                        if (_2449 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2442 = _2342;
                            _2443 = _2343;
                            _2444 = _2344;
                            _2445 = _2345;
                            _2446 = _2346;
                            _2447 = _2347;
                            _2448 = _2449;
                        }
                    }
                    frontier_phi_52_pred = _2346;
                    frontier_phi_52_pred_1 = _2347;
                    frontier_phi_52_pred_2 = _2345;
                    frontier_phi_52_pred_3 = _2344;
                    frontier_phi_52_pred_4 = _2343;
                    frontier_phi_52_pred_5 = _2342;
                }
                _2070 = frontier_phi_52_pred;
                _2072 = frontier_phi_52_pred_1;
                _2068 = frontier_phi_52_pred_2;
                _2066 = frontier_phi_52_pred_3;
                _2064 = frontier_phi_52_pred_4;
                _2062 = frontier_phi_52_pred_5;
                uint _2252 = _2251 + 1u;
                if (_2252 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2245 = _2062;
                    _2246 = _2064;
                    _2247 = _2066;
                    _2248 = _2068;
                    _2249 = _2070;
                    _2250 = _2072;
                    _2251 = _2252;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2061 = _2062;
            _2063 = _2064;
            _2065 = _2066;
            _2067 = _2068;
            _2069 = _2070;
            _2071 = _2072;
        }
        uvec4 _2075 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2076 = _2075.z;
        uint _2078 = (_2076 >> 8u) & 15u;
        float _2213;
        float _2215;
        float _2217;
        float _2219;
        float _2221;
        float _2223;
        if (((4294967295u << _2078) & _1973) == 0u)
        {
            _2213 = _2061;
            _2215 = _2063;
            _2217 = _2065;
            _2219 = _2067;
            _2221 = _2069;
            _2223 = _2071;
        }
        else
        {
            float _2238 = inversesqrt(dot(vec3(_1927, _1928, _1929), vec3(_1927, _1928, _1929)));
            float _2239 = _2238 * _1927;
            float _2240 = _2238 * _1928;
            float _2241 = _2238 * _1929;
            float frontier_phi_41_42_ladder;
            float frontier_phi_41_42_ladder_1;
            float frontier_phi_41_42_ladder_2;
            float frontier_phi_41_42_ladder_3;
            float frontier_phi_41_42_ladder_4;
            float frontier_phi_41_42_ladder_5;
            if (_2078 < ((_2076 >> 12u) & 15u))
            {
                float _2214;
                float _2216;
                float _2218;
                float _2220;
                float _2222;
                float _2224;
                float _2425 = _2061;
                float _2426 = _2063;
                float _2427 = _2065;
                float _2428 = _2067;
                float _2429 = _2069;
                float _2430 = _2071;
                uint _2431 = _2078;
                uint _2440;
                bool _2441;
                for (;;)
                {
                    _2440 = texelFetch(g_lightClassification, int((((_1967 << 5u) + (_1953 << 9u)) + (_2431 << 2u)) >> 2u)).x;
                    _2441 = _2440 == 0u;
                    float frontier_phi_66_pred;
                    float frontier_phi_66_pred_1;
                    float frontier_phi_66_pred_2;
                    float frontier_phi_66_pred_3;
                    float frontier_phi_66_pred_4;
                    float frontier_phi_66_pred_5;
                    if (_2441)
                    {
                        frontier_phi_66_pred = _2430;
                        frontier_phi_66_pred_1 = _2429;
                        frontier_phi_66_pred_2 = _2428;
                        frontier_phi_66_pred_3 = _2427;
                        frontier_phi_66_pred_4 = _2426;
                        frontier_phi_66_pred_5 = _2425;
                    }
                    else
                    {
                        float _2657;
                        float _2658;
                        float _2659;
                        float _2660;
                        float _2661;
                        float _2662;
                        float _2953;
                        float _2954;
                        float _2955;
                        float _2956;
                        float _2957;
                        float _2958;
                        float _2670 = _2425;
                        float _2671 = _2426;
                        float _2672 = _2427;
                        float _2673 = _2428;
                        float _2674 = _2429;
                        float _2675 = _2430;
                        uint _2676 = _2440;
                        uint _2677;
                        vec4 _2702;
                        float _2703;
                        vec4 _2718;
                        vec3 _2730;
                        vec4 _2746;
                        vec4 _2762;
                        float _2809;
                        bool _2810;
                        for (;;)
                        {
                            uint _2687 = ((_2431 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2676));
                            _2677 = (_2676 + 4294967295u) & _2676;
                            uint _2689 = _2687 * 40u;
                            _2702 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2689)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2689 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2689 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2689 + 3u)).x));
                            _2703 = _2702.w;
                            uint _2705 = (_2687 * 40u) + 4u;
                            _2718 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2705)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2705 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2705 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2705 + 3u)).x));
                            uint _2720 = (_2687 * 40u) + 8u;
                            _2730 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2720)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2720 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2720 + 2u)).x));
                            uint _2733 = (_2687 * 40u) + 16u;
                            _2746 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2733)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2733 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2733 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2733 + 3u)).x));
                            uint _2749 = (_2687 * 40u) + 20u;
                            _2762 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2749)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2749 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2749 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2749 + 3u)).x));
                            uint _2765 = (_2687 * 40u) + 24u;
                            vec4 _2778 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2765)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2765 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2765 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2765 + 3u)).x));
                            uint _2784 = (_2687 * 40u) + 28u;
                            vec4 _2797 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2784)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2784 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2784 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2784 + 3u)).x));
                            _2809 = fma(_1929, _2797.z, fma(_1928, _2797.y, _2797.x * _1927)) + _2797.w;
                            _2810 = !((fma(_1929, _2778.z, fma(_1928, _2778.y, _2778.x * _1927)) + _2778.w) <= 0.0);
                            float frontier_phi_72_pred;
                            float frontier_phi_72_pred_1;
                            float frontier_phi_72_pred_2;
                            float frontier_phi_72_pred_3;
                            float frontier_phi_72_pred_4;
                            float frontier_phi_72_pred_5;
                            if (_2810)
                            {
                                float _2837 = _2702.x - _1927;
                                float _2838 = _2702.y - _1928;
                                float _2839 = _2702.z - _1929;
                                float _2840 = dot(vec3(_2837, _2838, _2839), vec3(_2837, _2838, _2839));
                                float _2843 = inversesqrt(_2840);
                                float _2844 = _2843 * _2837;
                                float _2845 = _2843 * _2838;
                                float _2846 = _2843 * _2839;
                                float _2850 = 1.0 - (_2840 / (_2703 * _2703));
                                float _3812 = isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : max(_2850, 0.0));
                                float _2851 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
                                float _2855 = sqrt(_2840) * _2718.w;
                                float _2857 = 1.39999997615814208984375 / (_2855 + 1.39999997615814208984375);
                                float _2858 = _2857 * _2857;
                                float _2861 = ((1.0 - _2858) * dot(vec3(_2844, _2845, _2846), vec3(_538, _541, _544))) + _2858;
                                float _2864 = _2855 * _2855;
                                float _2868 = (fma(_1929, _2746.z, fma(_1928, _2746.y, _2746.x * _1927)) + _2746.w) / _2809;
                                float _2869 = (fma(_1929, _2762.z, fma(_1928, _2762.y, _2762.x * _1927)) + _2762.w) / _2809;
                                float _2873 = 1.0 - dot(vec2(_2868, _2869), vec2(_2868, _2869));
                                float _3828 = isnan(0.0) ? _2873 : (isnan(_2873) ? 0.0 : max(_2873, 0.0));
                                float _2874 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
                                float _2875 = _2874 * (((isnan(0.0) ? _2861 : (isnan(_2861) ? 0.0 : max(_2861, 0.0))) * _2851) / ((_2864 * 0.699999988079071044921875) + 1.0));
                                float _2887 = exp2(log2(1.0 / ((_2864 * 3.5) + 5.0)) * 0.25);
                                float _2888 = 1.0 - _614;
                                float _2895 = sqrt(1.0 - ((1.0 - (_2888 * _2888)) * (1.0 - (_2887 * _2887))));
                                float _2896 = _2895 * _2895;
                                float _2897 = _2896 * _2896;
                                float _2898 = _2844 - _2239;
                                float _2899 = _2845 - _2240;
                                float _2900 = _2846 - _2241;
                                float _2904 = inversesqrt(dot(vec3(_2898, _2899, _2900), vec3(_2898, _2899, _2900)));
                                float _2908 = dot(vec3(_538, _541, _544), vec3((-0.0) - _2239, (-0.0) - _2240, (-0.0) - _2241));
                                float _3839 = isnan(0.0) ? _2908 : (isnan(_2908) ? 0.0 : max(_2908, 0.0));
                                float _2911 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
                                float _2912 = dot(vec3(_538, _541, _544), vec3(_2904 * _2898, _2904 * _2899, _2904 * _2900));
                                float _3850 = isnan(0.0) ? _2912 : (isnan(_2912) ? 0.0 : max(_2912, 0.0));
                                float _2915 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
                                float _2919 = ((_2915 * _2915) * (_2897 + (-1.0))) + 1.0;
                                float _2920 = _2857 * _2896;
                                float _2921 = _2920 * _2920;
                                float _2927 = ((1.0 - _2921) * dot(vec3(_538, _541, _544), vec3(_2844, _2845, _2846))) + _2921;
                                float _3861 = isnan(0.0) ? _2927 : (isnan(_2927) ? 0.0 : max(_2927, 0.0));
                                float _2928 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
                                float _2929 = 1.0 - _2896;
                                float _2939 = (0.5 / (((_2928 * ((_2911 * _2929) + _2896)) + 9.9999999392252902907785028219223e-09) + (((_2928 * _2929) + _2896) * _2911))) * _2928;
                                float _3872 = isnan(0.0) ? _2939 : (isnan(_2939) ? 0.0 : max(_2939, 0.0));
                                float _2949 = (_2874 * _2851) * (((_2897 * 3.1415927410125732421875) * (isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0)))) / ((_2919 * _2919) * ((_2864 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_72_pred = _2875 * _2718.x;
                                frontier_phi_72_pred_1 = _2875 * _2718.z;
                                frontier_phi_72_pred_2 = _2875 * _2718.y;
                                frontier_phi_72_pred_3 = _2949 * _2730.z;
                                frontier_phi_72_pred_4 = _2949 * _2730.y;
                                frontier_phi_72_pred_5 = _2949 * _2730.x;
                            }
                            else
                            {
                                frontier_phi_72_pred = 0.0;
                                frontier_phi_72_pred_1 = 0.0;
                                frontier_phi_72_pred_2 = 0.0;
                                frontier_phi_72_pred_3 = 0.0;
                                frontier_phi_72_pred_4 = 0.0;
                                frontier_phi_72_pred_5 = 0.0;
                            }
                            _2956 = frontier_phi_72_pred;
                            _2958 = frontier_phi_72_pred_1;
                            _2957 = frontier_phi_72_pred_2;
                            _2955 = frontier_phi_72_pred_3;
                            _2954 = frontier_phi_72_pred_4;
                            _2953 = frontier_phi_72_pred_5;
                            _2660 = _2956 + _2673;
                            _2661 = _2957 + _2674;
                            _2662 = _2958 + _2675;
                            _2657 = _2953 + _2670;
                            _2658 = _2954 + _2671;
                            _2659 = _2955 + _2672;
                            if (_2677 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2670 = _2657;
                                _2671 = _2658;
                                _2672 = _2659;
                                _2673 = _2660;
                                _2674 = _2661;
                                _2675 = _2662;
                                _2676 = _2677;
                                continue;
                            }
                        }
                        frontier_phi_66_pred = _2662;
                        frontier_phi_66_pred_1 = _2661;
                        frontier_phi_66_pred_2 = _2660;
                        frontier_phi_66_pred_3 = _2659;
                        frontier_phi_66_pred_4 = _2658;
                        frontier_phi_66_pred_5 = _2657;
                    }
                    _2224 = frontier_phi_66_pred;
                    _2222 = frontier_phi_66_pred_1;
                    _2220 = frontier_phi_66_pred_2;
                    _2218 = frontier_phi_66_pred_3;
                    _2216 = frontier_phi_66_pred_4;
                    _2214 = frontier_phi_66_pred_5;
                    uint _2432 = _2431 + 1u;
                    if (_2432 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2425 = _2214;
                        _2426 = _2216;
                        _2427 = _2218;
                        _2428 = _2220;
                        _2429 = _2222;
                        _2430 = _2224;
                        _2431 = _2432;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_41_42_ladder = _2216;
                frontier_phi_41_42_ladder_1 = _2224;
                frontier_phi_41_42_ladder_2 = _2222;
                frontier_phi_41_42_ladder_3 = _2220;
                frontier_phi_41_42_ladder_4 = _2218;
                frontier_phi_41_42_ladder_5 = _2214;
            }
            else
            {
                frontier_phi_41_42_ladder = _2063;
                frontier_phi_41_42_ladder_1 = _2071;
                frontier_phi_41_42_ladder_2 = _2069;
                frontier_phi_41_42_ladder_3 = _2067;
                frontier_phi_41_42_ladder_4 = _2065;
                frontier_phi_41_42_ladder_5 = _2061;
            }
            _2213 = frontier_phi_41_42_ladder_5;
            _2215 = frontier_phi_41_42_ladder;
            _2217 = frontier_phi_41_42_ladder_4;
            _2219 = frontier_phi_41_42_ladder_3;
            _2221 = frontier_phi_41_42_ladder_2;
            _2223 = frontier_phi_41_42_ladder_1;
        }
        float _2228 = isnan(1.0) ? _598 : (isnan(_598) ? 1.0 : min(_598, 1.0));
        _1986 = (_2228 * _2219) + _1705;
        _1988 = (_2228 * _2221) + _1706;
        _1990 = (_2228 * _2223) + _1707;
        _1992 = ((_2213 * _583) * _2228) + _1869;
        _1994 = ((_2215 * _585) * _2228) + _1870;
        _1996 = ((_2217 * _586) * _2228) + _1871;
    }
    else
    {
        _1986 = _1705;
        _1988 = _1706;
        _1990 = _1707;
        _1992 = _1869;
        _1994 = _1870;
        _1996 = _1871;
    }
    float _3888 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _3899 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _3910 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _2013 = ((isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0))) * (_1986 + ((isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0))) * _598))) + ((_1992 + ((isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0))) * _1408)) * cbPerFrame._m0[3u].x);
    float _2014 = ((isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0))) * (_1988 + ((isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0))) * _598))) + ((_1994 + ((isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0))) * _1408)) * cbPerFrame._m0[3u].x);
    float _2015 = ((isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0))) * (_1990 + ((isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0))) * _598))) + ((_1996 + ((isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0))) * _1408)) * cbPerFrame._m0[3u].x);
    uint _2016 = _557 + 6u;
    float _2024 = _516 / cbSceneParam._m0[86u].x;
    float _2025 = _517 / cbSceneParam._m0[86u].y;
    vec4 _2039 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2024, _2025, (log2((isnan(cbSceneParam._m0[77u].w) ? _450 : (isnan(_450) ? cbSceneParam._m0[77u].w : min(_450, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2041 = _2039.x;
    float _2042 = _2039.y;
    float _2043 = _2039.z;
    float _2044 = _2039.w;
    float _2124;
    float _2126;
    float _2128;
    float _2130;
    if (_450 > cbSceneParam._m0[78u].w)
    {
        float _2086 = isnan(_450) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _450 : min(cbSceneParam._m0[80u].w, _450));
        float _2087 = _2086 / _450;
        float _2098 = _2087 * _499;
        float _2099 = _500 * _2087;
        float _2100 = (-0.0) - _2099;
        float _2101 = _2087 * _501;
        float _2103 = (cbSceneParam._m0[77u].w * _2100) / _2086;
        float _2104 = _2103 + cbSceneParam._m0[79u].w;
        float _2105 = cbSceneParam._m0[79u].w - _2099;
        float _2111 = sqrt(((_2098 * _2098) + (_2099 * _2099)) + (_2101 * _2101));
        float _2114 = (1.0 - (cbSceneParam._m0[77u].w / _2086)) * _2111;
        float _2120 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2122 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2355;
        if (abs((_2100 - _2103) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2355 = ((((_2104 > 0.0) ? exp2(_2120 * _2104) : (2.0 - exp2(_2122 * _2104))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2114;
        }
        else
        {
            float _2274 = 1.0 / cbSceneParam._m0[80u].x;
            float _2275 = isnan(_2105) ? _2104 : (isnan(_2104) ? _2105 : max(_2104, _2105));
            float _2276 = isnan(_2105) ? _2104 : (isnan(_2104) ? _2105 : min(_2104, _2105));
            float _2285 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : min(_2275, 0.0));
            float _2286 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : min(_2276, 0.0));
            _2355 = ((abs(_2111 / _2100) * cbSceneParam._m0[80u].y) * ((((_2285 - _2286) * 2.0) - ((exp2(_2120 * (isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0)))) - exp2(_2120 * (isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0))))) * _2274)) - ((exp2(_2122 * _2285) - exp2(_2122 * _2286)) * _2274))) + (_2114 * cbSceneParam._m0[80u].z);
        }
        vec4 _2357 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2024, _2025, 1.0), 0.0);
        float _2366 = exp2((_2355 * (-1.44269502162933349609375)) * (1.0 - _2357.w));
        float _2367 = log2(_2366);
        float _2383 = log2(_2044);
        _2124 = (exp2(_2383 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2367 * cbSceneParam._m0[78u].x)) * _2357.x) / cbSceneParam._m0[78u].x)) + _2041;
        _2126 = (exp2(_2383 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2367 * cbSceneParam._m0[78u].y)) * _2357.y) / cbSceneParam._m0[78u].y)) + _2042;
        _2128 = (exp2(_2383 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2367 * cbSceneParam._m0[78u].z)) * _2357.z) / cbSceneParam._m0[78u].z)) + _2043;
        _2130 = _2366 * _2044;
    }
    else
    {
        _2124 = _2041;
        _2126 = _2042;
        _2128 = _2043;
        _2130 = _2044;
    }
    bool _2393;
    vec4 _2140;
    vec4 _2162;
    float _2164;
    float _2168;
    float _2169;
    float _2170;
    float _2171;
    bool _2181;
    for (;;)
    {
        _2140 = cbMatDynParam._m0[0u];
        float _2142 = roundEven(_2140.y);
        bool _2143 = _2142 == 3.0;
        float _2144 = log2(_2130);
        float _2151 = exp2(_2144 * cbSceneParam._m0[78u].x) * _2013;
        float _2152 = exp2(_2144 * cbSceneParam._m0[78u].y) * _2014;
        float _2153 = exp2(_2144 * cbSceneParam._m0[78u].z) * _2015;
        float _2160 = _511 + (-0.5);
        _2162 = cbMtdParam._m0[1u];
        _2164 = _2162.y * _2160;
        float _2167 = (_2142 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2168 = _2167 * (_2143 ? _2151 : (_2151 + (cbSceneParam._m0[72u].w * _2124)));
        _2169 = _2167 * (_2143 ? _2152 : (_2152 + (cbSceneParam._m0[72u].w * _2126)));
        _2170 = _2167 * (_2143 ? _2153 : (_2153 + (cbSceneParam._m0[72u].w * _2128)));
        _2171 = _2160 * 0.999000012874603271484375;
        _2181 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2181)
        {
            if ((cbInstanceData._m0[_557 + 7u].x + _2171) < 0.5)
            {
                _2393 = true;
                break;
            }
        }
        uint _2309 = _559 + uint(_2140.w);
        if ((cbInstanceData._m0[_2309].w < 1.0) && ((cbInstanceData._m0[_2309].w + _2171) < 0.5))
        {
            _2393 = true;
            break;
        }
        if ((_2164 + _373) < _2162.x)
        {
            _2393 = true;
            break;
        }
        _2393 = false;
        break;
    }
    float _2627;
    if (_2393)
    {
        discard_state = true;
        _2627 = 0.0;
    }
    else
    {
        _2627 = cbInstanceData._m0[_2016].w;
    }
    SV_Target.x = _2168;
    SV_Target.y = _2169;
    SV_Target.z = _2170;
    SV_Target.w = _2627;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2016].w;
    discard_exit();
}


