#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M1_Emissive_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M1_Emissive_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M1_Emissive_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _900;
float _3315;
float _3316;
float _3317;
float _3318;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = _198 * NORMAL.x;
    float _200 = _198 * NORMAL.y;
    float _201 = _198 * NORMAL.z;
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _213;
    float _214;
    float _215;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _213 = (-0.0) - _199;
        _214 = (-0.0) - _200;
        _215 = (-0.0) - _201;
    }
    else
    {
        _213 = _199;
        _214 = _200;
        _215 = _201;
    }
    vec4 _235 = texture(sampler2D(M_AMSN_M1_Emissive_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _241 = _235.x * cbMtdParam._m0[9u].x;
    float _242 = _235.y * cbMtdParam._m0[9u].y;
    float _243 = _235.z * cbMtdParam._m0[9u].z;
    vec4 _259 = texture(sampler2D(M_AMSN_M1_Emissive_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _263 = _259.z;
    float _267 = (_259.x * 2.0) + (-1.0);
    float _269 = (_259.y * 2.0) + (-1.0);
    float _270 = dot(vec2(_267, _269), vec2(_267, _269));
    float _3327 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _276 = sqrt(1.0 - (isnan(1.0) ? _3327 : (isnan(_3327) ? 1.0 : min(_3327, 1.0))));
    vec4 _295 = texture(sampler2D(M_AMSN_M1_Emissive_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _302 = fma(_276, _213, fma(_269, _205 * TANGENT.x, (_191 * _184) * _267));
    float _305 = fma(_276, _214, fma(_269, _205 * TANGENT.y, (_191 * _185) * _267));
    float _308 = fma(_276, _215, fma(_269, _205 * TANGENT.z, (_191 * _186) * _267));
    float _312 = inversesqrt(dot(vec3(_302, _305, _308), vec3(_302, _305, _308)));
    float _313 = _312 * _302;
    float _314 = _312 * _305;
    float _315 = _312 * _308;
    float _3338 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    float _316 = isnan(1.0) ? _3338 : (isnan(_3338) ? 1.0 : min(_3338, 1.0));
    float _3349 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _3360 = isnan(0.0) ? _242 : (isnan(_242) ? 0.0 : max(_242, 0.0));
    float _3371 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _3382 = isnan(0.0) ? cbMtdParam._m0[11u].x : (isnan(cbMtdParam._m0[11u].x) ? 0.0 : max(cbMtdParam._m0[11u].x, 0.0));
    float _320 = isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0));
    float _336 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _377 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _387 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _377);
    float _388 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _377);
    float _389 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _377);
    float _393 = inversesqrt(dot(vec3(_387, _388, _389), vec3(_387, _388, _389)));
    float _394 = _387 * _393;
    float _395 = _388 * _393;
    float _396 = _389 * _393;
    vec4 _401 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _403 = _401.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _579 = sqrt(((_387 * _387) + (_388 * _388)) + (_389 * _389));
        float _585 = (cbMatDynParam._m0[5u].x * _579) + cbMatDynParam._m0[5u].y;
        float _3393 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
        float _586 = isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0));
        float _590 = (cbMatDynParam._m0[5u].z * _579) + cbMatDynParam._m0[5u].w;
        float _3404 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0))) - _586)) + _586) < ((_403 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _415 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _416 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _436 = fma(_315, cbSceneParam._m0[5u].z, fma(_314, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _313));
    float _439 = fma(_315, cbSceneParam._m0[6u].z, fma(_314, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _313));
    float _442 = fma(_315, cbSceneParam._m0[7u].z, fma(_314, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _313));
    uint _455 = uint(roundEven(NORMAL.w)) * 13u;
    uint _457 = _455 + 9u;
    uint _458 = _457 + uint(cbMatDynParam._m0[0u].w);
    float _464 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3349 : (isnan(_3349) ? 1.0 : min(_3349, 1.0)))) * cbInstanceData._m0[_458].x;
    float _465 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3360 : (isnan(_3360) ? 1.0 : min(_3360, 1.0)))) * cbInstanceData._m0[_458].y;
    float _466 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3371 : (isnan(_3371) ? 1.0 : min(_3371, 1.0)))) * cbInstanceData._m0[_458].z;
    float _3415 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _467 = isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0));
    float _3426 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _468 = isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0));
    float _3437 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _469 = isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0));
    float _470 = 1.0 - _320;
    float _471 = _467 * _470;
    float _472 = _468 * _470;
    float _473 = _469 * _470;
    float _478 = (_467 + (-0.039999999105930328369140625)) * _320;
    float _479 = (_468 + (-0.039999999105930328369140625)) * _320;
    float _480 = (_469 + (-0.039999999105930328369140625)) * _320;
    float _481 = _478 + 0.039999999105930328369140625;
    float _483 = _479 + 0.039999999105930328369140625;
    float _484 = _480 + 0.039999999105930328369140625;
    vec4 _493 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _415, cbSceneParam._m0[86u].y * _416));
    float _496 = _493.x * TEXCOORD.z;
    float _497 = dot(vec3(_313, _314, _315), vec3(_394, _395, _396));
    float _500 = _497 * 2.0;
    float _504 = (_500 * _313) - _394;
    float _505 = (_500 * _314) - _395;
    float _506 = (_500 * _315) - _396;
    float _510 = abs(dot(vec3(_394, _395, _396), vec3(_313, _314, _315)));
    float _3448 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _512 = sqrt(_316);
    float _525 = exp2((_512 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_512 * 3.0));
    float _531 = (1.0 - _525) * ((_512 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _532 = _525 * _512;
    float _560 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _564 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _568 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _899;
    float _901;
    float _902;
    float _903;
    float _904;
    float _905;
    float _906;
    float _907;
    float _908;
    float _909;
    float _910;
    float _911;
    float _912;
    float _913;
    float _914;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _624 = fma(_568, cbModelParam._m0[26u].z, fma(_564, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _560));
        float _628 = fma(_568, cbModelParam._m0[27u].z, fma(_564, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _560));
        float _632 = fma(_568, cbModelParam._m0[28u].z, fma(_564, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _560));
        float _657 = _560 + _313;
        float _658 = _564 + _314;
        float _659 = _568 + _315;
        float _669 = fma(_659, cbModelParam._m0[26u].z, fma(_658, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _657)) - _624;
        float _670 = fma(_659, cbModelParam._m0[27u].z, fma(_658, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _657)) - _628;
        float _671 = fma(_659, cbModelParam._m0[28u].z, fma(_658, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _657)) - _632;
        float _675 = inversesqrt(dot(vec3(_669, _670, _671), vec3(_669, _670, _671)));
        float _688 = ((_675 * _669) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_624 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _689 = ((_675 * _670) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_628 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _690 = ((_675 * _671) / cbModelParam._m0[34u].z) + ((((((_632 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _693 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_688, _689, _690), 0.0);
        vec4 _700 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_688, _689, _690), 0.0);
        vec4 _707 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_688, _689, _690), 0.0);
        vec4 _714 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_688, _689, _690), 0.0);
        float _727 = exp2((_693.w + (-0.5)) * 20.0) * 2.0;
        float _728 = _727 * (_693.x + (-0.5));
        float _729 = _727 * (_693.y + (-0.5));
        float _730 = _727 * (_693.z + (-0.5));
        float _737 = exp2((_700.w + (-0.5)) * 20.0) * 2.0;
        float _738 = _737 * (_700.x + (-0.5));
        float _739 = _737 * (_700.y + (-0.5));
        float _740 = _737 * (_700.z + (-0.5));
        float _747 = exp2((_707.w + (-0.5)) * 20.0) * 2.0;
        float _748 = _747 * (_707.x + (-0.5));
        float _749 = _747 * (_707.y + (-0.5));
        float _750 = _747 * (_707.z + (-0.5));
        float _757 = exp2((_714.w + (-0.5)) * 20.0) * 2.0;
        float _758 = _757 * (_714.x + (-0.5));
        float _759 = _757 * (_714.y + (-0.5));
        float _760 = _757 * (_714.z + (-0.5));
        float _761 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
        float _762 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
        float _763 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
        float _764 = _728 * 0.5;
        float _765 = _738 * 0.5;
        float _766 = _748 * 0.5;
        float _767 = dot(vec3(_764, _765, _766), vec3(_764, _765, _766));
        float _772 = (_767 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_767);
        float _781 = (dot(vec3(_313, _314, _315), vec3(_772 * _764, _772 * _765, _772 * _766)) + 1.0) * 0.5;
        float _3474 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
        float _791 = sqrt(((_765 * _765) + (_764 * _764)) + (_766 * _766)) / (_761 + 9.9999997473787516355514526367188e-06);
        float _3485 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
        float _792 = isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0));
        float _793 = _792 * 2.0;
        float _797 = (1.0 - _792) / (_792 + 1.0);
        float _3496 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
        float _798 = isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0));
        float _807 = ((((1.0 - _798) * (_793 + 2.0)) * exp2(log2(isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0))) * (_793 + 1.0))) + _798) * _761;
        float _808 = _729 * 0.5;
        float _809 = _739 * 0.5;
        float _810 = _749 * 0.5;
        float _811 = dot(vec3(_808, _809, _810), vec3(_808, _809, _810));
        float _816 = (_811 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_811);
        float _824 = (dot(vec3(_313, _314, _315), vec3(_816 * _808, _816 * _809, _816 * _810)) + 1.0) * 0.5;
        float _3507 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
        float _833 = sqrt(((_809 * _809) + (_808 * _808)) + (_810 * _810)) / (_762 + 9.9999997473787516355514526367188e-06);
        float _3518 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
        float _834 = isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0));
        float _835 = _834 * 2.0;
        float _839 = (1.0 - _834) / (_834 + 1.0);
        float _3529 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
        float _840 = isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0));
        float _849 = ((((1.0 - _840) * (_835 + 2.0)) * exp2(log2(isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0))) * (_835 + 1.0))) + _840) * _762;
        float _850 = _730 * 0.5;
        float _851 = _740 * 0.5;
        float _852 = _750 * 0.5;
        float _853 = dot(vec3(_850, _851, _852), vec3(_850, _851, _852));
        float _858 = (_853 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_853);
        float _866 = (dot(vec3(_313, _314, _315), vec3(_858 * _850, _858 * _851, _858 * _852)) + 1.0) * 0.5;
        float _3540 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
        float _875 = sqrt(((_851 * _851) + (_850 * _850)) + (_852 * _852)) / (_763 + 9.9999997473787516355514526367188e-06);
        float _3551 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
        float _876 = isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0));
        float _877 = _876 * 2.0;
        float _881 = (1.0 - _876) / (_876 + 1.0);
        float _3562 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
        float _882 = isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0));
        float _891 = ((((1.0 - _882) * (_877 + 2.0)) * exp2(log2(isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0))) * (_877 + 1.0))) + _882) * _763;
        _899 = _730;
        _901 = _729;
        _902 = _728;
        _903 = _740;
        _904 = _739;
        _905 = _738;
        _906 = _750;
        _907 = _749;
        _908 = _748;
        _909 = _763;
        _910 = _762;
        _911 = _761;
        _912 = cbModelParam._m0[36u].z * (isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0)));
        _913 = cbModelParam._m0[36u].z * (isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0)));
        _914 = cbModelParam._m0[36u].z * (isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0)));
    }
    else
    {
        _899 = _900;
        _901 = _900;
        _902 = _900;
        _903 = _900;
        _904 = _900;
        _905 = _900;
        _906 = _900;
        _907 = _900;
        _908 = _900;
        _909 = _900;
        _910 = _900;
        _911 = _900;
        _912 = 0.0;
        _913 = 0.0;
        _914 = 0.0;
    }
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _943 = fma(_568, cbModelParam._m0[30u].z, fma(_564, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _560));
        float _947 = fma(_568, cbModelParam._m0[31u].z, fma(_564, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _560));
        float _951 = fma(_568, cbModelParam._m0[32u].z, fma(_564, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _560));
        float _974 = _560 + _313;
        float _975 = _564 + _314;
        float _976 = _568 + _315;
        float _986 = fma(_976, cbModelParam._m0[30u].z, fma(_975, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _974)) - _943;
        float _987 = fma(_976, cbModelParam._m0[31u].z, fma(_975, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _974)) - _947;
        float _988 = fma(_976, cbModelParam._m0[32u].z, fma(_975, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _974)) - _951;
        float _992 = inversesqrt(dot(vec3(_986, _987, _988), vec3(_986, _987, _988)));
        float _1005 = ((_992 * _986) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_943 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1006 = ((_992 * _987) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_947 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1007 = ((_992 * _988) / cbModelParam._m0[35u].z) + ((((((_951 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1009 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1005, _1006, _1007), 0.0);
        vec4 _1016 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1005, _1006, _1007), 0.0);
        vec4 _1023 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1005, _1006, _1007), 0.0);
        vec4 _1030 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1005, _1006, _1007), 0.0);
        float _1042 = exp2((_1009.w + (-0.5)) * 20.0) * 2.0;
        float _1043 = _1042 * (_1009.x + (-0.5));
        float _1044 = _1042 * (_1009.y + (-0.5));
        float _1045 = _1042 * (_1009.z + (-0.5));
        float _1052 = exp2((_1016.w + (-0.5)) * 20.0) * 2.0;
        float _1053 = _1052 * (_1016.x + (-0.5));
        float _1054 = _1052 * (_1016.y + (-0.5));
        float _1055 = _1052 * (_1016.z + (-0.5));
        float _1062 = exp2((_1023.w + (-0.5)) * 20.0) * 2.0;
        float _1063 = _1062 * (_1023.x + (-0.5));
        float _1064 = _1062 * (_1023.y + (-0.5));
        float _1065 = _1062 * (_1023.z + (-0.5));
        float _1072 = exp2((_1030.w + (-0.5)) * 20.0) * 2.0;
        float _1073 = _1072 * (_1030.x + (-0.5));
        float _1074 = _1072 * (_1030.y + (-0.5));
        float _1075 = _1072 * (_1030.z + (-0.5));
        float _1076 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1077 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1078 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1079 = _1043 * 0.5;
        float _1080 = _1053 * 0.5;
        float _1081 = _1063 * 0.5;
        float _1082 = dot(vec3(_1079, _1080, _1081), vec3(_1079, _1080, _1081));
        float _1087 = (_1082 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1082);
        float _1095 = (dot(vec3(_313, _314, _315), vec3(_1087 * _1079, _1087 * _1080, _1087 * _1081)) + 1.0) * 0.5;
        float _3603 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1104 = sqrt(((_1080 * _1080) + (_1079 * _1079)) + (_1081 * _1081)) / (_1076 + 9.9999997473787516355514526367188e-06);
        float _3614 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1105 = isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0));
        float _1106 = _1105 * 2.0;
        float _1110 = (1.0 - _1105) / (_1105 + 1.0);
        float _3625 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1111 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
        float _1120 = ((((1.0 - _1111) * (_1106 + 2.0)) * exp2(log2(isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0))) * (_1106 + 1.0))) + _1111) * _1076;
        float _1121 = _1044 * 0.5;
        float _1122 = _1054 * 0.5;
        float _1123 = _1064 * 0.5;
        float _1124 = dot(vec3(_1121, _1122, _1123), vec3(_1121, _1122, _1123));
        float _1129 = (_1124 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1124);
        float _1137 = (dot(vec3(_313, _314, _315), vec3(_1129 * _1121, _1129 * _1122, _1129 * _1123)) + 1.0) * 0.5;
        float _3636 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1146 = sqrt(((_1122 * _1122) + (_1121 * _1121)) + (_1123 * _1123)) / (_1077 + 9.9999997473787516355514526367188e-06);
        float _3647 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1147 = isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0));
        float _1148 = _1147 * 2.0;
        float _1152 = (1.0 - _1147) / (_1147 + 1.0);
        float _3658 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1153 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
        float _1162 = ((((1.0 - _1153) * (_1148 + 2.0)) * exp2(log2(isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0))) * (_1148 + 1.0))) + _1153) * _1077;
        float _1163 = _1045 * 0.5;
        float _1164 = _1055 * 0.5;
        float _1165 = _1065 * 0.5;
        float _1166 = dot(vec3(_1163, _1164, _1165), vec3(_1163, _1164, _1165));
        float _1171 = (_1166 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1166);
        float _1179 = (dot(vec3(_313, _314, _315), vec3(_1171 * _1163, _1171 * _1164, _1171 * _1165)) + 1.0) * 0.5;
        float _3669 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1188 = sqrt(((_1164 * _1164) + (_1163 * _1163)) + (_1165 * _1165)) / (_1078 + 9.9999997473787516355514526367188e-06);
        float _3680 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1189 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
        float _1190 = _1189 * 2.0;
        float _1194 = (1.0 - _1189) / (_1189 + 1.0);
        float _3691 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1195 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
        float _1204 = ((((1.0 - _1195) * (_1190 + 2.0)) * exp2(log2(isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0))) * (_1190 + 1.0))) + _1195) * _1078;
        _1212 = _1045;
        _1213 = _1044;
        _1214 = _1043;
        _1215 = _1055;
        _1216 = _1054;
        _1217 = _1053;
        _1218 = _1065;
        _1219 = _1064;
        _1220 = _1063;
        _1221 = _1078;
        _1222 = _1077;
        _1223 = _1076;
        _1224 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0)));
        _1225 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0)));
        _1226 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0)));
    }
    else
    {
        _1212 = _900;
        _1213 = _900;
        _1214 = _900;
        _1215 = _900;
        _1216 = _900;
        _1217 = _900;
        _1218 = _900;
        _1219 = _900;
        _1220 = _900;
        _1221 = _900;
        _1222 = _900;
        _1223 = _900;
        _1224 = 0.0;
        _1225 = 0.0;
        _1226 = 0.0;
    }
    float _1236 = (cbModelParam._m0[1u].x * (_1224 - _912)) + _912;
    float _1237 = (cbModelParam._m0[1u].x * (_1225 - _913)) + _913;
    float _1238 = (cbModelParam._m0[1u].x * (_1226 - _914)) + _914;
    float _1259 = fma(_1238, cbSceneParam._m0[89u].z, fma(_1237, cbSceneParam._m0[89u].y, _1236 * cbSceneParam._m0[89u].x));
    float _1262 = fma(_1238, cbSceneParam._m0[90u].z, fma(_1237, cbSceneParam._m0[90u].y, _1236 * cbSceneParam._m0[90u].x));
    float _1265 = fma(_1238, cbSceneParam._m0[91u].z, fma(_1237, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1236));
    float _1280 = _504 * 0.5;
    float _1281 = _505 * 0.5;
    float _1282 = _506 * 0.5;
    float _1283 = dot(vec4(_1280, _1281, _1282, 1.0), vec4(_1214, _1217, _1220, _1223));
    float _1286 = dot(vec4(_1280, _1281, _1282, 1.0), vec4(_1213, _1216, _1219, _1222));
    float _1289 = dot(vec4(_1280, _1281, _1282, 1.0), vec4(_1212, _1215, _1218, _1221));
    float _1323;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1296 = dot(vec4(_1280, _1281, _1282, 1.0), vec4(_899, _903, _906, _909));
        float _1300 = dot(vec4(_1280, _1281, _1282, 1.0), vec4(_901, _904, _907, _910));
        float _1304 = dot(vec4(_1280, _1281, _1282, 1.0), vec4(_902, _905, _908, _911));
        float _1311 = dot(vec4(cbModelParam._m0[39u]), vec4(_1280, _1281, _1282, 1.0));
        _1323 = dot(vec3(isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0)), isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0)), isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1311) ? 0.0 : (isnan(0.0) ? _1311 : max(0.0, _1311))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1323 = 1.0;
    }
    float _1334;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1325 = dot(vec4(cbModelParam._m0[40u]), vec4(_1280, _1281, _1282, 1.0));
        _1334 = dot(vec3(isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0)), isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0)), isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1325) ? 0.0 : (isnan(0.0) ? _1325 : max(0.0, _1325))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1334 = 1.0;
    }
    float _1338 = (_1334 * cbModelParam._m0[1u].x) + (_1323 * (1.0 - cbModelParam._m0[1u].x));
    float _1348 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _316);
    float _1349 = isnan(_1348) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1348 : min(cbModelParam._m0[25u].z, _1348));
    float _1431;
    float _1433;
    float _1435;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1398 = fma(_568, cbModelParam._m0[13u].z, fma(_564, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _560)) + cbModelParam._m0[13u].w;
        float _1402 = fma(_568, cbModelParam._m0[14u].z, fma(_564, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _560)) + cbModelParam._m0[14u].w;
        float _1406 = fma(_568, cbModelParam._m0[15u].z, fma(_564, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _560)) + cbModelParam._m0[15u].w;
        float _1409 = fma(_506, cbModelParam._m0[13u].z, fma(_505, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _504));
        float _1412 = fma(_506, cbModelParam._m0[14u].z, fma(_505, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _504));
        float _1415 = fma(_506, cbModelParam._m0[15u].z, fma(_505, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _504));
        float _1443;
        if (_1409 > 0.0)
        {
            _1443 = abs((1.0 - _1398) / _1409);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1409 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1398 + 1.0) / _1409);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1443 = frontier_phi_19_17_ladder;
        }
        float _1650;
        if (_1412 > 0.0)
        {
            _1650 = abs((1.0 - _1402) / _1412);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1412 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1402 + 1.0) / _1412);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1650 = frontier_phi_28_24_ladder;
        }
        float _1904;
        if (_1415 > 0.0)
        {
            _1904 = abs((1.0 - _1406) / _1415);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1415 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1406 + 1.0) / _1415);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1904 = frontier_phi_40_35_ladder;
        }
        float _1906 = isnan(_1650) ? _1443 : (isnan(_1443) ? _1650 : min(_1443, _1650));
        float _1907 = isnan(_1904) ? _1906 : (isnan(_1906) ? _1904 : min(_1906, _1904));
        float _1911 = (_1907 * _1409) + _1398;
        float _1912 = (_1907 * _1412) + _1402;
        float _1913 = (_1907 * _1415) + _1406;
        float _1914 = _1907 * 9.9999997473787516355514526367188e-05;
        float _1916 = (-1.0) - _1914;
        float _1918 = _1914 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1913 > _1918) || ((_1913 < _1916) || ((_1912 > _1918) || ((_1912 < _1916) || ((_1911 < _1916) || (_1911 > _1918))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2041 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1913, cbModelParam._m0[9u].z, fma(_1912, cbModelParam._m0[9u].y, _1911 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1913, cbModelParam._m0[10u].z, fma(_1912, cbModelParam._m0[10u].y, _1911 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1913, cbModelParam._m0[11u].z, fma(_1912, cbModelParam._m0[11u].y, _1911 * cbModelParam._m0[11u].x))), _1349);
            frontier_phi_18_40_ladder = _2041.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2041.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2041.x * cbModelParam._m0[1u].y;
        }
        _1431 = frontier_phi_18_40_ladder_2;
        _1433 = frontier_phi_18_40_ladder_1;
        _1435 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1419 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_504, _505, _506), _1349);
        _1431 = _1419.x * cbModelParam._m0[1u].y;
        _1433 = _1419.y * cbModelParam._m0[1u].y;
        _1435 = _1419.z * cbModelParam._m0[1u].y;
    }
    float _1439 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _316);
    float _1440 = isnan(_1439) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1439 : min(cbModelParam._m0[25u].w, _1439));
    float _1533;
    float _1535;
    float _1537;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1497 = fma(_568, cbModelParam._m0[21u].z, fma(_564, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _560)) + cbModelParam._m0[21u].w;
        float _1501 = fma(_568, cbModelParam._m0[22u].z, fma(_564, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _560)) + cbModelParam._m0[22u].w;
        float _1505 = fma(_568, cbModelParam._m0[23u].z, fma(_564, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _560)) + cbModelParam._m0[23u].w;
        float _1508 = fma(_506, cbModelParam._m0[21u].z, fma(_505, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _504));
        float _1511 = fma(_506, cbModelParam._m0[22u].z, fma(_505, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _504));
        float _1514 = fma(_506, cbModelParam._m0[23u].z, fma(_505, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _504));
        float _1655;
        if (_1508 > 0.0)
        {
            _1655 = abs((1.0 - _1497) / _1508);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1508 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1497 + 1.0) / _1508);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1655 = frontier_phi_30_26_ladder;
        }
        float _1931;
        if (_1511 > 0.0)
        {
            _1931 = abs((1.0 - _1501) / _1511);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1511 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1501 + 1.0) / _1511);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1931 = frontier_phi_42_37_ladder;
        }
        float _2144;
        if (_1514 > 0.0)
        {
            _2144 = abs((1.0 - _1505) / _1514);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1514 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1505 + 1.0) / _1514);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2144 = frontier_phi_51_48_ladder;
        }
        float _2146 = isnan(_1931) ? _1655 : (isnan(_1655) ? _1931 : min(_1655, _1931));
        float _2147 = isnan(_2144) ? _2146 : (isnan(_2146) ? _2144 : min(_2146, _2144));
        float _2151 = (_2147 * _1508) + _1497;
        float _2152 = (_2147 * _1511) + _1501;
        float _2153 = (_2147 * _1514) + _1505;
        float _2154 = _2147 * 9.9999997473787516355514526367188e-05;
        float _2155 = (-1.0) - _2154;
        float _2157 = _2154 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2153 > _2157) || ((_2153 < _2155) || ((_2152 > _2157) || ((_2152 < _2155) || ((_2151 < _2155) || (_2151 > _2157))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2376 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2153, cbModelParam._m0[17u].z, fma(_2152, cbModelParam._m0[17u].y, _2151 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2153, cbModelParam._m0[18u].z, fma(_2152, cbModelParam._m0[18u].y, _2151 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2153, cbModelParam._m0[19u].z, fma(_2152, cbModelParam._m0[19u].y, _2151 * cbModelParam._m0[19u].x))), _1440);
            frontier_phi_27_51_ladder = _2376.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2376.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2376.x * cbModelParam._m0[1u].z;
        }
        _1533 = frontier_phi_27_51_ladder_2;
        _1535 = frontier_phi_27_51_ladder_1;
        _1537 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1517 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_504, _505, _506), _1440);
        _1533 = _1517.x * cbModelParam._m0[1u].z;
        _1535 = _1517.y * cbModelParam._m0[1u].z;
        _1537 = _1517.z * cbModelParam._m0[1u].z;
    }
    float _1550 = (((_531 * _481) + _532) * _496) * ((cbModelParam._m0[1u].w * (_1533 - _1431)) + _1431);
    float _1552 = (((_531 * _483) + _532) * _496) * ((cbModelParam._m0[1u].w * (_1535 - _1433)) + _1433);
    float _1554 = (((_531 * _484) + _532) * _496) * ((cbModelParam._m0[1u].w * (_1537 - _1435)) + _1435);
    float _1557 = fma(_1554, cbSceneParam._m0[89u].z, fma(_1552, cbSceneParam._m0[89u].y, _1550 * cbSceneParam._m0[89u].x));
    float _1560 = fma(_1554, cbSceneParam._m0[90u].z, fma(_1552, cbSceneParam._m0[90u].y, _1550 * cbSceneParam._m0[90u].x));
    float _1563 = fma(_1554, cbSceneParam._m0[91u].z, fma(_1552, cbSceneParam._m0[91u].y, _1550 * cbSceneParam._m0[91u].x));
    uvec4 _1573 = floatBitsToUint(cbInstanceData._m0[_455 + 5u]);
    uint _1575 = _1573.x * 14u;
    uint _1576 = _1575 + 13u;
    float _1583 = _496 + (-1.0);
    float _1588 = (cbLight._m0[_1576].x * _1583) + 1.0;
    float _1589 = (cbLight._m0[_1576].y * _1583) + 1.0;
    float _1590 = (cbLight._m0[_1576].z * _1583) + 1.0;
    float _1591 = (cbLight._m0[_1576].w * _1583) + 1.0;
    uint _1592 = _1575 + 5u;
    float _1598 = isnan(1.0) ? _1589 : (isnan(_1589) ? 1.0 : min(_1589, 1.0));
    uint _1602 = _1575 + 4u;
    float _1609 = isnan(1.0) ? _1588 : (isnan(_1588) ? 1.0 : min(_1588, 1.0));
    uint _1613 = _1575 | 1u;
    float _1624 = dot(vec3(cbLight._m0[_1575].xyz), vec3(_313, _314, _315));
    float _1627 = dot(vec3(cbLight._m0[_1613].xyz), vec3(_313, _314, _315));
    float _3827 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
    float _3838 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
    float _1632 = (isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0))) * 0.3183098733425140380859375;
    float _1634 = (isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0))) * 0.3183098733425140380859375;
    float _1641 = ((cbLight._m0[_1592].x * _1598) * _1634) + ((cbLight._m0[_1602].x * _1609) * _1632);
    float _1642 = ((_1598 * cbLight._m0[_1592].y) * _1634) + ((_1609 * cbLight._m0[_1602].y) * _1632);
    float _1643 = ((_1598 * cbLight._m0[_1592].z) * _1634) + ((_1609 * cbLight._m0[_1602].z) * _1632);
    uvec4 _1647 = floatBitsToUint(cbLight._m0[_1575 + 12u]);
    bool _1649 = _1647.x == 0u;
    float _1660;
    float _1662;
    float _1664;
    if (_1649)
    {
        _1660 = _1641;
        _1662 = _1642;
        _1664 = _1643;
    }
    else
    {
        uint _1668 = _1575 + 6u;
        float _1684 = (dot(vec3(cbLight._m0[_1575 + 2u].xyz), vec3(_313, _314, _315)) * 0.5) + 0.5;
        float _1685 = _1684 * _1684;
        float _3849 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
        float _1686 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
        float _1687 = isnan(1.0) ? _1590 : (isnan(_1590) ? 1.0 : min(_1590, 1.0));
        _1660 = (((cbLight._m0[_1668].x * 0.3183098733425140380859375) * _1686) * _1687) + _1641;
        _1662 = (((cbLight._m0[_1668].y * 0.3183098733425140380859375) * _1686) * _1687) + _1642;
        _1664 = (((cbLight._m0[_1668].z * 0.3183098733425140380859375) * _1686) * _1687) + _1643;
    }
    bool _1667 = _1647.y == 0u;
    float _1705;
    float _1707;
    float _1709;
    if (_1667)
    {
        _1705 = _1660;
        _1707 = _1662;
        _1709 = _1664;
    }
    else
    {
        uint _1875 = _1575 + 7u;
        float _1891 = (dot(vec3(cbLight._m0[_1575 + 3u].xyz), vec3(_313, _314, _315)) * 0.5) + 0.5;
        float _1892 = _1891 * _1891;
        float _3865 = isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0));
        float _1893 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
        float _1894 = isnan(1.0) ? _1591 : (isnan(_1591) ? 1.0 : min(_1591, 1.0));
        _1705 = (((cbLight._m0[_1875].x * 0.3183098733425140380859375) * _1893) * _1894) + _1660;
        _1707 = (((cbLight._m0[_1875].y * 0.3183098733425140380859375) * _1893) * _1894) + _1662;
        _1709 = (((cbLight._m0[_1875].z * 0.3183098733425140380859375) * _1893) * _1894) + _1664;
    }
    uint _1712 = _1575 + 8u;
    float _1725 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1575].w)) * _316) * 0.949999988079071044921875);
    float _1726 = _1725 * _1725;
    float _1727 = cbLight._m0[_1575].x + _394;
    float _1728 = cbLight._m0[_1575].y + _395;
    float _1729 = cbLight._m0[_1575].z + _396;
    float _1733 = inversesqrt(dot(vec3(_1727, _1728, _1729), vec3(_1727, _1728, _1729)));
    float _1734 = _1733 * _1727;
    float _1735 = _1733 * _1728;
    float _1736 = _1733 * _1729;
    float _1737 = dot(vec3(_313, _314, _315), vec3(cbLight._m0[_1575].xyz));
    float _3881 = isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0));
    float _1740 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
    float _3892 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _1741 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
    float _1742 = dot(vec3(_313, _314, _315), vec3(_1734, _1735, _1736));
    float _3903 = isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0));
    float _1745 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
    float _1746 = dot(vec3(cbLight._m0[_1575].xyz), vec3(_1734, _1735, _1736));
    float _3914 = isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0));
    float _1750 = _1726 * _1726;
    float _1754 = ((_1745 * _1745) * (_1750 + (-1.0))) + 1.0;
    float _1762 = exp2(log2(1.0 - (isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0)))) * 5.0);
    float _1763 = 0.959999978542327880859375 - _478;
    float _1765 = 0.959999978542327880859375 - _479;
    float _1766 = 0.959999978542327880859375 - _480;
    float _1773 = 1.0 - _1726;
    float _1784 = (0.5 / (((_1741 * ((_1740 * _1773) + _1726)) + 9.9999999392252902907785028219223e-09) + (((_1741 * _1773) + _1726) * _1740))) * _1740;
    float _3925 = isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0));
    float _1786 = (isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0))) * (_1750 / ((_1754 * _1754) * 3.141590118408203125));
    uint _1797 = _1575 + 9u;
    float _1808 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1613].w)) * _316) * 0.949999988079071044921875);
    float _1809 = _1808 * _1808;
    float _1810 = cbLight._m0[_1613].x + _394;
    float _1811 = cbLight._m0[_1613].y + _395;
    float _1812 = cbLight._m0[_1613].z + _396;
    float _1816 = inversesqrt(dot(vec3(_1810, _1811, _1812), vec3(_1810, _1811, _1812)));
    float _1817 = _1816 * _1810;
    float _1818 = _1816 * _1811;
    float _1819 = _1816 * _1812;
    float _1820 = dot(vec3(_313, _314, _315), vec3(cbLight._m0[_1613].xyz));
    float _3936 = isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0));
    float _1823 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
    float _1824 = dot(vec3(_313, _314, _315), vec3(_1817, _1818, _1819));
    float _3947 = isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0));
    float _1827 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
    float _1828 = dot(vec3(cbLight._m0[_1613].xyz), vec3(_1817, _1818, _1819));
    float _3958 = isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0));
    float _1832 = _1809 * _1809;
    float _1836 = ((_1827 * _1827) * (_1832 + (-1.0))) + 1.0;
    float _1843 = exp2(log2(1.0 - (isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0)))) * 5.0);
    float _1850 = 1.0 - _1809;
    float _1860 = (0.5 / (((_1741 * ((_1823 * _1850) + _1809)) + 9.9999999392252902907785028219223e-09) + (((_1741 * _1850) + _1809) * _1823))) * _1823;
    float _3969 = isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0));
    float _1862 = (isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0))) * (_1832 / ((_1836 * _1836) * 3.141590118408203125));
    float _1872 = (((((_1843 * _1763) + _481) * cbLight._m0[_1797].x) * _1862) * _1598) + (((((_1762 * _1763) + _481) * cbLight._m0[_1712].x) * _1786) * _1609);
    float _1873 = (((((_1843 * _1765) + _483) * cbLight._m0[_1797].y) * _1862) * _1598) + (((((_1762 * _1765) + _483) * cbLight._m0[_1712].y) * _1786) * _1609);
    float _1874 = (((((_1843 * _1766) + _484) * cbLight._m0[_1797].z) * _1862) * _1598) + (((((_1762 * _1766) + _484) * cbLight._m0[_1712].z) * _1786) * _1609);
    float _1936;
    float _1938;
    float _1940;
    if (_1649)
    {
        _1936 = _1872;
        _1938 = _1873;
        _1940 = _1874;
    }
    else
    {
        uint _1942 = _1575 + 2u;
        uint _1946 = _1575 + 10u;
        float _1960 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1942].w)) * _316) * 0.949999988079071044921875);
        float _1961 = _1960 * _1960;
        float _1962 = cbLight._m0[_1942].x + _394;
        float _1963 = cbLight._m0[_1942].y + _395;
        float _1964 = cbLight._m0[_1942].z + _396;
        float _1968 = inversesqrt(dot(vec3(_1962, _1963, _1964), vec3(_1962, _1963, _1964)));
        float _1969 = _1968 * _1962;
        float _1970 = _1968 * _1963;
        float _1971 = _1968 * _1964;
        float _1972 = dot(vec3(_313, _314, _315), vec3(cbLight._m0[_1942].xyz));
        float _3980 = isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0));
        float _1975 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
        float _1976 = dot(vec3(_313, _314, _315), vec3(_1969, _1970, _1971));
        float _3991 = isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0));
        float _1979 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
        float _1980 = dot(vec3(cbLight._m0[_1942].xyz), vec3(_1969, _1970, _1971));
        float _4002 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
        float _1984 = _1961 * _1961;
        float _1988 = ((_1979 * _1979) * (_1984 + (-1.0))) + 1.0;
        float _1995 = exp2(log2(1.0 - (isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0)))) * 5.0);
        float _2002 = 1.0 - _1961;
        float _2012 = (0.5 / (((_1741 * ((_1975 * _2002) + _1961)) + 9.9999999392252902907785028219223e-09) + (((_1741 * _2002) + _1961) * _1975))) * _1975;
        float _4013 = isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0));
        float _2014 = (isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0))) * (_1984 / ((_1988 * _1988) * 3.141590118408203125));
        float _2015 = isnan(1.0) ? _1590 : (isnan(_1590) ? 1.0 : min(_1590, 1.0));
        _1936 = (((((_1995 * _1763) + _481) * cbLight._m0[_1946].x) * _2014) * _2015) + _1872;
        _1938 = (((((_1995 * _1765) + _483) * cbLight._m0[_1946].y) * _2014) * _2015) + _1873;
        _1940 = (((((_1995 * _1766) + _484) * cbLight._m0[_1946].z) * _2014) * _2015) + _1874;
    }
    float _2050;
    float _2052;
    float _2054;
    if (_1667)
    {
        _2050 = _1936;
        _2052 = _1938;
        _2054 = _1940;
    }
    else
    {
        uint _2061 = _1575 + 3u;
        uint _2065 = _1575 + 11u;
        float _2079 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2061].w)) * _316) * 0.949999988079071044921875);
        float _2080 = _2079 * _2079;
        float _2081 = cbLight._m0[_2061].x + _394;
        float _2082 = cbLight._m0[_2061].y + _395;
        float _2083 = cbLight._m0[_2061].z + _396;
        float _2087 = inversesqrt(dot(vec3(_2081, _2082, _2083), vec3(_2081, _2082, _2083)));
        float _2088 = _2087 * _2081;
        float _2089 = _2087 * _2082;
        float _2090 = _2087 * _2083;
        float _2091 = dot(vec3(_313, _314, _315), vec3(cbLight._m0[_2061].xyz));
        float _4029 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
        float _2094 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
        float _2095 = dot(vec3(_313, _314, _315), vec3(_2088, _2089, _2090));
        float _4040 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
        float _2098 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _2099 = dot(vec3(cbLight._m0[_2061].xyz), vec3(_2088, _2089, _2090));
        float _4051 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
        float _2103 = _2080 * _2080;
        float _2107 = ((_2098 * _2098) * (_2103 + (-1.0))) + 1.0;
        float _2114 = exp2(log2(1.0 - (isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0)))) * 5.0);
        float _2121 = 1.0 - _2080;
        float _2131 = (0.5 / (((_1741 * ((_2094 * _2121) + _2080)) + 9.9999999392252902907785028219223e-09) + (((_1741 * _2121) + _2080) * _2094))) * _2094;
        float _4062 = isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0));
        float _2133 = (isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0))) * (_2103 / ((_2107 * _2107) * 3.141590118408203125));
        float _2134 = isnan(1.0) ? _1591 : (isnan(_1591) ? 1.0 : min(_1591, 1.0));
        _2050 = (((((_2114 * _1763) + _481) * cbLight._m0[_2065].x) * _2133) * _2134) + _1936;
        _2052 = (((((_2114 * _1765) + _483) * cbLight._m0[_2065].y) * _2133) * _2134) + _1938;
        _2054 = (((((_2114 * _1766) + _484) * cbLight._m0[_2065].z) * _2133) * _2134) + _1940;
    }
    float _2268;
    float _2270;
    float _2272;
    float _2274;
    float _2276;
    float _2278;
    if (_1573.y == 0u)
    {
        float _2209 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2210 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2209;
        float _2211 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2209;
        float _2212 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2209;
        uvec4 _2224 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2225 = _2224.x;
        uint _2236 = uint((float(_2224.y) * floor(float(uint(cbSceneParam._m0[85u].y * _416) / _2225))) + floor(float(uint(cbSceneParam._m0[85u].x * _415) / _2225)));
        float _2246 = (log2(_2212 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2247 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
        uint _2250 = uint(isnan(14.0) ? _2247 : (isnan(_2247) ? 14.0 : min(_2247, 14.0)));
        uvec4 _2255 = texelFetch(g_lightClusterGridBuffer, int(((_2250 << 2u) + (_2236 << 6u)) >> 2u));
        uint _2256 = _2255.x;
        uint _2257 = _2224.z;
        float _2381;
        float _2383;
        float _2385;
        float _2387;
        float _2389;
        float _2391;
        if (((((1u << ((_2257 >> 4u) & 15u)) + 4294967295u) & _2256) == 0u) || ((_2257 & 240u) == 0u))
        {
            _2381 = 0.0;
            _2383 = 0.0;
            _2385 = 0.0;
            _2387 = 0.0;
            _2389 = 0.0;
            _2391 = 0.0;
        }
        else
        {
            float _2382;
            float _2384;
            float _2386;
            float _2388;
            float _2390;
            float _2392;
            float _2533 = 0.0;
            float _2534 = 0.0;
            float _2535 = 0.0;
            float _2536 = 0.0;
            float _2537 = 0.0;
            float _2538 = 0.0;
            uint _2539 = 0u;
            uint _2548;
            bool _2549;
            for (;;)
            {
                _2548 = texelFetch(g_lightClassification, int((((_2250 << 5u) + (_2236 << 9u)) + (_2539 << 2u)) >> 2u)).x;
                _2549 = _2548 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2549)
                {
                    frontier_phi_68_pred = _2535;
                    frontier_phi_68_pred_1 = _2538;
                    frontier_phi_68_pred_2 = _2537;
                    frontier_phi_68_pred_3 = _2536;
                    frontier_phi_68_pred_4 = _2534;
                    frontier_phi_68_pred_5 = _2533;
                }
                else
                {
                    float _2678;
                    float _2679;
                    float _2680;
                    float _2681;
                    float _2682;
                    float _2683;
                    uint _2684;
                    _2678 = _2533;
                    _2679 = _2534;
                    _2680 = _2535;
                    _2681 = _2536;
                    _2682 = _2537;
                    _2683 = _2538;
                    _2684 = _2548;
                    float _2605;
                    float _2606;
                    float _2607;
                    float _2608;
                    float _2609;
                    float _2610;
                    for (;;)
                    {
                        uint _2688 = uint(findLSB(_2684)) + (_2539 << 5u);
                        uint _2685 = (_2684 + 4294967295u) & _2684;
                        uint _2690 = _2688 * 48u;
                        vec4 _2704 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2690)).x, texelFetch(g_PointLightRenderingBuffer, int(_2690 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2690 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2690 + 3u)).x));
                        uint _2710 = (_2688 * 48u) + 4u;
                        vec4 _2723 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2710)).x, texelFetch(g_PointLightRenderingBuffer, int(_2710 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2710 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2710 + 3u)).x));
                        uint _2729 = (_2688 * 48u) + 8u;
                        vec3 _2740 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2729)).x, texelFetch(g_PointLightRenderingBuffer, int(_2729 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2729 + 2u)).x));
                        float _2744 = _2704.x - _2210;
                        float _2745 = _2704.y - _2211;
                        float _2746 = _2704.z - _2212;
                        float _2747 = dot(vec3(_2744, _2745, _2746), vec3(_2744, _2745, _2746));
                        float _2750 = inversesqrt(_2747);
                        float _2751 = _2750 * _2744;
                        float _2752 = _2750 * _2745;
                        float _2753 = _2750 * _2746;
                        float _2754 = dot(vec3(_436, _439, _442), vec3(_2751, _2752, _2753));
                        float _2759 = 1.0 - (_2747 * _2704.w);
                        float _4088 = isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0));
                        float _2760 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
                        float _2761 = sqrt(_2747) * _2723.w;
                        float _2764 = 1.39999997615814208984375 / (_2761 + 1.39999997615814208984375);
                        float _2765 = _2764 * _2764;
                        float _2768 = ((1.0 - _2765) * _2754) + _2765;
                        float _2771 = _2761 * _2761;
                        float _2775 = ((isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : max(_2768, 0.0))) * _2760) / ((_2771 * 0.699999988079071044921875) + 1.0);
                        float _2779 = (-0.0) - _2210;
                        float _2780 = (-0.0) - _2211;
                        float _2781 = (-0.0) - _2212;
                        float _2785 = inversesqrt(dot(vec3(_2779, _2780, _2781), vec3(_2779, _2780, _2781)));
                        float _2786 = _2785 * _2779;
                        float _2787 = _2785 * _2780;
                        float _2788 = _2785 * _2781;
                        float _2796 = exp2(log2(1.0 / ((_2771 * 3.5) + 5.0)) * 0.25);
                        float _2797 = 1.0 - _512;
                        float _2804 = sqrt(1.0 - ((1.0 - (_2797 * _2797)) * (1.0 - (_2796 * _2796))));
                        float _2805 = _2804 * _2804;
                        float _2806 = _2805 * _2805;
                        float _2807 = _2786 + _2751;
                        float _2808 = _2787 + _2752;
                        float _2809 = _2788 + _2753;
                        float _2813 = inversesqrt(dot(vec3(_2807, _2808, _2809), vec3(_2807, _2808, _2809)));
                        float _2817 = dot(vec3(_436, _439, _442), vec3(_2786, _2787, _2788));
                        float _4104 = isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0));
                        float _2820 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
                        float _2821 = dot(vec3(_436, _439, _442), vec3(_2813 * _2807, _2813 * _2808, _2813 * _2809));
                        float _4115 = isnan(0.0) ? _2821 : (isnan(_2821) ? 0.0 : max(_2821, 0.0));
                        float _2824 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
                        float _2828 = ((_2824 * _2824) * (_2806 + (-1.0))) + 1.0;
                        float _2829 = _2764 * _2805;
                        float _2830 = _2829 * _2829;
                        float _2833 = ((1.0 - _2830) * _2754) + _2830;
                        float _4126 = isnan(0.0) ? _2833 : (isnan(_2833) ? 0.0 : max(_2833, 0.0));
                        float _2834 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
                        float _2835 = 1.0 - _2805;
                        float _2845 = (0.5 / (((_2834 * ((_2820 * _2835) + _2805)) + 9.9999999392252902907785028219223e-09) + (((_2834 * _2835) + _2805) * _2820))) * _2834;
                        float _4137 = isnan(0.0) ? _2845 : (isnan(_2845) ? 0.0 : max(_2845, 0.0));
                        float _2856 = (((_2806 * 3.1415927410125732421875) * (isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0)))) / ((_2828 * _2828) * ((_2771 * 2.1991131305694580078125) + 3.141590118408203125))) * _2760;
                        _2608 = (_2775 * _2723.x) + _2681;
                        _2609 = (_2775 * _2723.y) + _2682;
                        _2610 = (_2775 * _2723.z) + _2683;
                        _2605 = (_2856 * _2740.x) + _2678;
                        _2606 = (_2856 * _2740.y) + _2679;
                        _2607 = (_2856 * _2740.z) + _2680;
                        if (_2685 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2678 = _2605;
                            _2679 = _2606;
                            _2680 = _2607;
                            _2681 = _2608;
                            _2682 = _2609;
                            _2683 = _2610;
                            _2684 = _2685;
                        }
                    }
                    frontier_phi_68_pred = _2607;
                    frontier_phi_68_pred_1 = _2610;
                    frontier_phi_68_pred_2 = _2609;
                    frontier_phi_68_pred_3 = _2608;
                    frontier_phi_68_pred_4 = _2606;
                    frontier_phi_68_pred_5 = _2605;
                }
                _2386 = frontier_phi_68_pred;
                _2392 = frontier_phi_68_pred_1;
                _2390 = frontier_phi_68_pred_2;
                _2388 = frontier_phi_68_pred_3;
                _2384 = frontier_phi_68_pred_4;
                _2382 = frontier_phi_68_pred_5;
                uint _2540 = _2539 + 1u;
                if (_2540 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2533 = _2382;
                    _2534 = _2384;
                    _2535 = _2386;
                    _2536 = _2388;
                    _2537 = _2390;
                    _2538 = _2392;
                    _2539 = _2540;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2381 = _2382;
            _2383 = _2384;
            _2385 = _2386;
            _2387 = _2388;
            _2389 = _2390;
            _2391 = _2392;
        }
        uvec4 _2395 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2396 = _2395.z;
        uint _2398 = (_2396 >> 8u) & 15u;
        float _2501;
        float _2503;
        float _2505;
        float _2507;
        float _2509;
        float _2511;
        if (((4294967295u << _2398) & _2256) == 0u)
        {
            _2501 = _2381;
            _2503 = _2383;
            _2505 = _2385;
            _2507 = _2387;
            _2509 = _2389;
            _2511 = _2391;
        }
        else
        {
            float _2526 = inversesqrt(dot(vec3(_2210, _2211, _2212), vec3(_2210, _2211, _2212)));
            float _2527 = _2526 * _2210;
            float _2528 = _2526 * _2211;
            float _2529 = _2526 * _2212;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2398 < ((_2396 >> 12u) & 15u))
            {
                float _2502;
                float _2504;
                float _2506;
                float _2508;
                float _2510;
                float _2512;
                float _2661 = _2381;
                float _2662 = _2383;
                float _2663 = _2385;
                float _2664 = _2387;
                float _2665 = _2389;
                float _2666 = _2391;
                uint _2667 = _2398;
                uint _2676;
                bool _2677;
                for (;;)
                {
                    _2676 = texelFetch(g_lightClassification, int((((_2250 << 5u) + (_2236 << 9u)) + (_2667 << 2u)) >> 2u)).x;
                    _2677 = _2676 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2677)
                    {
                        frontier_phi_79_pred = _2666;
                        frontier_phi_79_pred_1 = _2665;
                        frontier_phi_79_pred_2 = _2664;
                        frontier_phi_79_pred_3 = _2663;
                        frontier_phi_79_pred_4 = _2662;
                        frontier_phi_79_pred_5 = _2661;
                    }
                    else
                    {
                        float _2870;
                        float _2871;
                        float _2872;
                        float _2873;
                        float _2874;
                        float _2875;
                        float _3166;
                        float _3167;
                        float _3168;
                        float _3169;
                        float _3170;
                        float _3171;
                        float _2883 = _2661;
                        float _2884 = _2662;
                        float _2885 = _2663;
                        float _2886 = _2664;
                        float _2887 = _2665;
                        float _2888 = _2666;
                        uint _2889 = _2676;
                        uint _2890;
                        vec4 _2915;
                        float _2916;
                        vec4 _2931;
                        vec3 _2943;
                        vec4 _2959;
                        vec4 _2975;
                        float _3022;
                        bool _3023;
                        for (;;)
                        {
                            uint _2900 = ((_2667 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2889));
                            _2890 = (_2889 + 4294967295u) & _2889;
                            uint _2902 = _2900 * 40u;
                            _2915 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2902)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2902 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2902 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2902 + 3u)).x));
                            _2916 = _2915.w;
                            uint _2918 = (_2900 * 40u) + 4u;
                            _2931 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2918)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2918 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2918 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2918 + 3u)).x));
                            uint _2933 = (_2900 * 40u) + 8u;
                            _2943 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2933)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2933 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2933 + 2u)).x));
                            uint _2946 = (_2900 * 40u) + 16u;
                            _2959 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2946)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 3u)).x));
                            uint _2962 = (_2900 * 40u) + 20u;
                            _2975 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2962)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2962 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2962 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2962 + 3u)).x));
                            uint _2978 = (_2900 * 40u) + 24u;
                            vec4 _2991 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2978)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2978 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2978 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2978 + 3u)).x));
                            uint _2997 = (_2900 * 40u) + 28u;
                            vec4 _3010 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2997)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2997 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2997 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2997 + 3u)).x));
                            _3022 = fma(_2212, _3010.z, fma(_2211, _3010.y, _3010.x * _2210)) + _3010.w;
                            _3023 = !((fma(_2212, _2991.z, fma(_2211, _2991.y, _2991.x * _2210)) + _2991.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3023)
                            {
                                float _3050 = _2915.x - _2210;
                                float _3051 = _2915.y - _2211;
                                float _3052 = _2915.z - _2212;
                                float _3053 = dot(vec3(_3050, _3051, _3052), vec3(_3050, _3051, _3052));
                                float _3056 = inversesqrt(_3053);
                                float _3057 = _3056 * _3050;
                                float _3058 = _3056 * _3051;
                                float _3059 = _3056 * _3052;
                                float _3063 = 1.0 - (_3053 / (_2916 * _2916));
                                float _4148 = isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : max(_3063, 0.0));
                                float _3064 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
                                float _3068 = sqrt(_3053) * _2931.w;
                                float _3070 = 1.39999997615814208984375 / (_3068 + 1.39999997615814208984375);
                                float _3071 = _3070 * _3070;
                                float _3074 = ((1.0 - _3071) * dot(vec3(_3057, _3058, _3059), vec3(_436, _439, _442))) + _3071;
                                float _3077 = _3068 * _3068;
                                float _3081 = (fma(_2212, _2959.z, fma(_2211, _2959.y, _2959.x * _2210)) + _2959.w) / _3022;
                                float _3082 = (fma(_2212, _2975.z, fma(_2211, _2975.y, _2975.x * _2210)) + _2975.w) / _3022;
                                float _3086 = 1.0 - dot(vec2(_3081, _3082), vec2(_3081, _3082));
                                float _4164 = isnan(0.0) ? _3086 : (isnan(_3086) ? 0.0 : max(_3086, 0.0));
                                float _3087 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
                                float _3088 = _3087 * (((isnan(0.0) ? _3074 : (isnan(_3074) ? 0.0 : max(_3074, 0.0))) * _3064) / ((_3077 * 0.699999988079071044921875) + 1.0));
                                float _3100 = exp2(log2(1.0 / ((_3077 * 3.5) + 5.0)) * 0.25);
                                float _3101 = 1.0 - _512;
                                float _3108 = sqrt(1.0 - ((1.0 - (_3101 * _3101)) * (1.0 - (_3100 * _3100))));
                                float _3109 = _3108 * _3108;
                                float _3110 = _3109 * _3109;
                                float _3111 = _3057 - _2527;
                                float _3112 = _3058 - _2528;
                                float _3113 = _3059 - _2529;
                                float _3117 = inversesqrt(dot(vec3(_3111, _3112, _3113), vec3(_3111, _3112, _3113)));
                                float _3121 = dot(vec3(_436, _439, _442), vec3((-0.0) - _2527, (-0.0) - _2528, (-0.0) - _2529));
                                float _4175 = isnan(0.0) ? _3121 : (isnan(_3121) ? 0.0 : max(_3121, 0.0));
                                float _3124 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
                                float _3125 = dot(vec3(_436, _439, _442), vec3(_3117 * _3111, _3117 * _3112, _3117 * _3113));
                                float _4186 = isnan(0.0) ? _3125 : (isnan(_3125) ? 0.0 : max(_3125, 0.0));
                                float _3128 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
                                float _3132 = ((_3128 * _3128) * (_3110 + (-1.0))) + 1.0;
                                float _3133 = _3070 * _3109;
                                float _3134 = _3133 * _3133;
                                float _3140 = ((1.0 - _3134) * dot(vec3(_436, _439, _442), vec3(_3057, _3058, _3059))) + _3134;
                                float _4197 = isnan(0.0) ? _3140 : (isnan(_3140) ? 0.0 : max(_3140, 0.0));
                                float _3141 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
                                float _3142 = 1.0 - _3109;
                                float _3152 = (0.5 / (((_3141 * ((_3124 * _3142) + _3109)) + 9.9999999392252902907785028219223e-09) + (((_3141 * _3142) + _3109) * _3124))) * _3141;
                                float _4208 = isnan(0.0) ? _3152 : (isnan(_3152) ? 0.0 : max(_3152, 0.0));
                                float _3162 = (_3087 * _3064) * (((_3110 * 3.1415927410125732421875) * (isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0)))) / ((_3132 * _3132) * ((_3077 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3088 * _2931.z;
                                frontier_phi_85_pred_1 = _3088 * _2931.y;
                                frontier_phi_85_pred_2 = _3088 * _2931.x;
                                frontier_phi_85_pred_3 = _3162 * _2943.z;
                                frontier_phi_85_pred_4 = _3162 * _2943.y;
                                frontier_phi_85_pred_5 = _3162 * _2943.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3171 = frontier_phi_85_pred;
                            _3170 = frontier_phi_85_pred_1;
                            _3169 = frontier_phi_85_pred_2;
                            _3168 = frontier_phi_85_pred_3;
                            _3167 = frontier_phi_85_pred_4;
                            _3166 = frontier_phi_85_pred_5;
                            _2873 = _3169 + _2886;
                            _2874 = _3170 + _2887;
                            _2875 = _3171 + _2888;
                            _2870 = _3166 + _2883;
                            _2871 = _3167 + _2884;
                            _2872 = _3168 + _2885;
                            if (_2890 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2883 = _2870;
                                _2884 = _2871;
                                _2885 = _2872;
                                _2886 = _2873;
                                _2887 = _2874;
                                _2888 = _2875;
                                _2889 = _2890;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2875;
                        frontier_phi_79_pred_1 = _2874;
                        frontier_phi_79_pred_2 = _2873;
                        frontier_phi_79_pred_3 = _2872;
                        frontier_phi_79_pred_4 = _2871;
                        frontier_phi_79_pred_5 = _2870;
                    }
                    _2512 = frontier_phi_79_pred;
                    _2510 = frontier_phi_79_pred_1;
                    _2508 = frontier_phi_79_pred_2;
                    _2506 = frontier_phi_79_pred_3;
                    _2504 = frontier_phi_79_pred_4;
                    _2502 = frontier_phi_79_pred_5;
                    uint _2668 = _2667 + 1u;
                    if (_2668 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2661 = _2502;
                        _2662 = _2504;
                        _2663 = _2506;
                        _2664 = _2508;
                        _2665 = _2510;
                        _2666 = _2512;
                        _2667 = _2668;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2508;
                frontier_phi_60_61_ladder_1 = _2512;
                frontier_phi_60_61_ladder_2 = _2510;
                frontier_phi_60_61_ladder_3 = _2506;
                frontier_phi_60_61_ladder_4 = _2504;
                frontier_phi_60_61_ladder_5 = _2502;
            }
            else
            {
                frontier_phi_60_61_ladder = _2387;
                frontier_phi_60_61_ladder_1 = _2391;
                frontier_phi_60_61_ladder_2 = _2389;
                frontier_phi_60_61_ladder_3 = _2385;
                frontier_phi_60_61_ladder_4 = _2383;
                frontier_phi_60_61_ladder_5 = _2381;
            }
            _2501 = frontier_phi_60_61_ladder_5;
            _2503 = frontier_phi_60_61_ladder_4;
            _2505 = frontier_phi_60_61_ladder_3;
            _2507 = frontier_phi_60_61_ladder;
            _2509 = frontier_phi_60_61_ladder_2;
            _2511 = frontier_phi_60_61_ladder_1;
        }
        float _2516 = isnan(1.0) ? _496 : (isnan(_496) ? 1.0 : min(_496, 1.0));
        _2268 = (_2516 * _2507) + _1705;
        _2270 = (_2516 * _2509) + _1707;
        _2272 = (_2516 * _2511) + _1709;
        _2274 = ((_2501 * _481) * _2516) + _2050;
        _2276 = ((_2503 * _483) * _2516) + _2052;
        _2278 = ((_2505 * _484) * _2516) + _2054;
    }
    else
    {
        _2268 = _1705;
        _2270 = _1707;
        _2272 = _1709;
        _2274 = _2050;
        _2276 = _2052;
        _2278 = _2054;
    }
    uint _2284 = _457 + uint(cbMatDynParam._m0[0u].w);
    float _4224 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _4235 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _4246 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _2315 = (((isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0))) * (_2268 + ((isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0))) * _496))) + ((_2274 + ((isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0))) * _1338)) * cbPerFrame._m0[3u].x)) + (((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].y) * _295.x) * cbInstanceData._m0[_2284].x);
    float _2317 = ((((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].y) * _295.y) * cbInstanceData._m0[_2284].y) + ((_2276 + ((isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0))) * _1338)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0))) * (_2270 + ((isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0))) * _496)));
    float _2319 = ((((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].y) * _295.z) * cbInstanceData._m0[_2284].z) + ((_2278 + ((isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0))) * _1338)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0))) * (_2272 + ((isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0))) * _496)));
    float _2320 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
    float _2321 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
    float _2322 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
    uint _2323 = _455 + 6u;
    float _2331 = _415 / cbSceneParam._m0[86u].x;
    float _2332 = _416 / cbSceneParam._m0[86u].y;
    vec4 _2346 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2331, _2332, (log2((isnan(cbSceneParam._m0[77u].w) ? _336 : (isnan(_336) ? cbSceneParam._m0[77u].w : min(_336, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2348 = _2346.x;
    float _2349 = _2346.y;
    float _2350 = _2346.z;
    float _2351 = _2346.w;
    float _2443;
    float _2445;
    float _2447;
    float _2449;
    if (_336 > cbSceneParam._m0[78u].w)
    {
        float _2406 = isnan(_336) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _336 : min(cbSceneParam._m0[80u].w, _336));
        float _2407 = _2406 / _336;
        float _2418 = _2407 * _387;
        float _2419 = _388 * _2407;
        float _2420 = (-0.0) - _2419;
        float _2421 = _2407 * _389;
        float _2423 = (cbSceneParam._m0[77u].w * _2420) / _2406;
        float _2424 = _2423 + cbSceneParam._m0[79u].w;
        float _2425 = cbSceneParam._m0[79u].w - _2419;
        float _2431 = sqrt(((_2418 * _2418) + (_2419 * _2419)) + (_2421 * _2421));
        float _2434 = (1.0 - (cbSceneParam._m0[77u].w / _2406)) * _2431;
        float _2439 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2441 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2618;
        if (abs((_2420 - _2423) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2618 = ((((_2424 > 0.0) ? exp2(_2439 * _2424) : (2.0 - exp2(_2441 * _2424))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2434;
        }
        else
        {
            float _2562 = 1.0 / cbSceneParam._m0[80u].x;
            float _2563 = isnan(_2425) ? _2424 : (isnan(_2424) ? _2425 : max(_2424, _2425));
            float _2564 = isnan(_2425) ? _2424 : (isnan(_2424) ? _2425 : min(_2424, _2425));
            float _2573 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : min(_2563, 0.0));
            float _2574 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : min(_2564, 0.0));
            _2618 = ((abs(_2431 / _2420) * cbSceneParam._m0[80u].y) * ((((_2573 - _2574) * 2.0) - ((exp2(_2439 * (isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0)))) - exp2(_2439 * (isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0))))) * _2562)) - ((exp2(_2441 * _2573) - exp2(_2441 * _2574)) * _2562))) + (_2434 * cbSceneParam._m0[80u].z);
        }
        vec4 _2620 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2331, _2332, 1.0), 0.0);
        float _2629 = exp2((_2618 * (-1.44269502162933349609375)) * (1.0 - _2620.w));
        float _2630 = log2(_2629);
        float _2646 = log2(_2351);
        _2443 = (exp2(_2646 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2630 * cbSceneParam._m0[78u].x)) * _2620.x) / cbSceneParam._m0[78u].x)) + _2348;
        _2445 = (exp2(_2646 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2630 * cbSceneParam._m0[78u].y)) * _2620.y) / cbSceneParam._m0[78u].y)) + _2349;
        _2447 = (exp2(_2646 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2630 * cbSceneParam._m0[78u].z)) * _2620.z) / cbSceneParam._m0[78u].z)) + _2350;
        _2449 = _2629 * _2351;
    }
    else
    {
        _2443 = _2348;
        _2445 = _2349;
        _2447 = _2350;
        _2449 = _2351;
    }
    bool _2656;
    vec4 _2459;
    vec4 _2481;
    float _2483;
    float _2487;
    float _2488;
    float _2489;
    float _2490;
    bool _2500;
    for (;;)
    {
        _2459 = cbMatDynParam._m0[0u];
        float _2461 = roundEven(_2459.y);
        bool _2462 = _2461 == 3.0;
        float _2463 = log2(_2449);
        float _2470 = exp2(_2463 * cbSceneParam._m0[78u].x) * _2320;
        float _2471 = exp2(_2463 * cbSceneParam._m0[78u].y) * _2321;
        float _2472 = exp2(_2463 * cbSceneParam._m0[78u].z) * _2322;
        float _2479 = _403 + (-0.5);
        _2481 = cbMtdParam._m0[1u];
        _2483 = _2481.y * _2479;
        float _2486 = (_2461 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2487 = _2486 * (_2462 ? _2470 : (_2470 + (cbSceneParam._m0[72u].w * _2443)));
        _2488 = _2486 * (_2462 ? _2471 : (_2471 + (cbSceneParam._m0[72u].w * _2445)));
        _2489 = _2486 * (_2462 ? _2472 : (_2472 + (cbSceneParam._m0[72u].w * _2447)));
        _2490 = _2479 * 0.999000012874603271484375;
        _2500 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2500)
        {
            if ((cbInstanceData._m0[_455 + 7u].x + _2490) < 0.5)
            {
                _2656 = true;
                break;
            }
        }
        uint _2597 = _457 + uint(_2459.w);
        if ((cbInstanceData._m0[_2597].w < 1.0) && ((cbInstanceData._m0[_2597].w + _2490) < 0.5))
        {
            _2656 = true;
            break;
        }
        if ((_2483 + 1.0) < _2481.x)
        {
            _2656 = true;
            break;
        }
        _2656 = false;
        break;
    }
    float _2861;
    if (_2656)
    {
        discard_state = true;
        _2861 = 0.0;
    }
    else
    {
        _2861 = cbInstanceData._m0[_2323].w;
    }
    SV_Target.x = _2487;
    SV_Target.y = _2488;
    SV_Target.z = _2489;
    SV_Target.w = _2861;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2323].w;
    discard_exit();
}


