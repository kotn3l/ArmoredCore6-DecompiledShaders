#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M1_Emissive_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M1_Emissive_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M1_Emissive_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _855;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _187 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _194 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _195 = _194 * NORMAL.x;
    float _196 = _194 * NORMAL.y;
    float _197 = _194 * NORMAL.z;
    float _201 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _209;
    float _210;
    float _211;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _209 = (-0.0) - _195;
        _210 = (-0.0) - _196;
        _211 = (-0.0) - _197;
    }
    else
    {
        _209 = _195;
        _210 = _196;
        _211 = _197;
    }
    vec4 _231 = texture(sampler2D(M_AMSN_M1_Emissive_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _237 = _231.x * cbMtdParam._m0[9u].x;
    float _238 = _231.y * cbMtdParam._m0[9u].y;
    float _239 = _231.z * cbMtdParam._m0[9u].z;
    vec4 _255 = texture(sampler2D(M_AMSN_M1_Emissive_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _259 = _255.z;
    float _263 = (_255.x * 2.0) + (-1.0);
    float _265 = (_255.y * 2.0) + (-1.0);
    float _266 = dot(vec2(_263, _265), vec2(_263, _265));
    float _3216 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _272 = sqrt(1.0 - (isnan(1.0) ? _3216 : (isnan(_3216) ? 1.0 : min(_3216, 1.0))));
    vec4 _291 = texture(sampler2D(M_AMSN_M1_Emissive_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _298 = fma(_272, _209, fma(_265, _201 * TANGENT.x, (_187 * _180) * _263));
    float _301 = fma(_272, _210, fma(_265, _201 * TANGENT.y, (_187 * _181) * _263));
    float _304 = fma(_272, _211, fma(_265, _201 * TANGENT.z, (_187 * _182) * _263));
    float _308 = inversesqrt(dot(vec3(_298, _301, _304), vec3(_298, _301, _304)));
    float _309 = _308 * _298;
    float _310 = _308 * _301;
    float _311 = _308 * _304;
    float _3227 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _312 = isnan(1.0) ? _3227 : (isnan(_3227) ? 1.0 : min(_3227, 1.0));
    float _3238 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _3249 = isnan(0.0) ? _238 : (isnan(_238) ? 0.0 : max(_238, 0.0));
    float _3260 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _3271 = isnan(0.0) ? cbMtdParam._m0[11u].x : (isnan(cbMtdParam._m0[11u].x) ? 0.0 : max(cbMtdParam._m0[11u].x, 0.0));
    float _316 = isnan(1.0) ? _3271 : (isnan(_3271) ? 1.0 : min(_3271, 1.0));
    float _332 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _373 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _383 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _373);
    float _384 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _373);
    float _385 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _373);
    float _389 = inversesqrt(dot(vec3(_383, _384, _385), vec3(_383, _384, _385)));
    float _390 = _383 * _389;
    float _391 = _384 * _389;
    float _392 = _385 * _389;
    float _398 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _399 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _420 = fma(_311, cbSceneParam._m0[5u].z, fma(_310, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _309));
    float _423 = fma(_311, cbSceneParam._m0[6u].z, fma(_310, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _309));
    float _426 = fma(_311, cbSceneParam._m0[7u].z, fma(_310, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _309));
    uint _439 = uint(roundEven(NORMAL.w)) * 13u;
    uint _441 = _439 + 9u;
    uint _442 = _441 + uint(cbMatDynParam._m0[0u].w);
    float _448 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3238 : (isnan(_3238) ? 1.0 : min(_3238, 1.0)))) * cbInstanceData._m0[_442].x;
    float _449 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3249 : (isnan(_3249) ? 1.0 : min(_3249, 1.0)))) * cbInstanceData._m0[_442].y;
    float _450 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3260 : (isnan(_3260) ? 1.0 : min(_3260, 1.0)))) * cbInstanceData._m0[_442].z;
    float _3282 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _451 = isnan(1.0) ? _3282 : (isnan(_3282) ? 1.0 : min(_3282, 1.0));
    float _3293 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _452 = isnan(1.0) ? _3293 : (isnan(_3293) ? 1.0 : min(_3293, 1.0));
    float _3304 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _453 = isnan(1.0) ? _3304 : (isnan(_3304) ? 1.0 : min(_3304, 1.0));
    float _454 = 1.0 - _316;
    float _455 = _451 * _454;
    float _456 = _452 * _454;
    float _457 = _453 * _454;
    float _462 = (_451 + (-0.039999999105930328369140625)) * _316;
    float _463 = (_452 + (-0.039999999105930328369140625)) * _316;
    float _464 = (_453 + (-0.039999999105930328369140625)) * _316;
    float _465 = _462 + 0.039999999105930328369140625;
    float _467 = _463 + 0.039999999105930328369140625;
    float _468 = _464 + 0.039999999105930328369140625;
    vec4 _477 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _398, cbSceneParam._m0[86u].y * _399));
    float _480 = _477.x * TEXCOORD.z;
    float _481 = dot(vec3(_309, _310, _311), vec3(_390, _391, _392));
    float _484 = _481 * 2.0;
    float _488 = (_484 * _309) - _390;
    float _489 = (_484 * _310) - _391;
    float _490 = (_484 * _311) - _392;
    float _494 = abs(dot(vec3(_390, _391, _392), vec3(_309, _310, _311)));
    float _3315 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _496 = sqrt(_312);
    float _509 = exp2((_496 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3315 : (isnan(_3315) ? 1.0 : min(_3315, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_496 * 3.0));
    float _515 = (1.0 - _509) * ((_496 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _516 = _509 * _496;
    float _544 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _548 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _552 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _854;
    float _856;
    float _857;
    float _858;
    float _859;
    float _860;
    float _861;
    float _862;
    float _863;
    float _864;
    float _865;
    float _866;
    float _867;
    float _868;
    float _869;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _579 = fma(_552, cbModelParam._m0[26u].z, fma(_548, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _544));
        float _583 = fma(_552, cbModelParam._m0[27u].z, fma(_548, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _544));
        float _587 = fma(_552, cbModelParam._m0[28u].z, fma(_548, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _544));
        float _612 = _544 + _309;
        float _613 = _548 + _310;
        float _614 = _552 + _311;
        float _624 = fma(_614, cbModelParam._m0[26u].z, fma(_613, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _612)) - _579;
        float _625 = fma(_614, cbModelParam._m0[27u].z, fma(_613, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _612)) - _583;
        float _626 = fma(_614, cbModelParam._m0[28u].z, fma(_613, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _612)) - _587;
        float _630 = inversesqrt(dot(vec3(_624, _625, _626), vec3(_624, _625, _626)));
        float _643 = ((_630 * _624) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_579 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _644 = ((_630 * _625) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_583 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _645 = ((_630 * _626) / cbModelParam._m0[34u].z) + ((((((_587 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _648 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_643, _644, _645), 0.0);
        vec4 _655 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_643, _644, _645), 0.0);
        vec4 _662 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_643, _644, _645), 0.0);
        vec4 _669 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_643, _644, _645), 0.0);
        float _682 = exp2((_648.w + (-0.5)) * 20.0) * 2.0;
        float _683 = _682 * (_648.x + (-0.5));
        float _684 = _682 * (_648.y + (-0.5));
        float _685 = _682 * (_648.z + (-0.5));
        float _692 = exp2((_655.w + (-0.5)) * 20.0) * 2.0;
        float _693 = _692 * (_655.x + (-0.5));
        float _694 = _692 * (_655.y + (-0.5));
        float _695 = _692 * (_655.z + (-0.5));
        float _702 = exp2((_662.w + (-0.5)) * 20.0) * 2.0;
        float _703 = _702 * (_662.x + (-0.5));
        float _704 = _702 * (_662.y + (-0.5));
        float _705 = _702 * (_662.z + (-0.5));
        float _712 = exp2((_669.w + (-0.5)) * 20.0) * 2.0;
        float _713 = _712 * (_669.x + (-0.5));
        float _714 = _712 * (_669.y + (-0.5));
        float _715 = _712 * (_669.z + (-0.5));
        float _716 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
        float _717 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
        float _718 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
        float _719 = _683 * 0.5;
        float _720 = _693 * 0.5;
        float _721 = _703 * 0.5;
        float _722 = dot(vec3(_719, _720, _721), vec3(_719, _720, _721));
        float _727 = (_722 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_722);
        float _736 = (dot(vec3(_309, _310, _311), vec3(_727 * _719, _727 * _720, _727 * _721)) + 1.0) * 0.5;
        float _3341 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
        float _746 = sqrt(((_720 * _720) + (_719 * _719)) + (_721 * _721)) / (_716 + 9.9999997473787516355514526367188e-06);
        float _3352 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
        float _747 = isnan(1.0) ? _3352 : (isnan(_3352) ? 1.0 : min(_3352, 1.0));
        float _748 = _747 * 2.0;
        float _752 = (1.0 - _747) / (_747 + 1.0);
        float _3363 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
        float _753 = isnan(1.0) ? _3363 : (isnan(_3363) ? 1.0 : min(_3363, 1.0));
        float _762 = ((((1.0 - _753) * (_748 + 2.0)) * exp2(log2(isnan(1.0) ? _3341 : (isnan(_3341) ? 1.0 : min(_3341, 1.0))) * (_748 + 1.0))) + _753) * _716;
        float _763 = _684 * 0.5;
        float _764 = _694 * 0.5;
        float _765 = _704 * 0.5;
        float _766 = dot(vec3(_763, _764, _765), vec3(_763, _764, _765));
        float _771 = (_766 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_766);
        float _779 = (dot(vec3(_309, _310, _311), vec3(_771 * _763, _771 * _764, _771 * _765)) + 1.0) * 0.5;
        float _3374 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
        float _788 = sqrt(((_764 * _764) + (_763 * _763)) + (_765 * _765)) / (_717 + 9.9999997473787516355514526367188e-06);
        float _3385 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
        float _789 = isnan(1.0) ? _3385 : (isnan(_3385) ? 1.0 : min(_3385, 1.0));
        float _790 = _789 * 2.0;
        float _794 = (1.0 - _789) / (_789 + 1.0);
        float _3396 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
        float _795 = isnan(1.0) ? _3396 : (isnan(_3396) ? 1.0 : min(_3396, 1.0));
        float _804 = ((((1.0 - _795) * (_790 + 2.0)) * exp2(log2(isnan(1.0) ? _3374 : (isnan(_3374) ? 1.0 : min(_3374, 1.0))) * (_790 + 1.0))) + _795) * _717;
        float _805 = _685 * 0.5;
        float _806 = _695 * 0.5;
        float _807 = _705 * 0.5;
        float _808 = dot(vec3(_805, _806, _807), vec3(_805, _806, _807));
        float _813 = (_808 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_808);
        float _821 = (dot(vec3(_309, _310, _311), vec3(_813 * _805, _813 * _806, _813 * _807)) + 1.0) * 0.5;
        float _3407 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
        float _830 = sqrt(((_806 * _806) + (_805 * _805)) + (_807 * _807)) / (_718 + 9.9999997473787516355514526367188e-06);
        float _3418 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
        float _831 = isnan(1.0) ? _3418 : (isnan(_3418) ? 1.0 : min(_3418, 1.0));
        float _832 = _831 * 2.0;
        float _836 = (1.0 - _831) / (_831 + 1.0);
        float _3429 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
        float _837 = isnan(1.0) ? _3429 : (isnan(_3429) ? 1.0 : min(_3429, 1.0));
        float _846 = ((((1.0 - _837) * (_832 + 2.0)) * exp2(log2(isnan(1.0) ? _3407 : (isnan(_3407) ? 1.0 : min(_3407, 1.0))) * (_832 + 1.0))) + _837) * _718;
        _854 = _685;
        _856 = _684;
        _857 = _683;
        _858 = _695;
        _859 = _694;
        _860 = _693;
        _861 = _705;
        _862 = _704;
        _863 = _703;
        _864 = _718;
        _865 = _717;
        _866 = _716;
        _867 = cbModelParam._m0[36u].z * (isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0)));
        _868 = cbModelParam._m0[36u].z * (isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0)));
        _869 = cbModelParam._m0[36u].z * (isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0)));
    }
    else
    {
        _854 = _855;
        _856 = _855;
        _857 = _855;
        _858 = _855;
        _859 = _855;
        _860 = _855;
        _861 = _855;
        _862 = _855;
        _863 = _855;
        _864 = _855;
        _865 = _855;
        _866 = _855;
        _867 = 0.0;
        _868 = 0.0;
        _869 = 0.0;
    }
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _895 = fma(_552, cbModelParam._m0[30u].z, fma(_548, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _544));
        float _899 = fma(_552, cbModelParam._m0[31u].z, fma(_548, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _544));
        float _903 = fma(_552, cbModelParam._m0[32u].z, fma(_548, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _544));
        float _926 = _544 + _309;
        float _927 = _548 + _310;
        float _928 = _552 + _311;
        float _938 = fma(_928, cbModelParam._m0[30u].z, fma(_927, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _926)) - _895;
        float _939 = fma(_928, cbModelParam._m0[31u].z, fma(_927, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _926)) - _899;
        float _940 = fma(_928, cbModelParam._m0[32u].z, fma(_927, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _926)) - _903;
        float _944 = inversesqrt(dot(vec3(_938, _939, _940), vec3(_938, _939, _940)));
        float _957 = ((_944 * _938) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_895 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _958 = ((_944 * _939) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_899 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _959 = ((_944 * _940) / cbModelParam._m0[35u].z) + ((((((_903 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _961 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_957, _958, _959), 0.0);
        vec4 _968 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_957, _958, _959), 0.0);
        vec4 _975 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_957, _958, _959), 0.0);
        vec4 _982 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_957, _958, _959), 0.0);
        float _994 = exp2((_961.w + (-0.5)) * 20.0) * 2.0;
        float _995 = _994 * (_961.x + (-0.5));
        float _996 = _994 * (_961.y + (-0.5));
        float _997 = _994 * (_961.z + (-0.5));
        float _1004 = exp2((_968.w + (-0.5)) * 20.0) * 2.0;
        float _1005 = _1004 * (_968.x + (-0.5));
        float _1006 = _1004 * (_968.y + (-0.5));
        float _1007 = _1004 * (_968.z + (-0.5));
        float _1014 = exp2((_975.w + (-0.5)) * 20.0) * 2.0;
        float _1015 = _1014 * (_975.x + (-0.5));
        float _1016 = _1014 * (_975.y + (-0.5));
        float _1017 = _1014 * (_975.z + (-0.5));
        float _1024 = exp2((_982.w + (-0.5)) * 20.0) * 2.0;
        float _1025 = _1024 * (_982.x + (-0.5));
        float _1026 = _1024 * (_982.y + (-0.5));
        float _1027 = _1024 * (_982.z + (-0.5));
        float _1028 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1029 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1030 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1031 = _995 * 0.5;
        float _1032 = _1005 * 0.5;
        float _1033 = _1015 * 0.5;
        float _1034 = dot(vec3(_1031, _1032, _1033), vec3(_1031, _1032, _1033));
        float _1039 = (_1034 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1034);
        float _1047 = (dot(vec3(_309, _310, _311), vec3(_1039 * _1031, _1039 * _1032, _1039 * _1033)) + 1.0) * 0.5;
        float _3470 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1056 = sqrt(((_1032 * _1032) + (_1031 * _1031)) + (_1033 * _1033)) / (_1028 + 9.9999997473787516355514526367188e-06);
        float _3481 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1057 = isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0));
        float _1058 = _1057 * 2.0;
        float _1062 = (1.0 - _1057) / (_1057 + 1.0);
        float _3492 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1063 = isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0));
        float _1072 = ((((1.0 - _1063) * (_1058 + 2.0)) * exp2(log2(isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0))) * (_1058 + 1.0))) + _1063) * _1028;
        float _1073 = _996 * 0.5;
        float _1074 = _1006 * 0.5;
        float _1075 = _1016 * 0.5;
        float _1076 = dot(vec3(_1073, _1074, _1075), vec3(_1073, _1074, _1075));
        float _1081 = (_1076 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1076);
        float _1089 = (dot(vec3(_309, _310, _311), vec3(_1081 * _1073, _1081 * _1074, _1081 * _1075)) + 1.0) * 0.5;
        float _3503 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1098 = sqrt(((_1074 * _1074) + (_1073 * _1073)) + (_1075 * _1075)) / (_1029 + 9.9999997473787516355514526367188e-06);
        float _3514 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1099 = isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0));
        float _1100 = _1099 * 2.0;
        float _1104 = (1.0 - _1099) / (_1099 + 1.0);
        float _3525 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1105 = isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0));
        float _1114 = ((((1.0 - _1105) * (_1100 + 2.0)) * exp2(log2(isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0))) * (_1100 + 1.0))) + _1105) * _1029;
        float _1115 = _997 * 0.5;
        float _1116 = _1007 * 0.5;
        float _1117 = _1017 * 0.5;
        float _1118 = dot(vec3(_1115, _1116, _1117), vec3(_1115, _1116, _1117));
        float _1123 = (_1118 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1118);
        float _1131 = (dot(vec3(_309, _310, _311), vec3(_1123 * _1115, _1123 * _1116, _1123 * _1117)) + 1.0) * 0.5;
        float _3536 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1140 = sqrt(((_1116 * _1116) + (_1115 * _1115)) + (_1117 * _1117)) / (_1030 + 9.9999997473787516355514526367188e-06);
        float _3547 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1141 = isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0));
        float _1142 = _1141 * 2.0;
        float _1146 = (1.0 - _1141) / (_1141 + 1.0);
        float _3558 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1147 = isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0));
        float _1156 = ((((1.0 - _1147) * (_1142 + 2.0)) * exp2(log2(isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0))) * (_1142 + 1.0))) + _1147) * _1030;
        _1164 = _997;
        _1165 = _996;
        _1166 = _995;
        _1167 = _1007;
        _1168 = _1006;
        _1169 = _1005;
        _1170 = _1017;
        _1171 = _1016;
        _1172 = _1015;
        _1173 = _1030;
        _1174 = _1029;
        _1175 = _1028;
        _1176 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0)));
        _1177 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0)));
        _1178 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0)));
    }
    else
    {
        _1164 = _855;
        _1165 = _855;
        _1166 = _855;
        _1167 = _855;
        _1168 = _855;
        _1169 = _855;
        _1170 = _855;
        _1171 = _855;
        _1172 = _855;
        _1173 = _855;
        _1174 = _855;
        _1175 = _855;
        _1176 = 0.0;
        _1177 = 0.0;
        _1178 = 0.0;
    }
    float _1188 = (cbModelParam._m0[1u].x * (_1176 - _867)) + _867;
    float _1189 = (cbModelParam._m0[1u].x * (_1177 - _868)) + _868;
    float _1190 = (cbModelParam._m0[1u].x * (_1178 - _869)) + _869;
    float _1211 = fma(_1190, cbSceneParam._m0[89u].z, fma(_1189, cbSceneParam._m0[89u].y, _1188 * cbSceneParam._m0[89u].x));
    float _1214 = fma(_1190, cbSceneParam._m0[90u].z, fma(_1189, cbSceneParam._m0[90u].y, _1188 * cbSceneParam._m0[90u].x));
    float _1217 = fma(_1190, cbSceneParam._m0[91u].z, fma(_1189, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1188));
    float _1232 = _488 * 0.5;
    float _1233 = _489 * 0.5;
    float _1234 = _490 * 0.5;
    float _1235 = dot(vec4(_1232, _1233, _1234, 1.0), vec4(_1166, _1169, _1172, _1175));
    float _1238 = dot(vec4(_1232, _1233, _1234, 1.0), vec4(_1165, _1168, _1171, _1174));
    float _1241 = dot(vec4(_1232, _1233, _1234, 1.0), vec4(_1164, _1167, _1170, _1173));
    float _1275;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1248 = dot(vec4(_1232, _1233, _1234, 1.0), vec4(_854, _858, _861, _864));
        float _1252 = dot(vec4(_1232, _1233, _1234, 1.0), vec4(_856, _859, _862, _865));
        float _1256 = dot(vec4(_1232, _1233, _1234, 1.0), vec4(_857, _860, _863, _866));
        float _1263 = dot(vec4(cbModelParam._m0[39u]), vec4(_1232, _1233, _1234, 1.0));
        _1275 = dot(vec3(isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0)), isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0)), isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1263) ? 0.0 : (isnan(0.0) ? _1263 : max(0.0, _1263))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1275 = 1.0;
    }
    float _1286;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1277 = dot(vec4(cbModelParam._m0[40u]), vec4(_1232, _1233, _1234, 1.0));
        _1286 = dot(vec3(isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0)), isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0)), isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1277) ? 0.0 : (isnan(0.0) ? _1277 : max(0.0, _1277))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1286 = 1.0;
    }
    float _1290 = (_1286 * cbModelParam._m0[1u].x) + (_1275 * (1.0 - cbModelParam._m0[1u].x));
    float _1300 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _312);
    float _1301 = isnan(_1300) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1300 : min(cbModelParam._m0[25u].z, _1300));
    float _1383;
    float _1385;
    float _1387;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1350 = fma(_552, cbModelParam._m0[13u].z, fma(_548, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _544)) + cbModelParam._m0[13u].w;
        float _1354 = fma(_552, cbModelParam._m0[14u].z, fma(_548, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _544)) + cbModelParam._m0[14u].w;
        float _1358 = fma(_552, cbModelParam._m0[15u].z, fma(_548, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _544)) + cbModelParam._m0[15u].w;
        float _1361 = fma(_490, cbModelParam._m0[13u].z, fma(_489, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _488));
        float _1364 = fma(_490, cbModelParam._m0[14u].z, fma(_489, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _488));
        float _1367 = fma(_490, cbModelParam._m0[15u].z, fma(_489, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _488));
        float _1395;
        if (_1361 > 0.0)
        {
            _1395 = abs((1.0 - _1350) / _1361);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1361 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1350 + 1.0) / _1361);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1395 = frontier_phi_16_14_ladder;
        }
        float _1602;
        if (_1364 > 0.0)
        {
            _1602 = abs((1.0 - _1354) / _1364);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1364 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1354 + 1.0) / _1364);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1602 = frontier_phi_25_21_ladder;
        }
        float _1856;
        if (_1367 > 0.0)
        {
            _1856 = abs((1.0 - _1358) / _1367);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1367 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1358 + 1.0) / _1367);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1856 = frontier_phi_37_32_ladder;
        }
        float _1858 = isnan(_1602) ? _1395 : (isnan(_1395) ? _1602 : min(_1395, _1602));
        float _1859 = isnan(_1856) ? _1858 : (isnan(_1858) ? _1856 : min(_1858, _1856));
        float _1863 = (_1859 * _1361) + _1350;
        float _1864 = (_1859 * _1364) + _1354;
        float _1865 = (_1859 * _1367) + _1358;
        float _1866 = _1859 * 9.9999997473787516355514526367188e-05;
        float _1868 = (-1.0) - _1866;
        float _1870 = _1866 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1865 > _1870) || ((_1865 < _1868) || ((_1864 > _1870) || ((_1864 < _1868) || ((_1863 < _1868) || (_1863 > _1870))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1993 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1865, cbModelParam._m0[9u].z, fma(_1864, cbModelParam._m0[9u].y, _1863 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1865, cbModelParam._m0[10u].z, fma(_1864, cbModelParam._m0[10u].y, _1863 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1865, cbModelParam._m0[11u].z, fma(_1864, cbModelParam._m0[11u].y, _1863 * cbModelParam._m0[11u].x))), _1301);
            frontier_phi_15_37_ladder = _1993.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _1993.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _1993.x * cbModelParam._m0[1u].y;
        }
        _1383 = frontier_phi_15_37_ladder_2;
        _1385 = frontier_phi_15_37_ladder_1;
        _1387 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1371 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_488, _489, _490), _1301);
        _1383 = _1371.x * cbModelParam._m0[1u].y;
        _1385 = _1371.y * cbModelParam._m0[1u].y;
        _1387 = _1371.z * cbModelParam._m0[1u].y;
    }
    float _1391 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _312);
    float _1392 = isnan(_1391) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1391 : min(cbModelParam._m0[25u].w, _1391));
    float _1485;
    float _1487;
    float _1489;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1449 = fma(_552, cbModelParam._m0[21u].z, fma(_548, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _544)) + cbModelParam._m0[21u].w;
        float _1453 = fma(_552, cbModelParam._m0[22u].z, fma(_548, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _544)) + cbModelParam._m0[22u].w;
        float _1457 = fma(_552, cbModelParam._m0[23u].z, fma(_548, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _544)) + cbModelParam._m0[23u].w;
        float _1460 = fma(_490, cbModelParam._m0[21u].z, fma(_489, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _488));
        float _1463 = fma(_490, cbModelParam._m0[22u].z, fma(_489, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _488));
        float _1466 = fma(_490, cbModelParam._m0[23u].z, fma(_489, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _488));
        float _1607;
        if (_1460 > 0.0)
        {
            _1607 = abs((1.0 - _1449) / _1460);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1460 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1449 + 1.0) / _1460);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1607 = frontier_phi_27_23_ladder;
        }
        float _1883;
        if (_1463 > 0.0)
        {
            _1883 = abs((1.0 - _1453) / _1463);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1463 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1453 + 1.0) / _1463);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1883 = frontier_phi_39_34_ladder;
        }
        float _2096;
        if (_1466 > 0.0)
        {
            _2096 = abs((1.0 - _1457) / _1466);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1466 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1457 + 1.0) / _1466);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2096 = frontier_phi_48_45_ladder;
        }
        float _2098 = isnan(_1883) ? _1607 : (isnan(_1607) ? _1883 : min(_1607, _1883));
        float _2099 = isnan(_2096) ? _2098 : (isnan(_2098) ? _2096 : min(_2098, _2096));
        float _2103 = (_2099 * _1460) + _1449;
        float _2104 = (_2099 * _1463) + _1453;
        float _2105 = (_2099 * _1466) + _1457;
        float _2106 = _2099 * 9.9999997473787516355514526367188e-05;
        float _2107 = (-1.0) - _2106;
        float _2109 = _2106 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2105 > _2109) || ((_2105 < _2107) || ((_2104 > _2109) || ((_2104 < _2107) || ((_2103 < _2107) || (_2103 > _2109))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2328 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2105, cbModelParam._m0[17u].z, fma(_2104, cbModelParam._m0[17u].y, _2103 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2105, cbModelParam._m0[18u].z, fma(_2104, cbModelParam._m0[18u].y, _2103 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2105, cbModelParam._m0[19u].z, fma(_2104, cbModelParam._m0[19u].y, _2103 * cbModelParam._m0[19u].x))), _1392);
            frontier_phi_24_48_ladder = _2328.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2328.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2328.x * cbModelParam._m0[1u].z;
        }
        _1485 = frontier_phi_24_48_ladder_2;
        _1487 = frontier_phi_24_48_ladder_1;
        _1489 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1469 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_488, _489, _490), _1392);
        _1485 = _1469.x * cbModelParam._m0[1u].z;
        _1487 = _1469.y * cbModelParam._m0[1u].z;
        _1489 = _1469.z * cbModelParam._m0[1u].z;
    }
    float _1502 = (((_515 * _465) + _516) * _480) * ((cbModelParam._m0[1u].w * (_1485 - _1383)) + _1383);
    float _1504 = (((_515 * _467) + _516) * _480) * ((cbModelParam._m0[1u].w * (_1487 - _1385)) + _1385);
    float _1506 = (((_515 * _468) + _516) * _480) * ((cbModelParam._m0[1u].w * (_1489 - _1387)) + _1387);
    float _1509 = fma(_1506, cbSceneParam._m0[89u].z, fma(_1504, cbSceneParam._m0[89u].y, _1502 * cbSceneParam._m0[89u].x));
    float _1512 = fma(_1506, cbSceneParam._m0[90u].z, fma(_1504, cbSceneParam._m0[90u].y, _1502 * cbSceneParam._m0[90u].x));
    float _1515 = fma(_1506, cbSceneParam._m0[91u].z, fma(_1504, cbSceneParam._m0[91u].y, _1502 * cbSceneParam._m0[91u].x));
    uvec4 _1525 = floatBitsToUint(cbInstanceData._m0[_439 + 5u]);
    uint _1527 = _1525.x * 14u;
    uint _1528 = _1527 + 13u;
    float _1535 = _480 + (-1.0);
    float _1540 = (cbLight._m0[_1528].x * _1535) + 1.0;
    float _1541 = (cbLight._m0[_1528].y * _1535) + 1.0;
    float _1542 = (cbLight._m0[_1528].z * _1535) + 1.0;
    float _1543 = (cbLight._m0[_1528].w * _1535) + 1.0;
    uint _1544 = _1527 + 5u;
    float _1550 = isnan(1.0) ? _1541 : (isnan(_1541) ? 1.0 : min(_1541, 1.0));
    uint _1554 = _1527 + 4u;
    float _1561 = isnan(1.0) ? _1540 : (isnan(_1540) ? 1.0 : min(_1540, 1.0));
    uint _1565 = _1527 | 1u;
    float _1576 = dot(vec3(cbLight._m0[_1527].xyz), vec3(_309, _310, _311));
    float _1579 = dot(vec3(cbLight._m0[_1565].xyz), vec3(_309, _310, _311));
    float _3694 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
    float _3705 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
    float _1584 = (isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0))) * 0.3183098733425140380859375;
    float _1586 = (isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0))) * 0.3183098733425140380859375;
    float _1593 = ((cbLight._m0[_1544].x * _1550) * _1586) + ((cbLight._m0[_1554].x * _1561) * _1584);
    float _1594 = ((_1550 * cbLight._m0[_1544].y) * _1586) + ((_1561 * cbLight._m0[_1554].y) * _1584);
    float _1595 = ((_1550 * cbLight._m0[_1544].z) * _1586) + ((_1561 * cbLight._m0[_1554].z) * _1584);
    uvec4 _1599 = floatBitsToUint(cbLight._m0[_1527 + 12u]);
    bool _1601 = _1599.x == 0u;
    float _1612;
    float _1614;
    float _1616;
    if (_1601)
    {
        _1612 = _1593;
        _1614 = _1594;
        _1616 = _1595;
    }
    else
    {
        uint _1620 = _1527 + 6u;
        float _1636 = (dot(vec3(cbLight._m0[_1527 + 2u].xyz), vec3(_309, _310, _311)) * 0.5) + 0.5;
        float _1637 = _1636 * _1636;
        float _3716 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
        float _1638 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
        float _1639 = isnan(1.0) ? _1542 : (isnan(_1542) ? 1.0 : min(_1542, 1.0));
        _1612 = (((cbLight._m0[_1620].x * 0.3183098733425140380859375) * _1638) * _1639) + _1593;
        _1614 = (((cbLight._m0[_1620].y * 0.3183098733425140380859375) * _1638) * _1639) + _1594;
        _1616 = (((cbLight._m0[_1620].z * 0.3183098733425140380859375) * _1638) * _1639) + _1595;
    }
    bool _1619 = _1599.y == 0u;
    float _1657;
    float _1659;
    float _1661;
    if (_1619)
    {
        _1657 = _1612;
        _1659 = _1614;
        _1661 = _1616;
    }
    else
    {
        uint _1827 = _1527 + 7u;
        float _1843 = (dot(vec3(cbLight._m0[_1527 + 3u].xyz), vec3(_309, _310, _311)) * 0.5) + 0.5;
        float _1844 = _1843 * _1843;
        float _3732 = isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0));
        float _1845 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
        float _1846 = isnan(1.0) ? _1543 : (isnan(_1543) ? 1.0 : min(_1543, 1.0));
        _1657 = (((cbLight._m0[_1827].x * 0.3183098733425140380859375) * _1845) * _1846) + _1612;
        _1659 = (((cbLight._m0[_1827].y * 0.3183098733425140380859375) * _1845) * _1846) + _1614;
        _1661 = (((cbLight._m0[_1827].z * 0.3183098733425140380859375) * _1845) * _1846) + _1616;
    }
    uint _1664 = _1527 + 8u;
    float _1677 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1527].w)) * _312) * 0.949999988079071044921875);
    float _1678 = _1677 * _1677;
    float _1679 = cbLight._m0[_1527].x + _390;
    float _1680 = cbLight._m0[_1527].y + _391;
    float _1681 = cbLight._m0[_1527].z + _392;
    float _1685 = inversesqrt(dot(vec3(_1679, _1680, _1681), vec3(_1679, _1680, _1681)));
    float _1686 = _1685 * _1679;
    float _1687 = _1685 * _1680;
    float _1688 = _1685 * _1681;
    float _1689 = dot(vec3(_309, _310, _311), vec3(cbLight._m0[_1527].xyz));
    float _3748 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
    float _1692 = isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0));
    float _3759 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _1693 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
    float _1694 = dot(vec3(_309, _310, _311), vec3(_1686, _1687, _1688));
    float _3770 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
    float _1697 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
    float _1698 = dot(vec3(cbLight._m0[_1527].xyz), vec3(_1686, _1687, _1688));
    float _3781 = isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0));
    float _1702 = _1678 * _1678;
    float _1706 = ((_1697 * _1697) * (_1702 + (-1.0))) + 1.0;
    float _1714 = exp2(log2(1.0 - (isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0)))) * 5.0);
    float _1715 = 0.959999978542327880859375 - _462;
    float _1717 = 0.959999978542327880859375 - _463;
    float _1718 = 0.959999978542327880859375 - _464;
    float _1725 = 1.0 - _1678;
    float _1736 = (0.5 / (((_1693 * ((_1692 * _1725) + _1678)) + 9.9999999392252902907785028219223e-09) + (((_1693 * _1725) + _1678) * _1692))) * _1692;
    float _3792 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
    float _1738 = (isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0))) * (_1702 / ((_1706 * _1706) * 3.141590118408203125));
    uint _1749 = _1527 + 9u;
    float _1760 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1565].w)) * _312) * 0.949999988079071044921875);
    float _1761 = _1760 * _1760;
    float _1762 = cbLight._m0[_1565].x + _390;
    float _1763 = cbLight._m0[_1565].y + _391;
    float _1764 = cbLight._m0[_1565].z + _392;
    float _1768 = inversesqrt(dot(vec3(_1762, _1763, _1764), vec3(_1762, _1763, _1764)));
    float _1769 = _1768 * _1762;
    float _1770 = _1768 * _1763;
    float _1771 = _1768 * _1764;
    float _1772 = dot(vec3(_309, _310, _311), vec3(cbLight._m0[_1565].xyz));
    float _3803 = isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0));
    float _1775 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
    float _1776 = dot(vec3(_309, _310, _311), vec3(_1769, _1770, _1771));
    float _3814 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
    float _1779 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
    float _1780 = dot(vec3(cbLight._m0[_1565].xyz), vec3(_1769, _1770, _1771));
    float _3825 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
    float _1784 = _1761 * _1761;
    float _1788 = ((_1779 * _1779) * (_1784 + (-1.0))) + 1.0;
    float _1795 = exp2(log2(1.0 - (isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0)))) * 5.0);
    float _1802 = 1.0 - _1761;
    float _1812 = (0.5 / (((_1693 * ((_1775 * _1802) + _1761)) + 9.9999999392252902907785028219223e-09) + (((_1693 * _1802) + _1761) * _1775))) * _1775;
    float _3836 = isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0));
    float _1814 = (isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0))) * (_1784 / ((_1788 * _1788) * 3.141590118408203125));
    float _1824 = (((((_1795 * _1715) + _465) * cbLight._m0[_1749].x) * _1814) * _1550) + (((((_1714 * _1715) + _465) * cbLight._m0[_1664].x) * _1738) * _1561);
    float _1825 = (((((_1795 * _1717) + _467) * cbLight._m0[_1749].y) * _1814) * _1550) + (((((_1714 * _1717) + _467) * cbLight._m0[_1664].y) * _1738) * _1561);
    float _1826 = (((((_1795 * _1718) + _468) * cbLight._m0[_1749].z) * _1814) * _1550) + (((((_1714 * _1718) + _468) * cbLight._m0[_1664].z) * _1738) * _1561);
    float _1888;
    float _1890;
    float _1892;
    if (_1601)
    {
        _1888 = _1824;
        _1890 = _1825;
        _1892 = _1826;
    }
    else
    {
        uint _1894 = _1527 + 2u;
        uint _1898 = _1527 + 10u;
        float _1912 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1894].w)) * _312) * 0.949999988079071044921875);
        float _1913 = _1912 * _1912;
        float _1914 = cbLight._m0[_1894].x + _390;
        float _1915 = cbLight._m0[_1894].y + _391;
        float _1916 = cbLight._m0[_1894].z + _392;
        float _1920 = inversesqrt(dot(vec3(_1914, _1915, _1916), vec3(_1914, _1915, _1916)));
        float _1921 = _1920 * _1914;
        float _1922 = _1920 * _1915;
        float _1923 = _1920 * _1916;
        float _1924 = dot(vec3(_309, _310, _311), vec3(cbLight._m0[_1894].xyz));
        float _3847 = isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0));
        float _1927 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
        float _1928 = dot(vec3(_309, _310, _311), vec3(_1921, _1922, _1923));
        float _3858 = isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0));
        float _1931 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
        float _1932 = dot(vec3(cbLight._m0[_1894].xyz), vec3(_1921, _1922, _1923));
        float _3869 = isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0));
        float _1936 = _1913 * _1913;
        float _1940 = ((_1931 * _1931) * (_1936 + (-1.0))) + 1.0;
        float _1947 = exp2(log2(1.0 - (isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0)))) * 5.0);
        float _1954 = 1.0 - _1913;
        float _1964 = (0.5 / (((_1693 * ((_1927 * _1954) + _1913)) + 9.9999999392252902907785028219223e-09) + (((_1693 * _1954) + _1913) * _1927))) * _1927;
        float _3880 = isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0));
        float _1966 = (isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0))) * (_1936 / ((_1940 * _1940) * 3.141590118408203125));
        float _1967 = isnan(1.0) ? _1542 : (isnan(_1542) ? 1.0 : min(_1542, 1.0));
        _1888 = (((((_1947 * _1715) + _465) * cbLight._m0[_1898].x) * _1966) * _1967) + _1824;
        _1890 = (((((_1947 * _1717) + _467) * cbLight._m0[_1898].y) * _1966) * _1967) + _1825;
        _1892 = (((((_1947 * _1718) + _468) * cbLight._m0[_1898].z) * _1966) * _1967) + _1826;
    }
    float _2002;
    float _2004;
    float _2006;
    if (_1619)
    {
        _2002 = _1888;
        _2004 = _1890;
        _2006 = _1892;
    }
    else
    {
        uint _2013 = _1527 + 3u;
        uint _2017 = _1527 + 11u;
        float _2031 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2013].w)) * _312) * 0.949999988079071044921875);
        float _2032 = _2031 * _2031;
        float _2033 = cbLight._m0[_2013].x + _390;
        float _2034 = cbLight._m0[_2013].y + _391;
        float _2035 = cbLight._m0[_2013].z + _392;
        float _2039 = inversesqrt(dot(vec3(_2033, _2034, _2035), vec3(_2033, _2034, _2035)));
        float _2040 = _2039 * _2033;
        float _2041 = _2039 * _2034;
        float _2042 = _2039 * _2035;
        float _2043 = dot(vec3(_309, _310, _311), vec3(cbLight._m0[_2013].xyz));
        float _3896 = isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0));
        float _2046 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
        float _2047 = dot(vec3(_309, _310, _311), vec3(_2040, _2041, _2042));
        float _3907 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
        float _2050 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
        float _2051 = dot(vec3(cbLight._m0[_2013].xyz), vec3(_2040, _2041, _2042));
        float _3918 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
        float _2055 = _2032 * _2032;
        float _2059 = ((_2050 * _2050) * (_2055 + (-1.0))) + 1.0;
        float _2066 = exp2(log2(1.0 - (isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0)))) * 5.0);
        float _2073 = 1.0 - _2032;
        float _2083 = (0.5 / (((_1693 * ((_2046 * _2073) + _2032)) + 9.9999999392252902907785028219223e-09) + (((_1693 * _2073) + _2032) * _2046))) * _2046;
        float _3929 = isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0));
        float _2085 = (isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0))) * (_2055 / ((_2059 * _2059) * 3.141590118408203125));
        float _2086 = isnan(1.0) ? _1543 : (isnan(_1543) ? 1.0 : min(_1543, 1.0));
        _2002 = (((((_2066 * _1715) + _465) * cbLight._m0[_2017].x) * _2085) * _2086) + _1888;
        _2004 = (((((_2066 * _1717) + _467) * cbLight._m0[_2017].y) * _2085) * _2086) + _1890;
        _2006 = (((((_2066 * _1718) + _468) * cbLight._m0[_2017].z) * _2085) * _2086) + _1892;
    }
    float _2220;
    float _2222;
    float _2224;
    float _2226;
    float _2228;
    float _2230;
    if (_1525.y == 0u)
    {
        float _2161 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2162 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2161;
        float _2163 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2161;
        float _2164 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2161;
        uvec4 _2176 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2177 = _2176.x;
        uint _2188 = uint((float(_2176.y) * floor(float(uint(cbSceneParam._m0[85u].y * _399) / _2177))) + floor(float(uint(cbSceneParam._m0[85u].x * _398) / _2177)));
        float _2198 = (log2(_2164 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2199 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0));
        uint _2202 = uint(isnan(14.0) ? _2199 : (isnan(_2199) ? 14.0 : min(_2199, 14.0)));
        uvec4 _2207 = texelFetch(g_lightClusterGridBuffer, int(((_2202 << 2u) + (_2188 << 6u)) >> 2u));
        uint _2208 = _2207.x;
        uint _2209 = _2176.z;
        float _2333;
        float _2335;
        float _2337;
        float _2339;
        float _2341;
        float _2343;
        if (((((1u << ((_2209 >> 4u) & 15u)) + 4294967295u) & _2208) == 0u) || ((_2209 & 240u) == 0u))
        {
            _2333 = 0.0;
            _2335 = 0.0;
            _2337 = 0.0;
            _2339 = 0.0;
            _2341 = 0.0;
            _2343 = 0.0;
        }
        else
        {
            float _2334;
            float _2336;
            float _2338;
            float _2340;
            float _2342;
            float _2344;
            float _2477 = 0.0;
            float _2478 = 0.0;
            float _2479 = 0.0;
            float _2480 = 0.0;
            float _2481 = 0.0;
            float _2482 = 0.0;
            uint _2483 = 0u;
            uint _2492;
            bool _2493;
            for (;;)
            {
                _2492 = texelFetch(g_lightClassification, int((((_2202 << 5u) + (_2188 << 9u)) + (_2483 << 2u)) >> 2u)).x;
                _2493 = _2492 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2493)
                {
                    frontier_phi_63_pred = _2482;
                    frontier_phi_63_pred_1 = _2481;
                    frontier_phi_63_pred_2 = _2480;
                    frontier_phi_63_pred_3 = _2479;
                    frontier_phi_63_pred_4 = _2478;
                    frontier_phi_63_pred_5 = _2477;
                }
                else
                {
                    float _2601;
                    float _2602;
                    float _2603;
                    float _2604;
                    float _2605;
                    float _2606;
                    uint _2607;
                    _2601 = _2477;
                    _2602 = _2478;
                    _2603 = _2479;
                    _2604 = _2480;
                    _2605 = _2481;
                    _2606 = _2482;
                    _2607 = _2492;
                    float _2533;
                    float _2534;
                    float _2535;
                    float _2536;
                    float _2537;
                    float _2538;
                    for (;;)
                    {
                        uint _2611 = uint(findLSB(_2607)) + (_2483 << 5u);
                        uint _2608 = (_2607 + 4294967295u) & _2607;
                        uint _2613 = _2611 * 48u;
                        vec4 _2627 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2613)).x, texelFetch(g_PointLightRenderingBuffer, int(_2613 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2613 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2613 + 3u)).x));
                        uint _2633 = (_2611 * 48u) + 4u;
                        vec4 _2646 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2633)).x, texelFetch(g_PointLightRenderingBuffer, int(_2633 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2633 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2633 + 3u)).x));
                        uint _2652 = (_2611 * 48u) + 8u;
                        vec3 _2663 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2652)).x, texelFetch(g_PointLightRenderingBuffer, int(_2652 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2652 + 2u)).x));
                        float _2667 = _2627.x - _2162;
                        float _2668 = _2627.y - _2163;
                        float _2669 = _2627.z - _2164;
                        float _2670 = dot(vec3(_2667, _2668, _2669), vec3(_2667, _2668, _2669));
                        float _2673 = inversesqrt(_2670);
                        float _2674 = _2673 * _2667;
                        float _2675 = _2673 * _2668;
                        float _2676 = _2673 * _2669;
                        float _2677 = dot(vec3(_420, _423, _426), vec3(_2674, _2675, _2676));
                        float _2682 = 1.0 - (_2670 * _2627.w);
                        float _3955 = isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : max(_2682, 0.0));
                        float _2683 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
                        float _2684 = sqrt(_2670) * _2646.w;
                        float _2687 = 1.39999997615814208984375 / (_2684 + 1.39999997615814208984375);
                        float _2688 = _2687 * _2687;
                        float _2691 = ((1.0 - _2688) * _2677) + _2688;
                        float _2694 = _2684 * _2684;
                        float _2698 = ((isnan(0.0) ? _2691 : (isnan(_2691) ? 0.0 : max(_2691, 0.0))) * _2683) / ((_2694 * 0.699999988079071044921875) + 1.0);
                        float _2702 = (-0.0) - _2162;
                        float _2703 = (-0.0) - _2163;
                        float _2704 = (-0.0) - _2164;
                        float _2708 = inversesqrt(dot(vec3(_2702, _2703, _2704), vec3(_2702, _2703, _2704)));
                        float _2709 = _2708 * _2702;
                        float _2710 = _2708 * _2703;
                        float _2711 = _2708 * _2704;
                        float _2719 = exp2(log2(1.0 / ((_2694 * 3.5) + 5.0)) * 0.25);
                        float _2720 = 1.0 - _496;
                        float _2727 = sqrt(1.0 - ((1.0 - (_2720 * _2720)) * (1.0 - (_2719 * _2719))));
                        float _2728 = _2727 * _2727;
                        float _2729 = _2728 * _2728;
                        float _2730 = _2709 + _2674;
                        float _2731 = _2710 + _2675;
                        float _2732 = _2711 + _2676;
                        float _2736 = inversesqrt(dot(vec3(_2730, _2731, _2732), vec3(_2730, _2731, _2732)));
                        float _2740 = dot(vec3(_420, _423, _426), vec3(_2709, _2710, _2711));
                        float _3971 = isnan(0.0) ? _2740 : (isnan(_2740) ? 0.0 : max(_2740, 0.0));
                        float _2743 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
                        float _2744 = dot(vec3(_420, _423, _426), vec3(_2736 * _2730, _2736 * _2731, _2736 * _2732));
                        float _3982 = isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : max(_2744, 0.0));
                        float _2747 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
                        float _2751 = ((_2747 * _2747) * (_2729 + (-1.0))) + 1.0;
                        float _2752 = _2687 * _2728;
                        float _2753 = _2752 * _2752;
                        float _2756 = ((1.0 - _2753) * _2677) + _2753;
                        float _3993 = isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : max(_2756, 0.0));
                        float _2757 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
                        float _2758 = 1.0 - _2728;
                        float _2768 = (0.5 / (((_2757 * ((_2743 * _2758) + _2728)) + 9.9999999392252902907785028219223e-09) + (((_2757 * _2758) + _2728) * _2743))) * _2757;
                        float _4004 = isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : max(_2768, 0.0));
                        float _2779 = (((_2729 * 3.1415927410125732421875) * (isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0)))) / ((_2751 * _2751) * ((_2694 * 2.1991131305694580078125) + 3.141590118408203125))) * _2683;
                        _2536 = (_2698 * _2646.x) + _2604;
                        _2537 = (_2698 * _2646.y) + _2605;
                        _2538 = (_2698 * _2646.z) + _2606;
                        _2533 = (_2779 * _2663.x) + _2601;
                        _2534 = (_2779 * _2663.y) + _2602;
                        _2535 = (_2779 * _2663.z) + _2603;
                        if (_2608 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2601 = _2533;
                            _2602 = _2534;
                            _2603 = _2535;
                            _2604 = _2536;
                            _2605 = _2537;
                            _2606 = _2538;
                            _2607 = _2608;
                        }
                    }
                    frontier_phi_63_pred = _2538;
                    frontier_phi_63_pred_1 = _2537;
                    frontier_phi_63_pred_2 = _2536;
                    frontier_phi_63_pred_3 = _2535;
                    frontier_phi_63_pred_4 = _2534;
                    frontier_phi_63_pred_5 = _2533;
                }
                _2344 = frontier_phi_63_pred;
                _2342 = frontier_phi_63_pred_1;
                _2340 = frontier_phi_63_pred_2;
                _2338 = frontier_phi_63_pred_3;
                _2336 = frontier_phi_63_pred_4;
                _2334 = frontier_phi_63_pred_5;
                uint _2484 = _2483 + 1u;
                if (_2484 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2477 = _2334;
                    _2478 = _2336;
                    _2479 = _2338;
                    _2480 = _2340;
                    _2481 = _2342;
                    _2482 = _2344;
                    _2483 = _2484;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2333 = _2334;
            _2335 = _2336;
            _2337 = _2338;
            _2339 = _2340;
            _2341 = _2342;
            _2343 = _2344;
        }
        uvec4 _2347 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2348 = _2347.z;
        uint _2350 = (_2348 >> 8u) & 15u;
        float _2445;
        float _2447;
        float _2449;
        float _2451;
        float _2453;
        float _2455;
        if (((4294967295u << _2350) & _2208) == 0u)
        {
            _2445 = _2333;
            _2447 = _2335;
            _2449 = _2337;
            _2451 = _2339;
            _2453 = _2341;
            _2455 = _2343;
        }
        else
        {
            float _2470 = inversesqrt(dot(vec3(_2162, _2163, _2164), vec3(_2162, _2163, _2164)));
            float _2471 = _2470 * _2162;
            float _2472 = _2470 * _2163;
            float _2473 = _2470 * _2164;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2350 < ((_2348 >> 12u) & 15u))
            {
                float _2446;
                float _2448;
                float _2450;
                float _2452;
                float _2454;
                float _2456;
                float _2584 = _2333;
                float _2585 = _2335;
                float _2586 = _2337;
                float _2587 = _2339;
                float _2588 = _2341;
                float _2589 = _2343;
                uint _2590 = _2350;
                uint _2599;
                bool _2600;
                for (;;)
                {
                    _2599 = texelFetch(g_lightClassification, int((((_2202 << 5u) + (_2188 << 9u)) + (_2590 << 2u)) >> 2u)).x;
                    _2600 = _2599 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2600)
                    {
                        frontier_phi_69_pred = _2589;
                        frontier_phi_69_pred_1 = _2588;
                        frontier_phi_69_pred_2 = _2587;
                        frontier_phi_69_pred_3 = _2586;
                        frontier_phi_69_pred_4 = _2585;
                        frontier_phi_69_pred_5 = _2584;
                    }
                    else
                    {
                        float _2784;
                        float _2785;
                        float _2786;
                        float _2787;
                        float _2788;
                        float _2789;
                        float _3080;
                        float _3081;
                        float _3082;
                        float _3083;
                        float _3084;
                        float _3085;
                        float _2797 = _2584;
                        float _2798 = _2585;
                        float _2799 = _2586;
                        float _2800 = _2587;
                        float _2801 = _2588;
                        float _2802 = _2589;
                        uint _2803 = _2599;
                        uint _2804;
                        vec4 _2829;
                        float _2830;
                        vec4 _2845;
                        vec3 _2857;
                        vec4 _2873;
                        vec4 _2889;
                        float _2936;
                        bool _2937;
                        for (;;)
                        {
                            uint _2814 = ((_2590 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2803));
                            _2804 = (_2803 + 4294967295u) & _2803;
                            uint _2816 = _2814 * 40u;
                            _2829 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2816)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2816 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2816 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2816 + 3u)).x));
                            _2830 = _2829.w;
                            uint _2832 = (_2814 * 40u) + 4u;
                            _2845 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2832)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2832 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2832 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2832 + 3u)).x));
                            uint _2847 = (_2814 * 40u) + 8u;
                            _2857 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2847)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2847 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2847 + 2u)).x));
                            uint _2860 = (_2814 * 40u) + 16u;
                            _2873 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2860)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2860 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2860 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2860 + 3u)).x));
                            uint _2876 = (_2814 * 40u) + 20u;
                            _2889 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2876)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2876 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2876 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2876 + 3u)).x));
                            uint _2892 = (_2814 * 40u) + 24u;
                            vec4 _2905 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2892)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2892 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2892 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2892 + 3u)).x));
                            uint _2911 = (_2814 * 40u) + 28u;
                            vec4 _2924 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2911)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 3u)).x));
                            _2936 = fma(_2164, _2924.z, fma(_2163, _2924.y, _2924.x * _2162)) + _2924.w;
                            _2937 = !((fma(_2164, _2905.z, fma(_2163, _2905.y, _2905.x * _2162)) + _2905.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2937)
                            {
                                float _2964 = _2829.x - _2162;
                                float _2965 = _2829.y - _2163;
                                float _2966 = _2829.z - _2164;
                                float _2967 = dot(vec3(_2964, _2965, _2966), vec3(_2964, _2965, _2966));
                                float _2970 = inversesqrt(_2967);
                                float _2971 = _2970 * _2964;
                                float _2972 = _2970 * _2965;
                                float _2973 = _2970 * _2966;
                                float _2977 = 1.0 - (_2967 / (_2830 * _2830));
                                float _4015 = isnan(0.0) ? _2977 : (isnan(_2977) ? 0.0 : max(_2977, 0.0));
                                float _2978 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
                                float _2982 = sqrt(_2967) * _2845.w;
                                float _2984 = 1.39999997615814208984375 / (_2982 + 1.39999997615814208984375);
                                float _2985 = _2984 * _2984;
                                float _2988 = ((1.0 - _2985) * dot(vec3(_2971, _2972, _2973), vec3(_420, _423, _426))) + _2985;
                                float _2991 = _2982 * _2982;
                                float _2995 = (fma(_2164, _2873.z, fma(_2163, _2873.y, _2873.x * _2162)) + _2873.w) / _2936;
                                float _2996 = (fma(_2164, _2889.z, fma(_2163, _2889.y, _2889.x * _2162)) + _2889.w) / _2936;
                                float _3000 = 1.0 - dot(vec2(_2995, _2996), vec2(_2995, _2996));
                                float _4031 = isnan(0.0) ? _3000 : (isnan(_3000) ? 0.0 : max(_3000, 0.0));
                                float _3001 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
                                float _3002 = _3001 * (((isnan(0.0) ? _2988 : (isnan(_2988) ? 0.0 : max(_2988, 0.0))) * _2978) / ((_2991 * 0.699999988079071044921875) + 1.0));
                                float _3014 = exp2(log2(1.0 / ((_2991 * 3.5) + 5.0)) * 0.25);
                                float _3015 = 1.0 - _496;
                                float _3022 = sqrt(1.0 - ((1.0 - (_3015 * _3015)) * (1.0 - (_3014 * _3014))));
                                float _3023 = _3022 * _3022;
                                float _3024 = _3023 * _3023;
                                float _3025 = _2971 - _2471;
                                float _3026 = _2972 - _2472;
                                float _3027 = _2973 - _2473;
                                float _3031 = inversesqrt(dot(vec3(_3025, _3026, _3027), vec3(_3025, _3026, _3027)));
                                float _3035 = dot(vec3(_420, _423, _426), vec3((-0.0) - _2471, (-0.0) - _2472, (-0.0) - _2473));
                                float _4042 = isnan(0.0) ? _3035 : (isnan(_3035) ? 0.0 : max(_3035, 0.0));
                                float _3038 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
                                float _3039 = dot(vec3(_420, _423, _426), vec3(_3031 * _3025, _3031 * _3026, _3031 * _3027));
                                float _4053 = isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : max(_3039, 0.0));
                                float _3042 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
                                float _3046 = ((_3042 * _3042) * (_3024 + (-1.0))) + 1.0;
                                float _3047 = _2984 * _3023;
                                float _3048 = _3047 * _3047;
                                float _3054 = ((1.0 - _3048) * dot(vec3(_420, _423, _426), vec3(_2971, _2972, _2973))) + _3048;
                                float _4064 = isnan(0.0) ? _3054 : (isnan(_3054) ? 0.0 : max(_3054, 0.0));
                                float _3055 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
                                float _3056 = 1.0 - _3023;
                                float _3066 = (0.5 / (((_3055 * ((_3038 * _3056) + _3023)) + 9.9999999392252902907785028219223e-09) + (((_3055 * _3056) + _3023) * _3038))) * _3055;
                                float _4075 = isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : max(_3066, 0.0));
                                float _3076 = (_3001 * _2978) * (((_3024 * 3.1415927410125732421875) * (isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0)))) / ((_3046 * _3046) * ((_2991 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3002 * _2845.z;
                                frontier_phi_75_pred_1 = _3002 * _2845.y;
                                frontier_phi_75_pred_2 = _3002 * _2845.x;
                                frontier_phi_75_pred_3 = _3076 * _2857.z;
                                frontier_phi_75_pred_4 = _3076 * _2857.y;
                                frontier_phi_75_pred_5 = _3076 * _2857.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3085 = frontier_phi_75_pred;
                            _3084 = frontier_phi_75_pred_1;
                            _3083 = frontier_phi_75_pred_2;
                            _3082 = frontier_phi_75_pred_3;
                            _3081 = frontier_phi_75_pred_4;
                            _3080 = frontier_phi_75_pred_5;
                            _2787 = _3083 + _2800;
                            _2788 = _3084 + _2801;
                            _2789 = _3085 + _2802;
                            _2784 = _3080 + _2797;
                            _2785 = _3081 + _2798;
                            _2786 = _3082 + _2799;
                            if (_2804 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2797 = _2784;
                                _2798 = _2785;
                                _2799 = _2786;
                                _2800 = _2787;
                                _2801 = _2788;
                                _2802 = _2789;
                                _2803 = _2804;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2789;
                        frontier_phi_69_pred_1 = _2788;
                        frontier_phi_69_pred_2 = _2787;
                        frontier_phi_69_pred_3 = _2786;
                        frontier_phi_69_pred_4 = _2785;
                        frontier_phi_69_pred_5 = _2784;
                    }
                    _2456 = frontier_phi_69_pred;
                    _2454 = frontier_phi_69_pred_1;
                    _2452 = frontier_phi_69_pred_2;
                    _2450 = frontier_phi_69_pred_3;
                    _2448 = frontier_phi_69_pred_4;
                    _2446 = frontier_phi_69_pred_5;
                    uint _2591 = _2590 + 1u;
                    if (_2591 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2584 = _2446;
                        _2585 = _2448;
                        _2586 = _2450;
                        _2587 = _2452;
                        _2588 = _2454;
                        _2589 = _2456;
                        _2590 = _2591;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2456;
                frontier_phi_57_58_ladder_1 = _2454;
                frontier_phi_57_58_ladder_2 = _2452;
                frontier_phi_57_58_ladder_3 = _2450;
                frontier_phi_57_58_ladder_4 = _2448;
                frontier_phi_57_58_ladder_5 = _2446;
            }
            else
            {
                frontier_phi_57_58_ladder = _2343;
                frontier_phi_57_58_ladder_1 = _2341;
                frontier_phi_57_58_ladder_2 = _2339;
                frontier_phi_57_58_ladder_3 = _2337;
                frontier_phi_57_58_ladder_4 = _2335;
                frontier_phi_57_58_ladder_5 = _2333;
            }
            _2445 = frontier_phi_57_58_ladder_5;
            _2447 = frontier_phi_57_58_ladder_4;
            _2449 = frontier_phi_57_58_ladder_3;
            _2451 = frontier_phi_57_58_ladder_2;
            _2453 = frontier_phi_57_58_ladder_1;
            _2455 = frontier_phi_57_58_ladder;
        }
        float _2460 = isnan(1.0) ? _480 : (isnan(_480) ? 1.0 : min(_480, 1.0));
        _2220 = (_2460 * _2451) + _1657;
        _2222 = (_2460 * _2453) + _1659;
        _2224 = (_2460 * _2455) + _1661;
        _2226 = ((_2445 * _465) * _2460) + _2002;
        _2228 = ((_2447 * _467) * _2460) + _2004;
        _2230 = ((_2449 * _468) * _2460) + _2006;
    }
    else
    {
        _2220 = _1657;
        _2222 = _1659;
        _2224 = _1661;
        _2226 = _2002;
        _2228 = _2004;
        _2230 = _2006;
    }
    uint _2236 = _441 + uint(cbMatDynParam._m0[0u].w);
    float _4091 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _4102 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _4113 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _2267 = (((isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0))) * (_2220 + ((isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0))) * _480))) + ((_2226 + ((isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0))) * _1290)) * cbPerFrame._m0[3u].x)) + (((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].y) * _291.x) * cbInstanceData._m0[_2236].x);
    float _2269 = ((((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].y) * _291.y) * cbInstanceData._m0[_2236].y) + ((_2228 + ((isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0))) * _1290)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0))) * (_2222 + ((isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0))) * _480)));
    float _2271 = ((((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].y) * _291.z) * cbInstanceData._m0[_2236].z) + ((_2230 + ((isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0))) * _1290)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0))) * (_2224 + ((isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0))) * _480)));
    uint _2275 = _439 + 6u;
    float _2283 = _398 / cbSceneParam._m0[86u].x;
    float _2284 = _399 / cbSceneParam._m0[86u].y;
    vec4 _2298 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2283, _2284, (log2((isnan(cbSceneParam._m0[77u].w) ? _332 : (isnan(_332) ? cbSceneParam._m0[77u].w : min(_332, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2300 = _2298.x;
    float _2301 = _2298.y;
    float _2302 = _2298.z;
    float _2303 = _2298.w;
    float _2395;
    float _2397;
    float _2399;
    float _2401;
    if (_332 > cbSceneParam._m0[78u].w)
    {
        float _2358 = isnan(_332) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _332 : min(cbSceneParam._m0[80u].w, _332));
        float _2359 = _2358 / _332;
        float _2370 = _2359 * _383;
        float _2371 = _384 * _2359;
        float _2372 = (-0.0) - _2371;
        float _2373 = _2359 * _385;
        float _2375 = (cbSceneParam._m0[77u].w * _2372) / _2358;
        float _2376 = _2375 + cbSceneParam._m0[79u].w;
        float _2377 = cbSceneParam._m0[79u].w - _2371;
        float _2383 = sqrt(((_2370 * _2370) + (_2371 * _2371)) + (_2373 * _2373));
        float _2386 = (1.0 - (cbSceneParam._m0[77u].w / _2358)) * _2383;
        float _2391 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2393 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2546;
        if (abs((_2372 - _2375) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2546 = ((((_2376 > 0.0) ? exp2(_2391 * _2376) : (2.0 - exp2(_2393 * _2376))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2386;
        }
        else
        {
            float _2506 = 1.0 / cbSceneParam._m0[80u].x;
            float _2507 = isnan(_2377) ? _2376 : (isnan(_2376) ? _2377 : max(_2376, _2377));
            float _2508 = isnan(_2377) ? _2376 : (isnan(_2376) ? _2377 : min(_2376, _2377));
            float _2517 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : min(_2507, 0.0));
            float _2518 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : min(_2508, 0.0));
            _2546 = ((abs(_2383 / _2372) * cbSceneParam._m0[80u].y) * ((((_2517 - _2518) * 2.0) - ((exp2(_2391 * (isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0)))) - exp2(_2391 * (isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0))))) * _2506)) - ((exp2(_2393 * _2517) - exp2(_2393 * _2518)) * _2506))) + (_2386 * cbSceneParam._m0[80u].z);
        }
        vec4 _2548 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2283, _2284, 1.0), 0.0);
        float _2557 = exp2((_2546 * (-1.44269502162933349609375)) * (1.0 - _2548.w));
        float _2558 = log2(_2557);
        float _2574 = log2(_2303);
        _2395 = (exp2(_2574 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2558 * cbSceneParam._m0[78u].x)) * _2548.x) / cbSceneParam._m0[78u].x)) + _2300;
        _2397 = (exp2(_2574 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2558 * cbSceneParam._m0[78u].y)) * _2548.y) / cbSceneParam._m0[78u].y)) + _2301;
        _2399 = (exp2(_2574 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2558 * cbSceneParam._m0[78u].z)) * _2548.z) / cbSceneParam._m0[78u].z)) + _2302;
        _2401 = _2557 * _2303;
    }
    else
    {
        _2395 = _2300;
        _2397 = _2301;
        _2399 = _2302;
        _2401 = _2303;
    }
    float _2413 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2414 = _2413 == 3.0;
    float _2415 = log2(_2401);
    float _2422 = exp2(_2415 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0)));
    float _2423 = exp2(_2415 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0)));
    float _2424 = exp2(_2415 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0)));
    float _2433 = (_2413 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2433 * (_2414 ? _2422 : (_2422 + (cbSceneParam._m0[72u].w * _2395)));
    SV_Target.y = _2433 * (_2414 ? _2423 : (_2423 + (cbSceneParam._m0[72u].w * _2397)));
    SV_Target.z = _2433 * (_2414 ? _2424 : (_2424 + (cbSceneParam._m0[72u].w * _2399)));
    SV_Target.w = cbInstanceData._m0[_2275].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2275].w;
}


