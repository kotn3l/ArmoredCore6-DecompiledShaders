#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M1_Emissive_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M1_Emissive_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M1_Emissive_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M1_Emissive_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _872;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _197 = _196 * NORMAL.x;
    float _198 = _196 * NORMAL.y;
    float _199 = _196 * NORMAL.z;
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _211;
    float _212;
    float _213;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _211 = (-0.0) - _197;
        _212 = (-0.0) - _198;
        _213 = (-0.0) - _199;
    }
    else
    {
        _211 = _197;
        _212 = _198;
        _213 = _199;
    }
    vec4 _233 = texture(sampler2D(M_AMSN_M1_Emissive_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _239 = _233.x * cbMtdParam._m0[9u].x;
    float _240 = _233.y * cbMtdParam._m0[9u].y;
    float _241 = _233.z * cbMtdParam._m0[9u].z;
    vec4 _253 = texture(sampler2D(M_AMSN_M1_Emissive_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _260 = cbMtdParam._m0[11u].x + _253.x;
    vec4 _272 = texture(sampler2D(M_AMSN_M1_Emissive_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _276 = _272.z;
    float _280 = (_272.x * 2.0) + (-1.0);
    float _282 = (_272.y * 2.0) + (-1.0);
    float _283 = dot(vec2(_280, _282), vec2(_280, _282));
    float _3233 = isnan(0.0) ? _283 : (isnan(_283) ? 0.0 : max(_283, 0.0));
    float _289 = sqrt(1.0 - (isnan(1.0) ? _3233 : (isnan(_3233) ? 1.0 : min(_3233, 1.0))));
    vec4 _308 = texture(sampler2D(M_AMSN_M1_Emissive_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _315 = fma(_289, _211, fma(_282, _203 * TANGENT.x, (_189 * _182) * _280));
    float _318 = fma(_289, _212, fma(_282, _203 * TANGENT.y, (_189 * _183) * _280));
    float _321 = fma(_289, _213, fma(_282, _203 * TANGENT.z, (_189 * _184) * _280));
    float _325 = inversesqrt(dot(vec3(_315, _318, _321), vec3(_315, _318, _321)));
    float _326 = _325 * _315;
    float _327 = _325 * _318;
    float _328 = _325 * _321;
    float _3244 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _329 = isnan(1.0) ? _3244 : (isnan(_3244) ? 1.0 : min(_3244, 1.0));
    float _3255 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _3266 = isnan(0.0) ? _240 : (isnan(_240) ? 0.0 : max(_240, 0.0));
    float _3277 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _3288 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _333 = isnan(1.0) ? _3288 : (isnan(_3288) ? 1.0 : min(_3288, 1.0));
    float _349 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _390 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _400 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _390);
    float _401 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _390);
    float _402 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _390);
    float _406 = inversesqrt(dot(vec3(_400, _401, _402), vec3(_400, _401, _402)));
    float _407 = _400 * _406;
    float _408 = _401 * _406;
    float _409 = _402 * _406;
    float _415 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _416 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _437 = fma(_328, cbSceneParam._m0[5u].z, fma(_327, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _326));
    float _440 = fma(_328, cbSceneParam._m0[6u].z, fma(_327, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _326));
    float _443 = fma(_328, cbSceneParam._m0[7u].z, fma(_327, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _326));
    uint _456 = uint(roundEven(NORMAL.w)) * 13u;
    uint _458 = _456 + 9u;
    uint _459 = _458 + uint(cbMatDynParam._m0[0u].w);
    float _465 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3255 : (isnan(_3255) ? 1.0 : min(_3255, 1.0)))) * cbInstanceData._m0[_459].x;
    float _466 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3266 : (isnan(_3266) ? 1.0 : min(_3266, 1.0)))) * cbInstanceData._m0[_459].y;
    float _467 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3277 : (isnan(_3277) ? 1.0 : min(_3277, 1.0)))) * cbInstanceData._m0[_459].z;
    float _3299 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _468 = isnan(1.0) ? _3299 : (isnan(_3299) ? 1.0 : min(_3299, 1.0));
    float _3310 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _469 = isnan(1.0) ? _3310 : (isnan(_3310) ? 1.0 : min(_3310, 1.0));
    float _3321 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _470 = isnan(1.0) ? _3321 : (isnan(_3321) ? 1.0 : min(_3321, 1.0));
    float _471 = 1.0 - _333;
    float _472 = _468 * _471;
    float _473 = _469 * _471;
    float _474 = _470 * _471;
    float _479 = (_468 + (-0.039999999105930328369140625)) * _333;
    float _480 = (_469 + (-0.039999999105930328369140625)) * _333;
    float _481 = (_470 + (-0.039999999105930328369140625)) * _333;
    float _482 = _479 + 0.039999999105930328369140625;
    float _484 = _480 + 0.039999999105930328369140625;
    float _485 = _481 + 0.039999999105930328369140625;
    vec4 _494 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _415, cbSceneParam._m0[86u].y * _416));
    float _497 = _494.x * TEXCOORD.z;
    float _498 = dot(vec3(_326, _327, _328), vec3(_407, _408, _409));
    float _501 = _498 * 2.0;
    float _505 = (_501 * _326) - _407;
    float _506 = (_501 * _327) - _408;
    float _507 = (_501 * _328) - _409;
    float _511 = abs(dot(vec3(_407, _408, _409), vec3(_326, _327, _328)));
    float _3332 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _513 = sqrt(_329);
    float _526 = exp2((_513 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3332 : (isnan(_3332) ? 1.0 : min(_3332, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_513 * 3.0));
    float _532 = (1.0 - _526) * ((_513 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _533 = _526 * _513;
    float _561 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _565 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _569 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _871;
    float _873;
    float _874;
    float _875;
    float _876;
    float _877;
    float _878;
    float _879;
    float _880;
    float _881;
    float _882;
    float _883;
    float _884;
    float _885;
    float _886;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _596 = fma(_569, cbModelParam._m0[26u].z, fma(_565, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _561));
        float _600 = fma(_569, cbModelParam._m0[27u].z, fma(_565, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _561));
        float _604 = fma(_569, cbModelParam._m0[28u].z, fma(_565, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _561));
        float _629 = _561 + _326;
        float _630 = _565 + _327;
        float _631 = _569 + _328;
        float _641 = fma(_631, cbModelParam._m0[26u].z, fma(_630, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _629)) - _596;
        float _642 = fma(_631, cbModelParam._m0[27u].z, fma(_630, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _629)) - _600;
        float _643 = fma(_631, cbModelParam._m0[28u].z, fma(_630, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _629)) - _604;
        float _647 = inversesqrt(dot(vec3(_641, _642, _643), vec3(_641, _642, _643)));
        float _660 = ((_647 * _641) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_596 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _661 = ((_647 * _642) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_600 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _662 = ((_647 * _643) / cbModelParam._m0[34u].z) + ((((((_604 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _665 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_660, _661, _662), 0.0);
        vec4 _672 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_660, _661, _662), 0.0);
        vec4 _679 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_660, _661, _662), 0.0);
        vec4 _686 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_660, _661, _662), 0.0);
        float _699 = exp2((_665.w + (-0.5)) * 20.0) * 2.0;
        float _700 = _699 * (_665.x + (-0.5));
        float _701 = _699 * (_665.y + (-0.5));
        float _702 = _699 * (_665.z + (-0.5));
        float _709 = exp2((_672.w + (-0.5)) * 20.0) * 2.0;
        float _710 = _709 * (_672.x + (-0.5));
        float _711 = _709 * (_672.y + (-0.5));
        float _712 = _709 * (_672.z + (-0.5));
        float _719 = exp2((_679.w + (-0.5)) * 20.0) * 2.0;
        float _720 = _719 * (_679.x + (-0.5));
        float _721 = _719 * (_679.y + (-0.5));
        float _722 = _719 * (_679.z + (-0.5));
        float _729 = exp2((_686.w + (-0.5)) * 20.0) * 2.0;
        float _730 = _729 * (_686.x + (-0.5));
        float _731 = _729 * (_686.y + (-0.5));
        float _732 = _729 * (_686.z + (-0.5));
        float _733 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
        float _734 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
        float _735 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
        float _736 = _700 * 0.5;
        float _737 = _710 * 0.5;
        float _738 = _720 * 0.5;
        float _739 = dot(vec3(_736, _737, _738), vec3(_736, _737, _738));
        float _744 = (_739 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_739);
        float _753 = (dot(vec3(_326, _327, _328), vec3(_744 * _736, _744 * _737, _744 * _738)) + 1.0) * 0.5;
        float _3358 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
        float _763 = sqrt(((_737 * _737) + (_736 * _736)) + (_738 * _738)) / (_733 + 9.9999997473787516355514526367188e-06);
        float _3369 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
        float _764 = isnan(1.0) ? _3369 : (isnan(_3369) ? 1.0 : min(_3369, 1.0));
        float _765 = _764 * 2.0;
        float _769 = (1.0 - _764) / (_764 + 1.0);
        float _3380 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
        float _770 = isnan(1.0) ? _3380 : (isnan(_3380) ? 1.0 : min(_3380, 1.0));
        float _779 = ((((1.0 - _770) * (_765 + 2.0)) * exp2(log2(isnan(1.0) ? _3358 : (isnan(_3358) ? 1.0 : min(_3358, 1.0))) * (_765 + 1.0))) + _770) * _733;
        float _780 = _701 * 0.5;
        float _781 = _711 * 0.5;
        float _782 = _721 * 0.5;
        float _783 = dot(vec3(_780, _781, _782), vec3(_780, _781, _782));
        float _788 = (_783 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_783);
        float _796 = (dot(vec3(_326, _327, _328), vec3(_788 * _780, _788 * _781, _788 * _782)) + 1.0) * 0.5;
        float _3391 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
        float _805 = sqrt(((_781 * _781) + (_780 * _780)) + (_782 * _782)) / (_734 + 9.9999997473787516355514526367188e-06);
        float _3402 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
        float _806 = isnan(1.0) ? _3402 : (isnan(_3402) ? 1.0 : min(_3402, 1.0));
        float _807 = _806 * 2.0;
        float _811 = (1.0 - _806) / (_806 + 1.0);
        float _3413 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
        float _812 = isnan(1.0) ? _3413 : (isnan(_3413) ? 1.0 : min(_3413, 1.0));
        float _821 = ((((1.0 - _812) * (_807 + 2.0)) * exp2(log2(isnan(1.0) ? _3391 : (isnan(_3391) ? 1.0 : min(_3391, 1.0))) * (_807 + 1.0))) + _812) * _734;
        float _822 = _702 * 0.5;
        float _823 = _712 * 0.5;
        float _824 = _722 * 0.5;
        float _825 = dot(vec3(_822, _823, _824), vec3(_822, _823, _824));
        float _830 = (_825 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_825);
        float _838 = (dot(vec3(_326, _327, _328), vec3(_830 * _822, _830 * _823, _830 * _824)) + 1.0) * 0.5;
        float _3424 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
        float _847 = sqrt(((_823 * _823) + (_822 * _822)) + (_824 * _824)) / (_735 + 9.9999997473787516355514526367188e-06);
        float _3435 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
        float _848 = isnan(1.0) ? _3435 : (isnan(_3435) ? 1.0 : min(_3435, 1.0));
        float _849 = _848 * 2.0;
        float _853 = (1.0 - _848) / (_848 + 1.0);
        float _3446 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
        float _854 = isnan(1.0) ? _3446 : (isnan(_3446) ? 1.0 : min(_3446, 1.0));
        float _863 = ((((1.0 - _854) * (_849 + 2.0)) * exp2(log2(isnan(1.0) ? _3424 : (isnan(_3424) ? 1.0 : min(_3424, 1.0))) * (_849 + 1.0))) + _854) * _735;
        _871 = _702;
        _873 = _701;
        _874 = _700;
        _875 = _712;
        _876 = _711;
        _877 = _710;
        _878 = _722;
        _879 = _721;
        _880 = _720;
        _881 = _735;
        _882 = _734;
        _883 = _733;
        _884 = cbModelParam._m0[36u].z * (isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0)));
        _885 = cbModelParam._m0[36u].z * (isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0)));
        _886 = cbModelParam._m0[36u].z * (isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0)));
    }
    else
    {
        _871 = _872;
        _873 = _872;
        _874 = _872;
        _875 = _872;
        _876 = _872;
        _877 = _872;
        _878 = _872;
        _879 = _872;
        _880 = _872;
        _881 = _872;
        _882 = _872;
        _883 = _872;
        _884 = 0.0;
        _885 = 0.0;
        _886 = 0.0;
    }
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _912 = fma(_569, cbModelParam._m0[30u].z, fma(_565, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _561));
        float _916 = fma(_569, cbModelParam._m0[31u].z, fma(_565, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _561));
        float _920 = fma(_569, cbModelParam._m0[32u].z, fma(_565, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _561));
        float _943 = _561 + _326;
        float _944 = _565 + _327;
        float _945 = _569 + _328;
        float _955 = fma(_945, cbModelParam._m0[30u].z, fma(_944, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _943)) - _912;
        float _956 = fma(_945, cbModelParam._m0[31u].z, fma(_944, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _943)) - _916;
        float _957 = fma(_945, cbModelParam._m0[32u].z, fma(_944, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _943)) - _920;
        float _961 = inversesqrt(dot(vec3(_955, _956, _957), vec3(_955, _956, _957)));
        float _974 = ((_961 * _955) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_912 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _975 = ((_961 * _956) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_916 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _976 = ((_961 * _957) / cbModelParam._m0[35u].z) + ((((((_920 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _978 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_974, _975, _976), 0.0);
        vec4 _985 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_974, _975, _976), 0.0);
        vec4 _992 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_974, _975, _976), 0.0);
        vec4 _999 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_974, _975, _976), 0.0);
        float _1011 = exp2((_978.w + (-0.5)) * 20.0) * 2.0;
        float _1012 = _1011 * (_978.x + (-0.5));
        float _1013 = _1011 * (_978.y + (-0.5));
        float _1014 = _1011 * (_978.z + (-0.5));
        float _1021 = exp2((_985.w + (-0.5)) * 20.0) * 2.0;
        float _1022 = _1021 * (_985.x + (-0.5));
        float _1023 = _1021 * (_985.y + (-0.5));
        float _1024 = _1021 * (_985.z + (-0.5));
        float _1031 = exp2((_992.w + (-0.5)) * 20.0) * 2.0;
        float _1032 = _1031 * (_992.x + (-0.5));
        float _1033 = _1031 * (_992.y + (-0.5));
        float _1034 = _1031 * (_992.z + (-0.5));
        float _1041 = exp2((_999.w + (-0.5)) * 20.0) * 2.0;
        float _1042 = _1041 * (_999.x + (-0.5));
        float _1043 = _1041 * (_999.y + (-0.5));
        float _1044 = _1041 * (_999.z + (-0.5));
        float _1045 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1046 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1047 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1048 = _1012 * 0.5;
        float _1049 = _1022 * 0.5;
        float _1050 = _1032 * 0.5;
        float _1051 = dot(vec3(_1048, _1049, _1050), vec3(_1048, _1049, _1050));
        float _1056 = (_1051 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1051);
        float _1064 = (dot(vec3(_326, _327, _328), vec3(_1056 * _1048, _1056 * _1049, _1056 * _1050)) + 1.0) * 0.5;
        float _3487 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1073 = sqrt(((_1049 * _1049) + (_1048 * _1048)) + (_1050 * _1050)) / (_1045 + 9.9999997473787516355514526367188e-06);
        float _3498 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1074 = isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0));
        float _1075 = _1074 * 2.0;
        float _1079 = (1.0 - _1074) / (_1074 + 1.0);
        float _3509 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1080 = isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0));
        float _1089 = ((((1.0 - _1080) * (_1075 + 2.0)) * exp2(log2(isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0))) * (_1075 + 1.0))) + _1080) * _1045;
        float _1090 = _1013 * 0.5;
        float _1091 = _1023 * 0.5;
        float _1092 = _1033 * 0.5;
        float _1093 = dot(vec3(_1090, _1091, _1092), vec3(_1090, _1091, _1092));
        float _1098 = (_1093 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1093);
        float _1106 = (dot(vec3(_326, _327, _328), vec3(_1098 * _1090, _1098 * _1091, _1098 * _1092)) + 1.0) * 0.5;
        float _3520 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1115 = sqrt(((_1091 * _1091) + (_1090 * _1090)) + (_1092 * _1092)) / (_1046 + 9.9999997473787516355514526367188e-06);
        float _3531 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1116 = isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0));
        float _1117 = _1116 * 2.0;
        float _1121 = (1.0 - _1116) / (_1116 + 1.0);
        float _3542 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1122 = isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0));
        float _1131 = ((((1.0 - _1122) * (_1117 + 2.0)) * exp2(log2(isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0))) * (_1117 + 1.0))) + _1122) * _1046;
        float _1132 = _1014 * 0.5;
        float _1133 = _1024 * 0.5;
        float _1134 = _1034 * 0.5;
        float _1135 = dot(vec3(_1132, _1133, _1134), vec3(_1132, _1133, _1134));
        float _1140 = (_1135 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1135);
        float _1148 = (dot(vec3(_326, _327, _328), vec3(_1140 * _1132, _1140 * _1133, _1140 * _1134)) + 1.0) * 0.5;
        float _3553 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1157 = sqrt(((_1133 * _1133) + (_1132 * _1132)) + (_1134 * _1134)) / (_1047 + 9.9999997473787516355514526367188e-06);
        float _3564 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1158 = isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0));
        float _1159 = _1158 * 2.0;
        float _1163 = (1.0 - _1158) / (_1158 + 1.0);
        float _3575 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1164 = isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0));
        float _1173 = ((((1.0 - _1164) * (_1159 + 2.0)) * exp2(log2(isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0))) * (_1159 + 1.0))) + _1164) * _1047;
        _1181 = _1014;
        _1182 = _1013;
        _1183 = _1012;
        _1184 = _1024;
        _1185 = _1023;
        _1186 = _1022;
        _1187 = _1034;
        _1188 = _1033;
        _1189 = _1032;
        _1190 = _1047;
        _1191 = _1046;
        _1192 = _1045;
        _1193 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0)));
        _1194 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0)));
        _1195 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0)));
    }
    else
    {
        _1181 = _872;
        _1182 = _872;
        _1183 = _872;
        _1184 = _872;
        _1185 = _872;
        _1186 = _872;
        _1187 = _872;
        _1188 = _872;
        _1189 = _872;
        _1190 = _872;
        _1191 = _872;
        _1192 = _872;
        _1193 = 0.0;
        _1194 = 0.0;
        _1195 = 0.0;
    }
    float _1205 = (cbModelParam._m0[1u].x * (_1193 - _884)) + _884;
    float _1206 = (cbModelParam._m0[1u].x * (_1194 - _885)) + _885;
    float _1207 = (cbModelParam._m0[1u].x * (_1195 - _886)) + _886;
    float _1228 = fma(_1207, cbSceneParam._m0[89u].z, fma(_1206, cbSceneParam._m0[89u].y, _1205 * cbSceneParam._m0[89u].x));
    float _1231 = fma(_1207, cbSceneParam._m0[90u].z, fma(_1206, cbSceneParam._m0[90u].y, _1205 * cbSceneParam._m0[90u].x));
    float _1234 = fma(_1207, cbSceneParam._m0[91u].z, fma(_1206, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1205));
    float _1249 = _505 * 0.5;
    float _1250 = _506 * 0.5;
    float _1251 = _507 * 0.5;
    float _1252 = dot(vec4(_1249, _1250, _1251, 1.0), vec4(_1183, _1186, _1189, _1192));
    float _1255 = dot(vec4(_1249, _1250, _1251, 1.0), vec4(_1182, _1185, _1188, _1191));
    float _1258 = dot(vec4(_1249, _1250, _1251, 1.0), vec4(_1181, _1184, _1187, _1190));
    float _1292;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1265 = dot(vec4(_1249, _1250, _1251, 1.0), vec4(_871, _875, _878, _881));
        float _1269 = dot(vec4(_1249, _1250, _1251, 1.0), vec4(_873, _876, _879, _882));
        float _1273 = dot(vec4(_1249, _1250, _1251, 1.0), vec4(_874, _877, _880, _883));
        float _1280 = dot(vec4(cbModelParam._m0[39u]), vec4(_1249, _1250, _1251, 1.0));
        _1292 = dot(vec3(isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0)), isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0)), isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1280) ? 0.0 : (isnan(0.0) ? _1280 : max(0.0, _1280))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1292 = 1.0;
    }
    float _1303;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1294 = dot(vec4(cbModelParam._m0[40u]), vec4(_1249, _1250, _1251, 1.0));
        _1303 = dot(vec3(isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0)), isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0)), isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1294) ? 0.0 : (isnan(0.0) ? _1294 : max(0.0, _1294))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1303 = 1.0;
    }
    float _1307 = (_1303 * cbModelParam._m0[1u].x) + (_1292 * (1.0 - cbModelParam._m0[1u].x));
    float _1317 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _329);
    float _1318 = isnan(_1317) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1317 : min(cbModelParam._m0[25u].z, _1317));
    float _1400;
    float _1402;
    float _1404;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1367 = fma(_569, cbModelParam._m0[13u].z, fma(_565, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _561)) + cbModelParam._m0[13u].w;
        float _1371 = fma(_569, cbModelParam._m0[14u].z, fma(_565, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _561)) + cbModelParam._m0[14u].w;
        float _1375 = fma(_569, cbModelParam._m0[15u].z, fma(_565, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _561)) + cbModelParam._m0[15u].w;
        float _1378 = fma(_507, cbModelParam._m0[13u].z, fma(_506, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _505));
        float _1381 = fma(_507, cbModelParam._m0[14u].z, fma(_506, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _505));
        float _1384 = fma(_507, cbModelParam._m0[15u].z, fma(_506, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _505));
        float _1412;
        if (_1378 > 0.0)
        {
            _1412 = abs((1.0 - _1367) / _1378);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1378 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1367 + 1.0) / _1378);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1412 = frontier_phi_16_14_ladder;
        }
        float _1619;
        if (_1381 > 0.0)
        {
            _1619 = abs((1.0 - _1371) / _1381);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1381 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1371 + 1.0) / _1381);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1619 = frontier_phi_25_21_ladder;
        }
        float _1873;
        if (_1384 > 0.0)
        {
            _1873 = abs((1.0 - _1375) / _1384);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1384 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1375 + 1.0) / _1384);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1873 = frontier_phi_37_32_ladder;
        }
        float _1875 = isnan(_1619) ? _1412 : (isnan(_1412) ? _1619 : min(_1412, _1619));
        float _1876 = isnan(_1873) ? _1875 : (isnan(_1875) ? _1873 : min(_1875, _1873));
        float _1880 = (_1876 * _1378) + _1367;
        float _1881 = (_1876 * _1381) + _1371;
        float _1882 = (_1876 * _1384) + _1375;
        float _1883 = _1876 * 9.9999997473787516355514526367188e-05;
        float _1885 = (-1.0) - _1883;
        float _1887 = _1883 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1882 > _1887) || ((_1882 < _1885) || ((_1881 > _1887) || ((_1881 < _1885) || ((_1880 < _1885) || (_1880 > _1887))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2010 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1882, cbModelParam._m0[9u].z, fma(_1881, cbModelParam._m0[9u].y, _1880 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1882, cbModelParam._m0[10u].z, fma(_1881, cbModelParam._m0[10u].y, _1880 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1882, cbModelParam._m0[11u].z, fma(_1881, cbModelParam._m0[11u].y, _1880 * cbModelParam._m0[11u].x))), _1318);
            frontier_phi_15_37_ladder = _2010.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2010.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2010.x * cbModelParam._m0[1u].y;
        }
        _1400 = frontier_phi_15_37_ladder_2;
        _1402 = frontier_phi_15_37_ladder_1;
        _1404 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1388 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_505, _506, _507), _1318);
        _1400 = _1388.x * cbModelParam._m0[1u].y;
        _1402 = _1388.y * cbModelParam._m0[1u].y;
        _1404 = _1388.z * cbModelParam._m0[1u].y;
    }
    float _1408 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _329);
    float _1409 = isnan(_1408) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1408 : min(cbModelParam._m0[25u].w, _1408));
    float _1502;
    float _1504;
    float _1506;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1466 = fma(_569, cbModelParam._m0[21u].z, fma(_565, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _561)) + cbModelParam._m0[21u].w;
        float _1470 = fma(_569, cbModelParam._m0[22u].z, fma(_565, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _561)) + cbModelParam._m0[22u].w;
        float _1474 = fma(_569, cbModelParam._m0[23u].z, fma(_565, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _561)) + cbModelParam._m0[23u].w;
        float _1477 = fma(_507, cbModelParam._m0[21u].z, fma(_506, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _505));
        float _1480 = fma(_507, cbModelParam._m0[22u].z, fma(_506, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _505));
        float _1483 = fma(_507, cbModelParam._m0[23u].z, fma(_506, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _505));
        float _1624;
        if (_1477 > 0.0)
        {
            _1624 = abs((1.0 - _1466) / _1477);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1477 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1466 + 1.0) / _1477);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1624 = frontier_phi_27_23_ladder;
        }
        float _1900;
        if (_1480 > 0.0)
        {
            _1900 = abs((1.0 - _1470) / _1480);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1480 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1470 + 1.0) / _1480);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1900 = frontier_phi_39_34_ladder;
        }
        float _2113;
        if (_1483 > 0.0)
        {
            _2113 = abs((1.0 - _1474) / _1483);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1483 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1474 + 1.0) / _1483);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2113 = frontier_phi_48_45_ladder;
        }
        float _2115 = isnan(_1900) ? _1624 : (isnan(_1624) ? _1900 : min(_1624, _1900));
        float _2116 = isnan(_2113) ? _2115 : (isnan(_2115) ? _2113 : min(_2115, _2113));
        float _2120 = (_2116 * _1477) + _1466;
        float _2121 = (_2116 * _1480) + _1470;
        float _2122 = (_2116 * _1483) + _1474;
        float _2123 = _2116 * 9.9999997473787516355514526367188e-05;
        float _2124 = (-1.0) - _2123;
        float _2126 = _2123 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2122 > _2126) || ((_2122 < _2124) || ((_2121 > _2126) || ((_2121 < _2124) || ((_2120 < _2124) || (_2120 > _2126))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2345 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2122, cbModelParam._m0[17u].z, fma(_2121, cbModelParam._m0[17u].y, _2120 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2122, cbModelParam._m0[18u].z, fma(_2121, cbModelParam._m0[18u].y, _2120 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2122, cbModelParam._m0[19u].z, fma(_2121, cbModelParam._m0[19u].y, _2120 * cbModelParam._m0[19u].x))), _1409);
            frontier_phi_24_48_ladder = _2345.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2345.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2345.x * cbModelParam._m0[1u].z;
        }
        _1502 = frontier_phi_24_48_ladder_2;
        _1504 = frontier_phi_24_48_ladder_1;
        _1506 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1486 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_505, _506, _507), _1409);
        _1502 = _1486.x * cbModelParam._m0[1u].z;
        _1504 = _1486.y * cbModelParam._m0[1u].z;
        _1506 = _1486.z * cbModelParam._m0[1u].z;
    }
    float _1519 = (((_532 * _482) + _533) * _497) * ((cbModelParam._m0[1u].w * (_1502 - _1400)) + _1400);
    float _1521 = (((_532 * _484) + _533) * _497) * ((cbModelParam._m0[1u].w * (_1504 - _1402)) + _1402);
    float _1523 = (((_532 * _485) + _533) * _497) * ((cbModelParam._m0[1u].w * (_1506 - _1404)) + _1404);
    float _1526 = fma(_1523, cbSceneParam._m0[89u].z, fma(_1521, cbSceneParam._m0[89u].y, _1519 * cbSceneParam._m0[89u].x));
    float _1529 = fma(_1523, cbSceneParam._m0[90u].z, fma(_1521, cbSceneParam._m0[90u].y, _1519 * cbSceneParam._m0[90u].x));
    float _1532 = fma(_1523, cbSceneParam._m0[91u].z, fma(_1521, cbSceneParam._m0[91u].y, _1519 * cbSceneParam._m0[91u].x));
    uvec4 _1542 = floatBitsToUint(cbInstanceData._m0[_456 + 5u]);
    uint _1544 = _1542.x * 14u;
    uint _1545 = _1544 + 13u;
    float _1552 = _497 + (-1.0);
    float _1557 = (cbLight._m0[_1545].x * _1552) + 1.0;
    float _1558 = (cbLight._m0[_1545].y * _1552) + 1.0;
    float _1559 = (cbLight._m0[_1545].z * _1552) + 1.0;
    float _1560 = (cbLight._m0[_1545].w * _1552) + 1.0;
    uint _1561 = _1544 + 5u;
    float _1567 = isnan(1.0) ? _1558 : (isnan(_1558) ? 1.0 : min(_1558, 1.0));
    uint _1571 = _1544 + 4u;
    float _1578 = isnan(1.0) ? _1557 : (isnan(_1557) ? 1.0 : min(_1557, 1.0));
    uint _1582 = _1544 | 1u;
    float _1593 = dot(vec3(cbLight._m0[_1544].xyz), vec3(_326, _327, _328));
    float _1596 = dot(vec3(cbLight._m0[_1582].xyz), vec3(_326, _327, _328));
    float _3711 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
    float _3722 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
    float _1601 = (isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0))) * 0.3183098733425140380859375;
    float _1603 = (isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0))) * 0.3183098733425140380859375;
    float _1610 = ((cbLight._m0[_1561].x * _1567) * _1603) + ((cbLight._m0[_1571].x * _1578) * _1601);
    float _1611 = ((_1567 * cbLight._m0[_1561].y) * _1603) + ((_1578 * cbLight._m0[_1571].y) * _1601);
    float _1612 = ((_1567 * cbLight._m0[_1561].z) * _1603) + ((_1578 * cbLight._m0[_1571].z) * _1601);
    uvec4 _1616 = floatBitsToUint(cbLight._m0[_1544 + 12u]);
    bool _1618 = _1616.x == 0u;
    float _1629;
    float _1631;
    float _1633;
    if (_1618)
    {
        _1629 = _1610;
        _1631 = _1611;
        _1633 = _1612;
    }
    else
    {
        uint _1637 = _1544 + 6u;
        float _1653 = (dot(vec3(cbLight._m0[_1544 + 2u].xyz), vec3(_326, _327, _328)) * 0.5) + 0.5;
        float _1654 = _1653 * _1653;
        float _3733 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
        float _1655 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
        float _1656 = isnan(1.0) ? _1559 : (isnan(_1559) ? 1.0 : min(_1559, 1.0));
        _1629 = (((cbLight._m0[_1637].x * 0.3183098733425140380859375) * _1655) * _1656) + _1610;
        _1631 = (((cbLight._m0[_1637].y * 0.3183098733425140380859375) * _1655) * _1656) + _1611;
        _1633 = (((cbLight._m0[_1637].z * 0.3183098733425140380859375) * _1655) * _1656) + _1612;
    }
    bool _1636 = _1616.y == 0u;
    float _1674;
    float _1676;
    float _1678;
    if (_1636)
    {
        _1674 = _1629;
        _1676 = _1631;
        _1678 = _1633;
    }
    else
    {
        uint _1844 = _1544 + 7u;
        float _1860 = (dot(vec3(cbLight._m0[_1544 + 3u].xyz), vec3(_326, _327, _328)) * 0.5) + 0.5;
        float _1861 = _1860 * _1860;
        float _3749 = isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0));
        float _1862 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
        float _1863 = isnan(1.0) ? _1560 : (isnan(_1560) ? 1.0 : min(_1560, 1.0));
        _1674 = (((cbLight._m0[_1844].x * 0.3183098733425140380859375) * _1862) * _1863) + _1629;
        _1676 = (((cbLight._m0[_1844].y * 0.3183098733425140380859375) * _1862) * _1863) + _1631;
        _1678 = (((cbLight._m0[_1844].z * 0.3183098733425140380859375) * _1862) * _1863) + _1633;
    }
    uint _1681 = _1544 + 8u;
    float _1694 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1544].w)) * _329) * 0.949999988079071044921875);
    float _1695 = _1694 * _1694;
    float _1696 = cbLight._m0[_1544].x + _407;
    float _1697 = cbLight._m0[_1544].y + _408;
    float _1698 = cbLight._m0[_1544].z + _409;
    float _1702 = inversesqrt(dot(vec3(_1696, _1697, _1698), vec3(_1696, _1697, _1698)));
    float _1703 = _1702 * _1696;
    float _1704 = _1702 * _1697;
    float _1705 = _1702 * _1698;
    float _1706 = dot(vec3(_326, _327, _328), vec3(cbLight._m0[_1544].xyz));
    float _3765 = isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0));
    float _1709 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
    float _3776 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _1710 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
    float _1711 = dot(vec3(_326, _327, _328), vec3(_1703, _1704, _1705));
    float _3787 = isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0));
    float _1714 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
    float _1715 = dot(vec3(cbLight._m0[_1544].xyz), vec3(_1703, _1704, _1705));
    float _3798 = isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0));
    float _1719 = _1695 * _1695;
    float _1723 = ((_1714 * _1714) * (_1719 + (-1.0))) + 1.0;
    float _1731 = exp2(log2(1.0 - (isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0)))) * 5.0);
    float _1732 = 0.959999978542327880859375 - _479;
    float _1734 = 0.959999978542327880859375 - _480;
    float _1735 = 0.959999978542327880859375 - _481;
    float _1742 = 1.0 - _1695;
    float _1753 = (0.5 / (((_1710 * ((_1709 * _1742) + _1695)) + 9.9999999392252902907785028219223e-09) + (((_1710 * _1742) + _1695) * _1709))) * _1709;
    float _3809 = isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0));
    float _1755 = (isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0))) * (_1719 / ((_1723 * _1723) * 3.141590118408203125));
    uint _1766 = _1544 + 9u;
    float _1777 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1582].w)) * _329) * 0.949999988079071044921875);
    float _1778 = _1777 * _1777;
    float _1779 = cbLight._m0[_1582].x + _407;
    float _1780 = cbLight._m0[_1582].y + _408;
    float _1781 = cbLight._m0[_1582].z + _409;
    float _1785 = inversesqrt(dot(vec3(_1779, _1780, _1781), vec3(_1779, _1780, _1781)));
    float _1786 = _1785 * _1779;
    float _1787 = _1785 * _1780;
    float _1788 = _1785 * _1781;
    float _1789 = dot(vec3(_326, _327, _328), vec3(cbLight._m0[_1582].xyz));
    float _3820 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
    float _1792 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
    float _1793 = dot(vec3(_326, _327, _328), vec3(_1786, _1787, _1788));
    float _3831 = isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0));
    float _1796 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
    float _1797 = dot(vec3(cbLight._m0[_1582].xyz), vec3(_1786, _1787, _1788));
    float _3842 = isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0));
    float _1801 = _1778 * _1778;
    float _1805 = ((_1796 * _1796) * (_1801 + (-1.0))) + 1.0;
    float _1812 = exp2(log2(1.0 - (isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0)))) * 5.0);
    float _1819 = 1.0 - _1778;
    float _1829 = (0.5 / (((_1710 * ((_1792 * _1819) + _1778)) + 9.9999999392252902907785028219223e-09) + (((_1710 * _1819) + _1778) * _1792))) * _1792;
    float _3853 = isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0));
    float _1831 = (isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0))) * (_1801 / ((_1805 * _1805) * 3.141590118408203125));
    float _1841 = (((((_1812 * _1732) + _482) * cbLight._m0[_1766].x) * _1831) * _1567) + (((((_1731 * _1732) + _482) * cbLight._m0[_1681].x) * _1755) * _1578);
    float _1842 = (((((_1812 * _1734) + _484) * cbLight._m0[_1766].y) * _1831) * _1567) + (((((_1731 * _1734) + _484) * cbLight._m0[_1681].y) * _1755) * _1578);
    float _1843 = (((((_1812 * _1735) + _485) * cbLight._m0[_1766].z) * _1831) * _1567) + (((((_1731 * _1735) + _485) * cbLight._m0[_1681].z) * _1755) * _1578);
    float _1905;
    float _1907;
    float _1909;
    if (_1618)
    {
        _1905 = _1841;
        _1907 = _1842;
        _1909 = _1843;
    }
    else
    {
        uint _1911 = _1544 + 2u;
        uint _1915 = _1544 + 10u;
        float _1929 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1911].w)) * _329) * 0.949999988079071044921875);
        float _1930 = _1929 * _1929;
        float _1931 = cbLight._m0[_1911].x + _407;
        float _1932 = cbLight._m0[_1911].y + _408;
        float _1933 = cbLight._m0[_1911].z + _409;
        float _1937 = inversesqrt(dot(vec3(_1931, _1932, _1933), vec3(_1931, _1932, _1933)));
        float _1938 = _1937 * _1931;
        float _1939 = _1937 * _1932;
        float _1940 = _1937 * _1933;
        float _1941 = dot(vec3(_326, _327, _328), vec3(cbLight._m0[_1911].xyz));
        float _3864 = isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0));
        float _1944 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
        float _1945 = dot(vec3(_326, _327, _328), vec3(_1938, _1939, _1940));
        float _3875 = isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0));
        float _1948 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
        float _1949 = dot(vec3(cbLight._m0[_1911].xyz), vec3(_1938, _1939, _1940));
        float _3886 = isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0));
        float _1953 = _1930 * _1930;
        float _1957 = ((_1948 * _1948) * (_1953 + (-1.0))) + 1.0;
        float _1964 = exp2(log2(1.0 - (isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0)))) * 5.0);
        float _1971 = 1.0 - _1930;
        float _1981 = (0.5 / (((_1710 * ((_1944 * _1971) + _1930)) + 9.9999999392252902907785028219223e-09) + (((_1710 * _1971) + _1930) * _1944))) * _1944;
        float _3897 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
        float _1983 = (isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0))) * (_1953 / ((_1957 * _1957) * 3.141590118408203125));
        float _1984 = isnan(1.0) ? _1559 : (isnan(_1559) ? 1.0 : min(_1559, 1.0));
        _1905 = (((((_1964 * _1732) + _482) * cbLight._m0[_1915].x) * _1983) * _1984) + _1841;
        _1907 = (((((_1964 * _1734) + _484) * cbLight._m0[_1915].y) * _1983) * _1984) + _1842;
        _1909 = (((((_1964 * _1735) + _485) * cbLight._m0[_1915].z) * _1983) * _1984) + _1843;
    }
    float _2019;
    float _2021;
    float _2023;
    if (_1636)
    {
        _2019 = _1905;
        _2021 = _1907;
        _2023 = _1909;
    }
    else
    {
        uint _2030 = _1544 + 3u;
        uint _2034 = _1544 + 11u;
        float _2048 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2030].w)) * _329) * 0.949999988079071044921875);
        float _2049 = _2048 * _2048;
        float _2050 = cbLight._m0[_2030].x + _407;
        float _2051 = cbLight._m0[_2030].y + _408;
        float _2052 = cbLight._m0[_2030].z + _409;
        float _2056 = inversesqrt(dot(vec3(_2050, _2051, _2052), vec3(_2050, _2051, _2052)));
        float _2057 = _2056 * _2050;
        float _2058 = _2056 * _2051;
        float _2059 = _2056 * _2052;
        float _2060 = dot(vec3(_326, _327, _328), vec3(cbLight._m0[_2030].xyz));
        float _3913 = isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0));
        float _2063 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
        float _2064 = dot(vec3(_326, _327, _328), vec3(_2057, _2058, _2059));
        float _3924 = isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0));
        float _2067 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
        float _2068 = dot(vec3(cbLight._m0[_2030].xyz), vec3(_2057, _2058, _2059));
        float _3935 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
        float _2072 = _2049 * _2049;
        float _2076 = ((_2067 * _2067) * (_2072 + (-1.0))) + 1.0;
        float _2083 = exp2(log2(1.0 - (isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0)))) * 5.0);
        float _2090 = 1.0 - _2049;
        float _2100 = (0.5 / (((_1710 * ((_2063 * _2090) + _2049)) + 9.9999999392252902907785028219223e-09) + (((_1710 * _2090) + _2049) * _2063))) * _2063;
        float _3946 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
        float _2102 = (isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0))) * (_2072 / ((_2076 * _2076) * 3.141590118408203125));
        float _2103 = isnan(1.0) ? _1560 : (isnan(_1560) ? 1.0 : min(_1560, 1.0));
        _2019 = (((((_2083 * _1732) + _482) * cbLight._m0[_2034].x) * _2102) * _2103) + _1905;
        _2021 = (((((_2083 * _1734) + _484) * cbLight._m0[_2034].y) * _2102) * _2103) + _1907;
        _2023 = (((((_2083 * _1735) + _485) * cbLight._m0[_2034].z) * _2102) * _2103) + _1909;
    }
    float _2237;
    float _2239;
    float _2241;
    float _2243;
    float _2245;
    float _2247;
    if (_1542.y == 0u)
    {
        float _2178 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2179 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2178;
        float _2180 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2178;
        float _2181 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2178;
        uvec4 _2193 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2194 = _2193.x;
        uint _2205 = uint((float(_2193.y) * floor(float(uint(cbSceneParam._m0[85u].y * _416) / _2194))) + floor(float(uint(cbSceneParam._m0[85u].x * _415) / _2194)));
        float _2215 = (log2(_2181 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2216 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
        uint _2219 = uint(isnan(14.0) ? _2216 : (isnan(_2216) ? 14.0 : min(_2216, 14.0)));
        uvec4 _2224 = texelFetch(g_lightClusterGridBuffer, int(((_2219 << 2u) + (_2205 << 6u)) >> 2u));
        uint _2225 = _2224.x;
        uint _2226 = _2193.z;
        float _2350;
        float _2352;
        float _2354;
        float _2356;
        float _2358;
        float _2360;
        if (((((1u << ((_2226 >> 4u) & 15u)) + 4294967295u) & _2225) == 0u) || ((_2226 & 240u) == 0u))
        {
            _2350 = 0.0;
            _2352 = 0.0;
            _2354 = 0.0;
            _2356 = 0.0;
            _2358 = 0.0;
            _2360 = 0.0;
        }
        else
        {
            float _2351;
            float _2353;
            float _2355;
            float _2357;
            float _2359;
            float _2361;
            float _2494 = 0.0;
            float _2495 = 0.0;
            float _2496 = 0.0;
            float _2497 = 0.0;
            float _2498 = 0.0;
            float _2499 = 0.0;
            uint _2500 = 0u;
            uint _2509;
            bool _2510;
            for (;;)
            {
                _2509 = texelFetch(g_lightClassification, int((((_2219 << 5u) + (_2205 << 9u)) + (_2500 << 2u)) >> 2u)).x;
                _2510 = _2509 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2510)
                {
                    frontier_phi_63_pred = _2499;
                    frontier_phi_63_pred_1 = _2498;
                    frontier_phi_63_pred_2 = _2497;
                    frontier_phi_63_pred_3 = _2496;
                    frontier_phi_63_pred_4 = _2495;
                    frontier_phi_63_pred_5 = _2494;
                }
                else
                {
                    float _2618;
                    float _2619;
                    float _2620;
                    float _2621;
                    float _2622;
                    float _2623;
                    uint _2624;
                    _2618 = _2494;
                    _2619 = _2495;
                    _2620 = _2496;
                    _2621 = _2497;
                    _2622 = _2498;
                    _2623 = _2499;
                    _2624 = _2509;
                    float _2550;
                    float _2551;
                    float _2552;
                    float _2553;
                    float _2554;
                    float _2555;
                    for (;;)
                    {
                        uint _2628 = uint(findLSB(_2624)) + (_2500 << 5u);
                        uint _2625 = (_2624 + 4294967295u) & _2624;
                        uint _2630 = _2628 * 48u;
                        vec4 _2644 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2630)).x, texelFetch(g_PointLightRenderingBuffer, int(_2630 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2630 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2630 + 3u)).x));
                        uint _2650 = (_2628 * 48u) + 4u;
                        vec4 _2663 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2650)).x, texelFetch(g_PointLightRenderingBuffer, int(_2650 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2650 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2650 + 3u)).x));
                        uint _2669 = (_2628 * 48u) + 8u;
                        vec3 _2680 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2669)).x, texelFetch(g_PointLightRenderingBuffer, int(_2669 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2669 + 2u)).x));
                        float _2684 = _2644.x - _2179;
                        float _2685 = _2644.y - _2180;
                        float _2686 = _2644.z - _2181;
                        float _2687 = dot(vec3(_2684, _2685, _2686), vec3(_2684, _2685, _2686));
                        float _2690 = inversesqrt(_2687);
                        float _2691 = _2690 * _2684;
                        float _2692 = _2690 * _2685;
                        float _2693 = _2690 * _2686;
                        float _2694 = dot(vec3(_437, _440, _443), vec3(_2691, _2692, _2693));
                        float _2699 = 1.0 - (_2687 * _2644.w);
                        float _3972 = isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : max(_2699, 0.0));
                        float _2700 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
                        float _2701 = sqrt(_2687) * _2663.w;
                        float _2704 = 1.39999997615814208984375 / (_2701 + 1.39999997615814208984375);
                        float _2705 = _2704 * _2704;
                        float _2708 = ((1.0 - _2705) * _2694) + _2705;
                        float _2711 = _2701 * _2701;
                        float _2715 = ((isnan(0.0) ? _2708 : (isnan(_2708) ? 0.0 : max(_2708, 0.0))) * _2700) / ((_2711 * 0.699999988079071044921875) + 1.0);
                        float _2719 = (-0.0) - _2179;
                        float _2720 = (-0.0) - _2180;
                        float _2721 = (-0.0) - _2181;
                        float _2725 = inversesqrt(dot(vec3(_2719, _2720, _2721), vec3(_2719, _2720, _2721)));
                        float _2726 = _2725 * _2719;
                        float _2727 = _2725 * _2720;
                        float _2728 = _2725 * _2721;
                        float _2736 = exp2(log2(1.0 / ((_2711 * 3.5) + 5.0)) * 0.25);
                        float _2737 = 1.0 - _513;
                        float _2744 = sqrt(1.0 - ((1.0 - (_2737 * _2737)) * (1.0 - (_2736 * _2736))));
                        float _2745 = _2744 * _2744;
                        float _2746 = _2745 * _2745;
                        float _2747 = _2726 + _2691;
                        float _2748 = _2727 + _2692;
                        float _2749 = _2728 + _2693;
                        float _2753 = inversesqrt(dot(vec3(_2747, _2748, _2749), vec3(_2747, _2748, _2749)));
                        float _2757 = dot(vec3(_437, _440, _443), vec3(_2726, _2727, _2728));
                        float _3988 = isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : max(_2757, 0.0));
                        float _2760 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
                        float _2761 = dot(vec3(_437, _440, _443), vec3(_2753 * _2747, _2753 * _2748, _2753 * _2749));
                        float _3999 = isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : max(_2761, 0.0));
                        float _2764 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
                        float _2768 = ((_2764 * _2764) * (_2746 + (-1.0))) + 1.0;
                        float _2769 = _2704 * _2745;
                        float _2770 = _2769 * _2769;
                        float _2773 = ((1.0 - _2770) * _2694) + _2770;
                        float _4010 = isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : max(_2773, 0.0));
                        float _2774 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
                        float _2775 = 1.0 - _2745;
                        float _2785 = (0.5 / (((_2774 * ((_2760 * _2775) + _2745)) + 9.9999999392252902907785028219223e-09) + (((_2774 * _2775) + _2745) * _2760))) * _2774;
                        float _4021 = isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : max(_2785, 0.0));
                        float _2796 = (((_2746 * 3.1415927410125732421875) * (isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0)))) / ((_2768 * _2768) * ((_2711 * 2.1991131305694580078125) + 3.141590118408203125))) * _2700;
                        _2553 = (_2715 * _2663.x) + _2621;
                        _2554 = (_2715 * _2663.y) + _2622;
                        _2555 = (_2715 * _2663.z) + _2623;
                        _2550 = (_2796 * _2680.x) + _2618;
                        _2551 = (_2796 * _2680.y) + _2619;
                        _2552 = (_2796 * _2680.z) + _2620;
                        if (_2625 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2618 = _2550;
                            _2619 = _2551;
                            _2620 = _2552;
                            _2621 = _2553;
                            _2622 = _2554;
                            _2623 = _2555;
                            _2624 = _2625;
                        }
                    }
                    frontier_phi_63_pred = _2555;
                    frontier_phi_63_pred_1 = _2554;
                    frontier_phi_63_pred_2 = _2553;
                    frontier_phi_63_pred_3 = _2552;
                    frontier_phi_63_pred_4 = _2551;
                    frontier_phi_63_pred_5 = _2550;
                }
                _2361 = frontier_phi_63_pred;
                _2359 = frontier_phi_63_pred_1;
                _2357 = frontier_phi_63_pred_2;
                _2355 = frontier_phi_63_pred_3;
                _2353 = frontier_phi_63_pred_4;
                _2351 = frontier_phi_63_pred_5;
                uint _2501 = _2500 + 1u;
                if (_2501 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2494 = _2351;
                    _2495 = _2353;
                    _2496 = _2355;
                    _2497 = _2357;
                    _2498 = _2359;
                    _2499 = _2361;
                    _2500 = _2501;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2350 = _2351;
            _2352 = _2353;
            _2354 = _2355;
            _2356 = _2357;
            _2358 = _2359;
            _2360 = _2361;
        }
        uvec4 _2364 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2365 = _2364.z;
        uint _2367 = (_2365 >> 8u) & 15u;
        float _2462;
        float _2464;
        float _2466;
        float _2468;
        float _2470;
        float _2472;
        if (((4294967295u << _2367) & _2225) == 0u)
        {
            _2462 = _2350;
            _2464 = _2352;
            _2466 = _2354;
            _2468 = _2356;
            _2470 = _2358;
            _2472 = _2360;
        }
        else
        {
            float _2487 = inversesqrt(dot(vec3(_2179, _2180, _2181), vec3(_2179, _2180, _2181)));
            float _2488 = _2487 * _2179;
            float _2489 = _2487 * _2180;
            float _2490 = _2487 * _2181;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2367 < ((_2365 >> 12u) & 15u))
            {
                float _2463;
                float _2465;
                float _2467;
                float _2469;
                float _2471;
                float _2473;
                float _2601 = _2350;
                float _2602 = _2352;
                float _2603 = _2354;
                float _2604 = _2356;
                float _2605 = _2358;
                float _2606 = _2360;
                uint _2607 = _2367;
                uint _2616;
                bool _2617;
                for (;;)
                {
                    _2616 = texelFetch(g_lightClassification, int((((_2219 << 5u) + (_2205 << 9u)) + (_2607 << 2u)) >> 2u)).x;
                    _2617 = _2616 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2617)
                    {
                        frontier_phi_69_pred = _2606;
                        frontier_phi_69_pred_1 = _2605;
                        frontier_phi_69_pred_2 = _2604;
                        frontier_phi_69_pred_3 = _2603;
                        frontier_phi_69_pred_4 = _2602;
                        frontier_phi_69_pred_5 = _2601;
                    }
                    else
                    {
                        float _2801;
                        float _2802;
                        float _2803;
                        float _2804;
                        float _2805;
                        float _2806;
                        float _3097;
                        float _3098;
                        float _3099;
                        float _3100;
                        float _3101;
                        float _3102;
                        float _2814 = _2601;
                        float _2815 = _2602;
                        float _2816 = _2603;
                        float _2817 = _2604;
                        float _2818 = _2605;
                        float _2819 = _2606;
                        uint _2820 = _2616;
                        uint _2821;
                        vec4 _2846;
                        float _2847;
                        vec4 _2862;
                        vec3 _2874;
                        vec4 _2890;
                        vec4 _2906;
                        float _2953;
                        bool _2954;
                        for (;;)
                        {
                            uint _2831 = ((_2607 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2820));
                            _2821 = (_2820 + 4294967295u) & _2820;
                            uint _2833 = _2831 * 40u;
                            _2846 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2833)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2833 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2833 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2833 + 3u)).x));
                            _2847 = _2846.w;
                            uint _2849 = (_2831 * 40u) + 4u;
                            _2862 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2849)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2849 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2849 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2849 + 3u)).x));
                            uint _2864 = (_2831 * 40u) + 8u;
                            _2874 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2864)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2864 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2864 + 2u)).x));
                            uint _2877 = (_2831 * 40u) + 16u;
                            _2890 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2877)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2877 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2877 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2877 + 3u)).x));
                            uint _2893 = (_2831 * 40u) + 20u;
                            _2906 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2893)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2893 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2893 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2893 + 3u)).x));
                            uint _2909 = (_2831 * 40u) + 24u;
                            vec4 _2922 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2909)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2909 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2909 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2909 + 3u)).x));
                            uint _2928 = (_2831 * 40u) + 28u;
                            vec4 _2941 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2928)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2928 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2928 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2928 + 3u)).x));
                            _2953 = fma(_2181, _2941.z, fma(_2180, _2941.y, _2941.x * _2179)) + _2941.w;
                            _2954 = !((fma(_2181, _2922.z, fma(_2180, _2922.y, _2922.x * _2179)) + _2922.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2954)
                            {
                                float _2981 = _2846.x - _2179;
                                float _2982 = _2846.y - _2180;
                                float _2983 = _2846.z - _2181;
                                float _2984 = dot(vec3(_2981, _2982, _2983), vec3(_2981, _2982, _2983));
                                float _2987 = inversesqrt(_2984);
                                float _2988 = _2987 * _2981;
                                float _2989 = _2987 * _2982;
                                float _2990 = _2987 * _2983;
                                float _2994 = 1.0 - (_2984 / (_2847 * _2847));
                                float _4032 = isnan(0.0) ? _2994 : (isnan(_2994) ? 0.0 : max(_2994, 0.0));
                                float _2995 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
                                float _2999 = sqrt(_2984) * _2862.w;
                                float _3001 = 1.39999997615814208984375 / (_2999 + 1.39999997615814208984375);
                                float _3002 = _3001 * _3001;
                                float _3005 = ((1.0 - _3002) * dot(vec3(_2988, _2989, _2990), vec3(_437, _440, _443))) + _3002;
                                float _3008 = _2999 * _2999;
                                float _3012 = (fma(_2181, _2890.z, fma(_2180, _2890.y, _2890.x * _2179)) + _2890.w) / _2953;
                                float _3013 = (fma(_2181, _2906.z, fma(_2180, _2906.y, _2906.x * _2179)) + _2906.w) / _2953;
                                float _3017 = 1.0 - dot(vec2(_3012, _3013), vec2(_3012, _3013));
                                float _4048 = isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : max(_3017, 0.0));
                                float _3018 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
                                float _3019 = _3018 * (((isnan(0.0) ? _3005 : (isnan(_3005) ? 0.0 : max(_3005, 0.0))) * _2995) / ((_3008 * 0.699999988079071044921875) + 1.0));
                                float _3031 = exp2(log2(1.0 / ((_3008 * 3.5) + 5.0)) * 0.25);
                                float _3032 = 1.0 - _513;
                                float _3039 = sqrt(1.0 - ((1.0 - (_3032 * _3032)) * (1.0 - (_3031 * _3031))));
                                float _3040 = _3039 * _3039;
                                float _3041 = _3040 * _3040;
                                float _3042 = _2988 - _2488;
                                float _3043 = _2989 - _2489;
                                float _3044 = _2990 - _2490;
                                float _3048 = inversesqrt(dot(vec3(_3042, _3043, _3044), vec3(_3042, _3043, _3044)));
                                float _3052 = dot(vec3(_437, _440, _443), vec3((-0.0) - _2488, (-0.0) - _2489, (-0.0) - _2490));
                                float _4059 = isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : max(_3052, 0.0));
                                float _3055 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
                                float _3056 = dot(vec3(_437, _440, _443), vec3(_3048 * _3042, _3048 * _3043, _3048 * _3044));
                                float _4070 = isnan(0.0) ? _3056 : (isnan(_3056) ? 0.0 : max(_3056, 0.0));
                                float _3059 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
                                float _3063 = ((_3059 * _3059) * (_3041 + (-1.0))) + 1.0;
                                float _3064 = _3001 * _3040;
                                float _3065 = _3064 * _3064;
                                float _3071 = ((1.0 - _3065) * dot(vec3(_437, _440, _443), vec3(_2988, _2989, _2990))) + _3065;
                                float _4081 = isnan(0.0) ? _3071 : (isnan(_3071) ? 0.0 : max(_3071, 0.0));
                                float _3072 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
                                float _3073 = 1.0 - _3040;
                                float _3083 = (0.5 / (((_3072 * ((_3055 * _3073) + _3040)) + 9.9999999392252902907785028219223e-09) + (((_3072 * _3073) + _3040) * _3055))) * _3072;
                                float _4092 = isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : max(_3083, 0.0));
                                float _3093 = (_3018 * _2995) * (((_3041 * 3.1415927410125732421875) * (isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0)))) / ((_3063 * _3063) * ((_3008 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3019 * _2862.z;
                                frontier_phi_75_pred_1 = _3019 * _2862.y;
                                frontier_phi_75_pred_2 = _3019 * _2862.x;
                                frontier_phi_75_pred_3 = _3093 * _2874.z;
                                frontier_phi_75_pred_4 = _3093 * _2874.y;
                                frontier_phi_75_pred_5 = _3093 * _2874.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3102 = frontier_phi_75_pred;
                            _3101 = frontier_phi_75_pred_1;
                            _3100 = frontier_phi_75_pred_2;
                            _3099 = frontier_phi_75_pred_3;
                            _3098 = frontier_phi_75_pred_4;
                            _3097 = frontier_phi_75_pred_5;
                            _2804 = _3100 + _2817;
                            _2805 = _3101 + _2818;
                            _2806 = _3102 + _2819;
                            _2801 = _3097 + _2814;
                            _2802 = _3098 + _2815;
                            _2803 = _3099 + _2816;
                            if (_2821 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2814 = _2801;
                                _2815 = _2802;
                                _2816 = _2803;
                                _2817 = _2804;
                                _2818 = _2805;
                                _2819 = _2806;
                                _2820 = _2821;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2806;
                        frontier_phi_69_pred_1 = _2805;
                        frontier_phi_69_pred_2 = _2804;
                        frontier_phi_69_pred_3 = _2803;
                        frontier_phi_69_pred_4 = _2802;
                        frontier_phi_69_pred_5 = _2801;
                    }
                    _2473 = frontier_phi_69_pred;
                    _2471 = frontier_phi_69_pred_1;
                    _2469 = frontier_phi_69_pred_2;
                    _2467 = frontier_phi_69_pred_3;
                    _2465 = frontier_phi_69_pred_4;
                    _2463 = frontier_phi_69_pred_5;
                    uint _2608 = _2607 + 1u;
                    if (_2608 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2601 = _2463;
                        _2602 = _2465;
                        _2603 = _2467;
                        _2604 = _2469;
                        _2605 = _2471;
                        _2606 = _2473;
                        _2607 = _2608;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2473;
                frontier_phi_57_58_ladder_1 = _2471;
                frontier_phi_57_58_ladder_2 = _2469;
                frontier_phi_57_58_ladder_3 = _2467;
                frontier_phi_57_58_ladder_4 = _2465;
                frontier_phi_57_58_ladder_5 = _2463;
            }
            else
            {
                frontier_phi_57_58_ladder = _2360;
                frontier_phi_57_58_ladder_1 = _2358;
                frontier_phi_57_58_ladder_2 = _2356;
                frontier_phi_57_58_ladder_3 = _2354;
                frontier_phi_57_58_ladder_4 = _2352;
                frontier_phi_57_58_ladder_5 = _2350;
            }
            _2462 = frontier_phi_57_58_ladder_5;
            _2464 = frontier_phi_57_58_ladder_4;
            _2466 = frontier_phi_57_58_ladder_3;
            _2468 = frontier_phi_57_58_ladder_2;
            _2470 = frontier_phi_57_58_ladder_1;
            _2472 = frontier_phi_57_58_ladder;
        }
        float _2477 = isnan(1.0) ? _497 : (isnan(_497) ? 1.0 : min(_497, 1.0));
        _2237 = (_2477 * _2468) + _1674;
        _2239 = (_2477 * _2470) + _1676;
        _2241 = (_2477 * _2472) + _1678;
        _2243 = ((_2462 * _482) * _2477) + _2019;
        _2245 = ((_2464 * _484) * _2477) + _2021;
        _2247 = ((_2466 * _485) * _2477) + _2023;
    }
    else
    {
        _2237 = _1674;
        _2239 = _1676;
        _2241 = _1678;
        _2243 = _2019;
        _2245 = _2021;
        _2247 = _2023;
    }
    uint _2253 = _458 + uint(cbMatDynParam._m0[0u].w);
    float _4108 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _4119 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _4130 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _2284 = (((isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0))) * (_2237 + ((isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0))) * _497))) + ((_2243 + ((isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0))) * _1307)) * cbPerFrame._m0[3u].x)) + (((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].y) * _308.x) * cbInstanceData._m0[_2253].x);
    float _2286 = ((((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].y) * _308.y) * cbInstanceData._m0[_2253].y) + ((_2245 + ((isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0))) * _1307)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0))) * (_2239 + ((isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0))) * _497)));
    float _2288 = ((((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].y) * _308.z) * cbInstanceData._m0[_2253].z) + ((_2247 + ((isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0))) * _1307)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0))) * (_2241 + ((isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0))) * _497)));
    uint _2292 = _456 + 6u;
    float _2300 = _415 / cbSceneParam._m0[86u].x;
    float _2301 = _416 / cbSceneParam._m0[86u].y;
    vec4 _2315 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2300, _2301, (log2((isnan(cbSceneParam._m0[77u].w) ? _349 : (isnan(_349) ? cbSceneParam._m0[77u].w : min(_349, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2317 = _2315.x;
    float _2318 = _2315.y;
    float _2319 = _2315.z;
    float _2320 = _2315.w;
    float _2412;
    float _2414;
    float _2416;
    float _2418;
    if (_349 > cbSceneParam._m0[78u].w)
    {
        float _2375 = isnan(_349) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _349 : min(cbSceneParam._m0[80u].w, _349));
        float _2376 = _2375 / _349;
        float _2387 = _2376 * _400;
        float _2388 = _401 * _2376;
        float _2389 = (-0.0) - _2388;
        float _2390 = _2376 * _402;
        float _2392 = (cbSceneParam._m0[77u].w * _2389) / _2375;
        float _2393 = _2392 + cbSceneParam._m0[79u].w;
        float _2394 = cbSceneParam._m0[79u].w - _2388;
        float _2400 = sqrt(((_2387 * _2387) + (_2388 * _2388)) + (_2390 * _2390));
        float _2403 = (1.0 - (cbSceneParam._m0[77u].w / _2375)) * _2400;
        float _2408 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2410 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2563;
        if (abs((_2389 - _2392) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2563 = ((((_2393 > 0.0) ? exp2(_2408 * _2393) : (2.0 - exp2(_2410 * _2393))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2403;
        }
        else
        {
            float _2523 = 1.0 / cbSceneParam._m0[80u].x;
            float _2524 = isnan(_2394) ? _2393 : (isnan(_2393) ? _2394 : max(_2393, _2394));
            float _2525 = isnan(_2394) ? _2393 : (isnan(_2393) ? _2394 : min(_2393, _2394));
            float _2534 = isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : min(_2524, 0.0));
            float _2535 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : min(_2525, 0.0));
            _2563 = ((abs(_2400 / _2389) * cbSceneParam._m0[80u].y) * ((((_2534 - _2535) * 2.0) - ((exp2(_2408 * (isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : max(_2524, 0.0)))) - exp2(_2408 * (isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0))))) * _2523)) - ((exp2(_2410 * _2534) - exp2(_2410 * _2535)) * _2523))) + (_2403 * cbSceneParam._m0[80u].z);
        }
        vec4 _2565 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2300, _2301, 1.0), 0.0);
        float _2574 = exp2((_2563 * (-1.44269502162933349609375)) * (1.0 - _2565.w));
        float _2575 = log2(_2574);
        float _2591 = log2(_2320);
        _2412 = (exp2(_2591 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2575 * cbSceneParam._m0[78u].x)) * _2565.x) / cbSceneParam._m0[78u].x)) + _2317;
        _2414 = (exp2(_2591 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2575 * cbSceneParam._m0[78u].y)) * _2565.y) / cbSceneParam._m0[78u].y)) + _2318;
        _2416 = (exp2(_2591 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2575 * cbSceneParam._m0[78u].z)) * _2565.z) / cbSceneParam._m0[78u].z)) + _2319;
        _2418 = _2574 * _2320;
    }
    else
    {
        _2412 = _2317;
        _2414 = _2318;
        _2416 = _2319;
        _2418 = _2320;
    }
    float _2430 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2431 = _2430 == 3.0;
    float _2432 = log2(_2418);
    float _2439 = exp2(_2432 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0)));
    float _2440 = exp2(_2432 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0)));
    float _2441 = exp2(_2432 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0)));
    float _2450 = (_2430 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2450 * (_2431 ? _2439 : (_2439 + (cbSceneParam._m0[72u].w * _2412)));
    SV_Target.y = _2450 * (_2431 ? _2440 : (_2440 + (cbSceneParam._m0[72u].w * _2414)));
    SV_Target.z = _2450 * (_2431 ? _2441 : (_2441 + (cbSceneParam._m0[72u].w * _2416)));
    SV_Target.w = cbInstanceData._m0[_2292].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2292].w;
}


