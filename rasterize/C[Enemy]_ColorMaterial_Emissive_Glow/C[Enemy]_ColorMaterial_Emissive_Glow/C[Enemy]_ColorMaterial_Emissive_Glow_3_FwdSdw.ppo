#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[29];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 12) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 9) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2DArray C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_0;
layout(set = 0, binding = 14) uniform texture2DArray C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1298;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _209 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _210 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _211 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _217 = inversesqrt(dot(vec3(_209, _210, _211), vec3(_209, _210, _211)));
    float _224 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _231 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _249 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_1) + cbTextureTilingScale._m0[10u].w));
    float _259 = log2(0.0);
    float _261 = exp2(_259 * cbMtdParam._m0[22u].x);
    float _262 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _263 = isnan(1.0) ? _262 : (isnan(_262) ? 1.0 : min(_262, 1.0));
    vec4 _277 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _281 = _277.z;
    float _290 = exp2(log2(_281 * cbMtdParam._m0[22u].y) * cbMtdParam._m0[21u].y);
    float _291 = isnan(0.0) ? _290 : (isnan(_290) ? 0.0 : max(_290, 0.0));
    float _292 = isnan(1.0) ? _291 : (isnan(_291) ? 1.0 : min(_291, 1.0));
    vec4 _304 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _307 = _304.y;
    float _310 = (_304.x + (-0.02500000037252902984619140625)) * 8.0;
    float _314 = roundEven(5.0 - _310);
    float _315 = isnan(0.0) ? _314 : (isnan(_314) ? 0.0 : max(_314, 0.0));
    float _316 = isnan(4.0) ? _315 : (isnan(_315) ? 4.0 : min(_315, 4.0));
    float _329 = floor(_316);
    vec4 _332 = texture(sampler2DArray(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w, _329));
    float _187[6];
    float _188[6];
    float _189[6];
    _187[0u] = cbMtdParam._m0[17u].x;
    _188[0u] = cbMtdParam._m0[17u].y;
    _189[0u] = cbMtdParam._m0[17u].z;
    _187[1u] = cbMtdParam._m0[15u].x;
    _188[1u] = cbMtdParam._m0[15u].y;
    _189[1u] = cbMtdParam._m0[15u].z;
    _187[2u] = cbMtdParam._m0[14u].x;
    _188[2u] = cbMtdParam._m0[14u].y;
    _189[2u] = cbMtdParam._m0[14u].z;
    _187[3u] = cbMtdParam._m0[13u].x;
    _188[3u] = cbMtdParam._m0[13u].y;
    _189[3u] = cbMtdParam._m0[13u].z;
    _187[4u] = cbMtdParam._m0[12u].x;
    _188[4u] = cbMtdParam._m0[12u].y;
    _189[4u] = cbMtdParam._m0[12u].z;
    _187[5u] = cbMtdParam._m0[18u].x;
    _188[5u] = cbMtdParam._m0[18u].y;
    _189[5u] = cbMtdParam._m0[18u].z;
    float _396 = roundEven(_310);
    float _397 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    uint _399 = uint(int(isnan(5.0) ? _397 : (isnan(_397) ? 5.0 : min(_397, 5.0))));
    vec4 _429 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _440 = cbMtdParam._m0[9u].x * _429.x;
    float _441 = cbMtdParam._m0[9u].y * _429.y;
    float _442 = cbMtdParam._m0[9u].z * _429.z;
    float _449 = ((((((_187[_399] - cbMtdParam._m0[10u].x) * _307) + cbMtdParam._m0[10u].x) * _332.x) - _440) * _292) + _440;
    float _450 = ((((((_188[_399] - cbMtdParam._m0[10u].y) * _307) + cbMtdParam._m0[10u].y) * _332.y) - _441) * _292) + _441;
    float _451 = ((((((_189[_399] - cbMtdParam._m0[10u].z) * _307) + cbMtdParam._m0[10u].z) * _332.z) - _442) * _292) + _442;
    float _457 = exp2(log2(_277.w) * cbMtdParam._m0[22u].w);
    vec4 _470 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _490 = (((cbMtdParam._m0[16u].x * _470.x) - _449) * _457) + _449;
    float _491 = (((cbMtdParam._m0[16u].y * _470.y) - _450) * _457) + _450;
    float _492 = (((cbMtdParam._m0[16u].z * _470.z) - _451) * _457) + _451;
    vec4 _505 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _530 = (_249.x * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].x * _505.x) - _490) * _263) + _490);
    float _532 = (_249.y * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].y * _505.y) - _491) * _263) + _491);
    float _534 = (_249.z * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].z * _505.z) - _492) * _263) + _492);
    float _182[5];
    float _183[5];
    _182[0u] = cbMtdParam._m0[25u].w;
    _183[0u] = cbMtdParam._m0[26u].x;
    _182[1u] = cbMtdParam._m0[27u].w;
    _183[1u] = cbMtdParam._m0[28u].x;
    _182[2u] = cbMtdParam._m0[27u].y;
    _183[2u] = cbMtdParam._m0[27u].z;
    _182[3u] = cbMtdParam._m0[26u].w;
    _183[3u] = cbMtdParam._m0[27u].x;
    _182[4u] = cbMtdParam._m0[26u].y;
    _183[4u] = cbMtdParam._m0[26u].z;
    float _572 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    uint _574 = uint(int(isnan(4.0) ? _572 : (isnan(_572) ? 4.0 : min(_572, 4.0))));
    float _581 = ((_183[_574] - cbMtdParam._m0[21u].z) * _292) + cbMtdParam._m0[21u].z;
    float _584 = ((cbMtdParam._m0[21u].w - _581) * _457) + _581;
    float _587 = ((cbMtdParam._m0[24u].y - _584) * _263) + _584;
    vec4 _602 = texture(sampler2DArray(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w, _329));
    vec4 _619 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _621 = _619.x;
    float _622 = _619.y;
    float _627 = cbMtdParam._m0[21u].x + _619.z;
    float _630 = (((_602.z + _182[_574]) - _627) * _292) + _627;
    vec4 _643 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_1) + cbTextureTilingScale._m0[11u].w));
    float _654 = (((_643.z - _630) + cbMtdParam._m0[25u].y) * _457) + _630;
    float _660 = ((((_281 * 2.0) * _654) - _654) * cbMtdParam._m0[23u].w) + _654;
    vec4 _672 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_1) + cbTextureTilingScale._m0[12u].w));
    float _683 = (((cbMtdParam._m0[22u].z + _672.z) - _660) * _263) + _660;
    vec4 _702 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _719 = ((_602.x - _621) * _292) + _621;
    float _720 = ((_602.y - _622) * _292) + _622;
    float _725 = ((_643.x - _719) * _457) + _719;
    float _726 = ((_643.y - _720) * _457) + _720;
    float _735 = ((((_672.x - _725) * _263) + _725) * 2.0) + (-1.0);
    float _736 = ((((_672.y - _726) * _263) + _726) * 2.0) + (-1.0);
    float _737 = dot(vec2(_735, _736), vec2(_735, _736));
    float _4001 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _742 = sqrt(1.0 - (isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0))));
    float _745 = (cbMtdParam._m0[24u].z * ((_277.x * 2.0) + (-1.0))) + _735;
    float _746 = (cbMtdParam._m0[24u].z * ((_277.y * 2.0) + (-1.0))) + _736;
    float _749 = fma(_742, _224 * NORMAL.x, fma(_746, _231 * TANGENT.x, (_217 * _209) * _745));
    float _752 = fma(_742, _224 * NORMAL.y, fma(_746, _231 * TANGENT.y, (_217 * _210) * _745));
    float _755 = fma(_742, _224 * NORMAL.z, fma(_746, _231 * TANGENT.z, (_217 * _211) * _745));
    float _759 = inversesqrt(dot(vec3(_749, _752, _755), vec3(_749, _752, _755)));
    float _760 = _759 * _749;
    float _761 = _759 * _752;
    float _762 = _759 * _755;
    float _4012 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
    float _763 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
    float _4023 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _4034 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _4045 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _4056 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _767 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
    float _783 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _823 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _833 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _823);
    float _834 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _823);
    float _835 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _823);
    float _839 = inversesqrt(dot(vec3(_833, _834, _835), vec3(_833, _834, _835)));
    float _840 = _833 * _839;
    float _841 = _834 * _839;
    float _842 = _835 * _839;
    float _848 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _849 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _867 = fma(_762, cbSceneParam._m0[5u].z, fma(_761, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _760));
    float _870 = fma(_762, cbSceneParam._m0[6u].z, fma(_761, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _760));
    float _873 = fma(_762, cbSceneParam._m0[7u].z, fma(_761, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _760));
    uint _886 = uint(roundEven(NORMAL.w)) * 13u;
    uint _887 = _886 + 9u;
    uint _888 = _887 + uint(cbMatDynParam._m0[0u].w);
    float _894 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0)))) * cbInstanceData._m0[_888].x;
    float _895 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0)))) * cbInstanceData._m0[_888].y;
    float _896 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0)))) * cbInstanceData._m0[_888].z;
    float _4067 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
    float _897 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
    float _4078 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
    float _898 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
    float _4089 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
    float _899 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
    float _900 = 1.0 - _767;
    float _901 = _897 * _900;
    float _902 = _898 * _900;
    float _903 = _899 * _900;
    float _908 = (_897 + (-0.039999999105930328369140625)) * _767;
    float _909 = (_898 + (-0.039999999105930328369140625)) * _767;
    float _910 = (_899 + (-0.039999999105930328369140625)) * _767;
    float _911 = _908 + 0.039999999105930328369140625;
    float _913 = _909 + 0.039999999105930328369140625;
    float _914 = _910 + 0.039999999105930328369140625;
    vec4 _923 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _848, cbSceneParam._m0[86u].y * _849));
    float _926 = _923.x * TEXCOORD_3.w;
    float _927 = dot(vec3(_760, _761, _762), vec3(_840, _841, _842));
    float _930 = _927 * 2.0;
    float _934 = (_930 * _760) - _840;
    float _935 = (_930 * _761) - _841;
    float _936 = (_930 * _762) - _842;
    float _940 = abs(dot(vec3(_840, _841, _842), vec3(_760, _761, _762)));
    float _4100 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
    float _942 = sqrt(_763);
    float _953 = exp2((_942 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_942 * 3.0));
    float _959 = (1.0 - _953) * ((_942 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _960 = _953 * _942;
    float _988 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _992 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _996 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1297;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1022 = fma(_996, cbModelParam._m0[26u].z, fma(_992, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _988));
        float _1026 = fma(_996, cbModelParam._m0[27u].z, fma(_992, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _988));
        float _1030 = fma(_996, cbModelParam._m0[28u].z, fma(_992, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _988));
        float _1055 = _988 + _760;
        float _1056 = _992 + _761;
        float _1057 = _996 + _762;
        float _1067 = fma(_1057, cbModelParam._m0[26u].z, fma(_1056, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1055)) - _1022;
        float _1068 = fma(_1057, cbModelParam._m0[27u].z, fma(_1056, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1055)) - _1026;
        float _1069 = fma(_1057, cbModelParam._m0[28u].z, fma(_1056, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1055)) - _1030;
        float _1073 = inversesqrt(dot(vec3(_1067, _1068, _1069), vec3(_1067, _1068, _1069)));
        float _1086 = ((_1073 * _1067) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1022 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1087 = ((_1073 * _1068) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1026 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1088 = ((_1073 * _1069) / cbModelParam._m0[34u].z) + ((((((_1030 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1091 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1086, _1087, _1088), 0.0);
        vec4 _1098 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1086, _1087, _1088), 0.0);
        vec4 _1105 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1086, _1087, _1088), 0.0);
        vec4 _1112 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1086, _1087, _1088), 0.0);
        float _1125 = exp2((_1091.w + (-0.5)) * 20.0) * 2.0;
        float _1126 = _1125 * (_1091.x + (-0.5));
        float _1127 = _1125 * (_1091.y + (-0.5));
        float _1128 = _1125 * (_1091.z + (-0.5));
        float _1135 = exp2((_1098.w + (-0.5)) * 20.0) * 2.0;
        float _1136 = _1135 * (_1098.x + (-0.5));
        float _1137 = _1135 * (_1098.y + (-0.5));
        float _1138 = _1135 * (_1098.z + (-0.5));
        float _1145 = exp2((_1105.w + (-0.5)) * 20.0) * 2.0;
        float _1146 = _1145 * (_1105.x + (-0.5));
        float _1147 = _1145 * (_1105.y + (-0.5));
        float _1148 = _1145 * (_1105.z + (-0.5));
        float _1155 = exp2((_1112.w + (-0.5)) * 20.0) * 2.0;
        float _1156 = _1155 * (_1112.x + (-0.5));
        float _1157 = _1155 * (_1112.y + (-0.5));
        float _1158 = _1155 * (_1112.z + (-0.5));
        float _1159 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1160 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1161 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1162 = _1126 * 0.5;
        float _1163 = _1136 * 0.5;
        float _1164 = _1146 * 0.5;
        float _1165 = dot(vec3(_1162, _1163, _1164), vec3(_1162, _1163, _1164));
        float _1170 = (_1165 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1165);
        float _1179 = (dot(vec3(_760, _761, _762), vec3(_1170 * _1162, _1170 * _1163, _1170 * _1164)) + 1.0) * 0.5;
        float _4126 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1189 = sqrt(((_1163 * _1163) + (_1162 * _1162)) + (_1164 * _1164)) / (_1159 + 9.9999997473787516355514526367188e-06);
        float _4137 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1190 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
        float _1191 = _1190 * 2.0;
        float _1195 = (1.0 - _1190) / (_1190 + 1.0);
        float _4148 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1196 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
        float _1205 = ((((1.0 - _1196) * (_1191 + 2.0)) * exp2(log2(isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0))) * (_1191 + 1.0))) + _1196) * _1159;
        float _1206 = _1127 * 0.5;
        float _1207 = _1137 * 0.5;
        float _1208 = _1147 * 0.5;
        float _1209 = dot(vec3(_1206, _1207, _1208), vec3(_1206, _1207, _1208));
        float _1214 = (_1209 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1209);
        float _1222 = (dot(vec3(_760, _761, _762), vec3(_1214 * _1206, _1214 * _1207, _1214 * _1208)) + 1.0) * 0.5;
        float _4159 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1231 = sqrt(((_1207 * _1207) + (_1206 * _1206)) + (_1208 * _1208)) / (_1160 + 9.9999997473787516355514526367188e-06);
        float _4170 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1232 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
        float _1233 = _1232 * 2.0;
        float _1237 = (1.0 - _1232) / (_1232 + 1.0);
        float _4181 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1238 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
        float _1247 = ((((1.0 - _1238) * (_1233 + 2.0)) * exp2(log2(isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0))) * (_1233 + 1.0))) + _1238) * _1160;
        float _1248 = _1128 * 0.5;
        float _1249 = _1138 * 0.5;
        float _1250 = _1148 * 0.5;
        float _1251 = dot(vec3(_1248, _1249, _1250), vec3(_1248, _1249, _1250));
        float _1256 = (_1251 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1251);
        float _1264 = (dot(vec3(_760, _761, _762), vec3(_1256 * _1248, _1256 * _1249, _1256 * _1250)) + 1.0) * 0.5;
        float _4192 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1273 = sqrt(((_1249 * _1249) + (_1248 * _1248)) + (_1250 * _1250)) / (_1161 + 9.9999997473787516355514526367188e-06);
        float _4203 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1274 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
        float _1275 = _1274 * 2.0;
        float _1279 = (1.0 - _1274) / (_1274 + 1.0);
        float _4214 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1280 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
        float _1289 = ((((1.0 - _1280) * (_1275 + 2.0)) * exp2(log2(isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0))) * (_1275 + 1.0))) + _1280) * _1161;
        _1297 = _1128;
        _1299 = _1127;
        _1300 = _1126;
        _1301 = _1138;
        _1302 = _1137;
        _1303 = _1136;
        _1304 = _1148;
        _1305 = _1147;
        _1306 = _1146;
        _1307 = _1161;
        _1308 = _1160;
        _1309 = _1159;
        _1310 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0)));
        _1311 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0)));
        _1312 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0)));
    }
    else
    {
        _1297 = _1298;
        _1299 = _1298;
        _1300 = _1298;
        _1301 = _1298;
        _1302 = _1298;
        _1303 = _1298;
        _1304 = _1298;
        _1305 = _1298;
        _1306 = _1298;
        _1307 = _1298;
        _1308 = _1298;
        _1309 = _1298;
        _1310 = 0.0;
        _1311 = 0.0;
        _1312 = 0.0;
    }
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1338 = fma(_996, cbModelParam._m0[30u].z, fma(_992, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _988));
        float _1342 = fma(_996, cbModelParam._m0[31u].z, fma(_992, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _988));
        float _1346 = fma(_996, cbModelParam._m0[32u].z, fma(_992, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _988));
        float _1369 = _988 + _760;
        float _1370 = _992 + _761;
        float _1371 = _996 + _762;
        float _1381 = fma(_1371, cbModelParam._m0[30u].z, fma(_1370, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1369)) - _1338;
        float _1382 = fma(_1371, cbModelParam._m0[31u].z, fma(_1370, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1369)) - _1342;
        float _1383 = fma(_1371, cbModelParam._m0[32u].z, fma(_1370, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1369)) - _1346;
        float _1387 = inversesqrt(dot(vec3(_1381, _1382, _1383), vec3(_1381, _1382, _1383)));
        float _1400 = ((_1387 * _1381) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1338 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1401 = ((_1387 * _1382) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1342 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1402 = ((_1387 * _1383) / cbModelParam._m0[35u].z) + ((((((_1346 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1404 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1400, _1401, _1402), 0.0);
        vec4 _1411 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1400, _1401, _1402), 0.0);
        vec4 _1418 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1400, _1401, _1402), 0.0);
        vec4 _1425 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1400, _1401, _1402), 0.0);
        float _1437 = exp2((_1404.w + (-0.5)) * 20.0) * 2.0;
        float _1438 = _1437 * (_1404.x + (-0.5));
        float _1439 = _1437 * (_1404.y + (-0.5));
        float _1440 = _1437 * (_1404.z + (-0.5));
        float _1447 = exp2((_1411.w + (-0.5)) * 20.0) * 2.0;
        float _1448 = _1447 * (_1411.x + (-0.5));
        float _1449 = _1447 * (_1411.y + (-0.5));
        float _1450 = _1447 * (_1411.z + (-0.5));
        float _1457 = exp2((_1418.w + (-0.5)) * 20.0) * 2.0;
        float _1458 = _1457 * (_1418.x + (-0.5));
        float _1459 = _1457 * (_1418.y + (-0.5));
        float _1460 = _1457 * (_1418.z + (-0.5));
        float _1467 = exp2((_1425.w + (-0.5)) * 20.0) * 2.0;
        float _1468 = _1467 * (_1425.x + (-0.5));
        float _1469 = _1467 * (_1425.y + (-0.5));
        float _1470 = _1467 * (_1425.z + (-0.5));
        float _1471 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1472 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1473 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1474 = _1438 * 0.5;
        float _1475 = _1448 * 0.5;
        float _1476 = _1458 * 0.5;
        float _1477 = dot(vec3(_1474, _1475, _1476), vec3(_1474, _1475, _1476));
        float _1482 = (_1477 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1477);
        float _1490 = (dot(vec3(_760, _761, _762), vec3(_1482 * _1474, _1482 * _1475, _1482 * _1476)) + 1.0) * 0.5;
        float _4255 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1499 = sqrt(((_1475 * _1475) + (_1474 * _1474)) + (_1476 * _1476)) / (_1471 + 9.9999997473787516355514526367188e-06);
        float _4266 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1500 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
        float _1501 = _1500 * 2.0;
        float _1505 = (1.0 - _1500) / (_1500 + 1.0);
        float _4277 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1506 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
        float _1515 = ((((1.0 - _1506) * (_1501 + 2.0)) * exp2(log2(isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0))) * (_1501 + 1.0))) + _1506) * _1471;
        float _1516 = _1439 * 0.5;
        float _1517 = _1449 * 0.5;
        float _1518 = _1459 * 0.5;
        float _1519 = dot(vec3(_1516, _1517, _1518), vec3(_1516, _1517, _1518));
        float _1524 = (_1519 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1519);
        float _1532 = (dot(vec3(_760, _761, _762), vec3(_1524 * _1516, _1524 * _1517, _1524 * _1518)) + 1.0) * 0.5;
        float _4288 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1541 = sqrt(((_1517 * _1517) + (_1516 * _1516)) + (_1518 * _1518)) / (_1472 + 9.9999997473787516355514526367188e-06);
        float _4299 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1542 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
        float _1543 = _1542 * 2.0;
        float _1547 = (1.0 - _1542) / (_1542 + 1.0);
        float _4310 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1548 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
        float _1557 = ((((1.0 - _1548) * (_1543 + 2.0)) * exp2(log2(isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0))) * (_1543 + 1.0))) + _1548) * _1472;
        float _1558 = _1440 * 0.5;
        float _1559 = _1450 * 0.5;
        float _1560 = _1460 * 0.5;
        float _1561 = dot(vec3(_1558, _1559, _1560), vec3(_1558, _1559, _1560));
        float _1566 = (_1561 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1561);
        float _1574 = (dot(vec3(_760, _761, _762), vec3(_1566 * _1558, _1566 * _1559, _1566 * _1560)) + 1.0) * 0.5;
        float _4321 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1583 = sqrt(((_1559 * _1559) + (_1558 * _1558)) + (_1560 * _1560)) / (_1473 + 9.9999997473787516355514526367188e-06);
        float _4332 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1584 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
        float _1585 = _1584 * 2.0;
        float _1589 = (1.0 - _1584) / (_1584 + 1.0);
        float _4343 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
        float _1590 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
        float _1599 = ((((1.0 - _1590) * (_1585 + 2.0)) * exp2(log2(isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0))) * (_1585 + 1.0))) + _1590) * _1473;
        _1607 = _1440;
        _1608 = _1439;
        _1609 = _1438;
        _1610 = _1450;
        _1611 = _1449;
        _1612 = _1448;
        _1613 = _1460;
        _1614 = _1459;
        _1615 = _1458;
        _1616 = _1473;
        _1617 = _1472;
        _1618 = _1471;
        _1619 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0)));
        _1620 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0)));
        _1621 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0)));
    }
    else
    {
        _1607 = _1298;
        _1608 = _1298;
        _1609 = _1298;
        _1610 = _1298;
        _1611 = _1298;
        _1612 = _1298;
        _1613 = _1298;
        _1614 = _1298;
        _1615 = _1298;
        _1616 = _1298;
        _1617 = _1298;
        _1618 = _1298;
        _1619 = 0.0;
        _1620 = 0.0;
        _1621 = 0.0;
    }
    float _1631 = (cbModelParam._m0[1u].x * (_1619 - _1310)) + _1310;
    float _1632 = (cbModelParam._m0[1u].x * (_1620 - _1311)) + _1311;
    float _1633 = (cbModelParam._m0[1u].x * (_1621 - _1312)) + _1312;
    float _1654 = fma(_1633, cbSceneParam._m0[89u].z, fma(_1632, cbSceneParam._m0[89u].y, _1631 * cbSceneParam._m0[89u].x));
    float _1657 = fma(_1633, cbSceneParam._m0[90u].z, fma(_1632, cbSceneParam._m0[90u].y, _1631 * cbSceneParam._m0[90u].x));
    float _1660 = fma(_1633, cbSceneParam._m0[91u].z, fma(_1632, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1631));
    float _1675 = _934 * 0.5;
    float _1676 = _935 * 0.5;
    float _1677 = _936 * 0.5;
    float _1678 = dot(vec4(_1675, _1676, _1677, 1.0), vec4(_1609, _1612, _1615, _1618));
    float _1681 = dot(vec4(_1675, _1676, _1677, 1.0), vec4(_1608, _1611, _1614, _1617));
    float _1684 = dot(vec4(_1675, _1676, _1677, 1.0), vec4(_1607, _1610, _1613, _1616));
    float _1718;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1691 = dot(vec4(_1675, _1676, _1677, 1.0), vec4(_1297, _1301, _1304, _1307));
        float _1695 = dot(vec4(_1675, _1676, _1677, 1.0), vec4(_1299, _1302, _1305, _1308));
        float _1699 = dot(vec4(_1675, _1676, _1677, 1.0), vec4(_1300, _1303, _1306, _1309));
        float _1706 = dot(vec4(cbModelParam._m0[39u]), vec4(_1675, _1676, _1677, 1.0));
        _1718 = dot(vec3(isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0)), isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0)), isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1706) ? 0.0 : (isnan(0.0) ? _1706 : max(0.0, _1706))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1718 = 1.0;
    }
    float _1729;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1720 = dot(vec4(cbModelParam._m0[40u]), vec4(_1675, _1676, _1677, 1.0));
        _1729 = dot(vec3(isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0)), isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0)), isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1720) ? 0.0 : (isnan(0.0) ? _1720 : max(0.0, _1720))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1729 = 1.0;
    }
    float _1733 = (_1729 * cbModelParam._m0[1u].x) + (_1718 * (1.0 - cbModelParam._m0[1u].x));
    float _1743 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _763);
    float _1744 = isnan(_1743) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1743 : min(cbModelParam._m0[25u].z, _1743));
    float _1824;
    float _1826;
    float _1828;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1791 = fma(_996, cbModelParam._m0[13u].z, fma(_992, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _988)) + cbModelParam._m0[13u].w;
        float _1795 = fma(_996, cbModelParam._m0[14u].z, fma(_992, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _988)) + cbModelParam._m0[14u].w;
        float _1799 = fma(_996, cbModelParam._m0[15u].z, fma(_992, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _988)) + cbModelParam._m0[15u].w;
        float _1802 = fma(_936, cbModelParam._m0[13u].z, fma(_935, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _934));
        float _1805 = fma(_936, cbModelParam._m0[14u].z, fma(_935, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _934));
        float _1808 = fma(_936, cbModelParam._m0[15u].z, fma(_935, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _934));
        float _1836;
        if (_1802 > 0.0)
        {
            _1836 = abs((1.0 - _1791) / _1802);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1802 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1791 + 1.0) / _1802);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1836 = frontier_phi_14_12_ladder;
        }
        float _2007;
        if (_1805 > 0.0)
        {
            _2007 = abs((1.0 - _1795) / _1805);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1805 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1795 + 1.0) / _1805);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2007 = frontier_phi_23_19_ladder;
        }
        float _2302;
        if (_1808 > 0.0)
        {
            _2302 = abs((1.0 - _1799) / _1808);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1808 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1799 + 1.0) / _1808);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2302 = frontier_phi_35_30_ladder;
        }
        float _2304 = isnan(_2007) ? _1836 : (isnan(_1836) ? _2007 : min(_1836, _2007));
        float _2305 = isnan(_2302) ? _2304 : (isnan(_2304) ? _2302 : min(_2304, _2302));
        float _2309 = (_2305 * _1802) + _1791;
        float _2310 = (_2305 * _1805) + _1795;
        float _2311 = (_2305 * _1808) + _1799;
        float _2312 = _2305 * 9.9999997473787516355514526367188e-05;
        float _2314 = (-1.0) - _2312;
        float _2316 = _2312 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2311 > _2316) || ((_2311 < _2314) || ((_2310 > _2316) || ((_2310 < _2314) || ((_2309 < _2314) || (_2309 > _2316))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2456 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2311, cbModelParam._m0[9u].z, fma(_2310, cbModelParam._m0[9u].y, _2309 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2311, cbModelParam._m0[10u].z, fma(_2310, cbModelParam._m0[10u].y, _2309 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2311, cbModelParam._m0[11u].z, fma(_2310, cbModelParam._m0[11u].y, _2309 * cbModelParam._m0[11u].x))), _1744);
            frontier_phi_13_35_ladder = _2456.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2456.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2456.x * cbModelParam._m0[1u].y;
        }
        _1824 = frontier_phi_13_35_ladder_2;
        _1826 = frontier_phi_13_35_ladder_1;
        _1828 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1812 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_934, _935, _936), _1744);
        _1824 = _1812.x * cbModelParam._m0[1u].y;
        _1826 = _1812.y * cbModelParam._m0[1u].y;
        _1828 = _1812.z * cbModelParam._m0[1u].y;
    }
    float _1832 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _763);
    float _1833 = isnan(_1832) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1832 : min(cbModelParam._m0[25u].w, _1832));
    float _1922;
    float _1924;
    float _1926;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1886 = fma(_996, cbModelParam._m0[21u].z, fma(_992, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _988)) + cbModelParam._m0[21u].w;
        float _1890 = fma(_996, cbModelParam._m0[22u].z, fma(_992, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _988)) + cbModelParam._m0[22u].w;
        float _1894 = fma(_996, cbModelParam._m0[23u].z, fma(_992, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _988)) + cbModelParam._m0[23u].w;
        float _1897 = fma(_936, cbModelParam._m0[21u].z, fma(_935, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _934));
        float _1900 = fma(_936, cbModelParam._m0[22u].z, fma(_935, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _934));
        float _1903 = fma(_936, cbModelParam._m0[23u].z, fma(_935, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _934));
        float _2012;
        if (_1897 > 0.0)
        {
            _2012 = abs((1.0 - _1886) / _1897);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1897 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1886 + 1.0) / _1897);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2012 = frontier_phi_25_21_ladder;
        }
        float _2329;
        if (_1900 > 0.0)
        {
            _2329 = abs((1.0 - _1890) / _1900);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1900 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1890 + 1.0) / _1900);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2329 = frontier_phi_37_32_ladder;
        }
        float _2667;
        if (_1903 > 0.0)
        {
            _2667 = abs((1.0 - _1894) / _1903);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1903 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1894 + 1.0) / _1903);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2667 = frontier_phi_47_44_ladder;
        }
        float _2669 = isnan(_2329) ? _2012 : (isnan(_2012) ? _2329 : min(_2012, _2329));
        float _2670 = isnan(_2667) ? _2669 : (isnan(_2669) ? _2667 : min(_2669, _2667));
        float _2674 = (_2670 * _1897) + _1886;
        float _2675 = (_2670 * _1900) + _1890;
        float _2676 = (_2670 * _1903) + _1894;
        float _2677 = _2670 * 9.9999997473787516355514526367188e-05;
        float _2678 = (-1.0) - _2677;
        float _2680 = _2677 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2676 > _2680) || ((_2676 < _2678) || ((_2675 > _2680) || ((_2675 < _2678) || ((_2674 < _2678) || (_2674 > _2680))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2798 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2676, cbModelParam._m0[17u].z, fma(_2675, cbModelParam._m0[17u].y, _2674 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2676, cbModelParam._m0[18u].z, fma(_2675, cbModelParam._m0[18u].y, _2674 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2676, cbModelParam._m0[19u].z, fma(_2675, cbModelParam._m0[19u].y, _2674 * cbModelParam._m0[19u].x))), _1833);
            frontier_phi_22_47_ladder = _2798.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2798.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2798.x * cbModelParam._m0[1u].z;
        }
        _1922 = frontier_phi_22_47_ladder_2;
        _1924 = frontier_phi_22_47_ladder_1;
        _1926 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1906 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_934, _935, _936), _1833);
        _1922 = _1906.x * cbModelParam._m0[1u].z;
        _1924 = _1906.y * cbModelParam._m0[1u].z;
        _1926 = _1906.z * cbModelParam._m0[1u].z;
    }
    float _1939 = (((_959 * _911) + _960) * _926) * ((cbModelParam._m0[1u].w * (_1922 - _1824)) + _1824);
    float _1941 = (((_959 * _913) + _960) * _926) * ((cbModelParam._m0[1u].w * (_1924 - _1826)) + _1826);
    float _1943 = (((_959 * _914) + _960) * _926) * ((cbModelParam._m0[1u].w * (_1926 - _1828)) + _1828);
    float _1946 = fma(_1943, cbSceneParam._m0[89u].z, fma(_1941, cbSceneParam._m0[89u].y, _1939 * cbSceneParam._m0[89u].x));
    float _1949 = fma(_1943, cbSceneParam._m0[90u].z, fma(_1941, cbSceneParam._m0[90u].y, _1939 * cbSceneParam._m0[90u].x));
    float _1952 = fma(_1943, cbSceneParam._m0[91u].z, fma(_1941, cbSceneParam._m0[91u].y, _1939 * cbSceneParam._m0[91u].x));
    float _1986 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1990 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1994 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1998 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1999 = _1986 / _1998;
    float _2000 = _1990 / _1998;
    float _2001 = _1994 / _1998;
    float _2148;
    float _2149;
    float _2150;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2028 = ((uint(_2001 > cbSceneParam._m0[59u].y) + uint(_2001 > cbSceneParam._m0[59u].x)) + uint(_2001 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2029 = _2028 + 43u;
        uint _2037 = _2028 + 44u;
        uint _2045 = _2028 + 45u;
        uint _2053 = _2028 + 46u;
        float _2064 = fma(_1998, cbSceneParam._m0[_2029].w, fma(_1994, cbSceneParam._m0[_2029].z, fma(_1990, cbSceneParam._m0[_2029].y, _1986 * cbSceneParam._m0[_2029].x)));
        float _2068 = fma(_1998, cbSceneParam._m0[_2037].w, fma(_1994, cbSceneParam._m0[_2037].z, fma(_1990, cbSceneParam._m0[_2037].y, _1986 * cbSceneParam._m0[_2037].x)));
        float _2076 = fma(_1998, cbSceneParam._m0[_2053].w, fma(_1994, cbSceneParam._m0[_2053].z, fma(_1990, cbSceneParam._m0[_2053].y, _1986 * cbSceneParam._m0[_2053].x)));
        float _2081 = cbSceneParam._m0[33u].z * _2076;
        float _2083 = cbSceneParam._m0[33u].w * _2076;
        float _2086 = fma(_1998, cbSceneParam._m0[_2045].w, fma(_1994, cbSceneParam._m0[_2045].z, fma(_1990, cbSceneParam._m0[_2045].y, _1986 * cbSceneParam._m0[_2045].x))) / _2076;
        float _2134 = (cbSceneParam._m0[33u].x - sqrt(((_2000 * _2000) + (_1999 * _1999)) + (_2001 * _2001))) * cbSceneParam._m0[33u].y;
        float _4469 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
        float _2141 = (isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2081 + _2064) / _2076, (_2083 + _2068) / _2076), _2086), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2083 + _2064) / _2076, (_2068 - _2081) / _2076), _2086), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2064 - _2081) / _2076, (_2068 - _2083) / _2076), _2086), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2064 - _2083) / _2076, (_2081 + _2068) / _2076), _2086), 0.0)).x), vec4(0.25)));
        _2148 = 1.0 - (_2141 * cbSceneParam._m0[34u].x);
        _2149 = 1.0 - (_2141 * cbSceneParam._m0[34u].y);
        _2150 = 1.0 - (_2141 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2148 = 1.0;
        _2149 = 1.0;
        _2150 = 1.0;
    }
    float _2214;
    float _2216;
    float _2218;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2202 = fma(_1998, cbSceneParam._m0[63u].w, fma(_1994, cbSceneParam._m0[63u].z, fma(_1990, cbSceneParam._m0[63u].y, _1986 * cbSceneParam._m0[63u].x)));
        float _2203 = fma(_1998, cbSceneParam._m0[60u].w, fma(_1994, cbSceneParam._m0[60u].z, fma(_1990, cbSceneParam._m0[60u].y, _1986 * cbSceneParam._m0[60u].x))) / _2202;
        float _2204 = fma(_1998, cbSceneParam._m0[61u].w, fma(_1994, cbSceneParam._m0[61u].z, fma(_1990, cbSceneParam._m0[61u].y, _1986 * cbSceneParam._m0[61u].x))) / _2202;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2203 >= cbSceneParam._m0[64u].x) && (_2204 >= cbSceneParam._m0[64u].y)) && (_2203 <= cbSceneParam._m0[64u].z)) && (_2204 <= cbSceneParam._m0[64u].w))
        {
            float _2342 = fma(_1998, cbSceneParam._m0[62u].w, fma(_1994, cbSceneParam._m0[62u].z, fma(_1990, cbSceneParam._m0[62u].y, _1986 * cbSceneParam._m0[62u].x))) / _2202;
            float _2346 = isnan(cbSceneParam._m0[41u].w) ? _2342 : (isnan(_2342) ? cbSceneParam._m0[41u].w : max(_2342, cbSceneParam._m0[41u].w));
            float _2389 = (cbSceneParam._m0[33u].x - sqrt(((_2000 * _2000) + (_1999 * _1999)) + (_2001 * _2001))) * cbSceneParam._m0[33u].y;
            float _4485 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
            float _2396 = (isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2203, cbSceneParam._m0[33u].w + _2204), _2346), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2203, _2204 - cbSceneParam._m0[33u].z), _2346), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2203 - cbSceneParam._m0[33u].z, _2204 - cbSceneParam._m0[33u].w), _2346), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2203 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2204), _2346), 0.0)).x), vec4(0.25)));
            float _2400 = 1.0 - (_2396 * cbSceneParam._m0[34u].x);
            float _2401 = 1.0 - (_2396 * cbSceneParam._m0[34u].y);
            float _2402 = 1.0 - (_2396 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2402) ? _2150 : (isnan(_2150) ? _2402 : min(_2150, _2402));
            frontier_phi_34_33_ladder_1 = isnan(_2401) ? _2149 : (isnan(_2149) ? _2401 : min(_2149, _2401));
            frontier_phi_34_33_ladder_2 = isnan(_2400) ? _2148 : (isnan(_2148) ? _2400 : min(_2148, _2400));
        }
        else
        {
            frontier_phi_34_33_ladder = _2150;
            frontier_phi_34_33_ladder_1 = _2149;
            frontier_phi_34_33_ladder_2 = _2148;
        }
        _2214 = frontier_phi_34_33_ladder_2;
        _2216 = frontier_phi_34_33_ladder_1;
        _2218 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2214 = _2148;
        _2216 = _2149;
        _2218 = _2150;
    }
    uvec4 _2223 = floatBitsToUint(cbInstanceData._m0[_886 + 5u]);
    uint _2225 = _2223.x * 14u;
    uint _2226 = _2225 + 13u;
    float _2233 = _926 + (-1.0);
    float _2238 = (cbLight._m0[_2226].x * _2233) + 1.0;
    float _2239 = (cbLight._m0[_2226].y * _2233) + 1.0;
    float _2240 = (cbLight._m0[_2226].z * _2233) + 1.0;
    float _2241 = (cbLight._m0[_2226].w * _2233) + 1.0;
    uint _2242 = _2225 + 5u;
    float _2248 = isnan(1.0) ? _2239 : (isnan(_2239) ? 1.0 : min(_2239, 1.0));
    uint _2252 = _2225 + 4u;
    float _2261 = isnan(1.0) ? _2238 : (isnan(_2238) ? 1.0 : min(_2238, 1.0));
    uint _2265 = _2225 | 1u;
    float _2276 = dot(vec3(cbLight._m0[_2225].xyz), vec3(_760, _761, _762));
    float _2279 = dot(vec3(cbLight._m0[_2265].xyz), vec3(_760, _761, _762));
    float _4521 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
    float _4532 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
    float _2284 = (isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0))) * 0.3183098733425140380859375;
    float _2286 = (isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0))) * 0.3183098733425140380859375;
    float _2293 = ((cbLight._m0[_2242].x * _2248) * _2286) + (((cbLight._m0[_2252].x * _2214) * _2261) * _2284);
    float _2294 = ((_2248 * cbLight._m0[_2242].y) * _2286) + (((cbLight._m0[_2252].y * _2216) * _2261) * _2284);
    float _2295 = ((_2248 * cbLight._m0[_2242].z) * _2286) + (((cbLight._m0[_2252].z * _2218) * _2261) * _2284);
    uvec4 _2299 = floatBitsToUint(cbLight._m0[_2225 + 12u]);
    bool _2301 = _2299.x == 0u;
    float _2403;
    float _2405;
    float _2407;
    if (_2301)
    {
        _2403 = _2293;
        _2405 = _2294;
        _2407 = _2295;
    }
    else
    {
        uint _2411 = _2225 + 6u;
        float _2427 = (dot(vec3(cbLight._m0[_2225 + 2u].xyz), vec3(_760, _761, _762)) * 0.5) + 0.5;
        float _2428 = _2427 * _2427;
        float _4543 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
        float _2429 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
        float _2430 = isnan(1.0) ? _2240 : (isnan(_2240) ? 1.0 : min(_2240, 1.0));
        _2403 = (((cbLight._m0[_2411].x * 0.3183098733425140380859375) * _2429) * _2430) + _2293;
        _2405 = (((cbLight._m0[_2411].y * 0.3183098733425140380859375) * _2429) * _2430) + _2294;
        _2407 = (((cbLight._m0[_2411].z * 0.3183098733425140380859375) * _2429) * _2430) + _2295;
    }
    bool _2410 = _2299.y == 0u;
    float _2465;
    float _2467;
    float _2469;
    if (_2410)
    {
        _2465 = _2403;
        _2467 = _2405;
        _2469 = _2407;
    }
    else
    {
        uint _2638 = _2225 + 7u;
        float _2654 = (dot(vec3(cbLight._m0[_2225 + 3u].xyz), vec3(_760, _761, _762)) * 0.5) + 0.5;
        float _2655 = _2654 * _2654;
        float _4559 = isnan(0.0) ? _2655 : (isnan(_2655) ? 0.0 : max(_2655, 0.0));
        float _2656 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
        float _2657 = isnan(1.0) ? _2241 : (isnan(_2241) ? 1.0 : min(_2241, 1.0));
        _2465 = (((cbLight._m0[_2638].x * 0.3183098733425140380859375) * _2656) * _2657) + _2403;
        _2467 = (((cbLight._m0[_2638].y * 0.3183098733425140380859375) * _2656) * _2657) + _2405;
        _2469 = (((cbLight._m0[_2638].z * 0.3183098733425140380859375) * _2656) * _2657) + _2407;
    }
    uint _2472 = _2225 + 8u;
    float _2485 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2225].w)) * _763) * 0.949999988079071044921875);
    float _2486 = _2485 * _2485;
    float _2487 = cbLight._m0[_2225].x + _840;
    float _2488 = cbLight._m0[_2225].y + _841;
    float _2489 = cbLight._m0[_2225].z + _842;
    float _2493 = inversesqrt(dot(vec3(_2487, _2488, _2489), vec3(_2487, _2488, _2489)));
    float _2494 = _2493 * _2487;
    float _2495 = _2493 * _2488;
    float _2496 = _2493 * _2489;
    float _2497 = dot(vec3(_760, _761, _762), vec3(cbLight._m0[_2225].xyz));
    float _4575 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
    float _2500 = isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0));
    float _4586 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
    float _2501 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
    float _2502 = dot(vec3(_760, _761, _762), vec3(_2494, _2495, _2496));
    float _4597 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
    float _2505 = isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0));
    float _2506 = dot(vec3(cbLight._m0[_2225].xyz), vec3(_2494, _2495, _2496));
    float _4608 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
    float _2510 = _2486 * _2486;
    float _2514 = ((_2505 * _2505) * (_2510 + (-1.0))) + 1.0;
    float _2522 = exp2(log2(1.0 - (isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0)))) * 5.0);
    float _2523 = 0.959999978542327880859375 - _908;
    float _2525 = 0.959999978542327880859375 - _909;
    float _2526 = 0.959999978542327880859375 - _910;
    float _2533 = 1.0 - _2486;
    float _2544 = (0.5 / (((_2501 * ((_2500 * _2533) + _2486)) + 9.9999999392252902907785028219223e-09) + (((_2501 * _2533) + _2486) * _2500))) * _2500;
    float _4619 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
    float _2546 = (isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0))) * (_2510 / ((_2514 * _2514) * 3.141590118408203125));
    uint _2560 = _2225 + 9u;
    float _2571 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2265].w)) * _763) * 0.949999988079071044921875);
    float _2572 = _2571 * _2571;
    float _2573 = cbLight._m0[_2265].x + _840;
    float _2574 = cbLight._m0[_2265].y + _841;
    float _2575 = cbLight._m0[_2265].z + _842;
    float _2579 = inversesqrt(dot(vec3(_2573, _2574, _2575), vec3(_2573, _2574, _2575)));
    float _2580 = _2579 * _2573;
    float _2581 = _2579 * _2574;
    float _2582 = _2579 * _2575;
    float _2583 = dot(vec3(_760, _761, _762), vec3(cbLight._m0[_2265].xyz));
    float _4630 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0));
    float _2586 = isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0));
    float _2587 = dot(vec3(_760, _761, _762), vec3(_2580, _2581, _2582));
    float _4641 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
    float _2590 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
    float _2591 = dot(vec3(cbLight._m0[_2265].xyz), vec3(_2580, _2581, _2582));
    float _4652 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
    float _2595 = _2572 * _2572;
    float _2599 = ((_2590 * _2590) * (_2595 + (-1.0))) + 1.0;
    float _2606 = exp2(log2(1.0 - (isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0)))) * 5.0);
    float _2613 = 1.0 - _2572;
    float _2623 = (0.5 / (((_2501 * ((_2586 * _2613) + _2572)) + 9.9999999392252902907785028219223e-09) + (((_2501 * _2613) + _2572) * _2586))) * _2586;
    float _4663 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0));
    float _2625 = (isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0))) * (_2595 / ((_2599 * _2599) * 3.141590118408203125));
    float _2635 = (((((_2606 * _2523) + _911) * cbLight._m0[_2560].x) * _2625) * _2248) + ((((cbLight._m0[_2472].x * _2214) * ((_2522 * _2523) + _911)) * _2546) * _2261);
    float _2636 = (((((_2606 * _2525) + _913) * cbLight._m0[_2560].y) * _2625) * _2248) + ((((cbLight._m0[_2472].y * _2216) * ((_2522 * _2525) + _913)) * _2546) * _2261);
    float _2637 = (((((_2606 * _2526) + _914) * cbLight._m0[_2560].z) * _2625) * _2248) + ((((cbLight._m0[_2472].z * _2218) * ((_2522 * _2526) + _914)) * _2546) * _2261);
    float _2693;
    float _2695;
    float _2697;
    if (_2301)
    {
        _2693 = _2635;
        _2695 = _2636;
        _2697 = _2637;
    }
    else
    {
        uint _2699 = _2225 + 2u;
        uint _2703 = _2225 + 10u;
        float _2717 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2699].w)) * _763) * 0.949999988079071044921875);
        float _2718 = _2717 * _2717;
        float _2719 = cbLight._m0[_2699].x + _840;
        float _2720 = cbLight._m0[_2699].y + _841;
        float _2721 = cbLight._m0[_2699].z + _842;
        float _2725 = inversesqrt(dot(vec3(_2719, _2720, _2721), vec3(_2719, _2720, _2721)));
        float _2726 = _2725 * _2719;
        float _2727 = _2725 * _2720;
        float _2728 = _2725 * _2721;
        float _2729 = dot(vec3(_760, _761, _762), vec3(cbLight._m0[_2699].xyz));
        float _4674 = isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0));
        float _2732 = isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0));
        float _2733 = dot(vec3(_760, _761, _762), vec3(_2726, _2727, _2728));
        float _4685 = isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0));
        float _2736 = isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0));
        float _2737 = dot(vec3(cbLight._m0[_2699].xyz), vec3(_2726, _2727, _2728));
        float _4696 = isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : max(_2737, 0.0));
        float _2741 = _2718 * _2718;
        float _2745 = ((_2736 * _2736) * (_2741 + (-1.0))) + 1.0;
        float _2752 = exp2(log2(1.0 - (isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0)))) * 5.0);
        float _2759 = 1.0 - _2718;
        float _2769 = (0.5 / (((_2501 * ((_2732 * _2759) + _2718)) + 9.9999999392252902907785028219223e-09) + (((_2501 * _2759) + _2718) * _2732))) * _2732;
        float _4707 = isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : max(_2769, 0.0));
        float _2771 = (isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0))) * (_2741 / ((_2745 * _2745) * 3.141590118408203125));
        float _2772 = isnan(1.0) ? _2240 : (isnan(_2240) ? 1.0 : min(_2240, 1.0));
        _2693 = (((((_2752 * _2523) + _911) * cbLight._m0[_2703].x) * _2771) * _2772) + _2635;
        _2695 = (((((_2752 * _2525) + _913) * cbLight._m0[_2703].y) * _2771) * _2772) + _2636;
        _2697 = (((((_2752 * _2526) + _914) * cbLight._m0[_2703].z) * _2771) * _2772) + _2637;
    }
    float _2803;
    float _2805;
    float _2807;
    if (_2410)
    {
        _2803 = _2693;
        _2805 = _2695;
        _2807 = _2697;
    }
    else
    {
        uint _2814 = _2225 + 3u;
        uint _2818 = _2225 + 11u;
        float _2832 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2814].w)) * _763) * 0.949999988079071044921875);
        float _2833 = _2832 * _2832;
        float _2834 = cbLight._m0[_2814].x + _840;
        float _2835 = cbLight._m0[_2814].y + _841;
        float _2836 = cbLight._m0[_2814].z + _842;
        float _2840 = inversesqrt(dot(vec3(_2834, _2835, _2836), vec3(_2834, _2835, _2836)));
        float _2841 = _2840 * _2834;
        float _2842 = _2840 * _2835;
        float _2843 = _2840 * _2836;
        float _2844 = dot(vec3(_760, _761, _762), vec3(cbLight._m0[_2814].xyz));
        float _4723 = isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : max(_2844, 0.0));
        float _2847 = isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0));
        float _2848 = dot(vec3(_760, _761, _762), vec3(_2841, _2842, _2843));
        float _4734 = isnan(0.0) ? _2848 : (isnan(_2848) ? 0.0 : max(_2848, 0.0));
        float _2851 = isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0));
        float _2852 = dot(vec3(cbLight._m0[_2814].xyz), vec3(_2841, _2842, _2843));
        float _4745 = isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : max(_2852, 0.0));
        float _2856 = _2833 * _2833;
        float _2860 = ((_2851 * _2851) * (_2856 + (-1.0))) + 1.0;
        float _2867 = exp2(log2(1.0 - (isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0)))) * 5.0);
        float _2874 = 1.0 - _2833;
        float _2884 = (0.5 / (((_2501 * ((_2847 * _2874) + _2833)) + 9.9999999392252902907785028219223e-09) + (((_2501 * _2874) + _2833) * _2847))) * _2847;
        float _4756 = isnan(0.0) ? _2884 : (isnan(_2884) ? 0.0 : max(_2884, 0.0));
        float _2886 = (isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0))) * (_2856 / ((_2860 * _2860) * 3.141590118408203125));
        float _2887 = isnan(1.0) ? _2241 : (isnan(_2241) ? 1.0 : min(_2241, 1.0));
        _2803 = (((((_2867 * _2523) + _911) * cbLight._m0[_2818].x) * _2886) * _2887) + _2693;
        _2805 = (((((_2867 * _2525) + _913) * cbLight._m0[_2818].y) * _2886) * _2887) + _2695;
        _2807 = (((((_2867 * _2526) + _914) * cbLight._m0[_2818].z) * _2886) * _2887) + _2697;
    }
    float _2953;
    float _2955;
    float _2957;
    float _2959;
    float _2961;
    float _2963;
    if (_2223.y == 0u)
    {
        uvec4 _2908 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2909 = _2908.x;
        uint _2920 = uint((float(_2908.y) * floor(float(uint(cbSceneParam._m0[85u].y * _849) / _2909))) + floor(float(uint(cbSceneParam._m0[85u].x * _848) / _2909)));
        float _2930 = (log2(_2001 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2931 = isnan(0.0) ? _2930 : (isnan(_2930) ? 0.0 : max(_2930, 0.0));
        uint _2934 = uint(isnan(14.0) ? _2931 : (isnan(_2931) ? 14.0 : min(_2931, 14.0)));
        uvec4 _2939 = texelFetch(g_lightClusterGridBuffer, int(((_2934 << 2u) + (_2920 << 6u)) >> 2u));
        uint _2940 = _2939.x;
        uint _2941 = _2908.z;
        float _3055;
        float _3057;
        float _3059;
        float _3061;
        float _3063;
        float _3065;
        if (((((1u << ((_2941 >> 4u) & 15u)) + 4294967295u) & _2940) == 0u) || ((_2941 & 240u) == 0u))
        {
            _3055 = 0.0;
            _3057 = 0.0;
            _3059 = 0.0;
            _3061 = 0.0;
            _3063 = 0.0;
            _3065 = 0.0;
        }
        else
        {
            float _3056;
            float _3058;
            float _3060;
            float _3062;
            float _3064;
            float _3066;
            float _3209 = 0.0;
            float _3210 = 0.0;
            float _3211 = 0.0;
            float _3212 = 0.0;
            float _3213 = 0.0;
            float _3214 = 0.0;
            uint _3215 = 0u;
            uint _3224;
            bool _3225;
            for (;;)
            {
                _3224 = texelFetch(g_lightClassification, int((((_2934 << 5u) + (_2920 << 9u)) + (_3215 << 2u)) >> 2u)).x;
                _3225 = _3224 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3225)
                {
                    frontier_phi_66_pred = _3214;
                    frontier_phi_66_pred_1 = _3213;
                    frontier_phi_66_pred_2 = _3212;
                    frontier_phi_66_pred_3 = _3211;
                    frontier_phi_66_pred_4 = _3210;
                    frontier_phi_66_pred_5 = _3209;
                }
                else
                {
                    float _3333;
                    float _3334;
                    float _3335;
                    float _3336;
                    float _3337;
                    float _3338;
                    uint _3339;
                    _3333 = _3209;
                    _3334 = _3210;
                    _3335 = _3211;
                    _3336 = _3212;
                    _3337 = _3213;
                    _3338 = _3214;
                    _3339 = _3224;
                    float _3265;
                    float _3266;
                    float _3267;
                    float _3268;
                    float _3269;
                    float _3270;
                    for (;;)
                    {
                        uint _3343 = uint(findLSB(_3339)) + (_3215 << 5u);
                        uint _3340 = (_3339 + 4294967295u) & _3339;
                        uint _3345 = _3343 * 48u;
                        vec4 _3359 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3345)).x, texelFetch(g_PointLightRenderingBuffer, int(_3345 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3345 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3345 + 3u)).x));
                        uint _3365 = (_3343 * 48u) + 4u;
                        vec4 _3378 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3365)).x, texelFetch(g_PointLightRenderingBuffer, int(_3365 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3365 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3365 + 3u)).x));
                        uint _3384 = (_3343 * 48u) + 8u;
                        vec3 _3395 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3384)).x, texelFetch(g_PointLightRenderingBuffer, int(_3384 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3384 + 2u)).x));
                        float _3399 = _3359.x - _1999;
                        float _3400 = _3359.y - _2000;
                        float _3401 = _3359.z - _2001;
                        float _3402 = dot(vec3(_3399, _3400, _3401), vec3(_3399, _3400, _3401));
                        float _3405 = inversesqrt(_3402);
                        float _3406 = _3405 * _3399;
                        float _3407 = _3405 * _3400;
                        float _3408 = _3405 * _3401;
                        float _3409 = dot(vec3(_867, _870, _873), vec3(_3406, _3407, _3408));
                        float _3414 = 1.0 - (_3402 * _3359.w);
                        float _4782 = isnan(0.0) ? _3414 : (isnan(_3414) ? 0.0 : max(_3414, 0.0));
                        float _3415 = isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0));
                        float _3416 = sqrt(_3402) * _3378.w;
                        float _3419 = 1.39999997615814208984375 / (_3416 + 1.39999997615814208984375);
                        float _3420 = _3419 * _3419;
                        float _3423 = ((1.0 - _3420) * _3409) + _3420;
                        float _3426 = _3416 * _3416;
                        float _3430 = ((isnan(0.0) ? _3423 : (isnan(_3423) ? 0.0 : max(_3423, 0.0))) * _3415) / ((_3426 * 0.699999988079071044921875) + 1.0);
                        float _3434 = (-0.0) - _1999;
                        float _3435 = (-0.0) - _2000;
                        float _3436 = (-0.0) - _2001;
                        float _3440 = inversesqrt(dot(vec3(_3434, _3435, _3436), vec3(_3434, _3435, _3436)));
                        float _3441 = _3440 * _3434;
                        float _3442 = _3440 * _3435;
                        float _3443 = _3440 * _3436;
                        float _3450 = exp2(log2(1.0 / ((_3426 * 3.5) + 5.0)) * 0.25);
                        float _3451 = 1.0 - _942;
                        float _3458 = sqrt(1.0 - ((1.0 - (_3451 * _3451)) * (1.0 - (_3450 * _3450))));
                        float _3459 = _3458 * _3458;
                        float _3460 = _3459 * _3459;
                        float _3461 = _3441 + _3406;
                        float _3462 = _3442 + _3407;
                        float _3463 = _3443 + _3408;
                        float _3467 = inversesqrt(dot(vec3(_3461, _3462, _3463), vec3(_3461, _3462, _3463)));
                        float _3471 = dot(vec3(_867, _870, _873), vec3(_3441, _3442, _3443));
                        float _4798 = isnan(0.0) ? _3471 : (isnan(_3471) ? 0.0 : max(_3471, 0.0));
                        float _3474 = isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0));
                        float _3475 = dot(vec3(_867, _870, _873), vec3(_3467 * _3461, _3467 * _3462, _3467 * _3463));
                        float _4809 = isnan(0.0) ? _3475 : (isnan(_3475) ? 0.0 : max(_3475, 0.0));
                        float _3478 = isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0));
                        float _3482 = ((_3478 * _3478) * (_3460 + (-1.0))) + 1.0;
                        float _3483 = _3419 * _3459;
                        float _3484 = _3483 * _3483;
                        float _3487 = ((1.0 - _3484) * _3409) + _3484;
                        float _4820 = isnan(0.0) ? _3487 : (isnan(_3487) ? 0.0 : max(_3487, 0.0));
                        float _3488 = isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0));
                        float _3489 = 1.0 - _3459;
                        float _3499 = (0.5 / (((_3488 * ((_3474 * _3489) + _3459)) + 9.9999999392252902907785028219223e-09) + (((_3488 * _3489) + _3459) * _3474))) * _3488;
                        float _4831 = isnan(0.0) ? _3499 : (isnan(_3499) ? 0.0 : max(_3499, 0.0));
                        float _3510 = (((_3460 * 3.1415927410125732421875) * (isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0)))) / ((_3482 * _3482) * ((_3426 * 2.1991131305694580078125) + 3.141590118408203125))) * _3415;
                        _3268 = (_3430 * _3378.x) + _3336;
                        _3269 = (_3430 * _3378.y) + _3337;
                        _3270 = (_3430 * _3378.z) + _3338;
                        _3265 = (_3510 * _3395.x) + _3333;
                        _3266 = (_3510 * _3395.y) + _3334;
                        _3267 = (_3510 * _3395.z) + _3335;
                        if (_3340 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3333 = _3265;
                            _3334 = _3266;
                            _3335 = _3267;
                            _3336 = _3268;
                            _3337 = _3269;
                            _3338 = _3270;
                            _3339 = _3340;
                        }
                    }
                    frontier_phi_66_pred = _3270;
                    frontier_phi_66_pred_1 = _3269;
                    frontier_phi_66_pred_2 = _3268;
                    frontier_phi_66_pred_3 = _3267;
                    frontier_phi_66_pred_4 = _3266;
                    frontier_phi_66_pred_5 = _3265;
                }
                _3066 = frontier_phi_66_pred;
                _3064 = frontier_phi_66_pred_1;
                _3062 = frontier_phi_66_pred_2;
                _3060 = frontier_phi_66_pred_3;
                _3058 = frontier_phi_66_pred_4;
                _3056 = frontier_phi_66_pred_5;
                uint _3216 = _3215 + 1u;
                if (_3216 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3209 = _3056;
                    _3210 = _3058;
                    _3211 = _3060;
                    _3212 = _3062;
                    _3213 = _3064;
                    _3214 = _3066;
                    _3215 = _3216;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3055 = _3056;
            _3057 = _3058;
            _3059 = _3060;
            _3061 = _3062;
            _3063 = _3064;
            _3065 = _3066;
        }
        uvec4 _3069 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3070 = _3069.z;
        uint _3072 = (_3070 >> 8u) & 15u;
        float _3177;
        float _3179;
        float _3181;
        float _3183;
        float _3185;
        float _3187;
        if (((4294967295u << _3072) & _2940) == 0u)
        {
            _3177 = _3055;
            _3179 = _3057;
            _3181 = _3059;
            _3183 = _3061;
            _3185 = _3063;
            _3187 = _3065;
        }
        else
        {
            float _3202 = inversesqrt(dot(vec3(_1999, _2000, _2001), vec3(_1999, _2000, _2001)));
            float _3203 = _3202 * _1999;
            float _3204 = _3202 * _2000;
            float _3205 = _3202 * _2001;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3072 < ((_3070 >> 12u) & 15u))
            {
                float _3178;
                float _3180;
                float _3182;
                float _3184;
                float _3186;
                float _3188;
                float _3316 = _3055;
                float _3317 = _3057;
                float _3318 = _3059;
                float _3319 = _3061;
                float _3320 = _3063;
                float _3321 = _3065;
                uint _3322 = _3072;
                uint _3331;
                bool _3332;
                for (;;)
                {
                    _3331 = texelFetch(g_lightClassification, int((((_2934 << 5u) + (_2920 << 9u)) + (_3322 << 2u)) >> 2u)).x;
                    _3332 = _3331 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3332)
                    {
                        frontier_phi_72_pred = _3321;
                        frontier_phi_72_pred_1 = _3320;
                        frontier_phi_72_pred_2 = _3319;
                        frontier_phi_72_pred_3 = _3318;
                        frontier_phi_72_pred_4 = _3317;
                        frontier_phi_72_pred_5 = _3316;
                    }
                    else
                    {
                        float _3515;
                        float _3516;
                        float _3517;
                        float _3518;
                        float _3519;
                        float _3520;
                        float _3808;
                        float _3809;
                        float _3810;
                        float _3811;
                        float _3812;
                        float _3813;
                        float _3528 = _3316;
                        float _3529 = _3317;
                        float _3530 = _3318;
                        float _3531 = _3319;
                        float _3532 = _3320;
                        float _3533 = _3321;
                        uint _3534 = _3331;
                        uint _3535;
                        vec4 _3560;
                        float _3561;
                        vec4 _3576;
                        vec3 _3588;
                        vec4 _3603;
                        vec4 _3618;
                        float _3664;
                        bool _3665;
                        for (;;)
                        {
                            uint _3545 = ((_3322 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3534));
                            _3535 = (_3534 + 4294967295u) & _3534;
                            uint _3547 = _3545 * 40u;
                            _3560 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3547)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 3u)).x));
                            _3561 = _3560.w;
                            uint _3563 = (_3545 * 40u) + 4u;
                            _3576 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3563)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3563 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3563 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3563 + 3u)).x));
                            uint _3578 = (_3545 * 40u) + 8u;
                            _3588 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3578)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 2u)).x));
                            uint _3590 = (_3545 * 40u) + 16u;
                            _3603 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3590)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 3u)).x));
                            uint _3605 = (_3545 * 40u) + 20u;
                            _3618 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3605)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3605 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3605 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3605 + 3u)).x));
                            uint _3620 = (_3545 * 40u) + 24u;
                            vec4 _3633 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3620)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3620 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3620 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3620 + 3u)).x));
                            uint _3639 = (_3545 * 40u) + 28u;
                            vec4 _3652 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3639)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3639 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3639 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3639 + 3u)).x));
                            _3664 = fma(_2001, _3652.z, fma(_2000, _3652.y, _3652.x * _1999)) + _3652.w;
                            _3665 = !((fma(_2001, _3633.z, fma(_2000, _3633.y, _3633.x * _1999)) + _3633.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3665)
                            {
                                float _3692 = _3560.x - _1999;
                                float _3693 = _3560.y - _2000;
                                float _3694 = _3560.z - _2001;
                                float _3695 = dot(vec3(_3692, _3693, _3694), vec3(_3692, _3693, _3694));
                                float _3698 = inversesqrt(_3695);
                                float _3699 = _3698 * _3692;
                                float _3700 = _3698 * _3693;
                                float _3701 = _3698 * _3694;
                                float _3705 = 1.0 - (_3695 / (_3561 * _3561));
                                float _4842 = isnan(0.0) ? _3705 : (isnan(_3705) ? 0.0 : max(_3705, 0.0));
                                float _3706 = isnan(1.0) ? _4842 : (isnan(_4842) ? 1.0 : min(_4842, 1.0));
                                float _3710 = sqrt(_3695) * _3576.w;
                                float _3712 = 1.39999997615814208984375 / (_3710 + 1.39999997615814208984375);
                                float _3713 = _3712 * _3712;
                                float _3716 = ((1.0 - _3713) * dot(vec3(_3699, _3700, _3701), vec3(_867, _870, _873))) + _3713;
                                float _3719 = _3710 * _3710;
                                float _3723 = (fma(_2001, _3603.z, fma(_2000, _3603.y, _3603.x * _1999)) + _3603.w) / _3664;
                                float _3724 = (fma(_2001, _3618.z, fma(_2000, _3618.y, _3618.x * _1999)) + _3618.w) / _3664;
                                float _3728 = 1.0 - dot(vec2(_3723, _3724), vec2(_3723, _3724));
                                float _4858 = isnan(0.0) ? _3728 : (isnan(_3728) ? 0.0 : max(_3728, 0.0));
                                float _3729 = isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0));
                                float _3730 = _3729 * (((isnan(0.0) ? _3716 : (isnan(_3716) ? 0.0 : max(_3716, 0.0))) * _3706) / ((_3719 * 0.699999988079071044921875) + 1.0));
                                float _3742 = exp2(log2(1.0 / ((_3719 * 3.5) + 5.0)) * 0.25);
                                float _3743 = 1.0 - _942;
                                float _3750 = sqrt(1.0 - ((1.0 - (_3743 * _3743)) * (1.0 - (_3742 * _3742))));
                                float _3751 = _3750 * _3750;
                                float _3752 = _3751 * _3751;
                                float _3753 = _3699 - _3203;
                                float _3754 = _3700 - _3204;
                                float _3755 = _3701 - _3205;
                                float _3759 = inversesqrt(dot(vec3(_3753, _3754, _3755), vec3(_3753, _3754, _3755)));
                                float _3763 = dot(vec3(_867, _870, _873), vec3((-0.0) - _3203, (-0.0) - _3204, (-0.0) - _3205));
                                float _4869 = isnan(0.0) ? _3763 : (isnan(_3763) ? 0.0 : max(_3763, 0.0));
                                float _3766 = isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0));
                                float _3767 = dot(vec3(_867, _870, _873), vec3(_3759 * _3753, _3759 * _3754, _3759 * _3755));
                                float _4880 = isnan(0.0) ? _3767 : (isnan(_3767) ? 0.0 : max(_3767, 0.0));
                                float _3770 = isnan(1.0) ? _4880 : (isnan(_4880) ? 1.0 : min(_4880, 1.0));
                                float _3774 = ((_3770 * _3770) * (_3752 + (-1.0))) + 1.0;
                                float _3775 = _3712 * _3751;
                                float _3776 = _3775 * _3775;
                                float _3782 = ((1.0 - _3776) * dot(vec3(_867, _870, _873), vec3(_3699, _3700, _3701))) + _3776;
                                float _4891 = isnan(0.0) ? _3782 : (isnan(_3782) ? 0.0 : max(_3782, 0.0));
                                float _3783 = isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0));
                                float _3784 = 1.0 - _3751;
                                float _3794 = (0.5 / (((_3783 * ((_3766 * _3784) + _3751)) + 9.9999999392252902907785028219223e-09) + (((_3783 * _3784) + _3751) * _3766))) * _3783;
                                float _4902 = isnan(0.0) ? _3794 : (isnan(_3794) ? 0.0 : max(_3794, 0.0));
                                float _3804 = (_3729 * _3706) * (((_3752 * 3.1415927410125732421875) * (isnan(1.0) ? _4902 : (isnan(_4902) ? 1.0 : min(_4902, 1.0)))) / ((_3774 * _3774) * ((_3719 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3730 * _3576.y;
                                frontier_phi_78_pred_1 = _3730 * _3576.x;
                                frontier_phi_78_pred_2 = _3804 * _3588.z;
                                frontier_phi_78_pred_3 = _3804 * _3588.y;
                                frontier_phi_78_pred_4 = _3804 * _3588.x;
                                frontier_phi_78_pred_5 = _3730 * _3576.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3812 = frontier_phi_78_pred;
                            _3811 = frontier_phi_78_pred_1;
                            _3810 = frontier_phi_78_pred_2;
                            _3809 = frontier_phi_78_pred_3;
                            _3808 = frontier_phi_78_pred_4;
                            _3813 = frontier_phi_78_pred_5;
                            _3518 = _3811 + _3531;
                            _3519 = _3812 + _3532;
                            _3520 = _3813 + _3533;
                            _3515 = _3808 + _3528;
                            _3516 = _3809 + _3529;
                            _3517 = _3810 + _3530;
                            if (_3535 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3528 = _3515;
                                _3529 = _3516;
                                _3530 = _3517;
                                _3531 = _3518;
                                _3532 = _3519;
                                _3533 = _3520;
                                _3534 = _3535;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3520;
                        frontier_phi_72_pred_1 = _3519;
                        frontier_phi_72_pred_2 = _3518;
                        frontier_phi_72_pred_3 = _3517;
                        frontier_phi_72_pred_4 = _3516;
                        frontier_phi_72_pred_5 = _3515;
                    }
                    _3188 = frontier_phi_72_pred;
                    _3186 = frontier_phi_72_pred_1;
                    _3184 = frontier_phi_72_pred_2;
                    _3182 = frontier_phi_72_pred_3;
                    _3180 = frontier_phi_72_pred_4;
                    _3178 = frontier_phi_72_pred_5;
                    uint _3323 = _3322 + 1u;
                    if (_3323 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3316 = _3178;
                        _3317 = _3180;
                        _3318 = _3182;
                        _3319 = _3184;
                        _3320 = _3186;
                        _3321 = _3188;
                        _3322 = _3323;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3188;
                frontier_phi_60_61_ladder_1 = _3186;
                frontier_phi_60_61_ladder_2 = _3182;
                frontier_phi_60_61_ladder_3 = _3180;
                frontier_phi_60_61_ladder_4 = _3178;
                frontier_phi_60_61_ladder_5 = _3184;
            }
            else
            {
                frontier_phi_60_61_ladder = _3065;
                frontier_phi_60_61_ladder_1 = _3063;
                frontier_phi_60_61_ladder_2 = _3059;
                frontier_phi_60_61_ladder_3 = _3057;
                frontier_phi_60_61_ladder_4 = _3055;
                frontier_phi_60_61_ladder_5 = _3061;
            }
            _3177 = frontier_phi_60_61_ladder_4;
            _3179 = frontier_phi_60_61_ladder_3;
            _3181 = frontier_phi_60_61_ladder_2;
            _3183 = frontier_phi_60_61_ladder_5;
            _3185 = frontier_phi_60_61_ladder_1;
            _3187 = frontier_phi_60_61_ladder;
        }
        float _3192 = isnan(1.0) ? _926 : (isnan(_926) ? 1.0 : min(_926, 1.0));
        _2953 = (_3192 * _3183) + _2465;
        _2955 = (_3192 * _3185) + _2467;
        _2957 = (_3192 * _3187) + _2469;
        _2959 = ((_3177 * _911) * _3192) + _2803;
        _2961 = ((_3179 * _913) * _3192) + _2805;
        _2963 = ((_3181 * _914) * _3192) + _2807;
    }
    else
    {
        _2953 = _2465;
        _2955 = _2467;
        _2957 = _2469;
        _2959 = _2803;
        _2961 = _2805;
        _2963 = _2807;
    }
    uint _2969 = _887 + uint(cbMatDynParam._m0[0u].w);
    float _2977 = ((cbMtdParam._m0[20u].x * cbMtdParam._m0[25u].x) * _702.x) * cbInstanceData._m0[_2969].x;
    float _2980 = ((cbMtdParam._m0[20u].y * cbMtdParam._m0[25u].x) * _702.y) * cbInstanceData._m0[_2969].y;
    float _2983 = ((cbMtdParam._m0[20u].z * cbMtdParam._m0[25u].x) * _702.z) * cbInstanceData._m0[_2969].z;
    float _4918 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
    float _4929 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
    float _4940 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
    float _3000 = (((isnan(1.0) ? _4918 : (isnan(_4918) ? 1.0 : min(_4918, 1.0))) * (_2953 + ((isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0))) * _926))) + ((_2959 + ((isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0))) * _1733)) * cbPerFrame._m0[3u].x)) + _2977;
    float _3002 = (_2980 + ((_2961 + ((isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0))) * _1733)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4929 : (isnan(_4929) ? 1.0 : min(_4929, 1.0))) * (_2955 + ((isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0))) * _926)));
    float _3004 = (_2983 + ((_2963 + ((isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0))) * _1733)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4940 : (isnan(_4940) ? 1.0 : min(_4940, 1.0))) * (_2957 + ((isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0))) * _926)));
    float _4966 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _3017 = isnan(1.0) ? _4966 : (isnan(_4966) ? 1.0 : min(_4966, 1.0));
    uint _3018 = _886 + 6u;
    float _3026 = _848 / cbSceneParam._m0[86u].x;
    float _3027 = _849 / cbSceneParam._m0[86u].y;
    vec4 _3041 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3026, _3027, (log2((isnan(cbSceneParam._m0[77u].w) ? _783 : (isnan(_783) ? cbSceneParam._m0[77u].w : min(_783, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3043 = _3041.x;
    float _3044 = _3041.y;
    float _3045 = _3041.z;
    float _3046 = _3041.w;
    float _3118;
    float _3120;
    float _3122;
    float _3124;
    if (_783 > cbSceneParam._m0[78u].w)
    {
        float _3080 = isnan(_783) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _783 : min(cbSceneParam._m0[80u].w, _783));
        float _3081 = _3080 / _783;
        float _3092 = _3081 * _833;
        float _3093 = _834 * _3081;
        float _3094 = (-0.0) - _3093;
        float _3096 = _3081 * _835;
        float _3098 = (cbSceneParam._m0[77u].w * _3094) / _3080;
        float _3099 = _3098 + cbSceneParam._m0[79u].w;
        float _3100 = cbSceneParam._m0[79u].w - _3093;
        float _3106 = sqrt(((_3092 * _3092) + (_3093 * _3093)) + (_3096 * _3096));
        float _3109 = (1.0 - (cbSceneParam._m0[77u].w / _3080)) * _3106;
        float _3114 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3116 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3278;
        if (abs((_3094 - _3098) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3278 = ((((_3099 > 0.0) ? exp2(_3114 * _3099) : (2.0 - exp2(_3116 * _3099))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3109;
        }
        else
        {
            float _3238 = 1.0 / cbSceneParam._m0[80u].x;
            float _3239 = isnan(_3100) ? _3099 : (isnan(_3099) ? _3100 : max(_3099, _3100));
            float _3240 = isnan(_3100) ? _3099 : (isnan(_3099) ? _3100 : min(_3099, _3100));
            float _3249 = isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : min(_3239, 0.0));
            float _3250 = isnan(0.0) ? _3240 : (isnan(_3240) ? 0.0 : min(_3240, 0.0));
            _3278 = ((abs(_3106 / _3094) * cbSceneParam._m0[80u].y) * ((((_3249 - _3250) * 2.0) - ((exp2(_3114 * (isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : max(_3239, 0.0)))) - exp2(_3114 * (isnan(0.0) ? _3240 : (isnan(_3240) ? 0.0 : max(_3240, 0.0))))) * _3238)) - ((exp2(_3116 * _3249) - exp2(_3116 * _3250)) * _3238))) + (_3109 * cbSceneParam._m0[80u].z);
        }
        vec4 _3280 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3026, _3027, 1.0), 0.0);
        float _3289 = exp2((_3278 * (-1.44269502162933349609375)) * (1.0 - _3280.w));
        float _3290 = log2(_3289);
        float _3306 = log2(_3046);
        _3118 = (exp2(_3306 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3290 * cbSceneParam._m0[78u].x)) * _3280.x) / cbSceneParam._m0[78u].x)) + _3043;
        _3120 = (exp2(_3306 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3290 * cbSceneParam._m0[78u].y)) * _3280.y) / cbSceneParam._m0[78u].y)) + _3044;
        _3122 = (exp2(_3306 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3290 * cbSceneParam._m0[78u].z)) * _3280.z) / cbSceneParam._m0[78u].z)) + _3045;
        _3124 = _3289 * _3046;
    }
    else
    {
        _3118 = _3043;
        _3120 = _3044;
        _3122 = _3045;
        _3124 = _3046;
    }
    float _3136 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3137 = _3136 == 3.0;
    float _3138 = log2(_3124);
    float _3142 = exp2(_3138 * cbSceneParam._m0[78u].x);
    float _3143 = exp2(_3138 * cbSceneParam._m0[78u].y);
    float _3144 = exp2(_3138 * cbSceneParam._m0[78u].z);
    float _3145 = _3142 * (isnan(0.0) ? _3000 : (isnan(_3000) ? 0.0 : max(_3000, 0.0)));
    float _3146 = _3143 * (isnan(0.0) ? _3002 : (isnan(_3002) ? 0.0 : max(_3002, 0.0)));
    float _3147 = _3144 * (isnan(0.0) ? _3004 : (isnan(_3004) ? 0.0 : max(_3004, 0.0)));
    float _3156 = (_3136 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3156 * (_3137 ? _3145 : (_3145 + (cbSceneParam._m0[72u].w * _3118)));
    SV_Target.y = _3156 * (_3137 ? _3146 : (_3146 + (cbSceneParam._m0[72u].w * _3120)));
    SV_Target.z = _3156 * (_3137 ? _3147 : (_3147 + (cbSceneParam._m0[72u].w * _3122)));
    SV_Target.w = cbInstanceData._m0[_3018].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2977) * _3017) * _3142) * _3156;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2980) * _3017) * _3143) * _3156;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2983) * _3017) * _3144) * _3156;
    SV_Target_1.w = cbInstanceData._m0[_3018].w;
}


