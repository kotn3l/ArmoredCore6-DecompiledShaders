#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[29];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 12) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_14;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_16;
layout(set = 0, binding = 4) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_17;
layout(set = 0, binding = 5) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_18;
layout(set = 0, binding = 6) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 9) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2DArray C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_0;
layout(set = 0, binding = 14) uniform texture2DArray C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1407;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _215 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _216 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _217 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _223 = inversesqrt(dot(vec3(_215, _216, _217), vec3(_215, _216, _217)));
    float _230 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _237 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _258 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_1) + cbTextureTilingScale._m0[5u].w));
    vec4 _277 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_1) + cbTextureTilingScale._m0[10u].w));
    float _290 = exp2(log2(_277.w * cbMtdParam._m0[25u].z) * cbMtdParam._m0[22u].x);
    float _291 = isnan(0.0) ? _290 : (isnan(_290) ? 0.0 : max(_290, 0.0));
    float _292 = isnan(1.0) ? _291 : (isnan(_291) ? 1.0 : min(_291, 1.0));
    vec4 _306 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _310 = _306.z;
    float _319 = exp2(log2(_310 * cbMtdParam._m0[22u].y) * cbMtdParam._m0[21u].y);
    float _320 = isnan(0.0) ? _319 : (isnan(_319) ? 0.0 : max(_319, 0.0));
    float _321 = isnan(1.0) ? _320 : (isnan(_320) ? 1.0 : min(_320, 1.0));
    vec4 _333 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _336 = _333.y;
    float _339 = (_333.x + (-0.02500000037252902984619140625)) * 8.0;
    float _343 = roundEven(5.0 - _339);
    float _344 = isnan(0.0) ? _343 : (isnan(_343) ? 0.0 : max(_343, 0.0));
    float _345 = isnan(4.0) ? _344 : (isnan(_344) ? 4.0 : min(_344, 4.0));
    float _358 = floor(_345);
    vec4 _361 = texture(sampler2DArray(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w, _358));
    float _193[6];
    float _194[6];
    float _195[6];
    _193[0u] = cbMtdParam._m0[17u].x;
    _194[0u] = cbMtdParam._m0[17u].y;
    _195[0u] = cbMtdParam._m0[17u].z;
    _193[1u] = cbMtdParam._m0[15u].x;
    _194[1u] = cbMtdParam._m0[15u].y;
    _195[1u] = cbMtdParam._m0[15u].z;
    _193[2u] = cbMtdParam._m0[14u].x;
    _194[2u] = cbMtdParam._m0[14u].y;
    _195[2u] = cbMtdParam._m0[14u].z;
    _193[3u] = cbMtdParam._m0[13u].x;
    _194[3u] = cbMtdParam._m0[13u].y;
    _195[3u] = cbMtdParam._m0[13u].z;
    _193[4u] = cbMtdParam._m0[12u].x;
    _194[4u] = cbMtdParam._m0[12u].y;
    _195[4u] = cbMtdParam._m0[12u].z;
    _193[5u] = cbMtdParam._m0[18u].x;
    _194[5u] = cbMtdParam._m0[18u].y;
    _195[5u] = cbMtdParam._m0[18u].z;
    float _425 = roundEven(_339);
    float _426 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    uint _428 = uint(int(isnan(5.0) ? _426 : (isnan(_426) ? 5.0 : min(_426, 5.0))));
    vec4 _458 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _469 = cbMtdParam._m0[9u].x * _458.x;
    float _470 = cbMtdParam._m0[9u].y * _458.y;
    float _471 = cbMtdParam._m0[9u].z * _458.z;
    float _478 = ((((((_193[_428] - cbMtdParam._m0[10u].x) * _336) + cbMtdParam._m0[10u].x) * _361.x) - _469) * _321) + _469;
    float _479 = ((((((_194[_428] - cbMtdParam._m0[10u].y) * _336) + cbMtdParam._m0[10u].y) * _361.y) - _470) * _321) + _470;
    float _480 = ((((((_195[_428] - cbMtdParam._m0[10u].z) * _336) + cbMtdParam._m0[10u].z) * _361.z) - _471) * _321) + _471;
    float _486 = exp2(log2(_306.w) * cbMtdParam._m0[22u].w);
    vec4 _499 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _519 = (((cbMtdParam._m0[16u].x * _499.x) - _478) * _486) + _478;
    float _520 = (((cbMtdParam._m0[16u].y * _499.y) - _479) * _486) + _479;
    float _521 = (((cbMtdParam._m0[16u].z * _499.z) - _480) * _486) + _480;
    vec4 _534 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _559 = (_277.x * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].x * _534.x) - _519) * _292) + _519);
    float _561 = (_277.y * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].y * _534.y) - _520) * _292) + _520);
    float _563 = (_277.z * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].z * _534.z) - _521) * _292) + _521);
    vec4 _575 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_17, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w));
    float _594 = TEXCOORD_3.x - ((cbMtdParam._m0[23u].x * (1.0 - TEXCOORD_3.x)) * (_258.x + 0.00999999977648258209228515625));
    float _596 = _594 * (cbMtdParam._m0[23u].z + 1.0);
    float _3817 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _597 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
    float _604 = (_597 * ((cbMtdParam._m0[11u].x * _575.x) - _559)) + _559;
    float _605 = (((cbMtdParam._m0[11u].y * _575.y) - _561) * _597) + _561;
    float _606 = (((cbMtdParam._m0[11u].z * _575.z) - _563) * _597) + _563;
    float _188[5];
    float _189[5];
    _188[0u] = cbMtdParam._m0[25u].w;
    _189[0u] = cbMtdParam._m0[26u].x;
    _188[1u] = cbMtdParam._m0[27u].w;
    _189[1u] = cbMtdParam._m0[28u].x;
    _188[2u] = cbMtdParam._m0[27u].y;
    _189[2u] = cbMtdParam._m0[27u].z;
    _188[3u] = cbMtdParam._m0[26u].w;
    _189[3u] = cbMtdParam._m0[27u].x;
    _188[4u] = cbMtdParam._m0[26u].y;
    _189[4u] = cbMtdParam._m0[26u].z;
    float _644 = isnan(0.0) ? _345 : (isnan(_345) ? 0.0 : max(_345, 0.0));
    uint _646 = uint(int(isnan(4.0) ? _644 : (isnan(_644) ? 4.0 : min(_644, 4.0))));
    float _653 = ((_189[_646] - cbMtdParam._m0[21u].z) * _321) + cbMtdParam._m0[21u].z;
    float _656 = ((cbMtdParam._m0[21u].w - _653) * _486) + _653;
    float _659 = ((cbMtdParam._m0[24u].y - _656) * _292) + _656;
    float _664 = (cbMtdParam._m0[23u].y + 1.0) * _594;
    float _3838 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _665 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
    float _667 = _659 - (_659 * _665);
    vec4 _680 = texture(sampler2DArray(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w, _358));
    vec4 _697 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _699 = _697.x;
    float _700 = _697.y;
    float _705 = cbMtdParam._m0[21u].x + _697.z;
    float _708 = (((_680.z + _188[_646]) - _705) * _321) + _705;
    vec4 _720 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_1) + cbTextureTilingScale._m0[11u].w));
    float _731 = (((_720.z - _708) + cbMtdParam._m0[25u].y) * _486) + _708;
    float _737 = ((((_310 * 2.0) * _731) - _731) * cbMtdParam._m0[23u].w) + _731;
    vec4 _749 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_1) + cbTextureTilingScale._m0[12u].w));
    float _760 = (((cbMtdParam._m0[22u].z + _749.z) - _737) * _292) + _737;
    vec4 _772 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _784 = ((_772.z - _760) * _665) + _760;
    vec4 _803 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _822 = ((_680.x - _699) * _321) + _699;
    float _823 = ((_680.y - _700) * _321) + _700;
    float _828 = ((_720.x - _822) * _486) + _822;
    float _829 = ((_720.y - _823) * _486) + _823;
    float _838 = ((((_749.x - _828) * _292) + _828) * 2.0) + (-1.0);
    float _839 = ((((_749.y - _829) * _292) + _829) * 2.0) + (-1.0);
    float _840 = dot(vec2(_838, _839), vec2(_838, _839));
    float _3849 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    float _845 = sqrt(1.0 - (isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0))));
    float _854 = ((cbMtdParam._m0[24u].z * ((_306.x * 2.0) + (-1.0))) + _838) + (((((_772.x * 2.0) + (-1.0)) * TEXCOORD_3.x) * cbMtdParam._m0[24u].w) * _665);
    float _855 = ((cbMtdParam._m0[24u].z * ((_306.y * 2.0) + (-1.0))) + _839) + (((((_772.y * 2.0) + (-1.0)) * TEXCOORD_3.y) * cbMtdParam._m0[24u].w) * _665);
    float _858 = fma(_845, _230 * NORMAL.x, fma(_855, _237 * TANGENT.x, (_223 * _215) * _854));
    float _861 = fma(_845, _230 * NORMAL.y, fma(_855, _237 * TANGENT.y, (_223 * _216) * _854));
    float _864 = fma(_845, _230 * NORMAL.z, fma(_855, _237 * TANGENT.z, (_223 * _217) * _854));
    float _868 = inversesqrt(dot(vec3(_858, _861, _864), vec3(_858, _861, _864)));
    float _869 = _868 * _858;
    float _870 = _868 * _861;
    float _871 = _868 * _864;
    float _3860 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _872 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
    float _3871 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _3882 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _3893 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _3904 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _876 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
    float _892 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _932 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _942 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _932);
    float _943 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _932);
    float _944 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _932);
    float _948 = inversesqrt(dot(vec3(_942, _943, _944), vec3(_942, _943, _944)));
    float _949 = _942 * _948;
    float _950 = _943 * _948;
    float _951 = _944 * _948;
    float _957 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _958 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _976 = fma(_871, cbSceneParam._m0[5u].z, fma(_870, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _869));
    float _979 = fma(_871, cbSceneParam._m0[6u].z, fma(_870, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _869));
    float _982 = fma(_871, cbSceneParam._m0[7u].z, fma(_870, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _869));
    uint _995 = uint(roundEven(NORMAL.w)) * 13u;
    uint _996 = _995 + 9u;
    uint _997 = _996 + uint(cbMatDynParam._m0[0u].w);
    float _1003 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0)))) * cbInstanceData._m0[_997].x;
    float _1004 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0)))) * cbInstanceData._m0[_997].y;
    float _1005 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0)))) * cbInstanceData._m0[_997].z;
    float _3915 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
    float _1006 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
    float _3926 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
    float _1007 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
    float _3937 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
    float _1008 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
    float _1009 = 1.0 - _876;
    float _1010 = _1006 * _1009;
    float _1011 = _1007 * _1009;
    float _1012 = _1008 * _1009;
    float _1017 = (_1006 + (-0.039999999105930328369140625)) * _876;
    float _1018 = (_1007 + (-0.039999999105930328369140625)) * _876;
    float _1019 = (_1008 + (-0.039999999105930328369140625)) * _876;
    float _1020 = _1017 + 0.039999999105930328369140625;
    float _1022 = _1018 + 0.039999999105930328369140625;
    float _1023 = _1019 + 0.039999999105930328369140625;
    vec4 _1032 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _957, cbSceneParam._m0[86u].y * _958));
    float _1035 = _1032.x * TEXCOORD_3.w;
    float _1036 = dot(vec3(_869, _870, _871), vec3(_949, _950, _951));
    float _1039 = _1036 * 2.0;
    float _1043 = (_1039 * _869) - _949;
    float _1044 = (_1039 * _870) - _950;
    float _1045 = (_1039 * _871) - _951;
    float _1049 = abs(dot(vec3(_949, _950, _951), vec3(_869, _870, _871)));
    float _3948 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
    float _1051 = sqrt(_872);
    float _1062 = exp2((_1051 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1051 * 3.0));
    float _1068 = (1.0 - _1062) * ((_1051 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1069 = _1062 * _1051;
    float _1097 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1101 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1105 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1406;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1131 = fma(_1105, cbModelParam._m0[26u].z, fma(_1101, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1097));
        float _1135 = fma(_1105, cbModelParam._m0[27u].z, fma(_1101, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1097));
        float _1139 = fma(_1105, cbModelParam._m0[28u].z, fma(_1101, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1097));
        float _1164 = _1097 + _869;
        float _1165 = _1101 + _870;
        float _1166 = _1105 + _871;
        float _1176 = fma(_1166, cbModelParam._m0[26u].z, fma(_1165, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1164)) - _1131;
        float _1177 = fma(_1166, cbModelParam._m0[27u].z, fma(_1165, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1164)) - _1135;
        float _1178 = fma(_1166, cbModelParam._m0[28u].z, fma(_1165, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1164)) - _1139;
        float _1182 = inversesqrt(dot(vec3(_1176, _1177, _1178), vec3(_1176, _1177, _1178)));
        float _1195 = ((_1182 * _1176) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1131 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1196 = ((_1182 * _1177) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1135 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1197 = ((_1182 * _1178) / cbModelParam._m0[34u].z) + ((((((_1139 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1200 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1195, _1196, _1197), 0.0);
        vec4 _1207 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1195, _1196, _1197), 0.0);
        vec4 _1214 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1195, _1196, _1197), 0.0);
        vec4 _1221 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1195, _1196, _1197), 0.0);
        float _1234 = exp2((_1200.w + (-0.5)) * 20.0) * 2.0;
        float _1235 = _1234 * (_1200.x + (-0.5));
        float _1236 = _1234 * (_1200.y + (-0.5));
        float _1237 = _1234 * (_1200.z + (-0.5));
        float _1244 = exp2((_1207.w + (-0.5)) * 20.0) * 2.0;
        float _1245 = _1244 * (_1207.x + (-0.5));
        float _1246 = _1244 * (_1207.y + (-0.5));
        float _1247 = _1244 * (_1207.z + (-0.5));
        float _1254 = exp2((_1214.w + (-0.5)) * 20.0) * 2.0;
        float _1255 = _1254 * (_1214.x + (-0.5));
        float _1256 = _1254 * (_1214.y + (-0.5));
        float _1257 = _1254 * (_1214.z + (-0.5));
        float _1264 = exp2((_1221.w + (-0.5)) * 20.0) * 2.0;
        float _1265 = _1264 * (_1221.x + (-0.5));
        float _1266 = _1264 * (_1221.y + (-0.5));
        float _1267 = _1264 * (_1221.z + (-0.5));
        float _1268 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1269 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1270 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1271 = _1235 * 0.5;
        float _1272 = _1245 * 0.5;
        float _1273 = _1255 * 0.5;
        float _1274 = dot(vec3(_1271, _1272, _1273), vec3(_1271, _1272, _1273));
        float _1279 = (_1274 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1274);
        float _1288 = (dot(vec3(_869, _870, _871), vec3(_1279 * _1271, _1279 * _1272, _1279 * _1273)) + 1.0) * 0.5;
        float _3974 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1298 = sqrt(((_1272 * _1272) + (_1271 * _1271)) + (_1273 * _1273)) / (_1268 + 9.9999997473787516355514526367188e-06);
        float _3985 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1299 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
        float _1300 = _1299 * 2.0;
        float _1304 = (1.0 - _1299) / (_1299 + 1.0);
        float _3996 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1305 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
        float _1314 = ((((1.0 - _1305) * (_1300 + 2.0)) * exp2(log2(isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0))) * (_1300 + 1.0))) + _1305) * _1268;
        float _1315 = _1236 * 0.5;
        float _1316 = _1246 * 0.5;
        float _1317 = _1256 * 0.5;
        float _1318 = dot(vec3(_1315, _1316, _1317), vec3(_1315, _1316, _1317));
        float _1323 = (_1318 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1318);
        float _1331 = (dot(vec3(_869, _870, _871), vec3(_1323 * _1315, _1323 * _1316, _1323 * _1317)) + 1.0) * 0.5;
        float _4007 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1340 = sqrt(((_1316 * _1316) + (_1315 * _1315)) + (_1317 * _1317)) / (_1269 + 9.9999997473787516355514526367188e-06);
        float _4018 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1341 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
        float _1342 = _1341 * 2.0;
        float _1346 = (1.0 - _1341) / (_1341 + 1.0);
        float _4029 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1347 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
        float _1356 = ((((1.0 - _1347) * (_1342 + 2.0)) * exp2(log2(isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0))) * (_1342 + 1.0))) + _1347) * _1269;
        float _1357 = _1237 * 0.5;
        float _1358 = _1247 * 0.5;
        float _1359 = _1257 * 0.5;
        float _1360 = dot(vec3(_1357, _1358, _1359), vec3(_1357, _1358, _1359));
        float _1365 = (_1360 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1360);
        float _1373 = (dot(vec3(_869, _870, _871), vec3(_1365 * _1357, _1365 * _1358, _1365 * _1359)) + 1.0) * 0.5;
        float _4040 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1382 = sqrt(((_1358 * _1358) + (_1357 * _1357)) + (_1359 * _1359)) / (_1270 + 9.9999997473787516355514526367188e-06);
        float _4051 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1383 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
        float _1384 = _1383 * 2.0;
        float _1388 = (1.0 - _1383) / (_1383 + 1.0);
        float _4062 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1389 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
        float _1398 = ((((1.0 - _1389) * (_1384 + 2.0)) * exp2(log2(isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0))) * (_1384 + 1.0))) + _1389) * _1270;
        _1406 = _1237;
        _1408 = _1236;
        _1409 = _1235;
        _1410 = _1247;
        _1411 = _1246;
        _1412 = _1245;
        _1413 = _1257;
        _1414 = _1256;
        _1415 = _1255;
        _1416 = _1270;
        _1417 = _1269;
        _1418 = _1268;
        _1419 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0)));
        _1420 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0)));
        _1421 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0)));
    }
    else
    {
        _1406 = _1407;
        _1408 = _1407;
        _1409 = _1407;
        _1410 = _1407;
        _1411 = _1407;
        _1412 = _1407;
        _1413 = _1407;
        _1414 = _1407;
        _1415 = _1407;
        _1416 = _1407;
        _1417 = _1407;
        _1418 = _1407;
        _1419 = 0.0;
        _1420 = 0.0;
        _1421 = 0.0;
    }
    float _1716;
    float _1717;
    float _1718;
    float _1719;
    float _1720;
    float _1721;
    float _1722;
    float _1723;
    float _1724;
    float _1725;
    float _1726;
    float _1727;
    float _1728;
    float _1729;
    float _1730;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1447 = fma(_1105, cbModelParam._m0[30u].z, fma(_1101, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1097));
        float _1451 = fma(_1105, cbModelParam._m0[31u].z, fma(_1101, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1097));
        float _1455 = fma(_1105, cbModelParam._m0[32u].z, fma(_1101, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1097));
        float _1478 = _1097 + _869;
        float _1479 = _1101 + _870;
        float _1480 = _1105 + _871;
        float _1490 = fma(_1480, cbModelParam._m0[30u].z, fma(_1479, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1478)) - _1447;
        float _1491 = fma(_1480, cbModelParam._m0[31u].z, fma(_1479, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1478)) - _1451;
        float _1492 = fma(_1480, cbModelParam._m0[32u].z, fma(_1479, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1478)) - _1455;
        float _1496 = inversesqrt(dot(vec3(_1490, _1491, _1492), vec3(_1490, _1491, _1492)));
        float _1509 = ((_1496 * _1490) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1447 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1510 = ((_1496 * _1491) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1451 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1511 = ((_1496 * _1492) / cbModelParam._m0[35u].z) + ((((((_1455 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1513 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1509, _1510, _1511), 0.0);
        vec4 _1520 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1509, _1510, _1511), 0.0);
        vec4 _1527 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1509, _1510, _1511), 0.0);
        vec4 _1534 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1509, _1510, _1511), 0.0);
        float _1546 = exp2((_1513.w + (-0.5)) * 20.0) * 2.0;
        float _1547 = _1546 * (_1513.x + (-0.5));
        float _1548 = _1546 * (_1513.y + (-0.5));
        float _1549 = _1546 * (_1513.z + (-0.5));
        float _1556 = exp2((_1520.w + (-0.5)) * 20.0) * 2.0;
        float _1557 = _1556 * (_1520.x + (-0.5));
        float _1558 = _1556 * (_1520.y + (-0.5));
        float _1559 = _1556 * (_1520.z + (-0.5));
        float _1566 = exp2((_1527.w + (-0.5)) * 20.0) * 2.0;
        float _1567 = _1566 * (_1527.x + (-0.5));
        float _1568 = _1566 * (_1527.y + (-0.5));
        float _1569 = _1566 * (_1527.z + (-0.5));
        float _1576 = exp2((_1534.w + (-0.5)) * 20.0) * 2.0;
        float _1577 = _1576 * (_1534.x + (-0.5));
        float _1578 = _1576 * (_1534.y + (-0.5));
        float _1579 = _1576 * (_1534.z + (-0.5));
        float _1580 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
        float _1581 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
        float _1582 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1583 = _1547 * 0.5;
        float _1584 = _1557 * 0.5;
        float _1585 = _1567 * 0.5;
        float _1586 = dot(vec3(_1583, _1584, _1585), vec3(_1583, _1584, _1585));
        float _1591 = (_1586 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1586);
        float _1599 = (dot(vec3(_869, _870, _871), vec3(_1591 * _1583, _1591 * _1584, _1591 * _1585)) + 1.0) * 0.5;
        float _4103 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
        float _1608 = sqrt(((_1584 * _1584) + (_1583 * _1583)) + (_1585 * _1585)) / (_1580 + 9.9999997473787516355514526367188e-06);
        float _4114 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
        float _1609 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
        float _1610 = _1609 * 2.0;
        float _1614 = (1.0 - _1609) / (_1609 + 1.0);
        float _4125 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
        float _1615 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
        float _1624 = ((((1.0 - _1615) * (_1610 + 2.0)) * exp2(log2(isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0))) * (_1610 + 1.0))) + _1615) * _1580;
        float _1625 = _1548 * 0.5;
        float _1626 = _1558 * 0.5;
        float _1627 = _1568 * 0.5;
        float _1628 = dot(vec3(_1625, _1626, _1627), vec3(_1625, _1626, _1627));
        float _1633 = (_1628 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1628);
        float _1641 = (dot(vec3(_869, _870, _871), vec3(_1633 * _1625, _1633 * _1626, _1633 * _1627)) + 1.0) * 0.5;
        float _4136 = isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0));
        float _1650 = sqrt(((_1626 * _1626) + (_1625 * _1625)) + (_1627 * _1627)) / (_1581 + 9.9999997473787516355514526367188e-06);
        float _4147 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
        float _1651 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
        float _1652 = _1651 * 2.0;
        float _1656 = (1.0 - _1651) / (_1651 + 1.0);
        float _4158 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
        float _1657 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
        float _1666 = ((((1.0 - _1657) * (_1652 + 2.0)) * exp2(log2(isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0))) * (_1652 + 1.0))) + _1657) * _1581;
        float _1667 = _1549 * 0.5;
        float _1668 = _1559 * 0.5;
        float _1669 = _1569 * 0.5;
        float _1670 = dot(vec3(_1667, _1668, _1669), vec3(_1667, _1668, _1669));
        float _1675 = (_1670 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1670);
        float _1683 = (dot(vec3(_869, _870, _871), vec3(_1675 * _1667, _1675 * _1668, _1675 * _1669)) + 1.0) * 0.5;
        float _4169 = isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0));
        float _1692 = sqrt(((_1668 * _1668) + (_1667 * _1667)) + (_1669 * _1669)) / (_1582 + 9.9999997473787516355514526367188e-06);
        float _4180 = isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0));
        float _1693 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
        float _1694 = _1693 * 2.0;
        float _1698 = (1.0 - _1693) / (_1693 + 1.0);
        float _4191 = isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0));
        float _1699 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
        float _1708 = ((((1.0 - _1699) * (_1694 + 2.0)) * exp2(log2(isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0))) * (_1694 + 1.0))) + _1699) * _1582;
        _1716 = _1549;
        _1717 = _1548;
        _1718 = _1547;
        _1719 = _1559;
        _1720 = _1558;
        _1721 = _1557;
        _1722 = _1569;
        _1723 = _1568;
        _1724 = _1567;
        _1725 = _1582;
        _1726 = _1581;
        _1727 = _1580;
        _1728 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0)));
        _1729 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0)));
        _1730 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0)));
    }
    else
    {
        _1716 = _1407;
        _1717 = _1407;
        _1718 = _1407;
        _1719 = _1407;
        _1720 = _1407;
        _1721 = _1407;
        _1722 = _1407;
        _1723 = _1407;
        _1724 = _1407;
        _1725 = _1407;
        _1726 = _1407;
        _1727 = _1407;
        _1728 = 0.0;
        _1729 = 0.0;
        _1730 = 0.0;
    }
    float _1740 = (cbModelParam._m0[1u].x * (_1728 - _1419)) + _1419;
    float _1741 = (cbModelParam._m0[1u].x * (_1729 - _1420)) + _1420;
    float _1742 = (cbModelParam._m0[1u].x * (_1730 - _1421)) + _1421;
    float _1763 = fma(_1742, cbSceneParam._m0[89u].z, fma(_1741, cbSceneParam._m0[89u].y, _1740 * cbSceneParam._m0[89u].x));
    float _1766 = fma(_1742, cbSceneParam._m0[90u].z, fma(_1741, cbSceneParam._m0[90u].y, _1740 * cbSceneParam._m0[90u].x));
    float _1769 = fma(_1742, cbSceneParam._m0[91u].z, fma(_1741, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1740));
    float _1784 = _1043 * 0.5;
    float _1785 = _1044 * 0.5;
    float _1786 = _1045 * 0.5;
    float _1787 = dot(vec4(_1784, _1785, _1786, 1.0), vec4(_1718, _1721, _1724, _1727));
    float _1790 = dot(vec4(_1784, _1785, _1786, 1.0), vec4(_1717, _1720, _1723, _1726));
    float _1793 = dot(vec4(_1784, _1785, _1786, 1.0), vec4(_1716, _1719, _1722, _1725));
    float _1827;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1800 = dot(vec4(_1784, _1785, _1786, 1.0), vec4(_1406, _1410, _1413, _1416));
        float _1804 = dot(vec4(_1784, _1785, _1786, 1.0), vec4(_1408, _1411, _1414, _1417));
        float _1808 = dot(vec4(_1784, _1785, _1786, 1.0), vec4(_1409, _1412, _1415, _1418));
        float _1815 = dot(vec4(cbModelParam._m0[39u]), vec4(_1784, _1785, _1786, 1.0));
        _1827 = dot(vec3(isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0)), isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0)), isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1815) ? 0.0 : (isnan(0.0) ? _1815 : max(0.0, _1815))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1827 = 1.0;
    }
    float _1838;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1829 = dot(vec4(cbModelParam._m0[40u]), vec4(_1784, _1785, _1786, 1.0));
        _1838 = dot(vec3(isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0)), isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0)), isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1829) ? 0.0 : (isnan(0.0) ? _1829 : max(0.0, _1829))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1838 = 1.0;
    }
    float _1842 = (_1838 * cbModelParam._m0[1u].x) + (_1827 * (1.0 - cbModelParam._m0[1u].x));
    float _1852 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _872);
    float _1853 = isnan(_1852) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1852 : min(cbModelParam._m0[25u].z, _1852));
    float _1933;
    float _1935;
    float _1937;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1900 = fma(_1105, cbModelParam._m0[13u].z, fma(_1101, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1097)) + cbModelParam._m0[13u].w;
        float _1904 = fma(_1105, cbModelParam._m0[14u].z, fma(_1101, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1097)) + cbModelParam._m0[14u].w;
        float _1908 = fma(_1105, cbModelParam._m0[15u].z, fma(_1101, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1097)) + cbModelParam._m0[15u].w;
        float _1911 = fma(_1045, cbModelParam._m0[13u].z, fma(_1044, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1043));
        float _1914 = fma(_1045, cbModelParam._m0[14u].z, fma(_1044, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1043));
        float _1917 = fma(_1045, cbModelParam._m0[15u].z, fma(_1044, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1043));
        float _1945;
        if (_1911 > 0.0)
        {
            _1945 = abs((1.0 - _1900) / _1911);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1911 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1900 + 1.0) / _1911);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1945 = frontier_phi_14_12_ladder;
        }
        float _2147;
        if (_1914 > 0.0)
        {
            _2147 = abs((1.0 - _1904) / _1914);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1914 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1904 + 1.0) / _1914);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2147 = frontier_phi_23_19_ladder;
        }
        float _2401;
        if (_1917 > 0.0)
        {
            _2401 = abs((1.0 - _1908) / _1917);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1917 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1908 + 1.0) / _1917);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2401 = frontier_phi_35_30_ladder;
        }
        float _2403 = isnan(_2147) ? _1945 : (isnan(_1945) ? _2147 : min(_1945, _2147));
        float _2404 = isnan(_2401) ? _2403 : (isnan(_2403) ? _2401 : min(_2403, _2401));
        float _2408 = (_2404 * _1911) + _1900;
        float _2409 = (_2404 * _1914) + _1904;
        float _2410 = (_2404 * _1917) + _1908;
        float _2411 = _2404 * 9.9999997473787516355514526367188e-05;
        float _2413 = (-1.0) - _2411;
        float _2415 = _2411 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2410 > _2415) || ((_2410 < _2413) || ((_2409 > _2415) || ((_2409 < _2413) || ((_2408 < _2413) || (_2408 > _2415))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2538 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2410, cbModelParam._m0[9u].z, fma(_2409, cbModelParam._m0[9u].y, _2408 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2410, cbModelParam._m0[10u].z, fma(_2409, cbModelParam._m0[10u].y, _2408 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2410, cbModelParam._m0[11u].z, fma(_2409, cbModelParam._m0[11u].y, _2408 * cbModelParam._m0[11u].x))), _1853);
            frontier_phi_13_35_ladder = _2538.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2538.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2538.x * cbModelParam._m0[1u].y;
        }
        _1933 = frontier_phi_13_35_ladder_2;
        _1935 = frontier_phi_13_35_ladder_1;
        _1937 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1921 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1043, _1044, _1045), _1853);
        _1933 = _1921.x * cbModelParam._m0[1u].y;
        _1935 = _1921.y * cbModelParam._m0[1u].y;
        _1937 = _1921.z * cbModelParam._m0[1u].y;
    }
    float _1941 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _872);
    float _1942 = isnan(_1941) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1941 : min(cbModelParam._m0[25u].w, _1941));
    float _2031;
    float _2033;
    float _2035;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1995 = fma(_1105, cbModelParam._m0[21u].z, fma(_1101, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1097)) + cbModelParam._m0[21u].w;
        float _1999 = fma(_1105, cbModelParam._m0[22u].z, fma(_1101, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1097)) + cbModelParam._m0[22u].w;
        float _2003 = fma(_1105, cbModelParam._m0[23u].z, fma(_1101, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1097)) + cbModelParam._m0[23u].w;
        float _2006 = fma(_1045, cbModelParam._m0[21u].z, fma(_1044, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1043));
        float _2009 = fma(_1045, cbModelParam._m0[22u].z, fma(_1044, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1043));
        float _2012 = fma(_1045, cbModelParam._m0[23u].z, fma(_1044, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1043));
        float _2152;
        if (_2006 > 0.0)
        {
            _2152 = abs((1.0 - _1995) / _2006);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2006 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1995 + 1.0) / _2006);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2152 = frontier_phi_25_21_ladder;
        }
        float _2428;
        if (_2009 > 0.0)
        {
            _2428 = abs((1.0 - _1999) / _2009);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2009 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1999 + 1.0) / _2009);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2428 = frontier_phi_37_32_ladder;
        }
        float _2641;
        if (_2012 > 0.0)
        {
            _2641 = abs((1.0 - _2003) / _2012);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2012 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2003 + 1.0) / _2012);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2641 = frontier_phi_46_43_ladder;
        }
        float _2643 = isnan(_2428) ? _2152 : (isnan(_2152) ? _2428 : min(_2152, _2428));
        float _2644 = isnan(_2641) ? _2643 : (isnan(_2643) ? _2641 : min(_2643, _2641));
        float _2648 = (_2644 * _2006) + _1995;
        float _2649 = (_2644 * _2009) + _1999;
        float _2650 = (_2644 * _2012) + _2003;
        float _2651 = _2644 * 9.9999997473787516355514526367188e-05;
        float _2652 = (-1.0) - _2651;
        float _2654 = _2651 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2650 > _2654) || ((_2650 < _2652) || ((_2649 > _2654) || ((_2649 < _2652) || ((_2648 < _2652) || (_2648 > _2654))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2884 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2650, cbModelParam._m0[17u].z, fma(_2649, cbModelParam._m0[17u].y, _2648 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2650, cbModelParam._m0[18u].z, fma(_2649, cbModelParam._m0[18u].y, _2648 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2650, cbModelParam._m0[19u].z, fma(_2649, cbModelParam._m0[19u].y, _2648 * cbModelParam._m0[19u].x))), _1942);
            frontier_phi_22_46_ladder = _2884.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2884.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2884.x * cbModelParam._m0[1u].z;
        }
        _2031 = frontier_phi_22_46_ladder_2;
        _2033 = frontier_phi_22_46_ladder_1;
        _2035 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2015 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1043, _1044, _1045), _1942);
        _2031 = _2015.x * cbModelParam._m0[1u].z;
        _2033 = _2015.y * cbModelParam._m0[1u].z;
        _2035 = _2015.z * cbModelParam._m0[1u].z;
    }
    float _2048 = (((_1068 * _1020) + _1069) * _1035) * ((cbModelParam._m0[1u].w * (_2031 - _1933)) + _1933);
    float _2050 = (((_1068 * _1022) + _1069) * _1035) * ((cbModelParam._m0[1u].w * (_2033 - _1935)) + _1935);
    float _2052 = (((_1068 * _1023) + _1069) * _1035) * ((cbModelParam._m0[1u].w * (_2035 - _1937)) + _1937);
    float _2055 = fma(_2052, cbSceneParam._m0[89u].z, fma(_2050, cbSceneParam._m0[89u].y, _2048 * cbSceneParam._m0[89u].x));
    float _2058 = fma(_2052, cbSceneParam._m0[90u].z, fma(_2050, cbSceneParam._m0[90u].y, _2048 * cbSceneParam._m0[90u].x));
    float _2061 = fma(_2052, cbSceneParam._m0[91u].z, fma(_2050, cbSceneParam._m0[91u].y, _2048 * cbSceneParam._m0[91u].x));
    uvec4 _2071 = floatBitsToUint(cbInstanceData._m0[_995 + 5u]);
    uint _2073 = _2071.x * 14u;
    uint _2074 = _2073 + 13u;
    float _2081 = _1035 + (-1.0);
    float _2086 = (cbLight._m0[_2074].x * _2081) + 1.0;
    float _2087 = (cbLight._m0[_2074].y * _2081) + 1.0;
    float _2088 = (cbLight._m0[_2074].z * _2081) + 1.0;
    float _2089 = (cbLight._m0[_2074].w * _2081) + 1.0;
    uint _2090 = _2073 + 5u;
    float _2096 = isnan(1.0) ? _2087 : (isnan(_2087) ? 1.0 : min(_2087, 1.0));
    uint _2100 = _2073 + 4u;
    float _2106 = isnan(1.0) ? _2086 : (isnan(_2086) ? 1.0 : min(_2086, 1.0));
    uint _2110 = _2073 | 1u;
    float _2121 = dot(vec3(cbLight._m0[_2073].xyz), vec3(_869, _870, _871));
    float _2124 = dot(vec3(cbLight._m0[_2110].xyz), vec3(_869, _870, _871));
    float _4327 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
    float _4338 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
    float _2129 = (isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0))) * 0.3183098733425140380859375;
    float _2131 = (isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0))) * 0.3183098733425140380859375;
    float _2138 = ((cbLight._m0[_2090].x * _2096) * _2131) + ((cbLight._m0[_2100].x * _2106) * _2129);
    float _2139 = ((_2096 * cbLight._m0[_2090].y) * _2131) + ((_2106 * cbLight._m0[_2100].y) * _2129);
    float _2140 = ((_2096 * cbLight._m0[_2090].z) * _2131) + ((_2106 * cbLight._m0[_2100].z) * _2129);
    uvec4 _2144 = floatBitsToUint(cbLight._m0[_2073 + 12u]);
    bool _2146 = _2144.x == 0u;
    float _2157;
    float _2159;
    float _2161;
    if (_2146)
    {
        _2157 = _2138;
        _2159 = _2139;
        _2161 = _2140;
    }
    else
    {
        uint _2165 = _2073 + 6u;
        float _2181 = (dot(vec3(cbLight._m0[_2073 + 2u].xyz), vec3(_869, _870, _871)) * 0.5) + 0.5;
        float _2182 = _2181 * _2181;
        float _4349 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
        float _2183 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
        float _2184 = isnan(1.0) ? _2088 : (isnan(_2088) ? 1.0 : min(_2088, 1.0));
        _2157 = (((cbLight._m0[_2165].x * 0.3183098733425140380859375) * _2183) * _2184) + _2138;
        _2159 = (((cbLight._m0[_2165].y * 0.3183098733425140380859375) * _2183) * _2184) + _2139;
        _2161 = (((cbLight._m0[_2165].z * 0.3183098733425140380859375) * _2183) * _2184) + _2140;
    }
    bool _2164 = _2144.y == 0u;
    float _2202;
    float _2204;
    float _2206;
    if (_2164)
    {
        _2202 = _2157;
        _2204 = _2159;
        _2206 = _2161;
    }
    else
    {
        uint _2372 = _2073 + 7u;
        float _2388 = (dot(vec3(cbLight._m0[_2073 + 3u].xyz), vec3(_869, _870, _871)) * 0.5) + 0.5;
        float _2389 = _2388 * _2388;
        float _4365 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
        float _2390 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
        float _2391 = isnan(1.0) ? _2089 : (isnan(_2089) ? 1.0 : min(_2089, 1.0));
        _2202 = (((cbLight._m0[_2372].x * 0.3183098733425140380859375) * _2390) * _2391) + _2157;
        _2204 = (((cbLight._m0[_2372].y * 0.3183098733425140380859375) * _2390) * _2391) + _2159;
        _2206 = (((cbLight._m0[_2372].z * 0.3183098733425140380859375) * _2390) * _2391) + _2161;
    }
    uint _2209 = _2073 + 8u;
    float _2222 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2073].w)) * _872) * 0.949999988079071044921875);
    float _2223 = _2222 * _2222;
    float _2224 = cbLight._m0[_2073].x + _949;
    float _2225 = cbLight._m0[_2073].y + _950;
    float _2226 = cbLight._m0[_2073].z + _951;
    float _2230 = inversesqrt(dot(vec3(_2224, _2225, _2226), vec3(_2224, _2225, _2226)));
    float _2231 = _2230 * _2224;
    float _2232 = _2230 * _2225;
    float _2233 = _2230 * _2226;
    float _2234 = dot(vec3(_869, _870, _871), vec3(cbLight._m0[_2073].xyz));
    float _4381 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
    float _2237 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
    float _4392 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
    float _2238 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
    float _2239 = dot(vec3(_869, _870, _871), vec3(_2231, _2232, _2233));
    float _4403 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
    float _2242 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
    float _2243 = dot(vec3(cbLight._m0[_2073].xyz), vec3(_2231, _2232, _2233));
    float _4414 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
    float _2247 = _2223 * _2223;
    float _2251 = ((_2242 * _2242) * (_2247 + (-1.0))) + 1.0;
    float _2259 = exp2(log2(1.0 - (isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0)))) * 5.0);
    float _2260 = 0.959999978542327880859375 - _1017;
    float _2262 = 0.959999978542327880859375 - _1018;
    float _2263 = 0.959999978542327880859375 - _1019;
    float _2270 = 1.0 - _2223;
    float _2281 = (0.5 / (((_2238 * ((_2237 * _2270) + _2223)) + 9.9999999392252902907785028219223e-09) + (((_2238 * _2270) + _2223) * _2237))) * _2237;
    float _4425 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
    float _2283 = (isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0))) * (_2247 / ((_2251 * _2251) * 3.141590118408203125));
    uint _2294 = _2073 + 9u;
    float _2305 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2110].w)) * _872) * 0.949999988079071044921875);
    float _2306 = _2305 * _2305;
    float _2307 = cbLight._m0[_2110].x + _949;
    float _2308 = cbLight._m0[_2110].y + _950;
    float _2309 = cbLight._m0[_2110].z + _951;
    float _2313 = inversesqrt(dot(vec3(_2307, _2308, _2309), vec3(_2307, _2308, _2309)));
    float _2314 = _2313 * _2307;
    float _2315 = _2313 * _2308;
    float _2316 = _2313 * _2309;
    float _2317 = dot(vec3(_869, _870, _871), vec3(cbLight._m0[_2110].xyz));
    float _4436 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
    float _2320 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
    float _2321 = dot(vec3(_869, _870, _871), vec3(_2314, _2315, _2316));
    float _4447 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
    float _2324 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
    float _2325 = dot(vec3(cbLight._m0[_2110].xyz), vec3(_2314, _2315, _2316));
    float _4458 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
    float _2329 = _2306 * _2306;
    float _2333 = ((_2324 * _2324) * (_2329 + (-1.0))) + 1.0;
    float _2340 = exp2(log2(1.0 - (isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0)))) * 5.0);
    float _2347 = 1.0 - _2306;
    float _2357 = (0.5 / (((_2238 * ((_2320 * _2347) + _2306)) + 9.9999999392252902907785028219223e-09) + (((_2238 * _2347) + _2306) * _2320))) * _2320;
    float _4469 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
    float _2359 = (isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0))) * (_2329 / ((_2333 * _2333) * 3.141590118408203125));
    float _2369 = (((((_2340 * _2260) + _1020) * cbLight._m0[_2294].x) * _2359) * _2096) + (((((_2259 * _2260) + _1020) * cbLight._m0[_2209].x) * _2283) * _2106);
    float _2370 = (((((_2340 * _2262) + _1022) * cbLight._m0[_2294].y) * _2359) * _2096) + (((((_2259 * _2262) + _1022) * cbLight._m0[_2209].y) * _2283) * _2106);
    float _2371 = (((((_2340 * _2263) + _1023) * cbLight._m0[_2294].z) * _2359) * _2096) + (((((_2259 * _2263) + _1023) * cbLight._m0[_2209].z) * _2283) * _2106);
    float _2433;
    float _2435;
    float _2437;
    if (_2146)
    {
        _2433 = _2369;
        _2435 = _2370;
        _2437 = _2371;
    }
    else
    {
        uint _2439 = _2073 + 2u;
        uint _2443 = _2073 + 10u;
        float _2457 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2439].w)) * _872) * 0.949999988079071044921875);
        float _2458 = _2457 * _2457;
        float _2459 = cbLight._m0[_2439].x + _949;
        float _2460 = cbLight._m0[_2439].y + _950;
        float _2461 = cbLight._m0[_2439].z + _951;
        float _2465 = inversesqrt(dot(vec3(_2459, _2460, _2461), vec3(_2459, _2460, _2461)));
        float _2466 = _2465 * _2459;
        float _2467 = _2465 * _2460;
        float _2468 = _2465 * _2461;
        float _2469 = dot(vec3(_869, _870, _871), vec3(cbLight._m0[_2439].xyz));
        float _4480 = isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0));
        float _2472 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
        float _2473 = dot(vec3(_869, _870, _871), vec3(_2466, _2467, _2468));
        float _4491 = isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0));
        float _2476 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
        float _2477 = dot(vec3(cbLight._m0[_2439].xyz), vec3(_2466, _2467, _2468));
        float _4502 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
        float _2481 = _2458 * _2458;
        float _2485 = ((_2476 * _2476) * (_2481 + (-1.0))) + 1.0;
        float _2492 = exp2(log2(1.0 - (isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0)))) * 5.0);
        float _2499 = 1.0 - _2458;
        float _2509 = (0.5 / (((_2238 * ((_2472 * _2499) + _2458)) + 9.9999999392252902907785028219223e-09) + (((_2238 * _2499) + _2458) * _2472))) * _2472;
        float _4513 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
        float _2511 = (isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0))) * (_2481 / ((_2485 * _2485) * 3.141590118408203125));
        float _2512 = isnan(1.0) ? _2088 : (isnan(_2088) ? 1.0 : min(_2088, 1.0));
        _2433 = (((((_2492 * _2260) + _1020) * cbLight._m0[_2443].x) * _2511) * _2512) + _2369;
        _2435 = (((((_2492 * _2262) + _1022) * cbLight._m0[_2443].y) * _2511) * _2512) + _2370;
        _2437 = (((((_2492 * _2263) + _1023) * cbLight._m0[_2443].z) * _2511) * _2512) + _2371;
    }
    float _2547;
    float _2549;
    float _2551;
    if (_2164)
    {
        _2547 = _2433;
        _2549 = _2435;
        _2551 = _2437;
    }
    else
    {
        uint _2558 = _2073 + 3u;
        uint _2562 = _2073 + 11u;
        float _2576 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2558].w)) * _872) * 0.949999988079071044921875);
        float _2577 = _2576 * _2576;
        float _2578 = cbLight._m0[_2558].x + _949;
        float _2579 = cbLight._m0[_2558].y + _950;
        float _2580 = cbLight._m0[_2558].z + _951;
        float _2584 = inversesqrt(dot(vec3(_2578, _2579, _2580), vec3(_2578, _2579, _2580)));
        float _2585 = _2584 * _2578;
        float _2586 = _2584 * _2579;
        float _2587 = _2584 * _2580;
        float _2588 = dot(vec3(_869, _870, _871), vec3(cbLight._m0[_2558].xyz));
        float _4529 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0));
        float _2591 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
        float _2592 = dot(vec3(_869, _870, _871), vec3(_2585, _2586, _2587));
        float _4540 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
        float _2595 = isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0));
        float _2596 = dot(vec3(cbLight._m0[_2558].xyz), vec3(_2585, _2586, _2587));
        float _4551 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
        float _2600 = _2577 * _2577;
        float _2604 = ((_2595 * _2595) * (_2600 + (-1.0))) + 1.0;
        float _2611 = exp2(log2(1.0 - (isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0)))) * 5.0);
        float _2618 = 1.0 - _2577;
        float _2628 = (0.5 / (((_2238 * ((_2591 * _2618) + _2577)) + 9.9999999392252902907785028219223e-09) + (((_2238 * _2618) + _2577) * _2591))) * _2591;
        float _4562 = isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : max(_2628, 0.0));
        float _2630 = (isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0))) * (_2600 / ((_2604 * _2604) * 3.141590118408203125));
        float _2631 = isnan(1.0) ? _2089 : (isnan(_2089) ? 1.0 : min(_2089, 1.0));
        _2547 = (((((_2611 * _2260) + _1020) * cbLight._m0[_2562].x) * _2630) * _2631) + _2433;
        _2549 = (((((_2611 * _2262) + _1022) * cbLight._m0[_2562].y) * _2630) * _2631) + _2435;
        _2551 = (((((_2611 * _2263) + _1023) * cbLight._m0[_2562].z) * _2630) * _2631) + _2437;
    }
    float _2766;
    float _2768;
    float _2770;
    float _2772;
    float _2774;
    float _2776;
    if (_2071.y == 0u)
    {
        float _2706 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2707 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2706;
        float _2708 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2706;
        float _2709 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2706;
        uvec4 _2721 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2722 = _2721.x;
        uint _2733 = uint((float(_2721.y) * floor(float(uint(cbSceneParam._m0[85u].y * _958) / _2722))) + floor(float(uint(cbSceneParam._m0[85u].x * _957) / _2722)));
        float _2743 = (log2(_2709 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2744 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0));
        uint _2747 = uint(isnan(14.0) ? _2744 : (isnan(_2744) ? 14.0 : min(_2744, 14.0)));
        uvec4 _2752 = texelFetch(g_lightClusterGridBuffer, int(((_2747 << 2u) + (_2733 << 6u)) >> 2u));
        uint _2753 = _2752.x;
        uint _2754 = _2721.z;
        float _2889;
        float _2891;
        float _2893;
        float _2895;
        float _2897;
        float _2899;
        if (((((1u << ((_2754 >> 4u) & 15u)) + 4294967295u) & _2753) == 0u) || ((_2754 & 240u) == 0u))
        {
            _2889 = 0.0;
            _2891 = 0.0;
            _2893 = 0.0;
            _2895 = 0.0;
            _2897 = 0.0;
            _2899 = 0.0;
        }
        else
        {
            float _2890;
            float _2892;
            float _2894;
            float _2896;
            float _2898;
            float _2900;
            float _3043 = 0.0;
            float _3044 = 0.0;
            float _3045 = 0.0;
            float _3046 = 0.0;
            float _3047 = 0.0;
            float _3048 = 0.0;
            uint _3049 = 0u;
            uint _3058;
            bool _3059;
            for (;;)
            {
                _3058 = texelFetch(g_lightClassification, int((((_2747 << 5u) + (_2733 << 9u)) + (_3049 << 2u)) >> 2u)).x;
                _3059 = _3058 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3059)
                {
                    frontier_phi_61_pred = _3043;
                    frontier_phi_61_pred_1 = _3048;
                    frontier_phi_61_pred_2 = _3047;
                    frontier_phi_61_pred_3 = _3046;
                    frontier_phi_61_pred_4 = _3045;
                    frontier_phi_61_pred_5 = _3044;
                }
                else
                {
                    float _3167;
                    float _3168;
                    float _3169;
                    float _3170;
                    float _3171;
                    float _3172;
                    uint _3173;
                    _3167 = _3043;
                    _3168 = _3044;
                    _3169 = _3045;
                    _3170 = _3046;
                    _3171 = _3047;
                    _3172 = _3048;
                    _3173 = _3058;
                    float _3099;
                    float _3100;
                    float _3101;
                    float _3102;
                    float _3103;
                    float _3104;
                    for (;;)
                    {
                        uint _3177 = uint(findLSB(_3173)) + (_3049 << 5u);
                        uint _3174 = (_3173 + 4294967295u) & _3173;
                        uint _3179 = _3177 * 48u;
                        vec4 _3193 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3179)).x, texelFetch(g_PointLightRenderingBuffer, int(_3179 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3179 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3179 + 3u)).x));
                        uint _3199 = (_3177 * 48u) + 4u;
                        vec4 _3212 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3199)).x, texelFetch(g_PointLightRenderingBuffer, int(_3199 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3199 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3199 + 3u)).x));
                        uint _3218 = (_3177 * 48u) + 8u;
                        vec3 _3229 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3218)).x, texelFetch(g_PointLightRenderingBuffer, int(_3218 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3218 + 2u)).x));
                        float _3233 = _3193.x - _2707;
                        float _3234 = _3193.y - _2708;
                        float _3235 = _3193.z - _2709;
                        float _3236 = dot(vec3(_3233, _3234, _3235), vec3(_3233, _3234, _3235));
                        float _3239 = inversesqrt(_3236);
                        float _3240 = _3239 * _3233;
                        float _3241 = _3239 * _3234;
                        float _3242 = _3239 * _3235;
                        float _3243 = dot(vec3(_976, _979, _982), vec3(_3240, _3241, _3242));
                        float _3248 = 1.0 - (_3236 * _3193.w);
                        float _4588 = isnan(0.0) ? _3248 : (isnan(_3248) ? 0.0 : max(_3248, 0.0));
                        float _3249 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
                        float _3250 = sqrt(_3236) * _3212.w;
                        float _3253 = 1.39999997615814208984375 / (_3250 + 1.39999997615814208984375);
                        float _3254 = _3253 * _3253;
                        float _3257 = ((1.0 - _3254) * _3243) + _3254;
                        float _3260 = _3250 * _3250;
                        float _3264 = ((isnan(0.0) ? _3257 : (isnan(_3257) ? 0.0 : max(_3257, 0.0))) * _3249) / ((_3260 * 0.699999988079071044921875) + 1.0);
                        float _3268 = (-0.0) - _2707;
                        float _3269 = (-0.0) - _2708;
                        float _3270 = (-0.0) - _2709;
                        float _3274 = inversesqrt(dot(vec3(_3268, _3269, _3270), vec3(_3268, _3269, _3270)));
                        float _3275 = _3274 * _3268;
                        float _3276 = _3274 * _3269;
                        float _3277 = _3274 * _3270;
                        float _3285 = exp2(log2(1.0 / ((_3260 * 3.5) + 5.0)) * 0.25);
                        float _3286 = 1.0 - _1051;
                        float _3293 = sqrt(1.0 - ((1.0 - (_3286 * _3286)) * (1.0 - (_3285 * _3285))));
                        float _3294 = _3293 * _3293;
                        float _3295 = _3294 * _3294;
                        float _3296 = _3275 + _3240;
                        float _3297 = _3276 + _3241;
                        float _3298 = _3277 + _3242;
                        float _3302 = inversesqrt(dot(vec3(_3296, _3297, _3298), vec3(_3296, _3297, _3298)));
                        float _3306 = dot(vec3(_976, _979, _982), vec3(_3275, _3276, _3277));
                        float _4604 = isnan(0.0) ? _3306 : (isnan(_3306) ? 0.0 : max(_3306, 0.0));
                        float _3309 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
                        float _3310 = dot(vec3(_976, _979, _982), vec3(_3302 * _3296, _3302 * _3297, _3302 * _3298));
                        float _4615 = isnan(0.0) ? _3310 : (isnan(_3310) ? 0.0 : max(_3310, 0.0));
                        float _3313 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
                        float _3317 = ((_3313 * _3313) * (_3295 + (-1.0))) + 1.0;
                        float _3318 = _3253 * _3294;
                        float _3319 = _3318 * _3318;
                        float _3322 = ((1.0 - _3319) * _3243) + _3319;
                        float _4626 = isnan(0.0) ? _3322 : (isnan(_3322) ? 0.0 : max(_3322, 0.0));
                        float _3323 = isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0));
                        float _3324 = 1.0 - _3294;
                        float _3334 = (0.5 / (((_3323 * ((_3309 * _3324) + _3294)) + 9.9999999392252902907785028219223e-09) + (((_3323 * _3324) + _3294) * _3309))) * _3323;
                        float _4637 = isnan(0.0) ? _3334 : (isnan(_3334) ? 0.0 : max(_3334, 0.0));
                        float _3345 = (((_3295 * 3.1415927410125732421875) * (isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0)))) / ((_3317 * _3317) * ((_3260 * 2.1991131305694580078125) + 3.141590118408203125))) * _3249;
                        _3102 = (_3264 * _3212.x) + _3170;
                        _3103 = (_3264 * _3212.y) + _3171;
                        _3104 = (_3264 * _3212.z) + _3172;
                        _3099 = (_3345 * _3229.x) + _3167;
                        _3100 = (_3345 * _3229.y) + _3168;
                        _3101 = (_3345 * _3229.z) + _3169;
                        if (_3174 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3167 = _3099;
                            _3168 = _3100;
                            _3169 = _3101;
                            _3170 = _3102;
                            _3171 = _3103;
                            _3172 = _3104;
                            _3173 = _3174;
                        }
                    }
                    frontier_phi_61_pred = _3099;
                    frontier_phi_61_pred_1 = _3104;
                    frontier_phi_61_pred_2 = _3103;
                    frontier_phi_61_pred_3 = _3102;
                    frontier_phi_61_pred_4 = _3101;
                    frontier_phi_61_pred_5 = _3100;
                }
                _2890 = frontier_phi_61_pred;
                _2900 = frontier_phi_61_pred_1;
                _2898 = frontier_phi_61_pred_2;
                _2896 = frontier_phi_61_pred_3;
                _2894 = frontier_phi_61_pred_4;
                _2892 = frontier_phi_61_pred_5;
                uint _3050 = _3049 + 1u;
                if (_3050 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3043 = _2890;
                    _3044 = _2892;
                    _3045 = _2894;
                    _3046 = _2896;
                    _3047 = _2898;
                    _3048 = _2900;
                    _3049 = _3050;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2889 = _2890;
            _2891 = _2892;
            _2893 = _2894;
            _2895 = _2896;
            _2897 = _2898;
            _2899 = _2900;
        }
        uvec4 _2903 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2904 = _2903.z;
        uint _2906 = (_2904 >> 8u) & 15u;
        float _3011;
        float _3013;
        float _3015;
        float _3017;
        float _3019;
        float _3021;
        if (((4294967295u << _2906) & _2753) == 0u)
        {
            _3011 = _2889;
            _3013 = _2891;
            _3015 = _2893;
            _3017 = _2895;
            _3019 = _2897;
            _3021 = _2899;
        }
        else
        {
            float _3036 = inversesqrt(dot(vec3(_2707, _2708, _2709), vec3(_2707, _2708, _2709)));
            float _3037 = _3036 * _2707;
            float _3038 = _3036 * _2708;
            float _3039 = _3036 * _2709;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2906 < ((_2904 >> 12u) & 15u))
            {
                float _3012;
                float _3014;
                float _3016;
                float _3018;
                float _3020;
                float _3022;
                float _3150 = _2889;
                float _3151 = _2891;
                float _3152 = _2893;
                float _3153 = _2895;
                float _3154 = _2897;
                float _3155 = _2899;
                uint _3156 = _2906;
                uint _3165;
                bool _3166;
                for (;;)
                {
                    _3165 = texelFetch(g_lightClassification, int((((_2747 << 5u) + (_2733 << 9u)) + (_3156 << 2u)) >> 2u)).x;
                    _3166 = _3165 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3166)
                    {
                        frontier_phi_67_pred = _3153;
                        frontier_phi_67_pred_1 = _3154;
                        frontier_phi_67_pred_2 = _3155;
                        frontier_phi_67_pred_3 = _3152;
                        frontier_phi_67_pred_4 = _3151;
                        frontier_phi_67_pred_5 = _3150;
                    }
                    else
                    {
                        float _3350;
                        float _3351;
                        float _3352;
                        float _3353;
                        float _3354;
                        float _3355;
                        float _3643;
                        float _3644;
                        float _3645;
                        float _3646;
                        float _3647;
                        float _3648;
                        float _3363 = _3150;
                        float _3364 = _3151;
                        float _3365 = _3152;
                        float _3366 = _3153;
                        float _3367 = _3154;
                        float _3368 = _3155;
                        uint _3369 = _3165;
                        uint _3370;
                        vec4 _3395;
                        float _3396;
                        vec4 _3411;
                        vec3 _3423;
                        vec4 _3438;
                        vec4 _3453;
                        float _3499;
                        bool _3500;
                        for (;;)
                        {
                            uint _3380 = ((_3156 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3369));
                            _3370 = (_3369 + 4294967295u) & _3369;
                            uint _3382 = _3380 * 40u;
                            _3395 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3382)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 3u)).x));
                            _3396 = _3395.w;
                            uint _3398 = (_3380 * 40u) + 4u;
                            _3411 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3398)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 3u)).x));
                            uint _3413 = (_3380 * 40u) + 8u;
                            _3423 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3413)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 2u)).x));
                            uint _3425 = (_3380 * 40u) + 16u;
                            _3438 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3425)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 3u)).x));
                            uint _3440 = (_3380 * 40u) + 20u;
                            _3453 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3440)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 3u)).x));
                            uint _3455 = (_3380 * 40u) + 24u;
                            vec4 _3468 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3455)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 3u)).x));
                            uint _3474 = (_3380 * 40u) + 28u;
                            vec4 _3487 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3474)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3474 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3474 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3474 + 3u)).x));
                            _3499 = fma(_2709, _3487.z, fma(_2708, _3487.y, _3487.x * _2707)) + _3487.w;
                            _3500 = !((fma(_2709, _3468.z, fma(_2708, _3468.y, _3468.x * _2707)) + _3468.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3500)
                            {
                                float _3527 = _3395.x - _2707;
                                float _3528 = _3395.y - _2708;
                                float _3529 = _3395.z - _2709;
                                float _3530 = dot(vec3(_3527, _3528, _3529), vec3(_3527, _3528, _3529));
                                float _3533 = inversesqrt(_3530);
                                float _3534 = _3533 * _3527;
                                float _3535 = _3533 * _3528;
                                float _3536 = _3533 * _3529;
                                float _3540 = 1.0 - (_3530 / (_3396 * _3396));
                                float _4648 = isnan(0.0) ? _3540 : (isnan(_3540) ? 0.0 : max(_3540, 0.0));
                                float _3541 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
                                float _3545 = sqrt(_3530) * _3411.w;
                                float _3547 = 1.39999997615814208984375 / (_3545 + 1.39999997615814208984375);
                                float _3548 = _3547 * _3547;
                                float _3551 = ((1.0 - _3548) * dot(vec3(_3534, _3535, _3536), vec3(_976, _979, _982))) + _3548;
                                float _3554 = _3545 * _3545;
                                float _3558 = (fma(_2709, _3438.z, fma(_2708, _3438.y, _3438.x * _2707)) + _3438.w) / _3499;
                                float _3559 = (fma(_2709, _3453.z, fma(_2708, _3453.y, _3453.x * _2707)) + _3453.w) / _3499;
                                float _3563 = 1.0 - dot(vec2(_3558, _3559), vec2(_3558, _3559));
                                float _4664 = isnan(0.0) ? _3563 : (isnan(_3563) ? 0.0 : max(_3563, 0.0));
                                float _3564 = isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0));
                                float _3565 = _3564 * (((isnan(0.0) ? _3551 : (isnan(_3551) ? 0.0 : max(_3551, 0.0))) * _3541) / ((_3554 * 0.699999988079071044921875) + 1.0));
                                float _3577 = exp2(log2(1.0 / ((_3554 * 3.5) + 5.0)) * 0.25);
                                float _3578 = 1.0 - _1051;
                                float _3585 = sqrt(1.0 - ((1.0 - (_3578 * _3578)) * (1.0 - (_3577 * _3577))));
                                float _3586 = _3585 * _3585;
                                float _3587 = _3586 * _3586;
                                float _3588 = _3534 - _3037;
                                float _3589 = _3535 - _3038;
                                float _3590 = _3536 - _3039;
                                float _3594 = inversesqrt(dot(vec3(_3588, _3589, _3590), vec3(_3588, _3589, _3590)));
                                float _3598 = dot(vec3(_976, _979, _982), vec3((-0.0) - _3037, (-0.0) - _3038, (-0.0) - _3039));
                                float _4675 = isnan(0.0) ? _3598 : (isnan(_3598) ? 0.0 : max(_3598, 0.0));
                                float _3601 = isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0));
                                float _3602 = dot(vec3(_976, _979, _982), vec3(_3594 * _3588, _3594 * _3589, _3594 * _3590));
                                float _4686 = isnan(0.0) ? _3602 : (isnan(_3602) ? 0.0 : max(_3602, 0.0));
                                float _3605 = isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0));
                                float _3609 = ((_3605 * _3605) * (_3587 + (-1.0))) + 1.0;
                                float _3610 = _3547 * _3586;
                                float _3611 = _3610 * _3610;
                                float _3617 = ((1.0 - _3611) * dot(vec3(_976, _979, _982), vec3(_3534, _3535, _3536))) + _3611;
                                float _4697 = isnan(0.0) ? _3617 : (isnan(_3617) ? 0.0 : max(_3617, 0.0));
                                float _3618 = isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0));
                                float _3619 = 1.0 - _3586;
                                float _3629 = (0.5 / (((_3618 * ((_3601 * _3619) + _3586)) + 9.9999999392252902907785028219223e-09) + (((_3618 * _3619) + _3586) * _3601))) * _3618;
                                float _4708 = isnan(0.0) ? _3629 : (isnan(_3629) ? 0.0 : max(_3629, 0.0));
                                float _3639 = (_3564 * _3541) * (((_3587 * 3.1415927410125732421875) * (isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0)))) / ((_3609 * _3609) * ((_3554 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3639 * _3423.x;
                                frontier_phi_73_pred_1 = _3639 * _3423.y;
                                frontier_phi_73_pred_2 = _3565 * _3411.z;
                                frontier_phi_73_pred_3 = _3565 * _3411.y;
                                frontier_phi_73_pred_4 = _3565 * _3411.x;
                                frontier_phi_73_pred_5 = _3639 * _3423.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3643 = frontier_phi_73_pred;
                            _3644 = frontier_phi_73_pred_1;
                            _3648 = frontier_phi_73_pred_2;
                            _3647 = frontier_phi_73_pred_3;
                            _3646 = frontier_phi_73_pred_4;
                            _3645 = frontier_phi_73_pred_5;
                            _3353 = _3646 + _3366;
                            _3354 = _3647 + _3367;
                            _3355 = _3648 + _3368;
                            _3350 = _3643 + _3363;
                            _3351 = _3644 + _3364;
                            _3352 = _3645 + _3365;
                            if (_3370 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3363 = _3350;
                                _3364 = _3351;
                                _3365 = _3352;
                                _3366 = _3353;
                                _3367 = _3354;
                                _3368 = _3355;
                                _3369 = _3370;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3353;
                        frontier_phi_67_pred_1 = _3354;
                        frontier_phi_67_pred_2 = _3355;
                        frontier_phi_67_pred_3 = _3352;
                        frontier_phi_67_pred_4 = _3351;
                        frontier_phi_67_pred_5 = _3350;
                    }
                    _3018 = frontier_phi_67_pred;
                    _3020 = frontier_phi_67_pred_1;
                    _3022 = frontier_phi_67_pred_2;
                    _3016 = frontier_phi_67_pred_3;
                    _3014 = frontier_phi_67_pred_4;
                    _3012 = frontier_phi_67_pred_5;
                    uint _3157 = _3156 + 1u;
                    if (_3157 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3150 = _3012;
                        _3151 = _3014;
                        _3152 = _3016;
                        _3153 = _3018;
                        _3154 = _3020;
                        _3155 = _3022;
                        _3156 = _3157;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3020;
                frontier_phi_55_56_ladder_1 = _3022;
                frontier_phi_55_56_ladder_2 = _3018;
                frontier_phi_55_56_ladder_3 = _3016;
                frontier_phi_55_56_ladder_4 = _3014;
                frontier_phi_55_56_ladder_5 = _3012;
            }
            else
            {
                frontier_phi_55_56_ladder = _2897;
                frontier_phi_55_56_ladder_1 = _2899;
                frontier_phi_55_56_ladder_2 = _2895;
                frontier_phi_55_56_ladder_3 = _2893;
                frontier_phi_55_56_ladder_4 = _2891;
                frontier_phi_55_56_ladder_5 = _2889;
            }
            _3011 = frontier_phi_55_56_ladder_5;
            _3013 = frontier_phi_55_56_ladder_4;
            _3015 = frontier_phi_55_56_ladder_3;
            _3017 = frontier_phi_55_56_ladder_2;
            _3019 = frontier_phi_55_56_ladder;
            _3021 = frontier_phi_55_56_ladder_1;
        }
        float _3026 = isnan(1.0) ? _1035 : (isnan(_1035) ? 1.0 : min(_1035, 1.0));
        _2766 = (_3026 * _3017) + _2202;
        _2768 = (_3026 * _3019) + _2204;
        _2770 = (_3026 * _3021) + _2206;
        _2772 = ((_3011 * _1020) * _3026) + _2547;
        _2774 = ((_3013 * _1022) * _3026) + _2549;
        _2776 = ((_3015 * _1023) * _3026) + _2551;
    }
    else
    {
        _2766 = _2202;
        _2768 = _2204;
        _2770 = _2206;
        _2772 = _2547;
        _2774 = _2549;
        _2776 = _2551;
    }
    uint _2782 = _996 + uint(cbMatDynParam._m0[0u].w);
    float _2790 = ((cbMtdParam._m0[20u].x * cbMtdParam._m0[25u].x) * _803.x) * cbInstanceData._m0[_2782].x;
    float _2793 = ((cbMtdParam._m0[20u].y * cbMtdParam._m0[25u].x) * _803.y) * cbInstanceData._m0[_2782].y;
    float _2796 = ((cbMtdParam._m0[20u].z * cbMtdParam._m0[25u].x) * _803.z) * cbInstanceData._m0[_2782].z;
    float _4724 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
    float _4735 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
    float _4746 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
    float _2813 = (((isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0))) * (_2766 + ((isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0))) * _1035))) + ((_2772 + ((isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0))) * _1842)) * cbPerFrame._m0[3u].x)) + _2790;
    float _2815 = (_2793 + ((_2774 + ((isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0))) * _1842)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0))) * (_2768 + ((isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0))) * _1035)));
    float _2817 = (_2796 + ((_2776 + ((isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0))) * _1842)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0))) * (_2770 + ((isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0))) * _1035)));
    float _4772 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2830 = isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0));
    uint _2831 = _995 + 6u;
    float _2839 = _957 / cbSceneParam._m0[86u].x;
    float _2840 = _958 / cbSceneParam._m0[86u].y;
    vec4 _2854 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2839, _2840, (log2((isnan(cbSceneParam._m0[77u].w) ? _892 : (isnan(_892) ? cbSceneParam._m0[77u].w : min(_892, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2856 = _2854.x;
    float _2857 = _2854.y;
    float _2858 = _2854.z;
    float _2859 = _2854.w;
    float _2952;
    float _2954;
    float _2956;
    float _2958;
    if (_892 > cbSceneParam._m0[78u].w)
    {
        float _2914 = isnan(_892) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _892 : min(cbSceneParam._m0[80u].w, _892));
        float _2915 = _2914 / _892;
        float _2926 = _2915 * _942;
        float _2927 = _943 * _2915;
        float _2928 = (-0.0) - _2927;
        float _2930 = _2915 * _944;
        float _2932 = (cbSceneParam._m0[77u].w * _2928) / _2914;
        float _2933 = _2932 + cbSceneParam._m0[79u].w;
        float _2934 = cbSceneParam._m0[79u].w - _2927;
        float _2940 = sqrt(((_2926 * _2926) + (_2927 * _2927)) + (_2930 * _2930));
        float _2943 = (1.0 - (cbSceneParam._m0[77u].w / _2914)) * _2940;
        float _2948 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2950 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3112;
        if (abs((_2928 - _2932) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3112 = ((((_2933 > 0.0) ? exp2(_2948 * _2933) : (2.0 - exp2(_2950 * _2933))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2943;
        }
        else
        {
            float _3072 = 1.0 / cbSceneParam._m0[80u].x;
            float _3073 = isnan(_2934) ? _2933 : (isnan(_2933) ? _2934 : max(_2933, _2934));
            float _3074 = isnan(_2934) ? _2933 : (isnan(_2933) ? _2934 : min(_2933, _2934));
            float _3083 = isnan(0.0) ? _3073 : (isnan(_3073) ? 0.0 : min(_3073, 0.0));
            float _3084 = isnan(0.0) ? _3074 : (isnan(_3074) ? 0.0 : min(_3074, 0.0));
            _3112 = ((abs(_2940 / _2928) * cbSceneParam._m0[80u].y) * ((((_3083 - _3084) * 2.0) - ((exp2(_2948 * (isnan(0.0) ? _3073 : (isnan(_3073) ? 0.0 : max(_3073, 0.0)))) - exp2(_2948 * (isnan(0.0) ? _3074 : (isnan(_3074) ? 0.0 : max(_3074, 0.0))))) * _3072)) - ((exp2(_2950 * _3083) - exp2(_2950 * _3084)) * _3072))) + (_2943 * cbSceneParam._m0[80u].z);
        }
        vec4 _3114 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2839, _2840, 1.0), 0.0);
        float _3123 = exp2((_3112 * (-1.44269502162933349609375)) * (1.0 - _3114.w));
        float _3124 = log2(_3123);
        float _3140 = log2(_2859);
        _2952 = (exp2(_3140 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3124 * cbSceneParam._m0[78u].x)) * _3114.x) / cbSceneParam._m0[78u].x)) + _2856;
        _2954 = (exp2(_3140 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3124 * cbSceneParam._m0[78u].y)) * _3114.y) / cbSceneParam._m0[78u].y)) + _2857;
        _2956 = (exp2(_3140 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3124 * cbSceneParam._m0[78u].z)) * _3114.z) / cbSceneParam._m0[78u].z)) + _2858;
        _2958 = _3123 * _2859;
    }
    else
    {
        _2952 = _2856;
        _2954 = _2857;
        _2956 = _2858;
        _2958 = _2859;
    }
    float _2970 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2971 = _2970 == 3.0;
    float _2972 = log2(_2958);
    float _2976 = exp2(_2972 * cbSceneParam._m0[78u].x);
    float _2977 = exp2(_2972 * cbSceneParam._m0[78u].y);
    float _2978 = exp2(_2972 * cbSceneParam._m0[78u].z);
    float _2979 = _2976 * (isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : max(_2813, 0.0)));
    float _2980 = _2977 * (isnan(0.0) ? _2815 : (isnan(_2815) ? 0.0 : max(_2815, 0.0)));
    float _2981 = _2978 * (isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0)));
    float _2990 = (_2970 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2990 * (_2971 ? _2979 : (_2979 + (cbSceneParam._m0[72u].w * _2952)));
    SV_Target.y = _2990 * (_2971 ? _2980 : (_2980 + (cbSceneParam._m0[72u].w * _2954)));
    SV_Target.z = _2990 * (_2971 ? _2981 : (_2981 + (cbSceneParam._m0[72u].w * _2956)));
    SV_Target.w = cbInstanceData._m0[_2831].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2790) * _2830) * _2976) * _2990;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2793) * _2830) * _2977) * _2990;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2796) * _2830) * _2978) * _2990;
    SV_Target_1.w = cbInstanceData._m0[_2831].w;
}


