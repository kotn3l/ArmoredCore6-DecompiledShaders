#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[29];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 12) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 9) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2DArray C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_0;
layout(set = 0, binding = 14) uniform texture2DArray C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1275;
float _3700;
float _3701;
float _3702;
float _3703;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _203 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _204 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _205 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _211 = inversesqrt(dot(vec3(_203, _204, _205), vec3(_203, _204, _205)));
    float _218 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _225 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _243 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_1) + cbTextureTilingScale._m0[10u].w));
    float _253 = log2(0.0);
    float _255 = exp2(_253 * cbMtdParam._m0[22u].x);
    float _256 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _257 = isnan(1.0) ? _256 : (isnan(_256) ? 1.0 : min(_256, 1.0));
    vec4 _271 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _275 = _271.z;
    float _284 = exp2(log2(_275 * cbMtdParam._m0[22u].y) * cbMtdParam._m0[21u].y);
    float _285 = isnan(0.0) ? _284 : (isnan(_284) ? 0.0 : max(_284, 0.0));
    float _286 = isnan(1.0) ? _285 : (isnan(_285) ? 1.0 : min(_285, 1.0));
    float _307 = roundEven(5.0 - ((texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w)).x + (-0.02500000037252902984619140625)) * 8.0));
    float _308 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _309 = isnan(4.0) ? _308 : (isnan(_308) ? 4.0 : min(_308, 4.0));
    float _322 = floor(_309);
    vec4 _325 = texture(sampler2DArray(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w, _322));
    vec4 _349 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _360 = cbMtdParam._m0[9u].x * _349.x;
    float _361 = cbMtdParam._m0[9u].y * _349.y;
    float _362 = cbMtdParam._m0[9u].z * _349.z;
    float _369 = (((cbMtdParam._m0[10u].x * _325.x) - _360) * _286) + _360;
    float _370 = (((cbMtdParam._m0[10u].y * _325.y) - _361) * _286) + _361;
    float _371 = (((cbMtdParam._m0[10u].z * _325.z) - _362) * _286) + _362;
    float _377 = exp2(log2(_271.w) * cbMtdParam._m0[22u].w);
    vec4 _390 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _410 = (((cbMtdParam._m0[16u].x * _390.x) - _369) * _377) + _369;
    float _411 = (((cbMtdParam._m0[16u].y * _390.y) - _370) * _377) + _370;
    float _412 = (((cbMtdParam._m0[16u].z * _390.z) - _371) * _377) + _371;
    vec4 _425 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _450 = (_243.x * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].x * _425.x) - _410) * _257) + _410);
    float _452 = (_243.y * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].y * _425.y) - _411) * _257) + _411);
    float _454 = (_243.z * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].z * _425.z) - _412) * _257) + _412);
    float _182[5];
    float _183[5];
    _182[0u] = cbMtdParam._m0[25u].w;
    _183[0u] = cbMtdParam._m0[26u].x;
    _182[1u] = cbMtdParam._m0[27u].w;
    _183[1u] = cbMtdParam._m0[28u].x;
    _182[2u] = cbMtdParam._m0[27u].y;
    _183[2u] = cbMtdParam._m0[27u].z;
    _182[3u] = cbMtdParam._m0[26u].w;
    _183[3u] = cbMtdParam._m0[27u].x;
    _182[4u] = cbMtdParam._m0[26u].y;
    _183[4u] = cbMtdParam._m0[26u].z;
    float _494 = isnan(0.0) ? _309 : (isnan(_309) ? 0.0 : max(_309, 0.0));
    uint _496 = uint(int(isnan(4.0) ? _494 : (isnan(_494) ? 4.0 : min(_494, 4.0))));
    float _503 = ((_183[_496] - cbMtdParam._m0[21u].z) * _286) + cbMtdParam._m0[21u].z;
    float _506 = ((cbMtdParam._m0[21u].w - _503) * _377) + _503;
    float _509 = ((cbMtdParam._m0[24u].y - _506) * _257) + _506;
    vec4 _525 = texture(sampler2DArray(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w, _322));
    vec4 _542 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _544 = _542.x;
    float _545 = _542.y;
    float _550 = cbMtdParam._m0[21u].x + _542.z;
    float _553 = (((_525.z + _182[_496]) - _550) * _286) + _550;
    vec4 _566 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_1) + cbTextureTilingScale._m0[11u].w));
    float _577 = (((_566.z - _553) + cbMtdParam._m0[25u].y) * _377) + _553;
    float _583 = ((((_275 * 2.0) * _577) - _577) * cbMtdParam._m0[23u].w) + _577;
    vec4 _596 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_1) + cbTextureTilingScale._m0[12u].w));
    float _607 = (((cbMtdParam._m0[22u].z + _596.z) - _583) * _257) + _583;
    vec4 _627 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _644 = ((_525.x - _544) * _286) + _544;
    float _645 = ((_525.y - _545) * _286) + _545;
    float _650 = ((_566.x - _644) * _377) + _644;
    float _651 = ((_566.y - _645) * _377) + _645;
    float _660 = ((((_596.x - _650) * _257) + _650) * 2.0) + (-1.0);
    float _661 = ((((_596.y - _651) * _257) + _651) * 2.0) + (-1.0);
    float _662 = dot(vec2(_660, _661), vec2(_660, _661));
    float _3752 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _667 = sqrt(1.0 - (isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0))));
    float _670 = (cbMtdParam._m0[24u].z * ((_271.x * 2.0) + (-1.0))) + _660;
    float _671 = (cbMtdParam._m0[24u].z * ((_271.y * 2.0) + (-1.0))) + _661;
    float _673 = gl_FragCoord.x * 0.125;
    float _675 = gl_FragCoord.y * 0.125;
    float _686 = fma(_667, _218 * NORMAL.x, fma(_671, _225 * TANGENT.x, (_211 * _203) * _670));
    float _689 = fma(_667, _218 * NORMAL.y, fma(_671, _225 * TANGENT.y, (_211 * _204) * _670));
    float _692 = fma(_667, _218 * NORMAL.z, fma(_671, _225 * TANGENT.z, (_211 * _205) * _670));
    float _696 = inversesqrt(dot(vec3(_686, _689, _692), vec3(_686, _689, _692)));
    float _697 = _696 * _686;
    float _698 = _696 * _689;
    float _699 = _696 * _692;
    float _3763 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    float _700 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
    float _3774 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _3785 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _3796 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _3807 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _704 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
    if (!(cbMtdParam._m0[24u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_673, _675)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _724 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _764 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _774 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _764);
    float _775 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _764);
    float _776 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _764);
    float _780 = inversesqrt(dot(vec3(_774, _775, _776), vec3(_774, _775, _776)));
    float _781 = _774 * _780;
    float _782 = _775 * _780;
    float _783 = _776 * _780;
    vec4 _785 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_673, _675));
    float _787 = _785.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _957 = sqrt(((_774 * _774) + (_775 * _775)) + (_776 * _776));
        float _963 = (cbMatDynParam._m0[5u].x * _957) + cbMatDynParam._m0[5u].y;
        float _3818 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
        float _964 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
        float _968 = (cbMatDynParam._m0[5u].z * _957) + cbMatDynParam._m0[5u].w;
        float _3829 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0))) - _964)) + _964) < ((_787 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _798 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _799 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _817 = fma(_699, cbSceneParam._m0[5u].z, fma(_698, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _697));
    float _820 = fma(_699, cbSceneParam._m0[6u].z, fma(_698, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _697));
    float _823 = fma(_699, cbSceneParam._m0[7u].z, fma(_698, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _697));
    uint _836 = uint(roundEven(NORMAL.w)) * 13u;
    uint _837 = _836 + 9u;
    uint _838 = _837 + uint(cbMatDynParam._m0[0u].w);
    float _844 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0)))) * cbInstanceData._m0[_838].x;
    float _845 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0)))) * cbInstanceData._m0[_838].y;
    float _846 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0)))) * cbInstanceData._m0[_838].z;
    float _3840 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
    float _847 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
    float _3851 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _848 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
    float _3862 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
    float _849 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
    float _850 = 1.0 - _704;
    float _851 = _847 * _850;
    float _852 = _848 * _850;
    float _853 = _849 * _850;
    float _858 = (_847 + (-0.039999999105930328369140625)) * _704;
    float _859 = (_848 + (-0.039999999105930328369140625)) * _704;
    float _860 = (_849 + (-0.039999999105930328369140625)) * _704;
    float _861 = _858 + 0.039999999105930328369140625;
    float _863 = _859 + 0.039999999105930328369140625;
    float _864 = _860 + 0.039999999105930328369140625;
    vec4 _873 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _798, cbSceneParam._m0[86u].y * _799));
    float _876 = _873.x * TEXCOORD_3.w;
    float _877 = dot(vec3(_697, _698, _699), vec3(_781, _782, _783));
    float _880 = _877 * 2.0;
    float _884 = (_880 * _697) - _781;
    float _885 = (_880 * _698) - _782;
    float _886 = (_880 * _699) - _783;
    float _890 = abs(dot(vec3(_781, _782, _783), vec3(_697, _698, _699)));
    float _3873 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
    float _892 = sqrt(_700);
    float _903 = exp2((_892 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_892 * 3.0));
    float _909 = (1.0 - _903) * ((_892 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _910 = _903 * _892;
    float _938 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _942 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _946 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1274;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _999 = fma(_946, cbModelParam._m0[26u].z, fma(_942, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _938));
        float _1003 = fma(_946, cbModelParam._m0[27u].z, fma(_942, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _938));
        float _1007 = fma(_946, cbModelParam._m0[28u].z, fma(_942, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _938));
        float _1032 = _938 + _697;
        float _1033 = _942 + _698;
        float _1034 = _946 + _699;
        float _1044 = fma(_1034, cbModelParam._m0[26u].z, fma(_1033, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1032)) - _999;
        float _1045 = fma(_1034, cbModelParam._m0[27u].z, fma(_1033, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1032)) - _1003;
        float _1046 = fma(_1034, cbModelParam._m0[28u].z, fma(_1033, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1032)) - _1007;
        float _1050 = inversesqrt(dot(vec3(_1044, _1045, _1046), vec3(_1044, _1045, _1046)));
        float _1063 = ((_1050 * _1044) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_999 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1064 = ((_1050 * _1045) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1003 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1065 = ((_1050 * _1046) / cbModelParam._m0[34u].z) + ((((((_1007 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1068 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1063, _1064, _1065), 0.0);
        vec4 _1075 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1063, _1064, _1065), 0.0);
        vec4 _1082 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1063, _1064, _1065), 0.0);
        vec4 _1089 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1063, _1064, _1065), 0.0);
        float _1102 = exp2((_1068.w + (-0.5)) * 20.0) * 2.0;
        float _1103 = _1102 * (_1068.x + (-0.5));
        float _1104 = _1102 * (_1068.y + (-0.5));
        float _1105 = _1102 * (_1068.z + (-0.5));
        float _1112 = exp2((_1075.w + (-0.5)) * 20.0) * 2.0;
        float _1113 = _1112 * (_1075.x + (-0.5));
        float _1114 = _1112 * (_1075.y + (-0.5));
        float _1115 = _1112 * (_1075.z + (-0.5));
        float _1122 = exp2((_1082.w + (-0.5)) * 20.0) * 2.0;
        float _1123 = _1122 * (_1082.x + (-0.5));
        float _1124 = _1122 * (_1082.y + (-0.5));
        float _1125 = _1122 * (_1082.z + (-0.5));
        float _1132 = exp2((_1089.w + (-0.5)) * 20.0) * 2.0;
        float _1133 = _1132 * (_1089.x + (-0.5));
        float _1134 = _1132 * (_1089.y + (-0.5));
        float _1135 = _1132 * (_1089.z + (-0.5));
        float _1136 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1137 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1138 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1139 = _1103 * 0.5;
        float _1140 = _1113 * 0.5;
        float _1141 = _1123 * 0.5;
        float _1142 = dot(vec3(_1139, _1140, _1141), vec3(_1139, _1140, _1141));
        float _1147 = (_1142 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1142);
        float _1156 = (dot(vec3(_697, _698, _699), vec3(_1147 * _1139, _1147 * _1140, _1147 * _1141)) + 1.0) * 0.5;
        float _3899 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1166 = sqrt(((_1140 * _1140) + (_1139 * _1139)) + (_1141 * _1141)) / (_1136 + 9.9999997473787516355514526367188e-06);
        float _3910 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1167 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
        float _1168 = _1167 * 2.0;
        float _1172 = (1.0 - _1167) / (_1167 + 1.0);
        float _3921 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1173 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
        float _1182 = ((((1.0 - _1173) * (_1168 + 2.0)) * exp2(log2(isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0))) * (_1168 + 1.0))) + _1173) * _1136;
        float _1183 = _1104 * 0.5;
        float _1184 = _1114 * 0.5;
        float _1185 = _1124 * 0.5;
        float _1186 = dot(vec3(_1183, _1184, _1185), vec3(_1183, _1184, _1185));
        float _1191 = (_1186 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1186);
        float _1199 = (dot(vec3(_697, _698, _699), vec3(_1191 * _1183, _1191 * _1184, _1191 * _1185)) + 1.0) * 0.5;
        float _3932 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1208 = sqrt(((_1184 * _1184) + (_1183 * _1183)) + (_1185 * _1185)) / (_1137 + 9.9999997473787516355514526367188e-06);
        float _3943 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1209 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
        float _1210 = _1209 * 2.0;
        float _1214 = (1.0 - _1209) / (_1209 + 1.0);
        float _3954 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1215 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
        float _1224 = ((((1.0 - _1215) * (_1210 + 2.0)) * exp2(log2(isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0))) * (_1210 + 1.0))) + _1215) * _1137;
        float _1225 = _1105 * 0.5;
        float _1226 = _1115 * 0.5;
        float _1227 = _1125 * 0.5;
        float _1228 = dot(vec3(_1225, _1226, _1227), vec3(_1225, _1226, _1227));
        float _1233 = (_1228 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1228);
        float _1241 = (dot(vec3(_697, _698, _699), vec3(_1233 * _1225, _1233 * _1226, _1233 * _1227)) + 1.0) * 0.5;
        float _3965 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1250 = sqrt(((_1226 * _1226) + (_1225 * _1225)) + (_1227 * _1227)) / (_1138 + 9.9999997473787516355514526367188e-06);
        float _3976 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1251 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
        float _1252 = _1251 * 2.0;
        float _1256 = (1.0 - _1251) / (_1251 + 1.0);
        float _3987 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1257 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
        float _1266 = ((((1.0 - _1257) * (_1252 + 2.0)) * exp2(log2(isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0))) * (_1252 + 1.0))) + _1257) * _1138;
        _1274 = _1105;
        _1276 = _1104;
        _1277 = _1103;
        _1278 = _1115;
        _1279 = _1114;
        _1280 = _1113;
        _1281 = _1125;
        _1282 = _1124;
        _1283 = _1123;
        _1284 = _1138;
        _1285 = _1137;
        _1286 = _1136;
        _1287 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0)));
        _1288 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0)));
        _1289 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0)));
    }
    else
    {
        _1274 = _1275;
        _1276 = _1275;
        _1277 = _1275;
        _1278 = _1275;
        _1279 = _1275;
        _1280 = _1275;
        _1281 = _1275;
        _1282 = _1275;
        _1283 = _1275;
        _1284 = _1275;
        _1285 = _1275;
        _1286 = _1275;
        _1287 = 0.0;
        _1288 = 0.0;
        _1289 = 0.0;
    }
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1315 = fma(_946, cbModelParam._m0[30u].z, fma(_942, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _938));
        float _1319 = fma(_946, cbModelParam._m0[31u].z, fma(_942, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _938));
        float _1323 = fma(_946, cbModelParam._m0[32u].z, fma(_942, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _938));
        float _1346 = _938 + _697;
        float _1347 = _942 + _698;
        float _1348 = _946 + _699;
        float _1358 = fma(_1348, cbModelParam._m0[30u].z, fma(_1347, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1346)) - _1315;
        float _1359 = fma(_1348, cbModelParam._m0[31u].z, fma(_1347, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1346)) - _1319;
        float _1360 = fma(_1348, cbModelParam._m0[32u].z, fma(_1347, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1346)) - _1323;
        float _1364 = inversesqrt(dot(vec3(_1358, _1359, _1360), vec3(_1358, _1359, _1360)));
        float _1377 = ((_1364 * _1358) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1315 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1378 = ((_1364 * _1359) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1319 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1379 = ((_1364 * _1360) / cbModelParam._m0[35u].z) + ((((((_1323 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1381 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1377, _1378, _1379), 0.0);
        vec4 _1388 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1377, _1378, _1379), 0.0);
        vec4 _1395 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1377, _1378, _1379), 0.0);
        vec4 _1402 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1377, _1378, _1379), 0.0);
        float _1414 = exp2((_1381.w + (-0.5)) * 20.0) * 2.0;
        float _1415 = _1414 * (_1381.x + (-0.5));
        float _1416 = _1414 * (_1381.y + (-0.5));
        float _1417 = _1414 * (_1381.z + (-0.5));
        float _1424 = exp2((_1388.w + (-0.5)) * 20.0) * 2.0;
        float _1425 = _1424 * (_1388.x + (-0.5));
        float _1426 = _1424 * (_1388.y + (-0.5));
        float _1427 = _1424 * (_1388.z + (-0.5));
        float _1434 = exp2((_1395.w + (-0.5)) * 20.0) * 2.0;
        float _1435 = _1434 * (_1395.x + (-0.5));
        float _1436 = _1434 * (_1395.y + (-0.5));
        float _1437 = _1434 * (_1395.z + (-0.5));
        float _1444 = exp2((_1402.w + (-0.5)) * 20.0) * 2.0;
        float _1445 = _1444 * (_1402.x + (-0.5));
        float _1446 = _1444 * (_1402.y + (-0.5));
        float _1447 = _1444 * (_1402.z + (-0.5));
        float _1448 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1449 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1450 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1451 = _1415 * 0.5;
        float _1452 = _1425 * 0.5;
        float _1453 = _1435 * 0.5;
        float _1454 = dot(vec3(_1451, _1452, _1453), vec3(_1451, _1452, _1453));
        float _1459 = (_1454 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1454);
        float _1467 = (dot(vec3(_697, _698, _699), vec3(_1459 * _1451, _1459 * _1452, _1459 * _1453)) + 1.0) * 0.5;
        float _4028 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1476 = sqrt(((_1452 * _1452) + (_1451 * _1451)) + (_1453 * _1453)) / (_1448 + 9.9999997473787516355514526367188e-06);
        float _4039 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1477 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
        float _1478 = _1477 * 2.0;
        float _1482 = (1.0 - _1477) / (_1477 + 1.0);
        float _4050 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1483 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
        float _1492 = ((((1.0 - _1483) * (_1478 + 2.0)) * exp2(log2(isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0))) * (_1478 + 1.0))) + _1483) * _1448;
        float _1493 = _1416 * 0.5;
        float _1494 = _1426 * 0.5;
        float _1495 = _1436 * 0.5;
        float _1496 = dot(vec3(_1493, _1494, _1495), vec3(_1493, _1494, _1495));
        float _1501 = (_1496 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1496);
        float _1509 = (dot(vec3(_697, _698, _699), vec3(_1501 * _1493, _1501 * _1494, _1501 * _1495)) + 1.0) * 0.5;
        float _4061 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1518 = sqrt(((_1494 * _1494) + (_1493 * _1493)) + (_1495 * _1495)) / (_1449 + 9.9999997473787516355514526367188e-06);
        float _4072 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1519 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
        float _1520 = _1519 * 2.0;
        float _1524 = (1.0 - _1519) / (_1519 + 1.0);
        float _4083 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1525 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
        float _1534 = ((((1.0 - _1525) * (_1520 + 2.0)) * exp2(log2(isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0))) * (_1520 + 1.0))) + _1525) * _1449;
        float _1535 = _1417 * 0.5;
        float _1536 = _1427 * 0.5;
        float _1537 = _1437 * 0.5;
        float _1538 = dot(vec3(_1535, _1536, _1537), vec3(_1535, _1536, _1537));
        float _1543 = (_1538 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1538);
        float _1551 = (dot(vec3(_697, _698, _699), vec3(_1543 * _1535, _1543 * _1536, _1543 * _1537)) + 1.0) * 0.5;
        float _4094 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1560 = sqrt(((_1536 * _1536) + (_1535 * _1535)) + (_1537 * _1537)) / (_1450 + 9.9999997473787516355514526367188e-06);
        float _4105 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
        float _1561 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
        float _1562 = _1561 * 2.0;
        float _1566 = (1.0 - _1561) / (_1561 + 1.0);
        float _4116 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1567 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
        float _1576 = ((((1.0 - _1567) * (_1562 + 2.0)) * exp2(log2(isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0))) * (_1562 + 1.0))) + _1567) * _1450;
        _1584 = _1417;
        _1585 = _1416;
        _1586 = _1415;
        _1587 = _1427;
        _1588 = _1426;
        _1589 = _1425;
        _1590 = _1437;
        _1591 = _1436;
        _1592 = _1435;
        _1593 = _1450;
        _1594 = _1449;
        _1595 = _1448;
        _1596 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0)));
        _1597 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0)));
        _1598 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0)));
    }
    else
    {
        _1584 = _1275;
        _1585 = _1275;
        _1586 = _1275;
        _1587 = _1275;
        _1588 = _1275;
        _1589 = _1275;
        _1590 = _1275;
        _1591 = _1275;
        _1592 = _1275;
        _1593 = _1275;
        _1594 = _1275;
        _1595 = _1275;
        _1596 = 0.0;
        _1597 = 0.0;
        _1598 = 0.0;
    }
    float _1608 = (cbModelParam._m0[1u].x * (_1596 - _1287)) + _1287;
    float _1609 = (cbModelParam._m0[1u].x * (_1597 - _1288)) + _1288;
    float _1610 = (cbModelParam._m0[1u].x * (_1598 - _1289)) + _1289;
    float _1631 = fma(_1610, cbSceneParam._m0[89u].z, fma(_1609, cbSceneParam._m0[89u].y, _1608 * cbSceneParam._m0[89u].x));
    float _1634 = fma(_1610, cbSceneParam._m0[90u].z, fma(_1609, cbSceneParam._m0[90u].y, _1608 * cbSceneParam._m0[90u].x));
    float _1637 = fma(_1610, cbSceneParam._m0[91u].z, fma(_1609, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1608));
    float _1652 = _884 * 0.5;
    float _1653 = _885 * 0.5;
    float _1654 = _886 * 0.5;
    float _1655 = dot(vec4(_1652, _1653, _1654, 1.0), vec4(_1586, _1589, _1592, _1595));
    float _1658 = dot(vec4(_1652, _1653, _1654, 1.0), vec4(_1585, _1588, _1591, _1594));
    float _1661 = dot(vec4(_1652, _1653, _1654, 1.0), vec4(_1584, _1587, _1590, _1593));
    float _1695;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1668 = dot(vec4(_1652, _1653, _1654, 1.0), vec4(_1274, _1278, _1281, _1284));
        float _1672 = dot(vec4(_1652, _1653, _1654, 1.0), vec4(_1276, _1279, _1282, _1285));
        float _1676 = dot(vec4(_1652, _1653, _1654, 1.0), vec4(_1277, _1280, _1283, _1286));
        float _1683 = dot(vec4(cbModelParam._m0[39u]), vec4(_1652, _1653, _1654, 1.0));
        _1695 = dot(vec3(isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0)), isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0)), isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1683) ? 0.0 : (isnan(0.0) ? _1683 : max(0.0, _1683))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1695 = 1.0;
    }
    float _1706;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1697 = dot(vec4(cbModelParam._m0[40u]), vec4(_1652, _1653, _1654, 1.0));
        _1706 = dot(vec3(isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0)), isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0)), isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1697) ? 0.0 : (isnan(0.0) ? _1697 : max(0.0, _1697))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1706 = 1.0;
    }
    float _1710 = (_1706 * cbModelParam._m0[1u].x) + (_1695 * (1.0 - cbModelParam._m0[1u].x));
    float _1720 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _700);
    float _1721 = isnan(_1720) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1720 : min(cbModelParam._m0[25u].z, _1720));
    float _1802;
    float _1804;
    float _1806;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1769 = fma(_946, cbModelParam._m0[13u].z, fma(_942, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _938)) + cbModelParam._m0[13u].w;
        float _1773 = fma(_946, cbModelParam._m0[14u].z, fma(_942, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _938)) + cbModelParam._m0[14u].w;
        float _1777 = fma(_946, cbModelParam._m0[15u].z, fma(_942, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _938)) + cbModelParam._m0[15u].w;
        float _1780 = fma(_886, cbModelParam._m0[13u].z, fma(_885, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _884));
        float _1783 = fma(_886, cbModelParam._m0[14u].z, fma(_885, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _884));
        float _1786 = fma(_886, cbModelParam._m0[15u].z, fma(_885, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _884));
        float _1814;
        if (_1780 > 0.0)
        {
            _1814 = abs((1.0 - _1769) / _1780);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1780 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1769 + 1.0) / _1780);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1814 = frontier_phi_19_17_ladder;
        }
        float _2017;
        if (_1783 > 0.0)
        {
            _2017 = abs((1.0 - _1773) / _1783);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1783 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1773 + 1.0) / _1783);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2017 = frontier_phi_28_24_ladder;
        }
        float _2271;
        if (_1786 > 0.0)
        {
            _2271 = abs((1.0 - _1777) / _1786);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1786 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1777 + 1.0) / _1786);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2271 = frontier_phi_40_35_ladder;
        }
        float _2273 = isnan(_2017) ? _1814 : (isnan(_1814) ? _2017 : min(_1814, _2017));
        float _2274 = isnan(_2271) ? _2273 : (isnan(_2273) ? _2271 : min(_2273, _2271));
        float _2278 = (_2274 * _1780) + _1769;
        float _2279 = (_2274 * _1783) + _1773;
        float _2280 = (_2274 * _1786) + _1777;
        float _2281 = _2274 * 9.9999997473787516355514526367188e-05;
        float _2283 = (-1.0) - _2281;
        float _2285 = _2281 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2280 > _2285) || ((_2280 < _2283) || ((_2279 > _2285) || ((_2279 < _2283) || ((_2278 < _2283) || (_2278 > _2285))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2408 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2280, cbModelParam._m0[9u].z, fma(_2279, cbModelParam._m0[9u].y, _2278 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2280, cbModelParam._m0[10u].z, fma(_2279, cbModelParam._m0[10u].y, _2278 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2280, cbModelParam._m0[11u].z, fma(_2279, cbModelParam._m0[11u].y, _2278 * cbModelParam._m0[11u].x))), _1721);
            frontier_phi_18_40_ladder = _2408.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2408.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2408.x * cbModelParam._m0[1u].y;
        }
        _1802 = frontier_phi_18_40_ladder_2;
        _1804 = frontier_phi_18_40_ladder_1;
        _1806 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1790 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_884, _885, _886), _1721);
        _1802 = _1790.x * cbModelParam._m0[1u].y;
        _1804 = _1790.y * cbModelParam._m0[1u].y;
        _1806 = _1790.z * cbModelParam._m0[1u].y;
    }
    float _1810 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _700);
    float _1811 = isnan(_1810) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1810 : min(cbModelParam._m0[25u].w, _1810));
    float _1901;
    float _1903;
    float _1905;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1865 = fma(_946, cbModelParam._m0[21u].z, fma(_942, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _938)) + cbModelParam._m0[21u].w;
        float _1869 = fma(_946, cbModelParam._m0[22u].z, fma(_942, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _938)) + cbModelParam._m0[22u].w;
        float _1873 = fma(_946, cbModelParam._m0[23u].z, fma(_942, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _938)) + cbModelParam._m0[23u].w;
        float _1876 = fma(_886, cbModelParam._m0[21u].z, fma(_885, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _884));
        float _1879 = fma(_886, cbModelParam._m0[22u].z, fma(_885, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _884));
        float _1882 = fma(_886, cbModelParam._m0[23u].z, fma(_885, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _884));
        float _2022;
        if (_1876 > 0.0)
        {
            _2022 = abs((1.0 - _1865) / _1876);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1876 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1865 + 1.0) / _1876);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2022 = frontier_phi_30_26_ladder;
        }
        float _2298;
        if (_1879 > 0.0)
        {
            _2298 = abs((1.0 - _1869) / _1879);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1879 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1869 + 1.0) / _1879);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2298 = frontier_phi_42_37_ladder;
        }
        float _2511;
        if (_1882 > 0.0)
        {
            _2511 = abs((1.0 - _1873) / _1882);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1882 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1873 + 1.0) / _1882);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2511 = frontier_phi_51_48_ladder;
        }
        float _2513 = isnan(_2298) ? _2022 : (isnan(_2022) ? _2298 : min(_2022, _2298));
        float _2514 = isnan(_2511) ? _2513 : (isnan(_2513) ? _2511 : min(_2513, _2511));
        float _2518 = (_2514 * _1876) + _1865;
        float _2519 = (_2514 * _1879) + _1869;
        float _2520 = (_2514 * _1882) + _1873;
        float _2521 = _2514 * 9.9999997473787516355514526367188e-05;
        float _2522 = (-1.0) - _2521;
        float _2524 = _2521 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2520 > _2524) || ((_2520 < _2522) || ((_2519 > _2524) || ((_2519 < _2522) || ((_2518 < _2522) || (_2518 > _2524))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2754 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2520, cbModelParam._m0[17u].z, fma(_2519, cbModelParam._m0[17u].y, _2518 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2520, cbModelParam._m0[18u].z, fma(_2519, cbModelParam._m0[18u].y, _2518 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2520, cbModelParam._m0[19u].z, fma(_2519, cbModelParam._m0[19u].y, _2518 * cbModelParam._m0[19u].x))), _1811);
            frontier_phi_27_51_ladder = _2754.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2754.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2754.x * cbModelParam._m0[1u].z;
        }
        _1901 = frontier_phi_27_51_ladder_2;
        _1903 = frontier_phi_27_51_ladder_1;
        _1905 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1885 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_884, _885, _886), _1811);
        _1901 = _1885.x * cbModelParam._m0[1u].z;
        _1903 = _1885.y * cbModelParam._m0[1u].z;
        _1905 = _1885.z * cbModelParam._m0[1u].z;
    }
    float _1918 = (((_909 * _861) + _910) * _876) * ((cbModelParam._m0[1u].w * (_1901 - _1802)) + _1802);
    float _1920 = (((_909 * _863) + _910) * _876) * ((cbModelParam._m0[1u].w * (_1903 - _1804)) + _1804);
    float _1922 = (((_909 * _864) + _910) * _876) * ((cbModelParam._m0[1u].w * (_1905 - _1806)) + _1806);
    float _1925 = fma(_1922, cbSceneParam._m0[89u].z, fma(_1920, cbSceneParam._m0[89u].y, _1918 * cbSceneParam._m0[89u].x));
    float _1928 = fma(_1922, cbSceneParam._m0[90u].z, fma(_1920, cbSceneParam._m0[90u].y, _1918 * cbSceneParam._m0[90u].x));
    float _1931 = fma(_1922, cbSceneParam._m0[91u].z, fma(_1920, cbSceneParam._m0[91u].y, _1918 * cbSceneParam._m0[91u].x));
    uvec4 _1941 = floatBitsToUint(cbInstanceData._m0[_836 + 5u]);
    uint _1943 = _1941.x * 14u;
    uint _1944 = _1943 + 13u;
    float _1951 = _876 + (-1.0);
    float _1956 = (cbLight._m0[_1944].x * _1951) + 1.0;
    float _1957 = (cbLight._m0[_1944].y * _1951) + 1.0;
    float _1958 = (cbLight._m0[_1944].z * _1951) + 1.0;
    float _1959 = (cbLight._m0[_1944].w * _1951) + 1.0;
    uint _1960 = _1943 + 5u;
    float _1966 = isnan(1.0) ? _1957 : (isnan(_1957) ? 1.0 : min(_1957, 1.0));
    uint _1970 = _1943 + 4u;
    float _1976 = isnan(1.0) ? _1956 : (isnan(_1956) ? 1.0 : min(_1956, 1.0));
    uint _1980 = _1943 | 1u;
    float _1991 = dot(vec3(cbLight._m0[_1943].xyz), vec3(_697, _698, _699));
    float _1994 = dot(vec3(cbLight._m0[_1980].xyz), vec3(_697, _698, _699));
    float _4252 = isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0));
    float _4263 = isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0));
    float _1999 = (isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0))) * 0.3183098733425140380859375;
    float _2001 = (isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0))) * 0.3183098733425140380859375;
    float _2008 = ((cbLight._m0[_1960].x * _1966) * _2001) + ((cbLight._m0[_1970].x * _1976) * _1999);
    float _2009 = ((_1966 * cbLight._m0[_1960].y) * _2001) + ((_1976 * cbLight._m0[_1970].y) * _1999);
    float _2010 = ((_1966 * cbLight._m0[_1960].z) * _2001) + ((_1976 * cbLight._m0[_1970].z) * _1999);
    uvec4 _2014 = floatBitsToUint(cbLight._m0[_1943 + 12u]);
    bool _2016 = _2014.x == 0u;
    float _2027;
    float _2029;
    float _2031;
    if (_2016)
    {
        _2027 = _2008;
        _2029 = _2009;
        _2031 = _2010;
    }
    else
    {
        uint _2035 = _1943 + 6u;
        float _2051 = (dot(vec3(cbLight._m0[_1943 + 2u].xyz), vec3(_697, _698, _699)) * 0.5) + 0.5;
        float _2052 = _2051 * _2051;
        float _4274 = isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0));
        float _2053 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
        float _2054 = isnan(1.0) ? _1958 : (isnan(_1958) ? 1.0 : min(_1958, 1.0));
        _2027 = (((cbLight._m0[_2035].x * 0.3183098733425140380859375) * _2053) * _2054) + _2008;
        _2029 = (((cbLight._m0[_2035].y * 0.3183098733425140380859375) * _2053) * _2054) + _2009;
        _2031 = (((cbLight._m0[_2035].z * 0.3183098733425140380859375) * _2053) * _2054) + _2010;
    }
    bool _2034 = _2014.y == 0u;
    float _2072;
    float _2074;
    float _2076;
    if (_2034)
    {
        _2072 = _2027;
        _2074 = _2029;
        _2076 = _2031;
    }
    else
    {
        uint _2242 = _1943 + 7u;
        float _2258 = (dot(vec3(cbLight._m0[_1943 + 3u].xyz), vec3(_697, _698, _699)) * 0.5) + 0.5;
        float _2259 = _2258 * _2258;
        float _4290 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
        float _2260 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
        float _2261 = isnan(1.0) ? _1959 : (isnan(_1959) ? 1.0 : min(_1959, 1.0));
        _2072 = (((cbLight._m0[_2242].x * 0.3183098733425140380859375) * _2260) * _2261) + _2027;
        _2074 = (((cbLight._m0[_2242].y * 0.3183098733425140380859375) * _2260) * _2261) + _2029;
        _2076 = (((cbLight._m0[_2242].z * 0.3183098733425140380859375) * _2260) * _2261) + _2031;
    }
    uint _2079 = _1943 + 8u;
    float _2092 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1943].w)) * _700) * 0.949999988079071044921875);
    float _2093 = _2092 * _2092;
    float _2094 = cbLight._m0[_1943].x + _781;
    float _2095 = cbLight._m0[_1943].y + _782;
    float _2096 = cbLight._m0[_1943].z + _783;
    float _2100 = inversesqrt(dot(vec3(_2094, _2095, _2096), vec3(_2094, _2095, _2096)));
    float _2101 = _2100 * _2094;
    float _2102 = _2100 * _2095;
    float _2103 = _2100 * _2096;
    float _2104 = dot(vec3(_697, _698, _699), vec3(cbLight._m0[_1943].xyz));
    float _4306 = isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0));
    float _2107 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
    float _4317 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
    float _2108 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
    float _2109 = dot(vec3(_697, _698, _699), vec3(_2101, _2102, _2103));
    float _4328 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
    float _2112 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
    float _2113 = dot(vec3(cbLight._m0[_1943].xyz), vec3(_2101, _2102, _2103));
    float _4339 = isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0));
    float _2117 = _2093 * _2093;
    float _2121 = ((_2112 * _2112) * (_2117 + (-1.0))) + 1.0;
    float _2129 = exp2(log2(1.0 - (isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0)))) * 5.0);
    float _2130 = 0.959999978542327880859375 - _858;
    float _2132 = 0.959999978542327880859375 - _859;
    float _2133 = 0.959999978542327880859375 - _860;
    float _2140 = 1.0 - _2093;
    float _2151 = (0.5 / (((_2108 * ((_2107 * _2140) + _2093)) + 9.9999999392252902907785028219223e-09) + (((_2108 * _2140) + _2093) * _2107))) * _2107;
    float _4350 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
    float _2153 = (isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0))) * (_2117 / ((_2121 * _2121) * 3.141590118408203125));
    uint _2164 = _1943 + 9u;
    float _2175 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1980].w)) * _700) * 0.949999988079071044921875);
    float _2176 = _2175 * _2175;
    float _2177 = cbLight._m0[_1980].x + _781;
    float _2178 = cbLight._m0[_1980].y + _782;
    float _2179 = cbLight._m0[_1980].z + _783;
    float _2183 = inversesqrt(dot(vec3(_2177, _2178, _2179), vec3(_2177, _2178, _2179)));
    float _2184 = _2183 * _2177;
    float _2185 = _2183 * _2178;
    float _2186 = _2183 * _2179;
    float _2187 = dot(vec3(_697, _698, _699), vec3(cbLight._m0[_1980].xyz));
    float _4361 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
    float _2190 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
    float _2191 = dot(vec3(_697, _698, _699), vec3(_2184, _2185, _2186));
    float _4372 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
    float _2194 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
    float _2195 = dot(vec3(cbLight._m0[_1980].xyz), vec3(_2184, _2185, _2186));
    float _4383 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
    float _2199 = _2176 * _2176;
    float _2203 = ((_2194 * _2194) * (_2199 + (-1.0))) + 1.0;
    float _2210 = exp2(log2(1.0 - (isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0)))) * 5.0);
    float _2217 = 1.0 - _2176;
    float _2227 = (0.5 / (((_2108 * ((_2190 * _2217) + _2176)) + 9.9999999392252902907785028219223e-09) + (((_2108 * _2217) + _2176) * _2190))) * _2190;
    float _4394 = isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0));
    float _2229 = (isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0))) * (_2199 / ((_2203 * _2203) * 3.141590118408203125));
    float _2239 = (((((_2210 * _2130) + _861) * cbLight._m0[_2164].x) * _2229) * _1966) + (((((_2129 * _2130) + _861) * cbLight._m0[_2079].x) * _2153) * _1976);
    float _2240 = (((((_2210 * _2132) + _863) * cbLight._m0[_2164].y) * _2229) * _1966) + (((((_2129 * _2132) + _863) * cbLight._m0[_2079].y) * _2153) * _1976);
    float _2241 = (((((_2210 * _2133) + _864) * cbLight._m0[_2164].z) * _2229) * _1966) + (((((_2129 * _2133) + _864) * cbLight._m0[_2079].z) * _2153) * _1976);
    float _2303;
    float _2305;
    float _2307;
    if (_2016)
    {
        _2303 = _2239;
        _2305 = _2240;
        _2307 = _2241;
    }
    else
    {
        uint _2309 = _1943 + 2u;
        uint _2313 = _1943 + 10u;
        float _2327 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2309].w)) * _700) * 0.949999988079071044921875);
        float _2328 = _2327 * _2327;
        float _2329 = cbLight._m0[_2309].x + _781;
        float _2330 = cbLight._m0[_2309].y + _782;
        float _2331 = cbLight._m0[_2309].z + _783;
        float _2335 = inversesqrt(dot(vec3(_2329, _2330, _2331), vec3(_2329, _2330, _2331)));
        float _2336 = _2335 * _2329;
        float _2337 = _2335 * _2330;
        float _2338 = _2335 * _2331;
        float _2339 = dot(vec3(_697, _698, _699), vec3(cbLight._m0[_2309].xyz));
        float _4405 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
        float _2342 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
        float _2343 = dot(vec3(_697, _698, _699), vec3(_2336, _2337, _2338));
        float _4416 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
        float _2346 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
        float _2347 = dot(vec3(cbLight._m0[_2309].xyz), vec3(_2336, _2337, _2338));
        float _4427 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
        float _2351 = _2328 * _2328;
        float _2355 = ((_2346 * _2346) * (_2351 + (-1.0))) + 1.0;
        float _2362 = exp2(log2(1.0 - (isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0)))) * 5.0);
        float _2369 = 1.0 - _2328;
        float _2379 = (0.5 / (((_2108 * ((_2342 * _2369) + _2328)) + 9.9999999392252902907785028219223e-09) + (((_2108 * _2369) + _2328) * _2342))) * _2342;
        float _4438 = isnan(0.0) ? _2379 : (isnan(_2379) ? 0.0 : max(_2379, 0.0));
        float _2381 = (isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0))) * (_2351 / ((_2355 * _2355) * 3.141590118408203125));
        float _2382 = isnan(1.0) ? _1958 : (isnan(_1958) ? 1.0 : min(_1958, 1.0));
        _2303 = (((((_2362 * _2130) + _861) * cbLight._m0[_2313].x) * _2381) * _2382) + _2239;
        _2305 = (((((_2362 * _2132) + _863) * cbLight._m0[_2313].y) * _2381) * _2382) + _2240;
        _2307 = (((((_2362 * _2133) + _864) * cbLight._m0[_2313].z) * _2381) * _2382) + _2241;
    }
    float _2417;
    float _2419;
    float _2421;
    if (_2034)
    {
        _2417 = _2303;
        _2419 = _2305;
        _2421 = _2307;
    }
    else
    {
        uint _2428 = _1943 + 3u;
        uint _2432 = _1943 + 11u;
        float _2446 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2428].w)) * _700) * 0.949999988079071044921875);
        float _2447 = _2446 * _2446;
        float _2448 = cbLight._m0[_2428].x + _781;
        float _2449 = cbLight._m0[_2428].y + _782;
        float _2450 = cbLight._m0[_2428].z + _783;
        float _2454 = inversesqrt(dot(vec3(_2448, _2449, _2450), vec3(_2448, _2449, _2450)));
        float _2455 = _2454 * _2448;
        float _2456 = _2454 * _2449;
        float _2457 = _2454 * _2450;
        float _2458 = dot(vec3(_697, _698, _699), vec3(cbLight._m0[_2428].xyz));
        float _4454 = isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0));
        float _2461 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
        float _2462 = dot(vec3(_697, _698, _699), vec3(_2455, _2456, _2457));
        float _4465 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
        float _2465 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
        float _2466 = dot(vec3(cbLight._m0[_2428].xyz), vec3(_2455, _2456, _2457));
        float _4476 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
        float _2470 = _2447 * _2447;
        float _2474 = ((_2465 * _2465) * (_2470 + (-1.0))) + 1.0;
        float _2481 = exp2(log2(1.0 - (isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0)))) * 5.0);
        float _2488 = 1.0 - _2447;
        float _2498 = (0.5 / (((_2108 * ((_2461 * _2488) + _2447)) + 9.9999999392252902907785028219223e-09) + (((_2108 * _2488) + _2447) * _2461))) * _2461;
        float _4487 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0));
        float _2500 = (isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0))) * (_2470 / ((_2474 * _2474) * 3.141590118408203125));
        float _2501 = isnan(1.0) ? _1959 : (isnan(_1959) ? 1.0 : min(_1959, 1.0));
        _2417 = (((((_2481 * _2130) + _861) * cbLight._m0[_2432].x) * _2500) * _2501) + _2303;
        _2419 = (((((_2481 * _2132) + _863) * cbLight._m0[_2432].y) * _2500) * _2501) + _2305;
        _2421 = (((((_2481 * _2133) + _864) * cbLight._m0[_2432].z) * _2500) * _2501) + _2307;
    }
    float _2636;
    float _2638;
    float _2640;
    float _2642;
    float _2644;
    float _2646;
    if (_1941.y == 0u)
    {
        float _2576 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2577 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2576;
        float _2578 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2576;
        float _2579 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2576;
        uvec4 _2591 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2592 = _2591.x;
        uint _2603 = uint((float(_2591.y) * floor(float(uint(cbSceneParam._m0[85u].y * _799) / _2592))) + floor(float(uint(cbSceneParam._m0[85u].x * _798) / _2592)));
        float _2613 = (log2(_2579 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2614 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
        uint _2617 = uint(isnan(14.0) ? _2614 : (isnan(_2614) ? 14.0 : min(_2614, 14.0)));
        uvec4 _2622 = texelFetch(g_lightClusterGridBuffer, int(((_2617 << 2u) + (_2603 << 6u)) >> 2u));
        uint _2623 = _2622.x;
        uint _2624 = _2591.z;
        float _2759;
        float _2761;
        float _2763;
        float _2765;
        float _2767;
        float _2769;
        if (((((1u << ((_2624 >> 4u) & 15u)) + 4294967295u) & _2623) == 0u) || ((_2624 & 240u) == 0u))
        {
            _2759 = 0.0;
            _2761 = 0.0;
            _2763 = 0.0;
            _2765 = 0.0;
            _2767 = 0.0;
            _2769 = 0.0;
        }
        else
        {
            float _2760;
            float _2762;
            float _2764;
            float _2766;
            float _2768;
            float _2770;
            float _2921 = 0.0;
            float _2922 = 0.0;
            float _2923 = 0.0;
            float _2924 = 0.0;
            float _2925 = 0.0;
            float _2926 = 0.0;
            uint _2927 = 0u;
            uint _2936;
            bool _2937;
            for (;;)
            {
                _2936 = texelFetch(g_lightClassification, int((((_2617 << 5u) + (_2603 << 9u)) + (_2927 << 2u)) >> 2u)).x;
                _2937 = _2936 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2937)
                {
                    frontier_phi_68_pred = _2921;
                    frontier_phi_68_pred_1 = _2926;
                    frontier_phi_68_pred_2 = _2925;
                    frontier_phi_68_pred_3 = _2924;
                    frontier_phi_68_pred_4 = _2923;
                    frontier_phi_68_pred_5 = _2922;
                }
                else
                {
                    float _3066;
                    float _3067;
                    float _3068;
                    float _3069;
                    float _3070;
                    float _3071;
                    uint _3072;
                    _3066 = _2921;
                    _3067 = _2922;
                    _3068 = _2923;
                    _3069 = _2924;
                    _3070 = _2925;
                    _3071 = _2926;
                    _3072 = _2936;
                    float _2993;
                    float _2994;
                    float _2995;
                    float _2996;
                    float _2997;
                    float _2998;
                    for (;;)
                    {
                        uint _3076 = uint(findLSB(_3072)) + (_2927 << 5u);
                        uint _3073 = (_3072 + 4294967295u) & _3072;
                        uint _3078 = _3076 * 48u;
                        vec4 _3092 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3078)).x, texelFetch(g_PointLightRenderingBuffer, int(_3078 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3078 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3078 + 3u)).x));
                        uint _3098 = (_3076 * 48u) + 4u;
                        vec4 _3111 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3098)).x, texelFetch(g_PointLightRenderingBuffer, int(_3098 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3098 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3098 + 3u)).x));
                        uint _3117 = (_3076 * 48u) + 8u;
                        vec3 _3128 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3117)).x, texelFetch(g_PointLightRenderingBuffer, int(_3117 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3117 + 2u)).x));
                        float _3132 = _3092.x - _2577;
                        float _3133 = _3092.y - _2578;
                        float _3134 = _3092.z - _2579;
                        float _3135 = dot(vec3(_3132, _3133, _3134), vec3(_3132, _3133, _3134));
                        float _3138 = inversesqrt(_3135);
                        float _3139 = _3138 * _3132;
                        float _3140 = _3138 * _3133;
                        float _3141 = _3138 * _3134;
                        float _3142 = dot(vec3(_817, _820, _823), vec3(_3139, _3140, _3141));
                        float _3147 = 1.0 - (_3135 * _3092.w);
                        float _4513 = isnan(0.0) ? _3147 : (isnan(_3147) ? 0.0 : max(_3147, 0.0));
                        float _3148 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
                        float _3149 = sqrt(_3135) * _3111.w;
                        float _3152 = 1.39999997615814208984375 / (_3149 + 1.39999997615814208984375);
                        float _3153 = _3152 * _3152;
                        float _3156 = ((1.0 - _3153) * _3142) + _3153;
                        float _3159 = _3149 * _3149;
                        float _3163 = ((isnan(0.0) ? _3156 : (isnan(_3156) ? 0.0 : max(_3156, 0.0))) * _3148) / ((_3159 * 0.699999988079071044921875) + 1.0);
                        float _3167 = (-0.0) - _2577;
                        float _3168 = (-0.0) - _2578;
                        float _3169 = (-0.0) - _2579;
                        float _3173 = inversesqrt(dot(vec3(_3167, _3168, _3169), vec3(_3167, _3168, _3169)));
                        float _3174 = _3173 * _3167;
                        float _3175 = _3173 * _3168;
                        float _3176 = _3173 * _3169;
                        float _3184 = exp2(log2(1.0 / ((_3159 * 3.5) + 5.0)) * 0.25);
                        float _3185 = 1.0 - _892;
                        float _3192 = sqrt(1.0 - ((1.0 - (_3185 * _3185)) * (1.0 - (_3184 * _3184))));
                        float _3193 = _3192 * _3192;
                        float _3194 = _3193 * _3193;
                        float _3195 = _3174 + _3139;
                        float _3196 = _3175 + _3140;
                        float _3197 = _3176 + _3141;
                        float _3201 = inversesqrt(dot(vec3(_3195, _3196, _3197), vec3(_3195, _3196, _3197)));
                        float _3205 = dot(vec3(_817, _820, _823), vec3(_3174, _3175, _3176));
                        float _4529 = isnan(0.0) ? _3205 : (isnan(_3205) ? 0.0 : max(_3205, 0.0));
                        float _3208 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
                        float _3209 = dot(vec3(_817, _820, _823), vec3(_3201 * _3195, _3201 * _3196, _3201 * _3197));
                        float _4540 = isnan(0.0) ? _3209 : (isnan(_3209) ? 0.0 : max(_3209, 0.0));
                        float _3212 = isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0));
                        float _3216 = ((_3212 * _3212) * (_3194 + (-1.0))) + 1.0;
                        float _3217 = _3152 * _3193;
                        float _3218 = _3217 * _3217;
                        float _3221 = ((1.0 - _3218) * _3142) + _3218;
                        float _4551 = isnan(0.0) ? _3221 : (isnan(_3221) ? 0.0 : max(_3221, 0.0));
                        float _3222 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
                        float _3223 = 1.0 - _3193;
                        float _3233 = (0.5 / (((_3222 * ((_3208 * _3223) + _3193)) + 9.9999999392252902907785028219223e-09) + (((_3222 * _3223) + _3193) * _3208))) * _3222;
                        float _4562 = isnan(0.0) ? _3233 : (isnan(_3233) ? 0.0 : max(_3233, 0.0));
                        float _3244 = (((_3194 * 3.1415927410125732421875) * (isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0)))) / ((_3216 * _3216) * ((_3159 * 2.1991131305694580078125) + 3.141590118408203125))) * _3148;
                        _2996 = (_3163 * _3111.x) + _3069;
                        _2997 = (_3163 * _3111.y) + _3070;
                        _2998 = (_3163 * _3111.z) + _3071;
                        _2993 = (_3244 * _3128.x) + _3066;
                        _2994 = (_3244 * _3128.y) + _3067;
                        _2995 = (_3244 * _3128.z) + _3068;
                        if (_3073 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3066 = _2993;
                            _3067 = _2994;
                            _3068 = _2995;
                            _3069 = _2996;
                            _3070 = _2997;
                            _3071 = _2998;
                            _3072 = _3073;
                        }
                    }
                    frontier_phi_68_pred = _2993;
                    frontier_phi_68_pred_1 = _2998;
                    frontier_phi_68_pred_2 = _2997;
                    frontier_phi_68_pred_3 = _2996;
                    frontier_phi_68_pred_4 = _2995;
                    frontier_phi_68_pred_5 = _2994;
                }
                _2760 = frontier_phi_68_pred;
                _2770 = frontier_phi_68_pred_1;
                _2768 = frontier_phi_68_pred_2;
                _2766 = frontier_phi_68_pred_3;
                _2764 = frontier_phi_68_pred_4;
                _2762 = frontier_phi_68_pred_5;
                uint _2928 = _2927 + 1u;
                if (_2928 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2921 = _2760;
                    _2922 = _2762;
                    _2923 = _2764;
                    _2924 = _2766;
                    _2925 = _2768;
                    _2926 = _2770;
                    _2927 = _2928;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2759 = _2760;
            _2761 = _2762;
            _2763 = _2764;
            _2765 = _2766;
            _2767 = _2768;
            _2769 = _2770;
        }
        uvec4 _2773 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2774 = _2773.z;
        uint _2776 = (_2774 >> 8u) & 15u;
        float _2889;
        float _2891;
        float _2893;
        float _2895;
        float _2897;
        float _2899;
        if (((4294967295u << _2776) & _2623) == 0u)
        {
            _2889 = _2759;
            _2891 = _2761;
            _2893 = _2763;
            _2895 = _2765;
            _2897 = _2767;
            _2899 = _2769;
        }
        else
        {
            float _2914 = inversesqrt(dot(vec3(_2577, _2578, _2579), vec3(_2577, _2578, _2579)));
            float _2915 = _2914 * _2577;
            float _2916 = _2914 * _2578;
            float _2917 = _2914 * _2579;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2776 < ((_2774 >> 12u) & 15u))
            {
                float _2890;
                float _2892;
                float _2894;
                float _2896;
                float _2898;
                float _2900;
                float _3049 = _2759;
                float _3050 = _2761;
                float _3051 = _2763;
                float _3052 = _2765;
                float _3053 = _2767;
                float _3054 = _2769;
                uint _3055 = _2776;
                uint _3064;
                bool _3065;
                for (;;)
                {
                    _3064 = texelFetch(g_lightClassification, int((((_2617 << 5u) + (_2603 << 9u)) + (_3055 << 2u)) >> 2u)).x;
                    _3065 = _3064 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3065)
                    {
                        frontier_phi_79_pred = _3054;
                        frontier_phi_79_pred_1 = _3053;
                        frontier_phi_79_pred_2 = _3052;
                        frontier_phi_79_pred_3 = _3051;
                        frontier_phi_79_pred_4 = _3050;
                        frontier_phi_79_pred_5 = _3049;
                    }
                    else
                    {
                        float _3258;
                        float _3259;
                        float _3260;
                        float _3261;
                        float _3262;
                        float _3263;
                        float _3551;
                        float _3552;
                        float _3553;
                        float _3554;
                        float _3555;
                        float _3556;
                        float _3271 = _3049;
                        float _3272 = _3050;
                        float _3273 = _3051;
                        float _3274 = _3052;
                        float _3275 = _3053;
                        float _3276 = _3054;
                        uint _3277 = _3064;
                        uint _3278;
                        vec4 _3303;
                        float _3304;
                        vec4 _3319;
                        vec3 _3331;
                        vec4 _3346;
                        vec4 _3361;
                        float _3407;
                        bool _3408;
                        for (;;)
                        {
                            uint _3288 = ((_3055 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3277));
                            _3278 = (_3277 + 4294967295u) & _3277;
                            uint _3290 = _3288 * 40u;
                            _3303 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3290)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3290 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3290 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3290 + 3u)).x));
                            _3304 = _3303.w;
                            uint _3306 = (_3288 * 40u) + 4u;
                            _3319 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3306)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 3u)).x));
                            uint _3321 = (_3288 * 40u) + 8u;
                            _3331 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3321)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 2u)).x));
                            uint _3333 = (_3288 * 40u) + 16u;
                            _3346 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3333)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 3u)).x));
                            uint _3348 = (_3288 * 40u) + 20u;
                            _3361 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3348)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 3u)).x));
                            uint _3363 = (_3288 * 40u) + 24u;
                            vec4 _3376 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3363)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 3u)).x));
                            uint _3382 = (_3288 * 40u) + 28u;
                            vec4 _3395 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3382)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 3u)).x));
                            _3407 = fma(_2579, _3395.z, fma(_2578, _3395.y, _3395.x * _2577)) + _3395.w;
                            _3408 = !((fma(_2579, _3376.z, fma(_2578, _3376.y, _3376.x * _2577)) + _3376.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3408)
                            {
                                float _3435 = _3303.x - _2577;
                                float _3436 = _3303.y - _2578;
                                float _3437 = _3303.z - _2579;
                                float _3438 = dot(vec3(_3435, _3436, _3437), vec3(_3435, _3436, _3437));
                                float _3441 = inversesqrt(_3438);
                                float _3442 = _3441 * _3435;
                                float _3443 = _3441 * _3436;
                                float _3444 = _3441 * _3437;
                                float _3448 = 1.0 - (_3438 / (_3304 * _3304));
                                float _4573 = isnan(0.0) ? _3448 : (isnan(_3448) ? 0.0 : max(_3448, 0.0));
                                float _3449 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
                                float _3453 = sqrt(_3438) * _3319.w;
                                float _3455 = 1.39999997615814208984375 / (_3453 + 1.39999997615814208984375);
                                float _3456 = _3455 * _3455;
                                float _3459 = ((1.0 - _3456) * dot(vec3(_3442, _3443, _3444), vec3(_817, _820, _823))) + _3456;
                                float _3462 = _3453 * _3453;
                                float _3466 = (fma(_2579, _3346.z, fma(_2578, _3346.y, _3346.x * _2577)) + _3346.w) / _3407;
                                float _3467 = (fma(_2579, _3361.z, fma(_2578, _3361.y, _3361.x * _2577)) + _3361.w) / _3407;
                                float _3471 = 1.0 - dot(vec2(_3466, _3467), vec2(_3466, _3467));
                                float _4589 = isnan(0.0) ? _3471 : (isnan(_3471) ? 0.0 : max(_3471, 0.0));
                                float _3472 = isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0));
                                float _3473 = _3472 * (((isnan(0.0) ? _3459 : (isnan(_3459) ? 0.0 : max(_3459, 0.0))) * _3449) / ((_3462 * 0.699999988079071044921875) + 1.0));
                                float _3485 = exp2(log2(1.0 / ((_3462 * 3.5) + 5.0)) * 0.25);
                                float _3486 = 1.0 - _892;
                                float _3493 = sqrt(1.0 - ((1.0 - (_3486 * _3486)) * (1.0 - (_3485 * _3485))));
                                float _3494 = _3493 * _3493;
                                float _3495 = _3494 * _3494;
                                float _3496 = _3442 - _2915;
                                float _3497 = _3443 - _2916;
                                float _3498 = _3444 - _2917;
                                float _3502 = inversesqrt(dot(vec3(_3496, _3497, _3498), vec3(_3496, _3497, _3498)));
                                float _3506 = dot(vec3(_817, _820, _823), vec3((-0.0) - _2915, (-0.0) - _2916, (-0.0) - _2917));
                                float _4600 = isnan(0.0) ? _3506 : (isnan(_3506) ? 0.0 : max(_3506, 0.0));
                                float _3509 = isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0));
                                float _3510 = dot(vec3(_817, _820, _823), vec3(_3502 * _3496, _3502 * _3497, _3502 * _3498));
                                float _4611 = isnan(0.0) ? _3510 : (isnan(_3510) ? 0.0 : max(_3510, 0.0));
                                float _3513 = isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0));
                                float _3517 = ((_3513 * _3513) * (_3495 + (-1.0))) + 1.0;
                                float _3518 = _3455 * _3494;
                                float _3519 = _3518 * _3518;
                                float _3525 = ((1.0 - _3519) * dot(vec3(_817, _820, _823), vec3(_3442, _3443, _3444))) + _3519;
                                float _4622 = isnan(0.0) ? _3525 : (isnan(_3525) ? 0.0 : max(_3525, 0.0));
                                float _3526 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
                                float _3527 = 1.0 - _3494;
                                float _3537 = (0.5 / (((_3526 * ((_3509 * _3527) + _3494)) + 9.9999999392252902907785028219223e-09) + (((_3526 * _3527) + _3494) * _3509))) * _3526;
                                float _4633 = isnan(0.0) ? _3537 : (isnan(_3537) ? 0.0 : max(_3537, 0.0));
                                float _3547 = (_3472 * _3449) * (((_3495 * 3.1415927410125732421875) * (isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0)))) / ((_3517 * _3517) * ((_3462 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3473 * _3319.y;
                                frontier_phi_85_pred_1 = _3473 * _3319.x;
                                frontier_phi_85_pred_2 = _3547 * _3331.z;
                                frontier_phi_85_pred_3 = _3547 * _3331.y;
                                frontier_phi_85_pred_4 = _3547 * _3331.x;
                                frontier_phi_85_pred_5 = _3473 * _3319.z;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3555 = frontier_phi_85_pred;
                            _3554 = frontier_phi_85_pred_1;
                            _3553 = frontier_phi_85_pred_2;
                            _3552 = frontier_phi_85_pred_3;
                            _3551 = frontier_phi_85_pred_4;
                            _3556 = frontier_phi_85_pred_5;
                            _3261 = _3554 + _3274;
                            _3262 = _3555 + _3275;
                            _3263 = _3556 + _3276;
                            _3258 = _3551 + _3271;
                            _3259 = _3552 + _3272;
                            _3260 = _3553 + _3273;
                            if (_3278 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3271 = _3258;
                                _3272 = _3259;
                                _3273 = _3260;
                                _3274 = _3261;
                                _3275 = _3262;
                                _3276 = _3263;
                                _3277 = _3278;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3263;
                        frontier_phi_79_pred_1 = _3262;
                        frontier_phi_79_pred_2 = _3261;
                        frontier_phi_79_pred_3 = _3260;
                        frontier_phi_79_pred_4 = _3259;
                        frontier_phi_79_pred_5 = _3258;
                    }
                    _2900 = frontier_phi_79_pred;
                    _2898 = frontier_phi_79_pred_1;
                    _2896 = frontier_phi_79_pred_2;
                    _2894 = frontier_phi_79_pred_3;
                    _2892 = frontier_phi_79_pred_4;
                    _2890 = frontier_phi_79_pred_5;
                    uint _3056 = _3055 + 1u;
                    if (_3056 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3049 = _2890;
                        _3050 = _2892;
                        _3051 = _2894;
                        _3052 = _2896;
                        _3053 = _2898;
                        _3054 = _2900;
                        _3055 = _3056;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2894;
                frontier_phi_60_61_ladder_1 = _2900;
                frontier_phi_60_61_ladder_2 = _2898;
                frontier_phi_60_61_ladder_3 = _2896;
                frontier_phi_60_61_ladder_4 = _2892;
                frontier_phi_60_61_ladder_5 = _2890;
            }
            else
            {
                frontier_phi_60_61_ladder = _2763;
                frontier_phi_60_61_ladder_1 = _2769;
                frontier_phi_60_61_ladder_2 = _2767;
                frontier_phi_60_61_ladder_3 = _2765;
                frontier_phi_60_61_ladder_4 = _2761;
                frontier_phi_60_61_ladder_5 = _2759;
            }
            _2889 = frontier_phi_60_61_ladder_5;
            _2891 = frontier_phi_60_61_ladder_4;
            _2893 = frontier_phi_60_61_ladder;
            _2895 = frontier_phi_60_61_ladder_3;
            _2897 = frontier_phi_60_61_ladder_2;
            _2899 = frontier_phi_60_61_ladder_1;
        }
        float _2904 = isnan(1.0) ? _876 : (isnan(_876) ? 1.0 : min(_876, 1.0));
        _2636 = (_2904 * _2895) + _2072;
        _2638 = (_2904 * _2897) + _2074;
        _2640 = (_2904 * _2899) + _2076;
        _2642 = ((_2889 * _861) * _2904) + _2417;
        _2644 = ((_2891 * _863) * _2904) + _2419;
        _2646 = ((_2893 * _864) * _2904) + _2421;
    }
    else
    {
        _2636 = _2072;
        _2638 = _2074;
        _2640 = _2076;
        _2642 = _2417;
        _2644 = _2419;
        _2646 = _2421;
    }
    uint _2652 = _837 + uint(cbMatDynParam._m0[0u].w);
    float _2660 = ((cbMtdParam._m0[20u].x * cbMtdParam._m0[25u].x) * _627.x) * cbInstanceData._m0[_2652].x;
    float _2663 = ((cbMtdParam._m0[20u].y * cbMtdParam._m0[25u].x) * _627.y) * cbInstanceData._m0[_2652].y;
    float _2666 = ((cbMtdParam._m0[20u].z * cbMtdParam._m0[25u].x) * _627.z) * cbInstanceData._m0[_2652].z;
    float _4649 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
    float _4660 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
    float _4671 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
    float _2683 = (((isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0))) * (_2636 + ((isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0))) * _876))) + ((_2642 + ((isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0))) * _1710)) * cbPerFrame._m0[3u].x)) + _2660;
    float _2685 = (_2663 + ((_2644 + ((isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0))) * _1710)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0))) * (_2638 + ((isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0))) * _876)));
    float _2687 = (_2666 + ((_2646 + ((isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0))) * _1710)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0))) * (_2640 + ((isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0))) * _876)));
    float _2688 = isnan(0.0) ? _2683 : (isnan(_2683) ? 0.0 : max(_2683, 0.0));
    float _2689 = isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : max(_2685, 0.0));
    float _2690 = isnan(0.0) ? _2687 : (isnan(_2687) ? 0.0 : max(_2687, 0.0));
    float _2696 = cbMtdParam._m0[2u].x * _2660;
    float _2697 = cbMtdParam._m0[2u].y * _2663;
    float _2698 = cbMtdParam._m0[2u].z * _2666;
    float _4697 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2700 = isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0));
    uint _2701 = _836 + 6u;
    float _2709 = _798 / cbSceneParam._m0[86u].x;
    float _2710 = _799 / cbSceneParam._m0[86u].y;
    vec4 _2724 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2709, _2710, (log2((isnan(cbSceneParam._m0[77u].w) ? _724 : (isnan(_724) ? cbSceneParam._m0[77u].w : min(_724, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2726 = _2724.x;
    float _2727 = _2724.y;
    float _2728 = _2724.z;
    float _2729 = _2724.w;
    float _2822;
    float _2824;
    float _2826;
    float _2828;
    if (_724 > cbSceneParam._m0[78u].w)
    {
        float _2784 = isnan(_724) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _724 : min(cbSceneParam._m0[80u].w, _724));
        float _2785 = _2784 / _724;
        float _2796 = _2785 * _774;
        float _2797 = _775 * _2785;
        float _2798 = (-0.0) - _2797;
        float _2800 = _2785 * _776;
        float _2802 = (cbSceneParam._m0[77u].w * _2798) / _2784;
        float _2803 = _2802 + cbSceneParam._m0[79u].w;
        float _2804 = cbSceneParam._m0[79u].w - _2797;
        float _2810 = sqrt(((_2796 * _2796) + (_2797 * _2797)) + (_2800 * _2800));
        float _2813 = (1.0 - (cbSceneParam._m0[77u].w / _2784)) * _2810;
        float _2818 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2820 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3006;
        if (abs((_2798 - _2802) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3006 = ((((_2803 > 0.0) ? exp2(_2818 * _2803) : (2.0 - exp2(_2820 * _2803))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2813;
        }
        else
        {
            float _2950 = 1.0 / cbSceneParam._m0[80u].x;
            float _2951 = isnan(_2804) ? _2803 : (isnan(_2803) ? _2804 : max(_2803, _2804));
            float _2952 = isnan(_2804) ? _2803 : (isnan(_2803) ? _2804 : min(_2803, _2804));
            float _2961 = isnan(0.0) ? _2951 : (isnan(_2951) ? 0.0 : min(_2951, 0.0));
            float _2962 = isnan(0.0) ? _2952 : (isnan(_2952) ? 0.0 : min(_2952, 0.0));
            _3006 = ((abs(_2810 / _2798) * cbSceneParam._m0[80u].y) * ((((_2961 - _2962) * 2.0) - ((exp2(_2818 * (isnan(0.0) ? _2951 : (isnan(_2951) ? 0.0 : max(_2951, 0.0)))) - exp2(_2818 * (isnan(0.0) ? _2952 : (isnan(_2952) ? 0.0 : max(_2952, 0.0))))) * _2950)) - ((exp2(_2820 * _2961) - exp2(_2820 * _2962)) * _2950))) + (_2813 * cbSceneParam._m0[80u].z);
        }
        vec4 _3008 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2709, _2710, 1.0), 0.0);
        float _3017 = exp2((_3006 * (-1.44269502162933349609375)) * (1.0 - _3008.w));
        float _3018 = log2(_3017);
        float _3034 = log2(_2729);
        _2822 = (exp2(_3034 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3018 * cbSceneParam._m0[78u].x)) * _3008.x) / cbSceneParam._m0[78u].x)) + _2726;
        _2824 = (exp2(_3034 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3018 * cbSceneParam._m0[78u].y)) * _3008.y) / cbSceneParam._m0[78u].y)) + _2727;
        _2826 = (exp2(_3034 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3018 * cbSceneParam._m0[78u].z)) * _3008.z) / cbSceneParam._m0[78u].z)) + _2728;
        _2828 = _3017 * _2729;
    }
    else
    {
        _2822 = _2726;
        _2824 = _2727;
        _2826 = _2728;
        _2828 = _2729;
    }
    bool _3044;
    vec4 _2838;
    vec4 _2860;
    float _2862;
    float _2866;
    float _2867;
    float _2868;
    float _2871;
    float _2874;
    float _2877;
    float _2878;
    bool _2888;
    for (;;)
    {
        _2838 = cbMatDynParam._m0[0u];
        float _2840 = roundEven(_2838.y);
        bool _2841 = _2840 == 3.0;
        float _2842 = log2(_2828);
        float _2846 = exp2(_2842 * cbSceneParam._m0[78u].x);
        float _2847 = exp2(_2842 * cbSceneParam._m0[78u].y);
        float _2848 = exp2(_2842 * cbSceneParam._m0[78u].z);
        float _2849 = _2846 * _2688;
        float _2850 = _2847 * _2689;
        float _2851 = _2848 * _2690;
        float _2858 = _787 + (-0.5);
        _2860 = cbMtdParam._m0[1u];
        _2862 = _2860.y * _2858;
        float _2865 = (_2840 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2866 = _2865 * (_2841 ? _2849 : (_2849 + (cbSceneParam._m0[72u].w * _2822)));
        _2867 = _2865 * (_2841 ? _2850 : (_2850 + (cbSceneParam._m0[72u].w * _2824)));
        _2868 = _2865 * (_2841 ? _2851 : (_2851 + (cbSceneParam._m0[72u].w * _2826)));
        _2871 = ((_2696 * _2700) * _2846) * _2865;
        _2874 = ((_2697 * _2700) * _2847) * _2865;
        _2877 = ((_2698 * _2700) * _2848) * _2865;
        _2878 = _2858 * 0.999000012874603271484375;
        _2888 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2888)
        {
            if ((cbInstanceData._m0[_836 + 7u].x + _2878) < 0.5)
            {
                _3044 = true;
                break;
            }
        }
        uint _2985 = _837 + uint(_2838.w);
        if ((cbInstanceData._m0[_2985].w < 1.0) && ((cbInstanceData._m0[_2985].w + _2878) < 0.5))
        {
            _3044 = true;
            break;
        }
        if ((_2862 + 1.0) < _2860.x)
        {
            _3044 = true;
            break;
        }
        _3044 = false;
        break;
    }
    float _3249;
    if (_3044)
    {
        discard_state = true;
        _3249 = 0.0;
    }
    else
    {
        _3249 = cbInstanceData._m0[_2701].w;
    }
    SV_Target.x = _2866;
    SV_Target.y = _2867;
    SV_Target.z = _2868;
    SV_Target.w = _3249;
    SV_Target_1.x = _2871;
    SV_Target_1.y = _2874;
    SV_Target_1.z = _2877;
    SV_Target_1.w = cbInstanceData._m0[_2701].w;
    discard_exit();
}


