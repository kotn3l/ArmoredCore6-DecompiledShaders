#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[29];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 12) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 9) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2DArray C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_0;
layout(set = 0, binding = 14) uniform texture2DArray C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1226;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _201 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _202 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _203 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _209 = inversesqrt(dot(vec3(_201, _202, _203), vec3(_201, _202, _203)));
    float _216 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _223 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _244 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_1) + cbTextureTilingScale._m0[10u].w));
    float _258 = exp2(log2(_244.w * cbMtdParam._m0[25u].z) * cbMtdParam._m0[22u].x);
    float _259 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    float _260 = isnan(1.0) ? _259 : (isnan(_259) ? 1.0 : min(_259, 1.0));
    vec4 _274 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _278 = _274.z;
    float _287 = exp2(log2(_278 * cbMtdParam._m0[22u].y) * cbMtdParam._m0[21u].y);
    float _288 = isnan(0.0) ? _287 : (isnan(_287) ? 0.0 : max(_287, 0.0));
    float _289 = isnan(1.0) ? _288 : (isnan(_288) ? 1.0 : min(_288, 1.0));
    float _310 = roundEven(5.0 - ((texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w)).x + (-0.02500000037252902984619140625)) * 8.0));
    float _311 = isnan(0.0) ? _310 : (isnan(_310) ? 0.0 : max(_310, 0.0));
    float _312 = isnan(4.0) ? _311 : (isnan(_311) ? 4.0 : min(_311, 4.0));
    float _325 = floor(_312);
    vec4 _328 = texture(sampler2DArray(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w, _325));
    vec4 _352 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _363 = cbMtdParam._m0[9u].x * _352.x;
    float _364 = cbMtdParam._m0[9u].y * _352.y;
    float _365 = cbMtdParam._m0[9u].z * _352.z;
    float _372 = (((cbMtdParam._m0[10u].x * _328.x) - _363) * _289) + _363;
    float _373 = (((cbMtdParam._m0[10u].y * _328.y) - _364) * _289) + _364;
    float _374 = (((cbMtdParam._m0[10u].z * _328.z) - _365) * _289) + _365;
    float _380 = exp2(log2(_274.w) * cbMtdParam._m0[22u].w);
    vec4 _393 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _413 = (((cbMtdParam._m0[16u].x * _393.x) - _372) * _380) + _372;
    float _414 = (((cbMtdParam._m0[16u].y * _393.y) - _373) * _380) + _373;
    float _415 = (((cbMtdParam._m0[16u].z * _393.z) - _374) * _380) + _374;
    vec4 _428 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _453 = (_244.x * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].x * _428.x) - _413) * _260) + _413);
    float _455 = (_244.y * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].y * _428.y) - _414) * _260) + _414);
    float _457 = (_244.z * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].z * _428.z) - _415) * _260) + _415);
    float _180[5];
    float _181[5];
    _180[0u] = cbMtdParam._m0[25u].w;
    _181[0u] = cbMtdParam._m0[26u].x;
    _180[1u] = cbMtdParam._m0[27u].w;
    _181[1u] = cbMtdParam._m0[28u].x;
    _180[2u] = cbMtdParam._m0[27u].y;
    _181[2u] = cbMtdParam._m0[27u].z;
    _180[3u] = cbMtdParam._m0[26u].w;
    _181[3u] = cbMtdParam._m0[27u].x;
    _180[4u] = cbMtdParam._m0[26u].y;
    _181[4u] = cbMtdParam._m0[26u].z;
    float _497 = isnan(0.0) ? _312 : (isnan(_312) ? 0.0 : max(_312, 0.0));
    uint _499 = uint(int(isnan(4.0) ? _497 : (isnan(_497) ? 4.0 : min(_497, 4.0))));
    float _506 = ((_181[_499] - cbMtdParam._m0[21u].z) * _289) + cbMtdParam._m0[21u].z;
    float _509 = ((cbMtdParam._m0[21u].w - _506) * _380) + _506;
    float _512 = ((cbMtdParam._m0[24u].y - _509) * _260) + _509;
    vec4 _528 = texture(sampler2DArray(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w, _325));
    vec4 _545 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _547 = _545.x;
    float _548 = _545.y;
    float _553 = cbMtdParam._m0[21u].x + _545.z;
    float _556 = (((_528.z + _180[_499]) - _553) * _289) + _553;
    vec4 _569 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_1) + cbTextureTilingScale._m0[11u].w));
    float _580 = (((_569.z - _556) + cbMtdParam._m0[25u].y) * _380) + _556;
    float _586 = ((((_278 * 2.0) * _580) - _580) * cbMtdParam._m0[23u].w) + _580;
    vec4 _599 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_1) + cbTextureTilingScale._m0[12u].w));
    float _610 = (((cbMtdParam._m0[22u].z + _599.z) - _586) * _260) + _586;
    vec4 _630 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _647 = ((_528.x - _547) * _289) + _547;
    float _648 = ((_528.y - _548) * _289) + _548;
    float _653 = ((_569.x - _647) * _380) + _647;
    float _654 = ((_569.y - _648) * _380) + _648;
    float _663 = ((((_599.x - _653) * _260) + _653) * 2.0) + (-1.0);
    float _664 = ((((_599.y - _654) * _260) + _654) * 2.0) + (-1.0);
    float _665 = dot(vec2(_663, _664), vec2(_663, _664));
    float _3662 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _670 = sqrt(1.0 - (isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0))));
    float _673 = (cbMtdParam._m0[24u].z * ((_274.x * 2.0) + (-1.0))) + _663;
    float _674 = (cbMtdParam._m0[24u].z * ((_274.y * 2.0) + (-1.0))) + _664;
    float _677 = fma(_670, _216 * NORMAL.x, fma(_674, _223 * TANGENT.x, (_209 * _201) * _673));
    float _680 = fma(_670, _216 * NORMAL.y, fma(_674, _223 * TANGENT.y, (_209 * _202) * _673));
    float _683 = fma(_670, _216 * NORMAL.z, fma(_674, _223 * TANGENT.z, (_209 * _203) * _673));
    float _687 = inversesqrt(dot(vec3(_677, _680, _683), vec3(_677, _680, _683)));
    float _688 = _687 * _677;
    float _689 = _687 * _680;
    float _690 = _687 * _683;
    float _3673 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _691 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
    float _3684 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _3695 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _3706 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _3717 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _695 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
    float _711 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _751 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _761 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _751);
    float _762 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _751);
    float _763 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _751);
    float _767 = inversesqrt(dot(vec3(_761, _762, _763), vec3(_761, _762, _763)));
    float _768 = _761 * _767;
    float _769 = _762 * _767;
    float _770 = _763 * _767;
    float _776 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _777 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _795 = fma(_690, cbSceneParam._m0[5u].z, fma(_689, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _688));
    float _798 = fma(_690, cbSceneParam._m0[6u].z, fma(_689, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _688));
    float _801 = fma(_690, cbSceneParam._m0[7u].z, fma(_689, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _688));
    uint _814 = uint(roundEven(NORMAL.w)) * 13u;
    uint _815 = _814 + 9u;
    uint _816 = _815 + uint(cbMatDynParam._m0[0u].w);
    float _822 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0)))) * cbInstanceData._m0[_816].x;
    float _823 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0)))) * cbInstanceData._m0[_816].y;
    float _824 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0)))) * cbInstanceData._m0[_816].z;
    float _3728 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
    float _825 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
    float _3739 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
    float _826 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
    float _3750 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
    float _827 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
    float _828 = 1.0 - _695;
    float _829 = _825 * _828;
    float _830 = _826 * _828;
    float _831 = _827 * _828;
    float _836 = (_825 + (-0.039999999105930328369140625)) * _695;
    float _837 = (_826 + (-0.039999999105930328369140625)) * _695;
    float _838 = (_827 + (-0.039999999105930328369140625)) * _695;
    float _839 = _836 + 0.039999999105930328369140625;
    float _841 = _837 + 0.039999999105930328369140625;
    float _842 = _838 + 0.039999999105930328369140625;
    vec4 _851 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _776, cbSceneParam._m0[86u].y * _777));
    float _854 = _851.x * TEXCOORD_3.w;
    float _855 = dot(vec3(_688, _689, _690), vec3(_768, _769, _770));
    float _858 = _855 * 2.0;
    float _862 = (_858 * _688) - _768;
    float _863 = (_858 * _689) - _769;
    float _864 = (_858 * _690) - _770;
    float _868 = abs(dot(vec3(_768, _769, _770), vec3(_688, _689, _690)));
    float _3761 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _870 = sqrt(_691);
    float _881 = exp2((_870 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_870 * 3.0));
    float _887 = (1.0 - _881) * ((_870 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _888 = _881 * _870;
    float _916 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _920 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _924 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1225;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _950 = fma(_924, cbModelParam._m0[26u].z, fma(_920, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _916));
        float _954 = fma(_924, cbModelParam._m0[27u].z, fma(_920, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _916));
        float _958 = fma(_924, cbModelParam._m0[28u].z, fma(_920, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _916));
        float _983 = _916 + _688;
        float _984 = _920 + _689;
        float _985 = _924 + _690;
        float _995 = fma(_985, cbModelParam._m0[26u].z, fma(_984, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _983)) - _950;
        float _996 = fma(_985, cbModelParam._m0[27u].z, fma(_984, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _983)) - _954;
        float _997 = fma(_985, cbModelParam._m0[28u].z, fma(_984, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _983)) - _958;
        float _1001 = inversesqrt(dot(vec3(_995, _996, _997), vec3(_995, _996, _997)));
        float _1014 = ((_1001 * _995) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_950 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1015 = ((_1001 * _996) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_954 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1016 = ((_1001 * _997) / cbModelParam._m0[34u].z) + ((((((_958 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1019 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1014, _1015, _1016), 0.0);
        vec4 _1026 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1014, _1015, _1016), 0.0);
        vec4 _1033 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1014, _1015, _1016), 0.0);
        vec4 _1040 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1014, _1015, _1016), 0.0);
        float _1053 = exp2((_1019.w + (-0.5)) * 20.0) * 2.0;
        float _1054 = _1053 * (_1019.x + (-0.5));
        float _1055 = _1053 * (_1019.y + (-0.5));
        float _1056 = _1053 * (_1019.z + (-0.5));
        float _1063 = exp2((_1026.w + (-0.5)) * 20.0) * 2.0;
        float _1064 = _1063 * (_1026.x + (-0.5));
        float _1065 = _1063 * (_1026.y + (-0.5));
        float _1066 = _1063 * (_1026.z + (-0.5));
        float _1073 = exp2((_1033.w + (-0.5)) * 20.0) * 2.0;
        float _1074 = _1073 * (_1033.x + (-0.5));
        float _1075 = _1073 * (_1033.y + (-0.5));
        float _1076 = _1073 * (_1033.z + (-0.5));
        float _1083 = exp2((_1040.w + (-0.5)) * 20.0) * 2.0;
        float _1084 = _1083 * (_1040.x + (-0.5));
        float _1085 = _1083 * (_1040.y + (-0.5));
        float _1086 = _1083 * (_1040.z + (-0.5));
        float _1087 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1088 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1089 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1090 = _1054 * 0.5;
        float _1091 = _1064 * 0.5;
        float _1092 = _1074 * 0.5;
        float _1093 = dot(vec3(_1090, _1091, _1092), vec3(_1090, _1091, _1092));
        float _1098 = (_1093 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1093);
        float _1107 = (dot(vec3(_688, _689, _690), vec3(_1098 * _1090, _1098 * _1091, _1098 * _1092)) + 1.0) * 0.5;
        float _3787 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1117 = sqrt(((_1091 * _1091) + (_1090 * _1090)) + (_1092 * _1092)) / (_1087 + 9.9999997473787516355514526367188e-06);
        float _3798 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1118 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
        float _1119 = _1118 * 2.0;
        float _1123 = (1.0 - _1118) / (_1118 + 1.0);
        float _3809 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1124 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
        float _1133 = ((((1.0 - _1124) * (_1119 + 2.0)) * exp2(log2(isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0))) * (_1119 + 1.0))) + _1124) * _1087;
        float _1134 = _1055 * 0.5;
        float _1135 = _1065 * 0.5;
        float _1136 = _1075 * 0.5;
        float _1137 = dot(vec3(_1134, _1135, _1136), vec3(_1134, _1135, _1136));
        float _1142 = (_1137 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1137);
        float _1150 = (dot(vec3(_688, _689, _690), vec3(_1142 * _1134, _1142 * _1135, _1142 * _1136)) + 1.0) * 0.5;
        float _3820 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1159 = sqrt(((_1135 * _1135) + (_1134 * _1134)) + (_1136 * _1136)) / (_1088 + 9.9999997473787516355514526367188e-06);
        float _3831 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1160 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
        float _1161 = _1160 * 2.0;
        float _1165 = (1.0 - _1160) / (_1160 + 1.0);
        float _3842 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1166 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
        float _1175 = ((((1.0 - _1166) * (_1161 + 2.0)) * exp2(log2(isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0))) * (_1161 + 1.0))) + _1166) * _1088;
        float _1176 = _1056 * 0.5;
        float _1177 = _1066 * 0.5;
        float _1178 = _1076 * 0.5;
        float _1179 = dot(vec3(_1176, _1177, _1178), vec3(_1176, _1177, _1178));
        float _1184 = (_1179 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1179);
        float _1192 = (dot(vec3(_688, _689, _690), vec3(_1184 * _1176, _1184 * _1177, _1184 * _1178)) + 1.0) * 0.5;
        float _3853 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1201 = sqrt(((_1177 * _1177) + (_1176 * _1176)) + (_1178 * _1178)) / (_1089 + 9.9999997473787516355514526367188e-06);
        float _3864 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1202 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
        float _1203 = _1202 * 2.0;
        float _1207 = (1.0 - _1202) / (_1202 + 1.0);
        float _3875 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1208 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
        float _1217 = ((((1.0 - _1208) * (_1203 + 2.0)) * exp2(log2(isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0))) * (_1203 + 1.0))) + _1208) * _1089;
        _1225 = _1056;
        _1227 = _1055;
        _1228 = _1054;
        _1229 = _1066;
        _1230 = _1065;
        _1231 = _1064;
        _1232 = _1076;
        _1233 = _1075;
        _1234 = _1074;
        _1235 = _1089;
        _1236 = _1088;
        _1237 = _1087;
        _1238 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0)));
        _1239 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0)));
        _1240 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0)));
    }
    else
    {
        _1225 = _1226;
        _1227 = _1226;
        _1228 = _1226;
        _1229 = _1226;
        _1230 = _1226;
        _1231 = _1226;
        _1232 = _1226;
        _1233 = _1226;
        _1234 = _1226;
        _1235 = _1226;
        _1236 = _1226;
        _1237 = _1226;
        _1238 = 0.0;
        _1239 = 0.0;
        _1240 = 0.0;
    }
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    float _1548;
    float _1549;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1266 = fma(_924, cbModelParam._m0[30u].z, fma(_920, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _916));
        float _1270 = fma(_924, cbModelParam._m0[31u].z, fma(_920, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _916));
        float _1274 = fma(_924, cbModelParam._m0[32u].z, fma(_920, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _916));
        float _1297 = _916 + _688;
        float _1298 = _920 + _689;
        float _1299 = _924 + _690;
        float _1309 = fma(_1299, cbModelParam._m0[30u].z, fma(_1298, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1297)) - _1266;
        float _1310 = fma(_1299, cbModelParam._m0[31u].z, fma(_1298, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1297)) - _1270;
        float _1311 = fma(_1299, cbModelParam._m0[32u].z, fma(_1298, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1297)) - _1274;
        float _1315 = inversesqrt(dot(vec3(_1309, _1310, _1311), vec3(_1309, _1310, _1311)));
        float _1328 = ((_1315 * _1309) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1266 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1329 = ((_1315 * _1310) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1270 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1330 = ((_1315 * _1311) / cbModelParam._m0[35u].z) + ((((((_1274 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1332 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1328, _1329, _1330), 0.0);
        vec4 _1339 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1328, _1329, _1330), 0.0);
        vec4 _1346 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1328, _1329, _1330), 0.0);
        vec4 _1353 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1328, _1329, _1330), 0.0);
        float _1365 = exp2((_1332.w + (-0.5)) * 20.0) * 2.0;
        float _1366 = _1365 * (_1332.x + (-0.5));
        float _1367 = _1365 * (_1332.y + (-0.5));
        float _1368 = _1365 * (_1332.z + (-0.5));
        float _1375 = exp2((_1339.w + (-0.5)) * 20.0) * 2.0;
        float _1376 = _1375 * (_1339.x + (-0.5));
        float _1377 = _1375 * (_1339.y + (-0.5));
        float _1378 = _1375 * (_1339.z + (-0.5));
        float _1385 = exp2((_1346.w + (-0.5)) * 20.0) * 2.0;
        float _1386 = _1385 * (_1346.x + (-0.5));
        float _1387 = _1385 * (_1346.y + (-0.5));
        float _1388 = _1385 * (_1346.z + (-0.5));
        float _1395 = exp2((_1353.w + (-0.5)) * 20.0) * 2.0;
        float _1396 = _1395 * (_1353.x + (-0.5));
        float _1397 = _1395 * (_1353.y + (-0.5));
        float _1398 = _1395 * (_1353.z + (-0.5));
        float _1399 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1400 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1401 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1402 = _1366 * 0.5;
        float _1403 = _1376 * 0.5;
        float _1404 = _1386 * 0.5;
        float _1405 = dot(vec3(_1402, _1403, _1404), vec3(_1402, _1403, _1404));
        float _1410 = (_1405 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1405);
        float _1418 = (dot(vec3(_688, _689, _690), vec3(_1410 * _1402, _1410 * _1403, _1410 * _1404)) + 1.0) * 0.5;
        float _3916 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1427 = sqrt(((_1403 * _1403) + (_1402 * _1402)) + (_1404 * _1404)) / (_1399 + 9.9999997473787516355514526367188e-06);
        float _3927 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1428 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
        float _1429 = _1428 * 2.0;
        float _1433 = (1.0 - _1428) / (_1428 + 1.0);
        float _3938 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1434 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
        float _1443 = ((((1.0 - _1434) * (_1429 + 2.0)) * exp2(log2(isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0))) * (_1429 + 1.0))) + _1434) * _1399;
        float _1444 = _1367 * 0.5;
        float _1445 = _1377 * 0.5;
        float _1446 = _1387 * 0.5;
        float _1447 = dot(vec3(_1444, _1445, _1446), vec3(_1444, _1445, _1446));
        float _1452 = (_1447 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1447);
        float _1460 = (dot(vec3(_688, _689, _690), vec3(_1452 * _1444, _1452 * _1445, _1452 * _1446)) + 1.0) * 0.5;
        float _3949 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1469 = sqrt(((_1445 * _1445) + (_1444 * _1444)) + (_1446 * _1446)) / (_1400 + 9.9999997473787516355514526367188e-06);
        float _3960 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1470 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
        float _1471 = _1470 * 2.0;
        float _1475 = (1.0 - _1470) / (_1470 + 1.0);
        float _3971 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1476 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
        float _1485 = ((((1.0 - _1476) * (_1471 + 2.0)) * exp2(log2(isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0))) * (_1471 + 1.0))) + _1476) * _1400;
        float _1486 = _1368 * 0.5;
        float _1487 = _1378 * 0.5;
        float _1488 = _1388 * 0.5;
        float _1489 = dot(vec3(_1486, _1487, _1488), vec3(_1486, _1487, _1488));
        float _1494 = (_1489 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1489);
        float _1502 = (dot(vec3(_688, _689, _690), vec3(_1494 * _1486, _1494 * _1487, _1494 * _1488)) + 1.0) * 0.5;
        float _3982 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1511 = sqrt(((_1487 * _1487) + (_1486 * _1486)) + (_1488 * _1488)) / (_1401 + 9.9999997473787516355514526367188e-06);
        float _3993 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1512 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
        float _1513 = _1512 * 2.0;
        float _1517 = (1.0 - _1512) / (_1512 + 1.0);
        float _4004 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1518 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
        float _1527 = ((((1.0 - _1518) * (_1513 + 2.0)) * exp2(log2(isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0))) * (_1513 + 1.0))) + _1518) * _1401;
        _1535 = _1368;
        _1536 = _1367;
        _1537 = _1366;
        _1538 = _1378;
        _1539 = _1377;
        _1540 = _1376;
        _1541 = _1388;
        _1542 = _1387;
        _1543 = _1386;
        _1544 = _1401;
        _1545 = _1400;
        _1546 = _1399;
        _1547 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0)));
        _1548 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0)));
        _1549 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0)));
    }
    else
    {
        _1535 = _1226;
        _1536 = _1226;
        _1537 = _1226;
        _1538 = _1226;
        _1539 = _1226;
        _1540 = _1226;
        _1541 = _1226;
        _1542 = _1226;
        _1543 = _1226;
        _1544 = _1226;
        _1545 = _1226;
        _1546 = _1226;
        _1547 = 0.0;
        _1548 = 0.0;
        _1549 = 0.0;
    }
    float _1559 = (cbModelParam._m0[1u].x * (_1547 - _1238)) + _1238;
    float _1560 = (cbModelParam._m0[1u].x * (_1548 - _1239)) + _1239;
    float _1561 = (cbModelParam._m0[1u].x * (_1549 - _1240)) + _1240;
    float _1582 = fma(_1561, cbSceneParam._m0[89u].z, fma(_1560, cbSceneParam._m0[89u].y, _1559 * cbSceneParam._m0[89u].x));
    float _1585 = fma(_1561, cbSceneParam._m0[90u].z, fma(_1560, cbSceneParam._m0[90u].y, _1559 * cbSceneParam._m0[90u].x));
    float _1588 = fma(_1561, cbSceneParam._m0[91u].z, fma(_1560, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1559));
    float _1603 = _862 * 0.5;
    float _1604 = _863 * 0.5;
    float _1605 = _864 * 0.5;
    float _1606 = dot(vec4(_1603, _1604, _1605, 1.0), vec4(_1537, _1540, _1543, _1546));
    float _1609 = dot(vec4(_1603, _1604, _1605, 1.0), vec4(_1536, _1539, _1542, _1545));
    float _1612 = dot(vec4(_1603, _1604, _1605, 1.0), vec4(_1535, _1538, _1541, _1544));
    float _1646;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1619 = dot(vec4(_1603, _1604, _1605, 1.0), vec4(_1225, _1229, _1232, _1235));
        float _1623 = dot(vec4(_1603, _1604, _1605, 1.0), vec4(_1227, _1230, _1233, _1236));
        float _1627 = dot(vec4(_1603, _1604, _1605, 1.0), vec4(_1228, _1231, _1234, _1237));
        float _1634 = dot(vec4(cbModelParam._m0[39u]), vec4(_1603, _1604, _1605, 1.0));
        _1646 = dot(vec3(isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0)), isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0)), isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1634) ? 0.0 : (isnan(0.0) ? _1634 : max(0.0, _1634))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1646 = 1.0;
    }
    float _1657;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1648 = dot(vec4(cbModelParam._m0[40u]), vec4(_1603, _1604, _1605, 1.0));
        _1657 = dot(vec3(isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0)), isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0)), isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1648) ? 0.0 : (isnan(0.0) ? _1648 : max(0.0, _1648))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1657 = 1.0;
    }
    float _1661 = (_1657 * cbModelParam._m0[1u].x) + (_1646 * (1.0 - cbModelParam._m0[1u].x));
    float _1671 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _691);
    float _1672 = isnan(_1671) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1671 : min(cbModelParam._m0[25u].z, _1671));
    float _1753;
    float _1755;
    float _1757;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1720 = fma(_924, cbModelParam._m0[13u].z, fma(_920, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _916)) + cbModelParam._m0[13u].w;
        float _1724 = fma(_924, cbModelParam._m0[14u].z, fma(_920, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _916)) + cbModelParam._m0[14u].w;
        float _1728 = fma(_924, cbModelParam._m0[15u].z, fma(_920, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _916)) + cbModelParam._m0[15u].w;
        float _1731 = fma(_864, cbModelParam._m0[13u].z, fma(_863, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _862));
        float _1734 = fma(_864, cbModelParam._m0[14u].z, fma(_863, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _862));
        float _1737 = fma(_864, cbModelParam._m0[15u].z, fma(_863, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _862));
        float _1765;
        if (_1731 > 0.0)
        {
            _1765 = abs((1.0 - _1720) / _1731);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1731 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1720 + 1.0) / _1731);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1765 = frontier_phi_14_12_ladder;
        }
        float _1989;
        if (_1734 > 0.0)
        {
            _1989 = abs((1.0 - _1724) / _1734);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1734 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1724 + 1.0) / _1734);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1989 = frontier_phi_23_19_ladder;
        }
        float _2246;
        if (_1737 > 0.0)
        {
            _2246 = abs((1.0 - _1728) / _1737);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1737 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1728 + 1.0) / _1737);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2246 = frontier_phi_35_30_ladder;
        }
        float _2248 = isnan(_1989) ? _1765 : (isnan(_1765) ? _1989 : min(_1765, _1989));
        float _2249 = isnan(_2246) ? _2248 : (isnan(_2248) ? _2246 : min(_2248, _2246));
        float _2253 = (_2249 * _1731) + _1720;
        float _2254 = (_2249 * _1734) + _1724;
        float _2255 = (_2249 * _1737) + _1728;
        float _2256 = _2249 * 9.9999997473787516355514526367188e-05;
        float _2258 = (-1.0) - _2256;
        float _2260 = _2256 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2255 > _2260) || ((_2255 < _2258) || ((_2254 > _2260) || ((_2254 < _2258) || ((_2253 < _2258) || (_2253 > _2260))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2383 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2255, cbModelParam._m0[9u].z, fma(_2254, cbModelParam._m0[9u].y, _2253 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2255, cbModelParam._m0[10u].z, fma(_2254, cbModelParam._m0[10u].y, _2253 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2255, cbModelParam._m0[11u].z, fma(_2254, cbModelParam._m0[11u].y, _2253 * cbModelParam._m0[11u].x))), _1672);
            frontier_phi_13_35_ladder = _2383.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2383.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2383.x * cbModelParam._m0[1u].y;
        }
        _1753 = frontier_phi_13_35_ladder_2;
        _1755 = frontier_phi_13_35_ladder_1;
        _1757 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1741 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_862, _863, _864), _1672);
        _1753 = _1741.x * cbModelParam._m0[1u].y;
        _1755 = _1741.y * cbModelParam._m0[1u].y;
        _1757 = _1741.z * cbModelParam._m0[1u].y;
    }
    float _1761 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _691);
    float _1762 = isnan(_1761) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1761 : min(cbModelParam._m0[25u].w, _1761));
    float _1852;
    float _1854;
    float _1856;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1816 = fma(_924, cbModelParam._m0[21u].z, fma(_920, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _916)) + cbModelParam._m0[21u].w;
        float _1820 = fma(_924, cbModelParam._m0[22u].z, fma(_920, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _916)) + cbModelParam._m0[22u].w;
        float _1824 = fma(_924, cbModelParam._m0[23u].z, fma(_920, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _916)) + cbModelParam._m0[23u].w;
        float _1827 = fma(_864, cbModelParam._m0[21u].z, fma(_863, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _862));
        float _1830 = fma(_864, cbModelParam._m0[22u].z, fma(_863, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _862));
        float _1833 = fma(_864, cbModelParam._m0[23u].z, fma(_863, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _862));
        float _1994;
        if (_1827 > 0.0)
        {
            _1994 = abs((1.0 - _1816) / _1827);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1827 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1816 + 1.0) / _1827);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1994 = frontier_phi_25_21_ladder;
        }
        float _2273;
        if (_1830 > 0.0)
        {
            _2273 = abs((1.0 - _1820) / _1830);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1830 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1820 + 1.0) / _1830);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2273 = frontier_phi_37_32_ladder;
        }
        float _2486;
        if (_1833 > 0.0)
        {
            _2486 = abs((1.0 - _1824) / _1833);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1833 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1824 + 1.0) / _1833);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2486 = frontier_phi_46_43_ladder;
        }
        float _2488 = isnan(_2273) ? _1994 : (isnan(_1994) ? _2273 : min(_1994, _2273));
        float _2489 = isnan(_2486) ? _2488 : (isnan(_2488) ? _2486 : min(_2488, _2486));
        float _2493 = (_2489 * _1827) + _1816;
        float _2494 = (_2489 * _1830) + _1820;
        float _2495 = (_2489 * _1833) + _1824;
        float _2496 = _2489 * 9.9999997473787516355514526367188e-05;
        float _2497 = (-1.0) - _2496;
        float _2499 = _2496 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2495 > _2499) || ((_2495 < _2497) || ((_2494 > _2499) || ((_2494 < _2497) || ((_2493 < _2497) || (_2493 > _2499))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2729 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2495, cbModelParam._m0[17u].z, fma(_2494, cbModelParam._m0[17u].y, _2493 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2495, cbModelParam._m0[18u].z, fma(_2494, cbModelParam._m0[18u].y, _2493 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2495, cbModelParam._m0[19u].z, fma(_2494, cbModelParam._m0[19u].y, _2493 * cbModelParam._m0[19u].x))), _1762);
            frontier_phi_22_46_ladder = _2729.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2729.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2729.x * cbModelParam._m0[1u].z;
        }
        _1852 = frontier_phi_22_46_ladder_2;
        _1854 = frontier_phi_22_46_ladder_1;
        _1856 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1836 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_862, _863, _864), _1762);
        _1852 = _1836.x * cbModelParam._m0[1u].z;
        _1854 = _1836.y * cbModelParam._m0[1u].z;
        _1856 = _1836.z * cbModelParam._m0[1u].z;
    }
    float _1869 = (((_887 * _839) + _888) * _854) * ((cbModelParam._m0[1u].w * (_1852 - _1753)) + _1753);
    float _1871 = (((_887 * _841) + _888) * _854) * ((cbModelParam._m0[1u].w * (_1854 - _1755)) + _1755);
    float _1873 = (((_887 * _842) + _888) * _854) * ((cbModelParam._m0[1u].w * (_1856 - _1757)) + _1757);
    float _1876 = fma(_1873, cbSceneParam._m0[89u].z, fma(_1871, cbSceneParam._m0[89u].y, _1869 * cbSceneParam._m0[89u].x));
    float _1879 = fma(_1873, cbSceneParam._m0[90u].z, fma(_1871, cbSceneParam._m0[90u].y, _1869 * cbSceneParam._m0[90u].x));
    float _1882 = fma(_1873, cbSceneParam._m0[91u].z, fma(_1871, cbSceneParam._m0[91u].y, _1869 * cbSceneParam._m0[91u].x));
    vec4 _1890 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_776, _777));
    float _1892 = _1890.w;
    float _1904 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1892);
    float _1905 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1892);
    float _1906 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1892);
    uvec4 _1910 = floatBitsToUint(cbInstanceData._m0[_814 + 5u]);
    uint _1912 = _1910.x * 14u;
    uint _1913 = _1912 + 13u;
    float _1920 = _854 + (-1.0);
    float _1925 = (cbLight._m0[_1913].x * _1920) + 1.0;
    float _1926 = (cbLight._m0[_1913].y * _1920) + 1.0;
    float _1927 = (cbLight._m0[_1913].z * _1920) + 1.0;
    float _1928 = (cbLight._m0[_1913].w * _1920) + 1.0;
    uint _1929 = _1912 + 5u;
    float _1935 = isnan(1.0) ? _1926 : (isnan(_1926) ? 1.0 : min(_1926, 1.0));
    uint _1939 = _1912 + 4u;
    float _1948 = isnan(1.0) ? _1925 : (isnan(_1925) ? 1.0 : min(_1925, 1.0));
    uint _1952 = _1912 | 1u;
    float _1963 = dot(vec3(cbLight._m0[_1912].xyz), vec3(_688, _689, _690));
    float _1966 = dot(vec3(cbLight._m0[_1952].xyz), vec3(_688, _689, _690));
    float _4140 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
    float _4151 = isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0));
    float _1971 = (isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0))) * 0.3183098733425140380859375;
    float _1973 = (isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0))) * 0.3183098733425140380859375;
    float _1980 = ((cbLight._m0[_1929].x * _1935) * _1973) + (((cbLight._m0[_1939].x * _1904) * _1948) * _1971);
    float _1981 = ((_1935 * cbLight._m0[_1929].y) * _1973) + (((cbLight._m0[_1939].y * _1905) * _1948) * _1971);
    float _1982 = ((_1935 * cbLight._m0[_1929].z) * _1973) + (((cbLight._m0[_1939].z * _1906) * _1948) * _1971);
    uvec4 _1986 = floatBitsToUint(cbLight._m0[_1912 + 12u]);
    bool _1988 = _1986.x == 0u;
    float _1999;
    float _2001;
    float _2003;
    if (_1988)
    {
        _1999 = _1980;
        _2001 = _1981;
        _2003 = _1982;
    }
    else
    {
        uint _2007 = _1912 + 6u;
        float _2023 = (dot(vec3(cbLight._m0[_1912 + 2u].xyz), vec3(_688, _689, _690)) * 0.5) + 0.5;
        float _2024 = _2023 * _2023;
        float _4162 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
        float _2025 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _2026 = isnan(1.0) ? _1927 : (isnan(_1927) ? 1.0 : min(_1927, 1.0));
        _1999 = (((cbLight._m0[_2007].x * 0.3183098733425140380859375) * _2025) * _2026) + _1980;
        _2001 = (((cbLight._m0[_2007].y * 0.3183098733425140380859375) * _2025) * _2026) + _1981;
        _2003 = (((cbLight._m0[_2007].z * 0.3183098733425140380859375) * _2025) * _2026) + _1982;
    }
    bool _2006 = _1986.y == 0u;
    float _2044;
    float _2046;
    float _2048;
    if (_2006)
    {
        _2044 = _1999;
        _2046 = _2001;
        _2048 = _2003;
    }
    else
    {
        uint _2217 = _1912 + 7u;
        float _2233 = (dot(vec3(cbLight._m0[_1912 + 3u].xyz), vec3(_688, _689, _690)) * 0.5) + 0.5;
        float _2234 = _2233 * _2233;
        float _4178 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
        float _2235 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
        float _2236 = isnan(1.0) ? _1928 : (isnan(_1928) ? 1.0 : min(_1928, 1.0));
        _2044 = (((cbLight._m0[_2217].x * 0.3183098733425140380859375) * _2235) * _2236) + _1999;
        _2046 = (((cbLight._m0[_2217].y * 0.3183098733425140380859375) * _2235) * _2236) + _2001;
        _2048 = (((cbLight._m0[_2217].z * 0.3183098733425140380859375) * _2235) * _2236) + _2003;
    }
    uint _2051 = _1912 + 8u;
    float _2064 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1912].w)) * _691) * 0.949999988079071044921875);
    float _2065 = _2064 * _2064;
    float _2066 = cbLight._m0[_1912].x + _768;
    float _2067 = cbLight._m0[_1912].y + _769;
    float _2068 = cbLight._m0[_1912].z + _770;
    float _2072 = inversesqrt(dot(vec3(_2066, _2067, _2068), vec3(_2066, _2067, _2068)));
    float _2073 = _2072 * _2066;
    float _2074 = _2072 * _2067;
    float _2075 = _2072 * _2068;
    float _2076 = dot(vec3(_688, _689, _690), vec3(cbLight._m0[_1912].xyz));
    float _4194 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
    float _2079 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
    float _4205 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
    float _2080 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
    float _2081 = dot(vec3(_688, _689, _690), vec3(_2073, _2074, _2075));
    float _4216 = isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0));
    float _2084 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
    float _2085 = dot(vec3(cbLight._m0[_1912].xyz), vec3(_2073, _2074, _2075));
    float _4227 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
    float _2089 = _2065 * _2065;
    float _2093 = ((_2084 * _2084) * (_2089 + (-1.0))) + 1.0;
    float _2101 = exp2(log2(1.0 - (isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0)))) * 5.0);
    float _2102 = 0.959999978542327880859375 - _836;
    float _2104 = 0.959999978542327880859375 - _837;
    float _2105 = 0.959999978542327880859375 - _838;
    float _2112 = 1.0 - _2065;
    float _2123 = (0.5 / (((_2080 * ((_2079 * _2112) + _2065)) + 9.9999999392252902907785028219223e-09) + (((_2080 * _2112) + _2065) * _2079))) * _2079;
    float _4238 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
    float _2125 = (isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0))) * (_2089 / ((_2093 * _2093) * 3.141590118408203125));
    uint _2139 = _1912 + 9u;
    float _2150 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1952].w)) * _691) * 0.949999988079071044921875);
    float _2151 = _2150 * _2150;
    float _2152 = cbLight._m0[_1952].x + _768;
    float _2153 = cbLight._m0[_1952].y + _769;
    float _2154 = cbLight._m0[_1952].z + _770;
    float _2158 = inversesqrt(dot(vec3(_2152, _2153, _2154), vec3(_2152, _2153, _2154)));
    float _2159 = _2158 * _2152;
    float _2160 = _2158 * _2153;
    float _2161 = _2158 * _2154;
    float _2162 = dot(vec3(_688, _689, _690), vec3(cbLight._m0[_1952].xyz));
    float _4249 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
    float _2165 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
    float _2166 = dot(vec3(_688, _689, _690), vec3(_2159, _2160, _2161));
    float _4260 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
    float _2169 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
    float _2170 = dot(vec3(cbLight._m0[_1952].xyz), vec3(_2159, _2160, _2161));
    float _4271 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
    float _2174 = _2151 * _2151;
    float _2178 = ((_2169 * _2169) * (_2174 + (-1.0))) + 1.0;
    float _2185 = exp2(log2(1.0 - (isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0)))) * 5.0);
    float _2192 = 1.0 - _2151;
    float _2202 = (0.5 / (((_2080 * ((_2165 * _2192) + _2151)) + 9.9999999392252902907785028219223e-09) + (((_2080 * _2192) + _2151) * _2165))) * _2165;
    float _4282 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
    float _2204 = (isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0))) * (_2174 / ((_2178 * _2178) * 3.141590118408203125));
    float _2214 = (((((_2185 * _2102) + _839) * cbLight._m0[_2139].x) * _2204) * _1935) + ((((cbLight._m0[_2051].x * _1904) * ((_2101 * _2102) + _839)) * _2125) * _1948);
    float _2215 = (((((_2185 * _2104) + _841) * cbLight._m0[_2139].y) * _2204) * _1935) + ((((cbLight._m0[_2051].y * _1905) * ((_2101 * _2104) + _841)) * _2125) * _1948);
    float _2216 = (((((_2185 * _2105) + _842) * cbLight._m0[_2139].z) * _2204) * _1935) + ((((cbLight._m0[_2051].z * _1906) * ((_2101 * _2105) + _842)) * _2125) * _1948);
    float _2278;
    float _2280;
    float _2282;
    if (_1988)
    {
        _2278 = _2214;
        _2280 = _2215;
        _2282 = _2216;
    }
    else
    {
        uint _2284 = _1912 + 2u;
        uint _2288 = _1912 + 10u;
        float _2302 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2284].w)) * _691) * 0.949999988079071044921875);
        float _2303 = _2302 * _2302;
        float _2304 = cbLight._m0[_2284].x + _768;
        float _2305 = cbLight._m0[_2284].y + _769;
        float _2306 = cbLight._m0[_2284].z + _770;
        float _2310 = inversesqrt(dot(vec3(_2304, _2305, _2306), vec3(_2304, _2305, _2306)));
        float _2311 = _2310 * _2304;
        float _2312 = _2310 * _2305;
        float _2313 = _2310 * _2306;
        float _2314 = dot(vec3(_688, _689, _690), vec3(cbLight._m0[_2284].xyz));
        float _4293 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
        float _2317 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
        float _2318 = dot(vec3(_688, _689, _690), vec3(_2311, _2312, _2313));
        float _4304 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
        float _2321 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
        float _2322 = dot(vec3(cbLight._m0[_2284].xyz), vec3(_2311, _2312, _2313));
        float _4315 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
        float _2326 = _2303 * _2303;
        float _2330 = ((_2321 * _2321) * (_2326 + (-1.0))) + 1.0;
        float _2337 = exp2(log2(1.0 - (isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0)))) * 5.0);
        float _2344 = 1.0 - _2303;
        float _2354 = (0.5 / (((_2080 * ((_2317 * _2344) + _2303)) + 9.9999999392252902907785028219223e-09) + (((_2080 * _2344) + _2303) * _2317))) * _2317;
        float _4326 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
        float _2356 = (isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0))) * (_2326 / ((_2330 * _2330) * 3.141590118408203125));
        float _2357 = isnan(1.0) ? _1927 : (isnan(_1927) ? 1.0 : min(_1927, 1.0));
        _2278 = (((((_2337 * _2102) + _839) * cbLight._m0[_2288].x) * _2356) * _2357) + _2214;
        _2280 = (((((_2337 * _2104) + _841) * cbLight._m0[_2288].y) * _2356) * _2357) + _2215;
        _2282 = (((((_2337 * _2105) + _842) * cbLight._m0[_2288].z) * _2356) * _2357) + _2216;
    }
    float _2392;
    float _2394;
    float _2396;
    if (_2006)
    {
        _2392 = _2278;
        _2394 = _2280;
        _2396 = _2282;
    }
    else
    {
        uint _2403 = _1912 + 3u;
        uint _2407 = _1912 + 11u;
        float _2421 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2403].w)) * _691) * 0.949999988079071044921875);
        float _2422 = _2421 * _2421;
        float _2423 = cbLight._m0[_2403].x + _768;
        float _2424 = cbLight._m0[_2403].y + _769;
        float _2425 = cbLight._m0[_2403].z + _770;
        float _2429 = inversesqrt(dot(vec3(_2423, _2424, _2425), vec3(_2423, _2424, _2425)));
        float _2430 = _2429 * _2423;
        float _2431 = _2429 * _2424;
        float _2432 = _2429 * _2425;
        float _2433 = dot(vec3(_688, _689, _690), vec3(cbLight._m0[_2403].xyz));
        float _4342 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
        float _2436 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
        float _2437 = dot(vec3(_688, _689, _690), vec3(_2430, _2431, _2432));
        float _4353 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
        float _2440 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
        float _2441 = dot(vec3(cbLight._m0[_2403].xyz), vec3(_2430, _2431, _2432));
        float _4364 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
        float _2445 = _2422 * _2422;
        float _2449 = ((_2440 * _2440) * (_2445 + (-1.0))) + 1.0;
        float _2456 = exp2(log2(1.0 - (isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0)))) * 5.0);
        float _2463 = 1.0 - _2422;
        float _2473 = (0.5 / (((_2080 * ((_2436 * _2463) + _2422)) + 9.9999999392252902907785028219223e-09) + (((_2080 * _2463) + _2422) * _2436))) * _2436;
        float _4375 = isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0));
        float _2475 = (isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0))) * (_2445 / ((_2449 * _2449) * 3.141590118408203125));
        float _2476 = isnan(1.0) ? _1928 : (isnan(_1928) ? 1.0 : min(_1928, 1.0));
        _2392 = (((((_2456 * _2102) + _839) * cbLight._m0[_2407].x) * _2475) * _2476) + _2278;
        _2394 = (((((_2456 * _2104) + _841) * cbLight._m0[_2407].y) * _2475) * _2476) + _2280;
        _2396 = (((((_2456 * _2105) + _842) * cbLight._m0[_2407].z) * _2475) * _2476) + _2282;
    }
    float _2611;
    float _2613;
    float _2615;
    float _2617;
    float _2619;
    float _2621;
    if (_1910.y == 0u)
    {
        float _2551 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2552 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2551;
        float _2553 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2551;
        float _2554 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2551;
        uvec4 _2566 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2567 = _2566.x;
        uint _2578 = uint((float(_2566.y) * floor(float(uint(cbSceneParam._m0[85u].y * _777) / _2567))) + floor(float(uint(cbSceneParam._m0[85u].x * _776) / _2567)));
        float _2588 = (log2(_2554 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2589 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0));
        uint _2592 = uint(isnan(14.0) ? _2589 : (isnan(_2589) ? 14.0 : min(_2589, 14.0)));
        uvec4 _2597 = texelFetch(g_lightClusterGridBuffer, int(((_2592 << 2u) + (_2578 << 6u)) >> 2u));
        uint _2598 = _2597.x;
        uint _2599 = _2566.z;
        float _2734;
        float _2736;
        float _2738;
        float _2740;
        float _2742;
        float _2744;
        if (((((1u << ((_2599 >> 4u) & 15u)) + 4294967295u) & _2598) == 0u) || ((_2599 & 240u) == 0u))
        {
            _2734 = 0.0;
            _2736 = 0.0;
            _2738 = 0.0;
            _2740 = 0.0;
            _2742 = 0.0;
            _2744 = 0.0;
        }
        else
        {
            float _2735;
            float _2737;
            float _2739;
            float _2741;
            float _2743;
            float _2745;
            float _2888 = 0.0;
            float _2889 = 0.0;
            float _2890 = 0.0;
            float _2891 = 0.0;
            float _2892 = 0.0;
            float _2893 = 0.0;
            uint _2894 = 0u;
            uint _2903;
            bool _2904;
            for (;;)
            {
                _2903 = texelFetch(g_lightClassification, int((((_2592 << 5u) + (_2578 << 9u)) + (_2894 << 2u)) >> 2u)).x;
                _2904 = _2903 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2904)
                {
                    frontier_phi_61_pred = _2888;
                    frontier_phi_61_pred_1 = _2893;
                    frontier_phi_61_pred_2 = _2892;
                    frontier_phi_61_pred_3 = _2891;
                    frontier_phi_61_pred_4 = _2890;
                    frontier_phi_61_pred_5 = _2889;
                }
                else
                {
                    float _3012;
                    float _3013;
                    float _3014;
                    float _3015;
                    float _3016;
                    float _3017;
                    uint _3018;
                    _3012 = _2888;
                    _3013 = _2889;
                    _3014 = _2890;
                    _3015 = _2891;
                    _3016 = _2892;
                    _3017 = _2893;
                    _3018 = _2903;
                    float _2944;
                    float _2945;
                    float _2946;
                    float _2947;
                    float _2948;
                    float _2949;
                    for (;;)
                    {
                        uint _3022 = uint(findLSB(_3018)) + (_2894 << 5u);
                        uint _3019 = (_3018 + 4294967295u) & _3018;
                        uint _3024 = _3022 * 48u;
                        vec4 _3038 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3024)).x, texelFetch(g_PointLightRenderingBuffer, int(_3024 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3024 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3024 + 3u)).x));
                        uint _3044 = (_3022 * 48u) + 4u;
                        vec4 _3057 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3044)).x, texelFetch(g_PointLightRenderingBuffer, int(_3044 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3044 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3044 + 3u)).x));
                        uint _3063 = (_3022 * 48u) + 8u;
                        vec3 _3074 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3063)).x, texelFetch(g_PointLightRenderingBuffer, int(_3063 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3063 + 2u)).x));
                        float _3078 = _3038.x - _2552;
                        float _3079 = _3038.y - _2553;
                        float _3080 = _3038.z - _2554;
                        float _3081 = dot(vec3(_3078, _3079, _3080), vec3(_3078, _3079, _3080));
                        float _3084 = inversesqrt(_3081);
                        float _3085 = _3084 * _3078;
                        float _3086 = _3084 * _3079;
                        float _3087 = _3084 * _3080;
                        float _3088 = dot(vec3(_795, _798, _801), vec3(_3085, _3086, _3087));
                        float _3093 = 1.0 - (_3081 * _3038.w);
                        float _4401 = isnan(0.0) ? _3093 : (isnan(_3093) ? 0.0 : max(_3093, 0.0));
                        float _3094 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
                        float _3095 = sqrt(_3081) * _3057.w;
                        float _3098 = 1.39999997615814208984375 / (_3095 + 1.39999997615814208984375);
                        float _3099 = _3098 * _3098;
                        float _3102 = ((1.0 - _3099) * _3088) + _3099;
                        float _3105 = _3095 * _3095;
                        float _3109 = ((isnan(0.0) ? _3102 : (isnan(_3102) ? 0.0 : max(_3102, 0.0))) * _3094) / ((_3105 * 0.699999988079071044921875) + 1.0);
                        float _3113 = (-0.0) - _2552;
                        float _3114 = (-0.0) - _2553;
                        float _3115 = (-0.0) - _2554;
                        float _3119 = inversesqrt(dot(vec3(_3113, _3114, _3115), vec3(_3113, _3114, _3115)));
                        float _3120 = _3119 * _3113;
                        float _3121 = _3119 * _3114;
                        float _3122 = _3119 * _3115;
                        float _3130 = exp2(log2(1.0 / ((_3105 * 3.5) + 5.0)) * 0.25);
                        float _3131 = 1.0 - _870;
                        float _3138 = sqrt(1.0 - ((1.0 - (_3131 * _3131)) * (1.0 - (_3130 * _3130))));
                        float _3139 = _3138 * _3138;
                        float _3140 = _3139 * _3139;
                        float _3141 = _3120 + _3085;
                        float _3142 = _3121 + _3086;
                        float _3143 = _3122 + _3087;
                        float _3147 = inversesqrt(dot(vec3(_3141, _3142, _3143), vec3(_3141, _3142, _3143)));
                        float _3151 = dot(vec3(_795, _798, _801), vec3(_3120, _3121, _3122));
                        float _4417 = isnan(0.0) ? _3151 : (isnan(_3151) ? 0.0 : max(_3151, 0.0));
                        float _3154 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
                        float _3155 = dot(vec3(_795, _798, _801), vec3(_3147 * _3141, _3147 * _3142, _3147 * _3143));
                        float _4428 = isnan(0.0) ? _3155 : (isnan(_3155) ? 0.0 : max(_3155, 0.0));
                        float _3158 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
                        float _3162 = ((_3158 * _3158) * (_3140 + (-1.0))) + 1.0;
                        float _3163 = _3098 * _3139;
                        float _3164 = _3163 * _3163;
                        float _3167 = ((1.0 - _3164) * _3088) + _3164;
                        float _4439 = isnan(0.0) ? _3167 : (isnan(_3167) ? 0.0 : max(_3167, 0.0));
                        float _3168 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
                        float _3169 = 1.0 - _3139;
                        float _3179 = (0.5 / (((_3168 * ((_3154 * _3169) + _3139)) + 9.9999999392252902907785028219223e-09) + (((_3168 * _3169) + _3139) * _3154))) * _3168;
                        float _4450 = isnan(0.0) ? _3179 : (isnan(_3179) ? 0.0 : max(_3179, 0.0));
                        float _3190 = (((_3140 * 3.1415927410125732421875) * (isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0)))) / ((_3162 * _3162) * ((_3105 * 2.1991131305694580078125) + 3.141590118408203125))) * _3094;
                        _2947 = (_3109 * _3057.x) + _3015;
                        _2948 = (_3109 * _3057.y) + _3016;
                        _2949 = (_3109 * _3057.z) + _3017;
                        _2944 = (_3190 * _3074.x) + _3012;
                        _2945 = (_3190 * _3074.y) + _3013;
                        _2946 = (_3190 * _3074.z) + _3014;
                        if (_3019 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3012 = _2944;
                            _3013 = _2945;
                            _3014 = _2946;
                            _3015 = _2947;
                            _3016 = _2948;
                            _3017 = _2949;
                            _3018 = _3019;
                        }
                    }
                    frontier_phi_61_pred = _2944;
                    frontier_phi_61_pred_1 = _2949;
                    frontier_phi_61_pred_2 = _2948;
                    frontier_phi_61_pred_3 = _2947;
                    frontier_phi_61_pred_4 = _2946;
                    frontier_phi_61_pred_5 = _2945;
                }
                _2735 = frontier_phi_61_pred;
                _2745 = frontier_phi_61_pred_1;
                _2743 = frontier_phi_61_pred_2;
                _2741 = frontier_phi_61_pred_3;
                _2739 = frontier_phi_61_pred_4;
                _2737 = frontier_phi_61_pred_5;
                uint _2895 = _2894 + 1u;
                if (_2895 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2888 = _2735;
                    _2889 = _2737;
                    _2890 = _2739;
                    _2891 = _2741;
                    _2892 = _2743;
                    _2893 = _2745;
                    _2894 = _2895;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2734 = _2735;
            _2736 = _2737;
            _2738 = _2739;
            _2740 = _2741;
            _2742 = _2743;
            _2744 = _2745;
        }
        uvec4 _2748 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2749 = _2748.z;
        uint _2751 = (_2749 >> 8u) & 15u;
        float _2856;
        float _2858;
        float _2860;
        float _2862;
        float _2864;
        float _2866;
        if (((4294967295u << _2751) & _2598) == 0u)
        {
            _2856 = _2734;
            _2858 = _2736;
            _2860 = _2738;
            _2862 = _2740;
            _2864 = _2742;
            _2866 = _2744;
        }
        else
        {
            float _2881 = inversesqrt(dot(vec3(_2552, _2553, _2554), vec3(_2552, _2553, _2554)));
            float _2882 = _2881 * _2552;
            float _2883 = _2881 * _2553;
            float _2884 = _2881 * _2554;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2751 < ((_2749 >> 12u) & 15u))
            {
                float _2857;
                float _2859;
                float _2861;
                float _2863;
                float _2865;
                float _2867;
                float _2995 = _2734;
                float _2996 = _2736;
                float _2997 = _2738;
                float _2998 = _2740;
                float _2999 = _2742;
                float _3000 = _2744;
                uint _3001 = _2751;
                uint _3010;
                bool _3011;
                for (;;)
                {
                    _3010 = texelFetch(g_lightClassification, int((((_2592 << 5u) + (_2578 << 9u)) + (_3001 << 2u)) >> 2u)).x;
                    _3011 = _3010 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3011)
                    {
                        frontier_phi_67_pred = _2998;
                        frontier_phi_67_pred_1 = _2999;
                        frontier_phi_67_pred_2 = _3000;
                        frontier_phi_67_pred_3 = _2997;
                        frontier_phi_67_pred_4 = _2996;
                        frontier_phi_67_pred_5 = _2995;
                    }
                    else
                    {
                        float _3195;
                        float _3196;
                        float _3197;
                        float _3198;
                        float _3199;
                        float _3200;
                        float _3488;
                        float _3489;
                        float _3490;
                        float _3491;
                        float _3492;
                        float _3493;
                        float _3208 = _2995;
                        float _3209 = _2996;
                        float _3210 = _2997;
                        float _3211 = _2998;
                        float _3212 = _2999;
                        float _3213 = _3000;
                        uint _3214 = _3010;
                        uint _3215;
                        vec4 _3240;
                        float _3241;
                        vec4 _3256;
                        vec3 _3268;
                        vec4 _3283;
                        vec4 _3298;
                        float _3344;
                        bool _3345;
                        for (;;)
                        {
                            uint _3225 = ((_3001 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3214));
                            _3215 = (_3214 + 4294967295u) & _3214;
                            uint _3227 = _3225 * 40u;
                            _3240 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3227)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 3u)).x));
                            _3241 = _3240.w;
                            uint _3243 = (_3225 * 40u) + 4u;
                            _3256 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3243)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 3u)).x));
                            uint _3258 = (_3225 * 40u) + 8u;
                            _3268 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3258)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3258 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3258 + 2u)).x));
                            uint _3270 = (_3225 * 40u) + 16u;
                            _3283 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3270)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3270 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3270 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3270 + 3u)).x));
                            uint _3285 = (_3225 * 40u) + 20u;
                            _3298 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3285)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 3u)).x));
                            uint _3300 = (_3225 * 40u) + 24u;
                            vec4 _3313 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3300)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 3u)).x));
                            uint _3319 = (_3225 * 40u) + 28u;
                            vec4 _3332 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3319)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 3u)).x));
                            _3344 = fma(_2554, _3332.z, fma(_2553, _3332.y, _3332.x * _2552)) + _3332.w;
                            _3345 = !((fma(_2554, _3313.z, fma(_2553, _3313.y, _3313.x * _2552)) + _3313.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3345)
                            {
                                float _3372 = _3240.x - _2552;
                                float _3373 = _3240.y - _2553;
                                float _3374 = _3240.z - _2554;
                                float _3375 = dot(vec3(_3372, _3373, _3374), vec3(_3372, _3373, _3374));
                                float _3378 = inversesqrt(_3375);
                                float _3379 = _3378 * _3372;
                                float _3380 = _3378 * _3373;
                                float _3381 = _3378 * _3374;
                                float _3385 = 1.0 - (_3375 / (_3241 * _3241));
                                float _4461 = isnan(0.0) ? _3385 : (isnan(_3385) ? 0.0 : max(_3385, 0.0));
                                float _3386 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
                                float _3390 = sqrt(_3375) * _3256.w;
                                float _3392 = 1.39999997615814208984375 / (_3390 + 1.39999997615814208984375);
                                float _3393 = _3392 * _3392;
                                float _3396 = ((1.0 - _3393) * dot(vec3(_3379, _3380, _3381), vec3(_795, _798, _801))) + _3393;
                                float _3399 = _3390 * _3390;
                                float _3403 = (fma(_2554, _3283.z, fma(_2553, _3283.y, _3283.x * _2552)) + _3283.w) / _3344;
                                float _3404 = (fma(_2554, _3298.z, fma(_2553, _3298.y, _3298.x * _2552)) + _3298.w) / _3344;
                                float _3408 = 1.0 - dot(vec2(_3403, _3404), vec2(_3403, _3404));
                                float _4477 = isnan(0.0) ? _3408 : (isnan(_3408) ? 0.0 : max(_3408, 0.0));
                                float _3409 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
                                float _3410 = _3409 * (((isnan(0.0) ? _3396 : (isnan(_3396) ? 0.0 : max(_3396, 0.0))) * _3386) / ((_3399 * 0.699999988079071044921875) + 1.0));
                                float _3422 = exp2(log2(1.0 / ((_3399 * 3.5) + 5.0)) * 0.25);
                                float _3423 = 1.0 - _870;
                                float _3430 = sqrt(1.0 - ((1.0 - (_3423 * _3423)) * (1.0 - (_3422 * _3422))));
                                float _3431 = _3430 * _3430;
                                float _3432 = _3431 * _3431;
                                float _3433 = _3379 - _2882;
                                float _3434 = _3380 - _2883;
                                float _3435 = _3381 - _2884;
                                float _3439 = inversesqrt(dot(vec3(_3433, _3434, _3435), vec3(_3433, _3434, _3435)));
                                float _3443 = dot(vec3(_795, _798, _801), vec3((-0.0) - _2882, (-0.0) - _2883, (-0.0) - _2884));
                                float _4488 = isnan(0.0) ? _3443 : (isnan(_3443) ? 0.0 : max(_3443, 0.0));
                                float _3446 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
                                float _3447 = dot(vec3(_795, _798, _801), vec3(_3439 * _3433, _3439 * _3434, _3439 * _3435));
                                float _4499 = isnan(0.0) ? _3447 : (isnan(_3447) ? 0.0 : max(_3447, 0.0));
                                float _3450 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
                                float _3454 = ((_3450 * _3450) * (_3432 + (-1.0))) + 1.0;
                                float _3455 = _3392 * _3431;
                                float _3456 = _3455 * _3455;
                                float _3462 = ((1.0 - _3456) * dot(vec3(_795, _798, _801), vec3(_3379, _3380, _3381))) + _3456;
                                float _4510 = isnan(0.0) ? _3462 : (isnan(_3462) ? 0.0 : max(_3462, 0.0));
                                float _3463 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
                                float _3464 = 1.0 - _3431;
                                float _3474 = (0.5 / (((_3463 * ((_3446 * _3464) + _3431)) + 9.9999999392252902907785028219223e-09) + (((_3463 * _3464) + _3431) * _3446))) * _3463;
                                float _4521 = isnan(0.0) ? _3474 : (isnan(_3474) ? 0.0 : max(_3474, 0.0));
                                float _3484 = (_3409 * _3386) * (((_3432 * 3.1415927410125732421875) * (isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0)))) / ((_3454 * _3454) * ((_3399 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3484 * _3268.x;
                                frontier_phi_73_pred_1 = _3484 * _3268.y;
                                frontier_phi_73_pred_2 = _3410 * _3256.z;
                                frontier_phi_73_pred_3 = _3410 * _3256.y;
                                frontier_phi_73_pred_4 = _3410 * _3256.x;
                                frontier_phi_73_pred_5 = _3484 * _3268.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3488 = frontier_phi_73_pred;
                            _3489 = frontier_phi_73_pred_1;
                            _3493 = frontier_phi_73_pred_2;
                            _3492 = frontier_phi_73_pred_3;
                            _3491 = frontier_phi_73_pred_4;
                            _3490 = frontier_phi_73_pred_5;
                            _3198 = _3491 + _3211;
                            _3199 = _3492 + _3212;
                            _3200 = _3493 + _3213;
                            _3195 = _3488 + _3208;
                            _3196 = _3489 + _3209;
                            _3197 = _3490 + _3210;
                            if (_3215 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3208 = _3195;
                                _3209 = _3196;
                                _3210 = _3197;
                                _3211 = _3198;
                                _3212 = _3199;
                                _3213 = _3200;
                                _3214 = _3215;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3198;
                        frontier_phi_67_pred_1 = _3199;
                        frontier_phi_67_pred_2 = _3200;
                        frontier_phi_67_pred_3 = _3197;
                        frontier_phi_67_pred_4 = _3196;
                        frontier_phi_67_pred_5 = _3195;
                    }
                    _2863 = frontier_phi_67_pred;
                    _2865 = frontier_phi_67_pred_1;
                    _2867 = frontier_phi_67_pred_2;
                    _2861 = frontier_phi_67_pred_3;
                    _2859 = frontier_phi_67_pred_4;
                    _2857 = frontier_phi_67_pred_5;
                    uint _3002 = _3001 + 1u;
                    if (_3002 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2995 = _2857;
                        _2996 = _2859;
                        _2997 = _2861;
                        _2998 = _2863;
                        _2999 = _2865;
                        _3000 = _2867;
                        _3001 = _3002;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2865;
                frontier_phi_55_56_ladder_1 = _2867;
                frontier_phi_55_56_ladder_2 = _2863;
                frontier_phi_55_56_ladder_3 = _2861;
                frontier_phi_55_56_ladder_4 = _2859;
                frontier_phi_55_56_ladder_5 = _2857;
            }
            else
            {
                frontier_phi_55_56_ladder = _2742;
                frontier_phi_55_56_ladder_1 = _2744;
                frontier_phi_55_56_ladder_2 = _2740;
                frontier_phi_55_56_ladder_3 = _2738;
                frontier_phi_55_56_ladder_4 = _2736;
                frontier_phi_55_56_ladder_5 = _2734;
            }
            _2856 = frontier_phi_55_56_ladder_5;
            _2858 = frontier_phi_55_56_ladder_4;
            _2860 = frontier_phi_55_56_ladder_3;
            _2862 = frontier_phi_55_56_ladder_2;
            _2864 = frontier_phi_55_56_ladder;
            _2866 = frontier_phi_55_56_ladder_1;
        }
        float _2871 = isnan(1.0) ? _854 : (isnan(_854) ? 1.0 : min(_854, 1.0));
        _2611 = (_2871 * _2862) + _2044;
        _2613 = (_2871 * _2864) + _2046;
        _2615 = (_2871 * _2866) + _2048;
        _2617 = ((_2856 * _839) * _2871) + _2392;
        _2619 = ((_2858 * _841) * _2871) + _2394;
        _2621 = ((_2860 * _842) * _2871) + _2396;
    }
    else
    {
        _2611 = _2044;
        _2613 = _2046;
        _2615 = _2048;
        _2617 = _2392;
        _2619 = _2394;
        _2621 = _2396;
    }
    uint _2627 = _815 + uint(cbMatDynParam._m0[0u].w);
    float _2635 = ((cbMtdParam._m0[20u].x * cbMtdParam._m0[25u].x) * _630.x) * cbInstanceData._m0[_2627].x;
    float _2638 = ((cbMtdParam._m0[20u].y * cbMtdParam._m0[25u].x) * _630.y) * cbInstanceData._m0[_2627].y;
    float _2641 = ((cbMtdParam._m0[20u].z * cbMtdParam._m0[25u].x) * _630.z) * cbInstanceData._m0[_2627].z;
    float _4537 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _4548 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
    float _4559 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
    float _2658 = (((isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0))) * (_2611 + ((isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0))) * _854))) + ((_2617 + ((isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0))) * _1661)) * cbPerFrame._m0[3u].x)) + _2635;
    float _2660 = (_2638 + ((_2619 + ((isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0))) * _1661)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0))) * (_2613 + ((isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0))) * _854)));
    float _2662 = (_2641 + ((_2621 + ((isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0))) * _1661)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0))) * (_2615 + ((isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0))) * _854)));
    float _4585 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2675 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
    uint _2676 = _814 + 6u;
    float _2684 = _776 / cbSceneParam._m0[86u].x;
    float _2685 = _777 / cbSceneParam._m0[86u].y;
    vec4 _2699 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2684, _2685, (log2((isnan(cbSceneParam._m0[77u].w) ? _711 : (isnan(_711) ? cbSceneParam._m0[77u].w : min(_711, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2701 = _2699.x;
    float _2702 = _2699.y;
    float _2703 = _2699.z;
    float _2704 = _2699.w;
    float _2797;
    float _2799;
    float _2801;
    float _2803;
    if (_711 > cbSceneParam._m0[78u].w)
    {
        float _2759 = isnan(_711) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _711 : min(cbSceneParam._m0[80u].w, _711));
        float _2760 = _2759 / _711;
        float _2771 = _2760 * _761;
        float _2772 = _762 * _2760;
        float _2773 = (-0.0) - _2772;
        float _2775 = _2760 * _763;
        float _2777 = (cbSceneParam._m0[77u].w * _2773) / _2759;
        float _2778 = _2777 + cbSceneParam._m0[79u].w;
        float _2779 = cbSceneParam._m0[79u].w - _2772;
        float _2785 = sqrt(((_2771 * _2771) + (_2772 * _2772)) + (_2775 * _2775));
        float _2788 = (1.0 - (cbSceneParam._m0[77u].w / _2759)) * _2785;
        float _2793 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2795 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2957;
        if (abs((_2773 - _2777) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2957 = ((((_2778 > 0.0) ? exp2(_2793 * _2778) : (2.0 - exp2(_2795 * _2778))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2788;
        }
        else
        {
            float _2917 = 1.0 / cbSceneParam._m0[80u].x;
            float _2918 = isnan(_2779) ? _2778 : (isnan(_2778) ? _2779 : max(_2778, _2779));
            float _2919 = isnan(_2779) ? _2778 : (isnan(_2778) ? _2779 : min(_2778, _2779));
            float _2928 = isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : min(_2918, 0.0));
            float _2929 = isnan(0.0) ? _2919 : (isnan(_2919) ? 0.0 : min(_2919, 0.0));
            _2957 = ((abs(_2785 / _2773) * cbSceneParam._m0[80u].y) * ((((_2928 - _2929) * 2.0) - ((exp2(_2793 * (isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : max(_2918, 0.0)))) - exp2(_2793 * (isnan(0.0) ? _2919 : (isnan(_2919) ? 0.0 : max(_2919, 0.0))))) * _2917)) - ((exp2(_2795 * _2928) - exp2(_2795 * _2929)) * _2917))) + (_2788 * cbSceneParam._m0[80u].z);
        }
        vec4 _2959 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2684, _2685, 1.0), 0.0);
        float _2968 = exp2((_2957 * (-1.44269502162933349609375)) * (1.0 - _2959.w));
        float _2969 = log2(_2968);
        float _2985 = log2(_2704);
        _2797 = (exp2(_2985 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2969 * cbSceneParam._m0[78u].x)) * _2959.x) / cbSceneParam._m0[78u].x)) + _2701;
        _2799 = (exp2(_2985 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2969 * cbSceneParam._m0[78u].y)) * _2959.y) / cbSceneParam._m0[78u].y)) + _2702;
        _2801 = (exp2(_2985 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2969 * cbSceneParam._m0[78u].z)) * _2959.z) / cbSceneParam._m0[78u].z)) + _2703;
        _2803 = _2968 * _2704;
    }
    else
    {
        _2797 = _2701;
        _2799 = _2702;
        _2801 = _2703;
        _2803 = _2704;
    }
    float _2815 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2816 = _2815 == 3.0;
    float _2817 = log2(_2803);
    float _2821 = exp2(_2817 * cbSceneParam._m0[78u].x);
    float _2822 = exp2(_2817 * cbSceneParam._m0[78u].y);
    float _2823 = exp2(_2817 * cbSceneParam._m0[78u].z);
    float _2824 = _2821 * (isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : max(_2658, 0.0)));
    float _2825 = _2822 * (isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0)));
    float _2826 = _2823 * (isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0)));
    float _2835 = (_2815 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2835 * (_2816 ? _2824 : (_2824 + (cbSceneParam._m0[72u].w * _2797)));
    SV_Target.y = _2835 * (_2816 ? _2825 : (_2825 + (cbSceneParam._m0[72u].w * _2799)));
    SV_Target.z = _2835 * (_2816 ? _2826 : (_2826 + (cbSceneParam._m0[72u].w * _2801)));
    SV_Target.w = cbInstanceData._m0[_2676].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2635) * _2675) * _2821) * _2835;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2638) * _2675) * _2822) * _2835;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2641) * _2675) * _2823) * _2835;
    SV_Target_1.w = cbInstanceData._m0[_2676].w;
}


