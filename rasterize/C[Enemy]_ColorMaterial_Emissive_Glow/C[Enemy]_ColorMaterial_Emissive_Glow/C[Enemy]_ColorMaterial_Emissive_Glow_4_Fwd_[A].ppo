#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[29];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 12) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 9) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2DArray C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_0;
layout(set = 0, binding = 14) uniform texture2DArray C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1355;
float _3778;
float _3779;
float _3780;
float _3781;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _209 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _210 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _211 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _217 = inversesqrt(dot(vec3(_209, _210, _211), vec3(_209, _210, _211)));
    float _224 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _231 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _252 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_1) + cbTextureTilingScale._m0[10u].w));
    float _266 = exp2(log2(_252.w * cbMtdParam._m0[25u].z) * cbMtdParam._m0[22u].x);
    float _267 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _268 = isnan(1.0) ? _267 : (isnan(_267) ? 1.0 : min(_267, 1.0));
    vec4 _282 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _286 = _282.z;
    float _295 = exp2(log2(_286 * cbMtdParam._m0[22u].y) * cbMtdParam._m0[21u].y);
    float _296 = isnan(0.0) ? _295 : (isnan(_295) ? 0.0 : max(_295, 0.0));
    float _297 = isnan(1.0) ? _296 : (isnan(_296) ? 1.0 : min(_296, 1.0));
    vec4 _309 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _312 = _309.y;
    float _315 = (_309.x + (-0.02500000037252902984619140625)) * 8.0;
    float _319 = roundEven(5.0 - _315);
    float _320 = isnan(0.0) ? _319 : (isnan(_319) ? 0.0 : max(_319, 0.0));
    float _321 = isnan(4.0) ? _320 : (isnan(_320) ? 4.0 : min(_320, 4.0));
    float _334 = floor(_321);
    vec4 _337 = texture(sampler2DArray(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w, _334));
    float _187[6];
    float _188[6];
    float _189[6];
    _187[0u] = cbMtdParam._m0[17u].x;
    _188[0u] = cbMtdParam._m0[17u].y;
    _189[0u] = cbMtdParam._m0[17u].z;
    _187[1u] = cbMtdParam._m0[15u].x;
    _188[1u] = cbMtdParam._m0[15u].y;
    _189[1u] = cbMtdParam._m0[15u].z;
    _187[2u] = cbMtdParam._m0[14u].x;
    _188[2u] = cbMtdParam._m0[14u].y;
    _189[2u] = cbMtdParam._m0[14u].z;
    _187[3u] = cbMtdParam._m0[13u].x;
    _188[3u] = cbMtdParam._m0[13u].y;
    _189[3u] = cbMtdParam._m0[13u].z;
    _187[4u] = cbMtdParam._m0[12u].x;
    _188[4u] = cbMtdParam._m0[12u].y;
    _189[4u] = cbMtdParam._m0[12u].z;
    _187[5u] = cbMtdParam._m0[18u].x;
    _188[5u] = cbMtdParam._m0[18u].y;
    _189[5u] = cbMtdParam._m0[18u].z;
    float _401 = roundEven(_315);
    float _402 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    uint _404 = uint(int(isnan(5.0) ? _402 : (isnan(_402) ? 5.0 : min(_402, 5.0))));
    vec4 _434 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _445 = cbMtdParam._m0[9u].x * _434.x;
    float _446 = cbMtdParam._m0[9u].y * _434.y;
    float _447 = cbMtdParam._m0[9u].z * _434.z;
    float _454 = ((((((_187[_404] - cbMtdParam._m0[10u].x) * _312) + cbMtdParam._m0[10u].x) * _337.x) - _445) * _297) + _445;
    float _455 = ((((((_188[_404] - cbMtdParam._m0[10u].y) * _312) + cbMtdParam._m0[10u].y) * _337.y) - _446) * _297) + _446;
    float _456 = ((((((_189[_404] - cbMtdParam._m0[10u].z) * _312) + cbMtdParam._m0[10u].z) * _337.z) - _447) * _297) + _447;
    float _462 = exp2(log2(_282.w) * cbMtdParam._m0[22u].w);
    vec4 _475 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _495 = (((cbMtdParam._m0[16u].x * _475.x) - _454) * _462) + _454;
    float _496 = (((cbMtdParam._m0[16u].y * _475.y) - _455) * _462) + _455;
    float _497 = (((cbMtdParam._m0[16u].z * _475.z) - _456) * _462) + _456;
    vec4 _510 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _535 = (_252.x * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].x * _510.x) - _495) * _268) + _495);
    float _537 = (_252.y * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].y * _510.y) - _496) * _268) + _496);
    float _539 = (_252.z * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].z * _510.z) - _497) * _268) + _497);
    float _182[5];
    float _183[5];
    _182[0u] = cbMtdParam._m0[25u].w;
    _183[0u] = cbMtdParam._m0[26u].x;
    _182[1u] = cbMtdParam._m0[27u].w;
    _183[1u] = cbMtdParam._m0[28u].x;
    _182[2u] = cbMtdParam._m0[27u].y;
    _183[2u] = cbMtdParam._m0[27u].z;
    _182[3u] = cbMtdParam._m0[26u].w;
    _183[3u] = cbMtdParam._m0[27u].x;
    _182[4u] = cbMtdParam._m0[26u].y;
    _183[4u] = cbMtdParam._m0[26u].z;
    float _577 = isnan(0.0) ? _321 : (isnan(_321) ? 0.0 : max(_321, 0.0));
    uint _579 = uint(int(isnan(4.0) ? _577 : (isnan(_577) ? 4.0 : min(_577, 4.0))));
    float _586 = ((_183[_579] - cbMtdParam._m0[21u].z) * _297) + cbMtdParam._m0[21u].z;
    float _589 = ((cbMtdParam._m0[21u].w - _586) * _462) + _586;
    float _592 = ((cbMtdParam._m0[24u].y - _589) * _268) + _589;
    vec4 _607 = texture(sampler2DArray(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w, _334));
    vec4 _624 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _626 = _624.x;
    float _627 = _624.y;
    float _632 = cbMtdParam._m0[21u].x + _624.z;
    float _635 = (((_607.z + _182[_579]) - _632) * _297) + _632;
    vec4 _648 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_1) + cbTextureTilingScale._m0[11u].w));
    float _659 = (((_648.z - _635) + cbMtdParam._m0[25u].y) * _462) + _635;
    float _665 = ((((_286 * 2.0) * _659) - _659) * cbMtdParam._m0[23u].w) + _659;
    vec4 _677 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_1) + cbTextureTilingScale._m0[12u].w));
    float _688 = (((cbMtdParam._m0[22u].z + _677.z) - _665) * _268) + _665;
    vec4 _707 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _724 = ((_607.x - _626) * _297) + _626;
    float _725 = ((_607.y - _627) * _297) + _627;
    float _730 = ((_648.x - _724) * _462) + _724;
    float _731 = ((_648.y - _725) * _462) + _725;
    float _740 = ((((_677.x - _730) * _268) + _730) * 2.0) + (-1.0);
    float _741 = ((((_677.y - _731) * _268) + _731) * 2.0) + (-1.0);
    float _742 = dot(vec2(_740, _741), vec2(_740, _741));
    float _3840 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _747 = sqrt(1.0 - (isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0))));
    float _750 = (cbMtdParam._m0[24u].z * ((_282.x * 2.0) + (-1.0))) + _740;
    float _751 = (cbMtdParam._m0[24u].z * ((_282.y * 2.0) + (-1.0))) + _741;
    float _753 = gl_FragCoord.x * 0.125;
    float _755 = gl_FragCoord.y * 0.125;
    float _766 = fma(_747, _224 * NORMAL.x, fma(_751, _231 * TANGENT.x, (_217 * _209) * _750));
    float _769 = fma(_747, _224 * NORMAL.y, fma(_751, _231 * TANGENT.y, (_217 * _210) * _750));
    float _772 = fma(_747, _224 * NORMAL.z, fma(_751, _231 * TANGENT.z, (_217 * _211) * _750));
    float _776 = inversesqrt(dot(vec3(_766, _769, _772), vec3(_766, _769, _772)));
    float _777 = _776 * _766;
    float _778 = _776 * _769;
    float _779 = _776 * _772;
    float _3851 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _780 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
    float _3862 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _3873 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _3884 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _3895 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _784 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
    if (!(cbMtdParam._m0[24u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_753, _755)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _804 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _844 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _854 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _844);
    float _855 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _844);
    float _856 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _844);
    float _860 = inversesqrt(dot(vec3(_854, _855, _856), vec3(_854, _855, _856)));
    float _861 = _854 * _860;
    float _862 = _855 * _860;
    float _863 = _856 * _860;
    vec4 _865 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_753, _755));
    float _867 = _865.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1037 = sqrt(((_854 * _854) + (_855 * _855)) + (_856 * _856));
        float _1043 = (cbMatDynParam._m0[5u].x * _1037) + cbMatDynParam._m0[5u].y;
        float _3906 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1044 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
        float _1048 = (cbMatDynParam._m0[5u].z * _1037) + cbMatDynParam._m0[5u].w;
        float _3917 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0))) - _1044)) + _1044) < ((_867 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _878 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _879 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _897 = fma(_779, cbSceneParam._m0[5u].z, fma(_778, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _777));
    float _900 = fma(_779, cbSceneParam._m0[6u].z, fma(_778, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _777));
    float _903 = fma(_779, cbSceneParam._m0[7u].z, fma(_778, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _777));
    uint _916 = uint(roundEven(NORMAL.w)) * 13u;
    uint _917 = _916 + 9u;
    uint _918 = _917 + uint(cbMatDynParam._m0[0u].w);
    float _924 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0)))) * cbInstanceData._m0[_918].x;
    float _925 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0)))) * cbInstanceData._m0[_918].y;
    float _926 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0)))) * cbInstanceData._m0[_918].z;
    float _3928 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
    float _927 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
    float _3939 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
    float _928 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
    float _3950 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
    float _929 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
    float _930 = 1.0 - _784;
    float _931 = _927 * _930;
    float _932 = _928 * _930;
    float _933 = _929 * _930;
    float _938 = (_927 + (-0.039999999105930328369140625)) * _784;
    float _939 = (_928 + (-0.039999999105930328369140625)) * _784;
    float _940 = (_929 + (-0.039999999105930328369140625)) * _784;
    float _941 = _938 + 0.039999999105930328369140625;
    float _943 = _939 + 0.039999999105930328369140625;
    float _944 = _940 + 0.039999999105930328369140625;
    vec4 _953 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _878, cbSceneParam._m0[86u].y * _879));
    float _956 = _953.x * TEXCOORD_3.w;
    float _957 = dot(vec3(_777, _778, _779), vec3(_861, _862, _863));
    float _960 = _957 * 2.0;
    float _964 = (_960 * _777) - _861;
    float _965 = (_960 * _778) - _862;
    float _966 = (_960 * _779) - _863;
    float _970 = abs(dot(vec3(_861, _862, _863), vec3(_777, _778, _779)));
    float _3961 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
    float _972 = sqrt(_780);
    float _983 = exp2((_972 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_972 * 3.0));
    float _989 = (1.0 - _983) * ((_972 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _990 = _983 * _972;
    float _1018 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1022 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1026 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1354;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1079 = fma(_1026, cbModelParam._m0[26u].z, fma(_1022, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1018));
        float _1083 = fma(_1026, cbModelParam._m0[27u].z, fma(_1022, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1018));
        float _1087 = fma(_1026, cbModelParam._m0[28u].z, fma(_1022, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1018));
        float _1112 = _1018 + _777;
        float _1113 = _1022 + _778;
        float _1114 = _1026 + _779;
        float _1124 = fma(_1114, cbModelParam._m0[26u].z, fma(_1113, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1112)) - _1079;
        float _1125 = fma(_1114, cbModelParam._m0[27u].z, fma(_1113, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1112)) - _1083;
        float _1126 = fma(_1114, cbModelParam._m0[28u].z, fma(_1113, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1112)) - _1087;
        float _1130 = inversesqrt(dot(vec3(_1124, _1125, _1126), vec3(_1124, _1125, _1126)));
        float _1143 = ((_1130 * _1124) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1079 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1144 = ((_1130 * _1125) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1083 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1145 = ((_1130 * _1126) / cbModelParam._m0[34u].z) + ((((((_1087 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1148 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1143, _1144, _1145), 0.0);
        vec4 _1155 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1143, _1144, _1145), 0.0);
        vec4 _1162 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1143, _1144, _1145), 0.0);
        vec4 _1169 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1143, _1144, _1145), 0.0);
        float _1182 = exp2((_1148.w + (-0.5)) * 20.0) * 2.0;
        float _1183 = _1182 * (_1148.x + (-0.5));
        float _1184 = _1182 * (_1148.y + (-0.5));
        float _1185 = _1182 * (_1148.z + (-0.5));
        float _1192 = exp2((_1155.w + (-0.5)) * 20.0) * 2.0;
        float _1193 = _1192 * (_1155.x + (-0.5));
        float _1194 = _1192 * (_1155.y + (-0.5));
        float _1195 = _1192 * (_1155.z + (-0.5));
        float _1202 = exp2((_1162.w + (-0.5)) * 20.0) * 2.0;
        float _1203 = _1202 * (_1162.x + (-0.5));
        float _1204 = _1202 * (_1162.y + (-0.5));
        float _1205 = _1202 * (_1162.z + (-0.5));
        float _1212 = exp2((_1169.w + (-0.5)) * 20.0) * 2.0;
        float _1213 = _1212 * (_1169.x + (-0.5));
        float _1214 = _1212 * (_1169.y + (-0.5));
        float _1215 = _1212 * (_1169.z + (-0.5));
        float _1216 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1217 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1218 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1219 = _1183 * 0.5;
        float _1220 = _1193 * 0.5;
        float _1221 = _1203 * 0.5;
        float _1222 = dot(vec3(_1219, _1220, _1221), vec3(_1219, _1220, _1221));
        float _1227 = (_1222 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1222);
        float _1236 = (dot(vec3(_777, _778, _779), vec3(_1227 * _1219, _1227 * _1220, _1227 * _1221)) + 1.0) * 0.5;
        float _3987 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1246 = sqrt(((_1220 * _1220) + (_1219 * _1219)) + (_1221 * _1221)) / (_1216 + 9.9999997473787516355514526367188e-06);
        float _3998 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1247 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
        float _1248 = _1247 * 2.0;
        float _1252 = (1.0 - _1247) / (_1247 + 1.0);
        float _4009 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1253 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
        float _1262 = ((((1.0 - _1253) * (_1248 + 2.0)) * exp2(log2(isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0))) * (_1248 + 1.0))) + _1253) * _1216;
        float _1263 = _1184 * 0.5;
        float _1264 = _1194 * 0.5;
        float _1265 = _1204 * 0.5;
        float _1266 = dot(vec3(_1263, _1264, _1265), vec3(_1263, _1264, _1265));
        float _1271 = (_1266 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1266);
        float _1279 = (dot(vec3(_777, _778, _779), vec3(_1271 * _1263, _1271 * _1264, _1271 * _1265)) + 1.0) * 0.5;
        float _4020 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1288 = sqrt(((_1264 * _1264) + (_1263 * _1263)) + (_1265 * _1265)) / (_1217 + 9.9999997473787516355514526367188e-06);
        float _4031 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1289 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
        float _1290 = _1289 * 2.0;
        float _1294 = (1.0 - _1289) / (_1289 + 1.0);
        float _4042 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1295 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
        float _1304 = ((((1.0 - _1295) * (_1290 + 2.0)) * exp2(log2(isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0))) * (_1290 + 1.0))) + _1295) * _1217;
        float _1305 = _1185 * 0.5;
        float _1306 = _1195 * 0.5;
        float _1307 = _1205 * 0.5;
        float _1308 = dot(vec3(_1305, _1306, _1307), vec3(_1305, _1306, _1307));
        float _1313 = (_1308 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1308);
        float _1321 = (dot(vec3(_777, _778, _779), vec3(_1313 * _1305, _1313 * _1306, _1313 * _1307)) + 1.0) * 0.5;
        float _4053 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1330 = sqrt(((_1306 * _1306) + (_1305 * _1305)) + (_1307 * _1307)) / (_1218 + 9.9999997473787516355514526367188e-06);
        float _4064 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1331 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
        float _1332 = _1331 * 2.0;
        float _1336 = (1.0 - _1331) / (_1331 + 1.0);
        float _4075 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1337 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
        float _1346 = ((((1.0 - _1337) * (_1332 + 2.0)) * exp2(log2(isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0))) * (_1332 + 1.0))) + _1337) * _1218;
        _1354 = _1185;
        _1356 = _1184;
        _1357 = _1183;
        _1358 = _1195;
        _1359 = _1194;
        _1360 = _1193;
        _1361 = _1205;
        _1362 = _1204;
        _1363 = _1203;
        _1364 = _1218;
        _1365 = _1217;
        _1366 = _1216;
        _1367 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0)));
        _1368 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0)));
        _1369 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0)));
    }
    else
    {
        _1354 = _1355;
        _1356 = _1355;
        _1357 = _1355;
        _1358 = _1355;
        _1359 = _1355;
        _1360 = _1355;
        _1361 = _1355;
        _1362 = _1355;
        _1363 = _1355;
        _1364 = _1355;
        _1365 = _1355;
        _1366 = _1355;
        _1367 = 0.0;
        _1368 = 0.0;
        _1369 = 0.0;
    }
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    float _1668;
    float _1669;
    float _1670;
    float _1671;
    float _1672;
    float _1673;
    float _1674;
    float _1675;
    float _1676;
    float _1677;
    float _1678;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1395 = fma(_1026, cbModelParam._m0[30u].z, fma(_1022, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1018));
        float _1399 = fma(_1026, cbModelParam._m0[31u].z, fma(_1022, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1018));
        float _1403 = fma(_1026, cbModelParam._m0[32u].z, fma(_1022, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1018));
        float _1426 = _1018 + _777;
        float _1427 = _1022 + _778;
        float _1428 = _1026 + _779;
        float _1438 = fma(_1428, cbModelParam._m0[30u].z, fma(_1427, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1426)) - _1395;
        float _1439 = fma(_1428, cbModelParam._m0[31u].z, fma(_1427, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1426)) - _1399;
        float _1440 = fma(_1428, cbModelParam._m0[32u].z, fma(_1427, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1426)) - _1403;
        float _1444 = inversesqrt(dot(vec3(_1438, _1439, _1440), vec3(_1438, _1439, _1440)));
        float _1457 = ((_1444 * _1438) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1395 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1458 = ((_1444 * _1439) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1399 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1459 = ((_1444 * _1440) / cbModelParam._m0[35u].z) + ((((((_1403 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1461 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1457, _1458, _1459), 0.0);
        vec4 _1468 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1457, _1458, _1459), 0.0);
        vec4 _1475 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1457, _1458, _1459), 0.0);
        vec4 _1482 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1457, _1458, _1459), 0.0);
        float _1494 = exp2((_1461.w + (-0.5)) * 20.0) * 2.0;
        float _1495 = _1494 * (_1461.x + (-0.5));
        float _1496 = _1494 * (_1461.y + (-0.5));
        float _1497 = _1494 * (_1461.z + (-0.5));
        float _1504 = exp2((_1468.w + (-0.5)) * 20.0) * 2.0;
        float _1505 = _1504 * (_1468.x + (-0.5));
        float _1506 = _1504 * (_1468.y + (-0.5));
        float _1507 = _1504 * (_1468.z + (-0.5));
        float _1514 = exp2((_1475.w + (-0.5)) * 20.0) * 2.0;
        float _1515 = _1514 * (_1475.x + (-0.5));
        float _1516 = _1514 * (_1475.y + (-0.5));
        float _1517 = _1514 * (_1475.z + (-0.5));
        float _1524 = exp2((_1482.w + (-0.5)) * 20.0) * 2.0;
        float _1525 = _1524 * (_1482.x + (-0.5));
        float _1526 = _1524 * (_1482.y + (-0.5));
        float _1527 = _1524 * (_1482.z + (-0.5));
        float _1528 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1529 = isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0));
        float _1530 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1531 = _1495 * 0.5;
        float _1532 = _1505 * 0.5;
        float _1533 = _1515 * 0.5;
        float _1534 = dot(vec3(_1531, _1532, _1533), vec3(_1531, _1532, _1533));
        float _1539 = (_1534 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1534);
        float _1547 = (dot(vec3(_777, _778, _779), vec3(_1539 * _1531, _1539 * _1532, _1539 * _1533)) + 1.0) * 0.5;
        float _4116 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1556 = sqrt(((_1532 * _1532) + (_1531 * _1531)) + (_1533 * _1533)) / (_1528 + 9.9999997473787516355514526367188e-06);
        float _4127 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1557 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
        float _1558 = _1557 * 2.0;
        float _1562 = (1.0 - _1557) / (_1557 + 1.0);
        float _4138 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
        float _1563 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
        float _1572 = ((((1.0 - _1563) * (_1558 + 2.0)) * exp2(log2(isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0))) * (_1558 + 1.0))) + _1563) * _1528;
        float _1573 = _1496 * 0.5;
        float _1574 = _1506 * 0.5;
        float _1575 = _1516 * 0.5;
        float _1576 = dot(vec3(_1573, _1574, _1575), vec3(_1573, _1574, _1575));
        float _1581 = (_1576 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1576);
        float _1589 = (dot(vec3(_777, _778, _779), vec3(_1581 * _1573, _1581 * _1574, _1581 * _1575)) + 1.0) * 0.5;
        float _4149 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
        float _1598 = sqrt(((_1574 * _1574) + (_1573 * _1573)) + (_1575 * _1575)) / (_1529 + 9.9999997473787516355514526367188e-06);
        float _4160 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
        float _1599 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
        float _1600 = _1599 * 2.0;
        float _1604 = (1.0 - _1599) / (_1599 + 1.0);
        float _4171 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
        float _1605 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
        float _1614 = ((((1.0 - _1605) * (_1600 + 2.0)) * exp2(log2(isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0))) * (_1600 + 1.0))) + _1605) * _1529;
        float _1615 = _1497 * 0.5;
        float _1616 = _1507 * 0.5;
        float _1617 = _1517 * 0.5;
        float _1618 = dot(vec3(_1615, _1616, _1617), vec3(_1615, _1616, _1617));
        float _1623 = (_1618 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1618);
        float _1631 = (dot(vec3(_777, _778, _779), vec3(_1623 * _1615, _1623 * _1616, _1623 * _1617)) + 1.0) * 0.5;
        float _4182 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
        float _1640 = sqrt(((_1616 * _1616) + (_1615 * _1615)) + (_1617 * _1617)) / (_1530 + 9.9999997473787516355514526367188e-06);
        float _4193 = isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0));
        float _1641 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
        float _1642 = _1641 * 2.0;
        float _1646 = (1.0 - _1641) / (_1641 + 1.0);
        float _4204 = isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0));
        float _1647 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
        float _1656 = ((((1.0 - _1647) * (_1642 + 2.0)) * exp2(log2(isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0))) * (_1642 + 1.0))) + _1647) * _1530;
        _1664 = _1497;
        _1665 = _1496;
        _1666 = _1495;
        _1667 = _1507;
        _1668 = _1506;
        _1669 = _1505;
        _1670 = _1517;
        _1671 = _1516;
        _1672 = _1515;
        _1673 = _1530;
        _1674 = _1529;
        _1675 = _1528;
        _1676 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0)));
        _1677 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0)));
        _1678 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0)));
    }
    else
    {
        _1664 = _1355;
        _1665 = _1355;
        _1666 = _1355;
        _1667 = _1355;
        _1668 = _1355;
        _1669 = _1355;
        _1670 = _1355;
        _1671 = _1355;
        _1672 = _1355;
        _1673 = _1355;
        _1674 = _1355;
        _1675 = _1355;
        _1676 = 0.0;
        _1677 = 0.0;
        _1678 = 0.0;
    }
    float _1688 = (cbModelParam._m0[1u].x * (_1676 - _1367)) + _1367;
    float _1689 = (cbModelParam._m0[1u].x * (_1677 - _1368)) + _1368;
    float _1690 = (cbModelParam._m0[1u].x * (_1678 - _1369)) + _1369;
    float _1711 = fma(_1690, cbSceneParam._m0[89u].z, fma(_1689, cbSceneParam._m0[89u].y, _1688 * cbSceneParam._m0[89u].x));
    float _1714 = fma(_1690, cbSceneParam._m0[90u].z, fma(_1689, cbSceneParam._m0[90u].y, _1688 * cbSceneParam._m0[90u].x));
    float _1717 = fma(_1690, cbSceneParam._m0[91u].z, fma(_1689, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1688));
    float _1732 = _964 * 0.5;
    float _1733 = _965 * 0.5;
    float _1734 = _966 * 0.5;
    float _1735 = dot(vec4(_1732, _1733, _1734, 1.0), vec4(_1666, _1669, _1672, _1675));
    float _1738 = dot(vec4(_1732, _1733, _1734, 1.0), vec4(_1665, _1668, _1671, _1674));
    float _1741 = dot(vec4(_1732, _1733, _1734, 1.0), vec4(_1664, _1667, _1670, _1673));
    float _1775;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1748 = dot(vec4(_1732, _1733, _1734, 1.0), vec4(_1354, _1358, _1361, _1364));
        float _1752 = dot(vec4(_1732, _1733, _1734, 1.0), vec4(_1356, _1359, _1362, _1365));
        float _1756 = dot(vec4(_1732, _1733, _1734, 1.0), vec4(_1357, _1360, _1363, _1366));
        float _1763 = dot(vec4(cbModelParam._m0[39u]), vec4(_1732, _1733, _1734, 1.0));
        _1775 = dot(vec3(isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0)), isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0)), isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1763) ? 0.0 : (isnan(0.0) ? _1763 : max(0.0, _1763))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1775 = 1.0;
    }
    float _1786;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1777 = dot(vec4(cbModelParam._m0[40u]), vec4(_1732, _1733, _1734, 1.0));
        _1786 = dot(vec3(isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0)), isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0)), isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1777) ? 0.0 : (isnan(0.0) ? _1777 : max(0.0, _1777))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1786 = 1.0;
    }
    float _1790 = (_1786 * cbModelParam._m0[1u].x) + (_1775 * (1.0 - cbModelParam._m0[1u].x));
    float _1800 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _780);
    float _1801 = isnan(_1800) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1800 : min(cbModelParam._m0[25u].z, _1800));
    float _1881;
    float _1883;
    float _1885;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1848 = fma(_1026, cbModelParam._m0[13u].z, fma(_1022, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1018)) + cbModelParam._m0[13u].w;
        float _1852 = fma(_1026, cbModelParam._m0[14u].z, fma(_1022, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1018)) + cbModelParam._m0[14u].w;
        float _1856 = fma(_1026, cbModelParam._m0[15u].z, fma(_1022, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1018)) + cbModelParam._m0[15u].w;
        float _1859 = fma(_966, cbModelParam._m0[13u].z, fma(_965, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _964));
        float _1862 = fma(_966, cbModelParam._m0[14u].z, fma(_965, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _964));
        float _1865 = fma(_966, cbModelParam._m0[15u].z, fma(_965, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _964));
        float _1893;
        if (_1859 > 0.0)
        {
            _1893 = abs((1.0 - _1848) / _1859);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1859 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1848 + 1.0) / _1859);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1893 = frontier_phi_19_17_ladder;
        }
        float _2095;
        if (_1862 > 0.0)
        {
            _2095 = abs((1.0 - _1852) / _1862);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1862 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1852 + 1.0) / _1862);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2095 = frontier_phi_28_24_ladder;
        }
        float _2349;
        if (_1865 > 0.0)
        {
            _2349 = abs((1.0 - _1856) / _1865);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1865 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1856 + 1.0) / _1865);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2349 = frontier_phi_40_35_ladder;
        }
        float _2351 = isnan(_2095) ? _1893 : (isnan(_1893) ? _2095 : min(_1893, _2095));
        float _2352 = isnan(_2349) ? _2351 : (isnan(_2351) ? _2349 : min(_2351, _2349));
        float _2356 = (_2352 * _1859) + _1848;
        float _2357 = (_2352 * _1862) + _1852;
        float _2358 = (_2352 * _1865) + _1856;
        float _2359 = _2352 * 9.9999997473787516355514526367188e-05;
        float _2361 = (-1.0) - _2359;
        float _2363 = _2359 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2358 > _2363) || ((_2358 < _2361) || ((_2357 > _2363) || ((_2357 < _2361) || ((_2356 < _2361) || (_2356 > _2363))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2486 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2358, cbModelParam._m0[9u].z, fma(_2357, cbModelParam._m0[9u].y, _2356 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2358, cbModelParam._m0[10u].z, fma(_2357, cbModelParam._m0[10u].y, _2356 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2358, cbModelParam._m0[11u].z, fma(_2357, cbModelParam._m0[11u].y, _2356 * cbModelParam._m0[11u].x))), _1801);
            frontier_phi_18_40_ladder = _2486.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2486.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2486.x * cbModelParam._m0[1u].y;
        }
        _1881 = frontier_phi_18_40_ladder_2;
        _1883 = frontier_phi_18_40_ladder_1;
        _1885 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1869 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_964, _965, _966), _1801);
        _1881 = _1869.x * cbModelParam._m0[1u].y;
        _1883 = _1869.y * cbModelParam._m0[1u].y;
        _1885 = _1869.z * cbModelParam._m0[1u].y;
    }
    float _1889 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _780);
    float _1890 = isnan(_1889) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1889 : min(cbModelParam._m0[25u].w, _1889));
    float _1979;
    float _1981;
    float _1983;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1943 = fma(_1026, cbModelParam._m0[21u].z, fma(_1022, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1018)) + cbModelParam._m0[21u].w;
        float _1947 = fma(_1026, cbModelParam._m0[22u].z, fma(_1022, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1018)) + cbModelParam._m0[22u].w;
        float _1951 = fma(_1026, cbModelParam._m0[23u].z, fma(_1022, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1018)) + cbModelParam._m0[23u].w;
        float _1954 = fma(_966, cbModelParam._m0[21u].z, fma(_965, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _964));
        float _1957 = fma(_966, cbModelParam._m0[22u].z, fma(_965, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _964));
        float _1960 = fma(_966, cbModelParam._m0[23u].z, fma(_965, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _964));
        float _2100;
        if (_1954 > 0.0)
        {
            _2100 = abs((1.0 - _1943) / _1954);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1954 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1943 + 1.0) / _1954);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2100 = frontier_phi_30_26_ladder;
        }
        float _2376;
        if (_1957 > 0.0)
        {
            _2376 = abs((1.0 - _1947) / _1957);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1957 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1947 + 1.0) / _1957);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2376 = frontier_phi_42_37_ladder;
        }
        float _2589;
        if (_1960 > 0.0)
        {
            _2589 = abs((1.0 - _1951) / _1960);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1960 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1951 + 1.0) / _1960);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2589 = frontier_phi_51_48_ladder;
        }
        float _2591 = isnan(_2376) ? _2100 : (isnan(_2100) ? _2376 : min(_2100, _2376));
        float _2592 = isnan(_2589) ? _2591 : (isnan(_2591) ? _2589 : min(_2591, _2589));
        float _2596 = (_2592 * _1954) + _1943;
        float _2597 = (_2592 * _1957) + _1947;
        float _2598 = (_2592 * _1960) + _1951;
        float _2599 = _2592 * 9.9999997473787516355514526367188e-05;
        float _2600 = (-1.0) - _2599;
        float _2602 = _2599 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2598 > _2602) || ((_2598 < _2600) || ((_2597 > _2602) || ((_2597 < _2600) || ((_2596 < _2600) || (_2596 > _2602))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2832 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2598, cbModelParam._m0[17u].z, fma(_2597, cbModelParam._m0[17u].y, _2596 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2598, cbModelParam._m0[18u].z, fma(_2597, cbModelParam._m0[18u].y, _2596 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2598, cbModelParam._m0[19u].z, fma(_2597, cbModelParam._m0[19u].y, _2596 * cbModelParam._m0[19u].x))), _1890);
            frontier_phi_27_51_ladder = _2832.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2832.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2832.x * cbModelParam._m0[1u].z;
        }
        _1979 = frontier_phi_27_51_ladder_2;
        _1981 = frontier_phi_27_51_ladder_1;
        _1983 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1963 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_964, _965, _966), _1890);
        _1979 = _1963.x * cbModelParam._m0[1u].z;
        _1981 = _1963.y * cbModelParam._m0[1u].z;
        _1983 = _1963.z * cbModelParam._m0[1u].z;
    }
    float _1996 = (((_989 * _941) + _990) * _956) * ((cbModelParam._m0[1u].w * (_1979 - _1881)) + _1881);
    float _1998 = (((_989 * _943) + _990) * _956) * ((cbModelParam._m0[1u].w * (_1981 - _1883)) + _1883);
    float _2000 = (((_989 * _944) + _990) * _956) * ((cbModelParam._m0[1u].w * (_1983 - _1885)) + _1885);
    float _2003 = fma(_2000, cbSceneParam._m0[89u].z, fma(_1998, cbSceneParam._m0[89u].y, _1996 * cbSceneParam._m0[89u].x));
    float _2006 = fma(_2000, cbSceneParam._m0[90u].z, fma(_1998, cbSceneParam._m0[90u].y, _1996 * cbSceneParam._m0[90u].x));
    float _2009 = fma(_2000, cbSceneParam._m0[91u].z, fma(_1998, cbSceneParam._m0[91u].y, _1996 * cbSceneParam._m0[91u].x));
    uvec4 _2019 = floatBitsToUint(cbInstanceData._m0[_916 + 5u]);
    uint _2021 = _2019.x * 14u;
    uint _2022 = _2021 + 13u;
    float _2029 = _956 + (-1.0);
    float _2034 = (cbLight._m0[_2022].x * _2029) + 1.0;
    float _2035 = (cbLight._m0[_2022].y * _2029) + 1.0;
    float _2036 = (cbLight._m0[_2022].z * _2029) + 1.0;
    float _2037 = (cbLight._m0[_2022].w * _2029) + 1.0;
    uint _2038 = _2021 + 5u;
    float _2044 = isnan(1.0) ? _2035 : (isnan(_2035) ? 1.0 : min(_2035, 1.0));
    uint _2048 = _2021 + 4u;
    float _2054 = isnan(1.0) ? _2034 : (isnan(_2034) ? 1.0 : min(_2034, 1.0));
    uint _2058 = _2021 | 1u;
    float _2069 = dot(vec3(cbLight._m0[_2021].xyz), vec3(_777, _778, _779));
    float _2072 = dot(vec3(cbLight._m0[_2058].xyz), vec3(_777, _778, _779));
    float _4340 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0));
    float _4351 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
    float _2077 = (isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0))) * 0.3183098733425140380859375;
    float _2079 = (isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0))) * 0.3183098733425140380859375;
    float _2086 = ((cbLight._m0[_2038].x * _2044) * _2079) + ((cbLight._m0[_2048].x * _2054) * _2077);
    float _2087 = ((_2044 * cbLight._m0[_2038].y) * _2079) + ((_2054 * cbLight._m0[_2048].y) * _2077);
    float _2088 = ((_2044 * cbLight._m0[_2038].z) * _2079) + ((_2054 * cbLight._m0[_2048].z) * _2077);
    uvec4 _2092 = floatBitsToUint(cbLight._m0[_2021 + 12u]);
    bool _2094 = _2092.x == 0u;
    float _2105;
    float _2107;
    float _2109;
    if (_2094)
    {
        _2105 = _2086;
        _2107 = _2087;
        _2109 = _2088;
    }
    else
    {
        uint _2113 = _2021 + 6u;
        float _2129 = (dot(vec3(cbLight._m0[_2021 + 2u].xyz), vec3(_777, _778, _779)) * 0.5) + 0.5;
        float _2130 = _2129 * _2129;
        float _4362 = isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0));
        float _2131 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
        float _2132 = isnan(1.0) ? _2036 : (isnan(_2036) ? 1.0 : min(_2036, 1.0));
        _2105 = (((cbLight._m0[_2113].x * 0.3183098733425140380859375) * _2131) * _2132) + _2086;
        _2107 = (((cbLight._m0[_2113].y * 0.3183098733425140380859375) * _2131) * _2132) + _2087;
        _2109 = (((cbLight._m0[_2113].z * 0.3183098733425140380859375) * _2131) * _2132) + _2088;
    }
    bool _2112 = _2092.y == 0u;
    float _2150;
    float _2152;
    float _2154;
    if (_2112)
    {
        _2150 = _2105;
        _2152 = _2107;
        _2154 = _2109;
    }
    else
    {
        uint _2320 = _2021 + 7u;
        float _2336 = (dot(vec3(cbLight._m0[_2021 + 3u].xyz), vec3(_777, _778, _779)) * 0.5) + 0.5;
        float _2337 = _2336 * _2336;
        float _4378 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
        float _2338 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
        float _2339 = isnan(1.0) ? _2037 : (isnan(_2037) ? 1.0 : min(_2037, 1.0));
        _2150 = (((cbLight._m0[_2320].x * 0.3183098733425140380859375) * _2338) * _2339) + _2105;
        _2152 = (((cbLight._m0[_2320].y * 0.3183098733425140380859375) * _2338) * _2339) + _2107;
        _2154 = (((cbLight._m0[_2320].z * 0.3183098733425140380859375) * _2338) * _2339) + _2109;
    }
    uint _2157 = _2021 + 8u;
    float _2170 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2021].w)) * _780) * 0.949999988079071044921875);
    float _2171 = _2170 * _2170;
    float _2172 = cbLight._m0[_2021].x + _861;
    float _2173 = cbLight._m0[_2021].y + _862;
    float _2174 = cbLight._m0[_2021].z + _863;
    float _2178 = inversesqrt(dot(vec3(_2172, _2173, _2174), vec3(_2172, _2173, _2174)));
    float _2179 = _2178 * _2172;
    float _2180 = _2178 * _2173;
    float _2181 = _2178 * _2174;
    float _2182 = dot(vec3(_777, _778, _779), vec3(cbLight._m0[_2021].xyz));
    float _4394 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
    float _2185 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
    float _4405 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
    float _2186 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
    float _2187 = dot(vec3(_777, _778, _779), vec3(_2179, _2180, _2181));
    float _4416 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
    float _2190 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
    float _2191 = dot(vec3(cbLight._m0[_2021].xyz), vec3(_2179, _2180, _2181));
    float _4427 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
    float _2195 = _2171 * _2171;
    float _2199 = ((_2190 * _2190) * (_2195 + (-1.0))) + 1.0;
    float _2207 = exp2(log2(1.0 - (isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0)))) * 5.0);
    float _2208 = 0.959999978542327880859375 - _938;
    float _2210 = 0.959999978542327880859375 - _939;
    float _2211 = 0.959999978542327880859375 - _940;
    float _2218 = 1.0 - _2171;
    float _2229 = (0.5 / (((_2186 * ((_2185 * _2218) + _2171)) + 9.9999999392252902907785028219223e-09) + (((_2186 * _2218) + _2171) * _2185))) * _2185;
    float _4438 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
    float _2231 = (isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0))) * (_2195 / ((_2199 * _2199) * 3.141590118408203125));
    uint _2242 = _2021 + 9u;
    float _2253 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2058].w)) * _780) * 0.949999988079071044921875);
    float _2254 = _2253 * _2253;
    float _2255 = cbLight._m0[_2058].x + _861;
    float _2256 = cbLight._m0[_2058].y + _862;
    float _2257 = cbLight._m0[_2058].z + _863;
    float _2261 = inversesqrt(dot(vec3(_2255, _2256, _2257), vec3(_2255, _2256, _2257)));
    float _2262 = _2261 * _2255;
    float _2263 = _2261 * _2256;
    float _2264 = _2261 * _2257;
    float _2265 = dot(vec3(_777, _778, _779), vec3(cbLight._m0[_2058].xyz));
    float _4449 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
    float _2268 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
    float _2269 = dot(vec3(_777, _778, _779), vec3(_2262, _2263, _2264));
    float _4460 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
    float _2272 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
    float _2273 = dot(vec3(cbLight._m0[_2058].xyz), vec3(_2262, _2263, _2264));
    float _4471 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
    float _2277 = _2254 * _2254;
    float _2281 = ((_2272 * _2272) * (_2277 + (-1.0))) + 1.0;
    float _2288 = exp2(log2(1.0 - (isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0)))) * 5.0);
    float _2295 = 1.0 - _2254;
    float _2305 = (0.5 / (((_2186 * ((_2268 * _2295) + _2254)) + 9.9999999392252902907785028219223e-09) + (((_2186 * _2295) + _2254) * _2268))) * _2268;
    float _4482 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
    float _2307 = (isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0))) * (_2277 / ((_2281 * _2281) * 3.141590118408203125));
    float _2317 = (((((_2288 * _2208) + _941) * cbLight._m0[_2242].x) * _2307) * _2044) + (((((_2207 * _2208) + _941) * cbLight._m0[_2157].x) * _2231) * _2054);
    float _2318 = (((((_2288 * _2210) + _943) * cbLight._m0[_2242].y) * _2307) * _2044) + (((((_2207 * _2210) + _943) * cbLight._m0[_2157].y) * _2231) * _2054);
    float _2319 = (((((_2288 * _2211) + _944) * cbLight._m0[_2242].z) * _2307) * _2044) + (((((_2207 * _2211) + _944) * cbLight._m0[_2157].z) * _2231) * _2054);
    float _2381;
    float _2383;
    float _2385;
    if (_2094)
    {
        _2381 = _2317;
        _2383 = _2318;
        _2385 = _2319;
    }
    else
    {
        uint _2387 = _2021 + 2u;
        uint _2391 = _2021 + 10u;
        float _2405 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2387].w)) * _780) * 0.949999988079071044921875);
        float _2406 = _2405 * _2405;
        float _2407 = cbLight._m0[_2387].x + _861;
        float _2408 = cbLight._m0[_2387].y + _862;
        float _2409 = cbLight._m0[_2387].z + _863;
        float _2413 = inversesqrt(dot(vec3(_2407, _2408, _2409), vec3(_2407, _2408, _2409)));
        float _2414 = _2413 * _2407;
        float _2415 = _2413 * _2408;
        float _2416 = _2413 * _2409;
        float _2417 = dot(vec3(_777, _778, _779), vec3(cbLight._m0[_2387].xyz));
        float _4493 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0));
        float _2420 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
        float _2421 = dot(vec3(_777, _778, _779), vec3(_2414, _2415, _2416));
        float _4504 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
        float _2424 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
        float _2425 = dot(vec3(cbLight._m0[_2387].xyz), vec3(_2414, _2415, _2416));
        float _4515 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
        float _2429 = _2406 * _2406;
        float _2433 = ((_2424 * _2424) * (_2429 + (-1.0))) + 1.0;
        float _2440 = exp2(log2(1.0 - (isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0)))) * 5.0);
        float _2447 = 1.0 - _2406;
        float _2457 = (0.5 / (((_2186 * ((_2420 * _2447) + _2406)) + 9.9999999392252902907785028219223e-09) + (((_2186 * _2447) + _2406) * _2420))) * _2420;
        float _4526 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
        float _2459 = (isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0))) * (_2429 / ((_2433 * _2433) * 3.141590118408203125));
        float _2460 = isnan(1.0) ? _2036 : (isnan(_2036) ? 1.0 : min(_2036, 1.0));
        _2381 = (((((_2440 * _2208) + _941) * cbLight._m0[_2391].x) * _2459) * _2460) + _2317;
        _2383 = (((((_2440 * _2210) + _943) * cbLight._m0[_2391].y) * _2459) * _2460) + _2318;
        _2385 = (((((_2440 * _2211) + _944) * cbLight._m0[_2391].z) * _2459) * _2460) + _2319;
    }
    float _2495;
    float _2497;
    float _2499;
    if (_2112)
    {
        _2495 = _2381;
        _2497 = _2383;
        _2499 = _2385;
    }
    else
    {
        uint _2506 = _2021 + 3u;
        uint _2510 = _2021 + 11u;
        float _2524 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2506].w)) * _780) * 0.949999988079071044921875);
        float _2525 = _2524 * _2524;
        float _2526 = cbLight._m0[_2506].x + _861;
        float _2527 = cbLight._m0[_2506].y + _862;
        float _2528 = cbLight._m0[_2506].z + _863;
        float _2532 = inversesqrt(dot(vec3(_2526, _2527, _2528), vec3(_2526, _2527, _2528)));
        float _2533 = _2532 * _2526;
        float _2534 = _2532 * _2527;
        float _2535 = _2532 * _2528;
        float _2536 = dot(vec3(_777, _778, _779), vec3(cbLight._m0[_2506].xyz));
        float _4542 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0));
        float _2539 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
        float _2540 = dot(vec3(_777, _778, _779), vec3(_2533, _2534, _2535));
        float _4553 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
        float _2543 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
        float _2544 = dot(vec3(cbLight._m0[_2506].xyz), vec3(_2533, _2534, _2535));
        float _4564 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
        float _2548 = _2525 * _2525;
        float _2552 = ((_2543 * _2543) * (_2548 + (-1.0))) + 1.0;
        float _2559 = exp2(log2(1.0 - (isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0)))) * 5.0);
        float _2566 = 1.0 - _2525;
        float _2576 = (0.5 / (((_2186 * ((_2539 * _2566) + _2525)) + 9.9999999392252902907785028219223e-09) + (((_2186 * _2566) + _2525) * _2539))) * _2539;
        float _4575 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
        float _2578 = (isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0))) * (_2548 / ((_2552 * _2552) * 3.141590118408203125));
        float _2579 = isnan(1.0) ? _2037 : (isnan(_2037) ? 1.0 : min(_2037, 1.0));
        _2495 = (((((_2559 * _2208) + _941) * cbLight._m0[_2510].x) * _2578) * _2579) + _2381;
        _2497 = (((((_2559 * _2210) + _943) * cbLight._m0[_2510].y) * _2578) * _2579) + _2383;
        _2499 = (((((_2559 * _2211) + _944) * cbLight._m0[_2510].z) * _2578) * _2579) + _2385;
    }
    float _2714;
    float _2716;
    float _2718;
    float _2720;
    float _2722;
    float _2724;
    if (_2019.y == 0u)
    {
        float _2654 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2655 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2654;
        float _2656 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2654;
        float _2657 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2654;
        uvec4 _2669 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2670 = _2669.x;
        uint _2681 = uint((float(_2669.y) * floor(float(uint(cbSceneParam._m0[85u].y * _879) / _2670))) + floor(float(uint(cbSceneParam._m0[85u].x * _878) / _2670)));
        float _2691 = (log2(_2657 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2692 = isnan(0.0) ? _2691 : (isnan(_2691) ? 0.0 : max(_2691, 0.0));
        uint _2695 = uint(isnan(14.0) ? _2692 : (isnan(_2692) ? 14.0 : min(_2692, 14.0)));
        uvec4 _2700 = texelFetch(g_lightClusterGridBuffer, int(((_2695 << 2u) + (_2681 << 6u)) >> 2u));
        uint _2701 = _2700.x;
        uint _2702 = _2669.z;
        float _2837;
        float _2839;
        float _2841;
        float _2843;
        float _2845;
        float _2847;
        if (((((1u << ((_2702 >> 4u) & 15u)) + 4294967295u) & _2701) == 0u) || ((_2702 & 240u) == 0u))
        {
            _2837 = 0.0;
            _2839 = 0.0;
            _2841 = 0.0;
            _2843 = 0.0;
            _2845 = 0.0;
            _2847 = 0.0;
        }
        else
        {
            float _2838;
            float _2840;
            float _2842;
            float _2844;
            float _2846;
            float _2848;
            float _2999 = 0.0;
            float _3000 = 0.0;
            float _3001 = 0.0;
            float _3002 = 0.0;
            float _3003 = 0.0;
            float _3004 = 0.0;
            uint _3005 = 0u;
            uint _3014;
            bool _3015;
            for (;;)
            {
                _3014 = texelFetch(g_lightClassification, int((((_2695 << 5u) + (_2681 << 9u)) + (_3005 << 2u)) >> 2u)).x;
                _3015 = _3014 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3015)
                {
                    frontier_phi_68_pred = _2999;
                    frontier_phi_68_pred_1 = _3004;
                    frontier_phi_68_pred_2 = _3003;
                    frontier_phi_68_pred_3 = _3002;
                    frontier_phi_68_pred_4 = _3001;
                    frontier_phi_68_pred_5 = _3000;
                }
                else
                {
                    float _3144;
                    float _3145;
                    float _3146;
                    float _3147;
                    float _3148;
                    float _3149;
                    uint _3150;
                    _3144 = _2999;
                    _3145 = _3000;
                    _3146 = _3001;
                    _3147 = _3002;
                    _3148 = _3003;
                    _3149 = _3004;
                    _3150 = _3014;
                    float _3071;
                    float _3072;
                    float _3073;
                    float _3074;
                    float _3075;
                    float _3076;
                    for (;;)
                    {
                        uint _3154 = uint(findLSB(_3150)) + (_3005 << 5u);
                        uint _3151 = (_3150 + 4294967295u) & _3150;
                        uint _3156 = _3154 * 48u;
                        vec4 _3170 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3156)).x, texelFetch(g_PointLightRenderingBuffer, int(_3156 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3156 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3156 + 3u)).x));
                        uint _3176 = (_3154 * 48u) + 4u;
                        vec4 _3189 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3176)).x, texelFetch(g_PointLightRenderingBuffer, int(_3176 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3176 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3176 + 3u)).x));
                        uint _3195 = (_3154 * 48u) + 8u;
                        vec3 _3206 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3195)).x, texelFetch(g_PointLightRenderingBuffer, int(_3195 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3195 + 2u)).x));
                        float _3210 = _3170.x - _2655;
                        float _3211 = _3170.y - _2656;
                        float _3212 = _3170.z - _2657;
                        float _3213 = dot(vec3(_3210, _3211, _3212), vec3(_3210, _3211, _3212));
                        float _3216 = inversesqrt(_3213);
                        float _3217 = _3216 * _3210;
                        float _3218 = _3216 * _3211;
                        float _3219 = _3216 * _3212;
                        float _3220 = dot(vec3(_897, _900, _903), vec3(_3217, _3218, _3219));
                        float _3225 = 1.0 - (_3213 * _3170.w);
                        float _4601 = isnan(0.0) ? _3225 : (isnan(_3225) ? 0.0 : max(_3225, 0.0));
                        float _3226 = isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0));
                        float _3227 = sqrt(_3213) * _3189.w;
                        float _3230 = 1.39999997615814208984375 / (_3227 + 1.39999997615814208984375);
                        float _3231 = _3230 * _3230;
                        float _3234 = ((1.0 - _3231) * _3220) + _3231;
                        float _3237 = _3227 * _3227;
                        float _3241 = ((isnan(0.0) ? _3234 : (isnan(_3234) ? 0.0 : max(_3234, 0.0))) * _3226) / ((_3237 * 0.699999988079071044921875) + 1.0);
                        float _3245 = (-0.0) - _2655;
                        float _3246 = (-0.0) - _2656;
                        float _3247 = (-0.0) - _2657;
                        float _3251 = inversesqrt(dot(vec3(_3245, _3246, _3247), vec3(_3245, _3246, _3247)));
                        float _3252 = _3251 * _3245;
                        float _3253 = _3251 * _3246;
                        float _3254 = _3251 * _3247;
                        float _3262 = exp2(log2(1.0 / ((_3237 * 3.5) + 5.0)) * 0.25);
                        float _3263 = 1.0 - _972;
                        float _3270 = sqrt(1.0 - ((1.0 - (_3263 * _3263)) * (1.0 - (_3262 * _3262))));
                        float _3271 = _3270 * _3270;
                        float _3272 = _3271 * _3271;
                        float _3273 = _3252 + _3217;
                        float _3274 = _3253 + _3218;
                        float _3275 = _3254 + _3219;
                        float _3279 = inversesqrt(dot(vec3(_3273, _3274, _3275), vec3(_3273, _3274, _3275)));
                        float _3283 = dot(vec3(_897, _900, _903), vec3(_3252, _3253, _3254));
                        float _4617 = isnan(0.0) ? _3283 : (isnan(_3283) ? 0.0 : max(_3283, 0.0));
                        float _3286 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
                        float _3287 = dot(vec3(_897, _900, _903), vec3(_3279 * _3273, _3279 * _3274, _3279 * _3275));
                        float _4628 = isnan(0.0) ? _3287 : (isnan(_3287) ? 0.0 : max(_3287, 0.0));
                        float _3290 = isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0));
                        float _3294 = ((_3290 * _3290) * (_3272 + (-1.0))) + 1.0;
                        float _3295 = _3230 * _3271;
                        float _3296 = _3295 * _3295;
                        float _3299 = ((1.0 - _3296) * _3220) + _3296;
                        float _4639 = isnan(0.0) ? _3299 : (isnan(_3299) ? 0.0 : max(_3299, 0.0));
                        float _3300 = isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0));
                        float _3301 = 1.0 - _3271;
                        float _3311 = (0.5 / (((_3300 * ((_3286 * _3301) + _3271)) + 9.9999999392252902907785028219223e-09) + (((_3300 * _3301) + _3271) * _3286))) * _3300;
                        float _4650 = isnan(0.0) ? _3311 : (isnan(_3311) ? 0.0 : max(_3311, 0.0));
                        float _3322 = (((_3272 * 3.1415927410125732421875) * (isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0)))) / ((_3294 * _3294) * ((_3237 * 2.1991131305694580078125) + 3.141590118408203125))) * _3226;
                        _3074 = (_3241 * _3189.x) + _3147;
                        _3075 = (_3241 * _3189.y) + _3148;
                        _3076 = (_3241 * _3189.z) + _3149;
                        _3071 = (_3322 * _3206.x) + _3144;
                        _3072 = (_3322 * _3206.y) + _3145;
                        _3073 = (_3322 * _3206.z) + _3146;
                        if (_3151 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3144 = _3071;
                            _3145 = _3072;
                            _3146 = _3073;
                            _3147 = _3074;
                            _3148 = _3075;
                            _3149 = _3076;
                            _3150 = _3151;
                        }
                    }
                    frontier_phi_68_pred = _3071;
                    frontier_phi_68_pred_1 = _3076;
                    frontier_phi_68_pred_2 = _3075;
                    frontier_phi_68_pred_3 = _3074;
                    frontier_phi_68_pred_4 = _3073;
                    frontier_phi_68_pred_5 = _3072;
                }
                _2838 = frontier_phi_68_pred;
                _2848 = frontier_phi_68_pred_1;
                _2846 = frontier_phi_68_pred_2;
                _2844 = frontier_phi_68_pred_3;
                _2842 = frontier_phi_68_pred_4;
                _2840 = frontier_phi_68_pred_5;
                uint _3006 = _3005 + 1u;
                if (_3006 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2999 = _2838;
                    _3000 = _2840;
                    _3001 = _2842;
                    _3002 = _2844;
                    _3003 = _2846;
                    _3004 = _2848;
                    _3005 = _3006;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2837 = _2838;
            _2839 = _2840;
            _2841 = _2842;
            _2843 = _2844;
            _2845 = _2846;
            _2847 = _2848;
        }
        uvec4 _2851 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2852 = _2851.z;
        uint _2854 = (_2852 >> 8u) & 15u;
        float _2967;
        float _2969;
        float _2971;
        float _2973;
        float _2975;
        float _2977;
        if (((4294967295u << _2854) & _2701) == 0u)
        {
            _2967 = _2837;
            _2969 = _2839;
            _2971 = _2841;
            _2973 = _2843;
            _2975 = _2845;
            _2977 = _2847;
        }
        else
        {
            float _2992 = inversesqrt(dot(vec3(_2655, _2656, _2657), vec3(_2655, _2656, _2657)));
            float _2993 = _2992 * _2655;
            float _2994 = _2992 * _2656;
            float _2995 = _2992 * _2657;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2854 < ((_2852 >> 12u) & 15u))
            {
                float _2968;
                float _2970;
                float _2972;
                float _2974;
                float _2976;
                float _2978;
                float _3127 = _2837;
                float _3128 = _2839;
                float _3129 = _2841;
                float _3130 = _2843;
                float _3131 = _2845;
                float _3132 = _2847;
                uint _3133 = _2854;
                uint _3142;
                bool _3143;
                for (;;)
                {
                    _3142 = texelFetch(g_lightClassification, int((((_2695 << 5u) + (_2681 << 9u)) + (_3133 << 2u)) >> 2u)).x;
                    _3143 = _3142 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3143)
                    {
                        frontier_phi_79_pred = _3132;
                        frontier_phi_79_pred_1 = _3131;
                        frontier_phi_79_pred_2 = _3130;
                        frontier_phi_79_pred_3 = _3129;
                        frontier_phi_79_pred_4 = _3128;
                        frontier_phi_79_pred_5 = _3127;
                    }
                    else
                    {
                        float _3336;
                        float _3337;
                        float _3338;
                        float _3339;
                        float _3340;
                        float _3341;
                        float _3629;
                        float _3630;
                        float _3631;
                        float _3632;
                        float _3633;
                        float _3634;
                        float _3349 = _3127;
                        float _3350 = _3128;
                        float _3351 = _3129;
                        float _3352 = _3130;
                        float _3353 = _3131;
                        float _3354 = _3132;
                        uint _3355 = _3142;
                        uint _3356;
                        vec4 _3381;
                        float _3382;
                        vec4 _3397;
                        vec3 _3409;
                        vec4 _3424;
                        vec4 _3439;
                        float _3485;
                        bool _3486;
                        for (;;)
                        {
                            uint _3366 = ((_3133 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3355));
                            _3356 = (_3355 + 4294967295u) & _3355;
                            uint _3368 = _3366 * 40u;
                            _3381 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3368)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 3u)).x));
                            _3382 = _3381.w;
                            uint _3384 = (_3366 * 40u) + 4u;
                            _3397 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3384)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 3u)).x));
                            uint _3399 = (_3366 * 40u) + 8u;
                            _3409 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3399)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 2u)).x));
                            uint _3411 = (_3366 * 40u) + 16u;
                            _3424 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3411)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 3u)).x));
                            uint _3426 = (_3366 * 40u) + 20u;
                            _3439 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3426)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 3u)).x));
                            uint _3441 = (_3366 * 40u) + 24u;
                            vec4 _3454 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3441)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 3u)).x));
                            uint _3460 = (_3366 * 40u) + 28u;
                            vec4 _3473 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3460)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 3u)).x));
                            _3485 = fma(_2657, _3473.z, fma(_2656, _3473.y, _3473.x * _2655)) + _3473.w;
                            _3486 = !((fma(_2657, _3454.z, fma(_2656, _3454.y, _3454.x * _2655)) + _3454.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3486)
                            {
                                float _3513 = _3381.x - _2655;
                                float _3514 = _3381.y - _2656;
                                float _3515 = _3381.z - _2657;
                                float _3516 = dot(vec3(_3513, _3514, _3515), vec3(_3513, _3514, _3515));
                                float _3519 = inversesqrt(_3516);
                                float _3520 = _3519 * _3513;
                                float _3521 = _3519 * _3514;
                                float _3522 = _3519 * _3515;
                                float _3526 = 1.0 - (_3516 / (_3382 * _3382));
                                float _4661 = isnan(0.0) ? _3526 : (isnan(_3526) ? 0.0 : max(_3526, 0.0));
                                float _3527 = isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0));
                                float _3531 = sqrt(_3516) * _3397.w;
                                float _3533 = 1.39999997615814208984375 / (_3531 + 1.39999997615814208984375);
                                float _3534 = _3533 * _3533;
                                float _3537 = ((1.0 - _3534) * dot(vec3(_3520, _3521, _3522), vec3(_897, _900, _903))) + _3534;
                                float _3540 = _3531 * _3531;
                                float _3544 = (fma(_2657, _3424.z, fma(_2656, _3424.y, _3424.x * _2655)) + _3424.w) / _3485;
                                float _3545 = (fma(_2657, _3439.z, fma(_2656, _3439.y, _3439.x * _2655)) + _3439.w) / _3485;
                                float _3549 = 1.0 - dot(vec2(_3544, _3545), vec2(_3544, _3545));
                                float _4677 = isnan(0.0) ? _3549 : (isnan(_3549) ? 0.0 : max(_3549, 0.0));
                                float _3550 = isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0));
                                float _3551 = _3550 * (((isnan(0.0) ? _3537 : (isnan(_3537) ? 0.0 : max(_3537, 0.0))) * _3527) / ((_3540 * 0.699999988079071044921875) + 1.0));
                                float _3563 = exp2(log2(1.0 / ((_3540 * 3.5) + 5.0)) * 0.25);
                                float _3564 = 1.0 - _972;
                                float _3571 = sqrt(1.0 - ((1.0 - (_3564 * _3564)) * (1.0 - (_3563 * _3563))));
                                float _3572 = _3571 * _3571;
                                float _3573 = _3572 * _3572;
                                float _3574 = _3520 - _2993;
                                float _3575 = _3521 - _2994;
                                float _3576 = _3522 - _2995;
                                float _3580 = inversesqrt(dot(vec3(_3574, _3575, _3576), vec3(_3574, _3575, _3576)));
                                float _3584 = dot(vec3(_897, _900, _903), vec3((-0.0) - _2993, (-0.0) - _2994, (-0.0) - _2995));
                                float _4688 = isnan(0.0) ? _3584 : (isnan(_3584) ? 0.0 : max(_3584, 0.0));
                                float _3587 = isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0));
                                float _3588 = dot(vec3(_897, _900, _903), vec3(_3580 * _3574, _3580 * _3575, _3580 * _3576));
                                float _4699 = isnan(0.0) ? _3588 : (isnan(_3588) ? 0.0 : max(_3588, 0.0));
                                float _3591 = isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0));
                                float _3595 = ((_3591 * _3591) * (_3573 + (-1.0))) + 1.0;
                                float _3596 = _3533 * _3572;
                                float _3597 = _3596 * _3596;
                                float _3603 = ((1.0 - _3597) * dot(vec3(_897, _900, _903), vec3(_3520, _3521, _3522))) + _3597;
                                float _4710 = isnan(0.0) ? _3603 : (isnan(_3603) ? 0.0 : max(_3603, 0.0));
                                float _3604 = isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0));
                                float _3605 = 1.0 - _3572;
                                float _3615 = (0.5 / (((_3604 * ((_3587 * _3605) + _3572)) + 9.9999999392252902907785028219223e-09) + (((_3604 * _3605) + _3572) * _3587))) * _3604;
                                float _4721 = isnan(0.0) ? _3615 : (isnan(_3615) ? 0.0 : max(_3615, 0.0));
                                float _3625 = (_3550 * _3527) * (((_3573 * 3.1415927410125732421875) * (isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0)))) / ((_3595 * _3595) * ((_3540 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3551 * _3397.y;
                                frontier_phi_85_pred_1 = _3551 * _3397.x;
                                frontier_phi_85_pred_2 = _3625 * _3409.z;
                                frontier_phi_85_pred_3 = _3625 * _3409.y;
                                frontier_phi_85_pred_4 = _3625 * _3409.x;
                                frontier_phi_85_pred_5 = _3551 * _3397.z;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3633 = frontier_phi_85_pred;
                            _3632 = frontier_phi_85_pred_1;
                            _3631 = frontier_phi_85_pred_2;
                            _3630 = frontier_phi_85_pred_3;
                            _3629 = frontier_phi_85_pred_4;
                            _3634 = frontier_phi_85_pred_5;
                            _3339 = _3632 + _3352;
                            _3340 = _3633 + _3353;
                            _3341 = _3634 + _3354;
                            _3336 = _3629 + _3349;
                            _3337 = _3630 + _3350;
                            _3338 = _3631 + _3351;
                            if (_3356 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3349 = _3336;
                                _3350 = _3337;
                                _3351 = _3338;
                                _3352 = _3339;
                                _3353 = _3340;
                                _3354 = _3341;
                                _3355 = _3356;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3341;
                        frontier_phi_79_pred_1 = _3340;
                        frontier_phi_79_pred_2 = _3339;
                        frontier_phi_79_pred_3 = _3338;
                        frontier_phi_79_pred_4 = _3337;
                        frontier_phi_79_pred_5 = _3336;
                    }
                    _2978 = frontier_phi_79_pred;
                    _2976 = frontier_phi_79_pred_1;
                    _2974 = frontier_phi_79_pred_2;
                    _2972 = frontier_phi_79_pred_3;
                    _2970 = frontier_phi_79_pred_4;
                    _2968 = frontier_phi_79_pred_5;
                    uint _3134 = _3133 + 1u;
                    if (_3134 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3127 = _2968;
                        _3128 = _2970;
                        _3129 = _2972;
                        _3130 = _2974;
                        _3131 = _2976;
                        _3132 = _2978;
                        _3133 = _3134;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2972;
                frontier_phi_60_61_ladder_1 = _2978;
                frontier_phi_60_61_ladder_2 = _2976;
                frontier_phi_60_61_ladder_3 = _2974;
                frontier_phi_60_61_ladder_4 = _2970;
                frontier_phi_60_61_ladder_5 = _2968;
            }
            else
            {
                frontier_phi_60_61_ladder = _2841;
                frontier_phi_60_61_ladder_1 = _2847;
                frontier_phi_60_61_ladder_2 = _2845;
                frontier_phi_60_61_ladder_3 = _2843;
                frontier_phi_60_61_ladder_4 = _2839;
                frontier_phi_60_61_ladder_5 = _2837;
            }
            _2967 = frontier_phi_60_61_ladder_5;
            _2969 = frontier_phi_60_61_ladder_4;
            _2971 = frontier_phi_60_61_ladder;
            _2973 = frontier_phi_60_61_ladder_3;
            _2975 = frontier_phi_60_61_ladder_2;
            _2977 = frontier_phi_60_61_ladder_1;
        }
        float _2982 = isnan(1.0) ? _956 : (isnan(_956) ? 1.0 : min(_956, 1.0));
        _2714 = (_2982 * _2973) + _2150;
        _2716 = (_2982 * _2975) + _2152;
        _2718 = (_2982 * _2977) + _2154;
        _2720 = ((_2967 * _941) * _2982) + _2495;
        _2722 = ((_2969 * _943) * _2982) + _2497;
        _2724 = ((_2971 * _944) * _2982) + _2499;
    }
    else
    {
        _2714 = _2150;
        _2716 = _2152;
        _2718 = _2154;
        _2720 = _2495;
        _2722 = _2497;
        _2724 = _2499;
    }
    uint _2730 = _917 + uint(cbMatDynParam._m0[0u].w);
    float _2738 = ((cbMtdParam._m0[20u].x * cbMtdParam._m0[25u].x) * _707.x) * cbInstanceData._m0[_2730].x;
    float _2741 = ((cbMtdParam._m0[20u].y * cbMtdParam._m0[25u].x) * _707.y) * cbInstanceData._m0[_2730].y;
    float _2744 = ((cbMtdParam._m0[20u].z * cbMtdParam._m0[25u].x) * _707.z) * cbInstanceData._m0[_2730].z;
    float _4737 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
    float _4748 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
    float _4759 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
    float _2761 = (((isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0))) * (_2714 + ((isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0))) * _956))) + ((_2720 + ((isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0))) * _1790)) * cbPerFrame._m0[3u].x)) + _2738;
    float _2763 = (_2741 + ((_2722 + ((isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0))) * _1790)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0))) * (_2716 + ((isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0))) * _956)));
    float _2765 = (_2744 + ((_2724 + ((isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0))) * _1790)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0))) * (_2718 + ((isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0))) * _956)));
    float _2766 = isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : max(_2761, 0.0));
    float _2767 = isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0));
    float _2768 = isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0));
    float _2774 = cbMtdParam._m0[2u].x * _2738;
    float _2775 = cbMtdParam._m0[2u].y * _2741;
    float _2776 = cbMtdParam._m0[2u].z * _2744;
    float _4785 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2778 = isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0));
    uint _2779 = _916 + 6u;
    float _2787 = _878 / cbSceneParam._m0[86u].x;
    float _2788 = _879 / cbSceneParam._m0[86u].y;
    vec4 _2802 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2787, _2788, (log2((isnan(cbSceneParam._m0[77u].w) ? _804 : (isnan(_804) ? cbSceneParam._m0[77u].w : min(_804, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2804 = _2802.x;
    float _2805 = _2802.y;
    float _2806 = _2802.z;
    float _2807 = _2802.w;
    float _2900;
    float _2902;
    float _2904;
    float _2906;
    if (_804 > cbSceneParam._m0[78u].w)
    {
        float _2862 = isnan(_804) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _804 : min(cbSceneParam._m0[80u].w, _804));
        float _2863 = _2862 / _804;
        float _2874 = _2863 * _854;
        float _2875 = _855 * _2863;
        float _2876 = (-0.0) - _2875;
        float _2878 = _2863 * _856;
        float _2880 = (cbSceneParam._m0[77u].w * _2876) / _2862;
        float _2881 = _2880 + cbSceneParam._m0[79u].w;
        float _2882 = cbSceneParam._m0[79u].w - _2875;
        float _2888 = sqrt(((_2874 * _2874) + (_2875 * _2875)) + (_2878 * _2878));
        float _2891 = (1.0 - (cbSceneParam._m0[77u].w / _2862)) * _2888;
        float _2896 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2898 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3084;
        if (abs((_2876 - _2880) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3084 = ((((_2881 > 0.0) ? exp2(_2896 * _2881) : (2.0 - exp2(_2898 * _2881))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2891;
        }
        else
        {
            float _3028 = 1.0 / cbSceneParam._m0[80u].x;
            float _3029 = isnan(_2882) ? _2881 : (isnan(_2881) ? _2882 : max(_2881, _2882));
            float _3030 = isnan(_2882) ? _2881 : (isnan(_2881) ? _2882 : min(_2881, _2882));
            float _3039 = isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : min(_3029, 0.0));
            float _3040 = isnan(0.0) ? _3030 : (isnan(_3030) ? 0.0 : min(_3030, 0.0));
            _3084 = ((abs(_2888 / _2876) * cbSceneParam._m0[80u].y) * ((((_3039 - _3040) * 2.0) - ((exp2(_2896 * (isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : max(_3029, 0.0)))) - exp2(_2896 * (isnan(0.0) ? _3030 : (isnan(_3030) ? 0.0 : max(_3030, 0.0))))) * _3028)) - ((exp2(_2898 * _3039) - exp2(_2898 * _3040)) * _3028))) + (_2891 * cbSceneParam._m0[80u].z);
        }
        vec4 _3086 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2787, _2788, 1.0), 0.0);
        float _3095 = exp2((_3084 * (-1.44269502162933349609375)) * (1.0 - _3086.w));
        float _3096 = log2(_3095);
        float _3112 = log2(_2807);
        _2900 = (exp2(_3112 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3096 * cbSceneParam._m0[78u].x)) * _3086.x) / cbSceneParam._m0[78u].x)) + _2804;
        _2902 = (exp2(_3112 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3096 * cbSceneParam._m0[78u].y)) * _3086.y) / cbSceneParam._m0[78u].y)) + _2805;
        _2904 = (exp2(_3112 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3096 * cbSceneParam._m0[78u].z)) * _3086.z) / cbSceneParam._m0[78u].z)) + _2806;
        _2906 = _3095 * _2807;
    }
    else
    {
        _2900 = _2804;
        _2902 = _2805;
        _2904 = _2806;
        _2906 = _2807;
    }
    bool _3122;
    vec4 _2916;
    vec4 _2938;
    float _2940;
    float _2944;
    float _2945;
    float _2946;
    float _2949;
    float _2952;
    float _2955;
    float _2956;
    bool _2966;
    for (;;)
    {
        _2916 = cbMatDynParam._m0[0u];
        float _2918 = roundEven(_2916.y);
        bool _2919 = _2918 == 3.0;
        float _2920 = log2(_2906);
        float _2924 = exp2(_2920 * cbSceneParam._m0[78u].x);
        float _2925 = exp2(_2920 * cbSceneParam._m0[78u].y);
        float _2926 = exp2(_2920 * cbSceneParam._m0[78u].z);
        float _2927 = _2924 * _2766;
        float _2928 = _2925 * _2767;
        float _2929 = _2926 * _2768;
        float _2936 = _867 + (-0.5);
        _2938 = cbMtdParam._m0[1u];
        _2940 = _2938.y * _2936;
        float _2943 = (_2918 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2944 = _2943 * (_2919 ? _2927 : (_2927 + (cbSceneParam._m0[72u].w * _2900)));
        _2945 = _2943 * (_2919 ? _2928 : (_2928 + (cbSceneParam._m0[72u].w * _2902)));
        _2946 = _2943 * (_2919 ? _2929 : (_2929 + (cbSceneParam._m0[72u].w * _2904)));
        _2949 = ((_2774 * _2778) * _2924) * _2943;
        _2952 = ((_2775 * _2778) * _2925) * _2943;
        _2955 = ((_2776 * _2778) * _2926) * _2943;
        _2956 = _2936 * 0.999000012874603271484375;
        _2966 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2966)
        {
            if ((cbInstanceData._m0[_916 + 7u].x + _2956) < 0.5)
            {
                _3122 = true;
                break;
            }
        }
        uint _3063 = _917 + uint(_2916.w);
        if ((cbInstanceData._m0[_3063].w < 1.0) && ((cbInstanceData._m0[_3063].w + _2956) < 0.5))
        {
            _3122 = true;
            break;
        }
        if ((_2940 + 1.0) < _2938.x)
        {
            _3122 = true;
            break;
        }
        _3122 = false;
        break;
    }
    float _3327;
    if (_3122)
    {
        discard_state = true;
        _3327 = 0.0;
    }
    else
    {
        _3327 = cbInstanceData._m0[_2779].w;
    }
    SV_Target.x = _2944;
    SV_Target.y = _2945;
    SV_Target.z = _2946;
    SV_Target.w = _3327;
    SV_Target_1.x = _2949;
    SV_Target_1.y = _2952;
    SV_Target_1.z = _2955;
    SV_Target_1.w = cbInstanceData._m0[_2779].w;
    discard_exit();
}


