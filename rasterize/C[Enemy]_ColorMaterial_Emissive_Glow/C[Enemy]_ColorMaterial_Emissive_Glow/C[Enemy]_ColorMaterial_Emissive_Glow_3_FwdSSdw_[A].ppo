#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[29];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 12) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 9) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2DArray C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_0;
layout(set = 0, binding = 14) uniform texture2DArray C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1352;
float _3799;
float _3800;
float _3801;
float _3802;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _211 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _212 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _213 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _219 = inversesqrt(dot(vec3(_211, _212, _213), vec3(_211, _212, _213)));
    float _226 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _233 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _251 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_1) + cbTextureTilingScale._m0[10u].w));
    float _261 = log2(0.0);
    float _263 = exp2(_261 * cbMtdParam._m0[22u].x);
    float _264 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    float _265 = isnan(1.0) ? _264 : (isnan(_264) ? 1.0 : min(_264, 1.0));
    vec4 _279 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _283 = _279.z;
    float _292 = exp2(log2(_283 * cbMtdParam._m0[22u].y) * cbMtdParam._m0[21u].y);
    float _293 = isnan(0.0) ? _292 : (isnan(_292) ? 0.0 : max(_292, 0.0));
    float _294 = isnan(1.0) ? _293 : (isnan(_293) ? 1.0 : min(_293, 1.0));
    vec4 _306 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _309 = _306.y;
    float _312 = (_306.x + (-0.02500000037252902984619140625)) * 8.0;
    float _316 = roundEven(5.0 - _312);
    float _317 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    float _318 = isnan(4.0) ? _317 : (isnan(_317) ? 4.0 : min(_317, 4.0));
    float _331 = floor(_318);
    vec4 _334 = texture(sampler2DArray(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w, _331));
    float _189[6];
    float _190[6];
    float _191[6];
    _189[0u] = cbMtdParam._m0[17u].x;
    _190[0u] = cbMtdParam._m0[17u].y;
    _191[0u] = cbMtdParam._m0[17u].z;
    _189[1u] = cbMtdParam._m0[15u].x;
    _190[1u] = cbMtdParam._m0[15u].y;
    _191[1u] = cbMtdParam._m0[15u].z;
    _189[2u] = cbMtdParam._m0[14u].x;
    _190[2u] = cbMtdParam._m0[14u].y;
    _191[2u] = cbMtdParam._m0[14u].z;
    _189[3u] = cbMtdParam._m0[13u].x;
    _190[3u] = cbMtdParam._m0[13u].y;
    _191[3u] = cbMtdParam._m0[13u].z;
    _189[4u] = cbMtdParam._m0[12u].x;
    _190[4u] = cbMtdParam._m0[12u].y;
    _191[4u] = cbMtdParam._m0[12u].z;
    _189[5u] = cbMtdParam._m0[18u].x;
    _190[5u] = cbMtdParam._m0[18u].y;
    _191[5u] = cbMtdParam._m0[18u].z;
    float _398 = roundEven(_312);
    float _399 = isnan(0.0) ? _398 : (isnan(_398) ? 0.0 : max(_398, 0.0));
    uint _401 = uint(int(isnan(5.0) ? _399 : (isnan(_399) ? 5.0 : min(_399, 5.0))));
    vec4 _431 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _442 = cbMtdParam._m0[9u].x * _431.x;
    float _443 = cbMtdParam._m0[9u].y * _431.y;
    float _444 = cbMtdParam._m0[9u].z * _431.z;
    float _451 = ((((((_189[_401] - cbMtdParam._m0[10u].x) * _309) + cbMtdParam._m0[10u].x) * _334.x) - _442) * _294) + _442;
    float _452 = ((((((_190[_401] - cbMtdParam._m0[10u].y) * _309) + cbMtdParam._m0[10u].y) * _334.y) - _443) * _294) + _443;
    float _453 = ((((((_191[_401] - cbMtdParam._m0[10u].z) * _309) + cbMtdParam._m0[10u].z) * _334.z) - _444) * _294) + _444;
    float _459 = exp2(log2(_279.w) * cbMtdParam._m0[22u].w);
    vec4 _472 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _492 = (((cbMtdParam._m0[16u].x * _472.x) - _451) * _459) + _451;
    float _493 = (((cbMtdParam._m0[16u].y * _472.y) - _452) * _459) + _452;
    float _494 = (((cbMtdParam._m0[16u].z * _472.z) - _453) * _459) + _453;
    vec4 _507 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _532 = (_251.x * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].x * _507.x) - _492) * _265) + _492);
    float _534 = (_251.y * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].y * _507.y) - _493) * _265) + _493);
    float _536 = (_251.z * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].z * _507.z) - _494) * _265) + _494);
    float _184[5];
    float _185[5];
    _184[0u] = cbMtdParam._m0[25u].w;
    _185[0u] = cbMtdParam._m0[26u].x;
    _184[1u] = cbMtdParam._m0[27u].w;
    _185[1u] = cbMtdParam._m0[28u].x;
    _184[2u] = cbMtdParam._m0[27u].y;
    _185[2u] = cbMtdParam._m0[27u].z;
    _184[3u] = cbMtdParam._m0[26u].w;
    _185[3u] = cbMtdParam._m0[27u].x;
    _184[4u] = cbMtdParam._m0[26u].y;
    _185[4u] = cbMtdParam._m0[26u].z;
    float _574 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    uint _576 = uint(int(isnan(4.0) ? _574 : (isnan(_574) ? 4.0 : min(_574, 4.0))));
    float _583 = ((_185[_576] - cbMtdParam._m0[21u].z) * _294) + cbMtdParam._m0[21u].z;
    float _586 = ((cbMtdParam._m0[21u].w - _583) * _459) + _583;
    float _589 = ((cbMtdParam._m0[24u].y - _586) * _265) + _586;
    vec4 _604 = texture(sampler2DArray(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w, _331));
    vec4 _621 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _623 = _621.x;
    float _624 = _621.y;
    float _629 = cbMtdParam._m0[21u].x + _621.z;
    float _632 = (((_604.z + _184[_576]) - _629) * _294) + _629;
    vec4 _645 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_1) + cbTextureTilingScale._m0[11u].w));
    float _656 = (((_645.z - _632) + cbMtdParam._m0[25u].y) * _459) + _632;
    float _662 = ((((_283 * 2.0) * _656) - _656) * cbMtdParam._m0[23u].w) + _656;
    vec4 _674 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_1) + cbTextureTilingScale._m0[12u].w));
    float _685 = (((cbMtdParam._m0[22u].z + _674.z) - _662) * _265) + _662;
    vec4 _704 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _721 = ((_604.x - _623) * _294) + _623;
    float _722 = ((_604.y - _624) * _294) + _624;
    float _727 = ((_645.x - _721) * _459) + _721;
    float _728 = ((_645.y - _722) * _459) + _722;
    float _737 = ((((_674.x - _727) * _265) + _727) * 2.0) + (-1.0);
    float _738 = ((((_674.y - _728) * _265) + _728) * 2.0) + (-1.0);
    float _739 = dot(vec2(_737, _738), vec2(_737, _738));
    float _3861 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _744 = sqrt(1.0 - (isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0))));
    float _747 = (cbMtdParam._m0[24u].z * ((_279.x * 2.0) + (-1.0))) + _737;
    float _748 = (cbMtdParam._m0[24u].z * ((_279.y * 2.0) + (-1.0))) + _738;
    float _750 = gl_FragCoord.x * 0.125;
    float _752 = gl_FragCoord.y * 0.125;
    float _763 = fma(_744, _226 * NORMAL.x, fma(_748, _233 * TANGENT.x, (_219 * _211) * _747));
    float _766 = fma(_744, _226 * NORMAL.y, fma(_748, _233 * TANGENT.y, (_219 * _212) * _747));
    float _769 = fma(_744, _226 * NORMAL.z, fma(_748, _233 * TANGENT.z, (_219 * _213) * _747));
    float _773 = inversesqrt(dot(vec3(_763, _766, _769), vec3(_763, _766, _769)));
    float _774 = _773 * _763;
    float _775 = _773 * _766;
    float _776 = _773 * _769;
    float _3872 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _777 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
    float _3883 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _3894 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _3905 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    float _3916 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    float _781 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
    if (!(cbMtdParam._m0[24u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_750, _752)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _801 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _841 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _851 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _841);
    float _852 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _841);
    float _853 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _841);
    float _857 = inversesqrt(dot(vec3(_851, _852, _853), vec3(_851, _852, _853)));
    float _858 = _851 * _857;
    float _859 = _852 * _857;
    float _860 = _853 * _857;
    vec4 _862 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_750, _752));
    float _864 = _862.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1034 = sqrt(((_851 * _851) + (_852 * _852)) + (_853 * _853));
        float _1040 = (cbMatDynParam._m0[5u].x * _1034) + cbMatDynParam._m0[5u].y;
        float _3927 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1041 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
        float _1045 = (cbMatDynParam._m0[5u].z * _1034) + cbMatDynParam._m0[5u].w;
        float _3938 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0))) - _1041)) + _1041) < ((_864 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _875 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _876 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _894 = fma(_776, cbSceneParam._m0[5u].z, fma(_775, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _774));
    float _897 = fma(_776, cbSceneParam._m0[6u].z, fma(_775, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _774));
    float _900 = fma(_776, cbSceneParam._m0[7u].z, fma(_775, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _774));
    uint _913 = uint(roundEven(NORMAL.w)) * 13u;
    uint _914 = _913 + 9u;
    uint _915 = _914 + uint(cbMatDynParam._m0[0u].w);
    float _921 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0)))) * cbInstanceData._m0[_915].x;
    float _922 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0)))) * cbInstanceData._m0[_915].y;
    float _923 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0)))) * cbInstanceData._m0[_915].z;
    float _3949 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
    float _924 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
    float _3960 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
    float _925 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
    float _3971 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
    float _926 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
    float _927 = 1.0 - _781;
    float _928 = _924 * _927;
    float _929 = _925 * _927;
    float _930 = _926 * _927;
    float _935 = (_924 + (-0.039999999105930328369140625)) * _781;
    float _936 = (_925 + (-0.039999999105930328369140625)) * _781;
    float _937 = (_926 + (-0.039999999105930328369140625)) * _781;
    float _938 = _935 + 0.039999999105930328369140625;
    float _940 = _936 + 0.039999999105930328369140625;
    float _941 = _937 + 0.039999999105930328369140625;
    vec4 _950 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _875, cbSceneParam._m0[86u].y * _876));
    float _953 = _950.x * TEXCOORD_3.w;
    float _954 = dot(vec3(_774, _775, _776), vec3(_858, _859, _860));
    float _957 = _954 * 2.0;
    float _961 = (_957 * _774) - _858;
    float _962 = (_957 * _775) - _859;
    float _963 = (_957 * _776) - _860;
    float _967 = abs(dot(vec3(_858, _859, _860), vec3(_774, _775, _776)));
    float _3982 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
    float _969 = sqrt(_777);
    float _980 = exp2((_969 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_969 * 3.0));
    float _986 = (1.0 - _980) * ((_969 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _987 = _980 * _969;
    float _1015 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1019 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1023 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1351;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1076 = fma(_1023, cbModelParam._m0[26u].z, fma(_1019, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1015));
        float _1080 = fma(_1023, cbModelParam._m0[27u].z, fma(_1019, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1015));
        float _1084 = fma(_1023, cbModelParam._m0[28u].z, fma(_1019, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1015));
        float _1109 = _1015 + _774;
        float _1110 = _1019 + _775;
        float _1111 = _1023 + _776;
        float _1121 = fma(_1111, cbModelParam._m0[26u].z, fma(_1110, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1109)) - _1076;
        float _1122 = fma(_1111, cbModelParam._m0[27u].z, fma(_1110, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1109)) - _1080;
        float _1123 = fma(_1111, cbModelParam._m0[28u].z, fma(_1110, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1109)) - _1084;
        float _1127 = inversesqrt(dot(vec3(_1121, _1122, _1123), vec3(_1121, _1122, _1123)));
        float _1140 = ((_1127 * _1121) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1076 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1141 = ((_1127 * _1122) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1080 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1142 = ((_1127 * _1123) / cbModelParam._m0[34u].z) + ((((((_1084 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1145 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1140, _1141, _1142), 0.0);
        vec4 _1152 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1140, _1141, _1142), 0.0);
        vec4 _1159 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1140, _1141, _1142), 0.0);
        vec4 _1166 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1140, _1141, _1142), 0.0);
        float _1179 = exp2((_1145.w + (-0.5)) * 20.0) * 2.0;
        float _1180 = _1179 * (_1145.x + (-0.5));
        float _1181 = _1179 * (_1145.y + (-0.5));
        float _1182 = _1179 * (_1145.z + (-0.5));
        float _1189 = exp2((_1152.w + (-0.5)) * 20.0) * 2.0;
        float _1190 = _1189 * (_1152.x + (-0.5));
        float _1191 = _1189 * (_1152.y + (-0.5));
        float _1192 = _1189 * (_1152.z + (-0.5));
        float _1199 = exp2((_1159.w + (-0.5)) * 20.0) * 2.0;
        float _1200 = _1199 * (_1159.x + (-0.5));
        float _1201 = _1199 * (_1159.y + (-0.5));
        float _1202 = _1199 * (_1159.z + (-0.5));
        float _1209 = exp2((_1166.w + (-0.5)) * 20.0) * 2.0;
        float _1210 = _1209 * (_1166.x + (-0.5));
        float _1211 = _1209 * (_1166.y + (-0.5));
        float _1212 = _1209 * (_1166.z + (-0.5));
        float _1213 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1214 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1215 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1216 = _1180 * 0.5;
        float _1217 = _1190 * 0.5;
        float _1218 = _1200 * 0.5;
        float _1219 = dot(vec3(_1216, _1217, _1218), vec3(_1216, _1217, _1218));
        float _1224 = (_1219 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1219);
        float _1233 = (dot(vec3(_774, _775, _776), vec3(_1224 * _1216, _1224 * _1217, _1224 * _1218)) + 1.0) * 0.5;
        float _4008 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1243 = sqrt(((_1217 * _1217) + (_1216 * _1216)) + (_1218 * _1218)) / (_1213 + 9.9999997473787516355514526367188e-06);
        float _4019 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1244 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
        float _1245 = _1244 * 2.0;
        float _1249 = (1.0 - _1244) / (_1244 + 1.0);
        float _4030 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1250 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
        float _1259 = ((((1.0 - _1250) * (_1245 + 2.0)) * exp2(log2(isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0))) * (_1245 + 1.0))) + _1250) * _1213;
        float _1260 = _1181 * 0.5;
        float _1261 = _1191 * 0.5;
        float _1262 = _1201 * 0.5;
        float _1263 = dot(vec3(_1260, _1261, _1262), vec3(_1260, _1261, _1262));
        float _1268 = (_1263 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1263);
        float _1276 = (dot(vec3(_774, _775, _776), vec3(_1268 * _1260, _1268 * _1261, _1268 * _1262)) + 1.0) * 0.5;
        float _4041 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1285 = sqrt(((_1261 * _1261) + (_1260 * _1260)) + (_1262 * _1262)) / (_1214 + 9.9999997473787516355514526367188e-06);
        float _4052 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1286 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
        float _1287 = _1286 * 2.0;
        float _1291 = (1.0 - _1286) / (_1286 + 1.0);
        float _4063 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1292 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
        float _1301 = ((((1.0 - _1292) * (_1287 + 2.0)) * exp2(log2(isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0))) * (_1287 + 1.0))) + _1292) * _1214;
        float _1302 = _1182 * 0.5;
        float _1303 = _1192 * 0.5;
        float _1304 = _1202 * 0.5;
        float _1305 = dot(vec3(_1302, _1303, _1304), vec3(_1302, _1303, _1304));
        float _1310 = (_1305 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1305);
        float _1318 = (dot(vec3(_774, _775, _776), vec3(_1310 * _1302, _1310 * _1303, _1310 * _1304)) + 1.0) * 0.5;
        float _4074 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1327 = sqrt(((_1303 * _1303) + (_1302 * _1302)) + (_1304 * _1304)) / (_1215 + 9.9999997473787516355514526367188e-06);
        float _4085 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1328 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
        float _1329 = _1328 * 2.0;
        float _1333 = (1.0 - _1328) / (_1328 + 1.0);
        float _4096 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1334 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
        float _1343 = ((((1.0 - _1334) * (_1329 + 2.0)) * exp2(log2(isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0))) * (_1329 + 1.0))) + _1334) * _1215;
        _1351 = _1182;
        _1353 = _1181;
        _1354 = _1180;
        _1355 = _1192;
        _1356 = _1191;
        _1357 = _1190;
        _1358 = _1202;
        _1359 = _1201;
        _1360 = _1200;
        _1361 = _1215;
        _1362 = _1214;
        _1363 = _1213;
        _1364 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0)));
        _1365 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0)));
        _1366 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0)));
    }
    else
    {
        _1351 = _1352;
        _1353 = _1352;
        _1354 = _1352;
        _1355 = _1352;
        _1356 = _1352;
        _1357 = _1352;
        _1358 = _1352;
        _1359 = _1352;
        _1360 = _1352;
        _1361 = _1352;
        _1362 = _1352;
        _1363 = _1352;
        _1364 = 0.0;
        _1365 = 0.0;
        _1366 = 0.0;
    }
    float _1661;
    float _1662;
    float _1663;
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    float _1668;
    float _1669;
    float _1670;
    float _1671;
    float _1672;
    float _1673;
    float _1674;
    float _1675;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1392 = fma(_1023, cbModelParam._m0[30u].z, fma(_1019, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1015));
        float _1396 = fma(_1023, cbModelParam._m0[31u].z, fma(_1019, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1015));
        float _1400 = fma(_1023, cbModelParam._m0[32u].z, fma(_1019, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1015));
        float _1423 = _1015 + _774;
        float _1424 = _1019 + _775;
        float _1425 = _1023 + _776;
        float _1435 = fma(_1425, cbModelParam._m0[30u].z, fma(_1424, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1423)) - _1392;
        float _1436 = fma(_1425, cbModelParam._m0[31u].z, fma(_1424, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1423)) - _1396;
        float _1437 = fma(_1425, cbModelParam._m0[32u].z, fma(_1424, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1423)) - _1400;
        float _1441 = inversesqrt(dot(vec3(_1435, _1436, _1437), vec3(_1435, _1436, _1437)));
        float _1454 = ((_1441 * _1435) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1392 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1455 = ((_1441 * _1436) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1396 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1456 = ((_1441 * _1437) / cbModelParam._m0[35u].z) + ((((((_1400 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1458 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1454, _1455, _1456), 0.0);
        vec4 _1465 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1454, _1455, _1456), 0.0);
        vec4 _1472 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1454, _1455, _1456), 0.0);
        vec4 _1479 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1454, _1455, _1456), 0.0);
        float _1491 = exp2((_1458.w + (-0.5)) * 20.0) * 2.0;
        float _1492 = _1491 * (_1458.x + (-0.5));
        float _1493 = _1491 * (_1458.y + (-0.5));
        float _1494 = _1491 * (_1458.z + (-0.5));
        float _1501 = exp2((_1465.w + (-0.5)) * 20.0) * 2.0;
        float _1502 = _1501 * (_1465.x + (-0.5));
        float _1503 = _1501 * (_1465.y + (-0.5));
        float _1504 = _1501 * (_1465.z + (-0.5));
        float _1511 = exp2((_1472.w + (-0.5)) * 20.0) * 2.0;
        float _1512 = _1511 * (_1472.x + (-0.5));
        float _1513 = _1511 * (_1472.y + (-0.5));
        float _1514 = _1511 * (_1472.z + (-0.5));
        float _1521 = exp2((_1479.w + (-0.5)) * 20.0) * 2.0;
        float _1522 = _1521 * (_1479.x + (-0.5));
        float _1523 = _1521 * (_1479.y + (-0.5));
        float _1524 = _1521 * (_1479.z + (-0.5));
        float _1525 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1526 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1527 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1528 = _1492 * 0.5;
        float _1529 = _1502 * 0.5;
        float _1530 = _1512 * 0.5;
        float _1531 = dot(vec3(_1528, _1529, _1530), vec3(_1528, _1529, _1530));
        float _1536 = (_1531 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1531);
        float _1544 = (dot(vec3(_774, _775, _776), vec3(_1536 * _1528, _1536 * _1529, _1536 * _1530)) + 1.0) * 0.5;
        float _4137 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1553 = sqrt(((_1529 * _1529) + (_1528 * _1528)) + (_1530 * _1530)) / (_1525 + 9.9999997473787516355514526367188e-06);
        float _4148 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1554 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
        float _1555 = _1554 * 2.0;
        float _1559 = (1.0 - _1554) / (_1554 + 1.0);
        float _4159 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        float _1560 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
        float _1569 = ((((1.0 - _1560) * (_1555 + 2.0)) * exp2(log2(isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0))) * (_1555 + 1.0))) + _1560) * _1525;
        float _1570 = _1493 * 0.5;
        float _1571 = _1503 * 0.5;
        float _1572 = _1513 * 0.5;
        float _1573 = dot(vec3(_1570, _1571, _1572), vec3(_1570, _1571, _1572));
        float _1578 = (_1573 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1573);
        float _1586 = (dot(vec3(_774, _775, _776), vec3(_1578 * _1570, _1578 * _1571, _1578 * _1572)) + 1.0) * 0.5;
        float _4170 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
        float _1595 = sqrt(((_1571 * _1571) + (_1570 * _1570)) + (_1572 * _1572)) / (_1526 + 9.9999997473787516355514526367188e-06);
        float _4181 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
        float _1596 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
        float _1597 = _1596 * 2.0;
        float _1601 = (1.0 - _1596) / (_1596 + 1.0);
        float _4192 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1602 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
        float _1611 = ((((1.0 - _1602) * (_1597 + 2.0)) * exp2(log2(isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0))) * (_1597 + 1.0))) + _1602) * _1526;
        float _1612 = _1494 * 0.5;
        float _1613 = _1504 * 0.5;
        float _1614 = _1514 * 0.5;
        float _1615 = dot(vec3(_1612, _1613, _1614), vec3(_1612, _1613, _1614));
        float _1620 = (_1615 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1615);
        float _1628 = (dot(vec3(_774, _775, _776), vec3(_1620 * _1612, _1620 * _1613, _1620 * _1614)) + 1.0) * 0.5;
        float _4203 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
        float _1637 = sqrt(((_1613 * _1613) + (_1612 * _1612)) + (_1614 * _1614)) / (_1527 + 9.9999997473787516355514526367188e-06);
        float _4214 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
        float _1638 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
        float _1639 = _1638 * 2.0;
        float _1643 = (1.0 - _1638) / (_1638 + 1.0);
        float _4225 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
        float _1644 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
        float _1653 = ((((1.0 - _1644) * (_1639 + 2.0)) * exp2(log2(isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0))) * (_1639 + 1.0))) + _1644) * _1527;
        _1661 = _1494;
        _1662 = _1493;
        _1663 = _1492;
        _1664 = _1504;
        _1665 = _1503;
        _1666 = _1502;
        _1667 = _1514;
        _1668 = _1513;
        _1669 = _1512;
        _1670 = _1527;
        _1671 = _1526;
        _1672 = _1525;
        _1673 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0)));
        _1674 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0)));
        _1675 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0)));
    }
    else
    {
        _1661 = _1352;
        _1662 = _1352;
        _1663 = _1352;
        _1664 = _1352;
        _1665 = _1352;
        _1666 = _1352;
        _1667 = _1352;
        _1668 = _1352;
        _1669 = _1352;
        _1670 = _1352;
        _1671 = _1352;
        _1672 = _1352;
        _1673 = 0.0;
        _1674 = 0.0;
        _1675 = 0.0;
    }
    float _1685 = (cbModelParam._m0[1u].x * (_1673 - _1364)) + _1364;
    float _1686 = (cbModelParam._m0[1u].x * (_1674 - _1365)) + _1365;
    float _1687 = (cbModelParam._m0[1u].x * (_1675 - _1366)) + _1366;
    float _1708 = fma(_1687, cbSceneParam._m0[89u].z, fma(_1686, cbSceneParam._m0[89u].y, _1685 * cbSceneParam._m0[89u].x));
    float _1711 = fma(_1687, cbSceneParam._m0[90u].z, fma(_1686, cbSceneParam._m0[90u].y, _1685 * cbSceneParam._m0[90u].x));
    float _1714 = fma(_1687, cbSceneParam._m0[91u].z, fma(_1686, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1685));
    float _1729 = _961 * 0.5;
    float _1730 = _962 * 0.5;
    float _1731 = _963 * 0.5;
    float _1732 = dot(vec4(_1729, _1730, _1731, 1.0), vec4(_1663, _1666, _1669, _1672));
    float _1735 = dot(vec4(_1729, _1730, _1731, 1.0), vec4(_1662, _1665, _1668, _1671));
    float _1738 = dot(vec4(_1729, _1730, _1731, 1.0), vec4(_1661, _1664, _1667, _1670));
    float _1772;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1745 = dot(vec4(_1729, _1730, _1731, 1.0), vec4(_1351, _1355, _1358, _1361));
        float _1749 = dot(vec4(_1729, _1730, _1731, 1.0), vec4(_1353, _1356, _1359, _1362));
        float _1753 = dot(vec4(_1729, _1730, _1731, 1.0), vec4(_1354, _1357, _1360, _1363));
        float _1760 = dot(vec4(cbModelParam._m0[39u]), vec4(_1729, _1730, _1731, 1.0));
        _1772 = dot(vec3(isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0)), isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0)), isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1760) ? 0.0 : (isnan(0.0) ? _1760 : max(0.0, _1760))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1772 = 1.0;
    }
    float _1783;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1774 = dot(vec4(cbModelParam._m0[40u]), vec4(_1729, _1730, _1731, 1.0));
        _1783 = dot(vec3(isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0)), isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0)), isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1774) ? 0.0 : (isnan(0.0) ? _1774 : max(0.0, _1774))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1783 = 1.0;
    }
    float _1787 = (_1783 * cbModelParam._m0[1u].x) + (_1772 * (1.0 - cbModelParam._m0[1u].x));
    float _1797 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _777);
    float _1798 = isnan(_1797) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1797 : min(cbModelParam._m0[25u].z, _1797));
    float _1878;
    float _1880;
    float _1882;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1845 = fma(_1023, cbModelParam._m0[13u].z, fma(_1019, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1015)) + cbModelParam._m0[13u].w;
        float _1849 = fma(_1023, cbModelParam._m0[14u].z, fma(_1019, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1015)) + cbModelParam._m0[14u].w;
        float _1853 = fma(_1023, cbModelParam._m0[15u].z, fma(_1019, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1015)) + cbModelParam._m0[15u].w;
        float _1856 = fma(_963, cbModelParam._m0[13u].z, fma(_962, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _961));
        float _1859 = fma(_963, cbModelParam._m0[14u].z, fma(_962, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _961));
        float _1862 = fma(_963, cbModelParam._m0[15u].z, fma(_962, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _961));
        float _1890;
        if (_1856 > 0.0)
        {
            _1890 = abs((1.0 - _1845) / _1856);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1856 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1845 + 1.0) / _1856);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1890 = frontier_phi_19_17_ladder;
        }
        float _2113;
        if (_1859 > 0.0)
        {
            _2113 = abs((1.0 - _1849) / _1859);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1859 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1849 + 1.0) / _1859);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2113 = frontier_phi_28_24_ladder;
        }
        float _2370;
        if (_1862 > 0.0)
        {
            _2370 = abs((1.0 - _1853) / _1862);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1862 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1853 + 1.0) / _1862);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2370 = frontier_phi_40_35_ladder;
        }
        float _2372 = isnan(_2113) ? _1890 : (isnan(_1890) ? _2113 : min(_1890, _2113));
        float _2373 = isnan(_2370) ? _2372 : (isnan(_2372) ? _2370 : min(_2372, _2370));
        float _2377 = (_2373 * _1856) + _1845;
        float _2378 = (_2373 * _1859) + _1849;
        float _2379 = (_2373 * _1862) + _1853;
        float _2380 = _2373 * 9.9999997473787516355514526367188e-05;
        float _2382 = (-1.0) - _2380;
        float _2384 = _2380 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2379 > _2384) || ((_2379 < _2382) || ((_2378 > _2384) || ((_2378 < _2382) || ((_2377 < _2382) || (_2377 > _2384))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2507 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2379, cbModelParam._m0[9u].z, fma(_2378, cbModelParam._m0[9u].y, _2377 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2379, cbModelParam._m0[10u].z, fma(_2378, cbModelParam._m0[10u].y, _2377 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2379, cbModelParam._m0[11u].z, fma(_2378, cbModelParam._m0[11u].y, _2377 * cbModelParam._m0[11u].x))), _1798);
            frontier_phi_18_40_ladder = _2507.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2507.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2507.x * cbModelParam._m0[1u].y;
        }
        _1878 = frontier_phi_18_40_ladder_2;
        _1880 = frontier_phi_18_40_ladder_1;
        _1882 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1866 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_961, _962, _963), _1798);
        _1878 = _1866.x * cbModelParam._m0[1u].y;
        _1880 = _1866.y * cbModelParam._m0[1u].y;
        _1882 = _1866.z * cbModelParam._m0[1u].y;
    }
    float _1886 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _777);
    float _1887 = isnan(_1886) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1886 : min(cbModelParam._m0[25u].w, _1886));
    float _1976;
    float _1978;
    float _1980;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1940 = fma(_1023, cbModelParam._m0[21u].z, fma(_1019, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1015)) + cbModelParam._m0[21u].w;
        float _1944 = fma(_1023, cbModelParam._m0[22u].z, fma(_1019, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1015)) + cbModelParam._m0[22u].w;
        float _1948 = fma(_1023, cbModelParam._m0[23u].z, fma(_1019, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1015)) + cbModelParam._m0[23u].w;
        float _1951 = fma(_963, cbModelParam._m0[21u].z, fma(_962, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _961));
        float _1954 = fma(_963, cbModelParam._m0[22u].z, fma(_962, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _961));
        float _1957 = fma(_963, cbModelParam._m0[23u].z, fma(_962, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _961));
        float _2118;
        if (_1951 > 0.0)
        {
            _2118 = abs((1.0 - _1940) / _1951);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1951 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1940 + 1.0) / _1951);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2118 = frontier_phi_30_26_ladder;
        }
        float _2397;
        if (_1954 > 0.0)
        {
            _2397 = abs((1.0 - _1944) / _1954);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1954 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1944 + 1.0) / _1954);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2397 = frontier_phi_42_37_ladder;
        }
        float _2610;
        if (_1957 > 0.0)
        {
            _2610 = abs((1.0 - _1948) / _1957);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1957 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1948 + 1.0) / _1957);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2610 = frontier_phi_51_48_ladder;
        }
        float _2612 = isnan(_2397) ? _2118 : (isnan(_2118) ? _2397 : min(_2118, _2397));
        float _2613 = isnan(_2610) ? _2612 : (isnan(_2612) ? _2610 : min(_2612, _2610));
        float _2617 = (_2613 * _1951) + _1940;
        float _2618 = (_2613 * _1954) + _1944;
        float _2619 = (_2613 * _1957) + _1948;
        float _2620 = _2613 * 9.9999997473787516355514526367188e-05;
        float _2621 = (-1.0) - _2620;
        float _2623 = _2620 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2619 > _2623) || ((_2619 < _2621) || ((_2618 > _2623) || ((_2618 < _2621) || ((_2617 < _2621) || (_2617 > _2623))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2853 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2619, cbModelParam._m0[17u].z, fma(_2618, cbModelParam._m0[17u].y, _2617 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2619, cbModelParam._m0[18u].z, fma(_2618, cbModelParam._m0[18u].y, _2617 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2619, cbModelParam._m0[19u].z, fma(_2618, cbModelParam._m0[19u].y, _2617 * cbModelParam._m0[19u].x))), _1887);
            frontier_phi_27_51_ladder = _2853.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2853.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2853.x * cbModelParam._m0[1u].z;
        }
        _1976 = frontier_phi_27_51_ladder_2;
        _1978 = frontier_phi_27_51_ladder_1;
        _1980 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1960 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_961, _962, _963), _1887);
        _1976 = _1960.x * cbModelParam._m0[1u].z;
        _1978 = _1960.y * cbModelParam._m0[1u].z;
        _1980 = _1960.z * cbModelParam._m0[1u].z;
    }
    float _1993 = (((_986 * _938) + _987) * _953) * ((cbModelParam._m0[1u].w * (_1976 - _1878)) + _1878);
    float _1995 = (((_986 * _940) + _987) * _953) * ((cbModelParam._m0[1u].w * (_1978 - _1880)) + _1880);
    float _1997 = (((_986 * _941) + _987) * _953) * ((cbModelParam._m0[1u].w * (_1980 - _1882)) + _1882);
    float _2000 = fma(_1997, cbSceneParam._m0[89u].z, fma(_1995, cbSceneParam._m0[89u].y, _1993 * cbSceneParam._m0[89u].x));
    float _2003 = fma(_1997, cbSceneParam._m0[90u].z, fma(_1995, cbSceneParam._m0[90u].y, _1993 * cbSceneParam._m0[90u].x));
    float _2006 = fma(_1997, cbSceneParam._m0[91u].z, fma(_1995, cbSceneParam._m0[91u].y, _1993 * cbSceneParam._m0[91u].x));
    vec4 _2014 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_875, _876));
    float _2016 = _2014.w;
    float _2028 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2016);
    float _2029 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2016);
    float _2030 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2016);
    uvec4 _2034 = floatBitsToUint(cbInstanceData._m0[_913 + 5u]);
    uint _2036 = _2034.x * 14u;
    uint _2037 = _2036 + 13u;
    float _2044 = _953 + (-1.0);
    float _2049 = (cbLight._m0[_2037].x * _2044) + 1.0;
    float _2050 = (cbLight._m0[_2037].y * _2044) + 1.0;
    float _2051 = (cbLight._m0[_2037].z * _2044) + 1.0;
    float _2052 = (cbLight._m0[_2037].w * _2044) + 1.0;
    uint _2053 = _2036 + 5u;
    float _2059 = isnan(1.0) ? _2050 : (isnan(_2050) ? 1.0 : min(_2050, 1.0));
    uint _2063 = _2036 + 4u;
    float _2072 = isnan(1.0) ? _2049 : (isnan(_2049) ? 1.0 : min(_2049, 1.0));
    uint _2076 = _2036 | 1u;
    float _2087 = dot(vec3(cbLight._m0[_2036].xyz), vec3(_774, _775, _776));
    float _2090 = dot(vec3(cbLight._m0[_2076].xyz), vec3(_774, _775, _776));
    float _4361 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
    float _4372 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
    float _2095 = (isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0))) * 0.3183098733425140380859375;
    float _2097 = (isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0))) * 0.3183098733425140380859375;
    float _2104 = ((cbLight._m0[_2053].x * _2059) * _2097) + (((cbLight._m0[_2063].x * _2028) * _2072) * _2095);
    float _2105 = ((_2059 * cbLight._m0[_2053].y) * _2097) + (((cbLight._m0[_2063].y * _2029) * _2072) * _2095);
    float _2106 = ((_2059 * cbLight._m0[_2053].z) * _2097) + (((cbLight._m0[_2063].z * _2030) * _2072) * _2095);
    uvec4 _2110 = floatBitsToUint(cbLight._m0[_2036 + 12u]);
    bool _2112 = _2110.x == 0u;
    float _2123;
    float _2125;
    float _2127;
    if (_2112)
    {
        _2123 = _2104;
        _2125 = _2105;
        _2127 = _2106;
    }
    else
    {
        uint _2131 = _2036 + 6u;
        float _2147 = (dot(vec3(cbLight._m0[_2036 + 2u].xyz), vec3(_774, _775, _776)) * 0.5) + 0.5;
        float _2148 = _2147 * _2147;
        float _4383 = isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0));
        float _2149 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
        float _2150 = isnan(1.0) ? _2051 : (isnan(_2051) ? 1.0 : min(_2051, 1.0));
        _2123 = (((cbLight._m0[_2131].x * 0.3183098733425140380859375) * _2149) * _2150) + _2104;
        _2125 = (((cbLight._m0[_2131].y * 0.3183098733425140380859375) * _2149) * _2150) + _2105;
        _2127 = (((cbLight._m0[_2131].z * 0.3183098733425140380859375) * _2149) * _2150) + _2106;
    }
    bool _2130 = _2110.y == 0u;
    float _2168;
    float _2170;
    float _2172;
    if (_2130)
    {
        _2168 = _2123;
        _2170 = _2125;
        _2172 = _2127;
    }
    else
    {
        uint _2341 = _2036 + 7u;
        float _2357 = (dot(vec3(cbLight._m0[_2036 + 3u].xyz), vec3(_774, _775, _776)) * 0.5) + 0.5;
        float _2358 = _2357 * _2357;
        float _4399 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0));
        float _2359 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
        float _2360 = isnan(1.0) ? _2052 : (isnan(_2052) ? 1.0 : min(_2052, 1.0));
        _2168 = (((cbLight._m0[_2341].x * 0.3183098733425140380859375) * _2359) * _2360) + _2123;
        _2170 = (((cbLight._m0[_2341].y * 0.3183098733425140380859375) * _2359) * _2360) + _2125;
        _2172 = (((cbLight._m0[_2341].z * 0.3183098733425140380859375) * _2359) * _2360) + _2127;
    }
    uint _2175 = _2036 + 8u;
    float _2188 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2036].w)) * _777) * 0.949999988079071044921875);
    float _2189 = _2188 * _2188;
    float _2190 = cbLight._m0[_2036].x + _858;
    float _2191 = cbLight._m0[_2036].y + _859;
    float _2192 = cbLight._m0[_2036].z + _860;
    float _2196 = inversesqrt(dot(vec3(_2190, _2191, _2192), vec3(_2190, _2191, _2192)));
    float _2197 = _2196 * _2190;
    float _2198 = _2196 * _2191;
    float _2199 = _2196 * _2192;
    float _2200 = dot(vec3(_774, _775, _776), vec3(cbLight._m0[_2036].xyz));
    float _4415 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
    float _2203 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
    float _4426 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
    float _2204 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
    float _2205 = dot(vec3(_774, _775, _776), vec3(_2197, _2198, _2199));
    float _4437 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0));
    float _2208 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
    float _2209 = dot(vec3(cbLight._m0[_2036].xyz), vec3(_2197, _2198, _2199));
    float _4448 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
    float _2213 = _2189 * _2189;
    float _2217 = ((_2208 * _2208) * (_2213 + (-1.0))) + 1.0;
    float _2225 = exp2(log2(1.0 - (isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0)))) * 5.0);
    float _2226 = 0.959999978542327880859375 - _935;
    float _2228 = 0.959999978542327880859375 - _936;
    float _2229 = 0.959999978542327880859375 - _937;
    float _2236 = 1.0 - _2189;
    float _2247 = (0.5 / (((_2204 * ((_2203 * _2236) + _2189)) + 9.9999999392252902907785028219223e-09) + (((_2204 * _2236) + _2189) * _2203))) * _2203;
    float _4459 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
    float _2249 = (isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0))) * (_2213 / ((_2217 * _2217) * 3.141590118408203125));
    uint _2263 = _2036 + 9u;
    float _2274 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2076].w)) * _777) * 0.949999988079071044921875);
    float _2275 = _2274 * _2274;
    float _2276 = cbLight._m0[_2076].x + _858;
    float _2277 = cbLight._m0[_2076].y + _859;
    float _2278 = cbLight._m0[_2076].z + _860;
    float _2282 = inversesqrt(dot(vec3(_2276, _2277, _2278), vec3(_2276, _2277, _2278)));
    float _2283 = _2282 * _2276;
    float _2284 = _2282 * _2277;
    float _2285 = _2282 * _2278;
    float _2286 = dot(vec3(_774, _775, _776), vec3(cbLight._m0[_2076].xyz));
    float _4470 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
    float _2289 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
    float _2290 = dot(vec3(_774, _775, _776), vec3(_2283, _2284, _2285));
    float _4481 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
    float _2293 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
    float _2294 = dot(vec3(cbLight._m0[_2076].xyz), vec3(_2283, _2284, _2285));
    float _4492 = isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0));
    float _2298 = _2275 * _2275;
    float _2302 = ((_2293 * _2293) * (_2298 + (-1.0))) + 1.0;
    float _2309 = exp2(log2(1.0 - (isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0)))) * 5.0);
    float _2316 = 1.0 - _2275;
    float _2326 = (0.5 / (((_2204 * ((_2289 * _2316) + _2275)) + 9.9999999392252902907785028219223e-09) + (((_2204 * _2316) + _2275) * _2289))) * _2289;
    float _4503 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
    float _2328 = (isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0))) * (_2298 / ((_2302 * _2302) * 3.141590118408203125));
    float _2338 = (((((_2309 * _2226) + _938) * cbLight._m0[_2263].x) * _2328) * _2059) + ((((cbLight._m0[_2175].x * _2028) * ((_2225 * _2226) + _938)) * _2249) * _2072);
    float _2339 = (((((_2309 * _2228) + _940) * cbLight._m0[_2263].y) * _2328) * _2059) + ((((cbLight._m0[_2175].y * _2029) * ((_2225 * _2228) + _940)) * _2249) * _2072);
    float _2340 = (((((_2309 * _2229) + _941) * cbLight._m0[_2263].z) * _2328) * _2059) + ((((cbLight._m0[_2175].z * _2030) * ((_2225 * _2229) + _941)) * _2249) * _2072);
    float _2402;
    float _2404;
    float _2406;
    if (_2112)
    {
        _2402 = _2338;
        _2404 = _2339;
        _2406 = _2340;
    }
    else
    {
        uint _2408 = _2036 + 2u;
        uint _2412 = _2036 + 10u;
        float _2426 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2408].w)) * _777) * 0.949999988079071044921875);
        float _2427 = _2426 * _2426;
        float _2428 = cbLight._m0[_2408].x + _858;
        float _2429 = cbLight._m0[_2408].y + _859;
        float _2430 = cbLight._m0[_2408].z + _860;
        float _2434 = inversesqrt(dot(vec3(_2428, _2429, _2430), vec3(_2428, _2429, _2430)));
        float _2435 = _2434 * _2428;
        float _2436 = _2434 * _2429;
        float _2437 = _2434 * _2430;
        float _2438 = dot(vec3(_774, _775, _776), vec3(cbLight._m0[_2408].xyz));
        float _4514 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
        float _2441 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
        float _2442 = dot(vec3(_774, _775, _776), vec3(_2435, _2436, _2437));
        float _4525 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0));
        float _2445 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
        float _2446 = dot(vec3(cbLight._m0[_2408].xyz), vec3(_2435, _2436, _2437));
        float _4536 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
        float _2450 = _2427 * _2427;
        float _2454 = ((_2445 * _2445) * (_2450 + (-1.0))) + 1.0;
        float _2461 = exp2(log2(1.0 - (isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0)))) * 5.0);
        float _2468 = 1.0 - _2427;
        float _2478 = (0.5 / (((_2204 * ((_2441 * _2468) + _2427)) + 9.9999999392252902907785028219223e-09) + (((_2204 * _2468) + _2427) * _2441))) * _2441;
        float _4547 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
        float _2480 = (isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0))) * (_2450 / ((_2454 * _2454) * 3.141590118408203125));
        float _2481 = isnan(1.0) ? _2051 : (isnan(_2051) ? 1.0 : min(_2051, 1.0));
        _2402 = (((((_2461 * _2226) + _938) * cbLight._m0[_2412].x) * _2480) * _2481) + _2338;
        _2404 = (((((_2461 * _2228) + _940) * cbLight._m0[_2412].y) * _2480) * _2481) + _2339;
        _2406 = (((((_2461 * _2229) + _941) * cbLight._m0[_2412].z) * _2480) * _2481) + _2340;
    }
    float _2516;
    float _2518;
    float _2520;
    if (_2130)
    {
        _2516 = _2402;
        _2518 = _2404;
        _2520 = _2406;
    }
    else
    {
        uint _2527 = _2036 + 3u;
        uint _2531 = _2036 + 11u;
        float _2545 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2527].w)) * _777) * 0.949999988079071044921875);
        float _2546 = _2545 * _2545;
        float _2547 = cbLight._m0[_2527].x + _858;
        float _2548 = cbLight._m0[_2527].y + _859;
        float _2549 = cbLight._m0[_2527].z + _860;
        float _2553 = inversesqrt(dot(vec3(_2547, _2548, _2549), vec3(_2547, _2548, _2549)));
        float _2554 = _2553 * _2547;
        float _2555 = _2553 * _2548;
        float _2556 = _2553 * _2549;
        float _2557 = dot(vec3(_774, _775, _776), vec3(cbLight._m0[_2527].xyz));
        float _4563 = isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0));
        float _2560 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
        float _2561 = dot(vec3(_774, _775, _776), vec3(_2554, _2555, _2556));
        float _4574 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0));
        float _2564 = isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0));
        float _2565 = dot(vec3(cbLight._m0[_2527].xyz), vec3(_2554, _2555, _2556));
        float _4585 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0));
        float _2569 = _2546 * _2546;
        float _2573 = ((_2564 * _2564) * (_2569 + (-1.0))) + 1.0;
        float _2580 = exp2(log2(1.0 - (isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0)))) * 5.0);
        float _2587 = 1.0 - _2546;
        float _2597 = (0.5 / (((_2204 * ((_2560 * _2587) + _2546)) + 9.9999999392252902907785028219223e-09) + (((_2204 * _2587) + _2546) * _2560))) * _2560;
        float _4596 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0));
        float _2599 = (isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0))) * (_2569 / ((_2573 * _2573) * 3.141590118408203125));
        float _2600 = isnan(1.0) ? _2052 : (isnan(_2052) ? 1.0 : min(_2052, 1.0));
        _2516 = (((((_2580 * _2226) + _938) * cbLight._m0[_2531].x) * _2599) * _2600) + _2402;
        _2518 = (((((_2580 * _2228) + _940) * cbLight._m0[_2531].y) * _2599) * _2600) + _2404;
        _2520 = (((((_2580 * _2229) + _941) * cbLight._m0[_2531].z) * _2599) * _2600) + _2406;
    }
    float _2735;
    float _2737;
    float _2739;
    float _2741;
    float _2743;
    float _2745;
    if (_2034.y == 0u)
    {
        float _2675 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2676 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2675;
        float _2677 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2675;
        float _2678 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2675;
        uvec4 _2690 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2691 = _2690.x;
        uint _2702 = uint((float(_2690.y) * floor(float(uint(cbSceneParam._m0[85u].y * _876) / _2691))) + floor(float(uint(cbSceneParam._m0[85u].x * _875) / _2691)));
        float _2712 = (log2(_2678 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2713 = isnan(0.0) ? _2712 : (isnan(_2712) ? 0.0 : max(_2712, 0.0));
        uint _2716 = uint(isnan(14.0) ? _2713 : (isnan(_2713) ? 14.0 : min(_2713, 14.0)));
        uvec4 _2721 = texelFetch(g_lightClusterGridBuffer, int(((_2716 << 2u) + (_2702 << 6u)) >> 2u));
        uint _2722 = _2721.x;
        uint _2723 = _2690.z;
        float _2858;
        float _2860;
        float _2862;
        float _2864;
        float _2866;
        float _2868;
        if (((((1u << ((_2723 >> 4u) & 15u)) + 4294967295u) & _2722) == 0u) || ((_2723 & 240u) == 0u))
        {
            _2858 = 0.0;
            _2860 = 0.0;
            _2862 = 0.0;
            _2864 = 0.0;
            _2866 = 0.0;
            _2868 = 0.0;
        }
        else
        {
            float _2859;
            float _2861;
            float _2863;
            float _2865;
            float _2867;
            float _2869;
            float _3020 = 0.0;
            float _3021 = 0.0;
            float _3022 = 0.0;
            float _3023 = 0.0;
            float _3024 = 0.0;
            float _3025 = 0.0;
            uint _3026 = 0u;
            uint _3035;
            bool _3036;
            for (;;)
            {
                _3035 = texelFetch(g_lightClassification, int((((_2716 << 5u) + (_2702 << 9u)) + (_3026 << 2u)) >> 2u)).x;
                _3036 = _3035 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3036)
                {
                    frontier_phi_68_pred = _3020;
                    frontier_phi_68_pred_1 = _3025;
                    frontier_phi_68_pred_2 = _3024;
                    frontier_phi_68_pred_3 = _3023;
                    frontier_phi_68_pred_4 = _3022;
                    frontier_phi_68_pred_5 = _3021;
                }
                else
                {
                    float _3165;
                    float _3166;
                    float _3167;
                    float _3168;
                    float _3169;
                    float _3170;
                    uint _3171;
                    _3165 = _3020;
                    _3166 = _3021;
                    _3167 = _3022;
                    _3168 = _3023;
                    _3169 = _3024;
                    _3170 = _3025;
                    _3171 = _3035;
                    float _3092;
                    float _3093;
                    float _3094;
                    float _3095;
                    float _3096;
                    float _3097;
                    for (;;)
                    {
                        uint _3175 = uint(findLSB(_3171)) + (_3026 << 5u);
                        uint _3172 = (_3171 + 4294967295u) & _3171;
                        uint _3177 = _3175 * 48u;
                        vec4 _3191 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3177)).x, texelFetch(g_PointLightRenderingBuffer, int(_3177 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3177 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3177 + 3u)).x));
                        uint _3197 = (_3175 * 48u) + 4u;
                        vec4 _3210 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3197)).x, texelFetch(g_PointLightRenderingBuffer, int(_3197 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3197 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3197 + 3u)).x));
                        uint _3216 = (_3175 * 48u) + 8u;
                        vec3 _3227 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3216)).x, texelFetch(g_PointLightRenderingBuffer, int(_3216 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3216 + 2u)).x));
                        float _3231 = _3191.x - _2676;
                        float _3232 = _3191.y - _2677;
                        float _3233 = _3191.z - _2678;
                        float _3234 = dot(vec3(_3231, _3232, _3233), vec3(_3231, _3232, _3233));
                        float _3237 = inversesqrt(_3234);
                        float _3238 = _3237 * _3231;
                        float _3239 = _3237 * _3232;
                        float _3240 = _3237 * _3233;
                        float _3241 = dot(vec3(_894, _897, _900), vec3(_3238, _3239, _3240));
                        float _3246 = 1.0 - (_3234 * _3191.w);
                        float _4622 = isnan(0.0) ? _3246 : (isnan(_3246) ? 0.0 : max(_3246, 0.0));
                        float _3247 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
                        float _3248 = sqrt(_3234) * _3210.w;
                        float _3251 = 1.39999997615814208984375 / (_3248 + 1.39999997615814208984375);
                        float _3252 = _3251 * _3251;
                        float _3255 = ((1.0 - _3252) * _3241) + _3252;
                        float _3258 = _3248 * _3248;
                        float _3262 = ((isnan(0.0) ? _3255 : (isnan(_3255) ? 0.0 : max(_3255, 0.0))) * _3247) / ((_3258 * 0.699999988079071044921875) + 1.0);
                        float _3266 = (-0.0) - _2676;
                        float _3267 = (-0.0) - _2677;
                        float _3268 = (-0.0) - _2678;
                        float _3272 = inversesqrt(dot(vec3(_3266, _3267, _3268), vec3(_3266, _3267, _3268)));
                        float _3273 = _3272 * _3266;
                        float _3274 = _3272 * _3267;
                        float _3275 = _3272 * _3268;
                        float _3283 = exp2(log2(1.0 / ((_3258 * 3.5) + 5.0)) * 0.25);
                        float _3284 = 1.0 - _969;
                        float _3291 = sqrt(1.0 - ((1.0 - (_3284 * _3284)) * (1.0 - (_3283 * _3283))));
                        float _3292 = _3291 * _3291;
                        float _3293 = _3292 * _3292;
                        float _3294 = _3273 + _3238;
                        float _3295 = _3274 + _3239;
                        float _3296 = _3275 + _3240;
                        float _3300 = inversesqrt(dot(vec3(_3294, _3295, _3296), vec3(_3294, _3295, _3296)));
                        float _3304 = dot(vec3(_894, _897, _900), vec3(_3273, _3274, _3275));
                        float _4638 = isnan(0.0) ? _3304 : (isnan(_3304) ? 0.0 : max(_3304, 0.0));
                        float _3307 = isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0));
                        float _3308 = dot(vec3(_894, _897, _900), vec3(_3300 * _3294, _3300 * _3295, _3300 * _3296));
                        float _4649 = isnan(0.0) ? _3308 : (isnan(_3308) ? 0.0 : max(_3308, 0.0));
                        float _3311 = isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0));
                        float _3315 = ((_3311 * _3311) * (_3293 + (-1.0))) + 1.0;
                        float _3316 = _3251 * _3292;
                        float _3317 = _3316 * _3316;
                        float _3320 = ((1.0 - _3317) * _3241) + _3317;
                        float _4660 = isnan(0.0) ? _3320 : (isnan(_3320) ? 0.0 : max(_3320, 0.0));
                        float _3321 = isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0));
                        float _3322 = 1.0 - _3292;
                        float _3332 = (0.5 / (((_3321 * ((_3307 * _3322) + _3292)) + 9.9999999392252902907785028219223e-09) + (((_3321 * _3322) + _3292) * _3307))) * _3321;
                        float _4671 = isnan(0.0) ? _3332 : (isnan(_3332) ? 0.0 : max(_3332, 0.0));
                        float _3343 = (((_3293 * 3.1415927410125732421875) * (isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0)))) / ((_3315 * _3315) * ((_3258 * 2.1991131305694580078125) + 3.141590118408203125))) * _3247;
                        _3095 = (_3262 * _3210.x) + _3168;
                        _3096 = (_3262 * _3210.y) + _3169;
                        _3097 = (_3262 * _3210.z) + _3170;
                        _3092 = (_3343 * _3227.x) + _3165;
                        _3093 = (_3343 * _3227.y) + _3166;
                        _3094 = (_3343 * _3227.z) + _3167;
                        if (_3172 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3165 = _3092;
                            _3166 = _3093;
                            _3167 = _3094;
                            _3168 = _3095;
                            _3169 = _3096;
                            _3170 = _3097;
                            _3171 = _3172;
                        }
                    }
                    frontier_phi_68_pred = _3092;
                    frontier_phi_68_pred_1 = _3097;
                    frontier_phi_68_pred_2 = _3096;
                    frontier_phi_68_pred_3 = _3095;
                    frontier_phi_68_pred_4 = _3094;
                    frontier_phi_68_pred_5 = _3093;
                }
                _2859 = frontier_phi_68_pred;
                _2869 = frontier_phi_68_pred_1;
                _2867 = frontier_phi_68_pred_2;
                _2865 = frontier_phi_68_pred_3;
                _2863 = frontier_phi_68_pred_4;
                _2861 = frontier_phi_68_pred_5;
                uint _3027 = _3026 + 1u;
                if (_3027 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3020 = _2859;
                    _3021 = _2861;
                    _3022 = _2863;
                    _3023 = _2865;
                    _3024 = _2867;
                    _3025 = _2869;
                    _3026 = _3027;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2858 = _2859;
            _2860 = _2861;
            _2862 = _2863;
            _2864 = _2865;
            _2866 = _2867;
            _2868 = _2869;
        }
        uvec4 _2872 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2873 = _2872.z;
        uint _2875 = (_2873 >> 8u) & 15u;
        float _2988;
        float _2990;
        float _2992;
        float _2994;
        float _2996;
        float _2998;
        if (((4294967295u << _2875) & _2722) == 0u)
        {
            _2988 = _2858;
            _2990 = _2860;
            _2992 = _2862;
            _2994 = _2864;
            _2996 = _2866;
            _2998 = _2868;
        }
        else
        {
            float _3013 = inversesqrt(dot(vec3(_2676, _2677, _2678), vec3(_2676, _2677, _2678)));
            float _3014 = _3013 * _2676;
            float _3015 = _3013 * _2677;
            float _3016 = _3013 * _2678;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2875 < ((_2873 >> 12u) & 15u))
            {
                float _2989;
                float _2991;
                float _2993;
                float _2995;
                float _2997;
                float _2999;
                float _3148 = _2858;
                float _3149 = _2860;
                float _3150 = _2862;
                float _3151 = _2864;
                float _3152 = _2866;
                float _3153 = _2868;
                uint _3154 = _2875;
                uint _3163;
                bool _3164;
                for (;;)
                {
                    _3163 = texelFetch(g_lightClassification, int((((_2716 << 5u) + (_2702 << 9u)) + (_3154 << 2u)) >> 2u)).x;
                    _3164 = _3163 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3164)
                    {
                        frontier_phi_79_pred = _3153;
                        frontier_phi_79_pred_1 = _3152;
                        frontier_phi_79_pred_2 = _3151;
                        frontier_phi_79_pred_3 = _3150;
                        frontier_phi_79_pred_4 = _3149;
                        frontier_phi_79_pred_5 = _3148;
                    }
                    else
                    {
                        float _3357;
                        float _3358;
                        float _3359;
                        float _3360;
                        float _3361;
                        float _3362;
                        float _3650;
                        float _3651;
                        float _3652;
                        float _3653;
                        float _3654;
                        float _3655;
                        float _3370 = _3148;
                        float _3371 = _3149;
                        float _3372 = _3150;
                        float _3373 = _3151;
                        float _3374 = _3152;
                        float _3375 = _3153;
                        uint _3376 = _3163;
                        uint _3377;
                        vec4 _3402;
                        float _3403;
                        vec4 _3418;
                        vec3 _3430;
                        vec4 _3445;
                        vec4 _3460;
                        float _3506;
                        bool _3507;
                        for (;;)
                        {
                            uint _3387 = ((_3154 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3376));
                            _3377 = (_3376 + 4294967295u) & _3376;
                            uint _3389 = _3387 * 40u;
                            _3402 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3389)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 3u)).x));
                            _3403 = _3402.w;
                            uint _3405 = (_3387 * 40u) + 4u;
                            _3418 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3405)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3405 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3405 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3405 + 3u)).x));
                            uint _3420 = (_3387 * 40u) + 8u;
                            _3430 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3420)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 2u)).x));
                            uint _3432 = (_3387 * 40u) + 16u;
                            _3445 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3432)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3432 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3432 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3432 + 3u)).x));
                            uint _3447 = (_3387 * 40u) + 20u;
                            _3460 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3447)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 3u)).x));
                            uint _3462 = (_3387 * 40u) + 24u;
                            vec4 _3475 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3462)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 3u)).x));
                            uint _3481 = (_3387 * 40u) + 28u;
                            vec4 _3494 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3481)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 3u)).x));
                            _3506 = fma(_2678, _3494.z, fma(_2677, _3494.y, _3494.x * _2676)) + _3494.w;
                            _3507 = !((fma(_2678, _3475.z, fma(_2677, _3475.y, _3475.x * _2676)) + _3475.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3507)
                            {
                                float _3534 = _3402.x - _2676;
                                float _3535 = _3402.y - _2677;
                                float _3536 = _3402.z - _2678;
                                float _3537 = dot(vec3(_3534, _3535, _3536), vec3(_3534, _3535, _3536));
                                float _3540 = inversesqrt(_3537);
                                float _3541 = _3540 * _3534;
                                float _3542 = _3540 * _3535;
                                float _3543 = _3540 * _3536;
                                float _3547 = 1.0 - (_3537 / (_3403 * _3403));
                                float _4682 = isnan(0.0) ? _3547 : (isnan(_3547) ? 0.0 : max(_3547, 0.0));
                                float _3548 = isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0));
                                float _3552 = sqrt(_3537) * _3418.w;
                                float _3554 = 1.39999997615814208984375 / (_3552 + 1.39999997615814208984375);
                                float _3555 = _3554 * _3554;
                                float _3558 = ((1.0 - _3555) * dot(vec3(_3541, _3542, _3543), vec3(_894, _897, _900))) + _3555;
                                float _3561 = _3552 * _3552;
                                float _3565 = (fma(_2678, _3445.z, fma(_2677, _3445.y, _3445.x * _2676)) + _3445.w) / _3506;
                                float _3566 = (fma(_2678, _3460.z, fma(_2677, _3460.y, _3460.x * _2676)) + _3460.w) / _3506;
                                float _3570 = 1.0 - dot(vec2(_3565, _3566), vec2(_3565, _3566));
                                float _4698 = isnan(0.0) ? _3570 : (isnan(_3570) ? 0.0 : max(_3570, 0.0));
                                float _3571 = isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0));
                                float _3572 = _3571 * (((isnan(0.0) ? _3558 : (isnan(_3558) ? 0.0 : max(_3558, 0.0))) * _3548) / ((_3561 * 0.699999988079071044921875) + 1.0));
                                float _3584 = exp2(log2(1.0 / ((_3561 * 3.5) + 5.0)) * 0.25);
                                float _3585 = 1.0 - _969;
                                float _3592 = sqrt(1.0 - ((1.0 - (_3585 * _3585)) * (1.0 - (_3584 * _3584))));
                                float _3593 = _3592 * _3592;
                                float _3594 = _3593 * _3593;
                                float _3595 = _3541 - _3014;
                                float _3596 = _3542 - _3015;
                                float _3597 = _3543 - _3016;
                                float _3601 = inversesqrt(dot(vec3(_3595, _3596, _3597), vec3(_3595, _3596, _3597)));
                                float _3605 = dot(vec3(_894, _897, _900), vec3((-0.0) - _3014, (-0.0) - _3015, (-0.0) - _3016));
                                float _4709 = isnan(0.0) ? _3605 : (isnan(_3605) ? 0.0 : max(_3605, 0.0));
                                float _3608 = isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0));
                                float _3609 = dot(vec3(_894, _897, _900), vec3(_3601 * _3595, _3601 * _3596, _3601 * _3597));
                                float _4720 = isnan(0.0) ? _3609 : (isnan(_3609) ? 0.0 : max(_3609, 0.0));
                                float _3612 = isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0));
                                float _3616 = ((_3612 * _3612) * (_3594 + (-1.0))) + 1.0;
                                float _3617 = _3554 * _3593;
                                float _3618 = _3617 * _3617;
                                float _3624 = ((1.0 - _3618) * dot(vec3(_894, _897, _900), vec3(_3541, _3542, _3543))) + _3618;
                                float _4731 = isnan(0.0) ? _3624 : (isnan(_3624) ? 0.0 : max(_3624, 0.0));
                                float _3625 = isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0));
                                float _3626 = 1.0 - _3593;
                                float _3636 = (0.5 / (((_3625 * ((_3608 * _3626) + _3593)) + 9.9999999392252902907785028219223e-09) + (((_3625 * _3626) + _3593) * _3608))) * _3625;
                                float _4742 = isnan(0.0) ? _3636 : (isnan(_3636) ? 0.0 : max(_3636, 0.0));
                                float _3646 = (_3571 * _3548) * (((_3594 * 3.1415927410125732421875) * (isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0)))) / ((_3616 * _3616) * ((_3561 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3572 * _3418.y;
                                frontier_phi_85_pred_1 = _3572 * _3418.x;
                                frontier_phi_85_pred_2 = _3646 * _3430.z;
                                frontier_phi_85_pred_3 = _3646 * _3430.y;
                                frontier_phi_85_pred_4 = _3646 * _3430.x;
                                frontier_phi_85_pred_5 = _3572 * _3418.z;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3654 = frontier_phi_85_pred;
                            _3653 = frontier_phi_85_pred_1;
                            _3652 = frontier_phi_85_pred_2;
                            _3651 = frontier_phi_85_pred_3;
                            _3650 = frontier_phi_85_pred_4;
                            _3655 = frontier_phi_85_pred_5;
                            _3360 = _3653 + _3373;
                            _3361 = _3654 + _3374;
                            _3362 = _3655 + _3375;
                            _3357 = _3650 + _3370;
                            _3358 = _3651 + _3371;
                            _3359 = _3652 + _3372;
                            if (_3377 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3370 = _3357;
                                _3371 = _3358;
                                _3372 = _3359;
                                _3373 = _3360;
                                _3374 = _3361;
                                _3375 = _3362;
                                _3376 = _3377;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3362;
                        frontier_phi_79_pred_1 = _3361;
                        frontier_phi_79_pred_2 = _3360;
                        frontier_phi_79_pred_3 = _3359;
                        frontier_phi_79_pred_4 = _3358;
                        frontier_phi_79_pred_5 = _3357;
                    }
                    _2999 = frontier_phi_79_pred;
                    _2997 = frontier_phi_79_pred_1;
                    _2995 = frontier_phi_79_pred_2;
                    _2993 = frontier_phi_79_pred_3;
                    _2991 = frontier_phi_79_pred_4;
                    _2989 = frontier_phi_79_pred_5;
                    uint _3155 = _3154 + 1u;
                    if (_3155 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3148 = _2989;
                        _3149 = _2991;
                        _3150 = _2993;
                        _3151 = _2995;
                        _3152 = _2997;
                        _3153 = _2999;
                        _3154 = _3155;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2993;
                frontier_phi_60_61_ladder_1 = _2999;
                frontier_phi_60_61_ladder_2 = _2997;
                frontier_phi_60_61_ladder_3 = _2995;
                frontier_phi_60_61_ladder_4 = _2991;
                frontier_phi_60_61_ladder_5 = _2989;
            }
            else
            {
                frontier_phi_60_61_ladder = _2862;
                frontier_phi_60_61_ladder_1 = _2868;
                frontier_phi_60_61_ladder_2 = _2866;
                frontier_phi_60_61_ladder_3 = _2864;
                frontier_phi_60_61_ladder_4 = _2860;
                frontier_phi_60_61_ladder_5 = _2858;
            }
            _2988 = frontier_phi_60_61_ladder_5;
            _2990 = frontier_phi_60_61_ladder_4;
            _2992 = frontier_phi_60_61_ladder;
            _2994 = frontier_phi_60_61_ladder_3;
            _2996 = frontier_phi_60_61_ladder_2;
            _2998 = frontier_phi_60_61_ladder_1;
        }
        float _3003 = isnan(1.0) ? _953 : (isnan(_953) ? 1.0 : min(_953, 1.0));
        _2735 = (_3003 * _2994) + _2168;
        _2737 = (_3003 * _2996) + _2170;
        _2739 = (_3003 * _2998) + _2172;
        _2741 = ((_2988 * _938) * _3003) + _2516;
        _2743 = ((_2990 * _940) * _3003) + _2518;
        _2745 = ((_2992 * _941) * _3003) + _2520;
    }
    else
    {
        _2735 = _2168;
        _2737 = _2170;
        _2739 = _2172;
        _2741 = _2516;
        _2743 = _2518;
        _2745 = _2520;
    }
    uint _2751 = _914 + uint(cbMatDynParam._m0[0u].w);
    float _2759 = ((cbMtdParam._m0[20u].x * cbMtdParam._m0[25u].x) * _704.x) * cbInstanceData._m0[_2751].x;
    float _2762 = ((cbMtdParam._m0[20u].y * cbMtdParam._m0[25u].x) * _704.y) * cbInstanceData._m0[_2751].y;
    float _2765 = ((cbMtdParam._m0[20u].z * cbMtdParam._m0[25u].x) * _704.z) * cbInstanceData._m0[_2751].z;
    float _4758 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
    float _4769 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
    float _4780 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
    float _2782 = (((isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0))) * (_2735 + ((isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0))) * _953))) + ((_2741 + ((isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0))) * _1787)) * cbPerFrame._m0[3u].x)) + _2759;
    float _2784 = (_2762 + ((_2743 + ((isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0))) * _1787)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0))) * (_2737 + ((isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0))) * _953)));
    float _2786 = (_2765 + ((_2745 + ((isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0))) * _1787)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0))) * (_2739 + ((isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0))) * _953)));
    float _2787 = isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0));
    float _2788 = isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : max(_2784, 0.0));
    float _2789 = isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0));
    float _2795 = cbMtdParam._m0[2u].x * _2759;
    float _2796 = cbMtdParam._m0[2u].y * _2762;
    float _2797 = cbMtdParam._m0[2u].z * _2765;
    float _4806 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2799 = isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0));
    uint _2800 = _913 + 6u;
    float _2808 = _875 / cbSceneParam._m0[86u].x;
    float _2809 = _876 / cbSceneParam._m0[86u].y;
    vec4 _2823 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2808, _2809, (log2((isnan(cbSceneParam._m0[77u].w) ? _801 : (isnan(_801) ? cbSceneParam._m0[77u].w : min(_801, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2825 = _2823.x;
    float _2826 = _2823.y;
    float _2827 = _2823.z;
    float _2828 = _2823.w;
    float _2921;
    float _2923;
    float _2925;
    float _2927;
    if (_801 > cbSceneParam._m0[78u].w)
    {
        float _2883 = isnan(_801) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _801 : min(cbSceneParam._m0[80u].w, _801));
        float _2884 = _2883 / _801;
        float _2895 = _2884 * _851;
        float _2896 = _852 * _2884;
        float _2897 = (-0.0) - _2896;
        float _2899 = _2884 * _853;
        float _2901 = (cbSceneParam._m0[77u].w * _2897) / _2883;
        float _2902 = _2901 + cbSceneParam._m0[79u].w;
        float _2903 = cbSceneParam._m0[79u].w - _2896;
        float _2909 = sqrt(((_2895 * _2895) + (_2896 * _2896)) + (_2899 * _2899));
        float _2912 = (1.0 - (cbSceneParam._m0[77u].w / _2883)) * _2909;
        float _2917 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2919 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3105;
        if (abs((_2897 - _2901) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3105 = ((((_2902 > 0.0) ? exp2(_2917 * _2902) : (2.0 - exp2(_2919 * _2902))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2912;
        }
        else
        {
            float _3049 = 1.0 / cbSceneParam._m0[80u].x;
            float _3050 = isnan(_2903) ? _2902 : (isnan(_2902) ? _2903 : max(_2902, _2903));
            float _3051 = isnan(_2903) ? _2902 : (isnan(_2902) ? _2903 : min(_2902, _2903));
            float _3060 = isnan(0.0) ? _3050 : (isnan(_3050) ? 0.0 : min(_3050, 0.0));
            float _3061 = isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : min(_3051, 0.0));
            _3105 = ((abs(_2909 / _2897) * cbSceneParam._m0[80u].y) * ((((_3060 - _3061) * 2.0) - ((exp2(_2917 * (isnan(0.0) ? _3050 : (isnan(_3050) ? 0.0 : max(_3050, 0.0)))) - exp2(_2917 * (isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : max(_3051, 0.0))))) * _3049)) - ((exp2(_2919 * _3060) - exp2(_2919 * _3061)) * _3049))) + (_2912 * cbSceneParam._m0[80u].z);
        }
        vec4 _3107 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2808, _2809, 1.0), 0.0);
        float _3116 = exp2((_3105 * (-1.44269502162933349609375)) * (1.0 - _3107.w));
        float _3117 = log2(_3116);
        float _3133 = log2(_2828);
        _2921 = (exp2(_3133 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3117 * cbSceneParam._m0[78u].x)) * _3107.x) / cbSceneParam._m0[78u].x)) + _2825;
        _2923 = (exp2(_3133 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3117 * cbSceneParam._m0[78u].y)) * _3107.y) / cbSceneParam._m0[78u].y)) + _2826;
        _2925 = (exp2(_3133 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3117 * cbSceneParam._m0[78u].z)) * _3107.z) / cbSceneParam._m0[78u].z)) + _2827;
        _2927 = _3116 * _2828;
    }
    else
    {
        _2921 = _2825;
        _2923 = _2826;
        _2925 = _2827;
        _2927 = _2828;
    }
    bool _3143;
    vec4 _2937;
    vec4 _2959;
    float _2961;
    float _2965;
    float _2966;
    float _2967;
    float _2970;
    float _2973;
    float _2976;
    float _2977;
    bool _2987;
    for (;;)
    {
        _2937 = cbMatDynParam._m0[0u];
        float _2939 = roundEven(_2937.y);
        bool _2940 = _2939 == 3.0;
        float _2941 = log2(_2927);
        float _2945 = exp2(_2941 * cbSceneParam._m0[78u].x);
        float _2946 = exp2(_2941 * cbSceneParam._m0[78u].y);
        float _2947 = exp2(_2941 * cbSceneParam._m0[78u].z);
        float _2948 = _2945 * _2787;
        float _2949 = _2946 * _2788;
        float _2950 = _2947 * _2789;
        float _2957 = _864 + (-0.5);
        _2959 = cbMtdParam._m0[1u];
        _2961 = _2959.y * _2957;
        float _2964 = (_2939 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2965 = _2964 * (_2940 ? _2948 : (_2948 + (cbSceneParam._m0[72u].w * _2921)));
        _2966 = _2964 * (_2940 ? _2949 : (_2949 + (cbSceneParam._m0[72u].w * _2923)));
        _2967 = _2964 * (_2940 ? _2950 : (_2950 + (cbSceneParam._m0[72u].w * _2925)));
        _2970 = ((_2795 * _2799) * _2945) * _2964;
        _2973 = ((_2796 * _2799) * _2946) * _2964;
        _2976 = ((_2797 * _2799) * _2947) * _2964;
        _2977 = _2957 * 0.999000012874603271484375;
        _2987 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2987)
        {
            if ((cbInstanceData._m0[_913 + 7u].x + _2977) < 0.5)
            {
                _3143 = true;
                break;
            }
        }
        uint _3084 = _914 + uint(_2937.w);
        if ((cbInstanceData._m0[_3084].w < 1.0) && ((cbInstanceData._m0[_3084].w + _2977) < 0.5))
        {
            _3143 = true;
            break;
        }
        if ((_2961 + 1.0) < _2959.x)
        {
            _3143 = true;
            break;
        }
        _3143 = false;
        break;
    }
    float _3348;
    if (_3143)
    {
        discard_state = true;
        _3348 = 0.0;
    }
    else
    {
        _3348 = cbInstanceData._m0[_2800].w;
    }
    SV_Target.x = _2965;
    SV_Target.y = _2966;
    SV_Target.z = _2967;
    SV_Target.w = _3348;
    SV_Target_1.x = _2970;
    SV_Target_1.y = _2973;
    SV_Target_1.z = _2976;
    SV_Target_1.w = cbInstanceData._m0[_2800].w;
    discard_exit();
}


