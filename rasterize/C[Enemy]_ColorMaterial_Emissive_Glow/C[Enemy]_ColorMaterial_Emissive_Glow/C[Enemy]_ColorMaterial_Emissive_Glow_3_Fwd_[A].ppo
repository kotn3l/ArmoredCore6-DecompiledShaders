#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[29];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 12) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 9) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2DArray C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_0;
layout(set = 0, binding = 14) uniform texture2DArray C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1350;
float _3773;
float _3774;
float _3775;
float _3776;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _209 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _210 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _211 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _217 = inversesqrt(dot(vec3(_209, _210, _211), vec3(_209, _210, _211)));
    float _224 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _231 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _249 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_1) + cbTextureTilingScale._m0[10u].w));
    float _259 = log2(0.0);
    float _261 = exp2(_259 * cbMtdParam._m0[22u].x);
    float _262 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _263 = isnan(1.0) ? _262 : (isnan(_262) ? 1.0 : min(_262, 1.0));
    vec4 _277 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _281 = _277.z;
    float _290 = exp2(log2(_281 * cbMtdParam._m0[22u].y) * cbMtdParam._m0[21u].y);
    float _291 = isnan(0.0) ? _290 : (isnan(_290) ? 0.0 : max(_290, 0.0));
    float _292 = isnan(1.0) ? _291 : (isnan(_291) ? 1.0 : min(_291, 1.0));
    vec4 _304 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _307 = _304.y;
    float _310 = (_304.x + (-0.02500000037252902984619140625)) * 8.0;
    float _314 = roundEven(5.0 - _310);
    float _315 = isnan(0.0) ? _314 : (isnan(_314) ? 0.0 : max(_314, 0.0));
    float _316 = isnan(4.0) ? _315 : (isnan(_315) ? 4.0 : min(_315, 4.0));
    float _329 = floor(_316);
    vec4 _332 = texture(sampler2DArray(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w, _329));
    float _187[6];
    float _188[6];
    float _189[6];
    _187[0u] = cbMtdParam._m0[17u].x;
    _188[0u] = cbMtdParam._m0[17u].y;
    _189[0u] = cbMtdParam._m0[17u].z;
    _187[1u] = cbMtdParam._m0[15u].x;
    _188[1u] = cbMtdParam._m0[15u].y;
    _189[1u] = cbMtdParam._m0[15u].z;
    _187[2u] = cbMtdParam._m0[14u].x;
    _188[2u] = cbMtdParam._m0[14u].y;
    _189[2u] = cbMtdParam._m0[14u].z;
    _187[3u] = cbMtdParam._m0[13u].x;
    _188[3u] = cbMtdParam._m0[13u].y;
    _189[3u] = cbMtdParam._m0[13u].z;
    _187[4u] = cbMtdParam._m0[12u].x;
    _188[4u] = cbMtdParam._m0[12u].y;
    _189[4u] = cbMtdParam._m0[12u].z;
    _187[5u] = cbMtdParam._m0[18u].x;
    _188[5u] = cbMtdParam._m0[18u].y;
    _189[5u] = cbMtdParam._m0[18u].z;
    float _396 = roundEven(_310);
    float _397 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    uint _399 = uint(int(isnan(5.0) ? _397 : (isnan(_397) ? 5.0 : min(_397, 5.0))));
    vec4 _429 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _440 = cbMtdParam._m0[9u].x * _429.x;
    float _441 = cbMtdParam._m0[9u].y * _429.y;
    float _442 = cbMtdParam._m0[9u].z * _429.z;
    float _449 = ((((((_187[_399] - cbMtdParam._m0[10u].x) * _307) + cbMtdParam._m0[10u].x) * _332.x) - _440) * _292) + _440;
    float _450 = ((((((_188[_399] - cbMtdParam._m0[10u].y) * _307) + cbMtdParam._m0[10u].y) * _332.y) - _441) * _292) + _441;
    float _451 = ((((((_189[_399] - cbMtdParam._m0[10u].z) * _307) + cbMtdParam._m0[10u].z) * _332.z) - _442) * _292) + _442;
    float _457 = exp2(log2(_277.w) * cbMtdParam._m0[22u].w);
    vec4 _470 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _490 = (((cbMtdParam._m0[16u].x * _470.x) - _449) * _457) + _449;
    float _491 = (((cbMtdParam._m0[16u].y * _470.y) - _450) * _457) + _450;
    float _492 = (((cbMtdParam._m0[16u].z * _470.z) - _451) * _457) + _451;
    vec4 _505 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _530 = (_249.x * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].x * _505.x) - _490) * _263) + _490);
    float _532 = (_249.y * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].y * _505.y) - _491) * _263) + _491);
    float _534 = (_249.z * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].z * _505.z) - _492) * _263) + _492);
    float _182[5];
    float _183[5];
    _182[0u] = cbMtdParam._m0[25u].w;
    _183[0u] = cbMtdParam._m0[26u].x;
    _182[1u] = cbMtdParam._m0[27u].w;
    _183[1u] = cbMtdParam._m0[28u].x;
    _182[2u] = cbMtdParam._m0[27u].y;
    _183[2u] = cbMtdParam._m0[27u].z;
    _182[3u] = cbMtdParam._m0[26u].w;
    _183[3u] = cbMtdParam._m0[27u].x;
    _182[4u] = cbMtdParam._m0[26u].y;
    _183[4u] = cbMtdParam._m0[26u].z;
    float _572 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    uint _574 = uint(int(isnan(4.0) ? _572 : (isnan(_572) ? 4.0 : min(_572, 4.0))));
    float _581 = ((_183[_574] - cbMtdParam._m0[21u].z) * _292) + cbMtdParam._m0[21u].z;
    float _584 = ((cbMtdParam._m0[21u].w - _581) * _457) + _581;
    float _587 = ((cbMtdParam._m0[24u].y - _584) * _263) + _584;
    vec4 _602 = texture(sampler2DArray(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w, _329));
    vec4 _619 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _621 = _619.x;
    float _622 = _619.y;
    float _627 = cbMtdParam._m0[21u].x + _619.z;
    float _630 = (((_602.z + _182[_574]) - _627) * _292) + _627;
    vec4 _643 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_1) + cbTextureTilingScale._m0[11u].w));
    float _654 = (((_643.z - _630) + cbMtdParam._m0[25u].y) * _457) + _630;
    float _660 = ((((_281 * 2.0) * _654) - _654) * cbMtdParam._m0[23u].w) + _654;
    vec4 _672 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_1) + cbTextureTilingScale._m0[12u].w));
    float _683 = (((cbMtdParam._m0[22u].z + _672.z) - _660) * _263) + _660;
    vec4 _702 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _719 = ((_602.x - _621) * _292) + _621;
    float _720 = ((_602.y - _622) * _292) + _622;
    float _725 = ((_643.x - _719) * _457) + _719;
    float _726 = ((_643.y - _720) * _457) + _720;
    float _735 = ((((_672.x - _725) * _263) + _725) * 2.0) + (-1.0);
    float _736 = ((((_672.y - _726) * _263) + _726) * 2.0) + (-1.0);
    float _737 = dot(vec2(_735, _736), vec2(_735, _736));
    float _3835 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _742 = sqrt(1.0 - (isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0))));
    float _745 = (cbMtdParam._m0[24u].z * ((_277.x * 2.0) + (-1.0))) + _735;
    float _746 = (cbMtdParam._m0[24u].z * ((_277.y * 2.0) + (-1.0))) + _736;
    float _748 = gl_FragCoord.x * 0.125;
    float _750 = gl_FragCoord.y * 0.125;
    float _761 = fma(_742, _224 * NORMAL.x, fma(_746, _231 * TANGENT.x, (_217 * _209) * _745));
    float _764 = fma(_742, _224 * NORMAL.y, fma(_746, _231 * TANGENT.y, (_217 * _210) * _745));
    float _767 = fma(_742, _224 * NORMAL.z, fma(_746, _231 * TANGENT.z, (_217 * _211) * _745));
    float _771 = inversesqrt(dot(vec3(_761, _764, _767), vec3(_761, _764, _767)));
    float _772 = _771 * _761;
    float _773 = _771 * _764;
    float _774 = _771 * _767;
    float _3846 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
    float _775 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
    float _3857 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _3868 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _3879 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _3890 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _779 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
    if (!(cbMtdParam._m0[24u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_748, _750)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _799 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _839 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _849 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _839);
    float _850 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _839);
    float _851 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _839);
    float _855 = inversesqrt(dot(vec3(_849, _850, _851), vec3(_849, _850, _851)));
    float _856 = _849 * _855;
    float _857 = _850 * _855;
    float _858 = _851 * _855;
    vec4 _860 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_748, _750));
    float _862 = _860.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1032 = sqrt(((_849 * _849) + (_850 * _850)) + (_851 * _851));
        float _1038 = (cbMatDynParam._m0[5u].x * _1032) + cbMatDynParam._m0[5u].y;
        float _3901 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1039 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
        float _1043 = (cbMatDynParam._m0[5u].z * _1032) + cbMatDynParam._m0[5u].w;
        float _3912 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0))) - _1039)) + _1039) < ((_862 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _873 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _874 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _892 = fma(_774, cbSceneParam._m0[5u].z, fma(_773, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _772));
    float _895 = fma(_774, cbSceneParam._m0[6u].z, fma(_773, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _772));
    float _898 = fma(_774, cbSceneParam._m0[7u].z, fma(_773, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _772));
    uint _911 = uint(roundEven(NORMAL.w)) * 13u;
    uint _912 = _911 + 9u;
    uint _913 = _912 + uint(cbMatDynParam._m0[0u].w);
    float _919 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0)))) * cbInstanceData._m0[_913].x;
    float _920 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0)))) * cbInstanceData._m0[_913].y;
    float _921 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0)))) * cbInstanceData._m0[_913].z;
    float _3923 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
    float _922 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
    float _3934 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
    float _923 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
    float _3945 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
    float _924 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
    float _925 = 1.0 - _779;
    float _926 = _922 * _925;
    float _927 = _923 * _925;
    float _928 = _924 * _925;
    float _933 = (_922 + (-0.039999999105930328369140625)) * _779;
    float _934 = (_923 + (-0.039999999105930328369140625)) * _779;
    float _935 = (_924 + (-0.039999999105930328369140625)) * _779;
    float _936 = _933 + 0.039999999105930328369140625;
    float _938 = _934 + 0.039999999105930328369140625;
    float _939 = _935 + 0.039999999105930328369140625;
    vec4 _948 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _873, cbSceneParam._m0[86u].y * _874));
    float _951 = _948.x * TEXCOORD_3.w;
    float _952 = dot(vec3(_772, _773, _774), vec3(_856, _857, _858));
    float _955 = _952 * 2.0;
    float _959 = (_955 * _772) - _856;
    float _960 = (_955 * _773) - _857;
    float _961 = (_955 * _774) - _858;
    float _965 = abs(dot(vec3(_856, _857, _858), vec3(_772, _773, _774)));
    float _3956 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
    float _967 = sqrt(_775);
    float _978 = exp2((_967 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_967 * 3.0));
    float _984 = (1.0 - _978) * ((_967 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _985 = _978 * _967;
    float _1013 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1017 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1021 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1349;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1074 = fma(_1021, cbModelParam._m0[26u].z, fma(_1017, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1013));
        float _1078 = fma(_1021, cbModelParam._m0[27u].z, fma(_1017, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1013));
        float _1082 = fma(_1021, cbModelParam._m0[28u].z, fma(_1017, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1013));
        float _1107 = _1013 + _772;
        float _1108 = _1017 + _773;
        float _1109 = _1021 + _774;
        float _1119 = fma(_1109, cbModelParam._m0[26u].z, fma(_1108, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1107)) - _1074;
        float _1120 = fma(_1109, cbModelParam._m0[27u].z, fma(_1108, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1107)) - _1078;
        float _1121 = fma(_1109, cbModelParam._m0[28u].z, fma(_1108, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1107)) - _1082;
        float _1125 = inversesqrt(dot(vec3(_1119, _1120, _1121), vec3(_1119, _1120, _1121)));
        float _1138 = ((_1125 * _1119) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1074 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1139 = ((_1125 * _1120) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1078 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1140 = ((_1125 * _1121) / cbModelParam._m0[34u].z) + ((((((_1082 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1143 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1138, _1139, _1140), 0.0);
        vec4 _1150 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1138, _1139, _1140), 0.0);
        vec4 _1157 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1138, _1139, _1140), 0.0);
        vec4 _1164 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1138, _1139, _1140), 0.0);
        float _1177 = exp2((_1143.w + (-0.5)) * 20.0) * 2.0;
        float _1178 = _1177 * (_1143.x + (-0.5));
        float _1179 = _1177 * (_1143.y + (-0.5));
        float _1180 = _1177 * (_1143.z + (-0.5));
        float _1187 = exp2((_1150.w + (-0.5)) * 20.0) * 2.0;
        float _1188 = _1187 * (_1150.x + (-0.5));
        float _1189 = _1187 * (_1150.y + (-0.5));
        float _1190 = _1187 * (_1150.z + (-0.5));
        float _1197 = exp2((_1157.w + (-0.5)) * 20.0) * 2.0;
        float _1198 = _1197 * (_1157.x + (-0.5));
        float _1199 = _1197 * (_1157.y + (-0.5));
        float _1200 = _1197 * (_1157.z + (-0.5));
        float _1207 = exp2((_1164.w + (-0.5)) * 20.0) * 2.0;
        float _1208 = _1207 * (_1164.x + (-0.5));
        float _1209 = _1207 * (_1164.y + (-0.5));
        float _1210 = _1207 * (_1164.z + (-0.5));
        float _1211 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1212 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1213 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1214 = _1178 * 0.5;
        float _1215 = _1188 * 0.5;
        float _1216 = _1198 * 0.5;
        float _1217 = dot(vec3(_1214, _1215, _1216), vec3(_1214, _1215, _1216));
        float _1222 = (_1217 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1217);
        float _1231 = (dot(vec3(_772, _773, _774), vec3(_1222 * _1214, _1222 * _1215, _1222 * _1216)) + 1.0) * 0.5;
        float _3982 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1241 = sqrt(((_1215 * _1215) + (_1214 * _1214)) + (_1216 * _1216)) / (_1211 + 9.9999997473787516355514526367188e-06);
        float _3993 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1242 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
        float _1243 = _1242 * 2.0;
        float _1247 = (1.0 - _1242) / (_1242 + 1.0);
        float _4004 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1248 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
        float _1257 = ((((1.0 - _1248) * (_1243 + 2.0)) * exp2(log2(isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0))) * (_1243 + 1.0))) + _1248) * _1211;
        float _1258 = _1179 * 0.5;
        float _1259 = _1189 * 0.5;
        float _1260 = _1199 * 0.5;
        float _1261 = dot(vec3(_1258, _1259, _1260), vec3(_1258, _1259, _1260));
        float _1266 = (_1261 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1261);
        float _1274 = (dot(vec3(_772, _773, _774), vec3(_1266 * _1258, _1266 * _1259, _1266 * _1260)) + 1.0) * 0.5;
        float _4015 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1283 = sqrt(((_1259 * _1259) + (_1258 * _1258)) + (_1260 * _1260)) / (_1212 + 9.9999997473787516355514526367188e-06);
        float _4026 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1284 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
        float _1285 = _1284 * 2.0;
        float _1289 = (1.0 - _1284) / (_1284 + 1.0);
        float _4037 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1290 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
        float _1299 = ((((1.0 - _1290) * (_1285 + 2.0)) * exp2(log2(isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0))) * (_1285 + 1.0))) + _1290) * _1212;
        float _1300 = _1180 * 0.5;
        float _1301 = _1190 * 0.5;
        float _1302 = _1200 * 0.5;
        float _1303 = dot(vec3(_1300, _1301, _1302), vec3(_1300, _1301, _1302));
        float _1308 = (_1303 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1303);
        float _1316 = (dot(vec3(_772, _773, _774), vec3(_1308 * _1300, _1308 * _1301, _1308 * _1302)) + 1.0) * 0.5;
        float _4048 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1325 = sqrt(((_1301 * _1301) + (_1300 * _1300)) + (_1302 * _1302)) / (_1213 + 9.9999997473787516355514526367188e-06);
        float _4059 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1326 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
        float _1327 = _1326 * 2.0;
        float _1331 = (1.0 - _1326) / (_1326 + 1.0);
        float _4070 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1332 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _1341 = ((((1.0 - _1332) * (_1327 + 2.0)) * exp2(log2(isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0))) * (_1327 + 1.0))) + _1332) * _1213;
        _1349 = _1180;
        _1351 = _1179;
        _1352 = _1178;
        _1353 = _1190;
        _1354 = _1189;
        _1355 = _1188;
        _1356 = _1200;
        _1357 = _1199;
        _1358 = _1198;
        _1359 = _1213;
        _1360 = _1212;
        _1361 = _1211;
        _1362 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0)));
        _1363 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0)));
        _1364 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0)));
    }
    else
    {
        _1349 = _1350;
        _1351 = _1350;
        _1352 = _1350;
        _1353 = _1350;
        _1354 = _1350;
        _1355 = _1350;
        _1356 = _1350;
        _1357 = _1350;
        _1358 = _1350;
        _1359 = _1350;
        _1360 = _1350;
        _1361 = _1350;
        _1362 = 0.0;
        _1363 = 0.0;
        _1364 = 0.0;
    }
    float _1659;
    float _1660;
    float _1661;
    float _1662;
    float _1663;
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    float _1668;
    float _1669;
    float _1670;
    float _1671;
    float _1672;
    float _1673;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1390 = fma(_1021, cbModelParam._m0[30u].z, fma(_1017, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1013));
        float _1394 = fma(_1021, cbModelParam._m0[31u].z, fma(_1017, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1013));
        float _1398 = fma(_1021, cbModelParam._m0[32u].z, fma(_1017, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1013));
        float _1421 = _1013 + _772;
        float _1422 = _1017 + _773;
        float _1423 = _1021 + _774;
        float _1433 = fma(_1423, cbModelParam._m0[30u].z, fma(_1422, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1421)) - _1390;
        float _1434 = fma(_1423, cbModelParam._m0[31u].z, fma(_1422, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1421)) - _1394;
        float _1435 = fma(_1423, cbModelParam._m0[32u].z, fma(_1422, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1421)) - _1398;
        float _1439 = inversesqrt(dot(vec3(_1433, _1434, _1435), vec3(_1433, _1434, _1435)));
        float _1452 = ((_1439 * _1433) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1390 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1453 = ((_1439 * _1434) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1394 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1454 = ((_1439 * _1435) / cbModelParam._m0[35u].z) + ((((((_1398 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1456 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1452, _1453, _1454), 0.0);
        vec4 _1463 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1452, _1453, _1454), 0.0);
        vec4 _1470 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1452, _1453, _1454), 0.0);
        vec4 _1477 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1452, _1453, _1454), 0.0);
        float _1489 = exp2((_1456.w + (-0.5)) * 20.0) * 2.0;
        float _1490 = _1489 * (_1456.x + (-0.5));
        float _1491 = _1489 * (_1456.y + (-0.5));
        float _1492 = _1489 * (_1456.z + (-0.5));
        float _1499 = exp2((_1463.w + (-0.5)) * 20.0) * 2.0;
        float _1500 = _1499 * (_1463.x + (-0.5));
        float _1501 = _1499 * (_1463.y + (-0.5));
        float _1502 = _1499 * (_1463.z + (-0.5));
        float _1509 = exp2((_1470.w + (-0.5)) * 20.0) * 2.0;
        float _1510 = _1509 * (_1470.x + (-0.5));
        float _1511 = _1509 * (_1470.y + (-0.5));
        float _1512 = _1509 * (_1470.z + (-0.5));
        float _1519 = exp2((_1477.w + (-0.5)) * 20.0) * 2.0;
        float _1520 = _1519 * (_1477.x + (-0.5));
        float _1521 = _1519 * (_1477.y + (-0.5));
        float _1522 = _1519 * (_1477.z + (-0.5));
        float _1523 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1524 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1525 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1526 = _1490 * 0.5;
        float _1527 = _1500 * 0.5;
        float _1528 = _1510 * 0.5;
        float _1529 = dot(vec3(_1526, _1527, _1528), vec3(_1526, _1527, _1528));
        float _1534 = (_1529 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1529);
        float _1542 = (dot(vec3(_772, _773, _774), vec3(_1534 * _1526, _1534 * _1527, _1534 * _1528)) + 1.0) * 0.5;
        float _4111 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1551 = sqrt(((_1527 * _1527) + (_1526 * _1526)) + (_1528 * _1528)) / (_1523 + 9.9999997473787516355514526367188e-06);
        float _4122 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1552 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
        float _1553 = _1552 * 2.0;
        float _1557 = (1.0 - _1552) / (_1552 + 1.0);
        float _4133 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1558 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
        float _1567 = ((((1.0 - _1558) * (_1553 + 2.0)) * exp2(log2(isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0))) * (_1553 + 1.0))) + _1558) * _1523;
        float _1568 = _1491 * 0.5;
        float _1569 = _1501 * 0.5;
        float _1570 = _1511 * 0.5;
        float _1571 = dot(vec3(_1568, _1569, _1570), vec3(_1568, _1569, _1570));
        float _1576 = (_1571 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1571);
        float _1584 = (dot(vec3(_772, _773, _774), vec3(_1576 * _1568, _1576 * _1569, _1576 * _1570)) + 1.0) * 0.5;
        float _4144 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1593 = sqrt(((_1569 * _1569) + (_1568 * _1568)) + (_1570 * _1570)) / (_1524 + 9.9999997473787516355514526367188e-06);
        float _4155 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
        float _1594 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _1595 = _1594 * 2.0;
        float _1599 = (1.0 - _1594) / (_1594 + 1.0);
        float _4166 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
        float _1600 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
        float _1609 = ((((1.0 - _1600) * (_1595 + 2.0)) * exp2(log2(isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0))) * (_1595 + 1.0))) + _1600) * _1524;
        float _1610 = _1492 * 0.5;
        float _1611 = _1502 * 0.5;
        float _1612 = _1512 * 0.5;
        float _1613 = dot(vec3(_1610, _1611, _1612), vec3(_1610, _1611, _1612));
        float _1618 = (_1613 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1613);
        float _1626 = (dot(vec3(_772, _773, _774), vec3(_1618 * _1610, _1618 * _1611, _1618 * _1612)) + 1.0) * 0.5;
        float _4177 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
        float _1635 = sqrt(((_1611 * _1611) + (_1610 * _1610)) + (_1612 * _1612)) / (_1525 + 9.9999997473787516355514526367188e-06);
        float _4188 = isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0));
        float _1636 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _1637 = _1636 * 2.0;
        float _1641 = (1.0 - _1636) / (_1636 + 1.0);
        float _4199 = isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0));
        float _1642 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _1651 = ((((1.0 - _1642) * (_1637 + 2.0)) * exp2(log2(isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0))) * (_1637 + 1.0))) + _1642) * _1525;
        _1659 = _1492;
        _1660 = _1491;
        _1661 = _1490;
        _1662 = _1502;
        _1663 = _1501;
        _1664 = _1500;
        _1665 = _1512;
        _1666 = _1511;
        _1667 = _1510;
        _1668 = _1525;
        _1669 = _1524;
        _1670 = _1523;
        _1671 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0)));
        _1672 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0)));
        _1673 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0)));
    }
    else
    {
        _1659 = _1350;
        _1660 = _1350;
        _1661 = _1350;
        _1662 = _1350;
        _1663 = _1350;
        _1664 = _1350;
        _1665 = _1350;
        _1666 = _1350;
        _1667 = _1350;
        _1668 = _1350;
        _1669 = _1350;
        _1670 = _1350;
        _1671 = 0.0;
        _1672 = 0.0;
        _1673 = 0.0;
    }
    float _1683 = (cbModelParam._m0[1u].x * (_1671 - _1362)) + _1362;
    float _1684 = (cbModelParam._m0[1u].x * (_1672 - _1363)) + _1363;
    float _1685 = (cbModelParam._m0[1u].x * (_1673 - _1364)) + _1364;
    float _1706 = fma(_1685, cbSceneParam._m0[89u].z, fma(_1684, cbSceneParam._m0[89u].y, _1683 * cbSceneParam._m0[89u].x));
    float _1709 = fma(_1685, cbSceneParam._m0[90u].z, fma(_1684, cbSceneParam._m0[90u].y, _1683 * cbSceneParam._m0[90u].x));
    float _1712 = fma(_1685, cbSceneParam._m0[91u].z, fma(_1684, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1683));
    float _1727 = _959 * 0.5;
    float _1728 = _960 * 0.5;
    float _1729 = _961 * 0.5;
    float _1730 = dot(vec4(_1727, _1728, _1729, 1.0), vec4(_1661, _1664, _1667, _1670));
    float _1733 = dot(vec4(_1727, _1728, _1729, 1.0), vec4(_1660, _1663, _1666, _1669));
    float _1736 = dot(vec4(_1727, _1728, _1729, 1.0), vec4(_1659, _1662, _1665, _1668));
    float _1770;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1743 = dot(vec4(_1727, _1728, _1729, 1.0), vec4(_1349, _1353, _1356, _1359));
        float _1747 = dot(vec4(_1727, _1728, _1729, 1.0), vec4(_1351, _1354, _1357, _1360));
        float _1751 = dot(vec4(_1727, _1728, _1729, 1.0), vec4(_1352, _1355, _1358, _1361));
        float _1758 = dot(vec4(cbModelParam._m0[39u]), vec4(_1727, _1728, _1729, 1.0));
        _1770 = dot(vec3(isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0)), isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0)), isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1758) ? 0.0 : (isnan(0.0) ? _1758 : max(0.0, _1758))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1770 = 1.0;
    }
    float _1781;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1772 = dot(vec4(cbModelParam._m0[40u]), vec4(_1727, _1728, _1729, 1.0));
        _1781 = dot(vec3(isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0)), isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0)), isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1772) ? 0.0 : (isnan(0.0) ? _1772 : max(0.0, _1772))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1781 = 1.0;
    }
    float _1785 = (_1781 * cbModelParam._m0[1u].x) + (_1770 * (1.0 - cbModelParam._m0[1u].x));
    float _1795 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _775);
    float _1796 = isnan(_1795) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1795 : min(cbModelParam._m0[25u].z, _1795));
    float _1876;
    float _1878;
    float _1880;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1843 = fma(_1021, cbModelParam._m0[13u].z, fma(_1017, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1013)) + cbModelParam._m0[13u].w;
        float _1847 = fma(_1021, cbModelParam._m0[14u].z, fma(_1017, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1013)) + cbModelParam._m0[14u].w;
        float _1851 = fma(_1021, cbModelParam._m0[15u].z, fma(_1017, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1013)) + cbModelParam._m0[15u].w;
        float _1854 = fma(_961, cbModelParam._m0[13u].z, fma(_960, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _959));
        float _1857 = fma(_961, cbModelParam._m0[14u].z, fma(_960, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _959));
        float _1860 = fma(_961, cbModelParam._m0[15u].z, fma(_960, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _959));
        float _1888;
        if (_1854 > 0.0)
        {
            _1888 = abs((1.0 - _1843) / _1854);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1854 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1843 + 1.0) / _1854);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1888 = frontier_phi_19_17_ladder;
        }
        float _2090;
        if (_1857 > 0.0)
        {
            _2090 = abs((1.0 - _1847) / _1857);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1857 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1847 + 1.0) / _1857);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2090 = frontier_phi_28_24_ladder;
        }
        float _2344;
        if (_1860 > 0.0)
        {
            _2344 = abs((1.0 - _1851) / _1860);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1860 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1851 + 1.0) / _1860);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2344 = frontier_phi_40_35_ladder;
        }
        float _2346 = isnan(_2090) ? _1888 : (isnan(_1888) ? _2090 : min(_1888, _2090));
        float _2347 = isnan(_2344) ? _2346 : (isnan(_2346) ? _2344 : min(_2346, _2344));
        float _2351 = (_2347 * _1854) + _1843;
        float _2352 = (_2347 * _1857) + _1847;
        float _2353 = (_2347 * _1860) + _1851;
        float _2354 = _2347 * 9.9999997473787516355514526367188e-05;
        float _2356 = (-1.0) - _2354;
        float _2358 = _2354 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2353 > _2358) || ((_2353 < _2356) || ((_2352 > _2358) || ((_2352 < _2356) || ((_2351 < _2356) || (_2351 > _2358))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2481 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2353, cbModelParam._m0[9u].z, fma(_2352, cbModelParam._m0[9u].y, _2351 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2353, cbModelParam._m0[10u].z, fma(_2352, cbModelParam._m0[10u].y, _2351 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2353, cbModelParam._m0[11u].z, fma(_2352, cbModelParam._m0[11u].y, _2351 * cbModelParam._m0[11u].x))), _1796);
            frontier_phi_18_40_ladder = _2481.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2481.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2481.x * cbModelParam._m0[1u].y;
        }
        _1876 = frontier_phi_18_40_ladder_2;
        _1878 = frontier_phi_18_40_ladder_1;
        _1880 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1864 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_959, _960, _961), _1796);
        _1876 = _1864.x * cbModelParam._m0[1u].y;
        _1878 = _1864.y * cbModelParam._m0[1u].y;
        _1880 = _1864.z * cbModelParam._m0[1u].y;
    }
    float _1884 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _775);
    float _1885 = isnan(_1884) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1884 : min(cbModelParam._m0[25u].w, _1884));
    float _1974;
    float _1976;
    float _1978;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1938 = fma(_1021, cbModelParam._m0[21u].z, fma(_1017, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1013)) + cbModelParam._m0[21u].w;
        float _1942 = fma(_1021, cbModelParam._m0[22u].z, fma(_1017, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1013)) + cbModelParam._m0[22u].w;
        float _1946 = fma(_1021, cbModelParam._m0[23u].z, fma(_1017, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1013)) + cbModelParam._m0[23u].w;
        float _1949 = fma(_961, cbModelParam._m0[21u].z, fma(_960, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _959));
        float _1952 = fma(_961, cbModelParam._m0[22u].z, fma(_960, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _959));
        float _1955 = fma(_961, cbModelParam._m0[23u].z, fma(_960, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _959));
        float _2095;
        if (_1949 > 0.0)
        {
            _2095 = abs((1.0 - _1938) / _1949);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1949 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1938 + 1.0) / _1949);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2095 = frontier_phi_30_26_ladder;
        }
        float _2371;
        if (_1952 > 0.0)
        {
            _2371 = abs((1.0 - _1942) / _1952);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1952 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1942 + 1.0) / _1952);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2371 = frontier_phi_42_37_ladder;
        }
        float _2584;
        if (_1955 > 0.0)
        {
            _2584 = abs((1.0 - _1946) / _1955);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1955 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1946 + 1.0) / _1955);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2584 = frontier_phi_51_48_ladder;
        }
        float _2586 = isnan(_2371) ? _2095 : (isnan(_2095) ? _2371 : min(_2095, _2371));
        float _2587 = isnan(_2584) ? _2586 : (isnan(_2586) ? _2584 : min(_2586, _2584));
        float _2591 = (_2587 * _1949) + _1938;
        float _2592 = (_2587 * _1952) + _1942;
        float _2593 = (_2587 * _1955) + _1946;
        float _2594 = _2587 * 9.9999997473787516355514526367188e-05;
        float _2595 = (-1.0) - _2594;
        float _2597 = _2594 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2593 > _2597) || ((_2593 < _2595) || ((_2592 > _2597) || ((_2592 < _2595) || ((_2591 < _2595) || (_2591 > _2597))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2827 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2593, cbModelParam._m0[17u].z, fma(_2592, cbModelParam._m0[17u].y, _2591 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2593, cbModelParam._m0[18u].z, fma(_2592, cbModelParam._m0[18u].y, _2591 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2593, cbModelParam._m0[19u].z, fma(_2592, cbModelParam._m0[19u].y, _2591 * cbModelParam._m0[19u].x))), _1885);
            frontier_phi_27_51_ladder = _2827.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2827.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2827.x * cbModelParam._m0[1u].z;
        }
        _1974 = frontier_phi_27_51_ladder_2;
        _1976 = frontier_phi_27_51_ladder_1;
        _1978 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1958 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_959, _960, _961), _1885);
        _1974 = _1958.x * cbModelParam._m0[1u].z;
        _1976 = _1958.y * cbModelParam._m0[1u].z;
        _1978 = _1958.z * cbModelParam._m0[1u].z;
    }
    float _1991 = (((_984 * _936) + _985) * _951) * ((cbModelParam._m0[1u].w * (_1974 - _1876)) + _1876);
    float _1993 = (((_984 * _938) + _985) * _951) * ((cbModelParam._m0[1u].w * (_1976 - _1878)) + _1878);
    float _1995 = (((_984 * _939) + _985) * _951) * ((cbModelParam._m0[1u].w * (_1978 - _1880)) + _1880);
    float _1998 = fma(_1995, cbSceneParam._m0[89u].z, fma(_1993, cbSceneParam._m0[89u].y, _1991 * cbSceneParam._m0[89u].x));
    float _2001 = fma(_1995, cbSceneParam._m0[90u].z, fma(_1993, cbSceneParam._m0[90u].y, _1991 * cbSceneParam._m0[90u].x));
    float _2004 = fma(_1995, cbSceneParam._m0[91u].z, fma(_1993, cbSceneParam._m0[91u].y, _1991 * cbSceneParam._m0[91u].x));
    uvec4 _2014 = floatBitsToUint(cbInstanceData._m0[_911 + 5u]);
    uint _2016 = _2014.x * 14u;
    uint _2017 = _2016 + 13u;
    float _2024 = _951 + (-1.0);
    float _2029 = (cbLight._m0[_2017].x * _2024) + 1.0;
    float _2030 = (cbLight._m0[_2017].y * _2024) + 1.0;
    float _2031 = (cbLight._m0[_2017].z * _2024) + 1.0;
    float _2032 = (cbLight._m0[_2017].w * _2024) + 1.0;
    uint _2033 = _2016 + 5u;
    float _2039 = isnan(1.0) ? _2030 : (isnan(_2030) ? 1.0 : min(_2030, 1.0));
    uint _2043 = _2016 + 4u;
    float _2049 = isnan(1.0) ? _2029 : (isnan(_2029) ? 1.0 : min(_2029, 1.0));
    uint _2053 = _2016 | 1u;
    float _2064 = dot(vec3(cbLight._m0[_2016].xyz), vec3(_772, _773, _774));
    float _2067 = dot(vec3(cbLight._m0[_2053].xyz), vec3(_772, _773, _774));
    float _4335 = isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0));
    float _4346 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
    float _2072 = (isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0))) * 0.3183098733425140380859375;
    float _2074 = (isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0))) * 0.3183098733425140380859375;
    float _2081 = ((cbLight._m0[_2033].x * _2039) * _2074) + ((cbLight._m0[_2043].x * _2049) * _2072);
    float _2082 = ((_2039 * cbLight._m0[_2033].y) * _2074) + ((_2049 * cbLight._m0[_2043].y) * _2072);
    float _2083 = ((_2039 * cbLight._m0[_2033].z) * _2074) + ((_2049 * cbLight._m0[_2043].z) * _2072);
    uvec4 _2087 = floatBitsToUint(cbLight._m0[_2016 + 12u]);
    bool _2089 = _2087.x == 0u;
    float _2100;
    float _2102;
    float _2104;
    if (_2089)
    {
        _2100 = _2081;
        _2102 = _2082;
        _2104 = _2083;
    }
    else
    {
        uint _2108 = _2016 + 6u;
        float _2124 = (dot(vec3(cbLight._m0[_2016 + 2u].xyz), vec3(_772, _773, _774)) * 0.5) + 0.5;
        float _2125 = _2124 * _2124;
        float _4357 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
        float _2126 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
        float _2127 = isnan(1.0) ? _2031 : (isnan(_2031) ? 1.0 : min(_2031, 1.0));
        _2100 = (((cbLight._m0[_2108].x * 0.3183098733425140380859375) * _2126) * _2127) + _2081;
        _2102 = (((cbLight._m0[_2108].y * 0.3183098733425140380859375) * _2126) * _2127) + _2082;
        _2104 = (((cbLight._m0[_2108].z * 0.3183098733425140380859375) * _2126) * _2127) + _2083;
    }
    bool _2107 = _2087.y == 0u;
    float _2145;
    float _2147;
    float _2149;
    if (_2107)
    {
        _2145 = _2100;
        _2147 = _2102;
        _2149 = _2104;
    }
    else
    {
        uint _2315 = _2016 + 7u;
        float _2331 = (dot(vec3(cbLight._m0[_2016 + 3u].xyz), vec3(_772, _773, _774)) * 0.5) + 0.5;
        float _2332 = _2331 * _2331;
        float _4373 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
        float _2333 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
        float _2334 = isnan(1.0) ? _2032 : (isnan(_2032) ? 1.0 : min(_2032, 1.0));
        _2145 = (((cbLight._m0[_2315].x * 0.3183098733425140380859375) * _2333) * _2334) + _2100;
        _2147 = (((cbLight._m0[_2315].y * 0.3183098733425140380859375) * _2333) * _2334) + _2102;
        _2149 = (((cbLight._m0[_2315].z * 0.3183098733425140380859375) * _2333) * _2334) + _2104;
    }
    uint _2152 = _2016 + 8u;
    float _2165 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2016].w)) * _775) * 0.949999988079071044921875);
    float _2166 = _2165 * _2165;
    float _2167 = cbLight._m0[_2016].x + _856;
    float _2168 = cbLight._m0[_2016].y + _857;
    float _2169 = cbLight._m0[_2016].z + _858;
    float _2173 = inversesqrt(dot(vec3(_2167, _2168, _2169), vec3(_2167, _2168, _2169)));
    float _2174 = _2173 * _2167;
    float _2175 = _2173 * _2168;
    float _2176 = _2173 * _2169;
    float _2177 = dot(vec3(_772, _773, _774), vec3(cbLight._m0[_2016].xyz));
    float _4389 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
    float _2180 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
    float _4400 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
    float _2181 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
    float _2182 = dot(vec3(_772, _773, _774), vec3(_2174, _2175, _2176));
    float _4411 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
    float _2185 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
    float _2186 = dot(vec3(cbLight._m0[_2016].xyz), vec3(_2174, _2175, _2176));
    float _4422 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
    float _2190 = _2166 * _2166;
    float _2194 = ((_2185 * _2185) * (_2190 + (-1.0))) + 1.0;
    float _2202 = exp2(log2(1.0 - (isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0)))) * 5.0);
    float _2203 = 0.959999978542327880859375 - _933;
    float _2205 = 0.959999978542327880859375 - _934;
    float _2206 = 0.959999978542327880859375 - _935;
    float _2213 = 1.0 - _2166;
    float _2224 = (0.5 / (((_2181 * ((_2180 * _2213) + _2166)) + 9.9999999392252902907785028219223e-09) + (((_2181 * _2213) + _2166) * _2180))) * _2180;
    float _4433 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
    float _2226 = (isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0))) * (_2190 / ((_2194 * _2194) * 3.141590118408203125));
    uint _2237 = _2016 + 9u;
    float _2248 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2053].w)) * _775) * 0.949999988079071044921875);
    float _2249 = _2248 * _2248;
    float _2250 = cbLight._m0[_2053].x + _856;
    float _2251 = cbLight._m0[_2053].y + _857;
    float _2252 = cbLight._m0[_2053].z + _858;
    float _2256 = inversesqrt(dot(vec3(_2250, _2251, _2252), vec3(_2250, _2251, _2252)));
    float _2257 = _2256 * _2250;
    float _2258 = _2256 * _2251;
    float _2259 = _2256 * _2252;
    float _2260 = dot(vec3(_772, _773, _774), vec3(cbLight._m0[_2053].xyz));
    float _4444 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
    float _2263 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
    float _2264 = dot(vec3(_772, _773, _774), vec3(_2257, _2258, _2259));
    float _4455 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
    float _2267 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
    float _2268 = dot(vec3(cbLight._m0[_2053].xyz), vec3(_2257, _2258, _2259));
    float _4466 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
    float _2272 = _2249 * _2249;
    float _2276 = ((_2267 * _2267) * (_2272 + (-1.0))) + 1.0;
    float _2283 = exp2(log2(1.0 - (isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0)))) * 5.0);
    float _2290 = 1.0 - _2249;
    float _2300 = (0.5 / (((_2181 * ((_2263 * _2290) + _2249)) + 9.9999999392252902907785028219223e-09) + (((_2181 * _2290) + _2249) * _2263))) * _2263;
    float _4477 = isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0));
    float _2302 = (isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0))) * (_2272 / ((_2276 * _2276) * 3.141590118408203125));
    float _2312 = (((((_2283 * _2203) + _936) * cbLight._m0[_2237].x) * _2302) * _2039) + (((((_2202 * _2203) + _936) * cbLight._m0[_2152].x) * _2226) * _2049);
    float _2313 = (((((_2283 * _2205) + _938) * cbLight._m0[_2237].y) * _2302) * _2039) + (((((_2202 * _2205) + _938) * cbLight._m0[_2152].y) * _2226) * _2049);
    float _2314 = (((((_2283 * _2206) + _939) * cbLight._m0[_2237].z) * _2302) * _2039) + (((((_2202 * _2206) + _939) * cbLight._m0[_2152].z) * _2226) * _2049);
    float _2376;
    float _2378;
    float _2380;
    if (_2089)
    {
        _2376 = _2312;
        _2378 = _2313;
        _2380 = _2314;
    }
    else
    {
        uint _2382 = _2016 + 2u;
        uint _2386 = _2016 + 10u;
        float _2400 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2382].w)) * _775) * 0.949999988079071044921875);
        float _2401 = _2400 * _2400;
        float _2402 = cbLight._m0[_2382].x + _856;
        float _2403 = cbLight._m0[_2382].y + _857;
        float _2404 = cbLight._m0[_2382].z + _858;
        float _2408 = inversesqrt(dot(vec3(_2402, _2403, _2404), vec3(_2402, _2403, _2404)));
        float _2409 = _2408 * _2402;
        float _2410 = _2408 * _2403;
        float _2411 = _2408 * _2404;
        float _2412 = dot(vec3(_772, _773, _774), vec3(cbLight._m0[_2382].xyz));
        float _4488 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
        float _2415 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
        float _2416 = dot(vec3(_772, _773, _774), vec3(_2409, _2410, _2411));
        float _4499 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
        float _2419 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
        float _2420 = dot(vec3(cbLight._m0[_2382].xyz), vec3(_2409, _2410, _2411));
        float _4510 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
        float _2424 = _2401 * _2401;
        float _2428 = ((_2419 * _2419) * (_2424 + (-1.0))) + 1.0;
        float _2435 = exp2(log2(1.0 - (isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0)))) * 5.0);
        float _2442 = 1.0 - _2401;
        float _2452 = (0.5 / (((_2181 * ((_2415 * _2442) + _2401)) + 9.9999999392252902907785028219223e-09) + (((_2181 * _2442) + _2401) * _2415))) * _2415;
        float _4521 = isnan(0.0) ? _2452 : (isnan(_2452) ? 0.0 : max(_2452, 0.0));
        float _2454 = (isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0))) * (_2424 / ((_2428 * _2428) * 3.141590118408203125));
        float _2455 = isnan(1.0) ? _2031 : (isnan(_2031) ? 1.0 : min(_2031, 1.0));
        _2376 = (((((_2435 * _2203) + _936) * cbLight._m0[_2386].x) * _2454) * _2455) + _2312;
        _2378 = (((((_2435 * _2205) + _938) * cbLight._m0[_2386].y) * _2454) * _2455) + _2313;
        _2380 = (((((_2435 * _2206) + _939) * cbLight._m0[_2386].z) * _2454) * _2455) + _2314;
    }
    float _2490;
    float _2492;
    float _2494;
    if (_2107)
    {
        _2490 = _2376;
        _2492 = _2378;
        _2494 = _2380;
    }
    else
    {
        uint _2501 = _2016 + 3u;
        uint _2505 = _2016 + 11u;
        float _2519 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2501].w)) * _775) * 0.949999988079071044921875);
        float _2520 = _2519 * _2519;
        float _2521 = cbLight._m0[_2501].x + _856;
        float _2522 = cbLight._m0[_2501].y + _857;
        float _2523 = cbLight._m0[_2501].z + _858;
        float _2527 = inversesqrt(dot(vec3(_2521, _2522, _2523), vec3(_2521, _2522, _2523)));
        float _2528 = _2527 * _2521;
        float _2529 = _2527 * _2522;
        float _2530 = _2527 * _2523;
        float _2531 = dot(vec3(_772, _773, _774), vec3(cbLight._m0[_2501].xyz));
        float _4537 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0));
        float _2534 = isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0));
        float _2535 = dot(vec3(_772, _773, _774), vec3(_2528, _2529, _2530));
        float _4548 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
        float _2538 = isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0));
        float _2539 = dot(vec3(cbLight._m0[_2501].xyz), vec3(_2528, _2529, _2530));
        float _4559 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0));
        float _2543 = _2520 * _2520;
        float _2547 = ((_2538 * _2538) * (_2543 + (-1.0))) + 1.0;
        float _2554 = exp2(log2(1.0 - (isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0)))) * 5.0);
        float _2561 = 1.0 - _2520;
        float _2571 = (0.5 / (((_2181 * ((_2534 * _2561) + _2520)) + 9.9999999392252902907785028219223e-09) + (((_2181 * _2561) + _2520) * _2534))) * _2534;
        float _4570 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0));
        float _2573 = (isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0))) * (_2543 / ((_2547 * _2547) * 3.141590118408203125));
        float _2574 = isnan(1.0) ? _2032 : (isnan(_2032) ? 1.0 : min(_2032, 1.0));
        _2490 = (((((_2554 * _2203) + _936) * cbLight._m0[_2505].x) * _2573) * _2574) + _2376;
        _2492 = (((((_2554 * _2205) + _938) * cbLight._m0[_2505].y) * _2573) * _2574) + _2378;
        _2494 = (((((_2554 * _2206) + _939) * cbLight._m0[_2505].z) * _2573) * _2574) + _2380;
    }
    float _2709;
    float _2711;
    float _2713;
    float _2715;
    float _2717;
    float _2719;
    if (_2014.y == 0u)
    {
        float _2649 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2650 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2649;
        float _2651 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2649;
        float _2652 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2649;
        uvec4 _2664 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2665 = _2664.x;
        uint _2676 = uint((float(_2664.y) * floor(float(uint(cbSceneParam._m0[85u].y * _874) / _2665))) + floor(float(uint(cbSceneParam._m0[85u].x * _873) / _2665)));
        float _2686 = (log2(_2652 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2687 = isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0));
        uint _2690 = uint(isnan(14.0) ? _2687 : (isnan(_2687) ? 14.0 : min(_2687, 14.0)));
        uvec4 _2695 = texelFetch(g_lightClusterGridBuffer, int(((_2690 << 2u) + (_2676 << 6u)) >> 2u));
        uint _2696 = _2695.x;
        uint _2697 = _2664.z;
        float _2832;
        float _2834;
        float _2836;
        float _2838;
        float _2840;
        float _2842;
        if (((((1u << ((_2697 >> 4u) & 15u)) + 4294967295u) & _2696) == 0u) || ((_2697 & 240u) == 0u))
        {
            _2832 = 0.0;
            _2834 = 0.0;
            _2836 = 0.0;
            _2838 = 0.0;
            _2840 = 0.0;
            _2842 = 0.0;
        }
        else
        {
            float _2833;
            float _2835;
            float _2837;
            float _2839;
            float _2841;
            float _2843;
            float _2994 = 0.0;
            float _2995 = 0.0;
            float _2996 = 0.0;
            float _2997 = 0.0;
            float _2998 = 0.0;
            float _2999 = 0.0;
            uint _3000 = 0u;
            uint _3009;
            bool _3010;
            for (;;)
            {
                _3009 = texelFetch(g_lightClassification, int((((_2690 << 5u) + (_2676 << 9u)) + (_3000 << 2u)) >> 2u)).x;
                _3010 = _3009 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3010)
                {
                    frontier_phi_68_pred = _2994;
                    frontier_phi_68_pred_1 = _2999;
                    frontier_phi_68_pred_2 = _2998;
                    frontier_phi_68_pred_3 = _2997;
                    frontier_phi_68_pred_4 = _2996;
                    frontier_phi_68_pred_5 = _2995;
                }
                else
                {
                    float _3139;
                    float _3140;
                    float _3141;
                    float _3142;
                    float _3143;
                    float _3144;
                    uint _3145;
                    _3139 = _2994;
                    _3140 = _2995;
                    _3141 = _2996;
                    _3142 = _2997;
                    _3143 = _2998;
                    _3144 = _2999;
                    _3145 = _3009;
                    float _3066;
                    float _3067;
                    float _3068;
                    float _3069;
                    float _3070;
                    float _3071;
                    for (;;)
                    {
                        uint _3149 = uint(findLSB(_3145)) + (_3000 << 5u);
                        uint _3146 = (_3145 + 4294967295u) & _3145;
                        uint _3151 = _3149 * 48u;
                        vec4 _3165 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3151)).x, texelFetch(g_PointLightRenderingBuffer, int(_3151 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3151 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3151 + 3u)).x));
                        uint _3171 = (_3149 * 48u) + 4u;
                        vec4 _3184 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3171)).x, texelFetch(g_PointLightRenderingBuffer, int(_3171 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3171 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3171 + 3u)).x));
                        uint _3190 = (_3149 * 48u) + 8u;
                        vec3 _3201 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3190)).x, texelFetch(g_PointLightRenderingBuffer, int(_3190 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3190 + 2u)).x));
                        float _3205 = _3165.x - _2650;
                        float _3206 = _3165.y - _2651;
                        float _3207 = _3165.z - _2652;
                        float _3208 = dot(vec3(_3205, _3206, _3207), vec3(_3205, _3206, _3207));
                        float _3211 = inversesqrt(_3208);
                        float _3212 = _3211 * _3205;
                        float _3213 = _3211 * _3206;
                        float _3214 = _3211 * _3207;
                        float _3215 = dot(vec3(_892, _895, _898), vec3(_3212, _3213, _3214));
                        float _3220 = 1.0 - (_3208 * _3165.w);
                        float _4596 = isnan(0.0) ? _3220 : (isnan(_3220) ? 0.0 : max(_3220, 0.0));
                        float _3221 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
                        float _3222 = sqrt(_3208) * _3184.w;
                        float _3225 = 1.39999997615814208984375 / (_3222 + 1.39999997615814208984375);
                        float _3226 = _3225 * _3225;
                        float _3229 = ((1.0 - _3226) * _3215) + _3226;
                        float _3232 = _3222 * _3222;
                        float _3236 = ((isnan(0.0) ? _3229 : (isnan(_3229) ? 0.0 : max(_3229, 0.0))) * _3221) / ((_3232 * 0.699999988079071044921875) + 1.0);
                        float _3240 = (-0.0) - _2650;
                        float _3241 = (-0.0) - _2651;
                        float _3242 = (-0.0) - _2652;
                        float _3246 = inversesqrt(dot(vec3(_3240, _3241, _3242), vec3(_3240, _3241, _3242)));
                        float _3247 = _3246 * _3240;
                        float _3248 = _3246 * _3241;
                        float _3249 = _3246 * _3242;
                        float _3257 = exp2(log2(1.0 / ((_3232 * 3.5) + 5.0)) * 0.25);
                        float _3258 = 1.0 - _967;
                        float _3265 = sqrt(1.0 - ((1.0 - (_3258 * _3258)) * (1.0 - (_3257 * _3257))));
                        float _3266 = _3265 * _3265;
                        float _3267 = _3266 * _3266;
                        float _3268 = _3247 + _3212;
                        float _3269 = _3248 + _3213;
                        float _3270 = _3249 + _3214;
                        float _3274 = inversesqrt(dot(vec3(_3268, _3269, _3270), vec3(_3268, _3269, _3270)));
                        float _3278 = dot(vec3(_892, _895, _898), vec3(_3247, _3248, _3249));
                        float _4612 = isnan(0.0) ? _3278 : (isnan(_3278) ? 0.0 : max(_3278, 0.0));
                        float _3281 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
                        float _3282 = dot(vec3(_892, _895, _898), vec3(_3274 * _3268, _3274 * _3269, _3274 * _3270));
                        float _4623 = isnan(0.0) ? _3282 : (isnan(_3282) ? 0.0 : max(_3282, 0.0));
                        float _3285 = isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0));
                        float _3289 = ((_3285 * _3285) * (_3267 + (-1.0))) + 1.0;
                        float _3290 = _3225 * _3266;
                        float _3291 = _3290 * _3290;
                        float _3294 = ((1.0 - _3291) * _3215) + _3291;
                        float _4634 = isnan(0.0) ? _3294 : (isnan(_3294) ? 0.0 : max(_3294, 0.0));
                        float _3295 = isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0));
                        float _3296 = 1.0 - _3266;
                        float _3306 = (0.5 / (((_3295 * ((_3281 * _3296) + _3266)) + 9.9999999392252902907785028219223e-09) + (((_3295 * _3296) + _3266) * _3281))) * _3295;
                        float _4645 = isnan(0.0) ? _3306 : (isnan(_3306) ? 0.0 : max(_3306, 0.0));
                        float _3317 = (((_3267 * 3.1415927410125732421875) * (isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0)))) / ((_3289 * _3289) * ((_3232 * 2.1991131305694580078125) + 3.141590118408203125))) * _3221;
                        _3069 = (_3236 * _3184.x) + _3142;
                        _3070 = (_3236 * _3184.y) + _3143;
                        _3071 = (_3236 * _3184.z) + _3144;
                        _3066 = (_3317 * _3201.x) + _3139;
                        _3067 = (_3317 * _3201.y) + _3140;
                        _3068 = (_3317 * _3201.z) + _3141;
                        if (_3146 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3139 = _3066;
                            _3140 = _3067;
                            _3141 = _3068;
                            _3142 = _3069;
                            _3143 = _3070;
                            _3144 = _3071;
                            _3145 = _3146;
                        }
                    }
                    frontier_phi_68_pred = _3066;
                    frontier_phi_68_pred_1 = _3071;
                    frontier_phi_68_pred_2 = _3070;
                    frontier_phi_68_pred_3 = _3069;
                    frontier_phi_68_pred_4 = _3068;
                    frontier_phi_68_pred_5 = _3067;
                }
                _2833 = frontier_phi_68_pred;
                _2843 = frontier_phi_68_pred_1;
                _2841 = frontier_phi_68_pred_2;
                _2839 = frontier_phi_68_pred_3;
                _2837 = frontier_phi_68_pred_4;
                _2835 = frontier_phi_68_pred_5;
                uint _3001 = _3000 + 1u;
                if (_3001 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2994 = _2833;
                    _2995 = _2835;
                    _2996 = _2837;
                    _2997 = _2839;
                    _2998 = _2841;
                    _2999 = _2843;
                    _3000 = _3001;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2832 = _2833;
            _2834 = _2835;
            _2836 = _2837;
            _2838 = _2839;
            _2840 = _2841;
            _2842 = _2843;
        }
        uvec4 _2846 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2847 = _2846.z;
        uint _2849 = (_2847 >> 8u) & 15u;
        float _2962;
        float _2964;
        float _2966;
        float _2968;
        float _2970;
        float _2972;
        if (((4294967295u << _2849) & _2696) == 0u)
        {
            _2962 = _2832;
            _2964 = _2834;
            _2966 = _2836;
            _2968 = _2838;
            _2970 = _2840;
            _2972 = _2842;
        }
        else
        {
            float _2987 = inversesqrt(dot(vec3(_2650, _2651, _2652), vec3(_2650, _2651, _2652)));
            float _2988 = _2987 * _2650;
            float _2989 = _2987 * _2651;
            float _2990 = _2987 * _2652;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2849 < ((_2847 >> 12u) & 15u))
            {
                float _2963;
                float _2965;
                float _2967;
                float _2969;
                float _2971;
                float _2973;
                float _3122 = _2832;
                float _3123 = _2834;
                float _3124 = _2836;
                float _3125 = _2838;
                float _3126 = _2840;
                float _3127 = _2842;
                uint _3128 = _2849;
                uint _3137;
                bool _3138;
                for (;;)
                {
                    _3137 = texelFetch(g_lightClassification, int((((_2690 << 5u) + (_2676 << 9u)) + (_3128 << 2u)) >> 2u)).x;
                    _3138 = _3137 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3138)
                    {
                        frontier_phi_79_pred = _3127;
                        frontier_phi_79_pred_1 = _3126;
                        frontier_phi_79_pred_2 = _3125;
                        frontier_phi_79_pred_3 = _3124;
                        frontier_phi_79_pred_4 = _3123;
                        frontier_phi_79_pred_5 = _3122;
                    }
                    else
                    {
                        float _3331;
                        float _3332;
                        float _3333;
                        float _3334;
                        float _3335;
                        float _3336;
                        float _3624;
                        float _3625;
                        float _3626;
                        float _3627;
                        float _3628;
                        float _3629;
                        float _3344 = _3122;
                        float _3345 = _3123;
                        float _3346 = _3124;
                        float _3347 = _3125;
                        float _3348 = _3126;
                        float _3349 = _3127;
                        uint _3350 = _3137;
                        uint _3351;
                        vec4 _3376;
                        float _3377;
                        vec4 _3392;
                        vec3 _3404;
                        vec4 _3419;
                        vec4 _3434;
                        float _3480;
                        bool _3481;
                        for (;;)
                        {
                            uint _3361 = ((_3128 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3350));
                            _3351 = (_3350 + 4294967295u) & _3350;
                            uint _3363 = _3361 * 40u;
                            _3376 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3363)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 3u)).x));
                            _3377 = _3376.w;
                            uint _3379 = (_3361 * 40u) + 4u;
                            _3392 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3379)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3379 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3379 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3379 + 3u)).x));
                            uint _3394 = (_3361 * 40u) + 8u;
                            _3404 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3394)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 2u)).x));
                            uint _3406 = (_3361 * 40u) + 16u;
                            _3419 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3406)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 3u)).x));
                            uint _3421 = (_3361 * 40u) + 20u;
                            _3434 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3421)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 3u)).x));
                            uint _3436 = (_3361 * 40u) + 24u;
                            vec4 _3449 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3436)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 3u)).x));
                            uint _3455 = (_3361 * 40u) + 28u;
                            vec4 _3468 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3455)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 3u)).x));
                            _3480 = fma(_2652, _3468.z, fma(_2651, _3468.y, _3468.x * _2650)) + _3468.w;
                            _3481 = !((fma(_2652, _3449.z, fma(_2651, _3449.y, _3449.x * _2650)) + _3449.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3481)
                            {
                                float _3508 = _3376.x - _2650;
                                float _3509 = _3376.y - _2651;
                                float _3510 = _3376.z - _2652;
                                float _3511 = dot(vec3(_3508, _3509, _3510), vec3(_3508, _3509, _3510));
                                float _3514 = inversesqrt(_3511);
                                float _3515 = _3514 * _3508;
                                float _3516 = _3514 * _3509;
                                float _3517 = _3514 * _3510;
                                float _3521 = 1.0 - (_3511 / (_3377 * _3377));
                                float _4656 = isnan(0.0) ? _3521 : (isnan(_3521) ? 0.0 : max(_3521, 0.0));
                                float _3522 = isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0));
                                float _3526 = sqrt(_3511) * _3392.w;
                                float _3528 = 1.39999997615814208984375 / (_3526 + 1.39999997615814208984375);
                                float _3529 = _3528 * _3528;
                                float _3532 = ((1.0 - _3529) * dot(vec3(_3515, _3516, _3517), vec3(_892, _895, _898))) + _3529;
                                float _3535 = _3526 * _3526;
                                float _3539 = (fma(_2652, _3419.z, fma(_2651, _3419.y, _3419.x * _2650)) + _3419.w) / _3480;
                                float _3540 = (fma(_2652, _3434.z, fma(_2651, _3434.y, _3434.x * _2650)) + _3434.w) / _3480;
                                float _3544 = 1.0 - dot(vec2(_3539, _3540), vec2(_3539, _3540));
                                float _4672 = isnan(0.0) ? _3544 : (isnan(_3544) ? 0.0 : max(_3544, 0.0));
                                float _3545 = isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0));
                                float _3546 = _3545 * (((isnan(0.0) ? _3532 : (isnan(_3532) ? 0.0 : max(_3532, 0.0))) * _3522) / ((_3535 * 0.699999988079071044921875) + 1.0));
                                float _3558 = exp2(log2(1.0 / ((_3535 * 3.5) + 5.0)) * 0.25);
                                float _3559 = 1.0 - _967;
                                float _3566 = sqrt(1.0 - ((1.0 - (_3559 * _3559)) * (1.0 - (_3558 * _3558))));
                                float _3567 = _3566 * _3566;
                                float _3568 = _3567 * _3567;
                                float _3569 = _3515 - _2988;
                                float _3570 = _3516 - _2989;
                                float _3571 = _3517 - _2990;
                                float _3575 = inversesqrt(dot(vec3(_3569, _3570, _3571), vec3(_3569, _3570, _3571)));
                                float _3579 = dot(vec3(_892, _895, _898), vec3((-0.0) - _2988, (-0.0) - _2989, (-0.0) - _2990));
                                float _4683 = isnan(0.0) ? _3579 : (isnan(_3579) ? 0.0 : max(_3579, 0.0));
                                float _3582 = isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0));
                                float _3583 = dot(vec3(_892, _895, _898), vec3(_3575 * _3569, _3575 * _3570, _3575 * _3571));
                                float _4694 = isnan(0.0) ? _3583 : (isnan(_3583) ? 0.0 : max(_3583, 0.0));
                                float _3586 = isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0));
                                float _3590 = ((_3586 * _3586) * (_3568 + (-1.0))) + 1.0;
                                float _3591 = _3528 * _3567;
                                float _3592 = _3591 * _3591;
                                float _3598 = ((1.0 - _3592) * dot(vec3(_892, _895, _898), vec3(_3515, _3516, _3517))) + _3592;
                                float _4705 = isnan(0.0) ? _3598 : (isnan(_3598) ? 0.0 : max(_3598, 0.0));
                                float _3599 = isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0));
                                float _3600 = 1.0 - _3567;
                                float _3610 = (0.5 / (((_3599 * ((_3582 * _3600) + _3567)) + 9.9999999392252902907785028219223e-09) + (((_3599 * _3600) + _3567) * _3582))) * _3599;
                                float _4716 = isnan(0.0) ? _3610 : (isnan(_3610) ? 0.0 : max(_3610, 0.0));
                                float _3620 = (_3545 * _3522) * (((_3568 * 3.1415927410125732421875) * (isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0)))) / ((_3590 * _3590) * ((_3535 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3546 * _3392.y;
                                frontier_phi_85_pred_1 = _3546 * _3392.x;
                                frontier_phi_85_pred_2 = _3620 * _3404.z;
                                frontier_phi_85_pred_3 = _3620 * _3404.y;
                                frontier_phi_85_pred_4 = _3620 * _3404.x;
                                frontier_phi_85_pred_5 = _3546 * _3392.z;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3628 = frontier_phi_85_pred;
                            _3627 = frontier_phi_85_pred_1;
                            _3626 = frontier_phi_85_pred_2;
                            _3625 = frontier_phi_85_pred_3;
                            _3624 = frontier_phi_85_pred_4;
                            _3629 = frontier_phi_85_pred_5;
                            _3334 = _3627 + _3347;
                            _3335 = _3628 + _3348;
                            _3336 = _3629 + _3349;
                            _3331 = _3624 + _3344;
                            _3332 = _3625 + _3345;
                            _3333 = _3626 + _3346;
                            if (_3351 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3344 = _3331;
                                _3345 = _3332;
                                _3346 = _3333;
                                _3347 = _3334;
                                _3348 = _3335;
                                _3349 = _3336;
                                _3350 = _3351;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3336;
                        frontier_phi_79_pred_1 = _3335;
                        frontier_phi_79_pred_2 = _3334;
                        frontier_phi_79_pred_3 = _3333;
                        frontier_phi_79_pred_4 = _3332;
                        frontier_phi_79_pred_5 = _3331;
                    }
                    _2973 = frontier_phi_79_pred;
                    _2971 = frontier_phi_79_pred_1;
                    _2969 = frontier_phi_79_pred_2;
                    _2967 = frontier_phi_79_pred_3;
                    _2965 = frontier_phi_79_pred_4;
                    _2963 = frontier_phi_79_pred_5;
                    uint _3129 = _3128 + 1u;
                    if (_3129 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3122 = _2963;
                        _3123 = _2965;
                        _3124 = _2967;
                        _3125 = _2969;
                        _3126 = _2971;
                        _3127 = _2973;
                        _3128 = _3129;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2967;
                frontier_phi_60_61_ladder_1 = _2973;
                frontier_phi_60_61_ladder_2 = _2971;
                frontier_phi_60_61_ladder_3 = _2969;
                frontier_phi_60_61_ladder_4 = _2965;
                frontier_phi_60_61_ladder_5 = _2963;
            }
            else
            {
                frontier_phi_60_61_ladder = _2836;
                frontier_phi_60_61_ladder_1 = _2842;
                frontier_phi_60_61_ladder_2 = _2840;
                frontier_phi_60_61_ladder_3 = _2838;
                frontier_phi_60_61_ladder_4 = _2834;
                frontier_phi_60_61_ladder_5 = _2832;
            }
            _2962 = frontier_phi_60_61_ladder_5;
            _2964 = frontier_phi_60_61_ladder_4;
            _2966 = frontier_phi_60_61_ladder;
            _2968 = frontier_phi_60_61_ladder_3;
            _2970 = frontier_phi_60_61_ladder_2;
            _2972 = frontier_phi_60_61_ladder_1;
        }
        float _2977 = isnan(1.0) ? _951 : (isnan(_951) ? 1.0 : min(_951, 1.0));
        _2709 = (_2977 * _2968) + _2145;
        _2711 = (_2977 * _2970) + _2147;
        _2713 = (_2977 * _2972) + _2149;
        _2715 = ((_2962 * _936) * _2977) + _2490;
        _2717 = ((_2964 * _938) * _2977) + _2492;
        _2719 = ((_2966 * _939) * _2977) + _2494;
    }
    else
    {
        _2709 = _2145;
        _2711 = _2147;
        _2713 = _2149;
        _2715 = _2490;
        _2717 = _2492;
        _2719 = _2494;
    }
    uint _2725 = _912 + uint(cbMatDynParam._m0[0u].w);
    float _2733 = ((cbMtdParam._m0[20u].x * cbMtdParam._m0[25u].x) * _702.x) * cbInstanceData._m0[_2725].x;
    float _2736 = ((cbMtdParam._m0[20u].y * cbMtdParam._m0[25u].x) * _702.y) * cbInstanceData._m0[_2725].y;
    float _2739 = ((cbMtdParam._m0[20u].z * cbMtdParam._m0[25u].x) * _702.z) * cbInstanceData._m0[_2725].z;
    float _4732 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
    float _4743 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
    float _4754 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
    float _2756 = (((isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0))) * (_2709 + ((isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0))) * _951))) + ((_2715 + ((isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0))) * _1785)) * cbPerFrame._m0[3u].x)) + _2733;
    float _2758 = (_2736 + ((_2717 + ((isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0))) * _1785)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0))) * (_2711 + ((isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0))) * _951)));
    float _2760 = (_2739 + ((_2719 + ((isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0))) * _1785)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0))) * (_2713 + ((isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0))) * _951)));
    float _2761 = isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : max(_2756, 0.0));
    float _2762 = isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : max(_2758, 0.0));
    float _2763 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0));
    float _2769 = cbMtdParam._m0[2u].x * _2733;
    float _2770 = cbMtdParam._m0[2u].y * _2736;
    float _2771 = cbMtdParam._m0[2u].z * _2739;
    float _4780 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2773 = isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0));
    uint _2774 = _911 + 6u;
    float _2782 = _873 / cbSceneParam._m0[86u].x;
    float _2783 = _874 / cbSceneParam._m0[86u].y;
    vec4 _2797 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2782, _2783, (log2((isnan(cbSceneParam._m0[77u].w) ? _799 : (isnan(_799) ? cbSceneParam._m0[77u].w : min(_799, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2799 = _2797.x;
    float _2800 = _2797.y;
    float _2801 = _2797.z;
    float _2802 = _2797.w;
    float _2895;
    float _2897;
    float _2899;
    float _2901;
    if (_799 > cbSceneParam._m0[78u].w)
    {
        float _2857 = isnan(_799) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _799 : min(cbSceneParam._m0[80u].w, _799));
        float _2858 = _2857 / _799;
        float _2869 = _2858 * _849;
        float _2870 = _850 * _2858;
        float _2871 = (-0.0) - _2870;
        float _2873 = _2858 * _851;
        float _2875 = (cbSceneParam._m0[77u].w * _2871) / _2857;
        float _2876 = _2875 + cbSceneParam._m0[79u].w;
        float _2877 = cbSceneParam._m0[79u].w - _2870;
        float _2883 = sqrt(((_2869 * _2869) + (_2870 * _2870)) + (_2873 * _2873));
        float _2886 = (1.0 - (cbSceneParam._m0[77u].w / _2857)) * _2883;
        float _2891 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2893 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3079;
        if (abs((_2871 - _2875) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3079 = ((((_2876 > 0.0) ? exp2(_2891 * _2876) : (2.0 - exp2(_2893 * _2876))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2886;
        }
        else
        {
            float _3023 = 1.0 / cbSceneParam._m0[80u].x;
            float _3024 = isnan(_2877) ? _2876 : (isnan(_2876) ? _2877 : max(_2876, _2877));
            float _3025 = isnan(_2877) ? _2876 : (isnan(_2876) ? _2877 : min(_2876, _2877));
            float _3034 = isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : min(_3024, 0.0));
            float _3035 = isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : min(_3025, 0.0));
            _3079 = ((abs(_2883 / _2871) * cbSceneParam._m0[80u].y) * ((((_3034 - _3035) * 2.0) - ((exp2(_2891 * (isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : max(_3024, 0.0)))) - exp2(_2891 * (isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : max(_3025, 0.0))))) * _3023)) - ((exp2(_2893 * _3034) - exp2(_2893 * _3035)) * _3023))) + (_2886 * cbSceneParam._m0[80u].z);
        }
        vec4 _3081 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2782, _2783, 1.0), 0.0);
        float _3090 = exp2((_3079 * (-1.44269502162933349609375)) * (1.0 - _3081.w));
        float _3091 = log2(_3090);
        float _3107 = log2(_2802);
        _2895 = (exp2(_3107 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3091 * cbSceneParam._m0[78u].x)) * _3081.x) / cbSceneParam._m0[78u].x)) + _2799;
        _2897 = (exp2(_3107 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3091 * cbSceneParam._m0[78u].y)) * _3081.y) / cbSceneParam._m0[78u].y)) + _2800;
        _2899 = (exp2(_3107 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3091 * cbSceneParam._m0[78u].z)) * _3081.z) / cbSceneParam._m0[78u].z)) + _2801;
        _2901 = _3090 * _2802;
    }
    else
    {
        _2895 = _2799;
        _2897 = _2800;
        _2899 = _2801;
        _2901 = _2802;
    }
    bool _3117;
    vec4 _2911;
    vec4 _2933;
    float _2935;
    float _2939;
    float _2940;
    float _2941;
    float _2944;
    float _2947;
    float _2950;
    float _2951;
    bool _2961;
    for (;;)
    {
        _2911 = cbMatDynParam._m0[0u];
        float _2913 = roundEven(_2911.y);
        bool _2914 = _2913 == 3.0;
        float _2915 = log2(_2901);
        float _2919 = exp2(_2915 * cbSceneParam._m0[78u].x);
        float _2920 = exp2(_2915 * cbSceneParam._m0[78u].y);
        float _2921 = exp2(_2915 * cbSceneParam._m0[78u].z);
        float _2922 = _2919 * _2761;
        float _2923 = _2920 * _2762;
        float _2924 = _2921 * _2763;
        float _2931 = _862 + (-0.5);
        _2933 = cbMtdParam._m0[1u];
        _2935 = _2933.y * _2931;
        float _2938 = (_2913 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2939 = _2938 * (_2914 ? _2922 : (_2922 + (cbSceneParam._m0[72u].w * _2895)));
        _2940 = _2938 * (_2914 ? _2923 : (_2923 + (cbSceneParam._m0[72u].w * _2897)));
        _2941 = _2938 * (_2914 ? _2924 : (_2924 + (cbSceneParam._m0[72u].w * _2899)));
        _2944 = ((_2769 * _2773) * _2919) * _2938;
        _2947 = ((_2770 * _2773) * _2920) * _2938;
        _2950 = ((_2771 * _2773) * _2921) * _2938;
        _2951 = _2931 * 0.999000012874603271484375;
        _2961 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2961)
        {
            if ((cbInstanceData._m0[_911 + 7u].x + _2951) < 0.5)
            {
                _3117 = true;
                break;
            }
        }
        uint _3058 = _912 + uint(_2911.w);
        if ((cbInstanceData._m0[_3058].w < 1.0) && ((cbInstanceData._m0[_3058].w + _2951) < 0.5))
        {
            _3117 = true;
            break;
        }
        if ((_2935 + 1.0) < _2933.x)
        {
            _3117 = true;
            break;
        }
        _3117 = false;
        break;
    }
    float _3322;
    if (_3117)
    {
        discard_state = true;
        _3322 = 0.0;
    }
    else
    {
        _3322 = cbInstanceData._m0[_2774].w;
    }
    SV_Target.x = _2939;
    SV_Target.y = _2940;
    SV_Target.z = _2941;
    SV_Target.w = _3322;
    SV_Target_1.x = _2944;
    SV_Target_1.y = _2947;
    SV_Target_1.z = _2950;
    SV_Target_1.w = cbInstanceData._m0[_2774].w;
    discard_exit();
}


