#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[29];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 12) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 9) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2DArray C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_0;
layout(set = 0, binding = 14) uniform texture2DArray C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1282;
float _3731;
float _3732;
float _3733;
float _3734;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _205 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _206 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _207 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _213 = inversesqrt(dot(vec3(_205, _206, _207), vec3(_205, _206, _207)));
    float _220 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _227 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _248 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_1) + cbTextureTilingScale._m0[10u].w));
    float _262 = exp2(log2(_248.w * cbMtdParam._m0[25u].z) * cbMtdParam._m0[22u].x);
    float _263 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _264 = isnan(1.0) ? _263 : (isnan(_263) ? 1.0 : min(_263, 1.0));
    vec4 _278 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _282 = _278.z;
    float _291 = exp2(log2(_282 * cbMtdParam._m0[22u].y) * cbMtdParam._m0[21u].y);
    float _292 = isnan(0.0) ? _291 : (isnan(_291) ? 0.0 : max(_291, 0.0));
    float _293 = isnan(1.0) ? _292 : (isnan(_292) ? 1.0 : min(_292, 1.0));
    float _314 = roundEven(5.0 - ((texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w)).x + (-0.02500000037252902984619140625)) * 8.0));
    float _315 = isnan(0.0) ? _314 : (isnan(_314) ? 0.0 : max(_314, 0.0));
    float _316 = isnan(4.0) ? _315 : (isnan(_315) ? 4.0 : min(_315, 4.0));
    float _329 = floor(_316);
    vec4 _332 = texture(sampler2DArray(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w, _329));
    vec4 _356 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _367 = cbMtdParam._m0[9u].x * _356.x;
    float _368 = cbMtdParam._m0[9u].y * _356.y;
    float _369 = cbMtdParam._m0[9u].z * _356.z;
    float _376 = (((cbMtdParam._m0[10u].x * _332.x) - _367) * _293) + _367;
    float _377 = (((cbMtdParam._m0[10u].y * _332.y) - _368) * _293) + _368;
    float _378 = (((cbMtdParam._m0[10u].z * _332.z) - _369) * _293) + _369;
    float _384 = exp2(log2(_278.w) * cbMtdParam._m0[22u].w);
    vec4 _397 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _417 = (((cbMtdParam._m0[16u].x * _397.x) - _376) * _384) + _376;
    float _418 = (((cbMtdParam._m0[16u].y * _397.y) - _377) * _384) + _377;
    float _419 = (((cbMtdParam._m0[16u].z * _397.z) - _378) * _384) + _378;
    vec4 _432 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _457 = (_248.x * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].x * _432.x) - _417) * _264) + _417);
    float _459 = (_248.y * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].y * _432.y) - _418) * _264) + _418);
    float _461 = (_248.z * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].z * _432.z) - _419) * _264) + _419);
    float _184[5];
    float _185[5];
    _184[0u] = cbMtdParam._m0[25u].w;
    _185[0u] = cbMtdParam._m0[26u].x;
    _184[1u] = cbMtdParam._m0[27u].w;
    _185[1u] = cbMtdParam._m0[28u].x;
    _184[2u] = cbMtdParam._m0[27u].y;
    _185[2u] = cbMtdParam._m0[27u].z;
    _184[3u] = cbMtdParam._m0[26u].w;
    _185[3u] = cbMtdParam._m0[27u].x;
    _184[4u] = cbMtdParam._m0[26u].y;
    _185[4u] = cbMtdParam._m0[26u].z;
    float _501 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    uint _503 = uint(int(isnan(4.0) ? _501 : (isnan(_501) ? 4.0 : min(_501, 4.0))));
    float _510 = ((_185[_503] - cbMtdParam._m0[21u].z) * _293) + cbMtdParam._m0[21u].z;
    float _513 = ((cbMtdParam._m0[21u].w - _510) * _384) + _510;
    float _516 = ((cbMtdParam._m0[24u].y - _513) * _264) + _513;
    vec4 _532 = texture(sampler2DArray(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w, _329));
    vec4 _549 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _551 = _549.x;
    float _552 = _549.y;
    float _557 = cbMtdParam._m0[21u].x + _549.z;
    float _560 = (((_532.z + _184[_503]) - _557) * _293) + _557;
    vec4 _573 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_1) + cbTextureTilingScale._m0[11u].w));
    float _584 = (((_573.z - _560) + cbMtdParam._m0[25u].y) * _384) + _560;
    float _590 = ((((_282 * 2.0) * _584) - _584) * cbMtdParam._m0[23u].w) + _584;
    vec4 _603 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_1) + cbTextureTilingScale._m0[12u].w));
    float _614 = (((cbMtdParam._m0[22u].z + _603.z) - _590) * _264) + _590;
    vec4 _634 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _651 = ((_532.x - _551) * _293) + _551;
    float _652 = ((_532.y - _552) * _293) + _552;
    float _657 = ((_573.x - _651) * _384) + _651;
    float _658 = ((_573.y - _652) * _384) + _652;
    float _667 = ((((_603.x - _657) * _264) + _657) * 2.0) + (-1.0);
    float _668 = ((((_603.y - _658) * _264) + _658) * 2.0) + (-1.0);
    float _669 = dot(vec2(_667, _668), vec2(_667, _668));
    float _3783 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _674 = sqrt(1.0 - (isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0))));
    float _677 = (cbMtdParam._m0[24u].z * ((_278.x * 2.0) + (-1.0))) + _667;
    float _678 = (cbMtdParam._m0[24u].z * ((_278.y * 2.0) + (-1.0))) + _668;
    float _680 = gl_FragCoord.x * 0.125;
    float _682 = gl_FragCoord.y * 0.125;
    float _693 = fma(_674, _220 * NORMAL.x, fma(_678, _227 * TANGENT.x, (_213 * _205) * _677));
    float _696 = fma(_674, _220 * NORMAL.y, fma(_678, _227 * TANGENT.y, (_213 * _206) * _677));
    float _699 = fma(_674, _220 * NORMAL.z, fma(_678, _227 * TANGENT.z, (_213 * _207) * _677));
    float _703 = inversesqrt(dot(vec3(_693, _696, _699), vec3(_693, _696, _699)));
    float _704 = _703 * _693;
    float _705 = _703 * _696;
    float _706 = _703 * _699;
    float _3794 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _707 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
    float _3805 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _3816 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _3827 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _3838 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _711 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
    if (!(cbMtdParam._m0[24u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_680, _682)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _731 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _771 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _781 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _771);
    float _782 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _771);
    float _783 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _771);
    float _787 = inversesqrt(dot(vec3(_781, _782, _783), vec3(_781, _782, _783)));
    float _788 = _781 * _787;
    float _789 = _782 * _787;
    float _790 = _783 * _787;
    vec4 _792 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_680, _682));
    float _794 = _792.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _964 = sqrt(((_781 * _781) + (_782 * _782)) + (_783 * _783));
        float _970 = (cbMatDynParam._m0[5u].x * _964) + cbMatDynParam._m0[5u].y;
        float _3849 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _971 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
        float _975 = (cbMatDynParam._m0[5u].z * _964) + cbMatDynParam._m0[5u].w;
        float _3860 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0))) - _971)) + _971) < ((_794 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _805 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _806 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _824 = fma(_706, cbSceneParam._m0[5u].z, fma(_705, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _704));
    float _827 = fma(_706, cbSceneParam._m0[6u].z, fma(_705, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _704));
    float _830 = fma(_706, cbSceneParam._m0[7u].z, fma(_705, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _704));
    uint _843 = uint(roundEven(NORMAL.w)) * 13u;
    uint _844 = _843 + 9u;
    uint _845 = _844 + uint(cbMatDynParam._m0[0u].w);
    float _851 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0)))) * cbInstanceData._m0[_845].x;
    float _852 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0)))) * cbInstanceData._m0[_845].y;
    float _853 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0)))) * cbInstanceData._m0[_845].z;
    float _3871 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
    float _854 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
    float _3882 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
    float _855 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
    float _3893 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
    float _856 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
    float _857 = 1.0 - _711;
    float _858 = _854 * _857;
    float _859 = _855 * _857;
    float _860 = _856 * _857;
    float _865 = (_854 + (-0.039999999105930328369140625)) * _711;
    float _866 = (_855 + (-0.039999999105930328369140625)) * _711;
    float _867 = (_856 + (-0.039999999105930328369140625)) * _711;
    float _868 = _865 + 0.039999999105930328369140625;
    float _870 = _866 + 0.039999999105930328369140625;
    float _871 = _867 + 0.039999999105930328369140625;
    vec4 _880 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _805, cbSceneParam._m0[86u].y * _806));
    float _883 = _880.x * TEXCOORD_3.w;
    float _884 = dot(vec3(_704, _705, _706), vec3(_788, _789, _790));
    float _887 = _884 * 2.0;
    float _891 = (_887 * _704) - _788;
    float _892 = (_887 * _705) - _789;
    float _893 = (_887 * _706) - _790;
    float _897 = abs(dot(vec3(_788, _789, _790), vec3(_704, _705, _706)));
    float _3904 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
    float _899 = sqrt(_707);
    float _910 = exp2((_899 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_899 * 3.0));
    float _916 = (1.0 - _910) * ((_899 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _917 = _910 * _899;
    float _945 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _949 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _953 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1281;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1006 = fma(_953, cbModelParam._m0[26u].z, fma(_949, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _945));
        float _1010 = fma(_953, cbModelParam._m0[27u].z, fma(_949, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _945));
        float _1014 = fma(_953, cbModelParam._m0[28u].z, fma(_949, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _945));
        float _1039 = _945 + _704;
        float _1040 = _949 + _705;
        float _1041 = _953 + _706;
        float _1051 = fma(_1041, cbModelParam._m0[26u].z, fma(_1040, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1039)) - _1006;
        float _1052 = fma(_1041, cbModelParam._m0[27u].z, fma(_1040, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1039)) - _1010;
        float _1053 = fma(_1041, cbModelParam._m0[28u].z, fma(_1040, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1039)) - _1014;
        float _1057 = inversesqrt(dot(vec3(_1051, _1052, _1053), vec3(_1051, _1052, _1053)));
        float _1070 = ((_1057 * _1051) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1006 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1071 = ((_1057 * _1052) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1010 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1072 = ((_1057 * _1053) / cbModelParam._m0[34u].z) + ((((((_1014 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1075 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1070, _1071, _1072), 0.0);
        vec4 _1082 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1070, _1071, _1072), 0.0);
        vec4 _1089 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1070, _1071, _1072), 0.0);
        vec4 _1096 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1070, _1071, _1072), 0.0);
        float _1109 = exp2((_1075.w + (-0.5)) * 20.0) * 2.0;
        float _1110 = _1109 * (_1075.x + (-0.5));
        float _1111 = _1109 * (_1075.y + (-0.5));
        float _1112 = _1109 * (_1075.z + (-0.5));
        float _1119 = exp2((_1082.w + (-0.5)) * 20.0) * 2.0;
        float _1120 = _1119 * (_1082.x + (-0.5));
        float _1121 = _1119 * (_1082.y + (-0.5));
        float _1122 = _1119 * (_1082.z + (-0.5));
        float _1129 = exp2((_1089.w + (-0.5)) * 20.0) * 2.0;
        float _1130 = _1129 * (_1089.x + (-0.5));
        float _1131 = _1129 * (_1089.y + (-0.5));
        float _1132 = _1129 * (_1089.z + (-0.5));
        float _1139 = exp2((_1096.w + (-0.5)) * 20.0) * 2.0;
        float _1140 = _1139 * (_1096.x + (-0.5));
        float _1141 = _1139 * (_1096.y + (-0.5));
        float _1142 = _1139 * (_1096.z + (-0.5));
        float _1143 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1144 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1145 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1146 = _1110 * 0.5;
        float _1147 = _1120 * 0.5;
        float _1148 = _1130 * 0.5;
        float _1149 = dot(vec3(_1146, _1147, _1148), vec3(_1146, _1147, _1148));
        float _1154 = (_1149 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1149);
        float _1163 = (dot(vec3(_704, _705, _706), vec3(_1154 * _1146, _1154 * _1147, _1154 * _1148)) + 1.0) * 0.5;
        float _3930 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1173 = sqrt(((_1147 * _1147) + (_1146 * _1146)) + (_1148 * _1148)) / (_1143 + 9.9999997473787516355514526367188e-06);
        float _3941 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1174 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
        float _1175 = _1174 * 2.0;
        float _1179 = (1.0 - _1174) / (_1174 + 1.0);
        float _3952 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1180 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
        float _1189 = ((((1.0 - _1180) * (_1175 + 2.0)) * exp2(log2(isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0))) * (_1175 + 1.0))) + _1180) * _1143;
        float _1190 = _1111 * 0.5;
        float _1191 = _1121 * 0.5;
        float _1192 = _1131 * 0.5;
        float _1193 = dot(vec3(_1190, _1191, _1192), vec3(_1190, _1191, _1192));
        float _1198 = (_1193 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1193);
        float _1206 = (dot(vec3(_704, _705, _706), vec3(_1198 * _1190, _1198 * _1191, _1198 * _1192)) + 1.0) * 0.5;
        float _3963 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1215 = sqrt(((_1191 * _1191) + (_1190 * _1190)) + (_1192 * _1192)) / (_1144 + 9.9999997473787516355514526367188e-06);
        float _3974 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1216 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
        float _1217 = _1216 * 2.0;
        float _1221 = (1.0 - _1216) / (_1216 + 1.0);
        float _3985 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1222 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
        float _1231 = ((((1.0 - _1222) * (_1217 + 2.0)) * exp2(log2(isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0))) * (_1217 + 1.0))) + _1222) * _1144;
        float _1232 = _1112 * 0.5;
        float _1233 = _1122 * 0.5;
        float _1234 = _1132 * 0.5;
        float _1235 = dot(vec3(_1232, _1233, _1234), vec3(_1232, _1233, _1234));
        float _1240 = (_1235 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1235);
        float _1248 = (dot(vec3(_704, _705, _706), vec3(_1240 * _1232, _1240 * _1233, _1240 * _1234)) + 1.0) * 0.5;
        float _3996 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1257 = sqrt(((_1233 * _1233) + (_1232 * _1232)) + (_1234 * _1234)) / (_1145 + 9.9999997473787516355514526367188e-06);
        float _4007 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1258 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _1259 = _1258 * 2.0;
        float _1263 = (1.0 - _1258) / (_1258 + 1.0);
        float _4018 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1264 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
        float _1273 = ((((1.0 - _1264) * (_1259 + 2.0)) * exp2(log2(isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0))) * (_1259 + 1.0))) + _1264) * _1145;
        _1281 = _1112;
        _1283 = _1111;
        _1284 = _1110;
        _1285 = _1122;
        _1286 = _1121;
        _1287 = _1120;
        _1288 = _1132;
        _1289 = _1131;
        _1290 = _1130;
        _1291 = _1145;
        _1292 = _1144;
        _1293 = _1143;
        _1294 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0)));
        _1295 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0)));
        _1296 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0)));
    }
    else
    {
        _1281 = _1282;
        _1283 = _1282;
        _1284 = _1282;
        _1285 = _1282;
        _1286 = _1282;
        _1287 = _1282;
        _1288 = _1282;
        _1289 = _1282;
        _1290 = _1282;
        _1291 = _1282;
        _1292 = _1282;
        _1293 = _1282;
        _1294 = 0.0;
        _1295 = 0.0;
        _1296 = 0.0;
    }
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1322 = fma(_953, cbModelParam._m0[30u].z, fma(_949, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _945));
        float _1326 = fma(_953, cbModelParam._m0[31u].z, fma(_949, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _945));
        float _1330 = fma(_953, cbModelParam._m0[32u].z, fma(_949, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _945));
        float _1353 = _945 + _704;
        float _1354 = _949 + _705;
        float _1355 = _953 + _706;
        float _1365 = fma(_1355, cbModelParam._m0[30u].z, fma(_1354, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1353)) - _1322;
        float _1366 = fma(_1355, cbModelParam._m0[31u].z, fma(_1354, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1353)) - _1326;
        float _1367 = fma(_1355, cbModelParam._m0[32u].z, fma(_1354, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1353)) - _1330;
        float _1371 = inversesqrt(dot(vec3(_1365, _1366, _1367), vec3(_1365, _1366, _1367)));
        float _1384 = ((_1371 * _1365) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1322 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1385 = ((_1371 * _1366) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1326 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1386 = ((_1371 * _1367) / cbModelParam._m0[35u].z) + ((((((_1330 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1388 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1384, _1385, _1386), 0.0);
        vec4 _1395 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1384, _1385, _1386), 0.0);
        vec4 _1402 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1384, _1385, _1386), 0.0);
        vec4 _1409 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1384, _1385, _1386), 0.0);
        float _1421 = exp2((_1388.w + (-0.5)) * 20.0) * 2.0;
        float _1422 = _1421 * (_1388.x + (-0.5));
        float _1423 = _1421 * (_1388.y + (-0.5));
        float _1424 = _1421 * (_1388.z + (-0.5));
        float _1431 = exp2((_1395.w + (-0.5)) * 20.0) * 2.0;
        float _1432 = _1431 * (_1395.x + (-0.5));
        float _1433 = _1431 * (_1395.y + (-0.5));
        float _1434 = _1431 * (_1395.z + (-0.5));
        float _1441 = exp2((_1402.w + (-0.5)) * 20.0) * 2.0;
        float _1442 = _1441 * (_1402.x + (-0.5));
        float _1443 = _1441 * (_1402.y + (-0.5));
        float _1444 = _1441 * (_1402.z + (-0.5));
        float _1451 = exp2((_1409.w + (-0.5)) * 20.0) * 2.0;
        float _1452 = _1451 * (_1409.x + (-0.5));
        float _1453 = _1451 * (_1409.y + (-0.5));
        float _1454 = _1451 * (_1409.z + (-0.5));
        float _1455 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1456 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1457 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1458 = _1422 * 0.5;
        float _1459 = _1432 * 0.5;
        float _1460 = _1442 * 0.5;
        float _1461 = dot(vec3(_1458, _1459, _1460), vec3(_1458, _1459, _1460));
        float _1466 = (_1461 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1461);
        float _1474 = (dot(vec3(_704, _705, _706), vec3(_1466 * _1458, _1466 * _1459, _1466 * _1460)) + 1.0) * 0.5;
        float _4059 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1483 = sqrt(((_1459 * _1459) + (_1458 * _1458)) + (_1460 * _1460)) / (_1455 + 9.9999997473787516355514526367188e-06);
        float _4070 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1484 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _1485 = _1484 * 2.0;
        float _1489 = (1.0 - _1484) / (_1484 + 1.0);
        float _4081 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1490 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
        float _1499 = ((((1.0 - _1490) * (_1485 + 2.0)) * exp2(log2(isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0))) * (_1485 + 1.0))) + _1490) * _1455;
        float _1500 = _1423 * 0.5;
        float _1501 = _1433 * 0.5;
        float _1502 = _1443 * 0.5;
        float _1503 = dot(vec3(_1500, _1501, _1502), vec3(_1500, _1501, _1502));
        float _1508 = (_1503 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1503);
        float _1516 = (dot(vec3(_704, _705, _706), vec3(_1508 * _1500, _1508 * _1501, _1508 * _1502)) + 1.0) * 0.5;
        float _4092 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1525 = sqrt(((_1501 * _1501) + (_1500 * _1500)) + (_1502 * _1502)) / (_1456 + 9.9999997473787516355514526367188e-06);
        float _4103 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1526 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
        float _1527 = _1526 * 2.0;
        float _1531 = (1.0 - _1526) / (_1526 + 1.0);
        float _4114 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1532 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
        float _1541 = ((((1.0 - _1532) * (_1527 + 2.0)) * exp2(log2(isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0))) * (_1527 + 1.0))) + _1532) * _1456;
        float _1542 = _1424 * 0.5;
        float _1543 = _1434 * 0.5;
        float _1544 = _1444 * 0.5;
        float _1545 = dot(vec3(_1542, _1543, _1544), vec3(_1542, _1543, _1544));
        float _1550 = (_1545 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1545);
        float _1558 = (dot(vec3(_704, _705, _706), vec3(_1550 * _1542, _1550 * _1543, _1550 * _1544)) + 1.0) * 0.5;
        float _4125 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
        float _1567 = sqrt(((_1543 * _1543) + (_1542 * _1542)) + (_1544 * _1544)) / (_1457 + 9.9999997473787516355514526367188e-06);
        float _4136 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
        float _1568 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
        float _1569 = _1568 * 2.0;
        float _1573 = (1.0 - _1568) / (_1568 + 1.0);
        float _4147 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1574 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
        float _1583 = ((((1.0 - _1574) * (_1569 + 2.0)) * exp2(log2(isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0))) * (_1569 + 1.0))) + _1574) * _1457;
        _1591 = _1424;
        _1592 = _1423;
        _1593 = _1422;
        _1594 = _1434;
        _1595 = _1433;
        _1596 = _1432;
        _1597 = _1444;
        _1598 = _1443;
        _1599 = _1442;
        _1600 = _1457;
        _1601 = _1456;
        _1602 = _1455;
        _1603 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0)));
        _1604 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0)));
        _1605 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0)));
    }
    else
    {
        _1591 = _1282;
        _1592 = _1282;
        _1593 = _1282;
        _1594 = _1282;
        _1595 = _1282;
        _1596 = _1282;
        _1597 = _1282;
        _1598 = _1282;
        _1599 = _1282;
        _1600 = _1282;
        _1601 = _1282;
        _1602 = _1282;
        _1603 = 0.0;
        _1604 = 0.0;
        _1605 = 0.0;
    }
    float _1615 = (cbModelParam._m0[1u].x * (_1603 - _1294)) + _1294;
    float _1616 = (cbModelParam._m0[1u].x * (_1604 - _1295)) + _1295;
    float _1617 = (cbModelParam._m0[1u].x * (_1605 - _1296)) + _1296;
    float _1638 = fma(_1617, cbSceneParam._m0[89u].z, fma(_1616, cbSceneParam._m0[89u].y, _1615 * cbSceneParam._m0[89u].x));
    float _1641 = fma(_1617, cbSceneParam._m0[90u].z, fma(_1616, cbSceneParam._m0[90u].y, _1615 * cbSceneParam._m0[90u].x));
    float _1644 = fma(_1617, cbSceneParam._m0[91u].z, fma(_1616, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1615));
    float _1659 = _891 * 0.5;
    float _1660 = _892 * 0.5;
    float _1661 = _893 * 0.5;
    float _1662 = dot(vec4(_1659, _1660, _1661, 1.0), vec4(_1593, _1596, _1599, _1602));
    float _1665 = dot(vec4(_1659, _1660, _1661, 1.0), vec4(_1592, _1595, _1598, _1601));
    float _1668 = dot(vec4(_1659, _1660, _1661, 1.0), vec4(_1591, _1594, _1597, _1600));
    float _1702;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1675 = dot(vec4(_1659, _1660, _1661, 1.0), vec4(_1281, _1285, _1288, _1291));
        float _1679 = dot(vec4(_1659, _1660, _1661, 1.0), vec4(_1283, _1286, _1289, _1292));
        float _1683 = dot(vec4(_1659, _1660, _1661, 1.0), vec4(_1284, _1287, _1290, _1293));
        float _1690 = dot(vec4(cbModelParam._m0[39u]), vec4(_1659, _1660, _1661, 1.0));
        _1702 = dot(vec3(isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0)), isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0)), isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1690) ? 0.0 : (isnan(0.0) ? _1690 : max(0.0, _1690))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1702 = 1.0;
    }
    float _1713;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1704 = dot(vec4(cbModelParam._m0[40u]), vec4(_1659, _1660, _1661, 1.0));
        _1713 = dot(vec3(isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0)), isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0)), isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1704) ? 0.0 : (isnan(0.0) ? _1704 : max(0.0, _1704))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1713 = 1.0;
    }
    float _1717 = (_1713 * cbModelParam._m0[1u].x) + (_1702 * (1.0 - cbModelParam._m0[1u].x));
    float _1727 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _707);
    float _1728 = isnan(_1727) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1727 : min(cbModelParam._m0[25u].z, _1727));
    float _1809;
    float _1811;
    float _1813;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1776 = fma(_953, cbModelParam._m0[13u].z, fma(_949, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _945)) + cbModelParam._m0[13u].w;
        float _1780 = fma(_953, cbModelParam._m0[14u].z, fma(_949, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _945)) + cbModelParam._m0[14u].w;
        float _1784 = fma(_953, cbModelParam._m0[15u].z, fma(_949, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _945)) + cbModelParam._m0[15u].w;
        float _1787 = fma(_893, cbModelParam._m0[13u].z, fma(_892, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _891));
        float _1790 = fma(_893, cbModelParam._m0[14u].z, fma(_892, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _891));
        float _1793 = fma(_893, cbModelParam._m0[15u].z, fma(_892, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _891));
        float _1821;
        if (_1787 > 0.0)
        {
            _1821 = abs((1.0 - _1776) / _1787);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1787 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1776 + 1.0) / _1787);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1821 = frontier_phi_19_17_ladder;
        }
        float _2045;
        if (_1790 > 0.0)
        {
            _2045 = abs((1.0 - _1780) / _1790);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1790 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1780 + 1.0) / _1790);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2045 = frontier_phi_28_24_ladder;
        }
        float _2302;
        if (_1793 > 0.0)
        {
            _2302 = abs((1.0 - _1784) / _1793);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1793 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1784 + 1.0) / _1793);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2302 = frontier_phi_40_35_ladder;
        }
        float _2304 = isnan(_2045) ? _1821 : (isnan(_1821) ? _2045 : min(_1821, _2045));
        float _2305 = isnan(_2302) ? _2304 : (isnan(_2304) ? _2302 : min(_2304, _2302));
        float _2309 = (_2305 * _1787) + _1776;
        float _2310 = (_2305 * _1790) + _1780;
        float _2311 = (_2305 * _1793) + _1784;
        float _2312 = _2305 * 9.9999997473787516355514526367188e-05;
        float _2314 = (-1.0) - _2312;
        float _2316 = _2312 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2311 > _2316) || ((_2311 < _2314) || ((_2310 > _2316) || ((_2310 < _2314) || ((_2309 < _2314) || (_2309 > _2316))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2439 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2311, cbModelParam._m0[9u].z, fma(_2310, cbModelParam._m0[9u].y, _2309 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2311, cbModelParam._m0[10u].z, fma(_2310, cbModelParam._m0[10u].y, _2309 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2311, cbModelParam._m0[11u].z, fma(_2310, cbModelParam._m0[11u].y, _2309 * cbModelParam._m0[11u].x))), _1728);
            frontier_phi_18_40_ladder = _2439.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2439.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2439.x * cbModelParam._m0[1u].y;
        }
        _1809 = frontier_phi_18_40_ladder_2;
        _1811 = frontier_phi_18_40_ladder_1;
        _1813 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1797 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_891, _892, _893), _1728);
        _1809 = _1797.x * cbModelParam._m0[1u].y;
        _1811 = _1797.y * cbModelParam._m0[1u].y;
        _1813 = _1797.z * cbModelParam._m0[1u].y;
    }
    float _1817 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _707);
    float _1818 = isnan(_1817) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1817 : min(cbModelParam._m0[25u].w, _1817));
    float _1908;
    float _1910;
    float _1912;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1872 = fma(_953, cbModelParam._m0[21u].z, fma(_949, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _945)) + cbModelParam._m0[21u].w;
        float _1876 = fma(_953, cbModelParam._m0[22u].z, fma(_949, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _945)) + cbModelParam._m0[22u].w;
        float _1880 = fma(_953, cbModelParam._m0[23u].z, fma(_949, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _945)) + cbModelParam._m0[23u].w;
        float _1883 = fma(_893, cbModelParam._m0[21u].z, fma(_892, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _891));
        float _1886 = fma(_893, cbModelParam._m0[22u].z, fma(_892, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _891));
        float _1889 = fma(_893, cbModelParam._m0[23u].z, fma(_892, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _891));
        float _2050;
        if (_1883 > 0.0)
        {
            _2050 = abs((1.0 - _1872) / _1883);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1883 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1872 + 1.0) / _1883);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2050 = frontier_phi_30_26_ladder;
        }
        float _2329;
        if (_1886 > 0.0)
        {
            _2329 = abs((1.0 - _1876) / _1886);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1886 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1876 + 1.0) / _1886);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2329 = frontier_phi_42_37_ladder;
        }
        float _2542;
        if (_1889 > 0.0)
        {
            _2542 = abs((1.0 - _1880) / _1889);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1889 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1880 + 1.0) / _1889);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2542 = frontier_phi_51_48_ladder;
        }
        float _2544 = isnan(_2329) ? _2050 : (isnan(_2050) ? _2329 : min(_2050, _2329));
        float _2545 = isnan(_2542) ? _2544 : (isnan(_2544) ? _2542 : min(_2544, _2542));
        float _2549 = (_2545 * _1883) + _1872;
        float _2550 = (_2545 * _1886) + _1876;
        float _2551 = (_2545 * _1889) + _1880;
        float _2552 = _2545 * 9.9999997473787516355514526367188e-05;
        float _2553 = (-1.0) - _2552;
        float _2555 = _2552 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2551 > _2555) || ((_2551 < _2553) || ((_2550 > _2555) || ((_2550 < _2553) || ((_2549 < _2553) || (_2549 > _2555))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2785 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2551, cbModelParam._m0[17u].z, fma(_2550, cbModelParam._m0[17u].y, _2549 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2551, cbModelParam._m0[18u].z, fma(_2550, cbModelParam._m0[18u].y, _2549 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2551, cbModelParam._m0[19u].z, fma(_2550, cbModelParam._m0[19u].y, _2549 * cbModelParam._m0[19u].x))), _1818);
            frontier_phi_27_51_ladder = _2785.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2785.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2785.x * cbModelParam._m0[1u].z;
        }
        _1908 = frontier_phi_27_51_ladder_2;
        _1910 = frontier_phi_27_51_ladder_1;
        _1912 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1892 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_891, _892, _893), _1818);
        _1908 = _1892.x * cbModelParam._m0[1u].z;
        _1910 = _1892.y * cbModelParam._m0[1u].z;
        _1912 = _1892.z * cbModelParam._m0[1u].z;
    }
    float _1925 = (((_916 * _868) + _917) * _883) * ((cbModelParam._m0[1u].w * (_1908 - _1809)) + _1809);
    float _1927 = (((_916 * _870) + _917) * _883) * ((cbModelParam._m0[1u].w * (_1910 - _1811)) + _1811);
    float _1929 = (((_916 * _871) + _917) * _883) * ((cbModelParam._m0[1u].w * (_1912 - _1813)) + _1813);
    float _1932 = fma(_1929, cbSceneParam._m0[89u].z, fma(_1927, cbSceneParam._m0[89u].y, _1925 * cbSceneParam._m0[89u].x));
    float _1935 = fma(_1929, cbSceneParam._m0[90u].z, fma(_1927, cbSceneParam._m0[90u].y, _1925 * cbSceneParam._m0[90u].x));
    float _1938 = fma(_1929, cbSceneParam._m0[91u].z, fma(_1927, cbSceneParam._m0[91u].y, _1925 * cbSceneParam._m0[91u].x));
    vec4 _1946 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_805, _806));
    float _1948 = _1946.w;
    float _1960 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1948);
    float _1961 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1948);
    float _1962 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1948);
    uvec4 _1966 = floatBitsToUint(cbInstanceData._m0[_843 + 5u]);
    uint _1968 = _1966.x * 14u;
    uint _1969 = _1968 + 13u;
    float _1976 = _883 + (-1.0);
    float _1981 = (cbLight._m0[_1969].x * _1976) + 1.0;
    float _1982 = (cbLight._m0[_1969].y * _1976) + 1.0;
    float _1983 = (cbLight._m0[_1969].z * _1976) + 1.0;
    float _1984 = (cbLight._m0[_1969].w * _1976) + 1.0;
    uint _1985 = _1968 + 5u;
    float _1991 = isnan(1.0) ? _1982 : (isnan(_1982) ? 1.0 : min(_1982, 1.0));
    uint _1995 = _1968 + 4u;
    float _2004 = isnan(1.0) ? _1981 : (isnan(_1981) ? 1.0 : min(_1981, 1.0));
    uint _2008 = _1968 | 1u;
    float _2019 = dot(vec3(cbLight._m0[_1968].xyz), vec3(_704, _705, _706));
    float _2022 = dot(vec3(cbLight._m0[_2008].xyz), vec3(_704, _705, _706));
    float _4283 = isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0));
    float _4294 = isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0));
    float _2027 = (isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0))) * 0.3183098733425140380859375;
    float _2029 = (isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0))) * 0.3183098733425140380859375;
    float _2036 = ((cbLight._m0[_1985].x * _1991) * _2029) + (((cbLight._m0[_1995].x * _1960) * _2004) * _2027);
    float _2037 = ((_1991 * cbLight._m0[_1985].y) * _2029) + (((cbLight._m0[_1995].y * _1961) * _2004) * _2027);
    float _2038 = ((_1991 * cbLight._m0[_1985].z) * _2029) + (((cbLight._m0[_1995].z * _1962) * _2004) * _2027);
    uvec4 _2042 = floatBitsToUint(cbLight._m0[_1968 + 12u]);
    bool _2044 = _2042.x == 0u;
    float _2055;
    float _2057;
    float _2059;
    if (_2044)
    {
        _2055 = _2036;
        _2057 = _2037;
        _2059 = _2038;
    }
    else
    {
        uint _2063 = _1968 + 6u;
        float _2079 = (dot(vec3(cbLight._m0[_1968 + 2u].xyz), vec3(_704, _705, _706)) * 0.5) + 0.5;
        float _2080 = _2079 * _2079;
        float _4305 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
        float _2081 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
        float _2082 = isnan(1.0) ? _1983 : (isnan(_1983) ? 1.0 : min(_1983, 1.0));
        _2055 = (((cbLight._m0[_2063].x * 0.3183098733425140380859375) * _2081) * _2082) + _2036;
        _2057 = (((cbLight._m0[_2063].y * 0.3183098733425140380859375) * _2081) * _2082) + _2037;
        _2059 = (((cbLight._m0[_2063].z * 0.3183098733425140380859375) * _2081) * _2082) + _2038;
    }
    bool _2062 = _2042.y == 0u;
    float _2100;
    float _2102;
    float _2104;
    if (_2062)
    {
        _2100 = _2055;
        _2102 = _2057;
        _2104 = _2059;
    }
    else
    {
        uint _2273 = _1968 + 7u;
        float _2289 = (dot(vec3(cbLight._m0[_1968 + 3u].xyz), vec3(_704, _705, _706)) * 0.5) + 0.5;
        float _2290 = _2289 * _2289;
        float _4321 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
        float _2291 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
        float _2292 = isnan(1.0) ? _1984 : (isnan(_1984) ? 1.0 : min(_1984, 1.0));
        _2100 = (((cbLight._m0[_2273].x * 0.3183098733425140380859375) * _2291) * _2292) + _2055;
        _2102 = (((cbLight._m0[_2273].y * 0.3183098733425140380859375) * _2291) * _2292) + _2057;
        _2104 = (((cbLight._m0[_2273].z * 0.3183098733425140380859375) * _2291) * _2292) + _2059;
    }
    uint _2107 = _1968 + 8u;
    float _2120 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1968].w)) * _707) * 0.949999988079071044921875);
    float _2121 = _2120 * _2120;
    float _2122 = cbLight._m0[_1968].x + _788;
    float _2123 = cbLight._m0[_1968].y + _789;
    float _2124 = cbLight._m0[_1968].z + _790;
    float _2128 = inversesqrt(dot(vec3(_2122, _2123, _2124), vec3(_2122, _2123, _2124)));
    float _2129 = _2128 * _2122;
    float _2130 = _2128 * _2123;
    float _2131 = _2128 * _2124;
    float _2132 = dot(vec3(_704, _705, _706), vec3(cbLight._m0[_1968].xyz));
    float _4337 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
    float _2135 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
    float _4348 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
    float _2136 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
    float _2137 = dot(vec3(_704, _705, _706), vec3(_2129, _2130, _2131));
    float _4359 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
    float _2140 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
    float _2141 = dot(vec3(cbLight._m0[_1968].xyz), vec3(_2129, _2130, _2131));
    float _4370 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
    float _2145 = _2121 * _2121;
    float _2149 = ((_2140 * _2140) * (_2145 + (-1.0))) + 1.0;
    float _2157 = exp2(log2(1.0 - (isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0)))) * 5.0);
    float _2158 = 0.959999978542327880859375 - _865;
    float _2160 = 0.959999978542327880859375 - _866;
    float _2161 = 0.959999978542327880859375 - _867;
    float _2168 = 1.0 - _2121;
    float _2179 = (0.5 / (((_2136 * ((_2135 * _2168) + _2121)) + 9.9999999392252902907785028219223e-09) + (((_2136 * _2168) + _2121) * _2135))) * _2135;
    float _4381 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
    float _2181 = (isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0))) * (_2145 / ((_2149 * _2149) * 3.141590118408203125));
    uint _2195 = _1968 + 9u;
    float _2206 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2008].w)) * _707) * 0.949999988079071044921875);
    float _2207 = _2206 * _2206;
    float _2208 = cbLight._m0[_2008].x + _788;
    float _2209 = cbLight._m0[_2008].y + _789;
    float _2210 = cbLight._m0[_2008].z + _790;
    float _2214 = inversesqrt(dot(vec3(_2208, _2209, _2210), vec3(_2208, _2209, _2210)));
    float _2215 = _2214 * _2208;
    float _2216 = _2214 * _2209;
    float _2217 = _2214 * _2210;
    float _2218 = dot(vec3(_704, _705, _706), vec3(cbLight._m0[_2008].xyz));
    float _4392 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
    float _2221 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
    float _2222 = dot(vec3(_704, _705, _706), vec3(_2215, _2216, _2217));
    float _4403 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
    float _2225 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
    float _2226 = dot(vec3(cbLight._m0[_2008].xyz), vec3(_2215, _2216, _2217));
    float _4414 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
    float _2230 = _2207 * _2207;
    float _2234 = ((_2225 * _2225) * (_2230 + (-1.0))) + 1.0;
    float _2241 = exp2(log2(1.0 - (isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0)))) * 5.0);
    float _2248 = 1.0 - _2207;
    float _2258 = (0.5 / (((_2136 * ((_2221 * _2248) + _2207)) + 9.9999999392252902907785028219223e-09) + (((_2136 * _2248) + _2207) * _2221))) * _2221;
    float _4425 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
    float _2260 = (isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0))) * (_2230 / ((_2234 * _2234) * 3.141590118408203125));
    float _2270 = (((((_2241 * _2158) + _868) * cbLight._m0[_2195].x) * _2260) * _1991) + ((((cbLight._m0[_2107].x * _1960) * ((_2157 * _2158) + _868)) * _2181) * _2004);
    float _2271 = (((((_2241 * _2160) + _870) * cbLight._m0[_2195].y) * _2260) * _1991) + ((((cbLight._m0[_2107].y * _1961) * ((_2157 * _2160) + _870)) * _2181) * _2004);
    float _2272 = (((((_2241 * _2161) + _871) * cbLight._m0[_2195].z) * _2260) * _1991) + ((((cbLight._m0[_2107].z * _1962) * ((_2157 * _2161) + _871)) * _2181) * _2004);
    float _2334;
    float _2336;
    float _2338;
    if (_2044)
    {
        _2334 = _2270;
        _2336 = _2271;
        _2338 = _2272;
    }
    else
    {
        uint _2340 = _1968 + 2u;
        uint _2344 = _1968 + 10u;
        float _2358 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2340].w)) * _707) * 0.949999988079071044921875);
        float _2359 = _2358 * _2358;
        float _2360 = cbLight._m0[_2340].x + _788;
        float _2361 = cbLight._m0[_2340].y + _789;
        float _2362 = cbLight._m0[_2340].z + _790;
        float _2366 = inversesqrt(dot(vec3(_2360, _2361, _2362), vec3(_2360, _2361, _2362)));
        float _2367 = _2366 * _2360;
        float _2368 = _2366 * _2361;
        float _2369 = _2366 * _2362;
        float _2370 = dot(vec3(_704, _705, _706), vec3(cbLight._m0[_2340].xyz));
        float _4436 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
        float _2373 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
        float _2374 = dot(vec3(_704, _705, _706), vec3(_2367, _2368, _2369));
        float _4447 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
        float _2377 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
        float _2378 = dot(vec3(cbLight._m0[_2340].xyz), vec3(_2367, _2368, _2369));
        float _4458 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
        float _2382 = _2359 * _2359;
        float _2386 = ((_2377 * _2377) * (_2382 + (-1.0))) + 1.0;
        float _2393 = exp2(log2(1.0 - (isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0)))) * 5.0);
        float _2400 = 1.0 - _2359;
        float _2410 = (0.5 / (((_2136 * ((_2373 * _2400) + _2359)) + 9.9999999392252902907785028219223e-09) + (((_2136 * _2400) + _2359) * _2373))) * _2373;
        float _4469 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
        float _2412 = (isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0))) * (_2382 / ((_2386 * _2386) * 3.141590118408203125));
        float _2413 = isnan(1.0) ? _1983 : (isnan(_1983) ? 1.0 : min(_1983, 1.0));
        _2334 = (((((_2393 * _2158) + _868) * cbLight._m0[_2344].x) * _2412) * _2413) + _2270;
        _2336 = (((((_2393 * _2160) + _870) * cbLight._m0[_2344].y) * _2412) * _2413) + _2271;
        _2338 = (((((_2393 * _2161) + _871) * cbLight._m0[_2344].z) * _2412) * _2413) + _2272;
    }
    float _2448;
    float _2450;
    float _2452;
    if (_2062)
    {
        _2448 = _2334;
        _2450 = _2336;
        _2452 = _2338;
    }
    else
    {
        uint _2459 = _1968 + 3u;
        uint _2463 = _1968 + 11u;
        float _2477 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2459].w)) * _707) * 0.949999988079071044921875);
        float _2478 = _2477 * _2477;
        float _2479 = cbLight._m0[_2459].x + _788;
        float _2480 = cbLight._m0[_2459].y + _789;
        float _2481 = cbLight._m0[_2459].z + _790;
        float _2485 = inversesqrt(dot(vec3(_2479, _2480, _2481), vec3(_2479, _2480, _2481)));
        float _2486 = _2485 * _2479;
        float _2487 = _2485 * _2480;
        float _2488 = _2485 * _2481;
        float _2489 = dot(vec3(_704, _705, _706), vec3(cbLight._m0[_2459].xyz));
        float _4485 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
        float _2492 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
        float _2493 = dot(vec3(_704, _705, _706), vec3(_2486, _2487, _2488));
        float _4496 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
        float _2496 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
        float _2497 = dot(vec3(cbLight._m0[_2459].xyz), vec3(_2486, _2487, _2488));
        float _4507 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
        float _2501 = _2478 * _2478;
        float _2505 = ((_2496 * _2496) * (_2501 + (-1.0))) + 1.0;
        float _2512 = exp2(log2(1.0 - (isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0)))) * 5.0);
        float _2519 = 1.0 - _2478;
        float _2529 = (0.5 / (((_2136 * ((_2492 * _2519) + _2478)) + 9.9999999392252902907785028219223e-09) + (((_2136 * _2519) + _2478) * _2492))) * _2492;
        float _4518 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0));
        float _2531 = (isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0))) * (_2501 / ((_2505 * _2505) * 3.141590118408203125));
        float _2532 = isnan(1.0) ? _1984 : (isnan(_1984) ? 1.0 : min(_1984, 1.0));
        _2448 = (((((_2512 * _2158) + _868) * cbLight._m0[_2463].x) * _2531) * _2532) + _2334;
        _2450 = (((((_2512 * _2160) + _870) * cbLight._m0[_2463].y) * _2531) * _2532) + _2336;
        _2452 = (((((_2512 * _2161) + _871) * cbLight._m0[_2463].z) * _2531) * _2532) + _2338;
    }
    float _2667;
    float _2669;
    float _2671;
    float _2673;
    float _2675;
    float _2677;
    if (_1966.y == 0u)
    {
        float _2607 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2608 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2607;
        float _2609 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2607;
        float _2610 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2607;
        uvec4 _2622 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2623 = _2622.x;
        uint _2634 = uint((float(_2622.y) * floor(float(uint(cbSceneParam._m0[85u].y * _806) / _2623))) + floor(float(uint(cbSceneParam._m0[85u].x * _805) / _2623)));
        float _2644 = (log2(_2610 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2645 = isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : max(_2644, 0.0));
        uint _2648 = uint(isnan(14.0) ? _2645 : (isnan(_2645) ? 14.0 : min(_2645, 14.0)));
        uvec4 _2653 = texelFetch(g_lightClusterGridBuffer, int(((_2648 << 2u) + (_2634 << 6u)) >> 2u));
        uint _2654 = _2653.x;
        uint _2655 = _2622.z;
        float _2790;
        float _2792;
        float _2794;
        float _2796;
        float _2798;
        float _2800;
        if (((((1u << ((_2655 >> 4u) & 15u)) + 4294967295u) & _2654) == 0u) || ((_2655 & 240u) == 0u))
        {
            _2790 = 0.0;
            _2792 = 0.0;
            _2794 = 0.0;
            _2796 = 0.0;
            _2798 = 0.0;
            _2800 = 0.0;
        }
        else
        {
            float _2791;
            float _2793;
            float _2795;
            float _2797;
            float _2799;
            float _2801;
            float _2952 = 0.0;
            float _2953 = 0.0;
            float _2954 = 0.0;
            float _2955 = 0.0;
            float _2956 = 0.0;
            float _2957 = 0.0;
            uint _2958 = 0u;
            uint _2967;
            bool _2968;
            for (;;)
            {
                _2967 = texelFetch(g_lightClassification, int((((_2648 << 5u) + (_2634 << 9u)) + (_2958 << 2u)) >> 2u)).x;
                _2968 = _2967 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2968)
                {
                    frontier_phi_68_pred = _2952;
                    frontier_phi_68_pred_1 = _2957;
                    frontier_phi_68_pred_2 = _2956;
                    frontier_phi_68_pred_3 = _2955;
                    frontier_phi_68_pred_4 = _2954;
                    frontier_phi_68_pred_5 = _2953;
                }
                else
                {
                    float _3097;
                    float _3098;
                    float _3099;
                    float _3100;
                    float _3101;
                    float _3102;
                    uint _3103;
                    _3097 = _2952;
                    _3098 = _2953;
                    _3099 = _2954;
                    _3100 = _2955;
                    _3101 = _2956;
                    _3102 = _2957;
                    _3103 = _2967;
                    float _3024;
                    float _3025;
                    float _3026;
                    float _3027;
                    float _3028;
                    float _3029;
                    for (;;)
                    {
                        uint _3107 = uint(findLSB(_3103)) + (_2958 << 5u);
                        uint _3104 = (_3103 + 4294967295u) & _3103;
                        uint _3109 = _3107 * 48u;
                        vec4 _3123 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3109)).x, texelFetch(g_PointLightRenderingBuffer, int(_3109 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3109 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3109 + 3u)).x));
                        uint _3129 = (_3107 * 48u) + 4u;
                        vec4 _3142 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3129)).x, texelFetch(g_PointLightRenderingBuffer, int(_3129 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3129 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3129 + 3u)).x));
                        uint _3148 = (_3107 * 48u) + 8u;
                        vec3 _3159 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3148)).x, texelFetch(g_PointLightRenderingBuffer, int(_3148 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3148 + 2u)).x));
                        float _3163 = _3123.x - _2608;
                        float _3164 = _3123.y - _2609;
                        float _3165 = _3123.z - _2610;
                        float _3166 = dot(vec3(_3163, _3164, _3165), vec3(_3163, _3164, _3165));
                        float _3169 = inversesqrt(_3166);
                        float _3170 = _3169 * _3163;
                        float _3171 = _3169 * _3164;
                        float _3172 = _3169 * _3165;
                        float _3173 = dot(vec3(_824, _827, _830), vec3(_3170, _3171, _3172));
                        float _3178 = 1.0 - (_3166 * _3123.w);
                        float _4544 = isnan(0.0) ? _3178 : (isnan(_3178) ? 0.0 : max(_3178, 0.0));
                        float _3179 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
                        float _3180 = sqrt(_3166) * _3142.w;
                        float _3183 = 1.39999997615814208984375 / (_3180 + 1.39999997615814208984375);
                        float _3184 = _3183 * _3183;
                        float _3187 = ((1.0 - _3184) * _3173) + _3184;
                        float _3190 = _3180 * _3180;
                        float _3194 = ((isnan(0.0) ? _3187 : (isnan(_3187) ? 0.0 : max(_3187, 0.0))) * _3179) / ((_3190 * 0.699999988079071044921875) + 1.0);
                        float _3198 = (-0.0) - _2608;
                        float _3199 = (-0.0) - _2609;
                        float _3200 = (-0.0) - _2610;
                        float _3204 = inversesqrt(dot(vec3(_3198, _3199, _3200), vec3(_3198, _3199, _3200)));
                        float _3205 = _3204 * _3198;
                        float _3206 = _3204 * _3199;
                        float _3207 = _3204 * _3200;
                        float _3215 = exp2(log2(1.0 / ((_3190 * 3.5) + 5.0)) * 0.25);
                        float _3216 = 1.0 - _899;
                        float _3223 = sqrt(1.0 - ((1.0 - (_3216 * _3216)) * (1.0 - (_3215 * _3215))));
                        float _3224 = _3223 * _3223;
                        float _3225 = _3224 * _3224;
                        float _3226 = _3205 + _3170;
                        float _3227 = _3206 + _3171;
                        float _3228 = _3207 + _3172;
                        float _3232 = inversesqrt(dot(vec3(_3226, _3227, _3228), vec3(_3226, _3227, _3228)));
                        float _3236 = dot(vec3(_824, _827, _830), vec3(_3205, _3206, _3207));
                        float _4560 = isnan(0.0) ? _3236 : (isnan(_3236) ? 0.0 : max(_3236, 0.0));
                        float _3239 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
                        float _3240 = dot(vec3(_824, _827, _830), vec3(_3232 * _3226, _3232 * _3227, _3232 * _3228));
                        float _4571 = isnan(0.0) ? _3240 : (isnan(_3240) ? 0.0 : max(_3240, 0.0));
                        float _3243 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
                        float _3247 = ((_3243 * _3243) * (_3225 + (-1.0))) + 1.0;
                        float _3248 = _3183 * _3224;
                        float _3249 = _3248 * _3248;
                        float _3252 = ((1.0 - _3249) * _3173) + _3249;
                        float _4582 = isnan(0.0) ? _3252 : (isnan(_3252) ? 0.0 : max(_3252, 0.0));
                        float _3253 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
                        float _3254 = 1.0 - _3224;
                        float _3264 = (0.5 / (((_3253 * ((_3239 * _3254) + _3224)) + 9.9999999392252902907785028219223e-09) + (((_3253 * _3254) + _3224) * _3239))) * _3253;
                        float _4593 = isnan(0.0) ? _3264 : (isnan(_3264) ? 0.0 : max(_3264, 0.0));
                        float _3275 = (((_3225 * 3.1415927410125732421875) * (isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0)))) / ((_3247 * _3247) * ((_3190 * 2.1991131305694580078125) + 3.141590118408203125))) * _3179;
                        _3027 = (_3194 * _3142.x) + _3100;
                        _3028 = (_3194 * _3142.y) + _3101;
                        _3029 = (_3194 * _3142.z) + _3102;
                        _3024 = (_3275 * _3159.x) + _3097;
                        _3025 = (_3275 * _3159.y) + _3098;
                        _3026 = (_3275 * _3159.z) + _3099;
                        if (_3104 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3097 = _3024;
                            _3098 = _3025;
                            _3099 = _3026;
                            _3100 = _3027;
                            _3101 = _3028;
                            _3102 = _3029;
                            _3103 = _3104;
                        }
                    }
                    frontier_phi_68_pred = _3024;
                    frontier_phi_68_pred_1 = _3029;
                    frontier_phi_68_pred_2 = _3028;
                    frontier_phi_68_pred_3 = _3027;
                    frontier_phi_68_pred_4 = _3026;
                    frontier_phi_68_pred_5 = _3025;
                }
                _2791 = frontier_phi_68_pred;
                _2801 = frontier_phi_68_pred_1;
                _2799 = frontier_phi_68_pred_2;
                _2797 = frontier_phi_68_pred_3;
                _2795 = frontier_phi_68_pred_4;
                _2793 = frontier_phi_68_pred_5;
                uint _2959 = _2958 + 1u;
                if (_2959 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2952 = _2791;
                    _2953 = _2793;
                    _2954 = _2795;
                    _2955 = _2797;
                    _2956 = _2799;
                    _2957 = _2801;
                    _2958 = _2959;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2790 = _2791;
            _2792 = _2793;
            _2794 = _2795;
            _2796 = _2797;
            _2798 = _2799;
            _2800 = _2801;
        }
        uvec4 _2804 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2805 = _2804.z;
        uint _2807 = (_2805 >> 8u) & 15u;
        float _2920;
        float _2922;
        float _2924;
        float _2926;
        float _2928;
        float _2930;
        if (((4294967295u << _2807) & _2654) == 0u)
        {
            _2920 = _2790;
            _2922 = _2792;
            _2924 = _2794;
            _2926 = _2796;
            _2928 = _2798;
            _2930 = _2800;
        }
        else
        {
            float _2945 = inversesqrt(dot(vec3(_2608, _2609, _2610), vec3(_2608, _2609, _2610)));
            float _2946 = _2945 * _2608;
            float _2947 = _2945 * _2609;
            float _2948 = _2945 * _2610;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2807 < ((_2805 >> 12u) & 15u))
            {
                float _2921;
                float _2923;
                float _2925;
                float _2927;
                float _2929;
                float _2931;
                float _3080 = _2790;
                float _3081 = _2792;
                float _3082 = _2794;
                float _3083 = _2796;
                float _3084 = _2798;
                float _3085 = _2800;
                uint _3086 = _2807;
                uint _3095;
                bool _3096;
                for (;;)
                {
                    _3095 = texelFetch(g_lightClassification, int((((_2648 << 5u) + (_2634 << 9u)) + (_3086 << 2u)) >> 2u)).x;
                    _3096 = _3095 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3096)
                    {
                        frontier_phi_79_pred = _3085;
                        frontier_phi_79_pred_1 = _3084;
                        frontier_phi_79_pred_2 = _3083;
                        frontier_phi_79_pred_3 = _3082;
                        frontier_phi_79_pred_4 = _3081;
                        frontier_phi_79_pred_5 = _3080;
                    }
                    else
                    {
                        float _3289;
                        float _3290;
                        float _3291;
                        float _3292;
                        float _3293;
                        float _3294;
                        float _3582;
                        float _3583;
                        float _3584;
                        float _3585;
                        float _3586;
                        float _3587;
                        float _3302 = _3080;
                        float _3303 = _3081;
                        float _3304 = _3082;
                        float _3305 = _3083;
                        float _3306 = _3084;
                        float _3307 = _3085;
                        uint _3308 = _3095;
                        uint _3309;
                        vec4 _3334;
                        float _3335;
                        vec4 _3350;
                        vec3 _3362;
                        vec4 _3377;
                        vec4 _3392;
                        float _3438;
                        bool _3439;
                        for (;;)
                        {
                            uint _3319 = ((_3086 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3308));
                            _3309 = (_3308 + 4294967295u) & _3308;
                            uint _3321 = _3319 * 40u;
                            _3334 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3321)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 3u)).x));
                            _3335 = _3334.w;
                            uint _3337 = (_3319 * 40u) + 4u;
                            _3350 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3337)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 3u)).x));
                            uint _3352 = (_3319 * 40u) + 8u;
                            _3362 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3352)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3352 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3352 + 2u)).x));
                            uint _3364 = (_3319 * 40u) + 16u;
                            _3377 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3364)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 3u)).x));
                            uint _3379 = (_3319 * 40u) + 20u;
                            _3392 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3379)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3379 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3379 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3379 + 3u)).x));
                            uint _3394 = (_3319 * 40u) + 24u;
                            vec4 _3407 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3394)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 3u)).x));
                            uint _3413 = (_3319 * 40u) + 28u;
                            vec4 _3426 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3413)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 3u)).x));
                            _3438 = fma(_2610, _3426.z, fma(_2609, _3426.y, _3426.x * _2608)) + _3426.w;
                            _3439 = !((fma(_2610, _3407.z, fma(_2609, _3407.y, _3407.x * _2608)) + _3407.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3439)
                            {
                                float _3466 = _3334.x - _2608;
                                float _3467 = _3334.y - _2609;
                                float _3468 = _3334.z - _2610;
                                float _3469 = dot(vec3(_3466, _3467, _3468), vec3(_3466, _3467, _3468));
                                float _3472 = inversesqrt(_3469);
                                float _3473 = _3472 * _3466;
                                float _3474 = _3472 * _3467;
                                float _3475 = _3472 * _3468;
                                float _3479 = 1.0 - (_3469 / (_3335 * _3335));
                                float _4604 = isnan(0.0) ? _3479 : (isnan(_3479) ? 0.0 : max(_3479, 0.0));
                                float _3480 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
                                float _3484 = sqrt(_3469) * _3350.w;
                                float _3486 = 1.39999997615814208984375 / (_3484 + 1.39999997615814208984375);
                                float _3487 = _3486 * _3486;
                                float _3490 = ((1.0 - _3487) * dot(vec3(_3473, _3474, _3475), vec3(_824, _827, _830))) + _3487;
                                float _3493 = _3484 * _3484;
                                float _3497 = (fma(_2610, _3377.z, fma(_2609, _3377.y, _3377.x * _2608)) + _3377.w) / _3438;
                                float _3498 = (fma(_2610, _3392.z, fma(_2609, _3392.y, _3392.x * _2608)) + _3392.w) / _3438;
                                float _3502 = 1.0 - dot(vec2(_3497, _3498), vec2(_3497, _3498));
                                float _4620 = isnan(0.0) ? _3502 : (isnan(_3502) ? 0.0 : max(_3502, 0.0));
                                float _3503 = isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0));
                                float _3504 = _3503 * (((isnan(0.0) ? _3490 : (isnan(_3490) ? 0.0 : max(_3490, 0.0))) * _3480) / ((_3493 * 0.699999988079071044921875) + 1.0));
                                float _3516 = exp2(log2(1.0 / ((_3493 * 3.5) + 5.0)) * 0.25);
                                float _3517 = 1.0 - _899;
                                float _3524 = sqrt(1.0 - ((1.0 - (_3517 * _3517)) * (1.0 - (_3516 * _3516))));
                                float _3525 = _3524 * _3524;
                                float _3526 = _3525 * _3525;
                                float _3527 = _3473 - _2946;
                                float _3528 = _3474 - _2947;
                                float _3529 = _3475 - _2948;
                                float _3533 = inversesqrt(dot(vec3(_3527, _3528, _3529), vec3(_3527, _3528, _3529)));
                                float _3537 = dot(vec3(_824, _827, _830), vec3((-0.0) - _2946, (-0.0) - _2947, (-0.0) - _2948));
                                float _4631 = isnan(0.0) ? _3537 : (isnan(_3537) ? 0.0 : max(_3537, 0.0));
                                float _3540 = isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0));
                                float _3541 = dot(vec3(_824, _827, _830), vec3(_3533 * _3527, _3533 * _3528, _3533 * _3529));
                                float _4642 = isnan(0.0) ? _3541 : (isnan(_3541) ? 0.0 : max(_3541, 0.0));
                                float _3544 = isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0));
                                float _3548 = ((_3544 * _3544) * (_3526 + (-1.0))) + 1.0;
                                float _3549 = _3486 * _3525;
                                float _3550 = _3549 * _3549;
                                float _3556 = ((1.0 - _3550) * dot(vec3(_824, _827, _830), vec3(_3473, _3474, _3475))) + _3550;
                                float _4653 = isnan(0.0) ? _3556 : (isnan(_3556) ? 0.0 : max(_3556, 0.0));
                                float _3557 = isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0));
                                float _3558 = 1.0 - _3525;
                                float _3568 = (0.5 / (((_3557 * ((_3540 * _3558) + _3525)) + 9.9999999392252902907785028219223e-09) + (((_3557 * _3558) + _3525) * _3540))) * _3557;
                                float _4664 = isnan(0.0) ? _3568 : (isnan(_3568) ? 0.0 : max(_3568, 0.0));
                                float _3578 = (_3503 * _3480) * (((_3526 * 3.1415927410125732421875) * (isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0)))) / ((_3548 * _3548) * ((_3493 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3504 * _3350.y;
                                frontier_phi_85_pred_1 = _3504 * _3350.x;
                                frontier_phi_85_pred_2 = _3578 * _3362.z;
                                frontier_phi_85_pred_3 = _3578 * _3362.y;
                                frontier_phi_85_pred_4 = _3578 * _3362.x;
                                frontier_phi_85_pred_5 = _3504 * _3350.z;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3586 = frontier_phi_85_pred;
                            _3585 = frontier_phi_85_pred_1;
                            _3584 = frontier_phi_85_pred_2;
                            _3583 = frontier_phi_85_pred_3;
                            _3582 = frontier_phi_85_pred_4;
                            _3587 = frontier_phi_85_pred_5;
                            _3292 = _3585 + _3305;
                            _3293 = _3586 + _3306;
                            _3294 = _3587 + _3307;
                            _3289 = _3582 + _3302;
                            _3290 = _3583 + _3303;
                            _3291 = _3584 + _3304;
                            if (_3309 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3302 = _3289;
                                _3303 = _3290;
                                _3304 = _3291;
                                _3305 = _3292;
                                _3306 = _3293;
                                _3307 = _3294;
                                _3308 = _3309;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3294;
                        frontier_phi_79_pred_1 = _3293;
                        frontier_phi_79_pred_2 = _3292;
                        frontier_phi_79_pred_3 = _3291;
                        frontier_phi_79_pred_4 = _3290;
                        frontier_phi_79_pred_5 = _3289;
                    }
                    _2931 = frontier_phi_79_pred;
                    _2929 = frontier_phi_79_pred_1;
                    _2927 = frontier_phi_79_pred_2;
                    _2925 = frontier_phi_79_pred_3;
                    _2923 = frontier_phi_79_pred_4;
                    _2921 = frontier_phi_79_pred_5;
                    uint _3087 = _3086 + 1u;
                    if (_3087 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3080 = _2921;
                        _3081 = _2923;
                        _3082 = _2925;
                        _3083 = _2927;
                        _3084 = _2929;
                        _3085 = _2931;
                        _3086 = _3087;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2925;
                frontier_phi_60_61_ladder_1 = _2931;
                frontier_phi_60_61_ladder_2 = _2929;
                frontier_phi_60_61_ladder_3 = _2927;
                frontier_phi_60_61_ladder_4 = _2923;
                frontier_phi_60_61_ladder_5 = _2921;
            }
            else
            {
                frontier_phi_60_61_ladder = _2794;
                frontier_phi_60_61_ladder_1 = _2800;
                frontier_phi_60_61_ladder_2 = _2798;
                frontier_phi_60_61_ladder_3 = _2796;
                frontier_phi_60_61_ladder_4 = _2792;
                frontier_phi_60_61_ladder_5 = _2790;
            }
            _2920 = frontier_phi_60_61_ladder_5;
            _2922 = frontier_phi_60_61_ladder_4;
            _2924 = frontier_phi_60_61_ladder;
            _2926 = frontier_phi_60_61_ladder_3;
            _2928 = frontier_phi_60_61_ladder_2;
            _2930 = frontier_phi_60_61_ladder_1;
        }
        float _2935 = isnan(1.0) ? _883 : (isnan(_883) ? 1.0 : min(_883, 1.0));
        _2667 = (_2935 * _2926) + _2100;
        _2669 = (_2935 * _2928) + _2102;
        _2671 = (_2935 * _2930) + _2104;
        _2673 = ((_2920 * _868) * _2935) + _2448;
        _2675 = ((_2922 * _870) * _2935) + _2450;
        _2677 = ((_2924 * _871) * _2935) + _2452;
    }
    else
    {
        _2667 = _2100;
        _2669 = _2102;
        _2671 = _2104;
        _2673 = _2448;
        _2675 = _2450;
        _2677 = _2452;
    }
    uint _2683 = _844 + uint(cbMatDynParam._m0[0u].w);
    float _2691 = ((cbMtdParam._m0[20u].x * cbMtdParam._m0[25u].x) * _634.x) * cbInstanceData._m0[_2683].x;
    float _2694 = ((cbMtdParam._m0[20u].y * cbMtdParam._m0[25u].x) * _634.y) * cbInstanceData._m0[_2683].y;
    float _2697 = ((cbMtdParam._m0[20u].z * cbMtdParam._m0[25u].x) * _634.z) * cbInstanceData._m0[_2683].z;
    float _4680 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
    float _4691 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
    float _4702 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
    float _2714 = (((isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0))) * (_2667 + ((isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0))) * _883))) + ((_2673 + ((isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0))) * _1717)) * cbPerFrame._m0[3u].x)) + _2691;
    float _2716 = (_2694 + ((_2675 + ((isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0))) * _1717)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0))) * (_2669 + ((isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0))) * _883)));
    float _2718 = (_2697 + ((_2677 + ((isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0))) * _1717)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0))) * (_2671 + ((isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0))) * _883)));
    float _2719 = isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0));
    float _2720 = isnan(0.0) ? _2716 : (isnan(_2716) ? 0.0 : max(_2716, 0.0));
    float _2721 = isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0));
    float _2727 = cbMtdParam._m0[2u].x * _2691;
    float _2728 = cbMtdParam._m0[2u].y * _2694;
    float _2729 = cbMtdParam._m0[2u].z * _2697;
    float _4728 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2731 = isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0));
    uint _2732 = _843 + 6u;
    float _2740 = _805 / cbSceneParam._m0[86u].x;
    float _2741 = _806 / cbSceneParam._m0[86u].y;
    vec4 _2755 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2740, _2741, (log2((isnan(cbSceneParam._m0[77u].w) ? _731 : (isnan(_731) ? cbSceneParam._m0[77u].w : min(_731, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2757 = _2755.x;
    float _2758 = _2755.y;
    float _2759 = _2755.z;
    float _2760 = _2755.w;
    float _2853;
    float _2855;
    float _2857;
    float _2859;
    if (_731 > cbSceneParam._m0[78u].w)
    {
        float _2815 = isnan(_731) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _731 : min(cbSceneParam._m0[80u].w, _731));
        float _2816 = _2815 / _731;
        float _2827 = _2816 * _781;
        float _2828 = _782 * _2816;
        float _2829 = (-0.0) - _2828;
        float _2831 = _2816 * _783;
        float _2833 = (cbSceneParam._m0[77u].w * _2829) / _2815;
        float _2834 = _2833 + cbSceneParam._m0[79u].w;
        float _2835 = cbSceneParam._m0[79u].w - _2828;
        float _2841 = sqrt(((_2827 * _2827) + (_2828 * _2828)) + (_2831 * _2831));
        float _2844 = (1.0 - (cbSceneParam._m0[77u].w / _2815)) * _2841;
        float _2849 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2851 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3037;
        if (abs((_2829 - _2833) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3037 = ((((_2834 > 0.0) ? exp2(_2849 * _2834) : (2.0 - exp2(_2851 * _2834))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2844;
        }
        else
        {
            float _2981 = 1.0 / cbSceneParam._m0[80u].x;
            float _2982 = isnan(_2835) ? _2834 : (isnan(_2834) ? _2835 : max(_2834, _2835));
            float _2983 = isnan(_2835) ? _2834 : (isnan(_2834) ? _2835 : min(_2834, _2835));
            float _2992 = isnan(0.0) ? _2982 : (isnan(_2982) ? 0.0 : min(_2982, 0.0));
            float _2993 = isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : min(_2983, 0.0));
            _3037 = ((abs(_2841 / _2829) * cbSceneParam._m0[80u].y) * ((((_2992 - _2993) * 2.0) - ((exp2(_2849 * (isnan(0.0) ? _2982 : (isnan(_2982) ? 0.0 : max(_2982, 0.0)))) - exp2(_2849 * (isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : max(_2983, 0.0))))) * _2981)) - ((exp2(_2851 * _2992) - exp2(_2851 * _2993)) * _2981))) + (_2844 * cbSceneParam._m0[80u].z);
        }
        vec4 _3039 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2740, _2741, 1.0), 0.0);
        float _3048 = exp2((_3037 * (-1.44269502162933349609375)) * (1.0 - _3039.w));
        float _3049 = log2(_3048);
        float _3065 = log2(_2760);
        _2853 = (exp2(_3065 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3049 * cbSceneParam._m0[78u].x)) * _3039.x) / cbSceneParam._m0[78u].x)) + _2757;
        _2855 = (exp2(_3065 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3049 * cbSceneParam._m0[78u].y)) * _3039.y) / cbSceneParam._m0[78u].y)) + _2758;
        _2857 = (exp2(_3065 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3049 * cbSceneParam._m0[78u].z)) * _3039.z) / cbSceneParam._m0[78u].z)) + _2759;
        _2859 = _3048 * _2760;
    }
    else
    {
        _2853 = _2757;
        _2855 = _2758;
        _2857 = _2759;
        _2859 = _2760;
    }
    bool _3075;
    vec4 _2869;
    vec4 _2891;
    float _2893;
    float _2897;
    float _2898;
    float _2899;
    float _2902;
    float _2905;
    float _2908;
    float _2909;
    bool _2919;
    for (;;)
    {
        _2869 = cbMatDynParam._m0[0u];
        float _2871 = roundEven(_2869.y);
        bool _2872 = _2871 == 3.0;
        float _2873 = log2(_2859);
        float _2877 = exp2(_2873 * cbSceneParam._m0[78u].x);
        float _2878 = exp2(_2873 * cbSceneParam._m0[78u].y);
        float _2879 = exp2(_2873 * cbSceneParam._m0[78u].z);
        float _2880 = _2877 * _2719;
        float _2881 = _2878 * _2720;
        float _2882 = _2879 * _2721;
        float _2889 = _794 + (-0.5);
        _2891 = cbMtdParam._m0[1u];
        _2893 = _2891.y * _2889;
        float _2896 = (_2871 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2897 = _2896 * (_2872 ? _2880 : (_2880 + (cbSceneParam._m0[72u].w * _2853)));
        _2898 = _2896 * (_2872 ? _2881 : (_2881 + (cbSceneParam._m0[72u].w * _2855)));
        _2899 = _2896 * (_2872 ? _2882 : (_2882 + (cbSceneParam._m0[72u].w * _2857)));
        _2902 = ((_2727 * _2731) * _2877) * _2896;
        _2905 = ((_2728 * _2731) * _2878) * _2896;
        _2908 = ((_2729 * _2731) * _2879) * _2896;
        _2909 = _2889 * 0.999000012874603271484375;
        _2919 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2919)
        {
            if ((cbInstanceData._m0[_843 + 7u].x + _2909) < 0.5)
            {
                _3075 = true;
                break;
            }
        }
        uint _3016 = _844 + uint(_2869.w);
        if ((cbInstanceData._m0[_3016].w < 1.0) && ((cbInstanceData._m0[_3016].w + _2909) < 0.5))
        {
            _3075 = true;
            break;
        }
        if ((_2893 + 1.0) < _2891.x)
        {
            _3075 = true;
            break;
        }
        _3075 = false;
        break;
    }
    float _3280;
    if (_3075)
    {
        discard_state = true;
        _3280 = 0.0;
    }
    else
    {
        _3280 = cbInstanceData._m0[_2732].w;
    }
    SV_Target.x = _2897;
    SV_Target.y = _2898;
    SV_Target.z = _2899;
    SV_Target.w = _3280;
    SV_Target_1.x = _2902;
    SV_Target_1.y = _2905;
    SV_Target_1.z = _2908;
    SV_Target_1.w = cbInstanceData._m0[_2732].w;
    discard_exit();
}


