#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[29];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 12) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_14;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_16;
layout(set = 0, binding = 4) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_17;
layout(set = 0, binding = 5) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_18;
layout(set = 0, binding = 6) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 9) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2DArray C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_0;
layout(set = 0, binding = 14) uniform texture2DArray C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1466;
float _4172;
float _4173;
float _4174;
float _4175;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _223 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _224 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _225 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _231 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _238 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _245 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _266 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_1) + cbTextureTilingScale._m0[5u].w));
    vec4 _285 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_1) + cbTextureTilingScale._m0[10u].w));
    float _298 = exp2(log2(_285.w * cbMtdParam._m0[25u].z) * cbMtdParam._m0[22u].x);
    float _299 = isnan(0.0) ? _298 : (isnan(_298) ? 0.0 : max(_298, 0.0));
    float _300 = isnan(1.0) ? _299 : (isnan(_299) ? 1.0 : min(_299, 1.0));
    vec4 _314 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _318 = _314.z;
    float _327 = exp2(log2(_318 * cbMtdParam._m0[22u].y) * cbMtdParam._m0[21u].y);
    float _328 = isnan(0.0) ? _327 : (isnan(_327) ? 0.0 : max(_327, 0.0));
    float _329 = isnan(1.0) ? _328 : (isnan(_328) ? 1.0 : min(_328, 1.0));
    vec4 _341 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _344 = _341.y;
    float _347 = (_341.x + (-0.02500000037252902984619140625)) * 8.0;
    float _351 = roundEven(5.0 - _347);
    float _352 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    float _353 = isnan(4.0) ? _352 : (isnan(_352) ? 4.0 : min(_352, 4.0));
    float _366 = floor(_353);
    vec4 _369 = texture(sampler2DArray(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w, _366));
    float _201[6];
    float _202[6];
    float _203[6];
    _201[0u] = cbMtdParam._m0[17u].x;
    _202[0u] = cbMtdParam._m0[17u].y;
    _203[0u] = cbMtdParam._m0[17u].z;
    _201[1u] = cbMtdParam._m0[15u].x;
    _202[1u] = cbMtdParam._m0[15u].y;
    _203[1u] = cbMtdParam._m0[15u].z;
    _201[2u] = cbMtdParam._m0[14u].x;
    _202[2u] = cbMtdParam._m0[14u].y;
    _203[2u] = cbMtdParam._m0[14u].z;
    _201[3u] = cbMtdParam._m0[13u].x;
    _202[3u] = cbMtdParam._m0[13u].y;
    _203[3u] = cbMtdParam._m0[13u].z;
    _201[4u] = cbMtdParam._m0[12u].x;
    _202[4u] = cbMtdParam._m0[12u].y;
    _203[4u] = cbMtdParam._m0[12u].z;
    _201[5u] = cbMtdParam._m0[18u].x;
    _202[5u] = cbMtdParam._m0[18u].y;
    _203[5u] = cbMtdParam._m0[18u].z;
    float _433 = roundEven(_347);
    float _434 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    uint _436 = uint(int(isnan(5.0) ? _434 : (isnan(_434) ? 5.0 : min(_434, 5.0))));
    vec4 _466 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _477 = cbMtdParam._m0[9u].x * _466.x;
    float _478 = cbMtdParam._m0[9u].y * _466.y;
    float _479 = cbMtdParam._m0[9u].z * _466.z;
    float _486 = ((((((_201[_436] - cbMtdParam._m0[10u].x) * _344) + cbMtdParam._m0[10u].x) * _369.x) - _477) * _329) + _477;
    float _487 = ((((((_202[_436] - cbMtdParam._m0[10u].y) * _344) + cbMtdParam._m0[10u].y) * _369.y) - _478) * _329) + _478;
    float _488 = ((((((_203[_436] - cbMtdParam._m0[10u].z) * _344) + cbMtdParam._m0[10u].z) * _369.z) - _479) * _329) + _479;
    float _494 = exp2(log2(_314.w) * cbMtdParam._m0[22u].w);
    vec4 _507 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _527 = (((cbMtdParam._m0[16u].x * _507.x) - _486) * _494) + _486;
    float _528 = (((cbMtdParam._m0[16u].y * _507.y) - _487) * _494) + _487;
    float _529 = (((cbMtdParam._m0[16u].z * _507.z) - _488) * _494) + _488;
    vec4 _542 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _567 = (_285.x * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].x * _542.x) - _527) * _300) + _527);
    float _569 = (_285.y * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].y * _542.y) - _528) * _300) + _528);
    float _571 = (_285.z * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].z * _542.z) - _529) * _300) + _529);
    vec4 _583 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_17, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w));
    float _602 = TEXCOORD_3.x - ((cbMtdParam._m0[23u].x * (1.0 - TEXCOORD_3.x)) * (_266.x + 0.00999999977648258209228515625));
    float _604 = _602 * (cbMtdParam._m0[23u].z + 1.0);
    float _4224 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _605 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
    float _612 = (_605 * ((cbMtdParam._m0[11u].x * _583.x) - _567)) + _567;
    float _613 = (((cbMtdParam._m0[11u].y * _583.y) - _569) * _605) + _569;
    float _614 = (((cbMtdParam._m0[11u].z * _583.z) - _571) * _605) + _571;
    float _196[5];
    float _197[5];
    _196[0u] = cbMtdParam._m0[25u].w;
    _197[0u] = cbMtdParam._m0[26u].x;
    _196[1u] = cbMtdParam._m0[27u].w;
    _197[1u] = cbMtdParam._m0[28u].x;
    _196[2u] = cbMtdParam._m0[27u].y;
    _197[2u] = cbMtdParam._m0[27u].z;
    _196[3u] = cbMtdParam._m0[26u].w;
    _197[3u] = cbMtdParam._m0[27u].x;
    _196[4u] = cbMtdParam._m0[26u].y;
    _197[4u] = cbMtdParam._m0[26u].z;
    float _652 = isnan(0.0) ? _353 : (isnan(_353) ? 0.0 : max(_353, 0.0));
    uint _654 = uint(int(isnan(4.0) ? _652 : (isnan(_652) ? 4.0 : min(_652, 4.0))));
    float _661 = ((_197[_654] - cbMtdParam._m0[21u].z) * _329) + cbMtdParam._m0[21u].z;
    float _664 = ((cbMtdParam._m0[21u].w - _661) * _494) + _661;
    float _667 = ((cbMtdParam._m0[24u].y - _664) * _300) + _664;
    float _672 = (cbMtdParam._m0[23u].y + 1.0) * _602;
    float _4245 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _673 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
    float _675 = _667 - (_667 * _673);
    vec4 _688 = texture(sampler2DArray(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w, _366));
    vec4 _705 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _707 = _705.x;
    float _708 = _705.y;
    float _713 = cbMtdParam._m0[21u].x + _705.z;
    float _716 = (((_688.z + _196[_654]) - _713) * _329) + _713;
    vec4 _728 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_1) + cbTextureTilingScale._m0[11u].w));
    float _739 = (((_728.z - _716) + cbMtdParam._m0[25u].y) * _494) + _716;
    float _745 = ((((_318 * 2.0) * _739) - _739) * cbMtdParam._m0[23u].w) + _739;
    vec4 _757 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_1) + cbTextureTilingScale._m0[12u].w));
    float _768 = (((cbMtdParam._m0[22u].z + _757.z) - _745) * _300) + _745;
    vec4 _780 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _792 = ((_780.z - _768) * _673) + _768;
    vec4 _811 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _830 = ((_688.x - _707) * _329) + _707;
    float _831 = ((_688.y - _708) * _329) + _708;
    float _836 = ((_728.x - _830) * _494) + _830;
    float _837 = ((_728.y - _831) * _494) + _831;
    float _846 = ((((_757.x - _836) * _300) + _836) * 2.0) + (-1.0);
    float _847 = ((((_757.y - _837) * _300) + _837) * 2.0) + (-1.0);
    float _848 = dot(vec2(_846, _847), vec2(_846, _847));
    float _4256 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    float _853 = sqrt(1.0 - (isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0))));
    float _862 = ((cbMtdParam._m0[24u].z * ((_314.x * 2.0) + (-1.0))) + _846) + (((((_780.x * 2.0) + (-1.0)) * TEXCOORD_3.x) * cbMtdParam._m0[24u].w) * _673);
    float _863 = ((cbMtdParam._m0[24u].z * ((_314.y * 2.0) + (-1.0))) + _847) + (((((_780.y * 2.0) + (-1.0)) * TEXCOORD_3.y) * cbMtdParam._m0[24u].w) * _673);
    float _865 = gl_FragCoord.x * 0.125;
    float _867 = gl_FragCoord.y * 0.125;
    float _877 = fma(_853, _238 * NORMAL.x, fma(_863, _245 * TANGENT.x, (_231 * _223) * _862));
    float _880 = fma(_853, _238 * NORMAL.y, fma(_863, _245 * TANGENT.y, (_231 * _224) * _862));
    float _883 = fma(_853, _238 * NORMAL.z, fma(_863, _245 * TANGENT.z, (_231 * _225) * _862));
    float _887 = inversesqrt(dot(vec3(_877, _880, _883), vec3(_877, _880, _883)));
    float _888 = _887 * _877;
    float _889 = _887 * _880;
    float _890 = _887 * _883;
    float _4267 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
    float _891 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
    float _4278 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _4289 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _4300 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _4311 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _895 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
    if (!(cbMtdParam._m0[24u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_865, _867)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _915 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _955 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _965 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _955);
    float _966 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _955);
    float _967 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _955);
    float _971 = inversesqrt(dot(vec3(_965, _966, _967), vec3(_965, _966, _967)));
    float _972 = _965 * _971;
    float _973 = _966 * _971;
    float _974 = _967 * _971;
    vec4 _976 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_865, _867));
    float _978 = _976.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1148 = sqrt(((_965 * _965) + (_966 * _966)) + (_967 * _967));
        float _1154 = (cbMatDynParam._m0[5u].x * _1148) + cbMatDynParam._m0[5u].y;
        float _4322 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1155 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
        float _1159 = (cbMatDynParam._m0[5u].z * _1148) + cbMatDynParam._m0[5u].w;
        float _4333 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0))) - _1155)) + _1155) < ((_978 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _989 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _990 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1008 = fma(_890, cbSceneParam._m0[5u].z, fma(_889, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _888));
    float _1011 = fma(_890, cbSceneParam._m0[6u].z, fma(_889, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _888));
    float _1014 = fma(_890, cbSceneParam._m0[7u].z, fma(_889, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _888));
    uint _1027 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1028 = _1027 + 9u;
    uint _1029 = _1028 + uint(cbMatDynParam._m0[0u].w);
    float _1035 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0)))) * cbInstanceData._m0[_1029].x;
    float _1036 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0)))) * cbInstanceData._m0[_1029].y;
    float _1037 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0)))) * cbInstanceData._m0[_1029].z;
    float _4344 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
    float _1038 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
    float _4355 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
    float _1039 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
    float _4366 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
    float _1040 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
    float _1041 = 1.0 - _895;
    float _1042 = _1038 * _1041;
    float _1043 = _1039 * _1041;
    float _1044 = _1040 * _1041;
    float _1049 = (_1038 + (-0.039999999105930328369140625)) * _895;
    float _1050 = (_1039 + (-0.039999999105930328369140625)) * _895;
    float _1051 = (_1040 + (-0.039999999105930328369140625)) * _895;
    float _1052 = _1049 + 0.039999999105930328369140625;
    float _1054 = _1050 + 0.039999999105930328369140625;
    float _1055 = _1051 + 0.039999999105930328369140625;
    vec4 _1064 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _989, cbSceneParam._m0[86u].y * _990));
    float _1067 = _1064.x * TEXCOORD_3.w;
    float _1068 = dot(vec3(_888, _889, _890), vec3(_972, _973, _974));
    float _1071 = _1068 * 2.0;
    float _1075 = (_1071 * _888) - _972;
    float _1076 = (_1071 * _889) - _973;
    float _1077 = (_1071 * _890) - _974;
    float _1081 = abs(dot(vec3(_972, _973, _974), vec3(_888, _889, _890)));
    float _4377 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
    float _1083 = sqrt(_891);
    float _1094 = exp2((_1083 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1083 * 3.0));
    float _1100 = (1.0 - _1094) * ((_1083 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1101 = _1094 * _1083;
    float _1129 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1133 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1137 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1465;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1190 = fma(_1137, cbModelParam._m0[26u].z, fma(_1133, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1129));
        float _1194 = fma(_1137, cbModelParam._m0[27u].z, fma(_1133, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1129));
        float _1198 = fma(_1137, cbModelParam._m0[28u].z, fma(_1133, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1129));
        float _1223 = _1129 + _888;
        float _1224 = _1133 + _889;
        float _1225 = _1137 + _890;
        float _1235 = fma(_1225, cbModelParam._m0[26u].z, fma(_1224, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1223)) - _1190;
        float _1236 = fma(_1225, cbModelParam._m0[27u].z, fma(_1224, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1223)) - _1194;
        float _1237 = fma(_1225, cbModelParam._m0[28u].z, fma(_1224, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1223)) - _1198;
        float _1241 = inversesqrt(dot(vec3(_1235, _1236, _1237), vec3(_1235, _1236, _1237)));
        float _1254 = ((_1241 * _1235) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1190 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1255 = ((_1241 * _1236) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1194 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1256 = ((_1241 * _1237) / cbModelParam._m0[34u].z) + ((((((_1198 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1259 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1254, _1255, _1256), 0.0);
        vec4 _1266 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1254, _1255, _1256), 0.0);
        vec4 _1273 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1254, _1255, _1256), 0.0);
        vec4 _1280 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1254, _1255, _1256), 0.0);
        float _1293 = exp2((_1259.w + (-0.5)) * 20.0) * 2.0;
        float _1294 = _1293 * (_1259.x + (-0.5));
        float _1295 = _1293 * (_1259.y + (-0.5));
        float _1296 = _1293 * (_1259.z + (-0.5));
        float _1303 = exp2((_1266.w + (-0.5)) * 20.0) * 2.0;
        float _1304 = _1303 * (_1266.x + (-0.5));
        float _1305 = _1303 * (_1266.y + (-0.5));
        float _1306 = _1303 * (_1266.z + (-0.5));
        float _1313 = exp2((_1273.w + (-0.5)) * 20.0) * 2.0;
        float _1314 = _1313 * (_1273.x + (-0.5));
        float _1315 = _1313 * (_1273.y + (-0.5));
        float _1316 = _1313 * (_1273.z + (-0.5));
        float _1323 = exp2((_1280.w + (-0.5)) * 20.0) * 2.0;
        float _1324 = _1323 * (_1280.x + (-0.5));
        float _1325 = _1323 * (_1280.y + (-0.5));
        float _1326 = _1323 * (_1280.z + (-0.5));
        float _1327 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1328 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1329 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1330 = _1294 * 0.5;
        float _1331 = _1304 * 0.5;
        float _1332 = _1314 * 0.5;
        float _1333 = dot(vec3(_1330, _1331, _1332), vec3(_1330, _1331, _1332));
        float _1338 = (_1333 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1333);
        float _1347 = (dot(vec3(_888, _889, _890), vec3(_1338 * _1330, _1338 * _1331, _1338 * _1332)) + 1.0) * 0.5;
        float _4403 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1357 = sqrt(((_1331 * _1331) + (_1330 * _1330)) + (_1332 * _1332)) / (_1327 + 9.9999997473787516355514526367188e-06);
        float _4414 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1358 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
        float _1359 = _1358 * 2.0;
        float _1363 = (1.0 - _1358) / (_1358 + 1.0);
        float _4425 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1364 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
        float _1373 = ((((1.0 - _1364) * (_1359 + 2.0)) * exp2(log2(isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0))) * (_1359 + 1.0))) + _1364) * _1327;
        float _1374 = _1295 * 0.5;
        float _1375 = _1305 * 0.5;
        float _1376 = _1315 * 0.5;
        float _1377 = dot(vec3(_1374, _1375, _1376), vec3(_1374, _1375, _1376));
        float _1382 = (_1377 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1377);
        float _1390 = (dot(vec3(_888, _889, _890), vec3(_1382 * _1374, _1382 * _1375, _1382 * _1376)) + 1.0) * 0.5;
        float _4436 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1399 = sqrt(((_1375 * _1375) + (_1374 * _1374)) + (_1376 * _1376)) / (_1328 + 9.9999997473787516355514526367188e-06);
        float _4447 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1400 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
        float _1401 = _1400 * 2.0;
        float _1405 = (1.0 - _1400) / (_1400 + 1.0);
        float _4458 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1406 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
        float _1415 = ((((1.0 - _1406) * (_1401 + 2.0)) * exp2(log2(isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0))) * (_1401 + 1.0))) + _1406) * _1328;
        float _1416 = _1296 * 0.5;
        float _1417 = _1306 * 0.5;
        float _1418 = _1316 * 0.5;
        float _1419 = dot(vec3(_1416, _1417, _1418), vec3(_1416, _1417, _1418));
        float _1424 = (_1419 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1419);
        float _1432 = (dot(vec3(_888, _889, _890), vec3(_1424 * _1416, _1424 * _1417, _1424 * _1418)) + 1.0) * 0.5;
        float _4469 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1441 = sqrt(((_1417 * _1417) + (_1416 * _1416)) + (_1418 * _1418)) / (_1329 + 9.9999997473787516355514526367188e-06);
        float _4480 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1442 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
        float _1443 = _1442 * 2.0;
        float _1447 = (1.0 - _1442) / (_1442 + 1.0);
        float _4491 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1448 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
        float _1457 = ((((1.0 - _1448) * (_1443 + 2.0)) * exp2(log2(isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0))) * (_1443 + 1.0))) + _1448) * _1329;
        _1465 = _1296;
        _1467 = _1295;
        _1468 = _1294;
        _1469 = _1306;
        _1470 = _1305;
        _1471 = _1304;
        _1472 = _1316;
        _1473 = _1315;
        _1474 = _1314;
        _1475 = _1329;
        _1476 = _1328;
        _1477 = _1327;
        _1478 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0)));
        _1479 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0)));
        _1480 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0)));
    }
    else
    {
        _1465 = _1466;
        _1467 = _1466;
        _1468 = _1466;
        _1469 = _1466;
        _1470 = _1466;
        _1471 = _1466;
        _1472 = _1466;
        _1473 = _1466;
        _1474 = _1466;
        _1475 = _1466;
        _1476 = _1466;
        _1477 = _1466;
        _1478 = 0.0;
        _1479 = 0.0;
        _1480 = 0.0;
    }
    float _1775;
    float _1776;
    float _1777;
    float _1778;
    float _1779;
    float _1780;
    float _1781;
    float _1782;
    float _1783;
    float _1784;
    float _1785;
    float _1786;
    float _1787;
    float _1788;
    float _1789;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1506 = fma(_1137, cbModelParam._m0[30u].z, fma(_1133, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1129));
        float _1510 = fma(_1137, cbModelParam._m0[31u].z, fma(_1133, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1129));
        float _1514 = fma(_1137, cbModelParam._m0[32u].z, fma(_1133, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1129));
        float _1537 = _1129 + _888;
        float _1538 = _1133 + _889;
        float _1539 = _1137 + _890;
        float _1549 = fma(_1539, cbModelParam._m0[30u].z, fma(_1538, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1537)) - _1506;
        float _1550 = fma(_1539, cbModelParam._m0[31u].z, fma(_1538, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1537)) - _1510;
        float _1551 = fma(_1539, cbModelParam._m0[32u].z, fma(_1538, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1537)) - _1514;
        float _1555 = inversesqrt(dot(vec3(_1549, _1550, _1551), vec3(_1549, _1550, _1551)));
        float _1568 = ((_1555 * _1549) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1506 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1569 = ((_1555 * _1550) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1510 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1570 = ((_1555 * _1551) / cbModelParam._m0[35u].z) + ((((((_1514 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1572 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1568, _1569, _1570), 0.0);
        vec4 _1579 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1568, _1569, _1570), 0.0);
        vec4 _1586 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1568, _1569, _1570), 0.0);
        vec4 _1593 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1568, _1569, _1570), 0.0);
        float _1605 = exp2((_1572.w + (-0.5)) * 20.0) * 2.0;
        float _1606 = _1605 * (_1572.x + (-0.5));
        float _1607 = _1605 * (_1572.y + (-0.5));
        float _1608 = _1605 * (_1572.z + (-0.5));
        float _1615 = exp2((_1579.w + (-0.5)) * 20.0) * 2.0;
        float _1616 = _1615 * (_1579.x + (-0.5));
        float _1617 = _1615 * (_1579.y + (-0.5));
        float _1618 = _1615 * (_1579.z + (-0.5));
        float _1625 = exp2((_1586.w + (-0.5)) * 20.0) * 2.0;
        float _1626 = _1625 * (_1586.x + (-0.5));
        float _1627 = _1625 * (_1586.y + (-0.5));
        float _1628 = _1625 * (_1586.z + (-0.5));
        float _1635 = exp2((_1593.w + (-0.5)) * 20.0) * 2.0;
        float _1636 = _1635 * (_1593.x + (-0.5));
        float _1637 = _1635 * (_1593.y + (-0.5));
        float _1638 = _1635 * (_1593.z + (-0.5));
        float _1639 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
        float _1640 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
        float _1641 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
        float _1642 = _1606 * 0.5;
        float _1643 = _1616 * 0.5;
        float _1644 = _1626 * 0.5;
        float _1645 = dot(vec3(_1642, _1643, _1644), vec3(_1642, _1643, _1644));
        float _1650 = (_1645 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1645);
        float _1658 = (dot(vec3(_888, _889, _890), vec3(_1650 * _1642, _1650 * _1643, _1650 * _1644)) + 1.0) * 0.5;
        float _4532 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
        float _1667 = sqrt(((_1643 * _1643) + (_1642 * _1642)) + (_1644 * _1644)) / (_1639 + 9.9999997473787516355514526367188e-06);
        float _4543 = isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0));
        float _1668 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
        float _1669 = _1668 * 2.0;
        float _1673 = (1.0 - _1668) / (_1668 + 1.0);
        float _4554 = isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0));
        float _1674 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
        float _1683 = ((((1.0 - _1674) * (_1669 + 2.0)) * exp2(log2(isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0))) * (_1669 + 1.0))) + _1674) * _1639;
        float _1684 = _1607 * 0.5;
        float _1685 = _1617 * 0.5;
        float _1686 = _1627 * 0.5;
        float _1687 = dot(vec3(_1684, _1685, _1686), vec3(_1684, _1685, _1686));
        float _1692 = (_1687 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1687);
        float _1700 = (dot(vec3(_888, _889, _890), vec3(_1692 * _1684, _1692 * _1685, _1692 * _1686)) + 1.0) * 0.5;
        float _4565 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
        float _1709 = sqrt(((_1685 * _1685) + (_1684 * _1684)) + (_1686 * _1686)) / (_1640 + 9.9999997473787516355514526367188e-06);
        float _4576 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
        float _1710 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
        float _1711 = _1710 * 2.0;
        float _1715 = (1.0 - _1710) / (_1710 + 1.0);
        float _4587 = isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0));
        float _1716 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
        float _1725 = ((((1.0 - _1716) * (_1711 + 2.0)) * exp2(log2(isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0))) * (_1711 + 1.0))) + _1716) * _1640;
        float _1726 = _1608 * 0.5;
        float _1727 = _1618 * 0.5;
        float _1728 = _1628 * 0.5;
        float _1729 = dot(vec3(_1726, _1727, _1728), vec3(_1726, _1727, _1728));
        float _1734 = (_1729 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1729);
        float _1742 = (dot(vec3(_888, _889, _890), vec3(_1734 * _1726, _1734 * _1727, _1734 * _1728)) + 1.0) * 0.5;
        float _4598 = isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0));
        float _1751 = sqrt(((_1727 * _1727) + (_1726 * _1726)) + (_1728 * _1728)) / (_1641 + 9.9999997473787516355514526367188e-06);
        float _4609 = isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0));
        float _1752 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
        float _1753 = _1752 * 2.0;
        float _1757 = (1.0 - _1752) / (_1752 + 1.0);
        float _4620 = isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0));
        float _1758 = isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0));
        float _1767 = ((((1.0 - _1758) * (_1753 + 2.0)) * exp2(log2(isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0))) * (_1753 + 1.0))) + _1758) * _1641;
        _1775 = _1608;
        _1776 = _1607;
        _1777 = _1606;
        _1778 = _1618;
        _1779 = _1617;
        _1780 = _1616;
        _1781 = _1628;
        _1782 = _1627;
        _1783 = _1626;
        _1784 = _1641;
        _1785 = _1640;
        _1786 = _1639;
        _1787 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0)));
        _1788 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0)));
        _1789 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0)));
    }
    else
    {
        _1775 = _1466;
        _1776 = _1466;
        _1777 = _1466;
        _1778 = _1466;
        _1779 = _1466;
        _1780 = _1466;
        _1781 = _1466;
        _1782 = _1466;
        _1783 = _1466;
        _1784 = _1466;
        _1785 = _1466;
        _1786 = _1466;
        _1787 = 0.0;
        _1788 = 0.0;
        _1789 = 0.0;
    }
    float _1799 = (cbModelParam._m0[1u].x * (_1787 - _1478)) + _1478;
    float _1800 = (cbModelParam._m0[1u].x * (_1788 - _1479)) + _1479;
    float _1801 = (cbModelParam._m0[1u].x * (_1789 - _1480)) + _1480;
    float _1822 = fma(_1801, cbSceneParam._m0[89u].z, fma(_1800, cbSceneParam._m0[89u].y, _1799 * cbSceneParam._m0[89u].x));
    float _1825 = fma(_1801, cbSceneParam._m0[90u].z, fma(_1800, cbSceneParam._m0[90u].y, _1799 * cbSceneParam._m0[90u].x));
    float _1828 = fma(_1801, cbSceneParam._m0[91u].z, fma(_1800, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1799));
    float _1843 = _1075 * 0.5;
    float _1844 = _1076 * 0.5;
    float _1845 = _1077 * 0.5;
    float _1846 = dot(vec4(_1843, _1844, _1845, 1.0), vec4(_1777, _1780, _1783, _1786));
    float _1849 = dot(vec4(_1843, _1844, _1845, 1.0), vec4(_1776, _1779, _1782, _1785));
    float _1852 = dot(vec4(_1843, _1844, _1845, 1.0), vec4(_1775, _1778, _1781, _1784));
    float _1886;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1859 = dot(vec4(_1843, _1844, _1845, 1.0), vec4(_1465, _1469, _1472, _1475));
        float _1863 = dot(vec4(_1843, _1844, _1845, 1.0), vec4(_1467, _1470, _1473, _1476));
        float _1867 = dot(vec4(_1843, _1844, _1845, 1.0), vec4(_1468, _1471, _1474, _1477));
        float _1874 = dot(vec4(cbModelParam._m0[39u]), vec4(_1843, _1844, _1845, 1.0));
        _1886 = dot(vec3(isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0)), isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0)), isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1874) ? 0.0 : (isnan(0.0) ? _1874 : max(0.0, _1874))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1886 = 1.0;
    }
    float _1897;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1888 = dot(vec4(cbModelParam._m0[40u]), vec4(_1843, _1844, _1845, 1.0));
        _1897 = dot(vec3(isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0)), isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0)), isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1888) ? 0.0 : (isnan(0.0) ? _1888 : max(0.0, _1888))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1897 = 1.0;
    }
    float _1901 = (_1897 * cbModelParam._m0[1u].x) + (_1886 * (1.0 - cbModelParam._m0[1u].x));
    float _1911 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _891);
    float _1912 = isnan(_1911) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1911 : min(cbModelParam._m0[25u].z, _1911));
    float _1992;
    float _1994;
    float _1996;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1959 = fma(_1137, cbModelParam._m0[13u].z, fma(_1133, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1129)) + cbModelParam._m0[13u].w;
        float _1963 = fma(_1137, cbModelParam._m0[14u].z, fma(_1133, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1129)) + cbModelParam._m0[14u].w;
        float _1967 = fma(_1137, cbModelParam._m0[15u].z, fma(_1133, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1129)) + cbModelParam._m0[15u].w;
        float _1970 = fma(_1077, cbModelParam._m0[13u].z, fma(_1076, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1075));
        float _1973 = fma(_1077, cbModelParam._m0[14u].z, fma(_1076, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1075));
        float _1976 = fma(_1077, cbModelParam._m0[15u].z, fma(_1076, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1075));
        float _2004;
        if (_1970 > 0.0)
        {
            _2004 = abs((1.0 - _1959) / _1970);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1970 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1959 + 1.0) / _1970);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _2004 = frontier_phi_19_17_ladder;
        }
        float _2175;
        if (_1973 > 0.0)
        {
            _2175 = abs((1.0 - _1963) / _1973);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1973 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1963 + 1.0) / _1973);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2175 = frontier_phi_28_24_ladder;
        }
        float _2470;
        if (_1976 > 0.0)
        {
            _2470 = abs((1.0 - _1967) / _1976);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1976 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1967 + 1.0) / _1976);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2470 = frontier_phi_40_35_ladder;
        }
        float _2472 = isnan(_2175) ? _2004 : (isnan(_2004) ? _2175 : min(_2004, _2175));
        float _2473 = isnan(_2470) ? _2472 : (isnan(_2472) ? _2470 : min(_2472, _2470));
        float _2477 = (_2473 * _1970) + _1959;
        float _2478 = (_2473 * _1973) + _1963;
        float _2479 = (_2473 * _1976) + _1967;
        float _2480 = _2473 * 9.9999997473787516355514526367188e-05;
        float _2482 = (-1.0) - _2480;
        float _2484 = _2480 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2479 > _2484) || ((_2479 < _2482) || ((_2478 > _2484) || ((_2478 < _2482) || ((_2477 < _2482) || (_2477 > _2484))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2624 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2479, cbModelParam._m0[9u].z, fma(_2478, cbModelParam._m0[9u].y, _2477 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2479, cbModelParam._m0[10u].z, fma(_2478, cbModelParam._m0[10u].y, _2477 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2479, cbModelParam._m0[11u].z, fma(_2478, cbModelParam._m0[11u].y, _2477 * cbModelParam._m0[11u].x))), _1912);
            frontier_phi_18_40_ladder = _2624.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2624.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2624.x * cbModelParam._m0[1u].y;
        }
        _1992 = frontier_phi_18_40_ladder_2;
        _1994 = frontier_phi_18_40_ladder_1;
        _1996 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1980 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1075, _1076, _1077), _1912);
        _1992 = _1980.x * cbModelParam._m0[1u].y;
        _1994 = _1980.y * cbModelParam._m0[1u].y;
        _1996 = _1980.z * cbModelParam._m0[1u].y;
    }
    float _2000 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _891);
    float _2001 = isnan(_2000) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2000 : min(cbModelParam._m0[25u].w, _2000));
    float _2090;
    float _2092;
    float _2094;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2054 = fma(_1137, cbModelParam._m0[21u].z, fma(_1133, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1129)) + cbModelParam._m0[21u].w;
        float _2058 = fma(_1137, cbModelParam._m0[22u].z, fma(_1133, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1129)) + cbModelParam._m0[22u].w;
        float _2062 = fma(_1137, cbModelParam._m0[23u].z, fma(_1133, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1129)) + cbModelParam._m0[23u].w;
        float _2065 = fma(_1077, cbModelParam._m0[21u].z, fma(_1076, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1075));
        float _2068 = fma(_1077, cbModelParam._m0[22u].z, fma(_1076, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1075));
        float _2071 = fma(_1077, cbModelParam._m0[23u].z, fma(_1076, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1075));
        float _2180;
        if (_2065 > 0.0)
        {
            _2180 = abs((1.0 - _2054) / _2065);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_2065 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_2054 + 1.0) / _2065);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2180 = frontier_phi_30_26_ladder;
        }
        float _2497;
        if (_2068 > 0.0)
        {
            _2497 = abs((1.0 - _2058) / _2068);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_2068 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_2058 + 1.0) / _2068);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2497 = frontier_phi_42_37_ladder;
        }
        float _2835;
        if (_2071 > 0.0)
        {
            _2835 = abs((1.0 - _2062) / _2071);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_2071 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_2062 + 1.0) / _2071);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2835 = frontier_phi_52_49_ladder;
        }
        float _2837 = isnan(_2497) ? _2180 : (isnan(_2180) ? _2497 : min(_2180, _2497));
        float _2838 = isnan(_2835) ? _2837 : (isnan(_2837) ? _2835 : min(_2837, _2835));
        float _2842 = (_2838 * _2065) + _2054;
        float _2843 = (_2838 * _2068) + _2058;
        float _2844 = (_2838 * _2071) + _2062;
        float _2845 = _2838 * 9.9999997473787516355514526367188e-05;
        float _2846 = (-1.0) - _2845;
        float _2848 = _2845 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2844 > _2848) || ((_2844 < _2846) || ((_2843 > _2848) || ((_2843 < _2846) || ((_2842 < _2846) || (_2842 > _2848))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2966 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2844, cbModelParam._m0[17u].z, fma(_2843, cbModelParam._m0[17u].y, _2842 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2844, cbModelParam._m0[18u].z, fma(_2843, cbModelParam._m0[18u].y, _2842 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2844, cbModelParam._m0[19u].z, fma(_2843, cbModelParam._m0[19u].y, _2842 * cbModelParam._m0[19u].x))), _2001);
            frontier_phi_27_52_ladder = _2966.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2966.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2966.x * cbModelParam._m0[1u].z;
        }
        _2090 = frontier_phi_27_52_ladder_2;
        _2092 = frontier_phi_27_52_ladder_1;
        _2094 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _2074 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1075, _1076, _1077), _2001);
        _2090 = _2074.x * cbModelParam._m0[1u].z;
        _2092 = _2074.y * cbModelParam._m0[1u].z;
        _2094 = _2074.z * cbModelParam._m0[1u].z;
    }
    float _2107 = (((_1100 * _1052) + _1101) * _1067) * ((cbModelParam._m0[1u].w * (_2090 - _1992)) + _1992);
    float _2109 = (((_1100 * _1054) + _1101) * _1067) * ((cbModelParam._m0[1u].w * (_2092 - _1994)) + _1994);
    float _2111 = (((_1100 * _1055) + _1101) * _1067) * ((cbModelParam._m0[1u].w * (_2094 - _1996)) + _1996);
    float _2114 = fma(_2111, cbSceneParam._m0[89u].z, fma(_2109, cbSceneParam._m0[89u].y, _2107 * cbSceneParam._m0[89u].x));
    float _2117 = fma(_2111, cbSceneParam._m0[90u].z, fma(_2109, cbSceneParam._m0[90u].y, _2107 * cbSceneParam._m0[90u].x));
    float _2120 = fma(_2111, cbSceneParam._m0[91u].z, fma(_2109, cbSceneParam._m0[91u].y, _2107 * cbSceneParam._m0[91u].x));
    float _2154 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2158 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2162 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2166 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2167 = _2154 / _2166;
    float _2168 = _2158 / _2166;
    float _2169 = _2162 / _2166;
    float _2316;
    float _2317;
    float _2318;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2196 = ((uint(_2169 > cbSceneParam._m0[59u].y) + uint(_2169 > cbSceneParam._m0[59u].x)) + uint(_2169 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2197 = _2196 + 43u;
        uint _2205 = _2196 + 44u;
        uint _2213 = _2196 + 45u;
        uint _2221 = _2196 + 46u;
        float _2232 = fma(_2166, cbSceneParam._m0[_2197].w, fma(_2162, cbSceneParam._m0[_2197].z, fma(_2158, cbSceneParam._m0[_2197].y, _2154 * cbSceneParam._m0[_2197].x)));
        float _2236 = fma(_2166, cbSceneParam._m0[_2205].w, fma(_2162, cbSceneParam._m0[_2205].z, fma(_2158, cbSceneParam._m0[_2205].y, _2154 * cbSceneParam._m0[_2205].x)));
        float _2244 = fma(_2166, cbSceneParam._m0[_2221].w, fma(_2162, cbSceneParam._m0[_2221].z, fma(_2158, cbSceneParam._m0[_2221].y, _2154 * cbSceneParam._m0[_2221].x)));
        float _2249 = cbSceneParam._m0[33u].z * _2244;
        float _2251 = cbSceneParam._m0[33u].w * _2244;
        float _2254 = fma(_2166, cbSceneParam._m0[_2213].w, fma(_2162, cbSceneParam._m0[_2213].z, fma(_2158, cbSceneParam._m0[_2213].y, _2154 * cbSceneParam._m0[_2213].x))) / _2244;
        float _2302 = (cbSceneParam._m0[33u].x - sqrt(((_2168 * _2168) + (_2167 * _2167)) + (_2169 * _2169))) * cbSceneParam._m0[33u].y;
        float _4746 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
        float _2309 = (isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2249 + _2232) / _2244, (_2251 + _2236) / _2244), _2254), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2251 + _2232) / _2244, (_2236 - _2249) / _2244), _2254), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2232 - _2249) / _2244, (_2236 - _2251) / _2244), _2254), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2232 - _2251) / _2244, (_2249 + _2236) / _2244), _2254), 0.0)).x), vec4(0.25)));
        _2316 = 1.0 - (_2309 * cbSceneParam._m0[34u].x);
        _2317 = 1.0 - (_2309 * cbSceneParam._m0[34u].y);
        _2318 = 1.0 - (_2309 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2316 = 1.0;
        _2317 = 1.0;
        _2318 = 1.0;
    }
    float _2382;
    float _2384;
    float _2386;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2370 = fma(_2166, cbSceneParam._m0[63u].w, fma(_2162, cbSceneParam._m0[63u].z, fma(_2158, cbSceneParam._m0[63u].y, _2154 * cbSceneParam._m0[63u].x)));
        float _2371 = fma(_2166, cbSceneParam._m0[60u].w, fma(_2162, cbSceneParam._m0[60u].z, fma(_2158, cbSceneParam._m0[60u].y, _2154 * cbSceneParam._m0[60u].x))) / _2370;
        float _2372 = fma(_2166, cbSceneParam._m0[61u].w, fma(_2162, cbSceneParam._m0[61u].z, fma(_2158, cbSceneParam._m0[61u].y, _2154 * cbSceneParam._m0[61u].x))) / _2370;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2371 >= cbSceneParam._m0[64u].x) && (_2372 >= cbSceneParam._m0[64u].y)) && (_2371 <= cbSceneParam._m0[64u].z)) && (_2372 <= cbSceneParam._m0[64u].w))
        {
            float _2510 = fma(_2166, cbSceneParam._m0[62u].w, fma(_2162, cbSceneParam._m0[62u].z, fma(_2158, cbSceneParam._m0[62u].y, _2154 * cbSceneParam._m0[62u].x))) / _2370;
            float _2514 = isnan(cbSceneParam._m0[41u].w) ? _2510 : (isnan(_2510) ? cbSceneParam._m0[41u].w : max(_2510, cbSceneParam._m0[41u].w));
            float _2557 = (cbSceneParam._m0[33u].x - sqrt(((_2168 * _2168) + (_2167 * _2167)) + (_2169 * _2169))) * cbSceneParam._m0[33u].y;
            float _4762 = isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0));
            float _2564 = (isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2371, cbSceneParam._m0[33u].w + _2372), _2514), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2371, _2372 - cbSceneParam._m0[33u].z), _2514), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2371 - cbSceneParam._m0[33u].z, _2372 - cbSceneParam._m0[33u].w), _2514), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2371 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2372), _2514), 0.0)).x), vec4(0.25)));
            float _2568 = 1.0 - (_2564 * cbSceneParam._m0[34u].x);
            float _2569 = 1.0 - (_2564 * cbSceneParam._m0[34u].y);
            float _2570 = 1.0 - (_2564 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2570) ? _2318 : (isnan(_2318) ? _2570 : min(_2318, _2570));
            frontier_phi_39_38_ladder_1 = isnan(_2569) ? _2317 : (isnan(_2317) ? _2569 : min(_2317, _2569));
            frontier_phi_39_38_ladder_2 = isnan(_2568) ? _2316 : (isnan(_2316) ? _2568 : min(_2316, _2568));
        }
        else
        {
            frontier_phi_39_38_ladder = _2318;
            frontier_phi_39_38_ladder_1 = _2317;
            frontier_phi_39_38_ladder_2 = _2316;
        }
        _2382 = frontier_phi_39_38_ladder_2;
        _2384 = frontier_phi_39_38_ladder_1;
        _2386 = frontier_phi_39_38_ladder;
    }
    else
    {
        _2382 = _2316;
        _2384 = _2317;
        _2386 = _2318;
    }
    uvec4 _2391 = floatBitsToUint(cbInstanceData._m0[_1027 + 5u]);
    uint _2393 = _2391.x * 14u;
    uint _2394 = _2393 + 13u;
    float _2401 = _1067 + (-1.0);
    float _2406 = (cbLight._m0[_2394].x * _2401) + 1.0;
    float _2407 = (cbLight._m0[_2394].y * _2401) + 1.0;
    float _2408 = (cbLight._m0[_2394].z * _2401) + 1.0;
    float _2409 = (cbLight._m0[_2394].w * _2401) + 1.0;
    uint _2410 = _2393 + 5u;
    float _2416 = isnan(1.0) ? _2407 : (isnan(_2407) ? 1.0 : min(_2407, 1.0));
    uint _2420 = _2393 + 4u;
    float _2429 = isnan(1.0) ? _2406 : (isnan(_2406) ? 1.0 : min(_2406, 1.0));
    uint _2433 = _2393 | 1u;
    float _2444 = dot(vec3(cbLight._m0[_2393].xyz), vec3(_888, _889, _890));
    float _2447 = dot(vec3(cbLight._m0[_2433].xyz), vec3(_888, _889, _890));
    float _4798 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
    float _4809 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
    float _2452 = (isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0))) * 0.3183098733425140380859375;
    float _2454 = (isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0))) * 0.3183098733425140380859375;
    float _2461 = ((cbLight._m0[_2410].x * _2416) * _2454) + (((cbLight._m0[_2420].x * _2382) * _2429) * _2452);
    float _2462 = ((_2416 * cbLight._m0[_2410].y) * _2454) + (((cbLight._m0[_2420].y * _2384) * _2429) * _2452);
    float _2463 = ((_2416 * cbLight._m0[_2410].z) * _2454) + (((cbLight._m0[_2420].z * _2386) * _2429) * _2452);
    uvec4 _2467 = floatBitsToUint(cbLight._m0[_2393 + 12u]);
    bool _2469 = _2467.x == 0u;
    float _2571;
    float _2573;
    float _2575;
    if (_2469)
    {
        _2571 = _2461;
        _2573 = _2462;
        _2575 = _2463;
    }
    else
    {
        uint _2579 = _2393 + 6u;
        float _2595 = (dot(vec3(cbLight._m0[_2393 + 2u].xyz), vec3(_888, _889, _890)) * 0.5) + 0.5;
        float _2596 = _2595 * _2595;
        float _4820 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
        float _2597 = isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0));
        float _2598 = isnan(1.0) ? _2408 : (isnan(_2408) ? 1.0 : min(_2408, 1.0));
        _2571 = (((cbLight._m0[_2579].x * 0.3183098733425140380859375) * _2597) * _2598) + _2461;
        _2573 = (((cbLight._m0[_2579].y * 0.3183098733425140380859375) * _2597) * _2598) + _2462;
        _2575 = (((cbLight._m0[_2579].z * 0.3183098733425140380859375) * _2597) * _2598) + _2463;
    }
    bool _2578 = _2467.y == 0u;
    float _2633;
    float _2635;
    float _2637;
    if (_2578)
    {
        _2633 = _2571;
        _2635 = _2573;
        _2637 = _2575;
    }
    else
    {
        uint _2806 = _2393 + 7u;
        float _2822 = (dot(vec3(cbLight._m0[_2393 + 3u].xyz), vec3(_888, _889, _890)) * 0.5) + 0.5;
        float _2823 = _2822 * _2822;
        float _4836 = isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : max(_2823, 0.0));
        float _2824 = isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0));
        float _2825 = isnan(1.0) ? _2409 : (isnan(_2409) ? 1.0 : min(_2409, 1.0));
        _2633 = (((cbLight._m0[_2806].x * 0.3183098733425140380859375) * _2824) * _2825) + _2571;
        _2635 = (((cbLight._m0[_2806].y * 0.3183098733425140380859375) * _2824) * _2825) + _2573;
        _2637 = (((cbLight._m0[_2806].z * 0.3183098733425140380859375) * _2824) * _2825) + _2575;
    }
    uint _2640 = _2393 + 8u;
    float _2653 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2393].w)) * _891) * 0.949999988079071044921875);
    float _2654 = _2653 * _2653;
    float _2655 = cbLight._m0[_2393].x + _972;
    float _2656 = cbLight._m0[_2393].y + _973;
    float _2657 = cbLight._m0[_2393].z + _974;
    float _2661 = inversesqrt(dot(vec3(_2655, _2656, _2657), vec3(_2655, _2656, _2657)));
    float _2662 = _2661 * _2655;
    float _2663 = _2661 * _2656;
    float _2664 = _2661 * _2657;
    float _2665 = dot(vec3(_888, _889, _890), vec3(cbLight._m0[_2393].xyz));
    float _4852 = isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0));
    float _2668 = isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0));
    float _4863 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
    float _2669 = isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0));
    float _2670 = dot(vec3(_888, _889, _890), vec3(_2662, _2663, _2664));
    float _4874 = isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : max(_2670, 0.0));
    float _2673 = isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0));
    float _2674 = dot(vec3(cbLight._m0[_2393].xyz), vec3(_2662, _2663, _2664));
    float _4885 = isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0));
    float _2678 = _2654 * _2654;
    float _2682 = ((_2673 * _2673) * (_2678 + (-1.0))) + 1.0;
    float _2690 = exp2(log2(1.0 - (isnan(1.0) ? _4885 : (isnan(_4885) ? 1.0 : min(_4885, 1.0)))) * 5.0);
    float _2691 = 0.959999978542327880859375 - _1049;
    float _2693 = 0.959999978542327880859375 - _1050;
    float _2694 = 0.959999978542327880859375 - _1051;
    float _2701 = 1.0 - _2654;
    float _2712 = (0.5 / (((_2669 * ((_2668 * _2701) + _2654)) + 9.9999999392252902907785028219223e-09) + (((_2669 * _2701) + _2654) * _2668))) * _2668;
    float _4896 = isnan(0.0) ? _2712 : (isnan(_2712) ? 0.0 : max(_2712, 0.0));
    float _2714 = (isnan(1.0) ? _4896 : (isnan(_4896) ? 1.0 : min(_4896, 1.0))) * (_2678 / ((_2682 * _2682) * 3.141590118408203125));
    uint _2728 = _2393 + 9u;
    float _2739 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2433].w)) * _891) * 0.949999988079071044921875);
    float _2740 = _2739 * _2739;
    float _2741 = cbLight._m0[_2433].x + _972;
    float _2742 = cbLight._m0[_2433].y + _973;
    float _2743 = cbLight._m0[_2433].z + _974;
    float _2747 = inversesqrt(dot(vec3(_2741, _2742, _2743), vec3(_2741, _2742, _2743)));
    float _2748 = _2747 * _2741;
    float _2749 = _2747 * _2742;
    float _2750 = _2747 * _2743;
    float _2751 = dot(vec3(_888, _889, _890), vec3(cbLight._m0[_2433].xyz));
    float _4907 = isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0));
    float _2754 = isnan(1.0) ? _4907 : (isnan(_4907) ? 1.0 : min(_4907, 1.0));
    float _2755 = dot(vec3(_888, _889, _890), vec3(_2748, _2749, _2750));
    float _4918 = isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0));
    float _2758 = isnan(1.0) ? _4918 : (isnan(_4918) ? 1.0 : min(_4918, 1.0));
    float _2759 = dot(vec3(cbLight._m0[_2433].xyz), vec3(_2748, _2749, _2750));
    float _4929 = isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0));
    float _2763 = _2740 * _2740;
    float _2767 = ((_2758 * _2758) * (_2763 + (-1.0))) + 1.0;
    float _2774 = exp2(log2(1.0 - (isnan(1.0) ? _4929 : (isnan(_4929) ? 1.0 : min(_4929, 1.0)))) * 5.0);
    float _2781 = 1.0 - _2740;
    float _2791 = (0.5 / (((_2669 * ((_2754 * _2781) + _2740)) + 9.9999999392252902907785028219223e-09) + (((_2669 * _2781) + _2740) * _2754))) * _2754;
    float _4940 = isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : max(_2791, 0.0));
    float _2793 = (isnan(1.0) ? _4940 : (isnan(_4940) ? 1.0 : min(_4940, 1.0))) * (_2763 / ((_2767 * _2767) * 3.141590118408203125));
    float _2803 = (((((_2774 * _2691) + _1052) * cbLight._m0[_2728].x) * _2793) * _2416) + ((((cbLight._m0[_2640].x * _2382) * ((_2690 * _2691) + _1052)) * _2714) * _2429);
    float _2804 = (((((_2774 * _2693) + _1054) * cbLight._m0[_2728].y) * _2793) * _2416) + ((((cbLight._m0[_2640].y * _2384) * ((_2690 * _2693) + _1054)) * _2714) * _2429);
    float _2805 = (((((_2774 * _2694) + _1055) * cbLight._m0[_2728].z) * _2793) * _2416) + ((((cbLight._m0[_2640].z * _2386) * ((_2690 * _2694) + _1055)) * _2714) * _2429);
    float _2861;
    float _2863;
    float _2865;
    if (_2469)
    {
        _2861 = _2803;
        _2863 = _2804;
        _2865 = _2805;
    }
    else
    {
        uint _2867 = _2393 + 2u;
        uint _2871 = _2393 + 10u;
        float _2885 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2867].w)) * _891) * 0.949999988079071044921875);
        float _2886 = _2885 * _2885;
        float _2887 = cbLight._m0[_2867].x + _972;
        float _2888 = cbLight._m0[_2867].y + _973;
        float _2889 = cbLight._m0[_2867].z + _974;
        float _2893 = inversesqrt(dot(vec3(_2887, _2888, _2889), vec3(_2887, _2888, _2889)));
        float _2894 = _2893 * _2887;
        float _2895 = _2893 * _2888;
        float _2896 = _2893 * _2889;
        float _2897 = dot(vec3(_888, _889, _890), vec3(cbLight._m0[_2867].xyz));
        float _4951 = isnan(0.0) ? _2897 : (isnan(_2897) ? 0.0 : max(_2897, 0.0));
        float _2900 = isnan(1.0) ? _4951 : (isnan(_4951) ? 1.0 : min(_4951, 1.0));
        float _2901 = dot(vec3(_888, _889, _890), vec3(_2894, _2895, _2896));
        float _4962 = isnan(0.0) ? _2901 : (isnan(_2901) ? 0.0 : max(_2901, 0.0));
        float _2904 = isnan(1.0) ? _4962 : (isnan(_4962) ? 1.0 : min(_4962, 1.0));
        float _2905 = dot(vec3(cbLight._m0[_2867].xyz), vec3(_2894, _2895, _2896));
        float _4973 = isnan(0.0) ? _2905 : (isnan(_2905) ? 0.0 : max(_2905, 0.0));
        float _2909 = _2886 * _2886;
        float _2913 = ((_2904 * _2904) * (_2909 + (-1.0))) + 1.0;
        float _2920 = exp2(log2(1.0 - (isnan(1.0) ? _4973 : (isnan(_4973) ? 1.0 : min(_4973, 1.0)))) * 5.0);
        float _2927 = 1.0 - _2886;
        float _2937 = (0.5 / (((_2669 * ((_2900 * _2927) + _2886)) + 9.9999999392252902907785028219223e-09) + (((_2669 * _2927) + _2886) * _2900))) * _2900;
        float _4984 = isnan(0.0) ? _2937 : (isnan(_2937) ? 0.0 : max(_2937, 0.0));
        float _2939 = (isnan(1.0) ? _4984 : (isnan(_4984) ? 1.0 : min(_4984, 1.0))) * (_2909 / ((_2913 * _2913) * 3.141590118408203125));
        float _2940 = isnan(1.0) ? _2408 : (isnan(_2408) ? 1.0 : min(_2408, 1.0));
        _2861 = (((((_2920 * _2691) + _1052) * cbLight._m0[_2871].x) * _2939) * _2940) + _2803;
        _2863 = (((((_2920 * _2693) + _1054) * cbLight._m0[_2871].y) * _2939) * _2940) + _2804;
        _2865 = (((((_2920 * _2694) + _1055) * cbLight._m0[_2871].z) * _2939) * _2940) + _2805;
    }
    float _2971;
    float _2973;
    float _2975;
    if (_2578)
    {
        _2971 = _2861;
        _2973 = _2863;
        _2975 = _2865;
    }
    else
    {
        uint _2982 = _2393 + 3u;
        uint _2986 = _2393 + 11u;
        float _3000 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2982].w)) * _891) * 0.949999988079071044921875);
        float _3001 = _3000 * _3000;
        float _3002 = cbLight._m0[_2982].x + _972;
        float _3003 = cbLight._m0[_2982].y + _973;
        float _3004 = cbLight._m0[_2982].z + _974;
        float _3008 = inversesqrt(dot(vec3(_3002, _3003, _3004), vec3(_3002, _3003, _3004)));
        float _3009 = _3008 * _3002;
        float _3010 = _3008 * _3003;
        float _3011 = _3008 * _3004;
        float _3012 = dot(vec3(_888, _889, _890), vec3(cbLight._m0[_2982].xyz));
        float _5000 = isnan(0.0) ? _3012 : (isnan(_3012) ? 0.0 : max(_3012, 0.0));
        float _3015 = isnan(1.0) ? _5000 : (isnan(_5000) ? 1.0 : min(_5000, 1.0));
        float _3016 = dot(vec3(_888, _889, _890), vec3(_3009, _3010, _3011));
        float _5011 = isnan(0.0) ? _3016 : (isnan(_3016) ? 0.0 : max(_3016, 0.0));
        float _3019 = isnan(1.0) ? _5011 : (isnan(_5011) ? 1.0 : min(_5011, 1.0));
        float _3020 = dot(vec3(cbLight._m0[_2982].xyz), vec3(_3009, _3010, _3011));
        float _5022 = isnan(0.0) ? _3020 : (isnan(_3020) ? 0.0 : max(_3020, 0.0));
        float _3024 = _3001 * _3001;
        float _3028 = ((_3019 * _3019) * (_3024 + (-1.0))) + 1.0;
        float _3035 = exp2(log2(1.0 - (isnan(1.0) ? _5022 : (isnan(_5022) ? 1.0 : min(_5022, 1.0)))) * 5.0);
        float _3042 = 1.0 - _3001;
        float _3052 = (0.5 / (((_2669 * ((_3015 * _3042) + _3001)) + 9.9999999392252902907785028219223e-09) + (((_2669 * _3042) + _3001) * _3015))) * _3015;
        float _5033 = isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : max(_3052, 0.0));
        float _3054 = (isnan(1.0) ? _5033 : (isnan(_5033) ? 1.0 : min(_5033, 1.0))) * (_3024 / ((_3028 * _3028) * 3.141590118408203125));
        float _3055 = isnan(1.0) ? _2409 : (isnan(_2409) ? 1.0 : min(_2409, 1.0));
        _2971 = (((((_3035 * _2691) + _1052) * cbLight._m0[_2986].x) * _3054) * _3055) + _2861;
        _2973 = (((((_3035 * _2693) + _1054) * cbLight._m0[_2986].y) * _3054) * _3055) + _2863;
        _2975 = (((((_3035 * _2694) + _1055) * cbLight._m0[_2986].z) * _3054) * _3055) + _2865;
    }
    float _3121;
    float _3123;
    float _3125;
    float _3127;
    float _3129;
    float _3131;
    if (_2391.y == 0u)
    {
        uvec4 _3076 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3077 = _3076.x;
        uint _3088 = uint((float(_3076.y) * floor(float(uint(cbSceneParam._m0[85u].y * _990) / _3077))) + floor(float(uint(cbSceneParam._m0[85u].x * _989) / _3077)));
        float _3098 = (log2(_2169 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3099 = isnan(0.0) ? _3098 : (isnan(_3098) ? 0.0 : max(_3098, 0.0));
        uint _3102 = uint(isnan(14.0) ? _3099 : (isnan(_3099) ? 14.0 : min(_3099, 14.0)));
        uvec4 _3107 = texelFetch(g_lightClusterGridBuffer, int(((_3102 << 2u) + (_3088 << 6u)) >> 2u));
        uint _3108 = _3107.x;
        uint _3109 = _3076.z;
        float _3223;
        float _3225;
        float _3227;
        float _3229;
        float _3231;
        float _3233;
        if (((((1u << ((_3109 >> 4u) & 15u)) + 4294967295u) & _3108) == 0u) || ((_3109 & 240u) == 0u))
        {
            _3223 = 0.0;
            _3225 = 0.0;
            _3227 = 0.0;
            _3229 = 0.0;
            _3231 = 0.0;
            _3233 = 0.0;
        }
        else
        {
            float _3224;
            float _3226;
            float _3228;
            float _3230;
            float _3232;
            float _3234;
            float _3385 = 0.0;
            float _3386 = 0.0;
            float _3387 = 0.0;
            float _3388 = 0.0;
            float _3389 = 0.0;
            float _3390 = 0.0;
            uint _3391 = 0u;
            uint _3400;
            bool _3401;
            for (;;)
            {
                _3400 = texelFetch(g_lightClassification, int((((_3102 << 5u) + (_3088 << 9u)) + (_3391 << 2u)) >> 2u)).x;
                _3401 = _3400 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3401)
                {
                    frontier_phi_73_pred = _3390;
                    frontier_phi_73_pred_1 = _3389;
                    frontier_phi_73_pred_2 = _3388;
                    frontier_phi_73_pred_3 = _3387;
                    frontier_phi_73_pred_4 = _3386;
                    frontier_phi_73_pred_5 = _3385;
                }
                else
                {
                    float _3530;
                    float _3531;
                    float _3532;
                    float _3533;
                    float _3534;
                    float _3535;
                    uint _3536;
                    _3530 = _3385;
                    _3531 = _3386;
                    _3532 = _3387;
                    _3533 = _3388;
                    _3534 = _3389;
                    _3535 = _3390;
                    _3536 = _3400;
                    float _3457;
                    float _3458;
                    float _3459;
                    float _3460;
                    float _3461;
                    float _3462;
                    for (;;)
                    {
                        uint _3540 = uint(findLSB(_3536)) + (_3391 << 5u);
                        uint _3537 = (_3536 + 4294967295u) & _3536;
                        uint _3542 = _3540 * 48u;
                        vec4 _3556 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3542)).x, texelFetch(g_PointLightRenderingBuffer, int(_3542 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3542 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3542 + 3u)).x));
                        uint _3562 = (_3540 * 48u) + 4u;
                        vec4 _3575 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3562)).x, texelFetch(g_PointLightRenderingBuffer, int(_3562 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3562 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3562 + 3u)).x));
                        uint _3581 = (_3540 * 48u) + 8u;
                        vec3 _3592 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3581)).x, texelFetch(g_PointLightRenderingBuffer, int(_3581 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3581 + 2u)).x));
                        float _3596 = _3556.x - _2167;
                        float _3597 = _3556.y - _2168;
                        float _3598 = _3556.z - _2169;
                        float _3599 = dot(vec3(_3596, _3597, _3598), vec3(_3596, _3597, _3598));
                        float _3602 = inversesqrt(_3599);
                        float _3603 = _3602 * _3596;
                        float _3604 = _3602 * _3597;
                        float _3605 = _3602 * _3598;
                        float _3606 = dot(vec3(_1008, _1011, _1014), vec3(_3603, _3604, _3605));
                        float _3611 = 1.0 - (_3599 * _3556.w);
                        float _5059 = isnan(0.0) ? _3611 : (isnan(_3611) ? 0.0 : max(_3611, 0.0));
                        float _3612 = isnan(1.0) ? _5059 : (isnan(_5059) ? 1.0 : min(_5059, 1.0));
                        float _3613 = sqrt(_3599) * _3575.w;
                        float _3616 = 1.39999997615814208984375 / (_3613 + 1.39999997615814208984375);
                        float _3617 = _3616 * _3616;
                        float _3620 = ((1.0 - _3617) * _3606) + _3617;
                        float _3623 = _3613 * _3613;
                        float _3627 = ((isnan(0.0) ? _3620 : (isnan(_3620) ? 0.0 : max(_3620, 0.0))) * _3612) / ((_3623 * 0.699999988079071044921875) + 1.0);
                        float _3631 = (-0.0) - _2167;
                        float _3632 = (-0.0) - _2168;
                        float _3633 = (-0.0) - _2169;
                        float _3637 = inversesqrt(dot(vec3(_3631, _3632, _3633), vec3(_3631, _3632, _3633)));
                        float _3638 = _3637 * _3631;
                        float _3639 = _3637 * _3632;
                        float _3640 = _3637 * _3633;
                        float _3647 = exp2(log2(1.0 / ((_3623 * 3.5) + 5.0)) * 0.25);
                        float _3648 = 1.0 - _1083;
                        float _3655 = sqrt(1.0 - ((1.0 - (_3648 * _3648)) * (1.0 - (_3647 * _3647))));
                        float _3656 = _3655 * _3655;
                        float _3657 = _3656 * _3656;
                        float _3658 = _3638 + _3603;
                        float _3659 = _3639 + _3604;
                        float _3660 = _3640 + _3605;
                        float _3664 = inversesqrt(dot(vec3(_3658, _3659, _3660), vec3(_3658, _3659, _3660)));
                        float _3668 = dot(vec3(_1008, _1011, _1014), vec3(_3638, _3639, _3640));
                        float _5075 = isnan(0.0) ? _3668 : (isnan(_3668) ? 0.0 : max(_3668, 0.0));
                        float _3671 = isnan(1.0) ? _5075 : (isnan(_5075) ? 1.0 : min(_5075, 1.0));
                        float _3672 = dot(vec3(_1008, _1011, _1014), vec3(_3664 * _3658, _3664 * _3659, _3664 * _3660));
                        float _5086 = isnan(0.0) ? _3672 : (isnan(_3672) ? 0.0 : max(_3672, 0.0));
                        float _3675 = isnan(1.0) ? _5086 : (isnan(_5086) ? 1.0 : min(_5086, 1.0));
                        float _3679 = ((_3675 * _3675) * (_3657 + (-1.0))) + 1.0;
                        float _3680 = _3616 * _3656;
                        float _3681 = _3680 * _3680;
                        float _3684 = ((1.0 - _3681) * _3606) + _3681;
                        float _5097 = isnan(0.0) ? _3684 : (isnan(_3684) ? 0.0 : max(_3684, 0.0));
                        float _3685 = isnan(1.0) ? _5097 : (isnan(_5097) ? 1.0 : min(_5097, 1.0));
                        float _3686 = 1.0 - _3656;
                        float _3696 = (0.5 / (((_3685 * ((_3671 * _3686) + _3656)) + 9.9999999392252902907785028219223e-09) + (((_3685 * _3686) + _3656) * _3671))) * _3685;
                        float _5108 = isnan(0.0) ? _3696 : (isnan(_3696) ? 0.0 : max(_3696, 0.0));
                        float _3707 = (((_3657 * 3.1415927410125732421875) * (isnan(1.0) ? _5108 : (isnan(_5108) ? 1.0 : min(_5108, 1.0)))) / ((_3679 * _3679) * ((_3623 * 2.1991131305694580078125) + 3.141590118408203125))) * _3612;
                        _3460 = (_3627 * _3575.x) + _3533;
                        _3461 = (_3627 * _3575.y) + _3534;
                        _3462 = (_3627 * _3575.z) + _3535;
                        _3457 = (_3707 * _3592.x) + _3530;
                        _3458 = (_3707 * _3592.y) + _3531;
                        _3459 = (_3707 * _3592.z) + _3532;
                        if (_3537 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3530 = _3457;
                            _3531 = _3458;
                            _3532 = _3459;
                            _3533 = _3460;
                            _3534 = _3461;
                            _3535 = _3462;
                            _3536 = _3537;
                        }
                    }
                    frontier_phi_73_pred = _3462;
                    frontier_phi_73_pred_1 = _3461;
                    frontier_phi_73_pred_2 = _3460;
                    frontier_phi_73_pred_3 = _3459;
                    frontier_phi_73_pred_4 = _3458;
                    frontier_phi_73_pred_5 = _3457;
                }
                _3234 = frontier_phi_73_pred;
                _3232 = frontier_phi_73_pred_1;
                _3230 = frontier_phi_73_pred_2;
                _3228 = frontier_phi_73_pred_3;
                _3226 = frontier_phi_73_pred_4;
                _3224 = frontier_phi_73_pred_5;
                uint _3392 = _3391 + 1u;
                if (_3392 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3385 = _3224;
                    _3386 = _3226;
                    _3387 = _3228;
                    _3388 = _3230;
                    _3389 = _3232;
                    _3390 = _3234;
                    _3391 = _3392;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3223 = _3224;
            _3225 = _3226;
            _3227 = _3228;
            _3229 = _3230;
            _3231 = _3232;
            _3233 = _3234;
        }
        uvec4 _3237 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3238 = _3237.z;
        uint _3240 = (_3238 >> 8u) & 15u;
        float _3353;
        float _3355;
        float _3357;
        float _3359;
        float _3361;
        float _3363;
        if (((4294967295u << _3240) & _3108) == 0u)
        {
            _3353 = _3223;
            _3355 = _3225;
            _3357 = _3227;
            _3359 = _3229;
            _3361 = _3231;
            _3363 = _3233;
        }
        else
        {
            float _3378 = inversesqrt(dot(vec3(_2167, _2168, _2169), vec3(_2167, _2168, _2169)));
            float _3379 = _3378 * _2167;
            float _3380 = _3378 * _2168;
            float _3381 = _3378 * _2169;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_3240 < ((_3238 >> 12u) & 15u))
            {
                float _3354;
                float _3356;
                float _3358;
                float _3360;
                float _3362;
                float _3364;
                float _3513 = _3223;
                float _3514 = _3225;
                float _3515 = _3227;
                float _3516 = _3229;
                float _3517 = _3231;
                float _3518 = _3233;
                uint _3519 = _3240;
                uint _3528;
                bool _3529;
                for (;;)
                {
                    _3528 = texelFetch(g_lightClassification, int((((_3102 << 5u) + (_3088 << 9u)) + (_3519 << 2u)) >> 2u)).x;
                    _3529 = _3528 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3529)
                    {
                        frontier_phi_84_pred = _3518;
                        frontier_phi_84_pred_1 = _3517;
                        frontier_phi_84_pred_2 = _3516;
                        frontier_phi_84_pred_3 = _3515;
                        frontier_phi_84_pred_4 = _3514;
                        frontier_phi_84_pred_5 = _3513;
                    }
                    else
                    {
                        float _3721;
                        float _3722;
                        float _3723;
                        float _3724;
                        float _3725;
                        float _3726;
                        float _4014;
                        float _4015;
                        float _4016;
                        float _4017;
                        float _4018;
                        float _4019;
                        float _3734 = _3513;
                        float _3735 = _3514;
                        float _3736 = _3515;
                        float _3737 = _3516;
                        float _3738 = _3517;
                        float _3739 = _3518;
                        uint _3740 = _3528;
                        uint _3741;
                        vec4 _3766;
                        float _3767;
                        vec4 _3782;
                        vec3 _3794;
                        vec4 _3809;
                        vec4 _3824;
                        float _3870;
                        bool _3871;
                        for (;;)
                        {
                            uint _3751 = ((_3519 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3740));
                            _3741 = (_3740 + 4294967295u) & _3740;
                            uint _3753 = _3751 * 40u;
                            _3766 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3753)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3753 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3753 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3753 + 3u)).x));
                            _3767 = _3766.w;
                            uint _3769 = (_3751 * 40u) + 4u;
                            _3782 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3769)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3769 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3769 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3769 + 3u)).x));
                            uint _3784 = (_3751 * 40u) + 8u;
                            _3794 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3784)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3784 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3784 + 2u)).x));
                            uint _3796 = (_3751 * 40u) + 16u;
                            _3809 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3796)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3796 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3796 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3796 + 3u)).x));
                            uint _3811 = (_3751 * 40u) + 20u;
                            _3824 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3811)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3811 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3811 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3811 + 3u)).x));
                            uint _3826 = (_3751 * 40u) + 24u;
                            vec4 _3839 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3826)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3826 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3826 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3826 + 3u)).x));
                            uint _3845 = (_3751 * 40u) + 28u;
                            vec4 _3858 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3845)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3845 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3845 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3845 + 3u)).x));
                            _3870 = fma(_2169, _3858.z, fma(_2168, _3858.y, _3858.x * _2167)) + _3858.w;
                            _3871 = !((fma(_2169, _3839.z, fma(_2168, _3839.y, _3839.x * _2167)) + _3839.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3871)
                            {
                                float _3898 = _3766.x - _2167;
                                float _3899 = _3766.y - _2168;
                                float _3900 = _3766.z - _2169;
                                float _3901 = dot(vec3(_3898, _3899, _3900), vec3(_3898, _3899, _3900));
                                float _3904 = inversesqrt(_3901);
                                float _3905 = _3904 * _3898;
                                float _3906 = _3904 * _3899;
                                float _3907 = _3904 * _3900;
                                float _3911 = 1.0 - (_3901 / (_3767 * _3767));
                                float _5119 = isnan(0.0) ? _3911 : (isnan(_3911) ? 0.0 : max(_3911, 0.0));
                                float _3912 = isnan(1.0) ? _5119 : (isnan(_5119) ? 1.0 : min(_5119, 1.0));
                                float _3916 = sqrt(_3901) * _3782.w;
                                float _3918 = 1.39999997615814208984375 / (_3916 + 1.39999997615814208984375);
                                float _3919 = _3918 * _3918;
                                float _3922 = ((1.0 - _3919) * dot(vec3(_3905, _3906, _3907), vec3(_1008, _1011, _1014))) + _3919;
                                float _3925 = _3916 * _3916;
                                float _3929 = (fma(_2169, _3809.z, fma(_2168, _3809.y, _3809.x * _2167)) + _3809.w) / _3870;
                                float _3930 = (fma(_2169, _3824.z, fma(_2168, _3824.y, _3824.x * _2167)) + _3824.w) / _3870;
                                float _3934 = 1.0 - dot(vec2(_3929, _3930), vec2(_3929, _3930));
                                float _5135 = isnan(0.0) ? _3934 : (isnan(_3934) ? 0.0 : max(_3934, 0.0));
                                float _3935 = isnan(1.0) ? _5135 : (isnan(_5135) ? 1.0 : min(_5135, 1.0));
                                float _3936 = _3935 * (((isnan(0.0) ? _3922 : (isnan(_3922) ? 0.0 : max(_3922, 0.0))) * _3912) / ((_3925 * 0.699999988079071044921875) + 1.0));
                                float _3948 = exp2(log2(1.0 / ((_3925 * 3.5) + 5.0)) * 0.25);
                                float _3949 = 1.0 - _1083;
                                float _3956 = sqrt(1.0 - ((1.0 - (_3949 * _3949)) * (1.0 - (_3948 * _3948))));
                                float _3957 = _3956 * _3956;
                                float _3958 = _3957 * _3957;
                                float _3959 = _3905 - _3379;
                                float _3960 = _3906 - _3380;
                                float _3961 = _3907 - _3381;
                                float _3965 = inversesqrt(dot(vec3(_3959, _3960, _3961), vec3(_3959, _3960, _3961)));
                                float _3969 = dot(vec3(_1008, _1011, _1014), vec3((-0.0) - _3379, (-0.0) - _3380, (-0.0) - _3381));
                                float _5146 = isnan(0.0) ? _3969 : (isnan(_3969) ? 0.0 : max(_3969, 0.0));
                                float _3972 = isnan(1.0) ? _5146 : (isnan(_5146) ? 1.0 : min(_5146, 1.0));
                                float _3973 = dot(vec3(_1008, _1011, _1014), vec3(_3965 * _3959, _3965 * _3960, _3965 * _3961));
                                float _5157 = isnan(0.0) ? _3973 : (isnan(_3973) ? 0.0 : max(_3973, 0.0));
                                float _3976 = isnan(1.0) ? _5157 : (isnan(_5157) ? 1.0 : min(_5157, 1.0));
                                float _3980 = ((_3976 * _3976) * (_3958 + (-1.0))) + 1.0;
                                float _3981 = _3918 * _3957;
                                float _3982 = _3981 * _3981;
                                float _3988 = ((1.0 - _3982) * dot(vec3(_1008, _1011, _1014), vec3(_3905, _3906, _3907))) + _3982;
                                float _5168 = isnan(0.0) ? _3988 : (isnan(_3988) ? 0.0 : max(_3988, 0.0));
                                float _3989 = isnan(1.0) ? _5168 : (isnan(_5168) ? 1.0 : min(_5168, 1.0));
                                float _3990 = 1.0 - _3957;
                                float _4000 = (0.5 / (((_3989 * ((_3972 * _3990) + _3957)) + 9.9999999392252902907785028219223e-09) + (((_3989 * _3990) + _3957) * _3972))) * _3989;
                                float _5179 = isnan(0.0) ? _4000 : (isnan(_4000) ? 0.0 : max(_4000, 0.0));
                                float _4010 = (_3935 * _3912) * (((_3958 * 3.1415927410125732421875) * (isnan(1.0) ? _5179 : (isnan(_5179) ? 1.0 : min(_5179, 1.0)))) / ((_3980 * _3980) * ((_3925 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3936 * _3782.z;
                                frontier_phi_90_pred_1 = _3936 * _3782.y;
                                frontier_phi_90_pred_2 = _3936 * _3782.x;
                                frontier_phi_90_pred_3 = _4010 * _3794.z;
                                frontier_phi_90_pred_4 = _4010 * _3794.y;
                                frontier_phi_90_pred_5 = _4010 * _3794.x;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _4019 = frontier_phi_90_pred;
                            _4018 = frontier_phi_90_pred_1;
                            _4017 = frontier_phi_90_pred_2;
                            _4016 = frontier_phi_90_pred_3;
                            _4015 = frontier_phi_90_pred_4;
                            _4014 = frontier_phi_90_pred_5;
                            _3724 = _4017 + _3737;
                            _3725 = _4018 + _3738;
                            _3726 = _4019 + _3739;
                            _3721 = _4014 + _3734;
                            _3722 = _4015 + _3735;
                            _3723 = _4016 + _3736;
                            if (_3741 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3734 = _3721;
                                _3735 = _3722;
                                _3736 = _3723;
                                _3737 = _3724;
                                _3738 = _3725;
                                _3739 = _3726;
                                _3740 = _3741;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3726;
                        frontier_phi_84_pred_1 = _3725;
                        frontier_phi_84_pred_2 = _3724;
                        frontier_phi_84_pred_3 = _3723;
                        frontier_phi_84_pred_4 = _3722;
                        frontier_phi_84_pred_5 = _3721;
                    }
                    _3364 = frontier_phi_84_pred;
                    _3362 = frontier_phi_84_pred_1;
                    _3360 = frontier_phi_84_pred_2;
                    _3358 = frontier_phi_84_pred_3;
                    _3356 = frontier_phi_84_pred_4;
                    _3354 = frontier_phi_84_pred_5;
                    uint _3520 = _3519 + 1u;
                    if (_3520 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3513 = _3354;
                        _3514 = _3356;
                        _3515 = _3358;
                        _3516 = _3360;
                        _3517 = _3362;
                        _3518 = _3364;
                        _3519 = _3520;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _3360;
                frontier_phi_65_66_ladder_1 = _3364;
                frontier_phi_65_66_ladder_2 = _3362;
                frontier_phi_65_66_ladder_3 = _3358;
                frontier_phi_65_66_ladder_4 = _3356;
                frontier_phi_65_66_ladder_5 = _3354;
            }
            else
            {
                frontier_phi_65_66_ladder = _3229;
                frontier_phi_65_66_ladder_1 = _3233;
                frontier_phi_65_66_ladder_2 = _3231;
                frontier_phi_65_66_ladder_3 = _3227;
                frontier_phi_65_66_ladder_4 = _3225;
                frontier_phi_65_66_ladder_5 = _3223;
            }
            _3353 = frontier_phi_65_66_ladder_5;
            _3355 = frontier_phi_65_66_ladder_4;
            _3357 = frontier_phi_65_66_ladder_3;
            _3359 = frontier_phi_65_66_ladder;
            _3361 = frontier_phi_65_66_ladder_2;
            _3363 = frontier_phi_65_66_ladder_1;
        }
        float _3368 = isnan(1.0) ? _1067 : (isnan(_1067) ? 1.0 : min(_1067, 1.0));
        _3121 = (_3368 * _3359) + _2633;
        _3123 = (_3368 * _3361) + _2635;
        _3125 = (_3368 * _3363) + _2637;
        _3127 = ((_3353 * _1052) * _3368) + _2971;
        _3129 = ((_3355 * _1054) * _3368) + _2973;
        _3131 = ((_3357 * _1055) * _3368) + _2975;
    }
    else
    {
        _3121 = _2633;
        _3123 = _2635;
        _3125 = _2637;
        _3127 = _2971;
        _3129 = _2973;
        _3131 = _2975;
    }
    uint _3137 = _1028 + uint(cbMatDynParam._m0[0u].w);
    float _3145 = ((cbMtdParam._m0[20u].x * cbMtdParam._m0[25u].x) * _811.x) * cbInstanceData._m0[_3137].x;
    float _3148 = ((cbMtdParam._m0[20u].y * cbMtdParam._m0[25u].x) * _811.y) * cbInstanceData._m0[_3137].y;
    float _3151 = ((cbMtdParam._m0[20u].z * cbMtdParam._m0[25u].x) * _811.z) * cbInstanceData._m0[_3137].z;
    float _5195 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
    float _5206 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
    float _5217 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
    float _3168 = (((isnan(1.0) ? _5195 : (isnan(_5195) ? 1.0 : min(_5195, 1.0))) * (_3121 + ((isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0))) * _1067))) + ((_3127 + ((isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0))) * _1901)) * cbPerFrame._m0[3u].x)) + _3145;
    float _3170 = (_3148 + ((_3129 + ((isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0))) * _1901)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5206 : (isnan(_5206) ? 1.0 : min(_5206, 1.0))) * (_3123 + ((isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0))) * _1067)));
    float _3172 = (_3151 + ((_3131 + ((isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0))) * _1901)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5217 : (isnan(_5217) ? 1.0 : min(_5217, 1.0))) * (_3125 + ((isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0))) * _1067)));
    float _3173 = isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : max(_3168, 0.0));
    float _3174 = isnan(0.0) ? _3170 : (isnan(_3170) ? 0.0 : max(_3170, 0.0));
    float _3175 = isnan(0.0) ? _3172 : (isnan(_3172) ? 0.0 : max(_3172, 0.0));
    float _3181 = cbMtdParam._m0[2u].x * _3145;
    float _3182 = cbMtdParam._m0[2u].y * _3148;
    float _3183 = cbMtdParam._m0[2u].z * _3151;
    float _5243 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _3185 = isnan(1.0) ? _5243 : (isnan(_5243) ? 1.0 : min(_5243, 1.0));
    uint _3186 = _1027 + 6u;
    float _3194 = _989 / cbSceneParam._m0[86u].x;
    float _3195 = _990 / cbSceneParam._m0[86u].y;
    vec4 _3209 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3194, _3195, (log2((isnan(cbSceneParam._m0[77u].w) ? _915 : (isnan(_915) ? cbSceneParam._m0[77u].w : min(_915, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3211 = _3209.x;
    float _3212 = _3209.y;
    float _3213 = _3209.z;
    float _3214 = _3209.w;
    float _3286;
    float _3288;
    float _3290;
    float _3292;
    if (_915 > cbSceneParam._m0[78u].w)
    {
        float _3248 = isnan(_915) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _915 : min(cbSceneParam._m0[80u].w, _915));
        float _3249 = _3248 / _915;
        float _3260 = _3249 * _965;
        float _3261 = _966 * _3249;
        float _3262 = (-0.0) - _3261;
        float _3264 = _3249 * _967;
        float _3266 = (cbSceneParam._m0[77u].w * _3262) / _3248;
        float _3267 = _3266 + cbSceneParam._m0[79u].w;
        float _3268 = cbSceneParam._m0[79u].w - _3261;
        float _3274 = sqrt(((_3260 * _3260) + (_3261 * _3261)) + (_3264 * _3264));
        float _3277 = (1.0 - (cbSceneParam._m0[77u].w / _3248)) * _3274;
        float _3282 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3284 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3470;
        if (abs((_3262 - _3266) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3470 = ((((_3267 > 0.0) ? exp2(_3282 * _3267) : (2.0 - exp2(_3284 * _3267))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3277;
        }
        else
        {
            float _3414 = 1.0 / cbSceneParam._m0[80u].x;
            float _3415 = isnan(_3268) ? _3267 : (isnan(_3267) ? _3268 : max(_3267, _3268));
            float _3416 = isnan(_3268) ? _3267 : (isnan(_3267) ? _3268 : min(_3267, _3268));
            float _3425 = isnan(0.0) ? _3415 : (isnan(_3415) ? 0.0 : min(_3415, 0.0));
            float _3426 = isnan(0.0) ? _3416 : (isnan(_3416) ? 0.0 : min(_3416, 0.0));
            _3470 = ((abs(_3274 / _3262) * cbSceneParam._m0[80u].y) * ((((_3425 - _3426) * 2.0) - ((exp2(_3282 * (isnan(0.0) ? _3415 : (isnan(_3415) ? 0.0 : max(_3415, 0.0)))) - exp2(_3282 * (isnan(0.0) ? _3416 : (isnan(_3416) ? 0.0 : max(_3416, 0.0))))) * _3414)) - ((exp2(_3284 * _3425) - exp2(_3284 * _3426)) * _3414))) + (_3277 * cbSceneParam._m0[80u].z);
        }
        vec4 _3472 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3194, _3195, 1.0), 0.0);
        float _3481 = exp2((_3470 * (-1.44269502162933349609375)) * (1.0 - _3472.w));
        float _3482 = log2(_3481);
        float _3498 = log2(_3214);
        _3286 = (exp2(_3498 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3482 * cbSceneParam._m0[78u].x)) * _3472.x) / cbSceneParam._m0[78u].x)) + _3211;
        _3288 = (exp2(_3498 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3482 * cbSceneParam._m0[78u].y)) * _3472.y) / cbSceneParam._m0[78u].y)) + _3212;
        _3290 = (exp2(_3498 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3482 * cbSceneParam._m0[78u].z)) * _3472.z) / cbSceneParam._m0[78u].z)) + _3213;
        _3292 = _3481 * _3214;
    }
    else
    {
        _3286 = _3211;
        _3288 = _3212;
        _3290 = _3213;
        _3292 = _3214;
    }
    bool _3508;
    vec4 _3302;
    vec4 _3324;
    float _3326;
    float _3330;
    float _3331;
    float _3332;
    float _3335;
    float _3338;
    float _3341;
    float _3342;
    bool _3352;
    for (;;)
    {
        _3302 = cbMatDynParam._m0[0u];
        float _3304 = roundEven(_3302.y);
        bool _3305 = _3304 == 3.0;
        float _3306 = log2(_3292);
        float _3310 = exp2(_3306 * cbSceneParam._m0[78u].x);
        float _3311 = exp2(_3306 * cbSceneParam._m0[78u].y);
        float _3312 = exp2(_3306 * cbSceneParam._m0[78u].z);
        float _3313 = _3310 * _3173;
        float _3314 = _3311 * _3174;
        float _3315 = _3312 * _3175;
        float _3322 = _978 + (-0.5);
        _3324 = cbMtdParam._m0[1u];
        _3326 = _3324.y * _3322;
        float _3329 = (_3304 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3330 = _3329 * (_3305 ? _3313 : (_3313 + (cbSceneParam._m0[72u].w * _3286)));
        _3331 = _3329 * (_3305 ? _3314 : (_3314 + (cbSceneParam._m0[72u].w * _3288)));
        _3332 = _3329 * (_3305 ? _3315 : (_3315 + (cbSceneParam._m0[72u].w * _3290)));
        _3335 = ((_3181 * _3185) * _3310) * _3329;
        _3338 = ((_3182 * _3185) * _3311) * _3329;
        _3341 = ((_3183 * _3185) * _3312) * _3329;
        _3342 = _3322 * 0.999000012874603271484375;
        _3352 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3352)
        {
            if ((cbInstanceData._m0[_1027 + 7u].x + _3342) < 0.5)
            {
                _3508 = true;
                break;
            }
        }
        uint _3449 = _1028 + uint(_3302.w);
        if ((cbInstanceData._m0[_3449].w < 1.0) && ((cbInstanceData._m0[_3449].w + _3342) < 0.5))
        {
            _3508 = true;
            break;
        }
        if ((_3326 + 1.0) < _3324.x)
        {
            _3508 = true;
            break;
        }
        _3508 = false;
        break;
    }
    float _3712;
    if (_3508)
    {
        discard_state = true;
        _3712 = 0.0;
    }
    else
    {
        _3712 = cbInstanceData._m0[_3186].w;
    }
    SV_Target.x = _3330;
    SV_Target.y = _3331;
    SV_Target.z = _3332;
    SV_Target.w = _3712;
    SV_Target_1.x = _3335;
    SV_Target_1.y = _3338;
    SV_Target_1.z = _3341;
    SV_Target_1.w = cbInstanceData._m0[_3186].w;
    discard_exit();
}


