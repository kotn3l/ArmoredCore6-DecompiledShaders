#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[29];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 12) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 9) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2DArray C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_0;
layout(set = 0, binding = 14) uniform texture2DArray C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1357;
float _3804;
float _3805;
float _3806;
float _3807;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _211 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _212 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _213 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _219 = inversesqrt(dot(vec3(_211, _212, _213), vec3(_211, _212, _213)));
    float _226 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _233 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _254 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_1) + cbTextureTilingScale._m0[10u].w));
    float _268 = exp2(log2(_254.w * cbMtdParam._m0[25u].z) * cbMtdParam._m0[22u].x);
    float _269 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _270 = isnan(1.0) ? _269 : (isnan(_269) ? 1.0 : min(_269, 1.0));
    vec4 _284 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _288 = _284.z;
    float _297 = exp2(log2(_288 * cbMtdParam._m0[22u].y) * cbMtdParam._m0[21u].y);
    float _298 = isnan(0.0) ? _297 : (isnan(_297) ? 0.0 : max(_297, 0.0));
    float _299 = isnan(1.0) ? _298 : (isnan(_298) ? 1.0 : min(_298, 1.0));
    vec4 _311 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _314 = _311.y;
    float _317 = (_311.x + (-0.02500000037252902984619140625)) * 8.0;
    float _321 = roundEven(5.0 - _317);
    float _322 = isnan(0.0) ? _321 : (isnan(_321) ? 0.0 : max(_321, 0.0));
    float _323 = isnan(4.0) ? _322 : (isnan(_322) ? 4.0 : min(_322, 4.0));
    float _336 = floor(_323);
    vec4 _339 = texture(sampler2DArray(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w, _336));
    float _189[6];
    float _190[6];
    float _191[6];
    _189[0u] = cbMtdParam._m0[17u].x;
    _190[0u] = cbMtdParam._m0[17u].y;
    _191[0u] = cbMtdParam._m0[17u].z;
    _189[1u] = cbMtdParam._m0[15u].x;
    _190[1u] = cbMtdParam._m0[15u].y;
    _191[1u] = cbMtdParam._m0[15u].z;
    _189[2u] = cbMtdParam._m0[14u].x;
    _190[2u] = cbMtdParam._m0[14u].y;
    _191[2u] = cbMtdParam._m0[14u].z;
    _189[3u] = cbMtdParam._m0[13u].x;
    _190[3u] = cbMtdParam._m0[13u].y;
    _191[3u] = cbMtdParam._m0[13u].z;
    _189[4u] = cbMtdParam._m0[12u].x;
    _190[4u] = cbMtdParam._m0[12u].y;
    _191[4u] = cbMtdParam._m0[12u].z;
    _189[5u] = cbMtdParam._m0[18u].x;
    _190[5u] = cbMtdParam._m0[18u].y;
    _191[5u] = cbMtdParam._m0[18u].z;
    float _403 = roundEven(_317);
    float _404 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    uint _406 = uint(int(isnan(5.0) ? _404 : (isnan(_404) ? 5.0 : min(_404, 5.0))));
    vec4 _436 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _447 = cbMtdParam._m0[9u].x * _436.x;
    float _448 = cbMtdParam._m0[9u].y * _436.y;
    float _449 = cbMtdParam._m0[9u].z * _436.z;
    float _456 = ((((((_189[_406] - cbMtdParam._m0[10u].x) * _314) + cbMtdParam._m0[10u].x) * _339.x) - _447) * _299) + _447;
    float _457 = ((((((_190[_406] - cbMtdParam._m0[10u].y) * _314) + cbMtdParam._m0[10u].y) * _339.y) - _448) * _299) + _448;
    float _458 = ((((((_191[_406] - cbMtdParam._m0[10u].z) * _314) + cbMtdParam._m0[10u].z) * _339.z) - _449) * _299) + _449;
    float _464 = exp2(log2(_284.w) * cbMtdParam._m0[22u].w);
    vec4 _477 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _497 = (((cbMtdParam._m0[16u].x * _477.x) - _456) * _464) + _456;
    float _498 = (((cbMtdParam._m0[16u].y * _477.y) - _457) * _464) + _457;
    float _499 = (((cbMtdParam._m0[16u].z * _477.z) - _458) * _464) + _458;
    vec4 _512 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _537 = (_254.x * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].x * _512.x) - _497) * _270) + _497);
    float _539 = (_254.y * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].y * _512.y) - _498) * _270) + _498);
    float _541 = (_254.z * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].z * _512.z) - _499) * _270) + _499);
    float _184[5];
    float _185[5];
    _184[0u] = cbMtdParam._m0[25u].w;
    _185[0u] = cbMtdParam._m0[26u].x;
    _184[1u] = cbMtdParam._m0[27u].w;
    _185[1u] = cbMtdParam._m0[28u].x;
    _184[2u] = cbMtdParam._m0[27u].y;
    _185[2u] = cbMtdParam._m0[27u].z;
    _184[3u] = cbMtdParam._m0[26u].w;
    _185[3u] = cbMtdParam._m0[27u].x;
    _184[4u] = cbMtdParam._m0[26u].y;
    _185[4u] = cbMtdParam._m0[26u].z;
    float _579 = isnan(0.0) ? _323 : (isnan(_323) ? 0.0 : max(_323, 0.0));
    uint _581 = uint(int(isnan(4.0) ? _579 : (isnan(_579) ? 4.0 : min(_579, 4.0))));
    float _588 = ((_185[_581] - cbMtdParam._m0[21u].z) * _299) + cbMtdParam._m0[21u].z;
    float _591 = ((cbMtdParam._m0[21u].w - _588) * _464) + _588;
    float _594 = ((cbMtdParam._m0[24u].y - _591) * _270) + _591;
    vec4 _609 = texture(sampler2DArray(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w, _336));
    vec4 _626 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _628 = _626.x;
    float _629 = _626.y;
    float _634 = cbMtdParam._m0[21u].x + _626.z;
    float _637 = (((_609.z + _184[_581]) - _634) * _299) + _634;
    vec4 _650 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_1) + cbTextureTilingScale._m0[11u].w));
    float _661 = (((_650.z - _637) + cbMtdParam._m0[25u].y) * _464) + _637;
    float _667 = ((((_288 * 2.0) * _661) - _661) * cbMtdParam._m0[23u].w) + _661;
    vec4 _679 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_1) + cbTextureTilingScale._m0[12u].w));
    float _690 = (((cbMtdParam._m0[22u].z + _679.z) - _667) * _270) + _667;
    vec4 _709 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _726 = ((_609.x - _628) * _299) + _628;
    float _727 = ((_609.y - _629) * _299) + _629;
    float _732 = ((_650.x - _726) * _464) + _726;
    float _733 = ((_650.y - _727) * _464) + _727;
    float _742 = ((((_679.x - _732) * _270) + _732) * 2.0) + (-1.0);
    float _743 = ((((_679.y - _733) * _270) + _733) * 2.0) + (-1.0);
    float _744 = dot(vec2(_742, _743), vec2(_742, _743));
    float _3866 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _749 = sqrt(1.0 - (isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0))));
    float _752 = (cbMtdParam._m0[24u].z * ((_284.x * 2.0) + (-1.0))) + _742;
    float _753 = (cbMtdParam._m0[24u].z * ((_284.y * 2.0) + (-1.0))) + _743;
    float _755 = gl_FragCoord.x * 0.125;
    float _757 = gl_FragCoord.y * 0.125;
    float _768 = fma(_749, _226 * NORMAL.x, fma(_753, _233 * TANGENT.x, (_219 * _211) * _752));
    float _771 = fma(_749, _226 * NORMAL.y, fma(_753, _233 * TANGENT.y, (_219 * _212) * _752));
    float _774 = fma(_749, _226 * NORMAL.z, fma(_753, _233 * TANGENT.z, (_219 * _213) * _752));
    float _778 = inversesqrt(dot(vec3(_768, _771, _774), vec3(_768, _771, _774)));
    float _779 = _778 * _768;
    float _780 = _778 * _771;
    float _781 = _778 * _774;
    float _3877 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _782 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
    float _3888 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _3899 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _3910 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _3921 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _786 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
    if (!(cbMtdParam._m0[24u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_755, _757)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _806 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _846 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _856 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _846);
    float _857 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _846);
    float _858 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _846);
    float _862 = inversesqrt(dot(vec3(_856, _857, _858), vec3(_856, _857, _858)));
    float _863 = _856 * _862;
    float _864 = _857 * _862;
    float _865 = _858 * _862;
    vec4 _867 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_755, _757));
    float _869 = _867.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1039 = sqrt(((_856 * _856) + (_857 * _857)) + (_858 * _858));
        float _1045 = (cbMatDynParam._m0[5u].x * _1039) + cbMatDynParam._m0[5u].y;
        float _3932 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1046 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
        float _1050 = (cbMatDynParam._m0[5u].z * _1039) + cbMatDynParam._m0[5u].w;
        float _3943 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0))) - _1046)) + _1046) < ((_869 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _880 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _881 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _899 = fma(_781, cbSceneParam._m0[5u].z, fma(_780, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _779));
    float _902 = fma(_781, cbSceneParam._m0[6u].z, fma(_780, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _779));
    float _905 = fma(_781, cbSceneParam._m0[7u].z, fma(_780, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _779));
    uint _918 = uint(roundEven(NORMAL.w)) * 13u;
    uint _919 = _918 + 9u;
    uint _920 = _919 + uint(cbMatDynParam._m0[0u].w);
    float _926 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0)))) * cbInstanceData._m0[_920].x;
    float _927 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0)))) * cbInstanceData._m0[_920].y;
    float _928 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0)))) * cbInstanceData._m0[_920].z;
    float _3954 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
    float _929 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
    float _3965 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
    float _930 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
    float _3976 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
    float _931 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
    float _932 = 1.0 - _786;
    float _933 = _929 * _932;
    float _934 = _930 * _932;
    float _935 = _931 * _932;
    float _940 = (_929 + (-0.039999999105930328369140625)) * _786;
    float _941 = (_930 + (-0.039999999105930328369140625)) * _786;
    float _942 = (_931 + (-0.039999999105930328369140625)) * _786;
    float _943 = _940 + 0.039999999105930328369140625;
    float _945 = _941 + 0.039999999105930328369140625;
    float _946 = _942 + 0.039999999105930328369140625;
    vec4 _955 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _880, cbSceneParam._m0[86u].y * _881));
    float _958 = _955.x * TEXCOORD_3.w;
    float _959 = dot(vec3(_779, _780, _781), vec3(_863, _864, _865));
    float _962 = _959 * 2.0;
    float _966 = (_962 * _779) - _863;
    float _967 = (_962 * _780) - _864;
    float _968 = (_962 * _781) - _865;
    float _972 = abs(dot(vec3(_863, _864, _865), vec3(_779, _780, _781)));
    float _3987 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
    float _974 = sqrt(_782);
    float _985 = exp2((_974 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_974 * 3.0));
    float _991 = (1.0 - _985) * ((_974 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _992 = _985 * _974;
    float _1020 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1024 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1028 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1356;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1081 = fma(_1028, cbModelParam._m0[26u].z, fma(_1024, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1020));
        float _1085 = fma(_1028, cbModelParam._m0[27u].z, fma(_1024, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1020));
        float _1089 = fma(_1028, cbModelParam._m0[28u].z, fma(_1024, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1020));
        float _1114 = _1020 + _779;
        float _1115 = _1024 + _780;
        float _1116 = _1028 + _781;
        float _1126 = fma(_1116, cbModelParam._m0[26u].z, fma(_1115, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1114)) - _1081;
        float _1127 = fma(_1116, cbModelParam._m0[27u].z, fma(_1115, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1114)) - _1085;
        float _1128 = fma(_1116, cbModelParam._m0[28u].z, fma(_1115, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1114)) - _1089;
        float _1132 = inversesqrt(dot(vec3(_1126, _1127, _1128), vec3(_1126, _1127, _1128)));
        float _1145 = ((_1132 * _1126) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1081 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1146 = ((_1132 * _1127) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1085 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1147 = ((_1132 * _1128) / cbModelParam._m0[34u].z) + ((((((_1089 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1150 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1145, _1146, _1147), 0.0);
        vec4 _1157 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1145, _1146, _1147), 0.0);
        vec4 _1164 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1145, _1146, _1147), 0.0);
        vec4 _1171 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1145, _1146, _1147), 0.0);
        float _1184 = exp2((_1150.w + (-0.5)) * 20.0) * 2.0;
        float _1185 = _1184 * (_1150.x + (-0.5));
        float _1186 = _1184 * (_1150.y + (-0.5));
        float _1187 = _1184 * (_1150.z + (-0.5));
        float _1194 = exp2((_1157.w + (-0.5)) * 20.0) * 2.0;
        float _1195 = _1194 * (_1157.x + (-0.5));
        float _1196 = _1194 * (_1157.y + (-0.5));
        float _1197 = _1194 * (_1157.z + (-0.5));
        float _1204 = exp2((_1164.w + (-0.5)) * 20.0) * 2.0;
        float _1205 = _1204 * (_1164.x + (-0.5));
        float _1206 = _1204 * (_1164.y + (-0.5));
        float _1207 = _1204 * (_1164.z + (-0.5));
        float _1214 = exp2((_1171.w + (-0.5)) * 20.0) * 2.0;
        float _1215 = _1214 * (_1171.x + (-0.5));
        float _1216 = _1214 * (_1171.y + (-0.5));
        float _1217 = _1214 * (_1171.z + (-0.5));
        float _1218 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1219 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1220 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1221 = _1185 * 0.5;
        float _1222 = _1195 * 0.5;
        float _1223 = _1205 * 0.5;
        float _1224 = dot(vec3(_1221, _1222, _1223), vec3(_1221, _1222, _1223));
        float _1229 = (_1224 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1224);
        float _1238 = (dot(vec3(_779, _780, _781), vec3(_1229 * _1221, _1229 * _1222, _1229 * _1223)) + 1.0) * 0.5;
        float _4013 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1248 = sqrt(((_1222 * _1222) + (_1221 * _1221)) + (_1223 * _1223)) / (_1218 + 9.9999997473787516355514526367188e-06);
        float _4024 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1249 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
        float _1250 = _1249 * 2.0;
        float _1254 = (1.0 - _1249) / (_1249 + 1.0);
        float _4035 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1255 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
        float _1264 = ((((1.0 - _1255) * (_1250 + 2.0)) * exp2(log2(isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0))) * (_1250 + 1.0))) + _1255) * _1218;
        float _1265 = _1186 * 0.5;
        float _1266 = _1196 * 0.5;
        float _1267 = _1206 * 0.5;
        float _1268 = dot(vec3(_1265, _1266, _1267), vec3(_1265, _1266, _1267));
        float _1273 = (_1268 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1268);
        float _1281 = (dot(vec3(_779, _780, _781), vec3(_1273 * _1265, _1273 * _1266, _1273 * _1267)) + 1.0) * 0.5;
        float _4046 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1290 = sqrt(((_1266 * _1266) + (_1265 * _1265)) + (_1267 * _1267)) / (_1219 + 9.9999997473787516355514526367188e-06);
        float _4057 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1291 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
        float _1292 = _1291 * 2.0;
        float _1296 = (1.0 - _1291) / (_1291 + 1.0);
        float _4068 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1297 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
        float _1306 = ((((1.0 - _1297) * (_1292 + 2.0)) * exp2(log2(isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0))) * (_1292 + 1.0))) + _1297) * _1219;
        float _1307 = _1187 * 0.5;
        float _1308 = _1197 * 0.5;
        float _1309 = _1207 * 0.5;
        float _1310 = dot(vec3(_1307, _1308, _1309), vec3(_1307, _1308, _1309));
        float _1315 = (_1310 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1310);
        float _1323 = (dot(vec3(_779, _780, _781), vec3(_1315 * _1307, _1315 * _1308, _1315 * _1309)) + 1.0) * 0.5;
        float _4079 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1332 = sqrt(((_1308 * _1308) + (_1307 * _1307)) + (_1309 * _1309)) / (_1220 + 9.9999997473787516355514526367188e-06);
        float _4090 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1333 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
        float _1334 = _1333 * 2.0;
        float _1338 = (1.0 - _1333) / (_1333 + 1.0);
        float _4101 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1339 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
        float _1348 = ((((1.0 - _1339) * (_1334 + 2.0)) * exp2(log2(isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0))) * (_1334 + 1.0))) + _1339) * _1220;
        _1356 = _1187;
        _1358 = _1186;
        _1359 = _1185;
        _1360 = _1197;
        _1361 = _1196;
        _1362 = _1195;
        _1363 = _1207;
        _1364 = _1206;
        _1365 = _1205;
        _1366 = _1220;
        _1367 = _1219;
        _1368 = _1218;
        _1369 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0)));
        _1370 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0)));
        _1371 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0)));
    }
    else
    {
        _1356 = _1357;
        _1358 = _1357;
        _1359 = _1357;
        _1360 = _1357;
        _1361 = _1357;
        _1362 = _1357;
        _1363 = _1357;
        _1364 = _1357;
        _1365 = _1357;
        _1366 = _1357;
        _1367 = _1357;
        _1368 = _1357;
        _1369 = 0.0;
        _1370 = 0.0;
        _1371 = 0.0;
    }
    float _1666;
    float _1667;
    float _1668;
    float _1669;
    float _1670;
    float _1671;
    float _1672;
    float _1673;
    float _1674;
    float _1675;
    float _1676;
    float _1677;
    float _1678;
    float _1679;
    float _1680;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1397 = fma(_1028, cbModelParam._m0[30u].z, fma(_1024, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1020));
        float _1401 = fma(_1028, cbModelParam._m0[31u].z, fma(_1024, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1020));
        float _1405 = fma(_1028, cbModelParam._m0[32u].z, fma(_1024, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1020));
        float _1428 = _1020 + _779;
        float _1429 = _1024 + _780;
        float _1430 = _1028 + _781;
        float _1440 = fma(_1430, cbModelParam._m0[30u].z, fma(_1429, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1428)) - _1397;
        float _1441 = fma(_1430, cbModelParam._m0[31u].z, fma(_1429, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1428)) - _1401;
        float _1442 = fma(_1430, cbModelParam._m0[32u].z, fma(_1429, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1428)) - _1405;
        float _1446 = inversesqrt(dot(vec3(_1440, _1441, _1442), vec3(_1440, _1441, _1442)));
        float _1459 = ((_1446 * _1440) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1397 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1460 = ((_1446 * _1441) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1401 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1461 = ((_1446 * _1442) / cbModelParam._m0[35u].z) + ((((((_1405 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1463 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1459, _1460, _1461), 0.0);
        vec4 _1470 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1459, _1460, _1461), 0.0);
        vec4 _1477 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1459, _1460, _1461), 0.0);
        vec4 _1484 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1459, _1460, _1461), 0.0);
        float _1496 = exp2((_1463.w + (-0.5)) * 20.0) * 2.0;
        float _1497 = _1496 * (_1463.x + (-0.5));
        float _1498 = _1496 * (_1463.y + (-0.5));
        float _1499 = _1496 * (_1463.z + (-0.5));
        float _1506 = exp2((_1470.w + (-0.5)) * 20.0) * 2.0;
        float _1507 = _1506 * (_1470.x + (-0.5));
        float _1508 = _1506 * (_1470.y + (-0.5));
        float _1509 = _1506 * (_1470.z + (-0.5));
        float _1516 = exp2((_1477.w + (-0.5)) * 20.0) * 2.0;
        float _1517 = _1516 * (_1477.x + (-0.5));
        float _1518 = _1516 * (_1477.y + (-0.5));
        float _1519 = _1516 * (_1477.z + (-0.5));
        float _1526 = exp2((_1484.w + (-0.5)) * 20.0) * 2.0;
        float _1527 = _1526 * (_1484.x + (-0.5));
        float _1528 = _1526 * (_1484.y + (-0.5));
        float _1529 = _1526 * (_1484.z + (-0.5));
        float _1530 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1531 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1532 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1533 = _1497 * 0.5;
        float _1534 = _1507 * 0.5;
        float _1535 = _1517 * 0.5;
        float _1536 = dot(vec3(_1533, _1534, _1535), vec3(_1533, _1534, _1535));
        float _1541 = (_1536 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1536);
        float _1549 = (dot(vec3(_779, _780, _781), vec3(_1541 * _1533, _1541 * _1534, _1541 * _1535)) + 1.0) * 0.5;
        float _4142 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
        float _1558 = sqrt(((_1534 * _1534) + (_1533 * _1533)) + (_1535 * _1535)) / (_1530 + 9.9999997473787516355514526367188e-06);
        float _4153 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
        float _1559 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
        float _1560 = _1559 * 2.0;
        float _1564 = (1.0 - _1559) / (_1559 + 1.0);
        float _4164 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
        float _1565 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
        float _1574 = ((((1.0 - _1565) * (_1560 + 2.0)) * exp2(log2(isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0))) * (_1560 + 1.0))) + _1565) * _1530;
        float _1575 = _1498 * 0.5;
        float _1576 = _1508 * 0.5;
        float _1577 = _1518 * 0.5;
        float _1578 = dot(vec3(_1575, _1576, _1577), vec3(_1575, _1576, _1577));
        float _1583 = (_1578 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1578);
        float _1591 = (dot(vec3(_779, _780, _781), vec3(_1583 * _1575, _1583 * _1576, _1583 * _1577)) + 1.0) * 0.5;
        float _4175 = isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0));
        float _1600 = sqrt(((_1576 * _1576) + (_1575 * _1575)) + (_1577 * _1577)) / (_1531 + 9.9999997473787516355514526367188e-06);
        float _4186 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
        float _1601 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
        float _1602 = _1601 * 2.0;
        float _1606 = (1.0 - _1601) / (_1601 + 1.0);
        float _4197 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
        float _1607 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
        float _1616 = ((((1.0 - _1607) * (_1602 + 2.0)) * exp2(log2(isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0))) * (_1602 + 1.0))) + _1607) * _1531;
        float _1617 = _1499 * 0.5;
        float _1618 = _1509 * 0.5;
        float _1619 = _1519 * 0.5;
        float _1620 = dot(vec3(_1617, _1618, _1619), vec3(_1617, _1618, _1619));
        float _1625 = (_1620 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1620);
        float _1633 = (dot(vec3(_779, _780, _781), vec3(_1625 * _1617, _1625 * _1618, _1625 * _1619)) + 1.0) * 0.5;
        float _4208 = isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0));
        float _1642 = sqrt(((_1618 * _1618) + (_1617 * _1617)) + (_1619 * _1619)) / (_1532 + 9.9999997473787516355514526367188e-06);
        float _4219 = isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0));
        float _1643 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
        float _1644 = _1643 * 2.0;
        float _1648 = (1.0 - _1643) / (_1643 + 1.0);
        float _4230 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
        float _1649 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
        float _1658 = ((((1.0 - _1649) * (_1644 + 2.0)) * exp2(log2(isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0))) * (_1644 + 1.0))) + _1649) * _1532;
        _1666 = _1499;
        _1667 = _1498;
        _1668 = _1497;
        _1669 = _1509;
        _1670 = _1508;
        _1671 = _1507;
        _1672 = _1519;
        _1673 = _1518;
        _1674 = _1517;
        _1675 = _1532;
        _1676 = _1531;
        _1677 = _1530;
        _1678 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0)));
        _1679 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0)));
        _1680 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0)));
    }
    else
    {
        _1666 = _1357;
        _1667 = _1357;
        _1668 = _1357;
        _1669 = _1357;
        _1670 = _1357;
        _1671 = _1357;
        _1672 = _1357;
        _1673 = _1357;
        _1674 = _1357;
        _1675 = _1357;
        _1676 = _1357;
        _1677 = _1357;
        _1678 = 0.0;
        _1679 = 0.0;
        _1680 = 0.0;
    }
    float _1690 = (cbModelParam._m0[1u].x * (_1678 - _1369)) + _1369;
    float _1691 = (cbModelParam._m0[1u].x * (_1679 - _1370)) + _1370;
    float _1692 = (cbModelParam._m0[1u].x * (_1680 - _1371)) + _1371;
    float _1713 = fma(_1692, cbSceneParam._m0[89u].z, fma(_1691, cbSceneParam._m0[89u].y, _1690 * cbSceneParam._m0[89u].x));
    float _1716 = fma(_1692, cbSceneParam._m0[90u].z, fma(_1691, cbSceneParam._m0[90u].y, _1690 * cbSceneParam._m0[90u].x));
    float _1719 = fma(_1692, cbSceneParam._m0[91u].z, fma(_1691, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1690));
    float _1734 = _966 * 0.5;
    float _1735 = _967 * 0.5;
    float _1736 = _968 * 0.5;
    float _1737 = dot(vec4(_1734, _1735, _1736, 1.0), vec4(_1668, _1671, _1674, _1677));
    float _1740 = dot(vec4(_1734, _1735, _1736, 1.0), vec4(_1667, _1670, _1673, _1676));
    float _1743 = dot(vec4(_1734, _1735, _1736, 1.0), vec4(_1666, _1669, _1672, _1675));
    float _1777;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1750 = dot(vec4(_1734, _1735, _1736, 1.0), vec4(_1356, _1360, _1363, _1366));
        float _1754 = dot(vec4(_1734, _1735, _1736, 1.0), vec4(_1358, _1361, _1364, _1367));
        float _1758 = dot(vec4(_1734, _1735, _1736, 1.0), vec4(_1359, _1362, _1365, _1368));
        float _1765 = dot(vec4(cbModelParam._m0[39u]), vec4(_1734, _1735, _1736, 1.0));
        _1777 = dot(vec3(isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0)), isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0)), isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1765) ? 0.0 : (isnan(0.0) ? _1765 : max(0.0, _1765))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1777 = 1.0;
    }
    float _1788;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1779 = dot(vec4(cbModelParam._m0[40u]), vec4(_1734, _1735, _1736, 1.0));
        _1788 = dot(vec3(isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0)), isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0)), isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1779) ? 0.0 : (isnan(0.0) ? _1779 : max(0.0, _1779))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1788 = 1.0;
    }
    float _1792 = (_1788 * cbModelParam._m0[1u].x) + (_1777 * (1.0 - cbModelParam._m0[1u].x));
    float _1802 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _782);
    float _1803 = isnan(_1802) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1802 : min(cbModelParam._m0[25u].z, _1802));
    float _1883;
    float _1885;
    float _1887;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1850 = fma(_1028, cbModelParam._m0[13u].z, fma(_1024, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1020)) + cbModelParam._m0[13u].w;
        float _1854 = fma(_1028, cbModelParam._m0[14u].z, fma(_1024, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1020)) + cbModelParam._m0[14u].w;
        float _1858 = fma(_1028, cbModelParam._m0[15u].z, fma(_1024, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1020)) + cbModelParam._m0[15u].w;
        float _1861 = fma(_968, cbModelParam._m0[13u].z, fma(_967, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _966));
        float _1864 = fma(_968, cbModelParam._m0[14u].z, fma(_967, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _966));
        float _1867 = fma(_968, cbModelParam._m0[15u].z, fma(_967, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _966));
        float _1895;
        if (_1861 > 0.0)
        {
            _1895 = abs((1.0 - _1850) / _1861);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1861 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1850 + 1.0) / _1861);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1895 = frontier_phi_19_17_ladder;
        }
        float _2118;
        if (_1864 > 0.0)
        {
            _2118 = abs((1.0 - _1854) / _1864);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1864 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1854 + 1.0) / _1864);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2118 = frontier_phi_28_24_ladder;
        }
        float _2375;
        if (_1867 > 0.0)
        {
            _2375 = abs((1.0 - _1858) / _1867);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1867 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1858 + 1.0) / _1867);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2375 = frontier_phi_40_35_ladder;
        }
        float _2377 = isnan(_2118) ? _1895 : (isnan(_1895) ? _2118 : min(_1895, _2118));
        float _2378 = isnan(_2375) ? _2377 : (isnan(_2377) ? _2375 : min(_2377, _2375));
        float _2382 = (_2378 * _1861) + _1850;
        float _2383 = (_2378 * _1864) + _1854;
        float _2384 = (_2378 * _1867) + _1858;
        float _2385 = _2378 * 9.9999997473787516355514526367188e-05;
        float _2387 = (-1.0) - _2385;
        float _2389 = _2385 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2384 > _2389) || ((_2384 < _2387) || ((_2383 > _2389) || ((_2383 < _2387) || ((_2382 < _2387) || (_2382 > _2389))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2512 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2384, cbModelParam._m0[9u].z, fma(_2383, cbModelParam._m0[9u].y, _2382 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2384, cbModelParam._m0[10u].z, fma(_2383, cbModelParam._m0[10u].y, _2382 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2384, cbModelParam._m0[11u].z, fma(_2383, cbModelParam._m0[11u].y, _2382 * cbModelParam._m0[11u].x))), _1803);
            frontier_phi_18_40_ladder = _2512.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2512.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2512.x * cbModelParam._m0[1u].y;
        }
        _1883 = frontier_phi_18_40_ladder_2;
        _1885 = frontier_phi_18_40_ladder_1;
        _1887 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1871 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_966, _967, _968), _1803);
        _1883 = _1871.x * cbModelParam._m0[1u].y;
        _1885 = _1871.y * cbModelParam._m0[1u].y;
        _1887 = _1871.z * cbModelParam._m0[1u].y;
    }
    float _1891 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _782);
    float _1892 = isnan(_1891) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1891 : min(cbModelParam._m0[25u].w, _1891));
    float _1981;
    float _1983;
    float _1985;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1945 = fma(_1028, cbModelParam._m0[21u].z, fma(_1024, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1020)) + cbModelParam._m0[21u].w;
        float _1949 = fma(_1028, cbModelParam._m0[22u].z, fma(_1024, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1020)) + cbModelParam._m0[22u].w;
        float _1953 = fma(_1028, cbModelParam._m0[23u].z, fma(_1024, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1020)) + cbModelParam._m0[23u].w;
        float _1956 = fma(_968, cbModelParam._m0[21u].z, fma(_967, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _966));
        float _1959 = fma(_968, cbModelParam._m0[22u].z, fma(_967, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _966));
        float _1962 = fma(_968, cbModelParam._m0[23u].z, fma(_967, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _966));
        float _2123;
        if (_1956 > 0.0)
        {
            _2123 = abs((1.0 - _1945) / _1956);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1956 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1945 + 1.0) / _1956);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2123 = frontier_phi_30_26_ladder;
        }
        float _2402;
        if (_1959 > 0.0)
        {
            _2402 = abs((1.0 - _1949) / _1959);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1959 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1949 + 1.0) / _1959);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2402 = frontier_phi_42_37_ladder;
        }
        float _2615;
        if (_1962 > 0.0)
        {
            _2615 = abs((1.0 - _1953) / _1962);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1962 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1953 + 1.0) / _1962);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2615 = frontier_phi_51_48_ladder;
        }
        float _2617 = isnan(_2402) ? _2123 : (isnan(_2123) ? _2402 : min(_2123, _2402));
        float _2618 = isnan(_2615) ? _2617 : (isnan(_2617) ? _2615 : min(_2617, _2615));
        float _2622 = (_2618 * _1956) + _1945;
        float _2623 = (_2618 * _1959) + _1949;
        float _2624 = (_2618 * _1962) + _1953;
        float _2625 = _2618 * 9.9999997473787516355514526367188e-05;
        float _2626 = (-1.0) - _2625;
        float _2628 = _2625 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2624 > _2628) || ((_2624 < _2626) || ((_2623 > _2628) || ((_2623 < _2626) || ((_2622 < _2626) || (_2622 > _2628))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2858 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2624, cbModelParam._m0[17u].z, fma(_2623, cbModelParam._m0[17u].y, _2622 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2624, cbModelParam._m0[18u].z, fma(_2623, cbModelParam._m0[18u].y, _2622 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2624, cbModelParam._m0[19u].z, fma(_2623, cbModelParam._m0[19u].y, _2622 * cbModelParam._m0[19u].x))), _1892);
            frontier_phi_27_51_ladder = _2858.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2858.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2858.x * cbModelParam._m0[1u].z;
        }
        _1981 = frontier_phi_27_51_ladder_2;
        _1983 = frontier_phi_27_51_ladder_1;
        _1985 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1965 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_966, _967, _968), _1892);
        _1981 = _1965.x * cbModelParam._m0[1u].z;
        _1983 = _1965.y * cbModelParam._m0[1u].z;
        _1985 = _1965.z * cbModelParam._m0[1u].z;
    }
    float _1998 = (((_991 * _943) + _992) * _958) * ((cbModelParam._m0[1u].w * (_1981 - _1883)) + _1883);
    float _2000 = (((_991 * _945) + _992) * _958) * ((cbModelParam._m0[1u].w * (_1983 - _1885)) + _1885);
    float _2002 = (((_991 * _946) + _992) * _958) * ((cbModelParam._m0[1u].w * (_1985 - _1887)) + _1887);
    float _2005 = fma(_2002, cbSceneParam._m0[89u].z, fma(_2000, cbSceneParam._m0[89u].y, _1998 * cbSceneParam._m0[89u].x));
    float _2008 = fma(_2002, cbSceneParam._m0[90u].z, fma(_2000, cbSceneParam._m0[90u].y, _1998 * cbSceneParam._m0[90u].x));
    float _2011 = fma(_2002, cbSceneParam._m0[91u].z, fma(_2000, cbSceneParam._m0[91u].y, _1998 * cbSceneParam._m0[91u].x));
    vec4 _2019 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_880, _881));
    float _2021 = _2019.w;
    float _2033 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2021);
    float _2034 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2021);
    float _2035 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2021);
    uvec4 _2039 = floatBitsToUint(cbInstanceData._m0[_918 + 5u]);
    uint _2041 = _2039.x * 14u;
    uint _2042 = _2041 + 13u;
    float _2049 = _958 + (-1.0);
    float _2054 = (cbLight._m0[_2042].x * _2049) + 1.0;
    float _2055 = (cbLight._m0[_2042].y * _2049) + 1.0;
    float _2056 = (cbLight._m0[_2042].z * _2049) + 1.0;
    float _2057 = (cbLight._m0[_2042].w * _2049) + 1.0;
    uint _2058 = _2041 + 5u;
    float _2064 = isnan(1.0) ? _2055 : (isnan(_2055) ? 1.0 : min(_2055, 1.0));
    uint _2068 = _2041 + 4u;
    float _2077 = isnan(1.0) ? _2054 : (isnan(_2054) ? 1.0 : min(_2054, 1.0));
    uint _2081 = _2041 | 1u;
    float _2092 = dot(vec3(cbLight._m0[_2041].xyz), vec3(_779, _780, _781));
    float _2095 = dot(vec3(cbLight._m0[_2081].xyz), vec3(_779, _780, _781));
    float _4366 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
    float _4377 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
    float _2100 = (isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0))) * 0.3183098733425140380859375;
    float _2102 = (isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0))) * 0.3183098733425140380859375;
    float _2109 = ((cbLight._m0[_2058].x * _2064) * _2102) + (((cbLight._m0[_2068].x * _2033) * _2077) * _2100);
    float _2110 = ((_2064 * cbLight._m0[_2058].y) * _2102) + (((cbLight._m0[_2068].y * _2034) * _2077) * _2100);
    float _2111 = ((_2064 * cbLight._m0[_2058].z) * _2102) + (((cbLight._m0[_2068].z * _2035) * _2077) * _2100);
    uvec4 _2115 = floatBitsToUint(cbLight._m0[_2041 + 12u]);
    bool _2117 = _2115.x == 0u;
    float _2128;
    float _2130;
    float _2132;
    if (_2117)
    {
        _2128 = _2109;
        _2130 = _2110;
        _2132 = _2111;
    }
    else
    {
        uint _2136 = _2041 + 6u;
        float _2152 = (dot(vec3(cbLight._m0[_2041 + 2u].xyz), vec3(_779, _780, _781)) * 0.5) + 0.5;
        float _2153 = _2152 * _2152;
        float _4388 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
        float _2154 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
        float _2155 = isnan(1.0) ? _2056 : (isnan(_2056) ? 1.0 : min(_2056, 1.0));
        _2128 = (((cbLight._m0[_2136].x * 0.3183098733425140380859375) * _2154) * _2155) + _2109;
        _2130 = (((cbLight._m0[_2136].y * 0.3183098733425140380859375) * _2154) * _2155) + _2110;
        _2132 = (((cbLight._m0[_2136].z * 0.3183098733425140380859375) * _2154) * _2155) + _2111;
    }
    bool _2135 = _2115.y == 0u;
    float _2173;
    float _2175;
    float _2177;
    if (_2135)
    {
        _2173 = _2128;
        _2175 = _2130;
        _2177 = _2132;
    }
    else
    {
        uint _2346 = _2041 + 7u;
        float _2362 = (dot(vec3(cbLight._m0[_2041 + 3u].xyz), vec3(_779, _780, _781)) * 0.5) + 0.5;
        float _2363 = _2362 * _2362;
        float _4404 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
        float _2364 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
        float _2365 = isnan(1.0) ? _2057 : (isnan(_2057) ? 1.0 : min(_2057, 1.0));
        _2173 = (((cbLight._m0[_2346].x * 0.3183098733425140380859375) * _2364) * _2365) + _2128;
        _2175 = (((cbLight._m0[_2346].y * 0.3183098733425140380859375) * _2364) * _2365) + _2130;
        _2177 = (((cbLight._m0[_2346].z * 0.3183098733425140380859375) * _2364) * _2365) + _2132;
    }
    uint _2180 = _2041 + 8u;
    float _2193 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2041].w)) * _782) * 0.949999988079071044921875);
    float _2194 = _2193 * _2193;
    float _2195 = cbLight._m0[_2041].x + _863;
    float _2196 = cbLight._m0[_2041].y + _864;
    float _2197 = cbLight._m0[_2041].z + _865;
    float _2201 = inversesqrt(dot(vec3(_2195, _2196, _2197), vec3(_2195, _2196, _2197)));
    float _2202 = _2201 * _2195;
    float _2203 = _2201 * _2196;
    float _2204 = _2201 * _2197;
    float _2205 = dot(vec3(_779, _780, _781), vec3(cbLight._m0[_2041].xyz));
    float _4420 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0));
    float _2208 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
    float _4431 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
    float _2209 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
    float _2210 = dot(vec3(_779, _780, _781), vec3(_2202, _2203, _2204));
    float _4442 = isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0));
    float _2213 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
    float _2214 = dot(vec3(cbLight._m0[_2041].xyz), vec3(_2202, _2203, _2204));
    float _4453 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
    float _2218 = _2194 * _2194;
    float _2222 = ((_2213 * _2213) * (_2218 + (-1.0))) + 1.0;
    float _2230 = exp2(log2(1.0 - (isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0)))) * 5.0);
    float _2231 = 0.959999978542327880859375 - _940;
    float _2233 = 0.959999978542327880859375 - _941;
    float _2234 = 0.959999978542327880859375 - _942;
    float _2241 = 1.0 - _2194;
    float _2252 = (0.5 / (((_2209 * ((_2208 * _2241) + _2194)) + 9.9999999392252902907785028219223e-09) + (((_2209 * _2241) + _2194) * _2208))) * _2208;
    float _4464 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
    float _2254 = (isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0))) * (_2218 / ((_2222 * _2222) * 3.141590118408203125));
    uint _2268 = _2041 + 9u;
    float _2279 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2081].w)) * _782) * 0.949999988079071044921875);
    float _2280 = _2279 * _2279;
    float _2281 = cbLight._m0[_2081].x + _863;
    float _2282 = cbLight._m0[_2081].y + _864;
    float _2283 = cbLight._m0[_2081].z + _865;
    float _2287 = inversesqrt(dot(vec3(_2281, _2282, _2283), vec3(_2281, _2282, _2283)));
    float _2288 = _2287 * _2281;
    float _2289 = _2287 * _2282;
    float _2290 = _2287 * _2283;
    float _2291 = dot(vec3(_779, _780, _781), vec3(cbLight._m0[_2081].xyz));
    float _4475 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
    float _2294 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
    float _2295 = dot(vec3(_779, _780, _781), vec3(_2288, _2289, _2290));
    float _4486 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
    float _2298 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
    float _2299 = dot(vec3(cbLight._m0[_2081].xyz), vec3(_2288, _2289, _2290));
    float _4497 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
    float _2303 = _2280 * _2280;
    float _2307 = ((_2298 * _2298) * (_2303 + (-1.0))) + 1.0;
    float _2314 = exp2(log2(1.0 - (isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0)))) * 5.0);
    float _2321 = 1.0 - _2280;
    float _2331 = (0.5 / (((_2209 * ((_2294 * _2321) + _2280)) + 9.9999999392252902907785028219223e-09) + (((_2209 * _2321) + _2280) * _2294))) * _2294;
    float _4508 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
    float _2333 = (isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0))) * (_2303 / ((_2307 * _2307) * 3.141590118408203125));
    float _2343 = (((((_2314 * _2231) + _943) * cbLight._m0[_2268].x) * _2333) * _2064) + ((((cbLight._m0[_2180].x * _2033) * ((_2230 * _2231) + _943)) * _2254) * _2077);
    float _2344 = (((((_2314 * _2233) + _945) * cbLight._m0[_2268].y) * _2333) * _2064) + ((((cbLight._m0[_2180].y * _2034) * ((_2230 * _2233) + _945)) * _2254) * _2077);
    float _2345 = (((((_2314 * _2234) + _946) * cbLight._m0[_2268].z) * _2333) * _2064) + ((((cbLight._m0[_2180].z * _2035) * ((_2230 * _2234) + _946)) * _2254) * _2077);
    float _2407;
    float _2409;
    float _2411;
    if (_2117)
    {
        _2407 = _2343;
        _2409 = _2344;
        _2411 = _2345;
    }
    else
    {
        uint _2413 = _2041 + 2u;
        uint _2417 = _2041 + 10u;
        float _2431 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2413].w)) * _782) * 0.949999988079071044921875);
        float _2432 = _2431 * _2431;
        float _2433 = cbLight._m0[_2413].x + _863;
        float _2434 = cbLight._m0[_2413].y + _864;
        float _2435 = cbLight._m0[_2413].z + _865;
        float _2439 = inversesqrt(dot(vec3(_2433, _2434, _2435), vec3(_2433, _2434, _2435)));
        float _2440 = _2439 * _2433;
        float _2441 = _2439 * _2434;
        float _2442 = _2439 * _2435;
        float _2443 = dot(vec3(_779, _780, _781), vec3(cbLight._m0[_2413].xyz));
        float _4519 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
        float _2446 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
        float _2447 = dot(vec3(_779, _780, _781), vec3(_2440, _2441, _2442));
        float _4530 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
        float _2450 = isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0));
        float _2451 = dot(vec3(cbLight._m0[_2413].xyz), vec3(_2440, _2441, _2442));
        float _4541 = isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0));
        float _2455 = _2432 * _2432;
        float _2459 = ((_2450 * _2450) * (_2455 + (-1.0))) + 1.0;
        float _2466 = exp2(log2(1.0 - (isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0)))) * 5.0);
        float _2473 = 1.0 - _2432;
        float _2483 = (0.5 / (((_2209 * ((_2446 * _2473) + _2432)) + 9.9999999392252902907785028219223e-09) + (((_2209 * _2473) + _2432) * _2446))) * _2446;
        float _4552 = isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0));
        float _2485 = (isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0))) * (_2455 / ((_2459 * _2459) * 3.141590118408203125));
        float _2486 = isnan(1.0) ? _2056 : (isnan(_2056) ? 1.0 : min(_2056, 1.0));
        _2407 = (((((_2466 * _2231) + _943) * cbLight._m0[_2417].x) * _2485) * _2486) + _2343;
        _2409 = (((((_2466 * _2233) + _945) * cbLight._m0[_2417].y) * _2485) * _2486) + _2344;
        _2411 = (((((_2466 * _2234) + _946) * cbLight._m0[_2417].z) * _2485) * _2486) + _2345;
    }
    float _2521;
    float _2523;
    float _2525;
    if (_2135)
    {
        _2521 = _2407;
        _2523 = _2409;
        _2525 = _2411;
    }
    else
    {
        uint _2532 = _2041 + 3u;
        uint _2536 = _2041 + 11u;
        float _2550 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2532].w)) * _782) * 0.949999988079071044921875);
        float _2551 = _2550 * _2550;
        float _2552 = cbLight._m0[_2532].x + _863;
        float _2553 = cbLight._m0[_2532].y + _864;
        float _2554 = cbLight._m0[_2532].z + _865;
        float _2558 = inversesqrt(dot(vec3(_2552, _2553, _2554), vec3(_2552, _2553, _2554)));
        float _2559 = _2558 * _2552;
        float _2560 = _2558 * _2553;
        float _2561 = _2558 * _2554;
        float _2562 = dot(vec3(_779, _780, _781), vec3(cbLight._m0[_2532].xyz));
        float _4568 = isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : max(_2562, 0.0));
        float _2565 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
        float _2566 = dot(vec3(_779, _780, _781), vec3(_2559, _2560, _2561));
        float _4579 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0));
        float _2569 = isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0));
        float _2570 = dot(vec3(cbLight._m0[_2532].xyz), vec3(_2559, _2560, _2561));
        float _4590 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
        float _2574 = _2551 * _2551;
        float _2578 = ((_2569 * _2569) * (_2574 + (-1.0))) + 1.0;
        float _2585 = exp2(log2(1.0 - (isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0)))) * 5.0);
        float _2592 = 1.0 - _2551;
        float _2602 = (0.5 / (((_2209 * ((_2565 * _2592) + _2551)) + 9.9999999392252902907785028219223e-09) + (((_2209 * _2592) + _2551) * _2565))) * _2565;
        float _4601 = isnan(0.0) ? _2602 : (isnan(_2602) ? 0.0 : max(_2602, 0.0));
        float _2604 = (isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0))) * (_2574 / ((_2578 * _2578) * 3.141590118408203125));
        float _2605 = isnan(1.0) ? _2057 : (isnan(_2057) ? 1.0 : min(_2057, 1.0));
        _2521 = (((((_2585 * _2231) + _943) * cbLight._m0[_2536].x) * _2604) * _2605) + _2407;
        _2523 = (((((_2585 * _2233) + _945) * cbLight._m0[_2536].y) * _2604) * _2605) + _2409;
        _2525 = (((((_2585 * _2234) + _946) * cbLight._m0[_2536].z) * _2604) * _2605) + _2411;
    }
    float _2740;
    float _2742;
    float _2744;
    float _2746;
    float _2748;
    float _2750;
    if (_2039.y == 0u)
    {
        float _2680 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2681 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2680;
        float _2682 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2680;
        float _2683 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2680;
        uvec4 _2695 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2696 = _2695.x;
        uint _2707 = uint((float(_2695.y) * floor(float(uint(cbSceneParam._m0[85u].y * _881) / _2696))) + floor(float(uint(cbSceneParam._m0[85u].x * _880) / _2696)));
        float _2717 = (log2(_2683 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2718 = isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0));
        uint _2721 = uint(isnan(14.0) ? _2718 : (isnan(_2718) ? 14.0 : min(_2718, 14.0)));
        uvec4 _2726 = texelFetch(g_lightClusterGridBuffer, int(((_2721 << 2u) + (_2707 << 6u)) >> 2u));
        uint _2727 = _2726.x;
        uint _2728 = _2695.z;
        float _2863;
        float _2865;
        float _2867;
        float _2869;
        float _2871;
        float _2873;
        if (((((1u << ((_2728 >> 4u) & 15u)) + 4294967295u) & _2727) == 0u) || ((_2728 & 240u) == 0u))
        {
            _2863 = 0.0;
            _2865 = 0.0;
            _2867 = 0.0;
            _2869 = 0.0;
            _2871 = 0.0;
            _2873 = 0.0;
        }
        else
        {
            float _2864;
            float _2866;
            float _2868;
            float _2870;
            float _2872;
            float _2874;
            float _3025 = 0.0;
            float _3026 = 0.0;
            float _3027 = 0.0;
            float _3028 = 0.0;
            float _3029 = 0.0;
            float _3030 = 0.0;
            uint _3031 = 0u;
            uint _3040;
            bool _3041;
            for (;;)
            {
                _3040 = texelFetch(g_lightClassification, int((((_2721 << 5u) + (_2707 << 9u)) + (_3031 << 2u)) >> 2u)).x;
                _3041 = _3040 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3041)
                {
                    frontier_phi_68_pred = _3025;
                    frontier_phi_68_pred_1 = _3030;
                    frontier_phi_68_pred_2 = _3029;
                    frontier_phi_68_pred_3 = _3028;
                    frontier_phi_68_pred_4 = _3027;
                    frontier_phi_68_pred_5 = _3026;
                }
                else
                {
                    float _3170;
                    float _3171;
                    float _3172;
                    float _3173;
                    float _3174;
                    float _3175;
                    uint _3176;
                    _3170 = _3025;
                    _3171 = _3026;
                    _3172 = _3027;
                    _3173 = _3028;
                    _3174 = _3029;
                    _3175 = _3030;
                    _3176 = _3040;
                    float _3097;
                    float _3098;
                    float _3099;
                    float _3100;
                    float _3101;
                    float _3102;
                    for (;;)
                    {
                        uint _3180 = uint(findLSB(_3176)) + (_3031 << 5u);
                        uint _3177 = (_3176 + 4294967295u) & _3176;
                        uint _3182 = _3180 * 48u;
                        vec4 _3196 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3182)).x, texelFetch(g_PointLightRenderingBuffer, int(_3182 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3182 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3182 + 3u)).x));
                        uint _3202 = (_3180 * 48u) + 4u;
                        vec4 _3215 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3202)).x, texelFetch(g_PointLightRenderingBuffer, int(_3202 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3202 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3202 + 3u)).x));
                        uint _3221 = (_3180 * 48u) + 8u;
                        vec3 _3232 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3221)).x, texelFetch(g_PointLightRenderingBuffer, int(_3221 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3221 + 2u)).x));
                        float _3236 = _3196.x - _2681;
                        float _3237 = _3196.y - _2682;
                        float _3238 = _3196.z - _2683;
                        float _3239 = dot(vec3(_3236, _3237, _3238), vec3(_3236, _3237, _3238));
                        float _3242 = inversesqrt(_3239);
                        float _3243 = _3242 * _3236;
                        float _3244 = _3242 * _3237;
                        float _3245 = _3242 * _3238;
                        float _3246 = dot(vec3(_899, _902, _905), vec3(_3243, _3244, _3245));
                        float _3251 = 1.0 - (_3239 * _3196.w);
                        float _4627 = isnan(0.0) ? _3251 : (isnan(_3251) ? 0.0 : max(_3251, 0.0));
                        float _3252 = isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0));
                        float _3253 = sqrt(_3239) * _3215.w;
                        float _3256 = 1.39999997615814208984375 / (_3253 + 1.39999997615814208984375);
                        float _3257 = _3256 * _3256;
                        float _3260 = ((1.0 - _3257) * _3246) + _3257;
                        float _3263 = _3253 * _3253;
                        float _3267 = ((isnan(0.0) ? _3260 : (isnan(_3260) ? 0.0 : max(_3260, 0.0))) * _3252) / ((_3263 * 0.699999988079071044921875) + 1.0);
                        float _3271 = (-0.0) - _2681;
                        float _3272 = (-0.0) - _2682;
                        float _3273 = (-0.0) - _2683;
                        float _3277 = inversesqrt(dot(vec3(_3271, _3272, _3273), vec3(_3271, _3272, _3273)));
                        float _3278 = _3277 * _3271;
                        float _3279 = _3277 * _3272;
                        float _3280 = _3277 * _3273;
                        float _3288 = exp2(log2(1.0 / ((_3263 * 3.5) + 5.0)) * 0.25);
                        float _3289 = 1.0 - _974;
                        float _3296 = sqrt(1.0 - ((1.0 - (_3289 * _3289)) * (1.0 - (_3288 * _3288))));
                        float _3297 = _3296 * _3296;
                        float _3298 = _3297 * _3297;
                        float _3299 = _3278 + _3243;
                        float _3300 = _3279 + _3244;
                        float _3301 = _3280 + _3245;
                        float _3305 = inversesqrt(dot(vec3(_3299, _3300, _3301), vec3(_3299, _3300, _3301)));
                        float _3309 = dot(vec3(_899, _902, _905), vec3(_3278, _3279, _3280));
                        float _4643 = isnan(0.0) ? _3309 : (isnan(_3309) ? 0.0 : max(_3309, 0.0));
                        float _3312 = isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0));
                        float _3313 = dot(vec3(_899, _902, _905), vec3(_3305 * _3299, _3305 * _3300, _3305 * _3301));
                        float _4654 = isnan(0.0) ? _3313 : (isnan(_3313) ? 0.0 : max(_3313, 0.0));
                        float _3316 = isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0));
                        float _3320 = ((_3316 * _3316) * (_3298 + (-1.0))) + 1.0;
                        float _3321 = _3256 * _3297;
                        float _3322 = _3321 * _3321;
                        float _3325 = ((1.0 - _3322) * _3246) + _3322;
                        float _4665 = isnan(0.0) ? _3325 : (isnan(_3325) ? 0.0 : max(_3325, 0.0));
                        float _3326 = isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0));
                        float _3327 = 1.0 - _3297;
                        float _3337 = (0.5 / (((_3326 * ((_3312 * _3327) + _3297)) + 9.9999999392252902907785028219223e-09) + (((_3326 * _3327) + _3297) * _3312))) * _3326;
                        float _4676 = isnan(0.0) ? _3337 : (isnan(_3337) ? 0.0 : max(_3337, 0.0));
                        float _3348 = (((_3298 * 3.1415927410125732421875) * (isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0)))) / ((_3320 * _3320) * ((_3263 * 2.1991131305694580078125) + 3.141590118408203125))) * _3252;
                        _3100 = (_3267 * _3215.x) + _3173;
                        _3101 = (_3267 * _3215.y) + _3174;
                        _3102 = (_3267 * _3215.z) + _3175;
                        _3097 = (_3348 * _3232.x) + _3170;
                        _3098 = (_3348 * _3232.y) + _3171;
                        _3099 = (_3348 * _3232.z) + _3172;
                        if (_3177 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3170 = _3097;
                            _3171 = _3098;
                            _3172 = _3099;
                            _3173 = _3100;
                            _3174 = _3101;
                            _3175 = _3102;
                            _3176 = _3177;
                        }
                    }
                    frontier_phi_68_pred = _3097;
                    frontier_phi_68_pred_1 = _3102;
                    frontier_phi_68_pred_2 = _3101;
                    frontier_phi_68_pred_3 = _3100;
                    frontier_phi_68_pred_4 = _3099;
                    frontier_phi_68_pred_5 = _3098;
                }
                _2864 = frontier_phi_68_pred;
                _2874 = frontier_phi_68_pred_1;
                _2872 = frontier_phi_68_pred_2;
                _2870 = frontier_phi_68_pred_3;
                _2868 = frontier_phi_68_pred_4;
                _2866 = frontier_phi_68_pred_5;
                uint _3032 = _3031 + 1u;
                if (_3032 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3025 = _2864;
                    _3026 = _2866;
                    _3027 = _2868;
                    _3028 = _2870;
                    _3029 = _2872;
                    _3030 = _2874;
                    _3031 = _3032;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2863 = _2864;
            _2865 = _2866;
            _2867 = _2868;
            _2869 = _2870;
            _2871 = _2872;
            _2873 = _2874;
        }
        uvec4 _2877 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2878 = _2877.z;
        uint _2880 = (_2878 >> 8u) & 15u;
        float _2993;
        float _2995;
        float _2997;
        float _2999;
        float _3001;
        float _3003;
        if (((4294967295u << _2880) & _2727) == 0u)
        {
            _2993 = _2863;
            _2995 = _2865;
            _2997 = _2867;
            _2999 = _2869;
            _3001 = _2871;
            _3003 = _2873;
        }
        else
        {
            float _3018 = inversesqrt(dot(vec3(_2681, _2682, _2683), vec3(_2681, _2682, _2683)));
            float _3019 = _3018 * _2681;
            float _3020 = _3018 * _2682;
            float _3021 = _3018 * _2683;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2880 < ((_2878 >> 12u) & 15u))
            {
                float _2994;
                float _2996;
                float _2998;
                float _3000;
                float _3002;
                float _3004;
                float _3153 = _2863;
                float _3154 = _2865;
                float _3155 = _2867;
                float _3156 = _2869;
                float _3157 = _2871;
                float _3158 = _2873;
                uint _3159 = _2880;
                uint _3168;
                bool _3169;
                for (;;)
                {
                    _3168 = texelFetch(g_lightClassification, int((((_2721 << 5u) + (_2707 << 9u)) + (_3159 << 2u)) >> 2u)).x;
                    _3169 = _3168 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3169)
                    {
                        frontier_phi_79_pred = _3158;
                        frontier_phi_79_pred_1 = _3157;
                        frontier_phi_79_pred_2 = _3156;
                        frontier_phi_79_pred_3 = _3155;
                        frontier_phi_79_pred_4 = _3154;
                        frontier_phi_79_pred_5 = _3153;
                    }
                    else
                    {
                        float _3362;
                        float _3363;
                        float _3364;
                        float _3365;
                        float _3366;
                        float _3367;
                        float _3655;
                        float _3656;
                        float _3657;
                        float _3658;
                        float _3659;
                        float _3660;
                        float _3375 = _3153;
                        float _3376 = _3154;
                        float _3377 = _3155;
                        float _3378 = _3156;
                        float _3379 = _3157;
                        float _3380 = _3158;
                        uint _3381 = _3168;
                        uint _3382;
                        vec4 _3407;
                        float _3408;
                        vec4 _3423;
                        vec3 _3435;
                        vec4 _3450;
                        vec4 _3465;
                        float _3511;
                        bool _3512;
                        for (;;)
                        {
                            uint _3392 = ((_3159 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3381));
                            _3382 = (_3381 + 4294967295u) & _3381;
                            uint _3394 = _3392 * 40u;
                            _3407 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3394)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 3u)).x));
                            _3408 = _3407.w;
                            uint _3410 = (_3392 * 40u) + 4u;
                            _3423 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3410)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 3u)).x));
                            uint _3425 = (_3392 * 40u) + 8u;
                            _3435 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3425)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 2u)).x));
                            uint _3437 = (_3392 * 40u) + 16u;
                            _3450 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3437)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 3u)).x));
                            uint _3452 = (_3392 * 40u) + 20u;
                            _3465 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3452)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 3u)).x));
                            uint _3467 = (_3392 * 40u) + 24u;
                            vec4 _3480 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3467)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 3u)).x));
                            uint _3486 = (_3392 * 40u) + 28u;
                            vec4 _3499 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3486)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3486 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3486 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3486 + 3u)).x));
                            _3511 = fma(_2683, _3499.z, fma(_2682, _3499.y, _3499.x * _2681)) + _3499.w;
                            _3512 = !((fma(_2683, _3480.z, fma(_2682, _3480.y, _3480.x * _2681)) + _3480.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3512)
                            {
                                float _3539 = _3407.x - _2681;
                                float _3540 = _3407.y - _2682;
                                float _3541 = _3407.z - _2683;
                                float _3542 = dot(vec3(_3539, _3540, _3541), vec3(_3539, _3540, _3541));
                                float _3545 = inversesqrt(_3542);
                                float _3546 = _3545 * _3539;
                                float _3547 = _3545 * _3540;
                                float _3548 = _3545 * _3541;
                                float _3552 = 1.0 - (_3542 / (_3408 * _3408));
                                float _4687 = isnan(0.0) ? _3552 : (isnan(_3552) ? 0.0 : max(_3552, 0.0));
                                float _3553 = isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0));
                                float _3557 = sqrt(_3542) * _3423.w;
                                float _3559 = 1.39999997615814208984375 / (_3557 + 1.39999997615814208984375);
                                float _3560 = _3559 * _3559;
                                float _3563 = ((1.0 - _3560) * dot(vec3(_3546, _3547, _3548), vec3(_899, _902, _905))) + _3560;
                                float _3566 = _3557 * _3557;
                                float _3570 = (fma(_2683, _3450.z, fma(_2682, _3450.y, _3450.x * _2681)) + _3450.w) / _3511;
                                float _3571 = (fma(_2683, _3465.z, fma(_2682, _3465.y, _3465.x * _2681)) + _3465.w) / _3511;
                                float _3575 = 1.0 - dot(vec2(_3570, _3571), vec2(_3570, _3571));
                                float _4703 = isnan(0.0) ? _3575 : (isnan(_3575) ? 0.0 : max(_3575, 0.0));
                                float _3576 = isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0));
                                float _3577 = _3576 * (((isnan(0.0) ? _3563 : (isnan(_3563) ? 0.0 : max(_3563, 0.0))) * _3553) / ((_3566 * 0.699999988079071044921875) + 1.0));
                                float _3589 = exp2(log2(1.0 / ((_3566 * 3.5) + 5.0)) * 0.25);
                                float _3590 = 1.0 - _974;
                                float _3597 = sqrt(1.0 - ((1.0 - (_3590 * _3590)) * (1.0 - (_3589 * _3589))));
                                float _3598 = _3597 * _3597;
                                float _3599 = _3598 * _3598;
                                float _3600 = _3546 - _3019;
                                float _3601 = _3547 - _3020;
                                float _3602 = _3548 - _3021;
                                float _3606 = inversesqrt(dot(vec3(_3600, _3601, _3602), vec3(_3600, _3601, _3602)));
                                float _3610 = dot(vec3(_899, _902, _905), vec3((-0.0) - _3019, (-0.0) - _3020, (-0.0) - _3021));
                                float _4714 = isnan(0.0) ? _3610 : (isnan(_3610) ? 0.0 : max(_3610, 0.0));
                                float _3613 = isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0));
                                float _3614 = dot(vec3(_899, _902, _905), vec3(_3606 * _3600, _3606 * _3601, _3606 * _3602));
                                float _4725 = isnan(0.0) ? _3614 : (isnan(_3614) ? 0.0 : max(_3614, 0.0));
                                float _3617 = isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0));
                                float _3621 = ((_3617 * _3617) * (_3599 + (-1.0))) + 1.0;
                                float _3622 = _3559 * _3598;
                                float _3623 = _3622 * _3622;
                                float _3629 = ((1.0 - _3623) * dot(vec3(_899, _902, _905), vec3(_3546, _3547, _3548))) + _3623;
                                float _4736 = isnan(0.0) ? _3629 : (isnan(_3629) ? 0.0 : max(_3629, 0.0));
                                float _3630 = isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0));
                                float _3631 = 1.0 - _3598;
                                float _3641 = (0.5 / (((_3630 * ((_3613 * _3631) + _3598)) + 9.9999999392252902907785028219223e-09) + (((_3630 * _3631) + _3598) * _3613))) * _3630;
                                float _4747 = isnan(0.0) ? _3641 : (isnan(_3641) ? 0.0 : max(_3641, 0.0));
                                float _3651 = (_3576 * _3553) * (((_3599 * 3.1415927410125732421875) * (isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0)))) / ((_3621 * _3621) * ((_3566 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3577 * _3423.y;
                                frontier_phi_85_pred_1 = _3577 * _3423.x;
                                frontier_phi_85_pred_2 = _3651 * _3435.z;
                                frontier_phi_85_pred_3 = _3651 * _3435.y;
                                frontier_phi_85_pred_4 = _3651 * _3435.x;
                                frontier_phi_85_pred_5 = _3577 * _3423.z;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3659 = frontier_phi_85_pred;
                            _3658 = frontier_phi_85_pred_1;
                            _3657 = frontier_phi_85_pred_2;
                            _3656 = frontier_phi_85_pred_3;
                            _3655 = frontier_phi_85_pred_4;
                            _3660 = frontier_phi_85_pred_5;
                            _3365 = _3658 + _3378;
                            _3366 = _3659 + _3379;
                            _3367 = _3660 + _3380;
                            _3362 = _3655 + _3375;
                            _3363 = _3656 + _3376;
                            _3364 = _3657 + _3377;
                            if (_3382 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3375 = _3362;
                                _3376 = _3363;
                                _3377 = _3364;
                                _3378 = _3365;
                                _3379 = _3366;
                                _3380 = _3367;
                                _3381 = _3382;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3367;
                        frontier_phi_79_pred_1 = _3366;
                        frontier_phi_79_pred_2 = _3365;
                        frontier_phi_79_pred_3 = _3364;
                        frontier_phi_79_pred_4 = _3363;
                        frontier_phi_79_pred_5 = _3362;
                    }
                    _3004 = frontier_phi_79_pred;
                    _3002 = frontier_phi_79_pred_1;
                    _3000 = frontier_phi_79_pred_2;
                    _2998 = frontier_phi_79_pred_3;
                    _2996 = frontier_phi_79_pred_4;
                    _2994 = frontier_phi_79_pred_5;
                    uint _3160 = _3159 + 1u;
                    if (_3160 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3153 = _2994;
                        _3154 = _2996;
                        _3155 = _2998;
                        _3156 = _3000;
                        _3157 = _3002;
                        _3158 = _3004;
                        _3159 = _3160;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2998;
                frontier_phi_60_61_ladder_1 = _3004;
                frontier_phi_60_61_ladder_2 = _3002;
                frontier_phi_60_61_ladder_3 = _3000;
                frontier_phi_60_61_ladder_4 = _2996;
                frontier_phi_60_61_ladder_5 = _2994;
            }
            else
            {
                frontier_phi_60_61_ladder = _2867;
                frontier_phi_60_61_ladder_1 = _2873;
                frontier_phi_60_61_ladder_2 = _2871;
                frontier_phi_60_61_ladder_3 = _2869;
                frontier_phi_60_61_ladder_4 = _2865;
                frontier_phi_60_61_ladder_5 = _2863;
            }
            _2993 = frontier_phi_60_61_ladder_5;
            _2995 = frontier_phi_60_61_ladder_4;
            _2997 = frontier_phi_60_61_ladder;
            _2999 = frontier_phi_60_61_ladder_3;
            _3001 = frontier_phi_60_61_ladder_2;
            _3003 = frontier_phi_60_61_ladder_1;
        }
        float _3008 = isnan(1.0) ? _958 : (isnan(_958) ? 1.0 : min(_958, 1.0));
        _2740 = (_3008 * _2999) + _2173;
        _2742 = (_3008 * _3001) + _2175;
        _2744 = (_3008 * _3003) + _2177;
        _2746 = ((_2993 * _943) * _3008) + _2521;
        _2748 = ((_2995 * _945) * _3008) + _2523;
        _2750 = ((_2997 * _946) * _3008) + _2525;
    }
    else
    {
        _2740 = _2173;
        _2742 = _2175;
        _2744 = _2177;
        _2746 = _2521;
        _2748 = _2523;
        _2750 = _2525;
    }
    uint _2756 = _919 + uint(cbMatDynParam._m0[0u].w);
    float _2764 = ((cbMtdParam._m0[20u].x * cbMtdParam._m0[25u].x) * _709.x) * cbInstanceData._m0[_2756].x;
    float _2767 = ((cbMtdParam._m0[20u].y * cbMtdParam._m0[25u].x) * _709.y) * cbInstanceData._m0[_2756].y;
    float _2770 = ((cbMtdParam._m0[20u].z * cbMtdParam._m0[25u].x) * _709.z) * cbInstanceData._m0[_2756].z;
    float _4763 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
    float _4774 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
    float _4785 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
    float _2787 = (((isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0))) * (_2740 + ((isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0))) * _958))) + ((_2746 + ((isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0))) * _1792)) * cbPerFrame._m0[3u].x)) + _2764;
    float _2789 = (_2767 + ((_2748 + ((isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0))) * _1792)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0))) * (_2742 + ((isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0))) * _958)));
    float _2791 = (_2770 + ((_2750 + ((isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0))) * _1792)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0))) * (_2744 + ((isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0))) * _958)));
    float _2792 = isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : max(_2787, 0.0));
    float _2793 = isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : max(_2789, 0.0));
    float _2794 = isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : max(_2791, 0.0));
    float _2800 = cbMtdParam._m0[2u].x * _2764;
    float _2801 = cbMtdParam._m0[2u].y * _2767;
    float _2802 = cbMtdParam._m0[2u].z * _2770;
    float _4811 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2804 = isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0));
    uint _2805 = _918 + 6u;
    float _2813 = _880 / cbSceneParam._m0[86u].x;
    float _2814 = _881 / cbSceneParam._m0[86u].y;
    vec4 _2828 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2813, _2814, (log2((isnan(cbSceneParam._m0[77u].w) ? _806 : (isnan(_806) ? cbSceneParam._m0[77u].w : min(_806, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2830 = _2828.x;
    float _2831 = _2828.y;
    float _2832 = _2828.z;
    float _2833 = _2828.w;
    float _2926;
    float _2928;
    float _2930;
    float _2932;
    if (_806 > cbSceneParam._m0[78u].w)
    {
        float _2888 = isnan(_806) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _806 : min(cbSceneParam._m0[80u].w, _806));
        float _2889 = _2888 / _806;
        float _2900 = _2889 * _856;
        float _2901 = _857 * _2889;
        float _2902 = (-0.0) - _2901;
        float _2904 = _2889 * _858;
        float _2906 = (cbSceneParam._m0[77u].w * _2902) / _2888;
        float _2907 = _2906 + cbSceneParam._m0[79u].w;
        float _2908 = cbSceneParam._m0[79u].w - _2901;
        float _2914 = sqrt(((_2900 * _2900) + (_2901 * _2901)) + (_2904 * _2904));
        float _2917 = (1.0 - (cbSceneParam._m0[77u].w / _2888)) * _2914;
        float _2922 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2924 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3110;
        if (abs((_2902 - _2906) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3110 = ((((_2907 > 0.0) ? exp2(_2922 * _2907) : (2.0 - exp2(_2924 * _2907))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2917;
        }
        else
        {
            float _3054 = 1.0 / cbSceneParam._m0[80u].x;
            float _3055 = isnan(_2908) ? _2907 : (isnan(_2907) ? _2908 : max(_2907, _2908));
            float _3056 = isnan(_2908) ? _2907 : (isnan(_2907) ? _2908 : min(_2907, _2908));
            float _3065 = isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : min(_3055, 0.0));
            float _3066 = isnan(0.0) ? _3056 : (isnan(_3056) ? 0.0 : min(_3056, 0.0));
            _3110 = ((abs(_2914 / _2902) * cbSceneParam._m0[80u].y) * ((((_3065 - _3066) * 2.0) - ((exp2(_2922 * (isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : max(_3055, 0.0)))) - exp2(_2922 * (isnan(0.0) ? _3056 : (isnan(_3056) ? 0.0 : max(_3056, 0.0))))) * _3054)) - ((exp2(_2924 * _3065) - exp2(_2924 * _3066)) * _3054))) + (_2917 * cbSceneParam._m0[80u].z);
        }
        vec4 _3112 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2813, _2814, 1.0), 0.0);
        float _3121 = exp2((_3110 * (-1.44269502162933349609375)) * (1.0 - _3112.w));
        float _3122 = log2(_3121);
        float _3138 = log2(_2833);
        _2926 = (exp2(_3138 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3122 * cbSceneParam._m0[78u].x)) * _3112.x) / cbSceneParam._m0[78u].x)) + _2830;
        _2928 = (exp2(_3138 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3122 * cbSceneParam._m0[78u].y)) * _3112.y) / cbSceneParam._m0[78u].y)) + _2831;
        _2930 = (exp2(_3138 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3122 * cbSceneParam._m0[78u].z)) * _3112.z) / cbSceneParam._m0[78u].z)) + _2832;
        _2932 = _3121 * _2833;
    }
    else
    {
        _2926 = _2830;
        _2928 = _2831;
        _2930 = _2832;
        _2932 = _2833;
    }
    bool _3148;
    vec4 _2942;
    vec4 _2964;
    float _2966;
    float _2970;
    float _2971;
    float _2972;
    float _2975;
    float _2978;
    float _2981;
    float _2982;
    bool _2992;
    for (;;)
    {
        _2942 = cbMatDynParam._m0[0u];
        float _2944 = roundEven(_2942.y);
        bool _2945 = _2944 == 3.0;
        float _2946 = log2(_2932);
        float _2950 = exp2(_2946 * cbSceneParam._m0[78u].x);
        float _2951 = exp2(_2946 * cbSceneParam._m0[78u].y);
        float _2952 = exp2(_2946 * cbSceneParam._m0[78u].z);
        float _2953 = _2950 * _2792;
        float _2954 = _2951 * _2793;
        float _2955 = _2952 * _2794;
        float _2962 = _869 + (-0.5);
        _2964 = cbMtdParam._m0[1u];
        _2966 = _2964.y * _2962;
        float _2969 = (_2944 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2970 = _2969 * (_2945 ? _2953 : (_2953 + (cbSceneParam._m0[72u].w * _2926)));
        _2971 = _2969 * (_2945 ? _2954 : (_2954 + (cbSceneParam._m0[72u].w * _2928)));
        _2972 = _2969 * (_2945 ? _2955 : (_2955 + (cbSceneParam._m0[72u].w * _2930)));
        _2975 = ((_2800 * _2804) * _2950) * _2969;
        _2978 = ((_2801 * _2804) * _2951) * _2969;
        _2981 = ((_2802 * _2804) * _2952) * _2969;
        _2982 = _2962 * 0.999000012874603271484375;
        _2992 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2992)
        {
            if ((cbInstanceData._m0[_918 + 7u].x + _2982) < 0.5)
            {
                _3148 = true;
                break;
            }
        }
        uint _3089 = _919 + uint(_2942.w);
        if ((cbInstanceData._m0[_3089].w < 1.0) && ((cbInstanceData._m0[_3089].w + _2982) < 0.5))
        {
            _3148 = true;
            break;
        }
        if ((_2966 + 1.0) < _2964.x)
        {
            _3148 = true;
            break;
        }
        _3148 = false;
        break;
    }
    float _3353;
    if (_3148)
    {
        discard_state = true;
        _3353 = 0.0;
    }
    else
    {
        _3353 = cbInstanceData._m0[_2805].w;
    }
    SV_Target.x = _2970;
    SV_Target.y = _2971;
    SV_Target.z = _2972;
    SV_Target.w = _3353;
    SV_Target_1.x = _2975;
    SV_Target_1.y = _2978;
    SV_Target_1.z = _2981;
    SV_Target_1.w = cbInstanceData._m0[_2805].w;
    discard_exit();
}


