#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[29];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 12) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 9) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2DArray C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_0;
layout(set = 0, binding = 14) uniform texture2DArray C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1280;
float _3705;
float _3706;
float _3707;
float _3708;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _203 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _204 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _205 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _211 = inversesqrt(dot(vec3(_203, _204, _205), vec3(_203, _204, _205)));
    float _218 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _225 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _246 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_1) + cbTextureTilingScale._m0[10u].w));
    float _260 = exp2(log2(_246.w * cbMtdParam._m0[25u].z) * cbMtdParam._m0[22u].x);
    float _261 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _262 = isnan(1.0) ? _261 : (isnan(_261) ? 1.0 : min(_261, 1.0));
    vec4 _276 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _280 = _276.z;
    float _289 = exp2(log2(_280 * cbMtdParam._m0[22u].y) * cbMtdParam._m0[21u].y);
    float _290 = isnan(0.0) ? _289 : (isnan(_289) ? 0.0 : max(_289, 0.0));
    float _291 = isnan(1.0) ? _290 : (isnan(_290) ? 1.0 : min(_290, 1.0));
    float _312 = roundEven(5.0 - ((texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w)).x + (-0.02500000037252902984619140625)) * 8.0));
    float _313 = isnan(0.0) ? _312 : (isnan(_312) ? 0.0 : max(_312, 0.0));
    float _314 = isnan(4.0) ? _313 : (isnan(_313) ? 4.0 : min(_313, 4.0));
    float _327 = floor(_314);
    vec4 _330 = texture(sampler2DArray(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w, _327));
    vec4 _354 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _365 = cbMtdParam._m0[9u].x * _354.x;
    float _366 = cbMtdParam._m0[9u].y * _354.y;
    float _367 = cbMtdParam._m0[9u].z * _354.z;
    float _374 = (((cbMtdParam._m0[10u].x * _330.x) - _365) * _291) + _365;
    float _375 = (((cbMtdParam._m0[10u].y * _330.y) - _366) * _291) + _366;
    float _376 = (((cbMtdParam._m0[10u].z * _330.z) - _367) * _291) + _367;
    float _382 = exp2(log2(_276.w) * cbMtdParam._m0[22u].w);
    vec4 _395 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _415 = (((cbMtdParam._m0[16u].x * _395.x) - _374) * _382) + _374;
    float _416 = (((cbMtdParam._m0[16u].y * _395.y) - _375) * _382) + _375;
    float _417 = (((cbMtdParam._m0[16u].z * _395.z) - _376) * _382) + _376;
    vec4 _430 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _455 = (_246.x * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].x * _430.x) - _415) * _262) + _415);
    float _457 = (_246.y * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].y * _430.y) - _416) * _262) + _416);
    float _459 = (_246.z * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].z * _430.z) - _417) * _262) + _417);
    float _182[5];
    float _183[5];
    _182[0u] = cbMtdParam._m0[25u].w;
    _183[0u] = cbMtdParam._m0[26u].x;
    _182[1u] = cbMtdParam._m0[27u].w;
    _183[1u] = cbMtdParam._m0[28u].x;
    _182[2u] = cbMtdParam._m0[27u].y;
    _183[2u] = cbMtdParam._m0[27u].z;
    _182[3u] = cbMtdParam._m0[26u].w;
    _183[3u] = cbMtdParam._m0[27u].x;
    _182[4u] = cbMtdParam._m0[26u].y;
    _183[4u] = cbMtdParam._m0[26u].z;
    float _499 = isnan(0.0) ? _314 : (isnan(_314) ? 0.0 : max(_314, 0.0));
    uint _501 = uint(int(isnan(4.0) ? _499 : (isnan(_499) ? 4.0 : min(_499, 4.0))));
    float _508 = ((_183[_501] - cbMtdParam._m0[21u].z) * _291) + cbMtdParam._m0[21u].z;
    float _511 = ((cbMtdParam._m0[21u].w - _508) * _382) + _508;
    float _514 = ((cbMtdParam._m0[24u].y - _511) * _262) + _511;
    vec4 _530 = texture(sampler2DArray(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w, _327));
    vec4 _547 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _549 = _547.x;
    float _550 = _547.y;
    float _555 = cbMtdParam._m0[21u].x + _547.z;
    float _558 = (((_530.z + _182[_501]) - _555) * _291) + _555;
    vec4 _571 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_1) + cbTextureTilingScale._m0[11u].w));
    float _582 = (((_571.z - _558) + cbMtdParam._m0[25u].y) * _382) + _558;
    float _588 = ((((_280 * 2.0) * _582) - _582) * cbMtdParam._m0[23u].w) + _582;
    vec4 _601 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_1) + cbTextureTilingScale._m0[12u].w));
    float _612 = (((cbMtdParam._m0[22u].z + _601.z) - _588) * _262) + _588;
    vec4 _632 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _649 = ((_530.x - _549) * _291) + _549;
    float _650 = ((_530.y - _550) * _291) + _550;
    float _655 = ((_571.x - _649) * _382) + _649;
    float _656 = ((_571.y - _650) * _382) + _650;
    float _665 = ((((_601.x - _655) * _262) + _655) * 2.0) + (-1.0);
    float _666 = ((((_601.y - _656) * _262) + _656) * 2.0) + (-1.0);
    float _667 = dot(vec2(_665, _666), vec2(_665, _666));
    float _3757 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _672 = sqrt(1.0 - (isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0))));
    float _675 = (cbMtdParam._m0[24u].z * ((_276.x * 2.0) + (-1.0))) + _665;
    float _676 = (cbMtdParam._m0[24u].z * ((_276.y * 2.0) + (-1.0))) + _666;
    float _678 = gl_FragCoord.x * 0.125;
    float _680 = gl_FragCoord.y * 0.125;
    float _691 = fma(_672, _218 * NORMAL.x, fma(_676, _225 * TANGENT.x, (_211 * _203) * _675));
    float _694 = fma(_672, _218 * NORMAL.y, fma(_676, _225 * TANGENT.y, (_211 * _204) * _675));
    float _697 = fma(_672, _218 * NORMAL.z, fma(_676, _225 * TANGENT.z, (_211 * _205) * _675));
    float _701 = inversesqrt(dot(vec3(_691, _694, _697), vec3(_691, _694, _697)));
    float _702 = _701 * _691;
    float _703 = _701 * _694;
    float _704 = _701 * _697;
    float _3768 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _705 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
    float _3779 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _3790 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _3801 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _3812 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _709 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
    if (!(cbMtdParam._m0[24u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_678, _680)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _729 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _769 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _779 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _769);
    float _780 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _769);
    float _781 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _769);
    float _785 = inversesqrt(dot(vec3(_779, _780, _781), vec3(_779, _780, _781)));
    float _786 = _779 * _785;
    float _787 = _780 * _785;
    float _788 = _781 * _785;
    vec4 _790 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_678, _680));
    float _792 = _790.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _962 = sqrt(((_779 * _779) + (_780 * _780)) + (_781 * _781));
        float _968 = (cbMatDynParam._m0[5u].x * _962) + cbMatDynParam._m0[5u].y;
        float _3823 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _969 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
        float _973 = (cbMatDynParam._m0[5u].z * _962) + cbMatDynParam._m0[5u].w;
        float _3834 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0))) - _969)) + _969) < ((_792 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _803 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _804 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _822 = fma(_704, cbSceneParam._m0[5u].z, fma(_703, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _702));
    float _825 = fma(_704, cbSceneParam._m0[6u].z, fma(_703, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _702));
    float _828 = fma(_704, cbSceneParam._m0[7u].z, fma(_703, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _702));
    uint _841 = uint(roundEven(NORMAL.w)) * 13u;
    uint _842 = _841 + 9u;
    uint _843 = _842 + uint(cbMatDynParam._m0[0u].w);
    float _849 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0)))) * cbInstanceData._m0[_843].x;
    float _850 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0)))) * cbInstanceData._m0[_843].y;
    float _851 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0)))) * cbInstanceData._m0[_843].z;
    float _3845 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    float _852 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
    float _3856 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
    float _853 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
    float _3867 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
    float _854 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
    float _855 = 1.0 - _709;
    float _856 = _852 * _855;
    float _857 = _853 * _855;
    float _858 = _854 * _855;
    float _863 = (_852 + (-0.039999999105930328369140625)) * _709;
    float _864 = (_853 + (-0.039999999105930328369140625)) * _709;
    float _865 = (_854 + (-0.039999999105930328369140625)) * _709;
    float _866 = _863 + 0.039999999105930328369140625;
    float _868 = _864 + 0.039999999105930328369140625;
    float _869 = _865 + 0.039999999105930328369140625;
    vec4 _878 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _803, cbSceneParam._m0[86u].y * _804));
    float _881 = _878.x * TEXCOORD_3.w;
    float _882 = dot(vec3(_702, _703, _704), vec3(_786, _787, _788));
    float _885 = _882 * 2.0;
    float _889 = (_885 * _702) - _786;
    float _890 = (_885 * _703) - _787;
    float _891 = (_885 * _704) - _788;
    float _895 = abs(dot(vec3(_786, _787, _788), vec3(_702, _703, _704)));
    float _3878 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
    float _897 = sqrt(_705);
    float _908 = exp2((_897 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_897 * 3.0));
    float _914 = (1.0 - _908) * ((_897 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _915 = _908 * _897;
    float _943 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _947 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _951 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1279;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1004 = fma(_951, cbModelParam._m0[26u].z, fma(_947, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _943));
        float _1008 = fma(_951, cbModelParam._m0[27u].z, fma(_947, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _943));
        float _1012 = fma(_951, cbModelParam._m0[28u].z, fma(_947, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _943));
        float _1037 = _943 + _702;
        float _1038 = _947 + _703;
        float _1039 = _951 + _704;
        float _1049 = fma(_1039, cbModelParam._m0[26u].z, fma(_1038, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1037)) - _1004;
        float _1050 = fma(_1039, cbModelParam._m0[27u].z, fma(_1038, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1037)) - _1008;
        float _1051 = fma(_1039, cbModelParam._m0[28u].z, fma(_1038, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1037)) - _1012;
        float _1055 = inversesqrt(dot(vec3(_1049, _1050, _1051), vec3(_1049, _1050, _1051)));
        float _1068 = ((_1055 * _1049) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1004 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1069 = ((_1055 * _1050) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1008 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1070 = ((_1055 * _1051) / cbModelParam._m0[34u].z) + ((((((_1012 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1073 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1068, _1069, _1070), 0.0);
        vec4 _1080 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1068, _1069, _1070), 0.0);
        vec4 _1087 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1068, _1069, _1070), 0.0);
        vec4 _1094 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1068, _1069, _1070), 0.0);
        float _1107 = exp2((_1073.w + (-0.5)) * 20.0) * 2.0;
        float _1108 = _1107 * (_1073.x + (-0.5));
        float _1109 = _1107 * (_1073.y + (-0.5));
        float _1110 = _1107 * (_1073.z + (-0.5));
        float _1117 = exp2((_1080.w + (-0.5)) * 20.0) * 2.0;
        float _1118 = _1117 * (_1080.x + (-0.5));
        float _1119 = _1117 * (_1080.y + (-0.5));
        float _1120 = _1117 * (_1080.z + (-0.5));
        float _1127 = exp2((_1087.w + (-0.5)) * 20.0) * 2.0;
        float _1128 = _1127 * (_1087.x + (-0.5));
        float _1129 = _1127 * (_1087.y + (-0.5));
        float _1130 = _1127 * (_1087.z + (-0.5));
        float _1137 = exp2((_1094.w + (-0.5)) * 20.0) * 2.0;
        float _1138 = _1137 * (_1094.x + (-0.5));
        float _1139 = _1137 * (_1094.y + (-0.5));
        float _1140 = _1137 * (_1094.z + (-0.5));
        float _1141 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1142 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1143 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1144 = _1108 * 0.5;
        float _1145 = _1118 * 0.5;
        float _1146 = _1128 * 0.5;
        float _1147 = dot(vec3(_1144, _1145, _1146), vec3(_1144, _1145, _1146));
        float _1152 = (_1147 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1147);
        float _1161 = (dot(vec3(_702, _703, _704), vec3(_1152 * _1144, _1152 * _1145, _1152 * _1146)) + 1.0) * 0.5;
        float _3904 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1171 = sqrt(((_1145 * _1145) + (_1144 * _1144)) + (_1146 * _1146)) / (_1141 + 9.9999997473787516355514526367188e-06);
        float _3915 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1172 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
        float _1173 = _1172 * 2.0;
        float _1177 = (1.0 - _1172) / (_1172 + 1.0);
        float _3926 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1178 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
        float _1187 = ((((1.0 - _1178) * (_1173 + 2.0)) * exp2(log2(isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0))) * (_1173 + 1.0))) + _1178) * _1141;
        float _1188 = _1109 * 0.5;
        float _1189 = _1119 * 0.5;
        float _1190 = _1129 * 0.5;
        float _1191 = dot(vec3(_1188, _1189, _1190), vec3(_1188, _1189, _1190));
        float _1196 = (_1191 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1191);
        float _1204 = (dot(vec3(_702, _703, _704), vec3(_1196 * _1188, _1196 * _1189, _1196 * _1190)) + 1.0) * 0.5;
        float _3937 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1213 = sqrt(((_1189 * _1189) + (_1188 * _1188)) + (_1190 * _1190)) / (_1142 + 9.9999997473787516355514526367188e-06);
        float _3948 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1214 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
        float _1215 = _1214 * 2.0;
        float _1219 = (1.0 - _1214) / (_1214 + 1.0);
        float _3959 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1220 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
        float _1229 = ((((1.0 - _1220) * (_1215 + 2.0)) * exp2(log2(isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0))) * (_1215 + 1.0))) + _1220) * _1142;
        float _1230 = _1110 * 0.5;
        float _1231 = _1120 * 0.5;
        float _1232 = _1130 * 0.5;
        float _1233 = dot(vec3(_1230, _1231, _1232), vec3(_1230, _1231, _1232));
        float _1238 = (_1233 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1233);
        float _1246 = (dot(vec3(_702, _703, _704), vec3(_1238 * _1230, _1238 * _1231, _1238 * _1232)) + 1.0) * 0.5;
        float _3970 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1255 = sqrt(((_1231 * _1231) + (_1230 * _1230)) + (_1232 * _1232)) / (_1143 + 9.9999997473787516355514526367188e-06);
        float _3981 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1256 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
        float _1257 = _1256 * 2.0;
        float _1261 = (1.0 - _1256) / (_1256 + 1.0);
        float _3992 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1262 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
        float _1271 = ((((1.0 - _1262) * (_1257 + 2.0)) * exp2(log2(isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0))) * (_1257 + 1.0))) + _1262) * _1143;
        _1279 = _1110;
        _1281 = _1109;
        _1282 = _1108;
        _1283 = _1120;
        _1284 = _1119;
        _1285 = _1118;
        _1286 = _1130;
        _1287 = _1129;
        _1288 = _1128;
        _1289 = _1143;
        _1290 = _1142;
        _1291 = _1141;
        _1292 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0)));
        _1293 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0)));
        _1294 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0)));
    }
    else
    {
        _1279 = _1280;
        _1281 = _1280;
        _1282 = _1280;
        _1283 = _1280;
        _1284 = _1280;
        _1285 = _1280;
        _1286 = _1280;
        _1287 = _1280;
        _1288 = _1280;
        _1289 = _1280;
        _1290 = _1280;
        _1291 = _1280;
        _1292 = 0.0;
        _1293 = 0.0;
        _1294 = 0.0;
    }
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1320 = fma(_951, cbModelParam._m0[30u].z, fma(_947, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _943));
        float _1324 = fma(_951, cbModelParam._m0[31u].z, fma(_947, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _943));
        float _1328 = fma(_951, cbModelParam._m0[32u].z, fma(_947, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _943));
        float _1351 = _943 + _702;
        float _1352 = _947 + _703;
        float _1353 = _951 + _704;
        float _1363 = fma(_1353, cbModelParam._m0[30u].z, fma(_1352, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1351)) - _1320;
        float _1364 = fma(_1353, cbModelParam._m0[31u].z, fma(_1352, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1351)) - _1324;
        float _1365 = fma(_1353, cbModelParam._m0[32u].z, fma(_1352, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1351)) - _1328;
        float _1369 = inversesqrt(dot(vec3(_1363, _1364, _1365), vec3(_1363, _1364, _1365)));
        float _1382 = ((_1369 * _1363) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1320 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1383 = ((_1369 * _1364) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1324 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1384 = ((_1369 * _1365) / cbModelParam._m0[35u].z) + ((((((_1328 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1386 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1382, _1383, _1384), 0.0);
        vec4 _1393 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1382, _1383, _1384), 0.0);
        vec4 _1400 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1382, _1383, _1384), 0.0);
        vec4 _1407 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1382, _1383, _1384), 0.0);
        float _1419 = exp2((_1386.w + (-0.5)) * 20.0) * 2.0;
        float _1420 = _1419 * (_1386.x + (-0.5));
        float _1421 = _1419 * (_1386.y + (-0.5));
        float _1422 = _1419 * (_1386.z + (-0.5));
        float _1429 = exp2((_1393.w + (-0.5)) * 20.0) * 2.0;
        float _1430 = _1429 * (_1393.x + (-0.5));
        float _1431 = _1429 * (_1393.y + (-0.5));
        float _1432 = _1429 * (_1393.z + (-0.5));
        float _1439 = exp2((_1400.w + (-0.5)) * 20.0) * 2.0;
        float _1440 = _1439 * (_1400.x + (-0.5));
        float _1441 = _1439 * (_1400.y + (-0.5));
        float _1442 = _1439 * (_1400.z + (-0.5));
        float _1449 = exp2((_1407.w + (-0.5)) * 20.0) * 2.0;
        float _1450 = _1449 * (_1407.x + (-0.5));
        float _1451 = _1449 * (_1407.y + (-0.5));
        float _1452 = _1449 * (_1407.z + (-0.5));
        float _1453 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1454 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1455 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1456 = _1420 * 0.5;
        float _1457 = _1430 * 0.5;
        float _1458 = _1440 * 0.5;
        float _1459 = dot(vec3(_1456, _1457, _1458), vec3(_1456, _1457, _1458));
        float _1464 = (_1459 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1459);
        float _1472 = (dot(vec3(_702, _703, _704), vec3(_1464 * _1456, _1464 * _1457, _1464 * _1458)) + 1.0) * 0.5;
        float _4033 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1481 = sqrt(((_1457 * _1457) + (_1456 * _1456)) + (_1458 * _1458)) / (_1453 + 9.9999997473787516355514526367188e-06);
        float _4044 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1482 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
        float _1483 = _1482 * 2.0;
        float _1487 = (1.0 - _1482) / (_1482 + 1.0);
        float _4055 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1488 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
        float _1497 = ((((1.0 - _1488) * (_1483 + 2.0)) * exp2(log2(isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0))) * (_1483 + 1.0))) + _1488) * _1453;
        float _1498 = _1421 * 0.5;
        float _1499 = _1431 * 0.5;
        float _1500 = _1441 * 0.5;
        float _1501 = dot(vec3(_1498, _1499, _1500), vec3(_1498, _1499, _1500));
        float _1506 = (_1501 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1501);
        float _1514 = (dot(vec3(_702, _703, _704), vec3(_1506 * _1498, _1506 * _1499, _1506 * _1500)) + 1.0) * 0.5;
        float _4066 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
        float _1523 = sqrt(((_1499 * _1499) + (_1498 * _1498)) + (_1500 * _1500)) / (_1454 + 9.9999997473787516355514526367188e-06);
        float _4077 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1524 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
        float _1525 = _1524 * 2.0;
        float _1529 = (1.0 - _1524) / (_1524 + 1.0);
        float _4088 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1530 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
        float _1539 = ((((1.0 - _1530) * (_1525 + 2.0)) * exp2(log2(isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0))) * (_1525 + 1.0))) + _1530) * _1454;
        float _1540 = _1422 * 0.5;
        float _1541 = _1432 * 0.5;
        float _1542 = _1442 * 0.5;
        float _1543 = dot(vec3(_1540, _1541, _1542), vec3(_1540, _1541, _1542));
        float _1548 = (_1543 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1543);
        float _1556 = (dot(vec3(_702, _703, _704), vec3(_1548 * _1540, _1548 * _1541, _1548 * _1542)) + 1.0) * 0.5;
        float _4099 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1565 = sqrt(((_1541 * _1541) + (_1540 * _1540)) + (_1542 * _1542)) / (_1455 + 9.9999997473787516355514526367188e-06);
        float _4110 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
        float _1566 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
        float _1567 = _1566 * 2.0;
        float _1571 = (1.0 - _1566) / (_1566 + 1.0);
        float _4121 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1572 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
        float _1581 = ((((1.0 - _1572) * (_1567 + 2.0)) * exp2(log2(isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0))) * (_1567 + 1.0))) + _1572) * _1455;
        _1589 = _1422;
        _1590 = _1421;
        _1591 = _1420;
        _1592 = _1432;
        _1593 = _1431;
        _1594 = _1430;
        _1595 = _1442;
        _1596 = _1441;
        _1597 = _1440;
        _1598 = _1455;
        _1599 = _1454;
        _1600 = _1453;
        _1601 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0)));
        _1602 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0)));
        _1603 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0)));
    }
    else
    {
        _1589 = _1280;
        _1590 = _1280;
        _1591 = _1280;
        _1592 = _1280;
        _1593 = _1280;
        _1594 = _1280;
        _1595 = _1280;
        _1596 = _1280;
        _1597 = _1280;
        _1598 = _1280;
        _1599 = _1280;
        _1600 = _1280;
        _1601 = 0.0;
        _1602 = 0.0;
        _1603 = 0.0;
    }
    float _1613 = (cbModelParam._m0[1u].x * (_1601 - _1292)) + _1292;
    float _1614 = (cbModelParam._m0[1u].x * (_1602 - _1293)) + _1293;
    float _1615 = (cbModelParam._m0[1u].x * (_1603 - _1294)) + _1294;
    float _1636 = fma(_1615, cbSceneParam._m0[89u].z, fma(_1614, cbSceneParam._m0[89u].y, _1613 * cbSceneParam._m0[89u].x));
    float _1639 = fma(_1615, cbSceneParam._m0[90u].z, fma(_1614, cbSceneParam._m0[90u].y, _1613 * cbSceneParam._m0[90u].x));
    float _1642 = fma(_1615, cbSceneParam._m0[91u].z, fma(_1614, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1613));
    float _1657 = _889 * 0.5;
    float _1658 = _890 * 0.5;
    float _1659 = _891 * 0.5;
    float _1660 = dot(vec4(_1657, _1658, _1659, 1.0), vec4(_1591, _1594, _1597, _1600));
    float _1663 = dot(vec4(_1657, _1658, _1659, 1.0), vec4(_1590, _1593, _1596, _1599));
    float _1666 = dot(vec4(_1657, _1658, _1659, 1.0), vec4(_1589, _1592, _1595, _1598));
    float _1700;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1673 = dot(vec4(_1657, _1658, _1659, 1.0), vec4(_1279, _1283, _1286, _1289));
        float _1677 = dot(vec4(_1657, _1658, _1659, 1.0), vec4(_1281, _1284, _1287, _1290));
        float _1681 = dot(vec4(_1657, _1658, _1659, 1.0), vec4(_1282, _1285, _1288, _1291));
        float _1688 = dot(vec4(cbModelParam._m0[39u]), vec4(_1657, _1658, _1659, 1.0));
        _1700 = dot(vec3(isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0)), isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0)), isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1688) ? 0.0 : (isnan(0.0) ? _1688 : max(0.0, _1688))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1700 = 1.0;
    }
    float _1711;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1702 = dot(vec4(cbModelParam._m0[40u]), vec4(_1657, _1658, _1659, 1.0));
        _1711 = dot(vec3(isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0)), isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0)), isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1702) ? 0.0 : (isnan(0.0) ? _1702 : max(0.0, _1702))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1711 = 1.0;
    }
    float _1715 = (_1711 * cbModelParam._m0[1u].x) + (_1700 * (1.0 - cbModelParam._m0[1u].x));
    float _1725 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _705);
    float _1726 = isnan(_1725) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1725 : min(cbModelParam._m0[25u].z, _1725));
    float _1807;
    float _1809;
    float _1811;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1774 = fma(_951, cbModelParam._m0[13u].z, fma(_947, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _943)) + cbModelParam._m0[13u].w;
        float _1778 = fma(_951, cbModelParam._m0[14u].z, fma(_947, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _943)) + cbModelParam._m0[14u].w;
        float _1782 = fma(_951, cbModelParam._m0[15u].z, fma(_947, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _943)) + cbModelParam._m0[15u].w;
        float _1785 = fma(_891, cbModelParam._m0[13u].z, fma(_890, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _889));
        float _1788 = fma(_891, cbModelParam._m0[14u].z, fma(_890, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _889));
        float _1791 = fma(_891, cbModelParam._m0[15u].z, fma(_890, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _889));
        float _1819;
        if (_1785 > 0.0)
        {
            _1819 = abs((1.0 - _1774) / _1785);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1785 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1774 + 1.0) / _1785);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1819 = frontier_phi_19_17_ladder;
        }
        float _2022;
        if (_1788 > 0.0)
        {
            _2022 = abs((1.0 - _1778) / _1788);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1788 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1778 + 1.0) / _1788);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2022 = frontier_phi_28_24_ladder;
        }
        float _2276;
        if (_1791 > 0.0)
        {
            _2276 = abs((1.0 - _1782) / _1791);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1791 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1782 + 1.0) / _1791);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2276 = frontier_phi_40_35_ladder;
        }
        float _2278 = isnan(_2022) ? _1819 : (isnan(_1819) ? _2022 : min(_1819, _2022));
        float _2279 = isnan(_2276) ? _2278 : (isnan(_2278) ? _2276 : min(_2278, _2276));
        float _2283 = (_2279 * _1785) + _1774;
        float _2284 = (_2279 * _1788) + _1778;
        float _2285 = (_2279 * _1791) + _1782;
        float _2286 = _2279 * 9.9999997473787516355514526367188e-05;
        float _2288 = (-1.0) - _2286;
        float _2290 = _2286 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2285 > _2290) || ((_2285 < _2288) || ((_2284 > _2290) || ((_2284 < _2288) || ((_2283 < _2288) || (_2283 > _2290))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2413 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2285, cbModelParam._m0[9u].z, fma(_2284, cbModelParam._m0[9u].y, _2283 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2285, cbModelParam._m0[10u].z, fma(_2284, cbModelParam._m0[10u].y, _2283 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2285, cbModelParam._m0[11u].z, fma(_2284, cbModelParam._m0[11u].y, _2283 * cbModelParam._m0[11u].x))), _1726);
            frontier_phi_18_40_ladder = _2413.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2413.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2413.x * cbModelParam._m0[1u].y;
        }
        _1807 = frontier_phi_18_40_ladder_2;
        _1809 = frontier_phi_18_40_ladder_1;
        _1811 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1795 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_889, _890, _891), _1726);
        _1807 = _1795.x * cbModelParam._m0[1u].y;
        _1809 = _1795.y * cbModelParam._m0[1u].y;
        _1811 = _1795.z * cbModelParam._m0[1u].y;
    }
    float _1815 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _705);
    float _1816 = isnan(_1815) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1815 : min(cbModelParam._m0[25u].w, _1815));
    float _1906;
    float _1908;
    float _1910;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1870 = fma(_951, cbModelParam._m0[21u].z, fma(_947, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _943)) + cbModelParam._m0[21u].w;
        float _1874 = fma(_951, cbModelParam._m0[22u].z, fma(_947, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _943)) + cbModelParam._m0[22u].w;
        float _1878 = fma(_951, cbModelParam._m0[23u].z, fma(_947, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _943)) + cbModelParam._m0[23u].w;
        float _1881 = fma(_891, cbModelParam._m0[21u].z, fma(_890, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _889));
        float _1884 = fma(_891, cbModelParam._m0[22u].z, fma(_890, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _889));
        float _1887 = fma(_891, cbModelParam._m0[23u].z, fma(_890, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _889));
        float _2027;
        if (_1881 > 0.0)
        {
            _2027 = abs((1.0 - _1870) / _1881);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1881 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1870 + 1.0) / _1881);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2027 = frontier_phi_30_26_ladder;
        }
        float _2303;
        if (_1884 > 0.0)
        {
            _2303 = abs((1.0 - _1874) / _1884);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1884 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1874 + 1.0) / _1884);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2303 = frontier_phi_42_37_ladder;
        }
        float _2516;
        if (_1887 > 0.0)
        {
            _2516 = abs((1.0 - _1878) / _1887);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1887 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1878 + 1.0) / _1887);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2516 = frontier_phi_51_48_ladder;
        }
        float _2518 = isnan(_2303) ? _2027 : (isnan(_2027) ? _2303 : min(_2027, _2303));
        float _2519 = isnan(_2516) ? _2518 : (isnan(_2518) ? _2516 : min(_2518, _2516));
        float _2523 = (_2519 * _1881) + _1870;
        float _2524 = (_2519 * _1884) + _1874;
        float _2525 = (_2519 * _1887) + _1878;
        float _2526 = _2519 * 9.9999997473787516355514526367188e-05;
        float _2527 = (-1.0) - _2526;
        float _2529 = _2526 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2525 > _2529) || ((_2525 < _2527) || ((_2524 > _2529) || ((_2524 < _2527) || ((_2523 < _2527) || (_2523 > _2529))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2759 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2525, cbModelParam._m0[17u].z, fma(_2524, cbModelParam._m0[17u].y, _2523 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2525, cbModelParam._m0[18u].z, fma(_2524, cbModelParam._m0[18u].y, _2523 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2525, cbModelParam._m0[19u].z, fma(_2524, cbModelParam._m0[19u].y, _2523 * cbModelParam._m0[19u].x))), _1816);
            frontier_phi_27_51_ladder = _2759.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2759.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2759.x * cbModelParam._m0[1u].z;
        }
        _1906 = frontier_phi_27_51_ladder_2;
        _1908 = frontier_phi_27_51_ladder_1;
        _1910 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1890 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_889, _890, _891), _1816);
        _1906 = _1890.x * cbModelParam._m0[1u].z;
        _1908 = _1890.y * cbModelParam._m0[1u].z;
        _1910 = _1890.z * cbModelParam._m0[1u].z;
    }
    float _1923 = (((_914 * _866) + _915) * _881) * ((cbModelParam._m0[1u].w * (_1906 - _1807)) + _1807);
    float _1925 = (((_914 * _868) + _915) * _881) * ((cbModelParam._m0[1u].w * (_1908 - _1809)) + _1809);
    float _1927 = (((_914 * _869) + _915) * _881) * ((cbModelParam._m0[1u].w * (_1910 - _1811)) + _1811);
    float _1930 = fma(_1927, cbSceneParam._m0[89u].z, fma(_1925, cbSceneParam._m0[89u].y, _1923 * cbSceneParam._m0[89u].x));
    float _1933 = fma(_1927, cbSceneParam._m0[90u].z, fma(_1925, cbSceneParam._m0[90u].y, _1923 * cbSceneParam._m0[90u].x));
    float _1936 = fma(_1927, cbSceneParam._m0[91u].z, fma(_1925, cbSceneParam._m0[91u].y, _1923 * cbSceneParam._m0[91u].x));
    uvec4 _1946 = floatBitsToUint(cbInstanceData._m0[_841 + 5u]);
    uint _1948 = _1946.x * 14u;
    uint _1949 = _1948 + 13u;
    float _1956 = _881 + (-1.0);
    float _1961 = (cbLight._m0[_1949].x * _1956) + 1.0;
    float _1962 = (cbLight._m0[_1949].y * _1956) + 1.0;
    float _1963 = (cbLight._m0[_1949].z * _1956) + 1.0;
    float _1964 = (cbLight._m0[_1949].w * _1956) + 1.0;
    uint _1965 = _1948 + 5u;
    float _1971 = isnan(1.0) ? _1962 : (isnan(_1962) ? 1.0 : min(_1962, 1.0));
    uint _1975 = _1948 + 4u;
    float _1981 = isnan(1.0) ? _1961 : (isnan(_1961) ? 1.0 : min(_1961, 1.0));
    uint _1985 = _1948 | 1u;
    float _1996 = dot(vec3(cbLight._m0[_1948].xyz), vec3(_702, _703, _704));
    float _1999 = dot(vec3(cbLight._m0[_1985].xyz), vec3(_702, _703, _704));
    float _4257 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
    float _4268 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
    float _2004 = (isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0))) * 0.3183098733425140380859375;
    float _2006 = (isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0))) * 0.3183098733425140380859375;
    float _2013 = ((cbLight._m0[_1965].x * _1971) * _2006) + ((cbLight._m0[_1975].x * _1981) * _2004);
    float _2014 = ((_1971 * cbLight._m0[_1965].y) * _2006) + ((_1981 * cbLight._m0[_1975].y) * _2004);
    float _2015 = ((_1971 * cbLight._m0[_1965].z) * _2006) + ((_1981 * cbLight._m0[_1975].z) * _2004);
    uvec4 _2019 = floatBitsToUint(cbLight._m0[_1948 + 12u]);
    bool _2021 = _2019.x == 0u;
    float _2032;
    float _2034;
    float _2036;
    if (_2021)
    {
        _2032 = _2013;
        _2034 = _2014;
        _2036 = _2015;
    }
    else
    {
        uint _2040 = _1948 + 6u;
        float _2056 = (dot(vec3(cbLight._m0[_1948 + 2u].xyz), vec3(_702, _703, _704)) * 0.5) + 0.5;
        float _2057 = _2056 * _2056;
        float _4279 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
        float _2058 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
        float _2059 = isnan(1.0) ? _1963 : (isnan(_1963) ? 1.0 : min(_1963, 1.0));
        _2032 = (((cbLight._m0[_2040].x * 0.3183098733425140380859375) * _2058) * _2059) + _2013;
        _2034 = (((cbLight._m0[_2040].y * 0.3183098733425140380859375) * _2058) * _2059) + _2014;
        _2036 = (((cbLight._m0[_2040].z * 0.3183098733425140380859375) * _2058) * _2059) + _2015;
    }
    bool _2039 = _2019.y == 0u;
    float _2077;
    float _2079;
    float _2081;
    if (_2039)
    {
        _2077 = _2032;
        _2079 = _2034;
        _2081 = _2036;
    }
    else
    {
        uint _2247 = _1948 + 7u;
        float _2263 = (dot(vec3(cbLight._m0[_1948 + 3u].xyz), vec3(_702, _703, _704)) * 0.5) + 0.5;
        float _2264 = _2263 * _2263;
        float _4295 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
        float _2265 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
        float _2266 = isnan(1.0) ? _1964 : (isnan(_1964) ? 1.0 : min(_1964, 1.0));
        _2077 = (((cbLight._m0[_2247].x * 0.3183098733425140380859375) * _2265) * _2266) + _2032;
        _2079 = (((cbLight._m0[_2247].y * 0.3183098733425140380859375) * _2265) * _2266) + _2034;
        _2081 = (((cbLight._m0[_2247].z * 0.3183098733425140380859375) * _2265) * _2266) + _2036;
    }
    uint _2084 = _1948 + 8u;
    float _2097 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1948].w)) * _705) * 0.949999988079071044921875);
    float _2098 = _2097 * _2097;
    float _2099 = cbLight._m0[_1948].x + _786;
    float _2100 = cbLight._m0[_1948].y + _787;
    float _2101 = cbLight._m0[_1948].z + _788;
    float _2105 = inversesqrt(dot(vec3(_2099, _2100, _2101), vec3(_2099, _2100, _2101)));
    float _2106 = _2105 * _2099;
    float _2107 = _2105 * _2100;
    float _2108 = _2105 * _2101;
    float _2109 = dot(vec3(_702, _703, _704), vec3(cbLight._m0[_1948].xyz));
    float _4311 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
    float _2112 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
    float _4322 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
    float _2113 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
    float _2114 = dot(vec3(_702, _703, _704), vec3(_2106, _2107, _2108));
    float _4333 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
    float _2117 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
    float _2118 = dot(vec3(cbLight._m0[_1948].xyz), vec3(_2106, _2107, _2108));
    float _4344 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
    float _2122 = _2098 * _2098;
    float _2126 = ((_2117 * _2117) * (_2122 + (-1.0))) + 1.0;
    float _2134 = exp2(log2(1.0 - (isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0)))) * 5.0);
    float _2135 = 0.959999978542327880859375 - _863;
    float _2137 = 0.959999978542327880859375 - _864;
    float _2138 = 0.959999978542327880859375 - _865;
    float _2145 = 1.0 - _2098;
    float _2156 = (0.5 / (((_2113 * ((_2112 * _2145) + _2098)) + 9.9999999392252902907785028219223e-09) + (((_2113 * _2145) + _2098) * _2112))) * _2112;
    float _4355 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
    float _2158 = (isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0))) * (_2122 / ((_2126 * _2126) * 3.141590118408203125));
    uint _2169 = _1948 + 9u;
    float _2180 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1985].w)) * _705) * 0.949999988079071044921875);
    float _2181 = _2180 * _2180;
    float _2182 = cbLight._m0[_1985].x + _786;
    float _2183 = cbLight._m0[_1985].y + _787;
    float _2184 = cbLight._m0[_1985].z + _788;
    float _2188 = inversesqrt(dot(vec3(_2182, _2183, _2184), vec3(_2182, _2183, _2184)));
    float _2189 = _2188 * _2182;
    float _2190 = _2188 * _2183;
    float _2191 = _2188 * _2184;
    float _2192 = dot(vec3(_702, _703, _704), vec3(cbLight._m0[_1985].xyz));
    float _4366 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
    float _2195 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
    float _2196 = dot(vec3(_702, _703, _704), vec3(_2189, _2190, _2191));
    float _4377 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
    float _2199 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
    float _2200 = dot(vec3(cbLight._m0[_1985].xyz), vec3(_2189, _2190, _2191));
    float _4388 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
    float _2204 = _2181 * _2181;
    float _2208 = ((_2199 * _2199) * (_2204 + (-1.0))) + 1.0;
    float _2215 = exp2(log2(1.0 - (isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0)))) * 5.0);
    float _2222 = 1.0 - _2181;
    float _2232 = (0.5 / (((_2113 * ((_2195 * _2222) + _2181)) + 9.9999999392252902907785028219223e-09) + (((_2113 * _2222) + _2181) * _2195))) * _2195;
    float _4399 = isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0));
    float _2234 = (isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0))) * (_2204 / ((_2208 * _2208) * 3.141590118408203125));
    float _2244 = (((((_2215 * _2135) + _866) * cbLight._m0[_2169].x) * _2234) * _1971) + (((((_2134 * _2135) + _866) * cbLight._m0[_2084].x) * _2158) * _1981);
    float _2245 = (((((_2215 * _2137) + _868) * cbLight._m0[_2169].y) * _2234) * _1971) + (((((_2134 * _2137) + _868) * cbLight._m0[_2084].y) * _2158) * _1981);
    float _2246 = (((((_2215 * _2138) + _869) * cbLight._m0[_2169].z) * _2234) * _1971) + (((((_2134 * _2138) + _869) * cbLight._m0[_2084].z) * _2158) * _1981);
    float _2308;
    float _2310;
    float _2312;
    if (_2021)
    {
        _2308 = _2244;
        _2310 = _2245;
        _2312 = _2246;
    }
    else
    {
        uint _2314 = _1948 + 2u;
        uint _2318 = _1948 + 10u;
        float _2332 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2314].w)) * _705) * 0.949999988079071044921875);
        float _2333 = _2332 * _2332;
        float _2334 = cbLight._m0[_2314].x + _786;
        float _2335 = cbLight._m0[_2314].y + _787;
        float _2336 = cbLight._m0[_2314].z + _788;
        float _2340 = inversesqrt(dot(vec3(_2334, _2335, _2336), vec3(_2334, _2335, _2336)));
        float _2341 = _2340 * _2334;
        float _2342 = _2340 * _2335;
        float _2343 = _2340 * _2336;
        float _2344 = dot(vec3(_702, _703, _704), vec3(cbLight._m0[_2314].xyz));
        float _4410 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
        float _2347 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
        float _2348 = dot(vec3(_702, _703, _704), vec3(_2341, _2342, _2343));
        float _4421 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
        float _2351 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
        float _2352 = dot(vec3(cbLight._m0[_2314].xyz), vec3(_2341, _2342, _2343));
        float _4432 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
        float _2356 = _2333 * _2333;
        float _2360 = ((_2351 * _2351) * (_2356 + (-1.0))) + 1.0;
        float _2367 = exp2(log2(1.0 - (isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0)))) * 5.0);
        float _2374 = 1.0 - _2333;
        float _2384 = (0.5 / (((_2113 * ((_2347 * _2374) + _2333)) + 9.9999999392252902907785028219223e-09) + (((_2113 * _2374) + _2333) * _2347))) * _2347;
        float _4443 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
        float _2386 = (isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0))) * (_2356 / ((_2360 * _2360) * 3.141590118408203125));
        float _2387 = isnan(1.0) ? _1963 : (isnan(_1963) ? 1.0 : min(_1963, 1.0));
        _2308 = (((((_2367 * _2135) + _866) * cbLight._m0[_2318].x) * _2386) * _2387) + _2244;
        _2310 = (((((_2367 * _2137) + _868) * cbLight._m0[_2318].y) * _2386) * _2387) + _2245;
        _2312 = (((((_2367 * _2138) + _869) * cbLight._m0[_2318].z) * _2386) * _2387) + _2246;
    }
    float _2422;
    float _2424;
    float _2426;
    if (_2039)
    {
        _2422 = _2308;
        _2424 = _2310;
        _2426 = _2312;
    }
    else
    {
        uint _2433 = _1948 + 3u;
        uint _2437 = _1948 + 11u;
        float _2451 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2433].w)) * _705) * 0.949999988079071044921875);
        float _2452 = _2451 * _2451;
        float _2453 = cbLight._m0[_2433].x + _786;
        float _2454 = cbLight._m0[_2433].y + _787;
        float _2455 = cbLight._m0[_2433].z + _788;
        float _2459 = inversesqrt(dot(vec3(_2453, _2454, _2455), vec3(_2453, _2454, _2455)));
        float _2460 = _2459 * _2453;
        float _2461 = _2459 * _2454;
        float _2462 = _2459 * _2455;
        float _2463 = dot(vec3(_702, _703, _704), vec3(cbLight._m0[_2433].xyz));
        float _4459 = isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0));
        float _2466 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
        float _2467 = dot(vec3(_702, _703, _704), vec3(_2460, _2461, _2462));
        float _4470 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0));
        float _2470 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
        float _2471 = dot(vec3(cbLight._m0[_2433].xyz), vec3(_2460, _2461, _2462));
        float _4481 = isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0));
        float _2475 = _2452 * _2452;
        float _2479 = ((_2470 * _2470) * (_2475 + (-1.0))) + 1.0;
        float _2486 = exp2(log2(1.0 - (isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0)))) * 5.0);
        float _2493 = 1.0 - _2452;
        float _2503 = (0.5 / (((_2113 * ((_2466 * _2493) + _2452)) + 9.9999999392252902907785028219223e-09) + (((_2113 * _2493) + _2452) * _2466))) * _2466;
        float _4492 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0));
        float _2505 = (isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0))) * (_2475 / ((_2479 * _2479) * 3.141590118408203125));
        float _2506 = isnan(1.0) ? _1964 : (isnan(_1964) ? 1.0 : min(_1964, 1.0));
        _2422 = (((((_2486 * _2135) + _866) * cbLight._m0[_2437].x) * _2505) * _2506) + _2308;
        _2424 = (((((_2486 * _2137) + _868) * cbLight._m0[_2437].y) * _2505) * _2506) + _2310;
        _2426 = (((((_2486 * _2138) + _869) * cbLight._m0[_2437].z) * _2505) * _2506) + _2312;
    }
    float _2641;
    float _2643;
    float _2645;
    float _2647;
    float _2649;
    float _2651;
    if (_1946.y == 0u)
    {
        float _2581 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2582 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2581;
        float _2583 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2581;
        float _2584 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2581;
        uvec4 _2596 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2597 = _2596.x;
        uint _2608 = uint((float(_2596.y) * floor(float(uint(cbSceneParam._m0[85u].y * _804) / _2597))) + floor(float(uint(cbSceneParam._m0[85u].x * _803) / _2597)));
        float _2618 = (log2(_2584 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2619 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0));
        uint _2622 = uint(isnan(14.0) ? _2619 : (isnan(_2619) ? 14.0 : min(_2619, 14.0)));
        uvec4 _2627 = texelFetch(g_lightClusterGridBuffer, int(((_2622 << 2u) + (_2608 << 6u)) >> 2u));
        uint _2628 = _2627.x;
        uint _2629 = _2596.z;
        float _2764;
        float _2766;
        float _2768;
        float _2770;
        float _2772;
        float _2774;
        if (((((1u << ((_2629 >> 4u) & 15u)) + 4294967295u) & _2628) == 0u) || ((_2629 & 240u) == 0u))
        {
            _2764 = 0.0;
            _2766 = 0.0;
            _2768 = 0.0;
            _2770 = 0.0;
            _2772 = 0.0;
            _2774 = 0.0;
        }
        else
        {
            float _2765;
            float _2767;
            float _2769;
            float _2771;
            float _2773;
            float _2775;
            float _2926 = 0.0;
            float _2927 = 0.0;
            float _2928 = 0.0;
            float _2929 = 0.0;
            float _2930 = 0.0;
            float _2931 = 0.0;
            uint _2932 = 0u;
            uint _2941;
            bool _2942;
            for (;;)
            {
                _2941 = texelFetch(g_lightClassification, int((((_2622 << 5u) + (_2608 << 9u)) + (_2932 << 2u)) >> 2u)).x;
                _2942 = _2941 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2942)
                {
                    frontier_phi_68_pred = _2926;
                    frontier_phi_68_pred_1 = _2931;
                    frontier_phi_68_pred_2 = _2930;
                    frontier_phi_68_pred_3 = _2929;
                    frontier_phi_68_pred_4 = _2928;
                    frontier_phi_68_pred_5 = _2927;
                }
                else
                {
                    float _3071;
                    float _3072;
                    float _3073;
                    float _3074;
                    float _3075;
                    float _3076;
                    uint _3077;
                    _3071 = _2926;
                    _3072 = _2927;
                    _3073 = _2928;
                    _3074 = _2929;
                    _3075 = _2930;
                    _3076 = _2931;
                    _3077 = _2941;
                    float _2998;
                    float _2999;
                    float _3000;
                    float _3001;
                    float _3002;
                    float _3003;
                    for (;;)
                    {
                        uint _3081 = uint(findLSB(_3077)) + (_2932 << 5u);
                        uint _3078 = (_3077 + 4294967295u) & _3077;
                        uint _3083 = _3081 * 48u;
                        vec4 _3097 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3083)).x, texelFetch(g_PointLightRenderingBuffer, int(_3083 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3083 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3083 + 3u)).x));
                        uint _3103 = (_3081 * 48u) + 4u;
                        vec4 _3116 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3103)).x, texelFetch(g_PointLightRenderingBuffer, int(_3103 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3103 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3103 + 3u)).x));
                        uint _3122 = (_3081 * 48u) + 8u;
                        vec3 _3133 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3122)).x, texelFetch(g_PointLightRenderingBuffer, int(_3122 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3122 + 2u)).x));
                        float _3137 = _3097.x - _2582;
                        float _3138 = _3097.y - _2583;
                        float _3139 = _3097.z - _2584;
                        float _3140 = dot(vec3(_3137, _3138, _3139), vec3(_3137, _3138, _3139));
                        float _3143 = inversesqrt(_3140);
                        float _3144 = _3143 * _3137;
                        float _3145 = _3143 * _3138;
                        float _3146 = _3143 * _3139;
                        float _3147 = dot(vec3(_822, _825, _828), vec3(_3144, _3145, _3146));
                        float _3152 = 1.0 - (_3140 * _3097.w);
                        float _4518 = isnan(0.0) ? _3152 : (isnan(_3152) ? 0.0 : max(_3152, 0.0));
                        float _3153 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
                        float _3154 = sqrt(_3140) * _3116.w;
                        float _3157 = 1.39999997615814208984375 / (_3154 + 1.39999997615814208984375);
                        float _3158 = _3157 * _3157;
                        float _3161 = ((1.0 - _3158) * _3147) + _3158;
                        float _3164 = _3154 * _3154;
                        float _3168 = ((isnan(0.0) ? _3161 : (isnan(_3161) ? 0.0 : max(_3161, 0.0))) * _3153) / ((_3164 * 0.699999988079071044921875) + 1.0);
                        float _3172 = (-0.0) - _2582;
                        float _3173 = (-0.0) - _2583;
                        float _3174 = (-0.0) - _2584;
                        float _3178 = inversesqrt(dot(vec3(_3172, _3173, _3174), vec3(_3172, _3173, _3174)));
                        float _3179 = _3178 * _3172;
                        float _3180 = _3178 * _3173;
                        float _3181 = _3178 * _3174;
                        float _3189 = exp2(log2(1.0 / ((_3164 * 3.5) + 5.0)) * 0.25);
                        float _3190 = 1.0 - _897;
                        float _3197 = sqrt(1.0 - ((1.0 - (_3190 * _3190)) * (1.0 - (_3189 * _3189))));
                        float _3198 = _3197 * _3197;
                        float _3199 = _3198 * _3198;
                        float _3200 = _3179 + _3144;
                        float _3201 = _3180 + _3145;
                        float _3202 = _3181 + _3146;
                        float _3206 = inversesqrt(dot(vec3(_3200, _3201, _3202), vec3(_3200, _3201, _3202)));
                        float _3210 = dot(vec3(_822, _825, _828), vec3(_3179, _3180, _3181));
                        float _4534 = isnan(0.0) ? _3210 : (isnan(_3210) ? 0.0 : max(_3210, 0.0));
                        float _3213 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
                        float _3214 = dot(vec3(_822, _825, _828), vec3(_3206 * _3200, _3206 * _3201, _3206 * _3202));
                        float _4545 = isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : max(_3214, 0.0));
                        float _3217 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
                        float _3221 = ((_3217 * _3217) * (_3199 + (-1.0))) + 1.0;
                        float _3222 = _3157 * _3198;
                        float _3223 = _3222 * _3222;
                        float _3226 = ((1.0 - _3223) * _3147) + _3223;
                        float _4556 = isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : max(_3226, 0.0));
                        float _3227 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
                        float _3228 = 1.0 - _3198;
                        float _3238 = (0.5 / (((_3227 * ((_3213 * _3228) + _3198)) + 9.9999999392252902907785028219223e-09) + (((_3227 * _3228) + _3198) * _3213))) * _3227;
                        float _4567 = isnan(0.0) ? _3238 : (isnan(_3238) ? 0.0 : max(_3238, 0.0));
                        float _3249 = (((_3199 * 3.1415927410125732421875) * (isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0)))) / ((_3221 * _3221) * ((_3164 * 2.1991131305694580078125) + 3.141590118408203125))) * _3153;
                        _3001 = (_3168 * _3116.x) + _3074;
                        _3002 = (_3168 * _3116.y) + _3075;
                        _3003 = (_3168 * _3116.z) + _3076;
                        _2998 = (_3249 * _3133.x) + _3071;
                        _2999 = (_3249 * _3133.y) + _3072;
                        _3000 = (_3249 * _3133.z) + _3073;
                        if (_3078 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3071 = _2998;
                            _3072 = _2999;
                            _3073 = _3000;
                            _3074 = _3001;
                            _3075 = _3002;
                            _3076 = _3003;
                            _3077 = _3078;
                        }
                    }
                    frontier_phi_68_pred = _2998;
                    frontier_phi_68_pred_1 = _3003;
                    frontier_phi_68_pred_2 = _3002;
                    frontier_phi_68_pred_3 = _3001;
                    frontier_phi_68_pred_4 = _3000;
                    frontier_phi_68_pred_5 = _2999;
                }
                _2765 = frontier_phi_68_pred;
                _2775 = frontier_phi_68_pred_1;
                _2773 = frontier_phi_68_pred_2;
                _2771 = frontier_phi_68_pred_3;
                _2769 = frontier_phi_68_pred_4;
                _2767 = frontier_phi_68_pred_5;
                uint _2933 = _2932 + 1u;
                if (_2933 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2926 = _2765;
                    _2927 = _2767;
                    _2928 = _2769;
                    _2929 = _2771;
                    _2930 = _2773;
                    _2931 = _2775;
                    _2932 = _2933;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2764 = _2765;
            _2766 = _2767;
            _2768 = _2769;
            _2770 = _2771;
            _2772 = _2773;
            _2774 = _2775;
        }
        uvec4 _2778 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2779 = _2778.z;
        uint _2781 = (_2779 >> 8u) & 15u;
        float _2894;
        float _2896;
        float _2898;
        float _2900;
        float _2902;
        float _2904;
        if (((4294967295u << _2781) & _2628) == 0u)
        {
            _2894 = _2764;
            _2896 = _2766;
            _2898 = _2768;
            _2900 = _2770;
            _2902 = _2772;
            _2904 = _2774;
        }
        else
        {
            float _2919 = inversesqrt(dot(vec3(_2582, _2583, _2584), vec3(_2582, _2583, _2584)));
            float _2920 = _2919 * _2582;
            float _2921 = _2919 * _2583;
            float _2922 = _2919 * _2584;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2781 < ((_2779 >> 12u) & 15u))
            {
                float _2895;
                float _2897;
                float _2899;
                float _2901;
                float _2903;
                float _2905;
                float _3054 = _2764;
                float _3055 = _2766;
                float _3056 = _2768;
                float _3057 = _2770;
                float _3058 = _2772;
                float _3059 = _2774;
                uint _3060 = _2781;
                uint _3069;
                bool _3070;
                for (;;)
                {
                    _3069 = texelFetch(g_lightClassification, int((((_2622 << 5u) + (_2608 << 9u)) + (_3060 << 2u)) >> 2u)).x;
                    _3070 = _3069 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3070)
                    {
                        frontier_phi_79_pred = _3059;
                        frontier_phi_79_pred_1 = _3058;
                        frontier_phi_79_pred_2 = _3057;
                        frontier_phi_79_pred_3 = _3056;
                        frontier_phi_79_pred_4 = _3055;
                        frontier_phi_79_pred_5 = _3054;
                    }
                    else
                    {
                        float _3263;
                        float _3264;
                        float _3265;
                        float _3266;
                        float _3267;
                        float _3268;
                        float _3556;
                        float _3557;
                        float _3558;
                        float _3559;
                        float _3560;
                        float _3561;
                        float _3276 = _3054;
                        float _3277 = _3055;
                        float _3278 = _3056;
                        float _3279 = _3057;
                        float _3280 = _3058;
                        float _3281 = _3059;
                        uint _3282 = _3069;
                        uint _3283;
                        vec4 _3308;
                        float _3309;
                        vec4 _3324;
                        vec3 _3336;
                        vec4 _3351;
                        vec4 _3366;
                        float _3412;
                        bool _3413;
                        for (;;)
                        {
                            uint _3293 = ((_3060 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3282));
                            _3283 = (_3282 + 4294967295u) & _3282;
                            uint _3295 = _3293 * 40u;
                            _3308 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3295)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 3u)).x));
                            _3309 = _3308.w;
                            uint _3311 = (_3293 * 40u) + 4u;
                            _3324 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3311)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 3u)).x));
                            uint _3326 = (_3293 * 40u) + 8u;
                            _3336 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3326)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 2u)).x));
                            uint _3338 = (_3293 * 40u) + 16u;
                            _3351 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3338)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 3u)).x));
                            uint _3353 = (_3293 * 40u) + 20u;
                            _3366 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3353)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 3u)).x));
                            uint _3368 = (_3293 * 40u) + 24u;
                            vec4 _3381 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3368)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 3u)).x));
                            uint _3387 = (_3293 * 40u) + 28u;
                            vec4 _3400 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3387)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 3u)).x));
                            _3412 = fma(_2584, _3400.z, fma(_2583, _3400.y, _3400.x * _2582)) + _3400.w;
                            _3413 = !((fma(_2584, _3381.z, fma(_2583, _3381.y, _3381.x * _2582)) + _3381.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3413)
                            {
                                float _3440 = _3308.x - _2582;
                                float _3441 = _3308.y - _2583;
                                float _3442 = _3308.z - _2584;
                                float _3443 = dot(vec3(_3440, _3441, _3442), vec3(_3440, _3441, _3442));
                                float _3446 = inversesqrt(_3443);
                                float _3447 = _3446 * _3440;
                                float _3448 = _3446 * _3441;
                                float _3449 = _3446 * _3442;
                                float _3453 = 1.0 - (_3443 / (_3309 * _3309));
                                float _4578 = isnan(0.0) ? _3453 : (isnan(_3453) ? 0.0 : max(_3453, 0.0));
                                float _3454 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
                                float _3458 = sqrt(_3443) * _3324.w;
                                float _3460 = 1.39999997615814208984375 / (_3458 + 1.39999997615814208984375);
                                float _3461 = _3460 * _3460;
                                float _3464 = ((1.0 - _3461) * dot(vec3(_3447, _3448, _3449), vec3(_822, _825, _828))) + _3461;
                                float _3467 = _3458 * _3458;
                                float _3471 = (fma(_2584, _3351.z, fma(_2583, _3351.y, _3351.x * _2582)) + _3351.w) / _3412;
                                float _3472 = (fma(_2584, _3366.z, fma(_2583, _3366.y, _3366.x * _2582)) + _3366.w) / _3412;
                                float _3476 = 1.0 - dot(vec2(_3471, _3472), vec2(_3471, _3472));
                                float _4594 = isnan(0.0) ? _3476 : (isnan(_3476) ? 0.0 : max(_3476, 0.0));
                                float _3477 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
                                float _3478 = _3477 * (((isnan(0.0) ? _3464 : (isnan(_3464) ? 0.0 : max(_3464, 0.0))) * _3454) / ((_3467 * 0.699999988079071044921875) + 1.0));
                                float _3490 = exp2(log2(1.0 / ((_3467 * 3.5) + 5.0)) * 0.25);
                                float _3491 = 1.0 - _897;
                                float _3498 = sqrt(1.0 - ((1.0 - (_3491 * _3491)) * (1.0 - (_3490 * _3490))));
                                float _3499 = _3498 * _3498;
                                float _3500 = _3499 * _3499;
                                float _3501 = _3447 - _2920;
                                float _3502 = _3448 - _2921;
                                float _3503 = _3449 - _2922;
                                float _3507 = inversesqrt(dot(vec3(_3501, _3502, _3503), vec3(_3501, _3502, _3503)));
                                float _3511 = dot(vec3(_822, _825, _828), vec3((-0.0) - _2920, (-0.0) - _2921, (-0.0) - _2922));
                                float _4605 = isnan(0.0) ? _3511 : (isnan(_3511) ? 0.0 : max(_3511, 0.0));
                                float _3514 = isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0));
                                float _3515 = dot(vec3(_822, _825, _828), vec3(_3507 * _3501, _3507 * _3502, _3507 * _3503));
                                float _4616 = isnan(0.0) ? _3515 : (isnan(_3515) ? 0.0 : max(_3515, 0.0));
                                float _3518 = isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0));
                                float _3522 = ((_3518 * _3518) * (_3500 + (-1.0))) + 1.0;
                                float _3523 = _3460 * _3499;
                                float _3524 = _3523 * _3523;
                                float _3530 = ((1.0 - _3524) * dot(vec3(_822, _825, _828), vec3(_3447, _3448, _3449))) + _3524;
                                float _4627 = isnan(0.0) ? _3530 : (isnan(_3530) ? 0.0 : max(_3530, 0.0));
                                float _3531 = isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0));
                                float _3532 = 1.0 - _3499;
                                float _3542 = (0.5 / (((_3531 * ((_3514 * _3532) + _3499)) + 9.9999999392252902907785028219223e-09) + (((_3531 * _3532) + _3499) * _3514))) * _3531;
                                float _4638 = isnan(0.0) ? _3542 : (isnan(_3542) ? 0.0 : max(_3542, 0.0));
                                float _3552 = (_3477 * _3454) * (((_3500 * 3.1415927410125732421875) * (isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0)))) / ((_3522 * _3522) * ((_3467 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3478 * _3324.y;
                                frontier_phi_85_pred_1 = _3478 * _3324.x;
                                frontier_phi_85_pred_2 = _3552 * _3336.z;
                                frontier_phi_85_pred_3 = _3552 * _3336.y;
                                frontier_phi_85_pred_4 = _3552 * _3336.x;
                                frontier_phi_85_pred_5 = _3478 * _3324.z;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3560 = frontier_phi_85_pred;
                            _3559 = frontier_phi_85_pred_1;
                            _3558 = frontier_phi_85_pred_2;
                            _3557 = frontier_phi_85_pred_3;
                            _3556 = frontier_phi_85_pred_4;
                            _3561 = frontier_phi_85_pred_5;
                            _3266 = _3559 + _3279;
                            _3267 = _3560 + _3280;
                            _3268 = _3561 + _3281;
                            _3263 = _3556 + _3276;
                            _3264 = _3557 + _3277;
                            _3265 = _3558 + _3278;
                            if (_3283 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3276 = _3263;
                                _3277 = _3264;
                                _3278 = _3265;
                                _3279 = _3266;
                                _3280 = _3267;
                                _3281 = _3268;
                                _3282 = _3283;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3268;
                        frontier_phi_79_pred_1 = _3267;
                        frontier_phi_79_pred_2 = _3266;
                        frontier_phi_79_pred_3 = _3265;
                        frontier_phi_79_pred_4 = _3264;
                        frontier_phi_79_pred_5 = _3263;
                    }
                    _2905 = frontier_phi_79_pred;
                    _2903 = frontier_phi_79_pred_1;
                    _2901 = frontier_phi_79_pred_2;
                    _2899 = frontier_phi_79_pred_3;
                    _2897 = frontier_phi_79_pred_4;
                    _2895 = frontier_phi_79_pred_5;
                    uint _3061 = _3060 + 1u;
                    if (_3061 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3054 = _2895;
                        _3055 = _2897;
                        _3056 = _2899;
                        _3057 = _2901;
                        _3058 = _2903;
                        _3059 = _2905;
                        _3060 = _3061;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2899;
                frontier_phi_60_61_ladder_1 = _2905;
                frontier_phi_60_61_ladder_2 = _2903;
                frontier_phi_60_61_ladder_3 = _2901;
                frontier_phi_60_61_ladder_4 = _2897;
                frontier_phi_60_61_ladder_5 = _2895;
            }
            else
            {
                frontier_phi_60_61_ladder = _2768;
                frontier_phi_60_61_ladder_1 = _2774;
                frontier_phi_60_61_ladder_2 = _2772;
                frontier_phi_60_61_ladder_3 = _2770;
                frontier_phi_60_61_ladder_4 = _2766;
                frontier_phi_60_61_ladder_5 = _2764;
            }
            _2894 = frontier_phi_60_61_ladder_5;
            _2896 = frontier_phi_60_61_ladder_4;
            _2898 = frontier_phi_60_61_ladder;
            _2900 = frontier_phi_60_61_ladder_3;
            _2902 = frontier_phi_60_61_ladder_2;
            _2904 = frontier_phi_60_61_ladder_1;
        }
        float _2909 = isnan(1.0) ? _881 : (isnan(_881) ? 1.0 : min(_881, 1.0));
        _2641 = (_2909 * _2900) + _2077;
        _2643 = (_2909 * _2902) + _2079;
        _2645 = (_2909 * _2904) + _2081;
        _2647 = ((_2894 * _866) * _2909) + _2422;
        _2649 = ((_2896 * _868) * _2909) + _2424;
        _2651 = ((_2898 * _869) * _2909) + _2426;
    }
    else
    {
        _2641 = _2077;
        _2643 = _2079;
        _2645 = _2081;
        _2647 = _2422;
        _2649 = _2424;
        _2651 = _2426;
    }
    uint _2657 = _842 + uint(cbMatDynParam._m0[0u].w);
    float _2665 = ((cbMtdParam._m0[20u].x * cbMtdParam._m0[25u].x) * _632.x) * cbInstanceData._m0[_2657].x;
    float _2668 = ((cbMtdParam._m0[20u].y * cbMtdParam._m0[25u].x) * _632.y) * cbInstanceData._m0[_2657].y;
    float _2671 = ((cbMtdParam._m0[20u].z * cbMtdParam._m0[25u].x) * _632.z) * cbInstanceData._m0[_2657].z;
    float _4654 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
    float _4665 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
    float _4676 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
    float _2688 = (((isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0))) * (_2641 + ((isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0))) * _881))) + ((_2647 + ((isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0))) * _1715)) * cbPerFrame._m0[3u].x)) + _2665;
    float _2690 = (_2668 + ((_2649 + ((isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0))) * _1715)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0))) * (_2643 + ((isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0))) * _881)));
    float _2692 = (_2671 + ((_2651 + ((isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0))) * _1715)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0))) * (_2645 + ((isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0))) * _881)));
    float _2693 = isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : max(_2688, 0.0));
    float _2694 = isnan(0.0) ? _2690 : (isnan(_2690) ? 0.0 : max(_2690, 0.0));
    float _2695 = isnan(0.0) ? _2692 : (isnan(_2692) ? 0.0 : max(_2692, 0.0));
    float _2701 = cbMtdParam._m0[2u].x * _2665;
    float _2702 = cbMtdParam._m0[2u].y * _2668;
    float _2703 = cbMtdParam._m0[2u].z * _2671;
    float _4702 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2705 = isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0));
    uint _2706 = _841 + 6u;
    float _2714 = _803 / cbSceneParam._m0[86u].x;
    float _2715 = _804 / cbSceneParam._m0[86u].y;
    vec4 _2729 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2714, _2715, (log2((isnan(cbSceneParam._m0[77u].w) ? _729 : (isnan(_729) ? cbSceneParam._m0[77u].w : min(_729, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2731 = _2729.x;
    float _2732 = _2729.y;
    float _2733 = _2729.z;
    float _2734 = _2729.w;
    float _2827;
    float _2829;
    float _2831;
    float _2833;
    if (_729 > cbSceneParam._m0[78u].w)
    {
        float _2789 = isnan(_729) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _729 : min(cbSceneParam._m0[80u].w, _729));
        float _2790 = _2789 / _729;
        float _2801 = _2790 * _779;
        float _2802 = _780 * _2790;
        float _2803 = (-0.0) - _2802;
        float _2805 = _2790 * _781;
        float _2807 = (cbSceneParam._m0[77u].w * _2803) / _2789;
        float _2808 = _2807 + cbSceneParam._m0[79u].w;
        float _2809 = cbSceneParam._m0[79u].w - _2802;
        float _2815 = sqrt(((_2801 * _2801) + (_2802 * _2802)) + (_2805 * _2805));
        float _2818 = (1.0 - (cbSceneParam._m0[77u].w / _2789)) * _2815;
        float _2823 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2825 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3011;
        if (abs((_2803 - _2807) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3011 = ((((_2808 > 0.0) ? exp2(_2823 * _2808) : (2.0 - exp2(_2825 * _2808))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2818;
        }
        else
        {
            float _2955 = 1.0 / cbSceneParam._m0[80u].x;
            float _2956 = isnan(_2809) ? _2808 : (isnan(_2808) ? _2809 : max(_2808, _2809));
            float _2957 = isnan(_2809) ? _2808 : (isnan(_2808) ? _2809 : min(_2808, _2809));
            float _2966 = isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : min(_2956, 0.0));
            float _2967 = isnan(0.0) ? _2957 : (isnan(_2957) ? 0.0 : min(_2957, 0.0));
            _3011 = ((abs(_2815 / _2803) * cbSceneParam._m0[80u].y) * ((((_2966 - _2967) * 2.0) - ((exp2(_2823 * (isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : max(_2956, 0.0)))) - exp2(_2823 * (isnan(0.0) ? _2957 : (isnan(_2957) ? 0.0 : max(_2957, 0.0))))) * _2955)) - ((exp2(_2825 * _2966) - exp2(_2825 * _2967)) * _2955))) + (_2818 * cbSceneParam._m0[80u].z);
        }
        vec4 _3013 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2714, _2715, 1.0), 0.0);
        float _3022 = exp2((_3011 * (-1.44269502162933349609375)) * (1.0 - _3013.w));
        float _3023 = log2(_3022);
        float _3039 = log2(_2734);
        _2827 = (exp2(_3039 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3023 * cbSceneParam._m0[78u].x)) * _3013.x) / cbSceneParam._m0[78u].x)) + _2731;
        _2829 = (exp2(_3039 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3023 * cbSceneParam._m0[78u].y)) * _3013.y) / cbSceneParam._m0[78u].y)) + _2732;
        _2831 = (exp2(_3039 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3023 * cbSceneParam._m0[78u].z)) * _3013.z) / cbSceneParam._m0[78u].z)) + _2733;
        _2833 = _3022 * _2734;
    }
    else
    {
        _2827 = _2731;
        _2829 = _2732;
        _2831 = _2733;
        _2833 = _2734;
    }
    bool _3049;
    vec4 _2843;
    vec4 _2865;
    float _2867;
    float _2871;
    float _2872;
    float _2873;
    float _2876;
    float _2879;
    float _2882;
    float _2883;
    bool _2893;
    for (;;)
    {
        _2843 = cbMatDynParam._m0[0u];
        float _2845 = roundEven(_2843.y);
        bool _2846 = _2845 == 3.0;
        float _2847 = log2(_2833);
        float _2851 = exp2(_2847 * cbSceneParam._m0[78u].x);
        float _2852 = exp2(_2847 * cbSceneParam._m0[78u].y);
        float _2853 = exp2(_2847 * cbSceneParam._m0[78u].z);
        float _2854 = _2851 * _2693;
        float _2855 = _2852 * _2694;
        float _2856 = _2853 * _2695;
        float _2863 = _792 + (-0.5);
        _2865 = cbMtdParam._m0[1u];
        _2867 = _2865.y * _2863;
        float _2870 = (_2845 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2871 = _2870 * (_2846 ? _2854 : (_2854 + (cbSceneParam._m0[72u].w * _2827)));
        _2872 = _2870 * (_2846 ? _2855 : (_2855 + (cbSceneParam._m0[72u].w * _2829)));
        _2873 = _2870 * (_2846 ? _2856 : (_2856 + (cbSceneParam._m0[72u].w * _2831)));
        _2876 = ((_2701 * _2705) * _2851) * _2870;
        _2879 = ((_2702 * _2705) * _2852) * _2870;
        _2882 = ((_2703 * _2705) * _2853) * _2870;
        _2883 = _2863 * 0.999000012874603271484375;
        _2893 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2893)
        {
            if ((cbInstanceData._m0[_841 + 7u].x + _2883) < 0.5)
            {
                _3049 = true;
                break;
            }
        }
        uint _2990 = _842 + uint(_2843.w);
        if ((cbInstanceData._m0[_2990].w < 1.0) && ((cbInstanceData._m0[_2990].w + _2883) < 0.5))
        {
            _3049 = true;
            break;
        }
        if ((_2867 + 1.0) < _2865.x)
        {
            _3049 = true;
            break;
        }
        _3049 = false;
        break;
    }
    float _3254;
    if (_3049)
    {
        discard_state = true;
        _3254 = 0.0;
    }
    else
    {
        _3254 = cbInstanceData._m0[_2706].w;
    }
    SV_Target.x = _2871;
    SV_Target.y = _2872;
    SV_Target.z = _2873;
    SV_Target.w = _3254;
    SV_Target_1.x = _2876;
    SV_Target_1.y = _2879;
    SV_Target_1.z = _2882;
    SV_Target_1.w = cbInstanceData._m0[_2706].w;
    discard_exit();
}


