#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[29];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 12) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 9) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2DArray C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_0;
layout(set = 0, binding = 14) uniform texture2DArray C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1279;
float _3987;
float _3988;
float _3989;
float _3990;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _207 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _208 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _209 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _215 = inversesqrt(dot(vec3(_207, _208, _209), vec3(_207, _208, _209)));
    float _222 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _229 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _247 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_1) + cbTextureTilingScale._m0[10u].w));
    float _257 = log2(0.0);
    float _259 = exp2(_257 * cbMtdParam._m0[22u].x);
    float _260 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _261 = isnan(1.0) ? _260 : (isnan(_260) ? 1.0 : min(_260, 1.0));
    vec4 _275 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _279 = _275.z;
    float _288 = exp2(log2(_279 * cbMtdParam._m0[22u].y) * cbMtdParam._m0[21u].y);
    float _289 = isnan(0.0) ? _288 : (isnan(_288) ? 0.0 : max(_288, 0.0));
    float _290 = isnan(1.0) ? _289 : (isnan(_289) ? 1.0 : min(_289, 1.0));
    float _311 = roundEven(5.0 - ((texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w)).x + (-0.02500000037252902984619140625)) * 8.0));
    float _312 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    float _313 = isnan(4.0) ? _312 : (isnan(_312) ? 4.0 : min(_312, 4.0));
    float _326 = floor(_313);
    vec4 _329 = texture(sampler2DArray(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w, _326));
    vec4 _353 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _364 = cbMtdParam._m0[9u].x * _353.x;
    float _365 = cbMtdParam._m0[9u].y * _353.y;
    float _366 = cbMtdParam._m0[9u].z * _353.z;
    float _373 = (((cbMtdParam._m0[10u].x * _329.x) - _364) * _290) + _364;
    float _374 = (((cbMtdParam._m0[10u].y * _329.y) - _365) * _290) + _365;
    float _375 = (((cbMtdParam._m0[10u].z * _329.z) - _366) * _290) + _366;
    float _381 = exp2(log2(_275.w) * cbMtdParam._m0[22u].w);
    vec4 _394 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _414 = (((cbMtdParam._m0[16u].x * _394.x) - _373) * _381) + _373;
    float _415 = (((cbMtdParam._m0[16u].y * _394.y) - _374) * _381) + _374;
    float _416 = (((cbMtdParam._m0[16u].z * _394.z) - _375) * _381) + _375;
    vec4 _429 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _454 = (_247.x * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].x * _429.x) - _414) * _261) + _414);
    float _456 = (_247.y * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].y * _429.y) - _415) * _261) + _415);
    float _458 = (_247.z * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].z * _429.z) - _416) * _261) + _416);
    float _186[5];
    float _187[5];
    _186[0u] = cbMtdParam._m0[25u].w;
    _187[0u] = cbMtdParam._m0[26u].x;
    _186[1u] = cbMtdParam._m0[27u].w;
    _187[1u] = cbMtdParam._m0[28u].x;
    _186[2u] = cbMtdParam._m0[27u].y;
    _187[2u] = cbMtdParam._m0[27u].z;
    _186[3u] = cbMtdParam._m0[26u].w;
    _187[3u] = cbMtdParam._m0[27u].x;
    _186[4u] = cbMtdParam._m0[26u].y;
    _187[4u] = cbMtdParam._m0[26u].z;
    float _498 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    uint _500 = uint(int(isnan(4.0) ? _498 : (isnan(_498) ? 4.0 : min(_498, 4.0))));
    float _507 = ((_187[_500] - cbMtdParam._m0[21u].z) * _290) + cbMtdParam._m0[21u].z;
    float _510 = ((cbMtdParam._m0[21u].w - _507) * _381) + _507;
    float _513 = ((cbMtdParam._m0[24u].y - _510) * _261) + _510;
    vec4 _529 = texture(sampler2DArray(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w, _326));
    vec4 _546 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _548 = _546.x;
    float _549 = _546.y;
    float _554 = cbMtdParam._m0[21u].x + _546.z;
    float _557 = (((_529.z + _186[_500]) - _554) * _290) + _554;
    vec4 _570 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_1) + cbTextureTilingScale._m0[11u].w));
    float _581 = (((_570.z - _557) + cbMtdParam._m0[25u].y) * _381) + _557;
    float _587 = ((((_279 * 2.0) * _581) - _581) * cbMtdParam._m0[23u].w) + _581;
    vec4 _600 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_1) + cbTextureTilingScale._m0[12u].w));
    float _611 = (((cbMtdParam._m0[22u].z + _600.z) - _587) * _261) + _587;
    vec4 _631 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _648 = ((_529.x - _548) * _290) + _548;
    float _649 = ((_529.y - _549) * _290) + _549;
    float _654 = ((_570.x - _648) * _381) + _648;
    float _655 = ((_570.y - _649) * _381) + _649;
    float _664 = ((((_600.x - _654) * _261) + _654) * 2.0) + (-1.0);
    float _665 = ((((_600.y - _655) * _261) + _655) * 2.0) + (-1.0);
    float _666 = dot(vec2(_664, _665), vec2(_664, _665));
    float _4039 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _671 = sqrt(1.0 - (isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0))));
    float _674 = (cbMtdParam._m0[24u].z * ((_275.x * 2.0) + (-1.0))) + _664;
    float _675 = (cbMtdParam._m0[24u].z * ((_275.y * 2.0) + (-1.0))) + _665;
    float _677 = gl_FragCoord.x * 0.125;
    float _679 = gl_FragCoord.y * 0.125;
    float _690 = fma(_671, _222 * NORMAL.x, fma(_675, _229 * TANGENT.x, (_215 * _207) * _674));
    float _693 = fma(_671, _222 * NORMAL.y, fma(_675, _229 * TANGENT.y, (_215 * _208) * _674));
    float _696 = fma(_671, _222 * NORMAL.z, fma(_675, _229 * TANGENT.z, (_215 * _209) * _674));
    float _700 = inversesqrt(dot(vec3(_690, _693, _696), vec3(_690, _693, _696)));
    float _701 = _700 * _690;
    float _702 = _700 * _693;
    float _703 = _700 * _696;
    float _4050 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _704 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
    float _4061 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _4072 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _4083 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _4094 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _708 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
    if (!(cbMtdParam._m0[24u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_677, _679)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _728 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _768 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _778 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _768);
    float _779 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _768);
    float _780 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _768);
    float _784 = inversesqrt(dot(vec3(_778, _779, _780), vec3(_778, _779, _780)));
    float _785 = _778 * _784;
    float _786 = _779 * _784;
    float _787 = _780 * _784;
    vec4 _789 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_677, _679));
    float _791 = _789.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _961 = sqrt(((_778 * _778) + (_779 * _779)) + (_780 * _780));
        float _967 = (cbMatDynParam._m0[5u].x * _961) + cbMatDynParam._m0[5u].y;
        float _4105 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _968 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
        float _972 = (cbMatDynParam._m0[5u].z * _961) + cbMatDynParam._m0[5u].w;
        float _4116 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0))) - _968)) + _968) < ((_791 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _802 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _803 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _821 = fma(_703, cbSceneParam._m0[5u].z, fma(_702, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _701));
    float _824 = fma(_703, cbSceneParam._m0[6u].z, fma(_702, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _701));
    float _827 = fma(_703, cbSceneParam._m0[7u].z, fma(_702, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _701));
    uint _840 = uint(roundEven(NORMAL.w)) * 13u;
    uint _841 = _840 + 9u;
    uint _842 = _841 + uint(cbMatDynParam._m0[0u].w);
    float _848 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0)))) * cbInstanceData._m0[_842].x;
    float _849 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0)))) * cbInstanceData._m0[_842].y;
    float _850 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0)))) * cbInstanceData._m0[_842].z;
    float _4127 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    float _851 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
    float _4138 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    float _852 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
    float _4149 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
    float _853 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
    float _854 = 1.0 - _708;
    float _855 = _851 * _854;
    float _856 = _852 * _854;
    float _857 = _853 * _854;
    float _862 = (_851 + (-0.039999999105930328369140625)) * _708;
    float _863 = (_852 + (-0.039999999105930328369140625)) * _708;
    float _864 = (_853 + (-0.039999999105930328369140625)) * _708;
    float _865 = _862 + 0.039999999105930328369140625;
    float _867 = _863 + 0.039999999105930328369140625;
    float _868 = _864 + 0.039999999105930328369140625;
    vec4 _877 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _802, cbSceneParam._m0[86u].y * _803));
    float _880 = _877.x * TEXCOORD_3.w;
    float _881 = dot(vec3(_701, _702, _703), vec3(_785, _786, _787));
    float _884 = _881 * 2.0;
    float _888 = (_884 * _701) - _785;
    float _889 = (_884 * _702) - _786;
    float _890 = (_884 * _703) - _787;
    float _894 = abs(dot(vec3(_785, _786, _787), vec3(_701, _702, _703)));
    float _4160 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
    float _896 = sqrt(_704);
    float _907 = exp2((_896 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_896 * 3.0));
    float _913 = (1.0 - _907) * ((_896 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _914 = _907 * _896;
    float _942 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _946 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _950 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1278;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1003 = fma(_950, cbModelParam._m0[26u].z, fma(_946, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _942));
        float _1007 = fma(_950, cbModelParam._m0[27u].z, fma(_946, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _942));
        float _1011 = fma(_950, cbModelParam._m0[28u].z, fma(_946, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _942));
        float _1036 = _942 + _701;
        float _1037 = _946 + _702;
        float _1038 = _950 + _703;
        float _1048 = fma(_1038, cbModelParam._m0[26u].z, fma(_1037, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1036)) - _1003;
        float _1049 = fma(_1038, cbModelParam._m0[27u].z, fma(_1037, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1036)) - _1007;
        float _1050 = fma(_1038, cbModelParam._m0[28u].z, fma(_1037, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1036)) - _1011;
        float _1054 = inversesqrt(dot(vec3(_1048, _1049, _1050), vec3(_1048, _1049, _1050)));
        float _1067 = ((_1054 * _1048) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1003 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1068 = ((_1054 * _1049) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1007 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1069 = ((_1054 * _1050) / cbModelParam._m0[34u].z) + ((((((_1011 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1072 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1067, _1068, _1069), 0.0);
        vec4 _1079 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1067, _1068, _1069), 0.0);
        vec4 _1086 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1067, _1068, _1069), 0.0);
        vec4 _1093 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1067, _1068, _1069), 0.0);
        float _1106 = exp2((_1072.w + (-0.5)) * 20.0) * 2.0;
        float _1107 = _1106 * (_1072.x + (-0.5));
        float _1108 = _1106 * (_1072.y + (-0.5));
        float _1109 = _1106 * (_1072.z + (-0.5));
        float _1116 = exp2((_1079.w + (-0.5)) * 20.0) * 2.0;
        float _1117 = _1116 * (_1079.x + (-0.5));
        float _1118 = _1116 * (_1079.y + (-0.5));
        float _1119 = _1116 * (_1079.z + (-0.5));
        float _1126 = exp2((_1086.w + (-0.5)) * 20.0) * 2.0;
        float _1127 = _1126 * (_1086.x + (-0.5));
        float _1128 = _1126 * (_1086.y + (-0.5));
        float _1129 = _1126 * (_1086.z + (-0.5));
        float _1136 = exp2((_1093.w + (-0.5)) * 20.0) * 2.0;
        float _1137 = _1136 * (_1093.x + (-0.5));
        float _1138 = _1136 * (_1093.y + (-0.5));
        float _1139 = _1136 * (_1093.z + (-0.5));
        float _1140 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1141 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1142 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1143 = _1107 * 0.5;
        float _1144 = _1117 * 0.5;
        float _1145 = _1127 * 0.5;
        float _1146 = dot(vec3(_1143, _1144, _1145), vec3(_1143, _1144, _1145));
        float _1151 = (_1146 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1146);
        float _1160 = (dot(vec3(_701, _702, _703), vec3(_1151 * _1143, _1151 * _1144, _1151 * _1145)) + 1.0) * 0.5;
        float _4186 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1170 = sqrt(((_1144 * _1144) + (_1143 * _1143)) + (_1145 * _1145)) / (_1140 + 9.9999997473787516355514526367188e-06);
        float _4197 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1171 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
        float _1172 = _1171 * 2.0;
        float _1176 = (1.0 - _1171) / (_1171 + 1.0);
        float _4208 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1177 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
        float _1186 = ((((1.0 - _1177) * (_1172 + 2.0)) * exp2(log2(isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0))) * (_1172 + 1.0))) + _1177) * _1140;
        float _1187 = _1108 * 0.5;
        float _1188 = _1118 * 0.5;
        float _1189 = _1128 * 0.5;
        float _1190 = dot(vec3(_1187, _1188, _1189), vec3(_1187, _1188, _1189));
        float _1195 = (_1190 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1190);
        float _1203 = (dot(vec3(_701, _702, _703), vec3(_1195 * _1187, _1195 * _1188, _1195 * _1189)) + 1.0) * 0.5;
        float _4219 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1212 = sqrt(((_1188 * _1188) + (_1187 * _1187)) + (_1189 * _1189)) / (_1141 + 9.9999997473787516355514526367188e-06);
        float _4230 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1213 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
        float _1214 = _1213 * 2.0;
        float _1218 = (1.0 - _1213) / (_1213 + 1.0);
        float _4241 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1219 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
        float _1228 = ((((1.0 - _1219) * (_1214 + 2.0)) * exp2(log2(isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0))) * (_1214 + 1.0))) + _1219) * _1141;
        float _1229 = _1109 * 0.5;
        float _1230 = _1119 * 0.5;
        float _1231 = _1129 * 0.5;
        float _1232 = dot(vec3(_1229, _1230, _1231), vec3(_1229, _1230, _1231));
        float _1237 = (_1232 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1232);
        float _1245 = (dot(vec3(_701, _702, _703), vec3(_1237 * _1229, _1237 * _1230, _1237 * _1231)) + 1.0) * 0.5;
        float _4252 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1254 = sqrt(((_1230 * _1230) + (_1229 * _1229)) + (_1231 * _1231)) / (_1142 + 9.9999997473787516355514526367188e-06);
        float _4263 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1255 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
        float _1256 = _1255 * 2.0;
        float _1260 = (1.0 - _1255) / (_1255 + 1.0);
        float _4274 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1261 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
        float _1270 = ((((1.0 - _1261) * (_1256 + 2.0)) * exp2(log2(isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0))) * (_1256 + 1.0))) + _1261) * _1142;
        _1278 = _1109;
        _1280 = _1108;
        _1281 = _1107;
        _1282 = _1119;
        _1283 = _1118;
        _1284 = _1117;
        _1285 = _1129;
        _1286 = _1128;
        _1287 = _1127;
        _1288 = _1142;
        _1289 = _1141;
        _1290 = _1140;
        _1291 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0)));
        _1292 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0)));
        _1293 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0)));
    }
    else
    {
        _1278 = _1279;
        _1280 = _1279;
        _1281 = _1279;
        _1282 = _1279;
        _1283 = _1279;
        _1284 = _1279;
        _1285 = _1279;
        _1286 = _1279;
        _1287 = _1279;
        _1288 = _1279;
        _1289 = _1279;
        _1290 = _1279;
        _1291 = 0.0;
        _1292 = 0.0;
        _1293 = 0.0;
    }
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1319 = fma(_950, cbModelParam._m0[30u].z, fma(_946, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _942));
        float _1323 = fma(_950, cbModelParam._m0[31u].z, fma(_946, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _942));
        float _1327 = fma(_950, cbModelParam._m0[32u].z, fma(_946, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _942));
        float _1350 = _942 + _701;
        float _1351 = _946 + _702;
        float _1352 = _950 + _703;
        float _1362 = fma(_1352, cbModelParam._m0[30u].z, fma(_1351, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1350)) - _1319;
        float _1363 = fma(_1352, cbModelParam._m0[31u].z, fma(_1351, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1350)) - _1323;
        float _1364 = fma(_1352, cbModelParam._m0[32u].z, fma(_1351, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1350)) - _1327;
        float _1368 = inversesqrt(dot(vec3(_1362, _1363, _1364), vec3(_1362, _1363, _1364)));
        float _1381 = ((_1368 * _1362) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1319 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1382 = ((_1368 * _1363) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1323 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1383 = ((_1368 * _1364) / cbModelParam._m0[35u].z) + ((((((_1327 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1385 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1381, _1382, _1383), 0.0);
        vec4 _1392 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1381, _1382, _1383), 0.0);
        vec4 _1399 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1381, _1382, _1383), 0.0);
        vec4 _1406 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1381, _1382, _1383), 0.0);
        float _1418 = exp2((_1385.w + (-0.5)) * 20.0) * 2.0;
        float _1419 = _1418 * (_1385.x + (-0.5));
        float _1420 = _1418 * (_1385.y + (-0.5));
        float _1421 = _1418 * (_1385.z + (-0.5));
        float _1428 = exp2((_1392.w + (-0.5)) * 20.0) * 2.0;
        float _1429 = _1428 * (_1392.x + (-0.5));
        float _1430 = _1428 * (_1392.y + (-0.5));
        float _1431 = _1428 * (_1392.z + (-0.5));
        float _1438 = exp2((_1399.w + (-0.5)) * 20.0) * 2.0;
        float _1439 = _1438 * (_1399.x + (-0.5));
        float _1440 = _1438 * (_1399.y + (-0.5));
        float _1441 = _1438 * (_1399.z + (-0.5));
        float _1448 = exp2((_1406.w + (-0.5)) * 20.0) * 2.0;
        float _1449 = _1448 * (_1406.x + (-0.5));
        float _1450 = _1448 * (_1406.y + (-0.5));
        float _1451 = _1448 * (_1406.z + (-0.5));
        float _1452 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1453 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1454 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1455 = _1419 * 0.5;
        float _1456 = _1429 * 0.5;
        float _1457 = _1439 * 0.5;
        float _1458 = dot(vec3(_1455, _1456, _1457), vec3(_1455, _1456, _1457));
        float _1463 = (_1458 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1458);
        float _1471 = (dot(vec3(_701, _702, _703), vec3(_1463 * _1455, _1463 * _1456, _1463 * _1457)) + 1.0) * 0.5;
        float _4315 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1480 = sqrt(((_1456 * _1456) + (_1455 * _1455)) + (_1457 * _1457)) / (_1452 + 9.9999997473787516355514526367188e-06);
        float _4326 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1481 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
        float _1482 = _1481 * 2.0;
        float _1486 = (1.0 - _1481) / (_1481 + 1.0);
        float _4337 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1487 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
        float _1496 = ((((1.0 - _1487) * (_1482 + 2.0)) * exp2(log2(isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0))) * (_1482 + 1.0))) + _1487) * _1452;
        float _1497 = _1420 * 0.5;
        float _1498 = _1430 * 0.5;
        float _1499 = _1440 * 0.5;
        float _1500 = dot(vec3(_1497, _1498, _1499), vec3(_1497, _1498, _1499));
        float _1505 = (_1500 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1500);
        float _1513 = (dot(vec3(_701, _702, _703), vec3(_1505 * _1497, _1505 * _1498, _1505 * _1499)) + 1.0) * 0.5;
        float _4348 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1522 = sqrt(((_1498 * _1498) + (_1497 * _1497)) + (_1499 * _1499)) / (_1453 + 9.9999997473787516355514526367188e-06);
        float _4359 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1523 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
        float _1524 = _1523 * 2.0;
        float _1528 = (1.0 - _1523) / (_1523 + 1.0);
        float _4370 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1529 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
        float _1538 = ((((1.0 - _1529) * (_1524 + 2.0)) * exp2(log2(isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0))) * (_1524 + 1.0))) + _1529) * _1453;
        float _1539 = _1421 * 0.5;
        float _1540 = _1431 * 0.5;
        float _1541 = _1441 * 0.5;
        float _1542 = dot(vec3(_1539, _1540, _1541), vec3(_1539, _1540, _1541));
        float _1547 = (_1542 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1542);
        float _1555 = (dot(vec3(_701, _702, _703), vec3(_1547 * _1539, _1547 * _1540, _1547 * _1541)) + 1.0) * 0.5;
        float _4381 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1564 = sqrt(((_1540 * _1540) + (_1539 * _1539)) + (_1541 * _1541)) / (_1454 + 9.9999997473787516355514526367188e-06);
        float _4392 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
        float _1565 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
        float _1566 = _1565 * 2.0;
        float _1570 = (1.0 - _1565) / (_1565 + 1.0);
        float _4403 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1571 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
        float _1580 = ((((1.0 - _1571) * (_1566 + 2.0)) * exp2(log2(isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0))) * (_1566 + 1.0))) + _1571) * _1454;
        _1588 = _1421;
        _1589 = _1420;
        _1590 = _1419;
        _1591 = _1431;
        _1592 = _1430;
        _1593 = _1429;
        _1594 = _1441;
        _1595 = _1440;
        _1596 = _1439;
        _1597 = _1454;
        _1598 = _1453;
        _1599 = _1452;
        _1600 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0)));
        _1601 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0)));
        _1602 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0)));
    }
    else
    {
        _1588 = _1279;
        _1589 = _1279;
        _1590 = _1279;
        _1591 = _1279;
        _1592 = _1279;
        _1593 = _1279;
        _1594 = _1279;
        _1595 = _1279;
        _1596 = _1279;
        _1597 = _1279;
        _1598 = _1279;
        _1599 = _1279;
        _1600 = 0.0;
        _1601 = 0.0;
        _1602 = 0.0;
    }
    float _1612 = (cbModelParam._m0[1u].x * (_1600 - _1291)) + _1291;
    float _1613 = (cbModelParam._m0[1u].x * (_1601 - _1292)) + _1292;
    float _1614 = (cbModelParam._m0[1u].x * (_1602 - _1293)) + _1293;
    float _1635 = fma(_1614, cbSceneParam._m0[89u].z, fma(_1613, cbSceneParam._m0[89u].y, _1612 * cbSceneParam._m0[89u].x));
    float _1638 = fma(_1614, cbSceneParam._m0[90u].z, fma(_1613, cbSceneParam._m0[90u].y, _1612 * cbSceneParam._m0[90u].x));
    float _1641 = fma(_1614, cbSceneParam._m0[91u].z, fma(_1613, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1612));
    float _1656 = _888 * 0.5;
    float _1657 = _889 * 0.5;
    float _1658 = _890 * 0.5;
    float _1659 = dot(vec4(_1656, _1657, _1658, 1.0), vec4(_1590, _1593, _1596, _1599));
    float _1662 = dot(vec4(_1656, _1657, _1658, 1.0), vec4(_1589, _1592, _1595, _1598));
    float _1665 = dot(vec4(_1656, _1657, _1658, 1.0), vec4(_1588, _1591, _1594, _1597));
    float _1699;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1672 = dot(vec4(_1656, _1657, _1658, 1.0), vec4(_1278, _1282, _1285, _1288));
        float _1676 = dot(vec4(_1656, _1657, _1658, 1.0), vec4(_1280, _1283, _1286, _1289));
        float _1680 = dot(vec4(_1656, _1657, _1658, 1.0), vec4(_1281, _1284, _1287, _1290));
        float _1687 = dot(vec4(cbModelParam._m0[39u]), vec4(_1656, _1657, _1658, 1.0));
        _1699 = dot(vec3(isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0)), isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0)), isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1687) ? 0.0 : (isnan(0.0) ? _1687 : max(0.0, _1687))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1699 = 1.0;
    }
    float _1710;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1701 = dot(vec4(cbModelParam._m0[40u]), vec4(_1656, _1657, _1658, 1.0));
        _1710 = dot(vec3(isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0)), isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0)), isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1701) ? 0.0 : (isnan(0.0) ? _1701 : max(0.0, _1701))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1710 = 1.0;
    }
    float _1714 = (_1710 * cbModelParam._m0[1u].x) + (_1699 * (1.0 - cbModelParam._m0[1u].x));
    float _1724 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _704);
    float _1725 = isnan(_1724) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1724 : min(cbModelParam._m0[25u].z, _1724));
    float _1806;
    float _1808;
    float _1810;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1773 = fma(_950, cbModelParam._m0[13u].z, fma(_946, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _942)) + cbModelParam._m0[13u].w;
        float _1777 = fma(_950, cbModelParam._m0[14u].z, fma(_946, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _942)) + cbModelParam._m0[14u].w;
        float _1781 = fma(_950, cbModelParam._m0[15u].z, fma(_946, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _942)) + cbModelParam._m0[15u].w;
        float _1784 = fma(_890, cbModelParam._m0[13u].z, fma(_889, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _888));
        float _1787 = fma(_890, cbModelParam._m0[14u].z, fma(_889, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _888));
        float _1790 = fma(_890, cbModelParam._m0[15u].z, fma(_889, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _888));
        float _1818;
        if (_1784 > 0.0)
        {
            _1818 = abs((1.0 - _1773) / _1784);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1784 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1773 + 1.0) / _1784);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1818 = frontier_phi_19_17_ladder;
        }
        float _1990;
        if (_1787 > 0.0)
        {
            _1990 = abs((1.0 - _1777) / _1787);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1787 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1777 + 1.0) / _1787);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1990 = frontier_phi_28_24_ladder;
        }
        float _2285;
        if (_1790 > 0.0)
        {
            _2285 = abs((1.0 - _1781) / _1790);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1790 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1781 + 1.0) / _1790);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2285 = frontier_phi_40_35_ladder;
        }
        float _2287 = isnan(_1990) ? _1818 : (isnan(_1818) ? _1990 : min(_1818, _1990));
        float _2288 = isnan(_2285) ? _2287 : (isnan(_2287) ? _2285 : min(_2287, _2285));
        float _2292 = (_2288 * _1784) + _1773;
        float _2293 = (_2288 * _1787) + _1777;
        float _2294 = (_2288 * _1790) + _1781;
        float _2295 = _2288 * 9.9999997473787516355514526367188e-05;
        float _2297 = (-1.0) - _2295;
        float _2299 = _2295 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2294 > _2299) || ((_2294 < _2297) || ((_2293 > _2299) || ((_2293 < _2297) || ((_2292 < _2297) || (_2292 > _2299))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2439 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2294, cbModelParam._m0[9u].z, fma(_2293, cbModelParam._m0[9u].y, _2292 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2294, cbModelParam._m0[10u].z, fma(_2293, cbModelParam._m0[10u].y, _2292 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2294, cbModelParam._m0[11u].z, fma(_2293, cbModelParam._m0[11u].y, _2292 * cbModelParam._m0[11u].x))), _1725);
            frontier_phi_18_40_ladder = _2439.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2439.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2439.x * cbModelParam._m0[1u].y;
        }
        _1806 = frontier_phi_18_40_ladder_2;
        _1808 = frontier_phi_18_40_ladder_1;
        _1810 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1794 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_888, _889, _890), _1725);
        _1806 = _1794.x * cbModelParam._m0[1u].y;
        _1808 = _1794.y * cbModelParam._m0[1u].y;
        _1810 = _1794.z * cbModelParam._m0[1u].y;
    }
    float _1814 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _704);
    float _1815 = isnan(_1814) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1814 : min(cbModelParam._m0[25u].w, _1814));
    float _1905;
    float _1907;
    float _1909;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1869 = fma(_950, cbModelParam._m0[21u].z, fma(_946, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _942)) + cbModelParam._m0[21u].w;
        float _1873 = fma(_950, cbModelParam._m0[22u].z, fma(_946, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _942)) + cbModelParam._m0[22u].w;
        float _1877 = fma(_950, cbModelParam._m0[23u].z, fma(_946, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _942)) + cbModelParam._m0[23u].w;
        float _1880 = fma(_890, cbModelParam._m0[21u].z, fma(_889, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _888));
        float _1883 = fma(_890, cbModelParam._m0[22u].z, fma(_889, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _888));
        float _1886 = fma(_890, cbModelParam._m0[23u].z, fma(_889, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _888));
        float _1995;
        if (_1880 > 0.0)
        {
            _1995 = abs((1.0 - _1869) / _1880);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1880 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1869 + 1.0) / _1880);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1995 = frontier_phi_30_26_ladder;
        }
        float _2312;
        if (_1883 > 0.0)
        {
            _2312 = abs((1.0 - _1873) / _1883);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1883 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1873 + 1.0) / _1883);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2312 = frontier_phi_42_37_ladder;
        }
        float _2650;
        if (_1886 > 0.0)
        {
            _2650 = abs((1.0 - _1877) / _1886);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1886 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1877 + 1.0) / _1886);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2650 = frontier_phi_52_49_ladder;
        }
        float _2652 = isnan(_2312) ? _1995 : (isnan(_1995) ? _2312 : min(_1995, _2312));
        float _2653 = isnan(_2650) ? _2652 : (isnan(_2652) ? _2650 : min(_2652, _2650));
        float _2657 = (_2653 * _1880) + _1869;
        float _2658 = (_2653 * _1883) + _1873;
        float _2659 = (_2653 * _1886) + _1877;
        float _2660 = _2653 * 9.9999997473787516355514526367188e-05;
        float _2661 = (-1.0) - _2660;
        float _2663 = _2660 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2659 > _2663) || ((_2659 < _2661) || ((_2658 > _2663) || ((_2658 < _2661) || ((_2657 < _2661) || (_2657 > _2663))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2781 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2659, cbModelParam._m0[17u].z, fma(_2658, cbModelParam._m0[17u].y, _2657 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2659, cbModelParam._m0[18u].z, fma(_2658, cbModelParam._m0[18u].y, _2657 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2659, cbModelParam._m0[19u].z, fma(_2658, cbModelParam._m0[19u].y, _2657 * cbModelParam._m0[19u].x))), _1815);
            frontier_phi_27_52_ladder = _2781.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2781.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2781.x * cbModelParam._m0[1u].z;
        }
        _1905 = frontier_phi_27_52_ladder_2;
        _1907 = frontier_phi_27_52_ladder_1;
        _1909 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1889 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_888, _889, _890), _1815);
        _1905 = _1889.x * cbModelParam._m0[1u].z;
        _1907 = _1889.y * cbModelParam._m0[1u].z;
        _1909 = _1889.z * cbModelParam._m0[1u].z;
    }
    float _1922 = (((_913 * _865) + _914) * _880) * ((cbModelParam._m0[1u].w * (_1905 - _1806)) + _1806);
    float _1924 = (((_913 * _867) + _914) * _880) * ((cbModelParam._m0[1u].w * (_1907 - _1808)) + _1808);
    float _1926 = (((_913 * _868) + _914) * _880) * ((cbModelParam._m0[1u].w * (_1909 - _1810)) + _1810);
    float _1929 = fma(_1926, cbSceneParam._m0[89u].z, fma(_1924, cbSceneParam._m0[89u].y, _1922 * cbSceneParam._m0[89u].x));
    float _1932 = fma(_1926, cbSceneParam._m0[90u].z, fma(_1924, cbSceneParam._m0[90u].y, _1922 * cbSceneParam._m0[90u].x));
    float _1935 = fma(_1926, cbSceneParam._m0[91u].z, fma(_1924, cbSceneParam._m0[91u].y, _1922 * cbSceneParam._m0[91u].x));
    float _1969 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1973 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1977 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1981 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1982 = _1969 / _1981;
    float _1983 = _1973 / _1981;
    float _1984 = _1977 / _1981;
    float _2131;
    float _2132;
    float _2133;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2011 = ((uint(_1984 > cbSceneParam._m0[59u].y) + uint(_1984 > cbSceneParam._m0[59u].x)) + uint(_1984 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2012 = _2011 + 43u;
        uint _2020 = _2011 + 44u;
        uint _2028 = _2011 + 45u;
        uint _2036 = _2011 + 46u;
        float _2047 = fma(_1981, cbSceneParam._m0[_2012].w, fma(_1977, cbSceneParam._m0[_2012].z, fma(_1973, cbSceneParam._m0[_2012].y, _1969 * cbSceneParam._m0[_2012].x)));
        float _2051 = fma(_1981, cbSceneParam._m0[_2020].w, fma(_1977, cbSceneParam._m0[_2020].z, fma(_1973, cbSceneParam._m0[_2020].y, _1969 * cbSceneParam._m0[_2020].x)));
        float _2059 = fma(_1981, cbSceneParam._m0[_2036].w, fma(_1977, cbSceneParam._m0[_2036].z, fma(_1973, cbSceneParam._m0[_2036].y, _1969 * cbSceneParam._m0[_2036].x)));
        float _2064 = cbSceneParam._m0[33u].z * _2059;
        float _2066 = cbSceneParam._m0[33u].w * _2059;
        float _2069 = fma(_1981, cbSceneParam._m0[_2028].w, fma(_1977, cbSceneParam._m0[_2028].z, fma(_1973, cbSceneParam._m0[_2028].y, _1969 * cbSceneParam._m0[_2028].x))) / _2059;
        float _2117 = (cbSceneParam._m0[33u].x - sqrt(((_1983 * _1983) + (_1982 * _1982)) + (_1984 * _1984))) * cbSceneParam._m0[33u].y;
        float _4529 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
        float _2124 = (isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2064 + _2047) / _2059, (_2066 + _2051) / _2059), _2069), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2066 + _2047) / _2059, (_2051 - _2064) / _2059), _2069), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2047 - _2064) / _2059, (_2051 - _2066) / _2059), _2069), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2047 - _2066) / _2059, (_2064 + _2051) / _2059), _2069), 0.0)).x), vec4(0.25)));
        _2131 = 1.0 - (_2124 * cbSceneParam._m0[34u].x);
        _2132 = 1.0 - (_2124 * cbSceneParam._m0[34u].y);
        _2133 = 1.0 - (_2124 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2131 = 1.0;
        _2132 = 1.0;
        _2133 = 1.0;
    }
    float _2197;
    float _2199;
    float _2201;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2185 = fma(_1981, cbSceneParam._m0[63u].w, fma(_1977, cbSceneParam._m0[63u].z, fma(_1973, cbSceneParam._m0[63u].y, _1969 * cbSceneParam._m0[63u].x)));
        float _2186 = fma(_1981, cbSceneParam._m0[60u].w, fma(_1977, cbSceneParam._m0[60u].z, fma(_1973, cbSceneParam._m0[60u].y, _1969 * cbSceneParam._m0[60u].x))) / _2185;
        float _2187 = fma(_1981, cbSceneParam._m0[61u].w, fma(_1977, cbSceneParam._m0[61u].z, fma(_1973, cbSceneParam._m0[61u].y, _1969 * cbSceneParam._m0[61u].x))) / _2185;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2186 >= cbSceneParam._m0[64u].x) && (_2187 >= cbSceneParam._m0[64u].y)) && (_2186 <= cbSceneParam._m0[64u].z)) && (_2187 <= cbSceneParam._m0[64u].w))
        {
            float _2325 = fma(_1981, cbSceneParam._m0[62u].w, fma(_1977, cbSceneParam._m0[62u].z, fma(_1973, cbSceneParam._m0[62u].y, _1969 * cbSceneParam._m0[62u].x))) / _2185;
            float _2329 = isnan(cbSceneParam._m0[41u].w) ? _2325 : (isnan(_2325) ? cbSceneParam._m0[41u].w : max(_2325, cbSceneParam._m0[41u].w));
            float _2372 = (cbSceneParam._m0[33u].x - sqrt(((_1983 * _1983) + (_1982 * _1982)) + (_1984 * _1984))) * cbSceneParam._m0[33u].y;
            float _4545 = isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0));
            float _2379 = (isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2186, cbSceneParam._m0[33u].w + _2187), _2329), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2186, _2187 - cbSceneParam._m0[33u].z), _2329), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2186 - cbSceneParam._m0[33u].z, _2187 - cbSceneParam._m0[33u].w), _2329), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2186 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2187), _2329), 0.0)).x), vec4(0.25)));
            float _2383 = 1.0 - (_2379 * cbSceneParam._m0[34u].x);
            float _2384 = 1.0 - (_2379 * cbSceneParam._m0[34u].y);
            float _2385 = 1.0 - (_2379 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2385) ? _2133 : (isnan(_2133) ? _2385 : min(_2133, _2385));
            frontier_phi_39_38_ladder_1 = isnan(_2384) ? _2132 : (isnan(_2132) ? _2384 : min(_2132, _2384));
            frontier_phi_39_38_ladder_2 = isnan(_2383) ? _2131 : (isnan(_2131) ? _2383 : min(_2131, _2383));
        }
        else
        {
            frontier_phi_39_38_ladder = _2133;
            frontier_phi_39_38_ladder_1 = _2132;
            frontier_phi_39_38_ladder_2 = _2131;
        }
        _2197 = frontier_phi_39_38_ladder_2;
        _2199 = frontier_phi_39_38_ladder_1;
        _2201 = frontier_phi_39_38_ladder;
    }
    else
    {
        _2197 = _2131;
        _2199 = _2132;
        _2201 = _2133;
    }
    uvec4 _2206 = floatBitsToUint(cbInstanceData._m0[_840 + 5u]);
    uint _2208 = _2206.x * 14u;
    uint _2209 = _2208 + 13u;
    float _2216 = _880 + (-1.0);
    float _2221 = (cbLight._m0[_2209].x * _2216) + 1.0;
    float _2222 = (cbLight._m0[_2209].y * _2216) + 1.0;
    float _2223 = (cbLight._m0[_2209].z * _2216) + 1.0;
    float _2224 = (cbLight._m0[_2209].w * _2216) + 1.0;
    uint _2225 = _2208 + 5u;
    float _2231 = isnan(1.0) ? _2222 : (isnan(_2222) ? 1.0 : min(_2222, 1.0));
    uint _2235 = _2208 + 4u;
    float _2244 = isnan(1.0) ? _2221 : (isnan(_2221) ? 1.0 : min(_2221, 1.0));
    uint _2248 = _2208 | 1u;
    float _2259 = dot(vec3(cbLight._m0[_2208].xyz), vec3(_701, _702, _703));
    float _2262 = dot(vec3(cbLight._m0[_2248].xyz), vec3(_701, _702, _703));
    float _4581 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
    float _4592 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
    float _2267 = (isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0))) * 0.3183098733425140380859375;
    float _2269 = (isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0))) * 0.3183098733425140380859375;
    float _2276 = ((cbLight._m0[_2225].x * _2231) * _2269) + (((cbLight._m0[_2235].x * _2197) * _2244) * _2267);
    float _2277 = ((_2231 * cbLight._m0[_2225].y) * _2269) + (((cbLight._m0[_2235].y * _2199) * _2244) * _2267);
    float _2278 = ((_2231 * cbLight._m0[_2225].z) * _2269) + (((cbLight._m0[_2235].z * _2201) * _2244) * _2267);
    uvec4 _2282 = floatBitsToUint(cbLight._m0[_2208 + 12u]);
    bool _2284 = _2282.x == 0u;
    float _2386;
    float _2388;
    float _2390;
    if (_2284)
    {
        _2386 = _2276;
        _2388 = _2277;
        _2390 = _2278;
    }
    else
    {
        uint _2394 = _2208 + 6u;
        float _2410 = (dot(vec3(cbLight._m0[_2208 + 2u].xyz), vec3(_701, _702, _703)) * 0.5) + 0.5;
        float _2411 = _2410 * _2410;
        float _4603 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0));
        float _2412 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
        float _2413 = isnan(1.0) ? _2223 : (isnan(_2223) ? 1.0 : min(_2223, 1.0));
        _2386 = (((cbLight._m0[_2394].x * 0.3183098733425140380859375) * _2412) * _2413) + _2276;
        _2388 = (((cbLight._m0[_2394].y * 0.3183098733425140380859375) * _2412) * _2413) + _2277;
        _2390 = (((cbLight._m0[_2394].z * 0.3183098733425140380859375) * _2412) * _2413) + _2278;
    }
    bool _2393 = _2282.y == 0u;
    float _2448;
    float _2450;
    float _2452;
    if (_2393)
    {
        _2448 = _2386;
        _2450 = _2388;
        _2452 = _2390;
    }
    else
    {
        uint _2621 = _2208 + 7u;
        float _2637 = (dot(vec3(cbLight._m0[_2208 + 3u].xyz), vec3(_701, _702, _703)) * 0.5) + 0.5;
        float _2638 = _2637 * _2637;
        float _4619 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0));
        float _2639 = isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0));
        float _2640 = isnan(1.0) ? _2224 : (isnan(_2224) ? 1.0 : min(_2224, 1.0));
        _2448 = (((cbLight._m0[_2621].x * 0.3183098733425140380859375) * _2639) * _2640) + _2386;
        _2450 = (((cbLight._m0[_2621].y * 0.3183098733425140380859375) * _2639) * _2640) + _2388;
        _2452 = (((cbLight._m0[_2621].z * 0.3183098733425140380859375) * _2639) * _2640) + _2390;
    }
    uint _2455 = _2208 + 8u;
    float _2468 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2208].w)) * _704) * 0.949999988079071044921875);
    float _2469 = _2468 * _2468;
    float _2470 = cbLight._m0[_2208].x + _785;
    float _2471 = cbLight._m0[_2208].y + _786;
    float _2472 = cbLight._m0[_2208].z + _787;
    float _2476 = inversesqrt(dot(vec3(_2470, _2471, _2472), vec3(_2470, _2471, _2472)));
    float _2477 = _2476 * _2470;
    float _2478 = _2476 * _2471;
    float _2479 = _2476 * _2472;
    float _2480 = dot(vec3(_701, _702, _703), vec3(cbLight._m0[_2208].xyz));
    float _4635 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
    float _2483 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
    float _4646 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
    float _2484 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
    float _2485 = dot(vec3(_701, _702, _703), vec3(_2477, _2478, _2479));
    float _4657 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
    float _2488 = isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0));
    float _2489 = dot(vec3(cbLight._m0[_2208].xyz), vec3(_2477, _2478, _2479));
    float _4668 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
    float _2493 = _2469 * _2469;
    float _2497 = ((_2488 * _2488) * (_2493 + (-1.0))) + 1.0;
    float _2505 = exp2(log2(1.0 - (isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0)))) * 5.0);
    float _2506 = 0.959999978542327880859375 - _862;
    float _2508 = 0.959999978542327880859375 - _863;
    float _2509 = 0.959999978542327880859375 - _864;
    float _2516 = 1.0 - _2469;
    float _2527 = (0.5 / (((_2484 * ((_2483 * _2516) + _2469)) + 9.9999999392252902907785028219223e-09) + (((_2484 * _2516) + _2469) * _2483))) * _2483;
    float _4679 = isnan(0.0) ? _2527 : (isnan(_2527) ? 0.0 : max(_2527, 0.0));
    float _2529 = (isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0))) * (_2493 / ((_2497 * _2497) * 3.141590118408203125));
    uint _2543 = _2208 + 9u;
    float _2554 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2248].w)) * _704) * 0.949999988079071044921875);
    float _2555 = _2554 * _2554;
    float _2556 = cbLight._m0[_2248].x + _785;
    float _2557 = cbLight._m0[_2248].y + _786;
    float _2558 = cbLight._m0[_2248].z + _787;
    float _2562 = inversesqrt(dot(vec3(_2556, _2557, _2558), vec3(_2556, _2557, _2558)));
    float _2563 = _2562 * _2556;
    float _2564 = _2562 * _2557;
    float _2565 = _2562 * _2558;
    float _2566 = dot(vec3(_701, _702, _703), vec3(cbLight._m0[_2248].xyz));
    float _4690 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0));
    float _2569 = isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0));
    float _2570 = dot(vec3(_701, _702, _703), vec3(_2563, _2564, _2565));
    float _4701 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
    float _2573 = isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0));
    float _2574 = dot(vec3(cbLight._m0[_2248].xyz), vec3(_2563, _2564, _2565));
    float _4712 = isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0));
    float _2578 = _2555 * _2555;
    float _2582 = ((_2573 * _2573) * (_2578 + (-1.0))) + 1.0;
    float _2589 = exp2(log2(1.0 - (isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0)))) * 5.0);
    float _2596 = 1.0 - _2555;
    float _2606 = (0.5 / (((_2484 * ((_2569 * _2596) + _2555)) + 9.9999999392252902907785028219223e-09) + (((_2484 * _2596) + _2555) * _2569))) * _2569;
    float _4723 = isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : max(_2606, 0.0));
    float _2608 = (isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0))) * (_2578 / ((_2582 * _2582) * 3.141590118408203125));
    float _2618 = (((((_2589 * _2506) + _865) * cbLight._m0[_2543].x) * _2608) * _2231) + ((((cbLight._m0[_2455].x * _2197) * ((_2505 * _2506) + _865)) * _2529) * _2244);
    float _2619 = (((((_2589 * _2508) + _867) * cbLight._m0[_2543].y) * _2608) * _2231) + ((((cbLight._m0[_2455].y * _2199) * ((_2505 * _2508) + _867)) * _2529) * _2244);
    float _2620 = (((((_2589 * _2509) + _868) * cbLight._m0[_2543].z) * _2608) * _2231) + ((((cbLight._m0[_2455].z * _2201) * ((_2505 * _2509) + _868)) * _2529) * _2244);
    float _2676;
    float _2678;
    float _2680;
    if (_2284)
    {
        _2676 = _2618;
        _2678 = _2619;
        _2680 = _2620;
    }
    else
    {
        uint _2682 = _2208 + 2u;
        uint _2686 = _2208 + 10u;
        float _2700 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2682].w)) * _704) * 0.949999988079071044921875);
        float _2701 = _2700 * _2700;
        float _2702 = cbLight._m0[_2682].x + _785;
        float _2703 = cbLight._m0[_2682].y + _786;
        float _2704 = cbLight._m0[_2682].z + _787;
        float _2708 = inversesqrt(dot(vec3(_2702, _2703, _2704), vec3(_2702, _2703, _2704)));
        float _2709 = _2708 * _2702;
        float _2710 = _2708 * _2703;
        float _2711 = _2708 * _2704;
        float _2712 = dot(vec3(_701, _702, _703), vec3(cbLight._m0[_2682].xyz));
        float _4734 = isnan(0.0) ? _2712 : (isnan(_2712) ? 0.0 : max(_2712, 0.0));
        float _2715 = isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0));
        float _2716 = dot(vec3(_701, _702, _703), vec3(_2709, _2710, _2711));
        float _4745 = isnan(0.0) ? _2716 : (isnan(_2716) ? 0.0 : max(_2716, 0.0));
        float _2719 = isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0));
        float _2720 = dot(vec3(cbLight._m0[_2682].xyz), vec3(_2709, _2710, _2711));
        float _4756 = isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : max(_2720, 0.0));
        float _2724 = _2701 * _2701;
        float _2728 = ((_2719 * _2719) * (_2724 + (-1.0))) + 1.0;
        float _2735 = exp2(log2(1.0 - (isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0)))) * 5.0);
        float _2742 = 1.0 - _2701;
        float _2752 = (0.5 / (((_2484 * ((_2715 * _2742) + _2701)) + 9.9999999392252902907785028219223e-09) + (((_2484 * _2742) + _2701) * _2715))) * _2715;
        float _4767 = isnan(0.0) ? _2752 : (isnan(_2752) ? 0.0 : max(_2752, 0.0));
        float _2754 = (isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0))) * (_2724 / ((_2728 * _2728) * 3.141590118408203125));
        float _2755 = isnan(1.0) ? _2223 : (isnan(_2223) ? 1.0 : min(_2223, 1.0));
        _2676 = (((((_2735 * _2506) + _865) * cbLight._m0[_2686].x) * _2754) * _2755) + _2618;
        _2678 = (((((_2735 * _2508) + _867) * cbLight._m0[_2686].y) * _2754) * _2755) + _2619;
        _2680 = (((((_2735 * _2509) + _868) * cbLight._m0[_2686].z) * _2754) * _2755) + _2620;
    }
    float _2786;
    float _2788;
    float _2790;
    if (_2393)
    {
        _2786 = _2676;
        _2788 = _2678;
        _2790 = _2680;
    }
    else
    {
        uint _2797 = _2208 + 3u;
        uint _2801 = _2208 + 11u;
        float _2815 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2797].w)) * _704) * 0.949999988079071044921875);
        float _2816 = _2815 * _2815;
        float _2817 = cbLight._m0[_2797].x + _785;
        float _2818 = cbLight._m0[_2797].y + _786;
        float _2819 = cbLight._m0[_2797].z + _787;
        float _2823 = inversesqrt(dot(vec3(_2817, _2818, _2819), vec3(_2817, _2818, _2819)));
        float _2824 = _2823 * _2817;
        float _2825 = _2823 * _2818;
        float _2826 = _2823 * _2819;
        float _2827 = dot(vec3(_701, _702, _703), vec3(cbLight._m0[_2797].xyz));
        float _4783 = isnan(0.0) ? _2827 : (isnan(_2827) ? 0.0 : max(_2827, 0.0));
        float _2830 = isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0));
        float _2831 = dot(vec3(_701, _702, _703), vec3(_2824, _2825, _2826));
        float _4794 = isnan(0.0) ? _2831 : (isnan(_2831) ? 0.0 : max(_2831, 0.0));
        float _2834 = isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0));
        float _2835 = dot(vec3(cbLight._m0[_2797].xyz), vec3(_2824, _2825, _2826));
        float _4805 = isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : max(_2835, 0.0));
        float _2839 = _2816 * _2816;
        float _2843 = ((_2834 * _2834) * (_2839 + (-1.0))) + 1.0;
        float _2850 = exp2(log2(1.0 - (isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0)))) * 5.0);
        float _2857 = 1.0 - _2816;
        float _2867 = (0.5 / (((_2484 * ((_2830 * _2857) + _2816)) + 9.9999999392252902907785028219223e-09) + (((_2484 * _2857) + _2816) * _2830))) * _2830;
        float _4816 = isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : max(_2867, 0.0));
        float _2869 = (isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0))) * (_2839 / ((_2843 * _2843) * 3.141590118408203125));
        float _2870 = isnan(1.0) ? _2224 : (isnan(_2224) ? 1.0 : min(_2224, 1.0));
        _2786 = (((((_2850 * _2506) + _865) * cbLight._m0[_2801].x) * _2869) * _2870) + _2676;
        _2788 = (((((_2850 * _2508) + _867) * cbLight._m0[_2801].y) * _2869) * _2870) + _2678;
        _2790 = (((((_2850 * _2509) + _868) * cbLight._m0[_2801].z) * _2869) * _2870) + _2680;
    }
    float _2936;
    float _2938;
    float _2940;
    float _2942;
    float _2944;
    float _2946;
    if (_2206.y == 0u)
    {
        uvec4 _2891 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2892 = _2891.x;
        uint _2903 = uint((float(_2891.y) * floor(float(uint(cbSceneParam._m0[85u].y * _803) / _2892))) + floor(float(uint(cbSceneParam._m0[85u].x * _802) / _2892)));
        float _2913 = (log2(_1984 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2914 = isnan(0.0) ? _2913 : (isnan(_2913) ? 0.0 : max(_2913, 0.0));
        uint _2917 = uint(isnan(14.0) ? _2914 : (isnan(_2914) ? 14.0 : min(_2914, 14.0)));
        uvec4 _2922 = texelFetch(g_lightClusterGridBuffer, int(((_2917 << 2u) + (_2903 << 6u)) >> 2u));
        uint _2923 = _2922.x;
        uint _2924 = _2891.z;
        float _3038;
        float _3040;
        float _3042;
        float _3044;
        float _3046;
        float _3048;
        if (((((1u << ((_2924 >> 4u) & 15u)) + 4294967295u) & _2923) == 0u) || ((_2924 & 240u) == 0u))
        {
            _3038 = 0.0;
            _3040 = 0.0;
            _3042 = 0.0;
            _3044 = 0.0;
            _3046 = 0.0;
            _3048 = 0.0;
        }
        else
        {
            float _3039;
            float _3041;
            float _3043;
            float _3045;
            float _3047;
            float _3049;
            float _3200 = 0.0;
            float _3201 = 0.0;
            float _3202 = 0.0;
            float _3203 = 0.0;
            float _3204 = 0.0;
            float _3205 = 0.0;
            uint _3206 = 0u;
            uint _3215;
            bool _3216;
            for (;;)
            {
                _3215 = texelFetch(g_lightClassification, int((((_2917 << 5u) + (_2903 << 9u)) + (_3206 << 2u)) >> 2u)).x;
                _3216 = _3215 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3216)
                {
                    frontier_phi_73_pred = _3205;
                    frontier_phi_73_pred_1 = _3204;
                    frontier_phi_73_pred_2 = _3203;
                    frontier_phi_73_pred_3 = _3202;
                    frontier_phi_73_pred_4 = _3201;
                    frontier_phi_73_pred_5 = _3200;
                }
                else
                {
                    float _3345;
                    float _3346;
                    float _3347;
                    float _3348;
                    float _3349;
                    float _3350;
                    uint _3351;
                    _3345 = _3200;
                    _3346 = _3201;
                    _3347 = _3202;
                    _3348 = _3203;
                    _3349 = _3204;
                    _3350 = _3205;
                    _3351 = _3215;
                    float _3272;
                    float _3273;
                    float _3274;
                    float _3275;
                    float _3276;
                    float _3277;
                    for (;;)
                    {
                        uint _3355 = uint(findLSB(_3351)) + (_3206 << 5u);
                        uint _3352 = (_3351 + 4294967295u) & _3351;
                        uint _3357 = _3355 * 48u;
                        vec4 _3371 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3357)).x, texelFetch(g_PointLightRenderingBuffer, int(_3357 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3357 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3357 + 3u)).x));
                        uint _3377 = (_3355 * 48u) + 4u;
                        vec4 _3390 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3377)).x, texelFetch(g_PointLightRenderingBuffer, int(_3377 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3377 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3377 + 3u)).x));
                        uint _3396 = (_3355 * 48u) + 8u;
                        vec3 _3407 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3396)).x, texelFetch(g_PointLightRenderingBuffer, int(_3396 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3396 + 2u)).x));
                        float _3411 = _3371.x - _1982;
                        float _3412 = _3371.y - _1983;
                        float _3413 = _3371.z - _1984;
                        float _3414 = dot(vec3(_3411, _3412, _3413), vec3(_3411, _3412, _3413));
                        float _3417 = inversesqrt(_3414);
                        float _3418 = _3417 * _3411;
                        float _3419 = _3417 * _3412;
                        float _3420 = _3417 * _3413;
                        float _3421 = dot(vec3(_821, _824, _827), vec3(_3418, _3419, _3420));
                        float _3426 = 1.0 - (_3414 * _3371.w);
                        float _4842 = isnan(0.0) ? _3426 : (isnan(_3426) ? 0.0 : max(_3426, 0.0));
                        float _3427 = isnan(1.0) ? _4842 : (isnan(_4842) ? 1.0 : min(_4842, 1.0));
                        float _3428 = sqrt(_3414) * _3390.w;
                        float _3431 = 1.39999997615814208984375 / (_3428 + 1.39999997615814208984375);
                        float _3432 = _3431 * _3431;
                        float _3435 = ((1.0 - _3432) * _3421) + _3432;
                        float _3438 = _3428 * _3428;
                        float _3442 = ((isnan(0.0) ? _3435 : (isnan(_3435) ? 0.0 : max(_3435, 0.0))) * _3427) / ((_3438 * 0.699999988079071044921875) + 1.0);
                        float _3446 = (-0.0) - _1982;
                        float _3447 = (-0.0) - _1983;
                        float _3448 = (-0.0) - _1984;
                        float _3452 = inversesqrt(dot(vec3(_3446, _3447, _3448), vec3(_3446, _3447, _3448)));
                        float _3453 = _3452 * _3446;
                        float _3454 = _3452 * _3447;
                        float _3455 = _3452 * _3448;
                        float _3462 = exp2(log2(1.0 / ((_3438 * 3.5) + 5.0)) * 0.25);
                        float _3463 = 1.0 - _896;
                        float _3470 = sqrt(1.0 - ((1.0 - (_3463 * _3463)) * (1.0 - (_3462 * _3462))));
                        float _3471 = _3470 * _3470;
                        float _3472 = _3471 * _3471;
                        float _3473 = _3453 + _3418;
                        float _3474 = _3454 + _3419;
                        float _3475 = _3455 + _3420;
                        float _3479 = inversesqrt(dot(vec3(_3473, _3474, _3475), vec3(_3473, _3474, _3475)));
                        float _3483 = dot(vec3(_821, _824, _827), vec3(_3453, _3454, _3455));
                        float _4858 = isnan(0.0) ? _3483 : (isnan(_3483) ? 0.0 : max(_3483, 0.0));
                        float _3486 = isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0));
                        float _3487 = dot(vec3(_821, _824, _827), vec3(_3479 * _3473, _3479 * _3474, _3479 * _3475));
                        float _4869 = isnan(0.0) ? _3487 : (isnan(_3487) ? 0.0 : max(_3487, 0.0));
                        float _3490 = isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0));
                        float _3494 = ((_3490 * _3490) * (_3472 + (-1.0))) + 1.0;
                        float _3495 = _3431 * _3471;
                        float _3496 = _3495 * _3495;
                        float _3499 = ((1.0 - _3496) * _3421) + _3496;
                        float _4880 = isnan(0.0) ? _3499 : (isnan(_3499) ? 0.0 : max(_3499, 0.0));
                        float _3500 = isnan(1.0) ? _4880 : (isnan(_4880) ? 1.0 : min(_4880, 1.0));
                        float _3501 = 1.0 - _3471;
                        float _3511 = (0.5 / (((_3500 * ((_3486 * _3501) + _3471)) + 9.9999999392252902907785028219223e-09) + (((_3500 * _3501) + _3471) * _3486))) * _3500;
                        float _4891 = isnan(0.0) ? _3511 : (isnan(_3511) ? 0.0 : max(_3511, 0.0));
                        float _3522 = (((_3472 * 3.1415927410125732421875) * (isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0)))) / ((_3494 * _3494) * ((_3438 * 2.1991131305694580078125) + 3.141590118408203125))) * _3427;
                        _3275 = (_3442 * _3390.x) + _3348;
                        _3276 = (_3442 * _3390.y) + _3349;
                        _3277 = (_3442 * _3390.z) + _3350;
                        _3272 = (_3522 * _3407.x) + _3345;
                        _3273 = (_3522 * _3407.y) + _3346;
                        _3274 = (_3522 * _3407.z) + _3347;
                        if (_3352 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3345 = _3272;
                            _3346 = _3273;
                            _3347 = _3274;
                            _3348 = _3275;
                            _3349 = _3276;
                            _3350 = _3277;
                            _3351 = _3352;
                        }
                    }
                    frontier_phi_73_pred = _3277;
                    frontier_phi_73_pred_1 = _3276;
                    frontier_phi_73_pred_2 = _3275;
                    frontier_phi_73_pred_3 = _3274;
                    frontier_phi_73_pred_4 = _3273;
                    frontier_phi_73_pred_5 = _3272;
                }
                _3049 = frontier_phi_73_pred;
                _3047 = frontier_phi_73_pred_1;
                _3045 = frontier_phi_73_pred_2;
                _3043 = frontier_phi_73_pred_3;
                _3041 = frontier_phi_73_pred_4;
                _3039 = frontier_phi_73_pred_5;
                uint _3207 = _3206 + 1u;
                if (_3207 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3200 = _3039;
                    _3201 = _3041;
                    _3202 = _3043;
                    _3203 = _3045;
                    _3204 = _3047;
                    _3205 = _3049;
                    _3206 = _3207;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3038 = _3039;
            _3040 = _3041;
            _3042 = _3043;
            _3044 = _3045;
            _3046 = _3047;
            _3048 = _3049;
        }
        uvec4 _3052 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3053 = _3052.z;
        uint _3055 = (_3053 >> 8u) & 15u;
        float _3168;
        float _3170;
        float _3172;
        float _3174;
        float _3176;
        float _3178;
        if (((4294967295u << _3055) & _2923) == 0u)
        {
            _3168 = _3038;
            _3170 = _3040;
            _3172 = _3042;
            _3174 = _3044;
            _3176 = _3046;
            _3178 = _3048;
        }
        else
        {
            float _3193 = inversesqrt(dot(vec3(_1982, _1983, _1984), vec3(_1982, _1983, _1984)));
            float _3194 = _3193 * _1982;
            float _3195 = _3193 * _1983;
            float _3196 = _3193 * _1984;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_3055 < ((_3053 >> 12u) & 15u))
            {
                float _3169;
                float _3171;
                float _3173;
                float _3175;
                float _3177;
                float _3179;
                float _3328 = _3038;
                float _3329 = _3040;
                float _3330 = _3042;
                float _3331 = _3044;
                float _3332 = _3046;
                float _3333 = _3048;
                uint _3334 = _3055;
                uint _3343;
                bool _3344;
                for (;;)
                {
                    _3343 = texelFetch(g_lightClassification, int((((_2917 << 5u) + (_2903 << 9u)) + (_3334 << 2u)) >> 2u)).x;
                    _3344 = _3343 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3344)
                    {
                        frontier_phi_84_pred = _3333;
                        frontier_phi_84_pred_1 = _3332;
                        frontier_phi_84_pred_2 = _3331;
                        frontier_phi_84_pred_3 = _3330;
                        frontier_phi_84_pred_4 = _3329;
                        frontier_phi_84_pred_5 = _3328;
                    }
                    else
                    {
                        float _3536;
                        float _3537;
                        float _3538;
                        float _3539;
                        float _3540;
                        float _3541;
                        float _3829;
                        float _3830;
                        float _3831;
                        float _3832;
                        float _3833;
                        float _3834;
                        float _3549 = _3328;
                        float _3550 = _3329;
                        float _3551 = _3330;
                        float _3552 = _3331;
                        float _3553 = _3332;
                        float _3554 = _3333;
                        uint _3555 = _3343;
                        uint _3556;
                        vec4 _3581;
                        float _3582;
                        vec4 _3597;
                        vec3 _3609;
                        vec4 _3624;
                        vec4 _3639;
                        float _3685;
                        bool _3686;
                        for (;;)
                        {
                            uint _3566 = ((_3334 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3555));
                            _3556 = (_3555 + 4294967295u) & _3555;
                            uint _3568 = _3566 * 40u;
                            _3581 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3568)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 3u)).x));
                            _3582 = _3581.w;
                            uint _3584 = (_3566 * 40u) + 4u;
                            _3597 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3584)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3584 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3584 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3584 + 3u)).x));
                            uint _3599 = (_3566 * 40u) + 8u;
                            _3609 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3599)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3599 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3599 + 2u)).x));
                            uint _3611 = (_3566 * 40u) + 16u;
                            _3624 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3611)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 3u)).x));
                            uint _3626 = (_3566 * 40u) + 20u;
                            _3639 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3626)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3626 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3626 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3626 + 3u)).x));
                            uint _3641 = (_3566 * 40u) + 24u;
                            vec4 _3654 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3641)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3641 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3641 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3641 + 3u)).x));
                            uint _3660 = (_3566 * 40u) + 28u;
                            vec4 _3673 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3660)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3660 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3660 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3660 + 3u)).x));
                            _3685 = fma(_1984, _3673.z, fma(_1983, _3673.y, _3673.x * _1982)) + _3673.w;
                            _3686 = !((fma(_1984, _3654.z, fma(_1983, _3654.y, _3654.x * _1982)) + _3654.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3686)
                            {
                                float _3713 = _3581.x - _1982;
                                float _3714 = _3581.y - _1983;
                                float _3715 = _3581.z - _1984;
                                float _3716 = dot(vec3(_3713, _3714, _3715), vec3(_3713, _3714, _3715));
                                float _3719 = inversesqrt(_3716);
                                float _3720 = _3719 * _3713;
                                float _3721 = _3719 * _3714;
                                float _3722 = _3719 * _3715;
                                float _3726 = 1.0 - (_3716 / (_3582 * _3582));
                                float _4902 = isnan(0.0) ? _3726 : (isnan(_3726) ? 0.0 : max(_3726, 0.0));
                                float _3727 = isnan(1.0) ? _4902 : (isnan(_4902) ? 1.0 : min(_4902, 1.0));
                                float _3731 = sqrt(_3716) * _3597.w;
                                float _3733 = 1.39999997615814208984375 / (_3731 + 1.39999997615814208984375);
                                float _3734 = _3733 * _3733;
                                float _3737 = ((1.0 - _3734) * dot(vec3(_3720, _3721, _3722), vec3(_821, _824, _827))) + _3734;
                                float _3740 = _3731 * _3731;
                                float _3744 = (fma(_1984, _3624.z, fma(_1983, _3624.y, _3624.x * _1982)) + _3624.w) / _3685;
                                float _3745 = (fma(_1984, _3639.z, fma(_1983, _3639.y, _3639.x * _1982)) + _3639.w) / _3685;
                                float _3749 = 1.0 - dot(vec2(_3744, _3745), vec2(_3744, _3745));
                                float _4918 = isnan(0.0) ? _3749 : (isnan(_3749) ? 0.0 : max(_3749, 0.0));
                                float _3750 = isnan(1.0) ? _4918 : (isnan(_4918) ? 1.0 : min(_4918, 1.0));
                                float _3751 = _3750 * (((isnan(0.0) ? _3737 : (isnan(_3737) ? 0.0 : max(_3737, 0.0))) * _3727) / ((_3740 * 0.699999988079071044921875) + 1.0));
                                float _3763 = exp2(log2(1.0 / ((_3740 * 3.5) + 5.0)) * 0.25);
                                float _3764 = 1.0 - _896;
                                float _3771 = sqrt(1.0 - ((1.0 - (_3764 * _3764)) * (1.0 - (_3763 * _3763))));
                                float _3772 = _3771 * _3771;
                                float _3773 = _3772 * _3772;
                                float _3774 = _3720 - _3194;
                                float _3775 = _3721 - _3195;
                                float _3776 = _3722 - _3196;
                                float _3780 = inversesqrt(dot(vec3(_3774, _3775, _3776), vec3(_3774, _3775, _3776)));
                                float _3784 = dot(vec3(_821, _824, _827), vec3((-0.0) - _3194, (-0.0) - _3195, (-0.0) - _3196));
                                float _4929 = isnan(0.0) ? _3784 : (isnan(_3784) ? 0.0 : max(_3784, 0.0));
                                float _3787 = isnan(1.0) ? _4929 : (isnan(_4929) ? 1.0 : min(_4929, 1.0));
                                float _3788 = dot(vec3(_821, _824, _827), vec3(_3780 * _3774, _3780 * _3775, _3780 * _3776));
                                float _4940 = isnan(0.0) ? _3788 : (isnan(_3788) ? 0.0 : max(_3788, 0.0));
                                float _3791 = isnan(1.0) ? _4940 : (isnan(_4940) ? 1.0 : min(_4940, 1.0));
                                float _3795 = ((_3791 * _3791) * (_3773 + (-1.0))) + 1.0;
                                float _3796 = _3733 * _3772;
                                float _3797 = _3796 * _3796;
                                float _3803 = ((1.0 - _3797) * dot(vec3(_821, _824, _827), vec3(_3720, _3721, _3722))) + _3797;
                                float _4951 = isnan(0.0) ? _3803 : (isnan(_3803) ? 0.0 : max(_3803, 0.0));
                                float _3804 = isnan(1.0) ? _4951 : (isnan(_4951) ? 1.0 : min(_4951, 1.0));
                                float _3805 = 1.0 - _3772;
                                float _3815 = (0.5 / (((_3804 * ((_3787 * _3805) + _3772)) + 9.9999999392252902907785028219223e-09) + (((_3804 * _3805) + _3772) * _3787))) * _3804;
                                float _4962 = isnan(0.0) ? _3815 : (isnan(_3815) ? 0.0 : max(_3815, 0.0));
                                float _3825 = (_3750 * _3727) * (((_3773 * 3.1415927410125732421875) * (isnan(1.0) ? _4962 : (isnan(_4962) ? 1.0 : min(_4962, 1.0)))) / ((_3795 * _3795) * ((_3740 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3751 * _3597.z;
                                frontier_phi_90_pred_1 = _3751 * _3597.y;
                                frontier_phi_90_pred_2 = _3751 * _3597.x;
                                frontier_phi_90_pred_3 = _3825 * _3609.z;
                                frontier_phi_90_pred_4 = _3825 * _3609.y;
                                frontier_phi_90_pred_5 = _3825 * _3609.x;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3834 = frontier_phi_90_pred;
                            _3833 = frontier_phi_90_pred_1;
                            _3832 = frontier_phi_90_pred_2;
                            _3831 = frontier_phi_90_pred_3;
                            _3830 = frontier_phi_90_pred_4;
                            _3829 = frontier_phi_90_pred_5;
                            _3539 = _3832 + _3552;
                            _3540 = _3833 + _3553;
                            _3541 = _3834 + _3554;
                            _3536 = _3829 + _3549;
                            _3537 = _3830 + _3550;
                            _3538 = _3831 + _3551;
                            if (_3556 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3549 = _3536;
                                _3550 = _3537;
                                _3551 = _3538;
                                _3552 = _3539;
                                _3553 = _3540;
                                _3554 = _3541;
                                _3555 = _3556;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3541;
                        frontier_phi_84_pred_1 = _3540;
                        frontier_phi_84_pred_2 = _3539;
                        frontier_phi_84_pred_3 = _3538;
                        frontier_phi_84_pred_4 = _3537;
                        frontier_phi_84_pred_5 = _3536;
                    }
                    _3179 = frontier_phi_84_pred;
                    _3177 = frontier_phi_84_pred_1;
                    _3175 = frontier_phi_84_pred_2;
                    _3173 = frontier_phi_84_pred_3;
                    _3171 = frontier_phi_84_pred_4;
                    _3169 = frontier_phi_84_pred_5;
                    uint _3335 = _3334 + 1u;
                    if (_3335 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3328 = _3169;
                        _3329 = _3171;
                        _3330 = _3173;
                        _3331 = _3175;
                        _3332 = _3177;
                        _3333 = _3179;
                        _3334 = _3335;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _3175;
                frontier_phi_65_66_ladder_1 = _3179;
                frontier_phi_65_66_ladder_2 = _3177;
                frontier_phi_65_66_ladder_3 = _3173;
                frontier_phi_65_66_ladder_4 = _3171;
                frontier_phi_65_66_ladder_5 = _3169;
            }
            else
            {
                frontier_phi_65_66_ladder = _3044;
                frontier_phi_65_66_ladder_1 = _3048;
                frontier_phi_65_66_ladder_2 = _3046;
                frontier_phi_65_66_ladder_3 = _3042;
                frontier_phi_65_66_ladder_4 = _3040;
                frontier_phi_65_66_ladder_5 = _3038;
            }
            _3168 = frontier_phi_65_66_ladder_5;
            _3170 = frontier_phi_65_66_ladder_4;
            _3172 = frontier_phi_65_66_ladder_3;
            _3174 = frontier_phi_65_66_ladder;
            _3176 = frontier_phi_65_66_ladder_2;
            _3178 = frontier_phi_65_66_ladder_1;
        }
        float _3183 = isnan(1.0) ? _880 : (isnan(_880) ? 1.0 : min(_880, 1.0));
        _2936 = (_3183 * _3174) + _2448;
        _2938 = (_3183 * _3176) + _2450;
        _2940 = (_3183 * _3178) + _2452;
        _2942 = ((_3168 * _865) * _3183) + _2786;
        _2944 = ((_3170 * _867) * _3183) + _2788;
        _2946 = ((_3172 * _868) * _3183) + _2790;
    }
    else
    {
        _2936 = _2448;
        _2938 = _2450;
        _2940 = _2452;
        _2942 = _2786;
        _2944 = _2788;
        _2946 = _2790;
    }
    uint _2952 = _841 + uint(cbMatDynParam._m0[0u].w);
    float _2960 = ((cbMtdParam._m0[20u].x * cbMtdParam._m0[25u].x) * _631.x) * cbInstanceData._m0[_2952].x;
    float _2963 = ((cbMtdParam._m0[20u].y * cbMtdParam._m0[25u].x) * _631.y) * cbInstanceData._m0[_2952].y;
    float _2966 = ((cbMtdParam._m0[20u].z * cbMtdParam._m0[25u].x) * _631.z) * cbInstanceData._m0[_2952].z;
    float _4978 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
    float _4989 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
    float _5000 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
    float _2983 = (((isnan(1.0) ? _4978 : (isnan(_4978) ? 1.0 : min(_4978, 1.0))) * (_2936 + ((isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0))) * _880))) + ((_2942 + ((isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0))) * _1714)) * cbPerFrame._m0[3u].x)) + _2960;
    float _2985 = (_2963 + ((_2944 + ((isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0))) * _1714)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4989 : (isnan(_4989) ? 1.0 : min(_4989, 1.0))) * (_2938 + ((isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0))) * _880)));
    float _2987 = (_2966 + ((_2946 + ((isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0))) * _1714)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5000 : (isnan(_5000) ? 1.0 : min(_5000, 1.0))) * (_2940 + ((isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0))) * _880)));
    float _2988 = isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : max(_2983, 0.0));
    float _2989 = isnan(0.0) ? _2985 : (isnan(_2985) ? 0.0 : max(_2985, 0.0));
    float _2990 = isnan(0.0) ? _2987 : (isnan(_2987) ? 0.0 : max(_2987, 0.0));
    float _2996 = cbMtdParam._m0[2u].x * _2960;
    float _2997 = cbMtdParam._m0[2u].y * _2963;
    float _2998 = cbMtdParam._m0[2u].z * _2966;
    float _5026 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _3000 = isnan(1.0) ? _5026 : (isnan(_5026) ? 1.0 : min(_5026, 1.0));
    uint _3001 = _840 + 6u;
    float _3009 = _802 / cbSceneParam._m0[86u].x;
    float _3010 = _803 / cbSceneParam._m0[86u].y;
    vec4 _3024 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3009, _3010, (log2((isnan(cbSceneParam._m0[77u].w) ? _728 : (isnan(_728) ? cbSceneParam._m0[77u].w : min(_728, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3026 = _3024.x;
    float _3027 = _3024.y;
    float _3028 = _3024.z;
    float _3029 = _3024.w;
    float _3101;
    float _3103;
    float _3105;
    float _3107;
    if (_728 > cbSceneParam._m0[78u].w)
    {
        float _3063 = isnan(_728) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _728 : min(cbSceneParam._m0[80u].w, _728));
        float _3064 = _3063 / _728;
        float _3075 = _3064 * _778;
        float _3076 = _779 * _3064;
        float _3077 = (-0.0) - _3076;
        float _3079 = _3064 * _780;
        float _3081 = (cbSceneParam._m0[77u].w * _3077) / _3063;
        float _3082 = _3081 + cbSceneParam._m0[79u].w;
        float _3083 = cbSceneParam._m0[79u].w - _3076;
        float _3089 = sqrt(((_3075 * _3075) + (_3076 * _3076)) + (_3079 * _3079));
        float _3092 = (1.0 - (cbSceneParam._m0[77u].w / _3063)) * _3089;
        float _3097 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3099 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3285;
        if (abs((_3077 - _3081) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3285 = ((((_3082 > 0.0) ? exp2(_3097 * _3082) : (2.0 - exp2(_3099 * _3082))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3092;
        }
        else
        {
            float _3229 = 1.0 / cbSceneParam._m0[80u].x;
            float _3230 = isnan(_3083) ? _3082 : (isnan(_3082) ? _3083 : max(_3082, _3083));
            float _3231 = isnan(_3083) ? _3082 : (isnan(_3082) ? _3083 : min(_3082, _3083));
            float _3240 = isnan(0.0) ? _3230 : (isnan(_3230) ? 0.0 : min(_3230, 0.0));
            float _3241 = isnan(0.0) ? _3231 : (isnan(_3231) ? 0.0 : min(_3231, 0.0));
            _3285 = ((abs(_3089 / _3077) * cbSceneParam._m0[80u].y) * ((((_3240 - _3241) * 2.0) - ((exp2(_3097 * (isnan(0.0) ? _3230 : (isnan(_3230) ? 0.0 : max(_3230, 0.0)))) - exp2(_3097 * (isnan(0.0) ? _3231 : (isnan(_3231) ? 0.0 : max(_3231, 0.0))))) * _3229)) - ((exp2(_3099 * _3240) - exp2(_3099 * _3241)) * _3229))) + (_3092 * cbSceneParam._m0[80u].z);
        }
        vec4 _3287 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3009, _3010, 1.0), 0.0);
        float _3296 = exp2((_3285 * (-1.44269502162933349609375)) * (1.0 - _3287.w));
        float _3297 = log2(_3296);
        float _3313 = log2(_3029);
        _3101 = (exp2(_3313 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3297 * cbSceneParam._m0[78u].x)) * _3287.x) / cbSceneParam._m0[78u].x)) + _3026;
        _3103 = (exp2(_3313 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3297 * cbSceneParam._m0[78u].y)) * _3287.y) / cbSceneParam._m0[78u].y)) + _3027;
        _3105 = (exp2(_3313 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3297 * cbSceneParam._m0[78u].z)) * _3287.z) / cbSceneParam._m0[78u].z)) + _3028;
        _3107 = _3296 * _3029;
    }
    else
    {
        _3101 = _3026;
        _3103 = _3027;
        _3105 = _3028;
        _3107 = _3029;
    }
    bool _3323;
    vec4 _3117;
    vec4 _3139;
    float _3141;
    float _3145;
    float _3146;
    float _3147;
    float _3150;
    float _3153;
    float _3156;
    float _3157;
    bool _3167;
    for (;;)
    {
        _3117 = cbMatDynParam._m0[0u];
        float _3119 = roundEven(_3117.y);
        bool _3120 = _3119 == 3.0;
        float _3121 = log2(_3107);
        float _3125 = exp2(_3121 * cbSceneParam._m0[78u].x);
        float _3126 = exp2(_3121 * cbSceneParam._m0[78u].y);
        float _3127 = exp2(_3121 * cbSceneParam._m0[78u].z);
        float _3128 = _3125 * _2988;
        float _3129 = _3126 * _2989;
        float _3130 = _3127 * _2990;
        float _3137 = _791 + (-0.5);
        _3139 = cbMtdParam._m0[1u];
        _3141 = _3139.y * _3137;
        float _3144 = (_3119 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3145 = _3144 * (_3120 ? _3128 : (_3128 + (cbSceneParam._m0[72u].w * _3101)));
        _3146 = _3144 * (_3120 ? _3129 : (_3129 + (cbSceneParam._m0[72u].w * _3103)));
        _3147 = _3144 * (_3120 ? _3130 : (_3130 + (cbSceneParam._m0[72u].w * _3105)));
        _3150 = ((_2996 * _3000) * _3125) * _3144;
        _3153 = ((_2997 * _3000) * _3126) * _3144;
        _3156 = ((_2998 * _3000) * _3127) * _3144;
        _3157 = _3137 * 0.999000012874603271484375;
        _3167 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3167)
        {
            if ((cbInstanceData._m0[_840 + 7u].x + _3157) < 0.5)
            {
                _3323 = true;
                break;
            }
        }
        uint _3264 = _841 + uint(_3117.w);
        if ((cbInstanceData._m0[_3264].w < 1.0) && ((cbInstanceData._m0[_3264].w + _3157) < 0.5))
        {
            _3323 = true;
            break;
        }
        if ((_3141 + 1.0) < _3139.x)
        {
            _3323 = true;
            break;
        }
        _3323 = false;
        break;
    }
    float _3527;
    if (_3323)
    {
        discard_state = true;
        _3527 = 0.0;
    }
    else
    {
        _3527 = cbInstanceData._m0[_3001].w;
    }
    SV_Target.x = _3145;
    SV_Target.y = _3146;
    SV_Target.z = _3147;
    SV_Target.w = _3527;
    SV_Target_1.x = _3150;
    SV_Target_1.y = _3153;
    SV_Target_1.z = _3156;
    SV_Target_1.w = cbInstanceData._m0[_3001].w;
    discard_exit();
}


