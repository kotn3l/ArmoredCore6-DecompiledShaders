#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[29];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 12) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_14;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_16;
layout(set = 0, binding = 4) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_17;
layout(set = 0, binding = 5) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_18;
layout(set = 0, binding = 6) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 9) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2DArray C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_0;
layout(set = 0, binding = 14) uniform texture2DArray C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1391;
float _4099;
float _4100;
float _4101;
float _4102;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _217 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _218 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _219 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _225 = inversesqrt(dot(vec3(_217, _218, _219), vec3(_217, _218, _219)));
    float _232 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _239 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _260 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_1) + cbTextureTilingScale._m0[5u].w));
    vec4 _279 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_1) + cbTextureTilingScale._m0[10u].w));
    float _292 = exp2(log2(_279.w * cbMtdParam._m0[25u].z) * cbMtdParam._m0[22u].x);
    float _293 = isnan(0.0) ? _292 : (isnan(_292) ? 0.0 : max(_292, 0.0));
    float _294 = isnan(1.0) ? _293 : (isnan(_293) ? 1.0 : min(_293, 1.0));
    vec4 _308 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _312 = _308.z;
    float _321 = exp2(log2(_312 * cbMtdParam._m0[22u].y) * cbMtdParam._m0[21u].y);
    float _322 = isnan(0.0) ? _321 : (isnan(_321) ? 0.0 : max(_321, 0.0));
    float _323 = isnan(1.0) ? _322 : (isnan(_322) ? 1.0 : min(_322, 1.0));
    float _344 = roundEven(5.0 - ((texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w)).x + (-0.02500000037252902984619140625)) * 8.0));
    float _345 = isnan(0.0) ? _344 : (isnan(_344) ? 0.0 : max(_344, 0.0));
    float _346 = isnan(4.0) ? _345 : (isnan(_345) ? 4.0 : min(_345, 4.0));
    float _359 = floor(_346);
    vec4 _362 = texture(sampler2DArray(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w, _359));
    vec4 _386 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _397 = cbMtdParam._m0[9u].x * _386.x;
    float _398 = cbMtdParam._m0[9u].y * _386.y;
    float _399 = cbMtdParam._m0[9u].z * _386.z;
    float _406 = (((cbMtdParam._m0[10u].x * _362.x) - _397) * _323) + _397;
    float _407 = (((cbMtdParam._m0[10u].y * _362.y) - _398) * _323) + _398;
    float _408 = (((cbMtdParam._m0[10u].z * _362.z) - _399) * _323) + _399;
    float _414 = exp2(log2(_308.w) * cbMtdParam._m0[22u].w);
    vec4 _427 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _447 = (((cbMtdParam._m0[16u].x * _427.x) - _406) * _414) + _406;
    float _448 = (((cbMtdParam._m0[16u].y * _427.y) - _407) * _414) + _407;
    float _449 = (((cbMtdParam._m0[16u].z * _427.z) - _408) * _414) + _408;
    vec4 _462 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _487 = (_279.x * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].x * _462.x) - _447) * _294) + _447);
    float _489 = (_279.y * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].y * _462.y) - _448) * _294) + _448);
    float _491 = (_279.z * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].z * _462.z) - _449) * _294) + _449);
    vec4 _504 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_17, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w));
    float _523 = TEXCOORD_3.x - ((cbMtdParam._m0[23u].x * (1.0 - TEXCOORD_3.x)) * (_260.x + 0.00999999977648258209228515625));
    float _525 = _523 * (cbMtdParam._m0[23u].z + 1.0);
    float _4141 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _526 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
    float _533 = (_526 * ((cbMtdParam._m0[11u].x * _504.x) - _487)) + _487;
    float _534 = (((cbMtdParam._m0[11u].y * _504.y) - _489) * _526) + _489;
    float _535 = (((cbMtdParam._m0[11u].z * _504.z) - _491) * _526) + _491;
    float _196[5];
    float _197[5];
    _196[0u] = cbMtdParam._m0[25u].w;
    _197[0u] = cbMtdParam._m0[26u].x;
    _196[1u] = cbMtdParam._m0[27u].w;
    _197[1u] = cbMtdParam._m0[28u].x;
    _196[2u] = cbMtdParam._m0[27u].y;
    _197[2u] = cbMtdParam._m0[27u].z;
    _196[3u] = cbMtdParam._m0[26u].w;
    _197[3u] = cbMtdParam._m0[27u].x;
    _196[4u] = cbMtdParam._m0[26u].y;
    _197[4u] = cbMtdParam._m0[26u].z;
    float _574 = isnan(0.0) ? _346 : (isnan(_346) ? 0.0 : max(_346, 0.0));
    uint _576 = uint(int(isnan(4.0) ? _574 : (isnan(_574) ? 4.0 : min(_574, 4.0))));
    float _583 = ((_197[_576] - cbMtdParam._m0[21u].z) * _323) + cbMtdParam._m0[21u].z;
    float _586 = ((cbMtdParam._m0[21u].w - _583) * _414) + _583;
    float _589 = ((cbMtdParam._m0[24u].y - _586) * _294) + _586;
    float _594 = (cbMtdParam._m0[23u].y + 1.0) * _523;
    float _4162 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _595 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
    float _597 = _589 - (_589 * _595);
    vec4 _611 = texture(sampler2DArray(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w, _359));
    vec4 _628 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _630 = _628.x;
    float _631 = _628.y;
    float _636 = cbMtdParam._m0[21u].x + _628.z;
    float _639 = (((_611.z + _196[_576]) - _636) * _323) + _636;
    vec4 _651 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_1) + cbTextureTilingScale._m0[11u].w));
    float _662 = (((_651.z - _639) + cbMtdParam._m0[25u].y) * _414) + _639;
    float _668 = ((((_312 * 2.0) * _662) - _662) * cbMtdParam._m0[23u].w) + _662;
    vec4 _681 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_1) + cbTextureTilingScale._m0[12u].w));
    float _692 = (((cbMtdParam._m0[22u].z + _681.z) - _668) * _294) + _668;
    vec4 _704 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _716 = ((_704.z - _692) * _595) + _692;
    vec4 _736 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _755 = ((_611.x - _630) * _323) + _630;
    float _756 = ((_611.y - _631) * _323) + _631;
    float _761 = ((_651.x - _755) * _414) + _755;
    float _762 = ((_651.y - _756) * _414) + _756;
    float _771 = ((((_681.x - _761) * _294) + _761) * 2.0) + (-1.0);
    float _772 = ((((_681.y - _762) * _294) + _762) * 2.0) + (-1.0);
    float _773 = dot(vec2(_771, _772), vec2(_771, _772));
    float _4173 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
    float _778 = sqrt(1.0 - (isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0))));
    float _787 = ((cbMtdParam._m0[24u].z * ((_308.x * 2.0) + (-1.0))) + _771) + (((((_704.x * 2.0) + (-1.0)) * TEXCOORD_3.x) * cbMtdParam._m0[24u].w) * _595);
    float _788 = ((cbMtdParam._m0[24u].z * ((_308.y * 2.0) + (-1.0))) + _772) + (((((_704.y * 2.0) + (-1.0)) * TEXCOORD_3.y) * cbMtdParam._m0[24u].w) * _595);
    float _790 = gl_FragCoord.x * 0.125;
    float _792 = gl_FragCoord.y * 0.125;
    float _802 = fma(_778, _232 * NORMAL.x, fma(_788, _239 * TANGENT.x, (_225 * _217) * _787));
    float _805 = fma(_778, _232 * NORMAL.y, fma(_788, _239 * TANGENT.y, (_225 * _218) * _787));
    float _808 = fma(_778, _232 * NORMAL.z, fma(_788, _239 * TANGENT.z, (_225 * _219) * _787));
    float _812 = inversesqrt(dot(vec3(_802, _805, _808), vec3(_802, _805, _808)));
    float _813 = _812 * _802;
    float _814 = _812 * _805;
    float _815 = _812 * _808;
    float _4184 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _816 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
    float _4195 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _4206 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _4217 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _4228 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _820 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
    if (!(cbMtdParam._m0[24u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_790, _792)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _840 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _880 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _890 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _880);
    float _891 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _880);
    float _892 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _880);
    float _896 = inversesqrt(dot(vec3(_890, _891, _892), vec3(_890, _891, _892)));
    float _897 = _890 * _896;
    float _898 = _891 * _896;
    float _899 = _892 * _896;
    vec4 _901 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_790, _792));
    float _903 = _901.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1073 = sqrt(((_890 * _890) + (_891 * _891)) + (_892 * _892));
        float _1079 = (cbMatDynParam._m0[5u].x * _1073) + cbMatDynParam._m0[5u].y;
        float _4239 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1080 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
        float _1084 = (cbMatDynParam._m0[5u].z * _1073) + cbMatDynParam._m0[5u].w;
        float _4250 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0))) - _1080)) + _1080) < ((_903 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _914 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _915 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _933 = fma(_815, cbSceneParam._m0[5u].z, fma(_814, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _813));
    float _936 = fma(_815, cbSceneParam._m0[6u].z, fma(_814, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _813));
    float _939 = fma(_815, cbSceneParam._m0[7u].z, fma(_814, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _813));
    uint _952 = uint(roundEven(NORMAL.w)) * 13u;
    uint _953 = _952 + 9u;
    uint _954 = _953 + uint(cbMatDynParam._m0[0u].w);
    float _960 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0)))) * cbInstanceData._m0[_954].x;
    float _961 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0)))) * cbInstanceData._m0[_954].y;
    float _962 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0)))) * cbInstanceData._m0[_954].z;
    float _4261 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
    float _963 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
    float _4272 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
    float _964 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
    float _4283 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
    float _965 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
    float _966 = 1.0 - _820;
    float _967 = _963 * _966;
    float _968 = _964 * _966;
    float _969 = _965 * _966;
    float _974 = (_963 + (-0.039999999105930328369140625)) * _820;
    float _975 = (_964 + (-0.039999999105930328369140625)) * _820;
    float _976 = (_965 + (-0.039999999105930328369140625)) * _820;
    float _977 = _974 + 0.039999999105930328369140625;
    float _979 = _975 + 0.039999999105930328369140625;
    float _980 = _976 + 0.039999999105930328369140625;
    vec4 _989 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _914, cbSceneParam._m0[86u].y * _915));
    float _992 = _989.x * TEXCOORD_3.w;
    float _993 = dot(vec3(_813, _814, _815), vec3(_897, _898, _899));
    float _996 = _993 * 2.0;
    float _1000 = (_996 * _813) - _897;
    float _1001 = (_996 * _814) - _898;
    float _1002 = (_996 * _815) - _899;
    float _1006 = abs(dot(vec3(_897, _898, _899), vec3(_813, _814, _815)));
    float _4294 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
    float _1008 = sqrt(_816);
    float _1019 = exp2((_1008 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1008 * 3.0));
    float _1025 = (1.0 - _1019) * ((_1008 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1026 = _1019 * _1008;
    float _1054 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1058 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1062 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1390;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1115 = fma(_1062, cbModelParam._m0[26u].z, fma(_1058, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1054));
        float _1119 = fma(_1062, cbModelParam._m0[27u].z, fma(_1058, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1054));
        float _1123 = fma(_1062, cbModelParam._m0[28u].z, fma(_1058, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1054));
        float _1148 = _1054 + _813;
        float _1149 = _1058 + _814;
        float _1150 = _1062 + _815;
        float _1160 = fma(_1150, cbModelParam._m0[26u].z, fma(_1149, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1148)) - _1115;
        float _1161 = fma(_1150, cbModelParam._m0[27u].z, fma(_1149, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1148)) - _1119;
        float _1162 = fma(_1150, cbModelParam._m0[28u].z, fma(_1149, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1148)) - _1123;
        float _1166 = inversesqrt(dot(vec3(_1160, _1161, _1162), vec3(_1160, _1161, _1162)));
        float _1179 = ((_1166 * _1160) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1115 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1180 = ((_1166 * _1161) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1119 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1181 = ((_1166 * _1162) / cbModelParam._m0[34u].z) + ((((((_1123 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1184 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1179, _1180, _1181), 0.0);
        vec4 _1191 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1179, _1180, _1181), 0.0);
        vec4 _1198 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1179, _1180, _1181), 0.0);
        vec4 _1205 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1179, _1180, _1181), 0.0);
        float _1218 = exp2((_1184.w + (-0.5)) * 20.0) * 2.0;
        float _1219 = _1218 * (_1184.x + (-0.5));
        float _1220 = _1218 * (_1184.y + (-0.5));
        float _1221 = _1218 * (_1184.z + (-0.5));
        float _1228 = exp2((_1191.w + (-0.5)) * 20.0) * 2.0;
        float _1229 = _1228 * (_1191.x + (-0.5));
        float _1230 = _1228 * (_1191.y + (-0.5));
        float _1231 = _1228 * (_1191.z + (-0.5));
        float _1238 = exp2((_1198.w + (-0.5)) * 20.0) * 2.0;
        float _1239 = _1238 * (_1198.x + (-0.5));
        float _1240 = _1238 * (_1198.y + (-0.5));
        float _1241 = _1238 * (_1198.z + (-0.5));
        float _1248 = exp2((_1205.w + (-0.5)) * 20.0) * 2.0;
        float _1249 = _1248 * (_1205.x + (-0.5));
        float _1250 = _1248 * (_1205.y + (-0.5));
        float _1251 = _1248 * (_1205.z + (-0.5));
        float _1252 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1253 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1254 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1255 = _1219 * 0.5;
        float _1256 = _1229 * 0.5;
        float _1257 = _1239 * 0.5;
        float _1258 = dot(vec3(_1255, _1256, _1257), vec3(_1255, _1256, _1257));
        float _1263 = (_1258 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1258);
        float _1272 = (dot(vec3(_813, _814, _815), vec3(_1263 * _1255, _1263 * _1256, _1263 * _1257)) + 1.0) * 0.5;
        float _4320 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1282 = sqrt(((_1256 * _1256) + (_1255 * _1255)) + (_1257 * _1257)) / (_1252 + 9.9999997473787516355514526367188e-06);
        float _4331 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1283 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
        float _1284 = _1283 * 2.0;
        float _1288 = (1.0 - _1283) / (_1283 + 1.0);
        float _4342 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1289 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
        float _1298 = ((((1.0 - _1289) * (_1284 + 2.0)) * exp2(log2(isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0))) * (_1284 + 1.0))) + _1289) * _1252;
        float _1299 = _1220 * 0.5;
        float _1300 = _1230 * 0.5;
        float _1301 = _1240 * 0.5;
        float _1302 = dot(vec3(_1299, _1300, _1301), vec3(_1299, _1300, _1301));
        float _1307 = (_1302 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1302);
        float _1315 = (dot(vec3(_813, _814, _815), vec3(_1307 * _1299, _1307 * _1300, _1307 * _1301)) + 1.0) * 0.5;
        float _4353 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1324 = sqrt(((_1300 * _1300) + (_1299 * _1299)) + (_1301 * _1301)) / (_1253 + 9.9999997473787516355514526367188e-06);
        float _4364 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1325 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
        float _1326 = _1325 * 2.0;
        float _1330 = (1.0 - _1325) / (_1325 + 1.0);
        float _4375 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1331 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
        float _1340 = ((((1.0 - _1331) * (_1326 + 2.0)) * exp2(log2(isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0))) * (_1326 + 1.0))) + _1331) * _1253;
        float _1341 = _1221 * 0.5;
        float _1342 = _1231 * 0.5;
        float _1343 = _1241 * 0.5;
        float _1344 = dot(vec3(_1341, _1342, _1343), vec3(_1341, _1342, _1343));
        float _1349 = (_1344 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1344);
        float _1357 = (dot(vec3(_813, _814, _815), vec3(_1349 * _1341, _1349 * _1342, _1349 * _1343)) + 1.0) * 0.5;
        float _4386 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1366 = sqrt(((_1342 * _1342) + (_1341 * _1341)) + (_1343 * _1343)) / (_1254 + 9.9999997473787516355514526367188e-06);
        float _4397 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1367 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
        float _1368 = _1367 * 2.0;
        float _1372 = (1.0 - _1367) / (_1367 + 1.0);
        float _4408 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1373 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
        float _1382 = ((((1.0 - _1373) * (_1368 + 2.0)) * exp2(log2(isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0))) * (_1368 + 1.0))) + _1373) * _1254;
        _1390 = _1221;
        _1392 = _1220;
        _1393 = _1219;
        _1394 = _1231;
        _1395 = _1230;
        _1396 = _1229;
        _1397 = _1241;
        _1398 = _1240;
        _1399 = _1239;
        _1400 = _1254;
        _1401 = _1253;
        _1402 = _1252;
        _1403 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0)));
        _1404 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0)));
        _1405 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0)));
    }
    else
    {
        _1390 = _1391;
        _1392 = _1391;
        _1393 = _1391;
        _1394 = _1391;
        _1395 = _1391;
        _1396 = _1391;
        _1397 = _1391;
        _1398 = _1391;
        _1399 = _1391;
        _1400 = _1391;
        _1401 = _1391;
        _1402 = _1391;
        _1403 = 0.0;
        _1404 = 0.0;
        _1405 = 0.0;
    }
    float _1700;
    float _1701;
    float _1702;
    float _1703;
    float _1704;
    float _1705;
    float _1706;
    float _1707;
    float _1708;
    float _1709;
    float _1710;
    float _1711;
    float _1712;
    float _1713;
    float _1714;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1431 = fma(_1062, cbModelParam._m0[30u].z, fma(_1058, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1054));
        float _1435 = fma(_1062, cbModelParam._m0[31u].z, fma(_1058, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1054));
        float _1439 = fma(_1062, cbModelParam._m0[32u].z, fma(_1058, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1054));
        float _1462 = _1054 + _813;
        float _1463 = _1058 + _814;
        float _1464 = _1062 + _815;
        float _1474 = fma(_1464, cbModelParam._m0[30u].z, fma(_1463, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1462)) - _1431;
        float _1475 = fma(_1464, cbModelParam._m0[31u].z, fma(_1463, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1462)) - _1435;
        float _1476 = fma(_1464, cbModelParam._m0[32u].z, fma(_1463, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1462)) - _1439;
        float _1480 = inversesqrt(dot(vec3(_1474, _1475, _1476), vec3(_1474, _1475, _1476)));
        float _1493 = ((_1480 * _1474) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1431 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1494 = ((_1480 * _1475) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1435 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1495 = ((_1480 * _1476) / cbModelParam._m0[35u].z) + ((((((_1439 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1497 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1493, _1494, _1495), 0.0);
        vec4 _1504 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1493, _1494, _1495), 0.0);
        vec4 _1511 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1493, _1494, _1495), 0.0);
        vec4 _1518 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1493, _1494, _1495), 0.0);
        float _1530 = exp2((_1497.w + (-0.5)) * 20.0) * 2.0;
        float _1531 = _1530 * (_1497.x + (-0.5));
        float _1532 = _1530 * (_1497.y + (-0.5));
        float _1533 = _1530 * (_1497.z + (-0.5));
        float _1540 = exp2((_1504.w + (-0.5)) * 20.0) * 2.0;
        float _1541 = _1540 * (_1504.x + (-0.5));
        float _1542 = _1540 * (_1504.y + (-0.5));
        float _1543 = _1540 * (_1504.z + (-0.5));
        float _1550 = exp2((_1511.w + (-0.5)) * 20.0) * 2.0;
        float _1551 = _1550 * (_1511.x + (-0.5));
        float _1552 = _1550 * (_1511.y + (-0.5));
        float _1553 = _1550 * (_1511.z + (-0.5));
        float _1560 = exp2((_1518.w + (-0.5)) * 20.0) * 2.0;
        float _1561 = _1560 * (_1518.x + (-0.5));
        float _1562 = _1560 * (_1518.y + (-0.5));
        float _1563 = _1560 * (_1518.z + (-0.5));
        float _1564 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1565 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
        float _1566 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
        float _1567 = _1531 * 0.5;
        float _1568 = _1541 * 0.5;
        float _1569 = _1551 * 0.5;
        float _1570 = dot(vec3(_1567, _1568, _1569), vec3(_1567, _1568, _1569));
        float _1575 = (_1570 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1570);
        float _1583 = (dot(vec3(_813, _814, _815), vec3(_1575 * _1567, _1575 * _1568, _1575 * _1569)) + 1.0) * 0.5;
        float _4449 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1592 = sqrt(((_1568 * _1568) + (_1567 * _1567)) + (_1569 * _1569)) / (_1564 + 9.9999997473787516355514526367188e-06);
        float _4460 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1593 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
        float _1594 = _1593 * 2.0;
        float _1598 = (1.0 - _1593) / (_1593 + 1.0);
        float _4471 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
        float _1599 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
        float _1608 = ((((1.0 - _1599) * (_1594 + 2.0)) * exp2(log2(isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0))) * (_1594 + 1.0))) + _1599) * _1564;
        float _1609 = _1532 * 0.5;
        float _1610 = _1542 * 0.5;
        float _1611 = _1552 * 0.5;
        float _1612 = dot(vec3(_1609, _1610, _1611), vec3(_1609, _1610, _1611));
        float _1617 = (_1612 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1612);
        float _1625 = (dot(vec3(_813, _814, _815), vec3(_1617 * _1609, _1617 * _1610, _1617 * _1611)) + 1.0) * 0.5;
        float _4482 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _1634 = sqrt(((_1610 * _1610) + (_1609 * _1609)) + (_1611 * _1611)) / (_1565 + 9.9999997473787516355514526367188e-06);
        float _4493 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
        float _1635 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
        float _1636 = _1635 * 2.0;
        float _1640 = (1.0 - _1635) / (_1635 + 1.0);
        float _4504 = isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0));
        float _1641 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
        float _1650 = ((((1.0 - _1641) * (_1636 + 2.0)) * exp2(log2(isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0))) * (_1636 + 1.0))) + _1641) * _1565;
        float _1651 = _1533 * 0.5;
        float _1652 = _1543 * 0.5;
        float _1653 = _1553 * 0.5;
        float _1654 = dot(vec3(_1651, _1652, _1653), vec3(_1651, _1652, _1653));
        float _1659 = (_1654 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1654);
        float _1667 = (dot(vec3(_813, _814, _815), vec3(_1659 * _1651, _1659 * _1652, _1659 * _1653)) + 1.0) * 0.5;
        float _4515 = isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0));
        float _1676 = sqrt(((_1652 * _1652) + (_1651 * _1651)) + (_1653 * _1653)) / (_1566 + 9.9999997473787516355514526367188e-06);
        float _4526 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
        float _1677 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
        float _1678 = _1677 * 2.0;
        float _1682 = (1.0 - _1677) / (_1677 + 1.0);
        float _4537 = isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0));
        float _1683 = isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0));
        float _1692 = ((((1.0 - _1683) * (_1678 + 2.0)) * exp2(log2(isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0))) * (_1678 + 1.0))) + _1683) * _1566;
        _1700 = _1533;
        _1701 = _1532;
        _1702 = _1531;
        _1703 = _1543;
        _1704 = _1542;
        _1705 = _1541;
        _1706 = _1553;
        _1707 = _1552;
        _1708 = _1551;
        _1709 = _1566;
        _1710 = _1565;
        _1711 = _1564;
        _1712 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0)));
        _1713 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0)));
        _1714 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0)));
    }
    else
    {
        _1700 = _1391;
        _1701 = _1391;
        _1702 = _1391;
        _1703 = _1391;
        _1704 = _1391;
        _1705 = _1391;
        _1706 = _1391;
        _1707 = _1391;
        _1708 = _1391;
        _1709 = _1391;
        _1710 = _1391;
        _1711 = _1391;
        _1712 = 0.0;
        _1713 = 0.0;
        _1714 = 0.0;
    }
    float _1724 = (cbModelParam._m0[1u].x * (_1712 - _1403)) + _1403;
    float _1725 = (cbModelParam._m0[1u].x * (_1713 - _1404)) + _1404;
    float _1726 = (cbModelParam._m0[1u].x * (_1714 - _1405)) + _1405;
    float _1747 = fma(_1726, cbSceneParam._m0[89u].z, fma(_1725, cbSceneParam._m0[89u].y, _1724 * cbSceneParam._m0[89u].x));
    float _1750 = fma(_1726, cbSceneParam._m0[90u].z, fma(_1725, cbSceneParam._m0[90u].y, _1724 * cbSceneParam._m0[90u].x));
    float _1753 = fma(_1726, cbSceneParam._m0[91u].z, fma(_1725, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1724));
    float _1768 = _1000 * 0.5;
    float _1769 = _1001 * 0.5;
    float _1770 = _1002 * 0.5;
    float _1771 = dot(vec4(_1768, _1769, _1770, 1.0), vec4(_1702, _1705, _1708, _1711));
    float _1774 = dot(vec4(_1768, _1769, _1770, 1.0), vec4(_1701, _1704, _1707, _1710));
    float _1777 = dot(vec4(_1768, _1769, _1770, 1.0), vec4(_1700, _1703, _1706, _1709));
    float _1811;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1784 = dot(vec4(_1768, _1769, _1770, 1.0), vec4(_1390, _1394, _1397, _1400));
        float _1788 = dot(vec4(_1768, _1769, _1770, 1.0), vec4(_1392, _1395, _1398, _1401));
        float _1792 = dot(vec4(_1768, _1769, _1770, 1.0), vec4(_1393, _1396, _1399, _1402));
        float _1799 = dot(vec4(cbModelParam._m0[39u]), vec4(_1768, _1769, _1770, 1.0));
        _1811 = dot(vec3(isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0)), isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0)), isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1799) ? 0.0 : (isnan(0.0) ? _1799 : max(0.0, _1799))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1811 = 1.0;
    }
    float _1822;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1813 = dot(vec4(cbModelParam._m0[40u]), vec4(_1768, _1769, _1770, 1.0));
        _1822 = dot(vec3(isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0)), isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0)), isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1813) ? 0.0 : (isnan(0.0) ? _1813 : max(0.0, _1813))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1822 = 1.0;
    }
    float _1826 = (_1822 * cbModelParam._m0[1u].x) + (_1811 * (1.0 - cbModelParam._m0[1u].x));
    float _1836 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _816);
    float _1837 = isnan(_1836) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1836 : min(cbModelParam._m0[25u].z, _1836));
    float _1918;
    float _1920;
    float _1922;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1885 = fma(_1062, cbModelParam._m0[13u].z, fma(_1058, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1054)) + cbModelParam._m0[13u].w;
        float _1889 = fma(_1062, cbModelParam._m0[14u].z, fma(_1058, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1054)) + cbModelParam._m0[14u].w;
        float _1893 = fma(_1062, cbModelParam._m0[15u].z, fma(_1058, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1054)) + cbModelParam._m0[15u].w;
        float _1896 = fma(_1002, cbModelParam._m0[13u].z, fma(_1001, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1000));
        float _1899 = fma(_1002, cbModelParam._m0[14u].z, fma(_1001, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1000));
        float _1902 = fma(_1002, cbModelParam._m0[15u].z, fma(_1001, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1000));
        float _1930;
        if (_1896 > 0.0)
        {
            _1930 = abs((1.0 - _1885) / _1896);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1896 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1885 + 1.0) / _1896);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1930 = frontier_phi_19_17_ladder;
        }
        float _2102;
        if (_1899 > 0.0)
        {
            _2102 = abs((1.0 - _1889) / _1899);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1899 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1889 + 1.0) / _1899);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2102 = frontier_phi_28_24_ladder;
        }
        float _2397;
        if (_1902 > 0.0)
        {
            _2397 = abs((1.0 - _1893) / _1902);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1902 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1893 + 1.0) / _1902);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2397 = frontier_phi_40_35_ladder;
        }
        float _2399 = isnan(_2102) ? _1930 : (isnan(_1930) ? _2102 : min(_1930, _2102));
        float _2400 = isnan(_2397) ? _2399 : (isnan(_2399) ? _2397 : min(_2399, _2397));
        float _2404 = (_2400 * _1896) + _1885;
        float _2405 = (_2400 * _1899) + _1889;
        float _2406 = (_2400 * _1902) + _1893;
        float _2407 = _2400 * 9.9999997473787516355514526367188e-05;
        float _2409 = (-1.0) - _2407;
        float _2411 = _2407 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2406 > _2411) || ((_2406 < _2409) || ((_2405 > _2411) || ((_2405 < _2409) || ((_2404 < _2409) || (_2404 > _2411))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2551 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2406, cbModelParam._m0[9u].z, fma(_2405, cbModelParam._m0[9u].y, _2404 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2406, cbModelParam._m0[10u].z, fma(_2405, cbModelParam._m0[10u].y, _2404 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2406, cbModelParam._m0[11u].z, fma(_2405, cbModelParam._m0[11u].y, _2404 * cbModelParam._m0[11u].x))), _1837);
            frontier_phi_18_40_ladder = _2551.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2551.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2551.x * cbModelParam._m0[1u].y;
        }
        _1918 = frontier_phi_18_40_ladder_2;
        _1920 = frontier_phi_18_40_ladder_1;
        _1922 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1906 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1000, _1001, _1002), _1837);
        _1918 = _1906.x * cbModelParam._m0[1u].y;
        _1920 = _1906.y * cbModelParam._m0[1u].y;
        _1922 = _1906.z * cbModelParam._m0[1u].y;
    }
    float _1926 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _816);
    float _1927 = isnan(_1926) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1926 : min(cbModelParam._m0[25u].w, _1926));
    float _2017;
    float _2019;
    float _2021;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1981 = fma(_1062, cbModelParam._m0[21u].z, fma(_1058, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1054)) + cbModelParam._m0[21u].w;
        float _1985 = fma(_1062, cbModelParam._m0[22u].z, fma(_1058, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1054)) + cbModelParam._m0[22u].w;
        float _1989 = fma(_1062, cbModelParam._m0[23u].z, fma(_1058, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1054)) + cbModelParam._m0[23u].w;
        float _1992 = fma(_1002, cbModelParam._m0[21u].z, fma(_1001, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1000));
        float _1995 = fma(_1002, cbModelParam._m0[22u].z, fma(_1001, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1000));
        float _1998 = fma(_1002, cbModelParam._m0[23u].z, fma(_1001, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1000));
        float _2107;
        if (_1992 > 0.0)
        {
            _2107 = abs((1.0 - _1981) / _1992);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1992 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1981 + 1.0) / _1992);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2107 = frontier_phi_30_26_ladder;
        }
        float _2424;
        if (_1995 > 0.0)
        {
            _2424 = abs((1.0 - _1985) / _1995);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1995 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1985 + 1.0) / _1995);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2424 = frontier_phi_42_37_ladder;
        }
        float _2762;
        if (_1998 > 0.0)
        {
            _2762 = abs((1.0 - _1989) / _1998);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1998 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1989 + 1.0) / _1998);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2762 = frontier_phi_52_49_ladder;
        }
        float _2764 = isnan(_2424) ? _2107 : (isnan(_2107) ? _2424 : min(_2107, _2424));
        float _2765 = isnan(_2762) ? _2764 : (isnan(_2764) ? _2762 : min(_2764, _2762));
        float _2769 = (_2765 * _1992) + _1981;
        float _2770 = (_2765 * _1995) + _1985;
        float _2771 = (_2765 * _1998) + _1989;
        float _2772 = _2765 * 9.9999997473787516355514526367188e-05;
        float _2773 = (-1.0) - _2772;
        float _2775 = _2772 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2771 > _2775) || ((_2771 < _2773) || ((_2770 > _2775) || ((_2770 < _2773) || ((_2769 < _2773) || (_2769 > _2775))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2893 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2771, cbModelParam._m0[17u].z, fma(_2770, cbModelParam._m0[17u].y, _2769 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2771, cbModelParam._m0[18u].z, fma(_2770, cbModelParam._m0[18u].y, _2769 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2771, cbModelParam._m0[19u].z, fma(_2770, cbModelParam._m0[19u].y, _2769 * cbModelParam._m0[19u].x))), _1927);
            frontier_phi_27_52_ladder = _2893.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2893.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2893.x * cbModelParam._m0[1u].z;
        }
        _2017 = frontier_phi_27_52_ladder_2;
        _2019 = frontier_phi_27_52_ladder_1;
        _2021 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _2001 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1000, _1001, _1002), _1927);
        _2017 = _2001.x * cbModelParam._m0[1u].z;
        _2019 = _2001.y * cbModelParam._m0[1u].z;
        _2021 = _2001.z * cbModelParam._m0[1u].z;
    }
    float _2034 = (((_1025 * _977) + _1026) * _992) * ((cbModelParam._m0[1u].w * (_2017 - _1918)) + _1918);
    float _2036 = (((_1025 * _979) + _1026) * _992) * ((cbModelParam._m0[1u].w * (_2019 - _1920)) + _1920);
    float _2038 = (((_1025 * _980) + _1026) * _992) * ((cbModelParam._m0[1u].w * (_2021 - _1922)) + _1922);
    float _2041 = fma(_2038, cbSceneParam._m0[89u].z, fma(_2036, cbSceneParam._m0[89u].y, _2034 * cbSceneParam._m0[89u].x));
    float _2044 = fma(_2038, cbSceneParam._m0[90u].z, fma(_2036, cbSceneParam._m0[90u].y, _2034 * cbSceneParam._m0[90u].x));
    float _2047 = fma(_2038, cbSceneParam._m0[91u].z, fma(_2036, cbSceneParam._m0[91u].y, _2034 * cbSceneParam._m0[91u].x));
    float _2081 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2085 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2089 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2093 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2094 = _2081 / _2093;
    float _2095 = _2085 / _2093;
    float _2096 = _2089 / _2093;
    float _2243;
    float _2244;
    float _2245;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2123 = ((uint(_2096 > cbSceneParam._m0[59u].y) + uint(_2096 > cbSceneParam._m0[59u].x)) + uint(_2096 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2124 = _2123 + 43u;
        uint _2132 = _2123 + 44u;
        uint _2140 = _2123 + 45u;
        uint _2148 = _2123 + 46u;
        float _2159 = fma(_2093, cbSceneParam._m0[_2124].w, fma(_2089, cbSceneParam._m0[_2124].z, fma(_2085, cbSceneParam._m0[_2124].y, _2081 * cbSceneParam._m0[_2124].x)));
        float _2163 = fma(_2093, cbSceneParam._m0[_2132].w, fma(_2089, cbSceneParam._m0[_2132].z, fma(_2085, cbSceneParam._m0[_2132].y, _2081 * cbSceneParam._m0[_2132].x)));
        float _2171 = fma(_2093, cbSceneParam._m0[_2148].w, fma(_2089, cbSceneParam._m0[_2148].z, fma(_2085, cbSceneParam._m0[_2148].y, _2081 * cbSceneParam._m0[_2148].x)));
        float _2176 = cbSceneParam._m0[33u].z * _2171;
        float _2178 = cbSceneParam._m0[33u].w * _2171;
        float _2181 = fma(_2093, cbSceneParam._m0[_2140].w, fma(_2089, cbSceneParam._m0[_2140].z, fma(_2085, cbSceneParam._m0[_2140].y, _2081 * cbSceneParam._m0[_2140].x))) / _2171;
        float _2229 = (cbSceneParam._m0[33u].x - sqrt(((_2095 * _2095) + (_2094 * _2094)) + (_2096 * _2096))) * cbSceneParam._m0[33u].y;
        float _4663 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
        float _2236 = (isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2176 + _2159) / _2171, (_2178 + _2163) / _2171), _2181), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2178 + _2159) / _2171, (_2163 - _2176) / _2171), _2181), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2159 - _2176) / _2171, (_2163 - _2178) / _2171), _2181), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2159 - _2178) / _2171, (_2176 + _2163) / _2171), _2181), 0.0)).x), vec4(0.25)));
        _2243 = 1.0 - (_2236 * cbSceneParam._m0[34u].x);
        _2244 = 1.0 - (_2236 * cbSceneParam._m0[34u].y);
        _2245 = 1.0 - (_2236 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2243 = 1.0;
        _2244 = 1.0;
        _2245 = 1.0;
    }
    float _2309;
    float _2311;
    float _2313;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2297 = fma(_2093, cbSceneParam._m0[63u].w, fma(_2089, cbSceneParam._m0[63u].z, fma(_2085, cbSceneParam._m0[63u].y, _2081 * cbSceneParam._m0[63u].x)));
        float _2298 = fma(_2093, cbSceneParam._m0[60u].w, fma(_2089, cbSceneParam._m0[60u].z, fma(_2085, cbSceneParam._m0[60u].y, _2081 * cbSceneParam._m0[60u].x))) / _2297;
        float _2299 = fma(_2093, cbSceneParam._m0[61u].w, fma(_2089, cbSceneParam._m0[61u].z, fma(_2085, cbSceneParam._m0[61u].y, _2081 * cbSceneParam._m0[61u].x))) / _2297;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2298 >= cbSceneParam._m0[64u].x) && (_2299 >= cbSceneParam._m0[64u].y)) && (_2298 <= cbSceneParam._m0[64u].z)) && (_2299 <= cbSceneParam._m0[64u].w))
        {
            float _2437 = fma(_2093, cbSceneParam._m0[62u].w, fma(_2089, cbSceneParam._m0[62u].z, fma(_2085, cbSceneParam._m0[62u].y, _2081 * cbSceneParam._m0[62u].x))) / _2297;
            float _2441 = isnan(cbSceneParam._m0[41u].w) ? _2437 : (isnan(_2437) ? cbSceneParam._m0[41u].w : max(_2437, cbSceneParam._m0[41u].w));
            float _2484 = (cbSceneParam._m0[33u].x - sqrt(((_2095 * _2095) + (_2094 * _2094)) + (_2096 * _2096))) * cbSceneParam._m0[33u].y;
            float _4679 = isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : max(_2484, 0.0));
            float _2491 = (isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2298, cbSceneParam._m0[33u].w + _2299), _2441), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2298, _2299 - cbSceneParam._m0[33u].z), _2441), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2298 - cbSceneParam._m0[33u].z, _2299 - cbSceneParam._m0[33u].w), _2441), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2298 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2299), _2441), 0.0)).x), vec4(0.25)));
            float _2495 = 1.0 - (_2491 * cbSceneParam._m0[34u].x);
            float _2496 = 1.0 - (_2491 * cbSceneParam._m0[34u].y);
            float _2497 = 1.0 - (_2491 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2497) ? _2245 : (isnan(_2245) ? _2497 : min(_2245, _2497));
            frontier_phi_39_38_ladder_1 = isnan(_2496) ? _2244 : (isnan(_2244) ? _2496 : min(_2244, _2496));
            frontier_phi_39_38_ladder_2 = isnan(_2495) ? _2243 : (isnan(_2243) ? _2495 : min(_2243, _2495));
        }
        else
        {
            frontier_phi_39_38_ladder = _2245;
            frontier_phi_39_38_ladder_1 = _2244;
            frontier_phi_39_38_ladder_2 = _2243;
        }
        _2309 = frontier_phi_39_38_ladder_2;
        _2311 = frontier_phi_39_38_ladder_1;
        _2313 = frontier_phi_39_38_ladder;
    }
    else
    {
        _2309 = _2243;
        _2311 = _2244;
        _2313 = _2245;
    }
    uvec4 _2318 = floatBitsToUint(cbInstanceData._m0[_952 + 5u]);
    uint _2320 = _2318.x * 14u;
    uint _2321 = _2320 + 13u;
    float _2328 = _992 + (-1.0);
    float _2333 = (cbLight._m0[_2321].x * _2328) + 1.0;
    float _2334 = (cbLight._m0[_2321].y * _2328) + 1.0;
    float _2335 = (cbLight._m0[_2321].z * _2328) + 1.0;
    float _2336 = (cbLight._m0[_2321].w * _2328) + 1.0;
    uint _2337 = _2320 + 5u;
    float _2343 = isnan(1.0) ? _2334 : (isnan(_2334) ? 1.0 : min(_2334, 1.0));
    uint _2347 = _2320 + 4u;
    float _2356 = isnan(1.0) ? _2333 : (isnan(_2333) ? 1.0 : min(_2333, 1.0));
    uint _2360 = _2320 | 1u;
    float _2371 = dot(vec3(cbLight._m0[_2320].xyz), vec3(_813, _814, _815));
    float _2374 = dot(vec3(cbLight._m0[_2360].xyz), vec3(_813, _814, _815));
    float _4715 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
    float _4726 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
    float _2379 = (isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0))) * 0.3183098733425140380859375;
    float _2381 = (isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0))) * 0.3183098733425140380859375;
    float _2388 = ((cbLight._m0[_2337].x * _2343) * _2381) + (((cbLight._m0[_2347].x * _2309) * _2356) * _2379);
    float _2389 = ((_2343 * cbLight._m0[_2337].y) * _2381) + (((cbLight._m0[_2347].y * _2311) * _2356) * _2379);
    float _2390 = ((_2343 * cbLight._m0[_2337].z) * _2381) + (((cbLight._m0[_2347].z * _2313) * _2356) * _2379);
    uvec4 _2394 = floatBitsToUint(cbLight._m0[_2320 + 12u]);
    bool _2396 = _2394.x == 0u;
    float _2498;
    float _2500;
    float _2502;
    if (_2396)
    {
        _2498 = _2388;
        _2500 = _2389;
        _2502 = _2390;
    }
    else
    {
        uint _2506 = _2320 + 6u;
        float _2522 = (dot(vec3(cbLight._m0[_2320 + 2u].xyz), vec3(_813, _814, _815)) * 0.5) + 0.5;
        float _2523 = _2522 * _2522;
        float _4737 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
        float _2524 = isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0));
        float _2525 = isnan(1.0) ? _2335 : (isnan(_2335) ? 1.0 : min(_2335, 1.0));
        _2498 = (((cbLight._m0[_2506].x * 0.3183098733425140380859375) * _2524) * _2525) + _2388;
        _2500 = (((cbLight._m0[_2506].y * 0.3183098733425140380859375) * _2524) * _2525) + _2389;
        _2502 = (((cbLight._m0[_2506].z * 0.3183098733425140380859375) * _2524) * _2525) + _2390;
    }
    bool _2505 = _2394.y == 0u;
    float _2560;
    float _2562;
    float _2564;
    if (_2505)
    {
        _2560 = _2498;
        _2562 = _2500;
        _2564 = _2502;
    }
    else
    {
        uint _2733 = _2320 + 7u;
        float _2749 = (dot(vec3(cbLight._m0[_2320 + 3u].xyz), vec3(_813, _814, _815)) * 0.5) + 0.5;
        float _2750 = _2749 * _2749;
        float _4753 = isnan(0.0) ? _2750 : (isnan(_2750) ? 0.0 : max(_2750, 0.0));
        float _2751 = isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0));
        float _2752 = isnan(1.0) ? _2336 : (isnan(_2336) ? 1.0 : min(_2336, 1.0));
        _2560 = (((cbLight._m0[_2733].x * 0.3183098733425140380859375) * _2751) * _2752) + _2498;
        _2562 = (((cbLight._m0[_2733].y * 0.3183098733425140380859375) * _2751) * _2752) + _2500;
        _2564 = (((cbLight._m0[_2733].z * 0.3183098733425140380859375) * _2751) * _2752) + _2502;
    }
    uint _2567 = _2320 + 8u;
    float _2580 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2320].w)) * _816) * 0.949999988079071044921875);
    float _2581 = _2580 * _2580;
    float _2582 = cbLight._m0[_2320].x + _897;
    float _2583 = cbLight._m0[_2320].y + _898;
    float _2584 = cbLight._m0[_2320].z + _899;
    float _2588 = inversesqrt(dot(vec3(_2582, _2583, _2584), vec3(_2582, _2583, _2584)));
    float _2589 = _2588 * _2582;
    float _2590 = _2588 * _2583;
    float _2591 = _2588 * _2584;
    float _2592 = dot(vec3(_813, _814, _815), vec3(cbLight._m0[_2320].xyz));
    float _4769 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
    float _2595 = isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0));
    float _4780 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
    float _2596 = isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0));
    float _2597 = dot(vec3(_813, _814, _815), vec3(_2589, _2590, _2591));
    float _4791 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0));
    float _2600 = isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0));
    float _2601 = dot(vec3(cbLight._m0[_2320].xyz), vec3(_2589, _2590, _2591));
    float _4802 = isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : max(_2601, 0.0));
    float _2605 = _2581 * _2581;
    float _2609 = ((_2600 * _2600) * (_2605 + (-1.0))) + 1.0;
    float _2617 = exp2(log2(1.0 - (isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0)))) * 5.0);
    float _2618 = 0.959999978542327880859375 - _974;
    float _2620 = 0.959999978542327880859375 - _975;
    float _2621 = 0.959999978542327880859375 - _976;
    float _2628 = 1.0 - _2581;
    float _2639 = (0.5 / (((_2596 * ((_2595 * _2628) + _2581)) + 9.9999999392252902907785028219223e-09) + (((_2596 * _2628) + _2581) * _2595))) * _2595;
    float _4813 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0));
    float _2641 = (isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0))) * (_2605 / ((_2609 * _2609) * 3.141590118408203125));
    uint _2655 = _2320 + 9u;
    float _2666 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2360].w)) * _816) * 0.949999988079071044921875);
    float _2667 = _2666 * _2666;
    float _2668 = cbLight._m0[_2360].x + _897;
    float _2669 = cbLight._m0[_2360].y + _898;
    float _2670 = cbLight._m0[_2360].z + _899;
    float _2674 = inversesqrt(dot(vec3(_2668, _2669, _2670), vec3(_2668, _2669, _2670)));
    float _2675 = _2674 * _2668;
    float _2676 = _2674 * _2669;
    float _2677 = _2674 * _2670;
    float _2678 = dot(vec3(_813, _814, _815), vec3(cbLight._m0[_2360].xyz));
    float _4824 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0));
    float _2681 = isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0));
    float _2682 = dot(vec3(_813, _814, _815), vec3(_2675, _2676, _2677));
    float _4835 = isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : max(_2682, 0.0));
    float _2685 = isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0));
    float _2686 = dot(vec3(cbLight._m0[_2360].xyz), vec3(_2675, _2676, _2677));
    float _4846 = isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0));
    float _2690 = _2667 * _2667;
    float _2694 = ((_2685 * _2685) * (_2690 + (-1.0))) + 1.0;
    float _2701 = exp2(log2(1.0 - (isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0)))) * 5.0);
    float _2708 = 1.0 - _2667;
    float _2718 = (0.5 / (((_2596 * ((_2681 * _2708) + _2667)) + 9.9999999392252902907785028219223e-09) + (((_2596 * _2708) + _2667) * _2681))) * _2681;
    float _4857 = isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0));
    float _2720 = (isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0))) * (_2690 / ((_2694 * _2694) * 3.141590118408203125));
    float _2730 = (((((_2701 * _2618) + _977) * cbLight._m0[_2655].x) * _2720) * _2343) + ((((cbLight._m0[_2567].x * _2309) * ((_2617 * _2618) + _977)) * _2641) * _2356);
    float _2731 = (((((_2701 * _2620) + _979) * cbLight._m0[_2655].y) * _2720) * _2343) + ((((cbLight._m0[_2567].y * _2311) * ((_2617 * _2620) + _979)) * _2641) * _2356);
    float _2732 = (((((_2701 * _2621) + _980) * cbLight._m0[_2655].z) * _2720) * _2343) + ((((cbLight._m0[_2567].z * _2313) * ((_2617 * _2621) + _980)) * _2641) * _2356);
    float _2788;
    float _2790;
    float _2792;
    if (_2396)
    {
        _2788 = _2730;
        _2790 = _2731;
        _2792 = _2732;
    }
    else
    {
        uint _2794 = _2320 + 2u;
        uint _2798 = _2320 + 10u;
        float _2812 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2794].w)) * _816) * 0.949999988079071044921875);
        float _2813 = _2812 * _2812;
        float _2814 = cbLight._m0[_2794].x + _897;
        float _2815 = cbLight._m0[_2794].y + _898;
        float _2816 = cbLight._m0[_2794].z + _899;
        float _2820 = inversesqrt(dot(vec3(_2814, _2815, _2816), vec3(_2814, _2815, _2816)));
        float _2821 = _2820 * _2814;
        float _2822 = _2820 * _2815;
        float _2823 = _2820 * _2816;
        float _2824 = dot(vec3(_813, _814, _815), vec3(cbLight._m0[_2794].xyz));
        float _4868 = isnan(0.0) ? _2824 : (isnan(_2824) ? 0.0 : max(_2824, 0.0));
        float _2827 = isnan(1.0) ? _4868 : (isnan(_4868) ? 1.0 : min(_4868, 1.0));
        float _2828 = dot(vec3(_813, _814, _815), vec3(_2821, _2822, _2823));
        float _4879 = isnan(0.0) ? _2828 : (isnan(_2828) ? 0.0 : max(_2828, 0.0));
        float _2831 = isnan(1.0) ? _4879 : (isnan(_4879) ? 1.0 : min(_4879, 1.0));
        float _2832 = dot(vec3(cbLight._m0[_2794].xyz), vec3(_2821, _2822, _2823));
        float _4890 = isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : max(_2832, 0.0));
        float _2836 = _2813 * _2813;
        float _2840 = ((_2831 * _2831) * (_2836 + (-1.0))) + 1.0;
        float _2847 = exp2(log2(1.0 - (isnan(1.0) ? _4890 : (isnan(_4890) ? 1.0 : min(_4890, 1.0)))) * 5.0);
        float _2854 = 1.0 - _2813;
        float _2864 = (0.5 / (((_2596 * ((_2827 * _2854) + _2813)) + 9.9999999392252902907785028219223e-09) + (((_2596 * _2854) + _2813) * _2827))) * _2827;
        float _4901 = isnan(0.0) ? _2864 : (isnan(_2864) ? 0.0 : max(_2864, 0.0));
        float _2866 = (isnan(1.0) ? _4901 : (isnan(_4901) ? 1.0 : min(_4901, 1.0))) * (_2836 / ((_2840 * _2840) * 3.141590118408203125));
        float _2867 = isnan(1.0) ? _2335 : (isnan(_2335) ? 1.0 : min(_2335, 1.0));
        _2788 = (((((_2847 * _2618) + _977) * cbLight._m0[_2798].x) * _2866) * _2867) + _2730;
        _2790 = (((((_2847 * _2620) + _979) * cbLight._m0[_2798].y) * _2866) * _2867) + _2731;
        _2792 = (((((_2847 * _2621) + _980) * cbLight._m0[_2798].z) * _2866) * _2867) + _2732;
    }
    float _2898;
    float _2900;
    float _2902;
    if (_2505)
    {
        _2898 = _2788;
        _2900 = _2790;
        _2902 = _2792;
    }
    else
    {
        uint _2909 = _2320 + 3u;
        uint _2913 = _2320 + 11u;
        float _2927 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2909].w)) * _816) * 0.949999988079071044921875);
        float _2928 = _2927 * _2927;
        float _2929 = cbLight._m0[_2909].x + _897;
        float _2930 = cbLight._m0[_2909].y + _898;
        float _2931 = cbLight._m0[_2909].z + _899;
        float _2935 = inversesqrt(dot(vec3(_2929, _2930, _2931), vec3(_2929, _2930, _2931)));
        float _2936 = _2935 * _2929;
        float _2937 = _2935 * _2930;
        float _2938 = _2935 * _2931;
        float _2939 = dot(vec3(_813, _814, _815), vec3(cbLight._m0[_2909].xyz));
        float _4917 = isnan(0.0) ? _2939 : (isnan(_2939) ? 0.0 : max(_2939, 0.0));
        float _2942 = isnan(1.0) ? _4917 : (isnan(_4917) ? 1.0 : min(_4917, 1.0));
        float _2943 = dot(vec3(_813, _814, _815), vec3(_2936, _2937, _2938));
        float _4928 = isnan(0.0) ? _2943 : (isnan(_2943) ? 0.0 : max(_2943, 0.0));
        float _2946 = isnan(1.0) ? _4928 : (isnan(_4928) ? 1.0 : min(_4928, 1.0));
        float _2947 = dot(vec3(cbLight._m0[_2909].xyz), vec3(_2936, _2937, _2938));
        float _4939 = isnan(0.0) ? _2947 : (isnan(_2947) ? 0.0 : max(_2947, 0.0));
        float _2951 = _2928 * _2928;
        float _2955 = ((_2946 * _2946) * (_2951 + (-1.0))) + 1.0;
        float _2962 = exp2(log2(1.0 - (isnan(1.0) ? _4939 : (isnan(_4939) ? 1.0 : min(_4939, 1.0)))) * 5.0);
        float _2969 = 1.0 - _2928;
        float _2979 = (0.5 / (((_2596 * ((_2942 * _2969) + _2928)) + 9.9999999392252902907785028219223e-09) + (((_2596 * _2969) + _2928) * _2942))) * _2942;
        float _4950 = isnan(0.0) ? _2979 : (isnan(_2979) ? 0.0 : max(_2979, 0.0));
        float _2981 = (isnan(1.0) ? _4950 : (isnan(_4950) ? 1.0 : min(_4950, 1.0))) * (_2951 / ((_2955 * _2955) * 3.141590118408203125));
        float _2982 = isnan(1.0) ? _2336 : (isnan(_2336) ? 1.0 : min(_2336, 1.0));
        _2898 = (((((_2962 * _2618) + _977) * cbLight._m0[_2913].x) * _2981) * _2982) + _2788;
        _2900 = (((((_2962 * _2620) + _979) * cbLight._m0[_2913].y) * _2981) * _2982) + _2790;
        _2902 = (((((_2962 * _2621) + _980) * cbLight._m0[_2913].z) * _2981) * _2982) + _2792;
    }
    float _3048;
    float _3050;
    float _3052;
    float _3054;
    float _3056;
    float _3058;
    if (_2318.y == 0u)
    {
        uvec4 _3003 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3004 = _3003.x;
        uint _3015 = uint((float(_3003.y) * floor(float(uint(cbSceneParam._m0[85u].y * _915) / _3004))) + floor(float(uint(cbSceneParam._m0[85u].x * _914) / _3004)));
        float _3025 = (log2(_2096 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3026 = isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : max(_3025, 0.0));
        uint _3029 = uint(isnan(14.0) ? _3026 : (isnan(_3026) ? 14.0 : min(_3026, 14.0)));
        uvec4 _3034 = texelFetch(g_lightClusterGridBuffer, int(((_3029 << 2u) + (_3015 << 6u)) >> 2u));
        uint _3035 = _3034.x;
        uint _3036 = _3003.z;
        float _3150;
        float _3152;
        float _3154;
        float _3156;
        float _3158;
        float _3160;
        if (((((1u << ((_3036 >> 4u) & 15u)) + 4294967295u) & _3035) == 0u) || ((_3036 & 240u) == 0u))
        {
            _3150 = 0.0;
            _3152 = 0.0;
            _3154 = 0.0;
            _3156 = 0.0;
            _3158 = 0.0;
            _3160 = 0.0;
        }
        else
        {
            float _3151;
            float _3153;
            float _3155;
            float _3157;
            float _3159;
            float _3161;
            float _3312 = 0.0;
            float _3313 = 0.0;
            float _3314 = 0.0;
            float _3315 = 0.0;
            float _3316 = 0.0;
            float _3317 = 0.0;
            uint _3318 = 0u;
            uint _3327;
            bool _3328;
            for (;;)
            {
                _3327 = texelFetch(g_lightClassification, int((((_3029 << 5u) + (_3015 << 9u)) + (_3318 << 2u)) >> 2u)).x;
                _3328 = _3327 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3328)
                {
                    frontier_phi_73_pred = _3317;
                    frontier_phi_73_pred_1 = _3316;
                    frontier_phi_73_pred_2 = _3315;
                    frontier_phi_73_pred_3 = _3314;
                    frontier_phi_73_pred_4 = _3313;
                    frontier_phi_73_pred_5 = _3312;
                }
                else
                {
                    float _3457;
                    float _3458;
                    float _3459;
                    float _3460;
                    float _3461;
                    float _3462;
                    uint _3463;
                    _3457 = _3312;
                    _3458 = _3313;
                    _3459 = _3314;
                    _3460 = _3315;
                    _3461 = _3316;
                    _3462 = _3317;
                    _3463 = _3327;
                    float _3384;
                    float _3385;
                    float _3386;
                    float _3387;
                    float _3388;
                    float _3389;
                    for (;;)
                    {
                        uint _3467 = uint(findLSB(_3463)) + (_3318 << 5u);
                        uint _3464 = (_3463 + 4294967295u) & _3463;
                        uint _3469 = _3467 * 48u;
                        vec4 _3483 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3469)).x, texelFetch(g_PointLightRenderingBuffer, int(_3469 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3469 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3469 + 3u)).x));
                        uint _3489 = (_3467 * 48u) + 4u;
                        vec4 _3502 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3489)).x, texelFetch(g_PointLightRenderingBuffer, int(_3489 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3489 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3489 + 3u)).x));
                        uint _3508 = (_3467 * 48u) + 8u;
                        vec3 _3519 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3508)).x, texelFetch(g_PointLightRenderingBuffer, int(_3508 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3508 + 2u)).x));
                        float _3523 = _3483.x - _2094;
                        float _3524 = _3483.y - _2095;
                        float _3525 = _3483.z - _2096;
                        float _3526 = dot(vec3(_3523, _3524, _3525), vec3(_3523, _3524, _3525));
                        float _3529 = inversesqrt(_3526);
                        float _3530 = _3529 * _3523;
                        float _3531 = _3529 * _3524;
                        float _3532 = _3529 * _3525;
                        float _3533 = dot(vec3(_933, _936, _939), vec3(_3530, _3531, _3532));
                        float _3538 = 1.0 - (_3526 * _3483.w);
                        float _4976 = isnan(0.0) ? _3538 : (isnan(_3538) ? 0.0 : max(_3538, 0.0));
                        float _3539 = isnan(1.0) ? _4976 : (isnan(_4976) ? 1.0 : min(_4976, 1.0));
                        float _3540 = sqrt(_3526) * _3502.w;
                        float _3543 = 1.39999997615814208984375 / (_3540 + 1.39999997615814208984375);
                        float _3544 = _3543 * _3543;
                        float _3547 = ((1.0 - _3544) * _3533) + _3544;
                        float _3550 = _3540 * _3540;
                        float _3554 = ((isnan(0.0) ? _3547 : (isnan(_3547) ? 0.0 : max(_3547, 0.0))) * _3539) / ((_3550 * 0.699999988079071044921875) + 1.0);
                        float _3558 = (-0.0) - _2094;
                        float _3559 = (-0.0) - _2095;
                        float _3560 = (-0.0) - _2096;
                        float _3564 = inversesqrt(dot(vec3(_3558, _3559, _3560), vec3(_3558, _3559, _3560)));
                        float _3565 = _3564 * _3558;
                        float _3566 = _3564 * _3559;
                        float _3567 = _3564 * _3560;
                        float _3574 = exp2(log2(1.0 / ((_3550 * 3.5) + 5.0)) * 0.25);
                        float _3575 = 1.0 - _1008;
                        float _3582 = sqrt(1.0 - ((1.0 - (_3575 * _3575)) * (1.0 - (_3574 * _3574))));
                        float _3583 = _3582 * _3582;
                        float _3584 = _3583 * _3583;
                        float _3585 = _3565 + _3530;
                        float _3586 = _3566 + _3531;
                        float _3587 = _3567 + _3532;
                        float _3591 = inversesqrt(dot(vec3(_3585, _3586, _3587), vec3(_3585, _3586, _3587)));
                        float _3595 = dot(vec3(_933, _936, _939), vec3(_3565, _3566, _3567));
                        float _4992 = isnan(0.0) ? _3595 : (isnan(_3595) ? 0.0 : max(_3595, 0.0));
                        float _3598 = isnan(1.0) ? _4992 : (isnan(_4992) ? 1.0 : min(_4992, 1.0));
                        float _3599 = dot(vec3(_933, _936, _939), vec3(_3591 * _3585, _3591 * _3586, _3591 * _3587));
                        float _5003 = isnan(0.0) ? _3599 : (isnan(_3599) ? 0.0 : max(_3599, 0.0));
                        float _3602 = isnan(1.0) ? _5003 : (isnan(_5003) ? 1.0 : min(_5003, 1.0));
                        float _3606 = ((_3602 * _3602) * (_3584 + (-1.0))) + 1.0;
                        float _3607 = _3543 * _3583;
                        float _3608 = _3607 * _3607;
                        float _3611 = ((1.0 - _3608) * _3533) + _3608;
                        float _5014 = isnan(0.0) ? _3611 : (isnan(_3611) ? 0.0 : max(_3611, 0.0));
                        float _3612 = isnan(1.0) ? _5014 : (isnan(_5014) ? 1.0 : min(_5014, 1.0));
                        float _3613 = 1.0 - _3583;
                        float _3623 = (0.5 / (((_3612 * ((_3598 * _3613) + _3583)) + 9.9999999392252902907785028219223e-09) + (((_3612 * _3613) + _3583) * _3598))) * _3612;
                        float _5025 = isnan(0.0) ? _3623 : (isnan(_3623) ? 0.0 : max(_3623, 0.0));
                        float _3634 = (((_3584 * 3.1415927410125732421875) * (isnan(1.0) ? _5025 : (isnan(_5025) ? 1.0 : min(_5025, 1.0)))) / ((_3606 * _3606) * ((_3550 * 2.1991131305694580078125) + 3.141590118408203125))) * _3539;
                        _3387 = (_3554 * _3502.x) + _3460;
                        _3388 = (_3554 * _3502.y) + _3461;
                        _3389 = (_3554 * _3502.z) + _3462;
                        _3384 = (_3634 * _3519.x) + _3457;
                        _3385 = (_3634 * _3519.y) + _3458;
                        _3386 = (_3634 * _3519.z) + _3459;
                        if (_3464 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3457 = _3384;
                            _3458 = _3385;
                            _3459 = _3386;
                            _3460 = _3387;
                            _3461 = _3388;
                            _3462 = _3389;
                            _3463 = _3464;
                        }
                    }
                    frontier_phi_73_pred = _3389;
                    frontier_phi_73_pred_1 = _3388;
                    frontier_phi_73_pred_2 = _3387;
                    frontier_phi_73_pred_3 = _3386;
                    frontier_phi_73_pred_4 = _3385;
                    frontier_phi_73_pred_5 = _3384;
                }
                _3161 = frontier_phi_73_pred;
                _3159 = frontier_phi_73_pred_1;
                _3157 = frontier_phi_73_pred_2;
                _3155 = frontier_phi_73_pred_3;
                _3153 = frontier_phi_73_pred_4;
                _3151 = frontier_phi_73_pred_5;
                uint _3319 = _3318 + 1u;
                if (_3319 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3312 = _3151;
                    _3313 = _3153;
                    _3314 = _3155;
                    _3315 = _3157;
                    _3316 = _3159;
                    _3317 = _3161;
                    _3318 = _3319;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3150 = _3151;
            _3152 = _3153;
            _3154 = _3155;
            _3156 = _3157;
            _3158 = _3159;
            _3160 = _3161;
        }
        uvec4 _3164 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3165 = _3164.z;
        uint _3167 = (_3165 >> 8u) & 15u;
        float _3280;
        float _3282;
        float _3284;
        float _3286;
        float _3288;
        float _3290;
        if (((4294967295u << _3167) & _3035) == 0u)
        {
            _3280 = _3150;
            _3282 = _3152;
            _3284 = _3154;
            _3286 = _3156;
            _3288 = _3158;
            _3290 = _3160;
        }
        else
        {
            float _3305 = inversesqrt(dot(vec3(_2094, _2095, _2096), vec3(_2094, _2095, _2096)));
            float _3306 = _3305 * _2094;
            float _3307 = _3305 * _2095;
            float _3308 = _3305 * _2096;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_3167 < ((_3165 >> 12u) & 15u))
            {
                float _3281;
                float _3283;
                float _3285;
                float _3287;
                float _3289;
                float _3291;
                float _3440 = _3150;
                float _3441 = _3152;
                float _3442 = _3154;
                float _3443 = _3156;
                float _3444 = _3158;
                float _3445 = _3160;
                uint _3446 = _3167;
                uint _3455;
                bool _3456;
                for (;;)
                {
                    _3455 = texelFetch(g_lightClassification, int((((_3029 << 5u) + (_3015 << 9u)) + (_3446 << 2u)) >> 2u)).x;
                    _3456 = _3455 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3456)
                    {
                        frontier_phi_84_pred = _3445;
                        frontier_phi_84_pred_1 = _3444;
                        frontier_phi_84_pred_2 = _3443;
                        frontier_phi_84_pred_3 = _3442;
                        frontier_phi_84_pred_4 = _3441;
                        frontier_phi_84_pred_5 = _3440;
                    }
                    else
                    {
                        float _3648;
                        float _3649;
                        float _3650;
                        float _3651;
                        float _3652;
                        float _3653;
                        float _3941;
                        float _3942;
                        float _3943;
                        float _3944;
                        float _3945;
                        float _3946;
                        float _3661 = _3440;
                        float _3662 = _3441;
                        float _3663 = _3442;
                        float _3664 = _3443;
                        float _3665 = _3444;
                        float _3666 = _3445;
                        uint _3667 = _3455;
                        uint _3668;
                        vec4 _3693;
                        float _3694;
                        vec4 _3709;
                        vec3 _3721;
                        vec4 _3736;
                        vec4 _3751;
                        float _3797;
                        bool _3798;
                        for (;;)
                        {
                            uint _3678 = ((_3446 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3667));
                            _3668 = (_3667 + 4294967295u) & _3667;
                            uint _3680 = _3678 * 40u;
                            _3693 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3680)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3680 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3680 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3680 + 3u)).x));
                            _3694 = _3693.w;
                            uint _3696 = (_3678 * 40u) + 4u;
                            _3709 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3696)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3696 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3696 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3696 + 3u)).x));
                            uint _3711 = (_3678 * 40u) + 8u;
                            _3721 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3711)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3711 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3711 + 2u)).x));
                            uint _3723 = (_3678 * 40u) + 16u;
                            _3736 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3723)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3723 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3723 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3723 + 3u)).x));
                            uint _3738 = (_3678 * 40u) + 20u;
                            _3751 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3738)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3738 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3738 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3738 + 3u)).x));
                            uint _3753 = (_3678 * 40u) + 24u;
                            vec4 _3766 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3753)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3753 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3753 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3753 + 3u)).x));
                            uint _3772 = (_3678 * 40u) + 28u;
                            vec4 _3785 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3772)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3772 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3772 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3772 + 3u)).x));
                            _3797 = fma(_2096, _3785.z, fma(_2095, _3785.y, _3785.x * _2094)) + _3785.w;
                            _3798 = !((fma(_2096, _3766.z, fma(_2095, _3766.y, _3766.x * _2094)) + _3766.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3798)
                            {
                                float _3825 = _3693.x - _2094;
                                float _3826 = _3693.y - _2095;
                                float _3827 = _3693.z - _2096;
                                float _3828 = dot(vec3(_3825, _3826, _3827), vec3(_3825, _3826, _3827));
                                float _3831 = inversesqrt(_3828);
                                float _3832 = _3831 * _3825;
                                float _3833 = _3831 * _3826;
                                float _3834 = _3831 * _3827;
                                float _3838 = 1.0 - (_3828 / (_3694 * _3694));
                                float _5036 = isnan(0.0) ? _3838 : (isnan(_3838) ? 0.0 : max(_3838, 0.0));
                                float _3839 = isnan(1.0) ? _5036 : (isnan(_5036) ? 1.0 : min(_5036, 1.0));
                                float _3843 = sqrt(_3828) * _3709.w;
                                float _3845 = 1.39999997615814208984375 / (_3843 + 1.39999997615814208984375);
                                float _3846 = _3845 * _3845;
                                float _3849 = ((1.0 - _3846) * dot(vec3(_3832, _3833, _3834), vec3(_933, _936, _939))) + _3846;
                                float _3852 = _3843 * _3843;
                                float _3856 = (fma(_2096, _3736.z, fma(_2095, _3736.y, _3736.x * _2094)) + _3736.w) / _3797;
                                float _3857 = (fma(_2096, _3751.z, fma(_2095, _3751.y, _3751.x * _2094)) + _3751.w) / _3797;
                                float _3861 = 1.0 - dot(vec2(_3856, _3857), vec2(_3856, _3857));
                                float _5052 = isnan(0.0) ? _3861 : (isnan(_3861) ? 0.0 : max(_3861, 0.0));
                                float _3862 = isnan(1.0) ? _5052 : (isnan(_5052) ? 1.0 : min(_5052, 1.0));
                                float _3863 = _3862 * (((isnan(0.0) ? _3849 : (isnan(_3849) ? 0.0 : max(_3849, 0.0))) * _3839) / ((_3852 * 0.699999988079071044921875) + 1.0));
                                float _3875 = exp2(log2(1.0 / ((_3852 * 3.5) + 5.0)) * 0.25);
                                float _3876 = 1.0 - _1008;
                                float _3883 = sqrt(1.0 - ((1.0 - (_3876 * _3876)) * (1.0 - (_3875 * _3875))));
                                float _3884 = _3883 * _3883;
                                float _3885 = _3884 * _3884;
                                float _3886 = _3832 - _3306;
                                float _3887 = _3833 - _3307;
                                float _3888 = _3834 - _3308;
                                float _3892 = inversesqrt(dot(vec3(_3886, _3887, _3888), vec3(_3886, _3887, _3888)));
                                float _3896 = dot(vec3(_933, _936, _939), vec3((-0.0) - _3306, (-0.0) - _3307, (-0.0) - _3308));
                                float _5063 = isnan(0.0) ? _3896 : (isnan(_3896) ? 0.0 : max(_3896, 0.0));
                                float _3899 = isnan(1.0) ? _5063 : (isnan(_5063) ? 1.0 : min(_5063, 1.0));
                                float _3900 = dot(vec3(_933, _936, _939), vec3(_3892 * _3886, _3892 * _3887, _3892 * _3888));
                                float _5074 = isnan(0.0) ? _3900 : (isnan(_3900) ? 0.0 : max(_3900, 0.0));
                                float _3903 = isnan(1.0) ? _5074 : (isnan(_5074) ? 1.0 : min(_5074, 1.0));
                                float _3907 = ((_3903 * _3903) * (_3885 + (-1.0))) + 1.0;
                                float _3908 = _3845 * _3884;
                                float _3909 = _3908 * _3908;
                                float _3915 = ((1.0 - _3909) * dot(vec3(_933, _936, _939), vec3(_3832, _3833, _3834))) + _3909;
                                float _5085 = isnan(0.0) ? _3915 : (isnan(_3915) ? 0.0 : max(_3915, 0.0));
                                float _3916 = isnan(1.0) ? _5085 : (isnan(_5085) ? 1.0 : min(_5085, 1.0));
                                float _3917 = 1.0 - _3884;
                                float _3927 = (0.5 / (((_3916 * ((_3899 * _3917) + _3884)) + 9.9999999392252902907785028219223e-09) + (((_3916 * _3917) + _3884) * _3899))) * _3916;
                                float _5096 = isnan(0.0) ? _3927 : (isnan(_3927) ? 0.0 : max(_3927, 0.0));
                                float _3937 = (_3862 * _3839) * (((_3885 * 3.1415927410125732421875) * (isnan(1.0) ? _5096 : (isnan(_5096) ? 1.0 : min(_5096, 1.0)))) / ((_3907 * _3907) * ((_3852 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3863 * _3709.z;
                                frontier_phi_90_pred_1 = _3863 * _3709.y;
                                frontier_phi_90_pred_2 = _3863 * _3709.x;
                                frontier_phi_90_pred_3 = _3937 * _3721.z;
                                frontier_phi_90_pred_4 = _3937 * _3721.y;
                                frontier_phi_90_pred_5 = _3937 * _3721.x;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3946 = frontier_phi_90_pred;
                            _3945 = frontier_phi_90_pred_1;
                            _3944 = frontier_phi_90_pred_2;
                            _3943 = frontier_phi_90_pred_3;
                            _3942 = frontier_phi_90_pred_4;
                            _3941 = frontier_phi_90_pred_5;
                            _3651 = _3944 + _3664;
                            _3652 = _3945 + _3665;
                            _3653 = _3946 + _3666;
                            _3648 = _3941 + _3661;
                            _3649 = _3942 + _3662;
                            _3650 = _3943 + _3663;
                            if (_3668 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3661 = _3648;
                                _3662 = _3649;
                                _3663 = _3650;
                                _3664 = _3651;
                                _3665 = _3652;
                                _3666 = _3653;
                                _3667 = _3668;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3653;
                        frontier_phi_84_pred_1 = _3652;
                        frontier_phi_84_pred_2 = _3651;
                        frontier_phi_84_pred_3 = _3650;
                        frontier_phi_84_pred_4 = _3649;
                        frontier_phi_84_pred_5 = _3648;
                    }
                    _3291 = frontier_phi_84_pred;
                    _3289 = frontier_phi_84_pred_1;
                    _3287 = frontier_phi_84_pred_2;
                    _3285 = frontier_phi_84_pred_3;
                    _3283 = frontier_phi_84_pred_4;
                    _3281 = frontier_phi_84_pred_5;
                    uint _3447 = _3446 + 1u;
                    if (_3447 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3440 = _3281;
                        _3441 = _3283;
                        _3442 = _3285;
                        _3443 = _3287;
                        _3444 = _3289;
                        _3445 = _3291;
                        _3446 = _3447;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _3287;
                frontier_phi_65_66_ladder_1 = _3291;
                frontier_phi_65_66_ladder_2 = _3289;
                frontier_phi_65_66_ladder_3 = _3285;
                frontier_phi_65_66_ladder_4 = _3283;
                frontier_phi_65_66_ladder_5 = _3281;
            }
            else
            {
                frontier_phi_65_66_ladder = _3156;
                frontier_phi_65_66_ladder_1 = _3160;
                frontier_phi_65_66_ladder_2 = _3158;
                frontier_phi_65_66_ladder_3 = _3154;
                frontier_phi_65_66_ladder_4 = _3152;
                frontier_phi_65_66_ladder_5 = _3150;
            }
            _3280 = frontier_phi_65_66_ladder_5;
            _3282 = frontier_phi_65_66_ladder_4;
            _3284 = frontier_phi_65_66_ladder_3;
            _3286 = frontier_phi_65_66_ladder;
            _3288 = frontier_phi_65_66_ladder_2;
            _3290 = frontier_phi_65_66_ladder_1;
        }
        float _3295 = isnan(1.0) ? _992 : (isnan(_992) ? 1.0 : min(_992, 1.0));
        _3048 = (_3295 * _3286) + _2560;
        _3050 = (_3295 * _3288) + _2562;
        _3052 = (_3295 * _3290) + _2564;
        _3054 = ((_3280 * _977) * _3295) + _2898;
        _3056 = ((_3282 * _979) * _3295) + _2900;
        _3058 = ((_3284 * _980) * _3295) + _2902;
    }
    else
    {
        _3048 = _2560;
        _3050 = _2562;
        _3052 = _2564;
        _3054 = _2898;
        _3056 = _2900;
        _3058 = _2902;
    }
    uint _3064 = _953 + uint(cbMatDynParam._m0[0u].w);
    float _3072 = ((cbMtdParam._m0[20u].x * cbMtdParam._m0[25u].x) * _736.x) * cbInstanceData._m0[_3064].x;
    float _3075 = ((cbMtdParam._m0[20u].y * cbMtdParam._m0[25u].x) * _736.y) * cbInstanceData._m0[_3064].y;
    float _3078 = ((cbMtdParam._m0[20u].z * cbMtdParam._m0[25u].x) * _736.z) * cbInstanceData._m0[_3064].z;
    float _5112 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
    float _5123 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
    float _5134 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
    float _3095 = (((isnan(1.0) ? _5112 : (isnan(_5112) ? 1.0 : min(_5112, 1.0))) * (_3048 + ((isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0))) * _992))) + ((_3054 + ((isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0))) * _1826)) * cbPerFrame._m0[3u].x)) + _3072;
    float _3097 = (_3075 + ((_3056 + ((isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0))) * _1826)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5123 : (isnan(_5123) ? 1.0 : min(_5123, 1.0))) * (_3050 + ((isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0))) * _992)));
    float _3099 = (_3078 + ((_3058 + ((isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0))) * _1826)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5134 : (isnan(_5134) ? 1.0 : min(_5134, 1.0))) * (_3052 + ((isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0))) * _992)));
    float _3100 = isnan(0.0) ? _3095 : (isnan(_3095) ? 0.0 : max(_3095, 0.0));
    float _3101 = isnan(0.0) ? _3097 : (isnan(_3097) ? 0.0 : max(_3097, 0.0));
    float _3102 = isnan(0.0) ? _3099 : (isnan(_3099) ? 0.0 : max(_3099, 0.0));
    float _3108 = cbMtdParam._m0[2u].x * _3072;
    float _3109 = cbMtdParam._m0[2u].y * _3075;
    float _3110 = cbMtdParam._m0[2u].z * _3078;
    float _5160 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _3112 = isnan(1.0) ? _5160 : (isnan(_5160) ? 1.0 : min(_5160, 1.0));
    uint _3113 = _952 + 6u;
    float _3121 = _914 / cbSceneParam._m0[86u].x;
    float _3122 = _915 / cbSceneParam._m0[86u].y;
    vec4 _3136 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3121, _3122, (log2((isnan(cbSceneParam._m0[77u].w) ? _840 : (isnan(_840) ? cbSceneParam._m0[77u].w : min(_840, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3138 = _3136.x;
    float _3139 = _3136.y;
    float _3140 = _3136.z;
    float _3141 = _3136.w;
    float _3213;
    float _3215;
    float _3217;
    float _3219;
    if (_840 > cbSceneParam._m0[78u].w)
    {
        float _3175 = isnan(_840) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _840 : min(cbSceneParam._m0[80u].w, _840));
        float _3176 = _3175 / _840;
        float _3187 = _3176 * _890;
        float _3188 = _891 * _3176;
        float _3189 = (-0.0) - _3188;
        float _3191 = _3176 * _892;
        float _3193 = (cbSceneParam._m0[77u].w * _3189) / _3175;
        float _3194 = _3193 + cbSceneParam._m0[79u].w;
        float _3195 = cbSceneParam._m0[79u].w - _3188;
        float _3201 = sqrt(((_3187 * _3187) + (_3188 * _3188)) + (_3191 * _3191));
        float _3204 = (1.0 - (cbSceneParam._m0[77u].w / _3175)) * _3201;
        float _3209 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3211 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3397;
        if (abs((_3189 - _3193) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3397 = ((((_3194 > 0.0) ? exp2(_3209 * _3194) : (2.0 - exp2(_3211 * _3194))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3204;
        }
        else
        {
            float _3341 = 1.0 / cbSceneParam._m0[80u].x;
            float _3342 = isnan(_3195) ? _3194 : (isnan(_3194) ? _3195 : max(_3194, _3195));
            float _3343 = isnan(_3195) ? _3194 : (isnan(_3194) ? _3195 : min(_3194, _3195));
            float _3352 = isnan(0.0) ? _3342 : (isnan(_3342) ? 0.0 : min(_3342, 0.0));
            float _3353 = isnan(0.0) ? _3343 : (isnan(_3343) ? 0.0 : min(_3343, 0.0));
            _3397 = ((abs(_3201 / _3189) * cbSceneParam._m0[80u].y) * ((((_3352 - _3353) * 2.0) - ((exp2(_3209 * (isnan(0.0) ? _3342 : (isnan(_3342) ? 0.0 : max(_3342, 0.0)))) - exp2(_3209 * (isnan(0.0) ? _3343 : (isnan(_3343) ? 0.0 : max(_3343, 0.0))))) * _3341)) - ((exp2(_3211 * _3352) - exp2(_3211 * _3353)) * _3341))) + (_3204 * cbSceneParam._m0[80u].z);
        }
        vec4 _3399 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3121, _3122, 1.0), 0.0);
        float _3408 = exp2((_3397 * (-1.44269502162933349609375)) * (1.0 - _3399.w));
        float _3409 = log2(_3408);
        float _3425 = log2(_3141);
        _3213 = (exp2(_3425 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3409 * cbSceneParam._m0[78u].x)) * _3399.x) / cbSceneParam._m0[78u].x)) + _3138;
        _3215 = (exp2(_3425 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3409 * cbSceneParam._m0[78u].y)) * _3399.y) / cbSceneParam._m0[78u].y)) + _3139;
        _3217 = (exp2(_3425 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3409 * cbSceneParam._m0[78u].z)) * _3399.z) / cbSceneParam._m0[78u].z)) + _3140;
        _3219 = _3408 * _3141;
    }
    else
    {
        _3213 = _3138;
        _3215 = _3139;
        _3217 = _3140;
        _3219 = _3141;
    }
    bool _3435;
    vec4 _3229;
    vec4 _3251;
    float _3253;
    float _3257;
    float _3258;
    float _3259;
    float _3262;
    float _3265;
    float _3268;
    float _3269;
    bool _3279;
    for (;;)
    {
        _3229 = cbMatDynParam._m0[0u];
        float _3231 = roundEven(_3229.y);
        bool _3232 = _3231 == 3.0;
        float _3233 = log2(_3219);
        float _3237 = exp2(_3233 * cbSceneParam._m0[78u].x);
        float _3238 = exp2(_3233 * cbSceneParam._m0[78u].y);
        float _3239 = exp2(_3233 * cbSceneParam._m0[78u].z);
        float _3240 = _3237 * _3100;
        float _3241 = _3238 * _3101;
        float _3242 = _3239 * _3102;
        float _3249 = _903 + (-0.5);
        _3251 = cbMtdParam._m0[1u];
        _3253 = _3251.y * _3249;
        float _3256 = (_3231 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3257 = _3256 * (_3232 ? _3240 : (_3240 + (cbSceneParam._m0[72u].w * _3213)));
        _3258 = _3256 * (_3232 ? _3241 : (_3241 + (cbSceneParam._m0[72u].w * _3215)));
        _3259 = _3256 * (_3232 ? _3242 : (_3242 + (cbSceneParam._m0[72u].w * _3217)));
        _3262 = ((_3108 * _3112) * _3237) * _3256;
        _3265 = ((_3109 * _3112) * _3238) * _3256;
        _3268 = ((_3110 * _3112) * _3239) * _3256;
        _3269 = _3249 * 0.999000012874603271484375;
        _3279 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3279)
        {
            if ((cbInstanceData._m0[_952 + 7u].x + _3269) < 0.5)
            {
                _3435 = true;
                break;
            }
        }
        uint _3376 = _953 + uint(_3229.w);
        if ((cbInstanceData._m0[_3376].w < 1.0) && ((cbInstanceData._m0[_3376].w + _3269) < 0.5))
        {
            _3435 = true;
            break;
        }
        if ((_3253 + 1.0) < _3251.x)
        {
            _3435 = true;
            break;
        }
        _3435 = false;
        break;
    }
    float _3639;
    if (_3435)
    {
        discard_state = true;
        _3639 = 0.0;
    }
    else
    {
        _3639 = cbInstanceData._m0[_3113].w;
    }
    SV_Target.x = _3257;
    SV_Target.y = _3258;
    SV_Target.z = _3259;
    SV_Target.w = _3639;
    SV_Target_1.x = _3262;
    SV_Target_1.y = _3265;
    SV_Target_1.z = _3268;
    SV_Target_1.w = cbInstanceData._m0[_3113].w;
    discard_exit();
}


