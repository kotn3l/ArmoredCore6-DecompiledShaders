#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[29];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 12) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 9) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2DArray C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_0;
layout(set = 0, binding = 14) uniform texture2DArray C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1359;
float _4065;
float _4066;
float _4067;
float _4068;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _213 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _214 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _215 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _221 = inversesqrt(dot(vec3(_213, _214, _215), vec3(_213, _214, _215)));
    float _228 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _235 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _256 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_1) + cbTextureTilingScale._m0[10u].w));
    float _270 = exp2(log2(_256.w * cbMtdParam._m0[25u].z) * cbMtdParam._m0[22u].x);
    float _271 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _272 = isnan(1.0) ? _271 : (isnan(_271) ? 1.0 : min(_271, 1.0));
    vec4 _286 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _290 = _286.z;
    float _299 = exp2(log2(_290 * cbMtdParam._m0[22u].y) * cbMtdParam._m0[21u].y);
    float _300 = isnan(0.0) ? _299 : (isnan(_299) ? 0.0 : max(_299, 0.0));
    float _301 = isnan(1.0) ? _300 : (isnan(_300) ? 1.0 : min(_300, 1.0));
    vec4 _313 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _316 = _313.y;
    float _319 = (_313.x + (-0.02500000037252902984619140625)) * 8.0;
    float _323 = roundEven(5.0 - _319);
    float _324 = isnan(0.0) ? _323 : (isnan(_323) ? 0.0 : max(_323, 0.0));
    float _325 = isnan(4.0) ? _324 : (isnan(_324) ? 4.0 : min(_324, 4.0));
    float _338 = floor(_325);
    vec4 _341 = texture(sampler2DArray(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w, _338));
    float _191[6];
    float _192[6];
    float _193[6];
    _191[0u] = cbMtdParam._m0[17u].x;
    _192[0u] = cbMtdParam._m0[17u].y;
    _193[0u] = cbMtdParam._m0[17u].z;
    _191[1u] = cbMtdParam._m0[15u].x;
    _192[1u] = cbMtdParam._m0[15u].y;
    _193[1u] = cbMtdParam._m0[15u].z;
    _191[2u] = cbMtdParam._m0[14u].x;
    _192[2u] = cbMtdParam._m0[14u].y;
    _193[2u] = cbMtdParam._m0[14u].z;
    _191[3u] = cbMtdParam._m0[13u].x;
    _192[3u] = cbMtdParam._m0[13u].y;
    _193[3u] = cbMtdParam._m0[13u].z;
    _191[4u] = cbMtdParam._m0[12u].x;
    _192[4u] = cbMtdParam._m0[12u].y;
    _193[4u] = cbMtdParam._m0[12u].z;
    _191[5u] = cbMtdParam._m0[18u].x;
    _192[5u] = cbMtdParam._m0[18u].y;
    _193[5u] = cbMtdParam._m0[18u].z;
    float _405 = roundEven(_319);
    float _406 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    uint _408 = uint(int(isnan(5.0) ? _406 : (isnan(_406) ? 5.0 : min(_406, 5.0))));
    vec4 _438 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _449 = cbMtdParam._m0[9u].x * _438.x;
    float _450 = cbMtdParam._m0[9u].y * _438.y;
    float _451 = cbMtdParam._m0[9u].z * _438.z;
    float _458 = ((((((_191[_408] - cbMtdParam._m0[10u].x) * _316) + cbMtdParam._m0[10u].x) * _341.x) - _449) * _301) + _449;
    float _459 = ((((((_192[_408] - cbMtdParam._m0[10u].y) * _316) + cbMtdParam._m0[10u].y) * _341.y) - _450) * _301) + _450;
    float _460 = ((((((_193[_408] - cbMtdParam._m0[10u].z) * _316) + cbMtdParam._m0[10u].z) * _341.z) - _451) * _301) + _451;
    float _466 = exp2(log2(_286.w) * cbMtdParam._m0[22u].w);
    vec4 _479 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _499 = (((cbMtdParam._m0[16u].x * _479.x) - _458) * _466) + _458;
    float _500 = (((cbMtdParam._m0[16u].y * _479.y) - _459) * _466) + _459;
    float _501 = (((cbMtdParam._m0[16u].z * _479.z) - _460) * _466) + _460;
    vec4 _514 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _539 = (_256.x * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].x * _514.x) - _499) * _272) + _499);
    float _541 = (_256.y * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].y * _514.y) - _500) * _272) + _500);
    float _543 = (_256.z * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].z * _514.z) - _501) * _272) + _501);
    float _186[5];
    float _187[5];
    _186[0u] = cbMtdParam._m0[25u].w;
    _187[0u] = cbMtdParam._m0[26u].x;
    _186[1u] = cbMtdParam._m0[27u].w;
    _187[1u] = cbMtdParam._m0[28u].x;
    _186[2u] = cbMtdParam._m0[27u].y;
    _187[2u] = cbMtdParam._m0[27u].z;
    _186[3u] = cbMtdParam._m0[26u].w;
    _187[3u] = cbMtdParam._m0[27u].x;
    _186[4u] = cbMtdParam._m0[26u].y;
    _187[4u] = cbMtdParam._m0[26u].z;
    float _581 = isnan(0.0) ? _325 : (isnan(_325) ? 0.0 : max(_325, 0.0));
    uint _583 = uint(int(isnan(4.0) ? _581 : (isnan(_581) ? 4.0 : min(_581, 4.0))));
    float _590 = ((_187[_583] - cbMtdParam._m0[21u].z) * _301) + cbMtdParam._m0[21u].z;
    float _593 = ((cbMtdParam._m0[21u].w - _590) * _466) + _590;
    float _596 = ((cbMtdParam._m0[24u].y - _593) * _272) + _593;
    vec4 _611 = texture(sampler2DArray(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w, _338));
    vec4 _628 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _630 = _628.x;
    float _631 = _628.y;
    float _636 = cbMtdParam._m0[21u].x + _628.z;
    float _639 = (((_611.z + _186[_583]) - _636) * _301) + _636;
    vec4 _652 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_1) + cbTextureTilingScale._m0[11u].w));
    float _663 = (((_652.z - _639) + cbMtdParam._m0[25u].y) * _466) + _639;
    float _669 = ((((_290 * 2.0) * _663) - _663) * cbMtdParam._m0[23u].w) + _663;
    vec4 _681 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_1) + cbTextureTilingScale._m0[12u].w));
    float _692 = (((cbMtdParam._m0[22u].z + _681.z) - _669) * _272) + _669;
    vec4 _711 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _728 = ((_611.x - _630) * _301) + _630;
    float _729 = ((_611.y - _631) * _301) + _631;
    float _734 = ((_652.x - _728) * _466) + _728;
    float _735 = ((_652.y - _729) * _466) + _729;
    float _744 = ((((_681.x - _734) * _272) + _734) * 2.0) + (-1.0);
    float _745 = ((((_681.y - _735) * _272) + _735) * 2.0) + (-1.0);
    float _746 = dot(vec2(_744, _745), vec2(_744, _745));
    float _4127 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
    float _751 = sqrt(1.0 - (isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0))));
    float _754 = (cbMtdParam._m0[24u].z * ((_286.x * 2.0) + (-1.0))) + _744;
    float _755 = (cbMtdParam._m0[24u].z * ((_286.y * 2.0) + (-1.0))) + _745;
    float _757 = gl_FragCoord.x * 0.125;
    float _759 = gl_FragCoord.y * 0.125;
    float _770 = fma(_751, _228 * NORMAL.x, fma(_755, _235 * TANGENT.x, (_221 * _213) * _754));
    float _773 = fma(_751, _228 * NORMAL.y, fma(_755, _235 * TANGENT.y, (_221 * _214) * _754));
    float _776 = fma(_751, _228 * NORMAL.z, fma(_755, _235 * TANGENT.z, (_221 * _215) * _754));
    float _780 = inversesqrt(dot(vec3(_770, _773, _776), vec3(_770, _773, _776)));
    float _781 = _780 * _770;
    float _782 = _780 * _773;
    float _783 = _780 * _776;
    float _4138 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    float _784 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
    float _4149 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _4160 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _4171 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _4182 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _788 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
    if (!(cbMtdParam._m0[24u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_757, _759)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _808 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _848 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _858 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _848);
    float _859 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _848);
    float _860 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _848);
    float _864 = inversesqrt(dot(vec3(_858, _859, _860), vec3(_858, _859, _860)));
    float _865 = _858 * _864;
    float _866 = _859 * _864;
    float _867 = _860 * _864;
    vec4 _869 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_757, _759));
    float _871 = _869.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1041 = sqrt(((_858 * _858) + (_859 * _859)) + (_860 * _860));
        float _1047 = (cbMatDynParam._m0[5u].x * _1041) + cbMatDynParam._m0[5u].y;
        float _4193 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1048 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
        float _1052 = (cbMatDynParam._m0[5u].z * _1041) + cbMatDynParam._m0[5u].w;
        float _4204 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0))) - _1048)) + _1048) < ((_871 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _882 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _883 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _901 = fma(_783, cbSceneParam._m0[5u].z, fma(_782, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _781));
    float _904 = fma(_783, cbSceneParam._m0[6u].z, fma(_782, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _781));
    float _907 = fma(_783, cbSceneParam._m0[7u].z, fma(_782, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _781));
    uint _920 = uint(roundEven(NORMAL.w)) * 13u;
    uint _921 = _920 + 9u;
    uint _922 = _921 + uint(cbMatDynParam._m0[0u].w);
    float _928 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0)))) * cbInstanceData._m0[_922].x;
    float _929 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0)))) * cbInstanceData._m0[_922].y;
    float _930 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0)))) * cbInstanceData._m0[_922].z;
    float _4215 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
    float _931 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
    float _4226 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
    float _932 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
    float _4237 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
    float _933 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
    float _934 = 1.0 - _788;
    float _935 = _931 * _934;
    float _936 = _932 * _934;
    float _937 = _933 * _934;
    float _942 = (_931 + (-0.039999999105930328369140625)) * _788;
    float _943 = (_932 + (-0.039999999105930328369140625)) * _788;
    float _944 = (_933 + (-0.039999999105930328369140625)) * _788;
    float _945 = _942 + 0.039999999105930328369140625;
    float _947 = _943 + 0.039999999105930328369140625;
    float _948 = _944 + 0.039999999105930328369140625;
    vec4 _957 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _882, cbSceneParam._m0[86u].y * _883));
    float _960 = _957.x * TEXCOORD_3.w;
    float _961 = dot(vec3(_781, _782, _783), vec3(_865, _866, _867));
    float _964 = _961 * 2.0;
    float _968 = (_964 * _781) - _865;
    float _969 = (_964 * _782) - _866;
    float _970 = (_964 * _783) - _867;
    float _974 = abs(dot(vec3(_865, _866, _867), vec3(_781, _782, _783)));
    float _4248 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
    float _976 = sqrt(_784);
    float _987 = exp2((_976 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_976 * 3.0));
    float _993 = (1.0 - _987) * ((_976 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _994 = _987 * _976;
    float _1022 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1026 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1030 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1358;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1083 = fma(_1030, cbModelParam._m0[26u].z, fma(_1026, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1022));
        float _1087 = fma(_1030, cbModelParam._m0[27u].z, fma(_1026, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1022));
        float _1091 = fma(_1030, cbModelParam._m0[28u].z, fma(_1026, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1022));
        float _1116 = _1022 + _781;
        float _1117 = _1026 + _782;
        float _1118 = _1030 + _783;
        float _1128 = fma(_1118, cbModelParam._m0[26u].z, fma(_1117, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1116)) - _1083;
        float _1129 = fma(_1118, cbModelParam._m0[27u].z, fma(_1117, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1116)) - _1087;
        float _1130 = fma(_1118, cbModelParam._m0[28u].z, fma(_1117, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1116)) - _1091;
        float _1134 = inversesqrt(dot(vec3(_1128, _1129, _1130), vec3(_1128, _1129, _1130)));
        float _1147 = ((_1134 * _1128) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1083 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1148 = ((_1134 * _1129) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1087 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1149 = ((_1134 * _1130) / cbModelParam._m0[34u].z) + ((((((_1091 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1152 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1147, _1148, _1149), 0.0);
        vec4 _1159 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1147, _1148, _1149), 0.0);
        vec4 _1166 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1147, _1148, _1149), 0.0);
        vec4 _1173 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1147, _1148, _1149), 0.0);
        float _1186 = exp2((_1152.w + (-0.5)) * 20.0) * 2.0;
        float _1187 = _1186 * (_1152.x + (-0.5));
        float _1188 = _1186 * (_1152.y + (-0.5));
        float _1189 = _1186 * (_1152.z + (-0.5));
        float _1196 = exp2((_1159.w + (-0.5)) * 20.0) * 2.0;
        float _1197 = _1196 * (_1159.x + (-0.5));
        float _1198 = _1196 * (_1159.y + (-0.5));
        float _1199 = _1196 * (_1159.z + (-0.5));
        float _1206 = exp2((_1166.w + (-0.5)) * 20.0) * 2.0;
        float _1207 = _1206 * (_1166.x + (-0.5));
        float _1208 = _1206 * (_1166.y + (-0.5));
        float _1209 = _1206 * (_1166.z + (-0.5));
        float _1216 = exp2((_1173.w + (-0.5)) * 20.0) * 2.0;
        float _1217 = _1216 * (_1173.x + (-0.5));
        float _1218 = _1216 * (_1173.y + (-0.5));
        float _1219 = _1216 * (_1173.z + (-0.5));
        float _1220 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1221 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1222 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1223 = _1187 * 0.5;
        float _1224 = _1197 * 0.5;
        float _1225 = _1207 * 0.5;
        float _1226 = dot(vec3(_1223, _1224, _1225), vec3(_1223, _1224, _1225));
        float _1231 = (_1226 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1226);
        float _1240 = (dot(vec3(_781, _782, _783), vec3(_1231 * _1223, _1231 * _1224, _1231 * _1225)) + 1.0) * 0.5;
        float _4274 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1250 = sqrt(((_1224 * _1224) + (_1223 * _1223)) + (_1225 * _1225)) / (_1220 + 9.9999997473787516355514526367188e-06);
        float _4285 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1251 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
        float _1252 = _1251 * 2.0;
        float _1256 = (1.0 - _1251) / (_1251 + 1.0);
        float _4296 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1257 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
        float _1266 = ((((1.0 - _1257) * (_1252 + 2.0)) * exp2(log2(isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0))) * (_1252 + 1.0))) + _1257) * _1220;
        float _1267 = _1188 * 0.5;
        float _1268 = _1198 * 0.5;
        float _1269 = _1208 * 0.5;
        float _1270 = dot(vec3(_1267, _1268, _1269), vec3(_1267, _1268, _1269));
        float _1275 = (_1270 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1270);
        float _1283 = (dot(vec3(_781, _782, _783), vec3(_1275 * _1267, _1275 * _1268, _1275 * _1269)) + 1.0) * 0.5;
        float _4307 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1292 = sqrt(((_1268 * _1268) + (_1267 * _1267)) + (_1269 * _1269)) / (_1221 + 9.9999997473787516355514526367188e-06);
        float _4318 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1293 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
        float _1294 = _1293 * 2.0;
        float _1298 = (1.0 - _1293) / (_1293 + 1.0);
        float _4329 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1299 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
        float _1308 = ((((1.0 - _1299) * (_1294 + 2.0)) * exp2(log2(isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0))) * (_1294 + 1.0))) + _1299) * _1221;
        float _1309 = _1189 * 0.5;
        float _1310 = _1199 * 0.5;
        float _1311 = _1209 * 0.5;
        float _1312 = dot(vec3(_1309, _1310, _1311), vec3(_1309, _1310, _1311));
        float _1317 = (_1312 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1312);
        float _1325 = (dot(vec3(_781, _782, _783), vec3(_1317 * _1309, _1317 * _1310, _1317 * _1311)) + 1.0) * 0.5;
        float _4340 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1334 = sqrt(((_1310 * _1310) + (_1309 * _1309)) + (_1311 * _1311)) / (_1222 + 9.9999997473787516355514526367188e-06);
        float _4351 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1335 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
        float _1336 = _1335 * 2.0;
        float _1340 = (1.0 - _1335) / (_1335 + 1.0);
        float _4362 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1341 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
        float _1350 = ((((1.0 - _1341) * (_1336 + 2.0)) * exp2(log2(isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0))) * (_1336 + 1.0))) + _1341) * _1222;
        _1358 = _1189;
        _1360 = _1188;
        _1361 = _1187;
        _1362 = _1199;
        _1363 = _1198;
        _1364 = _1197;
        _1365 = _1209;
        _1366 = _1208;
        _1367 = _1207;
        _1368 = _1222;
        _1369 = _1221;
        _1370 = _1220;
        _1371 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0)));
        _1372 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0)));
        _1373 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0)));
    }
    else
    {
        _1358 = _1359;
        _1360 = _1359;
        _1361 = _1359;
        _1362 = _1359;
        _1363 = _1359;
        _1364 = _1359;
        _1365 = _1359;
        _1366 = _1359;
        _1367 = _1359;
        _1368 = _1359;
        _1369 = _1359;
        _1370 = _1359;
        _1371 = 0.0;
        _1372 = 0.0;
        _1373 = 0.0;
    }
    float _1668;
    float _1669;
    float _1670;
    float _1671;
    float _1672;
    float _1673;
    float _1674;
    float _1675;
    float _1676;
    float _1677;
    float _1678;
    float _1679;
    float _1680;
    float _1681;
    float _1682;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1399 = fma(_1030, cbModelParam._m0[30u].z, fma(_1026, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1022));
        float _1403 = fma(_1030, cbModelParam._m0[31u].z, fma(_1026, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1022));
        float _1407 = fma(_1030, cbModelParam._m0[32u].z, fma(_1026, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1022));
        float _1430 = _1022 + _781;
        float _1431 = _1026 + _782;
        float _1432 = _1030 + _783;
        float _1442 = fma(_1432, cbModelParam._m0[30u].z, fma(_1431, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1430)) - _1399;
        float _1443 = fma(_1432, cbModelParam._m0[31u].z, fma(_1431, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1430)) - _1403;
        float _1444 = fma(_1432, cbModelParam._m0[32u].z, fma(_1431, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1430)) - _1407;
        float _1448 = inversesqrt(dot(vec3(_1442, _1443, _1444), vec3(_1442, _1443, _1444)));
        float _1461 = ((_1448 * _1442) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1399 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1462 = ((_1448 * _1443) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1403 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1463 = ((_1448 * _1444) / cbModelParam._m0[35u].z) + ((((((_1407 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1465 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1461, _1462, _1463), 0.0);
        vec4 _1472 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1461, _1462, _1463), 0.0);
        vec4 _1479 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1461, _1462, _1463), 0.0);
        vec4 _1486 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1461, _1462, _1463), 0.0);
        float _1498 = exp2((_1465.w + (-0.5)) * 20.0) * 2.0;
        float _1499 = _1498 * (_1465.x + (-0.5));
        float _1500 = _1498 * (_1465.y + (-0.5));
        float _1501 = _1498 * (_1465.z + (-0.5));
        float _1508 = exp2((_1472.w + (-0.5)) * 20.0) * 2.0;
        float _1509 = _1508 * (_1472.x + (-0.5));
        float _1510 = _1508 * (_1472.y + (-0.5));
        float _1511 = _1508 * (_1472.z + (-0.5));
        float _1518 = exp2((_1479.w + (-0.5)) * 20.0) * 2.0;
        float _1519 = _1518 * (_1479.x + (-0.5));
        float _1520 = _1518 * (_1479.y + (-0.5));
        float _1521 = _1518 * (_1479.z + (-0.5));
        float _1528 = exp2((_1486.w + (-0.5)) * 20.0) * 2.0;
        float _1529 = _1528 * (_1486.x + (-0.5));
        float _1530 = _1528 * (_1486.y + (-0.5));
        float _1531 = _1528 * (_1486.z + (-0.5));
        float _1532 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1533 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
        float _1534 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1535 = _1499 * 0.5;
        float _1536 = _1509 * 0.5;
        float _1537 = _1519 * 0.5;
        float _1538 = dot(vec3(_1535, _1536, _1537), vec3(_1535, _1536, _1537));
        float _1543 = (_1538 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1538);
        float _1551 = (dot(vec3(_781, _782, _783), vec3(_1543 * _1535, _1543 * _1536, _1543 * _1537)) + 1.0) * 0.5;
        float _4403 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1560 = sqrt(((_1536 * _1536) + (_1535 * _1535)) + (_1537 * _1537)) / (_1532 + 9.9999997473787516355514526367188e-06);
        float _4414 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
        float _1561 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
        float _1562 = _1561 * 2.0;
        float _1566 = (1.0 - _1561) / (_1561 + 1.0);
        float _4425 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1567 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
        float _1576 = ((((1.0 - _1567) * (_1562 + 2.0)) * exp2(log2(isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0))) * (_1562 + 1.0))) + _1567) * _1532;
        float _1577 = _1500 * 0.5;
        float _1578 = _1510 * 0.5;
        float _1579 = _1520 * 0.5;
        float _1580 = dot(vec3(_1577, _1578, _1579), vec3(_1577, _1578, _1579));
        float _1585 = (_1580 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1580);
        float _1593 = (dot(vec3(_781, _782, _783), vec3(_1585 * _1577, _1585 * _1578, _1585 * _1579)) + 1.0) * 0.5;
        float _4436 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
        float _1602 = sqrt(((_1578 * _1578) + (_1577 * _1577)) + (_1579 * _1579)) / (_1533 + 9.9999997473787516355514526367188e-06);
        float _4447 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
        float _1603 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
        float _1604 = _1603 * 2.0;
        float _1608 = (1.0 - _1603) / (_1603 + 1.0);
        float _4458 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
        float _1609 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
        float _1618 = ((((1.0 - _1609) * (_1604 + 2.0)) * exp2(log2(isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0))) * (_1604 + 1.0))) + _1609) * _1533;
        float _1619 = _1501 * 0.5;
        float _1620 = _1511 * 0.5;
        float _1621 = _1521 * 0.5;
        float _1622 = dot(vec3(_1619, _1620, _1621), vec3(_1619, _1620, _1621));
        float _1627 = (_1622 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1622);
        float _1635 = (dot(vec3(_781, _782, _783), vec3(_1627 * _1619, _1627 * _1620, _1627 * _1621)) + 1.0) * 0.5;
        float _4469 = isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0));
        float _1644 = sqrt(((_1620 * _1620) + (_1619 * _1619)) + (_1621 * _1621)) / (_1534 + 9.9999997473787516355514526367188e-06);
        float _4480 = isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0));
        float _1645 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
        float _1646 = _1645 * 2.0;
        float _1650 = (1.0 - _1645) / (_1645 + 1.0);
        float _4491 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
        float _1651 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
        float _1660 = ((((1.0 - _1651) * (_1646 + 2.0)) * exp2(log2(isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0))) * (_1646 + 1.0))) + _1651) * _1534;
        _1668 = _1501;
        _1669 = _1500;
        _1670 = _1499;
        _1671 = _1511;
        _1672 = _1510;
        _1673 = _1509;
        _1674 = _1521;
        _1675 = _1520;
        _1676 = _1519;
        _1677 = _1534;
        _1678 = _1533;
        _1679 = _1532;
        _1680 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0)));
        _1681 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0)));
        _1682 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0)));
    }
    else
    {
        _1668 = _1359;
        _1669 = _1359;
        _1670 = _1359;
        _1671 = _1359;
        _1672 = _1359;
        _1673 = _1359;
        _1674 = _1359;
        _1675 = _1359;
        _1676 = _1359;
        _1677 = _1359;
        _1678 = _1359;
        _1679 = _1359;
        _1680 = 0.0;
        _1681 = 0.0;
        _1682 = 0.0;
    }
    float _1692 = (cbModelParam._m0[1u].x * (_1680 - _1371)) + _1371;
    float _1693 = (cbModelParam._m0[1u].x * (_1681 - _1372)) + _1372;
    float _1694 = (cbModelParam._m0[1u].x * (_1682 - _1373)) + _1373;
    float _1715 = fma(_1694, cbSceneParam._m0[89u].z, fma(_1693, cbSceneParam._m0[89u].y, _1692 * cbSceneParam._m0[89u].x));
    float _1718 = fma(_1694, cbSceneParam._m0[90u].z, fma(_1693, cbSceneParam._m0[90u].y, _1692 * cbSceneParam._m0[90u].x));
    float _1721 = fma(_1694, cbSceneParam._m0[91u].z, fma(_1693, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1692));
    float _1736 = _968 * 0.5;
    float _1737 = _969 * 0.5;
    float _1738 = _970 * 0.5;
    float _1739 = dot(vec4(_1736, _1737, _1738, 1.0), vec4(_1670, _1673, _1676, _1679));
    float _1742 = dot(vec4(_1736, _1737, _1738, 1.0), vec4(_1669, _1672, _1675, _1678));
    float _1745 = dot(vec4(_1736, _1737, _1738, 1.0), vec4(_1668, _1671, _1674, _1677));
    float _1779;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1752 = dot(vec4(_1736, _1737, _1738, 1.0), vec4(_1358, _1362, _1365, _1368));
        float _1756 = dot(vec4(_1736, _1737, _1738, 1.0), vec4(_1360, _1363, _1366, _1369));
        float _1760 = dot(vec4(_1736, _1737, _1738, 1.0), vec4(_1361, _1364, _1367, _1370));
        float _1767 = dot(vec4(cbModelParam._m0[39u]), vec4(_1736, _1737, _1738, 1.0));
        _1779 = dot(vec3(isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0)), isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0)), isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1767) ? 0.0 : (isnan(0.0) ? _1767 : max(0.0, _1767))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1779 = 1.0;
    }
    float _1790;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1781 = dot(vec4(cbModelParam._m0[40u]), vec4(_1736, _1737, _1738, 1.0));
        _1790 = dot(vec3(isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0)), isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0)), isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1781) ? 0.0 : (isnan(0.0) ? _1781 : max(0.0, _1781))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1790 = 1.0;
    }
    float _1794 = (_1790 * cbModelParam._m0[1u].x) + (_1779 * (1.0 - cbModelParam._m0[1u].x));
    float _1804 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _784);
    float _1805 = isnan(_1804) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1804 : min(cbModelParam._m0[25u].z, _1804));
    float _1885;
    float _1887;
    float _1889;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1852 = fma(_1030, cbModelParam._m0[13u].z, fma(_1026, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1022)) + cbModelParam._m0[13u].w;
        float _1856 = fma(_1030, cbModelParam._m0[14u].z, fma(_1026, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1022)) + cbModelParam._m0[14u].w;
        float _1860 = fma(_1030, cbModelParam._m0[15u].z, fma(_1026, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1022)) + cbModelParam._m0[15u].w;
        float _1863 = fma(_970, cbModelParam._m0[13u].z, fma(_969, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _968));
        float _1866 = fma(_970, cbModelParam._m0[14u].z, fma(_969, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _968));
        float _1869 = fma(_970, cbModelParam._m0[15u].z, fma(_969, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _968));
        float _1897;
        if (_1863 > 0.0)
        {
            _1897 = abs((1.0 - _1852) / _1863);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1863 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1852 + 1.0) / _1863);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1897 = frontier_phi_19_17_ladder;
        }
        float _2068;
        if (_1866 > 0.0)
        {
            _2068 = abs((1.0 - _1856) / _1866);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1866 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1856 + 1.0) / _1866);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2068 = frontier_phi_28_24_ladder;
        }
        float _2363;
        if (_1869 > 0.0)
        {
            _2363 = abs((1.0 - _1860) / _1869);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1869 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1860 + 1.0) / _1869);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2363 = frontier_phi_40_35_ladder;
        }
        float _2365 = isnan(_2068) ? _1897 : (isnan(_1897) ? _2068 : min(_1897, _2068));
        float _2366 = isnan(_2363) ? _2365 : (isnan(_2365) ? _2363 : min(_2365, _2363));
        float _2370 = (_2366 * _1863) + _1852;
        float _2371 = (_2366 * _1866) + _1856;
        float _2372 = (_2366 * _1869) + _1860;
        float _2373 = _2366 * 9.9999997473787516355514526367188e-05;
        float _2375 = (-1.0) - _2373;
        float _2377 = _2373 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2372 > _2377) || ((_2372 < _2375) || ((_2371 > _2377) || ((_2371 < _2375) || ((_2370 < _2375) || (_2370 > _2377))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2517 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2372, cbModelParam._m0[9u].z, fma(_2371, cbModelParam._m0[9u].y, _2370 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2372, cbModelParam._m0[10u].z, fma(_2371, cbModelParam._m0[10u].y, _2370 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2372, cbModelParam._m0[11u].z, fma(_2371, cbModelParam._m0[11u].y, _2370 * cbModelParam._m0[11u].x))), _1805);
            frontier_phi_18_40_ladder = _2517.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2517.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2517.x * cbModelParam._m0[1u].y;
        }
        _1885 = frontier_phi_18_40_ladder_2;
        _1887 = frontier_phi_18_40_ladder_1;
        _1889 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1873 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_968, _969, _970), _1805);
        _1885 = _1873.x * cbModelParam._m0[1u].y;
        _1887 = _1873.y * cbModelParam._m0[1u].y;
        _1889 = _1873.z * cbModelParam._m0[1u].y;
    }
    float _1893 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _784);
    float _1894 = isnan(_1893) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1893 : min(cbModelParam._m0[25u].w, _1893));
    float _1983;
    float _1985;
    float _1987;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1947 = fma(_1030, cbModelParam._m0[21u].z, fma(_1026, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1022)) + cbModelParam._m0[21u].w;
        float _1951 = fma(_1030, cbModelParam._m0[22u].z, fma(_1026, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1022)) + cbModelParam._m0[22u].w;
        float _1955 = fma(_1030, cbModelParam._m0[23u].z, fma(_1026, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1022)) + cbModelParam._m0[23u].w;
        float _1958 = fma(_970, cbModelParam._m0[21u].z, fma(_969, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _968));
        float _1961 = fma(_970, cbModelParam._m0[22u].z, fma(_969, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _968));
        float _1964 = fma(_970, cbModelParam._m0[23u].z, fma(_969, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _968));
        float _2073;
        if (_1958 > 0.0)
        {
            _2073 = abs((1.0 - _1947) / _1958);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1958 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1947 + 1.0) / _1958);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2073 = frontier_phi_30_26_ladder;
        }
        float _2390;
        if (_1961 > 0.0)
        {
            _2390 = abs((1.0 - _1951) / _1961);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1961 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1951 + 1.0) / _1961);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2390 = frontier_phi_42_37_ladder;
        }
        float _2728;
        if (_1964 > 0.0)
        {
            _2728 = abs((1.0 - _1955) / _1964);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1964 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1955 + 1.0) / _1964);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2728 = frontier_phi_52_49_ladder;
        }
        float _2730 = isnan(_2390) ? _2073 : (isnan(_2073) ? _2390 : min(_2073, _2390));
        float _2731 = isnan(_2728) ? _2730 : (isnan(_2730) ? _2728 : min(_2730, _2728));
        float _2735 = (_2731 * _1958) + _1947;
        float _2736 = (_2731 * _1961) + _1951;
        float _2737 = (_2731 * _1964) + _1955;
        float _2738 = _2731 * 9.9999997473787516355514526367188e-05;
        float _2739 = (-1.0) - _2738;
        float _2741 = _2738 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2737 > _2741) || ((_2737 < _2739) || ((_2736 > _2741) || ((_2736 < _2739) || ((_2735 < _2739) || (_2735 > _2741))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2859 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2737, cbModelParam._m0[17u].z, fma(_2736, cbModelParam._m0[17u].y, _2735 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2737, cbModelParam._m0[18u].z, fma(_2736, cbModelParam._m0[18u].y, _2735 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2737, cbModelParam._m0[19u].z, fma(_2736, cbModelParam._m0[19u].y, _2735 * cbModelParam._m0[19u].x))), _1894);
            frontier_phi_27_52_ladder = _2859.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2859.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2859.x * cbModelParam._m0[1u].z;
        }
        _1983 = frontier_phi_27_52_ladder_2;
        _1985 = frontier_phi_27_52_ladder_1;
        _1987 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1967 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_968, _969, _970), _1894);
        _1983 = _1967.x * cbModelParam._m0[1u].z;
        _1985 = _1967.y * cbModelParam._m0[1u].z;
        _1987 = _1967.z * cbModelParam._m0[1u].z;
    }
    float _2000 = (((_993 * _945) + _994) * _960) * ((cbModelParam._m0[1u].w * (_1983 - _1885)) + _1885);
    float _2002 = (((_993 * _947) + _994) * _960) * ((cbModelParam._m0[1u].w * (_1985 - _1887)) + _1887);
    float _2004 = (((_993 * _948) + _994) * _960) * ((cbModelParam._m0[1u].w * (_1987 - _1889)) + _1889);
    float _2007 = fma(_2004, cbSceneParam._m0[89u].z, fma(_2002, cbSceneParam._m0[89u].y, _2000 * cbSceneParam._m0[89u].x));
    float _2010 = fma(_2004, cbSceneParam._m0[90u].z, fma(_2002, cbSceneParam._m0[90u].y, _2000 * cbSceneParam._m0[90u].x));
    float _2013 = fma(_2004, cbSceneParam._m0[91u].z, fma(_2002, cbSceneParam._m0[91u].y, _2000 * cbSceneParam._m0[91u].x));
    float _2047 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2051 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2055 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2059 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2060 = _2047 / _2059;
    float _2061 = _2051 / _2059;
    float _2062 = _2055 / _2059;
    float _2209;
    float _2210;
    float _2211;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2089 = ((uint(_2062 > cbSceneParam._m0[59u].y) + uint(_2062 > cbSceneParam._m0[59u].x)) + uint(_2062 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2090 = _2089 + 43u;
        uint _2098 = _2089 + 44u;
        uint _2106 = _2089 + 45u;
        uint _2114 = _2089 + 46u;
        float _2125 = fma(_2059, cbSceneParam._m0[_2090].w, fma(_2055, cbSceneParam._m0[_2090].z, fma(_2051, cbSceneParam._m0[_2090].y, _2047 * cbSceneParam._m0[_2090].x)));
        float _2129 = fma(_2059, cbSceneParam._m0[_2098].w, fma(_2055, cbSceneParam._m0[_2098].z, fma(_2051, cbSceneParam._m0[_2098].y, _2047 * cbSceneParam._m0[_2098].x)));
        float _2137 = fma(_2059, cbSceneParam._m0[_2114].w, fma(_2055, cbSceneParam._m0[_2114].z, fma(_2051, cbSceneParam._m0[_2114].y, _2047 * cbSceneParam._m0[_2114].x)));
        float _2142 = cbSceneParam._m0[33u].z * _2137;
        float _2144 = cbSceneParam._m0[33u].w * _2137;
        float _2147 = fma(_2059, cbSceneParam._m0[_2106].w, fma(_2055, cbSceneParam._m0[_2106].z, fma(_2051, cbSceneParam._m0[_2106].y, _2047 * cbSceneParam._m0[_2106].x))) / _2137;
        float _2195 = (cbSceneParam._m0[33u].x - sqrt(((_2061 * _2061) + (_2060 * _2060)) + (_2062 * _2062))) * cbSceneParam._m0[33u].y;
        float _4617 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
        float _2202 = (isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2142 + _2125) / _2137, (_2144 + _2129) / _2137), _2147), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2144 + _2125) / _2137, (_2129 - _2142) / _2137), _2147), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2125 - _2142) / _2137, (_2129 - _2144) / _2137), _2147), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2125 - _2144) / _2137, (_2142 + _2129) / _2137), _2147), 0.0)).x), vec4(0.25)));
        _2209 = 1.0 - (_2202 * cbSceneParam._m0[34u].x);
        _2210 = 1.0 - (_2202 * cbSceneParam._m0[34u].y);
        _2211 = 1.0 - (_2202 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2209 = 1.0;
        _2210 = 1.0;
        _2211 = 1.0;
    }
    float _2275;
    float _2277;
    float _2279;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2263 = fma(_2059, cbSceneParam._m0[63u].w, fma(_2055, cbSceneParam._m0[63u].z, fma(_2051, cbSceneParam._m0[63u].y, _2047 * cbSceneParam._m0[63u].x)));
        float _2264 = fma(_2059, cbSceneParam._m0[60u].w, fma(_2055, cbSceneParam._m0[60u].z, fma(_2051, cbSceneParam._m0[60u].y, _2047 * cbSceneParam._m0[60u].x))) / _2263;
        float _2265 = fma(_2059, cbSceneParam._m0[61u].w, fma(_2055, cbSceneParam._m0[61u].z, fma(_2051, cbSceneParam._m0[61u].y, _2047 * cbSceneParam._m0[61u].x))) / _2263;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2264 >= cbSceneParam._m0[64u].x) && (_2265 >= cbSceneParam._m0[64u].y)) && (_2264 <= cbSceneParam._m0[64u].z)) && (_2265 <= cbSceneParam._m0[64u].w))
        {
            float _2403 = fma(_2059, cbSceneParam._m0[62u].w, fma(_2055, cbSceneParam._m0[62u].z, fma(_2051, cbSceneParam._m0[62u].y, _2047 * cbSceneParam._m0[62u].x))) / _2263;
            float _2407 = isnan(cbSceneParam._m0[41u].w) ? _2403 : (isnan(_2403) ? cbSceneParam._m0[41u].w : max(_2403, cbSceneParam._m0[41u].w));
            float _2450 = (cbSceneParam._m0[33u].x - sqrt(((_2061 * _2061) + (_2060 * _2060)) + (_2062 * _2062))) * cbSceneParam._m0[33u].y;
            float _4633 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
            float _2457 = (isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2264, cbSceneParam._m0[33u].w + _2265), _2407), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2264, _2265 - cbSceneParam._m0[33u].z), _2407), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2264 - cbSceneParam._m0[33u].z, _2265 - cbSceneParam._m0[33u].w), _2407), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2264 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2265), _2407), 0.0)).x), vec4(0.25)));
            float _2461 = 1.0 - (_2457 * cbSceneParam._m0[34u].x);
            float _2462 = 1.0 - (_2457 * cbSceneParam._m0[34u].y);
            float _2463 = 1.0 - (_2457 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2463) ? _2211 : (isnan(_2211) ? _2463 : min(_2211, _2463));
            frontier_phi_39_38_ladder_1 = isnan(_2462) ? _2210 : (isnan(_2210) ? _2462 : min(_2210, _2462));
            frontier_phi_39_38_ladder_2 = isnan(_2461) ? _2209 : (isnan(_2209) ? _2461 : min(_2209, _2461));
        }
        else
        {
            frontier_phi_39_38_ladder = _2211;
            frontier_phi_39_38_ladder_1 = _2210;
            frontier_phi_39_38_ladder_2 = _2209;
        }
        _2275 = frontier_phi_39_38_ladder_2;
        _2277 = frontier_phi_39_38_ladder_1;
        _2279 = frontier_phi_39_38_ladder;
    }
    else
    {
        _2275 = _2209;
        _2277 = _2210;
        _2279 = _2211;
    }
    uvec4 _2284 = floatBitsToUint(cbInstanceData._m0[_920 + 5u]);
    uint _2286 = _2284.x * 14u;
    uint _2287 = _2286 + 13u;
    float _2294 = _960 + (-1.0);
    float _2299 = (cbLight._m0[_2287].x * _2294) + 1.0;
    float _2300 = (cbLight._m0[_2287].y * _2294) + 1.0;
    float _2301 = (cbLight._m0[_2287].z * _2294) + 1.0;
    float _2302 = (cbLight._m0[_2287].w * _2294) + 1.0;
    uint _2303 = _2286 + 5u;
    float _2309 = isnan(1.0) ? _2300 : (isnan(_2300) ? 1.0 : min(_2300, 1.0));
    uint _2313 = _2286 + 4u;
    float _2322 = isnan(1.0) ? _2299 : (isnan(_2299) ? 1.0 : min(_2299, 1.0));
    uint _2326 = _2286 | 1u;
    float _2337 = dot(vec3(cbLight._m0[_2286].xyz), vec3(_781, _782, _783));
    float _2340 = dot(vec3(cbLight._m0[_2326].xyz), vec3(_781, _782, _783));
    float _4669 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
    float _4680 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
    float _2345 = (isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0))) * 0.3183098733425140380859375;
    float _2347 = (isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0))) * 0.3183098733425140380859375;
    float _2354 = ((cbLight._m0[_2303].x * _2309) * _2347) + (((cbLight._m0[_2313].x * _2275) * _2322) * _2345);
    float _2355 = ((_2309 * cbLight._m0[_2303].y) * _2347) + (((cbLight._m0[_2313].y * _2277) * _2322) * _2345);
    float _2356 = ((_2309 * cbLight._m0[_2303].z) * _2347) + (((cbLight._m0[_2313].z * _2279) * _2322) * _2345);
    uvec4 _2360 = floatBitsToUint(cbLight._m0[_2286 + 12u]);
    bool _2362 = _2360.x == 0u;
    float _2464;
    float _2466;
    float _2468;
    if (_2362)
    {
        _2464 = _2354;
        _2466 = _2355;
        _2468 = _2356;
    }
    else
    {
        uint _2472 = _2286 + 6u;
        float _2488 = (dot(vec3(cbLight._m0[_2286 + 2u].xyz), vec3(_781, _782, _783)) * 0.5) + 0.5;
        float _2489 = _2488 * _2488;
        float _4691 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
        float _2490 = isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0));
        float _2491 = isnan(1.0) ? _2301 : (isnan(_2301) ? 1.0 : min(_2301, 1.0));
        _2464 = (((cbLight._m0[_2472].x * 0.3183098733425140380859375) * _2490) * _2491) + _2354;
        _2466 = (((cbLight._m0[_2472].y * 0.3183098733425140380859375) * _2490) * _2491) + _2355;
        _2468 = (((cbLight._m0[_2472].z * 0.3183098733425140380859375) * _2490) * _2491) + _2356;
    }
    bool _2471 = _2360.y == 0u;
    float _2526;
    float _2528;
    float _2530;
    if (_2471)
    {
        _2526 = _2464;
        _2528 = _2466;
        _2530 = _2468;
    }
    else
    {
        uint _2699 = _2286 + 7u;
        float _2715 = (dot(vec3(cbLight._m0[_2286 + 3u].xyz), vec3(_781, _782, _783)) * 0.5) + 0.5;
        float _2716 = _2715 * _2715;
        float _4707 = isnan(0.0) ? _2716 : (isnan(_2716) ? 0.0 : max(_2716, 0.0));
        float _2717 = isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0));
        float _2718 = isnan(1.0) ? _2302 : (isnan(_2302) ? 1.0 : min(_2302, 1.0));
        _2526 = (((cbLight._m0[_2699].x * 0.3183098733425140380859375) * _2717) * _2718) + _2464;
        _2528 = (((cbLight._m0[_2699].y * 0.3183098733425140380859375) * _2717) * _2718) + _2466;
        _2530 = (((cbLight._m0[_2699].z * 0.3183098733425140380859375) * _2717) * _2718) + _2468;
    }
    uint _2533 = _2286 + 8u;
    float _2546 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2286].w)) * _784) * 0.949999988079071044921875);
    float _2547 = _2546 * _2546;
    float _2548 = cbLight._m0[_2286].x + _865;
    float _2549 = cbLight._m0[_2286].y + _866;
    float _2550 = cbLight._m0[_2286].z + _867;
    float _2554 = inversesqrt(dot(vec3(_2548, _2549, _2550), vec3(_2548, _2549, _2550)));
    float _2555 = _2554 * _2548;
    float _2556 = _2554 * _2549;
    float _2557 = _2554 * _2550;
    float _2558 = dot(vec3(_781, _782, _783), vec3(cbLight._m0[_2286].xyz));
    float _4723 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0));
    float _2561 = isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0));
    float _4734 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
    float _2562 = isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0));
    float _2563 = dot(vec3(_781, _782, _783), vec3(_2555, _2556, _2557));
    float _4745 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0));
    float _2566 = isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0));
    float _2567 = dot(vec3(cbLight._m0[_2286].xyz), vec3(_2555, _2556, _2557));
    float _4756 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0));
    float _2571 = _2547 * _2547;
    float _2575 = ((_2566 * _2566) * (_2571 + (-1.0))) + 1.0;
    float _2583 = exp2(log2(1.0 - (isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0)))) * 5.0);
    float _2584 = 0.959999978542327880859375 - _942;
    float _2586 = 0.959999978542327880859375 - _943;
    float _2587 = 0.959999978542327880859375 - _944;
    float _2594 = 1.0 - _2547;
    float _2605 = (0.5 / (((_2562 * ((_2561 * _2594) + _2547)) + 9.9999999392252902907785028219223e-09) + (((_2562 * _2594) + _2547) * _2561))) * _2561;
    float _4767 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0));
    float _2607 = (isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0))) * (_2571 / ((_2575 * _2575) * 3.141590118408203125));
    uint _2621 = _2286 + 9u;
    float _2632 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2326].w)) * _784) * 0.949999988079071044921875);
    float _2633 = _2632 * _2632;
    float _2634 = cbLight._m0[_2326].x + _865;
    float _2635 = cbLight._m0[_2326].y + _866;
    float _2636 = cbLight._m0[_2326].z + _867;
    float _2640 = inversesqrt(dot(vec3(_2634, _2635, _2636), vec3(_2634, _2635, _2636)));
    float _2641 = _2640 * _2634;
    float _2642 = _2640 * _2635;
    float _2643 = _2640 * _2636;
    float _2644 = dot(vec3(_781, _782, _783), vec3(cbLight._m0[_2326].xyz));
    float _4778 = isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : max(_2644, 0.0));
    float _2647 = isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0));
    float _2648 = dot(vec3(_781, _782, _783), vec3(_2641, _2642, _2643));
    float _4789 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0));
    float _2651 = isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0));
    float _2652 = dot(vec3(cbLight._m0[_2326].xyz), vec3(_2641, _2642, _2643));
    float _4800 = isnan(0.0) ? _2652 : (isnan(_2652) ? 0.0 : max(_2652, 0.0));
    float _2656 = _2633 * _2633;
    float _2660 = ((_2651 * _2651) * (_2656 + (-1.0))) + 1.0;
    float _2667 = exp2(log2(1.0 - (isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0)))) * 5.0);
    float _2674 = 1.0 - _2633;
    float _2684 = (0.5 / (((_2562 * ((_2647 * _2674) + _2633)) + 9.9999999392252902907785028219223e-09) + (((_2562 * _2674) + _2633) * _2647))) * _2647;
    float _4811 = isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : max(_2684, 0.0));
    float _2686 = (isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0))) * (_2656 / ((_2660 * _2660) * 3.141590118408203125));
    float _2696 = (((((_2667 * _2584) + _945) * cbLight._m0[_2621].x) * _2686) * _2309) + ((((cbLight._m0[_2533].x * _2275) * ((_2583 * _2584) + _945)) * _2607) * _2322);
    float _2697 = (((((_2667 * _2586) + _947) * cbLight._m0[_2621].y) * _2686) * _2309) + ((((cbLight._m0[_2533].y * _2277) * ((_2583 * _2586) + _947)) * _2607) * _2322);
    float _2698 = (((((_2667 * _2587) + _948) * cbLight._m0[_2621].z) * _2686) * _2309) + ((((cbLight._m0[_2533].z * _2279) * ((_2583 * _2587) + _948)) * _2607) * _2322);
    float _2754;
    float _2756;
    float _2758;
    if (_2362)
    {
        _2754 = _2696;
        _2756 = _2697;
        _2758 = _2698;
    }
    else
    {
        uint _2760 = _2286 + 2u;
        uint _2764 = _2286 + 10u;
        float _2778 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2760].w)) * _784) * 0.949999988079071044921875);
        float _2779 = _2778 * _2778;
        float _2780 = cbLight._m0[_2760].x + _865;
        float _2781 = cbLight._m0[_2760].y + _866;
        float _2782 = cbLight._m0[_2760].z + _867;
        float _2786 = inversesqrt(dot(vec3(_2780, _2781, _2782), vec3(_2780, _2781, _2782)));
        float _2787 = _2786 * _2780;
        float _2788 = _2786 * _2781;
        float _2789 = _2786 * _2782;
        float _2790 = dot(vec3(_781, _782, _783), vec3(cbLight._m0[_2760].xyz));
        float _4822 = isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0));
        float _2793 = isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0));
        float _2794 = dot(vec3(_781, _782, _783), vec3(_2787, _2788, _2789));
        float _4833 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0));
        float _2797 = isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0));
        float _2798 = dot(vec3(cbLight._m0[_2760].xyz), vec3(_2787, _2788, _2789));
        float _4844 = isnan(0.0) ? _2798 : (isnan(_2798) ? 0.0 : max(_2798, 0.0));
        float _2802 = _2779 * _2779;
        float _2806 = ((_2797 * _2797) * (_2802 + (-1.0))) + 1.0;
        float _2813 = exp2(log2(1.0 - (isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0)))) * 5.0);
        float _2820 = 1.0 - _2779;
        float _2830 = (0.5 / (((_2562 * ((_2793 * _2820) + _2779)) + 9.9999999392252902907785028219223e-09) + (((_2562 * _2820) + _2779) * _2793))) * _2793;
        float _4855 = isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : max(_2830, 0.0));
        float _2832 = (isnan(1.0) ? _4855 : (isnan(_4855) ? 1.0 : min(_4855, 1.0))) * (_2802 / ((_2806 * _2806) * 3.141590118408203125));
        float _2833 = isnan(1.0) ? _2301 : (isnan(_2301) ? 1.0 : min(_2301, 1.0));
        _2754 = (((((_2813 * _2584) + _945) * cbLight._m0[_2764].x) * _2832) * _2833) + _2696;
        _2756 = (((((_2813 * _2586) + _947) * cbLight._m0[_2764].y) * _2832) * _2833) + _2697;
        _2758 = (((((_2813 * _2587) + _948) * cbLight._m0[_2764].z) * _2832) * _2833) + _2698;
    }
    float _2864;
    float _2866;
    float _2868;
    if (_2471)
    {
        _2864 = _2754;
        _2866 = _2756;
        _2868 = _2758;
    }
    else
    {
        uint _2875 = _2286 + 3u;
        uint _2879 = _2286 + 11u;
        float _2893 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2875].w)) * _784) * 0.949999988079071044921875);
        float _2894 = _2893 * _2893;
        float _2895 = cbLight._m0[_2875].x + _865;
        float _2896 = cbLight._m0[_2875].y + _866;
        float _2897 = cbLight._m0[_2875].z + _867;
        float _2901 = inversesqrt(dot(vec3(_2895, _2896, _2897), vec3(_2895, _2896, _2897)));
        float _2902 = _2901 * _2895;
        float _2903 = _2901 * _2896;
        float _2904 = _2901 * _2897;
        float _2905 = dot(vec3(_781, _782, _783), vec3(cbLight._m0[_2875].xyz));
        float _4871 = isnan(0.0) ? _2905 : (isnan(_2905) ? 0.0 : max(_2905, 0.0));
        float _2908 = isnan(1.0) ? _4871 : (isnan(_4871) ? 1.0 : min(_4871, 1.0));
        float _2909 = dot(vec3(_781, _782, _783), vec3(_2902, _2903, _2904));
        float _4882 = isnan(0.0) ? _2909 : (isnan(_2909) ? 0.0 : max(_2909, 0.0));
        float _2912 = isnan(1.0) ? _4882 : (isnan(_4882) ? 1.0 : min(_4882, 1.0));
        float _2913 = dot(vec3(cbLight._m0[_2875].xyz), vec3(_2902, _2903, _2904));
        float _4893 = isnan(0.0) ? _2913 : (isnan(_2913) ? 0.0 : max(_2913, 0.0));
        float _2917 = _2894 * _2894;
        float _2921 = ((_2912 * _2912) * (_2917 + (-1.0))) + 1.0;
        float _2928 = exp2(log2(1.0 - (isnan(1.0) ? _4893 : (isnan(_4893) ? 1.0 : min(_4893, 1.0)))) * 5.0);
        float _2935 = 1.0 - _2894;
        float _2945 = (0.5 / (((_2562 * ((_2908 * _2935) + _2894)) + 9.9999999392252902907785028219223e-09) + (((_2562 * _2935) + _2894) * _2908))) * _2908;
        float _4904 = isnan(0.0) ? _2945 : (isnan(_2945) ? 0.0 : max(_2945, 0.0));
        float _2947 = (isnan(1.0) ? _4904 : (isnan(_4904) ? 1.0 : min(_4904, 1.0))) * (_2917 / ((_2921 * _2921) * 3.141590118408203125));
        float _2948 = isnan(1.0) ? _2302 : (isnan(_2302) ? 1.0 : min(_2302, 1.0));
        _2864 = (((((_2928 * _2584) + _945) * cbLight._m0[_2879].x) * _2947) * _2948) + _2754;
        _2866 = (((((_2928 * _2586) + _947) * cbLight._m0[_2879].y) * _2947) * _2948) + _2756;
        _2868 = (((((_2928 * _2587) + _948) * cbLight._m0[_2879].z) * _2947) * _2948) + _2758;
    }
    float _3014;
    float _3016;
    float _3018;
    float _3020;
    float _3022;
    float _3024;
    if (_2284.y == 0u)
    {
        uvec4 _2969 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2970 = _2969.x;
        uint _2981 = uint((float(_2969.y) * floor(float(uint(cbSceneParam._m0[85u].y * _883) / _2970))) + floor(float(uint(cbSceneParam._m0[85u].x * _882) / _2970)));
        float _2991 = (log2(_2062 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2992 = isnan(0.0) ? _2991 : (isnan(_2991) ? 0.0 : max(_2991, 0.0));
        uint _2995 = uint(isnan(14.0) ? _2992 : (isnan(_2992) ? 14.0 : min(_2992, 14.0)));
        uvec4 _3000 = texelFetch(g_lightClusterGridBuffer, int(((_2995 << 2u) + (_2981 << 6u)) >> 2u));
        uint _3001 = _3000.x;
        uint _3002 = _2969.z;
        float _3116;
        float _3118;
        float _3120;
        float _3122;
        float _3124;
        float _3126;
        if (((((1u << ((_3002 >> 4u) & 15u)) + 4294967295u) & _3001) == 0u) || ((_3002 & 240u) == 0u))
        {
            _3116 = 0.0;
            _3118 = 0.0;
            _3120 = 0.0;
            _3122 = 0.0;
            _3124 = 0.0;
            _3126 = 0.0;
        }
        else
        {
            float _3117;
            float _3119;
            float _3121;
            float _3123;
            float _3125;
            float _3127;
            float _3278 = 0.0;
            float _3279 = 0.0;
            float _3280 = 0.0;
            float _3281 = 0.0;
            float _3282 = 0.0;
            float _3283 = 0.0;
            uint _3284 = 0u;
            uint _3293;
            bool _3294;
            for (;;)
            {
                _3293 = texelFetch(g_lightClassification, int((((_2995 << 5u) + (_2981 << 9u)) + (_3284 << 2u)) >> 2u)).x;
                _3294 = _3293 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3294)
                {
                    frontier_phi_73_pred = _3283;
                    frontier_phi_73_pred_1 = _3282;
                    frontier_phi_73_pred_2 = _3281;
                    frontier_phi_73_pred_3 = _3280;
                    frontier_phi_73_pred_4 = _3279;
                    frontier_phi_73_pred_5 = _3278;
                }
                else
                {
                    float _3423;
                    float _3424;
                    float _3425;
                    float _3426;
                    float _3427;
                    float _3428;
                    uint _3429;
                    _3423 = _3278;
                    _3424 = _3279;
                    _3425 = _3280;
                    _3426 = _3281;
                    _3427 = _3282;
                    _3428 = _3283;
                    _3429 = _3293;
                    float _3350;
                    float _3351;
                    float _3352;
                    float _3353;
                    float _3354;
                    float _3355;
                    for (;;)
                    {
                        uint _3433 = uint(findLSB(_3429)) + (_3284 << 5u);
                        uint _3430 = (_3429 + 4294967295u) & _3429;
                        uint _3435 = _3433 * 48u;
                        vec4 _3449 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3435)).x, texelFetch(g_PointLightRenderingBuffer, int(_3435 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3435 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3435 + 3u)).x));
                        uint _3455 = (_3433 * 48u) + 4u;
                        vec4 _3468 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3455)).x, texelFetch(g_PointLightRenderingBuffer, int(_3455 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3455 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3455 + 3u)).x));
                        uint _3474 = (_3433 * 48u) + 8u;
                        vec3 _3485 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3474)).x, texelFetch(g_PointLightRenderingBuffer, int(_3474 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3474 + 2u)).x));
                        float _3489 = _3449.x - _2060;
                        float _3490 = _3449.y - _2061;
                        float _3491 = _3449.z - _2062;
                        float _3492 = dot(vec3(_3489, _3490, _3491), vec3(_3489, _3490, _3491));
                        float _3495 = inversesqrt(_3492);
                        float _3496 = _3495 * _3489;
                        float _3497 = _3495 * _3490;
                        float _3498 = _3495 * _3491;
                        float _3499 = dot(vec3(_901, _904, _907), vec3(_3496, _3497, _3498));
                        float _3504 = 1.0 - (_3492 * _3449.w);
                        float _4930 = isnan(0.0) ? _3504 : (isnan(_3504) ? 0.0 : max(_3504, 0.0));
                        float _3505 = isnan(1.0) ? _4930 : (isnan(_4930) ? 1.0 : min(_4930, 1.0));
                        float _3506 = sqrt(_3492) * _3468.w;
                        float _3509 = 1.39999997615814208984375 / (_3506 + 1.39999997615814208984375);
                        float _3510 = _3509 * _3509;
                        float _3513 = ((1.0 - _3510) * _3499) + _3510;
                        float _3516 = _3506 * _3506;
                        float _3520 = ((isnan(0.0) ? _3513 : (isnan(_3513) ? 0.0 : max(_3513, 0.0))) * _3505) / ((_3516 * 0.699999988079071044921875) + 1.0);
                        float _3524 = (-0.0) - _2060;
                        float _3525 = (-0.0) - _2061;
                        float _3526 = (-0.0) - _2062;
                        float _3530 = inversesqrt(dot(vec3(_3524, _3525, _3526), vec3(_3524, _3525, _3526)));
                        float _3531 = _3530 * _3524;
                        float _3532 = _3530 * _3525;
                        float _3533 = _3530 * _3526;
                        float _3540 = exp2(log2(1.0 / ((_3516 * 3.5) + 5.0)) * 0.25);
                        float _3541 = 1.0 - _976;
                        float _3548 = sqrt(1.0 - ((1.0 - (_3541 * _3541)) * (1.0 - (_3540 * _3540))));
                        float _3549 = _3548 * _3548;
                        float _3550 = _3549 * _3549;
                        float _3551 = _3531 + _3496;
                        float _3552 = _3532 + _3497;
                        float _3553 = _3533 + _3498;
                        float _3557 = inversesqrt(dot(vec3(_3551, _3552, _3553), vec3(_3551, _3552, _3553)));
                        float _3561 = dot(vec3(_901, _904, _907), vec3(_3531, _3532, _3533));
                        float _4946 = isnan(0.0) ? _3561 : (isnan(_3561) ? 0.0 : max(_3561, 0.0));
                        float _3564 = isnan(1.0) ? _4946 : (isnan(_4946) ? 1.0 : min(_4946, 1.0));
                        float _3565 = dot(vec3(_901, _904, _907), vec3(_3557 * _3551, _3557 * _3552, _3557 * _3553));
                        float _4957 = isnan(0.0) ? _3565 : (isnan(_3565) ? 0.0 : max(_3565, 0.0));
                        float _3568 = isnan(1.0) ? _4957 : (isnan(_4957) ? 1.0 : min(_4957, 1.0));
                        float _3572 = ((_3568 * _3568) * (_3550 + (-1.0))) + 1.0;
                        float _3573 = _3509 * _3549;
                        float _3574 = _3573 * _3573;
                        float _3577 = ((1.0 - _3574) * _3499) + _3574;
                        float _4968 = isnan(0.0) ? _3577 : (isnan(_3577) ? 0.0 : max(_3577, 0.0));
                        float _3578 = isnan(1.0) ? _4968 : (isnan(_4968) ? 1.0 : min(_4968, 1.0));
                        float _3579 = 1.0 - _3549;
                        float _3589 = (0.5 / (((_3578 * ((_3564 * _3579) + _3549)) + 9.9999999392252902907785028219223e-09) + (((_3578 * _3579) + _3549) * _3564))) * _3578;
                        float _4979 = isnan(0.0) ? _3589 : (isnan(_3589) ? 0.0 : max(_3589, 0.0));
                        float _3600 = (((_3550 * 3.1415927410125732421875) * (isnan(1.0) ? _4979 : (isnan(_4979) ? 1.0 : min(_4979, 1.0)))) / ((_3572 * _3572) * ((_3516 * 2.1991131305694580078125) + 3.141590118408203125))) * _3505;
                        _3353 = (_3520 * _3468.x) + _3426;
                        _3354 = (_3520 * _3468.y) + _3427;
                        _3355 = (_3520 * _3468.z) + _3428;
                        _3350 = (_3600 * _3485.x) + _3423;
                        _3351 = (_3600 * _3485.y) + _3424;
                        _3352 = (_3600 * _3485.z) + _3425;
                        if (_3430 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3423 = _3350;
                            _3424 = _3351;
                            _3425 = _3352;
                            _3426 = _3353;
                            _3427 = _3354;
                            _3428 = _3355;
                            _3429 = _3430;
                        }
                    }
                    frontier_phi_73_pred = _3355;
                    frontier_phi_73_pred_1 = _3354;
                    frontier_phi_73_pred_2 = _3353;
                    frontier_phi_73_pred_3 = _3352;
                    frontier_phi_73_pred_4 = _3351;
                    frontier_phi_73_pred_5 = _3350;
                }
                _3127 = frontier_phi_73_pred;
                _3125 = frontier_phi_73_pred_1;
                _3123 = frontier_phi_73_pred_2;
                _3121 = frontier_phi_73_pred_3;
                _3119 = frontier_phi_73_pred_4;
                _3117 = frontier_phi_73_pred_5;
                uint _3285 = _3284 + 1u;
                if (_3285 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3278 = _3117;
                    _3279 = _3119;
                    _3280 = _3121;
                    _3281 = _3123;
                    _3282 = _3125;
                    _3283 = _3127;
                    _3284 = _3285;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3116 = _3117;
            _3118 = _3119;
            _3120 = _3121;
            _3122 = _3123;
            _3124 = _3125;
            _3126 = _3127;
        }
        uvec4 _3130 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3131 = _3130.z;
        uint _3133 = (_3131 >> 8u) & 15u;
        float _3246;
        float _3248;
        float _3250;
        float _3252;
        float _3254;
        float _3256;
        if (((4294967295u << _3133) & _3001) == 0u)
        {
            _3246 = _3116;
            _3248 = _3118;
            _3250 = _3120;
            _3252 = _3122;
            _3254 = _3124;
            _3256 = _3126;
        }
        else
        {
            float _3271 = inversesqrt(dot(vec3(_2060, _2061, _2062), vec3(_2060, _2061, _2062)));
            float _3272 = _3271 * _2060;
            float _3273 = _3271 * _2061;
            float _3274 = _3271 * _2062;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_3133 < ((_3131 >> 12u) & 15u))
            {
                float _3247;
                float _3249;
                float _3251;
                float _3253;
                float _3255;
                float _3257;
                float _3406 = _3116;
                float _3407 = _3118;
                float _3408 = _3120;
                float _3409 = _3122;
                float _3410 = _3124;
                float _3411 = _3126;
                uint _3412 = _3133;
                uint _3421;
                bool _3422;
                for (;;)
                {
                    _3421 = texelFetch(g_lightClassification, int((((_2995 << 5u) + (_2981 << 9u)) + (_3412 << 2u)) >> 2u)).x;
                    _3422 = _3421 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3422)
                    {
                        frontier_phi_84_pred = _3411;
                        frontier_phi_84_pred_1 = _3410;
                        frontier_phi_84_pred_2 = _3409;
                        frontier_phi_84_pred_3 = _3408;
                        frontier_phi_84_pred_4 = _3407;
                        frontier_phi_84_pred_5 = _3406;
                    }
                    else
                    {
                        float _3614;
                        float _3615;
                        float _3616;
                        float _3617;
                        float _3618;
                        float _3619;
                        float _3907;
                        float _3908;
                        float _3909;
                        float _3910;
                        float _3911;
                        float _3912;
                        float _3627 = _3406;
                        float _3628 = _3407;
                        float _3629 = _3408;
                        float _3630 = _3409;
                        float _3631 = _3410;
                        float _3632 = _3411;
                        uint _3633 = _3421;
                        uint _3634;
                        vec4 _3659;
                        float _3660;
                        vec4 _3675;
                        vec3 _3687;
                        vec4 _3702;
                        vec4 _3717;
                        float _3763;
                        bool _3764;
                        for (;;)
                        {
                            uint _3644 = ((_3412 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3633));
                            _3634 = (_3633 + 4294967295u) & _3633;
                            uint _3646 = _3644 * 40u;
                            _3659 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3646)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3646 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3646 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3646 + 3u)).x));
                            _3660 = _3659.w;
                            uint _3662 = (_3644 * 40u) + 4u;
                            _3675 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3662)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3662 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3662 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3662 + 3u)).x));
                            uint _3677 = (_3644 * 40u) + 8u;
                            _3687 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3677)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3677 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3677 + 2u)).x));
                            uint _3689 = (_3644 * 40u) + 16u;
                            _3702 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3689)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3689 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3689 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3689 + 3u)).x));
                            uint _3704 = (_3644 * 40u) + 20u;
                            _3717 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3704)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3704 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3704 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3704 + 3u)).x));
                            uint _3719 = (_3644 * 40u) + 24u;
                            vec4 _3732 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3719)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3719 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3719 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3719 + 3u)).x));
                            uint _3738 = (_3644 * 40u) + 28u;
                            vec4 _3751 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3738)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3738 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3738 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3738 + 3u)).x));
                            _3763 = fma(_2062, _3751.z, fma(_2061, _3751.y, _3751.x * _2060)) + _3751.w;
                            _3764 = !((fma(_2062, _3732.z, fma(_2061, _3732.y, _3732.x * _2060)) + _3732.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3764)
                            {
                                float _3791 = _3659.x - _2060;
                                float _3792 = _3659.y - _2061;
                                float _3793 = _3659.z - _2062;
                                float _3794 = dot(vec3(_3791, _3792, _3793), vec3(_3791, _3792, _3793));
                                float _3797 = inversesqrt(_3794);
                                float _3798 = _3797 * _3791;
                                float _3799 = _3797 * _3792;
                                float _3800 = _3797 * _3793;
                                float _3804 = 1.0 - (_3794 / (_3660 * _3660));
                                float _4990 = isnan(0.0) ? _3804 : (isnan(_3804) ? 0.0 : max(_3804, 0.0));
                                float _3805 = isnan(1.0) ? _4990 : (isnan(_4990) ? 1.0 : min(_4990, 1.0));
                                float _3809 = sqrt(_3794) * _3675.w;
                                float _3811 = 1.39999997615814208984375 / (_3809 + 1.39999997615814208984375);
                                float _3812 = _3811 * _3811;
                                float _3815 = ((1.0 - _3812) * dot(vec3(_3798, _3799, _3800), vec3(_901, _904, _907))) + _3812;
                                float _3818 = _3809 * _3809;
                                float _3822 = (fma(_2062, _3702.z, fma(_2061, _3702.y, _3702.x * _2060)) + _3702.w) / _3763;
                                float _3823 = (fma(_2062, _3717.z, fma(_2061, _3717.y, _3717.x * _2060)) + _3717.w) / _3763;
                                float _3827 = 1.0 - dot(vec2(_3822, _3823), vec2(_3822, _3823));
                                float _5006 = isnan(0.0) ? _3827 : (isnan(_3827) ? 0.0 : max(_3827, 0.0));
                                float _3828 = isnan(1.0) ? _5006 : (isnan(_5006) ? 1.0 : min(_5006, 1.0));
                                float _3829 = _3828 * (((isnan(0.0) ? _3815 : (isnan(_3815) ? 0.0 : max(_3815, 0.0))) * _3805) / ((_3818 * 0.699999988079071044921875) + 1.0));
                                float _3841 = exp2(log2(1.0 / ((_3818 * 3.5) + 5.0)) * 0.25);
                                float _3842 = 1.0 - _976;
                                float _3849 = sqrt(1.0 - ((1.0 - (_3842 * _3842)) * (1.0 - (_3841 * _3841))));
                                float _3850 = _3849 * _3849;
                                float _3851 = _3850 * _3850;
                                float _3852 = _3798 - _3272;
                                float _3853 = _3799 - _3273;
                                float _3854 = _3800 - _3274;
                                float _3858 = inversesqrt(dot(vec3(_3852, _3853, _3854), vec3(_3852, _3853, _3854)));
                                float _3862 = dot(vec3(_901, _904, _907), vec3((-0.0) - _3272, (-0.0) - _3273, (-0.0) - _3274));
                                float _5017 = isnan(0.0) ? _3862 : (isnan(_3862) ? 0.0 : max(_3862, 0.0));
                                float _3865 = isnan(1.0) ? _5017 : (isnan(_5017) ? 1.0 : min(_5017, 1.0));
                                float _3866 = dot(vec3(_901, _904, _907), vec3(_3858 * _3852, _3858 * _3853, _3858 * _3854));
                                float _5028 = isnan(0.0) ? _3866 : (isnan(_3866) ? 0.0 : max(_3866, 0.0));
                                float _3869 = isnan(1.0) ? _5028 : (isnan(_5028) ? 1.0 : min(_5028, 1.0));
                                float _3873 = ((_3869 * _3869) * (_3851 + (-1.0))) + 1.0;
                                float _3874 = _3811 * _3850;
                                float _3875 = _3874 * _3874;
                                float _3881 = ((1.0 - _3875) * dot(vec3(_901, _904, _907), vec3(_3798, _3799, _3800))) + _3875;
                                float _5039 = isnan(0.0) ? _3881 : (isnan(_3881) ? 0.0 : max(_3881, 0.0));
                                float _3882 = isnan(1.0) ? _5039 : (isnan(_5039) ? 1.0 : min(_5039, 1.0));
                                float _3883 = 1.0 - _3850;
                                float _3893 = (0.5 / (((_3882 * ((_3865 * _3883) + _3850)) + 9.9999999392252902907785028219223e-09) + (((_3882 * _3883) + _3850) * _3865))) * _3882;
                                float _5050 = isnan(0.0) ? _3893 : (isnan(_3893) ? 0.0 : max(_3893, 0.0));
                                float _3903 = (_3828 * _3805) * (((_3851 * 3.1415927410125732421875) * (isnan(1.0) ? _5050 : (isnan(_5050) ? 1.0 : min(_5050, 1.0)))) / ((_3873 * _3873) * ((_3818 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3829 * _3675.z;
                                frontier_phi_90_pred_1 = _3829 * _3675.y;
                                frontier_phi_90_pred_2 = _3829 * _3675.x;
                                frontier_phi_90_pred_3 = _3903 * _3687.z;
                                frontier_phi_90_pred_4 = _3903 * _3687.y;
                                frontier_phi_90_pred_5 = _3903 * _3687.x;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3912 = frontier_phi_90_pred;
                            _3911 = frontier_phi_90_pred_1;
                            _3910 = frontier_phi_90_pred_2;
                            _3909 = frontier_phi_90_pred_3;
                            _3908 = frontier_phi_90_pred_4;
                            _3907 = frontier_phi_90_pred_5;
                            _3617 = _3910 + _3630;
                            _3618 = _3911 + _3631;
                            _3619 = _3912 + _3632;
                            _3614 = _3907 + _3627;
                            _3615 = _3908 + _3628;
                            _3616 = _3909 + _3629;
                            if (_3634 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3627 = _3614;
                                _3628 = _3615;
                                _3629 = _3616;
                                _3630 = _3617;
                                _3631 = _3618;
                                _3632 = _3619;
                                _3633 = _3634;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3619;
                        frontier_phi_84_pred_1 = _3618;
                        frontier_phi_84_pred_2 = _3617;
                        frontier_phi_84_pred_3 = _3616;
                        frontier_phi_84_pred_4 = _3615;
                        frontier_phi_84_pred_5 = _3614;
                    }
                    _3257 = frontier_phi_84_pred;
                    _3255 = frontier_phi_84_pred_1;
                    _3253 = frontier_phi_84_pred_2;
                    _3251 = frontier_phi_84_pred_3;
                    _3249 = frontier_phi_84_pred_4;
                    _3247 = frontier_phi_84_pred_5;
                    uint _3413 = _3412 + 1u;
                    if (_3413 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3406 = _3247;
                        _3407 = _3249;
                        _3408 = _3251;
                        _3409 = _3253;
                        _3410 = _3255;
                        _3411 = _3257;
                        _3412 = _3413;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _3253;
                frontier_phi_65_66_ladder_1 = _3257;
                frontier_phi_65_66_ladder_2 = _3255;
                frontier_phi_65_66_ladder_3 = _3251;
                frontier_phi_65_66_ladder_4 = _3249;
                frontier_phi_65_66_ladder_5 = _3247;
            }
            else
            {
                frontier_phi_65_66_ladder = _3122;
                frontier_phi_65_66_ladder_1 = _3126;
                frontier_phi_65_66_ladder_2 = _3124;
                frontier_phi_65_66_ladder_3 = _3120;
                frontier_phi_65_66_ladder_4 = _3118;
                frontier_phi_65_66_ladder_5 = _3116;
            }
            _3246 = frontier_phi_65_66_ladder_5;
            _3248 = frontier_phi_65_66_ladder_4;
            _3250 = frontier_phi_65_66_ladder_3;
            _3252 = frontier_phi_65_66_ladder;
            _3254 = frontier_phi_65_66_ladder_2;
            _3256 = frontier_phi_65_66_ladder_1;
        }
        float _3261 = isnan(1.0) ? _960 : (isnan(_960) ? 1.0 : min(_960, 1.0));
        _3014 = (_3261 * _3252) + _2526;
        _3016 = (_3261 * _3254) + _2528;
        _3018 = (_3261 * _3256) + _2530;
        _3020 = ((_3246 * _945) * _3261) + _2864;
        _3022 = ((_3248 * _947) * _3261) + _2866;
        _3024 = ((_3250 * _948) * _3261) + _2868;
    }
    else
    {
        _3014 = _2526;
        _3016 = _2528;
        _3018 = _2530;
        _3020 = _2864;
        _3022 = _2866;
        _3024 = _2868;
    }
    uint _3030 = _921 + uint(cbMatDynParam._m0[0u].w);
    float _3038 = ((cbMtdParam._m0[20u].x * cbMtdParam._m0[25u].x) * _711.x) * cbInstanceData._m0[_3030].x;
    float _3041 = ((cbMtdParam._m0[20u].y * cbMtdParam._m0[25u].x) * _711.y) * cbInstanceData._m0[_3030].y;
    float _3044 = ((cbMtdParam._m0[20u].z * cbMtdParam._m0[25u].x) * _711.z) * cbInstanceData._m0[_3030].z;
    float _5066 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
    float _5077 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
    float _5088 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
    float _3061 = (((isnan(1.0) ? _5066 : (isnan(_5066) ? 1.0 : min(_5066, 1.0))) * (_3014 + ((isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0))) * _960))) + ((_3020 + ((isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0))) * _1794)) * cbPerFrame._m0[3u].x)) + _3038;
    float _3063 = (_3041 + ((_3022 + ((isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0))) * _1794)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5077 : (isnan(_5077) ? 1.0 : min(_5077, 1.0))) * (_3016 + ((isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0))) * _960)));
    float _3065 = (_3044 + ((_3024 + ((isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0))) * _1794)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5088 : (isnan(_5088) ? 1.0 : min(_5088, 1.0))) * (_3018 + ((isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0))) * _960)));
    float _3066 = isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : max(_3061, 0.0));
    float _3067 = isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : max(_3063, 0.0));
    float _3068 = isnan(0.0) ? _3065 : (isnan(_3065) ? 0.0 : max(_3065, 0.0));
    float _3074 = cbMtdParam._m0[2u].x * _3038;
    float _3075 = cbMtdParam._m0[2u].y * _3041;
    float _3076 = cbMtdParam._m0[2u].z * _3044;
    float _5114 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _3078 = isnan(1.0) ? _5114 : (isnan(_5114) ? 1.0 : min(_5114, 1.0));
    uint _3079 = _920 + 6u;
    float _3087 = _882 / cbSceneParam._m0[86u].x;
    float _3088 = _883 / cbSceneParam._m0[86u].y;
    vec4 _3102 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3087, _3088, (log2((isnan(cbSceneParam._m0[77u].w) ? _808 : (isnan(_808) ? cbSceneParam._m0[77u].w : min(_808, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3104 = _3102.x;
    float _3105 = _3102.y;
    float _3106 = _3102.z;
    float _3107 = _3102.w;
    float _3179;
    float _3181;
    float _3183;
    float _3185;
    if (_808 > cbSceneParam._m0[78u].w)
    {
        float _3141 = isnan(_808) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _808 : min(cbSceneParam._m0[80u].w, _808));
        float _3142 = _3141 / _808;
        float _3153 = _3142 * _858;
        float _3154 = _859 * _3142;
        float _3155 = (-0.0) - _3154;
        float _3157 = _3142 * _860;
        float _3159 = (cbSceneParam._m0[77u].w * _3155) / _3141;
        float _3160 = _3159 + cbSceneParam._m0[79u].w;
        float _3161 = cbSceneParam._m0[79u].w - _3154;
        float _3167 = sqrt(((_3153 * _3153) + (_3154 * _3154)) + (_3157 * _3157));
        float _3170 = (1.0 - (cbSceneParam._m0[77u].w / _3141)) * _3167;
        float _3175 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3177 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3363;
        if (abs((_3155 - _3159) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3363 = ((((_3160 > 0.0) ? exp2(_3175 * _3160) : (2.0 - exp2(_3177 * _3160))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3170;
        }
        else
        {
            float _3307 = 1.0 / cbSceneParam._m0[80u].x;
            float _3308 = isnan(_3161) ? _3160 : (isnan(_3160) ? _3161 : max(_3160, _3161));
            float _3309 = isnan(_3161) ? _3160 : (isnan(_3160) ? _3161 : min(_3160, _3161));
            float _3318 = isnan(0.0) ? _3308 : (isnan(_3308) ? 0.0 : min(_3308, 0.0));
            float _3319 = isnan(0.0) ? _3309 : (isnan(_3309) ? 0.0 : min(_3309, 0.0));
            _3363 = ((abs(_3167 / _3155) * cbSceneParam._m0[80u].y) * ((((_3318 - _3319) * 2.0) - ((exp2(_3175 * (isnan(0.0) ? _3308 : (isnan(_3308) ? 0.0 : max(_3308, 0.0)))) - exp2(_3175 * (isnan(0.0) ? _3309 : (isnan(_3309) ? 0.0 : max(_3309, 0.0))))) * _3307)) - ((exp2(_3177 * _3318) - exp2(_3177 * _3319)) * _3307))) + (_3170 * cbSceneParam._m0[80u].z);
        }
        vec4 _3365 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3087, _3088, 1.0), 0.0);
        float _3374 = exp2((_3363 * (-1.44269502162933349609375)) * (1.0 - _3365.w));
        float _3375 = log2(_3374);
        float _3391 = log2(_3107);
        _3179 = (exp2(_3391 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3375 * cbSceneParam._m0[78u].x)) * _3365.x) / cbSceneParam._m0[78u].x)) + _3104;
        _3181 = (exp2(_3391 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3375 * cbSceneParam._m0[78u].y)) * _3365.y) / cbSceneParam._m0[78u].y)) + _3105;
        _3183 = (exp2(_3391 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3375 * cbSceneParam._m0[78u].z)) * _3365.z) / cbSceneParam._m0[78u].z)) + _3106;
        _3185 = _3374 * _3107;
    }
    else
    {
        _3179 = _3104;
        _3181 = _3105;
        _3183 = _3106;
        _3185 = _3107;
    }
    bool _3401;
    vec4 _3195;
    vec4 _3217;
    float _3219;
    float _3223;
    float _3224;
    float _3225;
    float _3228;
    float _3231;
    float _3234;
    float _3235;
    bool _3245;
    for (;;)
    {
        _3195 = cbMatDynParam._m0[0u];
        float _3197 = roundEven(_3195.y);
        bool _3198 = _3197 == 3.0;
        float _3199 = log2(_3185);
        float _3203 = exp2(_3199 * cbSceneParam._m0[78u].x);
        float _3204 = exp2(_3199 * cbSceneParam._m0[78u].y);
        float _3205 = exp2(_3199 * cbSceneParam._m0[78u].z);
        float _3206 = _3203 * _3066;
        float _3207 = _3204 * _3067;
        float _3208 = _3205 * _3068;
        float _3215 = _871 + (-0.5);
        _3217 = cbMtdParam._m0[1u];
        _3219 = _3217.y * _3215;
        float _3222 = (_3197 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3223 = _3222 * (_3198 ? _3206 : (_3206 + (cbSceneParam._m0[72u].w * _3179)));
        _3224 = _3222 * (_3198 ? _3207 : (_3207 + (cbSceneParam._m0[72u].w * _3181)));
        _3225 = _3222 * (_3198 ? _3208 : (_3208 + (cbSceneParam._m0[72u].w * _3183)));
        _3228 = ((_3074 * _3078) * _3203) * _3222;
        _3231 = ((_3075 * _3078) * _3204) * _3222;
        _3234 = ((_3076 * _3078) * _3205) * _3222;
        _3235 = _3215 * 0.999000012874603271484375;
        _3245 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3245)
        {
            if ((cbInstanceData._m0[_920 + 7u].x + _3235) < 0.5)
            {
                _3401 = true;
                break;
            }
        }
        uint _3342 = _921 + uint(_3195.w);
        if ((cbInstanceData._m0[_3342].w < 1.0) && ((cbInstanceData._m0[_3342].w + _3235) < 0.5))
        {
            _3401 = true;
            break;
        }
        if ((_3219 + 1.0) < _3217.x)
        {
            _3401 = true;
            break;
        }
        _3401 = false;
        break;
    }
    float _3605;
    if (_3401)
    {
        discard_state = true;
        _3605 = 0.0;
    }
    else
    {
        _3605 = cbInstanceData._m0[_3079].w;
    }
    SV_Target.x = _3223;
    SV_Target.y = _3224;
    SV_Target.z = _3225;
    SV_Target.w = _3605;
    SV_Target_1.x = _3228;
    SV_Target_1.y = _3231;
    SV_Target_1.z = _3234;
    SV_Target_1.w = cbInstanceData._m0[_3079].w;
    discard_exit();
}


