#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[29];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 12) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 9) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2DArray C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_0;
layout(set = 0, binding = 14) uniform texture2DArray C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1224;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _199 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _200 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _201 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _207 = inversesqrt(dot(vec3(_199, _200, _201), vec3(_199, _200, _201)));
    float _214 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _221 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _242 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_1) + cbTextureTilingScale._m0[10u].w));
    float _256 = exp2(log2(_242.w * cbMtdParam._m0[25u].z) * cbMtdParam._m0[22u].x);
    float _257 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    float _258 = isnan(1.0) ? _257 : (isnan(_257) ? 1.0 : min(_257, 1.0));
    vec4 _272 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _276 = _272.z;
    float _285 = exp2(log2(_276 * cbMtdParam._m0[22u].y) * cbMtdParam._m0[21u].y);
    float _286 = isnan(0.0) ? _285 : (isnan(_285) ? 0.0 : max(_285, 0.0));
    float _287 = isnan(1.0) ? _286 : (isnan(_286) ? 1.0 : min(_286, 1.0));
    float _308 = roundEven(5.0 - ((texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w)).x + (-0.02500000037252902984619140625)) * 8.0));
    float _309 = isnan(0.0) ? _308 : (isnan(_308) ? 0.0 : max(_308, 0.0));
    float _310 = isnan(4.0) ? _309 : (isnan(_309) ? 4.0 : min(_309, 4.0));
    float _323 = floor(_310);
    vec4 _326 = texture(sampler2DArray(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w, _323));
    vec4 _350 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _361 = cbMtdParam._m0[9u].x * _350.x;
    float _362 = cbMtdParam._m0[9u].y * _350.y;
    float _363 = cbMtdParam._m0[9u].z * _350.z;
    float _370 = (((cbMtdParam._m0[10u].x * _326.x) - _361) * _287) + _361;
    float _371 = (((cbMtdParam._m0[10u].y * _326.y) - _362) * _287) + _362;
    float _372 = (((cbMtdParam._m0[10u].z * _326.z) - _363) * _287) + _363;
    float _378 = exp2(log2(_272.w) * cbMtdParam._m0[22u].w);
    vec4 _391 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _411 = (((cbMtdParam._m0[16u].x * _391.x) - _370) * _378) + _370;
    float _412 = (((cbMtdParam._m0[16u].y * _391.y) - _371) * _378) + _371;
    float _413 = (((cbMtdParam._m0[16u].z * _391.z) - _372) * _378) + _372;
    vec4 _426 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _451 = (_242.x * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].x * _426.x) - _411) * _258) + _411);
    float _453 = (_242.y * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].y * _426.y) - _412) * _258) + _412);
    float _455 = (_242.z * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].z * _426.z) - _413) * _258) + _413);
    float _178[5];
    float _179[5];
    _178[0u] = cbMtdParam._m0[25u].w;
    _179[0u] = cbMtdParam._m0[26u].x;
    _178[1u] = cbMtdParam._m0[27u].w;
    _179[1u] = cbMtdParam._m0[28u].x;
    _178[2u] = cbMtdParam._m0[27u].y;
    _179[2u] = cbMtdParam._m0[27u].z;
    _178[3u] = cbMtdParam._m0[26u].w;
    _179[3u] = cbMtdParam._m0[27u].x;
    _178[4u] = cbMtdParam._m0[26u].y;
    _179[4u] = cbMtdParam._m0[26u].z;
    float _495 = isnan(0.0) ? _310 : (isnan(_310) ? 0.0 : max(_310, 0.0));
    uint _497 = uint(int(isnan(4.0) ? _495 : (isnan(_495) ? 4.0 : min(_495, 4.0))));
    float _504 = ((_179[_497] - cbMtdParam._m0[21u].z) * _287) + cbMtdParam._m0[21u].z;
    float _507 = ((cbMtdParam._m0[21u].w - _504) * _378) + _504;
    float _510 = ((cbMtdParam._m0[24u].y - _507) * _258) + _507;
    vec4 _526 = texture(sampler2DArray(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w, _323));
    vec4 _543 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _545 = _543.x;
    float _546 = _543.y;
    float _551 = cbMtdParam._m0[21u].x + _543.z;
    float _554 = (((_526.z + _178[_497]) - _551) * _287) + _551;
    vec4 _567 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_1) + cbTextureTilingScale._m0[11u].w));
    float _578 = (((_567.z - _554) + cbMtdParam._m0[25u].y) * _378) + _554;
    float _584 = ((((_276 * 2.0) * _578) - _578) * cbMtdParam._m0[23u].w) + _578;
    vec4 _597 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_1) + cbTextureTilingScale._m0[12u].w));
    float _608 = (((cbMtdParam._m0[22u].z + _597.z) - _584) * _258) + _584;
    vec4 _628 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _645 = ((_526.x - _545) * _287) + _545;
    float _646 = ((_526.y - _546) * _287) + _546;
    float _651 = ((_567.x - _645) * _378) + _645;
    float _652 = ((_567.y - _646) * _378) + _646;
    float _661 = ((((_597.x - _651) * _258) + _651) * 2.0) + (-1.0);
    float _662 = ((((_597.y - _652) * _258) + _652) * 2.0) + (-1.0);
    float _663 = dot(vec2(_661, _662), vec2(_661, _662));
    float _3636 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _668 = sqrt(1.0 - (isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0))));
    float _671 = (cbMtdParam._m0[24u].z * ((_272.x * 2.0) + (-1.0))) + _661;
    float _672 = (cbMtdParam._m0[24u].z * ((_272.y * 2.0) + (-1.0))) + _662;
    float _675 = fma(_668, _214 * NORMAL.x, fma(_672, _221 * TANGENT.x, (_207 * _199) * _671));
    float _678 = fma(_668, _214 * NORMAL.y, fma(_672, _221 * TANGENT.y, (_207 * _200) * _671));
    float _681 = fma(_668, _214 * NORMAL.z, fma(_672, _221 * TANGENT.z, (_207 * _201) * _671));
    float _685 = inversesqrt(dot(vec3(_675, _678, _681), vec3(_675, _678, _681)));
    float _686 = _685 * _675;
    float _687 = _685 * _678;
    float _688 = _685 * _681;
    float _3647 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _689 = isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0));
    float _3658 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _3669 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _3680 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _3691 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _693 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
    float _709 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _749 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _759 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _749);
    float _760 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _749);
    float _761 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _749);
    float _765 = inversesqrt(dot(vec3(_759, _760, _761), vec3(_759, _760, _761)));
    float _766 = _759 * _765;
    float _767 = _760 * _765;
    float _768 = _761 * _765;
    float _774 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _775 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _793 = fma(_688, cbSceneParam._m0[5u].z, fma(_687, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _686));
    float _796 = fma(_688, cbSceneParam._m0[6u].z, fma(_687, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _686));
    float _799 = fma(_688, cbSceneParam._m0[7u].z, fma(_687, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _686));
    uint _812 = uint(roundEven(NORMAL.w)) * 13u;
    uint _813 = _812 + 9u;
    uint _814 = _813 + uint(cbMatDynParam._m0[0u].w);
    float _820 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0)))) * cbInstanceData._m0[_814].x;
    float _821 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0)))) * cbInstanceData._m0[_814].y;
    float _822 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0)))) * cbInstanceData._m0[_814].z;
    float _3702 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
    float _823 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
    float _3713 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
    float _824 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
    float _3724 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
    float _825 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
    float _826 = 1.0 - _693;
    float _827 = _823 * _826;
    float _828 = _824 * _826;
    float _829 = _825 * _826;
    float _834 = (_823 + (-0.039999999105930328369140625)) * _693;
    float _835 = (_824 + (-0.039999999105930328369140625)) * _693;
    float _836 = (_825 + (-0.039999999105930328369140625)) * _693;
    float _837 = _834 + 0.039999999105930328369140625;
    float _839 = _835 + 0.039999999105930328369140625;
    float _840 = _836 + 0.039999999105930328369140625;
    vec4 _849 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _774, cbSceneParam._m0[86u].y * _775));
    float _852 = _849.x * TEXCOORD_3.w;
    float _853 = dot(vec3(_686, _687, _688), vec3(_766, _767, _768));
    float _856 = _853 * 2.0;
    float _860 = (_856 * _686) - _766;
    float _861 = (_856 * _687) - _767;
    float _862 = (_856 * _688) - _768;
    float _866 = abs(dot(vec3(_766, _767, _768), vec3(_686, _687, _688)));
    float _3735 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    float _868 = sqrt(_689);
    float _879 = exp2((_868 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_868 * 3.0));
    float _885 = (1.0 - _879) * ((_868 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _886 = _879 * _868;
    float _914 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _918 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _922 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1223;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _948 = fma(_922, cbModelParam._m0[26u].z, fma(_918, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _914));
        float _952 = fma(_922, cbModelParam._m0[27u].z, fma(_918, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _914));
        float _956 = fma(_922, cbModelParam._m0[28u].z, fma(_918, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _914));
        float _981 = _914 + _686;
        float _982 = _918 + _687;
        float _983 = _922 + _688;
        float _993 = fma(_983, cbModelParam._m0[26u].z, fma(_982, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _981)) - _948;
        float _994 = fma(_983, cbModelParam._m0[27u].z, fma(_982, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _981)) - _952;
        float _995 = fma(_983, cbModelParam._m0[28u].z, fma(_982, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _981)) - _956;
        float _999 = inversesqrt(dot(vec3(_993, _994, _995), vec3(_993, _994, _995)));
        float _1012 = ((_999 * _993) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_948 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1013 = ((_999 * _994) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_952 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1014 = ((_999 * _995) / cbModelParam._m0[34u].z) + ((((((_956 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1017 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1012, _1013, _1014), 0.0);
        vec4 _1024 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1012, _1013, _1014), 0.0);
        vec4 _1031 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1012, _1013, _1014), 0.0);
        vec4 _1038 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1012, _1013, _1014), 0.0);
        float _1051 = exp2((_1017.w + (-0.5)) * 20.0) * 2.0;
        float _1052 = _1051 * (_1017.x + (-0.5));
        float _1053 = _1051 * (_1017.y + (-0.5));
        float _1054 = _1051 * (_1017.z + (-0.5));
        float _1061 = exp2((_1024.w + (-0.5)) * 20.0) * 2.0;
        float _1062 = _1061 * (_1024.x + (-0.5));
        float _1063 = _1061 * (_1024.y + (-0.5));
        float _1064 = _1061 * (_1024.z + (-0.5));
        float _1071 = exp2((_1031.w + (-0.5)) * 20.0) * 2.0;
        float _1072 = _1071 * (_1031.x + (-0.5));
        float _1073 = _1071 * (_1031.y + (-0.5));
        float _1074 = _1071 * (_1031.z + (-0.5));
        float _1081 = exp2((_1038.w + (-0.5)) * 20.0) * 2.0;
        float _1082 = _1081 * (_1038.x + (-0.5));
        float _1083 = _1081 * (_1038.y + (-0.5));
        float _1084 = _1081 * (_1038.z + (-0.5));
        float _1085 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1086 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1087 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1088 = _1052 * 0.5;
        float _1089 = _1062 * 0.5;
        float _1090 = _1072 * 0.5;
        float _1091 = dot(vec3(_1088, _1089, _1090), vec3(_1088, _1089, _1090));
        float _1096 = (_1091 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1091);
        float _1105 = (dot(vec3(_686, _687, _688), vec3(_1096 * _1088, _1096 * _1089, _1096 * _1090)) + 1.0) * 0.5;
        float _3761 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1115 = sqrt(((_1089 * _1089) + (_1088 * _1088)) + (_1090 * _1090)) / (_1085 + 9.9999997473787516355514526367188e-06);
        float _3772 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1116 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
        float _1117 = _1116 * 2.0;
        float _1121 = (1.0 - _1116) / (_1116 + 1.0);
        float _3783 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1122 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
        float _1131 = ((((1.0 - _1122) * (_1117 + 2.0)) * exp2(log2(isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0))) * (_1117 + 1.0))) + _1122) * _1085;
        float _1132 = _1053 * 0.5;
        float _1133 = _1063 * 0.5;
        float _1134 = _1073 * 0.5;
        float _1135 = dot(vec3(_1132, _1133, _1134), vec3(_1132, _1133, _1134));
        float _1140 = (_1135 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1135);
        float _1148 = (dot(vec3(_686, _687, _688), vec3(_1140 * _1132, _1140 * _1133, _1140 * _1134)) + 1.0) * 0.5;
        float _3794 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1157 = sqrt(((_1133 * _1133) + (_1132 * _1132)) + (_1134 * _1134)) / (_1086 + 9.9999997473787516355514526367188e-06);
        float _3805 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1158 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
        float _1159 = _1158 * 2.0;
        float _1163 = (1.0 - _1158) / (_1158 + 1.0);
        float _3816 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1164 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
        float _1173 = ((((1.0 - _1164) * (_1159 + 2.0)) * exp2(log2(isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0))) * (_1159 + 1.0))) + _1164) * _1086;
        float _1174 = _1054 * 0.5;
        float _1175 = _1064 * 0.5;
        float _1176 = _1074 * 0.5;
        float _1177 = dot(vec3(_1174, _1175, _1176), vec3(_1174, _1175, _1176));
        float _1182 = (_1177 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1177);
        float _1190 = (dot(vec3(_686, _687, _688), vec3(_1182 * _1174, _1182 * _1175, _1182 * _1176)) + 1.0) * 0.5;
        float _3827 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1199 = sqrt(((_1175 * _1175) + (_1174 * _1174)) + (_1176 * _1176)) / (_1087 + 9.9999997473787516355514526367188e-06);
        float _3838 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1200 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
        float _1201 = _1200 * 2.0;
        float _1205 = (1.0 - _1200) / (_1200 + 1.0);
        float _3849 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1206 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
        float _1215 = ((((1.0 - _1206) * (_1201 + 2.0)) * exp2(log2(isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0))) * (_1201 + 1.0))) + _1206) * _1087;
        _1223 = _1054;
        _1225 = _1053;
        _1226 = _1052;
        _1227 = _1064;
        _1228 = _1063;
        _1229 = _1062;
        _1230 = _1074;
        _1231 = _1073;
        _1232 = _1072;
        _1233 = _1087;
        _1234 = _1086;
        _1235 = _1085;
        _1236 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0)));
        _1237 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0)));
        _1238 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0)));
    }
    else
    {
        _1223 = _1224;
        _1225 = _1224;
        _1226 = _1224;
        _1227 = _1224;
        _1228 = _1224;
        _1229 = _1224;
        _1230 = _1224;
        _1231 = _1224;
        _1232 = _1224;
        _1233 = _1224;
        _1234 = _1224;
        _1235 = _1224;
        _1236 = 0.0;
        _1237 = 0.0;
        _1238 = 0.0;
    }
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1264 = fma(_922, cbModelParam._m0[30u].z, fma(_918, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _914));
        float _1268 = fma(_922, cbModelParam._m0[31u].z, fma(_918, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _914));
        float _1272 = fma(_922, cbModelParam._m0[32u].z, fma(_918, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _914));
        float _1295 = _914 + _686;
        float _1296 = _918 + _687;
        float _1297 = _922 + _688;
        float _1307 = fma(_1297, cbModelParam._m0[30u].z, fma(_1296, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1295)) - _1264;
        float _1308 = fma(_1297, cbModelParam._m0[31u].z, fma(_1296, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1295)) - _1268;
        float _1309 = fma(_1297, cbModelParam._m0[32u].z, fma(_1296, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1295)) - _1272;
        float _1313 = inversesqrt(dot(vec3(_1307, _1308, _1309), vec3(_1307, _1308, _1309)));
        float _1326 = ((_1313 * _1307) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1264 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1327 = ((_1313 * _1308) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1268 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1328 = ((_1313 * _1309) / cbModelParam._m0[35u].z) + ((((((_1272 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1330 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1326, _1327, _1328), 0.0);
        vec4 _1337 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1326, _1327, _1328), 0.0);
        vec4 _1344 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1326, _1327, _1328), 0.0);
        vec4 _1351 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1326, _1327, _1328), 0.0);
        float _1363 = exp2((_1330.w + (-0.5)) * 20.0) * 2.0;
        float _1364 = _1363 * (_1330.x + (-0.5));
        float _1365 = _1363 * (_1330.y + (-0.5));
        float _1366 = _1363 * (_1330.z + (-0.5));
        float _1373 = exp2((_1337.w + (-0.5)) * 20.0) * 2.0;
        float _1374 = _1373 * (_1337.x + (-0.5));
        float _1375 = _1373 * (_1337.y + (-0.5));
        float _1376 = _1373 * (_1337.z + (-0.5));
        float _1383 = exp2((_1344.w + (-0.5)) * 20.0) * 2.0;
        float _1384 = _1383 * (_1344.x + (-0.5));
        float _1385 = _1383 * (_1344.y + (-0.5));
        float _1386 = _1383 * (_1344.z + (-0.5));
        float _1393 = exp2((_1351.w + (-0.5)) * 20.0) * 2.0;
        float _1394 = _1393 * (_1351.x + (-0.5));
        float _1395 = _1393 * (_1351.y + (-0.5));
        float _1396 = _1393 * (_1351.z + (-0.5));
        float _1397 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1398 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1399 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1400 = _1364 * 0.5;
        float _1401 = _1374 * 0.5;
        float _1402 = _1384 * 0.5;
        float _1403 = dot(vec3(_1400, _1401, _1402), vec3(_1400, _1401, _1402));
        float _1408 = (_1403 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1403);
        float _1416 = (dot(vec3(_686, _687, _688), vec3(_1408 * _1400, _1408 * _1401, _1408 * _1402)) + 1.0) * 0.5;
        float _3890 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1425 = sqrt(((_1401 * _1401) + (_1400 * _1400)) + (_1402 * _1402)) / (_1397 + 9.9999997473787516355514526367188e-06);
        float _3901 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1426 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
        float _1427 = _1426 * 2.0;
        float _1431 = (1.0 - _1426) / (_1426 + 1.0);
        float _3912 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1432 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
        float _1441 = ((((1.0 - _1432) * (_1427 + 2.0)) * exp2(log2(isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0))) * (_1427 + 1.0))) + _1432) * _1397;
        float _1442 = _1365 * 0.5;
        float _1443 = _1375 * 0.5;
        float _1444 = _1385 * 0.5;
        float _1445 = dot(vec3(_1442, _1443, _1444), vec3(_1442, _1443, _1444));
        float _1450 = (_1445 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1445);
        float _1458 = (dot(vec3(_686, _687, _688), vec3(_1450 * _1442, _1450 * _1443, _1450 * _1444)) + 1.0) * 0.5;
        float _3923 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1467 = sqrt(((_1443 * _1443) + (_1442 * _1442)) + (_1444 * _1444)) / (_1398 + 9.9999997473787516355514526367188e-06);
        float _3934 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1468 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
        float _1469 = _1468 * 2.0;
        float _1473 = (1.0 - _1468) / (_1468 + 1.0);
        float _3945 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1474 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
        float _1483 = ((((1.0 - _1474) * (_1469 + 2.0)) * exp2(log2(isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0))) * (_1469 + 1.0))) + _1474) * _1398;
        float _1484 = _1366 * 0.5;
        float _1485 = _1376 * 0.5;
        float _1486 = _1386 * 0.5;
        float _1487 = dot(vec3(_1484, _1485, _1486), vec3(_1484, _1485, _1486));
        float _1492 = (_1487 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1487);
        float _1500 = (dot(vec3(_686, _687, _688), vec3(_1492 * _1484, _1492 * _1485, _1492 * _1486)) + 1.0) * 0.5;
        float _3956 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1509 = sqrt(((_1485 * _1485) + (_1484 * _1484)) + (_1486 * _1486)) / (_1399 + 9.9999997473787516355514526367188e-06);
        float _3967 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1510 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
        float _1511 = _1510 * 2.0;
        float _1515 = (1.0 - _1510) / (_1510 + 1.0);
        float _3978 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1516 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
        float _1525 = ((((1.0 - _1516) * (_1511 + 2.0)) * exp2(log2(isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0))) * (_1511 + 1.0))) + _1516) * _1399;
        _1533 = _1366;
        _1534 = _1365;
        _1535 = _1364;
        _1536 = _1376;
        _1537 = _1375;
        _1538 = _1374;
        _1539 = _1386;
        _1540 = _1385;
        _1541 = _1384;
        _1542 = _1399;
        _1543 = _1398;
        _1544 = _1397;
        _1545 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0)));
        _1546 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0)));
        _1547 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0)));
    }
    else
    {
        _1533 = _1224;
        _1534 = _1224;
        _1535 = _1224;
        _1536 = _1224;
        _1537 = _1224;
        _1538 = _1224;
        _1539 = _1224;
        _1540 = _1224;
        _1541 = _1224;
        _1542 = _1224;
        _1543 = _1224;
        _1544 = _1224;
        _1545 = 0.0;
        _1546 = 0.0;
        _1547 = 0.0;
    }
    float _1557 = (cbModelParam._m0[1u].x * (_1545 - _1236)) + _1236;
    float _1558 = (cbModelParam._m0[1u].x * (_1546 - _1237)) + _1237;
    float _1559 = (cbModelParam._m0[1u].x * (_1547 - _1238)) + _1238;
    float _1580 = fma(_1559, cbSceneParam._m0[89u].z, fma(_1558, cbSceneParam._m0[89u].y, _1557 * cbSceneParam._m0[89u].x));
    float _1583 = fma(_1559, cbSceneParam._m0[90u].z, fma(_1558, cbSceneParam._m0[90u].y, _1557 * cbSceneParam._m0[90u].x));
    float _1586 = fma(_1559, cbSceneParam._m0[91u].z, fma(_1558, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1557));
    float _1601 = _860 * 0.5;
    float _1602 = _861 * 0.5;
    float _1603 = _862 * 0.5;
    float _1604 = dot(vec4(_1601, _1602, _1603, 1.0), vec4(_1535, _1538, _1541, _1544));
    float _1607 = dot(vec4(_1601, _1602, _1603, 1.0), vec4(_1534, _1537, _1540, _1543));
    float _1610 = dot(vec4(_1601, _1602, _1603, 1.0), vec4(_1533, _1536, _1539, _1542));
    float _1644;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1617 = dot(vec4(_1601, _1602, _1603, 1.0), vec4(_1223, _1227, _1230, _1233));
        float _1621 = dot(vec4(_1601, _1602, _1603, 1.0), vec4(_1225, _1228, _1231, _1234));
        float _1625 = dot(vec4(_1601, _1602, _1603, 1.0), vec4(_1226, _1229, _1232, _1235));
        float _1632 = dot(vec4(cbModelParam._m0[39u]), vec4(_1601, _1602, _1603, 1.0));
        _1644 = dot(vec3(isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0)), isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0)), isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1632) ? 0.0 : (isnan(0.0) ? _1632 : max(0.0, _1632))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1644 = 1.0;
    }
    float _1655;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1646 = dot(vec4(cbModelParam._m0[40u]), vec4(_1601, _1602, _1603, 1.0));
        _1655 = dot(vec3(isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0)), isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0)), isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1646) ? 0.0 : (isnan(0.0) ? _1646 : max(0.0, _1646))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1655 = 1.0;
    }
    float _1659 = (_1655 * cbModelParam._m0[1u].x) + (_1644 * (1.0 - cbModelParam._m0[1u].x));
    float _1669 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _689);
    float _1670 = isnan(_1669) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1669 : min(cbModelParam._m0[25u].z, _1669));
    float _1751;
    float _1753;
    float _1755;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1718 = fma(_922, cbModelParam._m0[13u].z, fma(_918, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _914)) + cbModelParam._m0[13u].w;
        float _1722 = fma(_922, cbModelParam._m0[14u].z, fma(_918, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _914)) + cbModelParam._m0[14u].w;
        float _1726 = fma(_922, cbModelParam._m0[15u].z, fma(_918, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _914)) + cbModelParam._m0[15u].w;
        float _1729 = fma(_862, cbModelParam._m0[13u].z, fma(_861, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _860));
        float _1732 = fma(_862, cbModelParam._m0[14u].z, fma(_861, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _860));
        float _1735 = fma(_862, cbModelParam._m0[15u].z, fma(_861, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _860));
        float _1763;
        if (_1729 > 0.0)
        {
            _1763 = abs((1.0 - _1718) / _1729);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1729 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1718 + 1.0) / _1729);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1763 = frontier_phi_14_12_ladder;
        }
        float _1966;
        if (_1732 > 0.0)
        {
            _1966 = abs((1.0 - _1722) / _1732);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1732 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1722 + 1.0) / _1732);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1966 = frontier_phi_23_19_ladder;
        }
        float _2220;
        if (_1735 > 0.0)
        {
            _2220 = abs((1.0 - _1726) / _1735);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1735 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1726 + 1.0) / _1735);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2220 = frontier_phi_35_30_ladder;
        }
        float _2222 = isnan(_1966) ? _1763 : (isnan(_1763) ? _1966 : min(_1763, _1966));
        float _2223 = isnan(_2220) ? _2222 : (isnan(_2222) ? _2220 : min(_2222, _2220));
        float _2227 = (_2223 * _1729) + _1718;
        float _2228 = (_2223 * _1732) + _1722;
        float _2229 = (_2223 * _1735) + _1726;
        float _2230 = _2223 * 9.9999997473787516355514526367188e-05;
        float _2232 = (-1.0) - _2230;
        float _2234 = _2230 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2229 > _2234) || ((_2229 < _2232) || ((_2228 > _2234) || ((_2228 < _2232) || ((_2227 < _2232) || (_2227 > _2234))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2357 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2229, cbModelParam._m0[9u].z, fma(_2228, cbModelParam._m0[9u].y, _2227 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2229, cbModelParam._m0[10u].z, fma(_2228, cbModelParam._m0[10u].y, _2227 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2229, cbModelParam._m0[11u].z, fma(_2228, cbModelParam._m0[11u].y, _2227 * cbModelParam._m0[11u].x))), _1670);
            frontier_phi_13_35_ladder = _2357.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2357.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2357.x * cbModelParam._m0[1u].y;
        }
        _1751 = frontier_phi_13_35_ladder_2;
        _1753 = frontier_phi_13_35_ladder_1;
        _1755 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1739 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_860, _861, _862), _1670);
        _1751 = _1739.x * cbModelParam._m0[1u].y;
        _1753 = _1739.y * cbModelParam._m0[1u].y;
        _1755 = _1739.z * cbModelParam._m0[1u].y;
    }
    float _1759 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _689);
    float _1760 = isnan(_1759) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1759 : min(cbModelParam._m0[25u].w, _1759));
    float _1850;
    float _1852;
    float _1854;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1814 = fma(_922, cbModelParam._m0[21u].z, fma(_918, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _914)) + cbModelParam._m0[21u].w;
        float _1818 = fma(_922, cbModelParam._m0[22u].z, fma(_918, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _914)) + cbModelParam._m0[22u].w;
        float _1822 = fma(_922, cbModelParam._m0[23u].z, fma(_918, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _914)) + cbModelParam._m0[23u].w;
        float _1825 = fma(_862, cbModelParam._m0[21u].z, fma(_861, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _860));
        float _1828 = fma(_862, cbModelParam._m0[22u].z, fma(_861, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _860));
        float _1831 = fma(_862, cbModelParam._m0[23u].z, fma(_861, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _860));
        float _1971;
        if (_1825 > 0.0)
        {
            _1971 = abs((1.0 - _1814) / _1825);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1825 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1814 + 1.0) / _1825);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1971 = frontier_phi_25_21_ladder;
        }
        float _2247;
        if (_1828 > 0.0)
        {
            _2247 = abs((1.0 - _1818) / _1828);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1828 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1818 + 1.0) / _1828);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2247 = frontier_phi_37_32_ladder;
        }
        float _2460;
        if (_1831 > 0.0)
        {
            _2460 = abs((1.0 - _1822) / _1831);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1831 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1822 + 1.0) / _1831);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2460 = frontier_phi_46_43_ladder;
        }
        float _2462 = isnan(_2247) ? _1971 : (isnan(_1971) ? _2247 : min(_1971, _2247));
        float _2463 = isnan(_2460) ? _2462 : (isnan(_2462) ? _2460 : min(_2462, _2460));
        float _2467 = (_2463 * _1825) + _1814;
        float _2468 = (_2463 * _1828) + _1818;
        float _2469 = (_2463 * _1831) + _1822;
        float _2470 = _2463 * 9.9999997473787516355514526367188e-05;
        float _2471 = (-1.0) - _2470;
        float _2473 = _2470 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2469 > _2473) || ((_2469 < _2471) || ((_2468 > _2473) || ((_2468 < _2471) || ((_2467 < _2471) || (_2467 > _2473))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2703 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2469, cbModelParam._m0[17u].z, fma(_2468, cbModelParam._m0[17u].y, _2467 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2469, cbModelParam._m0[18u].z, fma(_2468, cbModelParam._m0[18u].y, _2467 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2469, cbModelParam._m0[19u].z, fma(_2468, cbModelParam._m0[19u].y, _2467 * cbModelParam._m0[19u].x))), _1760);
            frontier_phi_22_46_ladder = _2703.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2703.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2703.x * cbModelParam._m0[1u].z;
        }
        _1850 = frontier_phi_22_46_ladder_2;
        _1852 = frontier_phi_22_46_ladder_1;
        _1854 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1834 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_860, _861, _862), _1760);
        _1850 = _1834.x * cbModelParam._m0[1u].z;
        _1852 = _1834.y * cbModelParam._m0[1u].z;
        _1854 = _1834.z * cbModelParam._m0[1u].z;
    }
    float _1867 = (((_885 * _837) + _886) * _852) * ((cbModelParam._m0[1u].w * (_1850 - _1751)) + _1751);
    float _1869 = (((_885 * _839) + _886) * _852) * ((cbModelParam._m0[1u].w * (_1852 - _1753)) + _1753);
    float _1871 = (((_885 * _840) + _886) * _852) * ((cbModelParam._m0[1u].w * (_1854 - _1755)) + _1755);
    float _1874 = fma(_1871, cbSceneParam._m0[89u].z, fma(_1869, cbSceneParam._m0[89u].y, _1867 * cbSceneParam._m0[89u].x));
    float _1877 = fma(_1871, cbSceneParam._m0[90u].z, fma(_1869, cbSceneParam._m0[90u].y, _1867 * cbSceneParam._m0[90u].x));
    float _1880 = fma(_1871, cbSceneParam._m0[91u].z, fma(_1869, cbSceneParam._m0[91u].y, _1867 * cbSceneParam._m0[91u].x));
    uvec4 _1890 = floatBitsToUint(cbInstanceData._m0[_812 + 5u]);
    uint _1892 = _1890.x * 14u;
    uint _1893 = _1892 + 13u;
    float _1900 = _852 + (-1.0);
    float _1905 = (cbLight._m0[_1893].x * _1900) + 1.0;
    float _1906 = (cbLight._m0[_1893].y * _1900) + 1.0;
    float _1907 = (cbLight._m0[_1893].z * _1900) + 1.0;
    float _1908 = (cbLight._m0[_1893].w * _1900) + 1.0;
    uint _1909 = _1892 + 5u;
    float _1915 = isnan(1.0) ? _1906 : (isnan(_1906) ? 1.0 : min(_1906, 1.0));
    uint _1919 = _1892 + 4u;
    float _1925 = isnan(1.0) ? _1905 : (isnan(_1905) ? 1.0 : min(_1905, 1.0));
    uint _1929 = _1892 | 1u;
    float _1940 = dot(vec3(cbLight._m0[_1892].xyz), vec3(_686, _687, _688));
    float _1943 = dot(vec3(cbLight._m0[_1929].xyz), vec3(_686, _687, _688));
    float _4114 = isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0));
    float _4125 = isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0));
    float _1948 = (isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0))) * 0.3183098733425140380859375;
    float _1950 = (isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0))) * 0.3183098733425140380859375;
    float _1957 = ((cbLight._m0[_1909].x * _1915) * _1950) + ((cbLight._m0[_1919].x * _1925) * _1948);
    float _1958 = ((_1915 * cbLight._m0[_1909].y) * _1950) + ((_1925 * cbLight._m0[_1919].y) * _1948);
    float _1959 = ((_1915 * cbLight._m0[_1909].z) * _1950) + ((_1925 * cbLight._m0[_1919].z) * _1948);
    uvec4 _1963 = floatBitsToUint(cbLight._m0[_1892 + 12u]);
    bool _1965 = _1963.x == 0u;
    float _1976;
    float _1978;
    float _1980;
    if (_1965)
    {
        _1976 = _1957;
        _1978 = _1958;
        _1980 = _1959;
    }
    else
    {
        uint _1984 = _1892 + 6u;
        float _2000 = (dot(vec3(cbLight._m0[_1892 + 2u].xyz), vec3(_686, _687, _688)) * 0.5) + 0.5;
        float _2001 = _2000 * _2000;
        float _4136 = isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0));
        float _2002 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
        float _2003 = isnan(1.0) ? _1907 : (isnan(_1907) ? 1.0 : min(_1907, 1.0));
        _1976 = (((cbLight._m0[_1984].x * 0.3183098733425140380859375) * _2002) * _2003) + _1957;
        _1978 = (((cbLight._m0[_1984].y * 0.3183098733425140380859375) * _2002) * _2003) + _1958;
        _1980 = (((cbLight._m0[_1984].z * 0.3183098733425140380859375) * _2002) * _2003) + _1959;
    }
    bool _1983 = _1963.y == 0u;
    float _2021;
    float _2023;
    float _2025;
    if (_1983)
    {
        _2021 = _1976;
        _2023 = _1978;
        _2025 = _1980;
    }
    else
    {
        uint _2191 = _1892 + 7u;
        float _2207 = (dot(vec3(cbLight._m0[_1892 + 3u].xyz), vec3(_686, _687, _688)) * 0.5) + 0.5;
        float _2208 = _2207 * _2207;
        float _4152 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
        float _2209 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
        float _2210 = isnan(1.0) ? _1908 : (isnan(_1908) ? 1.0 : min(_1908, 1.0));
        _2021 = (((cbLight._m0[_2191].x * 0.3183098733425140380859375) * _2209) * _2210) + _1976;
        _2023 = (((cbLight._m0[_2191].y * 0.3183098733425140380859375) * _2209) * _2210) + _1978;
        _2025 = (((cbLight._m0[_2191].z * 0.3183098733425140380859375) * _2209) * _2210) + _1980;
    }
    uint _2028 = _1892 + 8u;
    float _2041 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1892].w)) * _689) * 0.949999988079071044921875);
    float _2042 = _2041 * _2041;
    float _2043 = cbLight._m0[_1892].x + _766;
    float _2044 = cbLight._m0[_1892].y + _767;
    float _2045 = cbLight._m0[_1892].z + _768;
    float _2049 = inversesqrt(dot(vec3(_2043, _2044, _2045), vec3(_2043, _2044, _2045)));
    float _2050 = _2049 * _2043;
    float _2051 = _2049 * _2044;
    float _2052 = _2049 * _2045;
    float _2053 = dot(vec3(_686, _687, _688), vec3(cbLight._m0[_1892].xyz));
    float _4168 = isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0));
    float _2056 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
    float _4179 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
    float _2057 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
    float _2058 = dot(vec3(_686, _687, _688), vec3(_2050, _2051, _2052));
    float _4190 = isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0));
    float _2061 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
    float _2062 = dot(vec3(cbLight._m0[_1892].xyz), vec3(_2050, _2051, _2052));
    float _4201 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0));
    float _2066 = _2042 * _2042;
    float _2070 = ((_2061 * _2061) * (_2066 + (-1.0))) + 1.0;
    float _2078 = exp2(log2(1.0 - (isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0)))) * 5.0);
    float _2079 = 0.959999978542327880859375 - _834;
    float _2081 = 0.959999978542327880859375 - _835;
    float _2082 = 0.959999978542327880859375 - _836;
    float _2089 = 1.0 - _2042;
    float _2100 = (0.5 / (((_2057 * ((_2056 * _2089) + _2042)) + 9.9999999392252902907785028219223e-09) + (((_2057 * _2089) + _2042) * _2056))) * _2056;
    float _4212 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
    float _2102 = (isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0))) * (_2066 / ((_2070 * _2070) * 3.141590118408203125));
    uint _2113 = _1892 + 9u;
    float _2124 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1929].w)) * _689) * 0.949999988079071044921875);
    float _2125 = _2124 * _2124;
    float _2126 = cbLight._m0[_1929].x + _766;
    float _2127 = cbLight._m0[_1929].y + _767;
    float _2128 = cbLight._m0[_1929].z + _768;
    float _2132 = inversesqrt(dot(vec3(_2126, _2127, _2128), vec3(_2126, _2127, _2128)));
    float _2133 = _2132 * _2126;
    float _2134 = _2132 * _2127;
    float _2135 = _2132 * _2128;
    float _2136 = dot(vec3(_686, _687, _688), vec3(cbLight._m0[_1929].xyz));
    float _4223 = isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0));
    float _2139 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
    float _2140 = dot(vec3(_686, _687, _688), vec3(_2133, _2134, _2135));
    float _4234 = isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0));
    float _2143 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
    float _2144 = dot(vec3(cbLight._m0[_1929].xyz), vec3(_2133, _2134, _2135));
    float _4245 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
    float _2148 = _2125 * _2125;
    float _2152 = ((_2143 * _2143) * (_2148 + (-1.0))) + 1.0;
    float _2159 = exp2(log2(1.0 - (isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0)))) * 5.0);
    float _2166 = 1.0 - _2125;
    float _2176 = (0.5 / (((_2057 * ((_2139 * _2166) + _2125)) + 9.9999999392252902907785028219223e-09) + (((_2057 * _2166) + _2125) * _2139))) * _2139;
    float _4256 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
    float _2178 = (isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0))) * (_2148 / ((_2152 * _2152) * 3.141590118408203125));
    float _2188 = (((((_2159 * _2079) + _837) * cbLight._m0[_2113].x) * _2178) * _1915) + (((((_2078 * _2079) + _837) * cbLight._m0[_2028].x) * _2102) * _1925);
    float _2189 = (((((_2159 * _2081) + _839) * cbLight._m0[_2113].y) * _2178) * _1915) + (((((_2078 * _2081) + _839) * cbLight._m0[_2028].y) * _2102) * _1925);
    float _2190 = (((((_2159 * _2082) + _840) * cbLight._m0[_2113].z) * _2178) * _1915) + (((((_2078 * _2082) + _840) * cbLight._m0[_2028].z) * _2102) * _1925);
    float _2252;
    float _2254;
    float _2256;
    if (_1965)
    {
        _2252 = _2188;
        _2254 = _2189;
        _2256 = _2190;
    }
    else
    {
        uint _2258 = _1892 + 2u;
        uint _2262 = _1892 + 10u;
        float _2276 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2258].w)) * _689) * 0.949999988079071044921875);
        float _2277 = _2276 * _2276;
        float _2278 = cbLight._m0[_2258].x + _766;
        float _2279 = cbLight._m0[_2258].y + _767;
        float _2280 = cbLight._m0[_2258].z + _768;
        float _2284 = inversesqrt(dot(vec3(_2278, _2279, _2280), vec3(_2278, _2279, _2280)));
        float _2285 = _2284 * _2278;
        float _2286 = _2284 * _2279;
        float _2287 = _2284 * _2280;
        float _2288 = dot(vec3(_686, _687, _688), vec3(cbLight._m0[_2258].xyz));
        float _4267 = isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0));
        float _2291 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
        float _2292 = dot(vec3(_686, _687, _688), vec3(_2285, _2286, _2287));
        float _4278 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
        float _2295 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
        float _2296 = dot(vec3(cbLight._m0[_2258].xyz), vec3(_2285, _2286, _2287));
        float _4289 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
        float _2300 = _2277 * _2277;
        float _2304 = ((_2295 * _2295) * (_2300 + (-1.0))) + 1.0;
        float _2311 = exp2(log2(1.0 - (isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0)))) * 5.0);
        float _2318 = 1.0 - _2277;
        float _2328 = (0.5 / (((_2057 * ((_2291 * _2318) + _2277)) + 9.9999999392252902907785028219223e-09) + (((_2057 * _2318) + _2277) * _2291))) * _2291;
        float _4300 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
        float _2330 = (isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0))) * (_2300 / ((_2304 * _2304) * 3.141590118408203125));
        float _2331 = isnan(1.0) ? _1907 : (isnan(_1907) ? 1.0 : min(_1907, 1.0));
        _2252 = (((((_2311 * _2079) + _837) * cbLight._m0[_2262].x) * _2330) * _2331) + _2188;
        _2254 = (((((_2311 * _2081) + _839) * cbLight._m0[_2262].y) * _2330) * _2331) + _2189;
        _2256 = (((((_2311 * _2082) + _840) * cbLight._m0[_2262].z) * _2330) * _2331) + _2190;
    }
    float _2366;
    float _2368;
    float _2370;
    if (_1983)
    {
        _2366 = _2252;
        _2368 = _2254;
        _2370 = _2256;
    }
    else
    {
        uint _2377 = _1892 + 3u;
        uint _2381 = _1892 + 11u;
        float _2395 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2377].w)) * _689) * 0.949999988079071044921875);
        float _2396 = _2395 * _2395;
        float _2397 = cbLight._m0[_2377].x + _766;
        float _2398 = cbLight._m0[_2377].y + _767;
        float _2399 = cbLight._m0[_2377].z + _768;
        float _2403 = inversesqrt(dot(vec3(_2397, _2398, _2399), vec3(_2397, _2398, _2399)));
        float _2404 = _2403 * _2397;
        float _2405 = _2403 * _2398;
        float _2406 = _2403 * _2399;
        float _2407 = dot(vec3(_686, _687, _688), vec3(cbLight._m0[_2377].xyz));
        float _4316 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
        float _2410 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
        float _2411 = dot(vec3(_686, _687, _688), vec3(_2404, _2405, _2406));
        float _4327 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0));
        float _2414 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
        float _2415 = dot(vec3(cbLight._m0[_2377].xyz), vec3(_2404, _2405, _2406));
        float _4338 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
        float _2419 = _2396 * _2396;
        float _2423 = ((_2414 * _2414) * (_2419 + (-1.0))) + 1.0;
        float _2430 = exp2(log2(1.0 - (isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0)))) * 5.0);
        float _2437 = 1.0 - _2396;
        float _2447 = (0.5 / (((_2057 * ((_2410 * _2437) + _2396)) + 9.9999999392252902907785028219223e-09) + (((_2057 * _2437) + _2396) * _2410))) * _2410;
        float _4349 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
        float _2449 = (isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0))) * (_2419 / ((_2423 * _2423) * 3.141590118408203125));
        float _2450 = isnan(1.0) ? _1908 : (isnan(_1908) ? 1.0 : min(_1908, 1.0));
        _2366 = (((((_2430 * _2079) + _837) * cbLight._m0[_2381].x) * _2449) * _2450) + _2252;
        _2368 = (((((_2430 * _2081) + _839) * cbLight._m0[_2381].y) * _2449) * _2450) + _2254;
        _2370 = (((((_2430 * _2082) + _840) * cbLight._m0[_2381].z) * _2449) * _2450) + _2256;
    }
    float _2585;
    float _2587;
    float _2589;
    float _2591;
    float _2593;
    float _2595;
    if (_1890.y == 0u)
    {
        float _2525 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2526 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2525;
        float _2527 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2525;
        float _2528 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2525;
        uvec4 _2540 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2541 = _2540.x;
        uint _2552 = uint((float(_2540.y) * floor(float(uint(cbSceneParam._m0[85u].y * _775) / _2541))) + floor(float(uint(cbSceneParam._m0[85u].x * _774) / _2541)));
        float _2562 = (log2(_2528 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2563 = isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : max(_2562, 0.0));
        uint _2566 = uint(isnan(14.0) ? _2563 : (isnan(_2563) ? 14.0 : min(_2563, 14.0)));
        uvec4 _2571 = texelFetch(g_lightClusterGridBuffer, int(((_2566 << 2u) + (_2552 << 6u)) >> 2u));
        uint _2572 = _2571.x;
        uint _2573 = _2540.z;
        float _2708;
        float _2710;
        float _2712;
        float _2714;
        float _2716;
        float _2718;
        if (((((1u << ((_2573 >> 4u) & 15u)) + 4294967295u) & _2572) == 0u) || ((_2573 & 240u) == 0u))
        {
            _2708 = 0.0;
            _2710 = 0.0;
            _2712 = 0.0;
            _2714 = 0.0;
            _2716 = 0.0;
            _2718 = 0.0;
        }
        else
        {
            float _2709;
            float _2711;
            float _2713;
            float _2715;
            float _2717;
            float _2719;
            float _2862 = 0.0;
            float _2863 = 0.0;
            float _2864 = 0.0;
            float _2865 = 0.0;
            float _2866 = 0.0;
            float _2867 = 0.0;
            uint _2868 = 0u;
            uint _2877;
            bool _2878;
            for (;;)
            {
                _2877 = texelFetch(g_lightClassification, int((((_2566 << 5u) + (_2552 << 9u)) + (_2868 << 2u)) >> 2u)).x;
                _2878 = _2877 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2878)
                {
                    frontier_phi_61_pred = _2862;
                    frontier_phi_61_pred_1 = _2867;
                    frontier_phi_61_pred_2 = _2866;
                    frontier_phi_61_pred_3 = _2865;
                    frontier_phi_61_pred_4 = _2864;
                    frontier_phi_61_pred_5 = _2863;
                }
                else
                {
                    float _2986;
                    float _2987;
                    float _2988;
                    float _2989;
                    float _2990;
                    float _2991;
                    uint _2992;
                    _2986 = _2862;
                    _2987 = _2863;
                    _2988 = _2864;
                    _2989 = _2865;
                    _2990 = _2866;
                    _2991 = _2867;
                    _2992 = _2877;
                    float _2918;
                    float _2919;
                    float _2920;
                    float _2921;
                    float _2922;
                    float _2923;
                    for (;;)
                    {
                        uint _2996 = uint(findLSB(_2992)) + (_2868 << 5u);
                        uint _2993 = (_2992 + 4294967295u) & _2992;
                        uint _2998 = _2996 * 48u;
                        vec4 _3012 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2998)).x, texelFetch(g_PointLightRenderingBuffer, int(_2998 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2998 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2998 + 3u)).x));
                        uint _3018 = (_2996 * 48u) + 4u;
                        vec4 _3031 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3018)).x, texelFetch(g_PointLightRenderingBuffer, int(_3018 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3018 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3018 + 3u)).x));
                        uint _3037 = (_2996 * 48u) + 8u;
                        vec3 _3048 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3037)).x, texelFetch(g_PointLightRenderingBuffer, int(_3037 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3037 + 2u)).x));
                        float _3052 = _3012.x - _2526;
                        float _3053 = _3012.y - _2527;
                        float _3054 = _3012.z - _2528;
                        float _3055 = dot(vec3(_3052, _3053, _3054), vec3(_3052, _3053, _3054));
                        float _3058 = inversesqrt(_3055);
                        float _3059 = _3058 * _3052;
                        float _3060 = _3058 * _3053;
                        float _3061 = _3058 * _3054;
                        float _3062 = dot(vec3(_793, _796, _799), vec3(_3059, _3060, _3061));
                        float _3067 = 1.0 - (_3055 * _3012.w);
                        float _4375 = isnan(0.0) ? _3067 : (isnan(_3067) ? 0.0 : max(_3067, 0.0));
                        float _3068 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
                        float _3069 = sqrt(_3055) * _3031.w;
                        float _3072 = 1.39999997615814208984375 / (_3069 + 1.39999997615814208984375);
                        float _3073 = _3072 * _3072;
                        float _3076 = ((1.0 - _3073) * _3062) + _3073;
                        float _3079 = _3069 * _3069;
                        float _3083 = ((isnan(0.0) ? _3076 : (isnan(_3076) ? 0.0 : max(_3076, 0.0))) * _3068) / ((_3079 * 0.699999988079071044921875) + 1.0);
                        float _3087 = (-0.0) - _2526;
                        float _3088 = (-0.0) - _2527;
                        float _3089 = (-0.0) - _2528;
                        float _3093 = inversesqrt(dot(vec3(_3087, _3088, _3089), vec3(_3087, _3088, _3089)));
                        float _3094 = _3093 * _3087;
                        float _3095 = _3093 * _3088;
                        float _3096 = _3093 * _3089;
                        float _3104 = exp2(log2(1.0 / ((_3079 * 3.5) + 5.0)) * 0.25);
                        float _3105 = 1.0 - _868;
                        float _3112 = sqrt(1.0 - ((1.0 - (_3105 * _3105)) * (1.0 - (_3104 * _3104))));
                        float _3113 = _3112 * _3112;
                        float _3114 = _3113 * _3113;
                        float _3115 = _3094 + _3059;
                        float _3116 = _3095 + _3060;
                        float _3117 = _3096 + _3061;
                        float _3121 = inversesqrt(dot(vec3(_3115, _3116, _3117), vec3(_3115, _3116, _3117)));
                        float _3125 = dot(vec3(_793, _796, _799), vec3(_3094, _3095, _3096));
                        float _4391 = isnan(0.0) ? _3125 : (isnan(_3125) ? 0.0 : max(_3125, 0.0));
                        float _3128 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
                        float _3129 = dot(vec3(_793, _796, _799), vec3(_3121 * _3115, _3121 * _3116, _3121 * _3117));
                        float _4402 = isnan(0.0) ? _3129 : (isnan(_3129) ? 0.0 : max(_3129, 0.0));
                        float _3132 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
                        float _3136 = ((_3132 * _3132) * (_3114 + (-1.0))) + 1.0;
                        float _3137 = _3072 * _3113;
                        float _3138 = _3137 * _3137;
                        float _3141 = ((1.0 - _3138) * _3062) + _3138;
                        float _4413 = isnan(0.0) ? _3141 : (isnan(_3141) ? 0.0 : max(_3141, 0.0));
                        float _3142 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
                        float _3143 = 1.0 - _3113;
                        float _3153 = (0.5 / (((_3142 * ((_3128 * _3143) + _3113)) + 9.9999999392252902907785028219223e-09) + (((_3142 * _3143) + _3113) * _3128))) * _3142;
                        float _4424 = isnan(0.0) ? _3153 : (isnan(_3153) ? 0.0 : max(_3153, 0.0));
                        float _3164 = (((_3114 * 3.1415927410125732421875) * (isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0)))) / ((_3136 * _3136) * ((_3079 * 2.1991131305694580078125) + 3.141590118408203125))) * _3068;
                        _2921 = (_3083 * _3031.x) + _2989;
                        _2922 = (_3083 * _3031.y) + _2990;
                        _2923 = (_3083 * _3031.z) + _2991;
                        _2918 = (_3164 * _3048.x) + _2986;
                        _2919 = (_3164 * _3048.y) + _2987;
                        _2920 = (_3164 * _3048.z) + _2988;
                        if (_2993 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2986 = _2918;
                            _2987 = _2919;
                            _2988 = _2920;
                            _2989 = _2921;
                            _2990 = _2922;
                            _2991 = _2923;
                            _2992 = _2993;
                        }
                    }
                    frontier_phi_61_pred = _2918;
                    frontier_phi_61_pred_1 = _2923;
                    frontier_phi_61_pred_2 = _2922;
                    frontier_phi_61_pred_3 = _2921;
                    frontier_phi_61_pred_4 = _2920;
                    frontier_phi_61_pred_5 = _2919;
                }
                _2709 = frontier_phi_61_pred;
                _2719 = frontier_phi_61_pred_1;
                _2717 = frontier_phi_61_pred_2;
                _2715 = frontier_phi_61_pred_3;
                _2713 = frontier_phi_61_pred_4;
                _2711 = frontier_phi_61_pred_5;
                uint _2869 = _2868 + 1u;
                if (_2869 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2862 = _2709;
                    _2863 = _2711;
                    _2864 = _2713;
                    _2865 = _2715;
                    _2866 = _2717;
                    _2867 = _2719;
                    _2868 = _2869;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2708 = _2709;
            _2710 = _2711;
            _2712 = _2713;
            _2714 = _2715;
            _2716 = _2717;
            _2718 = _2719;
        }
        uvec4 _2722 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2723 = _2722.z;
        uint _2725 = (_2723 >> 8u) & 15u;
        float _2830;
        float _2832;
        float _2834;
        float _2836;
        float _2838;
        float _2840;
        if (((4294967295u << _2725) & _2572) == 0u)
        {
            _2830 = _2708;
            _2832 = _2710;
            _2834 = _2712;
            _2836 = _2714;
            _2838 = _2716;
            _2840 = _2718;
        }
        else
        {
            float _2855 = inversesqrt(dot(vec3(_2526, _2527, _2528), vec3(_2526, _2527, _2528)));
            float _2856 = _2855 * _2526;
            float _2857 = _2855 * _2527;
            float _2858 = _2855 * _2528;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2725 < ((_2723 >> 12u) & 15u))
            {
                float _2831;
                float _2833;
                float _2835;
                float _2837;
                float _2839;
                float _2841;
                float _2969 = _2708;
                float _2970 = _2710;
                float _2971 = _2712;
                float _2972 = _2714;
                float _2973 = _2716;
                float _2974 = _2718;
                uint _2975 = _2725;
                uint _2984;
                bool _2985;
                for (;;)
                {
                    _2984 = texelFetch(g_lightClassification, int((((_2566 << 5u) + (_2552 << 9u)) + (_2975 << 2u)) >> 2u)).x;
                    _2985 = _2984 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2985)
                    {
                        frontier_phi_67_pred = _2972;
                        frontier_phi_67_pred_1 = _2973;
                        frontier_phi_67_pred_2 = _2974;
                        frontier_phi_67_pred_3 = _2971;
                        frontier_phi_67_pred_4 = _2970;
                        frontier_phi_67_pred_5 = _2969;
                    }
                    else
                    {
                        float _3169;
                        float _3170;
                        float _3171;
                        float _3172;
                        float _3173;
                        float _3174;
                        float _3462;
                        float _3463;
                        float _3464;
                        float _3465;
                        float _3466;
                        float _3467;
                        float _3182 = _2969;
                        float _3183 = _2970;
                        float _3184 = _2971;
                        float _3185 = _2972;
                        float _3186 = _2973;
                        float _3187 = _2974;
                        uint _3188 = _2984;
                        uint _3189;
                        vec4 _3214;
                        float _3215;
                        vec4 _3230;
                        vec3 _3242;
                        vec4 _3257;
                        vec4 _3272;
                        float _3318;
                        bool _3319;
                        for (;;)
                        {
                            uint _3199 = ((_2975 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3188));
                            _3189 = (_3188 + 4294967295u) & _3188;
                            uint _3201 = _3199 * 40u;
                            _3214 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3201)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 3u)).x));
                            _3215 = _3214.w;
                            uint _3217 = (_3199 * 40u) + 4u;
                            _3230 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3217)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 3u)).x));
                            uint _3232 = (_3199 * 40u) + 8u;
                            _3242 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3232)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 2u)).x));
                            uint _3244 = (_3199 * 40u) + 16u;
                            _3257 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3244)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 3u)).x));
                            uint _3259 = (_3199 * 40u) + 20u;
                            _3272 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3259)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3259 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3259 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3259 + 3u)).x));
                            uint _3274 = (_3199 * 40u) + 24u;
                            vec4 _3287 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3274)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3274 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3274 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3274 + 3u)).x));
                            uint _3293 = (_3199 * 40u) + 28u;
                            vec4 _3306 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3293)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 3u)).x));
                            _3318 = fma(_2528, _3306.z, fma(_2527, _3306.y, _3306.x * _2526)) + _3306.w;
                            _3319 = !((fma(_2528, _3287.z, fma(_2527, _3287.y, _3287.x * _2526)) + _3287.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3319)
                            {
                                float _3346 = _3214.x - _2526;
                                float _3347 = _3214.y - _2527;
                                float _3348 = _3214.z - _2528;
                                float _3349 = dot(vec3(_3346, _3347, _3348), vec3(_3346, _3347, _3348));
                                float _3352 = inversesqrt(_3349);
                                float _3353 = _3352 * _3346;
                                float _3354 = _3352 * _3347;
                                float _3355 = _3352 * _3348;
                                float _3359 = 1.0 - (_3349 / (_3215 * _3215));
                                float _4435 = isnan(0.0) ? _3359 : (isnan(_3359) ? 0.0 : max(_3359, 0.0));
                                float _3360 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
                                float _3364 = sqrt(_3349) * _3230.w;
                                float _3366 = 1.39999997615814208984375 / (_3364 + 1.39999997615814208984375);
                                float _3367 = _3366 * _3366;
                                float _3370 = ((1.0 - _3367) * dot(vec3(_3353, _3354, _3355), vec3(_793, _796, _799))) + _3367;
                                float _3373 = _3364 * _3364;
                                float _3377 = (fma(_2528, _3257.z, fma(_2527, _3257.y, _3257.x * _2526)) + _3257.w) / _3318;
                                float _3378 = (fma(_2528, _3272.z, fma(_2527, _3272.y, _3272.x * _2526)) + _3272.w) / _3318;
                                float _3382 = 1.0 - dot(vec2(_3377, _3378), vec2(_3377, _3378));
                                float _4451 = isnan(0.0) ? _3382 : (isnan(_3382) ? 0.0 : max(_3382, 0.0));
                                float _3383 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
                                float _3384 = _3383 * (((isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : max(_3370, 0.0))) * _3360) / ((_3373 * 0.699999988079071044921875) + 1.0));
                                float _3396 = exp2(log2(1.0 / ((_3373 * 3.5) + 5.0)) * 0.25);
                                float _3397 = 1.0 - _868;
                                float _3404 = sqrt(1.0 - ((1.0 - (_3397 * _3397)) * (1.0 - (_3396 * _3396))));
                                float _3405 = _3404 * _3404;
                                float _3406 = _3405 * _3405;
                                float _3407 = _3353 - _2856;
                                float _3408 = _3354 - _2857;
                                float _3409 = _3355 - _2858;
                                float _3413 = inversesqrt(dot(vec3(_3407, _3408, _3409), vec3(_3407, _3408, _3409)));
                                float _3417 = dot(vec3(_793, _796, _799), vec3((-0.0) - _2856, (-0.0) - _2857, (-0.0) - _2858));
                                float _4462 = isnan(0.0) ? _3417 : (isnan(_3417) ? 0.0 : max(_3417, 0.0));
                                float _3420 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
                                float _3421 = dot(vec3(_793, _796, _799), vec3(_3413 * _3407, _3413 * _3408, _3413 * _3409));
                                float _4473 = isnan(0.0) ? _3421 : (isnan(_3421) ? 0.0 : max(_3421, 0.0));
                                float _3424 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
                                float _3428 = ((_3424 * _3424) * (_3406 + (-1.0))) + 1.0;
                                float _3429 = _3366 * _3405;
                                float _3430 = _3429 * _3429;
                                float _3436 = ((1.0 - _3430) * dot(vec3(_793, _796, _799), vec3(_3353, _3354, _3355))) + _3430;
                                float _4484 = isnan(0.0) ? _3436 : (isnan(_3436) ? 0.0 : max(_3436, 0.0));
                                float _3437 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
                                float _3438 = 1.0 - _3405;
                                float _3448 = (0.5 / (((_3437 * ((_3420 * _3438) + _3405)) + 9.9999999392252902907785028219223e-09) + (((_3437 * _3438) + _3405) * _3420))) * _3437;
                                float _4495 = isnan(0.0) ? _3448 : (isnan(_3448) ? 0.0 : max(_3448, 0.0));
                                float _3458 = (_3383 * _3360) * (((_3406 * 3.1415927410125732421875) * (isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0)))) / ((_3428 * _3428) * ((_3373 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3458 * _3242.x;
                                frontier_phi_73_pred_1 = _3458 * _3242.y;
                                frontier_phi_73_pred_2 = _3384 * _3230.z;
                                frontier_phi_73_pred_3 = _3384 * _3230.y;
                                frontier_phi_73_pred_4 = _3384 * _3230.x;
                                frontier_phi_73_pred_5 = _3458 * _3242.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3462 = frontier_phi_73_pred;
                            _3463 = frontier_phi_73_pred_1;
                            _3467 = frontier_phi_73_pred_2;
                            _3466 = frontier_phi_73_pred_3;
                            _3465 = frontier_phi_73_pred_4;
                            _3464 = frontier_phi_73_pred_5;
                            _3172 = _3465 + _3185;
                            _3173 = _3466 + _3186;
                            _3174 = _3467 + _3187;
                            _3169 = _3462 + _3182;
                            _3170 = _3463 + _3183;
                            _3171 = _3464 + _3184;
                            if (_3189 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3182 = _3169;
                                _3183 = _3170;
                                _3184 = _3171;
                                _3185 = _3172;
                                _3186 = _3173;
                                _3187 = _3174;
                                _3188 = _3189;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3172;
                        frontier_phi_67_pred_1 = _3173;
                        frontier_phi_67_pred_2 = _3174;
                        frontier_phi_67_pred_3 = _3171;
                        frontier_phi_67_pred_4 = _3170;
                        frontier_phi_67_pred_5 = _3169;
                    }
                    _2837 = frontier_phi_67_pred;
                    _2839 = frontier_phi_67_pred_1;
                    _2841 = frontier_phi_67_pred_2;
                    _2835 = frontier_phi_67_pred_3;
                    _2833 = frontier_phi_67_pred_4;
                    _2831 = frontier_phi_67_pred_5;
                    uint _2976 = _2975 + 1u;
                    if (_2976 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2969 = _2831;
                        _2970 = _2833;
                        _2971 = _2835;
                        _2972 = _2837;
                        _2973 = _2839;
                        _2974 = _2841;
                        _2975 = _2976;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2839;
                frontier_phi_55_56_ladder_1 = _2841;
                frontier_phi_55_56_ladder_2 = _2837;
                frontier_phi_55_56_ladder_3 = _2835;
                frontier_phi_55_56_ladder_4 = _2833;
                frontier_phi_55_56_ladder_5 = _2831;
            }
            else
            {
                frontier_phi_55_56_ladder = _2716;
                frontier_phi_55_56_ladder_1 = _2718;
                frontier_phi_55_56_ladder_2 = _2714;
                frontier_phi_55_56_ladder_3 = _2712;
                frontier_phi_55_56_ladder_4 = _2710;
                frontier_phi_55_56_ladder_5 = _2708;
            }
            _2830 = frontier_phi_55_56_ladder_5;
            _2832 = frontier_phi_55_56_ladder_4;
            _2834 = frontier_phi_55_56_ladder_3;
            _2836 = frontier_phi_55_56_ladder_2;
            _2838 = frontier_phi_55_56_ladder;
            _2840 = frontier_phi_55_56_ladder_1;
        }
        float _2845 = isnan(1.0) ? _852 : (isnan(_852) ? 1.0 : min(_852, 1.0));
        _2585 = (_2845 * _2836) + _2021;
        _2587 = (_2845 * _2838) + _2023;
        _2589 = (_2845 * _2840) + _2025;
        _2591 = ((_2830 * _837) * _2845) + _2366;
        _2593 = ((_2832 * _839) * _2845) + _2368;
        _2595 = ((_2834 * _840) * _2845) + _2370;
    }
    else
    {
        _2585 = _2021;
        _2587 = _2023;
        _2589 = _2025;
        _2591 = _2366;
        _2593 = _2368;
        _2595 = _2370;
    }
    uint _2601 = _813 + uint(cbMatDynParam._m0[0u].w);
    float _2609 = ((cbMtdParam._m0[20u].x * cbMtdParam._m0[25u].x) * _628.x) * cbInstanceData._m0[_2601].x;
    float _2612 = ((cbMtdParam._m0[20u].y * cbMtdParam._m0[25u].x) * _628.y) * cbInstanceData._m0[_2601].y;
    float _2615 = ((cbMtdParam._m0[20u].z * cbMtdParam._m0[25u].x) * _628.z) * cbInstanceData._m0[_2601].z;
    float _4511 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
    float _4522 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
    float _4533 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _2632 = (((isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0))) * (_2585 + ((isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0))) * _852))) + ((_2591 + ((isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0))) * _1659)) * cbPerFrame._m0[3u].x)) + _2609;
    float _2634 = (_2612 + ((_2593 + ((isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0))) * _1659)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0))) * (_2587 + ((isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0))) * _852)));
    float _2636 = (_2615 + ((_2595 + ((isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0))) * _1659)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0))) * (_2589 + ((isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0))) * _852)));
    float _4559 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2649 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
    uint _2650 = _812 + 6u;
    float _2658 = _774 / cbSceneParam._m0[86u].x;
    float _2659 = _775 / cbSceneParam._m0[86u].y;
    vec4 _2673 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2658, _2659, (log2((isnan(cbSceneParam._m0[77u].w) ? _709 : (isnan(_709) ? cbSceneParam._m0[77u].w : min(_709, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2675 = _2673.x;
    float _2676 = _2673.y;
    float _2677 = _2673.z;
    float _2678 = _2673.w;
    float _2771;
    float _2773;
    float _2775;
    float _2777;
    if (_709 > cbSceneParam._m0[78u].w)
    {
        float _2733 = isnan(_709) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _709 : min(cbSceneParam._m0[80u].w, _709));
        float _2734 = _2733 / _709;
        float _2745 = _2734 * _759;
        float _2746 = _760 * _2734;
        float _2747 = (-0.0) - _2746;
        float _2749 = _2734 * _761;
        float _2751 = (cbSceneParam._m0[77u].w * _2747) / _2733;
        float _2752 = _2751 + cbSceneParam._m0[79u].w;
        float _2753 = cbSceneParam._m0[79u].w - _2746;
        float _2759 = sqrt(((_2745 * _2745) + (_2746 * _2746)) + (_2749 * _2749));
        float _2762 = (1.0 - (cbSceneParam._m0[77u].w / _2733)) * _2759;
        float _2767 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2769 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2931;
        if (abs((_2747 - _2751) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2931 = ((((_2752 > 0.0) ? exp2(_2767 * _2752) : (2.0 - exp2(_2769 * _2752))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2762;
        }
        else
        {
            float _2891 = 1.0 / cbSceneParam._m0[80u].x;
            float _2892 = isnan(_2753) ? _2752 : (isnan(_2752) ? _2753 : max(_2752, _2753));
            float _2893 = isnan(_2753) ? _2752 : (isnan(_2752) ? _2753 : min(_2752, _2753));
            float _2902 = isnan(0.0) ? _2892 : (isnan(_2892) ? 0.0 : min(_2892, 0.0));
            float _2903 = isnan(0.0) ? _2893 : (isnan(_2893) ? 0.0 : min(_2893, 0.0));
            _2931 = ((abs(_2759 / _2747) * cbSceneParam._m0[80u].y) * ((((_2902 - _2903) * 2.0) - ((exp2(_2767 * (isnan(0.0) ? _2892 : (isnan(_2892) ? 0.0 : max(_2892, 0.0)))) - exp2(_2767 * (isnan(0.0) ? _2893 : (isnan(_2893) ? 0.0 : max(_2893, 0.0))))) * _2891)) - ((exp2(_2769 * _2902) - exp2(_2769 * _2903)) * _2891))) + (_2762 * cbSceneParam._m0[80u].z);
        }
        vec4 _2933 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2658, _2659, 1.0), 0.0);
        float _2942 = exp2((_2931 * (-1.44269502162933349609375)) * (1.0 - _2933.w));
        float _2943 = log2(_2942);
        float _2959 = log2(_2678);
        _2771 = (exp2(_2959 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2943 * cbSceneParam._m0[78u].x)) * _2933.x) / cbSceneParam._m0[78u].x)) + _2675;
        _2773 = (exp2(_2959 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2943 * cbSceneParam._m0[78u].y)) * _2933.y) / cbSceneParam._m0[78u].y)) + _2676;
        _2775 = (exp2(_2959 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2943 * cbSceneParam._m0[78u].z)) * _2933.z) / cbSceneParam._m0[78u].z)) + _2677;
        _2777 = _2942 * _2678;
    }
    else
    {
        _2771 = _2675;
        _2773 = _2676;
        _2775 = _2677;
        _2777 = _2678;
    }
    float _2789 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2790 = _2789 == 3.0;
    float _2791 = log2(_2777);
    float _2795 = exp2(_2791 * cbSceneParam._m0[78u].x);
    float _2796 = exp2(_2791 * cbSceneParam._m0[78u].y);
    float _2797 = exp2(_2791 * cbSceneParam._m0[78u].z);
    float _2798 = _2795 * (isnan(0.0) ? _2632 : (isnan(_2632) ? 0.0 : max(_2632, 0.0)));
    float _2799 = _2796 * (isnan(0.0) ? _2634 : (isnan(_2634) ? 0.0 : max(_2634, 0.0)));
    float _2800 = _2797 * (isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : max(_2636, 0.0)));
    float _2809 = (_2789 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2809 * (_2790 ? _2798 : (_2798 + (cbSceneParam._m0[72u].w * _2771)));
    SV_Target.y = _2809 * (_2790 ? _2799 : (_2799 + (cbSceneParam._m0[72u].w * _2773)));
    SV_Target.z = _2809 * (_2790 ? _2800 : (_2800 + (cbSceneParam._m0[72u].w * _2775)));
    SV_Target.w = cbInstanceData._m0[_2650].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2609) * _2649) * _2795) * _2809;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2612) * _2649) * _2796) * _2809;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2615) * _2649) * _2797) * _2809;
    SV_Target_1.w = cbInstanceData._m0[_2650].w;
}


