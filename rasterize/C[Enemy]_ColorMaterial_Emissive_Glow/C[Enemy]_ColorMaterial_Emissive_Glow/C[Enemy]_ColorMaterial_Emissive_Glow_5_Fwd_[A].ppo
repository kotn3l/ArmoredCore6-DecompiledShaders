#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[29];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 12) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_14;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_16;
layout(set = 0, binding = 4) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_17;
layout(set = 0, binding = 5) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_18;
layout(set = 0, binding = 6) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 9) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2DArray C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_0;
layout(set = 0, binding = 14) uniform texture2DArray C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1462;
float _3885;
float _3886;
float _3887;
float _3888;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _219 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _220 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _221 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _227 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _234 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _241 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _262 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_1) + cbTextureTilingScale._m0[5u].w));
    vec4 _281 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_1) + cbTextureTilingScale._m0[10u].w));
    float _294 = exp2(log2(_281.w * cbMtdParam._m0[25u].z) * cbMtdParam._m0[22u].x);
    float _295 = isnan(0.0) ? _294 : (isnan(_294) ? 0.0 : max(_294, 0.0));
    float _296 = isnan(1.0) ? _295 : (isnan(_295) ? 1.0 : min(_295, 1.0));
    vec4 _310 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _314 = _310.z;
    float _323 = exp2(log2(_314 * cbMtdParam._m0[22u].y) * cbMtdParam._m0[21u].y);
    float _324 = isnan(0.0) ? _323 : (isnan(_323) ? 0.0 : max(_323, 0.0));
    float _325 = isnan(1.0) ? _324 : (isnan(_324) ? 1.0 : min(_324, 1.0));
    vec4 _337 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _340 = _337.y;
    float _343 = (_337.x + (-0.02500000037252902984619140625)) * 8.0;
    float _347 = roundEven(5.0 - _343);
    float _348 = isnan(0.0) ? _347 : (isnan(_347) ? 0.0 : max(_347, 0.0));
    float _349 = isnan(4.0) ? _348 : (isnan(_348) ? 4.0 : min(_348, 4.0));
    float _362 = floor(_349);
    vec4 _365 = texture(sampler2DArray(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w, _362));
    float _197[6];
    float _198[6];
    float _199[6];
    _197[0u] = cbMtdParam._m0[17u].x;
    _198[0u] = cbMtdParam._m0[17u].y;
    _199[0u] = cbMtdParam._m0[17u].z;
    _197[1u] = cbMtdParam._m0[15u].x;
    _198[1u] = cbMtdParam._m0[15u].y;
    _199[1u] = cbMtdParam._m0[15u].z;
    _197[2u] = cbMtdParam._m0[14u].x;
    _198[2u] = cbMtdParam._m0[14u].y;
    _199[2u] = cbMtdParam._m0[14u].z;
    _197[3u] = cbMtdParam._m0[13u].x;
    _198[3u] = cbMtdParam._m0[13u].y;
    _199[3u] = cbMtdParam._m0[13u].z;
    _197[4u] = cbMtdParam._m0[12u].x;
    _198[4u] = cbMtdParam._m0[12u].y;
    _199[4u] = cbMtdParam._m0[12u].z;
    _197[5u] = cbMtdParam._m0[18u].x;
    _198[5u] = cbMtdParam._m0[18u].y;
    _199[5u] = cbMtdParam._m0[18u].z;
    float _429 = roundEven(_343);
    float _430 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    uint _432 = uint(int(isnan(5.0) ? _430 : (isnan(_430) ? 5.0 : min(_430, 5.0))));
    vec4 _462 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _473 = cbMtdParam._m0[9u].x * _462.x;
    float _474 = cbMtdParam._m0[9u].y * _462.y;
    float _475 = cbMtdParam._m0[9u].z * _462.z;
    float _482 = ((((((_197[_432] - cbMtdParam._m0[10u].x) * _340) + cbMtdParam._m0[10u].x) * _365.x) - _473) * _325) + _473;
    float _483 = ((((((_198[_432] - cbMtdParam._m0[10u].y) * _340) + cbMtdParam._m0[10u].y) * _365.y) - _474) * _325) + _474;
    float _484 = ((((((_199[_432] - cbMtdParam._m0[10u].z) * _340) + cbMtdParam._m0[10u].z) * _365.z) - _475) * _325) + _475;
    float _490 = exp2(log2(_310.w) * cbMtdParam._m0[22u].w);
    vec4 _503 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _523 = (((cbMtdParam._m0[16u].x * _503.x) - _482) * _490) + _482;
    float _524 = (((cbMtdParam._m0[16u].y * _503.y) - _483) * _490) + _483;
    float _525 = (((cbMtdParam._m0[16u].z * _503.z) - _484) * _490) + _484;
    vec4 _538 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _563 = (_281.x * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].x * _538.x) - _523) * _296) + _523);
    float _565 = (_281.y * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].y * _538.y) - _524) * _296) + _524);
    float _567 = (_281.z * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].z * _538.z) - _525) * _296) + _525);
    vec4 _579 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_17, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w));
    float _598 = TEXCOORD_3.x - ((cbMtdParam._m0[23u].x * (1.0 - TEXCOORD_3.x)) * (_262.x + 0.00999999977648258209228515625));
    float _600 = _598 * (cbMtdParam._m0[23u].z + 1.0);
    float _3937 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _601 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
    float _608 = (_601 * ((cbMtdParam._m0[11u].x * _579.x) - _563)) + _563;
    float _609 = (((cbMtdParam._m0[11u].y * _579.y) - _565) * _601) + _565;
    float _610 = (((cbMtdParam._m0[11u].z * _579.z) - _567) * _601) + _567;
    float _192[5];
    float _193[5];
    _192[0u] = cbMtdParam._m0[25u].w;
    _193[0u] = cbMtdParam._m0[26u].x;
    _192[1u] = cbMtdParam._m0[27u].w;
    _193[1u] = cbMtdParam._m0[28u].x;
    _192[2u] = cbMtdParam._m0[27u].y;
    _193[2u] = cbMtdParam._m0[27u].z;
    _192[3u] = cbMtdParam._m0[26u].w;
    _193[3u] = cbMtdParam._m0[27u].x;
    _192[4u] = cbMtdParam._m0[26u].y;
    _193[4u] = cbMtdParam._m0[26u].z;
    float _648 = isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : max(_349, 0.0));
    uint _650 = uint(int(isnan(4.0) ? _648 : (isnan(_648) ? 4.0 : min(_648, 4.0))));
    float _657 = ((_193[_650] - cbMtdParam._m0[21u].z) * _325) + cbMtdParam._m0[21u].z;
    float _660 = ((cbMtdParam._m0[21u].w - _657) * _490) + _657;
    float _663 = ((cbMtdParam._m0[24u].y - _660) * _296) + _660;
    float _668 = (cbMtdParam._m0[23u].y + 1.0) * _598;
    float _3958 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _669 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
    float _671 = _663 - (_663 * _669);
    vec4 _684 = texture(sampler2DArray(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w, _362));
    vec4 _701 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _703 = _701.x;
    float _704 = _701.y;
    float _709 = cbMtdParam._m0[21u].x + _701.z;
    float _712 = (((_684.z + _192[_650]) - _709) * _325) + _709;
    vec4 _724 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_1) + cbTextureTilingScale._m0[11u].w));
    float _735 = (((_724.z - _712) + cbMtdParam._m0[25u].y) * _490) + _712;
    float _741 = ((((_314 * 2.0) * _735) - _735) * cbMtdParam._m0[23u].w) + _735;
    vec4 _753 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_1) + cbTextureTilingScale._m0[12u].w));
    float _764 = (((cbMtdParam._m0[22u].z + _753.z) - _741) * _296) + _741;
    vec4 _776 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _788 = ((_776.z - _764) * _669) + _764;
    vec4 _807 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _826 = ((_684.x - _703) * _325) + _703;
    float _827 = ((_684.y - _704) * _325) + _704;
    float _832 = ((_724.x - _826) * _490) + _826;
    float _833 = ((_724.y - _827) * _490) + _827;
    float _842 = ((((_753.x - _832) * _296) + _832) * 2.0) + (-1.0);
    float _843 = ((((_753.y - _833) * _296) + _833) * 2.0) + (-1.0);
    float _844 = dot(vec2(_842, _843), vec2(_842, _843));
    float _3969 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
    float _849 = sqrt(1.0 - (isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0))));
    float _858 = ((cbMtdParam._m0[24u].z * ((_310.x * 2.0) + (-1.0))) + _842) + (((((_776.x * 2.0) + (-1.0)) * TEXCOORD_3.x) * cbMtdParam._m0[24u].w) * _669);
    float _859 = ((cbMtdParam._m0[24u].z * ((_310.y * 2.0) + (-1.0))) + _843) + (((((_776.y * 2.0) + (-1.0)) * TEXCOORD_3.y) * cbMtdParam._m0[24u].w) * _669);
    float _861 = gl_FragCoord.x * 0.125;
    float _863 = gl_FragCoord.y * 0.125;
    float _873 = fma(_849, _234 * NORMAL.x, fma(_859, _241 * TANGENT.x, (_227 * _219) * _858));
    float _876 = fma(_849, _234 * NORMAL.y, fma(_859, _241 * TANGENT.y, (_227 * _220) * _858));
    float _879 = fma(_849, _234 * NORMAL.z, fma(_859, _241 * TANGENT.z, (_227 * _221) * _858));
    float _883 = inversesqrt(dot(vec3(_873, _876, _879), vec3(_873, _876, _879)));
    float _884 = _883 * _873;
    float _885 = _883 * _876;
    float _886 = _883 * _879;
    float _3980 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    float _887 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
    float _3991 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _4002 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    float _4013 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _4024 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _891 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
    if (!(cbMtdParam._m0[24u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_861, _863)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _911 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _951 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _961 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _951);
    float _962 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _951);
    float _963 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _951);
    float _967 = inversesqrt(dot(vec3(_961, _962, _963), vec3(_961, _962, _963)));
    float _968 = _961 * _967;
    float _969 = _962 * _967;
    float _970 = _963 * _967;
    vec4 _972 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_861, _863));
    float _974 = _972.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1144 = sqrt(((_961 * _961) + (_962 * _962)) + (_963 * _963));
        float _1150 = (cbMatDynParam._m0[5u].x * _1144) + cbMatDynParam._m0[5u].y;
        float _4035 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1151 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
        float _1155 = (cbMatDynParam._m0[5u].z * _1144) + cbMatDynParam._m0[5u].w;
        float _4046 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0))) - _1151)) + _1151) < ((_974 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _985 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _986 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1004 = fma(_886, cbSceneParam._m0[5u].z, fma(_885, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _884));
    float _1007 = fma(_886, cbSceneParam._m0[6u].z, fma(_885, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _884));
    float _1010 = fma(_886, cbSceneParam._m0[7u].z, fma(_885, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _884));
    uint _1023 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1024 = _1023 + 9u;
    uint _1025 = _1024 + uint(cbMatDynParam._m0[0u].w);
    float _1031 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0)))) * cbInstanceData._m0[_1025].x;
    float _1032 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0)))) * cbInstanceData._m0[_1025].y;
    float _1033 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0)))) * cbInstanceData._m0[_1025].z;
    float _4057 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
    float _1034 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
    float _4068 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
    float _1035 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
    float _4079 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
    float _1036 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
    float _1037 = 1.0 - _891;
    float _1038 = _1034 * _1037;
    float _1039 = _1035 * _1037;
    float _1040 = _1036 * _1037;
    float _1045 = (_1034 + (-0.039999999105930328369140625)) * _891;
    float _1046 = (_1035 + (-0.039999999105930328369140625)) * _891;
    float _1047 = (_1036 + (-0.039999999105930328369140625)) * _891;
    float _1048 = _1045 + 0.039999999105930328369140625;
    float _1050 = _1046 + 0.039999999105930328369140625;
    float _1051 = _1047 + 0.039999999105930328369140625;
    vec4 _1060 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _985, cbSceneParam._m0[86u].y * _986));
    float _1063 = _1060.x * TEXCOORD_3.w;
    float _1064 = dot(vec3(_884, _885, _886), vec3(_968, _969, _970));
    float _1067 = _1064 * 2.0;
    float _1071 = (_1067 * _884) - _968;
    float _1072 = (_1067 * _885) - _969;
    float _1073 = (_1067 * _886) - _970;
    float _1077 = abs(dot(vec3(_968, _969, _970), vec3(_884, _885, _886)));
    float _4090 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
    float _1079 = sqrt(_887);
    float _1090 = exp2((_1079 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1079 * 3.0));
    float _1096 = (1.0 - _1090) * ((_1079 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1097 = _1090 * _1079;
    float _1125 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1129 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1133 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1461;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1186 = fma(_1133, cbModelParam._m0[26u].z, fma(_1129, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1125));
        float _1190 = fma(_1133, cbModelParam._m0[27u].z, fma(_1129, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1125));
        float _1194 = fma(_1133, cbModelParam._m0[28u].z, fma(_1129, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1125));
        float _1219 = _1125 + _884;
        float _1220 = _1129 + _885;
        float _1221 = _1133 + _886;
        float _1231 = fma(_1221, cbModelParam._m0[26u].z, fma(_1220, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1219)) - _1186;
        float _1232 = fma(_1221, cbModelParam._m0[27u].z, fma(_1220, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1219)) - _1190;
        float _1233 = fma(_1221, cbModelParam._m0[28u].z, fma(_1220, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1219)) - _1194;
        float _1237 = inversesqrt(dot(vec3(_1231, _1232, _1233), vec3(_1231, _1232, _1233)));
        float _1250 = ((_1237 * _1231) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1186 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1251 = ((_1237 * _1232) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1190 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1252 = ((_1237 * _1233) / cbModelParam._m0[34u].z) + ((((((_1194 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1255 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1250, _1251, _1252), 0.0);
        vec4 _1262 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1250, _1251, _1252), 0.0);
        vec4 _1269 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1250, _1251, _1252), 0.0);
        vec4 _1276 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1250, _1251, _1252), 0.0);
        float _1289 = exp2((_1255.w + (-0.5)) * 20.0) * 2.0;
        float _1290 = _1289 * (_1255.x + (-0.5));
        float _1291 = _1289 * (_1255.y + (-0.5));
        float _1292 = _1289 * (_1255.z + (-0.5));
        float _1299 = exp2((_1262.w + (-0.5)) * 20.0) * 2.0;
        float _1300 = _1299 * (_1262.x + (-0.5));
        float _1301 = _1299 * (_1262.y + (-0.5));
        float _1302 = _1299 * (_1262.z + (-0.5));
        float _1309 = exp2((_1269.w + (-0.5)) * 20.0) * 2.0;
        float _1310 = _1309 * (_1269.x + (-0.5));
        float _1311 = _1309 * (_1269.y + (-0.5));
        float _1312 = _1309 * (_1269.z + (-0.5));
        float _1319 = exp2((_1276.w + (-0.5)) * 20.0) * 2.0;
        float _1320 = _1319 * (_1276.x + (-0.5));
        float _1321 = _1319 * (_1276.y + (-0.5));
        float _1322 = _1319 * (_1276.z + (-0.5));
        float _1323 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1324 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1325 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1326 = _1290 * 0.5;
        float _1327 = _1300 * 0.5;
        float _1328 = _1310 * 0.5;
        float _1329 = dot(vec3(_1326, _1327, _1328), vec3(_1326, _1327, _1328));
        float _1334 = (_1329 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1329);
        float _1343 = (dot(vec3(_884, _885, _886), vec3(_1334 * _1326, _1334 * _1327, _1334 * _1328)) + 1.0) * 0.5;
        float _4116 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1353 = sqrt(((_1327 * _1327) + (_1326 * _1326)) + (_1328 * _1328)) / (_1323 + 9.9999997473787516355514526367188e-06);
        float _4127 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1354 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
        float _1355 = _1354 * 2.0;
        float _1359 = (1.0 - _1354) / (_1354 + 1.0);
        float _4138 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1360 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
        float _1369 = ((((1.0 - _1360) * (_1355 + 2.0)) * exp2(log2(isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0))) * (_1355 + 1.0))) + _1360) * _1323;
        float _1370 = _1291 * 0.5;
        float _1371 = _1301 * 0.5;
        float _1372 = _1311 * 0.5;
        float _1373 = dot(vec3(_1370, _1371, _1372), vec3(_1370, _1371, _1372));
        float _1378 = (_1373 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1373);
        float _1386 = (dot(vec3(_884, _885, _886), vec3(_1378 * _1370, _1378 * _1371, _1378 * _1372)) + 1.0) * 0.5;
        float _4149 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1395 = sqrt(((_1371 * _1371) + (_1370 * _1370)) + (_1372 * _1372)) / (_1324 + 9.9999997473787516355514526367188e-06);
        float _4160 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1396 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
        float _1397 = _1396 * 2.0;
        float _1401 = (1.0 - _1396) / (_1396 + 1.0);
        float _4171 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1402 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
        float _1411 = ((((1.0 - _1402) * (_1397 + 2.0)) * exp2(log2(isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0))) * (_1397 + 1.0))) + _1402) * _1324;
        float _1412 = _1292 * 0.5;
        float _1413 = _1302 * 0.5;
        float _1414 = _1312 * 0.5;
        float _1415 = dot(vec3(_1412, _1413, _1414), vec3(_1412, _1413, _1414));
        float _1420 = (_1415 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1415);
        float _1428 = (dot(vec3(_884, _885, _886), vec3(_1420 * _1412, _1420 * _1413, _1420 * _1414)) + 1.0) * 0.5;
        float _4182 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1437 = sqrt(((_1413 * _1413) + (_1412 * _1412)) + (_1414 * _1414)) / (_1325 + 9.9999997473787516355514526367188e-06);
        float _4193 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1438 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
        float _1439 = _1438 * 2.0;
        float _1443 = (1.0 - _1438) / (_1438 + 1.0);
        float _4204 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1444 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
        float _1453 = ((((1.0 - _1444) * (_1439 + 2.0)) * exp2(log2(isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0))) * (_1439 + 1.0))) + _1444) * _1325;
        _1461 = _1292;
        _1463 = _1291;
        _1464 = _1290;
        _1465 = _1302;
        _1466 = _1301;
        _1467 = _1300;
        _1468 = _1312;
        _1469 = _1311;
        _1470 = _1310;
        _1471 = _1325;
        _1472 = _1324;
        _1473 = _1323;
        _1474 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0)));
        _1475 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0)));
        _1476 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0)));
    }
    else
    {
        _1461 = _1462;
        _1463 = _1462;
        _1464 = _1462;
        _1465 = _1462;
        _1466 = _1462;
        _1467 = _1462;
        _1468 = _1462;
        _1469 = _1462;
        _1470 = _1462;
        _1471 = _1462;
        _1472 = _1462;
        _1473 = _1462;
        _1474 = 0.0;
        _1475 = 0.0;
        _1476 = 0.0;
    }
    float _1771;
    float _1772;
    float _1773;
    float _1774;
    float _1775;
    float _1776;
    float _1777;
    float _1778;
    float _1779;
    float _1780;
    float _1781;
    float _1782;
    float _1783;
    float _1784;
    float _1785;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1502 = fma(_1133, cbModelParam._m0[30u].z, fma(_1129, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1125));
        float _1506 = fma(_1133, cbModelParam._m0[31u].z, fma(_1129, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1125));
        float _1510 = fma(_1133, cbModelParam._m0[32u].z, fma(_1129, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1125));
        float _1533 = _1125 + _884;
        float _1534 = _1129 + _885;
        float _1535 = _1133 + _886;
        float _1545 = fma(_1535, cbModelParam._m0[30u].z, fma(_1534, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1533)) - _1502;
        float _1546 = fma(_1535, cbModelParam._m0[31u].z, fma(_1534, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1533)) - _1506;
        float _1547 = fma(_1535, cbModelParam._m0[32u].z, fma(_1534, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1533)) - _1510;
        float _1551 = inversesqrt(dot(vec3(_1545, _1546, _1547), vec3(_1545, _1546, _1547)));
        float _1564 = ((_1551 * _1545) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1502 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1565 = ((_1551 * _1546) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1506 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1566 = ((_1551 * _1547) / cbModelParam._m0[35u].z) + ((((((_1510 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1568 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1564, _1565, _1566), 0.0);
        vec4 _1575 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1564, _1565, _1566), 0.0);
        vec4 _1582 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1564, _1565, _1566), 0.0);
        vec4 _1589 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1564, _1565, _1566), 0.0);
        float _1601 = exp2((_1568.w + (-0.5)) * 20.0) * 2.0;
        float _1602 = _1601 * (_1568.x + (-0.5));
        float _1603 = _1601 * (_1568.y + (-0.5));
        float _1604 = _1601 * (_1568.z + (-0.5));
        float _1611 = exp2((_1575.w + (-0.5)) * 20.0) * 2.0;
        float _1612 = _1611 * (_1575.x + (-0.5));
        float _1613 = _1611 * (_1575.y + (-0.5));
        float _1614 = _1611 * (_1575.z + (-0.5));
        float _1621 = exp2((_1582.w + (-0.5)) * 20.0) * 2.0;
        float _1622 = _1621 * (_1582.x + (-0.5));
        float _1623 = _1621 * (_1582.y + (-0.5));
        float _1624 = _1621 * (_1582.z + (-0.5));
        float _1631 = exp2((_1589.w + (-0.5)) * 20.0) * 2.0;
        float _1632 = _1631 * (_1589.x + (-0.5));
        float _1633 = _1631 * (_1589.y + (-0.5));
        float _1634 = _1631 * (_1589.z + (-0.5));
        float _1635 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
        float _1636 = isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0));
        float _1637 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
        float _1638 = _1602 * 0.5;
        float _1639 = _1612 * 0.5;
        float _1640 = _1622 * 0.5;
        float _1641 = dot(vec3(_1638, _1639, _1640), vec3(_1638, _1639, _1640));
        float _1646 = (_1641 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1641);
        float _1654 = (dot(vec3(_884, _885, _886), vec3(_1646 * _1638, _1646 * _1639, _1646 * _1640)) + 1.0) * 0.5;
        float _4245 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
        float _1663 = sqrt(((_1639 * _1639) + (_1638 * _1638)) + (_1640 * _1640)) / (_1635 + 9.9999997473787516355514526367188e-06);
        float _4256 = isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0));
        float _1664 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
        float _1665 = _1664 * 2.0;
        float _1669 = (1.0 - _1664) / (_1664 + 1.0);
        float _4267 = isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0));
        float _1670 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
        float _1679 = ((((1.0 - _1670) * (_1665 + 2.0)) * exp2(log2(isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0))) * (_1665 + 1.0))) + _1670) * _1635;
        float _1680 = _1603 * 0.5;
        float _1681 = _1613 * 0.5;
        float _1682 = _1623 * 0.5;
        float _1683 = dot(vec3(_1680, _1681, _1682), vec3(_1680, _1681, _1682));
        float _1688 = (_1683 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1683);
        float _1696 = (dot(vec3(_884, _885, _886), vec3(_1688 * _1680, _1688 * _1681, _1688 * _1682)) + 1.0) * 0.5;
        float _4278 = isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0));
        float _1705 = sqrt(((_1681 * _1681) + (_1680 * _1680)) + (_1682 * _1682)) / (_1636 + 9.9999997473787516355514526367188e-06);
        float _4289 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
        float _1706 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
        float _1707 = _1706 * 2.0;
        float _1711 = (1.0 - _1706) / (_1706 + 1.0);
        float _4300 = isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0));
        float _1712 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
        float _1721 = ((((1.0 - _1712) * (_1707 + 2.0)) * exp2(log2(isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0))) * (_1707 + 1.0))) + _1712) * _1636;
        float _1722 = _1604 * 0.5;
        float _1723 = _1614 * 0.5;
        float _1724 = _1624 * 0.5;
        float _1725 = dot(vec3(_1722, _1723, _1724), vec3(_1722, _1723, _1724));
        float _1730 = (_1725 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1725);
        float _1738 = (dot(vec3(_884, _885, _886), vec3(_1730 * _1722, _1730 * _1723, _1730 * _1724)) + 1.0) * 0.5;
        float _4311 = isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0));
        float _1747 = sqrt(((_1723 * _1723) + (_1722 * _1722)) + (_1724 * _1724)) / (_1637 + 9.9999997473787516355514526367188e-06);
        float _4322 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
        float _1748 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
        float _1749 = _1748 * 2.0;
        float _1753 = (1.0 - _1748) / (_1748 + 1.0);
        float _4333 = isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0));
        float _1754 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
        float _1763 = ((((1.0 - _1754) * (_1749 + 2.0)) * exp2(log2(isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0))) * (_1749 + 1.0))) + _1754) * _1637;
        _1771 = _1604;
        _1772 = _1603;
        _1773 = _1602;
        _1774 = _1614;
        _1775 = _1613;
        _1776 = _1612;
        _1777 = _1624;
        _1778 = _1623;
        _1779 = _1622;
        _1780 = _1637;
        _1781 = _1636;
        _1782 = _1635;
        _1783 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0)));
        _1784 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0)));
        _1785 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0)));
    }
    else
    {
        _1771 = _1462;
        _1772 = _1462;
        _1773 = _1462;
        _1774 = _1462;
        _1775 = _1462;
        _1776 = _1462;
        _1777 = _1462;
        _1778 = _1462;
        _1779 = _1462;
        _1780 = _1462;
        _1781 = _1462;
        _1782 = _1462;
        _1783 = 0.0;
        _1784 = 0.0;
        _1785 = 0.0;
    }
    float _1795 = (cbModelParam._m0[1u].x * (_1783 - _1474)) + _1474;
    float _1796 = (cbModelParam._m0[1u].x * (_1784 - _1475)) + _1475;
    float _1797 = (cbModelParam._m0[1u].x * (_1785 - _1476)) + _1476;
    float _1818 = fma(_1797, cbSceneParam._m0[89u].z, fma(_1796, cbSceneParam._m0[89u].y, _1795 * cbSceneParam._m0[89u].x));
    float _1821 = fma(_1797, cbSceneParam._m0[90u].z, fma(_1796, cbSceneParam._m0[90u].y, _1795 * cbSceneParam._m0[90u].x));
    float _1824 = fma(_1797, cbSceneParam._m0[91u].z, fma(_1796, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1795));
    float _1839 = _1071 * 0.5;
    float _1840 = _1072 * 0.5;
    float _1841 = _1073 * 0.5;
    float _1842 = dot(vec4(_1839, _1840, _1841, 1.0), vec4(_1773, _1776, _1779, _1782));
    float _1845 = dot(vec4(_1839, _1840, _1841, 1.0), vec4(_1772, _1775, _1778, _1781));
    float _1848 = dot(vec4(_1839, _1840, _1841, 1.0), vec4(_1771, _1774, _1777, _1780));
    float _1882;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1855 = dot(vec4(_1839, _1840, _1841, 1.0), vec4(_1461, _1465, _1468, _1471));
        float _1859 = dot(vec4(_1839, _1840, _1841, 1.0), vec4(_1463, _1466, _1469, _1472));
        float _1863 = dot(vec4(_1839, _1840, _1841, 1.0), vec4(_1464, _1467, _1470, _1473));
        float _1870 = dot(vec4(cbModelParam._m0[39u]), vec4(_1839, _1840, _1841, 1.0));
        _1882 = dot(vec3(isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0)), isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0)), isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1870) ? 0.0 : (isnan(0.0) ? _1870 : max(0.0, _1870))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1882 = 1.0;
    }
    float _1893;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1884 = dot(vec4(cbModelParam._m0[40u]), vec4(_1839, _1840, _1841, 1.0));
        _1893 = dot(vec3(isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0)), isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0)), isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1884) ? 0.0 : (isnan(0.0) ? _1884 : max(0.0, _1884))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1893 = 1.0;
    }
    float _1897 = (_1893 * cbModelParam._m0[1u].x) + (_1882 * (1.0 - cbModelParam._m0[1u].x));
    float _1907 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _887);
    float _1908 = isnan(_1907) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1907 : min(cbModelParam._m0[25u].z, _1907));
    float _1988;
    float _1990;
    float _1992;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1955 = fma(_1133, cbModelParam._m0[13u].z, fma(_1129, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1125)) + cbModelParam._m0[13u].w;
        float _1959 = fma(_1133, cbModelParam._m0[14u].z, fma(_1129, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1125)) + cbModelParam._m0[14u].w;
        float _1963 = fma(_1133, cbModelParam._m0[15u].z, fma(_1129, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1125)) + cbModelParam._m0[15u].w;
        float _1966 = fma(_1073, cbModelParam._m0[13u].z, fma(_1072, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1071));
        float _1969 = fma(_1073, cbModelParam._m0[14u].z, fma(_1072, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1071));
        float _1972 = fma(_1073, cbModelParam._m0[15u].z, fma(_1072, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1071));
        float _2000;
        if (_1966 > 0.0)
        {
            _2000 = abs((1.0 - _1955) / _1966);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1966 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1955 + 1.0) / _1966);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _2000 = frontier_phi_19_17_ladder;
        }
        float _2202;
        if (_1969 > 0.0)
        {
            _2202 = abs((1.0 - _1959) / _1969);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1969 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1959 + 1.0) / _1969);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2202 = frontier_phi_28_24_ladder;
        }
        float _2456;
        if (_1972 > 0.0)
        {
            _2456 = abs((1.0 - _1963) / _1972);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1972 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1963 + 1.0) / _1972);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2456 = frontier_phi_40_35_ladder;
        }
        float _2458 = isnan(_2202) ? _2000 : (isnan(_2000) ? _2202 : min(_2000, _2202));
        float _2459 = isnan(_2456) ? _2458 : (isnan(_2458) ? _2456 : min(_2458, _2456));
        float _2463 = (_2459 * _1966) + _1955;
        float _2464 = (_2459 * _1969) + _1959;
        float _2465 = (_2459 * _1972) + _1963;
        float _2466 = _2459 * 9.9999997473787516355514526367188e-05;
        float _2468 = (-1.0) - _2466;
        float _2470 = _2466 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2465 > _2470) || ((_2465 < _2468) || ((_2464 > _2470) || ((_2464 < _2468) || ((_2463 < _2468) || (_2463 > _2470))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2593 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2465, cbModelParam._m0[9u].z, fma(_2464, cbModelParam._m0[9u].y, _2463 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2465, cbModelParam._m0[10u].z, fma(_2464, cbModelParam._m0[10u].y, _2463 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2465, cbModelParam._m0[11u].z, fma(_2464, cbModelParam._m0[11u].y, _2463 * cbModelParam._m0[11u].x))), _1908);
            frontier_phi_18_40_ladder = _2593.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2593.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2593.x * cbModelParam._m0[1u].y;
        }
        _1988 = frontier_phi_18_40_ladder_2;
        _1990 = frontier_phi_18_40_ladder_1;
        _1992 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1976 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1071, _1072, _1073), _1908);
        _1988 = _1976.x * cbModelParam._m0[1u].y;
        _1990 = _1976.y * cbModelParam._m0[1u].y;
        _1992 = _1976.z * cbModelParam._m0[1u].y;
    }
    float _1996 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _887);
    float _1997 = isnan(_1996) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1996 : min(cbModelParam._m0[25u].w, _1996));
    float _2086;
    float _2088;
    float _2090;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2050 = fma(_1133, cbModelParam._m0[21u].z, fma(_1129, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1125)) + cbModelParam._m0[21u].w;
        float _2054 = fma(_1133, cbModelParam._m0[22u].z, fma(_1129, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1125)) + cbModelParam._m0[22u].w;
        float _2058 = fma(_1133, cbModelParam._m0[23u].z, fma(_1129, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1125)) + cbModelParam._m0[23u].w;
        float _2061 = fma(_1073, cbModelParam._m0[21u].z, fma(_1072, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1071));
        float _2064 = fma(_1073, cbModelParam._m0[22u].z, fma(_1072, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1071));
        float _2067 = fma(_1073, cbModelParam._m0[23u].z, fma(_1072, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1071));
        float _2207;
        if (_2061 > 0.0)
        {
            _2207 = abs((1.0 - _2050) / _2061);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_2061 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_2050 + 1.0) / _2061);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2207 = frontier_phi_30_26_ladder;
        }
        float _2483;
        if (_2064 > 0.0)
        {
            _2483 = abs((1.0 - _2054) / _2064);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_2064 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_2054 + 1.0) / _2064);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2483 = frontier_phi_42_37_ladder;
        }
        float _2696;
        if (_2067 > 0.0)
        {
            _2696 = abs((1.0 - _2058) / _2067);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_2067 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_2058 + 1.0) / _2067);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2696 = frontier_phi_51_48_ladder;
        }
        float _2698 = isnan(_2483) ? _2207 : (isnan(_2207) ? _2483 : min(_2207, _2483));
        float _2699 = isnan(_2696) ? _2698 : (isnan(_2698) ? _2696 : min(_2698, _2696));
        float _2703 = (_2699 * _2061) + _2050;
        float _2704 = (_2699 * _2064) + _2054;
        float _2705 = (_2699 * _2067) + _2058;
        float _2706 = _2699 * 9.9999997473787516355514526367188e-05;
        float _2707 = (-1.0) - _2706;
        float _2709 = _2706 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2705 > _2709) || ((_2705 < _2707) || ((_2704 > _2709) || ((_2704 < _2707) || ((_2703 < _2707) || (_2703 > _2709))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2939 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2705, cbModelParam._m0[17u].z, fma(_2704, cbModelParam._m0[17u].y, _2703 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2705, cbModelParam._m0[18u].z, fma(_2704, cbModelParam._m0[18u].y, _2703 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2705, cbModelParam._m0[19u].z, fma(_2704, cbModelParam._m0[19u].y, _2703 * cbModelParam._m0[19u].x))), _1997);
            frontier_phi_27_51_ladder = _2939.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2939.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2939.x * cbModelParam._m0[1u].z;
        }
        _2086 = frontier_phi_27_51_ladder_2;
        _2088 = frontier_phi_27_51_ladder_1;
        _2090 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _2070 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1071, _1072, _1073), _1997);
        _2086 = _2070.x * cbModelParam._m0[1u].z;
        _2088 = _2070.y * cbModelParam._m0[1u].z;
        _2090 = _2070.z * cbModelParam._m0[1u].z;
    }
    float _2103 = (((_1096 * _1048) + _1097) * _1063) * ((cbModelParam._m0[1u].w * (_2086 - _1988)) + _1988);
    float _2105 = (((_1096 * _1050) + _1097) * _1063) * ((cbModelParam._m0[1u].w * (_2088 - _1990)) + _1990);
    float _2107 = (((_1096 * _1051) + _1097) * _1063) * ((cbModelParam._m0[1u].w * (_2090 - _1992)) + _1992);
    float _2110 = fma(_2107, cbSceneParam._m0[89u].z, fma(_2105, cbSceneParam._m0[89u].y, _2103 * cbSceneParam._m0[89u].x));
    float _2113 = fma(_2107, cbSceneParam._m0[90u].z, fma(_2105, cbSceneParam._m0[90u].y, _2103 * cbSceneParam._m0[90u].x));
    float _2116 = fma(_2107, cbSceneParam._m0[91u].z, fma(_2105, cbSceneParam._m0[91u].y, _2103 * cbSceneParam._m0[91u].x));
    uvec4 _2126 = floatBitsToUint(cbInstanceData._m0[_1023 + 5u]);
    uint _2128 = _2126.x * 14u;
    uint _2129 = _2128 + 13u;
    float _2136 = _1063 + (-1.0);
    float _2141 = (cbLight._m0[_2129].x * _2136) + 1.0;
    float _2142 = (cbLight._m0[_2129].y * _2136) + 1.0;
    float _2143 = (cbLight._m0[_2129].z * _2136) + 1.0;
    float _2144 = (cbLight._m0[_2129].w * _2136) + 1.0;
    uint _2145 = _2128 + 5u;
    float _2151 = isnan(1.0) ? _2142 : (isnan(_2142) ? 1.0 : min(_2142, 1.0));
    uint _2155 = _2128 + 4u;
    float _2161 = isnan(1.0) ? _2141 : (isnan(_2141) ? 1.0 : min(_2141, 1.0));
    uint _2165 = _2128 | 1u;
    float _2176 = dot(vec3(cbLight._m0[_2128].xyz), vec3(_884, _885, _886));
    float _2179 = dot(vec3(cbLight._m0[_2165].xyz), vec3(_884, _885, _886));
    float _4469 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
    float _4480 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
    float _2184 = (isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0))) * 0.3183098733425140380859375;
    float _2186 = (isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0))) * 0.3183098733425140380859375;
    float _2193 = ((cbLight._m0[_2145].x * _2151) * _2186) + ((cbLight._m0[_2155].x * _2161) * _2184);
    float _2194 = ((_2151 * cbLight._m0[_2145].y) * _2186) + ((_2161 * cbLight._m0[_2155].y) * _2184);
    float _2195 = ((_2151 * cbLight._m0[_2145].z) * _2186) + ((_2161 * cbLight._m0[_2155].z) * _2184);
    uvec4 _2199 = floatBitsToUint(cbLight._m0[_2128 + 12u]);
    bool _2201 = _2199.x == 0u;
    float _2212;
    float _2214;
    float _2216;
    if (_2201)
    {
        _2212 = _2193;
        _2214 = _2194;
        _2216 = _2195;
    }
    else
    {
        uint _2220 = _2128 + 6u;
        float _2236 = (dot(vec3(cbLight._m0[_2128 + 2u].xyz), vec3(_884, _885, _886)) * 0.5) + 0.5;
        float _2237 = _2236 * _2236;
        float _4491 = isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : max(_2237, 0.0));
        float _2238 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
        float _2239 = isnan(1.0) ? _2143 : (isnan(_2143) ? 1.0 : min(_2143, 1.0));
        _2212 = (((cbLight._m0[_2220].x * 0.3183098733425140380859375) * _2238) * _2239) + _2193;
        _2214 = (((cbLight._m0[_2220].y * 0.3183098733425140380859375) * _2238) * _2239) + _2194;
        _2216 = (((cbLight._m0[_2220].z * 0.3183098733425140380859375) * _2238) * _2239) + _2195;
    }
    bool _2219 = _2199.y == 0u;
    float _2257;
    float _2259;
    float _2261;
    if (_2219)
    {
        _2257 = _2212;
        _2259 = _2214;
        _2261 = _2216;
    }
    else
    {
        uint _2427 = _2128 + 7u;
        float _2443 = (dot(vec3(cbLight._m0[_2128 + 3u].xyz), vec3(_884, _885, _886)) * 0.5) + 0.5;
        float _2444 = _2443 * _2443;
        float _4507 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
        float _2445 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
        float _2446 = isnan(1.0) ? _2144 : (isnan(_2144) ? 1.0 : min(_2144, 1.0));
        _2257 = (((cbLight._m0[_2427].x * 0.3183098733425140380859375) * _2445) * _2446) + _2212;
        _2259 = (((cbLight._m0[_2427].y * 0.3183098733425140380859375) * _2445) * _2446) + _2214;
        _2261 = (((cbLight._m0[_2427].z * 0.3183098733425140380859375) * _2445) * _2446) + _2216;
    }
    uint _2264 = _2128 + 8u;
    float _2277 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2128].w)) * _887) * 0.949999988079071044921875);
    float _2278 = _2277 * _2277;
    float _2279 = cbLight._m0[_2128].x + _968;
    float _2280 = cbLight._m0[_2128].y + _969;
    float _2281 = cbLight._m0[_2128].z + _970;
    float _2285 = inversesqrt(dot(vec3(_2279, _2280, _2281), vec3(_2279, _2280, _2281)));
    float _2286 = _2285 * _2279;
    float _2287 = _2285 * _2280;
    float _2288 = _2285 * _2281;
    float _2289 = dot(vec3(_884, _885, _886), vec3(cbLight._m0[_2128].xyz));
    float _4523 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
    float _2292 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
    float _4534 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
    float _2293 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
    float _2294 = dot(vec3(_884, _885, _886), vec3(_2286, _2287, _2288));
    float _4545 = isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0));
    float _2297 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
    float _2298 = dot(vec3(cbLight._m0[_2128].xyz), vec3(_2286, _2287, _2288));
    float _4556 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
    float _2302 = _2278 * _2278;
    float _2306 = ((_2297 * _2297) * (_2302 + (-1.0))) + 1.0;
    float _2314 = exp2(log2(1.0 - (isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0)))) * 5.0);
    float _2315 = 0.959999978542327880859375 - _1045;
    float _2317 = 0.959999978542327880859375 - _1046;
    float _2318 = 0.959999978542327880859375 - _1047;
    float _2325 = 1.0 - _2278;
    float _2336 = (0.5 / (((_2293 * ((_2292 * _2325) + _2278)) + 9.9999999392252902907785028219223e-09) + (((_2293 * _2325) + _2278) * _2292))) * _2292;
    float _4567 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
    float _2338 = (isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0))) * (_2302 / ((_2306 * _2306) * 3.141590118408203125));
    uint _2349 = _2128 + 9u;
    float _2360 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2165].w)) * _887) * 0.949999988079071044921875);
    float _2361 = _2360 * _2360;
    float _2362 = cbLight._m0[_2165].x + _968;
    float _2363 = cbLight._m0[_2165].y + _969;
    float _2364 = cbLight._m0[_2165].z + _970;
    float _2368 = inversesqrt(dot(vec3(_2362, _2363, _2364), vec3(_2362, _2363, _2364)));
    float _2369 = _2368 * _2362;
    float _2370 = _2368 * _2363;
    float _2371 = _2368 * _2364;
    float _2372 = dot(vec3(_884, _885, _886), vec3(cbLight._m0[_2165].xyz));
    float _4578 = isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0));
    float _2375 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
    float _2376 = dot(vec3(_884, _885, _886), vec3(_2369, _2370, _2371));
    float _4589 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
    float _2379 = isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0));
    float _2380 = dot(vec3(cbLight._m0[_2165].xyz), vec3(_2369, _2370, _2371));
    float _4600 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
    float _2384 = _2361 * _2361;
    float _2388 = ((_2379 * _2379) * (_2384 + (-1.0))) + 1.0;
    float _2395 = exp2(log2(1.0 - (isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0)))) * 5.0);
    float _2402 = 1.0 - _2361;
    float _2412 = (0.5 / (((_2293 * ((_2375 * _2402) + _2361)) + 9.9999999392252902907785028219223e-09) + (((_2293 * _2402) + _2361) * _2375))) * _2375;
    float _4611 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
    float _2414 = (isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0))) * (_2384 / ((_2388 * _2388) * 3.141590118408203125));
    float _2424 = (((((_2395 * _2315) + _1048) * cbLight._m0[_2349].x) * _2414) * _2151) + (((((_2314 * _2315) + _1048) * cbLight._m0[_2264].x) * _2338) * _2161);
    float _2425 = (((((_2395 * _2317) + _1050) * cbLight._m0[_2349].y) * _2414) * _2151) + (((((_2314 * _2317) + _1050) * cbLight._m0[_2264].y) * _2338) * _2161);
    float _2426 = (((((_2395 * _2318) + _1051) * cbLight._m0[_2349].z) * _2414) * _2151) + (((((_2314 * _2318) + _1051) * cbLight._m0[_2264].z) * _2338) * _2161);
    float _2488;
    float _2490;
    float _2492;
    if (_2201)
    {
        _2488 = _2424;
        _2490 = _2425;
        _2492 = _2426;
    }
    else
    {
        uint _2494 = _2128 + 2u;
        uint _2498 = _2128 + 10u;
        float _2512 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2494].w)) * _887) * 0.949999988079071044921875);
        float _2513 = _2512 * _2512;
        float _2514 = cbLight._m0[_2494].x + _968;
        float _2515 = cbLight._m0[_2494].y + _969;
        float _2516 = cbLight._m0[_2494].z + _970;
        float _2520 = inversesqrt(dot(vec3(_2514, _2515, _2516), vec3(_2514, _2515, _2516)));
        float _2521 = _2520 * _2514;
        float _2522 = _2520 * _2515;
        float _2523 = _2520 * _2516;
        float _2524 = dot(vec3(_884, _885, _886), vec3(cbLight._m0[_2494].xyz));
        float _4622 = isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : max(_2524, 0.0));
        float _2527 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
        float _2528 = dot(vec3(_884, _885, _886), vec3(_2521, _2522, _2523));
        float _4633 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0));
        float _2531 = isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0));
        float _2532 = dot(vec3(cbLight._m0[_2494].xyz), vec3(_2521, _2522, _2523));
        float _4644 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0));
        float _2536 = _2513 * _2513;
        float _2540 = ((_2531 * _2531) * (_2536 + (-1.0))) + 1.0;
        float _2547 = exp2(log2(1.0 - (isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0)))) * 5.0);
        float _2554 = 1.0 - _2513;
        float _2564 = (0.5 / (((_2293 * ((_2527 * _2554) + _2513)) + 9.9999999392252902907785028219223e-09) + (((_2293 * _2554) + _2513) * _2527))) * _2527;
        float _4655 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
        float _2566 = (isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0))) * (_2536 / ((_2540 * _2540) * 3.141590118408203125));
        float _2567 = isnan(1.0) ? _2143 : (isnan(_2143) ? 1.0 : min(_2143, 1.0));
        _2488 = (((((_2547 * _2315) + _1048) * cbLight._m0[_2498].x) * _2566) * _2567) + _2424;
        _2490 = (((((_2547 * _2317) + _1050) * cbLight._m0[_2498].y) * _2566) * _2567) + _2425;
        _2492 = (((((_2547 * _2318) + _1051) * cbLight._m0[_2498].z) * _2566) * _2567) + _2426;
    }
    float _2602;
    float _2604;
    float _2606;
    if (_2219)
    {
        _2602 = _2488;
        _2604 = _2490;
        _2606 = _2492;
    }
    else
    {
        uint _2613 = _2128 + 3u;
        uint _2617 = _2128 + 11u;
        float _2631 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2613].w)) * _887) * 0.949999988079071044921875);
        float _2632 = _2631 * _2631;
        float _2633 = cbLight._m0[_2613].x + _968;
        float _2634 = cbLight._m0[_2613].y + _969;
        float _2635 = cbLight._m0[_2613].z + _970;
        float _2639 = inversesqrt(dot(vec3(_2633, _2634, _2635), vec3(_2633, _2634, _2635)));
        float _2640 = _2639 * _2633;
        float _2641 = _2639 * _2634;
        float _2642 = _2639 * _2635;
        float _2643 = dot(vec3(_884, _885, _886), vec3(cbLight._m0[_2613].xyz));
        float _4671 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0));
        float _2646 = isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0));
        float _2647 = dot(vec3(_884, _885, _886), vec3(_2640, _2641, _2642));
        float _4682 = isnan(0.0) ? _2647 : (isnan(_2647) ? 0.0 : max(_2647, 0.0));
        float _2650 = isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0));
        float _2651 = dot(vec3(cbLight._m0[_2613].xyz), vec3(_2640, _2641, _2642));
        float _4693 = isnan(0.0) ? _2651 : (isnan(_2651) ? 0.0 : max(_2651, 0.0));
        float _2655 = _2632 * _2632;
        float _2659 = ((_2650 * _2650) * (_2655 + (-1.0))) + 1.0;
        float _2666 = exp2(log2(1.0 - (isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0)))) * 5.0);
        float _2673 = 1.0 - _2632;
        float _2683 = (0.5 / (((_2293 * ((_2646 * _2673) + _2632)) + 9.9999999392252902907785028219223e-09) + (((_2293 * _2673) + _2632) * _2646))) * _2646;
        float _4704 = isnan(0.0) ? _2683 : (isnan(_2683) ? 0.0 : max(_2683, 0.0));
        float _2685 = (isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0))) * (_2655 / ((_2659 * _2659) * 3.141590118408203125));
        float _2686 = isnan(1.0) ? _2144 : (isnan(_2144) ? 1.0 : min(_2144, 1.0));
        _2602 = (((((_2666 * _2315) + _1048) * cbLight._m0[_2617].x) * _2685) * _2686) + _2488;
        _2604 = (((((_2666 * _2317) + _1050) * cbLight._m0[_2617].y) * _2685) * _2686) + _2490;
        _2606 = (((((_2666 * _2318) + _1051) * cbLight._m0[_2617].z) * _2685) * _2686) + _2492;
    }
    float _2821;
    float _2823;
    float _2825;
    float _2827;
    float _2829;
    float _2831;
    if (_2126.y == 0u)
    {
        float _2761 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2762 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2761;
        float _2763 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2761;
        float _2764 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2761;
        uvec4 _2776 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2777 = _2776.x;
        uint _2788 = uint((float(_2776.y) * floor(float(uint(cbSceneParam._m0[85u].y * _986) / _2777))) + floor(float(uint(cbSceneParam._m0[85u].x * _985) / _2777)));
        float _2798 = (log2(_2764 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2799 = isnan(0.0) ? _2798 : (isnan(_2798) ? 0.0 : max(_2798, 0.0));
        uint _2802 = uint(isnan(14.0) ? _2799 : (isnan(_2799) ? 14.0 : min(_2799, 14.0)));
        uvec4 _2807 = texelFetch(g_lightClusterGridBuffer, int(((_2802 << 2u) + (_2788 << 6u)) >> 2u));
        uint _2808 = _2807.x;
        uint _2809 = _2776.z;
        float _2944;
        float _2946;
        float _2948;
        float _2950;
        float _2952;
        float _2954;
        if (((((1u << ((_2809 >> 4u) & 15u)) + 4294967295u) & _2808) == 0u) || ((_2809 & 240u) == 0u))
        {
            _2944 = 0.0;
            _2946 = 0.0;
            _2948 = 0.0;
            _2950 = 0.0;
            _2952 = 0.0;
            _2954 = 0.0;
        }
        else
        {
            float _2945;
            float _2947;
            float _2949;
            float _2951;
            float _2953;
            float _2955;
            float _3106 = 0.0;
            float _3107 = 0.0;
            float _3108 = 0.0;
            float _3109 = 0.0;
            float _3110 = 0.0;
            float _3111 = 0.0;
            uint _3112 = 0u;
            uint _3121;
            bool _3122;
            for (;;)
            {
                _3121 = texelFetch(g_lightClassification, int((((_2802 << 5u) + (_2788 << 9u)) + (_3112 << 2u)) >> 2u)).x;
                _3122 = _3121 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3122)
                {
                    frontier_phi_68_pred = _3106;
                    frontier_phi_68_pred_1 = _3111;
                    frontier_phi_68_pred_2 = _3110;
                    frontier_phi_68_pred_3 = _3109;
                    frontier_phi_68_pred_4 = _3108;
                    frontier_phi_68_pred_5 = _3107;
                }
                else
                {
                    float _3251;
                    float _3252;
                    float _3253;
                    float _3254;
                    float _3255;
                    float _3256;
                    uint _3257;
                    _3251 = _3106;
                    _3252 = _3107;
                    _3253 = _3108;
                    _3254 = _3109;
                    _3255 = _3110;
                    _3256 = _3111;
                    _3257 = _3121;
                    float _3178;
                    float _3179;
                    float _3180;
                    float _3181;
                    float _3182;
                    float _3183;
                    for (;;)
                    {
                        uint _3261 = uint(findLSB(_3257)) + (_3112 << 5u);
                        uint _3258 = (_3257 + 4294967295u) & _3257;
                        uint _3263 = _3261 * 48u;
                        vec4 _3277 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3263)).x, texelFetch(g_PointLightRenderingBuffer, int(_3263 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3263 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3263 + 3u)).x));
                        uint _3283 = (_3261 * 48u) + 4u;
                        vec4 _3296 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3283)).x, texelFetch(g_PointLightRenderingBuffer, int(_3283 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3283 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3283 + 3u)).x));
                        uint _3302 = (_3261 * 48u) + 8u;
                        vec3 _3313 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3302)).x, texelFetch(g_PointLightRenderingBuffer, int(_3302 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3302 + 2u)).x));
                        float _3317 = _3277.x - _2762;
                        float _3318 = _3277.y - _2763;
                        float _3319 = _3277.z - _2764;
                        float _3320 = dot(vec3(_3317, _3318, _3319), vec3(_3317, _3318, _3319));
                        float _3323 = inversesqrt(_3320);
                        float _3324 = _3323 * _3317;
                        float _3325 = _3323 * _3318;
                        float _3326 = _3323 * _3319;
                        float _3327 = dot(vec3(_1004, _1007, _1010), vec3(_3324, _3325, _3326));
                        float _3332 = 1.0 - (_3320 * _3277.w);
                        float _4730 = isnan(0.0) ? _3332 : (isnan(_3332) ? 0.0 : max(_3332, 0.0));
                        float _3333 = isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0));
                        float _3334 = sqrt(_3320) * _3296.w;
                        float _3337 = 1.39999997615814208984375 / (_3334 + 1.39999997615814208984375);
                        float _3338 = _3337 * _3337;
                        float _3341 = ((1.0 - _3338) * _3327) + _3338;
                        float _3344 = _3334 * _3334;
                        float _3348 = ((isnan(0.0) ? _3341 : (isnan(_3341) ? 0.0 : max(_3341, 0.0))) * _3333) / ((_3344 * 0.699999988079071044921875) + 1.0);
                        float _3352 = (-0.0) - _2762;
                        float _3353 = (-0.0) - _2763;
                        float _3354 = (-0.0) - _2764;
                        float _3358 = inversesqrt(dot(vec3(_3352, _3353, _3354), vec3(_3352, _3353, _3354)));
                        float _3359 = _3358 * _3352;
                        float _3360 = _3358 * _3353;
                        float _3361 = _3358 * _3354;
                        float _3369 = exp2(log2(1.0 / ((_3344 * 3.5) + 5.0)) * 0.25);
                        float _3370 = 1.0 - _1079;
                        float _3377 = sqrt(1.0 - ((1.0 - (_3370 * _3370)) * (1.0 - (_3369 * _3369))));
                        float _3378 = _3377 * _3377;
                        float _3379 = _3378 * _3378;
                        float _3380 = _3359 + _3324;
                        float _3381 = _3360 + _3325;
                        float _3382 = _3361 + _3326;
                        float _3386 = inversesqrt(dot(vec3(_3380, _3381, _3382), vec3(_3380, _3381, _3382)));
                        float _3390 = dot(vec3(_1004, _1007, _1010), vec3(_3359, _3360, _3361));
                        float _4746 = isnan(0.0) ? _3390 : (isnan(_3390) ? 0.0 : max(_3390, 0.0));
                        float _3393 = isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0));
                        float _3394 = dot(vec3(_1004, _1007, _1010), vec3(_3386 * _3380, _3386 * _3381, _3386 * _3382));
                        float _4757 = isnan(0.0) ? _3394 : (isnan(_3394) ? 0.0 : max(_3394, 0.0));
                        float _3397 = isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0));
                        float _3401 = ((_3397 * _3397) * (_3379 + (-1.0))) + 1.0;
                        float _3402 = _3337 * _3378;
                        float _3403 = _3402 * _3402;
                        float _3406 = ((1.0 - _3403) * _3327) + _3403;
                        float _4768 = isnan(0.0) ? _3406 : (isnan(_3406) ? 0.0 : max(_3406, 0.0));
                        float _3407 = isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0));
                        float _3408 = 1.0 - _3378;
                        float _3418 = (0.5 / (((_3407 * ((_3393 * _3408) + _3378)) + 9.9999999392252902907785028219223e-09) + (((_3407 * _3408) + _3378) * _3393))) * _3407;
                        float _4779 = isnan(0.0) ? _3418 : (isnan(_3418) ? 0.0 : max(_3418, 0.0));
                        float _3429 = (((_3379 * 3.1415927410125732421875) * (isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0)))) / ((_3401 * _3401) * ((_3344 * 2.1991131305694580078125) + 3.141590118408203125))) * _3333;
                        _3181 = (_3348 * _3296.x) + _3254;
                        _3182 = (_3348 * _3296.y) + _3255;
                        _3183 = (_3348 * _3296.z) + _3256;
                        _3178 = (_3429 * _3313.x) + _3251;
                        _3179 = (_3429 * _3313.y) + _3252;
                        _3180 = (_3429 * _3313.z) + _3253;
                        if (_3258 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3251 = _3178;
                            _3252 = _3179;
                            _3253 = _3180;
                            _3254 = _3181;
                            _3255 = _3182;
                            _3256 = _3183;
                            _3257 = _3258;
                        }
                    }
                    frontier_phi_68_pred = _3178;
                    frontier_phi_68_pred_1 = _3183;
                    frontier_phi_68_pred_2 = _3182;
                    frontier_phi_68_pred_3 = _3181;
                    frontier_phi_68_pred_4 = _3180;
                    frontier_phi_68_pred_5 = _3179;
                }
                _2945 = frontier_phi_68_pred;
                _2955 = frontier_phi_68_pred_1;
                _2953 = frontier_phi_68_pred_2;
                _2951 = frontier_phi_68_pred_3;
                _2949 = frontier_phi_68_pred_4;
                _2947 = frontier_phi_68_pred_5;
                uint _3113 = _3112 + 1u;
                if (_3113 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3106 = _2945;
                    _3107 = _2947;
                    _3108 = _2949;
                    _3109 = _2951;
                    _3110 = _2953;
                    _3111 = _2955;
                    _3112 = _3113;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2944 = _2945;
            _2946 = _2947;
            _2948 = _2949;
            _2950 = _2951;
            _2952 = _2953;
            _2954 = _2955;
        }
        uvec4 _2958 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2959 = _2958.z;
        uint _2961 = (_2959 >> 8u) & 15u;
        float _3074;
        float _3076;
        float _3078;
        float _3080;
        float _3082;
        float _3084;
        if (((4294967295u << _2961) & _2808) == 0u)
        {
            _3074 = _2944;
            _3076 = _2946;
            _3078 = _2948;
            _3080 = _2950;
            _3082 = _2952;
            _3084 = _2954;
        }
        else
        {
            float _3099 = inversesqrt(dot(vec3(_2762, _2763, _2764), vec3(_2762, _2763, _2764)));
            float _3100 = _3099 * _2762;
            float _3101 = _3099 * _2763;
            float _3102 = _3099 * _2764;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2961 < ((_2959 >> 12u) & 15u))
            {
                float _3075;
                float _3077;
                float _3079;
                float _3081;
                float _3083;
                float _3085;
                float _3234 = _2944;
                float _3235 = _2946;
                float _3236 = _2948;
                float _3237 = _2950;
                float _3238 = _2952;
                float _3239 = _2954;
                uint _3240 = _2961;
                uint _3249;
                bool _3250;
                for (;;)
                {
                    _3249 = texelFetch(g_lightClassification, int((((_2802 << 5u) + (_2788 << 9u)) + (_3240 << 2u)) >> 2u)).x;
                    _3250 = _3249 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3250)
                    {
                        frontier_phi_79_pred = _3239;
                        frontier_phi_79_pred_1 = _3238;
                        frontier_phi_79_pred_2 = _3237;
                        frontier_phi_79_pred_3 = _3236;
                        frontier_phi_79_pred_4 = _3235;
                        frontier_phi_79_pred_5 = _3234;
                    }
                    else
                    {
                        float _3443;
                        float _3444;
                        float _3445;
                        float _3446;
                        float _3447;
                        float _3448;
                        float _3736;
                        float _3737;
                        float _3738;
                        float _3739;
                        float _3740;
                        float _3741;
                        float _3456 = _3234;
                        float _3457 = _3235;
                        float _3458 = _3236;
                        float _3459 = _3237;
                        float _3460 = _3238;
                        float _3461 = _3239;
                        uint _3462 = _3249;
                        uint _3463;
                        vec4 _3488;
                        float _3489;
                        vec4 _3504;
                        vec3 _3516;
                        vec4 _3531;
                        vec4 _3546;
                        float _3592;
                        bool _3593;
                        for (;;)
                        {
                            uint _3473 = ((_3240 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3462));
                            _3463 = (_3462 + 4294967295u) & _3462;
                            uint _3475 = _3473 * 40u;
                            _3488 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3475)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 3u)).x));
                            _3489 = _3488.w;
                            uint _3491 = (_3473 * 40u) + 4u;
                            _3504 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3491)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3491 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3491 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3491 + 3u)).x));
                            uint _3506 = (_3473 * 40u) + 8u;
                            _3516 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3506)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 2u)).x));
                            uint _3518 = (_3473 * 40u) + 16u;
                            _3531 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3518)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 3u)).x));
                            uint _3533 = (_3473 * 40u) + 20u;
                            _3546 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3533)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 3u)).x));
                            uint _3548 = (_3473 * 40u) + 24u;
                            vec4 _3561 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3548)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3548 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3548 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3548 + 3u)).x));
                            uint _3567 = (_3473 * 40u) + 28u;
                            vec4 _3580 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3567)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 3u)).x));
                            _3592 = fma(_2764, _3580.z, fma(_2763, _3580.y, _3580.x * _2762)) + _3580.w;
                            _3593 = !((fma(_2764, _3561.z, fma(_2763, _3561.y, _3561.x * _2762)) + _3561.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3593)
                            {
                                float _3620 = _3488.x - _2762;
                                float _3621 = _3488.y - _2763;
                                float _3622 = _3488.z - _2764;
                                float _3623 = dot(vec3(_3620, _3621, _3622), vec3(_3620, _3621, _3622));
                                float _3626 = inversesqrt(_3623);
                                float _3627 = _3626 * _3620;
                                float _3628 = _3626 * _3621;
                                float _3629 = _3626 * _3622;
                                float _3633 = 1.0 - (_3623 / (_3489 * _3489));
                                float _4790 = isnan(0.0) ? _3633 : (isnan(_3633) ? 0.0 : max(_3633, 0.0));
                                float _3634 = isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0));
                                float _3638 = sqrt(_3623) * _3504.w;
                                float _3640 = 1.39999997615814208984375 / (_3638 + 1.39999997615814208984375);
                                float _3641 = _3640 * _3640;
                                float _3644 = ((1.0 - _3641) * dot(vec3(_3627, _3628, _3629), vec3(_1004, _1007, _1010))) + _3641;
                                float _3647 = _3638 * _3638;
                                float _3651 = (fma(_2764, _3531.z, fma(_2763, _3531.y, _3531.x * _2762)) + _3531.w) / _3592;
                                float _3652 = (fma(_2764, _3546.z, fma(_2763, _3546.y, _3546.x * _2762)) + _3546.w) / _3592;
                                float _3656 = 1.0 - dot(vec2(_3651, _3652), vec2(_3651, _3652));
                                float _4806 = isnan(0.0) ? _3656 : (isnan(_3656) ? 0.0 : max(_3656, 0.0));
                                float _3657 = isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0));
                                float _3658 = _3657 * (((isnan(0.0) ? _3644 : (isnan(_3644) ? 0.0 : max(_3644, 0.0))) * _3634) / ((_3647 * 0.699999988079071044921875) + 1.0));
                                float _3670 = exp2(log2(1.0 / ((_3647 * 3.5) + 5.0)) * 0.25);
                                float _3671 = 1.0 - _1079;
                                float _3678 = sqrt(1.0 - ((1.0 - (_3671 * _3671)) * (1.0 - (_3670 * _3670))));
                                float _3679 = _3678 * _3678;
                                float _3680 = _3679 * _3679;
                                float _3681 = _3627 - _3100;
                                float _3682 = _3628 - _3101;
                                float _3683 = _3629 - _3102;
                                float _3687 = inversesqrt(dot(vec3(_3681, _3682, _3683), vec3(_3681, _3682, _3683)));
                                float _3691 = dot(vec3(_1004, _1007, _1010), vec3((-0.0) - _3100, (-0.0) - _3101, (-0.0) - _3102));
                                float _4817 = isnan(0.0) ? _3691 : (isnan(_3691) ? 0.0 : max(_3691, 0.0));
                                float _3694 = isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0));
                                float _3695 = dot(vec3(_1004, _1007, _1010), vec3(_3687 * _3681, _3687 * _3682, _3687 * _3683));
                                float _4828 = isnan(0.0) ? _3695 : (isnan(_3695) ? 0.0 : max(_3695, 0.0));
                                float _3698 = isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0));
                                float _3702 = ((_3698 * _3698) * (_3680 + (-1.0))) + 1.0;
                                float _3703 = _3640 * _3679;
                                float _3704 = _3703 * _3703;
                                float _3710 = ((1.0 - _3704) * dot(vec3(_1004, _1007, _1010), vec3(_3627, _3628, _3629))) + _3704;
                                float _4839 = isnan(0.0) ? _3710 : (isnan(_3710) ? 0.0 : max(_3710, 0.0));
                                float _3711 = isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0));
                                float _3712 = 1.0 - _3679;
                                float _3722 = (0.5 / (((_3711 * ((_3694 * _3712) + _3679)) + 9.9999999392252902907785028219223e-09) + (((_3711 * _3712) + _3679) * _3694))) * _3711;
                                float _4850 = isnan(0.0) ? _3722 : (isnan(_3722) ? 0.0 : max(_3722, 0.0));
                                float _3732 = (_3657 * _3634) * (((_3680 * 3.1415927410125732421875) * (isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0)))) / ((_3702 * _3702) * ((_3647 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3658 * _3504.y;
                                frontier_phi_85_pred_1 = _3658 * _3504.x;
                                frontier_phi_85_pred_2 = _3732 * _3516.z;
                                frontier_phi_85_pred_3 = _3732 * _3516.y;
                                frontier_phi_85_pred_4 = _3732 * _3516.x;
                                frontier_phi_85_pred_5 = _3658 * _3504.z;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3740 = frontier_phi_85_pred;
                            _3739 = frontier_phi_85_pred_1;
                            _3738 = frontier_phi_85_pred_2;
                            _3737 = frontier_phi_85_pred_3;
                            _3736 = frontier_phi_85_pred_4;
                            _3741 = frontier_phi_85_pred_5;
                            _3446 = _3739 + _3459;
                            _3447 = _3740 + _3460;
                            _3448 = _3741 + _3461;
                            _3443 = _3736 + _3456;
                            _3444 = _3737 + _3457;
                            _3445 = _3738 + _3458;
                            if (_3463 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3456 = _3443;
                                _3457 = _3444;
                                _3458 = _3445;
                                _3459 = _3446;
                                _3460 = _3447;
                                _3461 = _3448;
                                _3462 = _3463;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3448;
                        frontier_phi_79_pred_1 = _3447;
                        frontier_phi_79_pred_2 = _3446;
                        frontier_phi_79_pred_3 = _3445;
                        frontier_phi_79_pred_4 = _3444;
                        frontier_phi_79_pred_5 = _3443;
                    }
                    _3085 = frontier_phi_79_pred;
                    _3083 = frontier_phi_79_pred_1;
                    _3081 = frontier_phi_79_pred_2;
                    _3079 = frontier_phi_79_pred_3;
                    _3077 = frontier_phi_79_pred_4;
                    _3075 = frontier_phi_79_pred_5;
                    uint _3241 = _3240 + 1u;
                    if (_3241 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3234 = _3075;
                        _3235 = _3077;
                        _3236 = _3079;
                        _3237 = _3081;
                        _3238 = _3083;
                        _3239 = _3085;
                        _3240 = _3241;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3079;
                frontier_phi_60_61_ladder_1 = _3085;
                frontier_phi_60_61_ladder_2 = _3083;
                frontier_phi_60_61_ladder_3 = _3081;
                frontier_phi_60_61_ladder_4 = _3077;
                frontier_phi_60_61_ladder_5 = _3075;
            }
            else
            {
                frontier_phi_60_61_ladder = _2948;
                frontier_phi_60_61_ladder_1 = _2954;
                frontier_phi_60_61_ladder_2 = _2952;
                frontier_phi_60_61_ladder_3 = _2950;
                frontier_phi_60_61_ladder_4 = _2946;
                frontier_phi_60_61_ladder_5 = _2944;
            }
            _3074 = frontier_phi_60_61_ladder_5;
            _3076 = frontier_phi_60_61_ladder_4;
            _3078 = frontier_phi_60_61_ladder;
            _3080 = frontier_phi_60_61_ladder_3;
            _3082 = frontier_phi_60_61_ladder_2;
            _3084 = frontier_phi_60_61_ladder_1;
        }
        float _3089 = isnan(1.0) ? _1063 : (isnan(_1063) ? 1.0 : min(_1063, 1.0));
        _2821 = (_3089 * _3080) + _2257;
        _2823 = (_3089 * _3082) + _2259;
        _2825 = (_3089 * _3084) + _2261;
        _2827 = ((_3074 * _1048) * _3089) + _2602;
        _2829 = ((_3076 * _1050) * _3089) + _2604;
        _2831 = ((_3078 * _1051) * _3089) + _2606;
    }
    else
    {
        _2821 = _2257;
        _2823 = _2259;
        _2825 = _2261;
        _2827 = _2602;
        _2829 = _2604;
        _2831 = _2606;
    }
    uint _2837 = _1024 + uint(cbMatDynParam._m0[0u].w);
    float _2845 = ((cbMtdParam._m0[20u].x * cbMtdParam._m0[25u].x) * _807.x) * cbInstanceData._m0[_2837].x;
    float _2848 = ((cbMtdParam._m0[20u].y * cbMtdParam._m0[25u].x) * _807.y) * cbInstanceData._m0[_2837].y;
    float _2851 = ((cbMtdParam._m0[20u].z * cbMtdParam._m0[25u].x) * _807.z) * cbInstanceData._m0[_2837].z;
    float _4866 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
    float _4877 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
    float _4888 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
    float _2868 = (((isnan(1.0) ? _4866 : (isnan(_4866) ? 1.0 : min(_4866, 1.0))) * (_2821 + ((isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0))) * _1063))) + ((_2827 + ((isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0))) * _1897)) * cbPerFrame._m0[3u].x)) + _2845;
    float _2870 = (_2848 + ((_2829 + ((isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0))) * _1897)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4877 : (isnan(_4877) ? 1.0 : min(_4877, 1.0))) * (_2823 + ((isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0))) * _1063)));
    float _2872 = (_2851 + ((_2831 + ((isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0))) * _1897)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4888 : (isnan(_4888) ? 1.0 : min(_4888, 1.0))) * (_2825 + ((isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0))) * _1063)));
    float _2873 = isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : max(_2868, 0.0));
    float _2874 = isnan(0.0) ? _2870 : (isnan(_2870) ? 0.0 : max(_2870, 0.0));
    float _2875 = isnan(0.0) ? _2872 : (isnan(_2872) ? 0.0 : max(_2872, 0.0));
    float _2881 = cbMtdParam._m0[2u].x * _2845;
    float _2882 = cbMtdParam._m0[2u].y * _2848;
    float _2883 = cbMtdParam._m0[2u].z * _2851;
    float _4914 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2885 = isnan(1.0) ? _4914 : (isnan(_4914) ? 1.0 : min(_4914, 1.0));
    uint _2886 = _1023 + 6u;
    float _2894 = _985 / cbSceneParam._m0[86u].x;
    float _2895 = _986 / cbSceneParam._m0[86u].y;
    vec4 _2909 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2894, _2895, (log2((isnan(cbSceneParam._m0[77u].w) ? _911 : (isnan(_911) ? cbSceneParam._m0[77u].w : min(_911, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2911 = _2909.x;
    float _2912 = _2909.y;
    float _2913 = _2909.z;
    float _2914 = _2909.w;
    float _3007;
    float _3009;
    float _3011;
    float _3013;
    if (_911 > cbSceneParam._m0[78u].w)
    {
        float _2969 = isnan(_911) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _911 : min(cbSceneParam._m0[80u].w, _911));
        float _2970 = _2969 / _911;
        float _2981 = _2970 * _961;
        float _2982 = _962 * _2970;
        float _2983 = (-0.0) - _2982;
        float _2985 = _2970 * _963;
        float _2987 = (cbSceneParam._m0[77u].w * _2983) / _2969;
        float _2988 = _2987 + cbSceneParam._m0[79u].w;
        float _2989 = cbSceneParam._m0[79u].w - _2982;
        float _2995 = sqrt(((_2981 * _2981) + (_2982 * _2982)) + (_2985 * _2985));
        float _2998 = (1.0 - (cbSceneParam._m0[77u].w / _2969)) * _2995;
        float _3003 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3005 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3191;
        if (abs((_2983 - _2987) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3191 = ((((_2988 > 0.0) ? exp2(_3003 * _2988) : (2.0 - exp2(_3005 * _2988))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2998;
        }
        else
        {
            float _3135 = 1.0 / cbSceneParam._m0[80u].x;
            float _3136 = isnan(_2989) ? _2988 : (isnan(_2988) ? _2989 : max(_2988, _2989));
            float _3137 = isnan(_2989) ? _2988 : (isnan(_2988) ? _2989 : min(_2988, _2989));
            float _3146 = isnan(0.0) ? _3136 : (isnan(_3136) ? 0.0 : min(_3136, 0.0));
            float _3147 = isnan(0.0) ? _3137 : (isnan(_3137) ? 0.0 : min(_3137, 0.0));
            _3191 = ((abs(_2995 / _2983) * cbSceneParam._m0[80u].y) * ((((_3146 - _3147) * 2.0) - ((exp2(_3003 * (isnan(0.0) ? _3136 : (isnan(_3136) ? 0.0 : max(_3136, 0.0)))) - exp2(_3003 * (isnan(0.0) ? _3137 : (isnan(_3137) ? 0.0 : max(_3137, 0.0))))) * _3135)) - ((exp2(_3005 * _3146) - exp2(_3005 * _3147)) * _3135))) + (_2998 * cbSceneParam._m0[80u].z);
        }
        vec4 _3193 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2894, _2895, 1.0), 0.0);
        float _3202 = exp2((_3191 * (-1.44269502162933349609375)) * (1.0 - _3193.w));
        float _3203 = log2(_3202);
        float _3219 = log2(_2914);
        _3007 = (exp2(_3219 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3203 * cbSceneParam._m0[78u].x)) * _3193.x) / cbSceneParam._m0[78u].x)) + _2911;
        _3009 = (exp2(_3219 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3203 * cbSceneParam._m0[78u].y)) * _3193.y) / cbSceneParam._m0[78u].y)) + _2912;
        _3011 = (exp2(_3219 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3203 * cbSceneParam._m0[78u].z)) * _3193.z) / cbSceneParam._m0[78u].z)) + _2913;
        _3013 = _3202 * _2914;
    }
    else
    {
        _3007 = _2911;
        _3009 = _2912;
        _3011 = _2913;
        _3013 = _2914;
    }
    bool _3229;
    vec4 _3023;
    vec4 _3045;
    float _3047;
    float _3051;
    float _3052;
    float _3053;
    float _3056;
    float _3059;
    float _3062;
    float _3063;
    bool _3073;
    for (;;)
    {
        _3023 = cbMatDynParam._m0[0u];
        float _3025 = roundEven(_3023.y);
        bool _3026 = _3025 == 3.0;
        float _3027 = log2(_3013);
        float _3031 = exp2(_3027 * cbSceneParam._m0[78u].x);
        float _3032 = exp2(_3027 * cbSceneParam._m0[78u].y);
        float _3033 = exp2(_3027 * cbSceneParam._m0[78u].z);
        float _3034 = _3031 * _2873;
        float _3035 = _3032 * _2874;
        float _3036 = _3033 * _2875;
        float _3043 = _974 + (-0.5);
        _3045 = cbMtdParam._m0[1u];
        _3047 = _3045.y * _3043;
        float _3050 = (_3025 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3051 = _3050 * (_3026 ? _3034 : (_3034 + (cbSceneParam._m0[72u].w * _3007)));
        _3052 = _3050 * (_3026 ? _3035 : (_3035 + (cbSceneParam._m0[72u].w * _3009)));
        _3053 = _3050 * (_3026 ? _3036 : (_3036 + (cbSceneParam._m0[72u].w * _3011)));
        _3056 = ((_2881 * _2885) * _3031) * _3050;
        _3059 = ((_2882 * _2885) * _3032) * _3050;
        _3062 = ((_2883 * _2885) * _3033) * _3050;
        _3063 = _3043 * 0.999000012874603271484375;
        _3073 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3073)
        {
            if ((cbInstanceData._m0[_1023 + 7u].x + _3063) < 0.5)
            {
                _3229 = true;
                break;
            }
        }
        uint _3170 = _1024 + uint(_3023.w);
        if ((cbInstanceData._m0[_3170].w < 1.0) && ((cbInstanceData._m0[_3170].w + _3063) < 0.5))
        {
            _3229 = true;
            break;
        }
        if ((_3047 + 1.0) < _3045.x)
        {
            _3229 = true;
            break;
        }
        _3229 = false;
        break;
    }
    float _3434;
    if (_3229)
    {
        discard_state = true;
        _3434 = 0.0;
    }
    else
    {
        _3434 = cbInstanceData._m0[_2886].w;
    }
    SV_Target.x = _3051;
    SV_Target.y = _3052;
    SV_Target.z = _3053;
    SV_Target.w = _3434;
    SV_Target_1.x = _3056;
    SV_Target_1.y = _3059;
    SV_Target_1.z = _3062;
    SV_Target_1.w = cbInstanceData._m0[_2886].w;
    discard_exit();
}


