#version 460

out float gl_ClipDistance[2];

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 11, std140) uniform cbTexScrollUBO
{
    vec4 _m0[4];
} cbTexScroll;

layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in uvec4 BLENDINDICES;
layout(location = 4) in vec4 BLENDWEIGHT;
layout(location = 5) in vec4 COLOR_1;
layout(location = 6) in ivec2 TEXCOORD;
layout(location = 7) in vec4 TEXCOORD_1;
layout(location = 1) out vec4 NORMAL_1;
layout(location = 2) out vec4 TANGENT_1;
layout(location = 3) out float TEXCOORD_2;
layout(location = 3, component = 1) out float TEXCOORD_1_1;
layout(location = 4) out vec4 TEXCOORD_3;
layout(location = 3, component = 2) out vec2 TEXCOORD_7;
layout(location = 5) out float TEXCOORD_11;

void main()
{
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    NORMAL_1.x = 0.0;
    NORMAL_1.y = 0.0;
    NORMAL_1.z = 0.0;
    NORMAL_1.w = 0.0;
    TANGENT_1.x = 0.0;
    TANGENT_1.y = 0.0;
    TANGENT_1.z = 0.0;
    TANGENT_1.w = 0.0;
    TEXCOORD_2 = 0.0;
    TEXCOORD_1_1 = 0.0;
    TEXCOORD_3.x = 0.0;
    TEXCOORD_3.y = 0.0;
    TEXCOORD_3.z = 0.0;
    TEXCOORD_3.w = 0.0;
    TEXCOORD_7.x = 0.0;
    TEXCOORD_7.y = 0.0;
    TEXCOORD_11 = 0.0;
    gl_ClipDistance[0u] = 0.0;
    gl_ClipDistance[1u] = 0.0;
    float _173 = (float(NORMAL.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _175 = (float(NORMAL.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _176 = (float(NORMAL.z) + (-127.0)) * 0.0078740157186985015869140625;
    float _185 = (float(TANGENT.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _186 = (float(TANGENT.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _187 = (float(TANGENT.z) + (-127.0)) * 0.0078740157186985015869140625;
    uint _197 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + (uint(gl_InstanceIndex) - uint(gl_BaseInstance));
    uvec4 _199 = texelFetch(g_InstanceIndexBuffer, int(_197));
    uint _200 = _199.x;
    precise float _201 = dot(vec4(1.0), vec4(BLENDWEIGHT.x, BLENDWEIGHT.y, BLENDWEIGHT.z, BLENDWEIGHT.w));
    float _206 = isnan(_201) ? 0.001000000047497451305389404296875 : (isnan(0.001000000047497451305389404296875) ? _201 : max(0.001000000047497451305389404296875, _201));
    precise float _208 = BLENDWEIGHT.x / _206;
    precise float _209 = BLENDWEIGHT.y / _206;
    precise float _210 = BLENDWEIGHT.z / _206;
    precise float _211 = BLENDWEIGHT.w / _206;
    uint _213 = _200 * 13u;
    uvec4 _218 = floatBitsToUint(cbInstanceData._m0[_213 + 4u]);
    uint _219 = _218.x;
    uint _221 = (_219 + uint(float(BLENDINDICES.x))) * 3u;
    uint _228 = _221 + 1u;
    uint _235 = _221 + 2u;
    precise float _242 = _208 * cbObjMatrix._m0[_221].x;
    precise float _243 = _208 * cbObjMatrix._m0[_228].x;
    precise float _244 = _208 * cbObjMatrix._m0[_235].x;
    precise float _245 = _208 * cbObjMatrix._m0[_221].y;
    precise float _246 = _208 * cbObjMatrix._m0[_228].y;
    precise float _247 = _208 * cbObjMatrix._m0[_235].y;
    precise float _248 = _208 * cbObjMatrix._m0[_221].z;
    precise float _249 = _208 * cbObjMatrix._m0[_228].z;
    precise float _250 = _208 * cbObjMatrix._m0[_235].z;
    precise float _251 = _208 * cbObjMatrix._m0[_221].w;
    precise float _252 = _208 * cbObjMatrix._m0[_228].w;
    precise float _253 = _208 * cbObjMatrix._m0[_235].w;
    uint _256 = (_219 + uint(float(BLENDINDICES.y))) * 3u;
    uint _263 = _256 + 1u;
    uint _270 = _256 + 2u;
    precise float _277 = _209 * cbObjMatrix._m0[_256].x;
    precise float _278 = _209 * cbObjMatrix._m0[_263].x;
    precise float _279 = _209 * cbObjMatrix._m0[_270].x;
    precise float _280 = _209 * cbObjMatrix._m0[_256].y;
    precise float _281 = _209 * cbObjMatrix._m0[_263].y;
    precise float _282 = _209 * cbObjMatrix._m0[_270].y;
    precise float _283 = _209 * cbObjMatrix._m0[_256].z;
    precise float _284 = _209 * cbObjMatrix._m0[_263].z;
    precise float _285 = _209 * cbObjMatrix._m0[_270].z;
    precise float _286 = _209 * cbObjMatrix._m0[_256].w;
    precise float _287 = _209 * cbObjMatrix._m0[_263].w;
    precise float _288 = _209 * cbObjMatrix._m0[_270].w;
    precise float _289 = _242 + _277;
    precise float _290 = _243 + _278;
    precise float _291 = _244 + _279;
    precise float _292 = _245 + _280;
    precise float _293 = _246 + _281;
    precise float _294 = _247 + _282;
    precise float _295 = _248 + _283;
    precise float _296 = _249 + _284;
    precise float _297 = _250 + _285;
    precise float _298 = _251 + _286;
    precise float _299 = _252 + _287;
    precise float _300 = _253 + _288;
    uint _303 = (_219 + uint(float(BLENDINDICES.z))) * 3u;
    uint _310 = _303 + 1u;
    uint _317 = _303 + 2u;
    precise float _324 = _210 * cbObjMatrix._m0[_303].x;
    precise float _325 = _210 * cbObjMatrix._m0[_310].x;
    precise float _326 = _210 * cbObjMatrix._m0[_317].x;
    precise float _327 = _210 * cbObjMatrix._m0[_303].y;
    precise float _328 = _210 * cbObjMatrix._m0[_310].y;
    precise float _329 = _210 * cbObjMatrix._m0[_317].y;
    precise float _330 = _210 * cbObjMatrix._m0[_303].z;
    precise float _331 = _210 * cbObjMatrix._m0[_310].z;
    precise float _332 = _210 * cbObjMatrix._m0[_317].z;
    precise float _333 = _210 * cbObjMatrix._m0[_303].w;
    precise float _334 = _210 * cbObjMatrix._m0[_310].w;
    precise float _335 = _210 * cbObjMatrix._m0[_317].w;
    precise float _336 = _289 + _324;
    precise float _337 = _290 + _325;
    precise float _338 = _291 + _326;
    precise float _339 = _292 + _327;
    precise float _340 = _293 + _328;
    precise float _341 = _294 + _329;
    precise float _342 = _295 + _330;
    precise float _343 = _296 + _331;
    precise float _344 = _297 + _332;
    precise float _345 = _298 + _333;
    precise float _346 = _299 + _334;
    precise float _347 = _300 + _335;
    uint _350 = (_219 + uint(float(BLENDINDICES.w))) * 3u;
    uint _357 = _350 + 1u;
    uint _364 = _350 + 2u;
    precise float _371 = _211 * cbObjMatrix._m0[_350].x;
    precise float _372 = _211 * cbObjMatrix._m0[_357].x;
    precise float _373 = _211 * cbObjMatrix._m0[_364].x;
    precise float _374 = _211 * cbObjMatrix._m0[_350].y;
    precise float _375 = _211 * cbObjMatrix._m0[_357].y;
    precise float _376 = _211 * cbObjMatrix._m0[_364].y;
    precise float _377 = _211 * cbObjMatrix._m0[_350].z;
    precise float _378 = _211 * cbObjMatrix._m0[_357].z;
    precise float _379 = _211 * cbObjMatrix._m0[_364].z;
    precise float _380 = _211 * cbObjMatrix._m0[_350].w;
    precise float _381 = _211 * cbObjMatrix._m0[_357].w;
    precise float _382 = _211 * cbObjMatrix._m0[_364].w;
    precise float _383 = _336 + _371;
    precise float _384 = _337 + _372;
    precise float _385 = _338 + _373;
    precise float _386 = _339 + _374;
    precise float _387 = _340 + _375;
    precise float _388 = _341 + _376;
    precise float _389 = _342 + _377;
    precise float _390 = _343 + _378;
    precise float _391 = _344 + _379;
    precise float _392 = _345 + _380;
    precise float _393 = _346 + _381;
    precise float _394 = _347 + _382;
    precise float _395 = POSITION.x * _383;
    precise float _396 = POSITION.y * _386;
    precise float _397 = _396 + _395;
    precise float _398 = POSITION.z * _389;
    precise float _399 = _398 + _397;
    precise float _400 = 1.0 * _392;
    precise float _401 = _400 + _399;
    precise float _402 = POSITION.x * _384;
    precise float _403 = POSITION.y * _387;
    precise float _404 = _403 + _402;
    precise float _405 = POSITION.z * _390;
    precise float _406 = _405 + _404;
    precise float _407 = 1.0 * _393;
    precise float _408 = _407 + _406;
    precise float _409 = POSITION.x * _385;
    precise float _410 = POSITION.y * _388;
    precise float _411 = _410 + _409;
    precise float _412 = POSITION.z * _391;
    precise float _413 = _412 + _411;
    precise float _414 = 1.0 * _394;
    precise float _415 = _414 + _413;
    float _421 = cbSceneParam._m0[3u].x - _401;
    float _422 = cbSceneParam._m0[3u].y - _408;
    float _423 = cbSceneParam._m0[3u].z - _415;
    precise float _449 = _401 - cbSceneParam._m0[3u].x;
    precise float _450 = _408 - cbSceneParam._m0[3u].y;
    precise float _451 = _415 - cbSceneParam._m0[3u].z;
    precise float _479 = _449 * cbSceneParam._m0[24u].x;
    precise float _480 = _450 * cbSceneParam._m0[24u].y;
    precise float _481 = _480 + _479;
    precise float _482 = _451 * cbSceneParam._m0[24u].z;
    precise float _483 = _482 + _481;
    precise float _484 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _485 = _484 + _483;
    precise float _486 = _449 * cbSceneParam._m0[25u].x;
    precise float _487 = _450 * cbSceneParam._m0[25u].y;
    precise float _488 = _487 + _486;
    precise float _489 = _451 * cbSceneParam._m0[25u].z;
    precise float _490 = _489 + _488;
    precise float _491 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _492 = _491 + _490;
    precise float _493 = _449 * cbSceneParam._m0[26u].x;
    precise float _494 = _450 * cbSceneParam._m0[26u].y;
    precise float _495 = _494 + _493;
    precise float _496 = _451 * cbSceneParam._m0[26u].z;
    precise float _497 = _496 + _495;
    precise float _498 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _499 = _498 + _497;
    precise float _500 = _449 * cbSceneParam._m0[27u].x;
    precise float _501 = _450 * cbSceneParam._m0[27u].y;
    precise float _502 = _501 + _500;
    precise float _503 = _451 * cbSceneParam._m0[27u].z;
    precise float _504 = _503 + _502;
    precise float _505 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _506 = _505 + _504;
    gl_Position.x = _485;
    gl_Position.y = _492;
    gl_Position.z = _499;
    gl_Position.w = _506;
    NORMAL_1.x = fma(_176, _389, fma(_175, _386, _383 * _173));
    NORMAL_1.y = fma(_176, _390, fma(_175, _387, _384 * _173));
    NORMAL_1.z = fma(_176, _391, fma(_175, _388, _385 * _173));
    NORMAL_1.w = float(_200);
    TANGENT_1.x = fma(_187, _389, fma(_186, _386, _383 * _185));
    TANGENT_1.y = fma(_187, _390, fma(_186, _387, _384 * _185));
    TANGENT_1.z = fma(_187, _391, fma(_186, _388, _385 * _185));
    TANGENT_1.w = (float(TANGENT.w) + (-127.0)) * 0.0078740157186985015869140625;
    TEXCOORD_2 = ((float(int(uint(TEXCOORD.x))) * 0.00048828125) * cbTexScroll._m0[0u].x) + cbTexScroll._m0[0u].z;
    TEXCOORD_1_1 = ((float(int(uint(TEXCOORD.y))) * 0.00048828125) * cbTexScroll._m0[0u].y) + cbTexScroll._m0[0u].w;
    TEXCOORD_3.x = TEXCOORD_1.x;
    TEXCOORD_3.y = TEXCOORD_1.y;
    TEXCOORD_3.z = TEXCOORD_1.z;
    TEXCOORD_3.w = COLOR_1.x;
    TEXCOORD_7.x = _499;
    TEXCOORD_7.y = _506;
    TEXCOORD_11 = sqrt(((_421 * _421) + (_422 * _422)) + (_423 * _423));
    gl_ClipDistance[0u] = dot(vec4(_485, _492, _499, _506), vec4(cbSceneParam._m0[4u]));
    gl_ClipDistance[1u] = dot(vec4(_485, _492, _499, _506), vec4(cbInstanceData._m0[_213 + 3u]));
}


