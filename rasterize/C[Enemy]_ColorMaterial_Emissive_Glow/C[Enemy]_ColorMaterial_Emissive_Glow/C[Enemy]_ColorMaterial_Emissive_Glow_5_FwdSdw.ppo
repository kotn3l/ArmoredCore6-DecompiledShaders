#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[29];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 12) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_14;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_16;
layout(set = 0, binding = 4) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_17;
layout(set = 0, binding = 5) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_18;
layout(set = 0, binding = 6) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 9) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2DArray C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_0;
layout(set = 0, binding = 14) uniform texture2DArray C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1411;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _219 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _220 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _221 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _227 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _234 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _241 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _262 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_1) + cbTextureTilingScale._m0[5u].w));
    vec4 _281 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_1) + cbTextureTilingScale._m0[10u].w));
    float _294 = exp2(log2(_281.w * cbMtdParam._m0[25u].z) * cbMtdParam._m0[22u].x);
    float _295 = isnan(0.0) ? _294 : (isnan(_294) ? 0.0 : max(_294, 0.0));
    float _296 = isnan(1.0) ? _295 : (isnan(_295) ? 1.0 : min(_295, 1.0));
    vec4 _310 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _314 = _310.z;
    float _323 = exp2(log2(_314 * cbMtdParam._m0[22u].y) * cbMtdParam._m0[21u].y);
    float _324 = isnan(0.0) ? _323 : (isnan(_323) ? 0.0 : max(_323, 0.0));
    float _325 = isnan(1.0) ? _324 : (isnan(_324) ? 1.0 : min(_324, 1.0));
    vec4 _337 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _340 = _337.y;
    float _343 = (_337.x + (-0.02500000037252902984619140625)) * 8.0;
    float _347 = roundEven(5.0 - _343);
    float _348 = isnan(0.0) ? _347 : (isnan(_347) ? 0.0 : max(_347, 0.0));
    float _349 = isnan(4.0) ? _348 : (isnan(_348) ? 4.0 : min(_348, 4.0));
    float _362 = floor(_349);
    vec4 _365 = texture(sampler2DArray(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w, _362));
    float _197[6];
    float _198[6];
    float _199[6];
    _197[0u] = cbMtdParam._m0[17u].x;
    _198[0u] = cbMtdParam._m0[17u].y;
    _199[0u] = cbMtdParam._m0[17u].z;
    _197[1u] = cbMtdParam._m0[15u].x;
    _198[1u] = cbMtdParam._m0[15u].y;
    _199[1u] = cbMtdParam._m0[15u].z;
    _197[2u] = cbMtdParam._m0[14u].x;
    _198[2u] = cbMtdParam._m0[14u].y;
    _199[2u] = cbMtdParam._m0[14u].z;
    _197[3u] = cbMtdParam._m0[13u].x;
    _198[3u] = cbMtdParam._m0[13u].y;
    _199[3u] = cbMtdParam._m0[13u].z;
    _197[4u] = cbMtdParam._m0[12u].x;
    _198[4u] = cbMtdParam._m0[12u].y;
    _199[4u] = cbMtdParam._m0[12u].z;
    _197[5u] = cbMtdParam._m0[18u].x;
    _198[5u] = cbMtdParam._m0[18u].y;
    _199[5u] = cbMtdParam._m0[18u].z;
    float _429 = roundEven(_343);
    float _430 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    uint _432 = uint(int(isnan(5.0) ? _430 : (isnan(_430) ? 5.0 : min(_430, 5.0))));
    vec4 _462 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _473 = cbMtdParam._m0[9u].x * _462.x;
    float _474 = cbMtdParam._m0[9u].y * _462.y;
    float _475 = cbMtdParam._m0[9u].z * _462.z;
    float _482 = ((((((_197[_432] - cbMtdParam._m0[10u].x) * _340) + cbMtdParam._m0[10u].x) * _365.x) - _473) * _325) + _473;
    float _483 = ((((((_198[_432] - cbMtdParam._m0[10u].y) * _340) + cbMtdParam._m0[10u].y) * _365.y) - _474) * _325) + _474;
    float _484 = ((((((_199[_432] - cbMtdParam._m0[10u].z) * _340) + cbMtdParam._m0[10u].z) * _365.z) - _475) * _325) + _475;
    float _490 = exp2(log2(_310.w) * cbMtdParam._m0[22u].w);
    vec4 _503 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _523 = (((cbMtdParam._m0[16u].x * _503.x) - _482) * _490) + _482;
    float _524 = (((cbMtdParam._m0[16u].y * _503.y) - _483) * _490) + _483;
    float _525 = (((cbMtdParam._m0[16u].z * _503.z) - _484) * _490) + _484;
    vec4 _538 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _563 = (_281.x * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].x * _538.x) - _523) * _296) + _523);
    float _565 = (_281.y * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].y * _538.y) - _524) * _296) + _524);
    float _567 = (_281.z * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].z * _538.z) - _525) * _296) + _525);
    vec4 _579 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_17, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w));
    float _598 = TEXCOORD_3.x - ((cbMtdParam._m0[23u].x * (1.0 - TEXCOORD_3.x)) * (_262.x + 0.00999999977648258209228515625));
    float _600 = _598 * (cbMtdParam._m0[23u].z + 1.0);
    float _4104 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _601 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
    float _608 = (_601 * ((cbMtdParam._m0[11u].x * _579.x) - _563)) + _563;
    float _609 = (((cbMtdParam._m0[11u].y * _579.y) - _565) * _601) + _565;
    float _610 = (((cbMtdParam._m0[11u].z * _579.z) - _567) * _601) + _567;
    float _192[5];
    float _193[5];
    _192[0u] = cbMtdParam._m0[25u].w;
    _193[0u] = cbMtdParam._m0[26u].x;
    _192[1u] = cbMtdParam._m0[27u].w;
    _193[1u] = cbMtdParam._m0[28u].x;
    _192[2u] = cbMtdParam._m0[27u].y;
    _193[2u] = cbMtdParam._m0[27u].z;
    _192[3u] = cbMtdParam._m0[26u].w;
    _193[3u] = cbMtdParam._m0[27u].x;
    _192[4u] = cbMtdParam._m0[26u].y;
    _193[4u] = cbMtdParam._m0[26u].z;
    float _648 = isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : max(_349, 0.0));
    uint _650 = uint(int(isnan(4.0) ? _648 : (isnan(_648) ? 4.0 : min(_648, 4.0))));
    float _657 = ((_193[_650] - cbMtdParam._m0[21u].z) * _325) + cbMtdParam._m0[21u].z;
    float _660 = ((cbMtdParam._m0[21u].w - _657) * _490) + _657;
    float _663 = ((cbMtdParam._m0[24u].y - _660) * _296) + _660;
    float _668 = (cbMtdParam._m0[23u].y + 1.0) * _598;
    float _4125 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _669 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
    float _671 = _663 - (_663 * _669);
    vec4 _684 = texture(sampler2DArray(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w, _362));
    vec4 _701 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _703 = _701.x;
    float _704 = _701.y;
    float _709 = cbMtdParam._m0[21u].x + _701.z;
    float _712 = (((_684.z + _192[_650]) - _709) * _325) + _709;
    vec4 _724 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_1) + cbTextureTilingScale._m0[11u].w));
    float _735 = (((_724.z - _712) + cbMtdParam._m0[25u].y) * _490) + _712;
    float _741 = ((((_314 * 2.0) * _735) - _735) * cbMtdParam._m0[23u].w) + _735;
    vec4 _753 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_1) + cbTextureTilingScale._m0[12u].w));
    float _764 = (((cbMtdParam._m0[22u].z + _753.z) - _741) * _296) + _741;
    vec4 _776 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _788 = ((_776.z - _764) * _669) + _764;
    vec4 _807 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _826 = ((_684.x - _703) * _325) + _703;
    float _827 = ((_684.y - _704) * _325) + _704;
    float _832 = ((_724.x - _826) * _490) + _826;
    float _833 = ((_724.y - _827) * _490) + _827;
    float _842 = ((((_753.x - _832) * _296) + _832) * 2.0) + (-1.0);
    float _843 = ((((_753.y - _833) * _296) + _833) * 2.0) + (-1.0);
    float _844 = dot(vec2(_842, _843), vec2(_842, _843));
    float _4136 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
    float _849 = sqrt(1.0 - (isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0))));
    float _858 = ((cbMtdParam._m0[24u].z * ((_310.x * 2.0) + (-1.0))) + _842) + (((((_776.x * 2.0) + (-1.0)) * TEXCOORD_3.x) * cbMtdParam._m0[24u].w) * _669);
    float _859 = ((cbMtdParam._m0[24u].z * ((_310.y * 2.0) + (-1.0))) + _843) + (((((_776.y * 2.0) + (-1.0)) * TEXCOORD_3.y) * cbMtdParam._m0[24u].w) * _669);
    float _862 = fma(_849, _234 * NORMAL.x, fma(_859, _241 * TANGENT.x, (_227 * _219) * _858));
    float _865 = fma(_849, _234 * NORMAL.y, fma(_859, _241 * TANGENT.y, (_227 * _220) * _858));
    float _868 = fma(_849, _234 * NORMAL.z, fma(_859, _241 * TANGENT.z, (_227 * _221) * _858));
    float _872 = inversesqrt(dot(vec3(_862, _865, _868), vec3(_862, _865, _868)));
    float _873 = _872 * _862;
    float _874 = _872 * _865;
    float _875 = _872 * _868;
    float _4147 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    float _876 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
    float _4158 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _4169 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    float _4180 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _4191 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _880 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
    float _896 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _936 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _946 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _936);
    float _947 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _936);
    float _948 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _936);
    float _952 = inversesqrt(dot(vec3(_946, _947, _948), vec3(_946, _947, _948)));
    float _953 = _946 * _952;
    float _954 = _947 * _952;
    float _955 = _948 * _952;
    float _961 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _962 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _980 = fma(_875, cbSceneParam._m0[5u].z, fma(_874, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _873));
    float _983 = fma(_875, cbSceneParam._m0[6u].z, fma(_874, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _873));
    float _986 = fma(_875, cbSceneParam._m0[7u].z, fma(_874, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _873));
    uint _999 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1000 = _999 + 9u;
    uint _1001 = _1000 + uint(cbMatDynParam._m0[0u].w);
    float _1007 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0)))) * cbInstanceData._m0[_1001].x;
    float _1008 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0)))) * cbInstanceData._m0[_1001].y;
    float _1009 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0)))) * cbInstanceData._m0[_1001].z;
    float _4202 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
    float _1010 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
    float _4213 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
    float _1011 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
    float _4224 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
    float _1012 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
    float _1013 = 1.0 - _880;
    float _1014 = _1010 * _1013;
    float _1015 = _1011 * _1013;
    float _1016 = _1012 * _1013;
    float _1021 = (_1010 + (-0.039999999105930328369140625)) * _880;
    float _1022 = (_1011 + (-0.039999999105930328369140625)) * _880;
    float _1023 = (_1012 + (-0.039999999105930328369140625)) * _880;
    float _1024 = _1021 + 0.039999999105930328369140625;
    float _1026 = _1022 + 0.039999999105930328369140625;
    float _1027 = _1023 + 0.039999999105930328369140625;
    vec4 _1036 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _961, cbSceneParam._m0[86u].y * _962));
    float _1039 = _1036.x * TEXCOORD_3.w;
    float _1040 = dot(vec3(_873, _874, _875), vec3(_953, _954, _955));
    float _1043 = _1040 * 2.0;
    float _1047 = (_1043 * _873) - _953;
    float _1048 = (_1043 * _874) - _954;
    float _1049 = (_1043 * _875) - _955;
    float _1053 = abs(dot(vec3(_953, _954, _955), vec3(_873, _874, _875)));
    float _4235 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
    float _1055 = sqrt(_876);
    float _1066 = exp2((_1055 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1055 * 3.0));
    float _1072 = (1.0 - _1066) * ((_1055 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1073 = _1066 * _1055;
    float _1101 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1105 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1109 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1410;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1135 = fma(_1109, cbModelParam._m0[26u].z, fma(_1105, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1101));
        float _1139 = fma(_1109, cbModelParam._m0[27u].z, fma(_1105, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1101));
        float _1143 = fma(_1109, cbModelParam._m0[28u].z, fma(_1105, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1101));
        float _1168 = _1101 + _873;
        float _1169 = _1105 + _874;
        float _1170 = _1109 + _875;
        float _1180 = fma(_1170, cbModelParam._m0[26u].z, fma(_1169, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1168)) - _1135;
        float _1181 = fma(_1170, cbModelParam._m0[27u].z, fma(_1169, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1168)) - _1139;
        float _1182 = fma(_1170, cbModelParam._m0[28u].z, fma(_1169, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1168)) - _1143;
        float _1186 = inversesqrt(dot(vec3(_1180, _1181, _1182), vec3(_1180, _1181, _1182)));
        float _1199 = ((_1186 * _1180) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1135 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1200 = ((_1186 * _1181) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1139 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1201 = ((_1186 * _1182) / cbModelParam._m0[34u].z) + ((((((_1143 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1204 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1199, _1200, _1201), 0.0);
        vec4 _1211 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1199, _1200, _1201), 0.0);
        vec4 _1218 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1199, _1200, _1201), 0.0);
        vec4 _1225 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1199, _1200, _1201), 0.0);
        float _1238 = exp2((_1204.w + (-0.5)) * 20.0) * 2.0;
        float _1239 = _1238 * (_1204.x + (-0.5));
        float _1240 = _1238 * (_1204.y + (-0.5));
        float _1241 = _1238 * (_1204.z + (-0.5));
        float _1248 = exp2((_1211.w + (-0.5)) * 20.0) * 2.0;
        float _1249 = _1248 * (_1211.x + (-0.5));
        float _1250 = _1248 * (_1211.y + (-0.5));
        float _1251 = _1248 * (_1211.z + (-0.5));
        float _1258 = exp2((_1218.w + (-0.5)) * 20.0) * 2.0;
        float _1259 = _1258 * (_1218.x + (-0.5));
        float _1260 = _1258 * (_1218.y + (-0.5));
        float _1261 = _1258 * (_1218.z + (-0.5));
        float _1268 = exp2((_1225.w + (-0.5)) * 20.0) * 2.0;
        float _1269 = _1268 * (_1225.x + (-0.5));
        float _1270 = _1268 * (_1225.y + (-0.5));
        float _1271 = _1268 * (_1225.z + (-0.5));
        float _1272 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1273 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1274 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1275 = _1239 * 0.5;
        float _1276 = _1249 * 0.5;
        float _1277 = _1259 * 0.5;
        float _1278 = dot(vec3(_1275, _1276, _1277), vec3(_1275, _1276, _1277));
        float _1283 = (_1278 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1278);
        float _1292 = (dot(vec3(_873, _874, _875), vec3(_1283 * _1275, _1283 * _1276, _1283 * _1277)) + 1.0) * 0.5;
        float _4261 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1302 = sqrt(((_1276 * _1276) + (_1275 * _1275)) + (_1277 * _1277)) / (_1272 + 9.9999997473787516355514526367188e-06);
        float _4272 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1303 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
        float _1304 = _1303 * 2.0;
        float _1308 = (1.0 - _1303) / (_1303 + 1.0);
        float _4283 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1309 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
        float _1318 = ((((1.0 - _1309) * (_1304 + 2.0)) * exp2(log2(isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0))) * (_1304 + 1.0))) + _1309) * _1272;
        float _1319 = _1240 * 0.5;
        float _1320 = _1250 * 0.5;
        float _1321 = _1260 * 0.5;
        float _1322 = dot(vec3(_1319, _1320, _1321), vec3(_1319, _1320, _1321));
        float _1327 = (_1322 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1322);
        float _1335 = (dot(vec3(_873, _874, _875), vec3(_1327 * _1319, _1327 * _1320, _1327 * _1321)) + 1.0) * 0.5;
        float _4294 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1344 = sqrt(((_1320 * _1320) + (_1319 * _1319)) + (_1321 * _1321)) / (_1273 + 9.9999997473787516355514526367188e-06);
        float _4305 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1345 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
        float _1346 = _1345 * 2.0;
        float _1350 = (1.0 - _1345) / (_1345 + 1.0);
        float _4316 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1351 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
        float _1360 = ((((1.0 - _1351) * (_1346 + 2.0)) * exp2(log2(isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0))) * (_1346 + 1.0))) + _1351) * _1273;
        float _1361 = _1241 * 0.5;
        float _1362 = _1251 * 0.5;
        float _1363 = _1261 * 0.5;
        float _1364 = dot(vec3(_1361, _1362, _1363), vec3(_1361, _1362, _1363));
        float _1369 = (_1364 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1364);
        float _1377 = (dot(vec3(_873, _874, _875), vec3(_1369 * _1361, _1369 * _1362, _1369 * _1363)) + 1.0) * 0.5;
        float _4327 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1386 = sqrt(((_1362 * _1362) + (_1361 * _1361)) + (_1363 * _1363)) / (_1274 + 9.9999997473787516355514526367188e-06);
        float _4338 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1387 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
        float _1388 = _1387 * 2.0;
        float _1392 = (1.0 - _1387) / (_1387 + 1.0);
        float _4349 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1393 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
        float _1402 = ((((1.0 - _1393) * (_1388 + 2.0)) * exp2(log2(isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0))) * (_1388 + 1.0))) + _1393) * _1274;
        _1410 = _1241;
        _1412 = _1240;
        _1413 = _1239;
        _1414 = _1251;
        _1415 = _1250;
        _1416 = _1249;
        _1417 = _1261;
        _1418 = _1260;
        _1419 = _1259;
        _1420 = _1274;
        _1421 = _1273;
        _1422 = _1272;
        _1423 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0)));
        _1424 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0)));
        _1425 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0)));
    }
    else
    {
        _1410 = _1411;
        _1412 = _1411;
        _1413 = _1411;
        _1414 = _1411;
        _1415 = _1411;
        _1416 = _1411;
        _1417 = _1411;
        _1418 = _1411;
        _1419 = _1411;
        _1420 = _1411;
        _1421 = _1411;
        _1422 = _1411;
        _1423 = 0.0;
        _1424 = 0.0;
        _1425 = 0.0;
    }
    float _1720;
    float _1721;
    float _1722;
    float _1723;
    float _1724;
    float _1725;
    float _1726;
    float _1727;
    float _1728;
    float _1729;
    float _1730;
    float _1731;
    float _1732;
    float _1733;
    float _1734;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1451 = fma(_1109, cbModelParam._m0[30u].z, fma(_1105, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1101));
        float _1455 = fma(_1109, cbModelParam._m0[31u].z, fma(_1105, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1101));
        float _1459 = fma(_1109, cbModelParam._m0[32u].z, fma(_1105, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1101));
        float _1482 = _1101 + _873;
        float _1483 = _1105 + _874;
        float _1484 = _1109 + _875;
        float _1494 = fma(_1484, cbModelParam._m0[30u].z, fma(_1483, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1482)) - _1451;
        float _1495 = fma(_1484, cbModelParam._m0[31u].z, fma(_1483, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1482)) - _1455;
        float _1496 = fma(_1484, cbModelParam._m0[32u].z, fma(_1483, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1482)) - _1459;
        float _1500 = inversesqrt(dot(vec3(_1494, _1495, _1496), vec3(_1494, _1495, _1496)));
        float _1513 = ((_1500 * _1494) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1451 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1514 = ((_1500 * _1495) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1455 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1515 = ((_1500 * _1496) / cbModelParam._m0[35u].z) + ((((((_1459 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1517 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1513, _1514, _1515), 0.0);
        vec4 _1524 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1513, _1514, _1515), 0.0);
        vec4 _1531 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1513, _1514, _1515), 0.0);
        vec4 _1538 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1513, _1514, _1515), 0.0);
        float _1550 = exp2((_1517.w + (-0.5)) * 20.0) * 2.0;
        float _1551 = _1550 * (_1517.x + (-0.5));
        float _1552 = _1550 * (_1517.y + (-0.5));
        float _1553 = _1550 * (_1517.z + (-0.5));
        float _1560 = exp2((_1524.w + (-0.5)) * 20.0) * 2.0;
        float _1561 = _1560 * (_1524.x + (-0.5));
        float _1562 = _1560 * (_1524.y + (-0.5));
        float _1563 = _1560 * (_1524.z + (-0.5));
        float _1570 = exp2((_1531.w + (-0.5)) * 20.0) * 2.0;
        float _1571 = _1570 * (_1531.x + (-0.5));
        float _1572 = _1570 * (_1531.y + (-0.5));
        float _1573 = _1570 * (_1531.z + (-0.5));
        float _1580 = exp2((_1538.w + (-0.5)) * 20.0) * 2.0;
        float _1581 = _1580 * (_1538.x + (-0.5));
        float _1582 = _1580 * (_1538.y + (-0.5));
        float _1583 = _1580 * (_1538.z + (-0.5));
        float _1584 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1585 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1586 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1587 = _1551 * 0.5;
        float _1588 = _1561 * 0.5;
        float _1589 = _1571 * 0.5;
        float _1590 = dot(vec3(_1587, _1588, _1589), vec3(_1587, _1588, _1589));
        float _1595 = (_1590 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1590);
        float _1603 = (dot(vec3(_873, _874, _875), vec3(_1595 * _1587, _1595 * _1588, _1595 * _1589)) + 1.0) * 0.5;
        float _4390 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1612 = sqrt(((_1588 * _1588) + (_1587 * _1587)) + (_1589 * _1589)) / (_1584 + 9.9999997473787516355514526367188e-06);
        float _4401 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1613 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
        float _1614 = _1613 * 2.0;
        float _1618 = (1.0 - _1613) / (_1613 + 1.0);
        float _4412 = isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0));
        float _1619 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
        float _1628 = ((((1.0 - _1619) * (_1614 + 2.0)) * exp2(log2(isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0))) * (_1614 + 1.0))) + _1619) * _1584;
        float _1629 = _1552 * 0.5;
        float _1630 = _1562 * 0.5;
        float _1631 = _1572 * 0.5;
        float _1632 = dot(vec3(_1629, _1630, _1631), vec3(_1629, _1630, _1631));
        float _1637 = (_1632 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1632);
        float _1645 = (dot(vec3(_873, _874, _875), vec3(_1637 * _1629, _1637 * _1630, _1637 * _1631)) + 1.0) * 0.5;
        float _4423 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
        float _1654 = sqrt(((_1630 * _1630) + (_1629 * _1629)) + (_1631 * _1631)) / (_1585 + 9.9999997473787516355514526367188e-06);
        float _4434 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
        float _1655 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
        float _1656 = _1655 * 2.0;
        float _1660 = (1.0 - _1655) / (_1655 + 1.0);
        float _4445 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
        float _1661 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
        float _1670 = ((((1.0 - _1661) * (_1656 + 2.0)) * exp2(log2(isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0))) * (_1656 + 1.0))) + _1661) * _1585;
        float _1671 = _1553 * 0.5;
        float _1672 = _1563 * 0.5;
        float _1673 = _1573 * 0.5;
        float _1674 = dot(vec3(_1671, _1672, _1673), vec3(_1671, _1672, _1673));
        float _1679 = (_1674 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1674);
        float _1687 = (dot(vec3(_873, _874, _875), vec3(_1679 * _1671, _1679 * _1672, _1679 * _1673)) + 1.0) * 0.5;
        float _4456 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
        float _1696 = sqrt(((_1672 * _1672) + (_1671 * _1671)) + (_1673 * _1673)) / (_1586 + 9.9999997473787516355514526367188e-06);
        float _4467 = isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0));
        float _1697 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
        float _1698 = _1697 * 2.0;
        float _1702 = (1.0 - _1697) / (_1697 + 1.0);
        float _4478 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
        float _1703 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
        float _1712 = ((((1.0 - _1703) * (_1698 + 2.0)) * exp2(log2(isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0))) * (_1698 + 1.0))) + _1703) * _1586;
        _1720 = _1553;
        _1721 = _1552;
        _1722 = _1551;
        _1723 = _1563;
        _1724 = _1562;
        _1725 = _1561;
        _1726 = _1573;
        _1727 = _1572;
        _1728 = _1571;
        _1729 = _1586;
        _1730 = _1585;
        _1731 = _1584;
        _1732 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0)));
        _1733 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0)));
        _1734 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0)));
    }
    else
    {
        _1720 = _1411;
        _1721 = _1411;
        _1722 = _1411;
        _1723 = _1411;
        _1724 = _1411;
        _1725 = _1411;
        _1726 = _1411;
        _1727 = _1411;
        _1728 = _1411;
        _1729 = _1411;
        _1730 = _1411;
        _1731 = _1411;
        _1732 = 0.0;
        _1733 = 0.0;
        _1734 = 0.0;
    }
    float _1744 = (cbModelParam._m0[1u].x * (_1732 - _1423)) + _1423;
    float _1745 = (cbModelParam._m0[1u].x * (_1733 - _1424)) + _1424;
    float _1746 = (cbModelParam._m0[1u].x * (_1734 - _1425)) + _1425;
    float _1767 = fma(_1746, cbSceneParam._m0[89u].z, fma(_1745, cbSceneParam._m0[89u].y, _1744 * cbSceneParam._m0[89u].x));
    float _1770 = fma(_1746, cbSceneParam._m0[90u].z, fma(_1745, cbSceneParam._m0[90u].y, _1744 * cbSceneParam._m0[90u].x));
    float _1773 = fma(_1746, cbSceneParam._m0[91u].z, fma(_1745, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1744));
    float _1788 = _1047 * 0.5;
    float _1789 = _1048 * 0.5;
    float _1790 = _1049 * 0.5;
    float _1791 = dot(vec4(_1788, _1789, _1790, 1.0), vec4(_1722, _1725, _1728, _1731));
    float _1794 = dot(vec4(_1788, _1789, _1790, 1.0), vec4(_1721, _1724, _1727, _1730));
    float _1797 = dot(vec4(_1788, _1789, _1790, 1.0), vec4(_1720, _1723, _1726, _1729));
    float _1831;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1804 = dot(vec4(_1788, _1789, _1790, 1.0), vec4(_1410, _1414, _1417, _1420));
        float _1808 = dot(vec4(_1788, _1789, _1790, 1.0), vec4(_1412, _1415, _1418, _1421));
        float _1812 = dot(vec4(_1788, _1789, _1790, 1.0), vec4(_1413, _1416, _1419, _1422));
        float _1819 = dot(vec4(cbModelParam._m0[39u]), vec4(_1788, _1789, _1790, 1.0));
        _1831 = dot(vec3(isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0)), isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0)), isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1819) ? 0.0 : (isnan(0.0) ? _1819 : max(0.0, _1819))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1831 = 1.0;
    }
    float _1842;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1833 = dot(vec4(cbModelParam._m0[40u]), vec4(_1788, _1789, _1790, 1.0));
        _1842 = dot(vec3(isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0)), isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0)), isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1833) ? 0.0 : (isnan(0.0) ? _1833 : max(0.0, _1833))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1842 = 1.0;
    }
    float _1846 = (_1842 * cbModelParam._m0[1u].x) + (_1831 * (1.0 - cbModelParam._m0[1u].x));
    float _1856 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _876);
    float _1857 = isnan(_1856) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1856 : min(cbModelParam._m0[25u].z, _1856));
    float _1937;
    float _1939;
    float _1941;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1904 = fma(_1109, cbModelParam._m0[13u].z, fma(_1105, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1101)) + cbModelParam._m0[13u].w;
        float _1908 = fma(_1109, cbModelParam._m0[14u].z, fma(_1105, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1101)) + cbModelParam._m0[14u].w;
        float _1912 = fma(_1109, cbModelParam._m0[15u].z, fma(_1105, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1101)) + cbModelParam._m0[15u].w;
        float _1915 = fma(_1049, cbModelParam._m0[13u].z, fma(_1048, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1047));
        float _1918 = fma(_1049, cbModelParam._m0[14u].z, fma(_1048, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1047));
        float _1921 = fma(_1049, cbModelParam._m0[15u].z, fma(_1048, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1047));
        float _1949;
        if (_1915 > 0.0)
        {
            _1949 = abs((1.0 - _1904) / _1915);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1915 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1904 + 1.0) / _1915);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1949 = frontier_phi_14_12_ladder;
        }
        float _2120;
        if (_1918 > 0.0)
        {
            _2120 = abs((1.0 - _1908) / _1918);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1918 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1908 + 1.0) / _1918);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2120 = frontier_phi_23_19_ladder;
        }
        float _2415;
        if (_1921 > 0.0)
        {
            _2415 = abs((1.0 - _1912) / _1921);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1921 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1912 + 1.0) / _1921);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2415 = frontier_phi_35_30_ladder;
        }
        float _2417 = isnan(_2120) ? _1949 : (isnan(_1949) ? _2120 : min(_1949, _2120));
        float _2418 = isnan(_2415) ? _2417 : (isnan(_2417) ? _2415 : min(_2417, _2415));
        float _2422 = (_2418 * _1915) + _1904;
        float _2423 = (_2418 * _1918) + _1908;
        float _2424 = (_2418 * _1921) + _1912;
        float _2425 = _2418 * 9.9999997473787516355514526367188e-05;
        float _2427 = (-1.0) - _2425;
        float _2429 = _2425 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2424 > _2429) || ((_2424 < _2427) || ((_2423 > _2429) || ((_2423 < _2427) || ((_2422 < _2427) || (_2422 > _2429))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2569 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2424, cbModelParam._m0[9u].z, fma(_2423, cbModelParam._m0[9u].y, _2422 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2424, cbModelParam._m0[10u].z, fma(_2423, cbModelParam._m0[10u].y, _2422 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2424, cbModelParam._m0[11u].z, fma(_2423, cbModelParam._m0[11u].y, _2422 * cbModelParam._m0[11u].x))), _1857);
            frontier_phi_13_35_ladder = _2569.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2569.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2569.x * cbModelParam._m0[1u].y;
        }
        _1937 = frontier_phi_13_35_ladder_2;
        _1939 = frontier_phi_13_35_ladder_1;
        _1941 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1925 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1047, _1048, _1049), _1857);
        _1937 = _1925.x * cbModelParam._m0[1u].y;
        _1939 = _1925.y * cbModelParam._m0[1u].y;
        _1941 = _1925.z * cbModelParam._m0[1u].y;
    }
    float _1945 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _876);
    float _1946 = isnan(_1945) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1945 : min(cbModelParam._m0[25u].w, _1945));
    float _2035;
    float _2037;
    float _2039;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1999 = fma(_1109, cbModelParam._m0[21u].z, fma(_1105, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1101)) + cbModelParam._m0[21u].w;
        float _2003 = fma(_1109, cbModelParam._m0[22u].z, fma(_1105, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1101)) + cbModelParam._m0[22u].w;
        float _2007 = fma(_1109, cbModelParam._m0[23u].z, fma(_1105, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1101)) + cbModelParam._m0[23u].w;
        float _2010 = fma(_1049, cbModelParam._m0[21u].z, fma(_1048, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1047));
        float _2013 = fma(_1049, cbModelParam._m0[22u].z, fma(_1048, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1047));
        float _2016 = fma(_1049, cbModelParam._m0[23u].z, fma(_1048, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1047));
        float _2125;
        if (_2010 > 0.0)
        {
            _2125 = abs((1.0 - _1999) / _2010);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2010 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1999 + 1.0) / _2010);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2125 = frontier_phi_25_21_ladder;
        }
        float _2442;
        if (_2013 > 0.0)
        {
            _2442 = abs((1.0 - _2003) / _2013);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2013 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2003 + 1.0) / _2013);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2442 = frontier_phi_37_32_ladder;
        }
        float _2780;
        if (_2016 > 0.0)
        {
            _2780 = abs((1.0 - _2007) / _2016);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2016 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2007 + 1.0) / _2016);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2780 = frontier_phi_47_44_ladder;
        }
        float _2782 = isnan(_2442) ? _2125 : (isnan(_2125) ? _2442 : min(_2125, _2442));
        float _2783 = isnan(_2780) ? _2782 : (isnan(_2782) ? _2780 : min(_2782, _2780));
        float _2787 = (_2783 * _2010) + _1999;
        float _2788 = (_2783 * _2013) + _2003;
        float _2789 = (_2783 * _2016) + _2007;
        float _2790 = _2783 * 9.9999997473787516355514526367188e-05;
        float _2791 = (-1.0) - _2790;
        float _2793 = _2790 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2789 > _2793) || ((_2789 < _2791) || ((_2788 > _2793) || ((_2788 < _2791) || ((_2787 < _2791) || (_2787 > _2793))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2911 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2789, cbModelParam._m0[17u].z, fma(_2788, cbModelParam._m0[17u].y, _2787 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2789, cbModelParam._m0[18u].z, fma(_2788, cbModelParam._m0[18u].y, _2787 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2789, cbModelParam._m0[19u].z, fma(_2788, cbModelParam._m0[19u].y, _2787 * cbModelParam._m0[19u].x))), _1946);
            frontier_phi_22_47_ladder = _2911.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2911.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2911.x * cbModelParam._m0[1u].z;
        }
        _2035 = frontier_phi_22_47_ladder_2;
        _2037 = frontier_phi_22_47_ladder_1;
        _2039 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2019 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1047, _1048, _1049), _1946);
        _2035 = _2019.x * cbModelParam._m0[1u].z;
        _2037 = _2019.y * cbModelParam._m0[1u].z;
        _2039 = _2019.z * cbModelParam._m0[1u].z;
    }
    float _2052 = (((_1072 * _1024) + _1073) * _1039) * ((cbModelParam._m0[1u].w * (_2035 - _1937)) + _1937);
    float _2054 = (((_1072 * _1026) + _1073) * _1039) * ((cbModelParam._m0[1u].w * (_2037 - _1939)) + _1939);
    float _2056 = (((_1072 * _1027) + _1073) * _1039) * ((cbModelParam._m0[1u].w * (_2039 - _1941)) + _1941);
    float _2059 = fma(_2056, cbSceneParam._m0[89u].z, fma(_2054, cbSceneParam._m0[89u].y, _2052 * cbSceneParam._m0[89u].x));
    float _2062 = fma(_2056, cbSceneParam._m0[90u].z, fma(_2054, cbSceneParam._m0[90u].y, _2052 * cbSceneParam._m0[90u].x));
    float _2065 = fma(_2056, cbSceneParam._m0[91u].z, fma(_2054, cbSceneParam._m0[91u].y, _2052 * cbSceneParam._m0[91u].x));
    float _2099 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2103 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2107 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2111 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2112 = _2099 / _2111;
    float _2113 = _2103 / _2111;
    float _2114 = _2107 / _2111;
    float _2261;
    float _2262;
    float _2263;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2141 = ((uint(_2114 > cbSceneParam._m0[59u].y) + uint(_2114 > cbSceneParam._m0[59u].x)) + uint(_2114 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2142 = _2141 + 43u;
        uint _2150 = _2141 + 44u;
        uint _2158 = _2141 + 45u;
        uint _2166 = _2141 + 46u;
        float _2177 = fma(_2111, cbSceneParam._m0[_2142].w, fma(_2107, cbSceneParam._m0[_2142].z, fma(_2103, cbSceneParam._m0[_2142].y, _2099 * cbSceneParam._m0[_2142].x)));
        float _2181 = fma(_2111, cbSceneParam._m0[_2150].w, fma(_2107, cbSceneParam._m0[_2150].z, fma(_2103, cbSceneParam._m0[_2150].y, _2099 * cbSceneParam._m0[_2150].x)));
        float _2189 = fma(_2111, cbSceneParam._m0[_2166].w, fma(_2107, cbSceneParam._m0[_2166].z, fma(_2103, cbSceneParam._m0[_2166].y, _2099 * cbSceneParam._m0[_2166].x)));
        float _2194 = cbSceneParam._m0[33u].z * _2189;
        float _2196 = cbSceneParam._m0[33u].w * _2189;
        float _2199 = fma(_2111, cbSceneParam._m0[_2158].w, fma(_2107, cbSceneParam._m0[_2158].z, fma(_2103, cbSceneParam._m0[_2158].y, _2099 * cbSceneParam._m0[_2158].x))) / _2189;
        float _2247 = (cbSceneParam._m0[33u].x - sqrt(((_2113 * _2113) + (_2112 * _2112)) + (_2114 * _2114))) * cbSceneParam._m0[33u].y;
        float _4604 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
        float _2254 = (isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2194 + _2177) / _2189, (_2196 + _2181) / _2189), _2199), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2196 + _2177) / _2189, (_2181 - _2194) / _2189), _2199), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2177 - _2194) / _2189, (_2181 - _2196) / _2189), _2199), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2177 - _2196) / _2189, (_2194 + _2181) / _2189), _2199), 0.0)).x), vec4(0.25)));
        _2261 = 1.0 - (_2254 * cbSceneParam._m0[34u].x);
        _2262 = 1.0 - (_2254 * cbSceneParam._m0[34u].y);
        _2263 = 1.0 - (_2254 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2261 = 1.0;
        _2262 = 1.0;
        _2263 = 1.0;
    }
    float _2327;
    float _2329;
    float _2331;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2315 = fma(_2111, cbSceneParam._m0[63u].w, fma(_2107, cbSceneParam._m0[63u].z, fma(_2103, cbSceneParam._m0[63u].y, _2099 * cbSceneParam._m0[63u].x)));
        float _2316 = fma(_2111, cbSceneParam._m0[60u].w, fma(_2107, cbSceneParam._m0[60u].z, fma(_2103, cbSceneParam._m0[60u].y, _2099 * cbSceneParam._m0[60u].x))) / _2315;
        float _2317 = fma(_2111, cbSceneParam._m0[61u].w, fma(_2107, cbSceneParam._m0[61u].z, fma(_2103, cbSceneParam._m0[61u].y, _2099 * cbSceneParam._m0[61u].x))) / _2315;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2316 >= cbSceneParam._m0[64u].x) && (_2317 >= cbSceneParam._m0[64u].y)) && (_2316 <= cbSceneParam._m0[64u].z)) && (_2317 <= cbSceneParam._m0[64u].w))
        {
            float _2455 = fma(_2111, cbSceneParam._m0[62u].w, fma(_2107, cbSceneParam._m0[62u].z, fma(_2103, cbSceneParam._m0[62u].y, _2099 * cbSceneParam._m0[62u].x))) / _2315;
            float _2459 = isnan(cbSceneParam._m0[41u].w) ? _2455 : (isnan(_2455) ? cbSceneParam._m0[41u].w : max(_2455, cbSceneParam._m0[41u].w));
            float _2502 = (cbSceneParam._m0[33u].x - sqrt(((_2113 * _2113) + (_2112 * _2112)) + (_2114 * _2114))) * cbSceneParam._m0[33u].y;
            float _4620 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
            float _2509 = (isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2316, cbSceneParam._m0[33u].w + _2317), _2459), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2316, _2317 - cbSceneParam._m0[33u].z), _2459), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2316 - cbSceneParam._m0[33u].z, _2317 - cbSceneParam._m0[33u].w), _2459), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2316 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2317), _2459), 0.0)).x), vec4(0.25)));
            float _2513 = 1.0 - (_2509 * cbSceneParam._m0[34u].x);
            float _2514 = 1.0 - (_2509 * cbSceneParam._m0[34u].y);
            float _2515 = 1.0 - (_2509 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2515) ? _2263 : (isnan(_2263) ? _2515 : min(_2263, _2515));
            frontier_phi_34_33_ladder_1 = isnan(_2514) ? _2262 : (isnan(_2262) ? _2514 : min(_2262, _2514));
            frontier_phi_34_33_ladder_2 = isnan(_2513) ? _2261 : (isnan(_2261) ? _2513 : min(_2261, _2513));
        }
        else
        {
            frontier_phi_34_33_ladder = _2263;
            frontier_phi_34_33_ladder_1 = _2262;
            frontier_phi_34_33_ladder_2 = _2261;
        }
        _2327 = frontier_phi_34_33_ladder_2;
        _2329 = frontier_phi_34_33_ladder_1;
        _2331 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2327 = _2261;
        _2329 = _2262;
        _2331 = _2263;
    }
    uvec4 _2336 = floatBitsToUint(cbInstanceData._m0[_999 + 5u]);
    uint _2338 = _2336.x * 14u;
    uint _2339 = _2338 + 13u;
    float _2346 = _1039 + (-1.0);
    float _2351 = (cbLight._m0[_2339].x * _2346) + 1.0;
    float _2352 = (cbLight._m0[_2339].y * _2346) + 1.0;
    float _2353 = (cbLight._m0[_2339].z * _2346) + 1.0;
    float _2354 = (cbLight._m0[_2339].w * _2346) + 1.0;
    uint _2355 = _2338 + 5u;
    float _2361 = isnan(1.0) ? _2352 : (isnan(_2352) ? 1.0 : min(_2352, 1.0));
    uint _2365 = _2338 + 4u;
    float _2374 = isnan(1.0) ? _2351 : (isnan(_2351) ? 1.0 : min(_2351, 1.0));
    uint _2378 = _2338 | 1u;
    float _2389 = dot(vec3(cbLight._m0[_2338].xyz), vec3(_873, _874, _875));
    float _2392 = dot(vec3(cbLight._m0[_2378].xyz), vec3(_873, _874, _875));
    float _4656 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
    float _4667 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
    float _2397 = (isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0))) * 0.3183098733425140380859375;
    float _2399 = (isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0))) * 0.3183098733425140380859375;
    float _2406 = ((cbLight._m0[_2355].x * _2361) * _2399) + (((cbLight._m0[_2365].x * _2327) * _2374) * _2397);
    float _2407 = ((_2361 * cbLight._m0[_2355].y) * _2399) + (((cbLight._m0[_2365].y * _2329) * _2374) * _2397);
    float _2408 = ((_2361 * cbLight._m0[_2355].z) * _2399) + (((cbLight._m0[_2365].z * _2331) * _2374) * _2397);
    uvec4 _2412 = floatBitsToUint(cbLight._m0[_2338 + 12u]);
    bool _2414 = _2412.x == 0u;
    float _2516;
    float _2518;
    float _2520;
    if (_2414)
    {
        _2516 = _2406;
        _2518 = _2407;
        _2520 = _2408;
    }
    else
    {
        uint _2524 = _2338 + 6u;
        float _2540 = (dot(vec3(cbLight._m0[_2338 + 2u].xyz), vec3(_873, _874, _875)) * 0.5) + 0.5;
        float _2541 = _2540 * _2540;
        float _4678 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
        float _2542 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
        float _2543 = isnan(1.0) ? _2353 : (isnan(_2353) ? 1.0 : min(_2353, 1.0));
        _2516 = (((cbLight._m0[_2524].x * 0.3183098733425140380859375) * _2542) * _2543) + _2406;
        _2518 = (((cbLight._m0[_2524].y * 0.3183098733425140380859375) * _2542) * _2543) + _2407;
        _2520 = (((cbLight._m0[_2524].z * 0.3183098733425140380859375) * _2542) * _2543) + _2408;
    }
    bool _2523 = _2412.y == 0u;
    float _2578;
    float _2580;
    float _2582;
    if (_2523)
    {
        _2578 = _2516;
        _2580 = _2518;
        _2582 = _2520;
    }
    else
    {
        uint _2751 = _2338 + 7u;
        float _2767 = (dot(vec3(cbLight._m0[_2338 + 3u].xyz), vec3(_873, _874, _875)) * 0.5) + 0.5;
        float _2768 = _2767 * _2767;
        float _4694 = isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : max(_2768, 0.0));
        float _2769 = isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0));
        float _2770 = isnan(1.0) ? _2354 : (isnan(_2354) ? 1.0 : min(_2354, 1.0));
        _2578 = (((cbLight._m0[_2751].x * 0.3183098733425140380859375) * _2769) * _2770) + _2516;
        _2580 = (((cbLight._m0[_2751].y * 0.3183098733425140380859375) * _2769) * _2770) + _2518;
        _2582 = (((cbLight._m0[_2751].z * 0.3183098733425140380859375) * _2769) * _2770) + _2520;
    }
    uint _2585 = _2338 + 8u;
    float _2598 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2338].w)) * _876) * 0.949999988079071044921875);
    float _2599 = _2598 * _2598;
    float _2600 = cbLight._m0[_2338].x + _953;
    float _2601 = cbLight._m0[_2338].y + _954;
    float _2602 = cbLight._m0[_2338].z + _955;
    float _2606 = inversesqrt(dot(vec3(_2600, _2601, _2602), vec3(_2600, _2601, _2602)));
    float _2607 = _2606 * _2600;
    float _2608 = _2606 * _2601;
    float _2609 = _2606 * _2602;
    float _2610 = dot(vec3(_873, _874, _875), vec3(cbLight._m0[_2338].xyz));
    float _4710 = isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : max(_2610, 0.0));
    float _2613 = isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0));
    float _4721 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
    float _2614 = isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0));
    float _2615 = dot(vec3(_873, _874, _875), vec3(_2607, _2608, _2609));
    float _4732 = isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0));
    float _2618 = isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0));
    float _2619 = dot(vec3(cbLight._m0[_2338].xyz), vec3(_2607, _2608, _2609));
    float _4743 = isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0));
    float _2623 = _2599 * _2599;
    float _2627 = ((_2618 * _2618) * (_2623 + (-1.0))) + 1.0;
    float _2635 = exp2(log2(1.0 - (isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0)))) * 5.0);
    float _2636 = 0.959999978542327880859375 - _1021;
    float _2638 = 0.959999978542327880859375 - _1022;
    float _2639 = 0.959999978542327880859375 - _1023;
    float _2646 = 1.0 - _2599;
    float _2657 = (0.5 / (((_2614 * ((_2613 * _2646) + _2599)) + 9.9999999392252902907785028219223e-09) + (((_2614 * _2646) + _2599) * _2613))) * _2613;
    float _4754 = isnan(0.0) ? _2657 : (isnan(_2657) ? 0.0 : max(_2657, 0.0));
    float _2659 = (isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0))) * (_2623 / ((_2627 * _2627) * 3.141590118408203125));
    uint _2673 = _2338 + 9u;
    float _2684 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2378].w)) * _876) * 0.949999988079071044921875);
    float _2685 = _2684 * _2684;
    float _2686 = cbLight._m0[_2378].x + _953;
    float _2687 = cbLight._m0[_2378].y + _954;
    float _2688 = cbLight._m0[_2378].z + _955;
    float _2692 = inversesqrt(dot(vec3(_2686, _2687, _2688), vec3(_2686, _2687, _2688)));
    float _2693 = _2692 * _2686;
    float _2694 = _2692 * _2687;
    float _2695 = _2692 * _2688;
    float _2696 = dot(vec3(_873, _874, _875), vec3(cbLight._m0[_2378].xyz));
    float _4765 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0));
    float _2699 = isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0));
    float _2700 = dot(vec3(_873, _874, _875), vec3(_2693, _2694, _2695));
    float _4776 = isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : max(_2700, 0.0));
    float _2703 = isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0));
    float _2704 = dot(vec3(cbLight._m0[_2378].xyz), vec3(_2693, _2694, _2695));
    float _4787 = isnan(0.0) ? _2704 : (isnan(_2704) ? 0.0 : max(_2704, 0.0));
    float _2708 = _2685 * _2685;
    float _2712 = ((_2703 * _2703) * (_2708 + (-1.0))) + 1.0;
    float _2719 = exp2(log2(1.0 - (isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0)))) * 5.0);
    float _2726 = 1.0 - _2685;
    float _2736 = (0.5 / (((_2614 * ((_2699 * _2726) + _2685)) + 9.9999999392252902907785028219223e-09) + (((_2614 * _2726) + _2685) * _2699))) * _2699;
    float _4798 = isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0));
    float _2738 = (isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0))) * (_2708 / ((_2712 * _2712) * 3.141590118408203125));
    float _2748 = (((((_2719 * _2636) + _1024) * cbLight._m0[_2673].x) * _2738) * _2361) + ((((cbLight._m0[_2585].x * _2327) * ((_2635 * _2636) + _1024)) * _2659) * _2374);
    float _2749 = (((((_2719 * _2638) + _1026) * cbLight._m0[_2673].y) * _2738) * _2361) + ((((cbLight._m0[_2585].y * _2329) * ((_2635 * _2638) + _1026)) * _2659) * _2374);
    float _2750 = (((((_2719 * _2639) + _1027) * cbLight._m0[_2673].z) * _2738) * _2361) + ((((cbLight._m0[_2585].z * _2331) * ((_2635 * _2639) + _1027)) * _2659) * _2374);
    float _2806;
    float _2808;
    float _2810;
    if (_2414)
    {
        _2806 = _2748;
        _2808 = _2749;
        _2810 = _2750;
    }
    else
    {
        uint _2812 = _2338 + 2u;
        uint _2816 = _2338 + 10u;
        float _2830 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2812].w)) * _876) * 0.949999988079071044921875);
        float _2831 = _2830 * _2830;
        float _2832 = cbLight._m0[_2812].x + _953;
        float _2833 = cbLight._m0[_2812].y + _954;
        float _2834 = cbLight._m0[_2812].z + _955;
        float _2838 = inversesqrt(dot(vec3(_2832, _2833, _2834), vec3(_2832, _2833, _2834)));
        float _2839 = _2838 * _2832;
        float _2840 = _2838 * _2833;
        float _2841 = _2838 * _2834;
        float _2842 = dot(vec3(_873, _874, _875), vec3(cbLight._m0[_2812].xyz));
        float _4809 = isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : max(_2842, 0.0));
        float _2845 = isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0));
        float _2846 = dot(vec3(_873, _874, _875), vec3(_2839, _2840, _2841));
        float _4820 = isnan(0.0) ? _2846 : (isnan(_2846) ? 0.0 : max(_2846, 0.0));
        float _2849 = isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0));
        float _2850 = dot(vec3(cbLight._m0[_2812].xyz), vec3(_2839, _2840, _2841));
        float _4831 = isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : max(_2850, 0.0));
        float _2854 = _2831 * _2831;
        float _2858 = ((_2849 * _2849) * (_2854 + (-1.0))) + 1.0;
        float _2865 = exp2(log2(1.0 - (isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0)))) * 5.0);
        float _2872 = 1.0 - _2831;
        float _2882 = (0.5 / (((_2614 * ((_2845 * _2872) + _2831)) + 9.9999999392252902907785028219223e-09) + (((_2614 * _2872) + _2831) * _2845))) * _2845;
        float _4842 = isnan(0.0) ? _2882 : (isnan(_2882) ? 0.0 : max(_2882, 0.0));
        float _2884 = (isnan(1.0) ? _4842 : (isnan(_4842) ? 1.0 : min(_4842, 1.0))) * (_2854 / ((_2858 * _2858) * 3.141590118408203125));
        float _2885 = isnan(1.0) ? _2353 : (isnan(_2353) ? 1.0 : min(_2353, 1.0));
        _2806 = (((((_2865 * _2636) + _1024) * cbLight._m0[_2816].x) * _2884) * _2885) + _2748;
        _2808 = (((((_2865 * _2638) + _1026) * cbLight._m0[_2816].y) * _2884) * _2885) + _2749;
        _2810 = (((((_2865 * _2639) + _1027) * cbLight._m0[_2816].z) * _2884) * _2885) + _2750;
    }
    float _2916;
    float _2918;
    float _2920;
    if (_2523)
    {
        _2916 = _2806;
        _2918 = _2808;
        _2920 = _2810;
    }
    else
    {
        uint _2927 = _2338 + 3u;
        uint _2931 = _2338 + 11u;
        float _2945 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2927].w)) * _876) * 0.949999988079071044921875);
        float _2946 = _2945 * _2945;
        float _2947 = cbLight._m0[_2927].x + _953;
        float _2948 = cbLight._m0[_2927].y + _954;
        float _2949 = cbLight._m0[_2927].z + _955;
        float _2953 = inversesqrt(dot(vec3(_2947, _2948, _2949), vec3(_2947, _2948, _2949)));
        float _2954 = _2953 * _2947;
        float _2955 = _2953 * _2948;
        float _2956 = _2953 * _2949;
        float _2957 = dot(vec3(_873, _874, _875), vec3(cbLight._m0[_2927].xyz));
        float _4858 = isnan(0.0) ? _2957 : (isnan(_2957) ? 0.0 : max(_2957, 0.0));
        float _2960 = isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0));
        float _2961 = dot(vec3(_873, _874, _875), vec3(_2954, _2955, _2956));
        float _4869 = isnan(0.0) ? _2961 : (isnan(_2961) ? 0.0 : max(_2961, 0.0));
        float _2964 = isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0));
        float _2965 = dot(vec3(cbLight._m0[_2927].xyz), vec3(_2954, _2955, _2956));
        float _4880 = isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : max(_2965, 0.0));
        float _2969 = _2946 * _2946;
        float _2973 = ((_2964 * _2964) * (_2969 + (-1.0))) + 1.0;
        float _2980 = exp2(log2(1.0 - (isnan(1.0) ? _4880 : (isnan(_4880) ? 1.0 : min(_4880, 1.0)))) * 5.0);
        float _2987 = 1.0 - _2946;
        float _2997 = (0.5 / (((_2614 * ((_2960 * _2987) + _2946)) + 9.9999999392252902907785028219223e-09) + (((_2614 * _2987) + _2946) * _2960))) * _2960;
        float _4891 = isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0));
        float _2999 = (isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0))) * (_2969 / ((_2973 * _2973) * 3.141590118408203125));
        float _3000 = isnan(1.0) ? _2354 : (isnan(_2354) ? 1.0 : min(_2354, 1.0));
        _2916 = (((((_2980 * _2636) + _1024) * cbLight._m0[_2931].x) * _2999) * _3000) + _2806;
        _2918 = (((((_2980 * _2638) + _1026) * cbLight._m0[_2931].y) * _2999) * _3000) + _2808;
        _2920 = (((((_2980 * _2639) + _1027) * cbLight._m0[_2931].z) * _2999) * _3000) + _2810;
    }
    float _3066;
    float _3068;
    float _3070;
    float _3072;
    float _3074;
    float _3076;
    if (_2336.y == 0u)
    {
        uvec4 _3021 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3022 = _3021.x;
        uint _3033 = uint((float(_3021.y) * floor(float(uint(cbSceneParam._m0[85u].y * _962) / _3022))) + floor(float(uint(cbSceneParam._m0[85u].x * _961) / _3022)));
        float _3043 = (log2(_2114 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3044 = isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : max(_3043, 0.0));
        uint _3047 = uint(isnan(14.0) ? _3044 : (isnan(_3044) ? 14.0 : min(_3044, 14.0)));
        uvec4 _3052 = texelFetch(g_lightClusterGridBuffer, int(((_3047 << 2u) + (_3033 << 6u)) >> 2u));
        uint _3053 = _3052.x;
        uint _3054 = _3021.z;
        float _3168;
        float _3170;
        float _3172;
        float _3174;
        float _3176;
        float _3178;
        if (((((1u << ((_3054 >> 4u) & 15u)) + 4294967295u) & _3053) == 0u) || ((_3054 & 240u) == 0u))
        {
            _3168 = 0.0;
            _3170 = 0.0;
            _3172 = 0.0;
            _3174 = 0.0;
            _3176 = 0.0;
            _3178 = 0.0;
        }
        else
        {
            float _3169;
            float _3171;
            float _3173;
            float _3175;
            float _3177;
            float _3179;
            float _3322 = 0.0;
            float _3323 = 0.0;
            float _3324 = 0.0;
            float _3325 = 0.0;
            float _3326 = 0.0;
            float _3327 = 0.0;
            uint _3328 = 0u;
            uint _3337;
            bool _3338;
            for (;;)
            {
                _3337 = texelFetch(g_lightClassification, int((((_3047 << 5u) + (_3033 << 9u)) + (_3328 << 2u)) >> 2u)).x;
                _3338 = _3337 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3338)
                {
                    frontier_phi_66_pred = _3327;
                    frontier_phi_66_pred_1 = _3326;
                    frontier_phi_66_pred_2 = _3325;
                    frontier_phi_66_pred_3 = _3324;
                    frontier_phi_66_pred_4 = _3323;
                    frontier_phi_66_pred_5 = _3322;
                }
                else
                {
                    float _3446;
                    float _3447;
                    float _3448;
                    float _3449;
                    float _3450;
                    float _3451;
                    uint _3452;
                    _3446 = _3322;
                    _3447 = _3323;
                    _3448 = _3324;
                    _3449 = _3325;
                    _3450 = _3326;
                    _3451 = _3327;
                    _3452 = _3337;
                    float _3378;
                    float _3379;
                    float _3380;
                    float _3381;
                    float _3382;
                    float _3383;
                    for (;;)
                    {
                        uint _3456 = uint(findLSB(_3452)) + (_3328 << 5u);
                        uint _3453 = (_3452 + 4294967295u) & _3452;
                        uint _3458 = _3456 * 48u;
                        vec4 _3472 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3458)).x, texelFetch(g_PointLightRenderingBuffer, int(_3458 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3458 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3458 + 3u)).x));
                        uint _3478 = (_3456 * 48u) + 4u;
                        vec4 _3491 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3478)).x, texelFetch(g_PointLightRenderingBuffer, int(_3478 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3478 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3478 + 3u)).x));
                        uint _3497 = (_3456 * 48u) + 8u;
                        vec3 _3508 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3497)).x, texelFetch(g_PointLightRenderingBuffer, int(_3497 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3497 + 2u)).x));
                        float _3512 = _3472.x - _2112;
                        float _3513 = _3472.y - _2113;
                        float _3514 = _3472.z - _2114;
                        float _3515 = dot(vec3(_3512, _3513, _3514), vec3(_3512, _3513, _3514));
                        float _3518 = inversesqrt(_3515);
                        float _3519 = _3518 * _3512;
                        float _3520 = _3518 * _3513;
                        float _3521 = _3518 * _3514;
                        float _3522 = dot(vec3(_980, _983, _986), vec3(_3519, _3520, _3521));
                        float _3527 = 1.0 - (_3515 * _3472.w);
                        float _4917 = isnan(0.0) ? _3527 : (isnan(_3527) ? 0.0 : max(_3527, 0.0));
                        float _3528 = isnan(1.0) ? _4917 : (isnan(_4917) ? 1.0 : min(_4917, 1.0));
                        float _3529 = sqrt(_3515) * _3491.w;
                        float _3532 = 1.39999997615814208984375 / (_3529 + 1.39999997615814208984375);
                        float _3533 = _3532 * _3532;
                        float _3536 = ((1.0 - _3533) * _3522) + _3533;
                        float _3539 = _3529 * _3529;
                        float _3543 = ((isnan(0.0) ? _3536 : (isnan(_3536) ? 0.0 : max(_3536, 0.0))) * _3528) / ((_3539 * 0.699999988079071044921875) + 1.0);
                        float _3547 = (-0.0) - _2112;
                        float _3548 = (-0.0) - _2113;
                        float _3549 = (-0.0) - _2114;
                        float _3553 = inversesqrt(dot(vec3(_3547, _3548, _3549), vec3(_3547, _3548, _3549)));
                        float _3554 = _3553 * _3547;
                        float _3555 = _3553 * _3548;
                        float _3556 = _3553 * _3549;
                        float _3563 = exp2(log2(1.0 / ((_3539 * 3.5) + 5.0)) * 0.25);
                        float _3564 = 1.0 - _1055;
                        float _3571 = sqrt(1.0 - ((1.0 - (_3564 * _3564)) * (1.0 - (_3563 * _3563))));
                        float _3572 = _3571 * _3571;
                        float _3573 = _3572 * _3572;
                        float _3574 = _3554 + _3519;
                        float _3575 = _3555 + _3520;
                        float _3576 = _3556 + _3521;
                        float _3580 = inversesqrt(dot(vec3(_3574, _3575, _3576), vec3(_3574, _3575, _3576)));
                        float _3584 = dot(vec3(_980, _983, _986), vec3(_3554, _3555, _3556));
                        float _4933 = isnan(0.0) ? _3584 : (isnan(_3584) ? 0.0 : max(_3584, 0.0));
                        float _3587 = isnan(1.0) ? _4933 : (isnan(_4933) ? 1.0 : min(_4933, 1.0));
                        float _3588 = dot(vec3(_980, _983, _986), vec3(_3580 * _3574, _3580 * _3575, _3580 * _3576));
                        float _4944 = isnan(0.0) ? _3588 : (isnan(_3588) ? 0.0 : max(_3588, 0.0));
                        float _3591 = isnan(1.0) ? _4944 : (isnan(_4944) ? 1.0 : min(_4944, 1.0));
                        float _3595 = ((_3591 * _3591) * (_3573 + (-1.0))) + 1.0;
                        float _3596 = _3532 * _3572;
                        float _3597 = _3596 * _3596;
                        float _3600 = ((1.0 - _3597) * _3522) + _3597;
                        float _4955 = isnan(0.0) ? _3600 : (isnan(_3600) ? 0.0 : max(_3600, 0.0));
                        float _3601 = isnan(1.0) ? _4955 : (isnan(_4955) ? 1.0 : min(_4955, 1.0));
                        float _3602 = 1.0 - _3572;
                        float _3612 = (0.5 / (((_3601 * ((_3587 * _3602) + _3572)) + 9.9999999392252902907785028219223e-09) + (((_3601 * _3602) + _3572) * _3587))) * _3601;
                        float _4966 = isnan(0.0) ? _3612 : (isnan(_3612) ? 0.0 : max(_3612, 0.0));
                        float _3623 = (((_3573 * 3.1415927410125732421875) * (isnan(1.0) ? _4966 : (isnan(_4966) ? 1.0 : min(_4966, 1.0)))) / ((_3595 * _3595) * ((_3539 * 2.1991131305694580078125) + 3.141590118408203125))) * _3528;
                        _3381 = (_3543 * _3491.x) + _3449;
                        _3382 = (_3543 * _3491.y) + _3450;
                        _3383 = (_3543 * _3491.z) + _3451;
                        _3378 = (_3623 * _3508.x) + _3446;
                        _3379 = (_3623 * _3508.y) + _3447;
                        _3380 = (_3623 * _3508.z) + _3448;
                        if (_3453 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3446 = _3378;
                            _3447 = _3379;
                            _3448 = _3380;
                            _3449 = _3381;
                            _3450 = _3382;
                            _3451 = _3383;
                            _3452 = _3453;
                        }
                    }
                    frontier_phi_66_pred = _3383;
                    frontier_phi_66_pred_1 = _3382;
                    frontier_phi_66_pred_2 = _3381;
                    frontier_phi_66_pred_3 = _3380;
                    frontier_phi_66_pred_4 = _3379;
                    frontier_phi_66_pred_5 = _3378;
                }
                _3179 = frontier_phi_66_pred;
                _3177 = frontier_phi_66_pred_1;
                _3175 = frontier_phi_66_pred_2;
                _3173 = frontier_phi_66_pred_3;
                _3171 = frontier_phi_66_pred_4;
                _3169 = frontier_phi_66_pred_5;
                uint _3329 = _3328 + 1u;
                if (_3329 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3322 = _3169;
                    _3323 = _3171;
                    _3324 = _3173;
                    _3325 = _3175;
                    _3326 = _3177;
                    _3327 = _3179;
                    _3328 = _3329;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3168 = _3169;
            _3170 = _3171;
            _3172 = _3173;
            _3174 = _3175;
            _3176 = _3177;
            _3178 = _3179;
        }
        uvec4 _3182 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3183 = _3182.z;
        uint _3185 = (_3183 >> 8u) & 15u;
        float _3290;
        float _3292;
        float _3294;
        float _3296;
        float _3298;
        float _3300;
        if (((4294967295u << _3185) & _3053) == 0u)
        {
            _3290 = _3168;
            _3292 = _3170;
            _3294 = _3172;
            _3296 = _3174;
            _3298 = _3176;
            _3300 = _3178;
        }
        else
        {
            float _3315 = inversesqrt(dot(vec3(_2112, _2113, _2114), vec3(_2112, _2113, _2114)));
            float _3316 = _3315 * _2112;
            float _3317 = _3315 * _2113;
            float _3318 = _3315 * _2114;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3185 < ((_3183 >> 12u) & 15u))
            {
                float _3291;
                float _3293;
                float _3295;
                float _3297;
                float _3299;
                float _3301;
                float _3429 = _3168;
                float _3430 = _3170;
                float _3431 = _3172;
                float _3432 = _3174;
                float _3433 = _3176;
                float _3434 = _3178;
                uint _3435 = _3185;
                uint _3444;
                bool _3445;
                for (;;)
                {
                    _3444 = texelFetch(g_lightClassification, int((((_3047 << 5u) + (_3033 << 9u)) + (_3435 << 2u)) >> 2u)).x;
                    _3445 = _3444 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3445)
                    {
                        frontier_phi_72_pred = _3434;
                        frontier_phi_72_pred_1 = _3433;
                        frontier_phi_72_pred_2 = _3432;
                        frontier_phi_72_pred_3 = _3431;
                        frontier_phi_72_pred_4 = _3430;
                        frontier_phi_72_pred_5 = _3429;
                    }
                    else
                    {
                        float _3628;
                        float _3629;
                        float _3630;
                        float _3631;
                        float _3632;
                        float _3633;
                        float _3921;
                        float _3922;
                        float _3923;
                        float _3924;
                        float _3925;
                        float _3926;
                        float _3641 = _3429;
                        float _3642 = _3430;
                        float _3643 = _3431;
                        float _3644 = _3432;
                        float _3645 = _3433;
                        float _3646 = _3434;
                        uint _3647 = _3444;
                        uint _3648;
                        vec4 _3673;
                        float _3674;
                        vec4 _3689;
                        vec3 _3701;
                        vec4 _3716;
                        vec4 _3731;
                        float _3777;
                        bool _3778;
                        for (;;)
                        {
                            uint _3658 = ((_3435 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3647));
                            _3648 = (_3647 + 4294967295u) & _3647;
                            uint _3660 = _3658 * 40u;
                            _3673 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3660)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3660 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3660 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3660 + 3u)).x));
                            _3674 = _3673.w;
                            uint _3676 = (_3658 * 40u) + 4u;
                            _3689 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3676)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3676 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3676 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3676 + 3u)).x));
                            uint _3691 = (_3658 * 40u) + 8u;
                            _3701 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3691)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3691 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3691 + 2u)).x));
                            uint _3703 = (_3658 * 40u) + 16u;
                            _3716 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3703)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3703 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3703 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3703 + 3u)).x));
                            uint _3718 = (_3658 * 40u) + 20u;
                            _3731 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3718)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3718 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3718 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3718 + 3u)).x));
                            uint _3733 = (_3658 * 40u) + 24u;
                            vec4 _3746 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3733)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3733 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3733 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3733 + 3u)).x));
                            uint _3752 = (_3658 * 40u) + 28u;
                            vec4 _3765 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3752)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3752 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3752 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3752 + 3u)).x));
                            _3777 = fma(_2114, _3765.z, fma(_2113, _3765.y, _3765.x * _2112)) + _3765.w;
                            _3778 = !((fma(_2114, _3746.z, fma(_2113, _3746.y, _3746.x * _2112)) + _3746.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3778)
                            {
                                float _3805 = _3673.x - _2112;
                                float _3806 = _3673.y - _2113;
                                float _3807 = _3673.z - _2114;
                                float _3808 = dot(vec3(_3805, _3806, _3807), vec3(_3805, _3806, _3807));
                                float _3811 = inversesqrt(_3808);
                                float _3812 = _3811 * _3805;
                                float _3813 = _3811 * _3806;
                                float _3814 = _3811 * _3807;
                                float _3818 = 1.0 - (_3808 / (_3674 * _3674));
                                float _4977 = isnan(0.0) ? _3818 : (isnan(_3818) ? 0.0 : max(_3818, 0.0));
                                float _3819 = isnan(1.0) ? _4977 : (isnan(_4977) ? 1.0 : min(_4977, 1.0));
                                float _3823 = sqrt(_3808) * _3689.w;
                                float _3825 = 1.39999997615814208984375 / (_3823 + 1.39999997615814208984375);
                                float _3826 = _3825 * _3825;
                                float _3829 = ((1.0 - _3826) * dot(vec3(_3812, _3813, _3814), vec3(_980, _983, _986))) + _3826;
                                float _3832 = _3823 * _3823;
                                float _3836 = (fma(_2114, _3716.z, fma(_2113, _3716.y, _3716.x * _2112)) + _3716.w) / _3777;
                                float _3837 = (fma(_2114, _3731.z, fma(_2113, _3731.y, _3731.x * _2112)) + _3731.w) / _3777;
                                float _3841 = 1.0 - dot(vec2(_3836, _3837), vec2(_3836, _3837));
                                float _4993 = isnan(0.0) ? _3841 : (isnan(_3841) ? 0.0 : max(_3841, 0.0));
                                float _3842 = isnan(1.0) ? _4993 : (isnan(_4993) ? 1.0 : min(_4993, 1.0));
                                float _3843 = _3842 * (((isnan(0.0) ? _3829 : (isnan(_3829) ? 0.0 : max(_3829, 0.0))) * _3819) / ((_3832 * 0.699999988079071044921875) + 1.0));
                                float _3855 = exp2(log2(1.0 / ((_3832 * 3.5) + 5.0)) * 0.25);
                                float _3856 = 1.0 - _1055;
                                float _3863 = sqrt(1.0 - ((1.0 - (_3856 * _3856)) * (1.0 - (_3855 * _3855))));
                                float _3864 = _3863 * _3863;
                                float _3865 = _3864 * _3864;
                                float _3866 = _3812 - _3316;
                                float _3867 = _3813 - _3317;
                                float _3868 = _3814 - _3318;
                                float _3872 = inversesqrt(dot(vec3(_3866, _3867, _3868), vec3(_3866, _3867, _3868)));
                                float _3876 = dot(vec3(_980, _983, _986), vec3((-0.0) - _3316, (-0.0) - _3317, (-0.0) - _3318));
                                float _5004 = isnan(0.0) ? _3876 : (isnan(_3876) ? 0.0 : max(_3876, 0.0));
                                float _3879 = isnan(1.0) ? _5004 : (isnan(_5004) ? 1.0 : min(_5004, 1.0));
                                float _3880 = dot(vec3(_980, _983, _986), vec3(_3872 * _3866, _3872 * _3867, _3872 * _3868));
                                float _5015 = isnan(0.0) ? _3880 : (isnan(_3880) ? 0.0 : max(_3880, 0.0));
                                float _3883 = isnan(1.0) ? _5015 : (isnan(_5015) ? 1.0 : min(_5015, 1.0));
                                float _3887 = ((_3883 * _3883) * (_3865 + (-1.0))) + 1.0;
                                float _3888 = _3825 * _3864;
                                float _3889 = _3888 * _3888;
                                float _3895 = ((1.0 - _3889) * dot(vec3(_980, _983, _986), vec3(_3812, _3813, _3814))) + _3889;
                                float _5026 = isnan(0.0) ? _3895 : (isnan(_3895) ? 0.0 : max(_3895, 0.0));
                                float _3896 = isnan(1.0) ? _5026 : (isnan(_5026) ? 1.0 : min(_5026, 1.0));
                                float _3897 = 1.0 - _3864;
                                float _3907 = (0.5 / (((_3896 * ((_3879 * _3897) + _3864)) + 9.9999999392252902907785028219223e-09) + (((_3896 * _3897) + _3864) * _3879))) * _3896;
                                float _5037 = isnan(0.0) ? _3907 : (isnan(_3907) ? 0.0 : max(_3907, 0.0));
                                float _3917 = (_3842 * _3819) * (((_3865 * 3.1415927410125732421875) * (isnan(1.0) ? _5037 : (isnan(_5037) ? 1.0 : min(_5037, 1.0)))) / ((_3887 * _3887) * ((_3832 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3843 * _3689.y;
                                frontier_phi_78_pred_1 = _3843 * _3689.x;
                                frontier_phi_78_pred_2 = _3917 * _3701.z;
                                frontier_phi_78_pred_3 = _3917 * _3701.y;
                                frontier_phi_78_pred_4 = _3917 * _3701.x;
                                frontier_phi_78_pred_5 = _3843 * _3689.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3925 = frontier_phi_78_pred;
                            _3924 = frontier_phi_78_pred_1;
                            _3923 = frontier_phi_78_pred_2;
                            _3922 = frontier_phi_78_pred_3;
                            _3921 = frontier_phi_78_pred_4;
                            _3926 = frontier_phi_78_pred_5;
                            _3631 = _3924 + _3644;
                            _3632 = _3925 + _3645;
                            _3633 = _3926 + _3646;
                            _3628 = _3921 + _3641;
                            _3629 = _3922 + _3642;
                            _3630 = _3923 + _3643;
                            if (_3648 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3641 = _3628;
                                _3642 = _3629;
                                _3643 = _3630;
                                _3644 = _3631;
                                _3645 = _3632;
                                _3646 = _3633;
                                _3647 = _3648;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3633;
                        frontier_phi_72_pred_1 = _3632;
                        frontier_phi_72_pred_2 = _3631;
                        frontier_phi_72_pred_3 = _3630;
                        frontier_phi_72_pred_4 = _3629;
                        frontier_phi_72_pred_5 = _3628;
                    }
                    _3301 = frontier_phi_72_pred;
                    _3299 = frontier_phi_72_pred_1;
                    _3297 = frontier_phi_72_pred_2;
                    _3295 = frontier_phi_72_pred_3;
                    _3293 = frontier_phi_72_pred_4;
                    _3291 = frontier_phi_72_pred_5;
                    uint _3436 = _3435 + 1u;
                    if (_3436 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3429 = _3291;
                        _3430 = _3293;
                        _3431 = _3295;
                        _3432 = _3297;
                        _3433 = _3299;
                        _3434 = _3301;
                        _3435 = _3436;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3301;
                frontier_phi_60_61_ladder_1 = _3299;
                frontier_phi_60_61_ladder_2 = _3295;
                frontier_phi_60_61_ladder_3 = _3293;
                frontier_phi_60_61_ladder_4 = _3291;
                frontier_phi_60_61_ladder_5 = _3297;
            }
            else
            {
                frontier_phi_60_61_ladder = _3178;
                frontier_phi_60_61_ladder_1 = _3176;
                frontier_phi_60_61_ladder_2 = _3172;
                frontier_phi_60_61_ladder_3 = _3170;
                frontier_phi_60_61_ladder_4 = _3168;
                frontier_phi_60_61_ladder_5 = _3174;
            }
            _3290 = frontier_phi_60_61_ladder_4;
            _3292 = frontier_phi_60_61_ladder_3;
            _3294 = frontier_phi_60_61_ladder_2;
            _3296 = frontier_phi_60_61_ladder_5;
            _3298 = frontier_phi_60_61_ladder_1;
            _3300 = frontier_phi_60_61_ladder;
        }
        float _3305 = isnan(1.0) ? _1039 : (isnan(_1039) ? 1.0 : min(_1039, 1.0));
        _3066 = (_3305 * _3296) + _2578;
        _3068 = (_3305 * _3298) + _2580;
        _3070 = (_3305 * _3300) + _2582;
        _3072 = ((_3290 * _1024) * _3305) + _2916;
        _3074 = ((_3292 * _1026) * _3305) + _2918;
        _3076 = ((_3294 * _1027) * _3305) + _2920;
    }
    else
    {
        _3066 = _2578;
        _3068 = _2580;
        _3070 = _2582;
        _3072 = _2916;
        _3074 = _2918;
        _3076 = _2920;
    }
    uint _3082 = _1000 + uint(cbMatDynParam._m0[0u].w);
    float _3090 = ((cbMtdParam._m0[20u].x * cbMtdParam._m0[25u].x) * _807.x) * cbInstanceData._m0[_3082].x;
    float _3093 = ((cbMtdParam._m0[20u].y * cbMtdParam._m0[25u].x) * _807.y) * cbInstanceData._m0[_3082].y;
    float _3096 = ((cbMtdParam._m0[20u].z * cbMtdParam._m0[25u].x) * _807.z) * cbInstanceData._m0[_3082].z;
    float _5053 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
    float _5064 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
    float _5075 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
    float _3113 = (((isnan(1.0) ? _5053 : (isnan(_5053) ? 1.0 : min(_5053, 1.0))) * (_3066 + ((isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0))) * _1039))) + ((_3072 + ((isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0))) * _1846)) * cbPerFrame._m0[3u].x)) + _3090;
    float _3115 = (_3093 + ((_3074 + ((isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0))) * _1846)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5064 : (isnan(_5064) ? 1.0 : min(_5064, 1.0))) * (_3068 + ((isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0))) * _1039)));
    float _3117 = (_3096 + ((_3076 + ((isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0))) * _1846)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5075 : (isnan(_5075) ? 1.0 : min(_5075, 1.0))) * (_3070 + ((isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0))) * _1039)));
    float _5101 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _3130 = isnan(1.0) ? _5101 : (isnan(_5101) ? 1.0 : min(_5101, 1.0));
    uint _3131 = _999 + 6u;
    float _3139 = _961 / cbSceneParam._m0[86u].x;
    float _3140 = _962 / cbSceneParam._m0[86u].y;
    vec4 _3154 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3139, _3140, (log2((isnan(cbSceneParam._m0[77u].w) ? _896 : (isnan(_896) ? cbSceneParam._m0[77u].w : min(_896, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3156 = _3154.x;
    float _3157 = _3154.y;
    float _3158 = _3154.z;
    float _3159 = _3154.w;
    float _3231;
    float _3233;
    float _3235;
    float _3237;
    if (_896 > cbSceneParam._m0[78u].w)
    {
        float _3193 = isnan(_896) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _896 : min(cbSceneParam._m0[80u].w, _896));
        float _3194 = _3193 / _896;
        float _3205 = _3194 * _946;
        float _3206 = _947 * _3194;
        float _3207 = (-0.0) - _3206;
        float _3209 = _3194 * _948;
        float _3211 = (cbSceneParam._m0[77u].w * _3207) / _3193;
        float _3212 = _3211 + cbSceneParam._m0[79u].w;
        float _3213 = cbSceneParam._m0[79u].w - _3206;
        float _3219 = sqrt(((_3205 * _3205) + (_3206 * _3206)) + (_3209 * _3209));
        float _3222 = (1.0 - (cbSceneParam._m0[77u].w / _3193)) * _3219;
        float _3227 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3229 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3391;
        if (abs((_3207 - _3211) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3391 = ((((_3212 > 0.0) ? exp2(_3227 * _3212) : (2.0 - exp2(_3229 * _3212))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3222;
        }
        else
        {
            float _3351 = 1.0 / cbSceneParam._m0[80u].x;
            float _3352 = isnan(_3213) ? _3212 : (isnan(_3212) ? _3213 : max(_3212, _3213));
            float _3353 = isnan(_3213) ? _3212 : (isnan(_3212) ? _3213 : min(_3212, _3213));
            float _3362 = isnan(0.0) ? _3352 : (isnan(_3352) ? 0.0 : min(_3352, 0.0));
            float _3363 = isnan(0.0) ? _3353 : (isnan(_3353) ? 0.0 : min(_3353, 0.0));
            _3391 = ((abs(_3219 / _3207) * cbSceneParam._m0[80u].y) * ((((_3362 - _3363) * 2.0) - ((exp2(_3227 * (isnan(0.0) ? _3352 : (isnan(_3352) ? 0.0 : max(_3352, 0.0)))) - exp2(_3227 * (isnan(0.0) ? _3353 : (isnan(_3353) ? 0.0 : max(_3353, 0.0))))) * _3351)) - ((exp2(_3229 * _3362) - exp2(_3229 * _3363)) * _3351))) + (_3222 * cbSceneParam._m0[80u].z);
        }
        vec4 _3393 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3139, _3140, 1.0), 0.0);
        float _3402 = exp2((_3391 * (-1.44269502162933349609375)) * (1.0 - _3393.w));
        float _3403 = log2(_3402);
        float _3419 = log2(_3159);
        _3231 = (exp2(_3419 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3403 * cbSceneParam._m0[78u].x)) * _3393.x) / cbSceneParam._m0[78u].x)) + _3156;
        _3233 = (exp2(_3419 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3403 * cbSceneParam._m0[78u].y)) * _3393.y) / cbSceneParam._m0[78u].y)) + _3157;
        _3235 = (exp2(_3419 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3403 * cbSceneParam._m0[78u].z)) * _3393.z) / cbSceneParam._m0[78u].z)) + _3158;
        _3237 = _3402 * _3159;
    }
    else
    {
        _3231 = _3156;
        _3233 = _3157;
        _3235 = _3158;
        _3237 = _3159;
    }
    float _3249 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3250 = _3249 == 3.0;
    float _3251 = log2(_3237);
    float _3255 = exp2(_3251 * cbSceneParam._m0[78u].x);
    float _3256 = exp2(_3251 * cbSceneParam._m0[78u].y);
    float _3257 = exp2(_3251 * cbSceneParam._m0[78u].z);
    float _3258 = _3255 * (isnan(0.0) ? _3113 : (isnan(_3113) ? 0.0 : max(_3113, 0.0)));
    float _3259 = _3256 * (isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : max(_3115, 0.0)));
    float _3260 = _3257 * (isnan(0.0) ? _3117 : (isnan(_3117) ? 0.0 : max(_3117, 0.0)));
    float _3269 = (_3249 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3269 * (_3250 ? _3258 : (_3258 + (cbSceneParam._m0[72u].w * _3231)));
    SV_Target.y = _3269 * (_3250 ? _3259 : (_3259 + (cbSceneParam._m0[72u].w * _3233)));
    SV_Target.z = _3269 * (_3250 ? _3260 : (_3260 + (cbSceneParam._m0[72u].w * _3235)));
    SV_Target.w = cbInstanceData._m0[_3131].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _3090) * _3130) * _3255) * _3269;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _3093) * _3130) * _3256) * _3269;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _3096) * _3130) * _3257) * _3269;
    SV_Target_1.w = cbInstanceData._m0[_3131].w;
}


