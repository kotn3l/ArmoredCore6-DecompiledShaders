#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[29];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 12) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_14;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_16;
layout(set = 0, binding = 4) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_17;
layout(set = 0, binding = 5) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_18;
layout(set = 0, binding = 6) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 9) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2DArray C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_0;
layout(set = 0, binding = 14) uniform texture2DArray C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1409;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _217 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _218 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _219 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _225 = inversesqrt(dot(vec3(_217, _218, _219), vec3(_217, _218, _219)));
    float _232 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _239 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _260 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_1) + cbTextureTilingScale._m0[5u].w));
    vec4 _279 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_1) + cbTextureTilingScale._m0[10u].w));
    float _292 = exp2(log2(_279.w * cbMtdParam._m0[25u].z) * cbMtdParam._m0[22u].x);
    float _293 = isnan(0.0) ? _292 : (isnan(_292) ? 0.0 : max(_292, 0.0));
    float _294 = isnan(1.0) ? _293 : (isnan(_293) ? 1.0 : min(_293, 1.0));
    vec4 _308 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _312 = _308.z;
    float _321 = exp2(log2(_312 * cbMtdParam._m0[22u].y) * cbMtdParam._m0[21u].y);
    float _322 = isnan(0.0) ? _321 : (isnan(_321) ? 0.0 : max(_321, 0.0));
    float _323 = isnan(1.0) ? _322 : (isnan(_322) ? 1.0 : min(_322, 1.0));
    vec4 _335 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _338 = _335.y;
    float _341 = (_335.x + (-0.02500000037252902984619140625)) * 8.0;
    float _345 = roundEven(5.0 - _341);
    float _346 = isnan(0.0) ? _345 : (isnan(_345) ? 0.0 : max(_345, 0.0));
    float _347 = isnan(4.0) ? _346 : (isnan(_346) ? 4.0 : min(_346, 4.0));
    float _360 = floor(_347);
    vec4 _363 = texture(sampler2DArray(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w, _360));
    float _195[6];
    float _196[6];
    float _197[6];
    _195[0u] = cbMtdParam._m0[17u].x;
    _196[0u] = cbMtdParam._m0[17u].y;
    _197[0u] = cbMtdParam._m0[17u].z;
    _195[1u] = cbMtdParam._m0[15u].x;
    _196[1u] = cbMtdParam._m0[15u].y;
    _197[1u] = cbMtdParam._m0[15u].z;
    _195[2u] = cbMtdParam._m0[14u].x;
    _196[2u] = cbMtdParam._m0[14u].y;
    _197[2u] = cbMtdParam._m0[14u].z;
    _195[3u] = cbMtdParam._m0[13u].x;
    _196[3u] = cbMtdParam._m0[13u].y;
    _197[3u] = cbMtdParam._m0[13u].z;
    _195[4u] = cbMtdParam._m0[12u].x;
    _196[4u] = cbMtdParam._m0[12u].y;
    _197[4u] = cbMtdParam._m0[12u].z;
    _195[5u] = cbMtdParam._m0[18u].x;
    _196[5u] = cbMtdParam._m0[18u].y;
    _197[5u] = cbMtdParam._m0[18u].z;
    float _427 = roundEven(_341);
    float _428 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    uint _430 = uint(int(isnan(5.0) ? _428 : (isnan(_428) ? 5.0 : min(_428, 5.0))));
    vec4 _460 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _471 = cbMtdParam._m0[9u].x * _460.x;
    float _472 = cbMtdParam._m0[9u].y * _460.y;
    float _473 = cbMtdParam._m0[9u].z * _460.z;
    float _480 = ((((((_195[_430] - cbMtdParam._m0[10u].x) * _338) + cbMtdParam._m0[10u].x) * _363.x) - _471) * _323) + _471;
    float _481 = ((((((_196[_430] - cbMtdParam._m0[10u].y) * _338) + cbMtdParam._m0[10u].y) * _363.y) - _472) * _323) + _472;
    float _482 = ((((((_197[_430] - cbMtdParam._m0[10u].z) * _338) + cbMtdParam._m0[10u].z) * _363.z) - _473) * _323) + _473;
    float _488 = exp2(log2(_308.w) * cbMtdParam._m0[22u].w);
    vec4 _501 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _521 = (((cbMtdParam._m0[16u].x * _501.x) - _480) * _488) + _480;
    float _522 = (((cbMtdParam._m0[16u].y * _501.y) - _481) * _488) + _481;
    float _523 = (((cbMtdParam._m0[16u].z * _501.z) - _482) * _488) + _482;
    vec4 _536 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _561 = (_279.x * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].x * _536.x) - _521) * _294) + _521);
    float _563 = (_279.y * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].y * _536.y) - _522) * _294) + _522);
    float _565 = (_279.z * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].z * _536.z) - _523) * _294) + _523);
    vec4 _577 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_17, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w));
    float _596 = TEXCOORD_3.x - ((cbMtdParam._m0[23u].x * (1.0 - TEXCOORD_3.x)) * (_260.x + 0.00999999977648258209228515625));
    float _598 = _596 * (cbMtdParam._m0[23u].z + 1.0);
    float _3843 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _599 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
    float _606 = (_599 * ((cbMtdParam._m0[11u].x * _577.x) - _561)) + _561;
    float _607 = (((cbMtdParam._m0[11u].y * _577.y) - _563) * _599) + _563;
    float _608 = (((cbMtdParam._m0[11u].z * _577.z) - _565) * _599) + _565;
    float _190[5];
    float _191[5];
    _190[0u] = cbMtdParam._m0[25u].w;
    _191[0u] = cbMtdParam._m0[26u].x;
    _190[1u] = cbMtdParam._m0[27u].w;
    _191[1u] = cbMtdParam._m0[28u].x;
    _190[2u] = cbMtdParam._m0[27u].y;
    _191[2u] = cbMtdParam._m0[27u].z;
    _190[3u] = cbMtdParam._m0[26u].w;
    _191[3u] = cbMtdParam._m0[27u].x;
    _190[4u] = cbMtdParam._m0[26u].y;
    _191[4u] = cbMtdParam._m0[26u].z;
    float _646 = isnan(0.0) ? _347 : (isnan(_347) ? 0.0 : max(_347, 0.0));
    uint _648 = uint(int(isnan(4.0) ? _646 : (isnan(_646) ? 4.0 : min(_646, 4.0))));
    float _655 = ((_191[_648] - cbMtdParam._m0[21u].z) * _323) + cbMtdParam._m0[21u].z;
    float _658 = ((cbMtdParam._m0[21u].w - _655) * _488) + _655;
    float _661 = ((cbMtdParam._m0[24u].y - _658) * _294) + _658;
    float _666 = (cbMtdParam._m0[23u].y + 1.0) * _596;
    float _3864 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _667 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
    float _669 = _661 - (_661 * _667);
    vec4 _682 = texture(sampler2DArray(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w, _360));
    vec4 _699 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _701 = _699.x;
    float _702 = _699.y;
    float _707 = cbMtdParam._m0[21u].x + _699.z;
    float _710 = (((_682.z + _190[_648]) - _707) * _323) + _707;
    vec4 _722 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_1) + cbTextureTilingScale._m0[11u].w));
    float _733 = (((_722.z - _710) + cbMtdParam._m0[25u].y) * _488) + _710;
    float _739 = ((((_312 * 2.0) * _733) - _733) * cbMtdParam._m0[23u].w) + _733;
    vec4 _751 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_1) + cbTextureTilingScale._m0[12u].w));
    float _762 = (((cbMtdParam._m0[22u].z + _751.z) - _739) * _294) + _739;
    vec4 _774 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _786 = ((_774.z - _762) * _667) + _762;
    vec4 _805 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _824 = ((_682.x - _701) * _323) + _701;
    float _825 = ((_682.y - _702) * _323) + _702;
    float _830 = ((_722.x - _824) * _488) + _824;
    float _831 = ((_722.y - _825) * _488) + _825;
    float _840 = ((((_751.x - _830) * _294) + _830) * 2.0) + (-1.0);
    float _841 = ((((_751.y - _831) * _294) + _831) * 2.0) + (-1.0);
    float _842 = dot(vec2(_840, _841), vec2(_840, _841));
    float _3875 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
    float _847 = sqrt(1.0 - (isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0))));
    float _856 = ((cbMtdParam._m0[24u].z * ((_308.x * 2.0) + (-1.0))) + _840) + (((((_774.x * 2.0) + (-1.0)) * TEXCOORD_3.x) * cbMtdParam._m0[24u].w) * _667);
    float _857 = ((cbMtdParam._m0[24u].z * ((_308.y * 2.0) + (-1.0))) + _841) + (((((_774.y * 2.0) + (-1.0)) * TEXCOORD_3.y) * cbMtdParam._m0[24u].w) * _667);
    float _860 = fma(_847, _232 * NORMAL.x, fma(_857, _239 * TANGENT.x, (_225 * _217) * _856));
    float _863 = fma(_847, _232 * NORMAL.y, fma(_857, _239 * TANGENT.y, (_225 * _218) * _856));
    float _866 = fma(_847, _232 * NORMAL.z, fma(_857, _239 * TANGENT.z, (_225 * _219) * _856));
    float _870 = inversesqrt(dot(vec3(_860, _863, _866), vec3(_860, _863, _866)));
    float _871 = _870 * _860;
    float _872 = _870 * _863;
    float _873 = _870 * _866;
    float _3886 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _874 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
    float _3897 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _3908 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    float _3919 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _3930 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _878 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
    float _894 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _934 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _944 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _934);
    float _945 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _934);
    float _946 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _934);
    float _950 = inversesqrt(dot(vec3(_944, _945, _946), vec3(_944, _945, _946)));
    float _951 = _944 * _950;
    float _952 = _945 * _950;
    float _953 = _946 * _950;
    float _959 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _960 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _978 = fma(_873, cbSceneParam._m0[5u].z, fma(_872, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _871));
    float _981 = fma(_873, cbSceneParam._m0[6u].z, fma(_872, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _871));
    float _984 = fma(_873, cbSceneParam._m0[7u].z, fma(_872, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _871));
    uint _997 = uint(roundEven(NORMAL.w)) * 13u;
    uint _998 = _997 + 9u;
    uint _999 = _998 + uint(cbMatDynParam._m0[0u].w);
    float _1005 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0)))) * cbInstanceData._m0[_999].x;
    float _1006 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0)))) * cbInstanceData._m0[_999].y;
    float _1007 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0)))) * cbInstanceData._m0[_999].z;
    float _3941 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
    float _1008 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
    float _3952 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
    float _1009 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
    float _3963 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
    float _1010 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
    float _1011 = 1.0 - _878;
    float _1012 = _1008 * _1011;
    float _1013 = _1009 * _1011;
    float _1014 = _1010 * _1011;
    float _1019 = (_1008 + (-0.039999999105930328369140625)) * _878;
    float _1020 = (_1009 + (-0.039999999105930328369140625)) * _878;
    float _1021 = (_1010 + (-0.039999999105930328369140625)) * _878;
    float _1022 = _1019 + 0.039999999105930328369140625;
    float _1024 = _1020 + 0.039999999105930328369140625;
    float _1025 = _1021 + 0.039999999105930328369140625;
    vec4 _1034 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _959, cbSceneParam._m0[86u].y * _960));
    float _1037 = _1034.x * TEXCOORD_3.w;
    float _1038 = dot(vec3(_871, _872, _873), vec3(_951, _952, _953));
    float _1041 = _1038 * 2.0;
    float _1045 = (_1041 * _871) - _951;
    float _1046 = (_1041 * _872) - _952;
    float _1047 = (_1041 * _873) - _953;
    float _1051 = abs(dot(vec3(_951, _952, _953), vec3(_871, _872, _873)));
    float _3974 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
    float _1053 = sqrt(_874);
    float _1064 = exp2((_1053 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1053 * 3.0));
    float _1070 = (1.0 - _1064) * ((_1053 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1071 = _1064 * _1053;
    float _1099 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1103 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1107 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1408;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1133 = fma(_1107, cbModelParam._m0[26u].z, fma(_1103, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1099));
        float _1137 = fma(_1107, cbModelParam._m0[27u].z, fma(_1103, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1099));
        float _1141 = fma(_1107, cbModelParam._m0[28u].z, fma(_1103, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1099));
        float _1166 = _1099 + _871;
        float _1167 = _1103 + _872;
        float _1168 = _1107 + _873;
        float _1178 = fma(_1168, cbModelParam._m0[26u].z, fma(_1167, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1166)) - _1133;
        float _1179 = fma(_1168, cbModelParam._m0[27u].z, fma(_1167, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1166)) - _1137;
        float _1180 = fma(_1168, cbModelParam._m0[28u].z, fma(_1167, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1166)) - _1141;
        float _1184 = inversesqrt(dot(vec3(_1178, _1179, _1180), vec3(_1178, _1179, _1180)));
        float _1197 = ((_1184 * _1178) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1133 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1198 = ((_1184 * _1179) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1137 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1199 = ((_1184 * _1180) / cbModelParam._m0[34u].z) + ((((((_1141 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1202 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1197, _1198, _1199), 0.0);
        vec4 _1209 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1197, _1198, _1199), 0.0);
        vec4 _1216 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1197, _1198, _1199), 0.0);
        vec4 _1223 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1197, _1198, _1199), 0.0);
        float _1236 = exp2((_1202.w + (-0.5)) * 20.0) * 2.0;
        float _1237 = _1236 * (_1202.x + (-0.5));
        float _1238 = _1236 * (_1202.y + (-0.5));
        float _1239 = _1236 * (_1202.z + (-0.5));
        float _1246 = exp2((_1209.w + (-0.5)) * 20.0) * 2.0;
        float _1247 = _1246 * (_1209.x + (-0.5));
        float _1248 = _1246 * (_1209.y + (-0.5));
        float _1249 = _1246 * (_1209.z + (-0.5));
        float _1256 = exp2((_1216.w + (-0.5)) * 20.0) * 2.0;
        float _1257 = _1256 * (_1216.x + (-0.5));
        float _1258 = _1256 * (_1216.y + (-0.5));
        float _1259 = _1256 * (_1216.z + (-0.5));
        float _1266 = exp2((_1223.w + (-0.5)) * 20.0) * 2.0;
        float _1267 = _1266 * (_1223.x + (-0.5));
        float _1268 = _1266 * (_1223.y + (-0.5));
        float _1269 = _1266 * (_1223.z + (-0.5));
        float _1270 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1271 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1272 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1273 = _1237 * 0.5;
        float _1274 = _1247 * 0.5;
        float _1275 = _1257 * 0.5;
        float _1276 = dot(vec3(_1273, _1274, _1275), vec3(_1273, _1274, _1275));
        float _1281 = (_1276 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1276);
        float _1290 = (dot(vec3(_871, _872, _873), vec3(_1281 * _1273, _1281 * _1274, _1281 * _1275)) + 1.0) * 0.5;
        float _4000 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1300 = sqrt(((_1274 * _1274) + (_1273 * _1273)) + (_1275 * _1275)) / (_1270 + 9.9999997473787516355514526367188e-06);
        float _4011 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1301 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
        float _1302 = _1301 * 2.0;
        float _1306 = (1.0 - _1301) / (_1301 + 1.0);
        float _4022 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1307 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
        float _1316 = ((((1.0 - _1307) * (_1302 + 2.0)) * exp2(log2(isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0))) * (_1302 + 1.0))) + _1307) * _1270;
        float _1317 = _1238 * 0.5;
        float _1318 = _1248 * 0.5;
        float _1319 = _1258 * 0.5;
        float _1320 = dot(vec3(_1317, _1318, _1319), vec3(_1317, _1318, _1319));
        float _1325 = (_1320 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1320);
        float _1333 = (dot(vec3(_871, _872, _873), vec3(_1325 * _1317, _1325 * _1318, _1325 * _1319)) + 1.0) * 0.5;
        float _4033 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1342 = sqrt(((_1318 * _1318) + (_1317 * _1317)) + (_1319 * _1319)) / (_1271 + 9.9999997473787516355514526367188e-06);
        float _4044 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1343 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
        float _1344 = _1343 * 2.0;
        float _1348 = (1.0 - _1343) / (_1343 + 1.0);
        float _4055 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1349 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
        float _1358 = ((((1.0 - _1349) * (_1344 + 2.0)) * exp2(log2(isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0))) * (_1344 + 1.0))) + _1349) * _1271;
        float _1359 = _1239 * 0.5;
        float _1360 = _1249 * 0.5;
        float _1361 = _1259 * 0.5;
        float _1362 = dot(vec3(_1359, _1360, _1361), vec3(_1359, _1360, _1361));
        float _1367 = (_1362 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1362);
        float _1375 = (dot(vec3(_871, _872, _873), vec3(_1367 * _1359, _1367 * _1360, _1367 * _1361)) + 1.0) * 0.5;
        float _4066 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1384 = sqrt(((_1360 * _1360) + (_1359 * _1359)) + (_1361 * _1361)) / (_1272 + 9.9999997473787516355514526367188e-06);
        float _4077 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1385 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
        float _1386 = _1385 * 2.0;
        float _1390 = (1.0 - _1385) / (_1385 + 1.0);
        float _4088 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1391 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
        float _1400 = ((((1.0 - _1391) * (_1386 + 2.0)) * exp2(log2(isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0))) * (_1386 + 1.0))) + _1391) * _1272;
        _1408 = _1239;
        _1410 = _1238;
        _1411 = _1237;
        _1412 = _1249;
        _1413 = _1248;
        _1414 = _1247;
        _1415 = _1259;
        _1416 = _1258;
        _1417 = _1257;
        _1418 = _1272;
        _1419 = _1271;
        _1420 = _1270;
        _1421 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0)));
        _1422 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0)));
        _1423 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0)));
    }
    else
    {
        _1408 = _1409;
        _1410 = _1409;
        _1411 = _1409;
        _1412 = _1409;
        _1413 = _1409;
        _1414 = _1409;
        _1415 = _1409;
        _1416 = _1409;
        _1417 = _1409;
        _1418 = _1409;
        _1419 = _1409;
        _1420 = _1409;
        _1421 = 0.0;
        _1422 = 0.0;
        _1423 = 0.0;
    }
    float _1718;
    float _1719;
    float _1720;
    float _1721;
    float _1722;
    float _1723;
    float _1724;
    float _1725;
    float _1726;
    float _1727;
    float _1728;
    float _1729;
    float _1730;
    float _1731;
    float _1732;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1449 = fma(_1107, cbModelParam._m0[30u].z, fma(_1103, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1099));
        float _1453 = fma(_1107, cbModelParam._m0[31u].z, fma(_1103, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1099));
        float _1457 = fma(_1107, cbModelParam._m0[32u].z, fma(_1103, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1099));
        float _1480 = _1099 + _871;
        float _1481 = _1103 + _872;
        float _1482 = _1107 + _873;
        float _1492 = fma(_1482, cbModelParam._m0[30u].z, fma(_1481, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1480)) - _1449;
        float _1493 = fma(_1482, cbModelParam._m0[31u].z, fma(_1481, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1480)) - _1453;
        float _1494 = fma(_1482, cbModelParam._m0[32u].z, fma(_1481, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1480)) - _1457;
        float _1498 = inversesqrt(dot(vec3(_1492, _1493, _1494), vec3(_1492, _1493, _1494)));
        float _1511 = ((_1498 * _1492) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1449 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1512 = ((_1498 * _1493) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1453 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1513 = ((_1498 * _1494) / cbModelParam._m0[35u].z) + ((((((_1457 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1515 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1511, _1512, _1513), 0.0);
        vec4 _1522 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1511, _1512, _1513), 0.0);
        vec4 _1529 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1511, _1512, _1513), 0.0);
        vec4 _1536 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1511, _1512, _1513), 0.0);
        float _1548 = exp2((_1515.w + (-0.5)) * 20.0) * 2.0;
        float _1549 = _1548 * (_1515.x + (-0.5));
        float _1550 = _1548 * (_1515.y + (-0.5));
        float _1551 = _1548 * (_1515.z + (-0.5));
        float _1558 = exp2((_1522.w + (-0.5)) * 20.0) * 2.0;
        float _1559 = _1558 * (_1522.x + (-0.5));
        float _1560 = _1558 * (_1522.y + (-0.5));
        float _1561 = _1558 * (_1522.z + (-0.5));
        float _1568 = exp2((_1529.w + (-0.5)) * 20.0) * 2.0;
        float _1569 = _1568 * (_1529.x + (-0.5));
        float _1570 = _1568 * (_1529.y + (-0.5));
        float _1571 = _1568 * (_1529.z + (-0.5));
        float _1578 = exp2((_1536.w + (-0.5)) * 20.0) * 2.0;
        float _1579 = _1578 * (_1536.x + (-0.5));
        float _1580 = _1578 * (_1536.y + (-0.5));
        float _1581 = _1578 * (_1536.z + (-0.5));
        float _1582 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1583 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1584 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1585 = _1549 * 0.5;
        float _1586 = _1559 * 0.5;
        float _1587 = _1569 * 0.5;
        float _1588 = dot(vec3(_1585, _1586, _1587), vec3(_1585, _1586, _1587));
        float _1593 = (_1588 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1588);
        float _1601 = (dot(vec3(_871, _872, _873), vec3(_1593 * _1585, _1593 * _1586, _1593 * _1587)) + 1.0) * 0.5;
        float _4129 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1610 = sqrt(((_1586 * _1586) + (_1585 * _1585)) + (_1587 * _1587)) / (_1582 + 9.9999997473787516355514526367188e-06);
        float _4140 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
        float _1611 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
        float _1612 = _1611 * 2.0;
        float _1616 = (1.0 - _1611) / (_1611 + 1.0);
        float _4151 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
        float _1617 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
        float _1626 = ((((1.0 - _1617) * (_1612 + 2.0)) * exp2(log2(isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0))) * (_1612 + 1.0))) + _1617) * _1582;
        float _1627 = _1550 * 0.5;
        float _1628 = _1560 * 0.5;
        float _1629 = _1570 * 0.5;
        float _1630 = dot(vec3(_1627, _1628, _1629), vec3(_1627, _1628, _1629));
        float _1635 = (_1630 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1630);
        float _1643 = (dot(vec3(_871, _872, _873), vec3(_1635 * _1627, _1635 * _1628, _1635 * _1629)) + 1.0) * 0.5;
        float _4162 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
        float _1652 = sqrt(((_1628 * _1628) + (_1627 * _1627)) + (_1629 * _1629)) / (_1583 + 9.9999997473787516355514526367188e-06);
        float _4173 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
        float _1653 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
        float _1654 = _1653 * 2.0;
        float _1658 = (1.0 - _1653) / (_1653 + 1.0);
        float _4184 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
        float _1659 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
        float _1668 = ((((1.0 - _1659) * (_1654 + 2.0)) * exp2(log2(isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0))) * (_1654 + 1.0))) + _1659) * _1583;
        float _1669 = _1551 * 0.5;
        float _1670 = _1561 * 0.5;
        float _1671 = _1571 * 0.5;
        float _1672 = dot(vec3(_1669, _1670, _1671), vec3(_1669, _1670, _1671));
        float _1677 = (_1672 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1672);
        float _1685 = (dot(vec3(_871, _872, _873), vec3(_1677 * _1669, _1677 * _1670, _1677 * _1671)) + 1.0) * 0.5;
        float _4195 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
        float _1694 = sqrt(((_1670 * _1670) + (_1669 * _1669)) + (_1671 * _1671)) / (_1584 + 9.9999997473787516355514526367188e-06);
        float _4206 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
        float _1695 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
        float _1696 = _1695 * 2.0;
        float _1700 = (1.0 - _1695) / (_1695 + 1.0);
        float _4217 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
        float _1701 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
        float _1710 = ((((1.0 - _1701) * (_1696 + 2.0)) * exp2(log2(isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0))) * (_1696 + 1.0))) + _1701) * _1584;
        _1718 = _1551;
        _1719 = _1550;
        _1720 = _1549;
        _1721 = _1561;
        _1722 = _1560;
        _1723 = _1559;
        _1724 = _1571;
        _1725 = _1570;
        _1726 = _1569;
        _1727 = _1584;
        _1728 = _1583;
        _1729 = _1582;
        _1730 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0)));
        _1731 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0)));
        _1732 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0)));
    }
    else
    {
        _1718 = _1409;
        _1719 = _1409;
        _1720 = _1409;
        _1721 = _1409;
        _1722 = _1409;
        _1723 = _1409;
        _1724 = _1409;
        _1725 = _1409;
        _1726 = _1409;
        _1727 = _1409;
        _1728 = _1409;
        _1729 = _1409;
        _1730 = 0.0;
        _1731 = 0.0;
        _1732 = 0.0;
    }
    float _1742 = (cbModelParam._m0[1u].x * (_1730 - _1421)) + _1421;
    float _1743 = (cbModelParam._m0[1u].x * (_1731 - _1422)) + _1422;
    float _1744 = (cbModelParam._m0[1u].x * (_1732 - _1423)) + _1423;
    float _1765 = fma(_1744, cbSceneParam._m0[89u].z, fma(_1743, cbSceneParam._m0[89u].y, _1742 * cbSceneParam._m0[89u].x));
    float _1768 = fma(_1744, cbSceneParam._m0[90u].z, fma(_1743, cbSceneParam._m0[90u].y, _1742 * cbSceneParam._m0[90u].x));
    float _1771 = fma(_1744, cbSceneParam._m0[91u].z, fma(_1743, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1742));
    float _1786 = _1045 * 0.5;
    float _1787 = _1046 * 0.5;
    float _1788 = _1047 * 0.5;
    float _1789 = dot(vec4(_1786, _1787, _1788, 1.0), vec4(_1720, _1723, _1726, _1729));
    float _1792 = dot(vec4(_1786, _1787, _1788, 1.0), vec4(_1719, _1722, _1725, _1728));
    float _1795 = dot(vec4(_1786, _1787, _1788, 1.0), vec4(_1718, _1721, _1724, _1727));
    float _1829;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1802 = dot(vec4(_1786, _1787, _1788, 1.0), vec4(_1408, _1412, _1415, _1418));
        float _1806 = dot(vec4(_1786, _1787, _1788, 1.0), vec4(_1410, _1413, _1416, _1419));
        float _1810 = dot(vec4(_1786, _1787, _1788, 1.0), vec4(_1411, _1414, _1417, _1420));
        float _1817 = dot(vec4(cbModelParam._m0[39u]), vec4(_1786, _1787, _1788, 1.0));
        _1829 = dot(vec3(isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0)), isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0)), isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1817) ? 0.0 : (isnan(0.0) ? _1817 : max(0.0, _1817))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1829 = 1.0;
    }
    float _1840;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1831 = dot(vec4(cbModelParam._m0[40u]), vec4(_1786, _1787, _1788, 1.0));
        _1840 = dot(vec3(isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0)), isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0)), isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1831) ? 0.0 : (isnan(0.0) ? _1831 : max(0.0, _1831))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1840 = 1.0;
    }
    float _1844 = (_1840 * cbModelParam._m0[1u].x) + (_1829 * (1.0 - cbModelParam._m0[1u].x));
    float _1854 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _874);
    float _1855 = isnan(_1854) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1854 : min(cbModelParam._m0[25u].z, _1854));
    float _1935;
    float _1937;
    float _1939;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1902 = fma(_1107, cbModelParam._m0[13u].z, fma(_1103, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1099)) + cbModelParam._m0[13u].w;
        float _1906 = fma(_1107, cbModelParam._m0[14u].z, fma(_1103, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1099)) + cbModelParam._m0[14u].w;
        float _1910 = fma(_1107, cbModelParam._m0[15u].z, fma(_1103, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1099)) + cbModelParam._m0[15u].w;
        float _1913 = fma(_1047, cbModelParam._m0[13u].z, fma(_1046, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1045));
        float _1916 = fma(_1047, cbModelParam._m0[14u].z, fma(_1046, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1045));
        float _1919 = fma(_1047, cbModelParam._m0[15u].z, fma(_1046, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1045));
        float _1947;
        if (_1913 > 0.0)
        {
            _1947 = abs((1.0 - _1902) / _1913);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1913 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1902 + 1.0) / _1913);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1947 = frontier_phi_14_12_ladder;
        }
        float _2170;
        if (_1916 > 0.0)
        {
            _2170 = abs((1.0 - _1906) / _1916);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1916 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1906 + 1.0) / _1916);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2170 = frontier_phi_23_19_ladder;
        }
        float _2427;
        if (_1919 > 0.0)
        {
            _2427 = abs((1.0 - _1910) / _1919);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1919 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1910 + 1.0) / _1919);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2427 = frontier_phi_35_30_ladder;
        }
        float _2429 = isnan(_2170) ? _1947 : (isnan(_1947) ? _2170 : min(_1947, _2170));
        float _2430 = isnan(_2427) ? _2429 : (isnan(_2429) ? _2427 : min(_2429, _2427));
        float _2434 = (_2430 * _1913) + _1902;
        float _2435 = (_2430 * _1916) + _1906;
        float _2436 = (_2430 * _1919) + _1910;
        float _2437 = _2430 * 9.9999997473787516355514526367188e-05;
        float _2439 = (-1.0) - _2437;
        float _2441 = _2437 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2436 > _2441) || ((_2436 < _2439) || ((_2435 > _2441) || ((_2435 < _2439) || ((_2434 < _2439) || (_2434 > _2441))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2564 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2436, cbModelParam._m0[9u].z, fma(_2435, cbModelParam._m0[9u].y, _2434 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2436, cbModelParam._m0[10u].z, fma(_2435, cbModelParam._m0[10u].y, _2434 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2436, cbModelParam._m0[11u].z, fma(_2435, cbModelParam._m0[11u].y, _2434 * cbModelParam._m0[11u].x))), _1855);
            frontier_phi_13_35_ladder = _2564.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2564.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2564.x * cbModelParam._m0[1u].y;
        }
        _1935 = frontier_phi_13_35_ladder_2;
        _1937 = frontier_phi_13_35_ladder_1;
        _1939 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1923 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1045, _1046, _1047), _1855);
        _1935 = _1923.x * cbModelParam._m0[1u].y;
        _1937 = _1923.y * cbModelParam._m0[1u].y;
        _1939 = _1923.z * cbModelParam._m0[1u].y;
    }
    float _1943 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _874);
    float _1944 = isnan(_1943) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1943 : min(cbModelParam._m0[25u].w, _1943));
    float _2033;
    float _2035;
    float _2037;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1997 = fma(_1107, cbModelParam._m0[21u].z, fma(_1103, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1099)) + cbModelParam._m0[21u].w;
        float _2001 = fma(_1107, cbModelParam._m0[22u].z, fma(_1103, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1099)) + cbModelParam._m0[22u].w;
        float _2005 = fma(_1107, cbModelParam._m0[23u].z, fma(_1103, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1099)) + cbModelParam._m0[23u].w;
        float _2008 = fma(_1047, cbModelParam._m0[21u].z, fma(_1046, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1045));
        float _2011 = fma(_1047, cbModelParam._m0[22u].z, fma(_1046, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1045));
        float _2014 = fma(_1047, cbModelParam._m0[23u].z, fma(_1046, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1045));
        float _2175;
        if (_2008 > 0.0)
        {
            _2175 = abs((1.0 - _1997) / _2008);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2008 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1997 + 1.0) / _2008);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2175 = frontier_phi_25_21_ladder;
        }
        float _2454;
        if (_2011 > 0.0)
        {
            _2454 = abs((1.0 - _2001) / _2011);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2011 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2001 + 1.0) / _2011);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2454 = frontier_phi_37_32_ladder;
        }
        float _2667;
        if (_2014 > 0.0)
        {
            _2667 = abs((1.0 - _2005) / _2014);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2014 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2005 + 1.0) / _2014);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2667 = frontier_phi_46_43_ladder;
        }
        float _2669 = isnan(_2454) ? _2175 : (isnan(_2175) ? _2454 : min(_2175, _2454));
        float _2670 = isnan(_2667) ? _2669 : (isnan(_2669) ? _2667 : min(_2669, _2667));
        float _2674 = (_2670 * _2008) + _1997;
        float _2675 = (_2670 * _2011) + _2001;
        float _2676 = (_2670 * _2014) + _2005;
        float _2677 = _2670 * 9.9999997473787516355514526367188e-05;
        float _2678 = (-1.0) - _2677;
        float _2680 = _2677 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2676 > _2680) || ((_2676 < _2678) || ((_2675 > _2680) || ((_2675 < _2678) || ((_2674 < _2678) || (_2674 > _2680))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2910 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2676, cbModelParam._m0[17u].z, fma(_2675, cbModelParam._m0[17u].y, _2674 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2676, cbModelParam._m0[18u].z, fma(_2675, cbModelParam._m0[18u].y, _2674 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2676, cbModelParam._m0[19u].z, fma(_2675, cbModelParam._m0[19u].y, _2674 * cbModelParam._m0[19u].x))), _1944);
            frontier_phi_22_46_ladder = _2910.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2910.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2910.x * cbModelParam._m0[1u].z;
        }
        _2033 = frontier_phi_22_46_ladder_2;
        _2035 = frontier_phi_22_46_ladder_1;
        _2037 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2017 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1045, _1046, _1047), _1944);
        _2033 = _2017.x * cbModelParam._m0[1u].z;
        _2035 = _2017.y * cbModelParam._m0[1u].z;
        _2037 = _2017.z * cbModelParam._m0[1u].z;
    }
    float _2050 = (((_1070 * _1022) + _1071) * _1037) * ((cbModelParam._m0[1u].w * (_2033 - _1935)) + _1935);
    float _2052 = (((_1070 * _1024) + _1071) * _1037) * ((cbModelParam._m0[1u].w * (_2035 - _1937)) + _1937);
    float _2054 = (((_1070 * _1025) + _1071) * _1037) * ((cbModelParam._m0[1u].w * (_2037 - _1939)) + _1939);
    float _2057 = fma(_2054, cbSceneParam._m0[89u].z, fma(_2052, cbSceneParam._m0[89u].y, _2050 * cbSceneParam._m0[89u].x));
    float _2060 = fma(_2054, cbSceneParam._m0[90u].z, fma(_2052, cbSceneParam._m0[90u].y, _2050 * cbSceneParam._m0[90u].x));
    float _2063 = fma(_2054, cbSceneParam._m0[91u].z, fma(_2052, cbSceneParam._m0[91u].y, _2050 * cbSceneParam._m0[91u].x));
    vec4 _2071 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_959, _960));
    float _2073 = _2071.w;
    float _2085 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2073);
    float _2086 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2073);
    float _2087 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2073);
    uvec4 _2091 = floatBitsToUint(cbInstanceData._m0[_997 + 5u]);
    uint _2093 = _2091.x * 14u;
    uint _2094 = _2093 + 13u;
    float _2101 = _1037 + (-1.0);
    float _2106 = (cbLight._m0[_2094].x * _2101) + 1.0;
    float _2107 = (cbLight._m0[_2094].y * _2101) + 1.0;
    float _2108 = (cbLight._m0[_2094].z * _2101) + 1.0;
    float _2109 = (cbLight._m0[_2094].w * _2101) + 1.0;
    uint _2110 = _2093 + 5u;
    float _2116 = isnan(1.0) ? _2107 : (isnan(_2107) ? 1.0 : min(_2107, 1.0));
    uint _2120 = _2093 + 4u;
    float _2129 = isnan(1.0) ? _2106 : (isnan(_2106) ? 1.0 : min(_2106, 1.0));
    uint _2133 = _2093 | 1u;
    float _2144 = dot(vec3(cbLight._m0[_2093].xyz), vec3(_871, _872, _873));
    float _2147 = dot(vec3(cbLight._m0[_2133].xyz), vec3(_871, _872, _873));
    float _4353 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
    float _4364 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
    float _2152 = (isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0))) * 0.3183098733425140380859375;
    float _2154 = (isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0))) * 0.3183098733425140380859375;
    float _2161 = ((cbLight._m0[_2110].x * _2116) * _2154) + (((cbLight._m0[_2120].x * _2085) * _2129) * _2152);
    float _2162 = ((_2116 * cbLight._m0[_2110].y) * _2154) + (((cbLight._m0[_2120].y * _2086) * _2129) * _2152);
    float _2163 = ((_2116 * cbLight._m0[_2110].z) * _2154) + (((cbLight._m0[_2120].z * _2087) * _2129) * _2152);
    uvec4 _2167 = floatBitsToUint(cbLight._m0[_2093 + 12u]);
    bool _2169 = _2167.x == 0u;
    float _2180;
    float _2182;
    float _2184;
    if (_2169)
    {
        _2180 = _2161;
        _2182 = _2162;
        _2184 = _2163;
    }
    else
    {
        uint _2188 = _2093 + 6u;
        float _2204 = (dot(vec3(cbLight._m0[_2093 + 2u].xyz), vec3(_871, _872, _873)) * 0.5) + 0.5;
        float _2205 = _2204 * _2204;
        float _4375 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0));
        float _2206 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
        float _2207 = isnan(1.0) ? _2108 : (isnan(_2108) ? 1.0 : min(_2108, 1.0));
        _2180 = (((cbLight._m0[_2188].x * 0.3183098733425140380859375) * _2206) * _2207) + _2161;
        _2182 = (((cbLight._m0[_2188].y * 0.3183098733425140380859375) * _2206) * _2207) + _2162;
        _2184 = (((cbLight._m0[_2188].z * 0.3183098733425140380859375) * _2206) * _2207) + _2163;
    }
    bool _2187 = _2167.y == 0u;
    float _2225;
    float _2227;
    float _2229;
    if (_2187)
    {
        _2225 = _2180;
        _2227 = _2182;
        _2229 = _2184;
    }
    else
    {
        uint _2398 = _2093 + 7u;
        float _2414 = (dot(vec3(cbLight._m0[_2093 + 3u].xyz), vec3(_871, _872, _873)) * 0.5) + 0.5;
        float _2415 = _2414 * _2414;
        float _4391 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
        float _2416 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
        float _2417 = isnan(1.0) ? _2109 : (isnan(_2109) ? 1.0 : min(_2109, 1.0));
        _2225 = (((cbLight._m0[_2398].x * 0.3183098733425140380859375) * _2416) * _2417) + _2180;
        _2227 = (((cbLight._m0[_2398].y * 0.3183098733425140380859375) * _2416) * _2417) + _2182;
        _2229 = (((cbLight._m0[_2398].z * 0.3183098733425140380859375) * _2416) * _2417) + _2184;
    }
    uint _2232 = _2093 + 8u;
    float _2245 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2093].w)) * _874) * 0.949999988079071044921875);
    float _2246 = _2245 * _2245;
    float _2247 = cbLight._m0[_2093].x + _951;
    float _2248 = cbLight._m0[_2093].y + _952;
    float _2249 = cbLight._m0[_2093].z + _953;
    float _2253 = inversesqrt(dot(vec3(_2247, _2248, _2249), vec3(_2247, _2248, _2249)));
    float _2254 = _2253 * _2247;
    float _2255 = _2253 * _2248;
    float _2256 = _2253 * _2249;
    float _2257 = dot(vec3(_871, _872, _873), vec3(cbLight._m0[_2093].xyz));
    float _4407 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0));
    float _2260 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
    float _4418 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
    float _2261 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
    float _2262 = dot(vec3(_871, _872, _873), vec3(_2254, _2255, _2256));
    float _4429 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
    float _2265 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
    float _2266 = dot(vec3(cbLight._m0[_2093].xyz), vec3(_2254, _2255, _2256));
    float _4440 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
    float _2270 = _2246 * _2246;
    float _2274 = ((_2265 * _2265) * (_2270 + (-1.0))) + 1.0;
    float _2282 = exp2(log2(1.0 - (isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0)))) * 5.0);
    float _2283 = 0.959999978542327880859375 - _1019;
    float _2285 = 0.959999978542327880859375 - _1020;
    float _2286 = 0.959999978542327880859375 - _1021;
    float _2293 = 1.0 - _2246;
    float _2304 = (0.5 / (((_2261 * ((_2260 * _2293) + _2246)) + 9.9999999392252902907785028219223e-09) + (((_2261 * _2293) + _2246) * _2260))) * _2260;
    float _4451 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
    float _2306 = (isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0))) * (_2270 / ((_2274 * _2274) * 3.141590118408203125));
    uint _2320 = _2093 + 9u;
    float _2331 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2133].w)) * _874) * 0.949999988079071044921875);
    float _2332 = _2331 * _2331;
    float _2333 = cbLight._m0[_2133].x + _951;
    float _2334 = cbLight._m0[_2133].y + _952;
    float _2335 = cbLight._m0[_2133].z + _953;
    float _2339 = inversesqrt(dot(vec3(_2333, _2334, _2335), vec3(_2333, _2334, _2335)));
    float _2340 = _2339 * _2333;
    float _2341 = _2339 * _2334;
    float _2342 = _2339 * _2335;
    float _2343 = dot(vec3(_871, _872, _873), vec3(cbLight._m0[_2133].xyz));
    float _4462 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
    float _2346 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
    float _2347 = dot(vec3(_871, _872, _873), vec3(_2340, _2341, _2342));
    float _4473 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
    float _2350 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
    float _2351 = dot(vec3(cbLight._m0[_2133].xyz), vec3(_2340, _2341, _2342));
    float _4484 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
    float _2355 = _2332 * _2332;
    float _2359 = ((_2350 * _2350) * (_2355 + (-1.0))) + 1.0;
    float _2366 = exp2(log2(1.0 - (isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0)))) * 5.0);
    float _2373 = 1.0 - _2332;
    float _2383 = (0.5 / (((_2261 * ((_2346 * _2373) + _2332)) + 9.9999999392252902907785028219223e-09) + (((_2261 * _2373) + _2332) * _2346))) * _2346;
    float _4495 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
    float _2385 = (isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0))) * (_2355 / ((_2359 * _2359) * 3.141590118408203125));
    float _2395 = (((((_2366 * _2283) + _1022) * cbLight._m0[_2320].x) * _2385) * _2116) + ((((cbLight._m0[_2232].x * _2085) * ((_2282 * _2283) + _1022)) * _2306) * _2129);
    float _2396 = (((((_2366 * _2285) + _1024) * cbLight._m0[_2320].y) * _2385) * _2116) + ((((cbLight._m0[_2232].y * _2086) * ((_2282 * _2285) + _1024)) * _2306) * _2129);
    float _2397 = (((((_2366 * _2286) + _1025) * cbLight._m0[_2320].z) * _2385) * _2116) + ((((cbLight._m0[_2232].z * _2087) * ((_2282 * _2286) + _1025)) * _2306) * _2129);
    float _2459;
    float _2461;
    float _2463;
    if (_2169)
    {
        _2459 = _2395;
        _2461 = _2396;
        _2463 = _2397;
    }
    else
    {
        uint _2465 = _2093 + 2u;
        uint _2469 = _2093 + 10u;
        float _2483 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2465].w)) * _874) * 0.949999988079071044921875);
        float _2484 = _2483 * _2483;
        float _2485 = cbLight._m0[_2465].x + _951;
        float _2486 = cbLight._m0[_2465].y + _952;
        float _2487 = cbLight._m0[_2465].z + _953;
        float _2491 = inversesqrt(dot(vec3(_2485, _2486, _2487), vec3(_2485, _2486, _2487)));
        float _2492 = _2491 * _2485;
        float _2493 = _2491 * _2486;
        float _2494 = _2491 * _2487;
        float _2495 = dot(vec3(_871, _872, _873), vec3(cbLight._m0[_2465].xyz));
        float _4506 = isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : max(_2495, 0.0));
        float _2498 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
        float _2499 = dot(vec3(_871, _872, _873), vec3(_2492, _2493, _2494));
        float _4517 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
        float _2502 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
        float _2503 = dot(vec3(cbLight._m0[_2465].xyz), vec3(_2492, _2493, _2494));
        float _4528 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0));
        float _2507 = _2484 * _2484;
        float _2511 = ((_2502 * _2502) * (_2507 + (-1.0))) + 1.0;
        float _2518 = exp2(log2(1.0 - (isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0)))) * 5.0);
        float _2525 = 1.0 - _2484;
        float _2535 = (0.5 / (((_2261 * ((_2498 * _2525) + _2484)) + 9.9999999392252902907785028219223e-09) + (((_2261 * _2525) + _2484) * _2498))) * _2498;
        float _4539 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
        float _2537 = (isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0))) * (_2507 / ((_2511 * _2511) * 3.141590118408203125));
        float _2538 = isnan(1.0) ? _2108 : (isnan(_2108) ? 1.0 : min(_2108, 1.0));
        _2459 = (((((_2518 * _2283) + _1022) * cbLight._m0[_2469].x) * _2537) * _2538) + _2395;
        _2461 = (((((_2518 * _2285) + _1024) * cbLight._m0[_2469].y) * _2537) * _2538) + _2396;
        _2463 = (((((_2518 * _2286) + _1025) * cbLight._m0[_2469].z) * _2537) * _2538) + _2397;
    }
    float _2573;
    float _2575;
    float _2577;
    if (_2187)
    {
        _2573 = _2459;
        _2575 = _2461;
        _2577 = _2463;
    }
    else
    {
        uint _2584 = _2093 + 3u;
        uint _2588 = _2093 + 11u;
        float _2602 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2584].w)) * _874) * 0.949999988079071044921875);
        float _2603 = _2602 * _2602;
        float _2604 = cbLight._m0[_2584].x + _951;
        float _2605 = cbLight._m0[_2584].y + _952;
        float _2606 = cbLight._m0[_2584].z + _953;
        float _2610 = inversesqrt(dot(vec3(_2604, _2605, _2606), vec3(_2604, _2605, _2606)));
        float _2611 = _2610 * _2604;
        float _2612 = _2610 * _2605;
        float _2613 = _2610 * _2606;
        float _2614 = dot(vec3(_871, _872, _873), vec3(cbLight._m0[_2584].xyz));
        float _4555 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0));
        float _2617 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
        float _2618 = dot(vec3(_871, _872, _873), vec3(_2611, _2612, _2613));
        float _4566 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0));
        float _2621 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
        float _2622 = dot(vec3(cbLight._m0[_2584].xyz), vec3(_2611, _2612, _2613));
        float _4577 = isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0));
        float _2626 = _2603 * _2603;
        float _2630 = ((_2621 * _2621) * (_2626 + (-1.0))) + 1.0;
        float _2637 = exp2(log2(1.0 - (isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0)))) * 5.0);
        float _2644 = 1.0 - _2603;
        float _2654 = (0.5 / (((_2261 * ((_2617 * _2644) + _2603)) + 9.9999999392252902907785028219223e-09) + (((_2261 * _2644) + _2603) * _2617))) * _2617;
        float _4588 = isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : max(_2654, 0.0));
        float _2656 = (isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0))) * (_2626 / ((_2630 * _2630) * 3.141590118408203125));
        float _2657 = isnan(1.0) ? _2109 : (isnan(_2109) ? 1.0 : min(_2109, 1.0));
        _2573 = (((((_2637 * _2283) + _1022) * cbLight._m0[_2588].x) * _2656) * _2657) + _2459;
        _2575 = (((((_2637 * _2285) + _1024) * cbLight._m0[_2588].y) * _2656) * _2657) + _2461;
        _2577 = (((((_2637 * _2286) + _1025) * cbLight._m0[_2588].z) * _2656) * _2657) + _2463;
    }
    float _2792;
    float _2794;
    float _2796;
    float _2798;
    float _2800;
    float _2802;
    if (_2091.y == 0u)
    {
        float _2732 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2733 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2732;
        float _2734 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2732;
        float _2735 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2732;
        uvec4 _2747 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2748 = _2747.x;
        uint _2759 = uint((float(_2747.y) * floor(float(uint(cbSceneParam._m0[85u].y * _960) / _2748))) + floor(float(uint(cbSceneParam._m0[85u].x * _959) / _2748)));
        float _2769 = (log2(_2735 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2770 = isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : max(_2769, 0.0));
        uint _2773 = uint(isnan(14.0) ? _2770 : (isnan(_2770) ? 14.0 : min(_2770, 14.0)));
        uvec4 _2778 = texelFetch(g_lightClusterGridBuffer, int(((_2773 << 2u) + (_2759 << 6u)) >> 2u));
        uint _2779 = _2778.x;
        uint _2780 = _2747.z;
        float _2915;
        float _2917;
        float _2919;
        float _2921;
        float _2923;
        float _2925;
        if (((((1u << ((_2780 >> 4u) & 15u)) + 4294967295u) & _2779) == 0u) || ((_2780 & 240u) == 0u))
        {
            _2915 = 0.0;
            _2917 = 0.0;
            _2919 = 0.0;
            _2921 = 0.0;
            _2923 = 0.0;
            _2925 = 0.0;
        }
        else
        {
            float _2916;
            float _2918;
            float _2920;
            float _2922;
            float _2924;
            float _2926;
            float _3069 = 0.0;
            float _3070 = 0.0;
            float _3071 = 0.0;
            float _3072 = 0.0;
            float _3073 = 0.0;
            float _3074 = 0.0;
            uint _3075 = 0u;
            uint _3084;
            bool _3085;
            for (;;)
            {
                _3084 = texelFetch(g_lightClassification, int((((_2773 << 5u) + (_2759 << 9u)) + (_3075 << 2u)) >> 2u)).x;
                _3085 = _3084 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3085)
                {
                    frontier_phi_61_pred = _3069;
                    frontier_phi_61_pred_1 = _3074;
                    frontier_phi_61_pred_2 = _3073;
                    frontier_phi_61_pred_3 = _3072;
                    frontier_phi_61_pred_4 = _3071;
                    frontier_phi_61_pred_5 = _3070;
                }
                else
                {
                    float _3193;
                    float _3194;
                    float _3195;
                    float _3196;
                    float _3197;
                    float _3198;
                    uint _3199;
                    _3193 = _3069;
                    _3194 = _3070;
                    _3195 = _3071;
                    _3196 = _3072;
                    _3197 = _3073;
                    _3198 = _3074;
                    _3199 = _3084;
                    float _3125;
                    float _3126;
                    float _3127;
                    float _3128;
                    float _3129;
                    float _3130;
                    for (;;)
                    {
                        uint _3203 = uint(findLSB(_3199)) + (_3075 << 5u);
                        uint _3200 = (_3199 + 4294967295u) & _3199;
                        uint _3205 = _3203 * 48u;
                        vec4 _3219 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3205)).x, texelFetch(g_PointLightRenderingBuffer, int(_3205 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3205 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3205 + 3u)).x));
                        uint _3225 = (_3203 * 48u) + 4u;
                        vec4 _3238 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3225)).x, texelFetch(g_PointLightRenderingBuffer, int(_3225 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3225 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3225 + 3u)).x));
                        uint _3244 = (_3203 * 48u) + 8u;
                        vec3 _3255 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3244)).x, texelFetch(g_PointLightRenderingBuffer, int(_3244 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3244 + 2u)).x));
                        float _3259 = _3219.x - _2733;
                        float _3260 = _3219.y - _2734;
                        float _3261 = _3219.z - _2735;
                        float _3262 = dot(vec3(_3259, _3260, _3261), vec3(_3259, _3260, _3261));
                        float _3265 = inversesqrt(_3262);
                        float _3266 = _3265 * _3259;
                        float _3267 = _3265 * _3260;
                        float _3268 = _3265 * _3261;
                        float _3269 = dot(vec3(_978, _981, _984), vec3(_3266, _3267, _3268));
                        float _3274 = 1.0 - (_3262 * _3219.w);
                        float _4614 = isnan(0.0) ? _3274 : (isnan(_3274) ? 0.0 : max(_3274, 0.0));
                        float _3275 = isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0));
                        float _3276 = sqrt(_3262) * _3238.w;
                        float _3279 = 1.39999997615814208984375 / (_3276 + 1.39999997615814208984375);
                        float _3280 = _3279 * _3279;
                        float _3283 = ((1.0 - _3280) * _3269) + _3280;
                        float _3286 = _3276 * _3276;
                        float _3290 = ((isnan(0.0) ? _3283 : (isnan(_3283) ? 0.0 : max(_3283, 0.0))) * _3275) / ((_3286 * 0.699999988079071044921875) + 1.0);
                        float _3294 = (-0.0) - _2733;
                        float _3295 = (-0.0) - _2734;
                        float _3296 = (-0.0) - _2735;
                        float _3300 = inversesqrt(dot(vec3(_3294, _3295, _3296), vec3(_3294, _3295, _3296)));
                        float _3301 = _3300 * _3294;
                        float _3302 = _3300 * _3295;
                        float _3303 = _3300 * _3296;
                        float _3311 = exp2(log2(1.0 / ((_3286 * 3.5) + 5.0)) * 0.25);
                        float _3312 = 1.0 - _1053;
                        float _3319 = sqrt(1.0 - ((1.0 - (_3312 * _3312)) * (1.0 - (_3311 * _3311))));
                        float _3320 = _3319 * _3319;
                        float _3321 = _3320 * _3320;
                        float _3322 = _3301 + _3266;
                        float _3323 = _3302 + _3267;
                        float _3324 = _3303 + _3268;
                        float _3328 = inversesqrt(dot(vec3(_3322, _3323, _3324), vec3(_3322, _3323, _3324)));
                        float _3332 = dot(vec3(_978, _981, _984), vec3(_3301, _3302, _3303));
                        float _4630 = isnan(0.0) ? _3332 : (isnan(_3332) ? 0.0 : max(_3332, 0.0));
                        float _3335 = isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0));
                        float _3336 = dot(vec3(_978, _981, _984), vec3(_3328 * _3322, _3328 * _3323, _3328 * _3324));
                        float _4641 = isnan(0.0) ? _3336 : (isnan(_3336) ? 0.0 : max(_3336, 0.0));
                        float _3339 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
                        float _3343 = ((_3339 * _3339) * (_3321 + (-1.0))) + 1.0;
                        float _3344 = _3279 * _3320;
                        float _3345 = _3344 * _3344;
                        float _3348 = ((1.0 - _3345) * _3269) + _3345;
                        float _4652 = isnan(0.0) ? _3348 : (isnan(_3348) ? 0.0 : max(_3348, 0.0));
                        float _3349 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
                        float _3350 = 1.0 - _3320;
                        float _3360 = (0.5 / (((_3349 * ((_3335 * _3350) + _3320)) + 9.9999999392252902907785028219223e-09) + (((_3349 * _3350) + _3320) * _3335))) * _3349;
                        float _4663 = isnan(0.0) ? _3360 : (isnan(_3360) ? 0.0 : max(_3360, 0.0));
                        float _3371 = (((_3321 * 3.1415927410125732421875) * (isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0)))) / ((_3343 * _3343) * ((_3286 * 2.1991131305694580078125) + 3.141590118408203125))) * _3275;
                        _3128 = (_3290 * _3238.x) + _3196;
                        _3129 = (_3290 * _3238.y) + _3197;
                        _3130 = (_3290 * _3238.z) + _3198;
                        _3125 = (_3371 * _3255.x) + _3193;
                        _3126 = (_3371 * _3255.y) + _3194;
                        _3127 = (_3371 * _3255.z) + _3195;
                        if (_3200 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3193 = _3125;
                            _3194 = _3126;
                            _3195 = _3127;
                            _3196 = _3128;
                            _3197 = _3129;
                            _3198 = _3130;
                            _3199 = _3200;
                        }
                    }
                    frontier_phi_61_pred = _3125;
                    frontier_phi_61_pred_1 = _3130;
                    frontier_phi_61_pred_2 = _3129;
                    frontier_phi_61_pred_3 = _3128;
                    frontier_phi_61_pred_4 = _3127;
                    frontier_phi_61_pred_5 = _3126;
                }
                _2916 = frontier_phi_61_pred;
                _2926 = frontier_phi_61_pred_1;
                _2924 = frontier_phi_61_pred_2;
                _2922 = frontier_phi_61_pred_3;
                _2920 = frontier_phi_61_pred_4;
                _2918 = frontier_phi_61_pred_5;
                uint _3076 = _3075 + 1u;
                if (_3076 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3069 = _2916;
                    _3070 = _2918;
                    _3071 = _2920;
                    _3072 = _2922;
                    _3073 = _2924;
                    _3074 = _2926;
                    _3075 = _3076;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2915 = _2916;
            _2917 = _2918;
            _2919 = _2920;
            _2921 = _2922;
            _2923 = _2924;
            _2925 = _2926;
        }
        uvec4 _2929 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2930 = _2929.z;
        uint _2932 = (_2930 >> 8u) & 15u;
        float _3037;
        float _3039;
        float _3041;
        float _3043;
        float _3045;
        float _3047;
        if (((4294967295u << _2932) & _2779) == 0u)
        {
            _3037 = _2915;
            _3039 = _2917;
            _3041 = _2919;
            _3043 = _2921;
            _3045 = _2923;
            _3047 = _2925;
        }
        else
        {
            float _3062 = inversesqrt(dot(vec3(_2733, _2734, _2735), vec3(_2733, _2734, _2735)));
            float _3063 = _3062 * _2733;
            float _3064 = _3062 * _2734;
            float _3065 = _3062 * _2735;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2932 < ((_2930 >> 12u) & 15u))
            {
                float _3038;
                float _3040;
                float _3042;
                float _3044;
                float _3046;
                float _3048;
                float _3176 = _2915;
                float _3177 = _2917;
                float _3178 = _2919;
                float _3179 = _2921;
                float _3180 = _2923;
                float _3181 = _2925;
                uint _3182 = _2932;
                uint _3191;
                bool _3192;
                for (;;)
                {
                    _3191 = texelFetch(g_lightClassification, int((((_2773 << 5u) + (_2759 << 9u)) + (_3182 << 2u)) >> 2u)).x;
                    _3192 = _3191 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3192)
                    {
                        frontier_phi_67_pred = _3179;
                        frontier_phi_67_pred_1 = _3180;
                        frontier_phi_67_pred_2 = _3181;
                        frontier_phi_67_pred_3 = _3178;
                        frontier_phi_67_pred_4 = _3177;
                        frontier_phi_67_pred_5 = _3176;
                    }
                    else
                    {
                        float _3376;
                        float _3377;
                        float _3378;
                        float _3379;
                        float _3380;
                        float _3381;
                        float _3669;
                        float _3670;
                        float _3671;
                        float _3672;
                        float _3673;
                        float _3674;
                        float _3389 = _3176;
                        float _3390 = _3177;
                        float _3391 = _3178;
                        float _3392 = _3179;
                        float _3393 = _3180;
                        float _3394 = _3181;
                        uint _3395 = _3191;
                        uint _3396;
                        vec4 _3421;
                        float _3422;
                        vec4 _3437;
                        vec3 _3449;
                        vec4 _3464;
                        vec4 _3479;
                        float _3525;
                        bool _3526;
                        for (;;)
                        {
                            uint _3406 = ((_3182 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3395));
                            _3396 = (_3395 + 4294967295u) & _3395;
                            uint _3408 = _3406 * 40u;
                            _3421 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3408)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 3u)).x));
                            _3422 = _3421.w;
                            uint _3424 = (_3406 * 40u) + 4u;
                            _3437 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3424)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 3u)).x));
                            uint _3439 = (_3406 * 40u) + 8u;
                            _3449 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3439)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 2u)).x));
                            uint _3451 = (_3406 * 40u) + 16u;
                            _3464 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3451)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3451 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3451 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3451 + 3u)).x));
                            uint _3466 = (_3406 * 40u) + 20u;
                            _3479 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3466)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3466 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3466 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3466 + 3u)).x));
                            uint _3481 = (_3406 * 40u) + 24u;
                            vec4 _3494 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3481)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 3u)).x));
                            uint _3500 = (_3406 * 40u) + 28u;
                            vec4 _3513 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3500)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3500 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3500 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3500 + 3u)).x));
                            _3525 = fma(_2735, _3513.z, fma(_2734, _3513.y, _3513.x * _2733)) + _3513.w;
                            _3526 = !((fma(_2735, _3494.z, fma(_2734, _3494.y, _3494.x * _2733)) + _3494.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3526)
                            {
                                float _3553 = _3421.x - _2733;
                                float _3554 = _3421.y - _2734;
                                float _3555 = _3421.z - _2735;
                                float _3556 = dot(vec3(_3553, _3554, _3555), vec3(_3553, _3554, _3555));
                                float _3559 = inversesqrt(_3556);
                                float _3560 = _3559 * _3553;
                                float _3561 = _3559 * _3554;
                                float _3562 = _3559 * _3555;
                                float _3566 = 1.0 - (_3556 / (_3422 * _3422));
                                float _4674 = isnan(0.0) ? _3566 : (isnan(_3566) ? 0.0 : max(_3566, 0.0));
                                float _3567 = isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0));
                                float _3571 = sqrt(_3556) * _3437.w;
                                float _3573 = 1.39999997615814208984375 / (_3571 + 1.39999997615814208984375);
                                float _3574 = _3573 * _3573;
                                float _3577 = ((1.0 - _3574) * dot(vec3(_3560, _3561, _3562), vec3(_978, _981, _984))) + _3574;
                                float _3580 = _3571 * _3571;
                                float _3584 = (fma(_2735, _3464.z, fma(_2734, _3464.y, _3464.x * _2733)) + _3464.w) / _3525;
                                float _3585 = (fma(_2735, _3479.z, fma(_2734, _3479.y, _3479.x * _2733)) + _3479.w) / _3525;
                                float _3589 = 1.0 - dot(vec2(_3584, _3585), vec2(_3584, _3585));
                                float _4690 = isnan(0.0) ? _3589 : (isnan(_3589) ? 0.0 : max(_3589, 0.0));
                                float _3590 = isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0));
                                float _3591 = _3590 * (((isnan(0.0) ? _3577 : (isnan(_3577) ? 0.0 : max(_3577, 0.0))) * _3567) / ((_3580 * 0.699999988079071044921875) + 1.0));
                                float _3603 = exp2(log2(1.0 / ((_3580 * 3.5) + 5.0)) * 0.25);
                                float _3604 = 1.0 - _1053;
                                float _3611 = sqrt(1.0 - ((1.0 - (_3604 * _3604)) * (1.0 - (_3603 * _3603))));
                                float _3612 = _3611 * _3611;
                                float _3613 = _3612 * _3612;
                                float _3614 = _3560 - _3063;
                                float _3615 = _3561 - _3064;
                                float _3616 = _3562 - _3065;
                                float _3620 = inversesqrt(dot(vec3(_3614, _3615, _3616), vec3(_3614, _3615, _3616)));
                                float _3624 = dot(vec3(_978, _981, _984), vec3((-0.0) - _3063, (-0.0) - _3064, (-0.0) - _3065));
                                float _4701 = isnan(0.0) ? _3624 : (isnan(_3624) ? 0.0 : max(_3624, 0.0));
                                float _3627 = isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0));
                                float _3628 = dot(vec3(_978, _981, _984), vec3(_3620 * _3614, _3620 * _3615, _3620 * _3616));
                                float _4712 = isnan(0.0) ? _3628 : (isnan(_3628) ? 0.0 : max(_3628, 0.0));
                                float _3631 = isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0));
                                float _3635 = ((_3631 * _3631) * (_3613 + (-1.0))) + 1.0;
                                float _3636 = _3573 * _3612;
                                float _3637 = _3636 * _3636;
                                float _3643 = ((1.0 - _3637) * dot(vec3(_978, _981, _984), vec3(_3560, _3561, _3562))) + _3637;
                                float _4723 = isnan(0.0) ? _3643 : (isnan(_3643) ? 0.0 : max(_3643, 0.0));
                                float _3644 = isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0));
                                float _3645 = 1.0 - _3612;
                                float _3655 = (0.5 / (((_3644 * ((_3627 * _3645) + _3612)) + 9.9999999392252902907785028219223e-09) + (((_3644 * _3645) + _3612) * _3627))) * _3644;
                                float _4734 = isnan(0.0) ? _3655 : (isnan(_3655) ? 0.0 : max(_3655, 0.0));
                                float _3665 = (_3590 * _3567) * (((_3613 * 3.1415927410125732421875) * (isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0)))) / ((_3635 * _3635) * ((_3580 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3665 * _3449.x;
                                frontier_phi_73_pred_1 = _3665 * _3449.y;
                                frontier_phi_73_pred_2 = _3591 * _3437.z;
                                frontier_phi_73_pred_3 = _3591 * _3437.y;
                                frontier_phi_73_pred_4 = _3591 * _3437.x;
                                frontier_phi_73_pred_5 = _3665 * _3449.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3669 = frontier_phi_73_pred;
                            _3670 = frontier_phi_73_pred_1;
                            _3674 = frontier_phi_73_pred_2;
                            _3673 = frontier_phi_73_pred_3;
                            _3672 = frontier_phi_73_pred_4;
                            _3671 = frontier_phi_73_pred_5;
                            _3379 = _3672 + _3392;
                            _3380 = _3673 + _3393;
                            _3381 = _3674 + _3394;
                            _3376 = _3669 + _3389;
                            _3377 = _3670 + _3390;
                            _3378 = _3671 + _3391;
                            if (_3396 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3389 = _3376;
                                _3390 = _3377;
                                _3391 = _3378;
                                _3392 = _3379;
                                _3393 = _3380;
                                _3394 = _3381;
                                _3395 = _3396;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3379;
                        frontier_phi_67_pred_1 = _3380;
                        frontier_phi_67_pred_2 = _3381;
                        frontier_phi_67_pred_3 = _3378;
                        frontier_phi_67_pred_4 = _3377;
                        frontier_phi_67_pred_5 = _3376;
                    }
                    _3044 = frontier_phi_67_pred;
                    _3046 = frontier_phi_67_pred_1;
                    _3048 = frontier_phi_67_pred_2;
                    _3042 = frontier_phi_67_pred_3;
                    _3040 = frontier_phi_67_pred_4;
                    _3038 = frontier_phi_67_pred_5;
                    uint _3183 = _3182 + 1u;
                    if (_3183 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3176 = _3038;
                        _3177 = _3040;
                        _3178 = _3042;
                        _3179 = _3044;
                        _3180 = _3046;
                        _3181 = _3048;
                        _3182 = _3183;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3046;
                frontier_phi_55_56_ladder_1 = _3048;
                frontier_phi_55_56_ladder_2 = _3044;
                frontier_phi_55_56_ladder_3 = _3042;
                frontier_phi_55_56_ladder_4 = _3040;
                frontier_phi_55_56_ladder_5 = _3038;
            }
            else
            {
                frontier_phi_55_56_ladder = _2923;
                frontier_phi_55_56_ladder_1 = _2925;
                frontier_phi_55_56_ladder_2 = _2921;
                frontier_phi_55_56_ladder_3 = _2919;
                frontier_phi_55_56_ladder_4 = _2917;
                frontier_phi_55_56_ladder_5 = _2915;
            }
            _3037 = frontier_phi_55_56_ladder_5;
            _3039 = frontier_phi_55_56_ladder_4;
            _3041 = frontier_phi_55_56_ladder_3;
            _3043 = frontier_phi_55_56_ladder_2;
            _3045 = frontier_phi_55_56_ladder;
            _3047 = frontier_phi_55_56_ladder_1;
        }
        float _3052 = isnan(1.0) ? _1037 : (isnan(_1037) ? 1.0 : min(_1037, 1.0));
        _2792 = (_3052 * _3043) + _2225;
        _2794 = (_3052 * _3045) + _2227;
        _2796 = (_3052 * _3047) + _2229;
        _2798 = ((_3037 * _1022) * _3052) + _2573;
        _2800 = ((_3039 * _1024) * _3052) + _2575;
        _2802 = ((_3041 * _1025) * _3052) + _2577;
    }
    else
    {
        _2792 = _2225;
        _2794 = _2227;
        _2796 = _2229;
        _2798 = _2573;
        _2800 = _2575;
        _2802 = _2577;
    }
    uint _2808 = _998 + uint(cbMatDynParam._m0[0u].w);
    float _2816 = ((cbMtdParam._m0[20u].x * cbMtdParam._m0[25u].x) * _805.x) * cbInstanceData._m0[_2808].x;
    float _2819 = ((cbMtdParam._m0[20u].y * cbMtdParam._m0[25u].x) * _805.y) * cbInstanceData._m0[_2808].y;
    float _2822 = ((cbMtdParam._m0[20u].z * cbMtdParam._m0[25u].x) * _805.z) * cbInstanceData._m0[_2808].z;
    float _4750 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
    float _4761 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
    float _4772 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
    float _2839 = (((isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0))) * (_2792 + ((isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0))) * _1037))) + ((_2798 + ((isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0))) * _1844)) * cbPerFrame._m0[3u].x)) + _2816;
    float _2841 = (_2819 + ((_2800 + ((isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0))) * _1844)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0))) * (_2794 + ((isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0))) * _1037)));
    float _2843 = (_2822 + ((_2802 + ((isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0))) * _1844)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0))) * (_2796 + ((isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0))) * _1037)));
    float _4798 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2856 = isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0));
    uint _2857 = _997 + 6u;
    float _2865 = _959 / cbSceneParam._m0[86u].x;
    float _2866 = _960 / cbSceneParam._m0[86u].y;
    vec4 _2880 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2865, _2866, (log2((isnan(cbSceneParam._m0[77u].w) ? _894 : (isnan(_894) ? cbSceneParam._m0[77u].w : min(_894, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2882 = _2880.x;
    float _2883 = _2880.y;
    float _2884 = _2880.z;
    float _2885 = _2880.w;
    float _2978;
    float _2980;
    float _2982;
    float _2984;
    if (_894 > cbSceneParam._m0[78u].w)
    {
        float _2940 = isnan(_894) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _894 : min(cbSceneParam._m0[80u].w, _894));
        float _2941 = _2940 / _894;
        float _2952 = _2941 * _944;
        float _2953 = _945 * _2941;
        float _2954 = (-0.0) - _2953;
        float _2956 = _2941 * _946;
        float _2958 = (cbSceneParam._m0[77u].w * _2954) / _2940;
        float _2959 = _2958 + cbSceneParam._m0[79u].w;
        float _2960 = cbSceneParam._m0[79u].w - _2953;
        float _2966 = sqrt(((_2952 * _2952) + (_2953 * _2953)) + (_2956 * _2956));
        float _2969 = (1.0 - (cbSceneParam._m0[77u].w / _2940)) * _2966;
        float _2974 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2976 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3138;
        if (abs((_2954 - _2958) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3138 = ((((_2959 > 0.0) ? exp2(_2974 * _2959) : (2.0 - exp2(_2976 * _2959))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2969;
        }
        else
        {
            float _3098 = 1.0 / cbSceneParam._m0[80u].x;
            float _3099 = isnan(_2960) ? _2959 : (isnan(_2959) ? _2960 : max(_2959, _2960));
            float _3100 = isnan(_2960) ? _2959 : (isnan(_2959) ? _2960 : min(_2959, _2960));
            float _3109 = isnan(0.0) ? _3099 : (isnan(_3099) ? 0.0 : min(_3099, 0.0));
            float _3110 = isnan(0.0) ? _3100 : (isnan(_3100) ? 0.0 : min(_3100, 0.0));
            _3138 = ((abs(_2966 / _2954) * cbSceneParam._m0[80u].y) * ((((_3109 - _3110) * 2.0) - ((exp2(_2974 * (isnan(0.0) ? _3099 : (isnan(_3099) ? 0.0 : max(_3099, 0.0)))) - exp2(_2974 * (isnan(0.0) ? _3100 : (isnan(_3100) ? 0.0 : max(_3100, 0.0))))) * _3098)) - ((exp2(_2976 * _3109) - exp2(_2976 * _3110)) * _3098))) + (_2969 * cbSceneParam._m0[80u].z);
        }
        vec4 _3140 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2865, _2866, 1.0), 0.0);
        float _3149 = exp2((_3138 * (-1.44269502162933349609375)) * (1.0 - _3140.w));
        float _3150 = log2(_3149);
        float _3166 = log2(_2885);
        _2978 = (exp2(_3166 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3150 * cbSceneParam._m0[78u].x)) * _3140.x) / cbSceneParam._m0[78u].x)) + _2882;
        _2980 = (exp2(_3166 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3150 * cbSceneParam._m0[78u].y)) * _3140.y) / cbSceneParam._m0[78u].y)) + _2883;
        _2982 = (exp2(_3166 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3150 * cbSceneParam._m0[78u].z)) * _3140.z) / cbSceneParam._m0[78u].z)) + _2884;
        _2984 = _3149 * _2885;
    }
    else
    {
        _2978 = _2882;
        _2980 = _2883;
        _2982 = _2884;
        _2984 = _2885;
    }
    float _2996 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2997 = _2996 == 3.0;
    float _2998 = log2(_2984);
    float _3002 = exp2(_2998 * cbSceneParam._m0[78u].x);
    float _3003 = exp2(_2998 * cbSceneParam._m0[78u].y);
    float _3004 = exp2(_2998 * cbSceneParam._m0[78u].z);
    float _3005 = _3002 * (isnan(0.0) ? _2839 : (isnan(_2839) ? 0.0 : max(_2839, 0.0)));
    float _3006 = _3003 * (isnan(0.0) ? _2841 : (isnan(_2841) ? 0.0 : max(_2841, 0.0)));
    float _3007 = _3004 * (isnan(0.0) ? _2843 : (isnan(_2843) ? 0.0 : max(_2843, 0.0)));
    float _3016 = (_2996 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3016 * (_2997 ? _3005 : (_3005 + (cbSceneParam._m0[72u].w * _2978)));
    SV_Target.y = _3016 * (_2997 ? _3006 : (_3006 + (cbSceneParam._m0[72u].w * _2980)));
    SV_Target.z = _3016 * (_2997 ? _3007 : (_3007 + (cbSceneParam._m0[72u].w * _2982)));
    SV_Target.w = cbInstanceData._m0[_2857].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2816) * _2856) * _3002) * _3016;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2819) * _2856) * _3003) * _3016;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2822) * _2856) * _3004) * _3016;
    SV_Target_1.w = cbInstanceData._m0[_2857].w;
}


