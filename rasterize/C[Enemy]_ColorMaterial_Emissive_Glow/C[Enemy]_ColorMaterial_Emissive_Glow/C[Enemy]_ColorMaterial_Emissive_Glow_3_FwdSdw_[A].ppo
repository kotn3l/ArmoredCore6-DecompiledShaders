#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[29];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 12) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 9) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2DArray C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_0;
layout(set = 0, binding = 14) uniform texture2DArray C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1354;
float _4060;
float _4061;
float _4062;
float _4063;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _213 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _214 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _215 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _221 = inversesqrt(dot(vec3(_213, _214, _215), vec3(_213, _214, _215)));
    float _228 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _235 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _253 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_1) + cbTextureTilingScale._m0[10u].w));
    float _263 = log2(0.0);
    float _265 = exp2(_263 * cbMtdParam._m0[22u].x);
    float _266 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    float _267 = isnan(1.0) ? _266 : (isnan(_266) ? 1.0 : min(_266, 1.0));
    vec4 _281 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _285 = _281.z;
    float _294 = exp2(log2(_285 * cbMtdParam._m0[22u].y) * cbMtdParam._m0[21u].y);
    float _295 = isnan(0.0) ? _294 : (isnan(_294) ? 0.0 : max(_294, 0.0));
    float _296 = isnan(1.0) ? _295 : (isnan(_295) ? 1.0 : min(_295, 1.0));
    vec4 _308 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _311 = _308.y;
    float _314 = (_308.x + (-0.02500000037252902984619140625)) * 8.0;
    float _318 = roundEven(5.0 - _314);
    float _319 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    float _320 = isnan(4.0) ? _319 : (isnan(_319) ? 4.0 : min(_319, 4.0));
    float _333 = floor(_320);
    vec4 _336 = texture(sampler2DArray(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w, _333));
    float _191[6];
    float _192[6];
    float _193[6];
    _191[0u] = cbMtdParam._m0[17u].x;
    _192[0u] = cbMtdParam._m0[17u].y;
    _193[0u] = cbMtdParam._m0[17u].z;
    _191[1u] = cbMtdParam._m0[15u].x;
    _192[1u] = cbMtdParam._m0[15u].y;
    _193[1u] = cbMtdParam._m0[15u].z;
    _191[2u] = cbMtdParam._m0[14u].x;
    _192[2u] = cbMtdParam._m0[14u].y;
    _193[2u] = cbMtdParam._m0[14u].z;
    _191[3u] = cbMtdParam._m0[13u].x;
    _192[3u] = cbMtdParam._m0[13u].y;
    _193[3u] = cbMtdParam._m0[13u].z;
    _191[4u] = cbMtdParam._m0[12u].x;
    _192[4u] = cbMtdParam._m0[12u].y;
    _193[4u] = cbMtdParam._m0[12u].z;
    _191[5u] = cbMtdParam._m0[18u].x;
    _192[5u] = cbMtdParam._m0[18u].y;
    _193[5u] = cbMtdParam._m0[18u].z;
    float _400 = roundEven(_314);
    float _401 = isnan(0.0) ? _400 : (isnan(_400) ? 0.0 : max(_400, 0.0));
    uint _403 = uint(int(isnan(5.0) ? _401 : (isnan(_401) ? 5.0 : min(_401, 5.0))));
    vec4 _433 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _444 = cbMtdParam._m0[9u].x * _433.x;
    float _445 = cbMtdParam._m0[9u].y * _433.y;
    float _446 = cbMtdParam._m0[9u].z * _433.z;
    float _453 = ((((((_191[_403] - cbMtdParam._m0[10u].x) * _311) + cbMtdParam._m0[10u].x) * _336.x) - _444) * _296) + _444;
    float _454 = ((((((_192[_403] - cbMtdParam._m0[10u].y) * _311) + cbMtdParam._m0[10u].y) * _336.y) - _445) * _296) + _445;
    float _455 = ((((((_193[_403] - cbMtdParam._m0[10u].z) * _311) + cbMtdParam._m0[10u].z) * _336.z) - _446) * _296) + _446;
    float _461 = exp2(log2(_281.w) * cbMtdParam._m0[22u].w);
    vec4 _474 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _494 = (((cbMtdParam._m0[16u].x * _474.x) - _453) * _461) + _453;
    float _495 = (((cbMtdParam._m0[16u].y * _474.y) - _454) * _461) + _454;
    float _496 = (((cbMtdParam._m0[16u].z * _474.z) - _455) * _461) + _455;
    vec4 _509 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _534 = (_253.x * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].x * _509.x) - _494) * _267) + _494);
    float _536 = (_253.y * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].y * _509.y) - _495) * _267) + _495);
    float _538 = (_253.z * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].z * _509.z) - _496) * _267) + _496);
    float _186[5];
    float _187[5];
    _186[0u] = cbMtdParam._m0[25u].w;
    _187[0u] = cbMtdParam._m0[26u].x;
    _186[1u] = cbMtdParam._m0[27u].w;
    _187[1u] = cbMtdParam._m0[28u].x;
    _186[2u] = cbMtdParam._m0[27u].y;
    _187[2u] = cbMtdParam._m0[27u].z;
    _186[3u] = cbMtdParam._m0[26u].w;
    _187[3u] = cbMtdParam._m0[27u].x;
    _186[4u] = cbMtdParam._m0[26u].y;
    _187[4u] = cbMtdParam._m0[26u].z;
    float _576 = isnan(0.0) ? _320 : (isnan(_320) ? 0.0 : max(_320, 0.0));
    uint _578 = uint(int(isnan(4.0) ? _576 : (isnan(_576) ? 4.0 : min(_576, 4.0))));
    float _585 = ((_187[_578] - cbMtdParam._m0[21u].z) * _296) + cbMtdParam._m0[21u].z;
    float _588 = ((cbMtdParam._m0[21u].w - _585) * _461) + _585;
    float _591 = ((cbMtdParam._m0[24u].y - _588) * _267) + _588;
    vec4 _606 = texture(sampler2DArray(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w, _333));
    vec4 _623 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _625 = _623.x;
    float _626 = _623.y;
    float _631 = cbMtdParam._m0[21u].x + _623.z;
    float _634 = (((_606.z + _186[_578]) - _631) * _296) + _631;
    vec4 _647 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_1) + cbTextureTilingScale._m0[11u].w));
    float _658 = (((_647.z - _634) + cbMtdParam._m0[25u].y) * _461) + _634;
    float _664 = ((((_285 * 2.0) * _658) - _658) * cbMtdParam._m0[23u].w) + _658;
    vec4 _676 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_1) + cbTextureTilingScale._m0[12u].w));
    float _687 = (((cbMtdParam._m0[22u].z + _676.z) - _664) * _267) + _664;
    vec4 _706 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _723 = ((_606.x - _625) * _296) + _625;
    float _724 = ((_606.y - _626) * _296) + _626;
    float _729 = ((_647.x - _723) * _461) + _723;
    float _730 = ((_647.y - _724) * _461) + _724;
    float _739 = ((((_676.x - _729) * _267) + _729) * 2.0) + (-1.0);
    float _740 = ((((_676.y - _730) * _267) + _730) * 2.0) + (-1.0);
    float _741 = dot(vec2(_739, _740), vec2(_739, _740));
    float _4122 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _746 = sqrt(1.0 - (isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0))));
    float _749 = (cbMtdParam._m0[24u].z * ((_281.x * 2.0) + (-1.0))) + _739;
    float _750 = (cbMtdParam._m0[24u].z * ((_281.y * 2.0) + (-1.0))) + _740;
    float _752 = gl_FragCoord.x * 0.125;
    float _754 = gl_FragCoord.y * 0.125;
    float _765 = fma(_746, _228 * NORMAL.x, fma(_750, _235 * TANGENT.x, (_221 * _213) * _749));
    float _768 = fma(_746, _228 * NORMAL.y, fma(_750, _235 * TANGENT.y, (_221 * _214) * _749));
    float _771 = fma(_746, _228 * NORMAL.z, fma(_750, _235 * TANGENT.z, (_221 * _215) * _749));
    float _775 = inversesqrt(dot(vec3(_765, _768, _771), vec3(_765, _768, _771)));
    float _776 = _775 * _765;
    float _777 = _775 * _768;
    float _778 = _775 * _771;
    float _4133 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _779 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
    float _4144 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _4155 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    float _4166 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _4177 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _783 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
    if (!(cbMtdParam._m0[24u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_752, _754)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _803 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _843 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _853 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _843);
    float _854 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _843);
    float _855 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _843);
    float _859 = inversesqrt(dot(vec3(_853, _854, _855), vec3(_853, _854, _855)));
    float _860 = _853 * _859;
    float _861 = _854 * _859;
    float _862 = _855 * _859;
    vec4 _864 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_752, _754));
    float _866 = _864.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1036 = sqrt(((_853 * _853) + (_854 * _854)) + (_855 * _855));
        float _1042 = (cbMatDynParam._m0[5u].x * _1036) + cbMatDynParam._m0[5u].y;
        float _4188 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1043 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _1047 = (cbMatDynParam._m0[5u].z * _1036) + cbMatDynParam._m0[5u].w;
        float _4199 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0))) - _1043)) + _1043) < ((_866 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _877 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _878 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _896 = fma(_778, cbSceneParam._m0[5u].z, fma(_777, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _776));
    float _899 = fma(_778, cbSceneParam._m0[6u].z, fma(_777, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _776));
    float _902 = fma(_778, cbSceneParam._m0[7u].z, fma(_777, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _776));
    uint _915 = uint(roundEven(NORMAL.w)) * 13u;
    uint _916 = _915 + 9u;
    uint _917 = _916 + uint(cbMatDynParam._m0[0u].w);
    float _923 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0)))) * cbInstanceData._m0[_917].x;
    float _924 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0)))) * cbInstanceData._m0[_917].y;
    float _925 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0)))) * cbInstanceData._m0[_917].z;
    float _4210 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
    float _926 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
    float _4221 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
    float _927 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
    float _4232 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
    float _928 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
    float _929 = 1.0 - _783;
    float _930 = _926 * _929;
    float _931 = _927 * _929;
    float _932 = _928 * _929;
    float _937 = (_926 + (-0.039999999105930328369140625)) * _783;
    float _938 = (_927 + (-0.039999999105930328369140625)) * _783;
    float _939 = (_928 + (-0.039999999105930328369140625)) * _783;
    float _940 = _937 + 0.039999999105930328369140625;
    float _942 = _938 + 0.039999999105930328369140625;
    float _943 = _939 + 0.039999999105930328369140625;
    vec4 _952 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _877, cbSceneParam._m0[86u].y * _878));
    float _955 = _952.x * TEXCOORD_3.w;
    float _956 = dot(vec3(_776, _777, _778), vec3(_860, _861, _862));
    float _959 = _956 * 2.0;
    float _963 = (_959 * _776) - _860;
    float _964 = (_959 * _777) - _861;
    float _965 = (_959 * _778) - _862;
    float _969 = abs(dot(vec3(_860, _861, _862), vec3(_776, _777, _778)));
    float _4243 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
    float _971 = sqrt(_779);
    float _982 = exp2((_971 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_971 * 3.0));
    float _988 = (1.0 - _982) * ((_971 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _989 = _982 * _971;
    float _1017 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1021 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1025 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1353;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1078 = fma(_1025, cbModelParam._m0[26u].z, fma(_1021, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1017));
        float _1082 = fma(_1025, cbModelParam._m0[27u].z, fma(_1021, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1017));
        float _1086 = fma(_1025, cbModelParam._m0[28u].z, fma(_1021, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1017));
        float _1111 = _1017 + _776;
        float _1112 = _1021 + _777;
        float _1113 = _1025 + _778;
        float _1123 = fma(_1113, cbModelParam._m0[26u].z, fma(_1112, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1111)) - _1078;
        float _1124 = fma(_1113, cbModelParam._m0[27u].z, fma(_1112, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1111)) - _1082;
        float _1125 = fma(_1113, cbModelParam._m0[28u].z, fma(_1112, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1111)) - _1086;
        float _1129 = inversesqrt(dot(vec3(_1123, _1124, _1125), vec3(_1123, _1124, _1125)));
        float _1142 = ((_1129 * _1123) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1078 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1143 = ((_1129 * _1124) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1082 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1144 = ((_1129 * _1125) / cbModelParam._m0[34u].z) + ((((((_1086 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1147 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1142, _1143, _1144), 0.0);
        vec4 _1154 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1142, _1143, _1144), 0.0);
        vec4 _1161 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1142, _1143, _1144), 0.0);
        vec4 _1168 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1142, _1143, _1144), 0.0);
        float _1181 = exp2((_1147.w + (-0.5)) * 20.0) * 2.0;
        float _1182 = _1181 * (_1147.x + (-0.5));
        float _1183 = _1181 * (_1147.y + (-0.5));
        float _1184 = _1181 * (_1147.z + (-0.5));
        float _1191 = exp2((_1154.w + (-0.5)) * 20.0) * 2.0;
        float _1192 = _1191 * (_1154.x + (-0.5));
        float _1193 = _1191 * (_1154.y + (-0.5));
        float _1194 = _1191 * (_1154.z + (-0.5));
        float _1201 = exp2((_1161.w + (-0.5)) * 20.0) * 2.0;
        float _1202 = _1201 * (_1161.x + (-0.5));
        float _1203 = _1201 * (_1161.y + (-0.5));
        float _1204 = _1201 * (_1161.z + (-0.5));
        float _1211 = exp2((_1168.w + (-0.5)) * 20.0) * 2.0;
        float _1212 = _1211 * (_1168.x + (-0.5));
        float _1213 = _1211 * (_1168.y + (-0.5));
        float _1214 = _1211 * (_1168.z + (-0.5));
        float _1215 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1216 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1217 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1218 = _1182 * 0.5;
        float _1219 = _1192 * 0.5;
        float _1220 = _1202 * 0.5;
        float _1221 = dot(vec3(_1218, _1219, _1220), vec3(_1218, _1219, _1220));
        float _1226 = (_1221 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1221);
        float _1235 = (dot(vec3(_776, _777, _778), vec3(_1226 * _1218, _1226 * _1219, _1226 * _1220)) + 1.0) * 0.5;
        float _4269 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1245 = sqrt(((_1219 * _1219) + (_1218 * _1218)) + (_1220 * _1220)) / (_1215 + 9.9999997473787516355514526367188e-06);
        float _4280 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1246 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
        float _1247 = _1246 * 2.0;
        float _1251 = (1.0 - _1246) / (_1246 + 1.0);
        float _4291 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1252 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
        float _1261 = ((((1.0 - _1252) * (_1247 + 2.0)) * exp2(log2(isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0))) * (_1247 + 1.0))) + _1252) * _1215;
        float _1262 = _1183 * 0.5;
        float _1263 = _1193 * 0.5;
        float _1264 = _1203 * 0.5;
        float _1265 = dot(vec3(_1262, _1263, _1264), vec3(_1262, _1263, _1264));
        float _1270 = (_1265 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1265);
        float _1278 = (dot(vec3(_776, _777, _778), vec3(_1270 * _1262, _1270 * _1263, _1270 * _1264)) + 1.0) * 0.5;
        float _4302 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1287 = sqrt(((_1263 * _1263) + (_1262 * _1262)) + (_1264 * _1264)) / (_1216 + 9.9999997473787516355514526367188e-06);
        float _4313 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1288 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
        float _1289 = _1288 * 2.0;
        float _1293 = (1.0 - _1288) / (_1288 + 1.0);
        float _4324 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1294 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
        float _1303 = ((((1.0 - _1294) * (_1289 + 2.0)) * exp2(log2(isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0))) * (_1289 + 1.0))) + _1294) * _1216;
        float _1304 = _1184 * 0.5;
        float _1305 = _1194 * 0.5;
        float _1306 = _1204 * 0.5;
        float _1307 = dot(vec3(_1304, _1305, _1306), vec3(_1304, _1305, _1306));
        float _1312 = (_1307 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1307);
        float _1320 = (dot(vec3(_776, _777, _778), vec3(_1312 * _1304, _1312 * _1305, _1312 * _1306)) + 1.0) * 0.5;
        float _4335 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1329 = sqrt(((_1305 * _1305) + (_1304 * _1304)) + (_1306 * _1306)) / (_1217 + 9.9999997473787516355514526367188e-06);
        float _4346 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1330 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
        float _1331 = _1330 * 2.0;
        float _1335 = (1.0 - _1330) / (_1330 + 1.0);
        float _4357 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1336 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
        float _1345 = ((((1.0 - _1336) * (_1331 + 2.0)) * exp2(log2(isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0))) * (_1331 + 1.0))) + _1336) * _1217;
        _1353 = _1184;
        _1355 = _1183;
        _1356 = _1182;
        _1357 = _1194;
        _1358 = _1193;
        _1359 = _1192;
        _1360 = _1204;
        _1361 = _1203;
        _1362 = _1202;
        _1363 = _1217;
        _1364 = _1216;
        _1365 = _1215;
        _1366 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0)));
        _1367 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0)));
        _1368 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0)));
    }
    else
    {
        _1353 = _1354;
        _1355 = _1354;
        _1356 = _1354;
        _1357 = _1354;
        _1358 = _1354;
        _1359 = _1354;
        _1360 = _1354;
        _1361 = _1354;
        _1362 = _1354;
        _1363 = _1354;
        _1364 = _1354;
        _1365 = _1354;
        _1366 = 0.0;
        _1367 = 0.0;
        _1368 = 0.0;
    }
    float _1663;
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    float _1668;
    float _1669;
    float _1670;
    float _1671;
    float _1672;
    float _1673;
    float _1674;
    float _1675;
    float _1676;
    float _1677;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1394 = fma(_1025, cbModelParam._m0[30u].z, fma(_1021, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1017));
        float _1398 = fma(_1025, cbModelParam._m0[31u].z, fma(_1021, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1017));
        float _1402 = fma(_1025, cbModelParam._m0[32u].z, fma(_1021, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1017));
        float _1425 = _1017 + _776;
        float _1426 = _1021 + _777;
        float _1427 = _1025 + _778;
        float _1437 = fma(_1427, cbModelParam._m0[30u].z, fma(_1426, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1425)) - _1394;
        float _1438 = fma(_1427, cbModelParam._m0[31u].z, fma(_1426, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1425)) - _1398;
        float _1439 = fma(_1427, cbModelParam._m0[32u].z, fma(_1426, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1425)) - _1402;
        float _1443 = inversesqrt(dot(vec3(_1437, _1438, _1439), vec3(_1437, _1438, _1439)));
        float _1456 = ((_1443 * _1437) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1394 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1457 = ((_1443 * _1438) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1398 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1458 = ((_1443 * _1439) / cbModelParam._m0[35u].z) + ((((((_1402 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1460 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1456, _1457, _1458), 0.0);
        vec4 _1467 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1456, _1457, _1458), 0.0);
        vec4 _1474 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1456, _1457, _1458), 0.0);
        vec4 _1481 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1456, _1457, _1458), 0.0);
        float _1493 = exp2((_1460.w + (-0.5)) * 20.0) * 2.0;
        float _1494 = _1493 * (_1460.x + (-0.5));
        float _1495 = _1493 * (_1460.y + (-0.5));
        float _1496 = _1493 * (_1460.z + (-0.5));
        float _1503 = exp2((_1467.w + (-0.5)) * 20.0) * 2.0;
        float _1504 = _1503 * (_1467.x + (-0.5));
        float _1505 = _1503 * (_1467.y + (-0.5));
        float _1506 = _1503 * (_1467.z + (-0.5));
        float _1513 = exp2((_1474.w + (-0.5)) * 20.0) * 2.0;
        float _1514 = _1513 * (_1474.x + (-0.5));
        float _1515 = _1513 * (_1474.y + (-0.5));
        float _1516 = _1513 * (_1474.z + (-0.5));
        float _1523 = exp2((_1481.w + (-0.5)) * 20.0) * 2.0;
        float _1524 = _1523 * (_1481.x + (-0.5));
        float _1525 = _1523 * (_1481.y + (-0.5));
        float _1526 = _1523 * (_1481.z + (-0.5));
        float _1527 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1528 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1529 = isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0));
        float _1530 = _1494 * 0.5;
        float _1531 = _1504 * 0.5;
        float _1532 = _1514 * 0.5;
        float _1533 = dot(vec3(_1530, _1531, _1532), vec3(_1530, _1531, _1532));
        float _1538 = (_1533 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1533);
        float _1546 = (dot(vec3(_776, _777, _778), vec3(_1538 * _1530, _1538 * _1531, _1538 * _1532)) + 1.0) * 0.5;
        float _4398 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1555 = sqrt(((_1531 * _1531) + (_1530 * _1530)) + (_1532 * _1532)) / (_1527 + 9.9999997473787516355514526367188e-06);
        float _4409 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1556 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
        float _1557 = _1556 * 2.0;
        float _1561 = (1.0 - _1556) / (_1556 + 1.0);
        float _4420 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1562 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
        float _1571 = ((((1.0 - _1562) * (_1557 + 2.0)) * exp2(log2(isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0))) * (_1557 + 1.0))) + _1562) * _1527;
        float _1572 = _1495 * 0.5;
        float _1573 = _1505 * 0.5;
        float _1574 = _1515 * 0.5;
        float _1575 = dot(vec3(_1572, _1573, _1574), vec3(_1572, _1573, _1574));
        float _1580 = (_1575 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1575);
        float _1588 = (dot(vec3(_776, _777, _778), vec3(_1580 * _1572, _1580 * _1573, _1580 * _1574)) + 1.0) * 0.5;
        float _4431 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1597 = sqrt(((_1573 * _1573) + (_1572 * _1572)) + (_1574 * _1574)) / (_1528 + 9.9999997473787516355514526367188e-06);
        float _4442 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
        float _1598 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
        float _1599 = _1598 * 2.0;
        float _1603 = (1.0 - _1598) / (_1598 + 1.0);
        float _4453 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1604 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
        float _1613 = ((((1.0 - _1604) * (_1599 + 2.0)) * exp2(log2(isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0))) * (_1599 + 1.0))) + _1604) * _1528;
        float _1614 = _1496 * 0.5;
        float _1615 = _1506 * 0.5;
        float _1616 = _1516 * 0.5;
        float _1617 = dot(vec3(_1614, _1615, _1616), vec3(_1614, _1615, _1616));
        float _1622 = (_1617 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1617);
        float _1630 = (dot(vec3(_776, _777, _778), vec3(_1622 * _1614, _1622 * _1615, _1622 * _1616)) + 1.0) * 0.5;
        float _4464 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1639 = sqrt(((_1615 * _1615) + (_1614 * _1614)) + (_1616 * _1616)) / (_1529 + 9.9999997473787516355514526367188e-06);
        float _4475 = isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0));
        float _1640 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
        float _1641 = _1640 * 2.0;
        float _1645 = (1.0 - _1640) / (_1640 + 1.0);
        float _4486 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
        float _1646 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
        float _1655 = ((((1.0 - _1646) * (_1641 + 2.0)) * exp2(log2(isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0))) * (_1641 + 1.0))) + _1646) * _1529;
        _1663 = _1496;
        _1664 = _1495;
        _1665 = _1494;
        _1666 = _1506;
        _1667 = _1505;
        _1668 = _1504;
        _1669 = _1516;
        _1670 = _1515;
        _1671 = _1514;
        _1672 = _1529;
        _1673 = _1528;
        _1674 = _1527;
        _1675 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0)));
        _1676 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0)));
        _1677 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0)));
    }
    else
    {
        _1663 = _1354;
        _1664 = _1354;
        _1665 = _1354;
        _1666 = _1354;
        _1667 = _1354;
        _1668 = _1354;
        _1669 = _1354;
        _1670 = _1354;
        _1671 = _1354;
        _1672 = _1354;
        _1673 = _1354;
        _1674 = _1354;
        _1675 = 0.0;
        _1676 = 0.0;
        _1677 = 0.0;
    }
    float _1687 = (cbModelParam._m0[1u].x * (_1675 - _1366)) + _1366;
    float _1688 = (cbModelParam._m0[1u].x * (_1676 - _1367)) + _1367;
    float _1689 = (cbModelParam._m0[1u].x * (_1677 - _1368)) + _1368;
    float _1710 = fma(_1689, cbSceneParam._m0[89u].z, fma(_1688, cbSceneParam._m0[89u].y, _1687 * cbSceneParam._m0[89u].x));
    float _1713 = fma(_1689, cbSceneParam._m0[90u].z, fma(_1688, cbSceneParam._m0[90u].y, _1687 * cbSceneParam._m0[90u].x));
    float _1716 = fma(_1689, cbSceneParam._m0[91u].z, fma(_1688, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1687));
    float _1731 = _963 * 0.5;
    float _1732 = _964 * 0.5;
    float _1733 = _965 * 0.5;
    float _1734 = dot(vec4(_1731, _1732, _1733, 1.0), vec4(_1665, _1668, _1671, _1674));
    float _1737 = dot(vec4(_1731, _1732, _1733, 1.0), vec4(_1664, _1667, _1670, _1673));
    float _1740 = dot(vec4(_1731, _1732, _1733, 1.0), vec4(_1663, _1666, _1669, _1672));
    float _1774;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1747 = dot(vec4(_1731, _1732, _1733, 1.0), vec4(_1353, _1357, _1360, _1363));
        float _1751 = dot(vec4(_1731, _1732, _1733, 1.0), vec4(_1355, _1358, _1361, _1364));
        float _1755 = dot(vec4(_1731, _1732, _1733, 1.0), vec4(_1356, _1359, _1362, _1365));
        float _1762 = dot(vec4(cbModelParam._m0[39u]), vec4(_1731, _1732, _1733, 1.0));
        _1774 = dot(vec3(isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0)), isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0)), isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1762) ? 0.0 : (isnan(0.0) ? _1762 : max(0.0, _1762))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1774 = 1.0;
    }
    float _1785;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1776 = dot(vec4(cbModelParam._m0[40u]), vec4(_1731, _1732, _1733, 1.0));
        _1785 = dot(vec3(isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0)), isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0)), isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1776) ? 0.0 : (isnan(0.0) ? _1776 : max(0.0, _1776))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1785 = 1.0;
    }
    float _1789 = (_1785 * cbModelParam._m0[1u].x) + (_1774 * (1.0 - cbModelParam._m0[1u].x));
    float _1799 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _779);
    float _1800 = isnan(_1799) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1799 : min(cbModelParam._m0[25u].z, _1799));
    float _1880;
    float _1882;
    float _1884;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1847 = fma(_1025, cbModelParam._m0[13u].z, fma(_1021, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1017)) + cbModelParam._m0[13u].w;
        float _1851 = fma(_1025, cbModelParam._m0[14u].z, fma(_1021, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1017)) + cbModelParam._m0[14u].w;
        float _1855 = fma(_1025, cbModelParam._m0[15u].z, fma(_1021, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1017)) + cbModelParam._m0[15u].w;
        float _1858 = fma(_965, cbModelParam._m0[13u].z, fma(_964, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _963));
        float _1861 = fma(_965, cbModelParam._m0[14u].z, fma(_964, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _963));
        float _1864 = fma(_965, cbModelParam._m0[15u].z, fma(_964, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _963));
        float _1892;
        if (_1858 > 0.0)
        {
            _1892 = abs((1.0 - _1847) / _1858);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1858 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1847 + 1.0) / _1858);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1892 = frontier_phi_19_17_ladder;
        }
        float _2063;
        if (_1861 > 0.0)
        {
            _2063 = abs((1.0 - _1851) / _1861);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1861 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1851 + 1.0) / _1861);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2063 = frontier_phi_28_24_ladder;
        }
        float _2358;
        if (_1864 > 0.0)
        {
            _2358 = abs((1.0 - _1855) / _1864);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1864 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1855 + 1.0) / _1864);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2358 = frontier_phi_40_35_ladder;
        }
        float _2360 = isnan(_2063) ? _1892 : (isnan(_1892) ? _2063 : min(_1892, _2063));
        float _2361 = isnan(_2358) ? _2360 : (isnan(_2360) ? _2358 : min(_2360, _2358));
        float _2365 = (_2361 * _1858) + _1847;
        float _2366 = (_2361 * _1861) + _1851;
        float _2367 = (_2361 * _1864) + _1855;
        float _2368 = _2361 * 9.9999997473787516355514526367188e-05;
        float _2370 = (-1.0) - _2368;
        float _2372 = _2368 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2367 > _2372) || ((_2367 < _2370) || ((_2366 > _2372) || ((_2366 < _2370) || ((_2365 < _2370) || (_2365 > _2372))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2512 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2367, cbModelParam._m0[9u].z, fma(_2366, cbModelParam._m0[9u].y, _2365 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2367, cbModelParam._m0[10u].z, fma(_2366, cbModelParam._m0[10u].y, _2365 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2367, cbModelParam._m0[11u].z, fma(_2366, cbModelParam._m0[11u].y, _2365 * cbModelParam._m0[11u].x))), _1800);
            frontier_phi_18_40_ladder = _2512.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2512.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2512.x * cbModelParam._m0[1u].y;
        }
        _1880 = frontier_phi_18_40_ladder_2;
        _1882 = frontier_phi_18_40_ladder_1;
        _1884 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1868 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_963, _964, _965), _1800);
        _1880 = _1868.x * cbModelParam._m0[1u].y;
        _1882 = _1868.y * cbModelParam._m0[1u].y;
        _1884 = _1868.z * cbModelParam._m0[1u].y;
    }
    float _1888 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _779);
    float _1889 = isnan(_1888) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1888 : min(cbModelParam._m0[25u].w, _1888));
    float _1978;
    float _1980;
    float _1982;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1942 = fma(_1025, cbModelParam._m0[21u].z, fma(_1021, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1017)) + cbModelParam._m0[21u].w;
        float _1946 = fma(_1025, cbModelParam._m0[22u].z, fma(_1021, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1017)) + cbModelParam._m0[22u].w;
        float _1950 = fma(_1025, cbModelParam._m0[23u].z, fma(_1021, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1017)) + cbModelParam._m0[23u].w;
        float _1953 = fma(_965, cbModelParam._m0[21u].z, fma(_964, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _963));
        float _1956 = fma(_965, cbModelParam._m0[22u].z, fma(_964, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _963));
        float _1959 = fma(_965, cbModelParam._m0[23u].z, fma(_964, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _963));
        float _2068;
        if (_1953 > 0.0)
        {
            _2068 = abs((1.0 - _1942) / _1953);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1953 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1942 + 1.0) / _1953);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2068 = frontier_phi_30_26_ladder;
        }
        float _2385;
        if (_1956 > 0.0)
        {
            _2385 = abs((1.0 - _1946) / _1956);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1956 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1946 + 1.0) / _1956);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2385 = frontier_phi_42_37_ladder;
        }
        float _2723;
        if (_1959 > 0.0)
        {
            _2723 = abs((1.0 - _1950) / _1959);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1959 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1950 + 1.0) / _1959);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2723 = frontier_phi_52_49_ladder;
        }
        float _2725 = isnan(_2385) ? _2068 : (isnan(_2068) ? _2385 : min(_2068, _2385));
        float _2726 = isnan(_2723) ? _2725 : (isnan(_2725) ? _2723 : min(_2725, _2723));
        float _2730 = (_2726 * _1953) + _1942;
        float _2731 = (_2726 * _1956) + _1946;
        float _2732 = (_2726 * _1959) + _1950;
        float _2733 = _2726 * 9.9999997473787516355514526367188e-05;
        float _2734 = (-1.0) - _2733;
        float _2736 = _2733 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2732 > _2736) || ((_2732 < _2734) || ((_2731 > _2736) || ((_2731 < _2734) || ((_2730 < _2734) || (_2730 > _2736))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2854 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2732, cbModelParam._m0[17u].z, fma(_2731, cbModelParam._m0[17u].y, _2730 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2732, cbModelParam._m0[18u].z, fma(_2731, cbModelParam._m0[18u].y, _2730 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2732, cbModelParam._m0[19u].z, fma(_2731, cbModelParam._m0[19u].y, _2730 * cbModelParam._m0[19u].x))), _1889);
            frontier_phi_27_52_ladder = _2854.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2854.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2854.x * cbModelParam._m0[1u].z;
        }
        _1978 = frontier_phi_27_52_ladder_2;
        _1980 = frontier_phi_27_52_ladder_1;
        _1982 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1962 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_963, _964, _965), _1889);
        _1978 = _1962.x * cbModelParam._m0[1u].z;
        _1980 = _1962.y * cbModelParam._m0[1u].z;
        _1982 = _1962.z * cbModelParam._m0[1u].z;
    }
    float _1995 = (((_988 * _940) + _989) * _955) * ((cbModelParam._m0[1u].w * (_1978 - _1880)) + _1880);
    float _1997 = (((_988 * _942) + _989) * _955) * ((cbModelParam._m0[1u].w * (_1980 - _1882)) + _1882);
    float _1999 = (((_988 * _943) + _989) * _955) * ((cbModelParam._m0[1u].w * (_1982 - _1884)) + _1884);
    float _2002 = fma(_1999, cbSceneParam._m0[89u].z, fma(_1997, cbSceneParam._m0[89u].y, _1995 * cbSceneParam._m0[89u].x));
    float _2005 = fma(_1999, cbSceneParam._m0[90u].z, fma(_1997, cbSceneParam._m0[90u].y, _1995 * cbSceneParam._m0[90u].x));
    float _2008 = fma(_1999, cbSceneParam._m0[91u].z, fma(_1997, cbSceneParam._m0[91u].y, _1995 * cbSceneParam._m0[91u].x));
    float _2042 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2046 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2050 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2054 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2055 = _2042 / _2054;
    float _2056 = _2046 / _2054;
    float _2057 = _2050 / _2054;
    float _2204;
    float _2205;
    float _2206;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2084 = ((uint(_2057 > cbSceneParam._m0[59u].y) + uint(_2057 > cbSceneParam._m0[59u].x)) + uint(_2057 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2085 = _2084 + 43u;
        uint _2093 = _2084 + 44u;
        uint _2101 = _2084 + 45u;
        uint _2109 = _2084 + 46u;
        float _2120 = fma(_2054, cbSceneParam._m0[_2085].w, fma(_2050, cbSceneParam._m0[_2085].z, fma(_2046, cbSceneParam._m0[_2085].y, _2042 * cbSceneParam._m0[_2085].x)));
        float _2124 = fma(_2054, cbSceneParam._m0[_2093].w, fma(_2050, cbSceneParam._m0[_2093].z, fma(_2046, cbSceneParam._m0[_2093].y, _2042 * cbSceneParam._m0[_2093].x)));
        float _2132 = fma(_2054, cbSceneParam._m0[_2109].w, fma(_2050, cbSceneParam._m0[_2109].z, fma(_2046, cbSceneParam._m0[_2109].y, _2042 * cbSceneParam._m0[_2109].x)));
        float _2137 = cbSceneParam._m0[33u].z * _2132;
        float _2139 = cbSceneParam._m0[33u].w * _2132;
        float _2142 = fma(_2054, cbSceneParam._m0[_2101].w, fma(_2050, cbSceneParam._m0[_2101].z, fma(_2046, cbSceneParam._m0[_2101].y, _2042 * cbSceneParam._m0[_2101].x))) / _2132;
        float _2190 = (cbSceneParam._m0[33u].x - sqrt(((_2056 * _2056) + (_2055 * _2055)) + (_2057 * _2057))) * cbSceneParam._m0[33u].y;
        float _4612 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
        float _2197 = (isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2137 + _2120) / _2132, (_2139 + _2124) / _2132), _2142), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2139 + _2120) / _2132, (_2124 - _2137) / _2132), _2142), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2120 - _2137) / _2132, (_2124 - _2139) / _2132), _2142), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2120 - _2139) / _2132, (_2137 + _2124) / _2132), _2142), 0.0)).x), vec4(0.25)));
        _2204 = 1.0 - (_2197 * cbSceneParam._m0[34u].x);
        _2205 = 1.0 - (_2197 * cbSceneParam._m0[34u].y);
        _2206 = 1.0 - (_2197 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2204 = 1.0;
        _2205 = 1.0;
        _2206 = 1.0;
    }
    float _2270;
    float _2272;
    float _2274;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2258 = fma(_2054, cbSceneParam._m0[63u].w, fma(_2050, cbSceneParam._m0[63u].z, fma(_2046, cbSceneParam._m0[63u].y, _2042 * cbSceneParam._m0[63u].x)));
        float _2259 = fma(_2054, cbSceneParam._m0[60u].w, fma(_2050, cbSceneParam._m0[60u].z, fma(_2046, cbSceneParam._m0[60u].y, _2042 * cbSceneParam._m0[60u].x))) / _2258;
        float _2260 = fma(_2054, cbSceneParam._m0[61u].w, fma(_2050, cbSceneParam._m0[61u].z, fma(_2046, cbSceneParam._m0[61u].y, _2042 * cbSceneParam._m0[61u].x))) / _2258;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2259 >= cbSceneParam._m0[64u].x) && (_2260 >= cbSceneParam._m0[64u].y)) && (_2259 <= cbSceneParam._m0[64u].z)) && (_2260 <= cbSceneParam._m0[64u].w))
        {
            float _2398 = fma(_2054, cbSceneParam._m0[62u].w, fma(_2050, cbSceneParam._m0[62u].z, fma(_2046, cbSceneParam._m0[62u].y, _2042 * cbSceneParam._m0[62u].x))) / _2258;
            float _2402 = isnan(cbSceneParam._m0[41u].w) ? _2398 : (isnan(_2398) ? cbSceneParam._m0[41u].w : max(_2398, cbSceneParam._m0[41u].w));
            float _2445 = (cbSceneParam._m0[33u].x - sqrt(((_2056 * _2056) + (_2055 * _2055)) + (_2057 * _2057))) * cbSceneParam._m0[33u].y;
            float _4628 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
            float _2452 = (isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2259, cbSceneParam._m0[33u].w + _2260), _2402), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2259, _2260 - cbSceneParam._m0[33u].z), _2402), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2259 - cbSceneParam._m0[33u].z, _2260 - cbSceneParam._m0[33u].w), _2402), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2259 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2260), _2402), 0.0)).x), vec4(0.25)));
            float _2456 = 1.0 - (_2452 * cbSceneParam._m0[34u].x);
            float _2457 = 1.0 - (_2452 * cbSceneParam._m0[34u].y);
            float _2458 = 1.0 - (_2452 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2458) ? _2206 : (isnan(_2206) ? _2458 : min(_2206, _2458));
            frontier_phi_39_38_ladder_1 = isnan(_2457) ? _2205 : (isnan(_2205) ? _2457 : min(_2205, _2457));
            frontier_phi_39_38_ladder_2 = isnan(_2456) ? _2204 : (isnan(_2204) ? _2456 : min(_2204, _2456));
        }
        else
        {
            frontier_phi_39_38_ladder = _2206;
            frontier_phi_39_38_ladder_1 = _2205;
            frontier_phi_39_38_ladder_2 = _2204;
        }
        _2270 = frontier_phi_39_38_ladder_2;
        _2272 = frontier_phi_39_38_ladder_1;
        _2274 = frontier_phi_39_38_ladder;
    }
    else
    {
        _2270 = _2204;
        _2272 = _2205;
        _2274 = _2206;
    }
    uvec4 _2279 = floatBitsToUint(cbInstanceData._m0[_915 + 5u]);
    uint _2281 = _2279.x * 14u;
    uint _2282 = _2281 + 13u;
    float _2289 = _955 + (-1.0);
    float _2294 = (cbLight._m0[_2282].x * _2289) + 1.0;
    float _2295 = (cbLight._m0[_2282].y * _2289) + 1.0;
    float _2296 = (cbLight._m0[_2282].z * _2289) + 1.0;
    float _2297 = (cbLight._m0[_2282].w * _2289) + 1.0;
    uint _2298 = _2281 + 5u;
    float _2304 = isnan(1.0) ? _2295 : (isnan(_2295) ? 1.0 : min(_2295, 1.0));
    uint _2308 = _2281 + 4u;
    float _2317 = isnan(1.0) ? _2294 : (isnan(_2294) ? 1.0 : min(_2294, 1.0));
    uint _2321 = _2281 | 1u;
    float _2332 = dot(vec3(cbLight._m0[_2281].xyz), vec3(_776, _777, _778));
    float _2335 = dot(vec3(cbLight._m0[_2321].xyz), vec3(_776, _777, _778));
    float _4664 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
    float _4675 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
    float _2340 = (isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0))) * 0.3183098733425140380859375;
    float _2342 = (isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0))) * 0.3183098733425140380859375;
    float _2349 = ((cbLight._m0[_2298].x * _2304) * _2342) + (((cbLight._m0[_2308].x * _2270) * _2317) * _2340);
    float _2350 = ((_2304 * cbLight._m0[_2298].y) * _2342) + (((cbLight._m0[_2308].y * _2272) * _2317) * _2340);
    float _2351 = ((_2304 * cbLight._m0[_2298].z) * _2342) + (((cbLight._m0[_2308].z * _2274) * _2317) * _2340);
    uvec4 _2355 = floatBitsToUint(cbLight._m0[_2281 + 12u]);
    bool _2357 = _2355.x == 0u;
    float _2459;
    float _2461;
    float _2463;
    if (_2357)
    {
        _2459 = _2349;
        _2461 = _2350;
        _2463 = _2351;
    }
    else
    {
        uint _2467 = _2281 + 6u;
        float _2483 = (dot(vec3(cbLight._m0[_2281 + 2u].xyz), vec3(_776, _777, _778)) * 0.5) + 0.5;
        float _2484 = _2483 * _2483;
        float _4686 = isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : max(_2484, 0.0));
        float _2485 = isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0));
        float _2486 = isnan(1.0) ? _2296 : (isnan(_2296) ? 1.0 : min(_2296, 1.0));
        _2459 = (((cbLight._m0[_2467].x * 0.3183098733425140380859375) * _2485) * _2486) + _2349;
        _2461 = (((cbLight._m0[_2467].y * 0.3183098733425140380859375) * _2485) * _2486) + _2350;
        _2463 = (((cbLight._m0[_2467].z * 0.3183098733425140380859375) * _2485) * _2486) + _2351;
    }
    bool _2466 = _2355.y == 0u;
    float _2521;
    float _2523;
    float _2525;
    if (_2466)
    {
        _2521 = _2459;
        _2523 = _2461;
        _2525 = _2463;
    }
    else
    {
        uint _2694 = _2281 + 7u;
        float _2710 = (dot(vec3(cbLight._m0[_2281 + 3u].xyz), vec3(_776, _777, _778)) * 0.5) + 0.5;
        float _2711 = _2710 * _2710;
        float _4702 = isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0));
        float _2712 = isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0));
        float _2713 = isnan(1.0) ? _2297 : (isnan(_2297) ? 1.0 : min(_2297, 1.0));
        _2521 = (((cbLight._m0[_2694].x * 0.3183098733425140380859375) * _2712) * _2713) + _2459;
        _2523 = (((cbLight._m0[_2694].y * 0.3183098733425140380859375) * _2712) * _2713) + _2461;
        _2525 = (((cbLight._m0[_2694].z * 0.3183098733425140380859375) * _2712) * _2713) + _2463;
    }
    uint _2528 = _2281 + 8u;
    float _2541 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2281].w)) * _779) * 0.949999988079071044921875);
    float _2542 = _2541 * _2541;
    float _2543 = cbLight._m0[_2281].x + _860;
    float _2544 = cbLight._m0[_2281].y + _861;
    float _2545 = cbLight._m0[_2281].z + _862;
    float _2549 = inversesqrt(dot(vec3(_2543, _2544, _2545), vec3(_2543, _2544, _2545)));
    float _2550 = _2549 * _2543;
    float _2551 = _2549 * _2544;
    float _2552 = _2549 * _2545;
    float _2553 = dot(vec3(_776, _777, _778), vec3(cbLight._m0[_2281].xyz));
    float _4718 = isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0));
    float _2556 = isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0));
    float _4729 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
    float _2557 = isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0));
    float _2558 = dot(vec3(_776, _777, _778), vec3(_2550, _2551, _2552));
    float _4740 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0));
    float _2561 = isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0));
    float _2562 = dot(vec3(cbLight._m0[_2281].xyz), vec3(_2550, _2551, _2552));
    float _4751 = isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : max(_2562, 0.0));
    float _2566 = _2542 * _2542;
    float _2570 = ((_2561 * _2561) * (_2566 + (-1.0))) + 1.0;
    float _2578 = exp2(log2(1.0 - (isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0)))) * 5.0);
    float _2579 = 0.959999978542327880859375 - _937;
    float _2581 = 0.959999978542327880859375 - _938;
    float _2582 = 0.959999978542327880859375 - _939;
    float _2589 = 1.0 - _2542;
    float _2600 = (0.5 / (((_2557 * ((_2556 * _2589) + _2542)) + 9.9999999392252902907785028219223e-09) + (((_2557 * _2589) + _2542) * _2556))) * _2556;
    float _4762 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0));
    float _2602 = (isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0))) * (_2566 / ((_2570 * _2570) * 3.141590118408203125));
    uint _2616 = _2281 + 9u;
    float _2627 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2321].w)) * _779) * 0.949999988079071044921875);
    float _2628 = _2627 * _2627;
    float _2629 = cbLight._m0[_2321].x + _860;
    float _2630 = cbLight._m0[_2321].y + _861;
    float _2631 = cbLight._m0[_2321].z + _862;
    float _2635 = inversesqrt(dot(vec3(_2629, _2630, _2631), vec3(_2629, _2630, _2631)));
    float _2636 = _2635 * _2629;
    float _2637 = _2635 * _2630;
    float _2638 = _2635 * _2631;
    float _2639 = dot(vec3(_776, _777, _778), vec3(cbLight._m0[_2321].xyz));
    float _4773 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0));
    float _2642 = isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0));
    float _2643 = dot(vec3(_776, _777, _778), vec3(_2636, _2637, _2638));
    float _4784 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0));
    float _2646 = isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0));
    float _2647 = dot(vec3(cbLight._m0[_2321].xyz), vec3(_2636, _2637, _2638));
    float _4795 = isnan(0.0) ? _2647 : (isnan(_2647) ? 0.0 : max(_2647, 0.0));
    float _2651 = _2628 * _2628;
    float _2655 = ((_2646 * _2646) * (_2651 + (-1.0))) + 1.0;
    float _2662 = exp2(log2(1.0 - (isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0)))) * 5.0);
    float _2669 = 1.0 - _2628;
    float _2679 = (0.5 / (((_2557 * ((_2642 * _2669) + _2628)) + 9.9999999392252902907785028219223e-09) + (((_2557 * _2669) + _2628) * _2642))) * _2642;
    float _4806 = isnan(0.0) ? _2679 : (isnan(_2679) ? 0.0 : max(_2679, 0.0));
    float _2681 = (isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0))) * (_2651 / ((_2655 * _2655) * 3.141590118408203125));
    float _2691 = (((((_2662 * _2579) + _940) * cbLight._m0[_2616].x) * _2681) * _2304) + ((((cbLight._m0[_2528].x * _2270) * ((_2578 * _2579) + _940)) * _2602) * _2317);
    float _2692 = (((((_2662 * _2581) + _942) * cbLight._m0[_2616].y) * _2681) * _2304) + ((((cbLight._m0[_2528].y * _2272) * ((_2578 * _2581) + _942)) * _2602) * _2317);
    float _2693 = (((((_2662 * _2582) + _943) * cbLight._m0[_2616].z) * _2681) * _2304) + ((((cbLight._m0[_2528].z * _2274) * ((_2578 * _2582) + _943)) * _2602) * _2317);
    float _2749;
    float _2751;
    float _2753;
    if (_2357)
    {
        _2749 = _2691;
        _2751 = _2692;
        _2753 = _2693;
    }
    else
    {
        uint _2755 = _2281 + 2u;
        uint _2759 = _2281 + 10u;
        float _2773 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2755].w)) * _779) * 0.949999988079071044921875);
        float _2774 = _2773 * _2773;
        float _2775 = cbLight._m0[_2755].x + _860;
        float _2776 = cbLight._m0[_2755].y + _861;
        float _2777 = cbLight._m0[_2755].z + _862;
        float _2781 = inversesqrt(dot(vec3(_2775, _2776, _2777), vec3(_2775, _2776, _2777)));
        float _2782 = _2781 * _2775;
        float _2783 = _2781 * _2776;
        float _2784 = _2781 * _2777;
        float _2785 = dot(vec3(_776, _777, _778), vec3(cbLight._m0[_2755].xyz));
        float _4817 = isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : max(_2785, 0.0));
        float _2788 = isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0));
        float _2789 = dot(vec3(_776, _777, _778), vec3(_2782, _2783, _2784));
        float _4828 = isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : max(_2789, 0.0));
        float _2792 = isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0));
        float _2793 = dot(vec3(cbLight._m0[_2755].xyz), vec3(_2782, _2783, _2784));
        float _4839 = isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : max(_2793, 0.0));
        float _2797 = _2774 * _2774;
        float _2801 = ((_2792 * _2792) * (_2797 + (-1.0))) + 1.0;
        float _2808 = exp2(log2(1.0 - (isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0)))) * 5.0);
        float _2815 = 1.0 - _2774;
        float _2825 = (0.5 / (((_2557 * ((_2788 * _2815) + _2774)) + 9.9999999392252902907785028219223e-09) + (((_2557 * _2815) + _2774) * _2788))) * _2788;
        float _4850 = isnan(0.0) ? _2825 : (isnan(_2825) ? 0.0 : max(_2825, 0.0));
        float _2827 = (isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0))) * (_2797 / ((_2801 * _2801) * 3.141590118408203125));
        float _2828 = isnan(1.0) ? _2296 : (isnan(_2296) ? 1.0 : min(_2296, 1.0));
        _2749 = (((((_2808 * _2579) + _940) * cbLight._m0[_2759].x) * _2827) * _2828) + _2691;
        _2751 = (((((_2808 * _2581) + _942) * cbLight._m0[_2759].y) * _2827) * _2828) + _2692;
        _2753 = (((((_2808 * _2582) + _943) * cbLight._m0[_2759].z) * _2827) * _2828) + _2693;
    }
    float _2859;
    float _2861;
    float _2863;
    if (_2466)
    {
        _2859 = _2749;
        _2861 = _2751;
        _2863 = _2753;
    }
    else
    {
        uint _2870 = _2281 + 3u;
        uint _2874 = _2281 + 11u;
        float _2888 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2870].w)) * _779) * 0.949999988079071044921875);
        float _2889 = _2888 * _2888;
        float _2890 = cbLight._m0[_2870].x + _860;
        float _2891 = cbLight._m0[_2870].y + _861;
        float _2892 = cbLight._m0[_2870].z + _862;
        float _2896 = inversesqrt(dot(vec3(_2890, _2891, _2892), vec3(_2890, _2891, _2892)));
        float _2897 = _2896 * _2890;
        float _2898 = _2896 * _2891;
        float _2899 = _2896 * _2892;
        float _2900 = dot(vec3(_776, _777, _778), vec3(cbLight._m0[_2870].xyz));
        float _4866 = isnan(0.0) ? _2900 : (isnan(_2900) ? 0.0 : max(_2900, 0.0));
        float _2903 = isnan(1.0) ? _4866 : (isnan(_4866) ? 1.0 : min(_4866, 1.0));
        float _2904 = dot(vec3(_776, _777, _778), vec3(_2897, _2898, _2899));
        float _4877 = isnan(0.0) ? _2904 : (isnan(_2904) ? 0.0 : max(_2904, 0.0));
        float _2907 = isnan(1.0) ? _4877 : (isnan(_4877) ? 1.0 : min(_4877, 1.0));
        float _2908 = dot(vec3(cbLight._m0[_2870].xyz), vec3(_2897, _2898, _2899));
        float _4888 = isnan(0.0) ? _2908 : (isnan(_2908) ? 0.0 : max(_2908, 0.0));
        float _2912 = _2889 * _2889;
        float _2916 = ((_2907 * _2907) * (_2912 + (-1.0))) + 1.0;
        float _2923 = exp2(log2(1.0 - (isnan(1.0) ? _4888 : (isnan(_4888) ? 1.0 : min(_4888, 1.0)))) * 5.0);
        float _2930 = 1.0 - _2889;
        float _2940 = (0.5 / (((_2557 * ((_2903 * _2930) + _2889)) + 9.9999999392252902907785028219223e-09) + (((_2557 * _2930) + _2889) * _2903))) * _2903;
        float _4899 = isnan(0.0) ? _2940 : (isnan(_2940) ? 0.0 : max(_2940, 0.0));
        float _2942 = (isnan(1.0) ? _4899 : (isnan(_4899) ? 1.0 : min(_4899, 1.0))) * (_2912 / ((_2916 * _2916) * 3.141590118408203125));
        float _2943 = isnan(1.0) ? _2297 : (isnan(_2297) ? 1.0 : min(_2297, 1.0));
        _2859 = (((((_2923 * _2579) + _940) * cbLight._m0[_2874].x) * _2942) * _2943) + _2749;
        _2861 = (((((_2923 * _2581) + _942) * cbLight._m0[_2874].y) * _2942) * _2943) + _2751;
        _2863 = (((((_2923 * _2582) + _943) * cbLight._m0[_2874].z) * _2942) * _2943) + _2753;
    }
    float _3009;
    float _3011;
    float _3013;
    float _3015;
    float _3017;
    float _3019;
    if (_2279.y == 0u)
    {
        uvec4 _2964 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2965 = _2964.x;
        uint _2976 = uint((float(_2964.y) * floor(float(uint(cbSceneParam._m0[85u].y * _878) / _2965))) + floor(float(uint(cbSceneParam._m0[85u].x * _877) / _2965)));
        float _2986 = (log2(_2057 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2987 = isnan(0.0) ? _2986 : (isnan(_2986) ? 0.0 : max(_2986, 0.0));
        uint _2990 = uint(isnan(14.0) ? _2987 : (isnan(_2987) ? 14.0 : min(_2987, 14.0)));
        uvec4 _2995 = texelFetch(g_lightClusterGridBuffer, int(((_2990 << 2u) + (_2976 << 6u)) >> 2u));
        uint _2996 = _2995.x;
        uint _2997 = _2964.z;
        float _3111;
        float _3113;
        float _3115;
        float _3117;
        float _3119;
        float _3121;
        if (((((1u << ((_2997 >> 4u) & 15u)) + 4294967295u) & _2996) == 0u) || ((_2997 & 240u) == 0u))
        {
            _3111 = 0.0;
            _3113 = 0.0;
            _3115 = 0.0;
            _3117 = 0.0;
            _3119 = 0.0;
            _3121 = 0.0;
        }
        else
        {
            float _3112;
            float _3114;
            float _3116;
            float _3118;
            float _3120;
            float _3122;
            float _3273 = 0.0;
            float _3274 = 0.0;
            float _3275 = 0.0;
            float _3276 = 0.0;
            float _3277 = 0.0;
            float _3278 = 0.0;
            uint _3279 = 0u;
            uint _3288;
            bool _3289;
            for (;;)
            {
                _3288 = texelFetch(g_lightClassification, int((((_2990 << 5u) + (_2976 << 9u)) + (_3279 << 2u)) >> 2u)).x;
                _3289 = _3288 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3289)
                {
                    frontier_phi_73_pred = _3278;
                    frontier_phi_73_pred_1 = _3277;
                    frontier_phi_73_pred_2 = _3276;
                    frontier_phi_73_pred_3 = _3275;
                    frontier_phi_73_pred_4 = _3274;
                    frontier_phi_73_pred_5 = _3273;
                }
                else
                {
                    float _3418;
                    float _3419;
                    float _3420;
                    float _3421;
                    float _3422;
                    float _3423;
                    uint _3424;
                    _3418 = _3273;
                    _3419 = _3274;
                    _3420 = _3275;
                    _3421 = _3276;
                    _3422 = _3277;
                    _3423 = _3278;
                    _3424 = _3288;
                    float _3345;
                    float _3346;
                    float _3347;
                    float _3348;
                    float _3349;
                    float _3350;
                    for (;;)
                    {
                        uint _3428 = uint(findLSB(_3424)) + (_3279 << 5u);
                        uint _3425 = (_3424 + 4294967295u) & _3424;
                        uint _3430 = _3428 * 48u;
                        vec4 _3444 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3430)).x, texelFetch(g_PointLightRenderingBuffer, int(_3430 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3430 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3430 + 3u)).x));
                        uint _3450 = (_3428 * 48u) + 4u;
                        vec4 _3463 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3450)).x, texelFetch(g_PointLightRenderingBuffer, int(_3450 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3450 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3450 + 3u)).x));
                        uint _3469 = (_3428 * 48u) + 8u;
                        vec3 _3480 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3469)).x, texelFetch(g_PointLightRenderingBuffer, int(_3469 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3469 + 2u)).x));
                        float _3484 = _3444.x - _2055;
                        float _3485 = _3444.y - _2056;
                        float _3486 = _3444.z - _2057;
                        float _3487 = dot(vec3(_3484, _3485, _3486), vec3(_3484, _3485, _3486));
                        float _3490 = inversesqrt(_3487);
                        float _3491 = _3490 * _3484;
                        float _3492 = _3490 * _3485;
                        float _3493 = _3490 * _3486;
                        float _3494 = dot(vec3(_896, _899, _902), vec3(_3491, _3492, _3493));
                        float _3499 = 1.0 - (_3487 * _3444.w);
                        float _4925 = isnan(0.0) ? _3499 : (isnan(_3499) ? 0.0 : max(_3499, 0.0));
                        float _3500 = isnan(1.0) ? _4925 : (isnan(_4925) ? 1.0 : min(_4925, 1.0));
                        float _3501 = sqrt(_3487) * _3463.w;
                        float _3504 = 1.39999997615814208984375 / (_3501 + 1.39999997615814208984375);
                        float _3505 = _3504 * _3504;
                        float _3508 = ((1.0 - _3505) * _3494) + _3505;
                        float _3511 = _3501 * _3501;
                        float _3515 = ((isnan(0.0) ? _3508 : (isnan(_3508) ? 0.0 : max(_3508, 0.0))) * _3500) / ((_3511 * 0.699999988079071044921875) + 1.0);
                        float _3519 = (-0.0) - _2055;
                        float _3520 = (-0.0) - _2056;
                        float _3521 = (-0.0) - _2057;
                        float _3525 = inversesqrt(dot(vec3(_3519, _3520, _3521), vec3(_3519, _3520, _3521)));
                        float _3526 = _3525 * _3519;
                        float _3527 = _3525 * _3520;
                        float _3528 = _3525 * _3521;
                        float _3535 = exp2(log2(1.0 / ((_3511 * 3.5) + 5.0)) * 0.25);
                        float _3536 = 1.0 - _971;
                        float _3543 = sqrt(1.0 - ((1.0 - (_3536 * _3536)) * (1.0 - (_3535 * _3535))));
                        float _3544 = _3543 * _3543;
                        float _3545 = _3544 * _3544;
                        float _3546 = _3526 + _3491;
                        float _3547 = _3527 + _3492;
                        float _3548 = _3528 + _3493;
                        float _3552 = inversesqrt(dot(vec3(_3546, _3547, _3548), vec3(_3546, _3547, _3548)));
                        float _3556 = dot(vec3(_896, _899, _902), vec3(_3526, _3527, _3528));
                        float _4941 = isnan(0.0) ? _3556 : (isnan(_3556) ? 0.0 : max(_3556, 0.0));
                        float _3559 = isnan(1.0) ? _4941 : (isnan(_4941) ? 1.0 : min(_4941, 1.0));
                        float _3560 = dot(vec3(_896, _899, _902), vec3(_3552 * _3546, _3552 * _3547, _3552 * _3548));
                        float _4952 = isnan(0.0) ? _3560 : (isnan(_3560) ? 0.0 : max(_3560, 0.0));
                        float _3563 = isnan(1.0) ? _4952 : (isnan(_4952) ? 1.0 : min(_4952, 1.0));
                        float _3567 = ((_3563 * _3563) * (_3545 + (-1.0))) + 1.0;
                        float _3568 = _3504 * _3544;
                        float _3569 = _3568 * _3568;
                        float _3572 = ((1.0 - _3569) * _3494) + _3569;
                        float _4963 = isnan(0.0) ? _3572 : (isnan(_3572) ? 0.0 : max(_3572, 0.0));
                        float _3573 = isnan(1.0) ? _4963 : (isnan(_4963) ? 1.0 : min(_4963, 1.0));
                        float _3574 = 1.0 - _3544;
                        float _3584 = (0.5 / (((_3573 * ((_3559 * _3574) + _3544)) + 9.9999999392252902907785028219223e-09) + (((_3573 * _3574) + _3544) * _3559))) * _3573;
                        float _4974 = isnan(0.0) ? _3584 : (isnan(_3584) ? 0.0 : max(_3584, 0.0));
                        float _3595 = (((_3545 * 3.1415927410125732421875) * (isnan(1.0) ? _4974 : (isnan(_4974) ? 1.0 : min(_4974, 1.0)))) / ((_3567 * _3567) * ((_3511 * 2.1991131305694580078125) + 3.141590118408203125))) * _3500;
                        _3348 = (_3515 * _3463.x) + _3421;
                        _3349 = (_3515 * _3463.y) + _3422;
                        _3350 = (_3515 * _3463.z) + _3423;
                        _3345 = (_3595 * _3480.x) + _3418;
                        _3346 = (_3595 * _3480.y) + _3419;
                        _3347 = (_3595 * _3480.z) + _3420;
                        if (_3425 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3418 = _3345;
                            _3419 = _3346;
                            _3420 = _3347;
                            _3421 = _3348;
                            _3422 = _3349;
                            _3423 = _3350;
                            _3424 = _3425;
                        }
                    }
                    frontier_phi_73_pred = _3350;
                    frontier_phi_73_pred_1 = _3349;
                    frontier_phi_73_pred_2 = _3348;
                    frontier_phi_73_pred_3 = _3347;
                    frontier_phi_73_pred_4 = _3346;
                    frontier_phi_73_pred_5 = _3345;
                }
                _3122 = frontier_phi_73_pred;
                _3120 = frontier_phi_73_pred_1;
                _3118 = frontier_phi_73_pred_2;
                _3116 = frontier_phi_73_pred_3;
                _3114 = frontier_phi_73_pred_4;
                _3112 = frontier_phi_73_pred_5;
                uint _3280 = _3279 + 1u;
                if (_3280 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3273 = _3112;
                    _3274 = _3114;
                    _3275 = _3116;
                    _3276 = _3118;
                    _3277 = _3120;
                    _3278 = _3122;
                    _3279 = _3280;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3111 = _3112;
            _3113 = _3114;
            _3115 = _3116;
            _3117 = _3118;
            _3119 = _3120;
            _3121 = _3122;
        }
        uvec4 _3125 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3126 = _3125.z;
        uint _3128 = (_3126 >> 8u) & 15u;
        float _3241;
        float _3243;
        float _3245;
        float _3247;
        float _3249;
        float _3251;
        if (((4294967295u << _3128) & _2996) == 0u)
        {
            _3241 = _3111;
            _3243 = _3113;
            _3245 = _3115;
            _3247 = _3117;
            _3249 = _3119;
            _3251 = _3121;
        }
        else
        {
            float _3266 = inversesqrt(dot(vec3(_2055, _2056, _2057), vec3(_2055, _2056, _2057)));
            float _3267 = _3266 * _2055;
            float _3268 = _3266 * _2056;
            float _3269 = _3266 * _2057;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_3128 < ((_3126 >> 12u) & 15u))
            {
                float _3242;
                float _3244;
                float _3246;
                float _3248;
                float _3250;
                float _3252;
                float _3401 = _3111;
                float _3402 = _3113;
                float _3403 = _3115;
                float _3404 = _3117;
                float _3405 = _3119;
                float _3406 = _3121;
                uint _3407 = _3128;
                uint _3416;
                bool _3417;
                for (;;)
                {
                    _3416 = texelFetch(g_lightClassification, int((((_2990 << 5u) + (_2976 << 9u)) + (_3407 << 2u)) >> 2u)).x;
                    _3417 = _3416 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3417)
                    {
                        frontier_phi_84_pred = _3406;
                        frontier_phi_84_pred_1 = _3405;
                        frontier_phi_84_pred_2 = _3404;
                        frontier_phi_84_pred_3 = _3403;
                        frontier_phi_84_pred_4 = _3402;
                        frontier_phi_84_pred_5 = _3401;
                    }
                    else
                    {
                        float _3609;
                        float _3610;
                        float _3611;
                        float _3612;
                        float _3613;
                        float _3614;
                        float _3902;
                        float _3903;
                        float _3904;
                        float _3905;
                        float _3906;
                        float _3907;
                        float _3622 = _3401;
                        float _3623 = _3402;
                        float _3624 = _3403;
                        float _3625 = _3404;
                        float _3626 = _3405;
                        float _3627 = _3406;
                        uint _3628 = _3416;
                        uint _3629;
                        vec4 _3654;
                        float _3655;
                        vec4 _3670;
                        vec3 _3682;
                        vec4 _3697;
                        vec4 _3712;
                        float _3758;
                        bool _3759;
                        for (;;)
                        {
                            uint _3639 = ((_3407 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3628));
                            _3629 = (_3628 + 4294967295u) & _3628;
                            uint _3641 = _3639 * 40u;
                            _3654 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3641)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3641 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3641 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3641 + 3u)).x));
                            _3655 = _3654.w;
                            uint _3657 = (_3639 * 40u) + 4u;
                            _3670 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3657)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3657 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3657 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3657 + 3u)).x));
                            uint _3672 = (_3639 * 40u) + 8u;
                            _3682 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3672)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3672 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3672 + 2u)).x));
                            uint _3684 = (_3639 * 40u) + 16u;
                            _3697 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3684)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3684 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3684 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3684 + 3u)).x));
                            uint _3699 = (_3639 * 40u) + 20u;
                            _3712 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3699)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3699 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3699 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3699 + 3u)).x));
                            uint _3714 = (_3639 * 40u) + 24u;
                            vec4 _3727 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3714)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3714 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3714 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3714 + 3u)).x));
                            uint _3733 = (_3639 * 40u) + 28u;
                            vec4 _3746 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3733)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3733 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3733 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3733 + 3u)).x));
                            _3758 = fma(_2057, _3746.z, fma(_2056, _3746.y, _3746.x * _2055)) + _3746.w;
                            _3759 = !((fma(_2057, _3727.z, fma(_2056, _3727.y, _3727.x * _2055)) + _3727.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3759)
                            {
                                float _3786 = _3654.x - _2055;
                                float _3787 = _3654.y - _2056;
                                float _3788 = _3654.z - _2057;
                                float _3789 = dot(vec3(_3786, _3787, _3788), vec3(_3786, _3787, _3788));
                                float _3792 = inversesqrt(_3789);
                                float _3793 = _3792 * _3786;
                                float _3794 = _3792 * _3787;
                                float _3795 = _3792 * _3788;
                                float _3799 = 1.0 - (_3789 / (_3655 * _3655));
                                float _4985 = isnan(0.0) ? _3799 : (isnan(_3799) ? 0.0 : max(_3799, 0.0));
                                float _3800 = isnan(1.0) ? _4985 : (isnan(_4985) ? 1.0 : min(_4985, 1.0));
                                float _3804 = sqrt(_3789) * _3670.w;
                                float _3806 = 1.39999997615814208984375 / (_3804 + 1.39999997615814208984375);
                                float _3807 = _3806 * _3806;
                                float _3810 = ((1.0 - _3807) * dot(vec3(_3793, _3794, _3795), vec3(_896, _899, _902))) + _3807;
                                float _3813 = _3804 * _3804;
                                float _3817 = (fma(_2057, _3697.z, fma(_2056, _3697.y, _3697.x * _2055)) + _3697.w) / _3758;
                                float _3818 = (fma(_2057, _3712.z, fma(_2056, _3712.y, _3712.x * _2055)) + _3712.w) / _3758;
                                float _3822 = 1.0 - dot(vec2(_3817, _3818), vec2(_3817, _3818));
                                float _5001 = isnan(0.0) ? _3822 : (isnan(_3822) ? 0.0 : max(_3822, 0.0));
                                float _3823 = isnan(1.0) ? _5001 : (isnan(_5001) ? 1.0 : min(_5001, 1.0));
                                float _3824 = _3823 * (((isnan(0.0) ? _3810 : (isnan(_3810) ? 0.0 : max(_3810, 0.0))) * _3800) / ((_3813 * 0.699999988079071044921875) + 1.0));
                                float _3836 = exp2(log2(1.0 / ((_3813 * 3.5) + 5.0)) * 0.25);
                                float _3837 = 1.0 - _971;
                                float _3844 = sqrt(1.0 - ((1.0 - (_3837 * _3837)) * (1.0 - (_3836 * _3836))));
                                float _3845 = _3844 * _3844;
                                float _3846 = _3845 * _3845;
                                float _3847 = _3793 - _3267;
                                float _3848 = _3794 - _3268;
                                float _3849 = _3795 - _3269;
                                float _3853 = inversesqrt(dot(vec3(_3847, _3848, _3849), vec3(_3847, _3848, _3849)));
                                float _3857 = dot(vec3(_896, _899, _902), vec3((-0.0) - _3267, (-0.0) - _3268, (-0.0) - _3269));
                                float _5012 = isnan(0.0) ? _3857 : (isnan(_3857) ? 0.0 : max(_3857, 0.0));
                                float _3860 = isnan(1.0) ? _5012 : (isnan(_5012) ? 1.0 : min(_5012, 1.0));
                                float _3861 = dot(vec3(_896, _899, _902), vec3(_3853 * _3847, _3853 * _3848, _3853 * _3849));
                                float _5023 = isnan(0.0) ? _3861 : (isnan(_3861) ? 0.0 : max(_3861, 0.0));
                                float _3864 = isnan(1.0) ? _5023 : (isnan(_5023) ? 1.0 : min(_5023, 1.0));
                                float _3868 = ((_3864 * _3864) * (_3846 + (-1.0))) + 1.0;
                                float _3869 = _3806 * _3845;
                                float _3870 = _3869 * _3869;
                                float _3876 = ((1.0 - _3870) * dot(vec3(_896, _899, _902), vec3(_3793, _3794, _3795))) + _3870;
                                float _5034 = isnan(0.0) ? _3876 : (isnan(_3876) ? 0.0 : max(_3876, 0.0));
                                float _3877 = isnan(1.0) ? _5034 : (isnan(_5034) ? 1.0 : min(_5034, 1.0));
                                float _3878 = 1.0 - _3845;
                                float _3888 = (0.5 / (((_3877 * ((_3860 * _3878) + _3845)) + 9.9999999392252902907785028219223e-09) + (((_3877 * _3878) + _3845) * _3860))) * _3877;
                                float _5045 = isnan(0.0) ? _3888 : (isnan(_3888) ? 0.0 : max(_3888, 0.0));
                                float _3898 = (_3823 * _3800) * (((_3846 * 3.1415927410125732421875) * (isnan(1.0) ? _5045 : (isnan(_5045) ? 1.0 : min(_5045, 1.0)))) / ((_3868 * _3868) * ((_3813 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3824 * _3670.z;
                                frontier_phi_90_pred_1 = _3824 * _3670.y;
                                frontier_phi_90_pred_2 = _3824 * _3670.x;
                                frontier_phi_90_pred_3 = _3898 * _3682.z;
                                frontier_phi_90_pred_4 = _3898 * _3682.y;
                                frontier_phi_90_pred_5 = _3898 * _3682.x;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3907 = frontier_phi_90_pred;
                            _3906 = frontier_phi_90_pred_1;
                            _3905 = frontier_phi_90_pred_2;
                            _3904 = frontier_phi_90_pred_3;
                            _3903 = frontier_phi_90_pred_4;
                            _3902 = frontier_phi_90_pred_5;
                            _3612 = _3905 + _3625;
                            _3613 = _3906 + _3626;
                            _3614 = _3907 + _3627;
                            _3609 = _3902 + _3622;
                            _3610 = _3903 + _3623;
                            _3611 = _3904 + _3624;
                            if (_3629 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3622 = _3609;
                                _3623 = _3610;
                                _3624 = _3611;
                                _3625 = _3612;
                                _3626 = _3613;
                                _3627 = _3614;
                                _3628 = _3629;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3614;
                        frontier_phi_84_pred_1 = _3613;
                        frontier_phi_84_pred_2 = _3612;
                        frontier_phi_84_pred_3 = _3611;
                        frontier_phi_84_pred_4 = _3610;
                        frontier_phi_84_pred_5 = _3609;
                    }
                    _3252 = frontier_phi_84_pred;
                    _3250 = frontier_phi_84_pred_1;
                    _3248 = frontier_phi_84_pred_2;
                    _3246 = frontier_phi_84_pred_3;
                    _3244 = frontier_phi_84_pred_4;
                    _3242 = frontier_phi_84_pred_5;
                    uint _3408 = _3407 + 1u;
                    if (_3408 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3401 = _3242;
                        _3402 = _3244;
                        _3403 = _3246;
                        _3404 = _3248;
                        _3405 = _3250;
                        _3406 = _3252;
                        _3407 = _3408;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _3248;
                frontier_phi_65_66_ladder_1 = _3252;
                frontier_phi_65_66_ladder_2 = _3250;
                frontier_phi_65_66_ladder_3 = _3246;
                frontier_phi_65_66_ladder_4 = _3244;
                frontier_phi_65_66_ladder_5 = _3242;
            }
            else
            {
                frontier_phi_65_66_ladder = _3117;
                frontier_phi_65_66_ladder_1 = _3121;
                frontier_phi_65_66_ladder_2 = _3119;
                frontier_phi_65_66_ladder_3 = _3115;
                frontier_phi_65_66_ladder_4 = _3113;
                frontier_phi_65_66_ladder_5 = _3111;
            }
            _3241 = frontier_phi_65_66_ladder_5;
            _3243 = frontier_phi_65_66_ladder_4;
            _3245 = frontier_phi_65_66_ladder_3;
            _3247 = frontier_phi_65_66_ladder;
            _3249 = frontier_phi_65_66_ladder_2;
            _3251 = frontier_phi_65_66_ladder_1;
        }
        float _3256 = isnan(1.0) ? _955 : (isnan(_955) ? 1.0 : min(_955, 1.0));
        _3009 = (_3256 * _3247) + _2521;
        _3011 = (_3256 * _3249) + _2523;
        _3013 = (_3256 * _3251) + _2525;
        _3015 = ((_3241 * _940) * _3256) + _2859;
        _3017 = ((_3243 * _942) * _3256) + _2861;
        _3019 = ((_3245 * _943) * _3256) + _2863;
    }
    else
    {
        _3009 = _2521;
        _3011 = _2523;
        _3013 = _2525;
        _3015 = _2859;
        _3017 = _2861;
        _3019 = _2863;
    }
    uint _3025 = _916 + uint(cbMatDynParam._m0[0u].w);
    float _3033 = ((cbMtdParam._m0[20u].x * cbMtdParam._m0[25u].x) * _706.x) * cbInstanceData._m0[_3025].x;
    float _3036 = ((cbMtdParam._m0[20u].y * cbMtdParam._m0[25u].x) * _706.y) * cbInstanceData._m0[_3025].y;
    float _3039 = ((cbMtdParam._m0[20u].z * cbMtdParam._m0[25u].x) * _706.z) * cbInstanceData._m0[_3025].z;
    float _5061 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
    float _5072 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
    float _5083 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
    float _3056 = (((isnan(1.0) ? _5061 : (isnan(_5061) ? 1.0 : min(_5061, 1.0))) * (_3009 + ((isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0))) * _955))) + ((_3015 + ((isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0))) * _1789)) * cbPerFrame._m0[3u].x)) + _3033;
    float _3058 = (_3036 + ((_3017 + ((isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0))) * _1789)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5072 : (isnan(_5072) ? 1.0 : min(_5072, 1.0))) * (_3011 + ((isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0))) * _955)));
    float _3060 = (_3039 + ((_3019 + ((isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0))) * _1789)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5083 : (isnan(_5083) ? 1.0 : min(_5083, 1.0))) * (_3013 + ((isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0))) * _955)));
    float _3061 = isnan(0.0) ? _3056 : (isnan(_3056) ? 0.0 : max(_3056, 0.0));
    float _3062 = isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : max(_3058, 0.0));
    float _3063 = isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : max(_3060, 0.0));
    float _3069 = cbMtdParam._m0[2u].x * _3033;
    float _3070 = cbMtdParam._m0[2u].y * _3036;
    float _3071 = cbMtdParam._m0[2u].z * _3039;
    float _5109 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _3073 = isnan(1.0) ? _5109 : (isnan(_5109) ? 1.0 : min(_5109, 1.0));
    uint _3074 = _915 + 6u;
    float _3082 = _877 / cbSceneParam._m0[86u].x;
    float _3083 = _878 / cbSceneParam._m0[86u].y;
    vec4 _3097 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3082, _3083, (log2((isnan(cbSceneParam._m0[77u].w) ? _803 : (isnan(_803) ? cbSceneParam._m0[77u].w : min(_803, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3099 = _3097.x;
    float _3100 = _3097.y;
    float _3101 = _3097.z;
    float _3102 = _3097.w;
    float _3174;
    float _3176;
    float _3178;
    float _3180;
    if (_803 > cbSceneParam._m0[78u].w)
    {
        float _3136 = isnan(_803) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _803 : min(cbSceneParam._m0[80u].w, _803));
        float _3137 = _3136 / _803;
        float _3148 = _3137 * _853;
        float _3149 = _854 * _3137;
        float _3150 = (-0.0) - _3149;
        float _3152 = _3137 * _855;
        float _3154 = (cbSceneParam._m0[77u].w * _3150) / _3136;
        float _3155 = _3154 + cbSceneParam._m0[79u].w;
        float _3156 = cbSceneParam._m0[79u].w - _3149;
        float _3162 = sqrt(((_3148 * _3148) + (_3149 * _3149)) + (_3152 * _3152));
        float _3165 = (1.0 - (cbSceneParam._m0[77u].w / _3136)) * _3162;
        float _3170 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3172 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3358;
        if (abs((_3150 - _3154) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3358 = ((((_3155 > 0.0) ? exp2(_3170 * _3155) : (2.0 - exp2(_3172 * _3155))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3165;
        }
        else
        {
            float _3302 = 1.0 / cbSceneParam._m0[80u].x;
            float _3303 = isnan(_3156) ? _3155 : (isnan(_3155) ? _3156 : max(_3155, _3156));
            float _3304 = isnan(_3156) ? _3155 : (isnan(_3155) ? _3156 : min(_3155, _3156));
            float _3313 = isnan(0.0) ? _3303 : (isnan(_3303) ? 0.0 : min(_3303, 0.0));
            float _3314 = isnan(0.0) ? _3304 : (isnan(_3304) ? 0.0 : min(_3304, 0.0));
            _3358 = ((abs(_3162 / _3150) * cbSceneParam._m0[80u].y) * ((((_3313 - _3314) * 2.0) - ((exp2(_3170 * (isnan(0.0) ? _3303 : (isnan(_3303) ? 0.0 : max(_3303, 0.0)))) - exp2(_3170 * (isnan(0.0) ? _3304 : (isnan(_3304) ? 0.0 : max(_3304, 0.0))))) * _3302)) - ((exp2(_3172 * _3313) - exp2(_3172 * _3314)) * _3302))) + (_3165 * cbSceneParam._m0[80u].z);
        }
        vec4 _3360 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3082, _3083, 1.0), 0.0);
        float _3369 = exp2((_3358 * (-1.44269502162933349609375)) * (1.0 - _3360.w));
        float _3370 = log2(_3369);
        float _3386 = log2(_3102);
        _3174 = (exp2(_3386 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3370 * cbSceneParam._m0[78u].x)) * _3360.x) / cbSceneParam._m0[78u].x)) + _3099;
        _3176 = (exp2(_3386 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3370 * cbSceneParam._m0[78u].y)) * _3360.y) / cbSceneParam._m0[78u].y)) + _3100;
        _3178 = (exp2(_3386 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3370 * cbSceneParam._m0[78u].z)) * _3360.z) / cbSceneParam._m0[78u].z)) + _3101;
        _3180 = _3369 * _3102;
    }
    else
    {
        _3174 = _3099;
        _3176 = _3100;
        _3178 = _3101;
        _3180 = _3102;
    }
    bool _3396;
    vec4 _3190;
    vec4 _3212;
    float _3214;
    float _3218;
    float _3219;
    float _3220;
    float _3223;
    float _3226;
    float _3229;
    float _3230;
    bool _3240;
    for (;;)
    {
        _3190 = cbMatDynParam._m0[0u];
        float _3192 = roundEven(_3190.y);
        bool _3193 = _3192 == 3.0;
        float _3194 = log2(_3180);
        float _3198 = exp2(_3194 * cbSceneParam._m0[78u].x);
        float _3199 = exp2(_3194 * cbSceneParam._m0[78u].y);
        float _3200 = exp2(_3194 * cbSceneParam._m0[78u].z);
        float _3201 = _3198 * _3061;
        float _3202 = _3199 * _3062;
        float _3203 = _3200 * _3063;
        float _3210 = _866 + (-0.5);
        _3212 = cbMtdParam._m0[1u];
        _3214 = _3212.y * _3210;
        float _3217 = (_3192 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3218 = _3217 * (_3193 ? _3201 : (_3201 + (cbSceneParam._m0[72u].w * _3174)));
        _3219 = _3217 * (_3193 ? _3202 : (_3202 + (cbSceneParam._m0[72u].w * _3176)));
        _3220 = _3217 * (_3193 ? _3203 : (_3203 + (cbSceneParam._m0[72u].w * _3178)));
        _3223 = ((_3069 * _3073) * _3198) * _3217;
        _3226 = ((_3070 * _3073) * _3199) * _3217;
        _3229 = ((_3071 * _3073) * _3200) * _3217;
        _3230 = _3210 * 0.999000012874603271484375;
        _3240 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3240)
        {
            if ((cbInstanceData._m0[_915 + 7u].x + _3230) < 0.5)
            {
                _3396 = true;
                break;
            }
        }
        uint _3337 = _916 + uint(_3190.w);
        if ((cbInstanceData._m0[_3337].w < 1.0) && ((cbInstanceData._m0[_3337].w + _3230) < 0.5))
        {
            _3396 = true;
            break;
        }
        if ((_3214 + 1.0) < _3212.x)
        {
            _3396 = true;
            break;
        }
        _3396 = false;
        break;
    }
    float _3600;
    if (_3396)
    {
        discard_state = true;
        _3600 = 0.0;
    }
    else
    {
        _3600 = cbInstanceData._m0[_3074].w;
    }
    SV_Target.x = _3218;
    SV_Target.y = _3219;
    SV_Target.z = _3220;
    SV_Target.w = _3600;
    SV_Target_1.x = _3223;
    SV_Target_1.y = _3226;
    SV_Target_1.z = _3229;
    SV_Target_1.w = cbInstanceData._m0[_3074].w;
    discard_exit();
}


