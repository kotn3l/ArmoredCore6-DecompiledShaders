#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[29];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 12) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_14;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_16;
layout(set = 0, binding = 4) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_17;
layout(set = 0, binding = 5) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_18;
layout(set = 0, binding = 6) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 9) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2DArray C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_0;
layout(set = 0, binding = 14) uniform texture2DArray C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1464;
float _3911;
float _3912;
float _3913;
float _3914;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _221 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _222 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _223 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _229 = inversesqrt(dot(vec3(_221, _222, _223), vec3(_221, _222, _223)));
    float _236 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _243 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _264 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_1) + cbTextureTilingScale._m0[5u].w));
    vec4 _283 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_1) + cbTextureTilingScale._m0[10u].w));
    float _296 = exp2(log2(_283.w * cbMtdParam._m0[25u].z) * cbMtdParam._m0[22u].x);
    float _297 = isnan(0.0) ? _296 : (isnan(_296) ? 0.0 : max(_296, 0.0));
    float _298 = isnan(1.0) ? _297 : (isnan(_297) ? 1.0 : min(_297, 1.0));
    vec4 _312 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _316 = _312.z;
    float _325 = exp2(log2(_316 * cbMtdParam._m0[22u].y) * cbMtdParam._m0[21u].y);
    float _326 = isnan(0.0) ? _325 : (isnan(_325) ? 0.0 : max(_325, 0.0));
    float _327 = isnan(1.0) ? _326 : (isnan(_326) ? 1.0 : min(_326, 1.0));
    vec4 _339 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _342 = _339.y;
    float _345 = (_339.x + (-0.02500000037252902984619140625)) * 8.0;
    float _349 = roundEven(5.0 - _345);
    float _350 = isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : max(_349, 0.0));
    float _351 = isnan(4.0) ? _350 : (isnan(_350) ? 4.0 : min(_350, 4.0));
    float _364 = floor(_351);
    vec4 _367 = texture(sampler2DArray(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w, _364));
    float _199[6];
    float _200[6];
    float _201[6];
    _199[0u] = cbMtdParam._m0[17u].x;
    _200[0u] = cbMtdParam._m0[17u].y;
    _201[0u] = cbMtdParam._m0[17u].z;
    _199[1u] = cbMtdParam._m0[15u].x;
    _200[1u] = cbMtdParam._m0[15u].y;
    _201[1u] = cbMtdParam._m0[15u].z;
    _199[2u] = cbMtdParam._m0[14u].x;
    _200[2u] = cbMtdParam._m0[14u].y;
    _201[2u] = cbMtdParam._m0[14u].z;
    _199[3u] = cbMtdParam._m0[13u].x;
    _200[3u] = cbMtdParam._m0[13u].y;
    _201[3u] = cbMtdParam._m0[13u].z;
    _199[4u] = cbMtdParam._m0[12u].x;
    _200[4u] = cbMtdParam._m0[12u].y;
    _201[4u] = cbMtdParam._m0[12u].z;
    _199[5u] = cbMtdParam._m0[18u].x;
    _200[5u] = cbMtdParam._m0[18u].y;
    _201[5u] = cbMtdParam._m0[18u].z;
    float _431 = roundEven(_345);
    float _432 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    uint _434 = uint(int(isnan(5.0) ? _432 : (isnan(_432) ? 5.0 : min(_432, 5.0))));
    vec4 _464 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _475 = cbMtdParam._m0[9u].x * _464.x;
    float _476 = cbMtdParam._m0[9u].y * _464.y;
    float _477 = cbMtdParam._m0[9u].z * _464.z;
    float _484 = ((((((_199[_434] - cbMtdParam._m0[10u].x) * _342) + cbMtdParam._m0[10u].x) * _367.x) - _475) * _327) + _475;
    float _485 = ((((((_200[_434] - cbMtdParam._m0[10u].y) * _342) + cbMtdParam._m0[10u].y) * _367.y) - _476) * _327) + _476;
    float _486 = ((((((_201[_434] - cbMtdParam._m0[10u].z) * _342) + cbMtdParam._m0[10u].z) * _367.z) - _477) * _327) + _477;
    float _492 = exp2(log2(_312.w) * cbMtdParam._m0[22u].w);
    vec4 _505 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _525 = (((cbMtdParam._m0[16u].x * _505.x) - _484) * _492) + _484;
    float _526 = (((cbMtdParam._m0[16u].y * _505.y) - _485) * _492) + _485;
    float _527 = (((cbMtdParam._m0[16u].z * _505.z) - _486) * _492) + _486;
    vec4 _540 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _565 = (_283.x * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].x * _540.x) - _525) * _298) + _525);
    float _567 = (_283.y * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].y * _540.y) - _526) * _298) + _526);
    float _569 = (_283.z * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].z * _540.z) - _527) * _298) + _527);
    vec4 _581 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_17, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w));
    float _600 = TEXCOORD_3.x - ((cbMtdParam._m0[23u].x * (1.0 - TEXCOORD_3.x)) * (_264.x + 0.00999999977648258209228515625));
    float _602 = _600 * (cbMtdParam._m0[23u].z + 1.0);
    float _3963 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _603 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
    float _610 = (_603 * ((cbMtdParam._m0[11u].x * _581.x) - _565)) + _565;
    float _611 = (((cbMtdParam._m0[11u].y * _581.y) - _567) * _603) + _567;
    float _612 = (((cbMtdParam._m0[11u].z * _581.z) - _569) * _603) + _569;
    float _194[5];
    float _195[5];
    _194[0u] = cbMtdParam._m0[25u].w;
    _195[0u] = cbMtdParam._m0[26u].x;
    _194[1u] = cbMtdParam._m0[27u].w;
    _195[1u] = cbMtdParam._m0[28u].x;
    _194[2u] = cbMtdParam._m0[27u].y;
    _195[2u] = cbMtdParam._m0[27u].z;
    _194[3u] = cbMtdParam._m0[26u].w;
    _195[3u] = cbMtdParam._m0[27u].x;
    _194[4u] = cbMtdParam._m0[26u].y;
    _195[4u] = cbMtdParam._m0[26u].z;
    float _650 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    uint _652 = uint(int(isnan(4.0) ? _650 : (isnan(_650) ? 4.0 : min(_650, 4.0))));
    float _659 = ((_195[_652] - cbMtdParam._m0[21u].z) * _327) + cbMtdParam._m0[21u].z;
    float _662 = ((cbMtdParam._m0[21u].w - _659) * _492) + _659;
    float _665 = ((cbMtdParam._m0[24u].y - _662) * _298) + _662;
    float _670 = (cbMtdParam._m0[23u].y + 1.0) * _600;
    float _3984 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _671 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
    float _673 = _665 - (_665 * _671);
    vec4 _686 = texture(sampler2DArray(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w, _364));
    vec4 _703 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _705 = _703.x;
    float _706 = _703.y;
    float _711 = cbMtdParam._m0[21u].x + _703.z;
    float _714 = (((_686.z + _194[_652]) - _711) * _327) + _711;
    vec4 _726 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_1) + cbTextureTilingScale._m0[11u].w));
    float _737 = (((_726.z - _714) + cbMtdParam._m0[25u].y) * _492) + _714;
    float _743 = ((((_316 * 2.0) * _737) - _737) * cbMtdParam._m0[23u].w) + _737;
    vec4 _755 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_1) + cbTextureTilingScale._m0[12u].w));
    float _766 = (((cbMtdParam._m0[22u].z + _755.z) - _743) * _298) + _743;
    vec4 _778 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _790 = ((_778.z - _766) * _671) + _766;
    vec4 _809 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _828 = ((_686.x - _705) * _327) + _705;
    float _829 = ((_686.y - _706) * _327) + _706;
    float _834 = ((_726.x - _828) * _492) + _828;
    float _835 = ((_726.y - _829) * _492) + _829;
    float _844 = ((((_755.x - _834) * _298) + _834) * 2.0) + (-1.0);
    float _845 = ((((_755.y - _835) * _298) + _835) * 2.0) + (-1.0);
    float _846 = dot(vec2(_844, _845), vec2(_844, _845));
    float _3995 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
    float _851 = sqrt(1.0 - (isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0))));
    float _860 = ((cbMtdParam._m0[24u].z * ((_312.x * 2.0) + (-1.0))) + _844) + (((((_778.x * 2.0) + (-1.0)) * TEXCOORD_3.x) * cbMtdParam._m0[24u].w) * _671);
    float _861 = ((cbMtdParam._m0[24u].z * ((_312.y * 2.0) + (-1.0))) + _845) + (((((_778.y * 2.0) + (-1.0)) * TEXCOORD_3.y) * cbMtdParam._m0[24u].w) * _671);
    float _863 = gl_FragCoord.x * 0.125;
    float _865 = gl_FragCoord.y * 0.125;
    float _875 = fma(_851, _236 * NORMAL.x, fma(_861, _243 * TANGENT.x, (_229 * _221) * _860));
    float _878 = fma(_851, _236 * NORMAL.y, fma(_861, _243 * TANGENT.y, (_229 * _222) * _860));
    float _881 = fma(_851, _236 * NORMAL.z, fma(_861, _243 * TANGENT.z, (_229 * _223) * _860));
    float _885 = inversesqrt(dot(vec3(_875, _878, _881), vec3(_875, _878, _881)));
    float _886 = _885 * _875;
    float _887 = _885 * _878;
    float _888 = _885 * _881;
    float _4006 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    float _889 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
    float _4017 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _4028 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _4039 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _4050 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _893 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
    if (!(cbMtdParam._m0[24u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_863, _865)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _913 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _953 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _963 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _953);
    float _964 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _953);
    float _965 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _953);
    float _969 = inversesqrt(dot(vec3(_963, _964, _965), vec3(_963, _964, _965)));
    float _970 = _963 * _969;
    float _971 = _964 * _969;
    float _972 = _965 * _969;
    vec4 _974 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_863, _865));
    float _976 = _974.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1146 = sqrt(((_963 * _963) + (_964 * _964)) + (_965 * _965));
        float _1152 = (cbMatDynParam._m0[5u].x * _1146) + cbMatDynParam._m0[5u].y;
        float _4061 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1153 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
        float _1157 = (cbMatDynParam._m0[5u].z * _1146) + cbMatDynParam._m0[5u].w;
        float _4072 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0))) - _1153)) + _1153) < ((_976 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _987 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _988 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1006 = fma(_888, cbSceneParam._m0[5u].z, fma(_887, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _886));
    float _1009 = fma(_888, cbSceneParam._m0[6u].z, fma(_887, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _886));
    float _1012 = fma(_888, cbSceneParam._m0[7u].z, fma(_887, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _886));
    uint _1025 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1026 = _1025 + 9u;
    uint _1027 = _1026 + uint(cbMatDynParam._m0[0u].w);
    float _1033 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0)))) * cbInstanceData._m0[_1027].x;
    float _1034 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0)))) * cbInstanceData._m0[_1027].y;
    float _1035 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0)))) * cbInstanceData._m0[_1027].z;
    float _4083 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
    float _1036 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
    float _4094 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
    float _1037 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
    float _4105 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
    float _1038 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
    float _1039 = 1.0 - _893;
    float _1040 = _1036 * _1039;
    float _1041 = _1037 * _1039;
    float _1042 = _1038 * _1039;
    float _1047 = (_1036 + (-0.039999999105930328369140625)) * _893;
    float _1048 = (_1037 + (-0.039999999105930328369140625)) * _893;
    float _1049 = (_1038 + (-0.039999999105930328369140625)) * _893;
    float _1050 = _1047 + 0.039999999105930328369140625;
    float _1052 = _1048 + 0.039999999105930328369140625;
    float _1053 = _1049 + 0.039999999105930328369140625;
    vec4 _1062 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _987, cbSceneParam._m0[86u].y * _988));
    float _1065 = _1062.x * TEXCOORD_3.w;
    float _1066 = dot(vec3(_886, _887, _888), vec3(_970, _971, _972));
    float _1069 = _1066 * 2.0;
    float _1073 = (_1069 * _886) - _970;
    float _1074 = (_1069 * _887) - _971;
    float _1075 = (_1069 * _888) - _972;
    float _1079 = abs(dot(vec3(_970, _971, _972), vec3(_886, _887, _888)));
    float _4116 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
    float _1081 = sqrt(_889);
    float _1092 = exp2((_1081 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1081 * 3.0));
    float _1098 = (1.0 - _1092) * ((_1081 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1099 = _1092 * _1081;
    float _1127 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1131 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1135 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1463;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1188 = fma(_1135, cbModelParam._m0[26u].z, fma(_1131, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1127));
        float _1192 = fma(_1135, cbModelParam._m0[27u].z, fma(_1131, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1127));
        float _1196 = fma(_1135, cbModelParam._m0[28u].z, fma(_1131, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1127));
        float _1221 = _1127 + _886;
        float _1222 = _1131 + _887;
        float _1223 = _1135 + _888;
        float _1233 = fma(_1223, cbModelParam._m0[26u].z, fma(_1222, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1221)) - _1188;
        float _1234 = fma(_1223, cbModelParam._m0[27u].z, fma(_1222, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1221)) - _1192;
        float _1235 = fma(_1223, cbModelParam._m0[28u].z, fma(_1222, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1221)) - _1196;
        float _1239 = inversesqrt(dot(vec3(_1233, _1234, _1235), vec3(_1233, _1234, _1235)));
        float _1252 = ((_1239 * _1233) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1188 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1253 = ((_1239 * _1234) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1192 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1254 = ((_1239 * _1235) / cbModelParam._m0[34u].z) + ((((((_1196 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1257 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1252, _1253, _1254), 0.0);
        vec4 _1264 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1252, _1253, _1254), 0.0);
        vec4 _1271 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1252, _1253, _1254), 0.0);
        vec4 _1278 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1252, _1253, _1254), 0.0);
        float _1291 = exp2((_1257.w + (-0.5)) * 20.0) * 2.0;
        float _1292 = _1291 * (_1257.x + (-0.5));
        float _1293 = _1291 * (_1257.y + (-0.5));
        float _1294 = _1291 * (_1257.z + (-0.5));
        float _1301 = exp2((_1264.w + (-0.5)) * 20.0) * 2.0;
        float _1302 = _1301 * (_1264.x + (-0.5));
        float _1303 = _1301 * (_1264.y + (-0.5));
        float _1304 = _1301 * (_1264.z + (-0.5));
        float _1311 = exp2((_1271.w + (-0.5)) * 20.0) * 2.0;
        float _1312 = _1311 * (_1271.x + (-0.5));
        float _1313 = _1311 * (_1271.y + (-0.5));
        float _1314 = _1311 * (_1271.z + (-0.5));
        float _1321 = exp2((_1278.w + (-0.5)) * 20.0) * 2.0;
        float _1322 = _1321 * (_1278.x + (-0.5));
        float _1323 = _1321 * (_1278.y + (-0.5));
        float _1324 = _1321 * (_1278.z + (-0.5));
        float _1325 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1326 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1327 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1328 = _1292 * 0.5;
        float _1329 = _1302 * 0.5;
        float _1330 = _1312 * 0.5;
        float _1331 = dot(vec3(_1328, _1329, _1330), vec3(_1328, _1329, _1330));
        float _1336 = (_1331 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1331);
        float _1345 = (dot(vec3(_886, _887, _888), vec3(_1336 * _1328, _1336 * _1329, _1336 * _1330)) + 1.0) * 0.5;
        float _4142 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1355 = sqrt(((_1329 * _1329) + (_1328 * _1328)) + (_1330 * _1330)) / (_1325 + 9.9999997473787516355514526367188e-06);
        float _4153 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1356 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
        float _1357 = _1356 * 2.0;
        float _1361 = (1.0 - _1356) / (_1356 + 1.0);
        float _4164 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1362 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
        float _1371 = ((((1.0 - _1362) * (_1357 + 2.0)) * exp2(log2(isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0))) * (_1357 + 1.0))) + _1362) * _1325;
        float _1372 = _1293 * 0.5;
        float _1373 = _1303 * 0.5;
        float _1374 = _1313 * 0.5;
        float _1375 = dot(vec3(_1372, _1373, _1374), vec3(_1372, _1373, _1374));
        float _1380 = (_1375 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1375);
        float _1388 = (dot(vec3(_886, _887, _888), vec3(_1380 * _1372, _1380 * _1373, _1380 * _1374)) + 1.0) * 0.5;
        float _4175 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1397 = sqrt(((_1373 * _1373) + (_1372 * _1372)) + (_1374 * _1374)) / (_1326 + 9.9999997473787516355514526367188e-06);
        float _4186 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1398 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
        float _1399 = _1398 * 2.0;
        float _1403 = (1.0 - _1398) / (_1398 + 1.0);
        float _4197 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1404 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
        float _1413 = ((((1.0 - _1404) * (_1399 + 2.0)) * exp2(log2(isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0))) * (_1399 + 1.0))) + _1404) * _1326;
        float _1414 = _1294 * 0.5;
        float _1415 = _1304 * 0.5;
        float _1416 = _1314 * 0.5;
        float _1417 = dot(vec3(_1414, _1415, _1416), vec3(_1414, _1415, _1416));
        float _1422 = (_1417 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1417);
        float _1430 = (dot(vec3(_886, _887, _888), vec3(_1422 * _1414, _1422 * _1415, _1422 * _1416)) + 1.0) * 0.5;
        float _4208 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1439 = sqrt(((_1415 * _1415) + (_1414 * _1414)) + (_1416 * _1416)) / (_1327 + 9.9999997473787516355514526367188e-06);
        float _4219 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1440 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
        float _1441 = _1440 * 2.0;
        float _1445 = (1.0 - _1440) / (_1440 + 1.0);
        float _4230 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1446 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
        float _1455 = ((((1.0 - _1446) * (_1441 + 2.0)) * exp2(log2(isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0))) * (_1441 + 1.0))) + _1446) * _1327;
        _1463 = _1294;
        _1465 = _1293;
        _1466 = _1292;
        _1467 = _1304;
        _1468 = _1303;
        _1469 = _1302;
        _1470 = _1314;
        _1471 = _1313;
        _1472 = _1312;
        _1473 = _1327;
        _1474 = _1326;
        _1475 = _1325;
        _1476 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0)));
        _1477 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0)));
        _1478 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0)));
    }
    else
    {
        _1463 = _1464;
        _1465 = _1464;
        _1466 = _1464;
        _1467 = _1464;
        _1468 = _1464;
        _1469 = _1464;
        _1470 = _1464;
        _1471 = _1464;
        _1472 = _1464;
        _1473 = _1464;
        _1474 = _1464;
        _1475 = _1464;
        _1476 = 0.0;
        _1477 = 0.0;
        _1478 = 0.0;
    }
    float _1773;
    float _1774;
    float _1775;
    float _1776;
    float _1777;
    float _1778;
    float _1779;
    float _1780;
    float _1781;
    float _1782;
    float _1783;
    float _1784;
    float _1785;
    float _1786;
    float _1787;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1504 = fma(_1135, cbModelParam._m0[30u].z, fma(_1131, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1127));
        float _1508 = fma(_1135, cbModelParam._m0[31u].z, fma(_1131, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1127));
        float _1512 = fma(_1135, cbModelParam._m0[32u].z, fma(_1131, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1127));
        float _1535 = _1127 + _886;
        float _1536 = _1131 + _887;
        float _1537 = _1135 + _888;
        float _1547 = fma(_1537, cbModelParam._m0[30u].z, fma(_1536, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1535)) - _1504;
        float _1548 = fma(_1537, cbModelParam._m0[31u].z, fma(_1536, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1535)) - _1508;
        float _1549 = fma(_1537, cbModelParam._m0[32u].z, fma(_1536, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1535)) - _1512;
        float _1553 = inversesqrt(dot(vec3(_1547, _1548, _1549), vec3(_1547, _1548, _1549)));
        float _1566 = ((_1553 * _1547) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1504 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1567 = ((_1553 * _1548) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1508 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1568 = ((_1553 * _1549) / cbModelParam._m0[35u].z) + ((((((_1512 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1570 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1566, _1567, _1568), 0.0);
        vec4 _1577 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1566, _1567, _1568), 0.0);
        vec4 _1584 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1566, _1567, _1568), 0.0);
        vec4 _1591 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1566, _1567, _1568), 0.0);
        float _1603 = exp2((_1570.w + (-0.5)) * 20.0) * 2.0;
        float _1604 = _1603 * (_1570.x + (-0.5));
        float _1605 = _1603 * (_1570.y + (-0.5));
        float _1606 = _1603 * (_1570.z + (-0.5));
        float _1613 = exp2((_1577.w + (-0.5)) * 20.0) * 2.0;
        float _1614 = _1613 * (_1577.x + (-0.5));
        float _1615 = _1613 * (_1577.y + (-0.5));
        float _1616 = _1613 * (_1577.z + (-0.5));
        float _1623 = exp2((_1584.w + (-0.5)) * 20.0) * 2.0;
        float _1624 = _1623 * (_1584.x + (-0.5));
        float _1625 = _1623 * (_1584.y + (-0.5));
        float _1626 = _1623 * (_1584.z + (-0.5));
        float _1633 = exp2((_1591.w + (-0.5)) * 20.0) * 2.0;
        float _1634 = _1633 * (_1591.x + (-0.5));
        float _1635 = _1633 * (_1591.y + (-0.5));
        float _1636 = _1633 * (_1591.z + (-0.5));
        float _1637 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
        float _1638 = isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0));
        float _1639 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
        float _1640 = _1604 * 0.5;
        float _1641 = _1614 * 0.5;
        float _1642 = _1624 * 0.5;
        float _1643 = dot(vec3(_1640, _1641, _1642), vec3(_1640, _1641, _1642));
        float _1648 = (_1643 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1643);
        float _1656 = (dot(vec3(_886, _887, _888), vec3(_1648 * _1640, _1648 * _1641, _1648 * _1642)) + 1.0) * 0.5;
        float _4271 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
        float _1665 = sqrt(((_1641 * _1641) + (_1640 * _1640)) + (_1642 * _1642)) / (_1637 + 9.9999997473787516355514526367188e-06);
        float _4282 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
        float _1666 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
        float _1667 = _1666 * 2.0;
        float _1671 = (1.0 - _1666) / (_1666 + 1.0);
        float _4293 = isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0));
        float _1672 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
        float _1681 = ((((1.0 - _1672) * (_1667 + 2.0)) * exp2(log2(isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0))) * (_1667 + 1.0))) + _1672) * _1637;
        float _1682 = _1605 * 0.5;
        float _1683 = _1615 * 0.5;
        float _1684 = _1625 * 0.5;
        float _1685 = dot(vec3(_1682, _1683, _1684), vec3(_1682, _1683, _1684));
        float _1690 = (_1685 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1685);
        float _1698 = (dot(vec3(_886, _887, _888), vec3(_1690 * _1682, _1690 * _1683, _1690 * _1684)) + 1.0) * 0.5;
        float _4304 = isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0));
        float _1707 = sqrt(((_1683 * _1683) + (_1682 * _1682)) + (_1684 * _1684)) / (_1638 + 9.9999997473787516355514526367188e-06);
        float _4315 = isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0));
        float _1708 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
        float _1709 = _1708 * 2.0;
        float _1713 = (1.0 - _1708) / (_1708 + 1.0);
        float _4326 = isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0));
        float _1714 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
        float _1723 = ((((1.0 - _1714) * (_1709 + 2.0)) * exp2(log2(isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0))) * (_1709 + 1.0))) + _1714) * _1638;
        float _1724 = _1606 * 0.5;
        float _1725 = _1616 * 0.5;
        float _1726 = _1626 * 0.5;
        float _1727 = dot(vec3(_1724, _1725, _1726), vec3(_1724, _1725, _1726));
        float _1732 = (_1727 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1727);
        float _1740 = (dot(vec3(_886, _887, _888), vec3(_1732 * _1724, _1732 * _1725, _1732 * _1726)) + 1.0) * 0.5;
        float _4337 = isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0));
        float _1749 = sqrt(((_1725 * _1725) + (_1724 * _1724)) + (_1726 * _1726)) / (_1639 + 9.9999997473787516355514526367188e-06);
        float _4348 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
        float _1750 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
        float _1751 = _1750 * 2.0;
        float _1755 = (1.0 - _1750) / (_1750 + 1.0);
        float _4359 = isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0));
        float _1756 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
        float _1765 = ((((1.0 - _1756) * (_1751 + 2.0)) * exp2(log2(isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0))) * (_1751 + 1.0))) + _1756) * _1639;
        _1773 = _1606;
        _1774 = _1605;
        _1775 = _1604;
        _1776 = _1616;
        _1777 = _1615;
        _1778 = _1614;
        _1779 = _1626;
        _1780 = _1625;
        _1781 = _1624;
        _1782 = _1639;
        _1783 = _1638;
        _1784 = _1637;
        _1785 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0)));
        _1786 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0)));
        _1787 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0)));
    }
    else
    {
        _1773 = _1464;
        _1774 = _1464;
        _1775 = _1464;
        _1776 = _1464;
        _1777 = _1464;
        _1778 = _1464;
        _1779 = _1464;
        _1780 = _1464;
        _1781 = _1464;
        _1782 = _1464;
        _1783 = _1464;
        _1784 = _1464;
        _1785 = 0.0;
        _1786 = 0.0;
        _1787 = 0.0;
    }
    float _1797 = (cbModelParam._m0[1u].x * (_1785 - _1476)) + _1476;
    float _1798 = (cbModelParam._m0[1u].x * (_1786 - _1477)) + _1477;
    float _1799 = (cbModelParam._m0[1u].x * (_1787 - _1478)) + _1478;
    float _1820 = fma(_1799, cbSceneParam._m0[89u].z, fma(_1798, cbSceneParam._m0[89u].y, _1797 * cbSceneParam._m0[89u].x));
    float _1823 = fma(_1799, cbSceneParam._m0[90u].z, fma(_1798, cbSceneParam._m0[90u].y, _1797 * cbSceneParam._m0[90u].x));
    float _1826 = fma(_1799, cbSceneParam._m0[91u].z, fma(_1798, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1797));
    float _1841 = _1073 * 0.5;
    float _1842 = _1074 * 0.5;
    float _1843 = _1075 * 0.5;
    float _1844 = dot(vec4(_1841, _1842, _1843, 1.0), vec4(_1775, _1778, _1781, _1784));
    float _1847 = dot(vec4(_1841, _1842, _1843, 1.0), vec4(_1774, _1777, _1780, _1783));
    float _1850 = dot(vec4(_1841, _1842, _1843, 1.0), vec4(_1773, _1776, _1779, _1782));
    float _1884;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1857 = dot(vec4(_1841, _1842, _1843, 1.0), vec4(_1463, _1467, _1470, _1473));
        float _1861 = dot(vec4(_1841, _1842, _1843, 1.0), vec4(_1465, _1468, _1471, _1474));
        float _1865 = dot(vec4(_1841, _1842, _1843, 1.0), vec4(_1466, _1469, _1472, _1475));
        float _1872 = dot(vec4(cbModelParam._m0[39u]), vec4(_1841, _1842, _1843, 1.0));
        _1884 = dot(vec3(isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0)), isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0)), isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1872) ? 0.0 : (isnan(0.0) ? _1872 : max(0.0, _1872))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1884 = 1.0;
    }
    float _1895;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1886 = dot(vec4(cbModelParam._m0[40u]), vec4(_1841, _1842, _1843, 1.0));
        _1895 = dot(vec3(isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0)), isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0)), isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1886) ? 0.0 : (isnan(0.0) ? _1886 : max(0.0, _1886))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1895 = 1.0;
    }
    float _1899 = (_1895 * cbModelParam._m0[1u].x) + (_1884 * (1.0 - cbModelParam._m0[1u].x));
    float _1909 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _889);
    float _1910 = isnan(_1909) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1909 : min(cbModelParam._m0[25u].z, _1909));
    float _1990;
    float _1992;
    float _1994;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1957 = fma(_1135, cbModelParam._m0[13u].z, fma(_1131, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1127)) + cbModelParam._m0[13u].w;
        float _1961 = fma(_1135, cbModelParam._m0[14u].z, fma(_1131, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1127)) + cbModelParam._m0[14u].w;
        float _1965 = fma(_1135, cbModelParam._m0[15u].z, fma(_1131, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1127)) + cbModelParam._m0[15u].w;
        float _1968 = fma(_1075, cbModelParam._m0[13u].z, fma(_1074, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1073));
        float _1971 = fma(_1075, cbModelParam._m0[14u].z, fma(_1074, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1073));
        float _1974 = fma(_1075, cbModelParam._m0[15u].z, fma(_1074, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1073));
        float _2002;
        if (_1968 > 0.0)
        {
            _2002 = abs((1.0 - _1957) / _1968);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1968 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1957 + 1.0) / _1968);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _2002 = frontier_phi_19_17_ladder;
        }
        float _2225;
        if (_1971 > 0.0)
        {
            _2225 = abs((1.0 - _1961) / _1971);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1971 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1961 + 1.0) / _1971);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2225 = frontier_phi_28_24_ladder;
        }
        float _2482;
        if (_1974 > 0.0)
        {
            _2482 = abs((1.0 - _1965) / _1974);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1974 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1965 + 1.0) / _1974);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2482 = frontier_phi_40_35_ladder;
        }
        float _2484 = isnan(_2225) ? _2002 : (isnan(_2002) ? _2225 : min(_2002, _2225));
        float _2485 = isnan(_2482) ? _2484 : (isnan(_2484) ? _2482 : min(_2484, _2482));
        float _2489 = (_2485 * _1968) + _1957;
        float _2490 = (_2485 * _1971) + _1961;
        float _2491 = (_2485 * _1974) + _1965;
        float _2492 = _2485 * 9.9999997473787516355514526367188e-05;
        float _2494 = (-1.0) - _2492;
        float _2496 = _2492 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2491 > _2496) || ((_2491 < _2494) || ((_2490 > _2496) || ((_2490 < _2494) || ((_2489 < _2494) || (_2489 > _2496))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2619 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2491, cbModelParam._m0[9u].z, fma(_2490, cbModelParam._m0[9u].y, _2489 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2491, cbModelParam._m0[10u].z, fma(_2490, cbModelParam._m0[10u].y, _2489 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2491, cbModelParam._m0[11u].z, fma(_2490, cbModelParam._m0[11u].y, _2489 * cbModelParam._m0[11u].x))), _1910);
            frontier_phi_18_40_ladder = _2619.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2619.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2619.x * cbModelParam._m0[1u].y;
        }
        _1990 = frontier_phi_18_40_ladder_2;
        _1992 = frontier_phi_18_40_ladder_1;
        _1994 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1978 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1073, _1074, _1075), _1910);
        _1990 = _1978.x * cbModelParam._m0[1u].y;
        _1992 = _1978.y * cbModelParam._m0[1u].y;
        _1994 = _1978.z * cbModelParam._m0[1u].y;
    }
    float _1998 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _889);
    float _1999 = isnan(_1998) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1998 : min(cbModelParam._m0[25u].w, _1998));
    float _2088;
    float _2090;
    float _2092;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2052 = fma(_1135, cbModelParam._m0[21u].z, fma(_1131, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1127)) + cbModelParam._m0[21u].w;
        float _2056 = fma(_1135, cbModelParam._m0[22u].z, fma(_1131, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1127)) + cbModelParam._m0[22u].w;
        float _2060 = fma(_1135, cbModelParam._m0[23u].z, fma(_1131, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1127)) + cbModelParam._m0[23u].w;
        float _2063 = fma(_1075, cbModelParam._m0[21u].z, fma(_1074, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1073));
        float _2066 = fma(_1075, cbModelParam._m0[22u].z, fma(_1074, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1073));
        float _2069 = fma(_1075, cbModelParam._m0[23u].z, fma(_1074, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1073));
        float _2230;
        if (_2063 > 0.0)
        {
            _2230 = abs((1.0 - _2052) / _2063);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_2063 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_2052 + 1.0) / _2063);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2230 = frontier_phi_30_26_ladder;
        }
        float _2509;
        if (_2066 > 0.0)
        {
            _2509 = abs((1.0 - _2056) / _2066);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_2066 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_2056 + 1.0) / _2066);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2509 = frontier_phi_42_37_ladder;
        }
        float _2722;
        if (_2069 > 0.0)
        {
            _2722 = abs((1.0 - _2060) / _2069);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_2069 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_2060 + 1.0) / _2069);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2722 = frontier_phi_51_48_ladder;
        }
        float _2724 = isnan(_2509) ? _2230 : (isnan(_2230) ? _2509 : min(_2230, _2509));
        float _2725 = isnan(_2722) ? _2724 : (isnan(_2724) ? _2722 : min(_2724, _2722));
        float _2729 = (_2725 * _2063) + _2052;
        float _2730 = (_2725 * _2066) + _2056;
        float _2731 = (_2725 * _2069) + _2060;
        float _2732 = _2725 * 9.9999997473787516355514526367188e-05;
        float _2733 = (-1.0) - _2732;
        float _2735 = _2732 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2731 > _2735) || ((_2731 < _2733) || ((_2730 > _2735) || ((_2730 < _2733) || ((_2729 < _2733) || (_2729 > _2735))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2965 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2731, cbModelParam._m0[17u].z, fma(_2730, cbModelParam._m0[17u].y, _2729 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2731, cbModelParam._m0[18u].z, fma(_2730, cbModelParam._m0[18u].y, _2729 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2731, cbModelParam._m0[19u].z, fma(_2730, cbModelParam._m0[19u].y, _2729 * cbModelParam._m0[19u].x))), _1999);
            frontier_phi_27_51_ladder = _2965.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2965.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2965.x * cbModelParam._m0[1u].z;
        }
        _2088 = frontier_phi_27_51_ladder_2;
        _2090 = frontier_phi_27_51_ladder_1;
        _2092 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _2072 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1073, _1074, _1075), _1999);
        _2088 = _2072.x * cbModelParam._m0[1u].z;
        _2090 = _2072.y * cbModelParam._m0[1u].z;
        _2092 = _2072.z * cbModelParam._m0[1u].z;
    }
    float _2105 = (((_1098 * _1050) + _1099) * _1065) * ((cbModelParam._m0[1u].w * (_2088 - _1990)) + _1990);
    float _2107 = (((_1098 * _1052) + _1099) * _1065) * ((cbModelParam._m0[1u].w * (_2090 - _1992)) + _1992);
    float _2109 = (((_1098 * _1053) + _1099) * _1065) * ((cbModelParam._m0[1u].w * (_2092 - _1994)) + _1994);
    float _2112 = fma(_2109, cbSceneParam._m0[89u].z, fma(_2107, cbSceneParam._m0[89u].y, _2105 * cbSceneParam._m0[89u].x));
    float _2115 = fma(_2109, cbSceneParam._m0[90u].z, fma(_2107, cbSceneParam._m0[90u].y, _2105 * cbSceneParam._m0[90u].x));
    float _2118 = fma(_2109, cbSceneParam._m0[91u].z, fma(_2107, cbSceneParam._m0[91u].y, _2105 * cbSceneParam._m0[91u].x));
    vec4 _2126 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_987, _988));
    float _2128 = _2126.w;
    float _2140 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2128);
    float _2141 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2128);
    float _2142 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2128);
    uvec4 _2146 = floatBitsToUint(cbInstanceData._m0[_1025 + 5u]);
    uint _2148 = _2146.x * 14u;
    uint _2149 = _2148 + 13u;
    float _2156 = _1065 + (-1.0);
    float _2161 = (cbLight._m0[_2149].x * _2156) + 1.0;
    float _2162 = (cbLight._m0[_2149].y * _2156) + 1.0;
    float _2163 = (cbLight._m0[_2149].z * _2156) + 1.0;
    float _2164 = (cbLight._m0[_2149].w * _2156) + 1.0;
    uint _2165 = _2148 + 5u;
    float _2171 = isnan(1.0) ? _2162 : (isnan(_2162) ? 1.0 : min(_2162, 1.0));
    uint _2175 = _2148 + 4u;
    float _2184 = isnan(1.0) ? _2161 : (isnan(_2161) ? 1.0 : min(_2161, 1.0));
    uint _2188 = _2148 | 1u;
    float _2199 = dot(vec3(cbLight._m0[_2148].xyz), vec3(_886, _887, _888));
    float _2202 = dot(vec3(cbLight._m0[_2188].xyz), vec3(_886, _887, _888));
    float _4495 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
    float _4506 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
    float _2207 = (isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0))) * 0.3183098733425140380859375;
    float _2209 = (isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0))) * 0.3183098733425140380859375;
    float _2216 = ((cbLight._m0[_2165].x * _2171) * _2209) + (((cbLight._m0[_2175].x * _2140) * _2184) * _2207);
    float _2217 = ((_2171 * cbLight._m0[_2165].y) * _2209) + (((cbLight._m0[_2175].y * _2141) * _2184) * _2207);
    float _2218 = ((_2171 * cbLight._m0[_2165].z) * _2209) + (((cbLight._m0[_2175].z * _2142) * _2184) * _2207);
    uvec4 _2222 = floatBitsToUint(cbLight._m0[_2148 + 12u]);
    bool _2224 = _2222.x == 0u;
    float _2235;
    float _2237;
    float _2239;
    if (_2224)
    {
        _2235 = _2216;
        _2237 = _2217;
        _2239 = _2218;
    }
    else
    {
        uint _2243 = _2148 + 6u;
        float _2259 = (dot(vec3(cbLight._m0[_2148 + 2u].xyz), vec3(_886, _887, _888)) * 0.5) + 0.5;
        float _2260 = _2259 * _2259;
        float _4517 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
        float _2261 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
        float _2262 = isnan(1.0) ? _2163 : (isnan(_2163) ? 1.0 : min(_2163, 1.0));
        _2235 = (((cbLight._m0[_2243].x * 0.3183098733425140380859375) * _2261) * _2262) + _2216;
        _2237 = (((cbLight._m0[_2243].y * 0.3183098733425140380859375) * _2261) * _2262) + _2217;
        _2239 = (((cbLight._m0[_2243].z * 0.3183098733425140380859375) * _2261) * _2262) + _2218;
    }
    bool _2242 = _2222.y == 0u;
    float _2280;
    float _2282;
    float _2284;
    if (_2242)
    {
        _2280 = _2235;
        _2282 = _2237;
        _2284 = _2239;
    }
    else
    {
        uint _2453 = _2148 + 7u;
        float _2469 = (dot(vec3(cbLight._m0[_2148 + 3u].xyz), vec3(_886, _887, _888)) * 0.5) + 0.5;
        float _2470 = _2469 * _2469;
        float _4533 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
        float _2471 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
        float _2472 = isnan(1.0) ? _2164 : (isnan(_2164) ? 1.0 : min(_2164, 1.0));
        _2280 = (((cbLight._m0[_2453].x * 0.3183098733425140380859375) * _2471) * _2472) + _2235;
        _2282 = (((cbLight._m0[_2453].y * 0.3183098733425140380859375) * _2471) * _2472) + _2237;
        _2284 = (((cbLight._m0[_2453].z * 0.3183098733425140380859375) * _2471) * _2472) + _2239;
    }
    uint _2287 = _2148 + 8u;
    float _2300 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2148].w)) * _889) * 0.949999988079071044921875);
    float _2301 = _2300 * _2300;
    float _2302 = cbLight._m0[_2148].x + _970;
    float _2303 = cbLight._m0[_2148].y + _971;
    float _2304 = cbLight._m0[_2148].z + _972;
    float _2308 = inversesqrt(dot(vec3(_2302, _2303, _2304), vec3(_2302, _2303, _2304)));
    float _2309 = _2308 * _2302;
    float _2310 = _2308 * _2303;
    float _2311 = _2308 * _2304;
    float _2312 = dot(vec3(_886, _887, _888), vec3(cbLight._m0[_2148].xyz));
    float _4549 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
    float _2315 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
    float _4560 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
    float _2316 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
    float _2317 = dot(vec3(_886, _887, _888), vec3(_2309, _2310, _2311));
    float _4571 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
    float _2320 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
    float _2321 = dot(vec3(cbLight._m0[_2148].xyz), vec3(_2309, _2310, _2311));
    float _4582 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
    float _2325 = _2301 * _2301;
    float _2329 = ((_2320 * _2320) * (_2325 + (-1.0))) + 1.0;
    float _2337 = exp2(log2(1.0 - (isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0)))) * 5.0);
    float _2338 = 0.959999978542327880859375 - _1047;
    float _2340 = 0.959999978542327880859375 - _1048;
    float _2341 = 0.959999978542327880859375 - _1049;
    float _2348 = 1.0 - _2301;
    float _2359 = (0.5 / (((_2316 * ((_2315 * _2348) + _2301)) + 9.9999999392252902907785028219223e-09) + (((_2316 * _2348) + _2301) * _2315))) * _2315;
    float _4593 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
    float _2361 = (isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0))) * (_2325 / ((_2329 * _2329) * 3.141590118408203125));
    uint _2375 = _2148 + 9u;
    float _2386 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2188].w)) * _889) * 0.949999988079071044921875);
    float _2387 = _2386 * _2386;
    float _2388 = cbLight._m0[_2188].x + _970;
    float _2389 = cbLight._m0[_2188].y + _971;
    float _2390 = cbLight._m0[_2188].z + _972;
    float _2394 = inversesqrt(dot(vec3(_2388, _2389, _2390), vec3(_2388, _2389, _2390)));
    float _2395 = _2394 * _2388;
    float _2396 = _2394 * _2389;
    float _2397 = _2394 * _2390;
    float _2398 = dot(vec3(_886, _887, _888), vec3(cbLight._m0[_2188].xyz));
    float _4604 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
    float _2401 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
    float _2402 = dot(vec3(_886, _887, _888), vec3(_2395, _2396, _2397));
    float _4615 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
    float _2405 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
    float _2406 = dot(vec3(cbLight._m0[_2188].xyz), vec3(_2395, _2396, _2397));
    float _4626 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
    float _2410 = _2387 * _2387;
    float _2414 = ((_2405 * _2405) * (_2410 + (-1.0))) + 1.0;
    float _2421 = exp2(log2(1.0 - (isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0)))) * 5.0);
    float _2428 = 1.0 - _2387;
    float _2438 = (0.5 / (((_2316 * ((_2401 * _2428) + _2387)) + 9.9999999392252902907785028219223e-09) + (((_2316 * _2428) + _2387) * _2401))) * _2401;
    float _4637 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
    float _2440 = (isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0))) * (_2410 / ((_2414 * _2414) * 3.141590118408203125));
    float _2450 = (((((_2421 * _2338) + _1050) * cbLight._m0[_2375].x) * _2440) * _2171) + ((((cbLight._m0[_2287].x * _2140) * ((_2337 * _2338) + _1050)) * _2361) * _2184);
    float _2451 = (((((_2421 * _2340) + _1052) * cbLight._m0[_2375].y) * _2440) * _2171) + ((((cbLight._m0[_2287].y * _2141) * ((_2337 * _2340) + _1052)) * _2361) * _2184);
    float _2452 = (((((_2421 * _2341) + _1053) * cbLight._m0[_2375].z) * _2440) * _2171) + ((((cbLight._m0[_2287].z * _2142) * ((_2337 * _2341) + _1053)) * _2361) * _2184);
    float _2514;
    float _2516;
    float _2518;
    if (_2224)
    {
        _2514 = _2450;
        _2516 = _2451;
        _2518 = _2452;
    }
    else
    {
        uint _2520 = _2148 + 2u;
        uint _2524 = _2148 + 10u;
        float _2538 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2520].w)) * _889) * 0.949999988079071044921875);
        float _2539 = _2538 * _2538;
        float _2540 = cbLight._m0[_2520].x + _970;
        float _2541 = cbLight._m0[_2520].y + _971;
        float _2542 = cbLight._m0[_2520].z + _972;
        float _2546 = inversesqrt(dot(vec3(_2540, _2541, _2542), vec3(_2540, _2541, _2542)));
        float _2547 = _2546 * _2540;
        float _2548 = _2546 * _2541;
        float _2549 = _2546 * _2542;
        float _2550 = dot(vec3(_886, _887, _888), vec3(cbLight._m0[_2520].xyz));
        float _4648 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0));
        float _2553 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
        float _2554 = dot(vec3(_886, _887, _888), vec3(_2547, _2548, _2549));
        float _4659 = isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : max(_2554, 0.0));
        float _2557 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
        float _2558 = dot(vec3(cbLight._m0[_2520].xyz), vec3(_2547, _2548, _2549));
        float _4670 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0));
        float _2562 = _2539 * _2539;
        float _2566 = ((_2557 * _2557) * (_2562 + (-1.0))) + 1.0;
        float _2573 = exp2(log2(1.0 - (isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0)))) * 5.0);
        float _2580 = 1.0 - _2539;
        float _2590 = (0.5 / (((_2316 * ((_2553 * _2580) + _2539)) + 9.9999999392252902907785028219223e-09) + (((_2316 * _2580) + _2539) * _2553))) * _2553;
        float _4681 = isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0));
        float _2592 = (isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0))) * (_2562 / ((_2566 * _2566) * 3.141590118408203125));
        float _2593 = isnan(1.0) ? _2163 : (isnan(_2163) ? 1.0 : min(_2163, 1.0));
        _2514 = (((((_2573 * _2338) + _1050) * cbLight._m0[_2524].x) * _2592) * _2593) + _2450;
        _2516 = (((((_2573 * _2340) + _1052) * cbLight._m0[_2524].y) * _2592) * _2593) + _2451;
        _2518 = (((((_2573 * _2341) + _1053) * cbLight._m0[_2524].z) * _2592) * _2593) + _2452;
    }
    float _2628;
    float _2630;
    float _2632;
    if (_2242)
    {
        _2628 = _2514;
        _2630 = _2516;
        _2632 = _2518;
    }
    else
    {
        uint _2639 = _2148 + 3u;
        uint _2643 = _2148 + 11u;
        float _2657 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2639].w)) * _889) * 0.949999988079071044921875);
        float _2658 = _2657 * _2657;
        float _2659 = cbLight._m0[_2639].x + _970;
        float _2660 = cbLight._m0[_2639].y + _971;
        float _2661 = cbLight._m0[_2639].z + _972;
        float _2665 = inversesqrt(dot(vec3(_2659, _2660, _2661), vec3(_2659, _2660, _2661)));
        float _2666 = _2665 * _2659;
        float _2667 = _2665 * _2660;
        float _2668 = _2665 * _2661;
        float _2669 = dot(vec3(_886, _887, _888), vec3(cbLight._m0[_2639].xyz));
        float _4697 = isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0));
        float _2672 = isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0));
        float _2673 = dot(vec3(_886, _887, _888), vec3(_2666, _2667, _2668));
        float _4708 = isnan(0.0) ? _2673 : (isnan(_2673) ? 0.0 : max(_2673, 0.0));
        float _2676 = isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0));
        float _2677 = dot(vec3(cbLight._m0[_2639].xyz), vec3(_2666, _2667, _2668));
        float _4719 = isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : max(_2677, 0.0));
        float _2681 = _2658 * _2658;
        float _2685 = ((_2676 * _2676) * (_2681 + (-1.0))) + 1.0;
        float _2692 = exp2(log2(1.0 - (isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0)))) * 5.0);
        float _2699 = 1.0 - _2658;
        float _2709 = (0.5 / (((_2316 * ((_2672 * _2699) + _2658)) + 9.9999999392252902907785028219223e-09) + (((_2316 * _2699) + _2658) * _2672))) * _2672;
        float _4730 = isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : max(_2709, 0.0));
        float _2711 = (isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0))) * (_2681 / ((_2685 * _2685) * 3.141590118408203125));
        float _2712 = isnan(1.0) ? _2164 : (isnan(_2164) ? 1.0 : min(_2164, 1.0));
        _2628 = (((((_2692 * _2338) + _1050) * cbLight._m0[_2643].x) * _2711) * _2712) + _2514;
        _2630 = (((((_2692 * _2340) + _1052) * cbLight._m0[_2643].y) * _2711) * _2712) + _2516;
        _2632 = (((((_2692 * _2341) + _1053) * cbLight._m0[_2643].z) * _2711) * _2712) + _2518;
    }
    float _2847;
    float _2849;
    float _2851;
    float _2853;
    float _2855;
    float _2857;
    if (_2146.y == 0u)
    {
        float _2787 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2788 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2787;
        float _2789 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2787;
        float _2790 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2787;
        uvec4 _2802 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2803 = _2802.x;
        uint _2814 = uint((float(_2802.y) * floor(float(uint(cbSceneParam._m0[85u].y * _988) / _2803))) + floor(float(uint(cbSceneParam._m0[85u].x * _987) / _2803)));
        float _2824 = (log2(_2790 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2825 = isnan(0.0) ? _2824 : (isnan(_2824) ? 0.0 : max(_2824, 0.0));
        uint _2828 = uint(isnan(14.0) ? _2825 : (isnan(_2825) ? 14.0 : min(_2825, 14.0)));
        uvec4 _2833 = texelFetch(g_lightClusterGridBuffer, int(((_2828 << 2u) + (_2814 << 6u)) >> 2u));
        uint _2834 = _2833.x;
        uint _2835 = _2802.z;
        float _2970;
        float _2972;
        float _2974;
        float _2976;
        float _2978;
        float _2980;
        if (((((1u << ((_2835 >> 4u) & 15u)) + 4294967295u) & _2834) == 0u) || ((_2835 & 240u) == 0u))
        {
            _2970 = 0.0;
            _2972 = 0.0;
            _2974 = 0.0;
            _2976 = 0.0;
            _2978 = 0.0;
            _2980 = 0.0;
        }
        else
        {
            float _2971;
            float _2973;
            float _2975;
            float _2977;
            float _2979;
            float _2981;
            float _3132 = 0.0;
            float _3133 = 0.0;
            float _3134 = 0.0;
            float _3135 = 0.0;
            float _3136 = 0.0;
            float _3137 = 0.0;
            uint _3138 = 0u;
            uint _3147;
            bool _3148;
            for (;;)
            {
                _3147 = texelFetch(g_lightClassification, int((((_2828 << 5u) + (_2814 << 9u)) + (_3138 << 2u)) >> 2u)).x;
                _3148 = _3147 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3148)
                {
                    frontier_phi_68_pred = _3132;
                    frontier_phi_68_pred_1 = _3137;
                    frontier_phi_68_pred_2 = _3136;
                    frontier_phi_68_pred_3 = _3135;
                    frontier_phi_68_pred_4 = _3134;
                    frontier_phi_68_pred_5 = _3133;
                }
                else
                {
                    float _3277;
                    float _3278;
                    float _3279;
                    float _3280;
                    float _3281;
                    float _3282;
                    uint _3283;
                    _3277 = _3132;
                    _3278 = _3133;
                    _3279 = _3134;
                    _3280 = _3135;
                    _3281 = _3136;
                    _3282 = _3137;
                    _3283 = _3147;
                    float _3204;
                    float _3205;
                    float _3206;
                    float _3207;
                    float _3208;
                    float _3209;
                    for (;;)
                    {
                        uint _3287 = uint(findLSB(_3283)) + (_3138 << 5u);
                        uint _3284 = (_3283 + 4294967295u) & _3283;
                        uint _3289 = _3287 * 48u;
                        vec4 _3303 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3289)).x, texelFetch(g_PointLightRenderingBuffer, int(_3289 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3289 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3289 + 3u)).x));
                        uint _3309 = (_3287 * 48u) + 4u;
                        vec4 _3322 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3309)).x, texelFetch(g_PointLightRenderingBuffer, int(_3309 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3309 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3309 + 3u)).x));
                        uint _3328 = (_3287 * 48u) + 8u;
                        vec3 _3339 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3328)).x, texelFetch(g_PointLightRenderingBuffer, int(_3328 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3328 + 2u)).x));
                        float _3343 = _3303.x - _2788;
                        float _3344 = _3303.y - _2789;
                        float _3345 = _3303.z - _2790;
                        float _3346 = dot(vec3(_3343, _3344, _3345), vec3(_3343, _3344, _3345));
                        float _3349 = inversesqrt(_3346);
                        float _3350 = _3349 * _3343;
                        float _3351 = _3349 * _3344;
                        float _3352 = _3349 * _3345;
                        float _3353 = dot(vec3(_1006, _1009, _1012), vec3(_3350, _3351, _3352));
                        float _3358 = 1.0 - (_3346 * _3303.w);
                        float _4756 = isnan(0.0) ? _3358 : (isnan(_3358) ? 0.0 : max(_3358, 0.0));
                        float _3359 = isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0));
                        float _3360 = sqrt(_3346) * _3322.w;
                        float _3363 = 1.39999997615814208984375 / (_3360 + 1.39999997615814208984375);
                        float _3364 = _3363 * _3363;
                        float _3367 = ((1.0 - _3364) * _3353) + _3364;
                        float _3370 = _3360 * _3360;
                        float _3374 = ((isnan(0.0) ? _3367 : (isnan(_3367) ? 0.0 : max(_3367, 0.0))) * _3359) / ((_3370 * 0.699999988079071044921875) + 1.0);
                        float _3378 = (-0.0) - _2788;
                        float _3379 = (-0.0) - _2789;
                        float _3380 = (-0.0) - _2790;
                        float _3384 = inversesqrt(dot(vec3(_3378, _3379, _3380), vec3(_3378, _3379, _3380)));
                        float _3385 = _3384 * _3378;
                        float _3386 = _3384 * _3379;
                        float _3387 = _3384 * _3380;
                        float _3395 = exp2(log2(1.0 / ((_3370 * 3.5) + 5.0)) * 0.25);
                        float _3396 = 1.0 - _1081;
                        float _3403 = sqrt(1.0 - ((1.0 - (_3396 * _3396)) * (1.0 - (_3395 * _3395))));
                        float _3404 = _3403 * _3403;
                        float _3405 = _3404 * _3404;
                        float _3406 = _3385 + _3350;
                        float _3407 = _3386 + _3351;
                        float _3408 = _3387 + _3352;
                        float _3412 = inversesqrt(dot(vec3(_3406, _3407, _3408), vec3(_3406, _3407, _3408)));
                        float _3416 = dot(vec3(_1006, _1009, _1012), vec3(_3385, _3386, _3387));
                        float _4772 = isnan(0.0) ? _3416 : (isnan(_3416) ? 0.0 : max(_3416, 0.0));
                        float _3419 = isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0));
                        float _3420 = dot(vec3(_1006, _1009, _1012), vec3(_3412 * _3406, _3412 * _3407, _3412 * _3408));
                        float _4783 = isnan(0.0) ? _3420 : (isnan(_3420) ? 0.0 : max(_3420, 0.0));
                        float _3423 = isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0));
                        float _3427 = ((_3423 * _3423) * (_3405 + (-1.0))) + 1.0;
                        float _3428 = _3363 * _3404;
                        float _3429 = _3428 * _3428;
                        float _3432 = ((1.0 - _3429) * _3353) + _3429;
                        float _4794 = isnan(0.0) ? _3432 : (isnan(_3432) ? 0.0 : max(_3432, 0.0));
                        float _3433 = isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0));
                        float _3434 = 1.0 - _3404;
                        float _3444 = (0.5 / (((_3433 * ((_3419 * _3434) + _3404)) + 9.9999999392252902907785028219223e-09) + (((_3433 * _3434) + _3404) * _3419))) * _3433;
                        float _4805 = isnan(0.0) ? _3444 : (isnan(_3444) ? 0.0 : max(_3444, 0.0));
                        float _3455 = (((_3405 * 3.1415927410125732421875) * (isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0)))) / ((_3427 * _3427) * ((_3370 * 2.1991131305694580078125) + 3.141590118408203125))) * _3359;
                        _3207 = (_3374 * _3322.x) + _3280;
                        _3208 = (_3374 * _3322.y) + _3281;
                        _3209 = (_3374 * _3322.z) + _3282;
                        _3204 = (_3455 * _3339.x) + _3277;
                        _3205 = (_3455 * _3339.y) + _3278;
                        _3206 = (_3455 * _3339.z) + _3279;
                        if (_3284 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3277 = _3204;
                            _3278 = _3205;
                            _3279 = _3206;
                            _3280 = _3207;
                            _3281 = _3208;
                            _3282 = _3209;
                            _3283 = _3284;
                        }
                    }
                    frontier_phi_68_pred = _3204;
                    frontier_phi_68_pred_1 = _3209;
                    frontier_phi_68_pred_2 = _3208;
                    frontier_phi_68_pred_3 = _3207;
                    frontier_phi_68_pred_4 = _3206;
                    frontier_phi_68_pred_5 = _3205;
                }
                _2971 = frontier_phi_68_pred;
                _2981 = frontier_phi_68_pred_1;
                _2979 = frontier_phi_68_pred_2;
                _2977 = frontier_phi_68_pred_3;
                _2975 = frontier_phi_68_pred_4;
                _2973 = frontier_phi_68_pred_5;
                uint _3139 = _3138 + 1u;
                if (_3139 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3132 = _2971;
                    _3133 = _2973;
                    _3134 = _2975;
                    _3135 = _2977;
                    _3136 = _2979;
                    _3137 = _2981;
                    _3138 = _3139;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2970 = _2971;
            _2972 = _2973;
            _2974 = _2975;
            _2976 = _2977;
            _2978 = _2979;
            _2980 = _2981;
        }
        uvec4 _2984 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2985 = _2984.z;
        uint _2987 = (_2985 >> 8u) & 15u;
        float _3100;
        float _3102;
        float _3104;
        float _3106;
        float _3108;
        float _3110;
        if (((4294967295u << _2987) & _2834) == 0u)
        {
            _3100 = _2970;
            _3102 = _2972;
            _3104 = _2974;
            _3106 = _2976;
            _3108 = _2978;
            _3110 = _2980;
        }
        else
        {
            float _3125 = inversesqrt(dot(vec3(_2788, _2789, _2790), vec3(_2788, _2789, _2790)));
            float _3126 = _3125 * _2788;
            float _3127 = _3125 * _2789;
            float _3128 = _3125 * _2790;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2987 < ((_2985 >> 12u) & 15u))
            {
                float _3101;
                float _3103;
                float _3105;
                float _3107;
                float _3109;
                float _3111;
                float _3260 = _2970;
                float _3261 = _2972;
                float _3262 = _2974;
                float _3263 = _2976;
                float _3264 = _2978;
                float _3265 = _2980;
                uint _3266 = _2987;
                uint _3275;
                bool _3276;
                for (;;)
                {
                    _3275 = texelFetch(g_lightClassification, int((((_2828 << 5u) + (_2814 << 9u)) + (_3266 << 2u)) >> 2u)).x;
                    _3276 = _3275 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3276)
                    {
                        frontier_phi_79_pred = _3265;
                        frontier_phi_79_pred_1 = _3264;
                        frontier_phi_79_pred_2 = _3263;
                        frontier_phi_79_pred_3 = _3262;
                        frontier_phi_79_pred_4 = _3261;
                        frontier_phi_79_pred_5 = _3260;
                    }
                    else
                    {
                        float _3469;
                        float _3470;
                        float _3471;
                        float _3472;
                        float _3473;
                        float _3474;
                        float _3762;
                        float _3763;
                        float _3764;
                        float _3765;
                        float _3766;
                        float _3767;
                        float _3482 = _3260;
                        float _3483 = _3261;
                        float _3484 = _3262;
                        float _3485 = _3263;
                        float _3486 = _3264;
                        float _3487 = _3265;
                        uint _3488 = _3275;
                        uint _3489;
                        vec4 _3514;
                        float _3515;
                        vec4 _3530;
                        vec3 _3542;
                        vec4 _3557;
                        vec4 _3572;
                        float _3618;
                        bool _3619;
                        for (;;)
                        {
                            uint _3499 = ((_3266 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3488));
                            _3489 = (_3488 + 4294967295u) & _3488;
                            uint _3501 = _3499 * 40u;
                            _3514 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3501)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3501 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3501 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3501 + 3u)).x));
                            _3515 = _3514.w;
                            uint _3517 = (_3499 * 40u) + 4u;
                            _3530 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3517)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 3u)).x));
                            uint _3532 = (_3499 * 40u) + 8u;
                            _3542 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3532)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3532 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3532 + 2u)).x));
                            uint _3544 = (_3499 * 40u) + 16u;
                            _3557 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3544)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 3u)).x));
                            uint _3559 = (_3499 * 40u) + 20u;
                            _3572 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3559)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 3u)).x));
                            uint _3574 = (_3499 * 40u) + 24u;
                            vec4 _3587 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3574)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3574 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3574 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3574 + 3u)).x));
                            uint _3593 = (_3499 * 40u) + 28u;
                            vec4 _3606 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3593)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3593 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3593 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3593 + 3u)).x));
                            _3618 = fma(_2790, _3606.z, fma(_2789, _3606.y, _3606.x * _2788)) + _3606.w;
                            _3619 = !((fma(_2790, _3587.z, fma(_2789, _3587.y, _3587.x * _2788)) + _3587.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3619)
                            {
                                float _3646 = _3514.x - _2788;
                                float _3647 = _3514.y - _2789;
                                float _3648 = _3514.z - _2790;
                                float _3649 = dot(vec3(_3646, _3647, _3648), vec3(_3646, _3647, _3648));
                                float _3652 = inversesqrt(_3649);
                                float _3653 = _3652 * _3646;
                                float _3654 = _3652 * _3647;
                                float _3655 = _3652 * _3648;
                                float _3659 = 1.0 - (_3649 / (_3515 * _3515));
                                float _4816 = isnan(0.0) ? _3659 : (isnan(_3659) ? 0.0 : max(_3659, 0.0));
                                float _3660 = isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0));
                                float _3664 = sqrt(_3649) * _3530.w;
                                float _3666 = 1.39999997615814208984375 / (_3664 + 1.39999997615814208984375);
                                float _3667 = _3666 * _3666;
                                float _3670 = ((1.0 - _3667) * dot(vec3(_3653, _3654, _3655), vec3(_1006, _1009, _1012))) + _3667;
                                float _3673 = _3664 * _3664;
                                float _3677 = (fma(_2790, _3557.z, fma(_2789, _3557.y, _3557.x * _2788)) + _3557.w) / _3618;
                                float _3678 = (fma(_2790, _3572.z, fma(_2789, _3572.y, _3572.x * _2788)) + _3572.w) / _3618;
                                float _3682 = 1.0 - dot(vec2(_3677, _3678), vec2(_3677, _3678));
                                float _4832 = isnan(0.0) ? _3682 : (isnan(_3682) ? 0.0 : max(_3682, 0.0));
                                float _3683 = isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0));
                                float _3684 = _3683 * (((isnan(0.0) ? _3670 : (isnan(_3670) ? 0.0 : max(_3670, 0.0))) * _3660) / ((_3673 * 0.699999988079071044921875) + 1.0));
                                float _3696 = exp2(log2(1.0 / ((_3673 * 3.5) + 5.0)) * 0.25);
                                float _3697 = 1.0 - _1081;
                                float _3704 = sqrt(1.0 - ((1.0 - (_3697 * _3697)) * (1.0 - (_3696 * _3696))));
                                float _3705 = _3704 * _3704;
                                float _3706 = _3705 * _3705;
                                float _3707 = _3653 - _3126;
                                float _3708 = _3654 - _3127;
                                float _3709 = _3655 - _3128;
                                float _3713 = inversesqrt(dot(vec3(_3707, _3708, _3709), vec3(_3707, _3708, _3709)));
                                float _3717 = dot(vec3(_1006, _1009, _1012), vec3((-0.0) - _3126, (-0.0) - _3127, (-0.0) - _3128));
                                float _4843 = isnan(0.0) ? _3717 : (isnan(_3717) ? 0.0 : max(_3717, 0.0));
                                float _3720 = isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0));
                                float _3721 = dot(vec3(_1006, _1009, _1012), vec3(_3713 * _3707, _3713 * _3708, _3713 * _3709));
                                float _4854 = isnan(0.0) ? _3721 : (isnan(_3721) ? 0.0 : max(_3721, 0.0));
                                float _3724 = isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0));
                                float _3728 = ((_3724 * _3724) * (_3706 + (-1.0))) + 1.0;
                                float _3729 = _3666 * _3705;
                                float _3730 = _3729 * _3729;
                                float _3736 = ((1.0 - _3730) * dot(vec3(_1006, _1009, _1012), vec3(_3653, _3654, _3655))) + _3730;
                                float _4865 = isnan(0.0) ? _3736 : (isnan(_3736) ? 0.0 : max(_3736, 0.0));
                                float _3737 = isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0));
                                float _3738 = 1.0 - _3705;
                                float _3748 = (0.5 / (((_3737 * ((_3720 * _3738) + _3705)) + 9.9999999392252902907785028219223e-09) + (((_3737 * _3738) + _3705) * _3720))) * _3737;
                                float _4876 = isnan(0.0) ? _3748 : (isnan(_3748) ? 0.0 : max(_3748, 0.0));
                                float _3758 = (_3683 * _3660) * (((_3706 * 3.1415927410125732421875) * (isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0)))) / ((_3728 * _3728) * ((_3673 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3684 * _3530.y;
                                frontier_phi_85_pred_1 = _3684 * _3530.x;
                                frontier_phi_85_pred_2 = _3758 * _3542.z;
                                frontier_phi_85_pred_3 = _3758 * _3542.y;
                                frontier_phi_85_pred_4 = _3758 * _3542.x;
                                frontier_phi_85_pred_5 = _3684 * _3530.z;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3766 = frontier_phi_85_pred;
                            _3765 = frontier_phi_85_pred_1;
                            _3764 = frontier_phi_85_pred_2;
                            _3763 = frontier_phi_85_pred_3;
                            _3762 = frontier_phi_85_pred_4;
                            _3767 = frontier_phi_85_pred_5;
                            _3472 = _3765 + _3485;
                            _3473 = _3766 + _3486;
                            _3474 = _3767 + _3487;
                            _3469 = _3762 + _3482;
                            _3470 = _3763 + _3483;
                            _3471 = _3764 + _3484;
                            if (_3489 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3482 = _3469;
                                _3483 = _3470;
                                _3484 = _3471;
                                _3485 = _3472;
                                _3486 = _3473;
                                _3487 = _3474;
                                _3488 = _3489;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3474;
                        frontier_phi_79_pred_1 = _3473;
                        frontier_phi_79_pred_2 = _3472;
                        frontier_phi_79_pred_3 = _3471;
                        frontier_phi_79_pred_4 = _3470;
                        frontier_phi_79_pred_5 = _3469;
                    }
                    _3111 = frontier_phi_79_pred;
                    _3109 = frontier_phi_79_pred_1;
                    _3107 = frontier_phi_79_pred_2;
                    _3105 = frontier_phi_79_pred_3;
                    _3103 = frontier_phi_79_pred_4;
                    _3101 = frontier_phi_79_pred_5;
                    uint _3267 = _3266 + 1u;
                    if (_3267 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3260 = _3101;
                        _3261 = _3103;
                        _3262 = _3105;
                        _3263 = _3107;
                        _3264 = _3109;
                        _3265 = _3111;
                        _3266 = _3267;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3105;
                frontier_phi_60_61_ladder_1 = _3111;
                frontier_phi_60_61_ladder_2 = _3109;
                frontier_phi_60_61_ladder_3 = _3107;
                frontier_phi_60_61_ladder_4 = _3103;
                frontier_phi_60_61_ladder_5 = _3101;
            }
            else
            {
                frontier_phi_60_61_ladder = _2974;
                frontier_phi_60_61_ladder_1 = _2980;
                frontier_phi_60_61_ladder_2 = _2978;
                frontier_phi_60_61_ladder_3 = _2976;
                frontier_phi_60_61_ladder_4 = _2972;
                frontier_phi_60_61_ladder_5 = _2970;
            }
            _3100 = frontier_phi_60_61_ladder_5;
            _3102 = frontier_phi_60_61_ladder_4;
            _3104 = frontier_phi_60_61_ladder;
            _3106 = frontier_phi_60_61_ladder_3;
            _3108 = frontier_phi_60_61_ladder_2;
            _3110 = frontier_phi_60_61_ladder_1;
        }
        float _3115 = isnan(1.0) ? _1065 : (isnan(_1065) ? 1.0 : min(_1065, 1.0));
        _2847 = (_3115 * _3106) + _2280;
        _2849 = (_3115 * _3108) + _2282;
        _2851 = (_3115 * _3110) + _2284;
        _2853 = ((_3100 * _1050) * _3115) + _2628;
        _2855 = ((_3102 * _1052) * _3115) + _2630;
        _2857 = ((_3104 * _1053) * _3115) + _2632;
    }
    else
    {
        _2847 = _2280;
        _2849 = _2282;
        _2851 = _2284;
        _2853 = _2628;
        _2855 = _2630;
        _2857 = _2632;
    }
    uint _2863 = _1026 + uint(cbMatDynParam._m0[0u].w);
    float _2871 = ((cbMtdParam._m0[20u].x * cbMtdParam._m0[25u].x) * _809.x) * cbInstanceData._m0[_2863].x;
    float _2874 = ((cbMtdParam._m0[20u].y * cbMtdParam._m0[25u].x) * _809.y) * cbInstanceData._m0[_2863].y;
    float _2877 = ((cbMtdParam._m0[20u].z * cbMtdParam._m0[25u].x) * _809.z) * cbInstanceData._m0[_2863].z;
    float _4892 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
    float _4903 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
    float _4914 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
    float _2894 = (((isnan(1.0) ? _4892 : (isnan(_4892) ? 1.0 : min(_4892, 1.0))) * (_2847 + ((isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0))) * _1065))) + ((_2853 + ((isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0))) * _1899)) * cbPerFrame._m0[3u].x)) + _2871;
    float _2896 = (_2874 + ((_2855 + ((isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0))) * _1899)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4903 : (isnan(_4903) ? 1.0 : min(_4903, 1.0))) * (_2849 + ((isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0))) * _1065)));
    float _2898 = (_2877 + ((_2857 + ((isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0))) * _1899)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4914 : (isnan(_4914) ? 1.0 : min(_4914, 1.0))) * (_2851 + ((isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0))) * _1065)));
    float _2899 = isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : max(_2894, 0.0));
    float _2900 = isnan(0.0) ? _2896 : (isnan(_2896) ? 0.0 : max(_2896, 0.0));
    float _2901 = isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : max(_2898, 0.0));
    float _2907 = cbMtdParam._m0[2u].x * _2871;
    float _2908 = cbMtdParam._m0[2u].y * _2874;
    float _2909 = cbMtdParam._m0[2u].z * _2877;
    float _4940 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2911 = isnan(1.0) ? _4940 : (isnan(_4940) ? 1.0 : min(_4940, 1.0));
    uint _2912 = _1025 + 6u;
    float _2920 = _987 / cbSceneParam._m0[86u].x;
    float _2921 = _988 / cbSceneParam._m0[86u].y;
    vec4 _2935 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2920, _2921, (log2((isnan(cbSceneParam._m0[77u].w) ? _913 : (isnan(_913) ? cbSceneParam._m0[77u].w : min(_913, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2937 = _2935.x;
    float _2938 = _2935.y;
    float _2939 = _2935.z;
    float _2940 = _2935.w;
    float _3033;
    float _3035;
    float _3037;
    float _3039;
    if (_913 > cbSceneParam._m0[78u].w)
    {
        float _2995 = isnan(_913) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _913 : min(cbSceneParam._m0[80u].w, _913));
        float _2996 = _2995 / _913;
        float _3007 = _2996 * _963;
        float _3008 = _964 * _2996;
        float _3009 = (-0.0) - _3008;
        float _3011 = _2996 * _965;
        float _3013 = (cbSceneParam._m0[77u].w * _3009) / _2995;
        float _3014 = _3013 + cbSceneParam._m0[79u].w;
        float _3015 = cbSceneParam._m0[79u].w - _3008;
        float _3021 = sqrt(((_3007 * _3007) + (_3008 * _3008)) + (_3011 * _3011));
        float _3024 = (1.0 - (cbSceneParam._m0[77u].w / _2995)) * _3021;
        float _3029 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3031 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3217;
        if (abs((_3009 - _3013) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3217 = ((((_3014 > 0.0) ? exp2(_3029 * _3014) : (2.0 - exp2(_3031 * _3014))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3024;
        }
        else
        {
            float _3161 = 1.0 / cbSceneParam._m0[80u].x;
            float _3162 = isnan(_3015) ? _3014 : (isnan(_3014) ? _3015 : max(_3014, _3015));
            float _3163 = isnan(_3015) ? _3014 : (isnan(_3014) ? _3015 : min(_3014, _3015));
            float _3172 = isnan(0.0) ? _3162 : (isnan(_3162) ? 0.0 : min(_3162, 0.0));
            float _3173 = isnan(0.0) ? _3163 : (isnan(_3163) ? 0.0 : min(_3163, 0.0));
            _3217 = ((abs(_3021 / _3009) * cbSceneParam._m0[80u].y) * ((((_3172 - _3173) * 2.0) - ((exp2(_3029 * (isnan(0.0) ? _3162 : (isnan(_3162) ? 0.0 : max(_3162, 0.0)))) - exp2(_3029 * (isnan(0.0) ? _3163 : (isnan(_3163) ? 0.0 : max(_3163, 0.0))))) * _3161)) - ((exp2(_3031 * _3172) - exp2(_3031 * _3173)) * _3161))) + (_3024 * cbSceneParam._m0[80u].z);
        }
        vec4 _3219 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2920, _2921, 1.0), 0.0);
        float _3228 = exp2((_3217 * (-1.44269502162933349609375)) * (1.0 - _3219.w));
        float _3229 = log2(_3228);
        float _3245 = log2(_2940);
        _3033 = (exp2(_3245 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3229 * cbSceneParam._m0[78u].x)) * _3219.x) / cbSceneParam._m0[78u].x)) + _2937;
        _3035 = (exp2(_3245 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3229 * cbSceneParam._m0[78u].y)) * _3219.y) / cbSceneParam._m0[78u].y)) + _2938;
        _3037 = (exp2(_3245 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3229 * cbSceneParam._m0[78u].z)) * _3219.z) / cbSceneParam._m0[78u].z)) + _2939;
        _3039 = _3228 * _2940;
    }
    else
    {
        _3033 = _2937;
        _3035 = _2938;
        _3037 = _2939;
        _3039 = _2940;
    }
    bool _3255;
    vec4 _3049;
    vec4 _3071;
    float _3073;
    float _3077;
    float _3078;
    float _3079;
    float _3082;
    float _3085;
    float _3088;
    float _3089;
    bool _3099;
    for (;;)
    {
        _3049 = cbMatDynParam._m0[0u];
        float _3051 = roundEven(_3049.y);
        bool _3052 = _3051 == 3.0;
        float _3053 = log2(_3039);
        float _3057 = exp2(_3053 * cbSceneParam._m0[78u].x);
        float _3058 = exp2(_3053 * cbSceneParam._m0[78u].y);
        float _3059 = exp2(_3053 * cbSceneParam._m0[78u].z);
        float _3060 = _3057 * _2899;
        float _3061 = _3058 * _2900;
        float _3062 = _3059 * _2901;
        float _3069 = _976 + (-0.5);
        _3071 = cbMtdParam._m0[1u];
        _3073 = _3071.y * _3069;
        float _3076 = (_3051 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3077 = _3076 * (_3052 ? _3060 : (_3060 + (cbSceneParam._m0[72u].w * _3033)));
        _3078 = _3076 * (_3052 ? _3061 : (_3061 + (cbSceneParam._m0[72u].w * _3035)));
        _3079 = _3076 * (_3052 ? _3062 : (_3062 + (cbSceneParam._m0[72u].w * _3037)));
        _3082 = ((_2907 * _2911) * _3057) * _3076;
        _3085 = ((_2908 * _2911) * _3058) * _3076;
        _3088 = ((_2909 * _2911) * _3059) * _3076;
        _3089 = _3069 * 0.999000012874603271484375;
        _3099 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3099)
        {
            if ((cbInstanceData._m0[_1025 + 7u].x + _3089) < 0.5)
            {
                _3255 = true;
                break;
            }
        }
        uint _3196 = _1026 + uint(_3049.w);
        if ((cbInstanceData._m0[_3196].w < 1.0) && ((cbInstanceData._m0[_3196].w + _3089) < 0.5))
        {
            _3255 = true;
            break;
        }
        if ((_3073 + 1.0) < _3071.x)
        {
            _3255 = true;
            break;
        }
        _3255 = false;
        break;
    }
    float _3460;
    if (_3255)
    {
        discard_state = true;
        _3460 = 0.0;
    }
    else
    {
        _3460 = cbInstanceData._m0[_2912].w;
    }
    SV_Target.x = _3077;
    SV_Target.y = _3078;
    SV_Target.z = _3079;
    SV_Target.w = _3460;
    SV_Target_1.x = _3082;
    SV_Target_1.y = _3085;
    SV_Target_1.z = _3088;
    SV_Target_1.w = cbInstanceData._m0[_2912].w;
    discard_exit();
}


