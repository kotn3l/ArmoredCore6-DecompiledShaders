#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[29];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 12) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_14;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_16;
layout(set = 0, binding = 4) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_17;
layout(set = 0, binding = 5) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_18;
layout(set = 0, binding = 6) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 9) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2DArray C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_0;
layout(set = 0, binding = 14) uniform texture2DArray C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1336;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _213 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _214 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _215 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _221 = inversesqrt(dot(vec3(_213, _214, _215), vec3(_213, _214, _215)));
    float _228 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _235 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _256 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_1) + cbTextureTilingScale._m0[5u].w));
    vec4 _275 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_1) + cbTextureTilingScale._m0[10u].w));
    float _288 = exp2(log2(_275.w * cbMtdParam._m0[25u].z) * cbMtdParam._m0[22u].x);
    float _289 = isnan(0.0) ? _288 : (isnan(_288) ? 0.0 : max(_288, 0.0));
    float _290 = isnan(1.0) ? _289 : (isnan(_289) ? 1.0 : min(_289, 1.0));
    vec4 _304 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _308 = _304.z;
    float _317 = exp2(log2(_308 * cbMtdParam._m0[22u].y) * cbMtdParam._m0[21u].y);
    float _318 = isnan(0.0) ? _317 : (isnan(_317) ? 0.0 : max(_317, 0.0));
    float _319 = isnan(1.0) ? _318 : (isnan(_318) ? 1.0 : min(_318, 1.0));
    float _340 = roundEven(5.0 - ((texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w)).x + (-0.02500000037252902984619140625)) * 8.0));
    float _341 = isnan(0.0) ? _340 : (isnan(_340) ? 0.0 : max(_340, 0.0));
    float _342 = isnan(4.0) ? _341 : (isnan(_341) ? 4.0 : min(_341, 4.0));
    float _355 = floor(_342);
    vec4 _358 = texture(sampler2DArray(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w, _355));
    vec4 _382 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _393 = cbMtdParam._m0[9u].x * _382.x;
    float _394 = cbMtdParam._m0[9u].y * _382.y;
    float _395 = cbMtdParam._m0[9u].z * _382.z;
    float _402 = (((cbMtdParam._m0[10u].x * _358.x) - _393) * _319) + _393;
    float _403 = (((cbMtdParam._m0[10u].y * _358.y) - _394) * _319) + _394;
    float _404 = (((cbMtdParam._m0[10u].z * _358.z) - _395) * _319) + _395;
    float _410 = exp2(log2(_304.w) * cbMtdParam._m0[22u].w);
    vec4 _423 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _443 = (((cbMtdParam._m0[16u].x * _423.x) - _402) * _410) + _402;
    float _444 = (((cbMtdParam._m0[16u].y * _423.y) - _403) * _410) + _403;
    float _445 = (((cbMtdParam._m0[16u].z * _423.z) - _404) * _410) + _404;
    vec4 _458 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _483 = (_275.x * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].x * _458.x) - _443) * _290) + _443);
    float _485 = (_275.y * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].y * _458.y) - _444) * _290) + _444);
    float _487 = (_275.z * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].z * _458.z) - _445) * _290) + _445);
    vec4 _500 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_17, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w));
    float _519 = TEXCOORD_3.x - ((cbMtdParam._m0[23u].x * (1.0 - TEXCOORD_3.x)) * (_256.x + 0.00999999977648258209228515625));
    float _521 = _519 * (cbMtdParam._m0[23u].z + 1.0);
    float _4021 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _522 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
    float _529 = (_522 * ((cbMtdParam._m0[11u].x * _500.x) - _483)) + _483;
    float _530 = (((cbMtdParam._m0[11u].y * _500.y) - _485) * _522) + _485;
    float _531 = (((cbMtdParam._m0[11u].z * _500.z) - _487) * _522) + _487;
    float _192[5];
    float _193[5];
    _192[0u] = cbMtdParam._m0[25u].w;
    _193[0u] = cbMtdParam._m0[26u].x;
    _192[1u] = cbMtdParam._m0[27u].w;
    _193[1u] = cbMtdParam._m0[28u].x;
    _192[2u] = cbMtdParam._m0[27u].y;
    _193[2u] = cbMtdParam._m0[27u].z;
    _192[3u] = cbMtdParam._m0[26u].w;
    _193[3u] = cbMtdParam._m0[27u].x;
    _192[4u] = cbMtdParam._m0[26u].y;
    _193[4u] = cbMtdParam._m0[26u].z;
    float _570 = isnan(0.0) ? _342 : (isnan(_342) ? 0.0 : max(_342, 0.0));
    uint _572 = uint(int(isnan(4.0) ? _570 : (isnan(_570) ? 4.0 : min(_570, 4.0))));
    float _579 = ((_193[_572] - cbMtdParam._m0[21u].z) * _319) + cbMtdParam._m0[21u].z;
    float _582 = ((cbMtdParam._m0[21u].w - _579) * _410) + _579;
    float _585 = ((cbMtdParam._m0[24u].y - _582) * _290) + _582;
    float _590 = (cbMtdParam._m0[23u].y + 1.0) * _519;
    float _4042 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _591 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
    float _593 = _585 - (_585 * _591);
    vec4 _607 = texture(sampler2DArray(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w, _355));
    vec4 _624 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _626 = _624.x;
    float _627 = _624.y;
    float _632 = cbMtdParam._m0[21u].x + _624.z;
    float _635 = (((_607.z + _192[_572]) - _632) * _319) + _632;
    vec4 _647 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_1) + cbTextureTilingScale._m0[11u].w));
    float _658 = (((_647.z - _635) + cbMtdParam._m0[25u].y) * _410) + _635;
    float _664 = ((((_308 * 2.0) * _658) - _658) * cbMtdParam._m0[23u].w) + _658;
    vec4 _677 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_1) + cbTextureTilingScale._m0[12u].w));
    float _688 = (((cbMtdParam._m0[22u].z + _677.z) - _664) * _290) + _664;
    vec4 _700 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _712 = ((_700.z - _688) * _591) + _688;
    vec4 _732 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _751 = ((_607.x - _626) * _319) + _626;
    float _752 = ((_607.y - _627) * _319) + _627;
    float _757 = ((_647.x - _751) * _410) + _751;
    float _758 = ((_647.y - _752) * _410) + _752;
    float _767 = ((((_677.x - _757) * _290) + _757) * 2.0) + (-1.0);
    float _768 = ((((_677.y - _758) * _290) + _758) * 2.0) + (-1.0);
    float _769 = dot(vec2(_767, _768), vec2(_767, _768));
    float _4053 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _774 = sqrt(1.0 - (isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0))));
    float _783 = ((cbMtdParam._m0[24u].z * ((_304.x * 2.0) + (-1.0))) + _767) + (((((_700.x * 2.0) + (-1.0)) * TEXCOORD_3.x) * cbMtdParam._m0[24u].w) * _591);
    float _784 = ((cbMtdParam._m0[24u].z * ((_304.y * 2.0) + (-1.0))) + _768) + (((((_700.y * 2.0) + (-1.0)) * TEXCOORD_3.y) * cbMtdParam._m0[24u].w) * _591);
    float _787 = fma(_774, _228 * NORMAL.x, fma(_784, _235 * TANGENT.x, (_221 * _213) * _783));
    float _790 = fma(_774, _228 * NORMAL.y, fma(_784, _235 * TANGENT.y, (_221 * _214) * _783));
    float _793 = fma(_774, _228 * NORMAL.z, fma(_784, _235 * TANGENT.z, (_221 * _215) * _783));
    float _797 = inversesqrt(dot(vec3(_787, _790, _793), vec3(_787, _790, _793)));
    float _798 = _797 * _787;
    float _799 = _797 * _790;
    float _800 = _797 * _793;
    float _4064 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _801 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
    float _4075 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _4086 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _4097 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _4108 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _805 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
    float _821 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _861 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _871 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _861);
    float _872 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _861);
    float _873 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _861);
    float _877 = inversesqrt(dot(vec3(_871, _872, _873), vec3(_871, _872, _873)));
    float _878 = _871 * _877;
    float _879 = _872 * _877;
    float _880 = _873 * _877;
    float _886 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _887 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _905 = fma(_800, cbSceneParam._m0[5u].z, fma(_799, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _798));
    float _908 = fma(_800, cbSceneParam._m0[6u].z, fma(_799, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _798));
    float _911 = fma(_800, cbSceneParam._m0[7u].z, fma(_799, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _798));
    uint _924 = uint(roundEven(NORMAL.w)) * 13u;
    uint _925 = _924 + 9u;
    uint _926 = _925 + uint(cbMatDynParam._m0[0u].w);
    float _932 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0)))) * cbInstanceData._m0[_926].x;
    float _933 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0)))) * cbInstanceData._m0[_926].y;
    float _934 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0)))) * cbInstanceData._m0[_926].z;
    float _4119 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
    float _935 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
    float _4130 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
    float _936 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
    float _4141 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
    float _937 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
    float _938 = 1.0 - _805;
    float _939 = _935 * _938;
    float _940 = _936 * _938;
    float _941 = _937 * _938;
    float _946 = (_935 + (-0.039999999105930328369140625)) * _805;
    float _947 = (_936 + (-0.039999999105930328369140625)) * _805;
    float _948 = (_937 + (-0.039999999105930328369140625)) * _805;
    float _949 = _946 + 0.039999999105930328369140625;
    float _951 = _947 + 0.039999999105930328369140625;
    float _952 = _948 + 0.039999999105930328369140625;
    vec4 _961 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _886, cbSceneParam._m0[86u].y * _887));
    float _964 = _961.x * TEXCOORD_3.w;
    float _965 = dot(vec3(_798, _799, _800), vec3(_878, _879, _880));
    float _968 = _965 * 2.0;
    float _972 = (_968 * _798) - _878;
    float _973 = (_968 * _799) - _879;
    float _974 = (_968 * _800) - _880;
    float _978 = abs(dot(vec3(_878, _879, _880), vec3(_798, _799, _800)));
    float _4152 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
    float _980 = sqrt(_801);
    float _991 = exp2((_980 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_980 * 3.0));
    float _997 = (1.0 - _991) * ((_980 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _998 = _991 * _980;
    float _1026 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1030 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1034 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1335;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1060 = fma(_1034, cbModelParam._m0[26u].z, fma(_1030, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1026));
        float _1064 = fma(_1034, cbModelParam._m0[27u].z, fma(_1030, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1026));
        float _1068 = fma(_1034, cbModelParam._m0[28u].z, fma(_1030, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1026));
        float _1093 = _1026 + _798;
        float _1094 = _1030 + _799;
        float _1095 = _1034 + _800;
        float _1105 = fma(_1095, cbModelParam._m0[26u].z, fma(_1094, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1093)) - _1060;
        float _1106 = fma(_1095, cbModelParam._m0[27u].z, fma(_1094, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1093)) - _1064;
        float _1107 = fma(_1095, cbModelParam._m0[28u].z, fma(_1094, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1093)) - _1068;
        float _1111 = inversesqrt(dot(vec3(_1105, _1106, _1107), vec3(_1105, _1106, _1107)));
        float _1124 = ((_1111 * _1105) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1060 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1125 = ((_1111 * _1106) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1064 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1126 = ((_1111 * _1107) / cbModelParam._m0[34u].z) + ((((((_1068 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1129 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1124, _1125, _1126), 0.0);
        vec4 _1136 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1124, _1125, _1126), 0.0);
        vec4 _1143 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1124, _1125, _1126), 0.0);
        vec4 _1150 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1124, _1125, _1126), 0.0);
        float _1163 = exp2((_1129.w + (-0.5)) * 20.0) * 2.0;
        float _1164 = _1163 * (_1129.x + (-0.5));
        float _1165 = _1163 * (_1129.y + (-0.5));
        float _1166 = _1163 * (_1129.z + (-0.5));
        float _1173 = exp2((_1136.w + (-0.5)) * 20.0) * 2.0;
        float _1174 = _1173 * (_1136.x + (-0.5));
        float _1175 = _1173 * (_1136.y + (-0.5));
        float _1176 = _1173 * (_1136.z + (-0.5));
        float _1183 = exp2((_1143.w + (-0.5)) * 20.0) * 2.0;
        float _1184 = _1183 * (_1143.x + (-0.5));
        float _1185 = _1183 * (_1143.y + (-0.5));
        float _1186 = _1183 * (_1143.z + (-0.5));
        float _1193 = exp2((_1150.w + (-0.5)) * 20.0) * 2.0;
        float _1194 = _1193 * (_1150.x + (-0.5));
        float _1195 = _1193 * (_1150.y + (-0.5));
        float _1196 = _1193 * (_1150.z + (-0.5));
        float _1197 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1198 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1199 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1200 = _1164 * 0.5;
        float _1201 = _1174 * 0.5;
        float _1202 = _1184 * 0.5;
        float _1203 = dot(vec3(_1200, _1201, _1202), vec3(_1200, _1201, _1202));
        float _1208 = (_1203 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1203);
        float _1217 = (dot(vec3(_798, _799, _800), vec3(_1208 * _1200, _1208 * _1201, _1208 * _1202)) + 1.0) * 0.5;
        float _4178 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1227 = sqrt(((_1201 * _1201) + (_1200 * _1200)) + (_1202 * _1202)) / (_1197 + 9.9999997473787516355514526367188e-06);
        float _4189 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1228 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
        float _1229 = _1228 * 2.0;
        float _1233 = (1.0 - _1228) / (_1228 + 1.0);
        float _4200 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1234 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
        float _1243 = ((((1.0 - _1234) * (_1229 + 2.0)) * exp2(log2(isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0))) * (_1229 + 1.0))) + _1234) * _1197;
        float _1244 = _1165 * 0.5;
        float _1245 = _1175 * 0.5;
        float _1246 = _1185 * 0.5;
        float _1247 = dot(vec3(_1244, _1245, _1246), vec3(_1244, _1245, _1246));
        float _1252 = (_1247 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1247);
        float _1260 = (dot(vec3(_798, _799, _800), vec3(_1252 * _1244, _1252 * _1245, _1252 * _1246)) + 1.0) * 0.5;
        float _4211 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1269 = sqrt(((_1245 * _1245) + (_1244 * _1244)) + (_1246 * _1246)) / (_1198 + 9.9999997473787516355514526367188e-06);
        float _4222 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1270 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
        float _1271 = _1270 * 2.0;
        float _1275 = (1.0 - _1270) / (_1270 + 1.0);
        float _4233 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1276 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
        float _1285 = ((((1.0 - _1276) * (_1271 + 2.0)) * exp2(log2(isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0))) * (_1271 + 1.0))) + _1276) * _1198;
        float _1286 = _1166 * 0.5;
        float _1287 = _1176 * 0.5;
        float _1288 = _1186 * 0.5;
        float _1289 = dot(vec3(_1286, _1287, _1288), vec3(_1286, _1287, _1288));
        float _1294 = (_1289 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1289);
        float _1302 = (dot(vec3(_798, _799, _800), vec3(_1294 * _1286, _1294 * _1287, _1294 * _1288)) + 1.0) * 0.5;
        float _4244 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1311 = sqrt(((_1287 * _1287) + (_1286 * _1286)) + (_1288 * _1288)) / (_1199 + 9.9999997473787516355514526367188e-06);
        float _4255 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1312 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
        float _1313 = _1312 * 2.0;
        float _1317 = (1.0 - _1312) / (_1312 + 1.0);
        float _4266 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1318 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
        float _1327 = ((((1.0 - _1318) * (_1313 + 2.0)) * exp2(log2(isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0))) * (_1313 + 1.0))) + _1318) * _1199;
        _1335 = _1166;
        _1337 = _1165;
        _1338 = _1164;
        _1339 = _1176;
        _1340 = _1175;
        _1341 = _1174;
        _1342 = _1186;
        _1343 = _1185;
        _1344 = _1184;
        _1345 = _1199;
        _1346 = _1198;
        _1347 = _1197;
        _1348 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0)));
        _1349 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0)));
        _1350 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0)));
    }
    else
    {
        _1335 = _1336;
        _1337 = _1336;
        _1338 = _1336;
        _1339 = _1336;
        _1340 = _1336;
        _1341 = _1336;
        _1342 = _1336;
        _1343 = _1336;
        _1344 = _1336;
        _1345 = _1336;
        _1346 = _1336;
        _1347 = _1336;
        _1348 = 0.0;
        _1349 = 0.0;
        _1350 = 0.0;
    }
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    float _1658;
    float _1659;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1376 = fma(_1034, cbModelParam._m0[30u].z, fma(_1030, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1026));
        float _1380 = fma(_1034, cbModelParam._m0[31u].z, fma(_1030, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1026));
        float _1384 = fma(_1034, cbModelParam._m0[32u].z, fma(_1030, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1026));
        float _1407 = _1026 + _798;
        float _1408 = _1030 + _799;
        float _1409 = _1034 + _800;
        float _1419 = fma(_1409, cbModelParam._m0[30u].z, fma(_1408, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1407)) - _1376;
        float _1420 = fma(_1409, cbModelParam._m0[31u].z, fma(_1408, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1407)) - _1380;
        float _1421 = fma(_1409, cbModelParam._m0[32u].z, fma(_1408, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1407)) - _1384;
        float _1425 = inversesqrt(dot(vec3(_1419, _1420, _1421), vec3(_1419, _1420, _1421)));
        float _1438 = ((_1425 * _1419) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1376 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1439 = ((_1425 * _1420) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1380 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1440 = ((_1425 * _1421) / cbModelParam._m0[35u].z) + ((((((_1384 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1442 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1438, _1439, _1440), 0.0);
        vec4 _1449 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1438, _1439, _1440), 0.0);
        vec4 _1456 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1438, _1439, _1440), 0.0);
        vec4 _1463 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1438, _1439, _1440), 0.0);
        float _1475 = exp2((_1442.w + (-0.5)) * 20.0) * 2.0;
        float _1476 = _1475 * (_1442.x + (-0.5));
        float _1477 = _1475 * (_1442.y + (-0.5));
        float _1478 = _1475 * (_1442.z + (-0.5));
        float _1485 = exp2((_1449.w + (-0.5)) * 20.0) * 2.0;
        float _1486 = _1485 * (_1449.x + (-0.5));
        float _1487 = _1485 * (_1449.y + (-0.5));
        float _1488 = _1485 * (_1449.z + (-0.5));
        float _1495 = exp2((_1456.w + (-0.5)) * 20.0) * 2.0;
        float _1496 = _1495 * (_1456.x + (-0.5));
        float _1497 = _1495 * (_1456.y + (-0.5));
        float _1498 = _1495 * (_1456.z + (-0.5));
        float _1505 = exp2((_1463.w + (-0.5)) * 20.0) * 2.0;
        float _1506 = _1505 * (_1463.x + (-0.5));
        float _1507 = _1505 * (_1463.y + (-0.5));
        float _1508 = _1505 * (_1463.z + (-0.5));
        float _1509 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1510 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1511 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1512 = _1476 * 0.5;
        float _1513 = _1486 * 0.5;
        float _1514 = _1496 * 0.5;
        float _1515 = dot(vec3(_1512, _1513, _1514), vec3(_1512, _1513, _1514));
        float _1520 = (_1515 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1515);
        float _1528 = (dot(vec3(_798, _799, _800), vec3(_1520 * _1512, _1520 * _1513, _1520 * _1514)) + 1.0) * 0.5;
        float _4307 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1537 = sqrt(((_1513 * _1513) + (_1512 * _1512)) + (_1514 * _1514)) / (_1509 + 9.9999997473787516355514526367188e-06);
        float _4318 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1538 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
        float _1539 = _1538 * 2.0;
        float _1543 = (1.0 - _1538) / (_1538 + 1.0);
        float _4329 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
        float _1544 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
        float _1553 = ((((1.0 - _1544) * (_1539 + 2.0)) * exp2(log2(isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0))) * (_1539 + 1.0))) + _1544) * _1509;
        float _1554 = _1477 * 0.5;
        float _1555 = _1487 * 0.5;
        float _1556 = _1497 * 0.5;
        float _1557 = dot(vec3(_1554, _1555, _1556), vec3(_1554, _1555, _1556));
        float _1562 = (_1557 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1557);
        float _1570 = (dot(vec3(_798, _799, _800), vec3(_1562 * _1554, _1562 * _1555, _1562 * _1556)) + 1.0) * 0.5;
        float _4340 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1579 = sqrt(((_1555 * _1555) + (_1554 * _1554)) + (_1556 * _1556)) / (_1510 + 9.9999997473787516355514526367188e-06);
        float _4351 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1580 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
        float _1581 = _1580 * 2.0;
        float _1585 = (1.0 - _1580) / (_1580 + 1.0);
        float _4362 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
        float _1586 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
        float _1595 = ((((1.0 - _1586) * (_1581 + 2.0)) * exp2(log2(isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0))) * (_1581 + 1.0))) + _1586) * _1510;
        float _1596 = _1478 * 0.5;
        float _1597 = _1488 * 0.5;
        float _1598 = _1498 * 0.5;
        float _1599 = dot(vec3(_1596, _1597, _1598), vec3(_1596, _1597, _1598));
        float _1604 = (_1599 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1599);
        float _1612 = (dot(vec3(_798, _799, _800), vec3(_1604 * _1596, _1604 * _1597, _1604 * _1598)) + 1.0) * 0.5;
        float _4373 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1621 = sqrt(((_1597 * _1597) + (_1596 * _1596)) + (_1598 * _1598)) / (_1511 + 9.9999997473787516355514526367188e-06);
        float _4384 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1622 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
        float _1623 = _1622 * 2.0;
        float _1627 = (1.0 - _1622) / (_1622 + 1.0);
        float _4395 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
        float _1628 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
        float _1637 = ((((1.0 - _1628) * (_1623 + 2.0)) * exp2(log2(isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0))) * (_1623 + 1.0))) + _1628) * _1511;
        _1645 = _1478;
        _1646 = _1477;
        _1647 = _1476;
        _1648 = _1488;
        _1649 = _1487;
        _1650 = _1486;
        _1651 = _1498;
        _1652 = _1497;
        _1653 = _1496;
        _1654 = _1511;
        _1655 = _1510;
        _1656 = _1509;
        _1657 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0)));
        _1658 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0)));
        _1659 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0)));
    }
    else
    {
        _1645 = _1336;
        _1646 = _1336;
        _1647 = _1336;
        _1648 = _1336;
        _1649 = _1336;
        _1650 = _1336;
        _1651 = _1336;
        _1652 = _1336;
        _1653 = _1336;
        _1654 = _1336;
        _1655 = _1336;
        _1656 = _1336;
        _1657 = 0.0;
        _1658 = 0.0;
        _1659 = 0.0;
    }
    float _1669 = (cbModelParam._m0[1u].x * (_1657 - _1348)) + _1348;
    float _1670 = (cbModelParam._m0[1u].x * (_1658 - _1349)) + _1349;
    float _1671 = (cbModelParam._m0[1u].x * (_1659 - _1350)) + _1350;
    float _1692 = fma(_1671, cbSceneParam._m0[89u].z, fma(_1670, cbSceneParam._m0[89u].y, _1669 * cbSceneParam._m0[89u].x));
    float _1695 = fma(_1671, cbSceneParam._m0[90u].z, fma(_1670, cbSceneParam._m0[90u].y, _1669 * cbSceneParam._m0[90u].x));
    float _1698 = fma(_1671, cbSceneParam._m0[91u].z, fma(_1670, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1669));
    float _1713 = _972 * 0.5;
    float _1714 = _973 * 0.5;
    float _1715 = _974 * 0.5;
    float _1716 = dot(vec4(_1713, _1714, _1715, 1.0), vec4(_1647, _1650, _1653, _1656));
    float _1719 = dot(vec4(_1713, _1714, _1715, 1.0), vec4(_1646, _1649, _1652, _1655));
    float _1722 = dot(vec4(_1713, _1714, _1715, 1.0), vec4(_1645, _1648, _1651, _1654));
    float _1756;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1729 = dot(vec4(_1713, _1714, _1715, 1.0), vec4(_1335, _1339, _1342, _1345));
        float _1733 = dot(vec4(_1713, _1714, _1715, 1.0), vec4(_1337, _1340, _1343, _1346));
        float _1737 = dot(vec4(_1713, _1714, _1715, 1.0), vec4(_1338, _1341, _1344, _1347));
        float _1744 = dot(vec4(cbModelParam._m0[39u]), vec4(_1713, _1714, _1715, 1.0));
        _1756 = dot(vec3(isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0)), isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0)), isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1744) ? 0.0 : (isnan(0.0) ? _1744 : max(0.0, _1744))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1756 = 1.0;
    }
    float _1767;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1758 = dot(vec4(cbModelParam._m0[40u]), vec4(_1713, _1714, _1715, 1.0));
        _1767 = dot(vec3(isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0)), isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0)), isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1758) ? 0.0 : (isnan(0.0) ? _1758 : max(0.0, _1758))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1767 = 1.0;
    }
    float _1771 = (_1767 * cbModelParam._m0[1u].x) + (_1756 * (1.0 - cbModelParam._m0[1u].x));
    float _1781 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _801);
    float _1782 = isnan(_1781) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1781 : min(cbModelParam._m0[25u].z, _1781));
    float _1863;
    float _1865;
    float _1867;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1830 = fma(_1034, cbModelParam._m0[13u].z, fma(_1030, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1026)) + cbModelParam._m0[13u].w;
        float _1834 = fma(_1034, cbModelParam._m0[14u].z, fma(_1030, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1026)) + cbModelParam._m0[14u].w;
        float _1838 = fma(_1034, cbModelParam._m0[15u].z, fma(_1030, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1026)) + cbModelParam._m0[15u].w;
        float _1841 = fma(_974, cbModelParam._m0[13u].z, fma(_973, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _972));
        float _1844 = fma(_974, cbModelParam._m0[14u].z, fma(_973, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _972));
        float _1847 = fma(_974, cbModelParam._m0[15u].z, fma(_973, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _972));
        float _1875;
        if (_1841 > 0.0)
        {
            _1875 = abs((1.0 - _1830) / _1841);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1841 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1830 + 1.0) / _1841);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1875 = frontier_phi_14_12_ladder;
        }
        float _2047;
        if (_1844 > 0.0)
        {
            _2047 = abs((1.0 - _1834) / _1844);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1844 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1834 + 1.0) / _1844);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2047 = frontier_phi_23_19_ladder;
        }
        float _2342;
        if (_1847 > 0.0)
        {
            _2342 = abs((1.0 - _1838) / _1847);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1847 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1838 + 1.0) / _1847);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2342 = frontier_phi_35_30_ladder;
        }
        float _2344 = isnan(_2047) ? _1875 : (isnan(_1875) ? _2047 : min(_1875, _2047));
        float _2345 = isnan(_2342) ? _2344 : (isnan(_2344) ? _2342 : min(_2344, _2342));
        float _2349 = (_2345 * _1841) + _1830;
        float _2350 = (_2345 * _1844) + _1834;
        float _2351 = (_2345 * _1847) + _1838;
        float _2352 = _2345 * 9.9999997473787516355514526367188e-05;
        float _2354 = (-1.0) - _2352;
        float _2356 = _2352 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2351 > _2356) || ((_2351 < _2354) || ((_2350 > _2356) || ((_2350 < _2354) || ((_2349 < _2354) || (_2349 > _2356))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2496 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2351, cbModelParam._m0[9u].z, fma(_2350, cbModelParam._m0[9u].y, _2349 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2351, cbModelParam._m0[10u].z, fma(_2350, cbModelParam._m0[10u].y, _2349 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2351, cbModelParam._m0[11u].z, fma(_2350, cbModelParam._m0[11u].y, _2349 * cbModelParam._m0[11u].x))), _1782);
            frontier_phi_13_35_ladder = _2496.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2496.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2496.x * cbModelParam._m0[1u].y;
        }
        _1863 = frontier_phi_13_35_ladder_2;
        _1865 = frontier_phi_13_35_ladder_1;
        _1867 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1851 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_972, _973, _974), _1782);
        _1863 = _1851.x * cbModelParam._m0[1u].y;
        _1865 = _1851.y * cbModelParam._m0[1u].y;
        _1867 = _1851.z * cbModelParam._m0[1u].y;
    }
    float _1871 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _801);
    float _1872 = isnan(_1871) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1871 : min(cbModelParam._m0[25u].w, _1871));
    float _1962;
    float _1964;
    float _1966;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1926 = fma(_1034, cbModelParam._m0[21u].z, fma(_1030, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1026)) + cbModelParam._m0[21u].w;
        float _1930 = fma(_1034, cbModelParam._m0[22u].z, fma(_1030, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1026)) + cbModelParam._m0[22u].w;
        float _1934 = fma(_1034, cbModelParam._m0[23u].z, fma(_1030, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1026)) + cbModelParam._m0[23u].w;
        float _1937 = fma(_974, cbModelParam._m0[21u].z, fma(_973, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _972));
        float _1940 = fma(_974, cbModelParam._m0[22u].z, fma(_973, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _972));
        float _1943 = fma(_974, cbModelParam._m0[23u].z, fma(_973, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _972));
        float _2052;
        if (_1937 > 0.0)
        {
            _2052 = abs((1.0 - _1926) / _1937);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1937 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1926 + 1.0) / _1937);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2052 = frontier_phi_25_21_ladder;
        }
        float _2369;
        if (_1940 > 0.0)
        {
            _2369 = abs((1.0 - _1930) / _1940);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1940 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1930 + 1.0) / _1940);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2369 = frontier_phi_37_32_ladder;
        }
        float _2707;
        if (_1943 > 0.0)
        {
            _2707 = abs((1.0 - _1934) / _1943);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1943 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1934 + 1.0) / _1943);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2707 = frontier_phi_47_44_ladder;
        }
        float _2709 = isnan(_2369) ? _2052 : (isnan(_2052) ? _2369 : min(_2052, _2369));
        float _2710 = isnan(_2707) ? _2709 : (isnan(_2709) ? _2707 : min(_2709, _2707));
        float _2714 = (_2710 * _1937) + _1926;
        float _2715 = (_2710 * _1940) + _1930;
        float _2716 = (_2710 * _1943) + _1934;
        float _2717 = _2710 * 9.9999997473787516355514526367188e-05;
        float _2718 = (-1.0) - _2717;
        float _2720 = _2717 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2716 > _2720) || ((_2716 < _2718) || ((_2715 > _2720) || ((_2715 < _2718) || ((_2714 < _2718) || (_2714 > _2720))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2838 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2716, cbModelParam._m0[17u].z, fma(_2715, cbModelParam._m0[17u].y, _2714 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2716, cbModelParam._m0[18u].z, fma(_2715, cbModelParam._m0[18u].y, _2714 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2716, cbModelParam._m0[19u].z, fma(_2715, cbModelParam._m0[19u].y, _2714 * cbModelParam._m0[19u].x))), _1872);
            frontier_phi_22_47_ladder = _2838.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2838.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2838.x * cbModelParam._m0[1u].z;
        }
        _1962 = frontier_phi_22_47_ladder_2;
        _1964 = frontier_phi_22_47_ladder_1;
        _1966 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1946 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_972, _973, _974), _1872);
        _1962 = _1946.x * cbModelParam._m0[1u].z;
        _1964 = _1946.y * cbModelParam._m0[1u].z;
        _1966 = _1946.z * cbModelParam._m0[1u].z;
    }
    float _1979 = (((_997 * _949) + _998) * _964) * ((cbModelParam._m0[1u].w * (_1962 - _1863)) + _1863);
    float _1981 = (((_997 * _951) + _998) * _964) * ((cbModelParam._m0[1u].w * (_1964 - _1865)) + _1865);
    float _1983 = (((_997 * _952) + _998) * _964) * ((cbModelParam._m0[1u].w * (_1966 - _1867)) + _1867);
    float _1986 = fma(_1983, cbSceneParam._m0[89u].z, fma(_1981, cbSceneParam._m0[89u].y, _1979 * cbSceneParam._m0[89u].x));
    float _1989 = fma(_1983, cbSceneParam._m0[90u].z, fma(_1981, cbSceneParam._m0[90u].y, _1979 * cbSceneParam._m0[90u].x));
    float _1992 = fma(_1983, cbSceneParam._m0[91u].z, fma(_1981, cbSceneParam._m0[91u].y, _1979 * cbSceneParam._m0[91u].x));
    float _2026 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2030 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2034 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2038 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2039 = _2026 / _2038;
    float _2040 = _2030 / _2038;
    float _2041 = _2034 / _2038;
    float _2188;
    float _2189;
    float _2190;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2068 = ((uint(_2041 > cbSceneParam._m0[59u].y) + uint(_2041 > cbSceneParam._m0[59u].x)) + uint(_2041 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2069 = _2068 + 43u;
        uint _2077 = _2068 + 44u;
        uint _2085 = _2068 + 45u;
        uint _2093 = _2068 + 46u;
        float _2104 = fma(_2038, cbSceneParam._m0[_2069].w, fma(_2034, cbSceneParam._m0[_2069].z, fma(_2030, cbSceneParam._m0[_2069].y, _2026 * cbSceneParam._m0[_2069].x)));
        float _2108 = fma(_2038, cbSceneParam._m0[_2077].w, fma(_2034, cbSceneParam._m0[_2077].z, fma(_2030, cbSceneParam._m0[_2077].y, _2026 * cbSceneParam._m0[_2077].x)));
        float _2116 = fma(_2038, cbSceneParam._m0[_2093].w, fma(_2034, cbSceneParam._m0[_2093].z, fma(_2030, cbSceneParam._m0[_2093].y, _2026 * cbSceneParam._m0[_2093].x)));
        float _2121 = cbSceneParam._m0[33u].z * _2116;
        float _2123 = cbSceneParam._m0[33u].w * _2116;
        float _2126 = fma(_2038, cbSceneParam._m0[_2085].w, fma(_2034, cbSceneParam._m0[_2085].z, fma(_2030, cbSceneParam._m0[_2085].y, _2026 * cbSceneParam._m0[_2085].x))) / _2116;
        float _2174 = (cbSceneParam._m0[33u].x - sqrt(((_2040 * _2040) + (_2039 * _2039)) + (_2041 * _2041))) * cbSceneParam._m0[33u].y;
        float _4521 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
        float _2181 = (isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2121 + _2104) / _2116, (_2123 + _2108) / _2116), _2126), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2123 + _2104) / _2116, (_2108 - _2121) / _2116), _2126), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2104 - _2121) / _2116, (_2108 - _2123) / _2116), _2126), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2104 - _2123) / _2116, (_2121 + _2108) / _2116), _2126), 0.0)).x), vec4(0.25)));
        _2188 = 1.0 - (_2181 * cbSceneParam._m0[34u].x);
        _2189 = 1.0 - (_2181 * cbSceneParam._m0[34u].y);
        _2190 = 1.0 - (_2181 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2188 = 1.0;
        _2189 = 1.0;
        _2190 = 1.0;
    }
    float _2254;
    float _2256;
    float _2258;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2242 = fma(_2038, cbSceneParam._m0[63u].w, fma(_2034, cbSceneParam._m0[63u].z, fma(_2030, cbSceneParam._m0[63u].y, _2026 * cbSceneParam._m0[63u].x)));
        float _2243 = fma(_2038, cbSceneParam._m0[60u].w, fma(_2034, cbSceneParam._m0[60u].z, fma(_2030, cbSceneParam._m0[60u].y, _2026 * cbSceneParam._m0[60u].x))) / _2242;
        float _2244 = fma(_2038, cbSceneParam._m0[61u].w, fma(_2034, cbSceneParam._m0[61u].z, fma(_2030, cbSceneParam._m0[61u].y, _2026 * cbSceneParam._m0[61u].x))) / _2242;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2243 >= cbSceneParam._m0[64u].x) && (_2244 >= cbSceneParam._m0[64u].y)) && (_2243 <= cbSceneParam._m0[64u].z)) && (_2244 <= cbSceneParam._m0[64u].w))
        {
            float _2382 = fma(_2038, cbSceneParam._m0[62u].w, fma(_2034, cbSceneParam._m0[62u].z, fma(_2030, cbSceneParam._m0[62u].y, _2026 * cbSceneParam._m0[62u].x))) / _2242;
            float _2386 = isnan(cbSceneParam._m0[41u].w) ? _2382 : (isnan(_2382) ? cbSceneParam._m0[41u].w : max(_2382, cbSceneParam._m0[41u].w));
            float _2429 = (cbSceneParam._m0[33u].x - sqrt(((_2040 * _2040) + (_2039 * _2039)) + (_2041 * _2041))) * cbSceneParam._m0[33u].y;
            float _4537 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
            float _2436 = (isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2243, cbSceneParam._m0[33u].w + _2244), _2386), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2243, _2244 - cbSceneParam._m0[33u].z), _2386), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2243 - cbSceneParam._m0[33u].z, _2244 - cbSceneParam._m0[33u].w), _2386), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2243 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2244), _2386), 0.0)).x), vec4(0.25)));
            float _2440 = 1.0 - (_2436 * cbSceneParam._m0[34u].x);
            float _2441 = 1.0 - (_2436 * cbSceneParam._m0[34u].y);
            float _2442 = 1.0 - (_2436 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2442) ? _2190 : (isnan(_2190) ? _2442 : min(_2190, _2442));
            frontier_phi_34_33_ladder_1 = isnan(_2441) ? _2189 : (isnan(_2189) ? _2441 : min(_2189, _2441));
            frontier_phi_34_33_ladder_2 = isnan(_2440) ? _2188 : (isnan(_2188) ? _2440 : min(_2188, _2440));
        }
        else
        {
            frontier_phi_34_33_ladder = _2190;
            frontier_phi_34_33_ladder_1 = _2189;
            frontier_phi_34_33_ladder_2 = _2188;
        }
        _2254 = frontier_phi_34_33_ladder_2;
        _2256 = frontier_phi_34_33_ladder_1;
        _2258 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2254 = _2188;
        _2256 = _2189;
        _2258 = _2190;
    }
    uvec4 _2263 = floatBitsToUint(cbInstanceData._m0[_924 + 5u]);
    uint _2265 = _2263.x * 14u;
    uint _2266 = _2265 + 13u;
    float _2273 = _964 + (-1.0);
    float _2278 = (cbLight._m0[_2266].x * _2273) + 1.0;
    float _2279 = (cbLight._m0[_2266].y * _2273) + 1.0;
    float _2280 = (cbLight._m0[_2266].z * _2273) + 1.0;
    float _2281 = (cbLight._m0[_2266].w * _2273) + 1.0;
    uint _2282 = _2265 + 5u;
    float _2288 = isnan(1.0) ? _2279 : (isnan(_2279) ? 1.0 : min(_2279, 1.0));
    uint _2292 = _2265 + 4u;
    float _2301 = isnan(1.0) ? _2278 : (isnan(_2278) ? 1.0 : min(_2278, 1.0));
    uint _2305 = _2265 | 1u;
    float _2316 = dot(vec3(cbLight._m0[_2265].xyz), vec3(_798, _799, _800));
    float _2319 = dot(vec3(cbLight._m0[_2305].xyz), vec3(_798, _799, _800));
    float _4573 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
    float _4584 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
    float _2324 = (isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0))) * 0.3183098733425140380859375;
    float _2326 = (isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0))) * 0.3183098733425140380859375;
    float _2333 = ((cbLight._m0[_2282].x * _2288) * _2326) + (((cbLight._m0[_2292].x * _2254) * _2301) * _2324);
    float _2334 = ((_2288 * cbLight._m0[_2282].y) * _2326) + (((cbLight._m0[_2292].y * _2256) * _2301) * _2324);
    float _2335 = ((_2288 * cbLight._m0[_2282].z) * _2326) + (((cbLight._m0[_2292].z * _2258) * _2301) * _2324);
    uvec4 _2339 = floatBitsToUint(cbLight._m0[_2265 + 12u]);
    bool _2341 = _2339.x == 0u;
    float _2443;
    float _2445;
    float _2447;
    if (_2341)
    {
        _2443 = _2333;
        _2445 = _2334;
        _2447 = _2335;
    }
    else
    {
        uint _2451 = _2265 + 6u;
        float _2467 = (dot(vec3(cbLight._m0[_2265 + 2u].xyz), vec3(_798, _799, _800)) * 0.5) + 0.5;
        float _2468 = _2467 * _2467;
        float _4595 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
        float _2469 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
        float _2470 = isnan(1.0) ? _2280 : (isnan(_2280) ? 1.0 : min(_2280, 1.0));
        _2443 = (((cbLight._m0[_2451].x * 0.3183098733425140380859375) * _2469) * _2470) + _2333;
        _2445 = (((cbLight._m0[_2451].y * 0.3183098733425140380859375) * _2469) * _2470) + _2334;
        _2447 = (((cbLight._m0[_2451].z * 0.3183098733425140380859375) * _2469) * _2470) + _2335;
    }
    bool _2450 = _2339.y == 0u;
    float _2505;
    float _2507;
    float _2509;
    if (_2450)
    {
        _2505 = _2443;
        _2507 = _2445;
        _2509 = _2447;
    }
    else
    {
        uint _2678 = _2265 + 7u;
        float _2694 = (dot(vec3(cbLight._m0[_2265 + 3u].xyz), vec3(_798, _799, _800)) * 0.5) + 0.5;
        float _2695 = _2694 * _2694;
        float _4611 = isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : max(_2695, 0.0));
        float _2696 = isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0));
        float _2697 = isnan(1.0) ? _2281 : (isnan(_2281) ? 1.0 : min(_2281, 1.0));
        _2505 = (((cbLight._m0[_2678].x * 0.3183098733425140380859375) * _2696) * _2697) + _2443;
        _2507 = (((cbLight._m0[_2678].y * 0.3183098733425140380859375) * _2696) * _2697) + _2445;
        _2509 = (((cbLight._m0[_2678].z * 0.3183098733425140380859375) * _2696) * _2697) + _2447;
    }
    uint _2512 = _2265 + 8u;
    float _2525 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2265].w)) * _801) * 0.949999988079071044921875);
    float _2526 = _2525 * _2525;
    float _2527 = cbLight._m0[_2265].x + _878;
    float _2528 = cbLight._m0[_2265].y + _879;
    float _2529 = cbLight._m0[_2265].z + _880;
    float _2533 = inversesqrt(dot(vec3(_2527, _2528, _2529), vec3(_2527, _2528, _2529)));
    float _2534 = _2533 * _2527;
    float _2535 = _2533 * _2528;
    float _2536 = _2533 * _2529;
    float _2537 = dot(vec3(_798, _799, _800), vec3(cbLight._m0[_2265].xyz));
    float _4627 = isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0));
    float _2540 = isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0));
    float _4638 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
    float _2541 = isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0));
    float _2542 = dot(vec3(_798, _799, _800), vec3(_2534, _2535, _2536));
    float _4649 = isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0));
    float _2545 = isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0));
    float _2546 = dot(vec3(cbLight._m0[_2265].xyz), vec3(_2534, _2535, _2536));
    float _4660 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0));
    float _2550 = _2526 * _2526;
    float _2554 = ((_2545 * _2545) * (_2550 + (-1.0))) + 1.0;
    float _2562 = exp2(log2(1.0 - (isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0)))) * 5.0);
    float _2563 = 0.959999978542327880859375 - _946;
    float _2565 = 0.959999978542327880859375 - _947;
    float _2566 = 0.959999978542327880859375 - _948;
    float _2573 = 1.0 - _2526;
    float _2584 = (0.5 / (((_2541 * ((_2540 * _2573) + _2526)) + 9.9999999392252902907785028219223e-09) + (((_2541 * _2573) + _2526) * _2540))) * _2540;
    float _4671 = isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : max(_2584, 0.0));
    float _2586 = (isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0))) * (_2550 / ((_2554 * _2554) * 3.141590118408203125));
    uint _2600 = _2265 + 9u;
    float _2611 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2305].w)) * _801) * 0.949999988079071044921875);
    float _2612 = _2611 * _2611;
    float _2613 = cbLight._m0[_2305].x + _878;
    float _2614 = cbLight._m0[_2305].y + _879;
    float _2615 = cbLight._m0[_2305].z + _880;
    float _2619 = inversesqrt(dot(vec3(_2613, _2614, _2615), vec3(_2613, _2614, _2615)));
    float _2620 = _2619 * _2613;
    float _2621 = _2619 * _2614;
    float _2622 = _2619 * _2615;
    float _2623 = dot(vec3(_798, _799, _800), vec3(cbLight._m0[_2305].xyz));
    float _4682 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0));
    float _2626 = isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0));
    float _2627 = dot(vec3(_798, _799, _800), vec3(_2620, _2621, _2622));
    float _4693 = isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0));
    float _2630 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
    float _2631 = dot(vec3(cbLight._m0[_2305].xyz), vec3(_2620, _2621, _2622));
    float _4704 = isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0));
    float _2635 = _2612 * _2612;
    float _2639 = ((_2630 * _2630) * (_2635 + (-1.0))) + 1.0;
    float _2646 = exp2(log2(1.0 - (isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0)))) * 5.0);
    float _2653 = 1.0 - _2612;
    float _2663 = (0.5 / (((_2541 * ((_2626 * _2653) + _2612)) + 9.9999999392252902907785028219223e-09) + (((_2541 * _2653) + _2612) * _2626))) * _2626;
    float _4715 = isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : max(_2663, 0.0));
    float _2665 = (isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0))) * (_2635 / ((_2639 * _2639) * 3.141590118408203125));
    float _2675 = (((((_2646 * _2563) + _949) * cbLight._m0[_2600].x) * _2665) * _2288) + ((((cbLight._m0[_2512].x * _2254) * ((_2562 * _2563) + _949)) * _2586) * _2301);
    float _2676 = (((((_2646 * _2565) + _951) * cbLight._m0[_2600].y) * _2665) * _2288) + ((((cbLight._m0[_2512].y * _2256) * ((_2562 * _2565) + _951)) * _2586) * _2301);
    float _2677 = (((((_2646 * _2566) + _952) * cbLight._m0[_2600].z) * _2665) * _2288) + ((((cbLight._m0[_2512].z * _2258) * ((_2562 * _2566) + _952)) * _2586) * _2301);
    float _2733;
    float _2735;
    float _2737;
    if (_2341)
    {
        _2733 = _2675;
        _2735 = _2676;
        _2737 = _2677;
    }
    else
    {
        uint _2739 = _2265 + 2u;
        uint _2743 = _2265 + 10u;
        float _2757 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2739].w)) * _801) * 0.949999988079071044921875);
        float _2758 = _2757 * _2757;
        float _2759 = cbLight._m0[_2739].x + _878;
        float _2760 = cbLight._m0[_2739].y + _879;
        float _2761 = cbLight._m0[_2739].z + _880;
        float _2765 = inversesqrt(dot(vec3(_2759, _2760, _2761), vec3(_2759, _2760, _2761)));
        float _2766 = _2765 * _2759;
        float _2767 = _2765 * _2760;
        float _2768 = _2765 * _2761;
        float _2769 = dot(vec3(_798, _799, _800), vec3(cbLight._m0[_2739].xyz));
        float _4726 = isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : max(_2769, 0.0));
        float _2772 = isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0));
        float _2773 = dot(vec3(_798, _799, _800), vec3(_2766, _2767, _2768));
        float _4737 = isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : max(_2773, 0.0));
        float _2776 = isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0));
        float _2777 = dot(vec3(cbLight._m0[_2739].xyz), vec3(_2766, _2767, _2768));
        float _4748 = isnan(0.0) ? _2777 : (isnan(_2777) ? 0.0 : max(_2777, 0.0));
        float _2781 = _2758 * _2758;
        float _2785 = ((_2776 * _2776) * (_2781 + (-1.0))) + 1.0;
        float _2792 = exp2(log2(1.0 - (isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0)))) * 5.0);
        float _2799 = 1.0 - _2758;
        float _2809 = (0.5 / (((_2541 * ((_2772 * _2799) + _2758)) + 9.9999999392252902907785028219223e-09) + (((_2541 * _2799) + _2758) * _2772))) * _2772;
        float _4759 = isnan(0.0) ? _2809 : (isnan(_2809) ? 0.0 : max(_2809, 0.0));
        float _2811 = (isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0))) * (_2781 / ((_2785 * _2785) * 3.141590118408203125));
        float _2812 = isnan(1.0) ? _2280 : (isnan(_2280) ? 1.0 : min(_2280, 1.0));
        _2733 = (((((_2792 * _2563) + _949) * cbLight._m0[_2743].x) * _2811) * _2812) + _2675;
        _2735 = (((((_2792 * _2565) + _951) * cbLight._m0[_2743].y) * _2811) * _2812) + _2676;
        _2737 = (((((_2792 * _2566) + _952) * cbLight._m0[_2743].z) * _2811) * _2812) + _2677;
    }
    float _2843;
    float _2845;
    float _2847;
    if (_2450)
    {
        _2843 = _2733;
        _2845 = _2735;
        _2847 = _2737;
    }
    else
    {
        uint _2854 = _2265 + 3u;
        uint _2858 = _2265 + 11u;
        float _2872 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2854].w)) * _801) * 0.949999988079071044921875);
        float _2873 = _2872 * _2872;
        float _2874 = cbLight._m0[_2854].x + _878;
        float _2875 = cbLight._m0[_2854].y + _879;
        float _2876 = cbLight._m0[_2854].z + _880;
        float _2880 = inversesqrt(dot(vec3(_2874, _2875, _2876), vec3(_2874, _2875, _2876)));
        float _2881 = _2880 * _2874;
        float _2882 = _2880 * _2875;
        float _2883 = _2880 * _2876;
        float _2884 = dot(vec3(_798, _799, _800), vec3(cbLight._m0[_2854].xyz));
        float _4775 = isnan(0.0) ? _2884 : (isnan(_2884) ? 0.0 : max(_2884, 0.0));
        float _2887 = isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0));
        float _2888 = dot(vec3(_798, _799, _800), vec3(_2881, _2882, _2883));
        float _4786 = isnan(0.0) ? _2888 : (isnan(_2888) ? 0.0 : max(_2888, 0.0));
        float _2891 = isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0));
        float _2892 = dot(vec3(cbLight._m0[_2854].xyz), vec3(_2881, _2882, _2883));
        float _4797 = isnan(0.0) ? _2892 : (isnan(_2892) ? 0.0 : max(_2892, 0.0));
        float _2896 = _2873 * _2873;
        float _2900 = ((_2891 * _2891) * (_2896 + (-1.0))) + 1.0;
        float _2907 = exp2(log2(1.0 - (isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0)))) * 5.0);
        float _2914 = 1.0 - _2873;
        float _2924 = (0.5 / (((_2541 * ((_2887 * _2914) + _2873)) + 9.9999999392252902907785028219223e-09) + (((_2541 * _2914) + _2873) * _2887))) * _2887;
        float _4808 = isnan(0.0) ? _2924 : (isnan(_2924) ? 0.0 : max(_2924, 0.0));
        float _2926 = (isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0))) * (_2896 / ((_2900 * _2900) * 3.141590118408203125));
        float _2927 = isnan(1.0) ? _2281 : (isnan(_2281) ? 1.0 : min(_2281, 1.0));
        _2843 = (((((_2907 * _2563) + _949) * cbLight._m0[_2858].x) * _2926) * _2927) + _2733;
        _2845 = (((((_2907 * _2565) + _951) * cbLight._m0[_2858].y) * _2926) * _2927) + _2735;
        _2847 = (((((_2907 * _2566) + _952) * cbLight._m0[_2858].z) * _2926) * _2927) + _2737;
    }
    float _2993;
    float _2995;
    float _2997;
    float _2999;
    float _3001;
    float _3003;
    if (_2263.y == 0u)
    {
        uvec4 _2948 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2949 = _2948.x;
        uint _2960 = uint((float(_2948.y) * floor(float(uint(cbSceneParam._m0[85u].y * _887) / _2949))) + floor(float(uint(cbSceneParam._m0[85u].x * _886) / _2949)));
        float _2970 = (log2(_2041 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2971 = isnan(0.0) ? _2970 : (isnan(_2970) ? 0.0 : max(_2970, 0.0));
        uint _2974 = uint(isnan(14.0) ? _2971 : (isnan(_2971) ? 14.0 : min(_2971, 14.0)));
        uvec4 _2979 = texelFetch(g_lightClusterGridBuffer, int(((_2974 << 2u) + (_2960 << 6u)) >> 2u));
        uint _2980 = _2979.x;
        uint _2981 = _2948.z;
        float _3095;
        float _3097;
        float _3099;
        float _3101;
        float _3103;
        float _3105;
        if (((((1u << ((_2981 >> 4u) & 15u)) + 4294967295u) & _2980) == 0u) || ((_2981 & 240u) == 0u))
        {
            _3095 = 0.0;
            _3097 = 0.0;
            _3099 = 0.0;
            _3101 = 0.0;
            _3103 = 0.0;
            _3105 = 0.0;
        }
        else
        {
            float _3096;
            float _3098;
            float _3100;
            float _3102;
            float _3104;
            float _3106;
            float _3249 = 0.0;
            float _3250 = 0.0;
            float _3251 = 0.0;
            float _3252 = 0.0;
            float _3253 = 0.0;
            float _3254 = 0.0;
            uint _3255 = 0u;
            uint _3264;
            bool _3265;
            for (;;)
            {
                _3264 = texelFetch(g_lightClassification, int((((_2974 << 5u) + (_2960 << 9u)) + (_3255 << 2u)) >> 2u)).x;
                _3265 = _3264 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3265)
                {
                    frontier_phi_66_pred = _3254;
                    frontier_phi_66_pred_1 = _3253;
                    frontier_phi_66_pred_2 = _3252;
                    frontier_phi_66_pred_3 = _3251;
                    frontier_phi_66_pred_4 = _3250;
                    frontier_phi_66_pred_5 = _3249;
                }
                else
                {
                    float _3373;
                    float _3374;
                    float _3375;
                    float _3376;
                    float _3377;
                    float _3378;
                    uint _3379;
                    _3373 = _3249;
                    _3374 = _3250;
                    _3375 = _3251;
                    _3376 = _3252;
                    _3377 = _3253;
                    _3378 = _3254;
                    _3379 = _3264;
                    float _3305;
                    float _3306;
                    float _3307;
                    float _3308;
                    float _3309;
                    float _3310;
                    for (;;)
                    {
                        uint _3383 = uint(findLSB(_3379)) + (_3255 << 5u);
                        uint _3380 = (_3379 + 4294967295u) & _3379;
                        uint _3385 = _3383 * 48u;
                        vec4 _3399 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3385)).x, texelFetch(g_PointLightRenderingBuffer, int(_3385 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3385 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3385 + 3u)).x));
                        uint _3405 = (_3383 * 48u) + 4u;
                        vec4 _3418 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3405)).x, texelFetch(g_PointLightRenderingBuffer, int(_3405 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3405 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3405 + 3u)).x));
                        uint _3424 = (_3383 * 48u) + 8u;
                        vec3 _3435 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3424)).x, texelFetch(g_PointLightRenderingBuffer, int(_3424 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3424 + 2u)).x));
                        float _3439 = _3399.x - _2039;
                        float _3440 = _3399.y - _2040;
                        float _3441 = _3399.z - _2041;
                        float _3442 = dot(vec3(_3439, _3440, _3441), vec3(_3439, _3440, _3441));
                        float _3445 = inversesqrt(_3442);
                        float _3446 = _3445 * _3439;
                        float _3447 = _3445 * _3440;
                        float _3448 = _3445 * _3441;
                        float _3449 = dot(vec3(_905, _908, _911), vec3(_3446, _3447, _3448));
                        float _3454 = 1.0 - (_3442 * _3399.w);
                        float _4834 = isnan(0.0) ? _3454 : (isnan(_3454) ? 0.0 : max(_3454, 0.0));
                        float _3455 = isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0));
                        float _3456 = sqrt(_3442) * _3418.w;
                        float _3459 = 1.39999997615814208984375 / (_3456 + 1.39999997615814208984375);
                        float _3460 = _3459 * _3459;
                        float _3463 = ((1.0 - _3460) * _3449) + _3460;
                        float _3466 = _3456 * _3456;
                        float _3470 = ((isnan(0.0) ? _3463 : (isnan(_3463) ? 0.0 : max(_3463, 0.0))) * _3455) / ((_3466 * 0.699999988079071044921875) + 1.0);
                        float _3474 = (-0.0) - _2039;
                        float _3475 = (-0.0) - _2040;
                        float _3476 = (-0.0) - _2041;
                        float _3480 = inversesqrt(dot(vec3(_3474, _3475, _3476), vec3(_3474, _3475, _3476)));
                        float _3481 = _3480 * _3474;
                        float _3482 = _3480 * _3475;
                        float _3483 = _3480 * _3476;
                        float _3490 = exp2(log2(1.0 / ((_3466 * 3.5) + 5.0)) * 0.25);
                        float _3491 = 1.0 - _980;
                        float _3498 = sqrt(1.0 - ((1.0 - (_3491 * _3491)) * (1.0 - (_3490 * _3490))));
                        float _3499 = _3498 * _3498;
                        float _3500 = _3499 * _3499;
                        float _3501 = _3481 + _3446;
                        float _3502 = _3482 + _3447;
                        float _3503 = _3483 + _3448;
                        float _3507 = inversesqrt(dot(vec3(_3501, _3502, _3503), vec3(_3501, _3502, _3503)));
                        float _3511 = dot(vec3(_905, _908, _911), vec3(_3481, _3482, _3483));
                        float _4850 = isnan(0.0) ? _3511 : (isnan(_3511) ? 0.0 : max(_3511, 0.0));
                        float _3514 = isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0));
                        float _3515 = dot(vec3(_905, _908, _911), vec3(_3507 * _3501, _3507 * _3502, _3507 * _3503));
                        float _4861 = isnan(0.0) ? _3515 : (isnan(_3515) ? 0.0 : max(_3515, 0.0));
                        float _3518 = isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0));
                        float _3522 = ((_3518 * _3518) * (_3500 + (-1.0))) + 1.0;
                        float _3523 = _3459 * _3499;
                        float _3524 = _3523 * _3523;
                        float _3527 = ((1.0 - _3524) * _3449) + _3524;
                        float _4872 = isnan(0.0) ? _3527 : (isnan(_3527) ? 0.0 : max(_3527, 0.0));
                        float _3528 = isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0));
                        float _3529 = 1.0 - _3499;
                        float _3539 = (0.5 / (((_3528 * ((_3514 * _3529) + _3499)) + 9.9999999392252902907785028219223e-09) + (((_3528 * _3529) + _3499) * _3514))) * _3528;
                        float _4883 = isnan(0.0) ? _3539 : (isnan(_3539) ? 0.0 : max(_3539, 0.0));
                        float _3550 = (((_3500 * 3.1415927410125732421875) * (isnan(1.0) ? _4883 : (isnan(_4883) ? 1.0 : min(_4883, 1.0)))) / ((_3522 * _3522) * ((_3466 * 2.1991131305694580078125) + 3.141590118408203125))) * _3455;
                        _3308 = (_3470 * _3418.x) + _3376;
                        _3309 = (_3470 * _3418.y) + _3377;
                        _3310 = (_3470 * _3418.z) + _3378;
                        _3305 = (_3550 * _3435.x) + _3373;
                        _3306 = (_3550 * _3435.y) + _3374;
                        _3307 = (_3550 * _3435.z) + _3375;
                        if (_3380 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3373 = _3305;
                            _3374 = _3306;
                            _3375 = _3307;
                            _3376 = _3308;
                            _3377 = _3309;
                            _3378 = _3310;
                            _3379 = _3380;
                        }
                    }
                    frontier_phi_66_pred = _3310;
                    frontier_phi_66_pred_1 = _3309;
                    frontier_phi_66_pred_2 = _3308;
                    frontier_phi_66_pred_3 = _3307;
                    frontier_phi_66_pred_4 = _3306;
                    frontier_phi_66_pred_5 = _3305;
                }
                _3106 = frontier_phi_66_pred;
                _3104 = frontier_phi_66_pred_1;
                _3102 = frontier_phi_66_pred_2;
                _3100 = frontier_phi_66_pred_3;
                _3098 = frontier_phi_66_pred_4;
                _3096 = frontier_phi_66_pred_5;
                uint _3256 = _3255 + 1u;
                if (_3256 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3249 = _3096;
                    _3250 = _3098;
                    _3251 = _3100;
                    _3252 = _3102;
                    _3253 = _3104;
                    _3254 = _3106;
                    _3255 = _3256;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3095 = _3096;
            _3097 = _3098;
            _3099 = _3100;
            _3101 = _3102;
            _3103 = _3104;
            _3105 = _3106;
        }
        uvec4 _3109 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3110 = _3109.z;
        uint _3112 = (_3110 >> 8u) & 15u;
        float _3217;
        float _3219;
        float _3221;
        float _3223;
        float _3225;
        float _3227;
        if (((4294967295u << _3112) & _2980) == 0u)
        {
            _3217 = _3095;
            _3219 = _3097;
            _3221 = _3099;
            _3223 = _3101;
            _3225 = _3103;
            _3227 = _3105;
        }
        else
        {
            float _3242 = inversesqrt(dot(vec3(_2039, _2040, _2041), vec3(_2039, _2040, _2041)));
            float _3243 = _3242 * _2039;
            float _3244 = _3242 * _2040;
            float _3245 = _3242 * _2041;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3112 < ((_3110 >> 12u) & 15u))
            {
                float _3218;
                float _3220;
                float _3222;
                float _3224;
                float _3226;
                float _3228;
                float _3356 = _3095;
                float _3357 = _3097;
                float _3358 = _3099;
                float _3359 = _3101;
                float _3360 = _3103;
                float _3361 = _3105;
                uint _3362 = _3112;
                uint _3371;
                bool _3372;
                for (;;)
                {
                    _3371 = texelFetch(g_lightClassification, int((((_2974 << 5u) + (_2960 << 9u)) + (_3362 << 2u)) >> 2u)).x;
                    _3372 = _3371 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3372)
                    {
                        frontier_phi_72_pred = _3361;
                        frontier_phi_72_pred_1 = _3360;
                        frontier_phi_72_pred_2 = _3359;
                        frontier_phi_72_pred_3 = _3358;
                        frontier_phi_72_pred_4 = _3357;
                        frontier_phi_72_pred_5 = _3356;
                    }
                    else
                    {
                        float _3555;
                        float _3556;
                        float _3557;
                        float _3558;
                        float _3559;
                        float _3560;
                        float _3848;
                        float _3849;
                        float _3850;
                        float _3851;
                        float _3852;
                        float _3853;
                        float _3568 = _3356;
                        float _3569 = _3357;
                        float _3570 = _3358;
                        float _3571 = _3359;
                        float _3572 = _3360;
                        float _3573 = _3361;
                        uint _3574 = _3371;
                        uint _3575;
                        vec4 _3600;
                        float _3601;
                        vec4 _3616;
                        vec3 _3628;
                        vec4 _3643;
                        vec4 _3658;
                        float _3704;
                        bool _3705;
                        for (;;)
                        {
                            uint _3585 = ((_3362 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3574));
                            _3575 = (_3574 + 4294967295u) & _3574;
                            uint _3587 = _3585 * 40u;
                            _3600 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3587)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3587 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3587 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3587 + 3u)).x));
                            _3601 = _3600.w;
                            uint _3603 = (_3585 * 40u) + 4u;
                            _3616 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3603)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3603 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3603 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3603 + 3u)).x));
                            uint _3618 = (_3585 * 40u) + 8u;
                            _3628 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3618)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3618 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3618 + 2u)).x));
                            uint _3630 = (_3585 * 40u) + 16u;
                            _3643 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3630)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3630 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3630 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3630 + 3u)).x));
                            uint _3645 = (_3585 * 40u) + 20u;
                            _3658 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3645)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3645 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3645 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3645 + 3u)).x));
                            uint _3660 = (_3585 * 40u) + 24u;
                            vec4 _3673 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3660)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3660 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3660 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3660 + 3u)).x));
                            uint _3679 = (_3585 * 40u) + 28u;
                            vec4 _3692 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3679)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3679 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3679 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3679 + 3u)).x));
                            _3704 = fma(_2041, _3692.z, fma(_2040, _3692.y, _3692.x * _2039)) + _3692.w;
                            _3705 = !((fma(_2041, _3673.z, fma(_2040, _3673.y, _3673.x * _2039)) + _3673.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3705)
                            {
                                float _3732 = _3600.x - _2039;
                                float _3733 = _3600.y - _2040;
                                float _3734 = _3600.z - _2041;
                                float _3735 = dot(vec3(_3732, _3733, _3734), vec3(_3732, _3733, _3734));
                                float _3738 = inversesqrt(_3735);
                                float _3739 = _3738 * _3732;
                                float _3740 = _3738 * _3733;
                                float _3741 = _3738 * _3734;
                                float _3745 = 1.0 - (_3735 / (_3601 * _3601));
                                float _4894 = isnan(0.0) ? _3745 : (isnan(_3745) ? 0.0 : max(_3745, 0.0));
                                float _3746 = isnan(1.0) ? _4894 : (isnan(_4894) ? 1.0 : min(_4894, 1.0));
                                float _3750 = sqrt(_3735) * _3616.w;
                                float _3752 = 1.39999997615814208984375 / (_3750 + 1.39999997615814208984375);
                                float _3753 = _3752 * _3752;
                                float _3756 = ((1.0 - _3753) * dot(vec3(_3739, _3740, _3741), vec3(_905, _908, _911))) + _3753;
                                float _3759 = _3750 * _3750;
                                float _3763 = (fma(_2041, _3643.z, fma(_2040, _3643.y, _3643.x * _2039)) + _3643.w) / _3704;
                                float _3764 = (fma(_2041, _3658.z, fma(_2040, _3658.y, _3658.x * _2039)) + _3658.w) / _3704;
                                float _3768 = 1.0 - dot(vec2(_3763, _3764), vec2(_3763, _3764));
                                float _4910 = isnan(0.0) ? _3768 : (isnan(_3768) ? 0.0 : max(_3768, 0.0));
                                float _3769 = isnan(1.0) ? _4910 : (isnan(_4910) ? 1.0 : min(_4910, 1.0));
                                float _3770 = _3769 * (((isnan(0.0) ? _3756 : (isnan(_3756) ? 0.0 : max(_3756, 0.0))) * _3746) / ((_3759 * 0.699999988079071044921875) + 1.0));
                                float _3782 = exp2(log2(1.0 / ((_3759 * 3.5) + 5.0)) * 0.25);
                                float _3783 = 1.0 - _980;
                                float _3790 = sqrt(1.0 - ((1.0 - (_3783 * _3783)) * (1.0 - (_3782 * _3782))));
                                float _3791 = _3790 * _3790;
                                float _3792 = _3791 * _3791;
                                float _3793 = _3739 - _3243;
                                float _3794 = _3740 - _3244;
                                float _3795 = _3741 - _3245;
                                float _3799 = inversesqrt(dot(vec3(_3793, _3794, _3795), vec3(_3793, _3794, _3795)));
                                float _3803 = dot(vec3(_905, _908, _911), vec3((-0.0) - _3243, (-0.0) - _3244, (-0.0) - _3245));
                                float _4921 = isnan(0.0) ? _3803 : (isnan(_3803) ? 0.0 : max(_3803, 0.0));
                                float _3806 = isnan(1.0) ? _4921 : (isnan(_4921) ? 1.0 : min(_4921, 1.0));
                                float _3807 = dot(vec3(_905, _908, _911), vec3(_3799 * _3793, _3799 * _3794, _3799 * _3795));
                                float _4932 = isnan(0.0) ? _3807 : (isnan(_3807) ? 0.0 : max(_3807, 0.0));
                                float _3810 = isnan(1.0) ? _4932 : (isnan(_4932) ? 1.0 : min(_4932, 1.0));
                                float _3814 = ((_3810 * _3810) * (_3792 + (-1.0))) + 1.0;
                                float _3815 = _3752 * _3791;
                                float _3816 = _3815 * _3815;
                                float _3822 = ((1.0 - _3816) * dot(vec3(_905, _908, _911), vec3(_3739, _3740, _3741))) + _3816;
                                float _4943 = isnan(0.0) ? _3822 : (isnan(_3822) ? 0.0 : max(_3822, 0.0));
                                float _3823 = isnan(1.0) ? _4943 : (isnan(_4943) ? 1.0 : min(_4943, 1.0));
                                float _3824 = 1.0 - _3791;
                                float _3834 = (0.5 / (((_3823 * ((_3806 * _3824) + _3791)) + 9.9999999392252902907785028219223e-09) + (((_3823 * _3824) + _3791) * _3806))) * _3823;
                                float _4954 = isnan(0.0) ? _3834 : (isnan(_3834) ? 0.0 : max(_3834, 0.0));
                                float _3844 = (_3769 * _3746) * (((_3792 * 3.1415927410125732421875) * (isnan(1.0) ? _4954 : (isnan(_4954) ? 1.0 : min(_4954, 1.0)))) / ((_3814 * _3814) * ((_3759 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3770 * _3616.y;
                                frontier_phi_78_pred_1 = _3770 * _3616.x;
                                frontier_phi_78_pred_2 = _3844 * _3628.z;
                                frontier_phi_78_pred_3 = _3844 * _3628.y;
                                frontier_phi_78_pred_4 = _3844 * _3628.x;
                                frontier_phi_78_pred_5 = _3770 * _3616.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3852 = frontier_phi_78_pred;
                            _3851 = frontier_phi_78_pred_1;
                            _3850 = frontier_phi_78_pred_2;
                            _3849 = frontier_phi_78_pred_3;
                            _3848 = frontier_phi_78_pred_4;
                            _3853 = frontier_phi_78_pred_5;
                            _3558 = _3851 + _3571;
                            _3559 = _3852 + _3572;
                            _3560 = _3853 + _3573;
                            _3555 = _3848 + _3568;
                            _3556 = _3849 + _3569;
                            _3557 = _3850 + _3570;
                            if (_3575 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3568 = _3555;
                                _3569 = _3556;
                                _3570 = _3557;
                                _3571 = _3558;
                                _3572 = _3559;
                                _3573 = _3560;
                                _3574 = _3575;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3560;
                        frontier_phi_72_pred_1 = _3559;
                        frontier_phi_72_pred_2 = _3558;
                        frontier_phi_72_pred_3 = _3557;
                        frontier_phi_72_pred_4 = _3556;
                        frontier_phi_72_pred_5 = _3555;
                    }
                    _3228 = frontier_phi_72_pred;
                    _3226 = frontier_phi_72_pred_1;
                    _3224 = frontier_phi_72_pred_2;
                    _3222 = frontier_phi_72_pred_3;
                    _3220 = frontier_phi_72_pred_4;
                    _3218 = frontier_phi_72_pred_5;
                    uint _3363 = _3362 + 1u;
                    if (_3363 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3356 = _3218;
                        _3357 = _3220;
                        _3358 = _3222;
                        _3359 = _3224;
                        _3360 = _3226;
                        _3361 = _3228;
                        _3362 = _3363;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3228;
                frontier_phi_60_61_ladder_1 = _3226;
                frontier_phi_60_61_ladder_2 = _3222;
                frontier_phi_60_61_ladder_3 = _3220;
                frontier_phi_60_61_ladder_4 = _3218;
                frontier_phi_60_61_ladder_5 = _3224;
            }
            else
            {
                frontier_phi_60_61_ladder = _3105;
                frontier_phi_60_61_ladder_1 = _3103;
                frontier_phi_60_61_ladder_2 = _3099;
                frontier_phi_60_61_ladder_3 = _3097;
                frontier_phi_60_61_ladder_4 = _3095;
                frontier_phi_60_61_ladder_5 = _3101;
            }
            _3217 = frontier_phi_60_61_ladder_4;
            _3219 = frontier_phi_60_61_ladder_3;
            _3221 = frontier_phi_60_61_ladder_2;
            _3223 = frontier_phi_60_61_ladder_5;
            _3225 = frontier_phi_60_61_ladder_1;
            _3227 = frontier_phi_60_61_ladder;
        }
        float _3232 = isnan(1.0) ? _964 : (isnan(_964) ? 1.0 : min(_964, 1.0));
        _2993 = (_3232 * _3223) + _2505;
        _2995 = (_3232 * _3225) + _2507;
        _2997 = (_3232 * _3227) + _2509;
        _2999 = ((_3217 * _949) * _3232) + _2843;
        _3001 = ((_3219 * _951) * _3232) + _2845;
        _3003 = ((_3221 * _952) * _3232) + _2847;
    }
    else
    {
        _2993 = _2505;
        _2995 = _2507;
        _2997 = _2509;
        _2999 = _2843;
        _3001 = _2845;
        _3003 = _2847;
    }
    uint _3009 = _925 + uint(cbMatDynParam._m0[0u].w);
    float _3017 = ((cbMtdParam._m0[20u].x * cbMtdParam._m0[25u].x) * _732.x) * cbInstanceData._m0[_3009].x;
    float _3020 = ((cbMtdParam._m0[20u].y * cbMtdParam._m0[25u].x) * _732.y) * cbInstanceData._m0[_3009].y;
    float _3023 = ((cbMtdParam._m0[20u].z * cbMtdParam._m0[25u].x) * _732.z) * cbInstanceData._m0[_3009].z;
    float _4970 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
    float _4981 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
    float _4992 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
    float _3040 = (((isnan(1.0) ? _4970 : (isnan(_4970) ? 1.0 : min(_4970, 1.0))) * (_2993 + ((isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0))) * _964))) + ((_2999 + ((isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0))) * _1771)) * cbPerFrame._m0[3u].x)) + _3017;
    float _3042 = (_3020 + ((_3001 + ((isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0))) * _1771)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4981 : (isnan(_4981) ? 1.0 : min(_4981, 1.0))) * (_2995 + ((isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0))) * _964)));
    float _3044 = (_3023 + ((_3003 + ((isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0))) * _1771)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4992 : (isnan(_4992) ? 1.0 : min(_4992, 1.0))) * (_2997 + ((isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0))) * _964)));
    float _5018 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _3057 = isnan(1.0) ? _5018 : (isnan(_5018) ? 1.0 : min(_5018, 1.0));
    uint _3058 = _924 + 6u;
    float _3066 = _886 / cbSceneParam._m0[86u].x;
    float _3067 = _887 / cbSceneParam._m0[86u].y;
    vec4 _3081 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3066, _3067, (log2((isnan(cbSceneParam._m0[77u].w) ? _821 : (isnan(_821) ? cbSceneParam._m0[77u].w : min(_821, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3083 = _3081.x;
    float _3084 = _3081.y;
    float _3085 = _3081.z;
    float _3086 = _3081.w;
    float _3158;
    float _3160;
    float _3162;
    float _3164;
    if (_821 > cbSceneParam._m0[78u].w)
    {
        float _3120 = isnan(_821) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _821 : min(cbSceneParam._m0[80u].w, _821));
        float _3121 = _3120 / _821;
        float _3132 = _3121 * _871;
        float _3133 = _872 * _3121;
        float _3134 = (-0.0) - _3133;
        float _3136 = _3121 * _873;
        float _3138 = (cbSceneParam._m0[77u].w * _3134) / _3120;
        float _3139 = _3138 + cbSceneParam._m0[79u].w;
        float _3140 = cbSceneParam._m0[79u].w - _3133;
        float _3146 = sqrt(((_3132 * _3132) + (_3133 * _3133)) + (_3136 * _3136));
        float _3149 = (1.0 - (cbSceneParam._m0[77u].w / _3120)) * _3146;
        float _3154 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3156 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3318;
        if (abs((_3134 - _3138) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3318 = ((((_3139 > 0.0) ? exp2(_3154 * _3139) : (2.0 - exp2(_3156 * _3139))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3149;
        }
        else
        {
            float _3278 = 1.0 / cbSceneParam._m0[80u].x;
            float _3279 = isnan(_3140) ? _3139 : (isnan(_3139) ? _3140 : max(_3139, _3140));
            float _3280 = isnan(_3140) ? _3139 : (isnan(_3139) ? _3140 : min(_3139, _3140));
            float _3289 = isnan(0.0) ? _3279 : (isnan(_3279) ? 0.0 : min(_3279, 0.0));
            float _3290 = isnan(0.0) ? _3280 : (isnan(_3280) ? 0.0 : min(_3280, 0.0));
            _3318 = ((abs(_3146 / _3134) * cbSceneParam._m0[80u].y) * ((((_3289 - _3290) * 2.0) - ((exp2(_3154 * (isnan(0.0) ? _3279 : (isnan(_3279) ? 0.0 : max(_3279, 0.0)))) - exp2(_3154 * (isnan(0.0) ? _3280 : (isnan(_3280) ? 0.0 : max(_3280, 0.0))))) * _3278)) - ((exp2(_3156 * _3289) - exp2(_3156 * _3290)) * _3278))) + (_3149 * cbSceneParam._m0[80u].z);
        }
        vec4 _3320 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3066, _3067, 1.0), 0.0);
        float _3329 = exp2((_3318 * (-1.44269502162933349609375)) * (1.0 - _3320.w));
        float _3330 = log2(_3329);
        float _3346 = log2(_3086);
        _3158 = (exp2(_3346 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3330 * cbSceneParam._m0[78u].x)) * _3320.x) / cbSceneParam._m0[78u].x)) + _3083;
        _3160 = (exp2(_3346 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3330 * cbSceneParam._m0[78u].y)) * _3320.y) / cbSceneParam._m0[78u].y)) + _3084;
        _3162 = (exp2(_3346 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3330 * cbSceneParam._m0[78u].z)) * _3320.z) / cbSceneParam._m0[78u].z)) + _3085;
        _3164 = _3329 * _3086;
    }
    else
    {
        _3158 = _3083;
        _3160 = _3084;
        _3162 = _3085;
        _3164 = _3086;
    }
    float _3176 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3177 = _3176 == 3.0;
    float _3178 = log2(_3164);
    float _3182 = exp2(_3178 * cbSceneParam._m0[78u].x);
    float _3183 = exp2(_3178 * cbSceneParam._m0[78u].y);
    float _3184 = exp2(_3178 * cbSceneParam._m0[78u].z);
    float _3185 = _3182 * (isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : max(_3040, 0.0)));
    float _3186 = _3183 * (isnan(0.0) ? _3042 : (isnan(_3042) ? 0.0 : max(_3042, 0.0)));
    float _3187 = _3184 * (isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : max(_3044, 0.0)));
    float _3196 = (_3176 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3196 * (_3177 ? _3185 : (_3185 + (cbSceneParam._m0[72u].w * _3158)));
    SV_Target.y = _3196 * (_3177 ? _3186 : (_3186 + (cbSceneParam._m0[72u].w * _3160)));
    SV_Target.z = _3196 * (_3177 ? _3187 : (_3187 + (cbSceneParam._m0[72u].w * _3162)));
    SV_Target.w = cbInstanceData._m0[_3058].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _3017) * _3057) * _3182) * _3196;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _3020) * _3057) * _3183) * _3196;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _3023) * _3057) * _3184) * _3196;
    SV_Target_1.w = cbInstanceData._m0[_3058].w;
}


