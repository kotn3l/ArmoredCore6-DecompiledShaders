#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[29];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 12) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 9) uniform texture2D C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2DArray C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_0;
layout(set = 0, binding = 14) uniform texture2DArray C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1277;
float _3726;
float _3727;
float _3728;
float _3729;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _205 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _206 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _207 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _213 = inversesqrt(dot(vec3(_205, _206, _207), vec3(_205, _206, _207)));
    float _220 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _227 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _245 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_1) + cbTextureTilingScale._m0[10u].w));
    float _255 = log2(0.0);
    float _257 = exp2(_255 * cbMtdParam._m0[22u].x);
    float _258 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _259 = isnan(1.0) ? _258 : (isnan(_258) ? 1.0 : min(_258, 1.0));
    vec4 _273 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _277 = _273.z;
    float _286 = exp2(log2(_277 * cbMtdParam._m0[22u].y) * cbMtdParam._m0[21u].y);
    float _287 = isnan(0.0) ? _286 : (isnan(_286) ? 0.0 : max(_286, 0.0));
    float _288 = isnan(1.0) ? _287 : (isnan(_287) ? 1.0 : min(_287, 1.0));
    float _309 = roundEven(5.0 - ((texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w)).x + (-0.02500000037252902984619140625)) * 8.0));
    float _310 = isnan(0.0) ? _309 : (isnan(_309) ? 0.0 : max(_309, 0.0));
    float _311 = isnan(4.0) ? _310 : (isnan(_310) ? 4.0 : min(_310, 4.0));
    float _324 = floor(_311);
    vec4 _327 = texture(sampler2DArray(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w, _324));
    vec4 _351 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _362 = cbMtdParam._m0[9u].x * _351.x;
    float _363 = cbMtdParam._m0[9u].y * _351.y;
    float _364 = cbMtdParam._m0[9u].z * _351.z;
    float _371 = (((cbMtdParam._m0[10u].x * _327.x) - _362) * _288) + _362;
    float _372 = (((cbMtdParam._m0[10u].y * _327.y) - _363) * _288) + _363;
    float _373 = (((cbMtdParam._m0[10u].z * _327.z) - _364) * _288) + _364;
    float _379 = exp2(log2(_273.w) * cbMtdParam._m0[22u].w);
    vec4 _392 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _412 = (((cbMtdParam._m0[16u].x * _392.x) - _371) * _379) + _371;
    float _413 = (((cbMtdParam._m0[16u].y * _392.y) - _372) * _379) + _372;
    float _414 = (((cbMtdParam._m0[16u].z * _392.z) - _373) * _379) + _373;
    vec4 _427 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _452 = (_245.x * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].x * _427.x) - _412) * _259) + _412);
    float _454 = (_245.y * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].y * _427.y) - _413) * _259) + _413);
    float _456 = (_245.z * 4.55000019073486328125) * ((((cbMtdParam._m0[19u].z * _427.z) - _414) * _259) + _414);
    float _184[5];
    float _185[5];
    _184[0u] = cbMtdParam._m0[25u].w;
    _185[0u] = cbMtdParam._m0[26u].x;
    _184[1u] = cbMtdParam._m0[27u].w;
    _185[1u] = cbMtdParam._m0[28u].x;
    _184[2u] = cbMtdParam._m0[27u].y;
    _185[2u] = cbMtdParam._m0[27u].z;
    _184[3u] = cbMtdParam._m0[26u].w;
    _185[3u] = cbMtdParam._m0[27u].x;
    _184[4u] = cbMtdParam._m0[26u].y;
    _185[4u] = cbMtdParam._m0[26u].z;
    float _496 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    uint _498 = uint(int(isnan(4.0) ? _496 : (isnan(_496) ? 4.0 : min(_496, 4.0))));
    float _505 = ((_185[_498] - cbMtdParam._m0[21u].z) * _288) + cbMtdParam._m0[21u].z;
    float _508 = ((cbMtdParam._m0[21u].w - _505) * _379) + _505;
    float _511 = ((cbMtdParam._m0[24u].y - _508) * _259) + _508;
    vec4 _527 = texture(sampler2DArray(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w, _324));
    vec4 _544 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _546 = _544.x;
    float _547 = _544.y;
    float _552 = cbMtdParam._m0[21u].x + _544.z;
    float _555 = (((_527.z + _184[_498]) - _552) * _288) + _552;
    vec4 _568 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_1) + cbTextureTilingScale._m0[11u].w));
    float _579 = (((_568.z - _555) + cbMtdParam._m0[25u].y) * _379) + _555;
    float _585 = ((((_277 * 2.0) * _579) - _579) * cbMtdParam._m0[23u].w) + _579;
    vec4 _598 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_1) + cbTextureTilingScale._m0[12u].w));
    float _609 = (((cbMtdParam._m0[22u].z + _598.z) - _585) * _259) + _585;
    vec4 _629 = texture(sampler2D(C_Enemy_ColorMaterial_Emissive_Glow_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _646 = ((_527.x - _546) * _288) + _546;
    float _647 = ((_527.y - _547) * _288) + _547;
    float _652 = ((_568.x - _646) * _379) + _646;
    float _653 = ((_568.y - _647) * _379) + _647;
    float _662 = ((((_598.x - _652) * _259) + _652) * 2.0) + (-1.0);
    float _663 = ((((_598.y - _653) * _259) + _653) * 2.0) + (-1.0);
    float _664 = dot(vec2(_662, _663), vec2(_662, _663));
    float _3778 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _669 = sqrt(1.0 - (isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0))));
    float _672 = (cbMtdParam._m0[24u].z * ((_273.x * 2.0) + (-1.0))) + _662;
    float _673 = (cbMtdParam._m0[24u].z * ((_273.y * 2.0) + (-1.0))) + _663;
    float _675 = gl_FragCoord.x * 0.125;
    float _677 = gl_FragCoord.y * 0.125;
    float _688 = fma(_669, _220 * NORMAL.x, fma(_673, _227 * TANGENT.x, (_213 * _205) * _672));
    float _691 = fma(_669, _220 * NORMAL.y, fma(_673, _227 * TANGENT.y, (_213 * _206) * _672));
    float _694 = fma(_669, _220 * NORMAL.z, fma(_673, _227 * TANGENT.z, (_213 * _207) * _672));
    float _698 = inversesqrt(dot(vec3(_688, _691, _694), vec3(_688, _691, _694)));
    float _699 = _698 * _688;
    float _700 = _698 * _691;
    float _701 = _698 * _694;
    float _3789 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    float _702 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
    float _3800 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _3811 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _3822 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _3833 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _706 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
    if (!(cbMtdParam._m0[24u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_675, _677)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _726 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _766 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _776 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _766);
    float _777 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _766);
    float _778 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _766);
    float _782 = inversesqrt(dot(vec3(_776, _777, _778), vec3(_776, _777, _778)));
    float _783 = _776 * _782;
    float _784 = _777 * _782;
    float _785 = _778 * _782;
    vec4 _787 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_675, _677));
    float _789 = _787.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _959 = sqrt(((_776 * _776) + (_777 * _777)) + (_778 * _778));
        float _965 = (cbMatDynParam._m0[5u].x * _959) + cbMatDynParam._m0[5u].y;
        float _3844 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
        float _966 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
        float _970 = (cbMatDynParam._m0[5u].z * _959) + cbMatDynParam._m0[5u].w;
        float _3855 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0))) - _966)) + _966) < ((_789 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _800 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _801 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _819 = fma(_701, cbSceneParam._m0[5u].z, fma(_700, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _699));
    float _822 = fma(_701, cbSceneParam._m0[6u].z, fma(_700, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _699));
    float _825 = fma(_701, cbSceneParam._m0[7u].z, fma(_700, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _699));
    uint _838 = uint(roundEven(NORMAL.w)) * 13u;
    uint _839 = _838 + 9u;
    uint _840 = _839 + uint(cbMatDynParam._m0[0u].w);
    float _846 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0)))) * cbInstanceData._m0[_840].x;
    float _847 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0)))) * cbInstanceData._m0[_840].y;
    float _848 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0)))) * cbInstanceData._m0[_840].z;
    float _3866 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
    float _849 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
    float _3877 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    float _850 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
    float _3888 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    float _851 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
    float _852 = 1.0 - _706;
    float _853 = _849 * _852;
    float _854 = _850 * _852;
    float _855 = _851 * _852;
    float _860 = (_849 + (-0.039999999105930328369140625)) * _706;
    float _861 = (_850 + (-0.039999999105930328369140625)) * _706;
    float _862 = (_851 + (-0.039999999105930328369140625)) * _706;
    float _863 = _860 + 0.039999999105930328369140625;
    float _865 = _861 + 0.039999999105930328369140625;
    float _866 = _862 + 0.039999999105930328369140625;
    vec4 _875 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _800, cbSceneParam._m0[86u].y * _801));
    float _878 = _875.x * TEXCOORD_3.w;
    float _879 = dot(vec3(_699, _700, _701), vec3(_783, _784, _785));
    float _882 = _879 * 2.0;
    float _886 = (_882 * _699) - _783;
    float _887 = (_882 * _700) - _784;
    float _888 = (_882 * _701) - _785;
    float _892 = abs(dot(vec3(_783, _784, _785), vec3(_699, _700, _701)));
    float _3899 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
    float _894 = sqrt(_702);
    float _905 = exp2((_894 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_894 * 3.0));
    float _911 = (1.0 - _905) * ((_894 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _912 = _905 * _894;
    float _940 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _944 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _948 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1276;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1001 = fma(_948, cbModelParam._m0[26u].z, fma(_944, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _940));
        float _1005 = fma(_948, cbModelParam._m0[27u].z, fma(_944, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _940));
        float _1009 = fma(_948, cbModelParam._m0[28u].z, fma(_944, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _940));
        float _1034 = _940 + _699;
        float _1035 = _944 + _700;
        float _1036 = _948 + _701;
        float _1046 = fma(_1036, cbModelParam._m0[26u].z, fma(_1035, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1034)) - _1001;
        float _1047 = fma(_1036, cbModelParam._m0[27u].z, fma(_1035, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1034)) - _1005;
        float _1048 = fma(_1036, cbModelParam._m0[28u].z, fma(_1035, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1034)) - _1009;
        float _1052 = inversesqrt(dot(vec3(_1046, _1047, _1048), vec3(_1046, _1047, _1048)));
        float _1065 = ((_1052 * _1046) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1001 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1066 = ((_1052 * _1047) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1005 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1067 = ((_1052 * _1048) / cbModelParam._m0[34u].z) + ((((((_1009 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1070 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1065, _1066, _1067), 0.0);
        vec4 _1077 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1065, _1066, _1067), 0.0);
        vec4 _1084 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1065, _1066, _1067), 0.0);
        vec4 _1091 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1065, _1066, _1067), 0.0);
        float _1104 = exp2((_1070.w + (-0.5)) * 20.0) * 2.0;
        float _1105 = _1104 * (_1070.x + (-0.5));
        float _1106 = _1104 * (_1070.y + (-0.5));
        float _1107 = _1104 * (_1070.z + (-0.5));
        float _1114 = exp2((_1077.w + (-0.5)) * 20.0) * 2.0;
        float _1115 = _1114 * (_1077.x + (-0.5));
        float _1116 = _1114 * (_1077.y + (-0.5));
        float _1117 = _1114 * (_1077.z + (-0.5));
        float _1124 = exp2((_1084.w + (-0.5)) * 20.0) * 2.0;
        float _1125 = _1124 * (_1084.x + (-0.5));
        float _1126 = _1124 * (_1084.y + (-0.5));
        float _1127 = _1124 * (_1084.z + (-0.5));
        float _1134 = exp2((_1091.w + (-0.5)) * 20.0) * 2.0;
        float _1135 = _1134 * (_1091.x + (-0.5));
        float _1136 = _1134 * (_1091.y + (-0.5));
        float _1137 = _1134 * (_1091.z + (-0.5));
        float _1138 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1139 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1140 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1141 = _1105 * 0.5;
        float _1142 = _1115 * 0.5;
        float _1143 = _1125 * 0.5;
        float _1144 = dot(vec3(_1141, _1142, _1143), vec3(_1141, _1142, _1143));
        float _1149 = (_1144 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1144);
        float _1158 = (dot(vec3(_699, _700, _701), vec3(_1149 * _1141, _1149 * _1142, _1149 * _1143)) + 1.0) * 0.5;
        float _3925 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1168 = sqrt(((_1142 * _1142) + (_1141 * _1141)) + (_1143 * _1143)) / (_1138 + 9.9999997473787516355514526367188e-06);
        float _3936 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1169 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
        float _1170 = _1169 * 2.0;
        float _1174 = (1.0 - _1169) / (_1169 + 1.0);
        float _3947 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1175 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
        float _1184 = ((((1.0 - _1175) * (_1170 + 2.0)) * exp2(log2(isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0))) * (_1170 + 1.0))) + _1175) * _1138;
        float _1185 = _1106 * 0.5;
        float _1186 = _1116 * 0.5;
        float _1187 = _1126 * 0.5;
        float _1188 = dot(vec3(_1185, _1186, _1187), vec3(_1185, _1186, _1187));
        float _1193 = (_1188 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1188);
        float _1201 = (dot(vec3(_699, _700, _701), vec3(_1193 * _1185, _1193 * _1186, _1193 * _1187)) + 1.0) * 0.5;
        float _3958 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1210 = sqrt(((_1186 * _1186) + (_1185 * _1185)) + (_1187 * _1187)) / (_1139 + 9.9999997473787516355514526367188e-06);
        float _3969 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1211 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
        float _1212 = _1211 * 2.0;
        float _1216 = (1.0 - _1211) / (_1211 + 1.0);
        float _3980 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1217 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
        float _1226 = ((((1.0 - _1217) * (_1212 + 2.0)) * exp2(log2(isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0))) * (_1212 + 1.0))) + _1217) * _1139;
        float _1227 = _1107 * 0.5;
        float _1228 = _1117 * 0.5;
        float _1229 = _1127 * 0.5;
        float _1230 = dot(vec3(_1227, _1228, _1229), vec3(_1227, _1228, _1229));
        float _1235 = (_1230 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1230);
        float _1243 = (dot(vec3(_699, _700, _701), vec3(_1235 * _1227, _1235 * _1228, _1235 * _1229)) + 1.0) * 0.5;
        float _3991 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1252 = sqrt(((_1228 * _1228) + (_1227 * _1227)) + (_1229 * _1229)) / (_1140 + 9.9999997473787516355514526367188e-06);
        float _4002 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1253 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
        float _1254 = _1253 * 2.0;
        float _1258 = (1.0 - _1253) / (_1253 + 1.0);
        float _4013 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1259 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
        float _1268 = ((((1.0 - _1259) * (_1254 + 2.0)) * exp2(log2(isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0))) * (_1254 + 1.0))) + _1259) * _1140;
        _1276 = _1107;
        _1278 = _1106;
        _1279 = _1105;
        _1280 = _1117;
        _1281 = _1116;
        _1282 = _1115;
        _1283 = _1127;
        _1284 = _1126;
        _1285 = _1125;
        _1286 = _1140;
        _1287 = _1139;
        _1288 = _1138;
        _1289 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0)));
        _1290 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0)));
        _1291 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0)));
    }
    else
    {
        _1276 = _1277;
        _1278 = _1277;
        _1279 = _1277;
        _1280 = _1277;
        _1281 = _1277;
        _1282 = _1277;
        _1283 = _1277;
        _1284 = _1277;
        _1285 = _1277;
        _1286 = _1277;
        _1287 = _1277;
        _1288 = _1277;
        _1289 = 0.0;
        _1290 = 0.0;
        _1291 = 0.0;
    }
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1317 = fma(_948, cbModelParam._m0[30u].z, fma(_944, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _940));
        float _1321 = fma(_948, cbModelParam._m0[31u].z, fma(_944, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _940));
        float _1325 = fma(_948, cbModelParam._m0[32u].z, fma(_944, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _940));
        float _1348 = _940 + _699;
        float _1349 = _944 + _700;
        float _1350 = _948 + _701;
        float _1360 = fma(_1350, cbModelParam._m0[30u].z, fma(_1349, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1348)) - _1317;
        float _1361 = fma(_1350, cbModelParam._m0[31u].z, fma(_1349, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1348)) - _1321;
        float _1362 = fma(_1350, cbModelParam._m0[32u].z, fma(_1349, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1348)) - _1325;
        float _1366 = inversesqrt(dot(vec3(_1360, _1361, _1362), vec3(_1360, _1361, _1362)));
        float _1379 = ((_1366 * _1360) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1317 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1380 = ((_1366 * _1361) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1321 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1381 = ((_1366 * _1362) / cbModelParam._m0[35u].z) + ((((((_1325 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1383 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1379, _1380, _1381), 0.0);
        vec4 _1390 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1379, _1380, _1381), 0.0);
        vec4 _1397 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1379, _1380, _1381), 0.0);
        vec4 _1404 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1379, _1380, _1381), 0.0);
        float _1416 = exp2((_1383.w + (-0.5)) * 20.0) * 2.0;
        float _1417 = _1416 * (_1383.x + (-0.5));
        float _1418 = _1416 * (_1383.y + (-0.5));
        float _1419 = _1416 * (_1383.z + (-0.5));
        float _1426 = exp2((_1390.w + (-0.5)) * 20.0) * 2.0;
        float _1427 = _1426 * (_1390.x + (-0.5));
        float _1428 = _1426 * (_1390.y + (-0.5));
        float _1429 = _1426 * (_1390.z + (-0.5));
        float _1436 = exp2((_1397.w + (-0.5)) * 20.0) * 2.0;
        float _1437 = _1436 * (_1397.x + (-0.5));
        float _1438 = _1436 * (_1397.y + (-0.5));
        float _1439 = _1436 * (_1397.z + (-0.5));
        float _1446 = exp2((_1404.w + (-0.5)) * 20.0) * 2.0;
        float _1447 = _1446 * (_1404.x + (-0.5));
        float _1448 = _1446 * (_1404.y + (-0.5));
        float _1449 = _1446 * (_1404.z + (-0.5));
        float _1450 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1451 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1452 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1453 = _1417 * 0.5;
        float _1454 = _1427 * 0.5;
        float _1455 = _1437 * 0.5;
        float _1456 = dot(vec3(_1453, _1454, _1455), vec3(_1453, _1454, _1455));
        float _1461 = (_1456 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1456);
        float _1469 = (dot(vec3(_699, _700, _701), vec3(_1461 * _1453, _1461 * _1454, _1461 * _1455)) + 1.0) * 0.5;
        float _4054 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1478 = sqrt(((_1454 * _1454) + (_1453 * _1453)) + (_1455 * _1455)) / (_1450 + 9.9999997473787516355514526367188e-06);
        float _4065 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1479 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
        float _1480 = _1479 * 2.0;
        float _1484 = (1.0 - _1479) / (_1479 + 1.0);
        float _4076 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1485 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
        float _1494 = ((((1.0 - _1485) * (_1480 + 2.0)) * exp2(log2(isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0))) * (_1480 + 1.0))) + _1485) * _1450;
        float _1495 = _1418 * 0.5;
        float _1496 = _1428 * 0.5;
        float _1497 = _1438 * 0.5;
        float _1498 = dot(vec3(_1495, _1496, _1497), vec3(_1495, _1496, _1497));
        float _1503 = (_1498 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1498);
        float _1511 = (dot(vec3(_699, _700, _701), vec3(_1503 * _1495, _1503 * _1496, _1503 * _1497)) + 1.0) * 0.5;
        float _4087 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1520 = sqrt(((_1496 * _1496) + (_1495 * _1495)) + (_1497 * _1497)) / (_1451 + 9.9999997473787516355514526367188e-06);
        float _4098 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1521 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
        float _1522 = _1521 * 2.0;
        float _1526 = (1.0 - _1521) / (_1521 + 1.0);
        float _4109 = isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0));
        float _1527 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
        float _1536 = ((((1.0 - _1527) * (_1522 + 2.0)) * exp2(log2(isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0))) * (_1522 + 1.0))) + _1527) * _1451;
        float _1537 = _1419 * 0.5;
        float _1538 = _1429 * 0.5;
        float _1539 = _1439 * 0.5;
        float _1540 = dot(vec3(_1537, _1538, _1539), vec3(_1537, _1538, _1539));
        float _1545 = (_1540 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1540);
        float _1553 = (dot(vec3(_699, _700, _701), vec3(_1545 * _1537, _1545 * _1538, _1545 * _1539)) + 1.0) * 0.5;
        float _4120 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1562 = sqrt(((_1538 * _1538) + (_1537 * _1537)) + (_1539 * _1539)) / (_1452 + 9.9999997473787516355514526367188e-06);
        float _4131 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
        float _1563 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
        float _1564 = _1563 * 2.0;
        float _1568 = (1.0 - _1563) / (_1563 + 1.0);
        float _4142 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1569 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
        float _1578 = ((((1.0 - _1569) * (_1564 + 2.0)) * exp2(log2(isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0))) * (_1564 + 1.0))) + _1569) * _1452;
        _1586 = _1419;
        _1587 = _1418;
        _1588 = _1417;
        _1589 = _1429;
        _1590 = _1428;
        _1591 = _1427;
        _1592 = _1439;
        _1593 = _1438;
        _1594 = _1437;
        _1595 = _1452;
        _1596 = _1451;
        _1597 = _1450;
        _1598 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0)));
        _1599 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0)));
        _1600 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0)));
    }
    else
    {
        _1586 = _1277;
        _1587 = _1277;
        _1588 = _1277;
        _1589 = _1277;
        _1590 = _1277;
        _1591 = _1277;
        _1592 = _1277;
        _1593 = _1277;
        _1594 = _1277;
        _1595 = _1277;
        _1596 = _1277;
        _1597 = _1277;
        _1598 = 0.0;
        _1599 = 0.0;
        _1600 = 0.0;
    }
    float _1610 = (cbModelParam._m0[1u].x * (_1598 - _1289)) + _1289;
    float _1611 = (cbModelParam._m0[1u].x * (_1599 - _1290)) + _1290;
    float _1612 = (cbModelParam._m0[1u].x * (_1600 - _1291)) + _1291;
    float _1633 = fma(_1612, cbSceneParam._m0[89u].z, fma(_1611, cbSceneParam._m0[89u].y, _1610 * cbSceneParam._m0[89u].x));
    float _1636 = fma(_1612, cbSceneParam._m0[90u].z, fma(_1611, cbSceneParam._m0[90u].y, _1610 * cbSceneParam._m0[90u].x));
    float _1639 = fma(_1612, cbSceneParam._m0[91u].z, fma(_1611, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1610));
    float _1654 = _886 * 0.5;
    float _1655 = _887 * 0.5;
    float _1656 = _888 * 0.5;
    float _1657 = dot(vec4(_1654, _1655, _1656, 1.0), vec4(_1588, _1591, _1594, _1597));
    float _1660 = dot(vec4(_1654, _1655, _1656, 1.0), vec4(_1587, _1590, _1593, _1596));
    float _1663 = dot(vec4(_1654, _1655, _1656, 1.0), vec4(_1586, _1589, _1592, _1595));
    float _1697;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1670 = dot(vec4(_1654, _1655, _1656, 1.0), vec4(_1276, _1280, _1283, _1286));
        float _1674 = dot(vec4(_1654, _1655, _1656, 1.0), vec4(_1278, _1281, _1284, _1287));
        float _1678 = dot(vec4(_1654, _1655, _1656, 1.0), vec4(_1279, _1282, _1285, _1288));
        float _1685 = dot(vec4(cbModelParam._m0[39u]), vec4(_1654, _1655, _1656, 1.0));
        _1697 = dot(vec3(isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0)), isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0)), isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1685) ? 0.0 : (isnan(0.0) ? _1685 : max(0.0, _1685))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1697 = 1.0;
    }
    float _1708;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1699 = dot(vec4(cbModelParam._m0[40u]), vec4(_1654, _1655, _1656, 1.0));
        _1708 = dot(vec3(isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0)), isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0)), isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1699) ? 0.0 : (isnan(0.0) ? _1699 : max(0.0, _1699))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1708 = 1.0;
    }
    float _1712 = (_1708 * cbModelParam._m0[1u].x) + (_1697 * (1.0 - cbModelParam._m0[1u].x));
    float _1722 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _702);
    float _1723 = isnan(_1722) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1722 : min(cbModelParam._m0[25u].z, _1722));
    float _1804;
    float _1806;
    float _1808;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1771 = fma(_948, cbModelParam._m0[13u].z, fma(_944, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _940)) + cbModelParam._m0[13u].w;
        float _1775 = fma(_948, cbModelParam._m0[14u].z, fma(_944, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _940)) + cbModelParam._m0[14u].w;
        float _1779 = fma(_948, cbModelParam._m0[15u].z, fma(_944, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _940)) + cbModelParam._m0[15u].w;
        float _1782 = fma(_888, cbModelParam._m0[13u].z, fma(_887, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _886));
        float _1785 = fma(_888, cbModelParam._m0[14u].z, fma(_887, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _886));
        float _1788 = fma(_888, cbModelParam._m0[15u].z, fma(_887, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _886));
        float _1816;
        if (_1782 > 0.0)
        {
            _1816 = abs((1.0 - _1771) / _1782);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1782 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1771 + 1.0) / _1782);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1816 = frontier_phi_19_17_ladder;
        }
        float _2040;
        if (_1785 > 0.0)
        {
            _2040 = abs((1.0 - _1775) / _1785);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1785 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1775 + 1.0) / _1785);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2040 = frontier_phi_28_24_ladder;
        }
        float _2297;
        if (_1788 > 0.0)
        {
            _2297 = abs((1.0 - _1779) / _1788);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1788 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1779 + 1.0) / _1788);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2297 = frontier_phi_40_35_ladder;
        }
        float _2299 = isnan(_2040) ? _1816 : (isnan(_1816) ? _2040 : min(_1816, _2040));
        float _2300 = isnan(_2297) ? _2299 : (isnan(_2299) ? _2297 : min(_2299, _2297));
        float _2304 = (_2300 * _1782) + _1771;
        float _2305 = (_2300 * _1785) + _1775;
        float _2306 = (_2300 * _1788) + _1779;
        float _2307 = _2300 * 9.9999997473787516355514526367188e-05;
        float _2309 = (-1.0) - _2307;
        float _2311 = _2307 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2306 > _2311) || ((_2306 < _2309) || ((_2305 > _2311) || ((_2305 < _2309) || ((_2304 < _2309) || (_2304 > _2311))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2434 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2306, cbModelParam._m0[9u].z, fma(_2305, cbModelParam._m0[9u].y, _2304 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2306, cbModelParam._m0[10u].z, fma(_2305, cbModelParam._m0[10u].y, _2304 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2306, cbModelParam._m0[11u].z, fma(_2305, cbModelParam._m0[11u].y, _2304 * cbModelParam._m0[11u].x))), _1723);
            frontier_phi_18_40_ladder = _2434.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2434.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2434.x * cbModelParam._m0[1u].y;
        }
        _1804 = frontier_phi_18_40_ladder_2;
        _1806 = frontier_phi_18_40_ladder_1;
        _1808 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1792 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_886, _887, _888), _1723);
        _1804 = _1792.x * cbModelParam._m0[1u].y;
        _1806 = _1792.y * cbModelParam._m0[1u].y;
        _1808 = _1792.z * cbModelParam._m0[1u].y;
    }
    float _1812 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _702);
    float _1813 = isnan(_1812) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1812 : min(cbModelParam._m0[25u].w, _1812));
    float _1903;
    float _1905;
    float _1907;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1867 = fma(_948, cbModelParam._m0[21u].z, fma(_944, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _940)) + cbModelParam._m0[21u].w;
        float _1871 = fma(_948, cbModelParam._m0[22u].z, fma(_944, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _940)) + cbModelParam._m0[22u].w;
        float _1875 = fma(_948, cbModelParam._m0[23u].z, fma(_944, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _940)) + cbModelParam._m0[23u].w;
        float _1878 = fma(_888, cbModelParam._m0[21u].z, fma(_887, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _886));
        float _1881 = fma(_888, cbModelParam._m0[22u].z, fma(_887, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _886));
        float _1884 = fma(_888, cbModelParam._m0[23u].z, fma(_887, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _886));
        float _2045;
        if (_1878 > 0.0)
        {
            _2045 = abs((1.0 - _1867) / _1878);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1878 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1867 + 1.0) / _1878);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2045 = frontier_phi_30_26_ladder;
        }
        float _2324;
        if (_1881 > 0.0)
        {
            _2324 = abs((1.0 - _1871) / _1881);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1881 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1871 + 1.0) / _1881);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2324 = frontier_phi_42_37_ladder;
        }
        float _2537;
        if (_1884 > 0.0)
        {
            _2537 = abs((1.0 - _1875) / _1884);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1884 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1875 + 1.0) / _1884);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2537 = frontier_phi_51_48_ladder;
        }
        float _2539 = isnan(_2324) ? _2045 : (isnan(_2045) ? _2324 : min(_2045, _2324));
        float _2540 = isnan(_2537) ? _2539 : (isnan(_2539) ? _2537 : min(_2539, _2537));
        float _2544 = (_2540 * _1878) + _1867;
        float _2545 = (_2540 * _1881) + _1871;
        float _2546 = (_2540 * _1884) + _1875;
        float _2547 = _2540 * 9.9999997473787516355514526367188e-05;
        float _2548 = (-1.0) - _2547;
        float _2550 = _2547 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2546 > _2550) || ((_2546 < _2548) || ((_2545 > _2550) || ((_2545 < _2548) || ((_2544 < _2548) || (_2544 > _2550))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2780 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2546, cbModelParam._m0[17u].z, fma(_2545, cbModelParam._m0[17u].y, _2544 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2546, cbModelParam._m0[18u].z, fma(_2545, cbModelParam._m0[18u].y, _2544 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2546, cbModelParam._m0[19u].z, fma(_2545, cbModelParam._m0[19u].y, _2544 * cbModelParam._m0[19u].x))), _1813);
            frontier_phi_27_51_ladder = _2780.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2780.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2780.x * cbModelParam._m0[1u].z;
        }
        _1903 = frontier_phi_27_51_ladder_2;
        _1905 = frontier_phi_27_51_ladder_1;
        _1907 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1887 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_886, _887, _888), _1813);
        _1903 = _1887.x * cbModelParam._m0[1u].z;
        _1905 = _1887.y * cbModelParam._m0[1u].z;
        _1907 = _1887.z * cbModelParam._m0[1u].z;
    }
    float _1920 = (((_911 * _863) + _912) * _878) * ((cbModelParam._m0[1u].w * (_1903 - _1804)) + _1804);
    float _1922 = (((_911 * _865) + _912) * _878) * ((cbModelParam._m0[1u].w * (_1905 - _1806)) + _1806);
    float _1924 = (((_911 * _866) + _912) * _878) * ((cbModelParam._m0[1u].w * (_1907 - _1808)) + _1808);
    float _1927 = fma(_1924, cbSceneParam._m0[89u].z, fma(_1922, cbSceneParam._m0[89u].y, _1920 * cbSceneParam._m0[89u].x));
    float _1930 = fma(_1924, cbSceneParam._m0[90u].z, fma(_1922, cbSceneParam._m0[90u].y, _1920 * cbSceneParam._m0[90u].x));
    float _1933 = fma(_1924, cbSceneParam._m0[91u].z, fma(_1922, cbSceneParam._m0[91u].y, _1920 * cbSceneParam._m0[91u].x));
    vec4 _1941 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_800, _801));
    float _1943 = _1941.w;
    float _1955 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1943);
    float _1956 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1943);
    float _1957 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1943);
    uvec4 _1961 = floatBitsToUint(cbInstanceData._m0[_838 + 5u]);
    uint _1963 = _1961.x * 14u;
    uint _1964 = _1963 + 13u;
    float _1971 = _878 + (-1.0);
    float _1976 = (cbLight._m0[_1964].x * _1971) + 1.0;
    float _1977 = (cbLight._m0[_1964].y * _1971) + 1.0;
    float _1978 = (cbLight._m0[_1964].z * _1971) + 1.0;
    float _1979 = (cbLight._m0[_1964].w * _1971) + 1.0;
    uint _1980 = _1963 + 5u;
    float _1986 = isnan(1.0) ? _1977 : (isnan(_1977) ? 1.0 : min(_1977, 1.0));
    uint _1990 = _1963 + 4u;
    float _1999 = isnan(1.0) ? _1976 : (isnan(_1976) ? 1.0 : min(_1976, 1.0));
    uint _2003 = _1963 | 1u;
    float _2014 = dot(vec3(cbLight._m0[_1963].xyz), vec3(_699, _700, _701));
    float _2017 = dot(vec3(cbLight._m0[_2003].xyz), vec3(_699, _700, _701));
    float _4278 = isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0));
    float _4289 = isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0));
    float _2022 = (isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0))) * 0.3183098733425140380859375;
    float _2024 = (isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0))) * 0.3183098733425140380859375;
    float _2031 = ((cbLight._m0[_1980].x * _1986) * _2024) + (((cbLight._m0[_1990].x * _1955) * _1999) * _2022);
    float _2032 = ((_1986 * cbLight._m0[_1980].y) * _2024) + (((cbLight._m0[_1990].y * _1956) * _1999) * _2022);
    float _2033 = ((_1986 * cbLight._m0[_1980].z) * _2024) + (((cbLight._m0[_1990].z * _1957) * _1999) * _2022);
    uvec4 _2037 = floatBitsToUint(cbLight._m0[_1963 + 12u]);
    bool _2039 = _2037.x == 0u;
    float _2050;
    float _2052;
    float _2054;
    if (_2039)
    {
        _2050 = _2031;
        _2052 = _2032;
        _2054 = _2033;
    }
    else
    {
        uint _2058 = _1963 + 6u;
        float _2074 = (dot(vec3(cbLight._m0[_1963 + 2u].xyz), vec3(_699, _700, _701)) * 0.5) + 0.5;
        float _2075 = _2074 * _2074;
        float _4300 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
        float _2076 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
        float _2077 = isnan(1.0) ? _1978 : (isnan(_1978) ? 1.0 : min(_1978, 1.0));
        _2050 = (((cbLight._m0[_2058].x * 0.3183098733425140380859375) * _2076) * _2077) + _2031;
        _2052 = (((cbLight._m0[_2058].y * 0.3183098733425140380859375) * _2076) * _2077) + _2032;
        _2054 = (((cbLight._m0[_2058].z * 0.3183098733425140380859375) * _2076) * _2077) + _2033;
    }
    bool _2057 = _2037.y == 0u;
    float _2095;
    float _2097;
    float _2099;
    if (_2057)
    {
        _2095 = _2050;
        _2097 = _2052;
        _2099 = _2054;
    }
    else
    {
        uint _2268 = _1963 + 7u;
        float _2284 = (dot(vec3(cbLight._m0[_1963 + 3u].xyz), vec3(_699, _700, _701)) * 0.5) + 0.5;
        float _2285 = _2284 * _2284;
        float _4316 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
        float _2286 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
        float _2287 = isnan(1.0) ? _1979 : (isnan(_1979) ? 1.0 : min(_1979, 1.0));
        _2095 = (((cbLight._m0[_2268].x * 0.3183098733425140380859375) * _2286) * _2287) + _2050;
        _2097 = (((cbLight._m0[_2268].y * 0.3183098733425140380859375) * _2286) * _2287) + _2052;
        _2099 = (((cbLight._m0[_2268].z * 0.3183098733425140380859375) * _2286) * _2287) + _2054;
    }
    uint _2102 = _1963 + 8u;
    float _2115 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1963].w)) * _702) * 0.949999988079071044921875);
    float _2116 = _2115 * _2115;
    float _2117 = cbLight._m0[_1963].x + _783;
    float _2118 = cbLight._m0[_1963].y + _784;
    float _2119 = cbLight._m0[_1963].z + _785;
    float _2123 = inversesqrt(dot(vec3(_2117, _2118, _2119), vec3(_2117, _2118, _2119)));
    float _2124 = _2123 * _2117;
    float _2125 = _2123 * _2118;
    float _2126 = _2123 * _2119;
    float _2127 = dot(vec3(_699, _700, _701), vec3(cbLight._m0[_1963].xyz));
    float _4332 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
    float _2130 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
    float _4343 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
    float _2131 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
    float _2132 = dot(vec3(_699, _700, _701), vec3(_2124, _2125, _2126));
    float _4354 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
    float _2135 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
    float _2136 = dot(vec3(cbLight._m0[_1963].xyz), vec3(_2124, _2125, _2126));
    float _4365 = isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0));
    float _2140 = _2116 * _2116;
    float _2144 = ((_2135 * _2135) * (_2140 + (-1.0))) + 1.0;
    float _2152 = exp2(log2(1.0 - (isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0)))) * 5.0);
    float _2153 = 0.959999978542327880859375 - _860;
    float _2155 = 0.959999978542327880859375 - _861;
    float _2156 = 0.959999978542327880859375 - _862;
    float _2163 = 1.0 - _2116;
    float _2174 = (0.5 / (((_2131 * ((_2130 * _2163) + _2116)) + 9.9999999392252902907785028219223e-09) + (((_2131 * _2163) + _2116) * _2130))) * _2130;
    float _4376 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
    float _2176 = (isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0))) * (_2140 / ((_2144 * _2144) * 3.141590118408203125));
    uint _2190 = _1963 + 9u;
    float _2201 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2003].w)) * _702) * 0.949999988079071044921875);
    float _2202 = _2201 * _2201;
    float _2203 = cbLight._m0[_2003].x + _783;
    float _2204 = cbLight._m0[_2003].y + _784;
    float _2205 = cbLight._m0[_2003].z + _785;
    float _2209 = inversesqrt(dot(vec3(_2203, _2204, _2205), vec3(_2203, _2204, _2205)));
    float _2210 = _2209 * _2203;
    float _2211 = _2209 * _2204;
    float _2212 = _2209 * _2205;
    float _2213 = dot(vec3(_699, _700, _701), vec3(cbLight._m0[_2003].xyz));
    float _4387 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
    float _2216 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
    float _2217 = dot(vec3(_699, _700, _701), vec3(_2210, _2211, _2212));
    float _4398 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
    float _2220 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
    float _2221 = dot(vec3(cbLight._m0[_2003].xyz), vec3(_2210, _2211, _2212));
    float _4409 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
    float _2225 = _2202 * _2202;
    float _2229 = ((_2220 * _2220) * (_2225 + (-1.0))) + 1.0;
    float _2236 = exp2(log2(1.0 - (isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0)))) * 5.0);
    float _2243 = 1.0 - _2202;
    float _2253 = (0.5 / (((_2131 * ((_2216 * _2243) + _2202)) + 9.9999999392252902907785028219223e-09) + (((_2131 * _2243) + _2202) * _2216))) * _2216;
    float _4420 = isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0));
    float _2255 = (isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0))) * (_2225 / ((_2229 * _2229) * 3.141590118408203125));
    float _2265 = (((((_2236 * _2153) + _863) * cbLight._m0[_2190].x) * _2255) * _1986) + ((((cbLight._m0[_2102].x * _1955) * ((_2152 * _2153) + _863)) * _2176) * _1999);
    float _2266 = (((((_2236 * _2155) + _865) * cbLight._m0[_2190].y) * _2255) * _1986) + ((((cbLight._m0[_2102].y * _1956) * ((_2152 * _2155) + _865)) * _2176) * _1999);
    float _2267 = (((((_2236 * _2156) + _866) * cbLight._m0[_2190].z) * _2255) * _1986) + ((((cbLight._m0[_2102].z * _1957) * ((_2152 * _2156) + _866)) * _2176) * _1999);
    float _2329;
    float _2331;
    float _2333;
    if (_2039)
    {
        _2329 = _2265;
        _2331 = _2266;
        _2333 = _2267;
    }
    else
    {
        uint _2335 = _1963 + 2u;
        uint _2339 = _1963 + 10u;
        float _2353 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2335].w)) * _702) * 0.949999988079071044921875);
        float _2354 = _2353 * _2353;
        float _2355 = cbLight._m0[_2335].x + _783;
        float _2356 = cbLight._m0[_2335].y + _784;
        float _2357 = cbLight._m0[_2335].z + _785;
        float _2361 = inversesqrt(dot(vec3(_2355, _2356, _2357), vec3(_2355, _2356, _2357)));
        float _2362 = _2361 * _2355;
        float _2363 = _2361 * _2356;
        float _2364 = _2361 * _2357;
        float _2365 = dot(vec3(_699, _700, _701), vec3(cbLight._m0[_2335].xyz));
        float _4431 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
        float _2368 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
        float _2369 = dot(vec3(_699, _700, _701), vec3(_2362, _2363, _2364));
        float _4442 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
        float _2372 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
        float _2373 = dot(vec3(cbLight._m0[_2335].xyz), vec3(_2362, _2363, _2364));
        float _4453 = isnan(0.0) ? _2373 : (isnan(_2373) ? 0.0 : max(_2373, 0.0));
        float _2377 = _2354 * _2354;
        float _2381 = ((_2372 * _2372) * (_2377 + (-1.0))) + 1.0;
        float _2388 = exp2(log2(1.0 - (isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0)))) * 5.0);
        float _2395 = 1.0 - _2354;
        float _2405 = (0.5 / (((_2131 * ((_2368 * _2395) + _2354)) + 9.9999999392252902907785028219223e-09) + (((_2131 * _2395) + _2354) * _2368))) * _2368;
        float _4464 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
        float _2407 = (isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0))) * (_2377 / ((_2381 * _2381) * 3.141590118408203125));
        float _2408 = isnan(1.0) ? _1978 : (isnan(_1978) ? 1.0 : min(_1978, 1.0));
        _2329 = (((((_2388 * _2153) + _863) * cbLight._m0[_2339].x) * _2407) * _2408) + _2265;
        _2331 = (((((_2388 * _2155) + _865) * cbLight._m0[_2339].y) * _2407) * _2408) + _2266;
        _2333 = (((((_2388 * _2156) + _866) * cbLight._m0[_2339].z) * _2407) * _2408) + _2267;
    }
    float _2443;
    float _2445;
    float _2447;
    if (_2057)
    {
        _2443 = _2329;
        _2445 = _2331;
        _2447 = _2333;
    }
    else
    {
        uint _2454 = _1963 + 3u;
        uint _2458 = _1963 + 11u;
        float _2472 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2454].w)) * _702) * 0.949999988079071044921875);
        float _2473 = _2472 * _2472;
        float _2474 = cbLight._m0[_2454].x + _783;
        float _2475 = cbLight._m0[_2454].y + _784;
        float _2476 = cbLight._m0[_2454].z + _785;
        float _2480 = inversesqrt(dot(vec3(_2474, _2475, _2476), vec3(_2474, _2475, _2476)));
        float _2481 = _2480 * _2474;
        float _2482 = _2480 * _2475;
        float _2483 = _2480 * _2476;
        float _2484 = dot(vec3(_699, _700, _701), vec3(cbLight._m0[_2454].xyz));
        float _4480 = isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : max(_2484, 0.0));
        float _2487 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
        float _2488 = dot(vec3(_699, _700, _701), vec3(_2481, _2482, _2483));
        float _4491 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
        float _2491 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
        float _2492 = dot(vec3(cbLight._m0[_2454].xyz), vec3(_2481, _2482, _2483));
        float _4502 = isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : max(_2492, 0.0));
        float _2496 = _2473 * _2473;
        float _2500 = ((_2491 * _2491) * (_2496 + (-1.0))) + 1.0;
        float _2507 = exp2(log2(1.0 - (isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0)))) * 5.0);
        float _2514 = 1.0 - _2473;
        float _2524 = (0.5 / (((_2131 * ((_2487 * _2514) + _2473)) + 9.9999999392252902907785028219223e-09) + (((_2131 * _2514) + _2473) * _2487))) * _2487;
        float _4513 = isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : max(_2524, 0.0));
        float _2526 = (isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0))) * (_2496 / ((_2500 * _2500) * 3.141590118408203125));
        float _2527 = isnan(1.0) ? _1979 : (isnan(_1979) ? 1.0 : min(_1979, 1.0));
        _2443 = (((((_2507 * _2153) + _863) * cbLight._m0[_2458].x) * _2526) * _2527) + _2329;
        _2445 = (((((_2507 * _2155) + _865) * cbLight._m0[_2458].y) * _2526) * _2527) + _2331;
        _2447 = (((((_2507 * _2156) + _866) * cbLight._m0[_2458].z) * _2526) * _2527) + _2333;
    }
    float _2662;
    float _2664;
    float _2666;
    float _2668;
    float _2670;
    float _2672;
    if (_1961.y == 0u)
    {
        float _2602 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2603 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2602;
        float _2604 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2602;
        float _2605 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2602;
        uvec4 _2617 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2618 = _2617.x;
        uint _2629 = uint((float(_2617.y) * floor(float(uint(cbSceneParam._m0[85u].y * _801) / _2618))) + floor(float(uint(cbSceneParam._m0[85u].x * _800) / _2618)));
        float _2639 = (log2(_2605 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2640 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0));
        uint _2643 = uint(isnan(14.0) ? _2640 : (isnan(_2640) ? 14.0 : min(_2640, 14.0)));
        uvec4 _2648 = texelFetch(g_lightClusterGridBuffer, int(((_2643 << 2u) + (_2629 << 6u)) >> 2u));
        uint _2649 = _2648.x;
        uint _2650 = _2617.z;
        float _2785;
        float _2787;
        float _2789;
        float _2791;
        float _2793;
        float _2795;
        if (((((1u << ((_2650 >> 4u) & 15u)) + 4294967295u) & _2649) == 0u) || ((_2650 & 240u) == 0u))
        {
            _2785 = 0.0;
            _2787 = 0.0;
            _2789 = 0.0;
            _2791 = 0.0;
            _2793 = 0.0;
            _2795 = 0.0;
        }
        else
        {
            float _2786;
            float _2788;
            float _2790;
            float _2792;
            float _2794;
            float _2796;
            float _2947 = 0.0;
            float _2948 = 0.0;
            float _2949 = 0.0;
            float _2950 = 0.0;
            float _2951 = 0.0;
            float _2952 = 0.0;
            uint _2953 = 0u;
            uint _2962;
            bool _2963;
            for (;;)
            {
                _2962 = texelFetch(g_lightClassification, int((((_2643 << 5u) + (_2629 << 9u)) + (_2953 << 2u)) >> 2u)).x;
                _2963 = _2962 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2963)
                {
                    frontier_phi_68_pred = _2947;
                    frontier_phi_68_pred_1 = _2952;
                    frontier_phi_68_pred_2 = _2951;
                    frontier_phi_68_pred_3 = _2950;
                    frontier_phi_68_pred_4 = _2949;
                    frontier_phi_68_pred_5 = _2948;
                }
                else
                {
                    float _3092;
                    float _3093;
                    float _3094;
                    float _3095;
                    float _3096;
                    float _3097;
                    uint _3098;
                    _3092 = _2947;
                    _3093 = _2948;
                    _3094 = _2949;
                    _3095 = _2950;
                    _3096 = _2951;
                    _3097 = _2952;
                    _3098 = _2962;
                    float _3019;
                    float _3020;
                    float _3021;
                    float _3022;
                    float _3023;
                    float _3024;
                    for (;;)
                    {
                        uint _3102 = uint(findLSB(_3098)) + (_2953 << 5u);
                        uint _3099 = (_3098 + 4294967295u) & _3098;
                        uint _3104 = _3102 * 48u;
                        vec4 _3118 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3104)).x, texelFetch(g_PointLightRenderingBuffer, int(_3104 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3104 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3104 + 3u)).x));
                        uint _3124 = (_3102 * 48u) + 4u;
                        vec4 _3137 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3124)).x, texelFetch(g_PointLightRenderingBuffer, int(_3124 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3124 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3124 + 3u)).x));
                        uint _3143 = (_3102 * 48u) + 8u;
                        vec3 _3154 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3143)).x, texelFetch(g_PointLightRenderingBuffer, int(_3143 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3143 + 2u)).x));
                        float _3158 = _3118.x - _2603;
                        float _3159 = _3118.y - _2604;
                        float _3160 = _3118.z - _2605;
                        float _3161 = dot(vec3(_3158, _3159, _3160), vec3(_3158, _3159, _3160));
                        float _3164 = inversesqrt(_3161);
                        float _3165 = _3164 * _3158;
                        float _3166 = _3164 * _3159;
                        float _3167 = _3164 * _3160;
                        float _3168 = dot(vec3(_819, _822, _825), vec3(_3165, _3166, _3167));
                        float _3173 = 1.0 - (_3161 * _3118.w);
                        float _4539 = isnan(0.0) ? _3173 : (isnan(_3173) ? 0.0 : max(_3173, 0.0));
                        float _3174 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
                        float _3175 = sqrt(_3161) * _3137.w;
                        float _3178 = 1.39999997615814208984375 / (_3175 + 1.39999997615814208984375);
                        float _3179 = _3178 * _3178;
                        float _3182 = ((1.0 - _3179) * _3168) + _3179;
                        float _3185 = _3175 * _3175;
                        float _3189 = ((isnan(0.0) ? _3182 : (isnan(_3182) ? 0.0 : max(_3182, 0.0))) * _3174) / ((_3185 * 0.699999988079071044921875) + 1.0);
                        float _3193 = (-0.0) - _2603;
                        float _3194 = (-0.0) - _2604;
                        float _3195 = (-0.0) - _2605;
                        float _3199 = inversesqrt(dot(vec3(_3193, _3194, _3195), vec3(_3193, _3194, _3195)));
                        float _3200 = _3199 * _3193;
                        float _3201 = _3199 * _3194;
                        float _3202 = _3199 * _3195;
                        float _3210 = exp2(log2(1.0 / ((_3185 * 3.5) + 5.0)) * 0.25);
                        float _3211 = 1.0 - _894;
                        float _3218 = sqrt(1.0 - ((1.0 - (_3211 * _3211)) * (1.0 - (_3210 * _3210))));
                        float _3219 = _3218 * _3218;
                        float _3220 = _3219 * _3219;
                        float _3221 = _3200 + _3165;
                        float _3222 = _3201 + _3166;
                        float _3223 = _3202 + _3167;
                        float _3227 = inversesqrt(dot(vec3(_3221, _3222, _3223), vec3(_3221, _3222, _3223)));
                        float _3231 = dot(vec3(_819, _822, _825), vec3(_3200, _3201, _3202));
                        float _4555 = isnan(0.0) ? _3231 : (isnan(_3231) ? 0.0 : max(_3231, 0.0));
                        float _3234 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
                        float _3235 = dot(vec3(_819, _822, _825), vec3(_3227 * _3221, _3227 * _3222, _3227 * _3223));
                        float _4566 = isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : max(_3235, 0.0));
                        float _3238 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
                        float _3242 = ((_3238 * _3238) * (_3220 + (-1.0))) + 1.0;
                        float _3243 = _3178 * _3219;
                        float _3244 = _3243 * _3243;
                        float _3247 = ((1.0 - _3244) * _3168) + _3244;
                        float _4577 = isnan(0.0) ? _3247 : (isnan(_3247) ? 0.0 : max(_3247, 0.0));
                        float _3248 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
                        float _3249 = 1.0 - _3219;
                        float _3259 = (0.5 / (((_3248 * ((_3234 * _3249) + _3219)) + 9.9999999392252902907785028219223e-09) + (((_3248 * _3249) + _3219) * _3234))) * _3248;
                        float _4588 = isnan(0.0) ? _3259 : (isnan(_3259) ? 0.0 : max(_3259, 0.0));
                        float _3270 = (((_3220 * 3.1415927410125732421875) * (isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0)))) / ((_3242 * _3242) * ((_3185 * 2.1991131305694580078125) + 3.141590118408203125))) * _3174;
                        _3022 = (_3189 * _3137.x) + _3095;
                        _3023 = (_3189 * _3137.y) + _3096;
                        _3024 = (_3189 * _3137.z) + _3097;
                        _3019 = (_3270 * _3154.x) + _3092;
                        _3020 = (_3270 * _3154.y) + _3093;
                        _3021 = (_3270 * _3154.z) + _3094;
                        if (_3099 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3092 = _3019;
                            _3093 = _3020;
                            _3094 = _3021;
                            _3095 = _3022;
                            _3096 = _3023;
                            _3097 = _3024;
                            _3098 = _3099;
                        }
                    }
                    frontier_phi_68_pred = _3019;
                    frontier_phi_68_pred_1 = _3024;
                    frontier_phi_68_pred_2 = _3023;
                    frontier_phi_68_pred_3 = _3022;
                    frontier_phi_68_pred_4 = _3021;
                    frontier_phi_68_pred_5 = _3020;
                }
                _2786 = frontier_phi_68_pred;
                _2796 = frontier_phi_68_pred_1;
                _2794 = frontier_phi_68_pred_2;
                _2792 = frontier_phi_68_pred_3;
                _2790 = frontier_phi_68_pred_4;
                _2788 = frontier_phi_68_pred_5;
                uint _2954 = _2953 + 1u;
                if (_2954 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2947 = _2786;
                    _2948 = _2788;
                    _2949 = _2790;
                    _2950 = _2792;
                    _2951 = _2794;
                    _2952 = _2796;
                    _2953 = _2954;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2785 = _2786;
            _2787 = _2788;
            _2789 = _2790;
            _2791 = _2792;
            _2793 = _2794;
            _2795 = _2796;
        }
        uvec4 _2799 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2800 = _2799.z;
        uint _2802 = (_2800 >> 8u) & 15u;
        float _2915;
        float _2917;
        float _2919;
        float _2921;
        float _2923;
        float _2925;
        if (((4294967295u << _2802) & _2649) == 0u)
        {
            _2915 = _2785;
            _2917 = _2787;
            _2919 = _2789;
            _2921 = _2791;
            _2923 = _2793;
            _2925 = _2795;
        }
        else
        {
            float _2940 = inversesqrt(dot(vec3(_2603, _2604, _2605), vec3(_2603, _2604, _2605)));
            float _2941 = _2940 * _2603;
            float _2942 = _2940 * _2604;
            float _2943 = _2940 * _2605;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2802 < ((_2800 >> 12u) & 15u))
            {
                float _2916;
                float _2918;
                float _2920;
                float _2922;
                float _2924;
                float _2926;
                float _3075 = _2785;
                float _3076 = _2787;
                float _3077 = _2789;
                float _3078 = _2791;
                float _3079 = _2793;
                float _3080 = _2795;
                uint _3081 = _2802;
                uint _3090;
                bool _3091;
                for (;;)
                {
                    _3090 = texelFetch(g_lightClassification, int((((_2643 << 5u) + (_2629 << 9u)) + (_3081 << 2u)) >> 2u)).x;
                    _3091 = _3090 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3091)
                    {
                        frontier_phi_79_pred = _3080;
                        frontier_phi_79_pred_1 = _3079;
                        frontier_phi_79_pred_2 = _3078;
                        frontier_phi_79_pred_3 = _3077;
                        frontier_phi_79_pred_4 = _3076;
                        frontier_phi_79_pred_5 = _3075;
                    }
                    else
                    {
                        float _3284;
                        float _3285;
                        float _3286;
                        float _3287;
                        float _3288;
                        float _3289;
                        float _3577;
                        float _3578;
                        float _3579;
                        float _3580;
                        float _3581;
                        float _3582;
                        float _3297 = _3075;
                        float _3298 = _3076;
                        float _3299 = _3077;
                        float _3300 = _3078;
                        float _3301 = _3079;
                        float _3302 = _3080;
                        uint _3303 = _3090;
                        uint _3304;
                        vec4 _3329;
                        float _3330;
                        vec4 _3345;
                        vec3 _3357;
                        vec4 _3372;
                        vec4 _3387;
                        float _3433;
                        bool _3434;
                        for (;;)
                        {
                            uint _3314 = ((_3081 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3303));
                            _3304 = (_3303 + 4294967295u) & _3303;
                            uint _3316 = _3314 * 40u;
                            _3329 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3316)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 3u)).x));
                            _3330 = _3329.w;
                            uint _3332 = (_3314 * 40u) + 4u;
                            _3345 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3332)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 3u)).x));
                            uint _3347 = (_3314 * 40u) + 8u;
                            _3357 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3347)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 2u)).x));
                            uint _3359 = (_3314 * 40u) + 16u;
                            _3372 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3359)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 3u)).x));
                            uint _3374 = (_3314 * 40u) + 20u;
                            _3387 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3374)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 3u)).x));
                            uint _3389 = (_3314 * 40u) + 24u;
                            vec4 _3402 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3389)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 3u)).x));
                            uint _3408 = (_3314 * 40u) + 28u;
                            vec4 _3421 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3408)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 3u)).x));
                            _3433 = fma(_2605, _3421.z, fma(_2604, _3421.y, _3421.x * _2603)) + _3421.w;
                            _3434 = !((fma(_2605, _3402.z, fma(_2604, _3402.y, _3402.x * _2603)) + _3402.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3434)
                            {
                                float _3461 = _3329.x - _2603;
                                float _3462 = _3329.y - _2604;
                                float _3463 = _3329.z - _2605;
                                float _3464 = dot(vec3(_3461, _3462, _3463), vec3(_3461, _3462, _3463));
                                float _3467 = inversesqrt(_3464);
                                float _3468 = _3467 * _3461;
                                float _3469 = _3467 * _3462;
                                float _3470 = _3467 * _3463;
                                float _3474 = 1.0 - (_3464 / (_3330 * _3330));
                                float _4599 = isnan(0.0) ? _3474 : (isnan(_3474) ? 0.0 : max(_3474, 0.0));
                                float _3475 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
                                float _3479 = sqrt(_3464) * _3345.w;
                                float _3481 = 1.39999997615814208984375 / (_3479 + 1.39999997615814208984375);
                                float _3482 = _3481 * _3481;
                                float _3485 = ((1.0 - _3482) * dot(vec3(_3468, _3469, _3470), vec3(_819, _822, _825))) + _3482;
                                float _3488 = _3479 * _3479;
                                float _3492 = (fma(_2605, _3372.z, fma(_2604, _3372.y, _3372.x * _2603)) + _3372.w) / _3433;
                                float _3493 = (fma(_2605, _3387.z, fma(_2604, _3387.y, _3387.x * _2603)) + _3387.w) / _3433;
                                float _3497 = 1.0 - dot(vec2(_3492, _3493), vec2(_3492, _3493));
                                float _4615 = isnan(0.0) ? _3497 : (isnan(_3497) ? 0.0 : max(_3497, 0.0));
                                float _3498 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
                                float _3499 = _3498 * (((isnan(0.0) ? _3485 : (isnan(_3485) ? 0.0 : max(_3485, 0.0))) * _3475) / ((_3488 * 0.699999988079071044921875) + 1.0));
                                float _3511 = exp2(log2(1.0 / ((_3488 * 3.5) + 5.0)) * 0.25);
                                float _3512 = 1.0 - _894;
                                float _3519 = sqrt(1.0 - ((1.0 - (_3512 * _3512)) * (1.0 - (_3511 * _3511))));
                                float _3520 = _3519 * _3519;
                                float _3521 = _3520 * _3520;
                                float _3522 = _3468 - _2941;
                                float _3523 = _3469 - _2942;
                                float _3524 = _3470 - _2943;
                                float _3528 = inversesqrt(dot(vec3(_3522, _3523, _3524), vec3(_3522, _3523, _3524)));
                                float _3532 = dot(vec3(_819, _822, _825), vec3((-0.0) - _2941, (-0.0) - _2942, (-0.0) - _2943));
                                float _4626 = isnan(0.0) ? _3532 : (isnan(_3532) ? 0.0 : max(_3532, 0.0));
                                float _3535 = isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0));
                                float _3536 = dot(vec3(_819, _822, _825), vec3(_3528 * _3522, _3528 * _3523, _3528 * _3524));
                                float _4637 = isnan(0.0) ? _3536 : (isnan(_3536) ? 0.0 : max(_3536, 0.0));
                                float _3539 = isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0));
                                float _3543 = ((_3539 * _3539) * (_3521 + (-1.0))) + 1.0;
                                float _3544 = _3481 * _3520;
                                float _3545 = _3544 * _3544;
                                float _3551 = ((1.0 - _3545) * dot(vec3(_819, _822, _825), vec3(_3468, _3469, _3470))) + _3545;
                                float _4648 = isnan(0.0) ? _3551 : (isnan(_3551) ? 0.0 : max(_3551, 0.0));
                                float _3552 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
                                float _3553 = 1.0 - _3520;
                                float _3563 = (0.5 / (((_3552 * ((_3535 * _3553) + _3520)) + 9.9999999392252902907785028219223e-09) + (((_3552 * _3553) + _3520) * _3535))) * _3552;
                                float _4659 = isnan(0.0) ? _3563 : (isnan(_3563) ? 0.0 : max(_3563, 0.0));
                                float _3573 = (_3498 * _3475) * (((_3521 * 3.1415927410125732421875) * (isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0)))) / ((_3543 * _3543) * ((_3488 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3499 * _3345.y;
                                frontier_phi_85_pred_1 = _3499 * _3345.x;
                                frontier_phi_85_pred_2 = _3573 * _3357.z;
                                frontier_phi_85_pred_3 = _3573 * _3357.y;
                                frontier_phi_85_pred_4 = _3573 * _3357.x;
                                frontier_phi_85_pred_5 = _3499 * _3345.z;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3581 = frontier_phi_85_pred;
                            _3580 = frontier_phi_85_pred_1;
                            _3579 = frontier_phi_85_pred_2;
                            _3578 = frontier_phi_85_pred_3;
                            _3577 = frontier_phi_85_pred_4;
                            _3582 = frontier_phi_85_pred_5;
                            _3287 = _3580 + _3300;
                            _3288 = _3581 + _3301;
                            _3289 = _3582 + _3302;
                            _3284 = _3577 + _3297;
                            _3285 = _3578 + _3298;
                            _3286 = _3579 + _3299;
                            if (_3304 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3297 = _3284;
                                _3298 = _3285;
                                _3299 = _3286;
                                _3300 = _3287;
                                _3301 = _3288;
                                _3302 = _3289;
                                _3303 = _3304;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3289;
                        frontier_phi_79_pred_1 = _3288;
                        frontier_phi_79_pred_2 = _3287;
                        frontier_phi_79_pred_3 = _3286;
                        frontier_phi_79_pred_4 = _3285;
                        frontier_phi_79_pred_5 = _3284;
                    }
                    _2926 = frontier_phi_79_pred;
                    _2924 = frontier_phi_79_pred_1;
                    _2922 = frontier_phi_79_pred_2;
                    _2920 = frontier_phi_79_pred_3;
                    _2918 = frontier_phi_79_pred_4;
                    _2916 = frontier_phi_79_pred_5;
                    uint _3082 = _3081 + 1u;
                    if (_3082 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3075 = _2916;
                        _3076 = _2918;
                        _3077 = _2920;
                        _3078 = _2922;
                        _3079 = _2924;
                        _3080 = _2926;
                        _3081 = _3082;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2920;
                frontier_phi_60_61_ladder_1 = _2926;
                frontier_phi_60_61_ladder_2 = _2924;
                frontier_phi_60_61_ladder_3 = _2922;
                frontier_phi_60_61_ladder_4 = _2918;
                frontier_phi_60_61_ladder_5 = _2916;
            }
            else
            {
                frontier_phi_60_61_ladder = _2789;
                frontier_phi_60_61_ladder_1 = _2795;
                frontier_phi_60_61_ladder_2 = _2793;
                frontier_phi_60_61_ladder_3 = _2791;
                frontier_phi_60_61_ladder_4 = _2787;
                frontier_phi_60_61_ladder_5 = _2785;
            }
            _2915 = frontier_phi_60_61_ladder_5;
            _2917 = frontier_phi_60_61_ladder_4;
            _2919 = frontier_phi_60_61_ladder;
            _2921 = frontier_phi_60_61_ladder_3;
            _2923 = frontier_phi_60_61_ladder_2;
            _2925 = frontier_phi_60_61_ladder_1;
        }
        float _2930 = isnan(1.0) ? _878 : (isnan(_878) ? 1.0 : min(_878, 1.0));
        _2662 = (_2930 * _2921) + _2095;
        _2664 = (_2930 * _2923) + _2097;
        _2666 = (_2930 * _2925) + _2099;
        _2668 = ((_2915 * _863) * _2930) + _2443;
        _2670 = ((_2917 * _865) * _2930) + _2445;
        _2672 = ((_2919 * _866) * _2930) + _2447;
    }
    else
    {
        _2662 = _2095;
        _2664 = _2097;
        _2666 = _2099;
        _2668 = _2443;
        _2670 = _2445;
        _2672 = _2447;
    }
    uint _2678 = _839 + uint(cbMatDynParam._m0[0u].w);
    float _2686 = ((cbMtdParam._m0[20u].x * cbMtdParam._m0[25u].x) * _629.x) * cbInstanceData._m0[_2678].x;
    float _2689 = ((cbMtdParam._m0[20u].y * cbMtdParam._m0[25u].x) * _629.y) * cbInstanceData._m0[_2678].y;
    float _2692 = ((cbMtdParam._m0[20u].z * cbMtdParam._m0[25u].x) * _629.z) * cbInstanceData._m0[_2678].z;
    float _4675 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
    float _4686 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
    float _4697 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
    float _2709 = (((isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0))) * (_2662 + ((isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0))) * _878))) + ((_2668 + ((isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0))) * _1712)) * cbPerFrame._m0[3u].x)) + _2686;
    float _2711 = (_2689 + ((_2670 + ((isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0))) * _1712)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0))) * (_2664 + ((isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0))) * _878)));
    float _2713 = (_2692 + ((_2672 + ((isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0))) * _1712)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0))) * (_2666 + ((isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0))) * _878)));
    float _2714 = isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : max(_2709, 0.0));
    float _2715 = isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0));
    float _2716 = isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0));
    float _2722 = cbMtdParam._m0[2u].x * _2686;
    float _2723 = cbMtdParam._m0[2u].y * _2689;
    float _2724 = cbMtdParam._m0[2u].z * _2692;
    float _4723 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2726 = isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0));
    uint _2727 = _838 + 6u;
    float _2735 = _800 / cbSceneParam._m0[86u].x;
    float _2736 = _801 / cbSceneParam._m0[86u].y;
    vec4 _2750 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2735, _2736, (log2((isnan(cbSceneParam._m0[77u].w) ? _726 : (isnan(_726) ? cbSceneParam._m0[77u].w : min(_726, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2752 = _2750.x;
    float _2753 = _2750.y;
    float _2754 = _2750.z;
    float _2755 = _2750.w;
    float _2848;
    float _2850;
    float _2852;
    float _2854;
    if (_726 > cbSceneParam._m0[78u].w)
    {
        float _2810 = isnan(_726) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _726 : min(cbSceneParam._m0[80u].w, _726));
        float _2811 = _2810 / _726;
        float _2822 = _2811 * _776;
        float _2823 = _777 * _2811;
        float _2824 = (-0.0) - _2823;
        float _2826 = _2811 * _778;
        float _2828 = (cbSceneParam._m0[77u].w * _2824) / _2810;
        float _2829 = _2828 + cbSceneParam._m0[79u].w;
        float _2830 = cbSceneParam._m0[79u].w - _2823;
        float _2836 = sqrt(((_2822 * _2822) + (_2823 * _2823)) + (_2826 * _2826));
        float _2839 = (1.0 - (cbSceneParam._m0[77u].w / _2810)) * _2836;
        float _2844 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2846 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3032;
        if (abs((_2824 - _2828) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3032 = ((((_2829 > 0.0) ? exp2(_2844 * _2829) : (2.0 - exp2(_2846 * _2829))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2839;
        }
        else
        {
            float _2976 = 1.0 / cbSceneParam._m0[80u].x;
            float _2977 = isnan(_2830) ? _2829 : (isnan(_2829) ? _2830 : max(_2829, _2830));
            float _2978 = isnan(_2830) ? _2829 : (isnan(_2829) ? _2830 : min(_2829, _2830));
            float _2987 = isnan(0.0) ? _2977 : (isnan(_2977) ? 0.0 : min(_2977, 0.0));
            float _2988 = isnan(0.0) ? _2978 : (isnan(_2978) ? 0.0 : min(_2978, 0.0));
            _3032 = ((abs(_2836 / _2824) * cbSceneParam._m0[80u].y) * ((((_2987 - _2988) * 2.0) - ((exp2(_2844 * (isnan(0.0) ? _2977 : (isnan(_2977) ? 0.0 : max(_2977, 0.0)))) - exp2(_2844 * (isnan(0.0) ? _2978 : (isnan(_2978) ? 0.0 : max(_2978, 0.0))))) * _2976)) - ((exp2(_2846 * _2987) - exp2(_2846 * _2988)) * _2976))) + (_2839 * cbSceneParam._m0[80u].z);
        }
        vec4 _3034 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2735, _2736, 1.0), 0.0);
        float _3043 = exp2((_3032 * (-1.44269502162933349609375)) * (1.0 - _3034.w));
        float _3044 = log2(_3043);
        float _3060 = log2(_2755);
        _2848 = (exp2(_3060 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3044 * cbSceneParam._m0[78u].x)) * _3034.x) / cbSceneParam._m0[78u].x)) + _2752;
        _2850 = (exp2(_3060 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3044 * cbSceneParam._m0[78u].y)) * _3034.y) / cbSceneParam._m0[78u].y)) + _2753;
        _2852 = (exp2(_3060 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3044 * cbSceneParam._m0[78u].z)) * _3034.z) / cbSceneParam._m0[78u].z)) + _2754;
        _2854 = _3043 * _2755;
    }
    else
    {
        _2848 = _2752;
        _2850 = _2753;
        _2852 = _2754;
        _2854 = _2755;
    }
    bool _3070;
    vec4 _2864;
    vec4 _2886;
    float _2888;
    float _2892;
    float _2893;
    float _2894;
    float _2897;
    float _2900;
    float _2903;
    float _2904;
    bool _2914;
    for (;;)
    {
        _2864 = cbMatDynParam._m0[0u];
        float _2866 = roundEven(_2864.y);
        bool _2867 = _2866 == 3.0;
        float _2868 = log2(_2854);
        float _2872 = exp2(_2868 * cbSceneParam._m0[78u].x);
        float _2873 = exp2(_2868 * cbSceneParam._m0[78u].y);
        float _2874 = exp2(_2868 * cbSceneParam._m0[78u].z);
        float _2875 = _2872 * _2714;
        float _2876 = _2873 * _2715;
        float _2877 = _2874 * _2716;
        float _2884 = _789 + (-0.5);
        _2886 = cbMtdParam._m0[1u];
        _2888 = _2886.y * _2884;
        float _2891 = (_2866 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2892 = _2891 * (_2867 ? _2875 : (_2875 + (cbSceneParam._m0[72u].w * _2848)));
        _2893 = _2891 * (_2867 ? _2876 : (_2876 + (cbSceneParam._m0[72u].w * _2850)));
        _2894 = _2891 * (_2867 ? _2877 : (_2877 + (cbSceneParam._m0[72u].w * _2852)));
        _2897 = ((_2722 * _2726) * _2872) * _2891;
        _2900 = ((_2723 * _2726) * _2873) * _2891;
        _2903 = ((_2724 * _2726) * _2874) * _2891;
        _2904 = _2884 * 0.999000012874603271484375;
        _2914 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2914)
        {
            if ((cbInstanceData._m0[_838 + 7u].x + _2904) < 0.5)
            {
                _3070 = true;
                break;
            }
        }
        uint _3011 = _839 + uint(_2864.w);
        if ((cbInstanceData._m0[_3011].w < 1.0) && ((cbInstanceData._m0[_3011].w + _2904) < 0.5))
        {
            _3070 = true;
            break;
        }
        if ((_2888 + 1.0) < _2886.x)
        {
            _3070 = true;
            break;
        }
        _3070 = false;
        break;
    }
    float _3275;
    if (_3070)
    {
        discard_state = true;
        _3275 = 0.0;
    }
    else
    {
        _3275 = cbInstanceData._m0[_2727].w;
    }
    SV_Target.x = _2892;
    SV_Target.y = _2893;
    SV_Target.z = _2894;
    SV_Target.w = _3275;
    SV_Target_1.x = _2897;
    SV_Target_1.y = _2900;
    SV_Target_1.z = _2903;
    SV_Target_1.w = cbInstanceData._m0[_2727].w;
    discard_exit();
}


